easy.c:sigpipe_ignore:
   44|    886|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|    886|  ig->no_signal = data->set.no_signal;
   48|    886|  if(!data->set.no_signal) {
   49|    886|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|    886|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|    886|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|    886|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|    886|    action.sa_handler = SIG_IGN;
   56|    886|    sigaction(SIGPIPE, &action, NULL);
   57|    886|  }
   58|    886|}
easy.c:sigpipe_restore:
   66|    886|{
   67|    886|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|    886|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|    886|}
multi.c:sigpipe_ignore:
   44|  1.40k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  1.40k|  ig->no_signal = data->set.no_signal;
   48|  1.40k|  if(!data->set.no_signal) {
   49|  1.40k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  1.40k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  1.40k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  1.40k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  1.40k|    action.sa_handler = SIG_IGN;
   56|  1.40k|    sigaction(SIGPIPE, &action, NULL);
   57|  1.40k|  }
   58|  1.40k|}
multi.c:sigpipe_restore:
   66|  1.40k|{
   67|  1.40k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  1.40k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  1.40k|}
conncache.c:sigpipe_ignore:
   44|    811|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|    811|  ig->no_signal = data->set.no_signal;
   48|    811|  if(!data->set.no_signal) {
   49|    811|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|    811|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|    811|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|    811|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|    811|    action.sa_handler = SIG_IGN;
   56|    811|    sigaction(SIGPIPE, &action, NULL);
   57|    811|  }
   58|    811|}
conncache.c:sigpipe_restore:
   66|    811|{
   67|    811|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|    811|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|    811|}

Curl_altsvc_cleanup:
  306|  1.66k|{
  307|  1.66k|  struct Curl_llist_element *e;
  308|  1.66k|  struct Curl_llist_element *n;
  309|  1.66k|  if(*altsvcp) {
  310|      0|    struct altsvcinfo *altsvc = *altsvcp;
  311|      0|    for(e = altsvc->list.head; e; e = n) {
  312|      0|      struct altsvc *as = e->ptr;
  313|      0|      n = e->next;
  314|      0|      altsvc_free(as);
  315|      0|    }
  316|      0|    free(altsvc->filename);
  317|      0|    free(altsvc);
  318|      0|    *altsvcp = NULL; /* clear the pointer */
  319|      0|  }
  320|  1.66k|}
Curl_altsvc_save:
  327|  1.66k|{
  328|  1.66k|  struct Curl_llist_element *e;
  329|  1.66k|  struct Curl_llist_element *n;
  330|  1.66k|  CURLcode result = CURLE_OK;
  331|  1.66k|  FILE *out;
  332|  1.66k|  char *tempstore;
  333|  1.66k|  unsigned char randsuffix[9];
  334|       |
  335|  1.66k|  if(!altsvc)
  336|       |    /* no cache activated */
  337|  1.66k|    return CURLE_OK;
  338|       |
  339|       |  /* if not new name is given, use the one we stored from the load */
  340|      0|  if(!file && altsvc->filename)
  341|      0|    file = altsvc->filename;
  342|       |
  343|      0|  if((altsvc->flags & CURLALTSVC_READONLYFILE) || !file || !file[0])
  344|       |    /* marked as read-only, no file or zero length file name */
  345|      0|    return CURLE_OK;
  346|       |
  347|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  348|      0|    return CURLE_FAILED_INIT;
  349|       |
  350|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  351|      0|  if(!tempstore)
  352|      0|    return CURLE_OUT_OF_MEMORY;
  353|       |
  354|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  355|      0|  if(!out)
  356|      0|    result = CURLE_WRITE_ERROR;
  357|      0|  else {
  358|      0|    fputs("# Your alt-svc cache. https://curl.se/docs/alt-svc.html\n"
  359|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  360|      0|          out);
  361|      0|    for(e = altsvc->list.head; e; e = n) {
  362|      0|      struct altsvc *as = e->ptr;
  363|      0|      n = e->next;
  364|      0|      result = altsvc_out(as, out);
  365|      0|      if(result)
  366|      0|        break;
  367|      0|    }
  368|      0|    fclose(out);
  369|      0|    if(!result && Curl_rename(tempstore, file))
  370|      0|      result = CURLE_WRITE_ERROR;
  371|       |
  372|      0|    if(result)
  373|      0|      unlink(tempstore);
  374|      0|  }
  375|      0|  free(tempstore);
  376|      0|  return result;
  377|      0|}

Curl_resolver_global_init:
   92|      1|{
   93|      1|  return CURLE_OK;
   94|      1|}
Curl_resolver_init:
  112|  1.66k|{
  113|  1.66k|  (void)easy;
  114|  1.66k|  *resolver = calloc(1, sizeof(struct resdata));
  115|  1.66k|  if(!*resolver)
  116|      0|    return CURLE_OUT_OF_MEMORY;
  117|  1.66k|  return CURLE_OK;
  118|  1.66k|}
Curl_resolver_cleanup:
  127|  1.66k|{
  128|  1.66k|  free(resolver);
  129|  1.66k|}
Curl_resolver_cancel:
  148|  1.21k|{
  149|  1.21k|  destroy_async_data(&data->state.async);
  150|  1.21k|}
Curl_resolver_kill:
  531|    524|{
  532|    524|  struct thread_data *td = data->state.async.tdata;
  533|       |
  534|       |  /* If we're still resolving, we must wait for the threads to fully clean up,
  535|       |     unfortunately.  Otherwise, we can simply cancel to clean up any resolver
  536|       |     data. */
  537|    524|  if(td && td->thread_hnd != curl_thread_t_null)
  538|      0|    (void)thread_wait_resolv(data, NULL, FALSE);
  539|    524|  else
  540|    524|    Curl_resolver_cancel(data);
  541|    524|}
Curl_resolver_wait_resolv:
  558|      3|{
  559|      3|  return thread_wait_resolv(data, entry, TRUE);
  560|      3|}
Curl_resolver_is_resolved:
  569|      3|{
  570|      3|  struct thread_data *td = data->state.async.tdata;
  571|      3|  int done = 0;
  572|       |
  573|      3|  DEBUGASSERT(entry);
  574|      3|  *entry = NULL;
  575|       |
  576|      3|  if(!td) {
  577|      0|    DEBUGASSERT(td);
  578|      0|    return CURLE_COULDNT_RESOLVE_HOST;
  579|      0|  }
  580|       |
  581|      3|  Curl_mutex_acquire(td->tsd.mtx);
  582|      3|  done = td->tsd.done;
  583|      3|  Curl_mutex_release(td->tsd.mtx);
  584|       |
  585|      3|  if(done) {
  586|      0|    getaddrinfo_complete(data);
  587|       |
  588|      0|    if(!data->state.async.dns) {
  589|      0|      CURLcode result = Curl_resolver_error(data);
  590|      0|      destroy_async_data(&data->state.async);
  591|      0|      return result;
  592|      0|    }
  593|      0|    destroy_async_data(&data->state.async);
  594|      0|    *entry = data->state.async.dns;
  595|      0|  }
  596|      3|  else {
  597|       |    /* poll for name lookup done with exponential backoff up to 250ms */
  598|       |    /* should be fine even if this converts to 32 bit */
  599|      3|    timediff_t elapsed = Curl_timediff(Curl_now(),
  600|      3|                                       data->progress.t_startsingle);
  601|      3|    if(elapsed < 0)
  602|      0|      elapsed = 0;
  603|       |
  604|      3|    if(td->poll_interval == 0)
  605|       |      /* Start at 1ms poll interval */
  606|      3|      td->poll_interval = 1;
  607|      0|    else if(elapsed >= td->interval_end)
  608|       |      /* Back-off exponentially if last interval expired  */
  609|      0|      td->poll_interval *= 2;
  610|       |
  611|      3|    if(td->poll_interval > 250)
  612|      0|      td->poll_interval = 250;
  613|       |
  614|      3|    td->interval_end = elapsed + td->poll_interval;
  615|      3|    Curl_expire(data, td->poll_interval, EXPIRE_ASYNC_NAME);
  616|      3|  }
  617|       |
  618|      3|  return CURLE_OK;
  619|      3|}
Curl_resolver_getaddrinfo:
  695|      3|{
  696|      3|  struct addrinfo hints;
  697|      3|  int pf = PF_INET;
  698|      3|  struct resdata *reslv = (struct resdata *)data->state.async.resolver;
  699|       |
  700|      3|  *waitp = 0; /* default to synchronous response */
  701|       |
  702|      3|#ifdef CURLRES_IPV6
  703|      3|  if(Curl_ipv6works(data))
  704|       |    /* The stack seems to be IPv6-enabled */
  705|      3|    pf = PF_UNSPEC;
  706|      3|#endif /* CURLRES_IPV6 */
  707|       |
  708|      3|  memset(&hints, 0, sizeof(hints));
  709|      3|  hints.ai_family = pf;
  710|      3|  hints.ai_socktype = (data->conn->transport == TRNSPRT_TCP)?
  711|      3|    SOCK_STREAM : SOCK_DGRAM;
  712|       |
  713|      3|  reslv->start = Curl_now();
  714|       |  /* fire up a new resolver thread! */
  715|      3|  if(init_resolve_thread(data, hostname, port, &hints)) {
  716|      3|    *waitp = 1; /* expect asynchronous response */
  717|      3|    return NULL;
  718|      3|  }
  719|       |
  720|      0|  failf(data, "getaddrinfo() thread failed to start");
  721|      0|  return NULL;
  722|       |
  723|      3|}
asyn-thread.c:destroy_async_data:
  380|  1.21k|{
  381|  1.21k|  if(async->tdata) {
  382|      3|    struct thread_data *td = async->tdata;
  383|      3|    int done;
  384|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  385|      3|    curl_socket_t sock_rd = td->tsd.sock_pair[0];
  386|      3|    struct Curl_easy *data = td->tsd.data;
  387|      3|#endif
  388|       |
  389|       |    /*
  390|       |     * if the thread is still blocking in the resolve syscall, detach it and
  391|       |     * let the thread do the cleanup...
  392|       |     */
  393|      3|    Curl_mutex_acquire(td->tsd.mtx);
  394|      3|    done = td->tsd.done;
  395|      3|    td->tsd.done = 1;
  396|      3|    Curl_mutex_release(td->tsd.mtx);
  397|       |
  398|      3|    if(!done) {
  399|      0|      Curl_thread_destroy(td->thread_hnd);
  400|      0|    }
  401|      3|    else {
  402|      3|      if(td->thread_hnd != curl_thread_t_null)
  403|      0|        Curl_thread_join(&td->thread_hnd);
  404|       |
  405|      3|      destroy_thread_sync_data(&td->tsd);
  406|       |
  407|      3|      free(async->tdata);
  408|      3|    }
  409|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  410|       |    /*
  411|       |     * ensure CURLMOPT_SOCKETFUNCTION fires CURL_POLL_REMOVE
  412|       |     * before the FD is invalidated to avoid EBADF on EPOLL_CTL_DEL
  413|       |     */
  414|      3|    Curl_multi_closed(data, sock_rd);
  415|      3|    sclose(sock_rd);
  416|      3|#endif
  417|      3|  }
  418|  1.21k|  async->tdata = NULL;
  419|       |
  420|  1.21k|  free(async->hostname);
  421|  1.21k|  async->hostname = NULL;
  422|  1.21k|}
asyn-thread.c:destroy_thread_sync_data:
  192|      3|{
  193|      3|  if(tsd->mtx) {
  194|      3|    Curl_mutex_destroy(tsd->mtx);
  195|      3|    free(tsd->mtx);
  196|      3|  }
  197|       |
  198|      3|  free(tsd->hostname);
  199|       |
  200|      3|  if(tsd->res)
  201|      0|    Curl_freeaddrinfo(tsd->res);
  202|       |
  203|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  204|       |  /*
  205|       |   * close one end of the socket pair (may be done in resolver thread);
  206|       |   * the other end (for reading) is always closed in the parent thread.
  207|       |   */
  208|      3|  if(tsd->sock_pair[1] != CURL_SOCKET_BAD) {
  209|      3|    sclose(tsd->sock_pair[1]);
  210|      3|  }
  211|      3|#endif
  212|      3|  memset(tsd, 0, sizeof(*tsd));
  213|      3|}
asyn-thread.c:thread_wait_resolv:
  491|      3|{
  492|      3|  struct thread_data *td;
  493|      3|  CURLcode result = CURLE_OK;
  494|       |
  495|      3|  DEBUGASSERT(data);
  496|      3|  td = data->state.async.tdata;
  497|      3|  DEBUGASSERT(td);
  498|      3|  DEBUGASSERT(td->thread_hnd != curl_thread_t_null);
  499|       |
  500|       |  /* wait for the thread to resolve the name */
  501|      3|  if(Curl_thread_join(&td->thread_hnd)) {
  502|      3|    if(entry)
  503|      3|      result = getaddrinfo_complete(data);
  504|      3|  }
  505|      0|  else
  506|      3|    DEBUGASSERT(0);
  507|       |
  508|      3|  data->state.async.done = TRUE;
  509|       |
  510|      3|  if(entry)
  511|      3|    *entry = data->state.async.dns;
  512|       |
  513|      3|  if(!data->state.async.dns && report)
  514|       |    /* a name was not resolved, report error */
  515|      3|    result = Curl_resolver_error(data);
  516|       |
  517|      3|  destroy_async_data(&data->state.async);
  518|       |
  519|      3|  if(!data->state.async.dns && report)
  520|      3|    connclose(data->conn, "asynch resolve failed");
  521|       |
  522|      3|  return result;
  523|      3|}
asyn-thread.c:getaddrinfo_complete:
  271|      3|{
  272|      3|  struct thread_sync_data *tsd = conn_thread_sync_data(data);
  273|      3|  int rc;
  274|       |
  275|      3|  rc = Curl_addrinfo_callback(data, tsd->sock_error, tsd->res);
  276|       |  /* The tsd->res structure has been copied to async.dns and perhaps the DNS
  277|       |     cache.  Set our copy to NULL so destroy_thread_sync_data doesn't free it.
  278|       |  */
  279|      3|  tsd->res = NULL;
  280|       |
  281|      3|  return rc;
  282|      3|}
asyn-thread.c:conn_thread_sync_data:
  185|      3|{
  186|      3|  return &(data->state.async.tdata->tsd);
  187|      3|}
asyn-thread.c:init_resolve_thread:
  433|      3|{
  434|      3|  struct thread_data *td = calloc(1, sizeof(struct thread_data));
  435|      3|  int err = ENOMEM;
  436|      3|  struct Curl_async *asp = &data->state.async;
  437|       |
  438|      3|  data->state.async.tdata = td;
  439|      3|  if(!td)
  440|      0|    goto errno_exit;
  441|       |
  442|      3|  asp->port = port;
  443|      3|  asp->done = FALSE;
  444|      3|  asp->status = 0;
  445|      3|  asp->dns = NULL;
  446|      3|  td->thread_hnd = curl_thread_t_null;
  447|       |
  448|      3|  if(!init_thread_sync_data(td, hostname, port, hints)) {
  449|      0|    asp->tdata = NULL;
  450|      0|    free(td);
  451|      0|    goto errno_exit;
  452|      0|  }
  453|       |
  454|      3|  free(asp->hostname);
  455|      3|  asp->hostname = strdup(hostname);
  456|      3|  if(!asp->hostname)
  457|      0|    goto err_exit;
  458|       |
  459|       |  /* The thread will set this to 1 when complete. */
  460|      3|  td->tsd.done = 0;
  461|       |
  462|      3|#ifdef HAVE_GETADDRINFO
  463|      3|  td->thread_hnd = Curl_thread_create(getaddrinfo_thread, &td->tsd);
  464|       |#else
  465|       |  td->thread_hnd = Curl_thread_create(gethostbyname_thread, &td->tsd);
  466|       |#endif
  467|       |
  468|      3|  if(!td->thread_hnd) {
  469|       |    /* The thread never started, so mark it as done here for proper cleanup. */
  470|      0|    td->tsd.done = 1;
  471|      0|    err = errno;
  472|      0|    goto err_exit;
  473|      0|  }
  474|       |
  475|      3|  return TRUE;
  476|       |
  477|      0| err_exit:
  478|      0|  destroy_async_data(asp);
  479|       |
  480|      0| errno_exit:
  481|      0|  errno = err;
  482|      0|  return FALSE;
  483|      0|}
asyn-thread.c:init_thread_sync_data:
  221|      3|{
  222|      3|  struct thread_sync_data *tsd = &td->tsd;
  223|       |
  224|      3|  memset(tsd, 0, sizeof(*tsd));
  225|       |
  226|      3|  tsd->td = td;
  227|      3|  tsd->port = port;
  228|       |  /* Treat the request as done until the thread actually starts so any early
  229|       |   * cleanup gets done properly.
  230|       |   */
  231|      3|  tsd->done = 1;
  232|      3|#ifdef HAVE_GETADDRINFO
  233|      3|  DEBUGASSERT(hints);
  234|      3|  tsd->hints = *hints;
  235|       |#else
  236|       |  (void) hints;
  237|       |#endif
  238|       |
  239|      3|  tsd->mtx = malloc(sizeof(curl_mutex_t));
  240|      3|  if(!tsd->mtx)
  241|      0|    goto err_exit;
  242|       |
  243|      3|  Curl_mutex_init(tsd->mtx);
  244|       |
  245|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  246|       |  /* create socket pair, avoid AF_LOCAL since it doesn't build on Solaris */
  247|      3|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, &tsd->sock_pair[0]) < 0) {
  248|      0|    tsd->sock_pair[0] = CURL_SOCKET_BAD;
  249|      0|    tsd->sock_pair[1] = CURL_SOCKET_BAD;
  250|      0|    goto err_exit;
  251|      0|  }
  252|      3|#endif
  253|      3|  tsd->sock_error = CURL_ASYNC_SUCCESS;
  254|       |
  255|       |  /* Copying hostname string because original can be destroyed by parent
  256|       |   * thread during gethostbyname execution.
  257|       |   */
  258|      3|  tsd->hostname = strdup(hostname);
  259|      3|  if(!tsd->hostname)
  260|      0|    goto err_exit;
  261|       |
  262|      3|  return 1;
  263|       |
  264|      0| err_exit:
  265|       |  /* Memory allocation failed */
  266|      0|  destroy_thread_sync_data(tsd);
  267|      0|  return 0;
  268|      3|}
asyn-thread.c:getaddrinfo_thread:
  294|      3|{
  295|      3|  struct thread_sync_data *tsd = (struct thread_sync_data *)arg;
  296|      3|  struct thread_data *td = tsd->td;
  297|      3|  char service[12];
  298|      3|  int rc;
  299|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  300|      3|  char buf[1];
  301|      3|#endif
  302|       |
  303|      3|  msnprintf(service, sizeof(service), "%d", tsd->port);
  304|       |
  305|      3|  rc = Curl_getaddrinfo_ex(tsd->hostname, service, &tsd->hints, &tsd->res);
  306|       |
  307|      3|  if(rc) {
  308|      3|    tsd->sock_error = SOCKERRNO?SOCKERRNO:rc;
  309|      3|    if(tsd->sock_error == 0)
  310|      0|      tsd->sock_error = RESOLVER_ENOMEM;
  311|      3|  }
  312|      0|  else {
  313|      0|    Curl_addrinfo_set_port(tsd->res, tsd->port);
  314|      0|  }
  315|       |
  316|      3|  Curl_mutex_acquire(tsd->mtx);
  317|      3|  if(tsd->done) {
  318|       |    /* too late, gotta clean up the mess */
  319|      0|    Curl_mutex_release(tsd->mtx);
  320|      0|    destroy_thread_sync_data(tsd);
  321|      0|    free(td);
  322|      0|  }
  323|      3|  else {
  324|      3|#ifndef CURL_DISABLE_SOCKETPAIR
  325|      3|    if(tsd->sock_pair[1] != CURL_SOCKET_BAD) {
  326|       |      /* DNS has been resolved, signal client task */
  327|      3|      buf[0] = 1;
  328|      3|      if(swrite(tsd->sock_pair[1],  buf, sizeof(buf)) < 0) {
  329|       |        /* update sock_erro to errno */
  330|      0|        tsd->sock_error = SOCKERRNO;
  331|      0|      }
  332|      3|    }
  333|      3|#endif
  334|      3|    tsd->done = 1;
  335|      3|    Curl_mutex_release(tsd->mtx);
  336|      3|  }
  337|       |
  338|      3|  return 0;
  339|      3|}

Curl_conncache_init:
  115|    783|{
  116|    783|  int rc;
  117|       |
  118|       |  /* allocate a new easy handle to use when closing cached connections */
  119|    783|  connc->closure_handle = curl_easy_init();
  120|    783|  if(!connc->closure_handle)
  121|      0|    return 1; /* bad */
  122|       |
  123|    783|  rc = Curl_hash_init(&connc->hash, size, Curl_hash_str,
  124|    783|                      Curl_str_key_compare, free_bundle_hash_entry);
  125|    783|  if(rc)
  126|      0|    Curl_close(&connc->closure_handle);
  127|    783|  else
  128|    783|    connc->closure_handle->state.conn_cache = connc;
  129|       |
  130|    783|  return rc;
  131|    783|}
Curl_conncache_destroy:
  134|    783|{
  135|    783|  if(connc)
  136|    783|    Curl_hash_destroy(&connc->hash);
  137|    783|}
Curl_conncache_size:
  172|     28|{
  173|     28|  size_t num;
  174|     28|  CONNCACHE_LOCK(data);
  175|     28|  num = data->state.conn_cache->num_conn;
  176|     28|  CONNCACHE_UNLOCK(data);
  177|     28|  return num;
  178|     28|}
Curl_conncache_find_bundle:
  189|  1.57k|{
  190|  1.57k|  struct connectbundle *bundle = NULL;
  191|  1.57k|  CONNCACHE_LOCK(data);
  192|  1.57k|  if(connc) {
  193|  1.57k|    char key[HASHKEY_SIZE];
  194|  1.57k|    hashkey(conn, key, sizeof(key), hostp);
  195|  1.57k|    bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
  196|  1.57k|  }
  197|       |
  198|  1.57k|  return bundle;
  199|  1.57k|}
Curl_conncache_add_conn:
  235|    524|{
  236|    524|  CURLcode result = CURLE_OK;
  237|    524|  struct connectbundle *bundle = NULL;
  238|    524|  struct connectdata *conn = data->conn;
  239|    524|  struct conncache *connc = data->state.conn_cache;
  240|    524|  DEBUGASSERT(conn);
  241|       |
  242|       |  /* *find_bundle() locks the connection cache */
  243|    524|  bundle = Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
  244|    524|                                      NULL);
  245|    524|  if(!bundle) {
  246|    524|    int rc;
  247|    524|    char key[HASHKEY_SIZE];
  248|       |
  249|    524|    result = bundle_create(&bundle);
  250|    524|    if(result) {
  251|      0|      goto unlock;
  252|      0|    }
  253|       |
  254|    524|    hashkey(conn, key, sizeof(key), NULL);
  255|    524|    rc = conncache_add_bundle(data->state.conn_cache, key, bundle);
  256|       |
  257|    524|    if(!rc) {
  258|      0|      bundle_destroy(bundle);
  259|      0|      result = CURLE_OUT_OF_MEMORY;
  260|      0|      goto unlock;
  261|      0|    }
  262|    524|  }
  263|       |
  264|    524|  bundle_add_conn(bundle, conn);
  265|    524|  conn->connection_id = connc->next_connection_id++;
  266|    524|  connc->num_conn++;
  267|       |
  268|    524|  DEBUGF(infof(data, "Added connection %ld. "
  269|    524|               "The cache now contains %zu members",
  270|    524|               conn->connection_id, connc->num_conn));
  271|       |
  272|    524|  unlock:
  273|    524|  CONNCACHE_UNLOCK(data);
  274|       |
  275|    524|  return result;
  276|    524|}
Curl_conncache_remove_conn:
  287|    688|{
  288|    688|  struct connectbundle *bundle = conn->bundle;
  289|    688|  struct conncache *connc = data->state.conn_cache;
  290|       |
  291|       |  /* The bundle pointer can be NULL, since this function can be called
  292|       |     due to a failed connection attempt, before being added to a bundle */
  293|    688|  if(bundle) {
  294|    524|    if(lock) {
  295|     28|      CONNCACHE_LOCK(data);
  296|     28|    }
  297|    524|    bundle_remove_conn(bundle, conn);
  298|    524|    if(bundle->num_connections == 0)
  299|    524|      conncache_remove_bundle(connc, bundle);
  300|    524|    conn->bundle = NULL; /* removed from it */
  301|    524|    if(connc) {
  302|    524|      connc->num_conn--;
  303|    524|      DEBUGF(infof(data, "The cache now contains %zu members",
  304|    524|                   connc->num_conn));
  305|    524|    }
  306|    524|    if(lock) {
  307|     28|      CONNCACHE_UNLOCK(data);
  308|     28|    }
  309|    524|  }
  310|    688|}
Curl_conncache_foreach:
  329|    552|{
  330|    552|  struct Curl_hash_iterator iter;
  331|    552|  struct Curl_llist_element *curr;
  332|    552|  struct Curl_hash_element *he;
  333|       |
  334|    552|  if(!connc)
  335|      0|    return FALSE;
  336|       |
  337|    552|  CONNCACHE_LOCK(data);
  338|    552|  Curl_hash_start_iterate(&connc->hash, &iter);
  339|       |
  340|    552|  he = Curl_hash_next_element(&iter);
  341|    552|  while(he) {
  342|     28|    struct connectbundle *bundle;
  343|       |
  344|     28|    bundle = he->ptr;
  345|     28|    he = Curl_hash_next_element(&iter);
  346|       |
  347|     28|    curr = bundle->conn_list.head;
  348|     28|    while(curr) {
  349|       |      /* Yes, we need to update curr before calling func(), because func()
  350|       |         might decide to remove the connection */
  351|     28|      struct connectdata *conn = curr->ptr;
  352|     28|      curr = curr->next;
  353|       |
  354|     28|      if(1 == func(data, conn, param)) {
  355|     28|        CONNCACHE_UNLOCK(data);
  356|     28|        return TRUE;
  357|     28|      }
  358|     28|    }
  359|     28|  }
  360|    524|  CONNCACHE_UNLOCK(data);
  361|    524|  return FALSE;
  362|    524|}
Curl_conncache_return_conn:
  403|     28|{
  404|       |  /* data->multi->maxconnects can be negative, deal with it. */
  405|     28|  size_t maxconnects =
  406|     28|    (data->multi->maxconnects < 0) ? data->multi->num_easy * 4:
  407|     28|    data->multi->maxconnects;
  408|     28|  struct connectdata *conn_candidate = NULL;
  409|       |
  410|     28|  conn->lastused = Curl_now(); /* it was used up until now */
  411|     28|  if(maxconnects > 0 &&
  412|     28|     Curl_conncache_size(data) > maxconnects) {
  413|      0|    infof(data, "Connection cache is full, closing the oldest one");
  414|       |
  415|      0|    conn_candidate = Curl_conncache_extract_oldest(data);
  416|      0|    if(conn_candidate) {
  417|       |      /* the winner gets the honour of being disconnected */
  418|      0|      (void)Curl_disconnect(data, conn_candidate, /* dead_connection */ FALSE);
  419|      0|    }
  420|      0|  }
  421|       |
  422|     28|  return (conn_candidate == conn) ? FALSE : TRUE;
  423|       |
  424|     28|}
Curl_conncache_close_all_connections:
  540|    783|{
  541|    783|  struct connectdata *conn;
  542|    783|  char buffer[READBUFFER_MIN + 1];
  543|    783|  if(!connc->closure_handle)
  544|      0|    return;
  545|    783|  connc->closure_handle->state.buffer = buffer;
  546|    783|  connc->closure_handle->set.buffer_size = READBUFFER_MIN;
  547|       |
  548|    783|  conn = conncache_find_first_connection(connc);
  549|    811|  while(conn) {
  550|     28|    SIGPIPE_VARIABLE(pipe_st);
  551|     28|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  552|       |    /* This will remove the connection from the cache */
  553|     28|    connclose(conn, "kill all");
  554|     28|    Curl_conncache_remove_conn(connc->closure_handle, conn, TRUE);
  555|     28|    (void)Curl_disconnect(connc->closure_handle, conn, FALSE);
  556|     28|    sigpipe_restore(&pipe_st);
  557|       |
  558|     28|    conn = conncache_find_first_connection(connc);
  559|     28|  }
  560|       |
  561|    783|  connc->closure_handle->state.buffer = NULL;
  562|    783|  if(connc->closure_handle) {
  563|    783|    SIGPIPE_VARIABLE(pipe_st);
  564|    783|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  565|       |
  566|    783|    Curl_hostcache_clean(connc->closure_handle,
  567|    783|                         connc->closure_handle->dns.hostcache);
  568|    783|    Curl_close(&connc->closure_handle);
  569|    783|    sigpipe_restore(&pipe_st);
  570|    783|  }
  571|    783|}
conncache.c:free_bundle_hash_entry:
  108|    524|{
  109|    524|  struct connectbundle *b = (struct connectbundle *) freethis;
  110|       |
  111|    524|  bundle_destroy(b);
  112|    524|}
conncache.c:hashkey:
  143|  2.09k|{
  144|  2.09k|  const char *hostname;
  145|  2.09k|  long port = conn->remote_port;
  146|       |
  147|  2.09k|#ifndef CURL_DISABLE_PROXY
  148|  2.09k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
  149|      0|    hostname = conn->http_proxy.host.name;
  150|      0|    port = conn->port;
  151|      0|  }
  152|  2.09k|  else
  153|  2.09k|#endif
  154|  2.09k|    if(conn->bits.conn_to_host)
  155|  2.09k|      hostname = conn->conn_to_host.name;
  156|      0|  else
  157|      0|    hostname = conn->host.name;
  158|       |
  159|  2.09k|  if(hostp)
  160|       |    /* report back which name we used */
  161|  1.04k|    *hostp = hostname;
  162|       |
  163|       |  /* put the number first so that the hostname gets cut off if too long */
  164|  2.09k|  msnprintf(buf, len, "%ld%s", port, hostname);
  165|  2.09k|  Curl_strntolower(buf, buf, len);
  166|  2.09k|}
conncache.c:bundle_create:
   54|    524|{
   55|    524|  DEBUGASSERT(*bundlep == NULL);
   56|    524|  *bundlep = malloc(sizeof(struct connectbundle));
   57|    524|  if(!*bundlep)
   58|      0|    return CURLE_OUT_OF_MEMORY;
   59|       |
   60|    524|  (*bundlep)->num_connections = 0;
   61|    524|  (*bundlep)->multiuse = BUNDLE_UNKNOWN;
   62|       |
   63|    524|  Curl_llist_init(&(*bundlep)->conn_list, (Curl_llist_dtor) conn_llist_dtor);
   64|    524|  return CURLE_OK;
   65|    524|}
conncache.c:conn_llist_dtor:
   47|    524|{
   48|    524|  struct connectdata *conn = element;
   49|    524|  (void)user;
   50|    524|  conn->bundle = NULL;
   51|    524|}
conncache.c:conncache_add_bundle:
  204|    524|{
  205|    524|  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
  206|       |
  207|    524|  return p?TRUE:FALSE;
  208|    524|}
conncache.c:bundle_destroy:
   68|    524|{
   69|    524|  if(!bundle)
   70|      0|    return;
   71|       |
   72|    524|  Curl_llist_destroy(&bundle->conn_list, NULL);
   73|       |
   74|    524|  free(bundle);
   75|    524|}
conncache.c:bundle_add_conn:
   80|    524|{
   81|    524|  Curl_llist_insert_next(&bundle->conn_list, bundle->conn_list.tail, conn,
   82|    524|                         &conn->bundle_node);
   83|    524|  conn->bundle = bundle;
   84|    524|  bundle->num_connections++;
   85|    524|}
conncache.c:bundle_remove_conn:
   90|    524|{
   91|    524|  struct Curl_llist_element *curr;
   92|       |
   93|    524|  curr = bundle->conn_list.head;
   94|    524|  while(curr) {
   95|    524|    if(curr->ptr == conn) {
   96|    524|      Curl_llist_remove(&bundle->conn_list, curr, NULL);
   97|    524|      bundle->num_connections--;
   98|    524|      conn->bundle = NULL;
   99|    524|      return 1; /* we removed a handle */
  100|    524|    }
  101|      0|    curr = curr->next;
  102|      0|  }
  103|      0|  DEBUGASSERT(0);
  104|      0|  return 0;
  105|      0|}
conncache.c:conncache_remove_bundle:
  212|    524|{
  213|    524|  struct Curl_hash_iterator iter;
  214|    524|  struct Curl_hash_element *he;
  215|       |
  216|    524|  if(!connc)
  217|      0|    return;
  218|       |
  219|    524|  Curl_hash_start_iterate(&connc->hash, &iter);
  220|       |
  221|    524|  he = Curl_hash_next_element(&iter);
  222|    524|  while(he) {
  223|    524|    if(he->ptr == bundle) {
  224|       |      /* The bundle is destroyed by the hash destructor function,
  225|       |         free_bundle_hash_entry() */
  226|    524|      Curl_hash_delete(&connc->hash, he->key, he->key_len);
  227|    524|      return;
  228|    524|    }
  229|       |
  230|      0|    he = Curl_hash_next_element(&iter);
  231|      0|  }
  232|    524|}
conncache.c:conncache_find_first_connection:
  372|    811|{
  373|    811|  struct Curl_hash_iterator iter;
  374|    811|  struct Curl_hash_element *he;
  375|    811|  struct connectbundle *bundle;
  376|       |
  377|    811|  Curl_hash_start_iterate(&connc->hash, &iter);
  378|       |
  379|    811|  he = Curl_hash_next_element(&iter);
  380|    811|  while(he) {
  381|     28|    struct Curl_llist_element *curr;
  382|     28|    bundle = he->ptr;
  383|       |
  384|     28|    curr = bundle->conn_list.head;
  385|     28|    if(curr) {
  386|     28|      return curr->ptr;
  387|     28|    }
  388|       |
  389|      0|    he = Curl_hash_next_element(&iter);
  390|      0|  }
  391|       |
  392|    783|  return NULL;
  393|    811|}

Curl_timeleft:
  187|  3.38k|{
  188|  3.38k|  unsigned int timeout_set = 0;
  189|  3.38k|  timediff_t connect_timeout_ms = 0;
  190|  3.38k|  timediff_t maxtime_timeout_ms = 0;
  191|  3.38k|  timediff_t timeout_ms = 0;
  192|  3.38k|  struct curltime now;
  193|       |
  194|       |  /* The duration of a connect and the total transfer are calculated from two
  195|       |     different time-stamps. It can end up with the total timeout being reached
  196|       |     before the connect timeout expires and we must acknowledge whichever
  197|       |     timeout that is reached first. The total timeout is set per entire
  198|       |     operation, while the connect timeout is set per connect. */
  199|       |
  200|  3.38k|  if(data->set.timeout > 0) {
  201|  3.38k|    timeout_set = TIMEOUT_MAXTIME;
  202|  3.38k|    maxtime_timeout_ms = data->set.timeout;
  203|  3.38k|  }
  204|  3.38k|  if(duringconnect) {
  205|  1.61k|    timeout_set |= TIMEOUT_CONNECT;
  206|  1.61k|    connect_timeout_ms = (data->set.connecttimeout > 0) ?
  207|  1.61k|      data->set.connecttimeout : DEFAULT_CONNECT_TIMEOUT;
  208|  1.61k|  }
  209|  3.38k|  if(!timeout_set)
  210|       |    /* no timeout  */
  211|      0|    return 0;
  212|       |
  213|  3.38k|  if(!nowp) {
  214|  1.14k|    now = Curl_now();
  215|  1.14k|    nowp = &now;
  216|  1.14k|  }
  217|       |
  218|  3.38k|  if(timeout_set & TIMEOUT_MAXTIME) {
  219|  3.38k|    maxtime_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startop);
  220|  3.38k|    timeout_ms = maxtime_timeout_ms;
  221|  3.38k|  }
  222|       |
  223|  3.38k|  if(timeout_set & TIMEOUT_CONNECT) {
  224|  1.61k|    connect_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startsingle);
  225|       |
  226|  1.61k|    if(!(timeout_set & TIMEOUT_MAXTIME) ||
  227|  1.61k|       (connect_timeout_ms < maxtime_timeout_ms))
  228|      0|      timeout_ms = connect_timeout_ms;
  229|  1.61k|  }
  230|       |
  231|  3.38k|  if(!timeout_ms)
  232|       |    /* avoid returning 0 as that means no timeout! */
  233|      0|    return -1;
  234|       |
  235|  3.38k|  return timeout_ms;
  236|  3.38k|}
Curl_persistconninfo:
  611|    524|{
  612|    524|  memcpy(data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
  613|    524|  if(local_ip && local_ip[0])
  614|      0|    memcpy(data->info.conn_local_ip, local_ip, MAX_IPADR_LEN);
  615|    524|  else
  616|    524|    data->info.conn_local_ip[0] = 0;
  617|    524|  data->info.conn_scheme = conn->handler->scheme;
  618|    524|  data->info.conn_protocol = conn->handler->protocol;
  619|    524|  data->info.conn_primary_port = conn->port;
  620|    524|  data->info.conn_local_port = local_port;
  621|    524|}
Curl_addr2string:
  627|  1.57k|{
  628|  1.57k|  struct sockaddr_in *si = NULL;
  629|  1.57k|#ifdef ENABLE_IPV6
  630|  1.57k|  struct sockaddr_in6 *si6 = NULL;
  631|  1.57k|#endif
  632|  1.57k|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  633|  1.57k|  struct sockaddr_un *su = NULL;
  634|       |#else
  635|       |  (void)salen;
  636|       |#endif
  637|       |
  638|  1.57k|  switch(sa->sa_family) {
  639|    524|    case AF_INET:
  640|    524|      si = (struct sockaddr_in *)(void *) sa;
  641|    524|      if(Curl_inet_ntop(sa->sa_family, &si->sin_addr,
  642|    524|                        addr, MAX_IPADR_LEN)) {
  643|    524|        unsigned short us_port = ntohs(si->sin_port);
  644|    524|        *port = us_port;
  645|    524|        return TRUE;
  646|    524|      }
  647|      0|      break;
  648|      0|#ifdef ENABLE_IPV6
  649|      0|    case AF_INET6:
  650|      0|      si6 = (struct sockaddr_in6 *)(void *) sa;
  651|      0|      if(Curl_inet_ntop(sa->sa_family, &si6->sin6_addr,
  652|      0|                        addr, MAX_IPADR_LEN)) {
  653|      0|        unsigned short us_port = ntohs(si6->sin6_port);
  654|      0|        *port = us_port;
  655|      0|        return TRUE;
  656|      0|      }
  657|      0|      break;
  658|      0|#endif
  659|      0|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  660|  1.04k|    case AF_UNIX:
  661|  1.04k|      if(salen > (curl_socklen_t)sizeof(CURL_SA_FAMILY_T)) {
  662|      0|        su = (struct sockaddr_un*)sa;
  663|      0|        msnprintf(addr, MAX_IPADR_LEN, "%s", su->sun_path);
  664|      0|      }
  665|  1.04k|      else
  666|  1.04k|        addr[0] = 0; /* socket with no name */
  667|  1.04k|      *port = 0;
  668|  1.04k|      return TRUE;
  669|      0|#endif
  670|      0|    default:
  671|      0|      break;
  672|  1.57k|  }
  673|       |
  674|      0|  addr[0] = '\0';
  675|      0|  *port = 0;
  676|      0|  errno = EAFNOSUPPORT;
  677|      0|  return FALSE;
  678|  1.57k|}
Curl_conninfo_remote:
  684|    524|{
  685|    524|#ifdef HAVE_GETPEERNAME
  686|    524|  char buffer[STRERROR_LEN];
  687|    524|  struct Curl_sockaddr_storage ssrem;
  688|    524|  curl_socklen_t plen;
  689|    524|  int port;
  690|    524|  plen = sizeof(struct Curl_sockaddr_storage);
  691|    524|  memset(&ssrem, 0, sizeof(ssrem));
  692|    524|  if(getpeername(sockfd, (struct sockaddr*) &ssrem, &plen)) {
  693|      0|    int error = SOCKERRNO;
  694|      0|    failf(data, "getpeername() failed with errno %d: %s",
  695|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  696|      0|    return;
  697|      0|  }
  698|    524|  if(!Curl_addr2string((struct sockaddr*)&ssrem, plen,
  699|    524|                       conn->primary_ip, &port)) {
  700|      0|    failf(data, "ssrem inet_ntop() failed with errno %d: %s",
  701|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  702|      0|    return;
  703|      0|  }
  704|       |#else
  705|       |  (void)data;
  706|       |  (void)conn;
  707|       |  (void)sockfd;
  708|       |#endif
  709|    524|}
Curl_conninfo_local:
  715|    524|{
  716|    524|#ifdef HAVE_GETSOCKNAME
  717|    524|  char buffer[STRERROR_LEN];
  718|    524|  struct Curl_sockaddr_storage ssloc;
  719|    524|  curl_socklen_t slen;
  720|    524|  slen = sizeof(struct Curl_sockaddr_storage);
  721|    524|  memset(&ssloc, 0, sizeof(ssloc));
  722|    524|  if(getsockname(sockfd, (struct sockaddr*) &ssloc, &slen)) {
  723|      0|    int error = SOCKERRNO;
  724|      0|    failf(data, "getsockname() failed with errno %d: %s",
  725|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  726|      0|    return;
  727|      0|  }
  728|    524|  if(!Curl_addr2string((struct sockaddr*)&ssloc, slen,
  729|    524|                       local_ip, local_port)) {
  730|      0|    failf(data, "ssloc inet_ntop() failed with errno %d: %s",
  731|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  732|      0|    return;
  733|      0|  }
  734|       |#else
  735|       |  (void)data;
  736|       |  (void)sockfd;
  737|       |  (void)local_ip;
  738|       |  (void)local_port;
  739|       |#endif
  740|    524|}
Curl_updateconninfo:
  746|    524|{
  747|       |  /* 'local_ip' and 'local_port' get filled with local's numerical
  748|       |     ip address and port number whenever an outgoing connection is
  749|       |     **established** from the primary socket to a remote address. */
  750|    524|  char local_ip[MAX_IPADR_LEN] = "";
  751|    524|  int local_port = -1;
  752|       |
  753|    524|  if(conn->transport == TRNSPRT_TCP) {
  754|    524|    if(!conn->bits.reuse && !conn->bits.tcp_fastopen)
  755|    524|      Curl_conninfo_remote(data, conn, sockfd);
  756|    524|    Curl_conninfo_local(data, sockfd, local_ip, &local_port);
  757|    524|  } /* end of TCP-only section */
  758|       |
  759|       |  /* persist connection info in session handle */
  760|    524|  Curl_persistconninfo(data, conn, local_ip, local_port);
  761|    524|}
Curl_is_connected:
  852|    524|{
  853|    524|  CURLcode result = CURLE_OK;
  854|    524|  timediff_t allow;
  855|    524|  int error = 0;
  856|    524|  struct curltime now;
  857|    524|  int rc = 0;
  858|    524|  unsigned int i;
  859|       |
  860|    524|  DEBUGASSERT(sockindex >= FIRSTSOCKET && sockindex <= SECONDARYSOCKET);
  861|       |
  862|    524|  *connected = FALSE; /* a very negative world view is best */
  863|       |
  864|    524|  if(conn->bits.tcpconnect[sockindex]) {
  865|       |    /* we are connected already! */
  866|      0|    *connected = TRUE;
  867|      0|    return CURLE_OK;
  868|      0|  }
  869|       |
  870|    524|  now = Curl_now();
  871|       |
  872|    524|  if(SOCKS_STATE(conn->cnnct.state)) {
  873|       |    /* still doing SOCKS */
  874|      0|    result = connect_SOCKS(data, sockindex, connected);
  875|      0|    if(!result && *connected)
  876|      0|      post_SOCKS(data, conn, sockindex, connected);
  877|      0|    return result;
  878|      0|  }
  879|       |
  880|    524|  for(i = 0; i<2; i++) {
  881|    524|    const int other = i ^ 1;
  882|    524|    if(conn->tempsock[i] == CURL_SOCKET_BAD)
  883|      0|      continue;
  884|    524|    error = 0;
  885|       |#ifdef ENABLE_QUIC
  886|       |    if(conn->transport == TRNSPRT_QUIC) {
  887|       |      result = Curl_quic_is_connected(data, conn, i, connected);
  888|       |      if(!result && *connected) {
  889|       |        /* use this socket from now on */
  890|       |        conn->sock[sockindex] = conn->tempsock[i];
  891|       |        conn->ip_addr = conn->tempaddr[i];
  892|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  893|       |        post_SOCKS(data, conn, sockindex, connected);
  894|       |        connkeep(conn, "HTTP/3 default");
  895|       |        return CURLE_OK;
  896|       |      }
  897|       |      if(result) {
  898|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  899|       |        error = SOCKERRNO;
  900|       |      }
  901|       |    }
  902|       |    else
  903|       |#endif
  904|    524|    {
  905|       |#ifdef mpeix
  906|       |      /* Call this function once now, and ignore the results. We do this to
  907|       |         "clear" the error state on the socket so that we can later read it
  908|       |         reliably. This is reported necessary on the MPE/iX operating
  909|       |         system. */
  910|       |      (void)verifyconnect(conn->tempsock[i], NULL);
  911|       |#endif
  912|       |
  913|       |      /* check socket for connect */
  914|    524|      rc = SOCKET_WRITABLE(conn->tempsock[i], 0);
  915|    524|    }
  916|       |
  917|    524|    if(rc == 0) { /* no connection yet */
  918|      0|      if(Curl_timediff(now, conn->connecttime) >=
  919|      0|         conn->timeoutms_per_addr[i]) {
  920|      0|        infof(data, "After %" CURL_FORMAT_TIMEDIFF_T
  921|      0|              "ms connect time, move on!", conn->timeoutms_per_addr[i]);
  922|      0|        error = ETIMEDOUT;
  923|      0|      }
  924|       |
  925|       |      /* should we try another protocol family? */
  926|      0|      if(i == 0 && !conn->bits.parallel_connect &&
  927|      0|         (Curl_timediff(now, conn->connecttime) >=
  928|      0|          data->set.happy_eyeballs_timeout)) {
  929|      0|        conn->bits.parallel_connect = TRUE; /* starting now */
  930|      0|        trynextip(data, conn, sockindex, 1);
  931|      0|      }
  932|      0|    }
  933|    524|    else if(rc == CURL_CSELECT_OUT || conn->bits.tcp_fastopen) {
  934|    524|      if(verifyconnect(conn->tempsock[i], &error)) {
  935|       |        /* we are connected with TCP, awesome! */
  936|       |
  937|       |        /* use this socket from now on */
  938|    524|        conn->sock[sockindex] = conn->tempsock[i];
  939|    524|        conn->ip_addr = conn->tempaddr[i];
  940|    524|        conn->tempsock[i] = CURL_SOCKET_BAD;
  941|    524|#ifdef ENABLE_IPV6
  942|    524|        conn->bits.ipv6 = (conn->ip_addr->ai_family == AF_INET6)?TRUE:FALSE;
  943|    524|#endif
  944|       |
  945|       |        /* close the other socket, if open */
  946|    524|        if(conn->tempsock[other] != CURL_SOCKET_BAD) {
  947|      0|          Curl_closesocket(data, conn, conn->tempsock[other]);
  948|      0|          conn->tempsock[other] = CURL_SOCKET_BAD;
  949|      0|        }
  950|       |
  951|       |        /* see if we need to kick off any SOCKS proxy magic once we
  952|       |           connected */
  953|    524|        result = connect_SOCKS(data, sockindex, connected);
  954|    524|        if(result || !*connected)
  955|      0|          return result;
  956|       |
  957|    524|        post_SOCKS(data, conn, sockindex, connected);
  958|       |
  959|    524|        return CURLE_OK;
  960|    524|      }
  961|    524|    }
  962|      0|    else if(rc & CURL_CSELECT_ERR) {
  963|      0|      (void)verifyconnect(conn->tempsock[i], &error);
  964|      0|    }
  965|       |
  966|       |    /*
  967|       |     * The connection failed here, we should attempt to connect to the "next
  968|       |     * address" for the given host. But first remember the latest error.
  969|       |     */
  970|      0|    if(error) {
  971|      0|      data->state.os_errno = error;
  972|      0|      SET_SOCKERRNO(error);
  973|      0|      if(conn->tempaddr[i]) {
  974|      0|        CURLcode status;
  975|      0|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  976|      0|        char ipaddress[MAX_IPADR_LEN];
  977|      0|        char buffer[STRERROR_LEN];
  978|      0|        Curl_printable_address(conn->tempaddr[i], ipaddress,
  979|      0|                               sizeof(ipaddress));
  980|      0|        infof(data, "connect to %s port %u failed: %s",
  981|      0|              ipaddress, conn->port,
  982|      0|              Curl_strerror(error, buffer, sizeof(buffer)));
  983|      0|#endif
  984|       |
  985|      0|        allow = Curl_timeleft(data, &now, TRUE);
  986|      0|        conn->timeoutms_per_addr[i] = conn->tempaddr[i]->ai_next == NULL ?
  987|      0|          allow : allow / 2;
  988|      0|        ainext(conn, i, TRUE);
  989|      0|        status = trynextip(data, conn, sockindex, i);
  990|      0|        if((status != CURLE_COULDNT_CONNECT) ||
  991|      0|           conn->tempsock[other] == CURL_SOCKET_BAD)
  992|       |          /* the last attempt failed and no other sockets remain open */
  993|      0|          result = status;
  994|      0|      }
  995|      0|    }
  996|      0|  }
  997|       |
  998|       |  /*
  999|       |   * Now that we've checked whether we are connected, check whether we've
 1000|       |   * already timed out.
 1001|       |   *
 1002|       |   * First figure out how long time we have left to connect */
 1003|       |
 1004|      0|  allow = Curl_timeleft(data, &now, TRUE);
 1005|       |
 1006|      0|  if(allow < 0) {
 1007|       |    /* time-out, bail out, go home */
 1008|      0|    failf(data, "Connection timeout after %ld ms",
 1009|      0|          Curl_timediff(now, data->progress.t_startsingle));
 1010|      0|    return CURLE_OPERATION_TIMEDOUT;
 1011|      0|  }
 1012|       |
 1013|      0|  if(result &&
 1014|      0|     (conn->tempsock[0] == CURL_SOCKET_BAD) &&
 1015|      0|     (conn->tempsock[1] == CURL_SOCKET_BAD)) {
 1016|       |    /* no more addresses to try */
 1017|      0|    const char *hostname;
 1018|      0|    char buffer[STRERROR_LEN];
 1019|       |
 1020|       |    /* if the first address family runs out of addresses to try before the
 1021|       |       happy eyeball timeout, go ahead and try the next family now */
 1022|      0|    result = trynextip(data, conn, sockindex, 1);
 1023|      0|    if(!result)
 1024|      0|      return result;
 1025|       |
 1026|      0|#ifndef CURL_DISABLE_PROXY
 1027|      0|    if(conn->bits.socksproxy)
 1028|      0|      hostname = conn->socks_proxy.host.name;
 1029|      0|    else if(conn->bits.httpproxy)
 1030|      0|      hostname = conn->http_proxy.host.name;
 1031|      0|    else
 1032|      0|#endif
 1033|      0|      if(conn->bits.conn_to_host)
 1034|      0|        hostname = conn->conn_to_host.name;
 1035|      0|    else
 1036|      0|      hostname = conn->host.name;
 1037|       |
 1038|      0|    failf(data, "Failed to connect to %s port %u after "
 1039|      0|                "%" CURL_FORMAT_TIMEDIFF_T " ms: %s",
 1040|      0|        hostname, conn->port,
 1041|      0|        Curl_timediff(now, data->progress.t_startsingle),
 1042|      0|        Curl_strerror(error, buffer, sizeof(buffer)));
 1043|       |
 1044|      0|    Curl_quic_disconnect(data, conn, 0);
 1045|      0|    Curl_quic_disconnect(data, conn, 1);
 1046|       |
 1047|       |#ifdef WSAETIMEDOUT
 1048|       |    if(WSAETIMEDOUT == data->state.os_errno)
 1049|       |      result = CURLE_OPERATION_TIMEDOUT;
 1050|       |#elif defined(ETIMEDOUT)
 1051|      0|    if(ETIMEDOUT == data->state.os_errno)
 1052|      0|      result = CURLE_OPERATION_TIMEDOUT;
 1053|      0|#endif
 1054|      0|  }
 1055|      0|  else
 1056|      0|    result = CURLE_OK; /* still trying */
 1057|       |
 1058|      0|  return result;
 1059|      0|}
Curl_connecthost:
 1357|    524|{
 1358|    524|  CURLcode result = CURLE_COULDNT_CONNECT;
 1359|    524|  int i;
 1360|    524|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 1361|       |
 1362|    524|  if(timeout_ms < 0) {
 1363|       |    /* a precaution, no need to continue if time already is up */
 1364|      0|    failf(data, "Connection time-out");
 1365|      0|    return CURLE_OPERATION_TIMEDOUT;
 1366|      0|  }
 1367|       |
 1368|    524|  conn->num_addr = Curl_num_addresses(remotehost->addr);
 1369|    524|  conn->tempaddr[0] = conn->tempaddr[1] = remotehost->addr;
 1370|    524|  conn->tempsock[0] = conn->tempsock[1] = CURL_SOCKET_BAD;
 1371|       |
 1372|       |  /* Max time for the next connection attempt */
 1373|    524|  conn->timeoutms_per_addr[0] =
 1374|    524|    conn->tempaddr[0]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1375|    524|  conn->timeoutms_per_addr[1] =
 1376|    524|    conn->tempaddr[1]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1377|       |
 1378|    524|  if(conn->ip_version == CURL_IPRESOLVE_WHATEVER) {
 1379|       |    /* any IP version is allowed */
 1380|    524|    conn->tempfamily[0] = conn->tempaddr[0]?
 1381|    524|      conn->tempaddr[0]->ai_family:0;
 1382|    524|#ifdef ENABLE_IPV6
 1383|    524|    conn->tempfamily[1] = conn->tempfamily[0] == AF_INET6 ?
 1384|      0|      AF_INET : AF_INET6;
 1385|       |#else
 1386|       |    conn->tempfamily[1] = AF_UNSPEC;
 1387|       |#endif
 1388|    524|  }
 1389|      0|  else {
 1390|       |    /* only one IP version is allowed */
 1391|      0|    conn->tempfamily[0] = (conn->ip_version == CURL_IPRESOLVE_V4) ?
 1392|      0|      AF_INET :
 1393|      0|#ifdef ENABLE_IPV6
 1394|      0|      AF_INET6;
 1395|       |#else
 1396|       |      AF_UNSPEC;
 1397|       |#endif
 1398|      0|    conn->tempfamily[1] = AF_UNSPEC;
 1399|       |
 1400|      0|    ainext(conn, 0, FALSE); /* find first address of the right type */
 1401|      0|  }
 1402|       |
 1403|    524|  ainext(conn, 1, FALSE); /* assigns conn->tempaddr[1] accordingly */
 1404|       |
 1405|    524|  DEBUGF(infof(data, "family0 == %s, family1 == %s",
 1406|    524|               conn->tempfamily[0] == AF_INET ? "v4" : "v6",
 1407|    524|               conn->tempfamily[1] == AF_INET ? "v4" : "v6"));
 1408|       |
 1409|       |  /* get through the list in family order in case of quick failures */
 1410|  1.04k|  for(i = 0; (i < 2) && result; i++) {
 1411|    524|    while(conn->tempaddr[i]) {
 1412|    524|      result = singleipconnect(data, conn, conn->tempaddr[i], i);
 1413|    524|      if(!result)
 1414|    524|        break;
 1415|      0|      ainext(conn, i, TRUE);
 1416|      0|    }
 1417|    524|  }
 1418|    524|  if(result)
 1419|      0|    return result;
 1420|       |
 1421|    524|  Curl_expire(data, data->set.happy_eyeballs_timeout,
 1422|    524|              EXPIRE_HAPPY_EYEBALLS);
 1423|       |
 1424|    524|  return CURLE_OK;
 1425|    524|}
Curl_closesocket:
 1518|    524|{
 1519|    524|  if(conn && conn->fclosesocket) {
 1520|      0|    if((sock == conn->sock[SECONDARYSOCKET]) && conn->bits.sock_accepted)
 1521|       |      /* if this socket matches the second socket, and that was created with
 1522|       |         accept, then we MUST NOT call the callback but clear the accepted
 1523|       |         status */
 1524|      0|      conn->bits.sock_accepted = FALSE;
 1525|      0|    else {
 1526|      0|      int rc;
 1527|      0|      Curl_multi_closed(data, sock);
 1528|      0|      Curl_set_in_callback(data, true);
 1529|      0|      rc = conn->fclosesocket(conn->closesocket_client, sock);
 1530|      0|      Curl_set_in_callback(data, false);
 1531|      0|      return rc;
 1532|      0|    }
 1533|      0|  }
 1534|       |
 1535|    524|  if(conn)
 1536|       |    /* tell the multi-socket code about this */
 1537|    524|    Curl_multi_closed(data, sock);
 1538|       |
 1539|    524|  sclose(sock);
 1540|       |
 1541|    524|  return 0;
 1542|    524|}
Curl_socket:
 1557|    524|{
 1558|    524|  struct connectdata *conn = data->conn;
 1559|    524|  struct Curl_sockaddr_ex dummy;
 1560|       |
 1561|    524|  if(!addr)
 1562|       |    /* if the caller doesn't want info back, use a local temp copy */
 1563|      0|    addr = &dummy;
 1564|       |
 1565|       |  /*
 1566|       |   * The Curl_sockaddr_ex structure is basically libcurl's external API
 1567|       |   * curl_sockaddr structure with enough space available to directly hold
 1568|       |   * any protocol-specific address structures. The variable declared here
 1569|       |   * will be used to pass / receive data to/from the fopensocket callback
 1570|       |   * if this has been set, before that, it is initialized from parameters.
 1571|       |   */
 1572|       |
 1573|    524|  addr->family = ai->ai_family;
 1574|    524|  addr->socktype = (conn->transport == TRNSPRT_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 1575|    524|  addr->protocol = conn->transport != TRNSPRT_TCP ? IPPROTO_UDP :
 1576|    524|    ai->ai_protocol;
 1577|    524|  addr->addrlen = ai->ai_addrlen;
 1578|       |
 1579|    524|  if(addr->addrlen > sizeof(struct Curl_sockaddr_storage))
 1580|      0|     addr->addrlen = sizeof(struct Curl_sockaddr_storage);
 1581|    524|  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
 1582|       |
 1583|    524|  if(data->set.fopensocket) {
 1584|       |   /*
 1585|       |    * If the opensocket callback is set, all the destination address
 1586|       |    * information is passed to the callback. Depending on this information the
 1587|       |    * callback may opt to abort the connection, this is indicated returning
 1588|       |    * CURL_SOCKET_BAD; otherwise it will return a not-connected socket. When
 1589|       |    * the callback returns a valid socket the destination address information
 1590|       |    * might have been changed and this 'new' address will actually be used
 1591|       |    * here to connect.
 1592|       |    */
 1593|    524|    Curl_set_in_callback(data, true);
 1594|    524|    *sockfd = data->set.fopensocket(data->set.opensocket_client,
 1595|    524|                                    CURLSOCKTYPE_IPCXN,
 1596|    524|                                    (struct curl_sockaddr *)addr);
 1597|    524|    Curl_set_in_callback(data, false);
 1598|    524|  }
 1599|      0|  else
 1600|       |    /* opensocket callback not set, so simply create the socket now */
 1601|      0|    *sockfd = socket(addr->family, addr->socktype, addr->protocol);
 1602|       |
 1603|    524|  if(*sockfd == CURL_SOCKET_BAD)
 1604|       |    /* no socket, no connection */
 1605|      0|    return CURLE_COULDNT_CONNECT;
 1606|       |
 1607|    524|  if(conn->transport == TRNSPRT_QUIC) {
 1608|       |    /* QUIC sockets need to be nonblocking */
 1609|      0|    (void)curlx_nonblock(*sockfd, TRUE);
 1610|      0|  }
 1611|       |
 1612|    524|#if defined(ENABLE_IPV6) && defined(HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID)
 1613|    524|  if(conn->scope_id && (addr->family == AF_INET6)) {
 1614|      0|    struct sockaddr_in6 * const sa6 = (void *)&addr->sa_addr;
 1615|      0|    sa6->sin6_scope_id = conn->scope_id;
 1616|      0|  }
 1617|    524|#endif
 1618|       |
 1619|    524|#if defined(__linux__) && defined(IP_RECVERR)
 1620|    524|  if(addr->socktype == SOCK_DGRAM) {
 1621|      0|    int one = 1;
 1622|      0|    switch(addr->family) {
 1623|      0|    case AF_INET:
 1624|      0|      (void)setsockopt(*sockfd, SOL_IP, IP_RECVERR, &one, sizeof(one));
 1625|      0|      break;
 1626|      0|    case AF_INET6:
 1627|      0|      (void)setsockopt(*sockfd, SOL_IPV6, IPV6_RECVERR, &one, sizeof(one));
 1628|      0|      break;
 1629|      0|    }
 1630|      0|  }
 1631|    524|#endif
 1632|       |
 1633|    524|  return CURLE_OK;
 1634|    524|}
Curl_conncontrol:
 1645|  2.63k|{
 1646|       |  /* close if a connection, or a stream that isn't multiplexed. */
 1647|       |  /* This function will be called both before and after this connection is
 1648|       |     associated with a transfer. */
 1649|  2.63k|  bool closeit;
 1650|  2.63k|  DEBUGASSERT(conn);
 1651|  2.63k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1652|  2.63k|  (void)reason; /* useful for debugging */
 1653|  2.63k|#endif
 1654|  2.63k|  closeit = (ctrl == CONNCTRL_CONNECTION) ||
 1655|  2.63k|    ((ctrl == CONNCTRL_STREAM) && !(conn->handler->flags & PROTOPT_STREAM));
 1656|  2.63k|  if((ctrl == CONNCTRL_STREAM) &&
 1657|  2.63k|     (conn->handler->flags & PROTOPT_STREAM))
 1658|      0|    ;
 1659|  2.63k|  else if((bit)closeit != conn->bits.close) {
 1660|  1.73k|    conn->bits.close = closeit; /* the only place in the source code that
 1661|       |                                   should assign this bit */
 1662|  1.73k|  }
 1663|  2.63k|}
connect.c:connect_SOCKS:
  772|    524|{
  773|    524|  CURLcode result = CURLE_OK;
  774|    524|#ifndef CURL_DISABLE_PROXY
  775|    524|  CURLproxycode pxresult = CURLPX_OK;
  776|    524|  struct connectdata *conn = data->conn;
  777|    524|  if(conn->bits.socksproxy) {
  778|       |    /* for the secondary socket (FTP), use the "connect to host"
  779|       |     * but ignore the "connect to port" (use the secondary port)
  780|       |     */
  781|      0|    const char * const host =
  782|      0|      conn->bits.httpproxy ?
  783|      0|      conn->http_proxy.host.name :
  784|      0|      conn->bits.conn_to_host ?
  785|      0|      conn->conn_to_host.name :
  786|      0|      sockindex == SECONDARYSOCKET ?
  787|      0|      conn->secondaryhostname : conn->host.name;
  788|      0|    const int port =
  789|      0|      conn->bits.httpproxy ? (int)conn->http_proxy.port :
  790|      0|      sockindex == SECONDARYSOCKET ? conn->secondary_port :
  791|      0|      conn->bits.conn_to_port ? conn->conn_to_port :
  792|      0|      conn->remote_port;
  793|      0|    switch(conn->socks_proxy.proxytype) {
  794|      0|    case CURLPROXY_SOCKS5:
  795|      0|    case CURLPROXY_SOCKS5_HOSTNAME:
  796|      0|      pxresult = Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd,
  797|      0|                             host, port, sockindex, data, done);
  798|      0|      break;
  799|       |
  800|      0|    case CURLPROXY_SOCKS4:
  801|      0|    case CURLPROXY_SOCKS4A:
  802|      0|      pxresult = Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex,
  803|      0|                             data, done);
  804|      0|      break;
  805|       |
  806|      0|    default:
  807|      0|      failf(data, "unknown proxytype option given");
  808|      0|      result = CURLE_COULDNT_CONNECT;
  809|      0|    } /* switch proxytype */
  810|      0|    if(pxresult) {
  811|      0|      result = CURLE_PROXY;
  812|      0|      data->info.pxcode = pxresult;
  813|      0|    }
  814|      0|  }
  815|    524|  else
  816|       |#else
  817|       |    (void)data;
  818|       |    (void)sockindex;
  819|       |#endif /* CURL_DISABLE_PROXY */
  820|    524|    *done = TRUE; /* no SOCKS proxy, so consider us connected */
  821|       |
  822|    524|  return result;
  823|    524|}
connect.c:post_SOCKS:
  833|    524|{
  834|    524|  conn->bits.tcpconnect[sockindex] = TRUE;
  835|       |
  836|    524|  *connected = TRUE;
  837|    524|  if(sockindex == FIRSTSOCKET)
  838|    524|    Curl_pgrsTime(data, TIMER_CONNECT); /* connect done */
  839|    524|  Curl_updateconninfo(data, conn, conn->sock[sockindex]);
  840|    524|  Curl_verboseconnect(data, conn);
  841|    524|  data->info.numconnects++; /* to track the number of connections made */
  842|    524|}
connect.c:verifyconnect:
  494|    524|{
  495|    524|  bool rc = TRUE;
  496|    524|#ifdef SO_ERROR
  497|    524|  int err = 0;
  498|    524|  curl_socklen_t errSize = sizeof(err);
  499|       |
  500|       |#ifdef WIN32
  501|       |  /*
  502|       |   * In October 2003 we effectively nullified this function on Windows due to
  503|       |   * problems with it using all CPU in multi-threaded cases.
  504|       |   *
  505|       |   * In May 2004, we bring it back to offer more info back on connect failures.
  506|       |   * Gisle Vanem could reproduce the former problems with this function, but
  507|       |   * could avoid them by adding this SleepEx() call below:
  508|       |   *
  509|       |   *    "I don't have Rational Quantify, but the hint from his post was
  510|       |   *    ntdll::NtRemoveIoCompletion(). So I'd assume the SleepEx (or maybe
  511|       |   *    just Sleep(0) would be enough?) would release whatever
  512|       |   *    mutex/critical-section the ntdll call is waiting on.
  513|       |   *
  514|       |   *    Someone got to verify this on Win-NT 4.0, 2000."
  515|       |   */
  516|       |
  517|       |#ifdef _WIN32_WCE
  518|       |  Sleep(0);
  519|       |#else
  520|       |  SleepEx(0, FALSE);
  521|       |#endif
  522|       |
  523|       |#endif
  524|       |
  525|    524|  if(0 != getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void *)&err, &errSize))
  526|      0|    err = SOCKERRNO;
  527|       |#ifdef _WIN32_WCE
  528|       |  /* Old WinCE versions don't support SO_ERROR */
  529|       |  if(WSAENOPROTOOPT == err) {
  530|       |    SET_SOCKERRNO(0);
  531|       |    err = 0;
  532|       |  }
  533|       |#endif
  534|       |#if defined(EBADIOCTL) && defined(__minix)
  535|       |  /* Minix 3.1.x doesn't support getsockopt on UDP sockets */
  536|       |  if(EBADIOCTL == err) {
  537|       |    SET_SOCKERRNO(0);
  538|       |    err = 0;
  539|       |  }
  540|       |#endif
  541|    524|  if((0 == err) || (EISCONN == err))
  542|       |    /* we are connected, awesome! */
  543|    524|    rc = TRUE;
  544|      0|  else
  545|       |    /* This wasn't a successful connect */
  546|      0|    rc = FALSE;
  547|    524|  if(error)
  548|    524|    *error = err;
  549|       |#else
  550|       |  (void)sockfd;
  551|       |  if(error)
  552|       |    *error = SOCKERRNO;
  553|       |#endif
  554|    524|  return rc;
  555|    524|}
connect.c:ainext:
  562|    524|{
  563|    524|  struct Curl_addrinfo *ai = conn->tempaddr[tempindex];
  564|    524|  if(ai && next)
  565|      0|    ai = ai->ai_next;
  566|  1.04k|  while(ai && (ai->ai_family != conn->tempfamily[tempindex]))
  567|    524|    ai = ai->ai_next;
  568|    524|  conn->tempaddr[tempindex] = ai;
  569|    524|  return ai;
  570|    524|}
connect.c:singleipconnect:
 1161|    524|{
 1162|    524|  struct Curl_sockaddr_ex addr;
 1163|    524|  int rc = -1;
 1164|    524|  int error = 0;
 1165|    524|  bool isconnected = FALSE;
 1166|    524|  curl_socket_t sockfd;
 1167|    524|  CURLcode result;
 1168|    524|  char ipaddress[MAX_IPADR_LEN];
 1169|    524|  int port;
 1170|    524|  bool is_tcp;
 1171|    524|#ifdef TCP_FASTOPEN_CONNECT
 1172|    524|  int optval = 1;
 1173|    524|#endif
 1174|    524|  char buffer[STRERROR_LEN];
 1175|    524|  curl_socket_t *sockp = &conn->tempsock[tempindex];
 1176|    524|  *sockp = CURL_SOCKET_BAD;
 1177|       |
 1178|    524|  result = Curl_socket(data, ai, &addr, &sockfd);
 1179|    524|  if(result)
 1180|      0|    return result;
 1181|       |
 1182|       |  /* store remote address and port used in this connection attempt */
 1183|    524|  if(!Curl_addr2string((struct sockaddr*)&addr.sa_addr, addr.addrlen,
 1184|    524|                       ipaddress, &port)) {
 1185|       |    /* malformed address or bug in inet_ntop, try next address */
 1186|      0|    failf(data, "sa_addr inet_ntop() failed with errno %d: %s",
 1187|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
 1188|      0|    Curl_closesocket(data, conn, sockfd);
 1189|      0|    return CURLE_OK;
 1190|      0|  }
 1191|    524|  infof(data, "  Trying %s:%d...", ipaddress, port);
 1192|       |
 1193|    524|#ifdef ENABLE_IPV6
 1194|    524|  is_tcp = (addr.family == AF_INET || addr.family == AF_INET6) &&
 1195|    524|    addr.socktype == SOCK_STREAM;
 1196|       |#else
 1197|       |  is_tcp = (addr.family == AF_INET) && addr.socktype == SOCK_STREAM;
 1198|       |#endif
 1199|    524|  if(is_tcp && data->set.tcp_nodelay)
 1200|    524|    tcpnodelay(data, sockfd);
 1201|       |
 1202|    524|  nosigpipe(data, sockfd);
 1203|       |
 1204|    524|  Curl_sndbufset(sockfd);
 1205|       |
 1206|    524|  if(is_tcp && data->set.tcp_keepalive)
 1207|      0|    tcpkeepalive(data, sockfd);
 1208|       |
 1209|    524|  if(data->set.fsockopt) {
 1210|       |    /* activate callback for setting socket options */
 1211|    524|    Curl_set_in_callback(data, true);
 1212|    524|    error = data->set.fsockopt(data->set.sockopt_client,
 1213|    524|                               sockfd,
 1214|    524|                               CURLSOCKTYPE_IPCXN);
 1215|    524|    Curl_set_in_callback(data, false);
 1216|       |
 1217|    524|    if(error == CURL_SOCKOPT_ALREADY_CONNECTED)
 1218|    524|      isconnected = TRUE;
 1219|      0|    else if(error) {
 1220|      0|      Curl_closesocket(data, conn, sockfd); /* close the socket and bail out */
 1221|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1222|      0|    }
 1223|    524|  }
 1224|       |
 1225|       |  /* possibly bind the local end to an IP, interface or port */
 1226|    524|  if(addr.family == AF_INET
 1227|    524|#ifdef ENABLE_IPV6
 1228|    524|     || addr.family == AF_INET6
 1229|    524|#endif
 1230|    524|    ) {
 1231|    524|    result = bindlocal(data, sockfd, addr.family,
 1232|    524|                       Curl_ipv6_scope((struct sockaddr*)&addr.sa_addr));
 1233|    524|    if(result) {
 1234|      0|      Curl_closesocket(data, conn, sockfd); /* close socket and bail out */
 1235|      0|      if(result == CURLE_UNSUPPORTED_PROTOCOL) {
 1236|       |        /* The address family is not supported on this interface.
 1237|       |           We can continue trying addresses */
 1238|      0|        return CURLE_COULDNT_CONNECT;
 1239|      0|      }
 1240|      0|      return result;
 1241|      0|    }
 1242|    524|  }
 1243|       |
 1244|       |  /* set socket non-blocking */
 1245|    524|  (void)curlx_nonblock(sockfd, TRUE);
 1246|       |
 1247|    524|  conn->connecttime = Curl_now();
 1248|    524|  if(conn->num_addr > 1) {
 1249|      0|    Curl_expire(data, conn->timeoutms_per_addr[0], EXPIRE_DNS_PER_NAME);
 1250|      0|    Curl_expire(data, conn->timeoutms_per_addr[1], EXPIRE_DNS_PER_NAME2);
 1251|      0|  }
 1252|       |
 1253|       |  /* Connect TCP and QUIC sockets */
 1254|    524|  if(!isconnected && (conn->transport != TRNSPRT_UDP)) {
 1255|      0|    if(conn->bits.tcp_fastopen) {
 1256|       |#if defined(CONNECT_DATA_IDEMPOTENT) /* Darwin */
 1257|       |#  if defined(HAVE_BUILTIN_AVAILABLE)
 1258|       |      /* while connectx function is available since macOS 10.11 / iOS 9,
 1259|       |         it did not have the interface declared correctly until
 1260|       |         Xcode 9 / macOS SDK 10.13 */
 1261|       |      if(__builtin_available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *)) {
 1262|       |        sa_endpoints_t endpoints;
 1263|       |        endpoints.sae_srcif = 0;
 1264|       |        endpoints.sae_srcaddr = NULL;
 1265|       |        endpoints.sae_srcaddrlen = 0;
 1266|       |        endpoints.sae_dstaddr = &addr.sa_addr;
 1267|       |        endpoints.sae_dstaddrlen = addr.addrlen;
 1268|       |
 1269|       |        rc = connectx(sockfd, &endpoints, SAE_ASSOCID_ANY,
 1270|       |                      CONNECT_RESUME_ON_READ_WRITE | CONNECT_DATA_IDEMPOTENT,
 1271|       |                      NULL, 0, NULL, NULL);
 1272|       |      }
 1273|       |      else {
 1274|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1275|       |      }
 1276|       |#  else
 1277|       |      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1278|       |#  endif /* HAVE_BUILTIN_AVAILABLE */
 1279|       |#elif defined(TCP_FASTOPEN_CONNECT) /* Linux >= 4.11 */
 1280|      0|      if(setsockopt(sockfd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT,
 1281|      0|                    (void *)&optval, sizeof(optval)) < 0)
 1282|      0|        infof(data, "Failed to enable TCP Fast Open on fd %d", sockfd);
 1283|       |
 1284|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1285|       |#elif defined(MSG_FASTOPEN) /* old Linux */
 1286|       |      if(conn->given->flags & PROTOPT_SSL)
 1287|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1288|       |      else
 1289|       |        rc = 0; /* Do nothing */
 1290|       |#endif
 1291|      0|    }
 1292|      0|    else {
 1293|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1294|      0|    }
 1295|       |
 1296|      0|    if(-1 == rc)
 1297|      0|      error = SOCKERRNO;
 1298|       |#ifdef ENABLE_QUIC
 1299|       |    else if(conn->transport == TRNSPRT_QUIC) {
 1300|       |      /* pass in 'sockfd' separately since it hasn't been put into the
 1301|       |         tempsock array at this point */
 1302|       |      result = Curl_quic_connect(data, conn, sockfd, tempindex,
 1303|       |                                 &addr.sa_addr, addr.addrlen);
 1304|       |      if(result)
 1305|       |        error = SOCKERRNO;
 1306|       |    }
 1307|       |#endif
 1308|      0|  }
 1309|    524|  else {
 1310|    524|    *sockp = sockfd;
 1311|    524|    return CURLE_OK;
 1312|    524|  }
 1313|       |
 1314|      0|  if(-1 == rc) {
 1315|      0|    switch(error) {
 1316|      0|    case EINPROGRESS:
 1317|      0|    case EWOULDBLOCK:
 1318|      0|#if defined(EAGAIN)
 1319|       |#if (EAGAIN) != (EWOULDBLOCK)
 1320|       |      /* On some platforms EAGAIN and EWOULDBLOCK are the
 1321|       |       * same value, and on others they are different, hence
 1322|       |       * the odd #if
 1323|       |       */
 1324|       |    case EAGAIN:
 1325|       |#endif
 1326|      0|#endif
 1327|      0|      result = CURLE_OK;
 1328|      0|      break;
 1329|       |
 1330|      0|    default:
 1331|       |      /* unknown error, fallthrough and try another address! */
 1332|      0|      infof(data, "Immediate connect fail for %s: %s",
 1333|      0|            ipaddress, Curl_strerror(error, buffer, sizeof(buffer)));
 1334|      0|      data->state.os_errno = error;
 1335|       |
 1336|       |      /* connect failed */
 1337|      0|      Curl_closesocket(data, conn, sockfd);
 1338|      0|      result = CURLE_COULDNT_CONNECT;
 1339|      0|    }
 1340|      0|  }
 1341|       |
 1342|      0|  if(!result)
 1343|      0|    *sockp = sockfd;
 1344|       |
 1345|      0|  return result;
 1346|      0|}
connect.c:tcpnodelay:
 1062|    524|{
 1063|    524|#if defined(TCP_NODELAY)
 1064|    524|  curl_socklen_t onoff = (curl_socklen_t) 1;
 1065|    524|  int level = IPPROTO_TCP;
 1066|    524|#if !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1067|    524|  char buffer[STRERROR_LEN];
 1068|       |#else
 1069|       |  (void) data;
 1070|       |#endif
 1071|       |
 1072|    524|  if(setsockopt(sockfd, level, TCP_NODELAY, (void *)&onoff,
 1073|    524|                sizeof(onoff)) < 0)
 1074|    524|    infof(data, "Could not set TCP_NODELAY: %s",
 1075|    524|          Curl_strerror(SOCKERRNO, buffer, sizeof(buffer)));
 1076|       |#else
 1077|       |  (void)data;
 1078|       |  (void)sockfd;
 1079|       |#endif
 1080|    524|}
connect.c:bindlocal:
  240|    524|{
  241|    524|  struct connectdata *conn = data->conn;
  242|    524|  struct Curl_sockaddr_storage sa;
  243|    524|  struct sockaddr *sock = (struct sockaddr *)&sa;  /* bind to this address */
  244|    524|  curl_socklen_t sizeof_sa = 0; /* size of the data sock points to */
  245|    524|  struct sockaddr_in *si4 = (struct sockaddr_in *)&sa;
  246|    524|#ifdef ENABLE_IPV6
  247|    524|  struct sockaddr_in6 *si6 = (struct sockaddr_in6 *)&sa;
  248|    524|#endif
  249|       |
  250|    524|  struct Curl_dns_entry *h = NULL;
  251|    524|  unsigned short port = data->set.localport; /* use this port number, 0 for
  252|       |                                                "random" */
  253|       |  /* how many port numbers to try to bind to, increasing one at a time */
  254|    524|  int portnum = data->set.localportrange;
  255|    524|  const char *dev = data->set.str[STRING_DEVICE];
  256|    524|  int error;
  257|    524|#ifdef IP_BIND_ADDRESS_NO_PORT
  258|    524|  int on = 1;
  259|    524|#endif
  260|       |
  261|       |  /*************************************************************
  262|       |   * Select device to bind socket to
  263|       |   *************************************************************/
  264|    524|  if(!dev && !port)
  265|       |    /* no local kind of binding was requested */
  266|    524|    return CURLE_OK;
  267|       |
  268|      0|  memset(&sa, 0, sizeof(struct Curl_sockaddr_storage));
  269|       |
  270|      0|  if(dev && (strlen(dev)<255) ) {
  271|      0|    char myhost[256] = "";
  272|      0|    int done = 0; /* -1 for error, 1 for address found */
  273|      0|    bool is_interface = FALSE;
  274|      0|    bool is_host = FALSE;
  275|      0|    static const char *if_prefix = "if!";
  276|      0|    static const char *host_prefix = "host!";
  277|       |
  278|      0|    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
  279|      0|      dev += strlen(if_prefix);
  280|      0|      is_interface = TRUE;
  281|      0|    }
  282|      0|    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
  283|      0|      dev += strlen(host_prefix);
  284|      0|      is_host = TRUE;
  285|      0|    }
  286|       |
  287|       |    /* interface */
  288|      0|    if(!is_host) {
  289|      0|#ifdef SO_BINDTODEVICE
  290|       |      /* I am not sure any other OSs than Linux that provide this feature,
  291|       |       * and at the least I cannot test. --Ben
  292|       |       *
  293|       |       * This feature allows one to tightly bind the local socket to a
  294|       |       * particular interface.  This will force even requests to other
  295|       |       * local interfaces to go out the external interface.
  296|       |       *
  297|       |       *
  298|       |       * Only bind to the interface when specified as interface, not just
  299|       |       * as a hostname or ip address.
  300|       |       *
  301|       |       * interface might be a VRF, eg: vrf-blue, which means it cannot be
  302|       |       * converted to an IP address and would fail Curl_if2ip. Simply try
  303|       |       * to use it straight away.
  304|       |       */
  305|      0|      if(setsockopt(sockfd, SOL_SOCKET, SO_BINDTODEVICE,
  306|      0|                    dev, (curl_socklen_t)strlen(dev) + 1) == 0) {
  307|       |        /* This is typically "errno 1, error: Operation not permitted" if
  308|       |         * you're not running as root or another suitable privileged
  309|       |         * user.
  310|       |         * If it succeeds it means the parameter was a valid interface and
  311|       |         * not an IP address. Return immediately.
  312|       |         */
  313|      0|        return CURLE_OK;
  314|      0|      }
  315|      0|#endif
  316|       |
  317|      0|      switch(Curl_if2ip(af, scope, conn->scope_id, dev,
  318|      0|                        myhost, sizeof(myhost))) {
  319|      0|        case IF2IP_NOT_FOUND:
  320|      0|          if(is_interface) {
  321|       |            /* Do not fall back to treating it as a host name */
  322|      0|            failf(data, "Couldn't bind to interface '%s'", dev);
  323|      0|            return CURLE_INTERFACE_FAILED;
  324|      0|          }
  325|      0|          break;
  326|      0|        case IF2IP_AF_NOT_SUPPORTED:
  327|       |          /* Signal the caller to try another address family if available */
  328|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  329|      0|        case IF2IP_FOUND:
  330|      0|          is_interface = TRUE;
  331|       |          /*
  332|       |           * We now have the numerical IP address in the 'myhost' buffer
  333|       |           */
  334|      0|          infof(data, "Local Interface %s is ip %s using address family %i",
  335|      0|                dev, myhost, af);
  336|      0|          done = 1;
  337|      0|          break;
  338|      0|      }
  339|      0|    }
  340|      0|    if(!is_interface) {
  341|       |      /*
  342|       |       * This was not an interface, resolve the name as a host name
  343|       |       * or IP number
  344|       |       *
  345|       |       * Temporarily force name resolution to use only the address type
  346|       |       * of the connection. The resolve functions should really be changed
  347|       |       * to take a type parameter instead.
  348|       |       */
  349|      0|      unsigned char ipver = conn->ip_version;
  350|      0|      int rc;
  351|       |
  352|      0|      if(af == AF_INET)
  353|      0|        conn->ip_version = CURL_IPRESOLVE_V4;
  354|      0|#ifdef ENABLE_IPV6
  355|      0|      else if(af == AF_INET6)
  356|      0|        conn->ip_version = CURL_IPRESOLVE_V6;
  357|      0|#endif
  358|       |
  359|      0|      rc = Curl_resolv(data, dev, 0, FALSE, &h);
  360|      0|      if(rc == CURLRESOLV_PENDING)
  361|      0|        (void)Curl_resolver_wait_resolv(data, &h);
  362|      0|      conn->ip_version = ipver;
  363|       |
  364|      0|      if(h) {
  365|       |        /* convert the resolved address, sizeof myhost >= INET_ADDRSTRLEN */
  366|      0|        Curl_printable_address(h->addr, myhost, sizeof(myhost));
  367|      0|        infof(data, "Name '%s' family %i resolved to '%s' family %i",
  368|      0|              dev, af, myhost, h->addr->ai_family);
  369|      0|        Curl_resolv_unlock(data, h);
  370|      0|        if(af != h->addr->ai_family) {
  371|       |          /* bad IP version combo, signal the caller to try another address
  372|       |             family if available */
  373|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  374|      0|        }
  375|      0|        done = 1;
  376|      0|      }
  377|      0|      else {
  378|       |        /*
  379|       |         * provided dev was no interface (or interfaces are not supported
  380|       |         * e.g. solaris) no ip address and no domain we fail here
  381|       |         */
  382|      0|        done = -1;
  383|      0|      }
  384|      0|    }
  385|       |
  386|      0|    if(done > 0) {
  387|      0|#ifdef ENABLE_IPV6
  388|       |      /* IPv6 address */
  389|      0|      if(af == AF_INET6) {
  390|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  391|      0|        char *scope_ptr = strchr(myhost, '%');
  392|      0|        if(scope_ptr)
  393|      0|          *(scope_ptr++) = 0;
  394|      0|#endif
  395|      0|        if(Curl_inet_pton(AF_INET6, myhost, &si6->sin6_addr) > 0) {
  396|      0|          si6->sin6_family = AF_INET6;
  397|      0|          si6->sin6_port = htons(port);
  398|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  399|      0|          if(scope_ptr)
  400|       |            /* The "myhost" string either comes from Curl_if2ip or from
  401|       |               Curl_printable_address. The latter returns only numeric scope
  402|       |               IDs and the former returns none at all.  So the scope ID, if
  403|       |               present, is known to be numeric */
  404|      0|            si6->sin6_scope_id = atoi(scope_ptr);
  405|      0|#endif
  406|      0|        }
  407|      0|        sizeof_sa = sizeof(struct sockaddr_in6);
  408|      0|      }
  409|      0|      else
  410|      0|#endif
  411|       |      /* IPv4 address */
  412|      0|      if((af == AF_INET) &&
  413|      0|         (Curl_inet_pton(AF_INET, myhost, &si4->sin_addr) > 0)) {
  414|      0|        si4->sin_family = AF_INET;
  415|      0|        si4->sin_port = htons(port);
  416|      0|        sizeof_sa = sizeof(struct sockaddr_in);
  417|      0|      }
  418|      0|    }
  419|       |
  420|      0|    if(done < 1) {
  421|       |      /* errorbuf is set false so failf will overwrite any message already in
  422|       |         the error buffer, so the user receives this error message instead of a
  423|       |         generic resolve error. */
  424|      0|      data->state.errorbuf = FALSE;
  425|      0|      failf(data, "Couldn't bind to '%s'", dev);
  426|      0|      return CURLE_INTERFACE_FAILED;
  427|      0|    }
  428|      0|  }
  429|      0|  else {
  430|       |    /* no device was given, prepare sa to match af's needs */
  431|      0|#ifdef ENABLE_IPV6
  432|      0|    if(af == AF_INET6) {
  433|      0|      si6->sin6_family = AF_INET6;
  434|      0|      si6->sin6_port = htons(port);
  435|      0|      sizeof_sa = sizeof(struct sockaddr_in6);
  436|      0|    }
  437|      0|    else
  438|      0|#endif
  439|      0|    if(af == AF_INET) {
  440|      0|      si4->sin_family = AF_INET;
  441|      0|      si4->sin_port = htons(port);
  442|      0|      sizeof_sa = sizeof(struct sockaddr_in);
  443|      0|    }
  444|      0|  }
  445|      0|#ifdef IP_BIND_ADDRESS_NO_PORT
  446|      0|  (void)setsockopt(sockfd, SOL_IP, IP_BIND_ADDRESS_NO_PORT, &on, sizeof(on));
  447|      0|#endif
  448|      0|  for(;;) {
  449|      0|    if(bind(sockfd, sock, sizeof_sa) >= 0) {
  450|       |      /* we succeeded to bind */
  451|      0|      struct Curl_sockaddr_storage add;
  452|      0|      curl_socklen_t size = sizeof(add);
  453|      0|      memset(&add, 0, sizeof(struct Curl_sockaddr_storage));
  454|      0|      if(getsockname(sockfd, (struct sockaddr *) &add, &size) < 0) {
  455|      0|        char buffer[STRERROR_LEN];
  456|      0|        data->state.os_errno = error = SOCKERRNO;
  457|      0|        failf(data, "getsockname() failed with errno %d: %s",
  458|      0|              error, Curl_strerror(error, buffer, sizeof(buffer)));
  459|      0|        return CURLE_INTERFACE_FAILED;
  460|      0|      }
  461|      0|      infof(data, "Local port: %hu", port);
  462|      0|      conn->bits.bound = TRUE;
  463|      0|      return CURLE_OK;
  464|      0|    }
  465|       |
  466|      0|    if(--portnum > 0) {
  467|      0|      infof(data, "Bind to local port %hu failed, trying next", port);
  468|      0|      port++; /* try next port */
  469|       |      /* We re-use/clobber the port variable here below */
  470|      0|      if(sock->sa_family == AF_INET)
  471|      0|        si4->sin_port = ntohs(port);
  472|      0|#ifdef ENABLE_IPV6
  473|      0|      else
  474|      0|        si6->sin6_port = ntohs(port);
  475|      0|#endif
  476|      0|    }
  477|      0|    else
  478|      0|      break;
  479|      0|  }
  480|      0|  {
  481|      0|    char buffer[STRERROR_LEN];
  482|      0|    data->state.os_errno = error = SOCKERRNO;
  483|      0|    failf(data, "bind failed with errno %d: %s",
  484|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  485|      0|  }
  486|       |
  487|      0|  return CURLE_INTERFACE_FAILED;
  488|      0|}

Curl_all_content_encodings:
  853|      3|{
  854|      3|  size_t len = 0;
  855|      3|  const struct content_encoding * const *cep;
  856|      3|  const struct content_encoding *ce;
  857|      3|  char *ace;
  858|       |
  859|     12|  for(cep = encodings; *cep; cep++) {
  860|      9|    ce = *cep;
  861|      9|    if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT))
  862|      6|      len += strlen(ce->name) + 2;
  863|      9|  }
  864|       |
  865|      3|  if(!len)
  866|      0|    return strdup(CONTENT_ENCODING_DEFAULT);
  867|       |
  868|      3|  ace = malloc(len);
  869|      3|  if(ace) {
  870|      3|    char *p = ace;
  871|     12|    for(cep = encodings; *cep; cep++) {
  872|      9|      ce = *cep;
  873|      9|      if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT)) {
  874|      6|        strcpy(p, ce->name);
  875|      6|        p += strlen(p);
  876|      6|        *p++ = ',';
  877|      6|        *p++ = ' ';
  878|      6|      }
  879|      9|    }
  880|      3|    p[-2] = '\0';
  881|      3|  }
  882|       |
  883|      3|  return ace;
  884|      3|}

Curl_cookie_init:
 1161|    783|{
 1162|    783|  struct CookieInfo *c;
 1163|    783|  FILE *fp = NULL;
 1164|    783|  bool fromfile = TRUE;
 1165|    783|  char *line = NULL;
 1166|       |
 1167|    783|  if(NULL == inc) {
 1168|       |    /* we didn't get a struct, create one */
 1169|    783|    c = calloc(1, sizeof(struct CookieInfo));
 1170|    783|    if(!c)
 1171|      0|      return NULL; /* failed to get memory */
 1172|    783|    c->filename = strdup(file?file:"none"); /* copy the name just in case */
 1173|    783|    if(!c->filename)
 1174|      0|      goto fail; /* failed to get memory */
 1175|       |    /*
 1176|       |     * Initialize the next_expiration time to signal that we don't have enough
 1177|       |     * information yet.
 1178|       |     */
 1179|    783|    c->next_expiration = CURL_OFF_T_MAX;
 1180|    783|  }
 1181|      0|  else {
 1182|       |    /* we got an already existing one, use that */
 1183|      0|    c = inc;
 1184|      0|  }
 1185|    783|  c->running = FALSE; /* this is not running, this is init */
 1186|       |
 1187|    783|  if(file && !strcmp(file, "-")) {
 1188|      0|    fp = stdin;
 1189|      0|    fromfile = FALSE;
 1190|      0|  }
 1191|    783|  else if(file && !*file) {
 1192|       |    /* points to a "" string */
 1193|      0|    fp = NULL;
 1194|      0|  }
 1195|    783|  else
 1196|    783|    fp = file?fopen(file, FOPEN_READTEXT):NULL;
 1197|       |
 1198|    783|  c->newsession = newsession; /* new session? */
 1199|       |
 1200|    783|  if(fp) {
 1201|      0|    char *lineptr;
 1202|      0|    bool headerline;
 1203|       |
 1204|      0|    line = malloc(MAX_COOKIE_LINE);
 1205|      0|    if(!line)
 1206|      0|      goto fail;
 1207|      0|    while(Curl_get_line(line, MAX_COOKIE_LINE, fp)) {
 1208|      0|      if(checkprefix("Set-Cookie:", line)) {
 1209|       |        /* This is a cookie line, get it! */
 1210|      0|        lineptr = &line[11];
 1211|      0|        headerline = TRUE;
 1212|      0|      }
 1213|      0|      else {
 1214|      0|        lineptr = line;
 1215|      0|        headerline = FALSE;
 1216|      0|      }
 1217|      0|      while(*lineptr && ISBLANK(*lineptr))
 1218|      0|        lineptr++;
 1219|       |
 1220|      0|      Curl_cookie_add(data, c, headerline, TRUE, lineptr, NULL, NULL, TRUE);
 1221|      0|    }
 1222|      0|    free(line); /* free the line buffer */
 1223|       |
 1224|       |    /*
 1225|       |     * Remove expired cookies from the hash. We must make sure to run this
 1226|       |     * after reading the file, and not on every cookie.
 1227|       |     */
 1228|      0|    remove_expired(c);
 1229|       |
 1230|      0|    if(fromfile)
 1231|      0|      fclose(fp);
 1232|      0|  }
 1233|       |
 1234|    783|  c->running = TRUE;          /* now, we're running */
 1235|    783|  if(data)
 1236|    783|    data->state.cookie_engine = TRUE;
 1237|       |
 1238|    783|  return c;
 1239|       |
 1240|      0|fail:
 1241|      0|  free(line);
 1242|       |  /*
 1243|       |   * Only clean up if we allocated it here, as the original could still be in
 1244|       |   * use by a share handle.
 1245|       |   */
 1246|      0|  if(!inc)
 1247|      0|    Curl_cookie_cleanup(c);
 1248|      0|  if(fromfile && fp)
 1249|      0|    fclose(fp);
 1250|      0|  return NULL; /* out of memory */
 1251|    783|}
Curl_cookie_freelist:
 1476|   200k|{
 1477|   200k|  struct Cookie *next;
 1478|   200k|  while(co) {
 1479|      0|    next = co->next;
 1480|      0|    freecookie(co);
 1481|      0|    co = next;
 1482|      0|  }
 1483|   200k|}
Curl_cookie_cleanup:
 1532|  1.66k|{
 1533|  1.66k|  if(c) {
 1534|    783|    unsigned int i;
 1535|    783|    free(c->filename);
 1536|   201k|    for(i = 0; i < COOKIE_HASH_SIZE; i++)
 1537|   200k|      Curl_cookie_freelist(c->cookies[i]);
 1538|    783|    free(c); /* free the base struct as well */
 1539|    783|  }
 1540|  1.66k|}
Curl_flush_cookies:
 1730|  1.66k|{
 1731|  1.66k|  CURLcode res;
 1732|       |
 1733|  1.66k|  if(data->set.str[STRING_COOKIEJAR]) {
 1734|    783|    if(data->state.cookielist) {
 1735|       |      /* If there is a list of cookie files to read, do it first so that
 1736|       |         we have all the told files read before we write the new jar.
 1737|       |         Curl_cookie_loadfiles() LOCKS and UNLOCKS the share itself! */
 1738|      0|      Curl_cookie_loadfiles(data);
 1739|      0|    }
 1740|       |
 1741|    783|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1742|       |
 1743|       |    /* if we have a destination file for all the cookies to get dumped to */
 1744|    783|    res = cookie_output(data, data->cookies, data->set.str[STRING_COOKIEJAR]);
 1745|    783|    if(res)
 1746|      0|      infof(data, "WARNING: failed to save cookies in %s: %s",
 1747|      0|            data->set.str[STRING_COOKIEJAR], curl_easy_strerror(res));
 1748|    783|  }
 1749|    886|  else {
 1750|    886|    if(cleanup && data->state.cookielist) {
 1751|       |      /* since nothing is written, we can just free the list of cookie file
 1752|       |         names */
 1753|      0|      curl_slist_free_all(data->state.cookielist); /* clean up list */
 1754|      0|      data->state.cookielist = NULL;
 1755|      0|    }
 1756|    886|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1757|    886|  }
 1758|       |
 1759|  1.66k|  if(cleanup && (!data->share || (data->cookies != data->share->cookies))) {
 1760|  1.66k|    Curl_cookie_cleanup(data->cookies);
 1761|  1.66k|    data->cookies = NULL;
 1762|  1.66k|  }
 1763|  1.66k|  Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 1764|  1.66k|}
cookie.c:remove_expired:
  379|    783|{
  380|    783|  struct Cookie *co, *nx;
  381|    783|  curl_off_t now = (curl_off_t)time(NULL);
  382|    783|  unsigned int i;
  383|       |
  384|       |  /*
  385|       |   * If the earliest expiration timestamp in the jar is in the future we can
  386|       |   * skip scanning the whole jar and instead exit early as there won't be any
  387|       |   * cookies to evict.  If we need to evict however, reset the next_expiration
  388|       |   * counter in order to track the next one. In case the recorded first
  389|       |   * expiration is the max offset, then perform the safe fallback of checking
  390|       |   * all cookies.
  391|       |   */
  392|    783|  if(now < cookies->next_expiration &&
  393|    783|      cookies->next_expiration != CURL_OFF_T_MAX)
  394|      0|    return;
  395|    783|  else
  396|    783|    cookies->next_expiration = CURL_OFF_T_MAX;
  397|       |
  398|   201k|  for(i = 0; i < COOKIE_HASH_SIZE; i++) {
  399|   200k|    struct Cookie *pv = NULL;
  400|   200k|    co = cookies->cookies[i];
  401|   200k|    while(co) {
  402|      0|      nx = co->next;
  403|      0|      if(co->expires && co->expires < now) {
  404|      0|        if(!pv) {
  405|      0|          cookies->cookies[i] = co->next;
  406|      0|        }
  407|      0|        else {
  408|      0|          pv->next = co->next;
  409|      0|        }
  410|      0|        cookies->numcookies--;
  411|      0|        freecookie(co);
  412|      0|      }
  413|      0|      else {
  414|       |        /*
  415|       |         * If this cookie has an expiration timestamp earlier than what we've
  416|       |         * seen so far then record it for the next round of expirations.
  417|       |         */
  418|      0|        if(co->expires && co->expires < cookies->next_expiration)
  419|      0|          cookies->next_expiration = co->expires;
  420|      0|        pv = co;
  421|      0|      }
  422|      0|      co = nx;
  423|      0|    }
  424|   200k|  }
  425|    783|}
cookie.c:cookie_output:
 1585|    783|{
 1586|    783|  struct Cookie *co;
 1587|    783|  FILE *out = NULL;
 1588|    783|  bool use_stdout = FALSE;
 1589|    783|  char *tempstore = NULL;
 1590|    783|  CURLcode error = CURLE_OK;
 1591|       |
 1592|    783|  if(!c)
 1593|       |    /* no cookie engine alive */
 1594|      0|    return CURLE_OK;
 1595|       |
 1596|       |  /* at first, remove expired cookies */
 1597|    783|  remove_expired(c);
 1598|       |
 1599|    783|  if(!strcmp("-", filename)) {
 1600|       |    /* use stdout */
 1601|      0|    out = stdout;
 1602|      0|    use_stdout = TRUE;
 1603|      0|  }
 1604|    783|  else {
 1605|    783|    unsigned char randsuffix[9];
 1606|       |
 1607|    783|    if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
 1608|      0|      return 2;
 1609|       |
 1610|    783|    tempstore = aprintf("%s.%s.tmp", filename, randsuffix);
 1611|    783|    if(!tempstore)
 1612|      0|      return CURLE_OUT_OF_MEMORY;
 1613|       |
 1614|    783|    out = fopen(tempstore, FOPEN_WRITETEXT);
 1615|    783|    if(!out) {
 1616|      0|      error = CURLE_WRITE_ERROR;
 1617|      0|      goto error;
 1618|      0|    }
 1619|    783|  }
 1620|       |
 1621|    783|  fputs("# Netscape HTTP Cookie File\n"
 1622|    783|        "# https://curl.se/docs/http-cookies.html\n"
 1623|    783|        "# This file was generated by libcurl! Edit at your own risk.\n\n",
 1624|    783|        out);
 1625|       |
 1626|    783|  if(c->numcookies) {
 1627|      0|    unsigned int i;
 1628|      0|    size_t nvalid = 0;
 1629|      0|    struct Cookie **array;
 1630|       |
 1631|      0|    array = calloc(1, sizeof(struct Cookie *) * c->numcookies);
 1632|      0|    if(!array) {
 1633|      0|      error = CURLE_OUT_OF_MEMORY;
 1634|      0|      goto error;
 1635|      0|    }
 1636|       |
 1637|       |    /* only sort the cookies with a domain property */
 1638|      0|    for(i = 0; i < COOKIE_HASH_SIZE; i++) {
 1639|      0|      for(co = c->cookies[i]; co; co = co->next) {
 1640|      0|        if(!co->domain)
 1641|      0|          continue;
 1642|      0|        array[nvalid++] = co;
 1643|      0|      }
 1644|      0|    }
 1645|       |
 1646|      0|    qsort(array, nvalid, sizeof(struct Cookie *), cookie_sort_ct);
 1647|       |
 1648|      0|    for(i = 0; i < nvalid; i++) {
 1649|      0|      char *format_ptr = get_netscape_format(array[i]);
 1650|      0|      if(!format_ptr) {
 1651|      0|        free(array);
 1652|      0|        error = CURLE_OUT_OF_MEMORY;
 1653|      0|        goto error;
 1654|      0|      }
 1655|      0|      fprintf(out, "%s\n", format_ptr);
 1656|      0|      free(format_ptr);
 1657|      0|    }
 1658|       |
 1659|      0|    free(array);
 1660|      0|  }
 1661|       |
 1662|    783|  if(!use_stdout) {
 1663|    783|    fclose(out);
 1664|    783|    out = NULL;
 1665|    783|    if(Curl_rename(tempstore, filename)) {
 1666|      0|      unlink(tempstore);
 1667|      0|      error = CURLE_WRITE_ERROR;
 1668|      0|      goto error;
 1669|      0|    }
 1670|    783|  }
 1671|       |
 1672|       |  /*
 1673|       |   * If we reach here we have successfully written a cookie file so theree is
 1674|       |   * no need to inspect the error, any error case should have jumped into the
 1675|       |   * error block below.
 1676|       |   */
 1677|    783|  free(tempstore);
 1678|    783|  return CURLE_OK;
 1679|       |
 1680|      0|error:
 1681|      0|  if(out && !use_stdout)
 1682|      0|    fclose(out);
 1683|      0|  free(tempstore);
 1684|      0|  return error;
 1685|    783|}

Curl_freeaddrinfo:
   82|    524|{
   83|    524|  struct Curl_addrinfo *vqualifier canext;
   84|    524|  struct Curl_addrinfo *ca;
   85|       |
   86|  1.04k|  for(ca = cahead; ca; ca = canext) {
   87|    524|    canext = ca->ai_next;
   88|    524|    free(ca);
   89|    524|  }
   90|    524|}
Curl_getaddrinfo_ex:
  113|      3|{
  114|      3|  const struct addrinfo *ai;
  115|      3|  struct addrinfo *aihead;
  116|      3|  struct Curl_addrinfo *cafirst = NULL;
  117|      3|  struct Curl_addrinfo *calast = NULL;
  118|      3|  struct Curl_addrinfo *ca;
  119|      3|  size_t ss_size;
  120|      3|  int error;
  121|       |
  122|      3|  *result = NULL; /* assume failure */
  123|       |
  124|      3|  error = getaddrinfo(nodename, servname, hints, &aihead);
  125|      3|  if(error)
  126|      3|    return error;
  127|       |
  128|       |  /* traverse the addrinfo list */
  129|       |
  130|      0|  for(ai = aihead; ai != NULL; ai = ai->ai_next) {
  131|      0|    size_t namelen = ai->ai_canonname ? strlen(ai->ai_canonname) + 1 : 0;
  132|       |    /* ignore elements with unsupported address family, */
  133|       |    /* settle family-specific sockaddr structure size.  */
  134|      0|    if(ai->ai_family == AF_INET)
  135|      0|      ss_size = sizeof(struct sockaddr_in);
  136|      0|#ifdef ENABLE_IPV6
  137|      0|    else if(ai->ai_family == AF_INET6)
  138|      0|      ss_size = sizeof(struct sockaddr_in6);
  139|      0|#endif
  140|      0|    else
  141|      0|      continue;
  142|       |
  143|       |    /* ignore elements without required address info */
  144|      0|    if(!ai->ai_addr || !(ai->ai_addrlen > 0))
  145|      0|      continue;
  146|       |
  147|       |    /* ignore elements with bogus address size */
  148|      0|    if((size_t)ai->ai_addrlen < ss_size)
  149|      0|      continue;
  150|       |
  151|      0|    ca = malloc(sizeof(struct Curl_addrinfo) + ss_size + namelen);
  152|      0|    if(!ca) {
  153|      0|      error = EAI_MEMORY;
  154|      0|      break;
  155|      0|    }
  156|       |
  157|       |    /* copy each structure member individually, member ordering, */
  158|       |    /* size, or padding might be different for each platform.    */
  159|       |
  160|      0|    ca->ai_flags     = ai->ai_flags;
  161|      0|    ca->ai_family    = ai->ai_family;
  162|      0|    ca->ai_socktype  = ai->ai_socktype;
  163|      0|    ca->ai_protocol  = ai->ai_protocol;
  164|      0|    ca->ai_addrlen   = (curl_socklen_t)ss_size;
  165|      0|    ca->ai_addr      = NULL;
  166|      0|    ca->ai_canonname = NULL;
  167|      0|    ca->ai_next      = NULL;
  168|       |
  169|      0|    ca->ai_addr = (void *)((char *)ca + sizeof(struct Curl_addrinfo));
  170|      0|    memcpy(ca->ai_addr, ai->ai_addr, ss_size);
  171|       |
  172|      0|    if(namelen) {
  173|      0|      ca->ai_canonname = (void *)((char *)ca->ai_addr + ss_size);
  174|      0|      memcpy(ca->ai_canonname, ai->ai_canonname, namelen);
  175|      0|    }
  176|       |
  177|       |    /* if the return list is empty, this becomes the first element */
  178|      0|    if(!cafirst)
  179|      0|      cafirst = ca;
  180|       |
  181|       |    /* add this element last in the return list */
  182|      0|    if(calast)
  183|      0|      calast->ai_next = ca;
  184|      0|    calast = ca;
  185|       |
  186|      0|  }
  187|       |
  188|       |  /* destroy the addrinfo list */
  189|      0|  if(aihead)
  190|      0|    freeaddrinfo(aihead);
  191|       |
  192|       |  /* if we failed, also destroy the Curl_addrinfo list */
  193|      0|  if(error) {
  194|      0|    Curl_freeaddrinfo(cafirst);
  195|      0|    cafirst = NULL;
  196|      0|  }
  197|      0|  else if(!cafirst) {
  198|      0|#ifdef EAI_NONAME
  199|       |    /* rfc3493 conformant */
  200|      0|    error = EAI_NONAME;
  201|       |#else
  202|       |    /* rfc3493 obsoleted */
  203|       |    error = EAI_NODATA;
  204|       |#endif
  205|       |#ifdef USE_WINSOCK
  206|       |    SET_SOCKERRNO(error);
  207|       |#endif
  208|      0|  }
  209|       |
  210|      0|  *result = cafirst;
  211|       |
  212|       |  /* This is not a CURLcode */
  213|      0|  return error;
  214|      3|}
Curl_he2ai:
  260|    524|{
  261|    524|  struct Curl_addrinfo *ai;
  262|    524|  struct Curl_addrinfo *prevai = NULL;
  263|    524|  struct Curl_addrinfo *firstai = NULL;
  264|    524|  struct sockaddr_in *addr;
  265|    524|#ifdef ENABLE_IPV6
  266|    524|  struct sockaddr_in6 *addr6;
  267|    524|#endif
  268|    524|  CURLcode result = CURLE_OK;
  269|    524|  int i;
  270|    524|  char *curr;
  271|       |
  272|    524|  if(!he)
  273|       |    /* no input == no output! */
  274|      0|    return NULL;
  275|       |
  276|    524|  DEBUGASSERT((he->h_name != NULL) && (he->h_addr_list != NULL));
  277|       |
  278|  1.04k|  for(i = 0; (curr = he->h_addr_list[i]) != NULL; i++) {
  279|    524|    size_t ss_size;
  280|    524|    size_t namelen = strlen(he->h_name) + 1; /* include zero termination */
  281|    524|#ifdef ENABLE_IPV6
  282|    524|    if(he->h_addrtype == AF_INET6)
  283|      0|      ss_size = sizeof(struct sockaddr_in6);
  284|    524|    else
  285|    524|#endif
  286|    524|      ss_size = sizeof(struct sockaddr_in);
  287|       |
  288|       |    /* allocate memory to hold the struct, the address and the name */
  289|    524|    ai = calloc(1, sizeof(struct Curl_addrinfo) + ss_size + namelen);
  290|    524|    if(!ai) {
  291|      0|      result = CURLE_OUT_OF_MEMORY;
  292|      0|      break;
  293|      0|    }
  294|       |    /* put the address after the struct */
  295|    524|    ai->ai_addr = (void *)((char *)ai + sizeof(struct Curl_addrinfo));
  296|       |    /* then put the name after the address */
  297|    524|    ai->ai_canonname = (char *)ai->ai_addr + ss_size;
  298|    524|    memcpy(ai->ai_canonname, he->h_name, namelen);
  299|       |
  300|    524|    if(!firstai)
  301|       |      /* store the pointer we want to return from this function */
  302|    524|      firstai = ai;
  303|       |
  304|    524|    if(prevai)
  305|       |      /* make the previous entry point to this */
  306|      0|      prevai->ai_next = ai;
  307|       |
  308|    524|    ai->ai_family = he->h_addrtype;
  309|       |
  310|       |    /* we return all names as STREAM, so when using this address for TFTP
  311|       |       the type must be ignored and conn->socktype be used instead! */
  312|    524|    ai->ai_socktype = SOCK_STREAM;
  313|       |
  314|    524|    ai->ai_addrlen = (curl_socklen_t)ss_size;
  315|       |
  316|       |    /* leave the rest of the struct filled with zero */
  317|       |
  318|    524|    switch(ai->ai_family) {
  319|    524|    case AF_INET:
  320|    524|      addr = (void *)ai->ai_addr; /* storage area for this info */
  321|       |
  322|    524|      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
  323|    524|      addr->sin_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  324|    524|      addr->sin_port = htons((unsigned short)port);
  325|    524|      break;
  326|       |
  327|      0|#ifdef ENABLE_IPV6
  328|      0|    case AF_INET6:
  329|      0|      addr6 = (void *)ai->ai_addr; /* storage area for this info */
  330|       |
  331|      0|      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
  332|      0|      addr6->sin6_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  333|      0|      addr6->sin6_port = htons((unsigned short)port);
  334|      0|      break;
  335|    524|#endif
  336|    524|    }
  337|       |
  338|    524|    prevai = ai;
  339|    524|  }
  340|       |
  341|    524|  if(result) {
  342|      0|    Curl_freeaddrinfo(firstai);
  343|      0|    firstai = NULL;
  344|      0|  }
  345|       |
  346|    524|  return firstai;
  347|    524|}
Curl_ip2addr:
  373|    524|{
  374|    524|  struct Curl_addrinfo *ai;
  375|       |
  376|       |#if defined(__VMS) && \
  377|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  378|       |#pragma pointer_size save
  379|       |#pragma pointer_size short
  380|       |#pragma message disable PTRMISMATCH
  381|       |#endif
  382|       |
  383|    524|  struct hostent  *h;
  384|    524|  struct namebuff *buf;
  385|    524|  char  *addrentry;
  386|    524|  char  *hoststr;
  387|    524|  size_t addrsize;
  388|       |
  389|    524|  DEBUGASSERT(inaddr && hostname);
  390|       |
  391|    524|  buf = malloc(sizeof(struct namebuff));
  392|    524|  if(!buf)
  393|      0|    return NULL;
  394|       |
  395|    524|  hoststr = strdup(hostname);
  396|    524|  if(!hoststr) {
  397|      0|    free(buf);
  398|      0|    return NULL;
  399|      0|  }
  400|       |
  401|    524|  switch(af) {
  402|    524|  case AF_INET:
  403|    524|    addrsize = sizeof(struct in_addr);
  404|    524|    addrentry = (void *)&buf->addrentry.ina4;
  405|    524|    memcpy(addrentry, inaddr, sizeof(struct in_addr));
  406|    524|    break;
  407|      0|#ifdef ENABLE_IPV6
  408|      0|  case AF_INET6:
  409|      0|    addrsize = sizeof(struct in6_addr);
  410|      0|    addrentry = (void *)&buf->addrentry.ina6;
  411|      0|    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
  412|      0|    break;
  413|      0|#endif
  414|      0|  default:
  415|      0|    free(hoststr);
  416|      0|    free(buf);
  417|      0|    return NULL;
  418|    524|  }
  419|       |
  420|    524|  h = &buf->hostentry;
  421|    524|  h->h_name = hoststr;
  422|    524|  h->h_aliases = NULL;
  423|    524|  h->h_addrtype = (short)af;
  424|    524|  h->h_length = (short)addrsize;
  425|    524|  h->h_addr_list = &buf->h_addr_list[0];
  426|    524|  h->h_addr_list[0] = addrentry;
  427|    524|  h->h_addr_list[1] = NULL; /* terminate list of entries */
  428|       |
  429|       |#if defined(__VMS) && \
  430|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  431|       |#pragma pointer_size restore
  432|       |#pragma message enable PTRMISMATCH
  433|       |#endif
  434|       |
  435|    524|  ai = Curl_he2ai(h, port);
  436|       |
  437|    524|  free(hoststr);
  438|    524|  free(buf);
  439|       |
  440|    524|  return ai;
  441|    524|}
curl_dbg_getaddrinfo:
  550|      3|{
  551|       |#ifdef USE_LWIPSOCK
  552|       |  int res = lwip_getaddrinfo(hostname, service, hints, result);
  553|       |#else
  554|      3|  int res = (getaddrinfo)(hostname, service, hints, result);
  555|      3|#endif
  556|      3|  if(0 == res)
  557|       |    /* success */
  558|      0|    curl_dbg_log("ADDR %s:%d getaddrinfo() = %p\n",
  559|      0|                 source, line, (void *)*result);
  560|      3|  else
  561|      3|    curl_dbg_log("ADDR %s:%d getaddrinfo() failed\n",
  562|      3|                 source, line);
  563|      3|  return res;
  564|      3|}

Curl_isdigit:
   71|   240k|{
   72|   240k|  if((c < 0) || (c >= 0x80))
   73|     21|    return FALSE;
   74|   240k|  return (ascii[c] & _N);
   75|   240k|}
Curl_isalnum:
   78|  5.02k|{
   79|  5.02k|  if((c < 0) || (c >= 0x80))
   80|     92|    return FALSE;
   81|  4.92k|  return (ascii[c] & (_N|_U|_L));
   82|  5.02k|}
Curl_isxdigit:
   85|    403|{
   86|    403|  if((c < 0) || (c >= 0x80))
   87|     24|    return FALSE;
   88|    379|  return (ascii[c] & (_N|_X));
   89|    403|}

Curl_http_auth_cleanup_ntlm_wb:
  493|    688|{
  494|    688|  ntlm_wb_cleanup(&conn->ntlm);
  495|    688|  ntlm_wb_cleanup(&conn->proxyntlm);
  496|    688|}
curl_ntlm_wb.c:ntlm_wb_cleanup:
   80|  1.37k|{
   81|  1.37k|  if(ntlm->ntlm_auth_hlpr_socket != CURL_SOCKET_BAD) {
   82|      0|    sclose(ntlm->ntlm_auth_hlpr_socket);
   83|      0|    ntlm->ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
   84|      0|  }
   85|       |
   86|  1.37k|  if(ntlm->ntlm_auth_hlpr_pid) {
   87|      0|    int i;
   88|      0|    for(i = 0; i < 4; i++) {
   89|      0|      pid_t ret = waitpid(ntlm->ntlm_auth_hlpr_pid, NULL, WNOHANG);
   90|      0|      if(ret == ntlm->ntlm_auth_hlpr_pid || errno == ECHILD)
   91|      0|        break;
   92|      0|      switch(i) {
   93|      0|      case 0:
   94|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGTERM);
   95|      0|        break;
   96|      0|      case 1:
   97|       |        /* Give the process another moment to shut down cleanly before
   98|       |           bringing down the axe */
   99|      0|        Curl_wait_ms(1);
  100|      0|        break;
  101|      0|      case 2:
  102|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGKILL);
  103|      0|        break;
  104|      0|      case 3:
  105|      0|        break;
  106|      0|      }
  107|      0|    }
  108|      0|    ntlm->ntlm_auth_hlpr_pid = 0;
  109|      0|  }
  110|       |
  111|  1.37k|  Curl_safefree(ntlm->challenge);
  112|  1.37k|  Curl_safefree(ntlm->response);
  113|  1.37k|}

Curl_thread_create:
   63|      3|{
   64|      3|  curl_thread_t t = malloc(sizeof(pthread_t));
   65|      3|  struct Curl_actual_call *ac = malloc(sizeof(struct Curl_actual_call));
   66|      3|  if(!(ac && t))
   67|      0|    goto err;
   68|       |
   69|      3|  ac->func = func;
   70|      3|  ac->arg = arg;
   71|       |
   72|      3|  if(pthread_create(t, NULL, curl_thread_create_thunk, ac) != 0)
   73|      0|    goto err;
   74|       |
   75|      3|  return t;
   76|       |
   77|      0|err:
   78|      0|  free(t);
   79|      0|  free(ac);
   80|      0|  return curl_thread_t_null;
   81|      3|}
Curl_thread_join:
   92|      3|{
   93|      3|  int ret = (pthread_join(**hnd, NULL) == 0);
   94|       |
   95|      3|  free(*hnd);
   96|      3|  *hnd = curl_thread_t_null;
   97|       |
   98|      3|  return ret;
   99|      3|}
curl_threads.c:curl_thread_create_thunk:
   50|      3|{
   51|      3|  struct Curl_actual_call *ac = arg;
   52|      3|  unsigned int (*func)(void *) = ac->func;
   53|      3|  void *real_arg = ac->arg;
   54|       |
   55|      3|  free(ac);
   56|       |
   57|      3|  (*func)(real_arg);
   58|       |
   59|      3|  return 0;
   60|      3|}

Curl_dedotdotify:
   54|    309|{
   55|    309|  size_t inlen = strlen(input);
   56|    309|  char *clone;
   57|    309|  size_t clen = inlen; /* the length of the cloned input */
   58|    309|  char *out = malloc(inlen + 1);
   59|    309|  char *outptr;
   60|    309|  char *orgclone;
   61|    309|  char *queryp;
   62|    309|  if(!out)
   63|      0|    return NULL; /* out of memory */
   64|       |
   65|    309|  *out = 0; /* null-terminates, for inputs like "./" */
   66|       |
   67|       |  /* get a cloned copy of the input */
   68|    309|  clone = strdup(input);
   69|    309|  if(!clone) {
   70|      0|    free(out);
   71|      0|    return NULL;
   72|      0|  }
   73|    309|  orgclone = clone;
   74|    309|  outptr = out;
   75|       |
   76|    309|  if(!*clone) {
   77|       |    /* zero length string, return that */
   78|      0|    free(out);
   79|      0|    return clone;
   80|      0|  }
   81|       |
   82|       |  /*
   83|       |   * To handle query-parts properly, we must find it and remove it during the
   84|       |   * dotdot-operation and then append it again at the end to the output
   85|       |   * string.
   86|       |   */
   87|    309|  queryp = strchr(clone, '?');
   88|    309|  if(queryp)
   89|      0|    *queryp = 0;
   90|       |
   91|    844|  do {
   92|       |
   93|       |    /*  A.  If the input buffer begins with a prefix of "../" or "./", then
   94|       |        remove that prefix from the input buffer; otherwise, */
   95|       |
   96|    844|    if(!strncmp("./", clone, 2)) {
   97|      0|      clone += 2;
   98|      0|      clen -= 2;
   99|      0|    }
  100|    844|    else if(!strncmp("../", clone, 3)) {
  101|      0|      clone += 3;
  102|      0|      clen -= 3;
  103|      0|    }
  104|       |
  105|       |    /*  B.  if the input buffer begins with a prefix of "/./" or "/.", where
  106|       |        "."  is a complete path segment, then replace that prefix with "/" in
  107|       |        the input buffer; otherwise, */
  108|    844|    else if(!strncmp("/./", clone, 3)) {
  109|     21|      clone += 2;
  110|     21|      clen -= 2;
  111|     21|    }
  112|    823|    else if(!strcmp("/.", clone)) {
  113|      1|      clone[1]='/';
  114|      1|      clone++;
  115|      1|      clen -= 1;
  116|      1|    }
  117|       |
  118|       |    /*  C.  if the input buffer begins with a prefix of "/../" or "/..", where
  119|       |        ".." is a complete path segment, then replace that prefix with "/" in
  120|       |        the input buffer and remove the last segment and its preceding "/" (if
  121|       |        any) from the output buffer; otherwise, */
  122|       |
  123|    822|    else if(!strncmp("/../", clone, 4)) {
  124|     41|      clone += 3;
  125|     41|      clen -= 3;
  126|       |      /* remove the last segment from the output buffer */
  127|    405|      while(outptr > out) {
  128|    392|        outptr--;
  129|    392|        if(*outptr == '/')
  130|     28|          break;
  131|    392|      }
  132|     41|      *outptr = 0; /* null-terminate where it stops */
  133|     41|    }
  134|    781|    else if(!strcmp("/..", clone)) {
  135|     10|      clone[2]='/';
  136|     10|      clone += 2;
  137|     10|      clen -= 2;
  138|       |      /* remove the last segment from the output buffer */
  139|    221|      while(outptr > out) {
  140|    220|        outptr--;
  141|    220|        if(*outptr == '/')
  142|      9|          break;
  143|    220|      }
  144|     10|      *outptr = 0; /* null-terminate where it stops */
  145|     10|    }
  146|       |
  147|       |    /*  D.  if the input buffer consists only of "." or "..", then remove
  148|       |        that from the input buffer; otherwise, */
  149|       |
  150|    771|    else if(!strcmp(".", clone) || !strcmp("..", clone)) {
  151|      0|      *clone = 0;
  152|      0|      *out = 0;
  153|      0|    }
  154|       |
  155|    771|    else {
  156|       |      /*  E.  move the first path segment in the input buffer to the end of
  157|       |          the output buffer, including the initial "/" character (if any) and
  158|       |          any subsequent characters up to, but not including, the next "/"
  159|       |          character or the end of the input buffer. */
  160|       |
  161|  5.35k|      do {
  162|  5.35k|        *outptr++ = *clone++;
  163|  5.35k|        clen--;
  164|  5.35k|      } while(*clone && (*clone != '/'));
  165|    771|      *outptr = 0;
  166|    771|    }
  167|       |
  168|    844|  } while(*clone);
  169|       |
  170|    309|  if(queryp) {
  171|      0|    size_t qlen;
  172|       |    /* There was a query part, append that to the output. The 'clone' string
  173|       |       may now have been altered so we copy from the original input string
  174|       |       from the correct index. */
  175|      0|    size_t oindex = queryp - orgclone;
  176|      0|    qlen = strlen(&input[oindex]);
  177|      0|    memcpy(outptr, &input[oindex], qlen + 1); /* include the end zero byte */
  178|      0|  }
  179|       |
  180|    309|  free(orgclone);
  181|    309|  return out;
  182|    309|}

Curl_dyn_init:
   39|  3.55k|{
   40|  3.55k|  DEBUGASSERT(s);
   41|  3.55k|  DEBUGASSERT(toobig);
   42|  3.55k|  s->bufr = NULL;
   43|  3.55k|  s->leng = 0;
   44|  3.55k|  s->allc = 0;
   45|  3.55k|  s->toobig = toobig;
   46|  3.55k|#ifdef DEBUGBUILD
   47|  3.55k|  s->init = DYNINIT;
   48|  3.55k|#endif
   49|  3.55k|}
Curl_dyn_free:
   56|  2.88k|{
   57|  2.88k|  DEBUGASSERT(s);
   58|  2.88k|  Curl_safefree(s->bufr);
   59|  2.88k|  s->leng = s->allc = 0;
   60|  2.88k|}
Curl_dyn_reset:
  120|    551|{
  121|    551|  DEBUGASSERT(s);
  122|    551|  DEBUGASSERT(s->init == DYNINIT);
  123|    551|  DEBUGASSERT(!s->leng || s->bufr);
  124|    551|  if(s->leng)
  125|    366|    s->bufr[0] = 0;
  126|    551|  s->leng = 0;
  127|    551|}
Curl_dyn_addn:
  160|  81.9k|{
  161|  81.9k|  DEBUGASSERT(s);
  162|  81.9k|  DEBUGASSERT(s->init == DYNINIT);
  163|  81.9k|  DEBUGASSERT(!s->leng || s->bufr);
  164|  81.9k|  return dyn_nappend(s, mem, len);
  165|  81.9k|}
Curl_dyn_vaddf:
  183|    551|{
  184|    551|#ifdef BUILDING_LIBCURL
  185|    551|  int rc;
  186|    551|  DEBUGASSERT(s);
  187|    551|  DEBUGASSERT(s->init == DYNINIT);
  188|    551|  DEBUGASSERT(!s->leng || s->bufr);
  189|    551|  rc = Curl_dyn_vprintf(s, fmt, ap);
  190|       |
  191|    551|  if(!rc)
  192|    551|    return CURLE_OK;
  193|       |#else
  194|       |  char *str;
  195|       |  str = vaprintf(fmt, ap); /* this allocs a new string to append */
  196|       |
  197|       |  if(str) {
  198|       |    CURLcode result = dyn_nappend(s, (unsigned char *)str, strlen(str));
  199|       |    free(str);
  200|       |    return result;
  201|       |  }
  202|       |  /* If we failed, we cleanup the whole buffer and return error */
  203|       |  Curl_dyn_free(s);
  204|       |#endif
  205|      0|  return CURLE_OUT_OF_MEMORY;
  206|    551|}
Curl_dyn_ptr:
  228|  1.96k|{
  229|  1.96k|  DEBUGASSERT(s);
  230|  1.96k|  DEBUGASSERT(s->init == DYNINIT);
  231|  1.96k|  DEBUGASSERT(!s->leng || s->bufr);
  232|  1.96k|  return s->bufr;
  233|  1.96k|}
Curl_dyn_len:
  250|  1.96k|{
  251|  1.96k|  DEBUGASSERT(s);
  252|  1.96k|  DEBUGASSERT(s->init == DYNINIT);
  253|  1.96k|  DEBUGASSERT(!s->leng || s->bufr);
  254|  1.96k|  return s->leng;
  255|  1.96k|}
dynbuf.c:dyn_nappend:
   67|  81.9k|{
   68|  81.9k|  size_t indx = s->leng;
   69|  81.9k|  size_t a = s->allc;
   70|  81.9k|  size_t fit = len + indx + 1; /* new string + old string + zero byte */
   71|       |
   72|       |  /* try to detect if there's rubbish in the struct */
   73|  81.9k|  DEBUGASSERT(s->init == DYNINIT);
   74|  81.9k|  DEBUGASSERT(s->toobig);
   75|  81.9k|  DEBUGASSERT(indx < s->toobig);
   76|  81.9k|  DEBUGASSERT(!s->leng || s->bufr);
   77|       |
   78|  81.9k|  if(fit > s->toobig) {
   79|      0|    Curl_dyn_free(s);
   80|      0|    return CURLE_OUT_OF_MEMORY;
   81|      0|  }
   82|  81.9k|  else if(!a) {
   83|  1.59k|    DEBUGASSERT(!indx);
   84|       |    /* first invoke */
   85|  1.59k|    if(fit < MIN_FIRST_ALLOC)
   86|  1.59k|      a = MIN_FIRST_ALLOC;
   87|      0|    else
   88|      0|      a = fit;
   89|  1.59k|  }
   90|  80.3k|  else {
   91|  80.9k|    while(a < fit)
   92|    579|      a *= 2;
   93|  80.3k|  }
   94|       |
   95|  81.9k|  if(a != s->allc) {
   96|       |    /* this logic is not using Curl_saferealloc() to make the tool not have to
   97|       |       include that as well when it uses this code */
   98|  2.17k|    void *p = realloc(s->bufr, a);
   99|  2.17k|    if(!p) {
  100|      0|      Curl_safefree(s->bufr);
  101|      0|      s->leng = s->allc = 0;
  102|      0|      return CURLE_OUT_OF_MEMORY;
  103|      0|    }
  104|  2.17k|    s->bufr = p;
  105|  2.17k|    s->allc = a;
  106|  2.17k|  }
  107|       |
  108|  81.9k|  if(len)
  109|  81.9k|    memcpy(&s->bufr[indx], mem, len);
  110|  81.9k|  s->leng = indx + len;
  111|  81.9k|  s->bufr[s->leng] = 0;
  112|  81.9k|  return CURLE_OK;
  113|  81.9k|}

curl_global_init:
  216|      1|{
  217|      1|  return global_init(flags, TRUE);
  218|      1|}
curl_easy_init:
  290|  1.66k|{
  291|  1.66k|  CURLcode result;
  292|  1.66k|  struct Curl_easy *data;
  293|       |
  294|       |  /* Make sure we inited the global SSL stuff */
  295|  1.66k|  if(!initialized) {
  296|      1|    result = curl_global_init(CURL_GLOBAL_DEFAULT);
  297|      1|    if(result) {
  298|       |      /* something in the global init failed, return nothing */
  299|      0|      DEBUGF(fprintf(stderr, "Error: curl_global_init failed\n"));
  300|      0|      return NULL;
  301|      0|    }
  302|      1|  }
  303|       |
  304|       |  /* We use curl_open() with undefined URL so far */
  305|  1.66k|  result = Curl_open(&data);
  306|  1.66k|  if(result) {
  307|      0|    DEBUGF(fprintf(stderr, "Error: Curl_open failed\n"));
  308|      0|    return NULL;
  309|      0|  }
  310|       |
  311|  1.66k|  return data;
  312|  1.66k|}
curl_easy_cleanup:
  735|    886|{
  736|    886|  SIGPIPE_VARIABLE(pipe_st);
  737|       |
  738|    886|  if(!data)
  739|      0|    return;
  740|       |
  741|    886|  sigpipe_ignore(data, &pipe_st);
  742|    886|  Curl_close(&data);
  743|    886|  sigpipe_restore(&pipe_st);
  744|    886|}
easy.c:global_init:
  136|      1|{
  137|      1|  if(initialized++)
  138|      0|    return CURLE_OK;
  139|       |
  140|      1|  if(memoryfuncs) {
  141|       |    /* Setup the default memory functions here (again) */
  142|      1|    Curl_cmalloc = (curl_malloc_callback)malloc;
  143|      1|    Curl_cfree = (curl_free_callback)free;
  144|      1|    Curl_crealloc = (curl_realloc_callback)realloc;
  145|      1|    Curl_cstrdup = (curl_strdup_callback)system_strdup;
  146|      1|    Curl_ccalloc = (curl_calloc_callback)calloc;
  147|       |#if defined(WIN32) && defined(UNICODE)
  148|       |    Curl_cwcsdup = (curl_wcsdup_callback)_wcsdup;
  149|       |#endif
  150|      1|  }
  151|       |
  152|      1|  if(!Curl_ssl_init()) {
  153|      0|    DEBUGF(fprintf(stderr, "Error: Curl_ssl_init failed\n"));
  154|      0|    goto fail;
  155|      0|  }
  156|       |
  157|       |#ifdef WIN32
  158|       |  if(Curl_win32_init(flags)) {
  159|       |    DEBUGF(fprintf(stderr, "Error: win32_init failed\n"));
  160|       |    goto fail;
  161|       |  }
  162|       |#endif
  163|       |
  164|       |#ifdef __AMIGA__
  165|       |  if(!Curl_amiga_init()) {
  166|       |    DEBUGF(fprintf(stderr, "Error: Curl_amiga_init failed\n"));
  167|       |    goto fail;
  168|       |  }
  169|       |#endif
  170|       |
  171|       |#ifdef NETWARE
  172|       |  if(netware_init()) {
  173|       |    DEBUGF(fprintf(stderr, "Warning: LONG namespace not available\n"));
  174|       |  }
  175|       |#endif
  176|       |
  177|      1|  if(Curl_resolver_global_init()) {
  178|      0|    DEBUGF(fprintf(stderr, "Error: resolver_global_init failed\n"));
  179|      0|    goto fail;
  180|      0|  }
  181|       |
  182|       |#if defined(USE_SSH)
  183|       |  if(Curl_ssh_init()) {
  184|       |    goto fail;
  185|       |  }
  186|       |#endif
  187|       |
  188|       |#ifdef USE_WOLFSSH
  189|       |  if(WS_SUCCESS != wolfSSH_Init()) {
  190|       |    DEBUGF(fprintf(stderr, "Error: wolfSSH_Init failed\n"));
  191|       |    return CURLE_FAILED_INIT;
  192|       |  }
  193|       |#endif
  194|       |
  195|      1|  init_flags = flags;
  196|       |
  197|      1|#ifdef DEBUGBUILD
  198|      1|  if(getenv("CURL_GLOBAL_INIT"))
  199|       |    /* alloc data that will leak if *cleanup() is not called! */
  200|      0|    leakpointer = malloc(1);
  201|      1|#endif
  202|       |
  203|      1|  return CURLE_OK;
  204|       |
  205|      0|  fail:
  206|      0|  initialized--; /* undo the increase */
  207|      0|  return CURLE_FAILED_INIT;
  208|      1|}

Curl_isunreserved:
   45|  75.1k|{
   46|  75.1k|  switch(in) {
   47|  6.11k|    case '0': case '1': case '2': case '3': case '4':
   48|  11.5k|    case '5': case '6': case '7': case '8': case '9':
   49|  15.7k|    case 'a': case 'b': case 'c': case 'd': case 'e':
   50|  17.4k|    case 'f': case 'g': case 'h': case 'i': case 'j':
   51|  20.0k|    case 'k': case 'l': case 'm': case 'n': case 'o':
   52|  24.4k|    case 'p': case 'q': case 'r': case 's': case 't':
   53|  29.0k|    case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
   54|  31.1k|    case 'A': case 'B': case 'C': case 'D': case 'E':
   55|  32.0k|    case 'F': case 'G': case 'H': case 'I': case 'J':
   56|  33.7k|    case 'K': case 'L': case 'M': case 'N': case 'O':
   57|  36.4k|    case 'P': case 'Q': case 'R': case 'S': case 'T':
   58|  39.5k|    case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
   59|  41.9k|    case '-': case '.': case '_': case '~':
   60|  41.9k|      return TRUE;
   61|  33.2k|    default:
   62|  33.2k|      break;
   63|  75.1k|  }
   64|  33.2k|  return FALSE;
   65|  75.1k|}
Curl_urldecode:
  146|    478|{
  147|    478|  size_t alloc;
  148|    478|  char *ns;
  149|    478|  size_t strindex = 0;
  150|    478|  unsigned long hex;
  151|    478|  CURLcode result = CURLE_OK;
  152|       |
  153|    478|  DEBUGASSERT(string);
  154|    478|  DEBUGASSERT(ctrl >= REJECT_NADA); /* crash on TRUE/FALSE */
  155|       |
  156|    478|  alloc = (length?length:strlen(string)) + 1;
  157|    478|  ns = malloc(alloc);
  158|       |
  159|    478|  if(!ns)
  160|      0|    return CURLE_OUT_OF_MEMORY;
  161|       |
  162|  8.76k|  while(--alloc > 0) {
  163|  8.29k|    unsigned char in = *string;
  164|  8.29k|    if(('%' == in) && (alloc > 2) &&
  165|  8.29k|       ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
  166|       |      /* this is two hexadecimal digits following a '%' */
  167|     14|      char hexstr[3];
  168|     14|      char *ptr;
  169|     14|      hexstr[0] = string[1];
  170|     14|      hexstr[1] = string[2];
  171|     14|      hexstr[2] = 0;
  172|       |
  173|     14|      hex = strtoul(hexstr, &ptr, 16);
  174|       |
  175|     14|      in = curlx_ultouc(hex); /* this long is never bigger than 255 anyway */
  176|       |
  177|     14|      if(data) {
  178|      0|        result = Curl_convert_from_network(data, (char *)&in, 1);
  179|      0|        if(result) {
  180|       |          /* Curl_convert_from_network calls failf if unsuccessful */
  181|      0|          free(ns);
  182|      0|          return result;
  183|      0|        }
  184|      0|      }
  185|       |
  186|     14|      string += 2;
  187|     14|      alloc -= 2;
  188|     14|    }
  189|       |
  190|  8.29k|    if(((ctrl == REJECT_CTRL) && (in < 0x20)) ||
  191|  8.29k|       ((ctrl == REJECT_ZERO) && (in == 0))) {
  192|      5|      free(ns);
  193|      5|      return CURLE_URL_MALFORMAT;
  194|      5|    }
  195|       |
  196|  8.29k|    ns[strindex++] = in;
  197|  8.29k|    string++;
  198|  8.29k|  }
  199|    473|  ns[strindex] = 0; /* terminate it */
  200|       |
  201|    473|  if(olen)
  202|       |    /* store output size */
  203|    273|    *olen = strindex;
  204|       |
  205|       |  /* store output string */
  206|    473|  *ostring = ns;
  207|       |
  208|    473|  return CURLE_OK;
  209|    478|}

Curl_fileinfo_cleanup:
   37|      3|{
   38|      3|  if(!finfo)
   39|      3|    return;
   40|       |
   41|      0|  Curl_safefree(finfo->info.b_data);
   42|      0|  free(finfo);
   43|      0|}

ftp.c:ftp_readresp:
  554|  1.00k|{
  555|  1.00k|  int code;
  556|  1.00k|  CURLcode result = Curl_pp_readresp(data, sockfd, pp, &code, size);
  557|       |
  558|       |#ifdef HAVE_GSSAPI
  559|       |  {
  560|       |    struct connectdata *conn = data->conn;
  561|       |    char * const buf = data->state.buffer;
  562|       |
  563|       |    /* handle the security-oriented responses 6xx ***/
  564|       |    switch(code) {
  565|       |    case 631:
  566|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_SAFE);
  567|       |      break;
  568|       |    case 632:
  569|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_PRIVATE);
  570|       |      break;
  571|       |    case 633:
  572|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_CONFIDENTIAL);
  573|       |      break;
  574|       |    default:
  575|       |      /* normal ftp stuff we pass through! */
  576|       |      break;
  577|       |    }
  578|       |  }
  579|       |#endif
  580|       |
  581|       |  /* store the latest code for later retrieval */
  582|  1.00k|  data->info.httpcode = code;
  583|       |
  584|  1.00k|  if(ftpcode)
  585|  1.00k|    *ftpcode = code;
  586|       |
  587|  1.00k|  if(421 == code) {
  588|       |    /* 421 means "Service not available, closing control connection." and FTP
  589|       |     * servers use it to signal that idle session timeout has been exceeded.
  590|       |     * If we ignored the response, it could end up hanging in some cases.
  591|       |     *
  592|       |     * This response code can come at any point so having it treated
  593|       |     * generically is a good idea.
  594|       |     */
  595|      1|    infof(data, "We got a 421 - timeout!");
  596|      1|    state(data, FTP_STOP);
  597|      1|    return CURLE_OPERATION_TIMEDOUT;
  598|      1|  }
  599|       |
  600|  1.00k|  return result;
  601|  1.00k|}
ftp.c:_state:
  761|  1.06k|{
  762|  1.06k|  struct connectdata *conn = data->conn;
  763|  1.06k|  struct ftp_conn *ftpc = &conn->proto.ftpc;
  764|       |
  765|  1.06k|#if defined(DEBUGBUILD)
  766|       |
  767|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
  768|       |  (void) lineno;
  769|       |#else
  770|  1.06k|  if(ftpc->state != newstate)
  771|  1.01k|    infof(data, "FTP %p (line %d) state change from %s to %s",
  772|  1.01k|          (void *)ftpc, lineno, ftp_state_names[ftpc->state],
  773|  1.01k|          ftp_state_names[newstate]);
  774|  1.06k|#endif
  775|  1.06k|#endif
  776|       |
  777|  1.06k|  ftpc->state = newstate;
  778|  1.06k|}
ftp.c:ftp_getsock:
  807|    733|{
  808|    733|  return Curl_pp_getsock(data, &conn->proto.ftpc.pp, socks);
  809|    733|}
ftp.c:ftp_multi_statemach:
 3108|  1.18k|{
 3109|  1.18k|  struct connectdata *conn = data->conn;
 3110|  1.18k|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3111|  1.18k|  CURLcode result = Curl_pp_statemach(data, &ftpc->pp, FALSE, FALSE);
 3112|       |
 3113|       |  /* Check for the state outside of the Curl_socket_check() return code checks
 3114|       |     since at times we are in fact already in this state when this function
 3115|       |     gets called. */
 3116|  1.18k|  *done = (ftpc->state == FTP_STOP) ? TRUE : FALSE;
 3117|       |
 3118|  1.18k|  return result;
 3119|  1.18k|}
ftp.c:ftp_connect:
 3147|    524|{
 3148|    524|  CURLcode result;
 3149|    524|  struct connectdata *conn = data->conn;
 3150|    524|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3151|    524|  struct pingpong *pp = &ftpc->pp;
 3152|       |
 3153|    524|  *done = FALSE; /* default to not done yet */
 3154|       |
 3155|       |  /* We always support persistent connections on ftp */
 3156|    524|  connkeep(conn, "FTP default");
 3157|       |
 3158|    524|  PINGPONG_SETUP(pp, ftp_statemachine, ftp_endofresp);
 3159|       |
 3160|    524|  if(conn->handler->flags & PROTOPT_SSL) {
 3161|       |    /* BLOCKING */
 3162|     49|    result = Curl_ssl_connect(data, conn, FIRSTSOCKET);
 3163|     49|    if(result)
 3164|     49|      return result;
 3165|      0|    conn->bits.ftp_use_control_ssl = TRUE;
 3166|      0|  }
 3167|       |
 3168|    475|  Curl_pp_setup(pp); /* once per transfer */
 3169|    475|  Curl_pp_init(data, pp); /* init the generic pingpong data */
 3170|       |
 3171|       |  /* When we connect, we start in the state where we await the 220
 3172|       |     response */
 3173|    475|  state(data, FTP_WAIT220);
 3174|       |
 3175|    475|  result = ftp_multi_statemach(data, done);
 3176|       |
 3177|    475|  return result;
 3178|    524|}
ftp.c:ftp_statemachine:
 2664|  1.00k|{
 2665|  1.00k|  CURLcode result;
 2666|  1.00k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
 2667|  1.00k|  int ftpcode;
 2668|  1.00k|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2669|  1.00k|  struct pingpong *pp = &ftpc->pp;
 2670|  1.00k|  static const char ftpauth[][4]  = { "SSL", "TLS" };
 2671|  1.00k|  size_t nread = 0;
 2672|       |
 2673|  1.00k|  if(pp->sendleft)
 2674|      0|    return Curl_pp_flushsend(data, pp);
 2675|       |
 2676|  1.00k|  result = ftp_readresp(data, sock, pp, &ftpcode, &nread);
 2677|  1.00k|  if(result)
 2678|    308|    return result;
 2679|       |
 2680|    694|  if(ftpcode) {
 2681|       |    /* we have now received a full FTP server response */
 2682|    598|    switch(ftpc->state) {
 2683|    203|    case FTP_WAIT220:
 2684|    203|      if(ftpcode == 230) {
 2685|       |        /* 230 User logged in - already! Take as 220 if TLS required. */
 2686|      5|        if(data->set.use_ssl <= CURLUSESSL_TRY ||
 2687|      5|           conn->bits.ftp_use_control_ssl)
 2688|      5|          return ftp_state_user_resp(data, ftpcode, ftpc->state);
 2689|      5|      }
 2690|    198|      else if(ftpcode != 220) {
 2691|     18|        failf(data, "Got a %03d ftp-server response when 220 was expected",
 2692|     18|              ftpcode);
 2693|     18|        return CURLE_WEIRD_SERVER_REPLY;
 2694|     18|      }
 2695|       |
 2696|       |      /* We have received a 220 response fine, now we proceed. */
 2697|       |#ifdef HAVE_GSSAPI
 2698|       |      if(data->set.krb) {
 2699|       |        /* If not anonymous login, try a secure login. Note that this
 2700|       |           procedure is still BLOCKING. */
 2701|       |
 2702|       |        Curl_sec_request_prot(conn, "private");
 2703|       |        /* We set private first as default, in case the line below fails to
 2704|       |           set a valid level */
 2705|       |        Curl_sec_request_prot(conn, data->set.str[STRING_KRB_LEVEL]);
 2706|       |
 2707|       |        if(Curl_sec_login(data, conn))
 2708|       |          infof(data, "Logging in with password in cleartext!");
 2709|       |        else
 2710|       |          infof(data, "Authentication successful");
 2711|       |      }
 2712|       |#endif
 2713|       |
 2714|    180|      if(data->set.use_ssl && !conn->bits.ftp_use_control_ssl) {
 2715|       |        /* We don't have a SSL/TLS control connection yet, but FTPS is
 2716|       |           requested. Try a FTPS connection now */
 2717|       |
 2718|      0|        ftpc->count3 = 0;
 2719|      0|        switch(data->set.ftpsslauth) {
 2720|      0|        case CURLFTPAUTH_DEFAULT:
 2721|      0|        case CURLFTPAUTH_SSL:
 2722|      0|          ftpc->count2 = 1; /* add one to get next */
 2723|      0|          ftpc->count1 = 0;
 2724|      0|          break;
 2725|      0|        case CURLFTPAUTH_TLS:
 2726|      0|          ftpc->count2 = -1; /* subtract one to get next */
 2727|      0|          ftpc->count1 = 1;
 2728|      0|          break;
 2729|      0|        default:
 2730|      0|          failf(data, "unsupported parameter to CURLOPT_FTPSSLAUTH: %d",
 2731|      0|                (int)data->set.ftpsslauth);
 2732|      0|          return CURLE_UNKNOWN_OPTION; /* we don't know what to do */
 2733|      0|        }
 2734|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "AUTH %s",
 2735|      0|                               ftpauth[ftpc->count1]);
 2736|      0|        if(!result)
 2737|      0|          state(data, FTP_AUTH);
 2738|      0|      }
 2739|    180|      else
 2740|    180|        result = ftp_state_user(data, conn);
 2741|    180|      break;
 2742|       |
 2743|    180|    case FTP_AUTH:
 2744|       |      /* we have gotten the response to a previous AUTH command */
 2745|       |
 2746|      0|      if(pp->cache_size)
 2747|      0|        return CURLE_WEIRD_SERVER_REPLY; /* Forbid pipelining in response. */
 2748|       |
 2749|       |      /* RFC2228 (page 5) says:
 2750|       |       *
 2751|       |       * If the server is willing to accept the named security mechanism,
 2752|       |       * and does not require any security data, it must respond with
 2753|       |       * reply code 234/334.
 2754|       |       */
 2755|       |
 2756|      0|      if((ftpcode == 234) || (ftpcode == 334)) {
 2757|       |        /* Curl_ssl_connect is BLOCKING */
 2758|      0|        result = Curl_ssl_connect(data, conn, FIRSTSOCKET);
 2759|      0|        if(!result) {
 2760|      0|          conn->bits.ftp_use_data_ssl = FALSE; /* clear-text data */
 2761|      0|          conn->bits.ftp_use_control_ssl = TRUE; /* SSL on control */
 2762|      0|          result = ftp_state_user(data, conn);
 2763|      0|        }
 2764|      0|      }
 2765|      0|      else if(ftpc->count3 < 1) {
 2766|      0|        ftpc->count3++;
 2767|      0|        ftpc->count1 += ftpc->count2; /* get next attempt */
 2768|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "AUTH %s",
 2769|      0|                               ftpauth[ftpc->count1]);
 2770|       |        /* remain in this same state */
 2771|      0|      }
 2772|      0|      else {
 2773|      0|        if(data->set.use_ssl > CURLUSESSL_TRY)
 2774|       |          /* we failed and CURLUSESSL_CONTROL or CURLUSESSL_ALL is set */
 2775|      0|          result = CURLE_USE_SSL_FAILED;
 2776|      0|        else
 2777|       |          /* ignore the failure and continue */
 2778|      0|          result = ftp_state_user(data, conn);
 2779|      0|      }
 2780|      0|      break;
 2781|       |
 2782|     95|    case FTP_USER:
 2783|     95|    case FTP_PASS:
 2784|     95|      result = ftp_state_user_resp(data, ftpcode, ftpc->state);
 2785|     95|      break;
 2786|       |
 2787|      0|    case FTP_ACCT:
 2788|      0|      result = ftp_state_acct_resp(data, ftpcode);
 2789|      0|      break;
 2790|       |
 2791|      0|    case FTP_PBSZ:
 2792|      0|      result =
 2793|      0|        Curl_pp_sendf(data, &ftpc->pp, "PROT %c",
 2794|      0|                      data->set.use_ssl == CURLUSESSL_CONTROL ? 'C' : 'P');
 2795|      0|      if(!result)
 2796|      0|        state(data, FTP_PROT);
 2797|      0|      break;
 2798|       |
 2799|      0|    case FTP_PROT:
 2800|      0|      if(ftpcode/100 == 2)
 2801|       |        /* We have enabled SSL for the data connection! */
 2802|      0|        conn->bits.ftp_use_data_ssl =
 2803|      0|          (data->set.use_ssl != CURLUSESSL_CONTROL) ? TRUE : FALSE;
 2804|       |      /* FTP servers typically responds with 500 if they decide to reject
 2805|       |         our 'P' request */
 2806|      0|      else if(data->set.use_ssl > CURLUSESSL_CONTROL)
 2807|       |        /* we failed and bails out */
 2808|      0|        return CURLE_USE_SSL_FAILED;
 2809|       |
 2810|      0|      if(data->set.ftp_ccc) {
 2811|       |        /* CCC - Clear Command Channel
 2812|       |         */
 2813|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "%s", "CCC");
 2814|      0|        if(!result)
 2815|      0|          state(data, FTP_CCC);
 2816|      0|      }
 2817|      0|      else
 2818|      0|        result = ftp_state_pwd(data, conn);
 2819|      0|      break;
 2820|       |
 2821|      0|    case FTP_CCC:
 2822|      0|      if(ftpcode < 500) {
 2823|       |        /* First shut down the SSL layer (note: this call will block) */
 2824|      0|        result = Curl_ssl_shutdown(data, conn, FIRSTSOCKET);
 2825|       |
 2826|      0|        if(result)
 2827|      0|          failf(data, "Failed to clear the command channel (CCC)");
 2828|      0|      }
 2829|      0|      if(!result)
 2830|       |        /* Then continue as normal */
 2831|      0|        result = ftp_state_pwd(data, conn);
 2832|      0|      break;
 2833|       |
 2834|     91|    case FTP_PWD:
 2835|     91|      if(ftpcode == 257) {
 2836|      0|        char *ptr = &data->state.buffer[4];  /* start on the first letter */
 2837|      0|        const size_t buf_size = data->set.buffer_size;
 2838|      0|        char *dir;
 2839|      0|        bool entry_extracted = FALSE;
 2840|       |
 2841|      0|        dir = malloc(nread + 1);
 2842|      0|        if(!dir)
 2843|      0|          return CURLE_OUT_OF_MEMORY;
 2844|       |
 2845|       |        /* Reply format is like
 2846|       |           257<space>[rubbish]"<directory-name>"<space><commentary> and the
 2847|       |           RFC959 says
 2848|       |
 2849|       |           The directory name can contain any character; embedded
 2850|       |           double-quotes should be escaped by double-quotes (the
 2851|       |           "quote-doubling" convention).
 2852|       |        */
 2853|       |
 2854|       |        /* scan for the first double-quote for non-standard responses */
 2855|      0|        while(ptr < &data->state.buffer[buf_size]
 2856|      0|              && *ptr != '\n' && *ptr != '\0' && *ptr != '"')
 2857|      0|          ptr++;
 2858|       |
 2859|      0|        if('\"' == *ptr) {
 2860|       |          /* it started good */
 2861|      0|          char *store;
 2862|      0|          ptr++;
 2863|      0|          for(store = dir; *ptr;) {
 2864|      0|            if('\"' == *ptr) {
 2865|      0|              if('\"' == ptr[1]) {
 2866|       |                /* "quote-doubling" */
 2867|      0|                *store = ptr[1];
 2868|      0|                ptr++;
 2869|      0|              }
 2870|      0|              else {
 2871|       |                /* end of path */
 2872|      0|                entry_extracted = TRUE;
 2873|      0|                break; /* get out of this loop */
 2874|      0|              }
 2875|      0|            }
 2876|      0|            else
 2877|      0|              *store = *ptr;
 2878|      0|            store++;
 2879|      0|            ptr++;
 2880|      0|          }
 2881|      0|          *store = '\0'; /* null-terminate */
 2882|      0|        }
 2883|      0|        if(entry_extracted) {
 2884|       |          /* If the path name does not look like an absolute path (i.e.: it
 2885|       |             does not start with a '/'), we probably need some server-dependent
 2886|       |             adjustments. For example, this is the case when connecting to
 2887|       |             an OS400 FTP server: this server supports two name syntaxes,
 2888|       |             the default one being incompatible with standard paths. In
 2889|       |             addition, this server switches automatically to the regular path
 2890|       |             syntax when one is encountered in a command: this results in
 2891|       |             having an entrypath in the wrong syntax when later used in CWD.
 2892|       |               The method used here is to check the server OS: we do it only
 2893|       |             if the path name looks strange to minimize overhead on other
 2894|       |             systems. */
 2895|       |
 2896|      0|          if(!ftpc->server_os && dir[0] != '/') {
 2897|      0|            result = Curl_pp_sendf(data, &ftpc->pp, "%s", "SYST");
 2898|      0|            if(result) {
 2899|      0|              free(dir);
 2900|      0|              return result;
 2901|      0|            }
 2902|      0|            Curl_safefree(ftpc->entrypath);
 2903|      0|            ftpc->entrypath = dir; /* remember this */
 2904|      0|            infof(data, "Entry path is '%s'", ftpc->entrypath);
 2905|       |            /* also save it where getinfo can access it: */
 2906|      0|            data->state.most_recent_ftp_entrypath = ftpc->entrypath;
 2907|      0|            state(data, FTP_SYST);
 2908|      0|            break;
 2909|      0|          }
 2910|       |
 2911|      0|          Curl_safefree(ftpc->entrypath);
 2912|      0|          ftpc->entrypath = dir; /* remember this */
 2913|      0|          infof(data, "Entry path is '%s'", ftpc->entrypath);
 2914|       |          /* also save it where getinfo can access it: */
 2915|      0|          data->state.most_recent_ftp_entrypath = ftpc->entrypath;
 2916|      0|        }
 2917|      0|        else {
 2918|       |          /* couldn't get the path */
 2919|      0|          free(dir);
 2920|      0|          infof(data, "Failed to figure out path");
 2921|      0|        }
 2922|      0|      }
 2923|     91|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2924|     91|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2925|     91|      break;
 2926|       |
 2927|      0|    case FTP_SYST:
 2928|      0|      if(ftpcode == 215) {
 2929|      0|        char *ptr = &data->state.buffer[4];  /* start on the first letter */
 2930|      0|        char *os;
 2931|      0|        char *store;
 2932|       |
 2933|      0|        os = malloc(nread + 1);
 2934|      0|        if(!os)
 2935|      0|          return CURLE_OUT_OF_MEMORY;
 2936|       |
 2937|       |        /* Reply format is like
 2938|       |           215<space><OS-name><space><commentary>
 2939|       |        */
 2940|      0|        while(*ptr == ' ')
 2941|      0|          ptr++;
 2942|      0|        for(store = os; *ptr && *ptr != ' ';)
 2943|      0|          *store++ = *ptr++;
 2944|      0|        *store = '\0'; /* null-terminate */
 2945|       |
 2946|       |        /* Check for special servers here. */
 2947|       |
 2948|      0|        if(strcasecompare(os, "OS/400")) {
 2949|       |          /* Force OS400 name format 1. */
 2950|      0|          result = Curl_pp_sendf(data, &ftpc->pp, "%s", "SITE NAMEFMT 1");
 2951|      0|          if(result) {
 2952|      0|            free(os);
 2953|      0|            return result;
 2954|      0|          }
 2955|       |          /* remember target server OS */
 2956|      0|          Curl_safefree(ftpc->server_os);
 2957|      0|          ftpc->server_os = os;
 2958|      0|          state(data, FTP_NAMEFMT);
 2959|      0|          break;
 2960|      0|        }
 2961|       |        /* Nothing special for the target server. */
 2962|       |        /* remember target server OS */
 2963|      0|        Curl_safefree(ftpc->server_os);
 2964|      0|        ftpc->server_os = os;
 2965|      0|      }
 2966|      0|      else {
 2967|       |        /* Cannot identify server OS. Continue anyway and cross fingers. */
 2968|      0|      }
 2969|       |
 2970|      0|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2971|      0|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2972|      0|      break;
 2973|       |
 2974|      0|    case FTP_NAMEFMT:
 2975|      0|      if(ftpcode == 250) {
 2976|       |        /* Name format change successful: reload initial path. */
 2977|      0|        ftp_state_pwd(data, conn);
 2978|      0|        break;
 2979|      0|      }
 2980|       |
 2981|      0|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2982|      0|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2983|      0|      break;
 2984|       |
 2985|      0|    case FTP_QUOTE:
 2986|      0|    case FTP_POSTQUOTE:
 2987|      0|    case FTP_RETR_PREQUOTE:
 2988|      0|    case FTP_STOR_PREQUOTE:
 2989|      0|      if((ftpcode >= 400) && !ftpc->count2) {
 2990|       |        /* failure response code, and not allowed to fail */
 2991|      0|        failf(data, "QUOT command failed with %03d", ftpcode);
 2992|      0|        result = CURLE_QUOTE_ERROR;
 2993|      0|      }
 2994|      0|      else
 2995|      0|        result = ftp_state_quote(data, FALSE, ftpc->state);
 2996|      0|      break;
 2997|       |
 2998|    107|    case FTP_CWD:
 2999|    107|      if(ftpcode/100 != 2) {
 3000|       |        /* failure to CWD there */
 3001|      4|        if(data->set.ftp_create_missing_dirs &&
 3002|      4|           ftpc->cwdcount && !ftpc->count2) {
 3003|       |          /* try making it */
 3004|      0|          ftpc->count2++; /* counter to prevent CWD-MKD loops */
 3005|      0|          result = Curl_pp_sendf(data, &ftpc->pp, "MKD %s",
 3006|      0|                                 ftpc->dirs[ftpc->cwdcount - 1]);
 3007|      0|          if(!result)
 3008|      0|            state(data, FTP_MKD);
 3009|      0|        }
 3010|      4|        else {
 3011|       |          /* return failure */
 3012|      4|          failf(data, "Server denied you to change to the given directory");
 3013|      4|          ftpc->cwdfail = TRUE; /* don't remember this path as we failed
 3014|       |                                   to enter it */
 3015|      4|          result = CURLE_REMOTE_ACCESS_DENIED;
 3016|      4|        }
 3017|      4|      }
 3018|    103|      else {
 3019|       |        /* success */
 3020|    103|        ftpc->count2 = 0;
 3021|    103|        if(++ftpc->cwdcount <= ftpc->dirdepth)
 3022|       |          /* send next CWD */
 3023|     64|          result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
 3024|     64|                                 ftpc->dirs[ftpc->cwdcount - 1]);
 3025|     39|        else
 3026|     39|          result = ftp_state_mdtm(data);
 3027|    103|      }
 3028|    107|      break;
 3029|       |
 3030|      0|    case FTP_MKD:
 3031|      0|      if((ftpcode/100 != 2) && !ftpc->count3--) {
 3032|       |        /* failure to MKD the dir */
 3033|      0|        failf(data, "Failed to MKD dir: %03d", ftpcode);
 3034|      0|        result = CURLE_REMOTE_ACCESS_DENIED;
 3035|      0|      }
 3036|      0|      else {
 3037|      0|        state(data, FTP_CWD);
 3038|       |        /* send CWD */
 3039|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
 3040|      0|                               ftpc->dirs[ftpc->cwdcount - 1]);
 3041|      0|      }
 3042|      0|      break;
 3043|       |
 3044|      0|    case FTP_MDTM:
 3045|      0|      result = ftp_state_mdtm_resp(data, ftpcode);
 3046|      0|      break;
 3047|       |
 3048|      4|    case FTP_TYPE:
 3049|      4|    case FTP_LIST_TYPE:
 3050|      4|    case FTP_RETR_TYPE:
 3051|      4|    case FTP_STOR_TYPE:
 3052|      4|      result = ftp_state_type_resp(data, ftpcode, ftpc->state);
 3053|      4|      break;
 3054|       |
 3055|      2|    case FTP_SIZE:
 3056|      2|    case FTP_RETR_SIZE:
 3057|      2|    case FTP_STOR_SIZE:
 3058|      2|      result = ftp_state_size_resp(data, ftpcode, ftpc->state);
 3059|      2|      break;
 3060|       |
 3061|      2|    case FTP_REST:
 3062|      2|    case FTP_RETR_REST:
 3063|      2|      result = ftp_state_rest_resp(data, conn, ftpcode, ftpc->state);
 3064|      2|      break;
 3065|       |
 3066|      0|    case FTP_PRET:
 3067|      0|      if(ftpcode != 200) {
 3068|       |        /* there only is this one standard OK return code. */
 3069|      0|        failf(data, "PRET command not accepted: %03d", ftpcode);
 3070|      0|        return CURLE_FTP_PRET_FAILED;
 3071|      0|      }
 3072|      0|      result = ftp_state_use_pasv(data, conn);
 3073|      0|      break;
 3074|       |
 3075|     86|    case FTP_PASV:
 3076|     86|      result = ftp_state_pasv_resp(data, ftpcode);
 3077|     86|      break;
 3078|       |
 3079|      0|    case FTP_PORT:
 3080|      0|      result = ftp_state_port_resp(data, ftpcode);
 3081|      0|      break;
 3082|       |
 3083|      0|    case FTP_LIST:
 3084|      0|    case FTP_RETR:
 3085|      0|      result = ftp_state_get_resp(data, ftpcode, ftpc->state);
 3086|      0|      break;
 3087|       |
 3088|      0|    case FTP_STOR:
 3089|      0|      result = ftp_state_stor_resp(data, ftpcode, ftpc->state);
 3090|      0|      break;
 3091|       |
 3092|      7|    case FTP_QUIT:
 3093|       |      /* fallthrough, just stop! */
 3094|      8|    default:
 3095|       |      /* internal error */
 3096|      8|      state(data, FTP_STOP);
 3097|      8|      break;
 3098|    598|    }
 3099|    598|  } /* if(ftpcode) */
 3100|       |
 3101|    671|  return result;
 3102|    694|}
ftp.c:ftp_state_user_resp:
 2589|    100|{
 2590|    100|  CURLcode result = CURLE_OK;
 2591|    100|  struct connectdata *conn = data->conn;
 2592|    100|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2593|    100|  (void)instate; /* no use for this yet */
 2594|       |
 2595|       |  /* some need password anyway, and others just return 2xx ignored */
 2596|    100|  if((ftpcode == 331) && (ftpc->state == FTP_USER)) {
 2597|       |    /* 331 Password required for ...
 2598|       |       (the server requires to send the user's password too) */
 2599|      2|    result = Curl_pp_sendf(data, &ftpc->pp, "PASS %s",
 2600|      2|                           conn->passwd?conn->passwd:"");
 2601|      2|    if(!result)
 2602|      2|      state(data, FTP_PASS);
 2603|      2|  }
 2604|     98|  else if(ftpcode/100 == 2) {
 2605|       |    /* 230 User ... logged in.
 2606|       |       (the user logged in with or without password) */
 2607|     96|    result = ftp_state_loggedin(data);
 2608|     96|  }
 2609|      2|  else if(ftpcode == 332) {
 2610|      1|    if(data->set.str[STRING_FTP_ACCOUNT]) {
 2611|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "ACCT %s",
 2612|      0|                             data->set.str[STRING_FTP_ACCOUNT]);
 2613|      0|      if(!result)
 2614|      0|        state(data, FTP_ACCT);
 2615|      0|    }
 2616|      1|    else {
 2617|      1|      failf(data, "ACCT requested but none available");
 2618|      1|      result = CURLE_LOGIN_DENIED;
 2619|      1|    }
 2620|      1|  }
 2621|      1|  else {
 2622|       |    /* All other response codes, like:
 2623|       |
 2624|       |    530 User ... access denied
 2625|       |    (the server denies to log the specified user) */
 2626|       |
 2627|      1|    if(data->set.str[STRING_FTP_ALTERNATIVE_TO_USER] &&
 2628|      1|        !data->state.ftp_trying_alternative) {
 2629|       |      /* Ok, USER failed.  Let's try the supplied command. */
 2630|      0|      result =
 2631|      0|        Curl_pp_sendf(data, &ftpc->pp, "%s",
 2632|      0|                      data->set.str[STRING_FTP_ALTERNATIVE_TO_USER]);
 2633|      0|      if(!result) {
 2634|      0|        data->state.ftp_trying_alternative = TRUE;
 2635|      0|        state(data, FTP_USER);
 2636|      0|      }
 2637|      0|    }
 2638|      1|    else {
 2639|      1|      failf(data, "Access denied: %03d", ftpcode);
 2640|      1|      result = CURLE_LOGIN_DENIED;
 2641|      1|    }
 2642|      1|  }
 2643|    100|  return result;
 2644|    100|}
ftp.c:ftp_state_loggedin:
 2556|     96|{
 2557|     96|  CURLcode result = CURLE_OK;
 2558|     96|  struct connectdata *conn = data->conn;
 2559|       |
 2560|     96|  if(conn->bits.ftp_use_control_ssl) {
 2561|       |    /* PBSZ = PROTECTION BUFFER SIZE.
 2562|       |
 2563|       |    The 'draft-murray-auth-ftp-ssl' (draft 12, page 7) says:
 2564|       |
 2565|       |    Specifically, the PROT command MUST be preceded by a PBSZ
 2566|       |    command and a PBSZ command MUST be preceded by a successful
 2567|       |    security data exchange (the TLS negotiation in this case)
 2568|       |
 2569|       |    ... (and on page 8):
 2570|       |
 2571|       |    Thus the PBSZ command must still be issued, but must have a
 2572|       |    parameter of '0' to indicate that no buffering is taking place
 2573|       |    and the data connection should not be encapsulated.
 2574|       |    */
 2575|      0|    result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "PBSZ %d", 0);
 2576|      0|    if(!result)
 2577|      0|      state(data, FTP_PBSZ);
 2578|      0|  }
 2579|     96|  else {
 2580|     96|    result = ftp_state_pwd(data, conn);
 2581|     96|  }
 2582|     96|  return result;
 2583|     96|}
ftp.c:ftp_state_user:
  782|    180|{
  783|    180|  CURLcode result = Curl_pp_sendf(data,
  784|    180|                                  &conn->proto.ftpc.pp, "USER %s",
  785|    180|                                  conn->user?conn->user:"");
  786|    180|  if(!result) {
  787|    180|    state(data, FTP_USER);
  788|    180|    data->state.ftp_trying_alternative = FALSE;
  789|    180|  }
  790|    180|  return result;
  791|    180|}
ftp.c:ftp_state_pwd:
  795|     96|{
  796|     96|  CURLcode result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "PWD");
  797|     96|  if(!result)
  798|     96|    state(data, FTP_PWD);
  799|       |
  800|     96|  return result;
  801|     96|}
ftp.c:ftp_state_quote:
 1678|     92|{
 1679|     92|  CURLcode result = CURLE_OK;
 1680|     92|  struct FTP *ftp = data->req.p.ftp;
 1681|     92|  struct connectdata *conn = data->conn;
 1682|     92|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1683|     92|  bool quote = FALSE;
 1684|     92|  struct curl_slist *item;
 1685|       |
 1686|     92|  switch(instate) {
 1687|     89|  case FTP_QUOTE:
 1688|     89|  default:
 1689|     89|    item = data->set.quote;
 1690|     89|    break;
 1691|      3|  case FTP_RETR_PREQUOTE:
 1692|      3|  case FTP_STOR_PREQUOTE:
 1693|      3|    item = data->set.prequote;
 1694|      3|    break;
 1695|      0|  case FTP_POSTQUOTE:
 1696|      0|    item = data->set.postquote;
 1697|      0|    break;
 1698|     92|  }
 1699|       |
 1700|       |  /*
 1701|       |   * This state uses:
 1702|       |   * 'count1' to iterate over the commands to send
 1703|       |   * 'count2' to store whether to allow commands to fail
 1704|       |   */
 1705|       |
 1706|     92|  if(init)
 1707|     92|    ftpc->count1 = 0;
 1708|      0|  else
 1709|      0|    ftpc->count1++;
 1710|       |
 1711|     92|  if(item) {
 1712|      0|    int i = 0;
 1713|       |
 1714|       |    /* Skip count1 items in the linked list */
 1715|      0|    while((i< ftpc->count1) && item) {
 1716|      0|      item = item->next;
 1717|      0|      i++;
 1718|      0|    }
 1719|      0|    if(item) {
 1720|      0|      char *cmd = item->data;
 1721|      0|      if(cmd[0] == '*') {
 1722|      0|        cmd++;
 1723|      0|        ftpc->count2 = 1; /* the sent command is allowed to fail */
 1724|      0|      }
 1725|      0|      else
 1726|      0|        ftpc->count2 = 0; /* failure means cancel operation */
 1727|       |
 1728|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "%s", cmd);
 1729|      0|      if(result)
 1730|      0|        return result;
 1731|      0|      state(data, instate);
 1732|      0|      quote = TRUE;
 1733|      0|    }
 1734|      0|  }
 1735|       |
 1736|     92|  if(!quote) {
 1737|       |    /* No more quote to send, continue to ... */
 1738|     92|    switch(instate) {
 1739|     89|    case FTP_QUOTE:
 1740|     89|    default:
 1741|     89|      result = ftp_state_cwd(data, conn);
 1742|     89|      break;
 1743|      3|    case FTP_RETR_PREQUOTE:
 1744|      3|      if(ftp->transfer != PPTRANSFER_BODY)
 1745|      3|        state(data, FTP_STOP);
 1746|      0|      else {
 1747|      0|        if(ftpc->known_filesize != -1) {
 1748|      0|          Curl_pgrsSetDownloadSize(data, ftpc->known_filesize);
 1749|      0|          result = ftp_state_retr(data, ftpc->known_filesize);
 1750|      0|        }
 1751|      0|        else {
 1752|      0|          if(data->set.ignorecl || data->state.prefer_ascii) {
 1753|       |            /* 'ignorecl' is used to support download of growing files.  It
 1754|       |               prevents the state machine from requesting the file size from
 1755|       |               the server.  With an unknown file size the download continues
 1756|       |               until the server terminates it, otherwise the client stops if
 1757|       |               the received byte count exceeds the reported file size.  Set
 1758|       |               option CURLOPT_IGNORE_CONTENT_LENGTH to 1 to enable this
 1759|       |               behavior.
 1760|       |
 1761|       |               In addition: asking for the size for 'TYPE A' transfers is not
 1762|       |               constructive since servers don't report the converted size. So
 1763|       |               skip it.
 1764|       |            */
 1765|      0|            result = Curl_pp_sendf(data, &ftpc->pp, "RETR %s", ftpc->file);
 1766|      0|            if(!result)
 1767|      0|              state(data, FTP_RETR);
 1768|      0|          }
 1769|      0|          else {
 1770|      0|            result = Curl_pp_sendf(data, &ftpc->pp, "SIZE %s", ftpc->file);
 1771|      0|            if(!result)
 1772|      0|              state(data, FTP_RETR_SIZE);
 1773|      0|          }
 1774|      0|        }
 1775|      0|      }
 1776|      3|      break;
 1777|      0|    case FTP_STOR_PREQUOTE:
 1778|      0|      result = ftp_state_ul_setup(data, FALSE);
 1779|      0|      break;
 1780|      0|    case FTP_POSTQUOTE:
 1781|      0|      break;
 1782|     92|    }
 1783|     92|  }
 1784|       |
 1785|     92|  return result;
 1786|     92|}
ftp.c:ftp_state_cwd:
  865|     89|{
  866|     89|  CURLcode result = CURLE_OK;
  867|     89|  struct ftp_conn *ftpc = &conn->proto.ftpc;
  868|       |
  869|     89|  if(ftpc->cwddone)
  870|       |    /* already done and fine */
  871|     27|    result = ftp_state_mdtm(data);
  872|     62|  else {
  873|       |    /* FTPFILE_NOCWD with full path: expect ftpc->cwddone! */
  874|     62|    DEBUGASSERT((data->set.ftp_filemethod != FTPFILE_NOCWD) ||
  875|     62|                !(ftpc->dirdepth && ftpc->dirs[0][0] == '/'));
  876|       |
  877|     62|    ftpc->count2 = 0; /* count2 counts failed CWDs */
  878|       |
  879|       |    /* count3 is set to allow a MKD to fail once. In the case when first CWD
  880|       |       fails and then MKD fails (due to another session raced it to create the
  881|       |       dir) this then allows for a second try to CWD to it */
  882|     62|    ftpc->count3 = (data->set.ftp_create_missing_dirs == 2)?1:0;
  883|       |
  884|     62|    if(conn->bits.reuse && ftpc->entrypath &&
  885|       |       /* no need to go to entrypath when we have an absolute path */
  886|     62|       !(ftpc->dirdepth && ftpc->dirs[0][0] == '/')) {
  887|       |      /* This is a re-used connection. Since we change directory to where the
  888|       |         transfer is taking place, we must first get back to the original dir
  889|       |         where we ended up after login: */
  890|      0|      ftpc->cwdcount = 0; /* we count this as the first path, then we add one
  891|       |                             for all upcoming ones in the ftp->dirs[] array */
  892|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s", ftpc->entrypath);
  893|      0|      if(!result)
  894|      0|        state(data, FTP_CWD);
  895|      0|    }
  896|     62|    else {
  897|     62|      if(ftpc->dirdepth) {
  898|     62|        ftpc->cwdcount = 1;
  899|       |        /* issue the first CWD, the rest is sent when the CWD responses are
  900|       |           received... */
  901|     62|        result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
  902|     62|                               ftpc->dirs[ftpc->cwdcount -1]);
  903|     62|        if(!result)
  904|     62|          state(data, FTP_CWD);
  905|     62|      }
  906|      0|      else {
  907|       |        /* No CWD necessary */
  908|      0|        result = ftp_state_mdtm(data);
  909|      0|      }
  910|     62|    }
  911|     62|  }
  912|     89|  return result;
  913|     89|}
ftp.c:ftp_state_mdtm:
 1553|     66|{
 1554|     66|  CURLcode result = CURLE_OK;
 1555|     66|  struct connectdata *conn = data->conn;
 1556|     66|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1557|       |
 1558|       |  /* Requested time of file or time-depended transfer? */
 1559|     66|  if((data->set.get_filetime || data->set.timecondition) && ftpc->file) {
 1560|       |
 1561|       |    /* we have requested to get the modified-time of the file, this is a white
 1562|       |       spot as the MDTM is not mentioned in RFC959 */
 1563|      0|    result = Curl_pp_sendf(data, &ftpc->pp, "MDTM %s", ftpc->file);
 1564|       |
 1565|      0|    if(!result)
 1566|      0|      state(data, FTP_MDTM);
 1567|      0|  }
 1568|     66|  else
 1569|     66|    result = ftp_state_type(data);
 1570|       |
 1571|     66|  return result;
 1572|     66|}
ftp.c:ftp_state_type:
 1520|     66|{
 1521|     66|  CURLcode result = CURLE_OK;
 1522|     66|  struct FTP *ftp = data->req.p.ftp;
 1523|     66|  struct connectdata *conn = data->conn;
 1524|     66|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1525|       |
 1526|       |  /* If we have selected NOBODY and HEADER, it means that we only want file
 1527|       |     information. Which in FTP can't be much more than the file size and
 1528|       |     date. */
 1529|     66|  if(data->set.opt_no_body && ftpc->file &&
 1530|     66|     ftp_need_type(conn, data->state.prefer_ascii)) {
 1531|       |    /* The SIZE command is _not_ RFC 959 specified, and therefore many servers
 1532|       |       may not support it! It is however the only way we have to get a file's
 1533|       |       size! */
 1534|       |
 1535|      4|    ftp->transfer = PPTRANSFER_INFO;
 1536|       |    /* this means no actual transfer will be made */
 1537|       |
 1538|       |    /* Some servers return different sizes for different modes, and thus we
 1539|       |       must set the proper type before we check the size */
 1540|      4|    result = ftp_nb_type(data, conn, data->state.prefer_ascii, FTP_TYPE);
 1541|      4|    if(result)
 1542|      0|      return result;
 1543|      4|  }
 1544|     62|  else
 1545|     62|    result = ftp_state_size(data, conn);
 1546|       |
 1547|     66|  return result;
 1548|     66|}
ftp.c:ftp_need_type:
 3485|      4|{
 3486|      4|  return conn->proto.ftpc.transfertype != (ascii_wanted?'A':'I');
 3487|      4|}
ftp.c:ftp_nb_type:
 3500|      4|{
 3501|      4|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3502|      4|  CURLcode result;
 3503|      4|  char want = (char)(ascii?'A':'I');
 3504|       |
 3505|      4|  if(ftpc->transfertype == want) {
 3506|      0|    state(data, newstate);
 3507|      0|    return ftp_state_type_resp(data, 200, newstate);
 3508|      0|  }
 3509|       |
 3510|      4|  result = Curl_pp_sendf(data, &ftpc->pp, "TYPE %c", want);
 3511|      4|  if(!result) {
 3512|      4|    state(data, newstate);
 3513|       |
 3514|       |    /* keep track of our current transfer type */
 3515|      4|    ftpc->transfertype = want;
 3516|      4|  }
 3517|      4|  return result;
 3518|      4|}
ftp.c:ftp_state_size:
 1423|     64|{
 1424|     64|  CURLcode result = CURLE_OK;
 1425|     64|  struct FTP *ftp = data->req.p.ftp;
 1426|     64|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1427|       |
 1428|     64|  if((ftp->transfer == PPTRANSFER_INFO) && ftpc->file) {
 1429|       |    /* if a "head"-like request is being made (on a file) */
 1430|       |
 1431|       |    /* we know ftpc->file is a valid pointer to a file name */
 1432|      2|    result = Curl_pp_sendf(data, &ftpc->pp, "SIZE %s", ftpc->file);
 1433|      2|    if(!result)
 1434|      2|      state(data, FTP_SIZE);
 1435|      2|  }
 1436|     62|  else
 1437|     62|    result = ftp_state_rest(data, conn);
 1438|       |
 1439|     64|  return result;
 1440|     64|}
ftp.c:ftp_state_rest:
 1401|     64|{
 1402|     64|  CURLcode result = CURLE_OK;
 1403|     64|  struct FTP *ftp = data->req.p.ftp;
 1404|     64|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1405|       |
 1406|     64|  if((ftp->transfer != PPTRANSFER_BODY) && ftpc->file) {
 1407|       |    /* if a "head"-like request is being made (on a file) */
 1408|       |
 1409|       |    /* Determine if server can respond to REST command and therefore
 1410|       |       whether it supports range */
 1411|      2|    result = Curl_pp_sendf(data, &ftpc->pp, "REST %d", 0);
 1412|      2|    if(!result)
 1413|      2|      state(data, FTP_REST);
 1414|      2|  }
 1415|     62|  else
 1416|     62|    result = ftp_state_prepare_transfer(data);
 1417|       |
 1418|     64|  return result;
 1419|     64|}
ftp.c:ftp_state_prepare_transfer:
 1357|     64|{
 1358|     64|  CURLcode result = CURLE_OK;
 1359|     64|  struct FTP *ftp = data->req.p.ftp;
 1360|     64|  struct connectdata *conn = data->conn;
 1361|       |
 1362|     64|  if(ftp->transfer != PPTRANSFER_BODY) {
 1363|       |    /* doesn't transfer any data */
 1364|       |
 1365|       |    /* still possibly do PRE QUOTE jobs */
 1366|      3|    state(data, FTP_RETR_PREQUOTE);
 1367|      3|    result = ftp_state_quote(data, TRUE, FTP_RETR_PREQUOTE);
 1368|      3|  }
 1369|     61|  else if(data->set.ftp_use_port) {
 1370|       |    /* We have chosen to use the PORT (or similar) command */
 1371|      0|    result = ftp_state_use_port(data, EPRT);
 1372|      0|  }
 1373|     61|  else {
 1374|       |    /* We have chosen (this is default) to use the PASV (or similar) command */
 1375|     61|    if(data->set.ftp_use_pret) {
 1376|       |      /* The user has requested that we send a PRET command
 1377|       |         to prepare the server for the upcoming PASV */
 1378|      0|      struct ftp_conn *ftpc = &conn->proto.ftpc;
 1379|      0|      if(!conn->proto.ftpc.file)
 1380|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET %s",
 1381|      0|                               data->set.str[STRING_CUSTOMREQUEST]?
 1382|      0|                               data->set.str[STRING_CUSTOMREQUEST]:
 1383|      0|                               (data->state.list_only?"NLST":"LIST"));
 1384|      0|      else if(data->set.upload)
 1385|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET STOR %s",
 1386|      0|                               conn->proto.ftpc.file);
 1387|      0|      else
 1388|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET RETR %s",
 1389|      0|                               conn->proto.ftpc.file);
 1390|      0|      if(!result)
 1391|      0|        state(data, FTP_PRET);
 1392|      0|    }
 1393|     61|    else
 1394|     61|      result = ftp_state_use_pasv(data, conn);
 1395|     61|  }
 1396|     64|  return result;
 1397|     64|}
ftp.c:ftp_state_type_resp:
 2177|      4|{
 2178|      4|  CURLcode result = CURLE_OK;
 2179|      4|  struct connectdata *conn = data->conn;
 2180|       |
 2181|      4|  if(ftpcode/100 != 2) {
 2182|       |    /* "sasserftpd" and "(u)r(x)bot ftpd" both responds with 226 after a
 2183|       |       successful 'TYPE I'. While that is not as RFC959 says, it is still a
 2184|       |       positive response code and we allow that. */
 2185|      2|    failf(data, "Couldn't set desired mode");
 2186|      2|    return CURLE_FTP_COULDNT_SET_TYPE;
 2187|      2|  }
 2188|      2|  if(ftpcode != 200)
 2189|      1|    infof(data, "Got a %03d response code instead of the assumed 200",
 2190|      1|          ftpcode);
 2191|       |
 2192|      2|  if(instate == FTP_TYPE)
 2193|      2|    result = ftp_state_size(data, conn);
 2194|      0|  else if(instate == FTP_LIST_TYPE)
 2195|      0|    result = ftp_state_list(data);
 2196|      0|  else if(instate == FTP_RETR_TYPE)
 2197|      0|    result = ftp_state_retr_prequote(data);
 2198|      0|  else if(instate == FTP_STOR_TYPE)
 2199|      0|    result = ftp_state_stor_prequote(data);
 2200|       |
 2201|      2|  return result;
 2202|      4|}
ftp.c:ftp_state_size_resp:
 2290|      2|{
 2291|      2|  CURLcode result = CURLE_OK;
 2292|      2|  curl_off_t filesize = -1;
 2293|      2|  char *buf = data->state.buffer;
 2294|       |
 2295|       |  /* get the size from the ascii string: */
 2296|      2|  if(ftpcode == 213) {
 2297|       |    /* To allow servers to prepend "rubbish" in the response string, we scan
 2298|       |       for all the digits at the end of the response and parse only those as a
 2299|       |       number. */
 2300|      0|    char *start = &buf[4];
 2301|      0|    char *fdigit = strchr(start, '\r');
 2302|      0|    if(fdigit) {
 2303|      0|      do
 2304|      0|        fdigit--;
 2305|      0|      while(ISDIGIT(*fdigit) && (fdigit > start));
 2306|      0|      if(!ISDIGIT(*fdigit))
 2307|      0|        fdigit++;
 2308|      0|    }
 2309|      0|    else
 2310|      0|      fdigit = start;
 2311|       |    /* ignores parsing errors, which will make the size remain unknown */
 2312|      0|    (void)curlx_strtoofft(fdigit, NULL, 0, &filesize);
 2313|       |
 2314|      0|  }
 2315|      2|  else if(ftpcode == 550) { /* "No such file or directory" */
 2316|       |    /* allow a SIZE failure for (resumed) uploads, when probing what command
 2317|       |       to use */
 2318|      0|    if(instate != FTP_STOR_SIZE) {
 2319|      0|      failf(data, "The file does not exist");
 2320|      0|      return CURLE_REMOTE_FILE_NOT_FOUND;
 2321|      0|    }
 2322|      0|  }
 2323|       |
 2324|      2|  if(instate == FTP_SIZE) {
 2325|      2|#ifdef CURL_FTP_HTTPSTYLE_HEAD
 2326|      2|    if(-1 != filesize) {
 2327|      0|      char clbuf[128];
 2328|      0|      int clbuflen = msnprintf(clbuf, sizeof(clbuf),
 2329|      0|                "Content-Length: %" CURL_FORMAT_CURL_OFF_T "\r\n", filesize);
 2330|      0|      result = Curl_client_write(data, CLIENTWRITE_BOTH, clbuf, clbuflen);
 2331|      0|      if(result)
 2332|      0|        return result;
 2333|      0|    }
 2334|      2|#endif
 2335|      2|    Curl_pgrsSetDownloadSize(data, filesize);
 2336|      2|    result = ftp_state_rest(data, data->conn);
 2337|      2|  }
 2338|      0|  else if(instate == FTP_RETR_SIZE) {
 2339|      0|    Curl_pgrsSetDownloadSize(data, filesize);
 2340|      0|    result = ftp_state_retr(data, filesize);
 2341|      0|  }
 2342|      0|  else if(instate == FTP_STOR_SIZE) {
 2343|      0|    data->state.resume_from = filesize;
 2344|      0|    result = ftp_state_ul_setup(data, TRUE);
 2345|      0|  }
 2346|       |
 2347|      2|  return result;
 2348|      2|}
ftp.c:ftp_state_rest_resp:
 2354|      2|{
 2355|      2|  CURLcode result = CURLE_OK;
 2356|      2|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2357|       |
 2358|      2|  switch(instate) {
 2359|      2|  case FTP_REST:
 2360|      2|  default:
 2361|      2|#ifdef CURL_FTP_HTTPSTYLE_HEAD
 2362|      2|    if(ftpcode == 350) {
 2363|      0|      char buffer[24]= { "Accept-ranges: bytes\r\n" };
 2364|      0|      result = Curl_client_write(data, CLIENTWRITE_BOTH, buffer,
 2365|      0|                                 strlen(buffer));
 2366|      0|      if(result)
 2367|      0|        return result;
 2368|      0|    }
 2369|      2|#endif
 2370|      2|    result = ftp_state_prepare_transfer(data);
 2371|      2|    break;
 2372|       |
 2373|      0|  case FTP_RETR_REST:
 2374|      0|    if(ftpcode != 350) {
 2375|      0|      failf(data, "Couldn't use REST");
 2376|      0|      result = CURLE_FTP_COULDNT_USE_REST;
 2377|      0|    }
 2378|      0|    else {
 2379|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "RETR %s", ftpc->file);
 2380|      0|      if(!result)
 2381|      0|        state(data, FTP_RETR);
 2382|      0|    }
 2383|      0|    break;
 2384|      2|  }
 2385|       |
 2386|      2|  return result;
 2387|      2|}
ftp.c:ftp_state_use_pasv:
 1311|     61|{
 1312|     61|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1313|     61|  CURLcode result = CURLE_OK;
 1314|       |  /*
 1315|       |    Here's the executive summary on what to do:
 1316|       |
 1317|       |    PASV is RFC959, expect:
 1318|       |    227 Entering Passive Mode (a1,a2,a3,a4,p1,p2)
 1319|       |
 1320|       |    LPSV is RFC1639, expect:
 1321|       |    228 Entering Long Passive Mode (4,4,a1,a2,a3,a4,2,p1,p2)
 1322|       |
 1323|       |    EPSV is RFC2428, expect:
 1324|       |    229 Entering Extended Passive Mode (|||port|)
 1325|       |
 1326|       |  */
 1327|       |
 1328|     61|  static const char mode[][5] = { "EPSV", "PASV" };
 1329|     61|  int modeoff;
 1330|       |
 1331|     61|#ifdef PF_INET6
 1332|     61|  if(!conn->bits.ftp_use_epsv && conn->bits.ipv6)
 1333|       |    /* EPSV is disabled but we are connected to a IPv6 host, so we ignore the
 1334|       |       request and enable EPSV again! */
 1335|      0|    conn->bits.ftp_use_epsv = TRUE;
 1336|     61|#endif
 1337|       |
 1338|     61|  modeoff = conn->bits.ftp_use_epsv?0:1;
 1339|       |
 1340|     61|  result = Curl_pp_sendf(data, &ftpc->pp, "%s", mode[modeoff]);
 1341|     61|  if(!result) {
 1342|     61|    ftpc->count1 = modeoff;
 1343|     61|    state(data, FTP_PASV);
 1344|     61|    infof(data, "Connect data stream passively");
 1345|     61|  }
 1346|     61|  return result;
 1347|     61|}
ftp.c:ftp_state_pasv_resp:
 1835|     86|{
 1836|     86|  struct connectdata *conn = data->conn;
 1837|     86|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1838|     86|  CURLcode result;
 1839|     86|  struct Curl_dns_entry *addr = NULL;
 1840|     86|  enum resolve_t rc;
 1841|     86|  unsigned short connectport; /* the local port connect() should use! */
 1842|     86|  char *str = &data->state.buffer[4];  /* start on the first letter */
 1843|       |
 1844|       |  /* if we come here again, make sure the former name is cleared */
 1845|     86|  Curl_safefree(ftpc->newhost);
 1846|       |
 1847|     86|  if((ftpc->count1 == 0) &&
 1848|     86|     (ftpcode == 229)) {
 1849|       |    /* positive EPSV response */
 1850|      0|    char *ptr = strchr(str, '(');
 1851|      0|    if(ptr) {
 1852|      0|      unsigned int num;
 1853|      0|      char separator[4];
 1854|      0|      ptr++;
 1855|      0|      if(5 == sscanf(ptr, "%c%c%c%u%c",
 1856|      0|                     &separator[0],
 1857|      0|                     &separator[1],
 1858|      0|                     &separator[2],
 1859|      0|                     &num,
 1860|      0|                     &separator[3])) {
 1861|      0|        const char sep1 = separator[0];
 1862|      0|        int i;
 1863|       |
 1864|       |        /* The four separators should be identical, or else this is an oddly
 1865|       |           formatted reply and we bail out immediately. */
 1866|      0|        for(i = 1; i<4; i++) {
 1867|      0|          if(separator[i] != sep1) {
 1868|      0|            ptr = NULL; /* set to NULL to signal error */
 1869|      0|            break;
 1870|      0|          }
 1871|      0|        }
 1872|      0|        if(num > 0xffff) {
 1873|      0|          failf(data, "Illegal port number in EPSV reply");
 1874|      0|          return CURLE_FTP_WEIRD_PASV_REPLY;
 1875|      0|        }
 1876|      0|        if(ptr) {
 1877|      0|          ftpc->newport = (unsigned short)(num & 0xffff);
 1878|      0|          ftpc->newhost = strdup(control_address(conn));
 1879|      0|          if(!ftpc->newhost)
 1880|      0|            return CURLE_OUT_OF_MEMORY;
 1881|      0|        }
 1882|      0|      }
 1883|      0|      else
 1884|      0|        ptr = NULL;
 1885|      0|    }
 1886|      0|    if(!ptr) {
 1887|      0|      failf(data, "Weirdly formatted EPSV reply");
 1888|      0|      return CURLE_FTP_WEIRD_PASV_REPLY;
 1889|      0|    }
 1890|      0|  }
 1891|     86|  else if((ftpc->count1 == 1) &&
 1892|     86|          (ftpcode == 227)) {
 1893|       |    /* positive PASV response */
 1894|     17|    unsigned int ip[4] = {0, 0, 0, 0};
 1895|     17|    unsigned int port[2] = {0, 0};
 1896|       |
 1897|       |    /*
 1898|       |     * Scan for a sequence of six comma-separated numbers and use them as
 1899|       |     * IP+port indicators.
 1900|       |     *
 1901|       |     * Found reply-strings include:
 1902|       |     * "227 Entering Passive Mode (127,0,0,1,4,51)"
 1903|       |     * "227 Data transfer will passively listen to 127,0,0,1,4,51"
 1904|       |     * "227 Entering passive mode. 127,0,0,1,4,51"
 1905|       |     */
 1906|    338|    while(*str) {
 1907|    331|      if(6 == sscanf(str, "%u,%u,%u,%u,%u,%u",
 1908|    331|                     &ip[0], &ip[1], &ip[2], &ip[3],
 1909|    331|                     &port[0], &port[1]))
 1910|     10|        break;
 1911|    321|      str++;
 1912|    321|    }
 1913|       |
 1914|     17|    if(!*str || (ip[0] > 255) || (ip[1] > 255)  || (ip[2] > 255)  ||
 1915|     17|       (ip[3] > 255) || (port[0] > 255)  || (port[1] > 255) ) {
 1916|     14|      failf(data, "Couldn't interpret the 227-response");
 1917|     14|      return CURLE_FTP_WEIRD_227_FORMAT;
 1918|     14|    }
 1919|       |
 1920|       |    /* we got OK from server */
 1921|      3|    if(data->set.ftp_skip_ip) {
 1922|       |      /* told to ignore the remotely given IP but instead use the host we used
 1923|       |         for the control connection */
 1924|      3|      infof(data, "Skip %u.%u.%u.%u for data connection, re-use %s instead",
 1925|      3|            ip[0], ip[1], ip[2], ip[3],
 1926|      3|            conn->host.name);
 1927|      3|      ftpc->newhost = strdup(control_address(conn));
 1928|      3|    }
 1929|      0|    else
 1930|      0|      ftpc->newhost = aprintf("%u.%u.%u.%u", ip[0], ip[1], ip[2], ip[3]);
 1931|       |
 1932|      3|    if(!ftpc->newhost)
 1933|      0|      return CURLE_OUT_OF_MEMORY;
 1934|       |
 1935|      3|    ftpc->newport = (unsigned short)(((port[0]<<8) + port[1]) & 0xffff);
 1936|      3|  }
 1937|     69|  else if(ftpc->count1 == 0) {
 1938|       |    /* EPSV failed, move on to PASV */
 1939|     50|    return ftp_epsv_disable(data, conn);
 1940|     50|  }
 1941|     19|  else {
 1942|     19|    failf(data, "Bad PASV/EPSV response: %03d", ftpcode);
 1943|     19|    return CURLE_FTP_WEIRD_PASV_REPLY;
 1944|     19|  }
 1945|       |
 1946|      3|#ifndef CURL_DISABLE_PROXY
 1947|      3|  if(conn->bits.proxy) {
 1948|       |    /*
 1949|       |     * This connection uses a proxy and we need to connect to the proxy again
 1950|       |     * here. We don't want to rely on a former host lookup that might've
 1951|       |     * expired now, instead we remake the lookup here and now!
 1952|       |     */
 1953|      0|    const char * const host_name = conn->bits.socksproxy ?
 1954|      0|      conn->socks_proxy.host.name : conn->http_proxy.host.name;
 1955|      0|    rc = Curl_resolv(data, host_name, (int)conn->port, FALSE, &addr);
 1956|      0|    if(rc == CURLRESOLV_PENDING)
 1957|       |      /* BLOCKING, ignores the return code but 'addr' will be NULL in
 1958|       |         case of failure */
 1959|      0|      (void)Curl_resolver_wait_resolv(data, &addr);
 1960|       |
 1961|      0|    connectport =
 1962|      0|      (unsigned short)conn->port; /* we connect to the proxy's port */
 1963|       |
 1964|      0|    if(!addr) {
 1965|      0|      failf(data, "Can't resolve proxy host %s:%hu", host_name, connectport);
 1966|      0|      return CURLE_COULDNT_RESOLVE_PROXY;
 1967|      0|    }
 1968|      0|  }
 1969|      3|  else
 1970|      3|#endif
 1971|      3|  {
 1972|       |    /* normal, direct, ftp connection */
 1973|      3|    DEBUGASSERT(ftpc->newhost);
 1974|       |
 1975|       |    /* postponed address resolution in case of tcp fastopen */
 1976|      3|    if(conn->bits.tcp_fastopen && !conn->bits.reuse && !ftpc->newhost[0]) {
 1977|      0|      Curl_conninfo_remote(data, conn, conn->sock[FIRSTSOCKET]);
 1978|      0|      Curl_safefree(ftpc->newhost);
 1979|      0|      ftpc->newhost = strdup(control_address(conn));
 1980|      0|      if(!ftpc->newhost)
 1981|      0|        return CURLE_OUT_OF_MEMORY;
 1982|      0|    }
 1983|       |
 1984|      3|    rc = Curl_resolv(data, ftpc->newhost, ftpc->newport, FALSE, &addr);
 1985|      3|    if(rc == CURLRESOLV_PENDING)
 1986|       |      /* BLOCKING */
 1987|      3|      (void)Curl_resolver_wait_resolv(data, &addr);
 1988|       |
 1989|      3|    connectport = ftpc->newport; /* we connect to the remote port */
 1990|       |
 1991|      3|    if(!addr) {
 1992|      3|      failf(data, "Can't resolve new host %s:%hu", ftpc->newhost, connectport);
 1993|      3|      return CURLE_FTP_CANT_GET_HOST;
 1994|      3|    }
 1995|      3|  }
 1996|       |
 1997|      0|  conn->bits.tcpconnect[SECONDARYSOCKET] = FALSE;
 1998|      0|  result = Curl_connecthost(data, conn, addr);
 1999|       |
 2000|      0|  if(result) {
 2001|      0|    Curl_resolv_unlock(data, addr); /* we're done using this address */
 2002|      0|    if(ftpc->count1 == 0 && ftpcode == 229)
 2003|      0|      return ftp_epsv_disable(data, conn);
 2004|       |
 2005|      0|    return result;
 2006|      0|  }
 2007|       |
 2008|       |
 2009|       |  /*
 2010|       |   * When this is used from the multi interface, this might've returned with
 2011|       |   * the 'connected' set to FALSE and thus we are now awaiting a non-blocking
 2012|       |   * connect to connect.
 2013|       |   */
 2014|       |
 2015|      0|  if(data->set.verbose)
 2016|       |    /* this just dumps information about this second connection */
 2017|      0|    ftp_pasv_verbose(data, addr->addr, ftpc->newhost, connectport);
 2018|       |
 2019|      0|  Curl_resolv_unlock(data, addr); /* we're done using this address */
 2020|       |
 2021|      0|  Curl_safefree(conn->secondaryhostname);
 2022|      0|  conn->secondary_port = ftpc->newport;
 2023|      0|  conn->secondaryhostname = strdup(ftpc->newhost);
 2024|      0|  if(!conn->secondaryhostname)
 2025|      0|    return CURLE_OUT_OF_MEMORY;
 2026|       |
 2027|      0|  conn->bits.do_more = TRUE;
 2028|      0|  state(data, FTP_STOP); /* this phase is completed */
 2029|       |
 2030|      0|  return result;
 2031|      0|}
ftp.c:control_address:
 1821|      3|{
 1822|       |  /* Returns the control connection IP address.
 1823|       |     If a proxy tunnel is used, returns the original host name instead, because
 1824|       |     the effective control connection address is the proxy address,
 1825|       |     not the ftp host. */
 1826|      3|#ifndef CURL_DISABLE_PROXY
 1827|      3|  if(conn->bits.tunnel_proxy || conn->bits.socksproxy)
 1828|      0|    return conn->host.name;
 1829|      3|#endif
 1830|      3|  return conn->primary_ip;
 1831|      3|}
ftp.c:ftp_epsv_disable:
 1792|     50|{
 1793|     50|  CURLcode result = CURLE_OK;
 1794|       |
 1795|     50|  if(conn->bits.ipv6
 1796|     50|#ifndef CURL_DISABLE_PROXY
 1797|     50|     && !(conn->bits.tunnel_proxy || conn->bits.socksproxy)
 1798|     50|#endif
 1799|     50|    ) {
 1800|       |    /* We can't disable EPSV when doing IPv6, so this is instead a fail */
 1801|      0|    failf(data, "Failed EPSV attempt, exiting");
 1802|      0|    return CURLE_WEIRD_SERVER_REPLY;
 1803|      0|  }
 1804|       |
 1805|     50|  infof(data, "Failed EPSV attempt. Disabling EPSV");
 1806|       |  /* disable it for next transfer */
 1807|     50|  conn->bits.ftp_use_epsv = FALSE;
 1808|     50|  data->state.errorbuf = FALSE; /* allow error message to get
 1809|       |                                         rewritten */
 1810|     50|  result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "PASV");
 1811|     50|  if(!result) {
 1812|     50|    conn->proto.ftpc.count1++;
 1813|       |    /* remain in/go to the FTP_PASV state */
 1814|     50|    state(data, FTP_PASV);
 1815|     50|  }
 1816|     50|  return result;
 1817|     50|}
ftp.c:ftp_dophase_done:
 4259|      3|{
 4260|      3|  struct connectdata *conn = data->conn;
 4261|      3|  struct FTP *ftp = data->req.p.ftp;
 4262|      3|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4263|       |
 4264|      3|  if(connected) {
 4265|      0|    int completed;
 4266|      0|    CURLcode result = ftp_do_more(data, &completed);
 4267|       |
 4268|      0|    if(result) {
 4269|      0|      close_secondarysocket(data, conn);
 4270|      0|      return result;
 4271|      0|    }
 4272|      0|  }
 4273|       |
 4274|      3|  if(ftp->transfer != PPTRANSFER_BODY)
 4275|       |    /* no data to transfer */
 4276|      3|    Curl_setup_transfer(data, -1, -1, FALSE, -1);
 4277|      0|  else if(!connected)
 4278|       |    /* since we didn't connect now, we want do_more to get called */
 4279|      0|    conn->bits.do_more = TRUE;
 4280|       |
 4281|      3|  ftpc->ctl_valid = TRUE; /* seems good */
 4282|       |
 4283|      3|  return CURLE_OK;
 4284|      3|}
ftp.c:ftp_endofresp:
  537|  1.16k|{
  538|  1.16k|  (void)data;
  539|  1.16k|  (void)conn;
  540|       |
  541|  1.16k|  if((len > 3) && LASTLINE(line)) {
  542|    599|    *code = curlx_sltosi(strtol(line, NULL, 10));
  543|    599|    return TRUE;
  544|    599|  }
  545|       |
  546|    562|  return FALSE;
  547|  1.16k|}
ftp.c:ftp_done:
 3191|    524|{
 3192|    524|  struct connectdata *conn = data->conn;
 3193|    524|  struct FTP *ftp = data->req.p.ftp;
 3194|    524|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3195|    524|  struct pingpong *pp = &ftpc->pp;
 3196|    524|  ssize_t nread;
 3197|    524|  int ftpcode;
 3198|    524|  CURLcode result = CURLE_OK;
 3199|    524|  char *rawPath = NULL;
 3200|    524|  size_t pathLen = 0;
 3201|       |
 3202|    524|  if(!ftp)
 3203|      0|    return CURLE_OK;
 3204|       |
 3205|    524|  switch(status) {
 3206|      0|  case CURLE_BAD_DOWNLOAD_RESUME:
 3207|     19|  case CURLE_FTP_WEIRD_PASV_REPLY:
 3208|     19|  case CURLE_FTP_PORT_FAILED:
 3209|     19|  case CURLE_FTP_ACCEPT_FAILED:
 3210|     19|  case CURLE_FTP_ACCEPT_TIMEOUT:
 3211|     21|  case CURLE_FTP_COULDNT_SET_TYPE:
 3212|     21|  case CURLE_FTP_COULDNT_RETR_FILE:
 3213|     21|  case CURLE_PARTIAL_FILE:
 3214|     21|  case CURLE_UPLOAD_FAILED:
 3215|     25|  case CURLE_REMOTE_ACCESS_DENIED:
 3216|     25|  case CURLE_FILESIZE_EXCEEDED:
 3217|     25|  case CURLE_REMOTE_FILE_NOT_FOUND:
 3218|     25|  case CURLE_WRITE_ERROR:
 3219|       |    /* the connection stays alive fine even though this happened */
 3220|       |    /* fall-through */
 3221|    137|  case CURLE_OK: /* doesn't affect the control connection's status */
 3222|    137|    if(!premature)
 3223|     28|      break;
 3224|       |
 3225|       |    /* until we cope better with prematurely ended requests, let them
 3226|       |     * fallback as if in complete failure */
 3227|       |    /* FALLTHROUGH */
 3228|    496|  default:       /* by default, an error means the control connection is
 3229|       |                    wedged and should not be used anymore */
 3230|    496|    ftpc->ctl_valid = FALSE;
 3231|    496|    ftpc->cwdfail = TRUE; /* set this TRUE to prevent us to remember the
 3232|       |                             current path, as this connection is going */
 3233|    496|    connclose(conn, "FTP ended with bad error code");
 3234|    496|    result = status;      /* use the already set error code */
 3235|    496|    break;
 3236|    524|  }
 3237|       |
 3238|    524|  if(data->state.wildcardmatch) {
 3239|      7|    if(data->set.chunk_end && ftpc->file) {
 3240|      0|      Curl_set_in_callback(data, true);
 3241|      0|      data->set.chunk_end(data->wildcard.customptr);
 3242|      0|      Curl_set_in_callback(data, false);
 3243|      0|    }
 3244|      7|    ftpc->known_filesize = -1;
 3245|      7|  }
 3246|       |
 3247|    524|  if(!result)
 3248|       |    /* get the url-decoded "raw" path */
 3249|    137|    result = Curl_urldecode(data, ftp->path, 0, &rawPath, &pathLen,
 3250|    137|                            REJECT_CTRL);
 3251|    524|  if(result) {
 3252|       |    /* We can limp along anyway (and should try to since we may already be in
 3253|       |     * the error path) */
 3254|    387|    ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3255|    387|    connclose(conn, "FTP: out of memory!"); /* mark for connection closure */
 3256|    387|    free(ftpc->prevpath);
 3257|    387|    ftpc->prevpath = NULL; /* no path remembering */
 3258|    387|  }
 3259|    137|  else { /* remember working directory for connection reuse */
 3260|    137|    if((data->set.ftp_filemethod == FTPFILE_NOCWD) && (rawPath[0] == '/'))
 3261|      0|      free(rawPath); /* full path => no CWDs happened => keep ftpc->prevpath */
 3262|    137|    else {
 3263|    137|      free(ftpc->prevpath);
 3264|       |
 3265|    137|      if(!ftpc->cwdfail) {
 3266|     24|        if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 3267|      0|          pathLen = 0; /* relative path => working directory is FTP home */
 3268|     24|        else
 3269|     24|          pathLen -= ftpc->file?strlen(ftpc->file):0; /* file is url-decoded */
 3270|       |
 3271|     24|        rawPath[pathLen] = '\0';
 3272|     24|        ftpc->prevpath = rawPath;
 3273|     24|      }
 3274|    113|      else {
 3275|    113|        free(rawPath);
 3276|    113|        ftpc->prevpath = NULL; /* no path */
 3277|    113|      }
 3278|    137|    }
 3279|       |
 3280|    137|    if(ftpc->prevpath)
 3281|     24|      infof(data, "Remembering we are in dir \"%s\"", ftpc->prevpath);
 3282|    137|  }
 3283|       |
 3284|       |  /* free the dir tree and file parts */
 3285|    524|  freedirs(ftpc);
 3286|       |
 3287|       |  /* shut down the socket to inform the server we're done */
 3288|       |
 3289|       |#ifdef _WIN32_WCE
 3290|       |  shutdown(conn->sock[SECONDARYSOCKET], 2);  /* SD_BOTH */
 3291|       |#endif
 3292|       |
 3293|    524|  if(conn->sock[SECONDARYSOCKET] != CURL_SOCKET_BAD) {
 3294|      0|    if(!result && ftpc->dont_check && data->req.maxdownload > 0) {
 3295|       |      /* partial download completed */
 3296|      0|      result = Curl_pp_sendf(data, pp, "%s", "ABOR");
 3297|      0|      if(result) {
 3298|      0|        failf(data, "Failure sending ABOR command: %s",
 3299|      0|              curl_easy_strerror(result));
 3300|      0|        ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3301|      0|        connclose(conn, "ABOR command failed"); /* connection closure */
 3302|      0|      }
 3303|      0|    }
 3304|       |
 3305|      0|    if(conn->ssl[SECONDARYSOCKET].use) {
 3306|       |      /* The secondary socket is using SSL so we must close down that part
 3307|       |         first before we close the socket for real */
 3308|      0|      Curl_ssl_close(data, conn, SECONDARYSOCKET);
 3309|       |
 3310|       |      /* Note that we keep "use" set to TRUE since that (next) connection is
 3311|       |         still requested to use SSL */
 3312|      0|    }
 3313|      0|    close_secondarysocket(data, conn);
 3314|      0|  }
 3315|       |
 3316|    524|  if(!result && (ftp->transfer == PPTRANSFER_BODY) && ftpc->ctl_valid &&
 3317|    524|     pp->pending_resp && !premature) {
 3318|       |    /*
 3319|       |     * Let's see what the server says about the transfer we just performed,
 3320|       |     * but lower the timeout as sometimes this connection has died while the
 3321|       |     * data has been transferred. This happens when doing through NATs etc that
 3322|       |     * abandon old silent connections.
 3323|       |     */
 3324|      0|    timediff_t old_time = pp->response_time;
 3325|       |
 3326|      0|    pp->response_time = 60*1000; /* give it only a minute for now */
 3327|      0|    pp->response = Curl_now(); /* timeout relative now */
 3328|       |
 3329|      0|    result = Curl_GetFTPResponse(data, &nread, &ftpcode);
 3330|       |
 3331|      0|    pp->response_time = old_time; /* set this back to previous value */
 3332|       |
 3333|      0|    if(!nread && (CURLE_OPERATION_TIMEDOUT == result)) {
 3334|      0|      failf(data, "control connection looks dead");
 3335|      0|      ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3336|      0|      connclose(conn, "Timeout or similar in FTP DONE operation"); /* close */
 3337|      0|    }
 3338|       |
 3339|      0|    if(result) {
 3340|      0|      Curl_safefree(ftp->pathalloc);
 3341|      0|      return result;
 3342|      0|    }
 3343|       |
 3344|      0|    if(ftpc->dont_check && data->req.maxdownload > 0) {
 3345|       |      /* we have just sent ABOR and there is no reliable way to check if it was
 3346|       |       * successful or not; we have to close the connection now */
 3347|      0|      infof(data, "partial download completed, closing connection");
 3348|      0|      connclose(conn, "Partial download with no ability to check");
 3349|      0|      return result;
 3350|      0|    }
 3351|       |
 3352|      0|    if(!ftpc->dont_check) {
 3353|       |      /* 226 Transfer complete, 250 Requested file action okay, completed. */
 3354|      0|      switch(ftpcode) {
 3355|      0|      case 226:
 3356|      0|      case 250:
 3357|      0|        break;
 3358|      0|      case 552:
 3359|      0|        failf(data, "Exceeded storage allocation");
 3360|      0|        result = CURLE_REMOTE_DISK_FULL;
 3361|      0|        break;
 3362|      0|      default:
 3363|      0|        failf(data, "server did not report OK, got %d", ftpcode);
 3364|      0|        result = CURLE_PARTIAL_FILE;
 3365|      0|        break;
 3366|      0|      }
 3367|      0|    }
 3368|      0|  }
 3369|       |
 3370|    524|  if(result || premature)
 3371|       |    /* the response code from the transfer showed an error already so no
 3372|       |       use checking further */
 3373|    496|    ;
 3374|     28|  else if(data->set.upload) {
 3375|      3|    if((-1 != data->state.infilesize) &&
 3376|      3|       (data->state.infilesize != data->req.writebytecount) &&
 3377|      3|       !data->set.crlf &&
 3378|      3|       (ftp->transfer == PPTRANSFER_BODY)) {
 3379|      2|      failf(data, "Uploaded unaligned file size (%" CURL_FORMAT_CURL_OFF_T
 3380|      2|            " out of %" CURL_FORMAT_CURL_OFF_T " bytes)",
 3381|      2|            data->req.bytecount, data->state.infilesize);
 3382|      2|      result = CURLE_PARTIAL_FILE;
 3383|      2|    }
 3384|      3|  }
 3385|     25|  else {
 3386|     25|    if((-1 != data->req.size) &&
 3387|     25|       (data->req.size != data->req.bytecount) &&
 3388|     25|#ifdef CURL_DO_LINEEND_CONV
 3389|       |       /* Most FTP servers don't adjust their file SIZE response for CRLFs, so
 3390|       |        * we'll check to see if the discrepancy can be explained by the number
 3391|       |        * of CRLFs we've changed to LFs.
 3392|       |        */
 3393|     25|       ((data->req.size + data->state.crlf_conversions) !=
 3394|      0|        data->req.bytecount) &&
 3395|     25|#endif /* CURL_DO_LINEEND_CONV */
 3396|     25|       (data->req.maxdownload != data->req.bytecount)) {
 3397|      0|      failf(data, "Received only partial file: %" CURL_FORMAT_CURL_OFF_T
 3398|      0|            " bytes", data->req.bytecount);
 3399|      0|      result = CURLE_PARTIAL_FILE;
 3400|      0|    }
 3401|     25|    else if(!ftpc->dont_check &&
 3402|     25|            !data->req.bytecount &&
 3403|     25|            (data->req.size>0)) {
 3404|      0|      failf(data, "No data was received!");
 3405|      0|      result = CURLE_FTP_COULDNT_RETR_FILE;
 3406|      0|    }
 3407|     25|  }
 3408|       |
 3409|       |  /* clear these for next connection */
 3410|    524|  ftp->transfer = PPTRANSFER_BODY;
 3411|    524|  ftpc->dont_check = FALSE;
 3412|       |
 3413|       |  /* Send any post-transfer QUOTE strings? */
 3414|    524|  if(!status && !result && !premature && data->set.postquote)
 3415|      0|    result = ftp_sendquote(data, conn, data->set.postquote);
 3416|    524|  Curl_safefree(ftp->pathalloc);
 3417|    524|  return result;
 3418|    524|}
ftp.c:freedirs:
  244|  1.05k|{
  245|  1.05k|  if(ftpc->dirs) {
  246|     63|    int i;
  247|    212|    for(i = 0; i < ftpc->dirdepth; i++) {
  248|    149|      free(ftpc->dirs[i]);
  249|    149|      ftpc->dirs[i] = NULL;
  250|    149|    }
  251|     63|    free(ftpc->dirs);
  252|     63|    ftpc->dirs = NULL;
  253|     63|    ftpc->dirdepth = 0;
  254|     63|  }
  255|  1.05k|  Curl_safefree(ftpc->file);
  256|       |
  257|       |  /* no longer of any use */
  258|  1.05k|  Curl_safefree(ftpc->newhost);
  259|  1.05k|}
ftp.c:ftp_do:
 4000|     91|{
 4001|     91|  CURLcode result = CURLE_OK;
 4002|     91|  struct connectdata *conn = data->conn;
 4003|     91|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4004|       |
 4005|     91|  *done = FALSE; /* default to false */
 4006|     91|  ftpc->wait_data_conn = FALSE; /* default to no such wait */
 4007|       |
 4008|     91|  if(data->state.wildcardmatch) {
 4009|      5|    result = wc_statemach(data);
 4010|      5|    if(data->wildcard.state == CURLWC_SKIP ||
 4011|      5|      data->wildcard.state == CURLWC_DONE) {
 4012|       |      /* do not call ftp_regular_transfer */
 4013|      0|      return CURLE_OK;
 4014|      0|    }
 4015|      5|    if(result) /* error, loop or skipping the file */
 4016|      1|      return result;
 4017|      5|  }
 4018|     86|  else { /* no wildcard FSM needed */
 4019|     86|    result = ftp_parse_url_path(data);
 4020|     86|    if(result)
 4021|      1|      return result;
 4022|     86|  }
 4023|       |
 4024|     89|  result = ftp_regular_transfer(data, done);
 4025|       |
 4026|     89|  return result;
 4027|     91|}
ftp.c:wc_statemach:
 3863|      5|{
 3864|      5|  struct WildcardData * const wildcard = &(data->wildcard);
 3865|      5|  struct connectdata *conn = data->conn;
 3866|      5|  CURLcode result = CURLE_OK;
 3867|       |
 3868|      5|  for(;;) {
 3869|      5|    switch(wildcard->state) {
 3870|      5|    case CURLWC_INIT:
 3871|      5|      result = init_wc_data(data);
 3872|      5|      if(wildcard->state == CURLWC_CLEAN)
 3873|       |        /* only listing! */
 3874|      2|        return result;
 3875|      3|      wildcard->state = result ? CURLWC_ERROR : CURLWC_MATCHING;
 3876|      3|      return result;
 3877|       |
 3878|      0|    case CURLWC_MATCHING: {
 3879|       |      /* In this state is LIST response successfully parsed, so lets restore
 3880|       |         previous WRITEFUNCTION callback and WRITEDATA pointer */
 3881|      0|      struct ftp_wc *ftpwc = wildcard->protdata;
 3882|      0|      data->set.fwrite_func = ftpwc->backup.write_function;
 3883|      0|      data->set.out = ftpwc->backup.file_descriptor;
 3884|      0|      ftpwc->backup.write_function = ZERO_NULL;
 3885|      0|      ftpwc->backup.file_descriptor = NULL;
 3886|      0|      wildcard->state = CURLWC_DOWNLOADING;
 3887|       |
 3888|      0|      if(Curl_ftp_parselist_geterror(ftpwc->parser)) {
 3889|       |        /* error found in LIST parsing */
 3890|      0|        wildcard->state = CURLWC_CLEAN;
 3891|      0|        continue;
 3892|      0|      }
 3893|      0|      if(wildcard->filelist.size == 0) {
 3894|       |        /* no corresponding file */
 3895|      0|        wildcard->state = CURLWC_CLEAN;
 3896|      0|        return CURLE_REMOTE_FILE_NOT_FOUND;
 3897|      0|      }
 3898|      0|      continue;
 3899|      0|    }
 3900|       |
 3901|      0|    case CURLWC_DOWNLOADING: {
 3902|       |      /* filelist has at least one file, lets get first one */
 3903|      0|      struct ftp_conn *ftpc = &conn->proto.ftpc;
 3904|      0|      struct curl_fileinfo *finfo = wildcard->filelist.head->ptr;
 3905|      0|      struct FTP *ftp = data->req.p.ftp;
 3906|       |
 3907|      0|      char *tmp_path = aprintf("%s%s", wildcard->path, finfo->filename);
 3908|      0|      if(!tmp_path)
 3909|      0|        return CURLE_OUT_OF_MEMORY;
 3910|       |
 3911|       |      /* switch default ftp->path and tmp_path */
 3912|      0|      free(ftp->pathalloc);
 3913|      0|      ftp->pathalloc = ftp->path = tmp_path;
 3914|       |
 3915|      0|      infof(data, "Wildcard - START of \"%s\"", finfo->filename);
 3916|      0|      if(data->set.chunk_bgn) {
 3917|      0|        long userresponse;
 3918|      0|        Curl_set_in_callback(data, true);
 3919|      0|        userresponse = data->set.chunk_bgn(
 3920|      0|          finfo, wildcard->customptr, (int)wildcard->filelist.size);
 3921|      0|        Curl_set_in_callback(data, false);
 3922|      0|        switch(userresponse) {
 3923|      0|        case CURL_CHUNK_BGN_FUNC_SKIP:
 3924|      0|          infof(data, "Wildcard - \"%s\" skipped by user",
 3925|      0|                finfo->filename);
 3926|      0|          wildcard->state = CURLWC_SKIP;
 3927|      0|          continue;
 3928|      0|        case CURL_CHUNK_BGN_FUNC_FAIL:
 3929|      0|          return CURLE_CHUNK_FAILED;
 3930|      0|        }
 3931|      0|      }
 3932|       |
 3933|      0|      if(finfo->filetype != CURLFILETYPE_FILE) {
 3934|      0|        wildcard->state = CURLWC_SKIP;
 3935|      0|        continue;
 3936|      0|      }
 3937|       |
 3938|      0|      if(finfo->flags & CURLFINFOFLAG_KNOWN_SIZE)
 3939|      0|        ftpc->known_filesize = finfo->size;
 3940|       |
 3941|      0|      result = ftp_parse_url_path(data);
 3942|      0|      if(result)
 3943|      0|        return result;
 3944|       |
 3945|       |      /* we don't need the Curl_fileinfo of first file anymore */
 3946|      0|      Curl_llist_remove(&wildcard->filelist, wildcard->filelist.head, NULL);
 3947|       |
 3948|      0|      if(wildcard->filelist.size == 0) { /* remains only one file to down. */
 3949|      0|        wildcard->state = CURLWC_CLEAN;
 3950|       |        /* after that will be ftp_do called once again and no transfer
 3951|       |           will be done because of CURLWC_CLEAN state */
 3952|      0|        return CURLE_OK;
 3953|      0|      }
 3954|      0|      return result;
 3955|      0|    }
 3956|       |
 3957|      0|    case CURLWC_SKIP: {
 3958|      0|      if(data->set.chunk_end) {
 3959|      0|        Curl_set_in_callback(data, true);
 3960|      0|        data->set.chunk_end(data->wildcard.customptr);
 3961|      0|        Curl_set_in_callback(data, false);
 3962|      0|      }
 3963|      0|      Curl_llist_remove(&wildcard->filelist, wildcard->filelist.head, NULL);
 3964|      0|      wildcard->state = (wildcard->filelist.size == 0) ?
 3965|      0|        CURLWC_CLEAN : CURLWC_DOWNLOADING;
 3966|      0|      continue;
 3967|      0|    }
 3968|       |
 3969|      0|    case CURLWC_CLEAN: {
 3970|      0|      struct ftp_wc *ftpwc = wildcard->protdata;
 3971|      0|      result = CURLE_OK;
 3972|      0|      if(ftpwc)
 3973|      0|        result = Curl_ftp_parselist_geterror(ftpwc->parser);
 3974|       |
 3975|      0|      wildcard->state = result ? CURLWC_ERROR : CURLWC_DONE;
 3976|      0|      return result;
 3977|      0|    }
 3978|       |
 3979|      0|    case CURLWC_DONE:
 3980|      0|    case CURLWC_ERROR:
 3981|      0|    case CURLWC_CLEAR:
 3982|      0|      if(wildcard->dtor)
 3983|      0|        wildcard->dtor(wildcard->protdata);
 3984|      0|      return result;
 3985|      5|    }
 3986|      5|  }
 3987|       |  /* UNREACHABLE */
 3988|      5|}
ftp.c:init_wc_data:
 3768|      5|{
 3769|      5|  char *last_slash;
 3770|      5|  struct FTP *ftp = data->req.p.ftp;
 3771|      5|  char *path = ftp->path;
 3772|      5|  struct WildcardData *wildcard = &(data->wildcard);
 3773|      5|  CURLcode result = CURLE_OK;
 3774|      5|  struct ftp_wc *ftpwc = NULL;
 3775|       |
 3776|      5|  last_slash = strrchr(ftp->path, '/');
 3777|      5|  if(last_slash) {
 3778|      2|    last_slash++;
 3779|      2|    if(last_slash[0] == '\0') {
 3780|      1|      wildcard->state = CURLWC_CLEAN;
 3781|      1|      result = ftp_parse_url_path(data);
 3782|      1|      return result;
 3783|      1|    }
 3784|      1|    wildcard->pattern = strdup(last_slash);
 3785|      1|    if(!wildcard->pattern)
 3786|      0|      return CURLE_OUT_OF_MEMORY;
 3787|      1|    last_slash[0] = '\0'; /* cut file from path */
 3788|      1|  }
 3789|      3|  else { /* there is only 'wildcard pattern' or nothing */
 3790|      3|    if(path[0]) {
 3791|      2|      wildcard->pattern = strdup(path);
 3792|      2|      if(!wildcard->pattern)
 3793|      0|        return CURLE_OUT_OF_MEMORY;
 3794|      2|      path[0] = '\0';
 3795|      2|    }
 3796|      1|    else { /* only list */
 3797|      1|      wildcard->state = CURLWC_CLEAN;
 3798|      1|      result = ftp_parse_url_path(data);
 3799|      1|      return result;
 3800|      1|    }
 3801|      3|  }
 3802|       |
 3803|       |  /* program continues only if URL is not ending with slash, allocate needed
 3804|       |     resources for wildcard transfer */
 3805|       |
 3806|       |  /* allocate ftp protocol specific wildcard data */
 3807|      3|  ftpwc = calloc(1, sizeof(struct ftp_wc));
 3808|      3|  if(!ftpwc) {
 3809|      0|    result = CURLE_OUT_OF_MEMORY;
 3810|      0|    goto fail;
 3811|      0|  }
 3812|       |
 3813|       |  /* INITIALIZE parselist structure */
 3814|      3|  ftpwc->parser = Curl_ftp_parselist_data_alloc();
 3815|      3|  if(!ftpwc->parser) {
 3816|      0|    result = CURLE_OUT_OF_MEMORY;
 3817|      0|    goto fail;
 3818|      0|  }
 3819|       |
 3820|      3|  wildcard->protdata = ftpwc; /* put it to the WildcardData tmp pointer */
 3821|      3|  wildcard->dtor = wc_data_dtor;
 3822|       |
 3823|       |  /* wildcard does not support NOCWD option (assert it?) */
 3824|      3|  if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 3825|      0|    data->set.ftp_filemethod = FTPFILE_MULTICWD;
 3826|       |
 3827|       |  /* try to parse ftp url */
 3828|      3|  result = ftp_parse_url_path(data);
 3829|      3|  if(result) {
 3830|      1|    goto fail;
 3831|      1|  }
 3832|       |
 3833|      2|  wildcard->path = strdup(ftp->path);
 3834|      2|  if(!wildcard->path) {
 3835|      0|    result = CURLE_OUT_OF_MEMORY;
 3836|      0|    goto fail;
 3837|      0|  }
 3838|       |
 3839|       |  /* backup old write_function */
 3840|      2|  ftpwc->backup.write_function = data->set.fwrite_func;
 3841|       |  /* parsing write function */
 3842|      2|  data->set.fwrite_func = Curl_ftp_parselist;
 3843|       |  /* backup old file descriptor */
 3844|      2|  ftpwc->backup.file_descriptor = data->set.out;
 3845|       |  /* let the writefunc callback know the transfer */
 3846|      2|  data->set.out = data;
 3847|       |
 3848|      2|  infof(data, "Wildcard - Parsing started");
 3849|      2|  return CURLE_OK;
 3850|       |
 3851|      1|  fail:
 3852|      1|  if(ftpwc) {
 3853|      1|    Curl_ftp_parselist_data_free(&ftpwc->parser);
 3854|      1|    free(ftpwc);
 3855|      1|  }
 3856|      1|  Curl_safefree(wildcard->pattern);
 3857|      1|  wildcard->dtor = ZERO_NULL;
 3858|      1|  wildcard->protdata = NULL;
 3859|      1|  return result;
 3860|      2|}
ftp.c:wc_data_dtor:
 3760|      2|{
 3761|      2|  struct ftp_wc *ftpwc = ptr;
 3762|      2|  if(ftpwc && ftpwc->parser)
 3763|      2|    Curl_ftp_parselist_data_free(&ftpwc->parser);
 3764|      2|  free(ftpwc);
 3765|      2|}
ftp.c:ftp_parse_url_path:
 4113|     91|{
 4114|       |  /* the ftp struct is already inited in ftp_connect() */
 4115|     91|  struct FTP *ftp = data->req.p.ftp;
 4116|     91|  struct connectdata *conn = data->conn;
 4117|     91|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4118|     91|  const char *slashPos = NULL;
 4119|     91|  const char *fileName = NULL;
 4120|     91|  CURLcode result = CURLE_OK;
 4121|     91|  char *rawPath = NULL; /* url-decoded "raw" path */
 4122|     91|  size_t pathLen = 0;
 4123|       |
 4124|     91|  ftpc->ctl_valid = FALSE;
 4125|     91|  ftpc->cwdfail = FALSE;
 4126|       |
 4127|       |  /* url-decode ftp path before further evaluation */
 4128|     91|  result = Curl_urldecode(data, ftp->path, 0, &rawPath, &pathLen, REJECT_CTRL);
 4129|     91|  if(result)
 4130|      0|    return result;
 4131|       |
 4132|     91|  switch(data->set.ftp_filemethod) {
 4133|      0|    case FTPFILE_NOCWD: /* fastest, but less standard-compliant */
 4134|       |
 4135|      0|      if((pathLen > 0) && (rawPath[pathLen - 1] != '/'))
 4136|      0|          fileName = rawPath;  /* this is a full file path */
 4137|       |      /*
 4138|       |        else: ftpc->file is not used anywhere other than for operations on
 4139|       |              a file. In other words, never for directory operations.
 4140|       |              So we can safely leave filename as NULL here and use it as a
 4141|       |              argument in dir/file decisions.
 4142|       |      */
 4143|      0|      break;
 4144|       |
 4145|      0|    case FTPFILE_SINGLECWD:
 4146|      0|      slashPos = strrchr(rawPath, '/');
 4147|      0|      if(slashPos) {
 4148|       |        /* get path before last slash, except for / */
 4149|      0|        size_t dirlen = slashPos - rawPath;
 4150|      0|        if(dirlen == 0)
 4151|      0|            dirlen++;
 4152|       |
 4153|      0|        ftpc->dirs = calloc(1, sizeof(ftpc->dirs[0]));
 4154|      0|        if(!ftpc->dirs) {
 4155|      0|          free(rawPath);
 4156|      0|          return CURLE_OUT_OF_MEMORY;
 4157|      0|        }
 4158|       |
 4159|      0|        ftpc->dirs[0] = calloc(1, dirlen + 1);
 4160|      0|        if(!ftpc->dirs[0]) {
 4161|      0|          free(rawPath);
 4162|      0|          return CURLE_OUT_OF_MEMORY;
 4163|      0|        }
 4164|       |
 4165|      0|        strncpy(ftpc->dirs[0], rawPath, dirlen);
 4166|      0|        ftpc->dirdepth = 1; /* we consider it to be a single dir */
 4167|      0|        fileName = slashPos + 1; /* rest is file name */
 4168|      0|      }
 4169|      0|      else
 4170|      0|        fileName = rawPath; /* file name only (or empty) */
 4171|      0|      break;
 4172|       |
 4173|      0|    default: /* allow pretty much anything */
 4174|     91|    case FTPFILE_MULTICWD: {
 4175|       |      /* current position: begin of next path component */
 4176|     91|      const char *curPos = rawPath;
 4177|       |
 4178|     91|      int dirAlloc = 0; /* number of entries allocated for the 'dirs' array */
 4179|     91|      const char *str = rawPath;
 4180|  1.26k|      for(; *str != 0; ++str)
 4181|  1.17k|        if (*str == '/')
 4182|    164|          ++dirAlloc;
 4183|       |
 4184|     91|      if(dirAlloc > 0) {
 4185|     63|        ftpc->dirs = calloc(dirAlloc, sizeof(ftpc->dirs[0]));
 4186|     63|        if(!ftpc->dirs) {
 4187|      0|          free(rawPath);
 4188|      0|          return CURLE_OUT_OF_MEMORY;
 4189|      0|        }
 4190|       |
 4191|       |        /* parse the URL path into separate path components */
 4192|    227|        while((slashPos = strchr(curPos, '/')) != NULL) {
 4193|    164|          size_t compLen = slashPos - curPos;
 4194|       |
 4195|       |          /* path starts with a slash: add that as a directory */
 4196|    164|          if((compLen == 0) && (ftpc->dirdepth == 0))
 4197|      3|            ++compLen;
 4198|       |
 4199|       |          /* we skip empty path components, like "x//y" since the FTP command
 4200|       |             CWD requires a parameter and a non-existent parameter a) doesn't
 4201|       |             work on many servers and b) has no effect on the others. */
 4202|    164|          if(compLen > 0) {
 4203|    149|            char *comp = calloc(1, compLen + 1);
 4204|    149|            if(!comp) {
 4205|      0|              free(rawPath);
 4206|      0|              return CURLE_OUT_OF_MEMORY;
 4207|      0|            }
 4208|    149|            strncpy(comp, curPos, compLen);
 4209|    149|            ftpc->dirs[ftpc->dirdepth++] = comp;
 4210|    149|          }
 4211|    164|          curPos = slashPos + 1;
 4212|    164|        }
 4213|     63|      }
 4214|     91|      DEBUGASSERT(ftpc->dirdepth <= dirAlloc);
 4215|     91|      fileName = curPos; /* the rest is the file name (or empty) */
 4216|     91|    }
 4217|      0|    break;
 4218|     91|  } /* switch */
 4219|       |
 4220|     91|  if(fileName && *fileName)
 4221|     23|    ftpc->file = strdup(fileName);
 4222|     68|  else
 4223|     68|    ftpc->file = NULL; /* instead of point to a zero byte,
 4224|       |                            we make it a NULL pointer */
 4225|       |
 4226|     91|  if(data->set.upload && !ftpc->file && (ftp->transfer == PPTRANSFER_BODY)) {
 4227|       |    /* We need a file name when uploading. Return error! */
 4228|      2|    failf(data, "Uploading to a URL without a file name!");
 4229|      2|    free(rawPath);
 4230|      2|    return CURLE_URL_MALFORMAT;
 4231|      2|  }
 4232|       |
 4233|     89|  ftpc->cwddone = FALSE; /* default to not done */
 4234|       |
 4235|     89|  if((data->set.ftp_filemethod == FTPFILE_NOCWD) && (rawPath[0] == '/'))
 4236|      0|    ftpc->cwddone = TRUE; /* skip CWD for absolute paths */
 4237|     89|  else { /* newly created FTP connections are already in entry path */
 4238|     89|    const char *oldPath = conn->bits.reuse ? ftpc->prevpath : "";
 4239|     89|    if(oldPath) {
 4240|     89|      size_t n = pathLen;
 4241|     89|      if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 4242|      0|        n = 0; /* CWD to entry for relative paths */
 4243|     89|      else
 4244|     89|        n -= ftpc->file?strlen(ftpc->file):0;
 4245|       |
 4246|     89|      if((strlen(oldPath) == n) && !strncmp(rawPath, oldPath, n)) {
 4247|     27|        infof(data, "Request has same path as previous transfer");
 4248|     27|        ftpc->cwddone = TRUE;
 4249|     27|      }
 4250|     89|    }
 4251|     89|  }
 4252|       |
 4253|     89|  free(rawPath);
 4254|     89|  return CURLE_OK;
 4255|     91|}
ftp.c:ftp_regular_transfer:
 4317|     89|{
 4318|     89|  CURLcode result = CURLE_OK;
 4319|     89|  bool connected = FALSE;
 4320|     89|  struct connectdata *conn = data->conn;
 4321|     89|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4322|     89|  data->req.size = -1; /* make sure this is unknown at this point */
 4323|       |
 4324|     89|  Curl_pgrsSetUploadCounter(data, 0);
 4325|     89|  Curl_pgrsSetDownloadCounter(data, 0);
 4326|     89|  Curl_pgrsSetUploadSize(data, -1);
 4327|     89|  Curl_pgrsSetDownloadSize(data, -1);
 4328|       |
 4329|     89|  ftpc->ctl_valid = TRUE; /* starts good */
 4330|       |
 4331|     89|  result = ftp_perform(data,
 4332|     89|                       &connected, /* have we connected after PASV/PORT */
 4333|     89|                       dophase_done); /* all commands in the DO-phase done? */
 4334|       |
 4335|     89|  if(!result) {
 4336|       |
 4337|     81|    if(!*dophase_done)
 4338|       |      /* the DO phase has not completed yet */
 4339|     80|      return CURLE_OK;
 4340|       |
 4341|      1|    result = ftp_dophase_done(data, connected);
 4342|       |
 4343|      1|    if(result)
 4344|      0|      return result;
 4345|      1|  }
 4346|      8|  else
 4347|      8|    freedirs(ftpc);
 4348|       |
 4349|      9|  return result;
 4350|     89|}
ftp.c:ftp_perform:
 3726|     89|{
 3727|       |  /* this is FTP and no proxy */
 3728|     89|  CURLcode result = CURLE_OK;
 3729|     89|  struct connectdata *conn = data->conn;
 3730|       |
 3731|     89|  DEBUGF(infof(data, "DO phase starts"));
 3732|       |
 3733|     89|  if(data->set.opt_no_body) {
 3734|       |    /* requested no body means no transfer... */
 3735|      5|    struct FTP *ftp = data->req.p.ftp;
 3736|      5|    ftp->transfer = PPTRANSFER_INFO;
 3737|      5|  }
 3738|       |
 3739|     89|  *dophase_done = FALSE; /* not done yet */
 3740|       |
 3741|       |  /* start the first command in the DO phase */
 3742|     89|  result = ftp_state_quote(data, TRUE, FTP_QUOTE);
 3743|     89|  if(result)
 3744|      0|    return result;
 3745|       |
 3746|       |  /* run the state-machine */
 3747|     89|  result = ftp_multi_statemach(data, dophase_done);
 3748|       |
 3749|     89|  *connected = conn->bits.tcpconnect[SECONDARYSOCKET];
 3750|       |
 3751|     89|  infof(data, "ftp_perform ends with SECONDARY: %d", *connected);
 3752|       |
 3753|     89|  if(*dophase_done)
 3754|      1|    DEBUGF(infof(data, "DO phase is complete1"));
 3755|       |
 3756|     89|  return result;
 3757|     89|}
ftp.c:ftp_disconnect:
 4072|    526|{
 4073|    526|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4074|    526|  struct pingpong *pp = &ftpc->pp;
 4075|       |
 4076|       |  /* We cannot send quit unconditionally. If this connection is stale or
 4077|       |     bad in any way, sending quit and waiting around here will make the
 4078|       |     disconnect wait in vain and cause more problems than we need to.
 4079|       |
 4080|       |     ftp_quit() will check the state of ftp->ctl_valid. If it's ok it
 4081|       |     will try to send the QUIT command, otherwise it will just return.
 4082|       |  */
 4083|    526|  if(dead_connection)
 4084|    448|    ftpc->ctl_valid = FALSE;
 4085|       |
 4086|       |  /* The FTP session may or may not have been allocated/setup at this point! */
 4087|    526|  (void)ftp_quit(data, conn); /* ignore errors on the QUIT */
 4088|       |
 4089|    526|  if(ftpc->entrypath) {
 4090|      0|    if(data->state.most_recent_ftp_entrypath == ftpc->entrypath) {
 4091|      0|      data->state.most_recent_ftp_entrypath = NULL;
 4092|      0|    }
 4093|      0|    Curl_safefree(ftpc->entrypath);
 4094|      0|  }
 4095|       |
 4096|    526|  freedirs(ftpc);
 4097|    526|  Curl_safefree(ftpc->prevpath);
 4098|    526|  Curl_safefree(ftpc->server_os);
 4099|    526|  Curl_pp_disconnect(pp);
 4100|    526|  Curl_sec_end(conn);
 4101|    526|  return CURLE_OK;
 4102|    526|}
ftp.c:ftp_quit:
 4040|    526|{
 4041|    526|  CURLcode result = CURLE_OK;
 4042|       |
 4043|    526|  if(conn->proto.ftpc.ctl_valid) {
 4044|     28|    result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "QUIT");
 4045|     28|    if(result) {
 4046|      0|      failf(data, "Failure sending QUIT command: %s",
 4047|      0|            curl_easy_strerror(result));
 4048|      0|      conn->proto.ftpc.ctl_valid = FALSE; /* mark control connection as bad */
 4049|      0|      connclose(conn, "QUIT command failed"); /* mark for connection closure */
 4050|      0|      state(data, FTP_STOP);
 4051|      0|      return result;
 4052|      0|    }
 4053|       |
 4054|     28|    state(data, FTP_QUIT);
 4055|       |
 4056|     28|    result = ftp_block_statemach(data, conn);
 4057|     28|  }
 4058|       |
 4059|    526|  return result;
 4060|    526|}
ftp.c:ftp_block_statemach:
 3123|     28|{
 3124|     28|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3125|     28|  struct pingpong *pp = &ftpc->pp;
 3126|     28|  CURLcode result = CURLE_OK;
 3127|       |
 3128|     51|  while(ftpc->state != FTP_STOP) {
 3129|     44|    result = Curl_pp_statemach(data, pp, TRUE, TRUE /* disconnecting */);
 3130|     44|    if(result)
 3131|     21|      break;
 3132|     44|  }
 3133|       |
 3134|     28|  return result;
 3135|     28|}
ftp.c:ftp_doing:
 4289|    250|{
 4290|    250|  CURLcode result = ftp_multi_statemach(data, dophase_done);
 4291|       |
 4292|    250|  if(result)
 4293|     65|    DEBUGF(infof(data, "DO phase failed"));
 4294|    185|  else if(*dophase_done) {
 4295|      2|    result = ftp_dophase_done(data, FALSE /* not connected */);
 4296|       |
 4297|      2|    DEBUGF(infof(data, "DO phase is complete2"));
 4298|      2|  }
 4299|    250|  return result;
 4300|    250|}
ftp.c:ftp_setup_connection:
 4354|    524|{
 4355|    524|  char *type;
 4356|    524|  struct FTP *ftp;
 4357|       |
 4358|    524|  data->req.p.ftp = ftp = calloc(sizeof(struct FTP), 1);
 4359|    524|  if(NULL == ftp)
 4360|      0|    return CURLE_OUT_OF_MEMORY;
 4361|       |
 4362|    524|  ftp->path = &data->state.up.path[1]; /* don't include the initial slash */
 4363|       |
 4364|       |  /* FTP URLs support an extension like ";type=<typecode>" that
 4365|       |   * we'll try to get now! */
 4366|    524|  type = strstr(ftp->path, ";type=");
 4367|       |
 4368|    524|  if(!type)
 4369|    502|    type = strstr(conn->host.rawalloc, ";type=");
 4370|       |
 4371|    524|  if(type) {
 4372|     42|    char command;
 4373|     42|    *type = 0;                     /* it was in the middle of the hostname */
 4374|     42|    command = Curl_raw_toupper(type[6]);
 4375|       |
 4376|     42|    switch(command) {
 4377|      1|    case 'A': /* ASCII mode */
 4378|      1|      data->state.prefer_ascii = TRUE;
 4379|      1|      break;
 4380|       |
 4381|      1|    case 'D': /* directory mode */
 4382|      1|      data->state.list_only = TRUE;
 4383|      1|      break;
 4384|       |
 4385|      0|    case 'I': /* binary mode */
 4386|     40|    default:
 4387|       |      /* switch off ASCII */
 4388|     40|      data->state.prefer_ascii = FALSE;
 4389|     40|      break;
 4390|     42|    }
 4391|     42|  }
 4392|       |
 4393|       |  /* get some initial data into the ftp struct */
 4394|    524|  ftp->transfer = PPTRANSFER_BODY;
 4395|    524|  ftp->downloadsize = 0;
 4396|    524|  conn->proto.ftpc.known_filesize = -1; /* unknown size for now */
 4397|       |
 4398|    524|  return CURLE_OK;
 4399|    524|}

Curl_ftp_parselist_data_alloc:
  183|      3|{
  184|      3|  return calloc(1, sizeof(struct ftp_parselist_data));
  185|      3|}
Curl_ftp_parselist_data_free:
  189|      3|{
  190|      3|  struct ftp_parselist_data *parser = *parserp;
  191|      3|  if(parser)
  192|      3|    Curl_fileinfo_cleanup(parser->file_data);
  193|      3|  free(parser);
  194|      3|  *parserp = NULL;
  195|      3|}

curl_getenv:
   75|  3.14k|{
   76|  3.14k|  return GetEnv(v);
   77|  3.14k|}
getenv.c:GetEnv:
   31|  3.14k|{
   32|       |#if defined(_WIN32_WCE) || defined(CURL_WINDOWS_APP)
   33|       |  (void)variable;
   34|       |  return NULL;
   35|       |#elif defined(WIN32)
   36|       |  /* This uses Windows API instead of C runtime getenv() to get the environment
   37|       |     variable since some changes aren't always visible to the latter. #4774 */
   38|       |  char *buf = NULL;
   39|       |  char *tmp;
   40|       |  DWORD bufsize;
   41|       |  DWORD rc = 1;
   42|       |  const DWORD max = 32768; /* max env var size from MSCRT source */
   43|       |
   44|       |  for(;;) {
   45|       |    tmp = realloc(buf, rc);
   46|       |    if(!tmp) {
   47|       |      free(buf);
   48|       |      return NULL;
   49|       |    }
   50|       |
   51|       |    buf = tmp;
   52|       |    bufsize = rc;
   53|       |
   54|       |    /* It's possible for rc to be 0 if the variable was found but empty.
   55|       |       Since getenv doesn't make that distinction we ignore it as well. */
   56|       |    rc = GetEnvironmentVariableA(variable, buf, bufsize);
   57|       |    if(!rc || rc == bufsize || rc > max) {
   58|       |      free(buf);
   59|       |      return NULL;
   60|       |    }
   61|       |
   62|       |    /* if rc < bufsize then rc is bytes written not including null */
   63|       |    if(rc < bufsize)
   64|       |      return buf;
   65|       |
   66|       |    /* else rc is bytes needed, try again */
   67|       |  }
   68|       |#else
   69|  3.14k|  char *env = getenv(variable);
   70|  3.14k|  return (env && env[0])?strdup(env):NULL;
   71|  3.14k|#endif
   72|  3.14k|}

Curl_initinfo:
   46|  2.35k|{
   47|  2.35k|  struct Progress *pro = &data->progress;
   48|  2.35k|  struct PureInfo *info = &data->info;
   49|       |
   50|  2.35k|  pro->t_nslookup = 0;
   51|  2.35k|  pro->t_connect = 0;
   52|  2.35k|  pro->t_appconnect = 0;
   53|  2.35k|  pro->t_pretransfer = 0;
   54|  2.35k|  pro->t_starttransfer = 0;
   55|  2.35k|  pro->timespent = 0;
   56|  2.35k|  pro->t_redirect = 0;
   57|  2.35k|  pro->is_t_startransfer_set = false;
   58|       |
   59|  2.35k|  info->httpcode = 0;
   60|  2.35k|  info->httpproxycode = 0;
   61|  2.35k|  info->httpversion = 0;
   62|  2.35k|  info->filetime = -1; /* -1 is an illegal time and thus means unknown */
   63|  2.35k|  info->timecond = FALSE;
   64|       |
   65|  2.35k|  info->header_size = 0;
   66|  2.35k|  info->request_size = 0;
   67|  2.35k|  info->proxyauthavail = 0;
   68|  2.35k|  info->httpauthavail = 0;
   69|  2.35k|  info->numconnects = 0;
   70|       |
   71|  2.35k|  free(info->contenttype);
   72|  2.35k|  info->contenttype = NULL;
   73|       |
   74|  2.35k|  free(info->wouldredirect);
   75|  2.35k|  info->wouldredirect = NULL;
   76|       |
   77|  2.35k|  info->conn_primary_ip[0] = '\0';
   78|  2.35k|  info->conn_local_ip[0] = '\0';
   79|  2.35k|  info->conn_primary_port = 0;
   80|  2.35k|  info->conn_local_port = 0;
   81|  2.35k|  info->retry_after = 0;
   82|       |
   83|  2.35k|  info->conn_scheme = 0;
   84|  2.35k|  info->conn_protocol = 0;
   85|       |
   86|  2.35k|#ifdef USE_SSL
   87|  2.35k|  Curl_ssl_free_certinfo(data);
   88|  2.35k|#endif
   89|  2.35k|  return CURLE_OK;
   90|  2.35k|}

Curl_hash_init:
   62|  2.34k|{
   63|  2.34k|  if(!slots || !hfunc || !comparator ||!dtor) {
   64|      0|    return 1; /* failure */
   65|      0|  }
   66|       |
   67|  2.34k|  h->hash_func = hfunc;
   68|  2.34k|  h->comp_func = comparator;
   69|  2.34k|  h->dtor = dtor;
   70|  2.34k|  h->size = 0;
   71|  2.34k|  h->slots = slots;
   72|       |
   73|  2.34k|  h->table = malloc(slots * sizeof(struct Curl_llist));
   74|  2.34k|  if(h->table) {
   75|  2.34k|    int i;
   76|   797k|    for(i = 0; i < slots; ++i)
   77|   794k|      Curl_llist_init(&h->table[i], (Curl_llist_dtor) hash_element_dtor);
   78|  2.34k|    return 0; /* fine */
   79|  2.34k|  }
   80|      0|  h->slots = 0;
   81|      0|  return 1; /* failure */
   82|  2.34k|}
Curl_hash_add:
  110|  1.04k|{
  111|  1.04k|  struct Curl_hash_element  *he;
  112|  1.04k|  struct Curl_llist_element *le;
  113|  1.04k|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  114|       |
  115|  1.04k|  for(le = l->head; le; le = le->next) {
  116|      0|    he = (struct Curl_hash_element *) le->ptr;
  117|      0|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  118|      0|      Curl_llist_remove(l, le, (void *)h);
  119|      0|      --h->size;
  120|      0|      break;
  121|      0|    }
  122|      0|  }
  123|       |
  124|  1.04k|  he = mk_hash_element(key, key_len, p);
  125|  1.04k|  if(he) {
  126|  1.04k|    Curl_llist_insert_next(l, l->tail, he, &he->list);
  127|  1.04k|    ++h->size;
  128|  1.04k|    return p; /* return the new entry */
  129|  1.04k|  }
  130|       |
  131|      0|  return NULL; /* failure */
  132|  1.04k|}
Curl_hash_delete:
  140|    524|{
  141|    524|  struct Curl_llist_element *le;
  142|    524|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  143|       |
  144|    524|  for(le = l->head; le; le = le->next) {
  145|    524|    struct Curl_hash_element *he = le->ptr;
  146|    524|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  147|    524|      Curl_llist_remove(l, le, (void *) h);
  148|    524|      --h->size;
  149|    524|      return 0;
  150|    524|    }
  151|    524|  }
  152|      0|  return 1;
  153|    524|}
Curl_hash_pick:
  161|  2.59k|{
  162|  2.59k|  struct Curl_llist_element *le;
  163|  2.59k|  struct Curl_llist *l;
  164|       |
  165|  2.59k|  if(h) {
  166|  2.59k|    l = FETCH_LIST(h, key, key_len);
  167|  2.59k|    for(le = l->head; le; le = le->next) {
  168|      1|      struct Curl_hash_element *he = le->ptr;
  169|      1|      if(h->comp_func(he->key, he->key_len, key, key_len)) {
  170|      0|        return he->ptr;
  171|      0|      }
  172|      1|    }
  173|  2.59k|  }
  174|       |
  175|  2.59k|  return NULL;
  176|  2.59k|}
Curl_hash_destroy:
  206|  2.34k|{
  207|  2.34k|  int i;
  208|       |
  209|   797k|  for(i = 0; i < h->slots; ++i) {
  210|   794k|    Curl_llist_destroy(&h->table[i], (void *) h);
  211|   794k|  }
  212|       |
  213|  2.34k|  Curl_safefree(h->table);
  214|  2.34k|  h->size = 0;
  215|  2.34k|  h->slots = 0;
  216|  2.34k|}
Curl_hash_clean:
  224|    783|{
  225|    783|  Curl_hash_clean_with_criterium(h, NULL, NULL);
  226|    783|}
Curl_hash_clean_with_criterium:
  232|  1.30k|{
  233|  1.30k|  struct Curl_llist_element *le;
  234|  1.30k|  struct Curl_llist_element *lnext;
  235|  1.30k|  struct Curl_llist *list;
  236|  1.30k|  int i;
  237|       |
  238|  1.30k|  if(!h)
  239|    783|    return;
  240|       |
  241|  4.19k|  for(i = 0; i < h->slots; ++i) {
  242|  3.66k|    list = &h->table[i];
  243|  3.66k|    le = list->head; /* get first list entry */
  244|  4.19k|    while(le) {
  245|    524|      struct Curl_hash_element *he = le->ptr;
  246|    524|      lnext = le->next;
  247|       |      /* ask the callback function if we shall remove this entry or not */
  248|    524|      if(!comp || comp(user, he->ptr)) {
  249|      0|        Curl_llist_remove(list, le, (void *) h);
  250|      0|        --h->size; /* one less entry in the hash now */
  251|      0|      }
  252|    524|      le = lnext;
  253|    524|    }
  254|  3.66k|  }
  255|    524|}
Curl_hash_str:
  258|  3.67k|{
  259|  3.67k|  const char *key_str = (const char *) key;
  260|  3.67k|  const char *end = key_str + key_length;
  261|  3.67k|  size_t h = 5381;
  262|       |
  263|  55.6k|  while(key_str < end) {
  264|  52.0k|    h += h << 5;
  265|  52.0k|    h ^= *key_str++;
  266|  52.0k|  }
  267|       |
  268|  3.67k|  return (h % slots_num);
  269|  3.67k|}
Curl_str_key_compare:
  273|    525|{
  274|    525|  if((key1_len == key2_len) && !memcmp(k1, k2, key1_len))
  275|    524|    return 1;
  276|       |
  277|      1|  return 0;
  278|    525|}
Curl_hash_start_iterate:
  282|  1.88k|{
  283|  1.88k|  iter->hash = hash;
  284|  1.88k|  iter->slot_index = 0;
  285|  1.88k|  iter->current_element = NULL;
  286|  1.88k|}
Curl_hash_next_element:
  290|  1.91k|{
  291|  1.91k|  struct Curl_hash *h = iter->hash;
  292|       |
  293|       |  /* Get the next element in the current list, if any */
  294|  1.91k|  if(iter->current_element)
  295|     28|    iter->current_element = iter->current_element->next;
  296|       |
  297|       |  /* If we have reached the end of the list, find the next one */
  298|  1.91k|  if(!iter->current_element) {
  299|  1.91k|    int i;
  300|   150k|    for(i = iter->slot_index; i < h->slots; i++) {
  301|   148k|      if(h->table[i].head) {
  302|    580|        iter->current_element = h->table[i].head;
  303|    580|        iter->slot_index = i + 1;
  304|    580|        break;
  305|    580|      }
  306|   148k|    }
  307|  1.91k|  }
  308|       |
  309|  1.91k|  if(iter->current_element) {
  310|    580|    struct Curl_hash_element *he = iter->current_element->ptr;
  311|    580|    return he;
  312|    580|  }
  313|  1.33k|  iter->current_element = NULL;
  314|  1.33k|  return NULL;
  315|  1.91k|}
hash.c:hash_element_dtor:
   36|  1.04k|{
   37|  1.04k|  struct Curl_hash *h = (struct Curl_hash *) user;
   38|  1.04k|  struct Curl_hash_element *e = (struct Curl_hash_element *) element;
   39|       |
   40|  1.04k|  if(e->ptr) {
   41|  1.04k|    h->dtor(e->ptr);
   42|  1.04k|    e->ptr = NULL;
   43|  1.04k|  }
   44|       |
   45|  1.04k|  e->key_len = 0;
   46|       |
   47|  1.04k|  free(e);
   48|  1.04k|}
hash.c:mk_hash_element:
   86|  1.04k|{
   87|       |  /* allocate the struct plus memory after it to store the key */
   88|  1.04k|  struct Curl_hash_element *he = malloc(sizeof(struct Curl_hash_element) +
   89|  1.04k|                                        key_len);
   90|  1.04k|  if(he) {
   91|       |    /* copy the key */
   92|  1.04k|    memcpy(he->key, key, key_len);
   93|  1.04k|    he->key_len = key_len;
   94|  1.04k|    he->ptr = (void *) p;
   95|  1.04k|  }
   96|  1.04k|  return he;
   97|  1.04k|}

Curl_addrinfo_callback:
   71|      3|{
   72|      3|  struct Curl_dns_entry *dns = NULL;
   73|      3|  CURLcode result = CURLE_OK;
   74|       |
   75|      3|  data->state.async.status = status;
   76|       |
   77|      3|  if(CURL_ASYNC_SUCCESS == status) {
   78|      0|    if(ai) {
   79|      0|      if(data->share)
   80|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
   81|       |
   82|      0|      dns = Curl_cache_addr(data, ai,
   83|      0|                            data->state.async.hostname,
   84|      0|                            data->state.async.port);
   85|      0|      if(data->share)
   86|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
   87|       |
   88|      0|      if(!dns) {
   89|       |        /* failed to store, cleanup and return error */
   90|      0|        Curl_freeaddrinfo(ai);
   91|      0|        result = CURLE_OUT_OF_MEMORY;
   92|      0|      }
   93|      0|    }
   94|      0|    else {
   95|      0|      result = CURLE_OUT_OF_MEMORY;
   96|      0|    }
   97|      0|  }
   98|       |
   99|      3|  data->state.async.dns = dns;
  100|       |
  101|       | /* Set async.done TRUE last in this function since it may be used multi-
  102|       |    threaded and once this is TRUE the other thread may read fields from the
  103|       |    async struct */
  104|      3|  data->state.async.done = TRUE;
  105|       |
  106|       |  /* IPv4: The input hostent struct will be freed by ares when we return from
  107|       |     this function */
  108|      3|  return result;
  109|      3|}
Curl_getaddrinfo:
  121|      3|{
  122|      3|  return Curl_resolver_getaddrinfo(data, hostname, port, waitp);
  123|      3|}

Curl_num_addresses:
  128|    524|{
  129|    524|  int i = 0;
  130|  1.04k|  while(addr) {
  131|    524|    addr = addr->ai_next;
  132|    524|    i++;
  133|    524|  }
  134|    524|  return i;
  135|    524|}
Curl_hostcache_prune:
  230|    524|{
  231|    524|  time_t now;
  232|       |
  233|    524|  if((data->set.dns_cache_timeout == -1) || !data->dns.hostcache)
  234|       |    /* cache forever means never prune, and NULL hostcache means
  235|       |       we can't do it */
  236|      0|    return;
  237|       |
  238|    524|  if(data->share)
  239|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  240|       |
  241|    524|  time(&now);
  242|       |
  243|       |  /* Remove outdated and unused entries from the hostcache */
  244|    524|  hostcache_prune(data->dns.hostcache,
  245|    524|                  data->set.dns_cache_timeout,
  246|    524|                  now);
  247|       |
  248|    524|  if(data->share)
  249|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  250|    524|}
Curl_cache_addr:
  419|    524|{
  420|    524|  char entry_id[MAX_HOSTCACHE_LEN];
  421|    524|  size_t entry_len;
  422|    524|  struct Curl_dns_entry *dns;
  423|    524|  struct Curl_dns_entry *dns2;
  424|       |
  425|    524|#ifndef CURL_DISABLE_SHUFFLE_DNS
  426|       |  /* shuffle addresses if requested */
  427|    524|  if(data->set.dns_shuffle_addresses) {
  428|      0|    CURLcode result = Curl_shuffle_addr(data, &addr);
  429|      0|    if(result)
  430|      0|      return NULL;
  431|      0|  }
  432|    524|#endif
  433|       |
  434|       |  /* Create a new cache entry */
  435|    524|  dns = calloc(1, sizeof(struct Curl_dns_entry));
  436|    524|  if(!dns) {
  437|      0|    return NULL;
  438|      0|  }
  439|       |
  440|       |  /* Create an entry id, based upon the hostname and port */
  441|    524|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  442|    524|  entry_len = strlen(entry_id);
  443|       |
  444|    524|  dns->inuse = 1;   /* the cache has the first reference */
  445|    524|  dns->addr = addr; /* this is the address(es) */
  446|    524|  time(&dns->timestamp);
  447|    524|  if(dns->timestamp == 0)
  448|      0|    dns->timestamp = 1;   /* zero indicates permanent CURLOPT_RESOLVE entry */
  449|       |
  450|       |  /* Store the resolved data in our DNS cache. */
  451|    524|  dns2 = Curl_hash_add(data->dns.hostcache, entry_id, entry_len + 1,
  452|    524|                       (void *)dns);
  453|    524|  if(!dns2) {
  454|      0|    free(dns);
  455|      0|    return NULL;
  456|      0|  }
  457|       |
  458|    524|  dns = dns2;
  459|    524|  dns->inuse++;         /* mark entry as in-use */
  460|    524|  return dns;
  461|    524|}
Curl_ipv6works:
  540|    786|{
  541|    786|  if(data) {
  542|       |    /* the nature of most system is that IPv6 status doesn't come and go
  543|       |       during a program's lifetime so we only probe the first time and then we
  544|       |       have the info kept for fast re-use */
  545|      3|    DEBUGASSERT(data);
  546|      3|    DEBUGASSERT(data->multi);
  547|      3|    return data->multi->ipv6_works;
  548|      3|  }
  549|    783|  else {
  550|    783|    int ipv6_works = -1;
  551|       |    /* probe to see if we have a working IPv6 stack */
  552|    783|    curl_socket_t s = socket(PF_INET6, SOCK_DGRAM, 0);
  553|    783|    if(s == CURL_SOCKET_BAD)
  554|       |      /* an IPv6 address was requested but we can't get/use one */
  555|      0|      ipv6_works = 0;
  556|    783|    else {
  557|    783|      ipv6_works = 1;
  558|    783|      sclose(s);
  559|    783|    }
  560|    783|    return (ipv6_works>0)?TRUE:FALSE;
  561|    783|  }
  562|    786|}
Curl_resolv:
  606|    527|{
  607|    527|  struct Curl_dns_entry *dns = NULL;
  608|    527|  CURLcode result;
  609|    527|  enum resolve_t rc = CURLRESOLV_ERROR; /* default to failure */
  610|    527|  struct connectdata *conn = data->conn;
  611|    527|  *entry = NULL;
  612|    527|  conn->bits.doh = FALSE; /* default is not */
  613|       |
  614|    527|  if(data->share)
  615|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  616|       |
  617|    527|  dns = fetch_addr(data, hostname, port);
  618|       |
  619|    527|  if(dns) {
  620|      0|    infof(data, "Hostname %s was found in DNS cache", hostname);
  621|      0|    dns->inuse++; /* we use it! */
  622|      0|    rc = CURLRESOLV_RESOLVED;
  623|      0|  }
  624|       |
  625|    527|  if(data->share)
  626|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  627|       |
  628|    527|  if(!dns) {
  629|       |    /* The entry was not in the cache. Resolve it to IP address */
  630|       |
  631|    527|    struct Curl_addrinfo *addr = NULL;
  632|    527|    int respwait = 0;
  633|    527|    struct in_addr in;
  634|    527|#ifndef USE_RESOLVE_ON_IPS
  635|    527|    const
  636|    527|#endif
  637|    527|      bool ipnum = FALSE;
  638|       |
  639|       |    /* notify the resolver start callback */
  640|    527|    if(data->set.resolver_start) {
  641|      0|      int st;
  642|      0|      Curl_set_in_callback(data, true);
  643|      0|      st = data->set.resolver_start(
  644|      0|#ifdef USE_CURL_ASYNC
  645|      0|        data->state.async.resolver,
  646|       |#else
  647|       |        NULL,
  648|       |#endif
  649|      0|        NULL,
  650|      0|        data->set.resolver_start_client);
  651|      0|      Curl_set_in_callback(data, false);
  652|      0|      if(st)
  653|      0|        return CURLRESOLV_ERROR;
  654|      0|    }
  655|       |
  656|       |#if defined(ENABLE_IPV6) && defined(CURL_OSX_CALL_COPYPROXIES)
  657|       |    {
  658|       |      /*
  659|       |       * The automagic conversion from IPv4 literals to IPv6 literals only
  660|       |       * works if the SCDynamicStoreCopyProxies system function gets called
  661|       |       * first. As Curl currently doesn't support system-wide HTTP proxies, we
  662|       |       * therefore don't use any value this function might return.
  663|       |       *
  664|       |       * This function is only available on a macOS and is not needed for
  665|       |       * IPv4-only builds, hence the conditions above.
  666|       |       */
  667|       |      CFDictionaryRef dict = SCDynamicStoreCopyProxies(NULL);
  668|       |      if(dict)
  669|       |        CFRelease(dict);
  670|       |    }
  671|       |#endif
  672|       |
  673|    527|#ifndef USE_RESOLVE_ON_IPS
  674|       |    /* First check if this is an IPv4 address string */
  675|    527|    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  676|       |      /* This is a dotted IP address 123.123.123.123-style */
  677|    524|      addr = Curl_ip2addr(AF_INET, &in, hostname, port);
  678|    527|#ifdef ENABLE_IPV6
  679|    527|    if(!addr) {
  680|      3|      struct in6_addr in6;
  681|       |      /* check if this is an IPv6 address string */
  682|      3|      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  683|       |        /* This is an IPv6 address literal */
  684|      0|        addr = Curl_ip2addr(AF_INET6, &in6, hostname, port);
  685|      3|    }
  686|    527|#endif /* ENABLE_IPV6 */
  687|       |
  688|       |#else /* if USE_RESOLVE_ON_IPS */
  689|       |    /* First check if this is an IPv4 address string */
  690|       |    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  691|       |      /* This is a dotted IP address 123.123.123.123-style */
  692|       |      ipnum = TRUE;
  693|       |#ifdef ENABLE_IPV6
  694|       |    else {
  695|       |      struct in6_addr in6;
  696|       |      /* check if this is an IPv6 address string */
  697|       |      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  698|       |        /* This is an IPv6 address literal */
  699|       |        ipnum = TRUE;
  700|       |    }
  701|       |#endif /* ENABLE_IPV6 */
  702|       |
  703|       |#endif /* !USE_RESOLVE_ON_IPS */
  704|       |
  705|    527|    if(!addr) {
  706|      3|      if(conn->ip_version == CURL_IPRESOLVE_V6 && !Curl_ipv6works(data))
  707|      0|        return CURLRESOLV_ERROR;
  708|       |
  709|      3|      if(strcasecompare(hostname, "localhost"))
  710|      0|        addr = get_localhost(port);
  711|      3|      else if(allowDOH && data->set.doh && !ipnum)
  712|      0|        addr = Curl_doh(data, hostname, port, &respwait);
  713|      3|      else {
  714|       |        /* Check what IP specifics the app has requested and if we can provide
  715|       |         * it. If not, bail out. */
  716|      3|        if(!Curl_ipvalid(data, conn))
  717|      0|          return CURLRESOLV_ERROR;
  718|       |        /* If Curl_getaddrinfo() returns NULL, 'respwait' might be set to a
  719|       |           non-zero value indicating that we need to wait for the response to
  720|       |           the resolve call */
  721|      3|        addr = Curl_getaddrinfo(data, hostname, port, &respwait);
  722|      3|      }
  723|      3|    }
  724|    527|    if(!addr) {
  725|      3|      if(respwait) {
  726|       |        /* the response to our resolve call will come asynchronously at
  727|       |           a later time, good or bad */
  728|       |        /* First, check that we haven't received the info by now */
  729|      3|        result = Curl_resolv_check(data, &dns);
  730|      3|        if(result) /* error detected */
  731|      0|          return CURLRESOLV_ERROR;
  732|      3|        if(dns)
  733|      0|          rc = CURLRESOLV_RESOLVED; /* pointer provided */
  734|      3|        else
  735|      3|          rc = CURLRESOLV_PENDING; /* no info yet */
  736|      3|      }
  737|      3|    }
  738|    524|    else {
  739|    524|      if(data->share)
  740|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  741|       |
  742|       |      /* we got a response, store it in the cache */
  743|    524|      dns = Curl_cache_addr(data, addr, hostname, port);
  744|       |
  745|    524|      if(data->share)
  746|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  747|       |
  748|    524|      if(!dns)
  749|       |        /* returned failure, bail out nicely */
  750|      0|        Curl_freeaddrinfo(addr);
  751|    524|      else
  752|    524|        rc = CURLRESOLV_RESOLVED;
  753|    524|    }
  754|    527|  }
  755|       |
  756|    527|  *entry = dns;
  757|       |
  758|    527|  return rc;
  759|    527|}
Curl_resolv_timeout:
  803|    524|{
  804|       |#ifdef USE_ALARM_TIMEOUT
  805|       |#ifdef HAVE_SIGACTION
  806|       |  struct sigaction keep_sigact;   /* store the old struct here */
  807|       |  volatile bool keep_copysig = FALSE; /* whether old sigact has been saved */
  808|       |  struct sigaction sigact;
  809|       |#else
  810|       |#ifdef HAVE_SIGNAL
  811|       |  void (*keep_sigact)(int);       /* store the old handler here */
  812|       |#endif /* HAVE_SIGNAL */
  813|       |#endif /* HAVE_SIGACTION */
  814|       |  volatile long timeout;
  815|       |  volatile unsigned int prev_alarm = 0;
  816|       |#endif /* USE_ALARM_TIMEOUT */
  817|    524|  enum resolve_t rc;
  818|       |
  819|    524|  *entry = NULL;
  820|       |
  821|    524|  if(timeoutms < 0)
  822|       |    /* got an already expired timeout */
  823|      0|    return CURLRESOLV_TIMEDOUT;
  824|       |
  825|       |#ifdef USE_ALARM_TIMEOUT
  826|       |  if(data->set.no_signal)
  827|       |    /* Ignore the timeout when signals are disabled */
  828|       |    timeout = 0;
  829|       |  else
  830|       |    timeout = (timeoutms > LONG_MAX) ? LONG_MAX : (long)timeoutms;
  831|       |
  832|       |  if(!timeout)
  833|       |    /* USE_ALARM_TIMEOUT defined, but no timeout actually requested */
  834|       |    return Curl_resolv(data, hostname, port, TRUE, entry);
  835|       |
  836|       |  if(timeout < 1000) {
  837|       |    /* The alarm() function only provides integer second resolution, so if
  838|       |       we want to wait less than one second we must bail out already now. */
  839|       |    failf(data,
  840|       |        "remaining timeout of %ld too small to resolve via SIGALRM method",
  841|       |        timeout);
  842|       |    return CURLRESOLV_TIMEDOUT;
  843|       |  }
  844|       |  /* This allows us to time-out from the name resolver, as the timeout
  845|       |     will generate a signal and we will siglongjmp() from that here.
  846|       |     This technique has problems (see alarmfunc).
  847|       |     This should be the last thing we do before calling Curl_resolv(),
  848|       |     as otherwise we'd have to worry about variables that get modified
  849|       |     before we invoke Curl_resolv() (and thus use "volatile"). */
  850|       |  if(sigsetjmp(curl_jmpenv, 1)) {
  851|       |    /* this is coming from a siglongjmp() after an alarm signal */
  852|       |    failf(data, "name lookup timed out");
  853|       |    rc = CURLRESOLV_ERROR;
  854|       |    goto clean_up;
  855|       |  }
  856|       |  else {
  857|       |    /*************************************************************
  858|       |     * Set signal handler to catch SIGALRM
  859|       |     * Store the old value to be able to set it back later!
  860|       |     *************************************************************/
  861|       |#ifdef HAVE_SIGACTION
  862|       |    sigaction(SIGALRM, NULL, &sigact);
  863|       |    keep_sigact = sigact;
  864|       |    keep_copysig = TRUE; /* yes, we have a copy */
  865|       |    sigact.sa_handler = alarmfunc;
  866|       |#ifdef SA_RESTART
  867|       |    /* HPUX doesn't have SA_RESTART but defaults to that behavior! */
  868|       |    sigact.sa_flags &= ~SA_RESTART;
  869|       |#endif
  870|       |    /* now set the new struct */
  871|       |    sigaction(SIGALRM, &sigact, NULL);
  872|       |#else /* HAVE_SIGACTION */
  873|       |    /* no sigaction(), revert to the much lamer signal() */
  874|       |#ifdef HAVE_SIGNAL
  875|       |    keep_sigact = signal(SIGALRM, alarmfunc);
  876|       |#endif
  877|       |#endif /* HAVE_SIGACTION */
  878|       |
  879|       |    /* alarm() makes a signal get sent when the timeout fires off, and that
  880|       |       will abort system calls */
  881|       |    prev_alarm = alarm(curlx_sltoui(timeout/1000L));
  882|       |  }
  883|       |
  884|       |#else
  885|       |#ifndef CURLRES_ASYNCH
  886|       |  if(timeoutms)
  887|       |    infof(data, "timeout on name lookup is not supported");
  888|       |#else
  889|    524|  (void)timeoutms; /* timeoutms not used with an async resolver */
  890|    524|#endif
  891|    524|#endif /* USE_ALARM_TIMEOUT */
  892|       |
  893|       |  /* Perform the actual name resolution. This might be interrupted by an
  894|       |   * alarm if it takes too long.
  895|       |   */
  896|    524|  rc = Curl_resolv(data, hostname, port, TRUE, entry);
  897|       |
  898|       |#ifdef USE_ALARM_TIMEOUT
  899|       |clean_up:
  900|       |
  901|       |  if(!prev_alarm)
  902|       |    /* deactivate a possibly active alarm before uninstalling the handler */
  903|       |    alarm(0);
  904|       |
  905|       |#ifdef HAVE_SIGACTION
  906|       |  if(keep_copysig) {
  907|       |    /* we got a struct as it looked before, now put that one back nice
  908|       |       and clean */
  909|       |    sigaction(SIGALRM, &keep_sigact, NULL); /* put it back */
  910|       |  }
  911|       |#else
  912|       |#ifdef HAVE_SIGNAL
  913|       |  /* restore the previous SIGALRM handler */
  914|       |  signal(SIGALRM, keep_sigact);
  915|       |#endif
  916|       |#endif /* HAVE_SIGACTION */
  917|       |
  918|       |  /* switch back the alarm() to either zero or to what it was before minus
  919|       |     the time we spent until now! */
  920|       |  if(prev_alarm) {
  921|       |    /* there was an alarm() set before us, now put it back */
  922|       |    timediff_t elapsed_secs = Curl_timediff(Curl_now(),
  923|       |                                            data->conn->created) / 1000;
  924|       |
  925|       |    /* the alarm period is counted in even number of seconds */
  926|       |    unsigned long alarm_set = (unsigned long)(prev_alarm - elapsed_secs);
  927|       |
  928|       |    if(!alarm_set ||
  929|       |       ((alarm_set >= 0x80000000) && (prev_alarm < 0x80000000)) ) {
  930|       |      /* if the alarm time-left reached zero or turned "negative" (counted
  931|       |         with unsigned values), we should fire off a SIGALRM here, but we
  932|       |         won't, and zero would be to switch it off so we never set it to
  933|       |         less than 1! */
  934|       |      alarm(1);
  935|       |      rc = CURLRESOLV_TIMEDOUT;
  936|       |      failf(data, "Previous alarm fired off!");
  937|       |    }
  938|       |    else
  939|       |      alarm((unsigned int)alarm_set);
  940|       |  }
  941|       |#endif /* USE_ALARM_TIMEOUT */
  942|       |
  943|    524|  return rc;
  944|    524|}
Curl_resolv_unlock:
  954|    524|{
  955|    524|  if(data && data->share)
  956|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  957|       |
  958|    524|  freednsentry(dns);
  959|       |
  960|    524|  if(data && data->share)
  961|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  962|    524|}
Curl_mk_dnscache:
  983|    783|{
  984|    783|  return Curl_hash_init(hash, 7, Curl_hash_str, Curl_str_key_compare,
  985|    783|                        freednsentry);
  986|    783|}
Curl_hostcache_clean:
  997|    783|{
  998|    783|  if(data && data->share)
  999|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 1000|       |
 1001|    783|  Curl_hash_clean(hash);
 1002|       |
 1003|    783|  if(data && data->share)
 1004|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 1005|    783|}
Curl_resolv_check:
 1209|      3|{
 1210|       |#if defined(CURL_DISABLE_DOH) && !defined(CURLRES_ASYNCH)
 1211|       |  (void)dns;
 1212|       |#endif
 1213|       |
 1214|      3|  if(data->conn->bits.doh)
 1215|      0|    return Curl_doh_is_resolved(data, dns);
 1216|      3|  return Curl_resolver_is_resolved(data, dns);
 1217|      3|}
Curl_resolver_error:
 1269|      3|{
 1270|      3|  const char *host_or_proxy;
 1271|      3|  CURLcode result;
 1272|       |
 1273|      3|#ifndef CURL_DISABLE_PROXY
 1274|      3|  struct connectdata *conn = data->conn;
 1275|      3|  if(conn->bits.httpproxy) {
 1276|      0|    host_or_proxy = "proxy";
 1277|      0|    result = CURLE_COULDNT_RESOLVE_PROXY;
 1278|      0|  }
 1279|      3|  else
 1280|      3|#endif
 1281|      3|  {
 1282|      3|    host_or_proxy = "host";
 1283|      3|    result = CURLE_COULDNT_RESOLVE_HOST;
 1284|      3|  }
 1285|       |
 1286|      3|  failf(data, "Could not resolve %s: %s", host_or_proxy,
 1287|      3|        data->state.async.hostname);
 1288|       |
 1289|      3|  return result;
 1290|      3|}
hostip.c:hostcache_prune:
  214|    524|{
  215|    524|  struct hostcache_prune_data user;
  216|       |
  217|    524|  user.cache_timeout = cache_timeout;
  218|    524|  user.now = now;
  219|       |
  220|    524|  Curl_hash_clean_with_criterium(hostcache,
  221|    524|                                 (void *) &user,
  222|    524|                                 hostcache_timestamp_remove);
  223|    524|}
hostip.c:hostcache_timestamp_remove:
  200|    524|{
  201|    524|  struct hostcache_prune_data *data =
  202|    524|    (struct hostcache_prune_data *) datap;
  203|    524|  struct Curl_dns_entry *c = (struct Curl_dns_entry *) hc;
  204|       |
  205|    524|  return (0 != c->timestamp)
  206|    524|    && (data->now - c->timestamp >= data->cache_timeout);
  207|    524|}
hostip.c:fetch_addr:
  263|    527|{
  264|    527|  struct Curl_dns_entry *dns = NULL;
  265|    527|  size_t entry_len;
  266|    527|  char entry_id[MAX_HOSTCACHE_LEN];
  267|       |
  268|       |  /* Create an entry id, based upon the hostname and port */
  269|    527|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  270|    527|  entry_len = strlen(entry_id);
  271|       |
  272|       |  /* See if its already in our dns cache */
  273|    527|  dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  274|       |
  275|       |  /* No entry found in cache, check if we might have a wildcard entry */
  276|    527|  if(!dns && data->state.wildcard_resolve) {
  277|      0|    create_hostcache_id("*", port, entry_id, sizeof(entry_id));
  278|      0|    entry_len = strlen(entry_id);
  279|       |
  280|       |    /* See if it's already in our dns cache */
  281|      0|    dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  282|      0|  }
  283|       |
  284|    527|  if(dns && (data->set.dns_cache_timeout != -1)) {
  285|       |    /* See whether the returned entry is stale. Done before we release lock */
  286|      0|    struct hostcache_prune_data user;
  287|       |
  288|      0|    time(&user.now);
  289|      0|    user.cache_timeout = data->set.dns_cache_timeout;
  290|       |
  291|      0|    if(hostcache_timestamp_remove(&user, dns)) {
  292|      0|      infof(data, "Hostname in DNS cache was stale, zapped");
  293|      0|      dns = NULL; /* the memory deallocation is being handled by the hash */
  294|      0|      Curl_hash_delete(data->dns.hostcache, entry_id, entry_len + 1);
  295|      0|    }
  296|      0|  }
  297|       |
  298|    527|  return dns;
  299|    527|}
hostip.c:create_hostcache_id:
  176|  1.05k|{
  177|  1.05k|  size_t len = strlen(name);
  178|  1.05k|  if(len > (buflen - 7))
  179|      0|    len = buflen - 7;
  180|       |  /* store and lower case the name */
  181|  12.5k|  while(len--)
  182|  11.5k|    *ptr++ = (char)TOLOWER(*name++);
  183|  1.05k|  msnprintf(ptr, 7, ":%u", port);
  184|  1.05k|}
hostip.c:freednsentry:
  968|  1.04k|{
  969|  1.04k|  struct Curl_dns_entry *dns = (struct Curl_dns_entry *) freethis;
  970|  1.04k|  DEBUGASSERT(dns && (dns->inuse>0));
  971|       |
  972|  1.04k|  dns->inuse--;
  973|  1.04k|  if(dns->inuse == 0) {
  974|    524|    Curl_freeaddrinfo(dns->addr);
  975|    524|    free(dns);
  976|    524|  }
  977|  1.04k|}

Curl_ipvalid:
   66|      3|{
   67|      3|  if(conn->ip_version == CURL_IPRESOLVE_V6)
   68|      0|    return Curl_ipv6works(data);
   69|       |
   70|      3|  return TRUE;
   71|      3|}

Curl_hsts_cleanup:
   90|  1.66k|{
   91|  1.66k|  struct hsts *h = *hp;
   92|  1.66k|  if(h) {
   93|      0|    struct Curl_llist_element *e;
   94|      0|    struct Curl_llist_element *n;
   95|      0|    for(e = h->list.head; e; e = n) {
   96|      0|      struct stsentry *sts = e->ptr;
   97|      0|      n = e->next;
   98|      0|      hsts_free(sts);
   99|      0|    }
  100|      0|    free(h->filename);
  101|      0|    free(h);
  102|      0|    *hp = NULL;
  103|      0|  }
  104|  1.66k|}
Curl_hsts_save:
  332|  1.66k|{
  333|  1.66k|  struct Curl_llist_element *e;
  334|  1.66k|  struct Curl_llist_element *n;
  335|  1.66k|  CURLcode result = CURLE_OK;
  336|  1.66k|  FILE *out;
  337|  1.66k|  char *tempstore;
  338|  1.66k|  unsigned char randsuffix[9];
  339|       |
  340|  1.66k|  if(!h)
  341|       |    /* no cache activated */
  342|  1.66k|    return CURLE_OK;
  343|       |
  344|       |  /* if no new name is given, use the one we stored from the load */
  345|      0|  if(!file && h->filename)
  346|      0|    file = h->filename;
  347|       |
  348|      0|  if((h->flags & CURLHSTS_READONLYFILE) || !file || !file[0])
  349|       |    /* marked as read-only, no file or zero length file name */
  350|      0|    goto skipsave;
  351|       |
  352|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  353|      0|    return CURLE_FAILED_INIT;
  354|       |
  355|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  356|      0|  if(!tempstore)
  357|      0|    return CURLE_OUT_OF_MEMORY;
  358|       |
  359|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  360|      0|  if(!out)
  361|      0|    result = CURLE_WRITE_ERROR;
  362|      0|  else {
  363|      0|    fputs("# Your HSTS cache. https://curl.se/docs/hsts.html\n"
  364|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  365|      0|          out);
  366|      0|    for(e = h->list.head; e; e = n) {
  367|      0|      struct stsentry *sts = e->ptr;
  368|      0|      n = e->next;
  369|      0|      result = hsts_out(sts, out);
  370|      0|      if(result)
  371|      0|        break;
  372|      0|    }
  373|      0|    fclose(out);
  374|      0|    if(!result && Curl_rename(tempstore, file))
  375|      0|      result = CURLE_WRITE_ERROR;
  376|       |
  377|      0|    if(result)
  378|      0|      unlink(tempstore);
  379|      0|  }
  380|      0|  free(tempstore);
  381|      0|  skipsave:
  382|      0|  if(data->set.hsts_write) {
  383|       |    /* if there's a write callback */
  384|      0|    struct curl_index i; /* count */
  385|      0|    i.total = h->list.size;
  386|      0|    i.index = 0;
  387|      0|    for(e = h->list.head; e; e = n) {
  388|      0|      struct stsentry *sts = e->ptr;
  389|      0|      bool stop;
  390|      0|      n = e->next;
  391|      0|      result = hsts_push(data, &i, sts, &stop);
  392|      0|      if(result || stop)
  393|      0|        break;
  394|      0|      i.index++;
  395|      0|    }
  396|      0|  }
  397|      0|  return result;
  398|      0|}
Curl_hsts_loadcb:
  538|    688|{
  539|    688|  if(h)
  540|      0|    return hsts_pull(data, h);
  541|    688|  return CURLE_OK;
  542|    688|}

Curl_http2_init_state:
   83|    688|{
   84|    688|  state->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   85|    688|}
Curl_http2_init_userset:
   92|  1.66k|{
   93|  1.66k|  set->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   94|  1.66k|}
Curl_http2_cleanup_dependencies:
 2482|  1.66k|{
 2483|  1.66k|  while(data->set.stream_dependents) {
 2484|      0|    struct Curl_easy *tmp = data->set.stream_dependents->data;
 2485|      0|    Curl_http2_remove_child(data, tmp);
 2486|      0|    if(data->set.stream_depends_on)
 2487|      0|      Curl_http2_add_child(data->set.stream_depends_on, tmp, FALSE);
 2488|      0|  }
 2489|       |
 2490|  1.66k|  if(data->set.stream_depends_on)
 2491|      0|    Curl_http2_remove_child(data->set.stream_depends_on, data);
 2492|  1.66k|}

Curl_http_auth_cleanup_digest:
  178|  1.66k|{
  179|  1.66k|  Curl_auth_digest_cleanup(&data->state.digest);
  180|  1.66k|  Curl_auth_digest_cleanup(&data->state.proxydigest);
  181|  1.66k|}

Curl_http_auth_cleanup_ntlm:
  266|    688|{
  267|    688|  Curl_auth_cleanup_ntlm(&conn->ntlm);
  268|    688|  Curl_auth_cleanup_ntlm(&conn->proxyntlm);
  269|       |
  270|    688|#if defined(NTLM_WB_ENABLED)
  271|    688|  Curl_http_auth_cleanup_ntlm_wb(conn);
  272|    688|#endif
  273|    688|}

Curl_proxy_connect:
   80|    524|{
   81|    524|  struct connectdata *conn = data->conn;
   82|    524|  if(conn->http_proxy.proxytype == CURLPROXY_HTTPS) {
   83|      0|    const CURLcode result = https_proxy_connect(data, sockindex);
   84|      0|    if(result)
   85|      0|      return result;
   86|      0|    if(!conn->bits.proxy_ssl_connected[sockindex])
   87|      0|      return result; /* wait for HTTPS proxy SSL initialization to complete */
   88|      0|  }
   89|       |
   90|    524|  if(conn->bits.tunnel_proxy && conn->bits.httpproxy) {
   91|      0|#ifndef CURL_DISABLE_PROXY
   92|       |    /* for [protocol] tunneled through HTTP proxy */
   93|      0|    const char *hostname;
   94|      0|    int remote_port;
   95|      0|    CURLcode result;
   96|       |
   97|       |    /* We want "seamless" operations through HTTP proxy tunnel */
   98|       |
   99|       |    /* for the secondary socket (FTP), use the "connect to host"
  100|       |     * but ignore the "connect to port" (use the secondary port)
  101|       |     */
  102|       |
  103|      0|    if(conn->bits.conn_to_host)
  104|      0|      hostname = conn->conn_to_host.name;
  105|      0|    else if(sockindex == SECONDARYSOCKET)
  106|      0|      hostname = conn->secondaryhostname;
  107|      0|    else
  108|      0|      hostname = conn->host.name;
  109|       |
  110|      0|    if(sockindex == SECONDARYSOCKET)
  111|      0|      remote_port = conn->secondary_port;
  112|      0|    else if(conn->bits.conn_to_port)
  113|      0|      remote_port = conn->conn_to_port;
  114|      0|    else
  115|      0|      remote_port = conn->remote_port;
  116|       |
  117|      0|    result = Curl_proxyCONNECT(data, sockindex, hostname, remote_port);
  118|      0|    if(CURLE_OK != result)
  119|      0|      return result;
  120|      0|    Curl_safefree(data->state.aptr.proxyuserpwd);
  121|       |#else
  122|       |    return CURLE_NOT_BUILT_IN;
  123|       |#endif
  124|      0|  }
  125|       |  /* no HTTP tunnel proxy, just return */
  126|    524|  return CURLE_OK;
  127|    524|}
Curl_connect_ongoing:
  136|  1.04k|{
  137|  1.04k|  return conn->connect_state &&
  138|  1.04k|    (conn->connect_state->tunnel_state <= TUNNEL_COMPLETE);
  139|  1.04k|}
Curl_connect_free:
 1021|     91|{
 1022|     91|  struct connectdata *conn = data->conn;
 1023|     91|  struct http_connect_state *s = conn->connect_state;
 1024|     91|  if(s) {
 1025|      0|    free(s);
 1026|      0|    conn->connect_state = NULL;
 1027|      0|  }
 1028|     91|}

Curl_ipv6_scope:
   65|    524|{
   66|       |#ifndef ENABLE_IPV6
   67|       |  (void) sa;
   68|       |#else
   69|    524|  if(sa->sa_family == AF_INET6) {
   70|      0|    const struct sockaddr_in6 * sa6 = (const struct sockaddr_in6 *)(void *) sa;
   71|      0|    const unsigned char *b = sa6->sin6_addr.s6_addr;
   72|      0|    unsigned short w = (unsigned short) ((b[0] << 8) | b[1]);
   73|       |
   74|      0|    if((b[0] & 0xFE) == 0xFC) /* Handle ULAs */
   75|      0|      return IPV6_SCOPE_UNIQUELOCAL;
   76|      0|    switch(w & 0xFFC0) {
   77|      0|    case 0xFE80:
   78|      0|      return IPV6_SCOPE_LINKLOCAL;
   79|      0|    case 0xFEC0:
   80|      0|      return IPV6_SCOPE_SITELOCAL;
   81|      0|    case 0x0000:
   82|      0|      w = b[1] | b[2] | b[3] | b[4] | b[5] | b[6] | b[7] | b[8] | b[9] |
   83|      0|          b[10] | b[11] | b[12] | b[13] | b[14];
   84|      0|      if(w || b[15] != 0x01)
   85|      0|        break;
   86|      0|      return IPV6_SCOPE_NODELOCAL;
   87|      0|    default:
   88|      0|      break;
   89|      0|    }
   90|      0|  }
   91|    524|#endif
   92|       |
   93|    524|  return IPV6_SCOPE_GLOBAL;
   94|    524|}

Curl_llist_init:
   38|   798k|{
   39|   798k|  l->size = 0;
   40|   798k|  l->dtor = dtor;
   41|   798k|  l->head = NULL;
   42|   798k|  l->tail = NULL;
   43|   798k|}
Curl_llist_insert_next:
   60|  5.45k|{
   61|  5.45k|  ne->ptr = (void *) p;
   62|  5.45k|  if(list->size == 0) {
   63|  4.24k|    list->head = ne;
   64|  4.24k|    list->head->prev = NULL;
   65|  4.24k|    list->head->next = NULL;
   66|  4.24k|    list->tail = ne;
   67|  4.24k|  }
   68|  1.21k|  else {
   69|       |    /* if 'e' is NULL here, we insert the new element first in the list */
   70|  1.21k|    ne->next = e?e->next:list->head;
   71|  1.21k|    ne->prev = e;
   72|  1.21k|    if(!e) {
   73|      3|      list->head->prev = ne;
   74|      3|      list->head = ne;
   75|      3|    }
   76|  1.21k|    else if(e->next) {
   77|      0|      e->next->prev = ne;
   78|      0|    }
   79|  1.21k|    else {
   80|  1.21k|      list->tail = ne;
   81|  1.21k|    }
   82|  1.21k|    if(e)
   83|  1.21k|      e->next = ne;
   84|  1.21k|  }
   85|       |
   86|  5.45k|  ++list->size;
   87|  5.45k|}
Curl_llist_remove:
   95|  5.45k|{
   96|  5.45k|  void *ptr;
   97|  5.45k|  if(!e || list->size == 0)
   98|      0|    return;
   99|       |
  100|  5.45k|  if(e == list->head) {
  101|  4.46k|    list->head = e->next;
  102|       |
  103|  4.46k|    if(!list->head)
  104|  4.24k|      list->tail = NULL;
  105|    228|    else
  106|    228|      e->next->prev = NULL;
  107|  4.46k|  }
  108|    987|  else {
  109|    987|    if(e->prev)
  110|    987|      e->prev->next = e->next;
  111|       |
  112|    987|    if(!e->next)
  113|    987|      list->tail = e->prev;
  114|      0|    else
  115|      0|      e->next->prev = e->prev;
  116|    987|  }
  117|       |
  118|  5.45k|  ptr = e->ptr;
  119|       |
  120|  5.45k|  e->ptr  = NULL;
  121|  5.45k|  e->prev = NULL;
  122|  5.45k|  e->next = NULL;
  123|       |
  124|  5.45k|  --list->size;
  125|       |
  126|       |  /* call the dtor() last for when it actually frees the 'e' memory itself */
  127|  5.45k|  if(list->dtor)
  128|  1.57k|    list->dtor(user, ptr);
  129|  5.45k|}
Curl_llist_destroy:
  133|   802k|{
  134|   802k|  if(list) {
  135|   802k|    while(list->size > 0)
  136|    524|      Curl_llist_remove(list, list->tail, user);
  137|   802k|  }
  138|   802k|}
Curl_llist_count:
  142|  1.99k|{
  143|  1.99k|  return list->size;
  144|  1.99k|}

curl_dbg_malloc:
  131|  28.4k|{
  132|  28.4k|  struct memdebug *mem;
  133|  28.4k|  size_t size;
  134|       |
  135|  28.4k|  DEBUGASSERT(wantedsize != 0);
  136|       |
  137|  28.4k|  if(countcheck("malloc", line, source))
  138|      0|    return NULL;
  139|       |
  140|       |  /* alloc at least 64 bytes */
  141|  28.4k|  size = sizeof(struct memdebug) + wantedsize;
  142|       |
  143|  28.4k|  mem = (Curl_cmalloc)(size);
  144|  28.4k|  if(mem) {
  145|  28.4k|    mem->size = wantedsize;
  146|  28.4k|  }
  147|       |
  148|  28.4k|  if(source)
  149|  10.4k|    curl_dbg_log("MEM %s:%d malloc(%zu) = %p\n",
  150|  10.4k|                 source, line, wantedsize,
  151|  10.4k|                 mem ? (void *)mem->mem : (void *)0);
  152|       |
  153|  28.4k|  return (mem ? mem->mem : NULL);
  154|  28.4k|}
curl_dbg_calloc:
  158|  10.1k|{
  159|  10.1k|  struct memdebug *mem;
  160|  10.1k|  size_t size, user_size;
  161|       |
  162|  10.1k|  DEBUGASSERT(wanted_elements != 0);
  163|  10.1k|  DEBUGASSERT(wanted_size != 0);
  164|       |
  165|  10.1k|  if(countcheck("calloc", line, source))
  166|      0|    return NULL;
  167|       |
  168|       |  /* alloc at least 64 bytes */
  169|  10.1k|  user_size = wanted_size * wanted_elements;
  170|  10.1k|  size = sizeof(struct memdebug) + user_size;
  171|       |
  172|  10.1k|  mem = (Curl_ccalloc)(1, size);
  173|  10.1k|  if(mem)
  174|  10.1k|    mem->size = user_size;
  175|       |
  176|  10.1k|  if(source)
  177|  10.1k|    curl_dbg_log("MEM %s:%d calloc(%zu,%zu) = %p\n",
  178|  10.1k|                 source, line, wanted_elements, wanted_size,
  179|  10.1k|                 mem ? (void *)mem->mem : (void *)0);
  180|       |
  181|  10.1k|  return (mem ? mem->mem : NULL);
  182|  10.1k|}
curl_dbg_strdup:
  185|  18.0k|{
  186|  18.0k|  char *mem;
  187|  18.0k|  size_t len;
  188|       |
  189|  18.0k|  DEBUGASSERT(str != NULL);
  190|       |
  191|  18.0k|  if(countcheck("strdup", line, source))
  192|      0|    return NULL;
  193|       |
  194|  18.0k|  len = strlen(str) + 1;
  195|       |
  196|  18.0k|  mem = curl_dbg_malloc(len, 0, NULL); /* NULL prevents logging */
  197|  18.0k|  if(mem)
  198|  18.0k|    memcpy(mem, str, len);
  199|       |
  200|  18.0k|  if(source)
  201|  18.0k|    curl_dbg_log("MEM %s:%d strdup(%p) (%zu) = %p\n",
  202|  18.0k|                 source, line, (const void *)str, len, (const void *)mem);
  203|       |
  204|  18.0k|  return mem;
  205|  18.0k|}
curl_dbg_realloc:
  237|  2.17k|{
  238|  2.17k|  struct memdebug *mem = NULL;
  239|       |
  240|  2.17k|  size_t size = sizeof(struct memdebug) + wantedsize;
  241|       |
  242|  2.17k|  DEBUGASSERT(wantedsize != 0);
  243|       |
  244|  2.17k|  if(countcheck("realloc", line, source))
  245|      0|    return NULL;
  246|       |
  247|       |#ifdef __INTEL_COMPILER
  248|       |#  pragma warning(push)
  249|       |#  pragma warning(disable:1684)
  250|       |   /* 1684: conversion from pointer to same-sized integral type */
  251|       |#endif
  252|       |
  253|  2.17k|  if(ptr)
  254|    579|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  255|       |
  256|       |#ifdef __INTEL_COMPILER
  257|       |#  pragma warning(pop)
  258|       |#endif
  259|       |
  260|  2.17k|  mem = (Curl_crealloc)(mem, size);
  261|  2.17k|  if(source)
  262|  2.17k|    curl_dbg_log("MEM %s:%d realloc(%p, %zu) = %p\n",
  263|  2.17k|                source, line, (void *)ptr, wantedsize,
  264|  2.17k|                mem ? (void *)mem->mem : (void *)0);
  265|       |
  266|  2.17k|  if(mem) {
  267|  2.17k|    mem->size = wantedsize;
  268|  2.17k|    return mem->mem;
  269|  2.17k|  }
  270|       |
  271|      0|  return NULL;
  272|  2.17k|}
curl_dbg_free:
  275|   344k|{
  276|   344k|  if(ptr) {
  277|  40.2k|    struct memdebug *mem;
  278|       |
  279|       |#ifdef __INTEL_COMPILER
  280|       |#  pragma warning(push)
  281|       |#  pragma warning(disable:1684)
  282|       |   /* 1684: conversion from pointer to same-sized integral type */
  283|       |#endif
  284|       |
  285|  40.2k|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  286|       |
  287|       |#ifdef __INTEL_COMPILER
  288|       |#  pragma warning(pop)
  289|       |#endif
  290|       |
  291|       |    /* free for real */
  292|  40.2k|    (Curl_cfree)(mem);
  293|  40.2k|  }
  294|       |
  295|   344k|  if(source && ptr)
  296|  40.2k|    curl_dbg_log("MEM %s:%d free(%p)\n", source, line, (void *)ptr);
  297|   344k|}
curl_dbg_socket:
  301|    783|{
  302|    783|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  303|    783|    "FD %s:%d socket() = %d\n" :
  304|    783|    (sizeof(curl_socket_t) == sizeof(long)) ?
  305|      0|    "FD %s:%d socket() = %ld\n" :
  306|      0|    "FD %s:%d socket() = %zd\n";
  307|       |
  308|    783|  curl_socket_t sockfd;
  309|       |
  310|    783|  if(countcheck("socket", line, source))
  311|      0|    return CURL_SOCKET_BAD;
  312|       |
  313|    783|  sockfd = socket(domain, type, protocol);
  314|       |
  315|    783|  if(source && (sockfd != CURL_SOCKET_BAD))
  316|    783|    curl_dbg_log(fmt, source, line, sockfd);
  317|       |
  318|    783|  return sockfd;
  319|    783|}
curl_dbg_send:
  325|    554|{
  326|    554|  SEND_TYPE_RETV rc;
  327|    554|  if(countcheck("send", line, source))
  328|      0|    return -1;
  329|    554|  rc = send(sockfd, buf, len, flags);
  330|    554|  if(source)
  331|    554|    curl_dbg_log("SEND %s:%d send(%lu) = %ld\n",
  332|    554|                source, line, (unsigned long)len, (long)rc);
  333|    554|  return rc;
  334|    554|}
curl_dbg_recv:
  339|  1.09k|{
  340|  1.09k|  RECV_TYPE_RETV rc;
  341|  1.09k|  if(countcheck("recv", line, source))
  342|      0|    return -1;
  343|  1.09k|  rc = recv(sockfd, buf, len, flags);
  344|  1.09k|  if(source)
  345|  1.09k|    curl_dbg_log("RECV %s:%d recv(%lu) = %ld\n",
  346|  1.09k|                source, line, (unsigned long)len, (long)rc);
  347|  1.09k|  return rc;
  348|  1.09k|}
curl_dbg_socketpair:
  354|    786|{
  355|    786|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  356|    786|    "FD %s:%d socketpair() = %d %d\n" :
  357|    786|    (sizeof(curl_socket_t) == sizeof(long)) ?
  358|      0|    "FD %s:%d socketpair() = %ld %ld\n" :
  359|      0|    "FD %s:%d socketpair() = %zd %zd\n";
  360|       |
  361|    786|  int res = socketpair(domain, type, protocol, socket_vector);
  362|       |
  363|    786|  if(source && (0 == res))
  364|    786|    curl_dbg_log(fmt, source, line, socket_vector[0], socket_vector[1]);
  365|       |
  366|    786|  return res;
  367|    786|}
curl_dbg_mark_sclose:
  392|  2.87k|{
  393|  2.87k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  394|  2.87k|    "FD %s:%d sclose(%d)\n":
  395|  2.87k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  396|      0|    "FD %s:%d sclose(%ld)\n":
  397|      0|    "FD %s:%d sclose(%zd)\n";
  398|       |
  399|  2.87k|  if(source)
  400|  2.87k|    curl_dbg_log(fmt, source, line, sockfd);
  401|  2.87k|}
curl_dbg_sclose:
  405|  2.87k|{
  406|  2.87k|  int res = sclose(sockfd);
  407|  2.87k|  curl_dbg_mark_sclose(sockfd, line, source);
  408|  2.87k|  return res;
  409|  2.87k|}
curl_dbg_fopen:
  413|    783|{
  414|    783|  FILE *res = fopen(file, mode);
  415|       |
  416|    783|  if(source)
  417|    783|    curl_dbg_log("FILE %s:%d fopen(\"%s\",\"%s\") = %p\n",
  418|    783|                source, line, file, mode, (void *)res);
  419|       |
  420|    783|  return res;
  421|    783|}
curl_dbg_fclose:
  434|    783|{
  435|    783|  int res;
  436|       |
  437|    783|  DEBUGASSERT(file != NULL);
  438|       |
  439|    783|  if(source)
  440|    783|    curl_dbg_log("FILE %s:%d fclose(%p)\n",
  441|    783|                 source, line, (void *)file);
  442|       |
  443|    783|  res = fclose(file);
  444|       |
  445|    783|  return res;
  446|    783|}
curl_dbg_log:
  452|  88.6k|{
  453|  88.6k|  char *buf;
  454|  88.6k|  int nchars;
  455|  88.6k|  va_list ap;
  456|       |
  457|  88.6k|  if(!curl_dbg_logfile)
  458|  88.6k|    return;
  459|       |
  460|      0|  buf = (Curl_cmalloc)(LOGLINE_BUFSIZE);
  461|      0|  if(!buf)
  462|      0|    return;
  463|       |
  464|      0|  va_start(ap, format);
  465|      0|  nchars = mvsnprintf(buf, LOGLINE_BUFSIZE, format, ap);
  466|      0|  va_end(ap);
  467|       |
  468|      0|  if(nchars > LOGLINE_BUFSIZE - 1)
  469|      0|    nchars = LOGLINE_BUFSIZE - 1;
  470|       |
  471|      0|  if(nchars > 0)
  472|      0|    fwrite(buf, 1, (size_t)nchars, curl_dbg_logfile);
  473|       |
  474|      0|  (Curl_cfree)(buf);
  475|      0|}
memdebug.c:countcheck:
  106|  61.2k|{
  107|       |  /* if source is NULL, then the call is made internally and this check
  108|       |     should not be made */
  109|  61.2k|  if(memlimit && source) {
  110|      0|    if(!memsize) {
  111|       |      /* log to file */
  112|      0|      curl_dbg_log("LIMIT %s:%d %s reached memlimit\n",
  113|      0|                   source, line, func);
  114|       |      /* log to stderr also */
  115|      0|      fprintf(stderr, "LIMIT %s:%d %s reached memlimit\n",
  116|      0|              source, line, func);
  117|      0|      fflush(curl_dbg_logfile); /* because it might crash now */
  118|      0|      errno = ENOMEM;
  119|      0|      return TRUE; /* RETURN ERROR! */
  120|      0|    }
  121|      0|    else
  122|      0|      memsize--; /* countdown */
  123|       |
  124|       |
  125|      0|  }
  126|       |
  127|  61.2k|  return FALSE; /* allow this */
  128|  61.2k|}

Curl_mime_cleanpart:
 1200|  2.36k|{
 1201|  2.36k|  cleanup_part_content(part);
 1202|  2.36k|  curl_slist_free_all(part->curlheaders);
 1203|  2.36k|  if(part->flags & MIME_USERHEADERS_OWNER)
 1204|      0|    curl_slist_free_all(part->userheaders);
 1205|  2.36k|  Curl_safefree(part->mimetype);
 1206|  2.36k|  Curl_safefree(part->name);
 1207|  2.36k|  Curl_safefree(part->filename);
 1208|  2.36k|  Curl_mime_initpart(part, part->easy);
 1209|  2.36k|}
curl_mime_free:
 1213|     82|{
 1214|     82|  curl_mimepart *part;
 1215|       |
 1216|     82|  if(mime) {
 1217|     82|    mime_subparts_unbind(mime);  /* Be sure it's not referenced anymore. */
 1218|    774|    while(mime->firstpart) {
 1219|    692|      part = mime->firstpart;
 1220|    692|      mime->firstpart = part->nextpart;
 1221|    692|      Curl_mime_cleanpart(part);
 1222|    692|      free(part);
 1223|    692|    }
 1224|     82|    free(mime);
 1225|     82|  }
 1226|     82|}
curl_mime_init:
 1309|     82|{
 1310|     82|  curl_mime *mime;
 1311|       |
 1312|     82|  mime = (curl_mime *) malloc(sizeof(*mime));
 1313|       |
 1314|     82|  if(mime) {
 1315|     82|    mime->easy = easy;
 1316|     82|    mime->parent = NULL;
 1317|     82|    mime->firstpart = NULL;
 1318|     82|    mime->lastpart = NULL;
 1319|       |
 1320|     82|    memset(mime->boundary, '-', 24);
 1321|     82|    if(Curl_rand_hex(easy, (unsigned char *) &mime->boundary[24],
 1322|     82|                     MIME_RAND_BOUNDARY_CHARS + 1)) {
 1323|       |      /* failed to get random separator, bail out */
 1324|      0|      free(mime);
 1325|      0|      return NULL;
 1326|      0|    }
 1327|     82|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1328|     82|  }
 1329|       |
 1330|     82|  return mime;
 1331|     82|}
Curl_mime_initpart:
 1335|  4.72k|{
 1336|  4.72k|  memset((char *) part, 0, sizeof(*part));
 1337|  4.72k|  part->easy = easy;
 1338|  4.72k|  part->lastreadstatus = 1; /* Successful read status. */
 1339|  4.72k|  mimesetstate(&part->state, MIMESTATE_BEGIN, NULL);
 1340|  4.72k|}
curl_mime_addpart:
 1344|    692|{
 1345|    692|  curl_mimepart *part;
 1346|       |
 1347|    692|  if(!mime)
 1348|      0|    return NULL;
 1349|       |
 1350|    692|  part = (curl_mimepart *) malloc(sizeof(*part));
 1351|       |
 1352|    692|  if(part) {
 1353|    692|    Curl_mime_initpart(part, mime->easy);
 1354|    692|    part->parent = mime;
 1355|       |
 1356|    692|    if(mime->lastpart)
 1357|    610|      mime->lastpart->nextpart = part;
 1358|     82|    else
 1359|     82|      mime->firstpart = part;
 1360|       |
 1361|    692|    mime->lastpart = part;
 1362|    692|  }
 1363|       |
 1364|    692|  return part;
 1365|    692|}
curl_mime_name:
 1369|     11|{
 1370|     11|  if(!part)
 1371|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1372|       |
 1373|     11|  Curl_safefree(part->name);
 1374|     11|  part->name = NULL;
 1375|       |
 1376|     11|  if(name) {
 1377|     11|    part->name = strdup(name);
 1378|     11|    if(!part->name)
 1379|      0|      return CURLE_OUT_OF_MEMORY;
 1380|     11|  }
 1381|       |
 1382|     11|  return CURLE_OK;
 1383|     11|}
curl_mime_data:
 1406|    111|{
 1407|    111|  if(!part)
 1408|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|       |
 1410|    111|  cleanup_part_content(part);
 1411|       |
 1412|    111|  if(data) {
 1413|    111|    if(datasize == CURL_ZERO_TERMINATED)
 1414|      0|      datasize = strlen(data);
 1415|       |
 1416|    111|    part->data = malloc(datasize + 1);
 1417|    111|    if(!part->data)
 1418|      0|      return CURLE_OUT_OF_MEMORY;
 1419|       |
 1420|    111|    part->datasize = datasize;
 1421|       |
 1422|    111|    if(datasize)
 1423|     64|      memcpy(part->data, data, datasize);
 1424|    111|    part->data[datasize] = '\0';    /* Set a null terminator as sentinel. */
 1425|       |
 1426|    111|    part->readfunc = mime_mem_read;
 1427|    111|    part->seekfunc = mime_mem_seek;
 1428|    111|    part->freefunc = mime_mem_free;
 1429|    111|    part->flags |= MIME_FAST_READ;
 1430|    111|    part->kind = MIMEKIND_DATA;
 1431|    111|  }
 1432|       |
 1433|    111|  return CURLE_OK;
 1434|    111|}
Curl_mime_set_subparts:
 1570|     34|{
 1571|     34|  curl_mime *root;
 1572|       |
 1573|     34|  if(!part)
 1574|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1575|       |
 1576|       |  /* Accept setting twice the same subparts. */
 1577|     34|  if(part->kind == MIMEKIND_MULTIPART && part->arg == subparts)
 1578|      0|    return CURLE_OK;
 1579|       |
 1580|     34|  cleanup_part_content(part);
 1581|       |
 1582|     34|  if(subparts) {
 1583|       |    /* Must belong to the same data handle. */
 1584|     34|    if(part->easy && subparts->easy && part->easy != subparts->easy)
 1585|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1586|       |
 1587|       |    /* Should not have been attached already. */
 1588|     34|    if(subparts->parent)
 1589|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1590|       |
 1591|       |    /* Should not be the part's root. */
 1592|     34|    root = part->parent;
 1593|     34|    if(root) {
 1594|      0|      while(root->parent && root->parent->parent)
 1595|      0|        root = root->parent->parent;
 1596|      0|      if(subparts == root) {
 1597|      0|        if(part->easy)
 1598|      0|          failf(part->easy, "Can't add itself as a subpart!");
 1599|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
 1600|      0|      }
 1601|      0|    }
 1602|       |
 1603|     34|    subparts->parent = part;
 1604|       |    /* Subparts are processed internally: no read callback. */
 1605|     34|    part->seekfunc = mime_subparts_seek;
 1606|     34|    part->freefunc = take_ownership? mime_subparts_free: mime_subparts_unbind;
 1607|     34|    part->arg = subparts;
 1608|     34|    part->datasize = -1;
 1609|     34|    part->kind = MIMEKIND_MULTIPART;
 1610|     34|  }
 1611|       |
 1612|     34|  return CURLE_OK;
 1613|     34|}
mime.c:cleanup_part_content:
 1157|  2.54k|{
 1158|  2.54k|  if(part->freefunc)
 1159|    111|    part->freefunc(part->arg);
 1160|       |
 1161|  2.54k|  part->readfunc = NULL;
 1162|  2.54k|  part->seekfunc = NULL;
 1163|  2.54k|  part->freefunc = NULL;
 1164|  2.54k|  part->arg = (void *) part;          /* Defaults to part itself. */
 1165|  2.54k|  part->data = NULL;
 1166|  2.54k|  part->fp = NULL;
 1167|  2.54k|  part->datasize = (curl_off_t) 0;    /* No size yet. */
 1168|  2.54k|  cleanup_encoder_state(&part->encstate);
 1169|  2.54k|  part->kind = MIMEKIND_NONE;
 1170|  2.54k|  part->flags &= ~MIME_FAST_READ;
 1171|  2.54k|  part->lastreadstatus = 1; /* Successful read status. */
 1172|  2.54k|  part->state.state = MIMESTATE_BEGIN;
 1173|  2.54k|}
mime.c:cleanup_encoder_state:
  347|  2.54k|{
  348|  2.54k|  p->pos = 0;
  349|  2.54k|  p->bufbeg = 0;
  350|  2.54k|  p->bufend = 0;
  351|  2.54k|}
mime.c:mime_subparts_unbind:
 1188|     82|{
 1189|     82|  curl_mime *mime = (curl_mime *) ptr;
 1190|       |
 1191|     82|  if(mime && mime->parent) {
 1192|     34|    mime->parent->freefunc = NULL;  /* Be sure we won't be called again. */
 1193|     34|    cleanup_part_content(mime->parent);  /* Avoid dangling pointer in part. */
 1194|     34|    mime->parent = NULL;
 1195|     34|  }
 1196|     82|}
mime.c:mimesetstate:
  274|  4.80k|{
  275|  4.80k|  state->state = tok;
  276|  4.80k|  state->ptr = ptr;
  277|  4.80k|  state->offset = 0;
  278|  4.80k|}
mime.c:mime_mem_free:
  682|    111|{
  683|    111|  Curl_safefree(((curl_mimepart *) ptr)->data);
  684|    111|}

curl_mvsnprintf:
 1009|  37.1k|{
 1010|  37.1k|  int retcode;
 1011|  37.1k|  struct nsprintf info;
 1012|       |
 1013|  37.1k|  info.buffer = buffer;
 1014|  37.1k|  info.length = 0;
 1015|  37.1k|  info.max = maxlength;
 1016|       |
 1017|  37.1k|  retcode = dprintf_formatf(&info, addbyter, format, ap_save);
 1018|  37.1k|  if((retcode != -1) && info.max) {
 1019|       |    /* we terminate this with a zero byte */
 1020|  37.1k|    if(info.max == info.length) {
 1021|       |      /* we're at maximum, scrap the last letter */
 1022|      0|      info.buffer[-1] = 0;
 1023|      0|      retcode--; /* don't count the nul byte */
 1024|      0|    }
 1025|  37.1k|    else
 1026|  37.1k|      info.buffer[0] = 0;
 1027|  37.1k|  }
 1028|  37.1k|  return retcode;
 1029|  37.1k|}
curl_msnprintf:
 1032|  37.1k|{
 1033|  37.1k|  int retcode;
 1034|  37.1k|  va_list ap_save; /* argument pointer */
 1035|  37.1k|  va_start(ap_save, format);
 1036|  37.1k|  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
 1037|  37.1k|  va_end(ap_save);
 1038|  37.1k|  return retcode;
 1039|  37.1k|}
Curl_dyn_vprintf:
 1059|    551|{
 1060|    551|  int retcode;
 1061|    551|  struct asprintf info;
 1062|    551|  info.b = dyn;
 1063|    551|  info.fail = 0;
 1064|       |
 1065|    551|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1066|    551|  if((-1 == retcode) || info.fail) {
 1067|      0|    Curl_dyn_free(info.b);
 1068|      0|    return 1;
 1069|      0|  }
 1070|    551|  return 0;
 1071|    551|}
curl_mvaprintf:
 1074|  1.41k|{
 1075|  1.41k|  int retcode;
 1076|  1.41k|  struct asprintf info;
 1077|  1.41k|  struct dynbuf dyn;
 1078|  1.41k|  info.b = &dyn;
 1079|  1.41k|  Curl_dyn_init(info.b, DYN_APRINTF);
 1080|  1.41k|  info.fail = 0;
 1081|       |
 1082|  1.41k|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1083|  1.41k|  if((-1 == retcode) || info.fail) {
 1084|      0|    Curl_dyn_free(info.b);
 1085|      0|    return NULL;
 1086|      0|  }
 1087|  1.41k|  if(Curl_dyn_len(info.b))
 1088|  1.41k|    return Curl_dyn_ptr(info.b);
 1089|      0|  return strdup("");
 1090|  1.41k|}
curl_maprintf:
 1093|  1.41k|{
 1094|  1.41k|  va_list ap_save;
 1095|  1.41k|  char *s;
 1096|  1.41k|  va_start(ap_save, format);
 1097|  1.41k|  s = curl_mvaprintf(format, ap_save);
 1098|  1.41k|  va_end(ap_save);
 1099|  1.41k|  return s;
 1100|  1.41k|}
mprintf.c:dprintf_formatf:
  570|  39.1k|{
  571|       |  /* Base-36 digits for numbers.  */
  572|  39.1k|  const char *digits = lower_digits;
  573|       |
  574|       |  /* Pointer into the format string.  */
  575|  39.1k|  char *f;
  576|       |
  577|       |  /* Number of characters written.  */
  578|  39.1k|  int done = 0;
  579|       |
  580|  39.1k|  long param; /* current parameter to read */
  581|  39.1k|  long param_num = 0; /* parameter counter */
  582|       |
  583|  39.1k|  struct va_stack vto[MAX_PARAMETERS];
  584|  39.1k|  char *endpos[MAX_PARAMETERS];
  585|  39.1k|  char **end;
  586|  39.1k|  char work[BUFFSIZE];
  587|  39.1k|  struct va_stack *p;
  588|       |
  589|       |  /* 'workend' points to the final buffer byte position, but with an extra
  590|       |     byte as margin to avoid the (false?) warning Coverity gives us
  591|       |     otherwise */
  592|  39.1k|  char *workend = &work[sizeof(work) - 2];
  593|       |
  594|       |  /* Do the actual %-code parsing */
  595|  39.1k|  if(dprintf_Pass1(format, vto, endpos, ap_save))
  596|      0|    return -1;
  597|       |
  598|  39.1k|  end = &endpos[0]; /* the initial end-position from the list dprintf_Pass1()
  599|       |                       created for us */
  600|       |
  601|  39.1k|  f = (char *)format;
  602|   128k|  while(*f != '\0') {
  603|       |    /* Format spec modifiers.  */
  604|  89.7k|    int is_alt;
  605|       |
  606|       |    /* Width of a field.  */
  607|  89.7k|    long width;
  608|       |
  609|       |    /* Precision of a field.  */
  610|  89.7k|    long prec;
  611|       |
  612|       |    /* Decimal integer is negative.  */
  613|  89.7k|    int is_neg;
  614|       |
  615|       |    /* Base of a number to be written.  */
  616|  89.7k|    unsigned long base;
  617|       |
  618|       |    /* Integral values to be written.  */
  619|  89.7k|    mp_uintmax_t num;
  620|       |
  621|       |    /* Used to convert negative in positive.  */
  622|  89.7k|    mp_intmax_t signed_num;
  623|       |
  624|  89.7k|    char *w;
  625|       |
  626|  89.7k|    if(*f != '%') {
  627|       |      /* This isn't a format spec, so write everything out until the next one
  628|       |         OR end of string is reached.  */
  629|  9.92k|      do {
  630|  9.92k|        OUTCHAR(*f);
  631|  9.92k|      } while(*++f && ('%' != *f));
  632|  4.33k|      continue;
  633|  4.33k|    }
  634|       |
  635|  85.4k|    ++f;
  636|       |
  637|       |    /* Check for "%%".  Note that although the ANSI standard lists
  638|       |       '%' as a conversion specifier, it says "The complete format
  639|       |       specification shall be `%%'," so we can avoid all the width
  640|       |       and precision processing.  */
  641|  85.4k|    if(*f == '%') {
  642|  33.2k|      ++f;
  643|  33.2k|      OUTCHAR('%');
  644|  33.2k|      continue;
  645|  33.2k|    }
  646|       |
  647|       |    /* If this is a positional parameter, the position must follow immediately
  648|       |       after the %, thus create a %<num>$ sequence */
  649|  52.1k|    param = dprintf_DollarString(f, &f);
  650|       |
  651|  52.1k|    if(!param)
  652|  52.1k|      param = param_num;
  653|      0|    else
  654|      0|      --param;
  655|       |
  656|  52.1k|    param_num++; /* increase this always to allow "%2$s %1$s %s" and then the
  657|       |                    third %s will pick the 3rd argument */
  658|       |
  659|  52.1k|    p = &vto[param];
  660|       |
  661|       |    /* pick up the specified width */
  662|  52.1k|    if(p->flags & FLAGS_WIDTHPARAM) {
  663|      0|      width = (long)vto[p->width].data.num.as_signed;
  664|      0|      param_num++; /* since the width is extracted from a parameter, we
  665|       |                      must skip that to get to the next one properly */
  666|      0|      if(width < 0) {
  667|       |        /* "A negative field width is taken as a '-' flag followed by a
  668|       |           positive field width." */
  669|      0|        width = -width;
  670|      0|        p->flags |= FLAGS_LEFT;
  671|      0|        p->flags &= ~FLAGS_PAD_NIL;
  672|      0|      }
  673|      0|    }
  674|  52.1k|    else
  675|  52.1k|      width = p->width;
  676|       |
  677|       |    /* pick up the specified precision */
  678|  52.1k|    if(p->flags & FLAGS_PRECPARAM) {
  679|      0|      prec = (long)vto[p->precision].data.num.as_signed;
  680|      0|      param_num++; /* since the precision is extracted from a parameter, we
  681|       |                      must skip that to get to the next one properly */
  682|      0|      if(prec < 0)
  683|       |        /* "A negative precision is taken as if the precision were
  684|       |           omitted." */
  685|      0|        prec = -1;
  686|      0|    }
  687|  52.1k|    else if(p->flags & FLAGS_PREC)
  688|      0|      prec = p->precision;
  689|  52.1k|    else
  690|  52.1k|      prec = -1;
  691|       |
  692|  52.1k|    is_alt = (p->flags & FLAGS_ALT) ? 1 : 0;
  693|       |
  694|  52.1k|    switch(p->type) {
  695|  37.8k|    case FORMAT_INT:
  696|  37.8k|      num = p->data.num.as_unsigned;
  697|  37.8k|      if(p->flags & FLAGS_CHAR) {
  698|       |        /* Character.  */
  699|      4|        if(!(p->flags & FLAGS_LEFT))
  700|      4|          while(--width > 0)
  701|      0|            OUTCHAR(' ');
  702|      4|        OUTCHAR((char) num);
  703|      4|        if(p->flags & FLAGS_LEFT)
  704|      0|          while(--width > 0)
  705|      0|            OUTCHAR(' ');
  706|      4|        break;
  707|      4|      }
  708|  37.8k|      if(p->flags & FLAGS_OCTAL) {
  709|       |        /* Octal unsigned integer.  */
  710|      0|        base = 8;
  711|      0|        goto unsigned_number;
  712|      0|      }
  713|  37.8k|      else if(p->flags & FLAGS_HEX) {
  714|       |        /* Hexadecimal unsigned integer.  */
  715|       |
  716|  33.2k|        digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  717|  33.2k|        base = 16;
  718|  33.2k|        goto unsigned_number;
  719|  33.2k|      }
  720|  4.63k|      else if(p->flags & FLAGS_UNSIGNED) {
  721|       |        /* Decimal unsigned integer.  */
  722|  2.32k|        base = 10;
  723|  2.32k|        goto unsigned_number;
  724|  2.32k|      }
  725|       |
  726|       |      /* Decimal integer.  */
  727|  2.31k|      base = 10;
  728|       |
  729|  2.31k|      is_neg = (p->data.num.as_signed < (mp_intmax_t)0) ? 1 : 0;
  730|  2.31k|      if(is_neg) {
  731|       |        /* signed_num might fail to hold absolute negative minimum by 1 */
  732|      0|        signed_num = p->data.num.as_signed + (mp_intmax_t)1;
  733|      0|        signed_num = -signed_num;
  734|      0|        num = (mp_uintmax_t)signed_num;
  735|      0|        num += (mp_uintmax_t)1;
  736|      0|      }
  737|       |
  738|  2.31k|      goto number;
  739|       |
  740|  35.5k|      unsigned_number:
  741|       |      /* Unsigned number of base BASE.  */
  742|  35.5k|      is_neg = 0;
  743|       |
  744|  37.8k|      number:
  745|       |      /* Number of base BASE.  */
  746|       |
  747|       |      /* Supply a default precision if none was given.  */
  748|  37.8k|      if(prec == -1)
  749|  37.8k|        prec = 1;
  750|       |
  751|       |      /* Put the number in WORK.  */
  752|  37.8k|      w = workend;
  753|   110k|      while(num > 0) {
  754|  72.7k|        *w-- = digits[num % base];
  755|  72.7k|        num /= base;
  756|  72.7k|      }
  757|  37.8k|      width -= (long)(workend - w);
  758|  37.8k|      prec -= (long)(workend - w);
  759|       |
  760|  37.8k|      if(is_alt && base == 8 && prec <= 0) {
  761|      0|        *w-- = '0';
  762|      0|        --width;
  763|      0|      }
  764|       |
  765|  37.8k|      if(prec > 0) {
  766|    580|        width -= prec;
  767|  1.16k|        while(prec-- > 0 && w >= work)
  768|    580|          *w-- = '0';
  769|    580|      }
  770|       |
  771|  37.8k|      if(is_alt && base == 16)
  772|      0|        width -= 2;
  773|       |
  774|  37.8k|      if(is_neg || (p->flags & FLAGS_SHOWSIGN) || (p->flags & FLAGS_SPACE))
  775|      0|        --width;
  776|       |
  777|  37.8k|      if(!(p->flags & FLAGS_LEFT) && !(p->flags & FLAGS_PAD_NIL))
  778|  4.63k|        while(width-- > 0)
  779|      0|          OUTCHAR(' ');
  780|       |
  781|  37.8k|      if(is_neg)
  782|      0|        OUTCHAR('-');
  783|  37.8k|      else if(p->flags & FLAGS_SHOWSIGN)
  784|      0|        OUTCHAR('+');
  785|  37.8k|      else if(p->flags & FLAGS_SPACE)
  786|      0|        OUTCHAR(' ');
  787|       |
  788|  37.8k|      if(is_alt && base == 16) {
  789|      0|        OUTCHAR('0');
  790|      0|        if(p->flags & FLAGS_UPPER)
  791|      0|          OUTCHAR('X');
  792|      0|        else
  793|      0|          OUTCHAR('x');
  794|      0|      }
  795|       |
  796|  37.8k|      if(!(p->flags & FLAGS_LEFT) && (p->flags & FLAGS_PAD_NIL))
  797|  37.3k|        while(width-- > 0)
  798|  4.07k|          OUTCHAR('0');
  799|       |
  800|       |      /* Write the number.  */
  801|   111k|      while(++w <= workend) {
  802|  73.3k|        OUTCHAR(*w);
  803|  73.3k|      }
  804|       |
  805|  37.8k|      if(p->flags & FLAGS_LEFT)
  806|      0|        while(width-- > 0)
  807|      0|          OUTCHAR(' ');
  808|  37.8k|      break;
  809|       |
  810|  37.8k|    case FORMAT_STRING:
  811|       |            /* String.  */
  812|  14.2k|      {
  813|  14.2k|        static const char null[] = "(nil)";
  814|  14.2k|        const char *str;
  815|  14.2k|        size_t len;
  816|       |
  817|  14.2k|        str = (char *) p->data.str;
  818|  14.2k|        if(!str) {
  819|       |          /* Write null[] if there's space.  */
  820|      0|          if(prec == -1 || prec >= (long) sizeof(null) - 1) {
  821|      0|            str = null;
  822|      0|            len = sizeof(null) - 1;
  823|       |            /* Disable quotes around (nil) */
  824|      0|            p->flags &= (~FLAGS_ALT);
  825|      0|          }
  826|      0|          else {
  827|      0|            str = "";
  828|      0|            len = 0;
  829|      0|          }
  830|      0|        }
  831|  14.2k|        else if(prec != -1)
  832|      0|          len = (size_t)prec;
  833|  14.2k|        else
  834|  14.2k|          len = strlen(str);
  835|       |
  836|  14.2k|        width -= (len > LONG_MAX) ? LONG_MAX : (long)len;
  837|       |
  838|  14.2k|        if(p->flags & FLAGS_ALT)
  839|      0|          OUTCHAR('"');
  840|       |
  841|  14.2k|        if(!(p->flags&FLAGS_LEFT))
  842|  14.2k|          while(width-- > 0)
  843|      0|            OUTCHAR(' ');
  844|       |
  845|   111k|        for(; len && *str; len--)
  846|  97.4k|          OUTCHAR(*str++);
  847|  14.2k|        if(p->flags&FLAGS_LEFT)
  848|      0|          while(width-- > 0)
  849|      0|            OUTCHAR(' ');
  850|       |
  851|  14.2k|        if(p->flags & FLAGS_ALT)
  852|      0|          OUTCHAR('"');
  853|  14.2k|      }
  854|  14.2k|      break;
  855|       |
  856|  14.2k|    case FORMAT_PTR:
  857|       |      /* Generic pointer.  */
  858|      0|      {
  859|      0|        void *ptr;
  860|      0|        ptr = (void *) p->data.ptr;
  861|      0|        if(ptr != NULL) {
  862|       |          /* If the pointer is not NULL, write it as a %#x spec.  */
  863|      0|          base = 16;
  864|      0|          digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  865|      0|          is_alt = 1;
  866|      0|          num = (size_t) ptr;
  867|      0|          is_neg = 0;
  868|      0|          goto number;
  869|      0|        }
  870|      0|        else {
  871|       |          /* Write "(nil)" for a nil pointer.  */
  872|      0|          static const char strnil[] = "(nil)";
  873|      0|          const char *point;
  874|       |
  875|      0|          width -= (long)(sizeof(strnil) - 1);
  876|      0|          if(p->flags & FLAGS_LEFT)
  877|      0|            while(width-- > 0)
  878|      0|              OUTCHAR(' ');
  879|      0|          for(point = strnil; *point != '\0'; ++point)
  880|      0|            OUTCHAR(*point);
  881|      0|          if(!(p->flags & FLAGS_LEFT))
  882|      0|            while(width-- > 0)
  883|      0|              OUTCHAR(' ');
  884|      0|        }
  885|      0|      }
  886|      0|      break;
  887|       |
  888|      0|    case FORMAT_DOUBLE:
  889|      0|      {
  890|      0|        char formatbuf[32]="%";
  891|      0|        char *fptr = &formatbuf[1];
  892|      0|        size_t left = sizeof(formatbuf)-strlen(formatbuf);
  893|      0|        int len;
  894|       |
  895|      0|        width = -1;
  896|      0|        if(p->flags & FLAGS_WIDTH)
  897|      0|          width = p->width;
  898|      0|        else if(p->flags & FLAGS_WIDTHPARAM)
  899|      0|          width = (long)vto[p->width].data.num.as_signed;
  900|       |
  901|      0|        prec = -1;
  902|      0|        if(p->flags & FLAGS_PREC)
  903|      0|          prec = p->precision;
  904|      0|        else if(p->flags & FLAGS_PRECPARAM)
  905|      0|          prec = (long)vto[p->precision].data.num.as_signed;
  906|       |
  907|      0|        if(p->flags & FLAGS_LEFT)
  908|      0|          *fptr++ = '-';
  909|      0|        if(p->flags & FLAGS_SHOWSIGN)
  910|      0|          *fptr++ = '+';
  911|      0|        if(p->flags & FLAGS_SPACE)
  912|      0|          *fptr++ = ' ';
  913|      0|        if(p->flags & FLAGS_ALT)
  914|      0|          *fptr++ = '#';
  915|       |
  916|      0|        *fptr = 0;
  917|       |
  918|      0|        if(width >= 0) {
  919|      0|          if(width >= (long)sizeof(work))
  920|      0|            width = sizeof(work)-1;
  921|       |          /* RECURSIVE USAGE */
  922|      0|          len = curl_msnprintf(fptr, left, "%ld", width);
  923|      0|          fptr += len;
  924|      0|          left -= len;
  925|      0|        }
  926|      0|        if(prec >= 0) {
  927|       |          /* for each digit in the integer part, we can have one less
  928|       |             precision */
  929|      0|          size_t maxprec = sizeof(work) - 2;
  930|      0|          double val = p->data.dnum;
  931|      0|          if(width > 0 && prec <= width)
  932|      0|            maxprec -= width;
  933|      0|          while(val >= 10.0) {
  934|      0|            val /= 10;
  935|      0|            maxprec--;
  936|      0|          }
  937|       |
  938|      0|          if(prec > (long)maxprec)
  939|      0|            prec = (long)maxprec-1;
  940|      0|          if(prec < 0)
  941|      0|            prec = 0;
  942|       |          /* RECURSIVE USAGE */
  943|      0|          len = curl_msnprintf(fptr, left, ".%ld", prec);
  944|      0|          fptr += len;
  945|      0|        }
  946|      0|        if(p->flags & FLAGS_LONG)
  947|      0|          *fptr++ = 'l';
  948|       |
  949|      0|        if(p->flags & FLAGS_FLOATE)
  950|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'E':'e');
  951|      0|        else if(p->flags & FLAGS_FLOATG)
  952|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'G' : 'g');
  953|      0|        else
  954|      0|          *fptr++ = 'f';
  955|       |
  956|      0|        *fptr = 0; /* and a final zero termination */
  957|       |
  958|       |        /* NOTE NOTE NOTE!! Not all sprintf implementations return number of
  959|       |           output characters */
  960|      0|        (sprintf)(work, formatbuf, p->data.dnum);
  961|      0|        DEBUGASSERT(strlen(work) <= sizeof(work));
  962|      0|        for(fptr = work; *fptr; fptr++)
  963|      0|          OUTCHAR(*fptr);
  964|      0|      }
  965|      0|      break;
  966|       |
  967|      0|    case FORMAT_INTPTR:
  968|       |      /* Answer the count of characters written.  */
  969|      0|#ifdef HAVE_LONG_LONG_TYPE
  970|      0|      if(p->flags & FLAGS_LONGLONG)
  971|      0|        *(LONG_LONG_TYPE *) p->data.ptr = (LONG_LONG_TYPE)done;
  972|      0|      else
  973|      0|#endif
  974|      0|        if(p->flags & FLAGS_LONG)
  975|      0|          *(long *) p->data.ptr = (long)done;
  976|      0|      else if(!(p->flags & FLAGS_SHORT))
  977|      0|        *(int *) p->data.ptr = (int)done;
  978|      0|      else
  979|      0|        *(short *) p->data.ptr = (short)done;
  980|      0|      break;
  981|       |
  982|      0|    default:
  983|      0|      break;
  984|  52.1k|    }
  985|  52.1k|    f = *end++; /* goto end of %-code */
  986|       |
  987|  52.1k|  }
  988|  39.1k|  return done;
  989|  39.1k|}
mprintf.c:dprintf_Pass1:
  230|  39.1k|{
  231|  39.1k|  char *fmt = (char *)format;
  232|  39.1k|  int param_num = 0;
  233|  39.1k|  long this_param;
  234|  39.1k|  long width;
  235|  39.1k|  long precision;
  236|  39.1k|  int flags;
  237|  39.1k|  long max_param = 0;
  238|  39.1k|  long i;
  239|       |
  240|   186k|  while(*fmt) {
  241|   147k|    if(*fmt++ == '%') {
  242|  85.4k|      if(*fmt == '%') {
  243|  33.2k|        fmt++;
  244|  33.2k|        continue; /* while */
  245|  33.2k|      }
  246|       |
  247|  52.1k|      flags = FLAGS_NEW;
  248|       |
  249|       |      /* Handle the positional case (N$) */
  250|       |
  251|  52.1k|      param_num++;
  252|       |
  253|  52.1k|      this_param = dprintf_DollarString(fmt, &fmt);
  254|  52.1k|      if(0 == this_param)
  255|       |        /* we got no positional, get the next counter */
  256|  52.1k|        this_param = param_num;
  257|       |
  258|  52.1k|      if(this_param > max_param)
  259|  52.1k|        max_param = this_param;
  260|       |
  261|       |      /*
  262|       |       * The parameter with number 'i' should be used. Next, we need
  263|       |       * to get SIZE and TYPE of the parameter. Add the information
  264|       |       * to our array.
  265|       |       */
  266|       |
  267|  52.1k|      width = 0;
  268|  52.1k|      precision = 0;
  269|       |
  270|       |      /* Handle the flags */
  271|       |
  272|  87.7k|      while(dprintf_IsQualifierNoDollar(fmt)) {
  273|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  274|       |        if(!strncmp(fmt, "I32", 3)) {
  275|       |          flags |= FLAGS_LONG;
  276|       |          fmt += 3;
  277|       |        }
  278|       |        else if(!strncmp(fmt, "I64", 3)) {
  279|       |          flags |= FLAGS_LONGLONG;
  280|       |          fmt += 3;
  281|       |        }
  282|       |        else
  283|       |#endif
  284|       |
  285|  35.5k|        switch(*fmt++) {
  286|      0|        case ' ':
  287|      0|          flags |= FLAGS_SPACE;
  288|      0|          break;
  289|      0|        case '+':
  290|      0|          flags |= FLAGS_SHOWSIGN;
  291|      0|          break;
  292|      0|        case '-':
  293|      0|          flags |= FLAGS_LEFT;
  294|      0|          flags &= ~FLAGS_PAD_NIL;
  295|      0|          break;
  296|      0|        case '#':
  297|      0|          flags |= FLAGS_ALT;
  298|      0|          break;
  299|      0|        case '.':
  300|      0|          if('*' == *fmt) {
  301|       |            /* The precision is picked from a specified parameter */
  302|       |
  303|      0|            flags |= FLAGS_PRECPARAM;
  304|      0|            fmt++;
  305|      0|            param_num++;
  306|       |
  307|      0|            i = dprintf_DollarString(fmt, &fmt);
  308|      0|            if(i)
  309|      0|              precision = i;
  310|      0|            else
  311|      0|              precision = param_num;
  312|       |
  313|      0|            if(precision > max_param)
  314|      0|              max_param = precision;
  315|      0|          }
  316|      0|          else {
  317|      0|            flags |= FLAGS_PREC;
  318|      0|            precision = strtol(fmt, &fmt, 10);
  319|      0|          }
  320|      0|          break;
  321|      0|        case 'h':
  322|      0|          flags |= FLAGS_SHORT;
  323|      0|          break;
  324|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  325|       |        case 'I':
  326|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  327|       |          flags |= FLAGS_LONGLONG;
  328|       |#else
  329|       |          flags |= FLAGS_LONG;
  330|       |#endif
  331|       |          break;
  332|       |#endif
  333|  2.30k|        case 'l':
  334|  2.30k|          if(flags & FLAGS_LONG)
  335|      0|            flags |= FLAGS_LONGLONG;
  336|  2.30k|          else
  337|  2.30k|            flags |= FLAGS_LONG;
  338|  2.30k|          break;
  339|      0|        case 'L':
  340|      0|          flags |= FLAGS_LONGDOUBLE;
  341|      0|          break;
  342|      0|        case 'q':
  343|      0|          flags |= FLAGS_LONGLONG;
  344|      0|          break;
  345|      0|        case 'z':
  346|       |          /* the code below generates a warning if -Wunreachable-code is
  347|       |             used */
  348|       |#if (SIZEOF_SIZE_T > SIZEOF_LONG)
  349|       |          flags |= FLAGS_LONGLONG;
  350|       |#else
  351|      0|          flags |= FLAGS_LONG;
  352|      0|#endif
  353|      0|          break;
  354|      0|        case 'O':
  355|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  356|       |          flags |= FLAGS_LONGLONG;
  357|       |#else
  358|      0|          flags |= FLAGS_LONG;
  359|      0|#endif
  360|      0|          break;
  361|  33.2k|        case '0':
  362|  33.2k|          if(!(flags & FLAGS_LEFT))
  363|  33.2k|            flags |= FLAGS_PAD_NIL;
  364|       |          /* FALLTHROUGH */
  365|  33.2k|        case '1': case '2': case '3': case '4':
  366|  33.2k|        case '5': case '6': case '7': case '8': case '9':
  367|  33.2k|          flags |= FLAGS_WIDTH;
  368|  33.2k|          width = strtol(fmt-1, &fmt, 10);
  369|  33.2k|          break;
  370|      0|        case '*':  /* Special case */
  371|      0|          flags |= FLAGS_WIDTHPARAM;
  372|      0|          param_num++;
  373|       |
  374|      0|          i = dprintf_DollarString(fmt, &fmt);
  375|      0|          if(i)
  376|      0|            width = i;
  377|      0|          else
  378|      0|            width = param_num;
  379|      0|          if(width > max_param)
  380|      0|            max_param = width;
  381|      0|          break;
  382|      0|        case '\0':
  383|      0|          fmt--;
  384|      0|        default:
  385|      0|          break;
  386|  35.5k|        }
  387|  35.5k|      } /* switch */
  388|       |
  389|       |      /* Handle the specifier */
  390|       |
  391|  52.1k|      i = this_param - 1;
  392|       |
  393|  52.1k|      if((i < 0) || (i >= MAX_PARAMETERS))
  394|       |        /* out of allowed range */
  395|      0|        return 1;
  396|       |
  397|  52.1k|      switch (*fmt) {
  398|      0|      case 'S':
  399|      0|        flags |= FLAGS_ALT;
  400|       |        /* FALLTHROUGH */
  401|  14.2k|      case 's':
  402|  14.2k|        vto[i].type = FORMAT_STRING;
  403|  14.2k|        break;
  404|      0|      case 'n':
  405|      0|        vto[i].type = FORMAT_INTPTR;
  406|      0|        break;
  407|      0|      case 'p':
  408|      0|        vto[i].type = FORMAT_PTR;
  409|      0|        break;
  410|  2.31k|      case 'd': case 'i':
  411|  2.31k|        vto[i].type = FORMAT_INT;
  412|  2.31k|        break;
  413|  2.32k|      case 'u':
  414|  2.32k|        vto[i].type = FORMAT_INT;
  415|  2.32k|        flags |= FLAGS_UNSIGNED;
  416|  2.32k|        break;
  417|      0|      case 'o':
  418|      0|        vto[i].type = FORMAT_INT;
  419|      0|        flags |= FLAGS_OCTAL;
  420|      0|        break;
  421|  33.2k|      case 'x':
  422|  33.2k|        vto[i].type = FORMAT_INT;
  423|  33.2k|        flags |= FLAGS_HEX|FLAGS_UNSIGNED;
  424|  33.2k|        break;
  425|      0|      case 'X':
  426|      0|        vto[i].type = FORMAT_INT;
  427|      0|        flags |= FLAGS_HEX|FLAGS_UPPER|FLAGS_UNSIGNED;
  428|      0|        break;
  429|      4|      case 'c':
  430|      4|        vto[i].type = FORMAT_INT;
  431|      4|        flags |= FLAGS_CHAR;
  432|      4|        break;
  433|      0|      case 'f':
  434|      0|        vto[i].type = FORMAT_DOUBLE;
  435|      0|        break;
  436|      0|      case 'e':
  437|      0|        vto[i].type = FORMAT_DOUBLE;
  438|      0|        flags |= FLAGS_FLOATE;
  439|      0|        break;
  440|      0|      case 'E':
  441|      0|        vto[i].type = FORMAT_DOUBLE;
  442|      0|        flags |= FLAGS_FLOATE|FLAGS_UPPER;
  443|      0|        break;
  444|      0|      case 'g':
  445|      0|        vto[i].type = FORMAT_DOUBLE;
  446|      0|        flags |= FLAGS_FLOATG;
  447|      0|        break;
  448|      0|      case 'G':
  449|      0|        vto[i].type = FORMAT_DOUBLE;
  450|      0|        flags |= FLAGS_FLOATG|FLAGS_UPPER;
  451|      0|        break;
  452|      0|      default:
  453|      0|        vto[i].type = FORMAT_UNKNOWN;
  454|      0|        break;
  455|  52.1k|      } /* switch */
  456|       |
  457|  52.1k|      vto[i].flags = flags;
  458|  52.1k|      vto[i].width = width;
  459|  52.1k|      vto[i].precision = precision;
  460|       |
  461|  52.1k|      if(flags & FLAGS_WIDTHPARAM) {
  462|       |        /* we have the width specified from a parameter, so we make that
  463|       |           parameter's info setup properly */
  464|      0|        long k = width - 1;
  465|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  466|       |          /* out of allowed range */
  467|      0|          return 1;
  468|      0|        vto[i].width = k;
  469|      0|        vto[k].type = FORMAT_WIDTH;
  470|      0|        vto[k].flags = FLAGS_NEW;
  471|       |        /* can't use width or precision of width! */
  472|      0|        vto[k].width = 0;
  473|      0|        vto[k].precision = 0;
  474|      0|      }
  475|  52.1k|      if(flags & FLAGS_PRECPARAM) {
  476|       |        /* we have the precision specified from a parameter, so we make that
  477|       |           parameter's info setup properly */
  478|      0|        long k = precision - 1;
  479|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  480|       |          /* out of allowed range */
  481|      0|          return 1;
  482|      0|        vto[i].precision = k;
  483|      0|        vto[k].type = FORMAT_WIDTH;
  484|      0|        vto[k].flags = FLAGS_NEW;
  485|       |        /* can't use width or precision of width! */
  486|      0|        vto[k].width = 0;
  487|      0|        vto[k].precision = 0;
  488|      0|      }
  489|  52.1k|      *endpos++ = fmt + ((*fmt == '\0') ? 0 : 1); /* end of this sequence */
  490|  52.1k|    }
  491|   147k|  }
  492|       |
  493|       |  /* Read the arg list parameters into our data list */
  494|  91.3k|  for(i = 0; i<max_param; i++) {
  495|       |    /* Width/precision arguments must be read before the main argument
  496|       |       they are attached to */
  497|  52.1k|    if(vto[i].flags & FLAGS_WIDTHPARAM) {
  498|      0|      vto[vto[i].width].data.num.as_signed =
  499|      0|        (mp_intmax_t)va_arg(arglist, int);
  500|      0|    }
  501|  52.1k|    if(vto[i].flags & FLAGS_PRECPARAM) {
  502|      0|      vto[vto[i].precision].data.num.as_signed =
  503|      0|        (mp_intmax_t)va_arg(arglist, int);
  504|      0|    }
  505|       |
  506|  52.1k|    switch(vto[i].type) {
  507|  14.2k|    case FORMAT_STRING:
  508|  14.2k|      vto[i].data.str = va_arg(arglist, char *);
  509|  14.2k|      break;
  510|       |
  511|      0|    case FORMAT_INTPTR:
  512|      0|    case FORMAT_UNKNOWN:
  513|      0|    case FORMAT_PTR:
  514|      0|      vto[i].data.ptr = va_arg(arglist, void *);
  515|      0|      break;
  516|       |
  517|  37.8k|    case FORMAT_INT:
  518|  37.8k|#ifdef HAVE_LONG_LONG_TYPE
  519|  37.8k|      if((vto[i].flags & FLAGS_LONGLONG) && (vto[i].flags & FLAGS_UNSIGNED))
  520|      0|        vto[i].data.num.as_unsigned =
  521|      0|          (mp_uintmax_t)va_arg(arglist, mp_uintmax_t);
  522|  37.8k|      else if(vto[i].flags & FLAGS_LONGLONG)
  523|      0|        vto[i].data.num.as_signed =
  524|      0|          (mp_intmax_t)va_arg(arglist, mp_intmax_t);
  525|  37.8k|      else
  526|  37.8k|#endif
  527|  37.8k|      {
  528|  37.8k|        if((vto[i].flags & FLAGS_LONG) && (vto[i].flags & FLAGS_UNSIGNED))
  529|      0|          vto[i].data.num.as_unsigned =
  530|      0|            (mp_uintmax_t)va_arg(arglist, unsigned long);
  531|  37.8k|        else if(vto[i].flags & FLAGS_LONG)
  532|  2.30k|          vto[i].data.num.as_signed =
  533|  2.30k|            (mp_intmax_t)va_arg(arglist, long);
  534|  35.5k|        else if(vto[i].flags & FLAGS_UNSIGNED)
  535|  35.5k|          vto[i].data.num.as_unsigned =
  536|  35.5k|            (mp_uintmax_t)va_arg(arglist, unsigned int);
  537|      9|        else
  538|      9|          vto[i].data.num.as_signed =
  539|      9|            (mp_intmax_t)va_arg(arglist, int);
  540|  37.8k|      }
  541|  37.8k|      break;
  542|       |
  543|      0|    case FORMAT_DOUBLE:
  544|      0|      vto[i].data.dnum = va_arg(arglist, double);
  545|      0|      break;
  546|       |
  547|      0|    case FORMAT_WIDTH:
  548|       |      /* Argument has been read. Silently convert it into an integer
  549|       |       * for later use
  550|       |       */
  551|      0|      vto[i].type = FORMAT_INT;
  552|      0|      break;
  553|       |
  554|      0|    default:
  555|      0|      break;
  556|  52.1k|    }
  557|  52.1k|  }
  558|       |
  559|  39.1k|  return 0;
  560|       |
  561|  39.1k|}
mprintf.c:dprintf_IsQualifierNoDollar:
  195|  87.7k|{
  196|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  197|       |  if(!strncmp(fmt, "I32", 3) || !strncmp(fmt, "I64", 3)) {
  198|       |    return TRUE;
  199|       |  }
  200|       |#endif
  201|       |
  202|  87.7k|  switch(*fmt) {
  203|      0|  case '-': case '+': case ' ': case '#': case '.':
  204|  33.2k|  case '0': case '1': case '2': case '3': case '4':
  205|  33.2k|  case '5': case '6': case '7': case '8': case '9':
  206|  35.5k|  case 'h': case 'l': case 'L': case 'z': case 'q':
  207|  35.5k|  case '*': case 'O':
  208|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  209|       |  case 'I':
  210|       |#endif
  211|  35.5k|    return TRUE;
  212|       |
  213|  52.1k|  default:
  214|  52.1k|    return FALSE;
  215|  87.7k|  }
  216|  87.7k|}
mprintf.c:dprintf_DollarString:
  178|   104k|{
  179|   104k|  int number = 0;
  180|   237k|  while(ISDIGIT(*input)) {
  181|   133k|    if(number < MAX_PARAMETERS) {
  182|   133k|      number *= 10;
  183|   133k|      number += *input - '0';
  184|   133k|    }
  185|   133k|    input++;
  186|   133k|  }
  187|   104k|  if(number <= MAX_PARAMETERS && ('$' == *input)) {
  188|      0|    *end = ++input;
  189|      0|    return number;
  190|      0|  }
  191|   104k|  return 0;
  192|   104k|}
mprintf.c:addbyter:
  993|   136k|{
  994|   136k|  struct nsprintf *infop = (struct nsprintf *)data;
  995|   136k|  unsigned char outc = (unsigned char)output;
  996|       |
  997|   136k|  if(infop->length < infop->max) {
  998|       |    /* only do this if we haven't reached max length yet */
  999|   136k|    infop->buffer[0] = outc; /* store */
 1000|   136k|    infop->buffer++; /* increase pointer */
 1001|   136k|    infop->length++; /* we are now one byte larger */
 1002|   136k|    return outc;     /* fputc() returns like this on success */
 1003|   136k|  }
 1004|      0|  return -1;
 1005|   136k|}
mprintf.c:alloc_addbyter:
 1043|  81.3k|{
 1044|  81.3k|  struct asprintf *infop = (struct asprintf *)data;
 1045|  81.3k|  unsigned char outc = (unsigned char)output;
 1046|       |
 1047|  81.3k|  if(Curl_dyn_addn(infop->b, &outc, 1)) {
 1048|      0|    infop->fail = 1;
 1049|      0|    return -1; /* fail */
 1050|      0|  }
 1051|  81.3k|  return outc; /* fputc() returns like this on success */
 1052|  81.3k|}

Curl_multi_handle:
  357|    783|{
  358|    783|  struct Curl_multi *multi = calloc(1, sizeof(struct Curl_multi));
  359|       |
  360|    783|  if(!multi)
  361|      0|    return NULL;
  362|       |
  363|    783|  multi->magic = CURL_MULTI_HANDLE;
  364|       |
  365|    783|  if(Curl_mk_dnscache(&multi->hostcache))
  366|      0|    goto error;
  367|       |
  368|    783|  if(sh_init(&multi->sockhash, hashsize))
  369|      0|    goto error;
  370|       |
  371|    783|  if(Curl_conncache_init(&multi->conn_cache, chashsize))
  372|      0|    goto error;
  373|       |
  374|    783|  Curl_llist_init(&multi->msglist, NULL);
  375|    783|  Curl_llist_init(&multi->pending, NULL);
  376|       |
  377|    783|  multi->multiplexing = TRUE;
  378|       |
  379|       |  /* -1 means it not set by user, use the default value */
  380|    783|  multi->maxconnects = -1;
  381|    783|  multi->max_concurrent_streams = 100;
  382|    783|  multi->ipv6_works = Curl_ipv6works(NULL);
  383|       |
  384|       |#ifdef USE_WINSOCK
  385|       |  multi->wsa_event = WSACreateEvent();
  386|       |  if(multi->wsa_event == WSA_INVALID_EVENT)
  387|       |    goto error;
  388|       |#else
  389|    783|#ifdef ENABLE_WAKEUP
  390|    783|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, multi->wakeup_pair) < 0) {
  391|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  392|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  393|      0|  }
  394|    783|  else if(curlx_nonblock(multi->wakeup_pair[0], TRUE) < 0 ||
  395|    783|          curlx_nonblock(multi->wakeup_pair[1], TRUE) < 0) {
  396|      0|    sclose(multi->wakeup_pair[0]);
  397|      0|    sclose(multi->wakeup_pair[1]);
  398|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  399|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  400|      0|  }
  401|    783|#endif
  402|    783|#endif
  403|       |
  404|    783|  return multi;
  405|       |
  406|      0|  error:
  407|       |
  408|      0|  Curl_hash_destroy(&multi->sockhash);
  409|      0|  Curl_hash_destroy(&multi->hostcache);
  410|      0|  Curl_conncache_destroy(&multi->conn_cache);
  411|      0|  Curl_llist_destroy(&multi->msglist, NULL);
  412|      0|  Curl_llist_destroy(&multi->pending, NULL);
  413|       |
  414|      0|  free(multi);
  415|      0|  return NULL;
  416|    783|}
curl_multi_init:
  419|    783|{
  420|    783|  return Curl_multi_handle(CURL_SOCKET_HASH_TABLE_SIZE,
  421|    783|                           CURL_CONNECTION_HASH_SIZE);
  422|    783|}
curl_multi_add_handle:
  426|    783|{
  427|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  428|    783|  if(!GOOD_MULTI_HANDLE(multi))
  429|      0|    return CURLM_BAD_HANDLE;
  430|       |
  431|       |  /* Verify that we got a somewhat good easy handle too */
  432|    783|  if(!GOOD_EASY_HANDLE(data))
  433|      0|    return CURLM_BAD_EASY_HANDLE;
  434|       |
  435|       |  /* Prevent users from adding same easy handle more than once and prevent
  436|       |     adding to more than one multi stack */
  437|    783|  if(data->multi)
  438|      0|    return CURLM_ADDED_ALREADY;
  439|       |
  440|    783|  if(multi->in_callback)
  441|      0|    return CURLM_RECURSIVE_API_CALL;
  442|       |
  443|       |  /* Initialize timeout list for this handle */
  444|    783|  Curl_llist_init(&data->state.timeoutlist, NULL);
  445|       |
  446|       |  /*
  447|       |   * No failure allowed in this function beyond this point. And no
  448|       |   * modification of easy nor multi handle allowed before this except for
  449|       |   * potential multi's connection cache growing which won't be undone in this
  450|       |   * function no matter what.
  451|       |   */
  452|    783|  if(data->set.errorbuffer)
  453|      0|    data->set.errorbuffer[0] = 0;
  454|       |
  455|       |  /* set the easy handle */
  456|    783|  multistate(data, MSTATE_INIT);
  457|       |
  458|       |  /* for multi interface connections, we share DNS cache automatically if the
  459|       |     easy handle's one is currently not set. */
  460|    783|  if(!data->dns.hostcache ||
  461|    783|     (data->dns.hostcachetype == HCACHE_NONE)) {
  462|    783|    data->dns.hostcache = &multi->hostcache;
  463|    783|    data->dns.hostcachetype = HCACHE_MULTI;
  464|    783|  }
  465|       |
  466|       |  /* Point to the shared or multi handle connection cache */
  467|    783|  if(data->share && (data->share->specifier & (1<< CURL_LOCK_DATA_CONNECT)))
  468|      0|    data->state.conn_cache = &data->share->conn_cache;
  469|    783|  else
  470|    783|    data->state.conn_cache = &multi->conn_cache;
  471|    783|  data->state.lastconnect_id = -1;
  472|       |
  473|       |#ifdef USE_LIBPSL
  474|       |  /* Do the same for PSL. */
  475|       |  if(data->share && (data->share->specifier & (1 << CURL_LOCK_DATA_PSL)))
  476|       |    data->psl = &data->share->psl;
  477|       |  else
  478|       |    data->psl = &multi->psl;
  479|       |#endif
  480|       |
  481|       |  /* We add the new entry last in the list. */
  482|    783|  data->next = NULL; /* end of the line */
  483|    783|  if(multi->easyp) {
  484|      0|    struct Curl_easy *last = multi->easylp;
  485|      0|    last->next = data;
  486|      0|    data->prev = last;
  487|      0|    multi->easylp = data; /* the new last node */
  488|      0|  }
  489|    783|  else {
  490|       |    /* first node, make prev NULL! */
  491|    783|    data->prev = NULL;
  492|    783|    multi->easylp = multi->easyp = data; /* both first and last */
  493|    783|  }
  494|       |
  495|       |  /* make the Curl_easy refer back to this multi handle */
  496|    783|  data->multi = multi;
  497|       |
  498|       |  /* Set the timeout for this handle to expire really soon so that it will
  499|       |     be taken care of even when this handle is added in the midst of operation
  500|       |     when only the curl_multi_socket() API is used. During that flow, only
  501|       |     sockets that time-out or have actions will be dealt with. Since this
  502|       |     handle has no action yet, we make sure it times out to get things to
  503|       |     happen. */
  504|    783|  Curl_expire(data, 0, EXPIRE_RUN_NOW);
  505|       |
  506|       |  /* increase the node-counter */
  507|    783|  multi->num_easy++;
  508|       |
  509|       |  /* increase the alive-counter */
  510|    783|  multi->num_alive++;
  511|       |
  512|       |  /* A somewhat crude work-around for a little glitch in Curl_update_timer()
  513|       |     that happens if the lastcall time is set to the same time when the handle
  514|       |     is removed as when the next handle is added, as then the check in
  515|       |     Curl_update_timer() that prevents calling the application multiple times
  516|       |     with the same timer info will not trigger and then the new handle's
  517|       |     timeout will not be notified to the app.
  518|       |
  519|       |     The work-around is thus simply to clear the 'lastcall' variable to force
  520|       |     Curl_update_timer() to always trigger a callback to the app when a new
  521|       |     easy handle is added */
  522|    783|  memset(&multi->timer_lastcall, 0, sizeof(multi->timer_lastcall));
  523|       |
  524|    783|  CONNCACHE_LOCK(data);
  525|       |  /* The closure handle only ever has default timeouts set. To improve the
  526|       |     state somewhat we clone the timeouts from each added handle so that the
  527|       |     closure handle always has the same timeouts as the most recently added
  528|       |     easy handle. */
  529|    783|  data->state.conn_cache->closure_handle->set.timeout = data->set.timeout;
  530|    783|  data->state.conn_cache->closure_handle->set.server_response_timeout =
  531|    783|    data->set.server_response_timeout;
  532|    783|  data->state.conn_cache->closure_handle->set.no_signal =
  533|    783|    data->set.no_signal;
  534|    783|  CONNCACHE_UNLOCK(data);
  535|       |
  536|    783|  Curl_update_timer(multi);
  537|    783|  return CURLM_OK;
  538|    783|}
curl_multi_remove_handle:
  718|    783|{
  719|    783|  struct Curl_easy *easy = data;
  720|    783|  bool premature;
  721|    783|  struct Curl_llist_element *e;
  722|       |
  723|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  724|    783|  if(!GOOD_MULTI_HANDLE(multi))
  725|      0|    return CURLM_BAD_HANDLE;
  726|       |
  727|       |  /* Verify that we got a somewhat good easy handle too */
  728|    783|  if(!GOOD_EASY_HANDLE(data))
  729|      0|    return CURLM_BAD_EASY_HANDLE;
  730|       |
  731|       |  /* Prevent users from trying to remove same easy handle more than once */
  732|    783|  if(!data->multi)
  733|      0|    return CURLM_OK; /* it is already removed so let's say it is fine! */
  734|       |
  735|       |  /* Prevent users from trying to remove an easy handle from the wrong multi */
  736|    783|  if(data->multi != multi)
  737|      0|    return CURLM_BAD_EASY_HANDLE;
  738|       |
  739|    783|  if(multi->in_callback)
  740|      0|    return CURLM_RECURSIVE_API_CALL;
  741|       |
  742|    783|  premature = (data->mstate < MSTATE_COMPLETED) ? TRUE : FALSE;
  743|       |
  744|       |  /* If the 'state' is not INIT or COMPLETED, we might need to do something
  745|       |     nice to put the easy_handle in a good known state when this returns. */
  746|    783|  if(premature) {
  747|       |    /* this handle is "alive" so we need to count down the total number of
  748|       |       alive connections when this is removed */
  749|    109|    multi->num_alive--;
  750|    109|  }
  751|       |
  752|    783|  if(data->conn &&
  753|    783|     data->mstate > MSTATE_DO &&
  754|    783|     data->mstate < MSTATE_COMPLETED) {
  755|       |    /* Set connection owner so that the DONE function closes it.  We can
  756|       |       safely do this here since connection is killed. */
  757|     13|    streamclose(data->conn, "Removed with partial response");
  758|     13|  }
  759|       |
  760|    783|  if(data->conn) {
  761|       |    /* multi_done() clears the association between the easy handle and the
  762|       |       connection.
  763|       |
  764|       |       Note that this ignores the return code simply because there's
  765|       |       nothing really useful to do with it anyway! */
  766|    109|    (void)multi_done(data, data->result, premature);
  767|    109|  }
  768|       |
  769|       |  /* The timer must be shut down before data->multi is set to NULL, else the
  770|       |     timenode will remain in the splay tree after curl_easy_cleanup is
  771|       |     called. Do it after multi_done() in case that sets another time! */
  772|    783|  Curl_expire_clear(data);
  773|       |
  774|    783|  if(data->connect_queue.ptr)
  775|       |    /* the handle was in the pending list waiting for an available connection,
  776|       |       so go ahead and remove it */
  777|      0|    Curl_llist_remove(&multi->pending, &data->connect_queue, NULL);
  778|       |
  779|    783|  if(data->dns.hostcachetype == HCACHE_MULTI) {
  780|       |    /* stop using the multi handle's DNS cache, *after* the possible
  781|       |       multi_done() call above */
  782|    783|    data->dns.hostcache = NULL;
  783|    783|    data->dns.hostcachetype = HCACHE_NONE;
  784|    783|  }
  785|       |
  786|    783|  Curl_wildcard_dtor(&data->wildcard);
  787|       |
  788|       |  /* destroy the timeout list that is held in the easy handle, do this *after*
  789|       |     multi_done() as that may actually call Curl_expire that uses this */
  790|    783|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  791|       |
  792|       |  /* change state without using multistate(), only to make singlesocket() do
  793|       |     what we want */
  794|    783|  data->mstate = MSTATE_COMPLETED;
  795|    783|  singlesocket(multi, easy); /* to let the application know what sockets that
  796|       |                                vanish with this handle */
  797|       |
  798|       |  /* Remove the association between the connection and the handle */
  799|    783|  Curl_detach_connnection(data);
  800|       |
  801|    783|  if(data->state.lastconnect_id != -1) {
  802|       |    /* Mark any connect-only connection for closure */
  803|     28|    Curl_conncache_foreach(data, data->state.conn_cache,
  804|     28|                           NULL, close_connect_only);
  805|     28|  }
  806|       |
  807|       |#ifdef USE_LIBPSL
  808|       |  /* Remove the PSL association. */
  809|       |  if(data->psl == &multi->psl)
  810|       |    data->psl = NULL;
  811|       |#endif
  812|       |
  813|       |  /* as this was using a shared connection cache we clear the pointer to that
  814|       |     since we're not part of that multi handle anymore */
  815|    783|  data->state.conn_cache = NULL;
  816|       |
  817|    783|  data->multi = NULL; /* clear the association to this multi handle */
  818|       |
  819|       |  /* make sure there's no pending message in the queue sent from this easy
  820|       |     handle */
  821|       |
  822|    783|  for(e = multi->msglist.head; e; e = e->next) {
  823|    674|    struct Curl_message *msg = e->ptr;
  824|       |
  825|    674|    if(msg->extmsg.easy_handle == easy) {
  826|    674|      Curl_llist_remove(&multi->msglist, e, NULL);
  827|       |      /* there can only be one from this specific handle */
  828|    674|      break;
  829|    674|    }
  830|    674|  }
  831|       |
  832|       |  /* Remove from the pending list if it is there. Otherwise this will
  833|       |     remain on the pending list forever due to the state change. */
  834|    783|  for(e = multi->pending.head; e; e = e->next) {
  835|      0|    struct Curl_easy *curr_data = e->ptr;
  836|       |
  837|      0|    if(curr_data == data) {
  838|      0|      Curl_llist_remove(&multi->pending, e, NULL);
  839|      0|      break;
  840|      0|    }
  841|      0|  }
  842|       |
  843|       |  /* make the previous node point to our next */
  844|    783|  if(data->prev)
  845|      0|    data->prev->next = data->next;
  846|    783|  else
  847|    783|    multi->easyp = data->next; /* point to first node */
  848|       |
  849|       |  /* make our next point to our previous node */
  850|    783|  if(data->next)
  851|      0|    data->next->prev = data->prev;
  852|    783|  else
  853|    783|    multi->easylp = data->prev; /* point to last node */
  854|       |
  855|       |  /* NOTE NOTE NOTE
  856|       |     We do not touch the easy handle here! */
  857|    783|  multi->num_easy--; /* one less to care about now */
  858|       |
  859|    783|  process_pending_handles(multi);
  860|       |
  861|    783|  Curl_update_timer(multi);
  862|    783|  return CURLM_OK;
  863|    783|}
Curl_detach_connnection:
  878|  4.50k|{
  879|  4.50k|  struct connectdata *conn = data->conn;
  880|  4.50k|  if(conn) {
  881|  1.21k|    Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);
  882|  1.21k|    Curl_ssl_detach_conn(data, conn);
  883|  1.21k|  }
  884|  4.50k|  data->conn = NULL;
  885|  4.50k|}
Curl_attach_connnection:
  894|  1.21k|{
  895|  1.21k|  DEBUGASSERT(!data->conn);
  896|  1.21k|  DEBUGASSERT(conn);
  897|  1.21k|  data->conn = conn;
  898|  1.21k|  Curl_llist_insert_next(&conn->easyq, conn->easyq.tail, data,
  899|  1.21k|                         &data->conn_queue);
  900|  1.21k|  if(conn->handler->attach)
  901|      0|    conn->handler->attach(data, conn);
  902|  1.21k|  Curl_ssl_associate_conn(data, conn);
  903|  1.21k|}
curl_multi_fdset:
 1027|    733|{
 1028|       |  /* Scan through all the easy handles to get the file descriptors set.
 1029|       |     Some easy handles may not have connected to the remote host yet,
 1030|       |     and then we must make sure that is done. */
 1031|    733|  struct Curl_easy *data;
 1032|    733|  int this_max_fd = -1;
 1033|    733|  curl_socket_t sockbunch[MAX_SOCKSPEREASYHANDLE];
 1034|    733|  int i;
 1035|    733|  (void)exc_fd_set; /* not used */
 1036|       |
 1037|    733|  if(!GOOD_MULTI_HANDLE(multi))
 1038|      0|    return CURLM_BAD_HANDLE;
 1039|       |
 1040|    733|  if(multi->in_callback)
 1041|      0|    return CURLM_RECURSIVE_API_CALL;
 1042|       |
 1043|    733|  data = multi->easyp;
 1044|  1.46k|  while(data) {
 1045|    733|    int bitmap;
 1046|       |#ifdef __clang_analyzer_
 1047|       |    /* to prevent "The left operand of '>=' is a garbage value" warnings */
 1048|       |    memset(sockbunch, 0, sizeof(sockbunch));
 1049|       |#endif
 1050|    733|    bitmap = multi_getsock(data, sockbunch);
 1051|       |
 1052|  1.46k|    for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++) {
 1053|  1.46k|      curl_socket_t s = CURL_SOCKET_BAD;
 1054|       |
 1055|  1.46k|      if((bitmap & GETSOCK_READSOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1056|    733|        if(!FDSET_SOCK(sockbunch[i]))
 1057|       |          /* pretend it doesn't exist */
 1058|      0|          continue;
 1059|    733|        FD_SET(sockbunch[i], read_fd_set);
 1060|    733|        s = sockbunch[i];
 1061|    733|      }
 1062|  1.46k|      if((bitmap & GETSOCK_WRITESOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1063|      0|        if(!FDSET_SOCK(sockbunch[i]))
 1064|       |          /* pretend it doesn't exist */
 1065|      0|          continue;
 1066|      0|        FD_SET(sockbunch[i], write_fd_set);
 1067|      0|        s = sockbunch[i];
 1068|      0|      }
 1069|  1.46k|      if(s == CURL_SOCKET_BAD)
 1070|       |        /* this socket is unused, break out of loop */
 1071|    733|        break;
 1072|    733|      if((int)s > this_max_fd)
 1073|    733|        this_max_fd = (int)s;
 1074|    733|    }
 1075|       |
 1076|    733|    data = data->next; /* check next handle */
 1077|    733|  }
 1078|       |
 1079|    733|  *max_fd = this_max_fd;
 1080|       |
 1081|    733|  return CURLM_OK;
 1082|    733|}
Curl_preconnect:
 1716|  1.21k|{
 1717|  1.21k|  if(!data->state.buffer) {
 1718|    688|    data->state.buffer = malloc(data->set.buffer_size + 1);
 1719|    688|    if(!data->state.buffer)
 1720|      0|      return CURLE_OUT_OF_MEMORY;
 1721|    688|  }
 1722|  1.21k|  return CURLE_OK;
 1723|  1.21k|}
curl_multi_perform:
 2572|  1.40k|{
 2573|  1.40k|  struct Curl_easy *data;
 2574|  1.40k|  CURLMcode returncode = CURLM_OK;
 2575|  1.40k|  struct Curl_tree *t;
 2576|  1.40k|  struct curltime now = Curl_now();
 2577|       |
 2578|  1.40k|  if(!GOOD_MULTI_HANDLE(multi))
 2579|      0|    return CURLM_BAD_HANDLE;
 2580|       |
 2581|  1.40k|  if(multi->in_callback)
 2582|      0|    return CURLM_RECURSIVE_API_CALL;
 2583|       |
 2584|  1.40k|  data = multi->easyp;
 2585|  2.81k|  while(data) {
 2586|  1.40k|    CURLMcode result;
 2587|  1.40k|    SIGPIPE_VARIABLE(pipe_st);
 2588|       |
 2589|  1.40k|    sigpipe_ignore(data, &pipe_st);
 2590|  1.40k|    result = multi_runsingle(multi, &now, data);
 2591|  1.40k|    sigpipe_restore(&pipe_st);
 2592|       |
 2593|  1.40k|    if(result)
 2594|      0|      returncode = result;
 2595|       |
 2596|  1.40k|    data = data->next; /* operate on next handle */
 2597|  1.40k|  }
 2598|       |
 2599|       |  /*
 2600|       |   * Simply remove all expired timers from the splay since handles are dealt
 2601|       |   * with unconditionally by this function and curl_multi_timeout() requires
 2602|       |   * that already passed/handled expire times are removed from the splay.
 2603|       |   *
 2604|       |   * It is important that the 'now' value is set at the entry of this function
 2605|       |   * and not for the current time as it may have ticked a little while since
 2606|       |   * then and then we risk this loop to remove timers that actually have not
 2607|       |   * been handled!
 2608|       |   */
 2609|  1.63k|  do {
 2610|  1.63k|    multi->timetree = Curl_splaygetbest(now, multi->timetree, &t);
 2611|  1.63k|    if(t)
 2612|       |      /* the removed may have another timeout in queue */
 2613|    228|      (void)add_next_timeout(now, multi, t->payload);
 2614|       |
 2615|  1.63k|  } while(t);
 2616|       |
 2617|  1.40k|  *running_handles = multi->num_alive;
 2618|       |
 2619|  1.40k|  if(CURLM_OK >= returncode)
 2620|  1.40k|    Curl_update_timer(multi);
 2621|       |
 2622|  1.40k|  return returncode;
 2623|  1.40k|}
curl_multi_cleanup:
 2626|    783|{
 2627|    783|  struct Curl_easy *data;
 2628|    783|  struct Curl_easy *nextdata;
 2629|       |
 2630|    783|  if(GOOD_MULTI_HANDLE(multi)) {
 2631|    783|    if(multi->in_callback)
 2632|      0|      return CURLM_RECURSIVE_API_CALL;
 2633|       |
 2634|    783|    multi->magic = 0; /* not good anymore */
 2635|       |
 2636|       |    /* First remove all remaining easy handles */
 2637|    783|    data = multi->easyp;
 2638|    783|    while(data) {
 2639|      0|      nextdata = data->next;
 2640|      0|      if(!data->state.done && data->conn)
 2641|       |        /* if DONE was never called for this handle */
 2642|      0|        (void)multi_done(data, CURLE_OK, TRUE);
 2643|      0|      if(data->dns.hostcachetype == HCACHE_MULTI) {
 2644|       |        /* clear out the usage of the shared DNS cache */
 2645|      0|        Curl_hostcache_clean(data, data->dns.hostcache);
 2646|      0|        data->dns.hostcache = NULL;
 2647|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2648|      0|      }
 2649|       |
 2650|       |      /* Clear the pointer to the connection cache */
 2651|      0|      data->state.conn_cache = NULL;
 2652|      0|      data->multi = NULL; /* clear the association */
 2653|       |
 2654|       |#ifdef USE_LIBPSL
 2655|       |      if(data->psl == &multi->psl)
 2656|       |        data->psl = NULL;
 2657|       |#endif
 2658|       |
 2659|      0|      data = nextdata;
 2660|      0|    }
 2661|       |
 2662|       |    /* Close all the connections in the connection cache */
 2663|    783|    Curl_conncache_close_all_connections(&multi->conn_cache);
 2664|       |
 2665|    783|    Curl_hash_destroy(&multi->sockhash);
 2666|    783|    Curl_conncache_destroy(&multi->conn_cache);
 2667|    783|    Curl_llist_destroy(&multi->msglist, NULL);
 2668|    783|    Curl_llist_destroy(&multi->pending, NULL);
 2669|       |
 2670|    783|    Curl_hash_destroy(&multi->hostcache);
 2671|    783|    Curl_psl_destroy(&multi->psl);
 2672|       |
 2673|       |#ifdef USE_WINSOCK
 2674|       |    WSACloseEvent(multi->wsa_event);
 2675|       |#else
 2676|    783|#ifdef ENABLE_WAKEUP
 2677|    783|    sclose(multi->wakeup_pair[0]);
 2678|    783|    sclose(multi->wakeup_pair[1]);
 2679|    783|#endif
 2680|    783|#endif
 2681|    783|    free(multi);
 2682|       |
 2683|    783|    return CURLM_OK;
 2684|    783|  }
 2685|      0|  return CURLM_BAD_HANDLE;
 2686|    783|}
Curl_multi_closed:
 2899|    527|{
 2900|    527|  if(data) {
 2901|       |    /* if there's still an easy handle associated with this connection */
 2902|    524|    struct Curl_multi *multi = data->multi;
 2903|    524|    if(multi) {
 2904|       |      /* this is set if this connection is part of a handle that is added to
 2905|       |         a multi handle, and only then this is necessary */
 2906|    496|      struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);
 2907|       |
 2908|    496|      if(entry) {
 2909|      0|        if(multi->socket_cb)
 2910|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2911|      0|                           multi->socket_userp,
 2912|      0|                           entry->socketp);
 2913|       |
 2914|       |        /* now remove it from the socket hash */
 2915|      0|        sh_delentry(entry, &multi->sockhash, s);
 2916|      0|      }
 2917|    496|    }
 2918|    524|  }
 2919|    527|}
Curl_update_timer:
 3259|  2.97k|{
 3260|  2.97k|  long timeout_ms;
 3261|       |
 3262|  2.97k|  if(!multi->timer_cb)
 3263|  2.97k|    return;
 3264|      0|  if(multi_timeout(multi, &timeout_ms)) {
 3265|      0|    return;
 3266|      0|  }
 3267|      0|  if(timeout_ms < 0) {
 3268|      0|    static const struct curltime none = {0, 0};
 3269|      0|    if(Curl_splaycomparekeys(none, multi->timer_lastcall)) {
 3270|      0|      multi->timer_lastcall = none;
 3271|       |      /* there's no timeout now but there was one previously, tell the app to
 3272|       |         disable it */
 3273|      0|      multi->timer_cb(multi, -1, multi->timer_userp);
 3274|      0|      return;
 3275|      0|    }
 3276|      0|    return;
 3277|      0|  }
 3278|       |
 3279|       |  /* When multi_timeout() is done, multi->timetree points to the node with the
 3280|       |   * timeout we got the (relative) time-out time for. We can thus easily check
 3281|       |   * if this is the same (fixed) time as we got in a previous call and then
 3282|       |   * avoid calling the callback again. */
 3283|      0|  if(Curl_splaycomparekeys(multi->timetree->key, multi->timer_lastcall) == 0)
 3284|      0|    return;
 3285|       |
 3286|      0|  multi->timer_lastcall = multi->timetree->key;
 3287|       |
 3288|      0|  multi->timer_cb(multi, timeout_ms, multi->timer_userp);
 3289|      0|}
Curl_expire:
 3366|  1.99k|{
 3367|  1.99k|  struct Curl_multi *multi = data->multi;
 3368|  1.99k|  struct curltime *nowp = &data->state.expiretime;
 3369|  1.99k|  struct curltime set;
 3370|       |
 3371|       |  /* this is only interesting while there is still an associated multi struct
 3372|       |     remaining! */
 3373|  1.99k|  if(!multi)
 3374|      0|    return;
 3375|       |
 3376|  1.99k|  DEBUGASSERT(id < EXPIRE_LAST);
 3377|       |
 3378|  1.99k|  set = Curl_now();
 3379|  1.99k|  set.tv_sec += (time_t)(milli/1000); /* might be a 64 to 32 bit conversion */
 3380|  1.99k|  set.tv_usec += (unsigned int)(milli%1000)*1000;
 3381|       |
 3382|  1.99k|  if(set.tv_usec >= 1000000) {
 3383|    320|    set.tv_sec++;
 3384|    320|    set.tv_usec -= 1000000;
 3385|    320|  }
 3386|       |
 3387|       |  /* Remove any timer with the same id just in case. */
 3388|  1.99k|  multi_deltimeout(data, id);
 3389|       |
 3390|       |  /* Add it to the timer list.  It must stay in the list until it has expired
 3391|       |     in case we need to recompute the minimum timer later. */
 3392|  1.99k|  multi_addtimeout(data, &set, id);
 3393|       |
 3394|  1.99k|  if(nowp->tv_sec || nowp->tv_usec) {
 3395|       |    /* This means that the struct is added as a node in the splay tree.
 3396|       |       Compare if the new time is earlier, and only remove-old/add-new if it
 3397|       |       is. */
 3398|  1.21k|    timediff_t diff = Curl_timediff(set, *nowp);
 3399|  1.21k|    int rc;
 3400|       |
 3401|  1.21k|    if(diff > 0) {
 3402|       |      /* The current splay tree entry is sooner than this new expiry time.
 3403|       |         We don't need to update our splay tree entry. */
 3404|  1.21k|      return;
 3405|  1.21k|    }
 3406|       |
 3407|       |    /* Since this is an updated time, we must remove the previous entry from
 3408|       |       the splay tree first and then re-add the new value */
 3409|      3|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3410|      3|                          &multi->timetree);
 3411|      3|    if(rc)
 3412|      0|      infof(data, "Internal error removing splay node = %d", rc);
 3413|      3|  }
 3414|       |
 3415|       |  /* Indicate that we are in the splay tree and insert the new timer expiry
 3416|       |     value since it is our local minimum. */
 3417|    786|  *nowp = set;
 3418|    786|  data->state.timenode.payload = data;
 3419|    786|  multi->timetree = Curl_splayinsert(*nowp, multi->timetree,
 3420|    786|                                     &data->state.timenode);
 3421|    786|}
Curl_expire_clear:
 3441|  3.12k|{
 3442|  3.12k|  struct Curl_multi *multi = data->multi;
 3443|  3.12k|  struct curltime *nowp = &data->state.expiretime;
 3444|       |
 3445|       |  /* this is only interesting while there is still an associated multi struct
 3446|       |     remaining! */
 3447|  3.12k|  if(!multi)
 3448|  1.66k|    return;
 3449|       |
 3450|  1.45k|  if(nowp->tv_sec || nowp->tv_usec) {
 3451|       |    /* Since this is an cleared time, we must remove the previous entry from
 3452|       |       the splay tree */
 3453|    783|    struct Curl_llist *list = &data->state.timeoutlist;
 3454|    783|    int rc;
 3455|       |
 3456|    783|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3457|    783|                          &multi->timetree);
 3458|    783|    if(rc)
 3459|      0|      infof(data, "Internal error clearing splay node = %d", rc);
 3460|       |
 3461|       |    /* flush the timeout list too */
 3462|  2.55k|    while(list->size > 0) {
 3463|  1.77k|      Curl_llist_remove(list, list->tail, NULL);
 3464|  1.77k|    }
 3465|       |
 3466|    783|#ifdef DEBUGBUILD
 3467|    783|    infof(data, "Expire cleared (transfer %p)", data);
 3468|    783|#endif
 3469|    783|    nowp->tv_sec = 0;
 3470|    783|    nowp->tv_usec = 0;
 3471|    783|  }
 3472|  1.45k|}
Curl_multi_max_host_connections:
 3496|    688|{
 3497|    688|  return multi ? multi->max_host_connections : 0;
 3498|    688|}
Curl_multi_max_total_connections:
 3501|    688|{
 3502|    688|  return multi ? multi->max_total_connections : 0;
 3503|    688|}
Curl_set_in_callback:
 3545|  2.09k|{
 3546|       |  /* might get called when there is no data pointer! */
 3547|  2.09k|  if(data) {
 3548|  2.09k|    if(data->multi_easy)
 3549|      0|      data->multi_easy->in_callback = value;
 3550|  2.09k|    else if(data->multi)
 3551|  2.09k|      data->multi->in_callback = value;
 3552|  2.09k|  }
 3553|  2.09k|}
multi.c:sh_init:
  336|    783|{
  337|    783|  return Curl_hash_init(hash, hashsize, hash_fd, fd_key_compare,
  338|    783|                        sh_freeentry);
  339|    783|}
multi.c:hash_fd:
  310|    496|{
  311|    496|  curl_socket_t fd = *((curl_socket_t *) key);
  312|    496|  (void) key_length;
  313|       |
  314|    496|  return (fd % slots_num);
  315|    496|}
multi.c:mstate:
  131|  4.27k|{
  132|  4.27k|  CURLMstate oldstate = data->mstate;
  133|  4.27k|  static const init_multistate_func finit[MSTATE_LAST] = {
  134|  4.27k|    NULL,              /* INIT */
  135|  4.27k|    NULL,              /* PENDING */
  136|  4.27k|    Curl_init_CONNECT, /* CONNECT */
  137|  4.27k|    NULL,              /* RESOLVING */
  138|  4.27k|    NULL,              /* CONNECTING */
  139|  4.27k|    NULL,              /* TUNNELING */
  140|  4.27k|    NULL,              /* PROTOCONNECT */
  141|  4.27k|    NULL,              /* PROTOCONNECTING */
  142|  4.27k|    Curl_connect_free, /* DO */
  143|  4.27k|    NULL,              /* DOING */
  144|  4.27k|    NULL,              /* DOING_MORE */
  145|  4.27k|    before_perform,    /* DID */
  146|  4.27k|    NULL,              /* PERFORMING */
  147|  4.27k|    NULL,              /* RATELIMITING */
  148|  4.27k|    NULL,              /* DONE */
  149|  4.27k|    init_completed,    /* COMPLETED */
  150|       |    NULL               /* MSGSENT */
  151|  4.27k|  };
  152|       |
  153|       |#if defined(DEBUGBUILD) && defined(CURL_DISABLE_VERBOSE_STRINGS)
  154|       |  (void) lineno;
  155|       |#endif
  156|       |
  157|  4.27k|  if(oldstate == state)
  158|       |    /* don't bother when the new state is the same as the old state */
  159|    783|    return;
  160|       |
  161|  3.48k|  data->mstate = state;
  162|       |
  163|  3.48k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  164|  3.48k|  if(data->mstate >= MSTATE_PENDING &&
  165|  3.48k|     data->mstate < MSTATE_COMPLETED) {
  166|  2.14k|    long connection_id = -5000;
  167|       |
  168|  2.14k|    if(data->conn)
  169|  1.45k|      connection_id = data->conn->connection_id;
  170|       |
  171|  2.14k|    infof(data,
  172|  2.14k|          "STATE: %s => %s handle %p; line %d (connection #%ld)",
  173|  2.14k|          statename[oldstate], statename[data->mstate],
  174|  2.14k|          (void *)data, lineno, connection_id);
  175|  2.14k|  }
  176|  3.48k|#endif
  177|       |
  178|  3.48k|  if(state == MSTATE_COMPLETED) {
  179|       |    /* changing to COMPLETED means there's one less easy handle 'alive' */
  180|    674|    DEBUGASSERT(data->multi->num_alive > 0);
  181|    674|    data->multi->num_alive--;
  182|    674|  }
  183|       |
  184|       |  /* if this state has an init-function, run it */
  185|  3.48k|  if(finit[state])
  186|  1.45k|    finit[state](data);
  187|  3.48k|}
multi.c:before_perform:
  110|      3|{
  111|      3|  data->req.chunk = FALSE;
  112|      3|  Curl_pgrsTime(data, TIMER_PRETRANSFER);
  113|      3|}
multi.c:init_completed:
  116|    674|{
  117|       |  /* this is a completed transfer */
  118|       |
  119|       |  /* Important: reset the conn pointer so that we don't point to memory
  120|       |     that could be freed anytime */
  121|    674|  Curl_detach_connnection(data);
  122|    674|  Curl_expire_clear(data); /* stop all timers */
  123|    674|}
multi.c:multi_done:
  560|    524|{
  561|    524|  CURLcode result;
  562|    524|  struct connectdata *conn = data->conn;
  563|    524|  unsigned int i;
  564|       |
  565|    524|  DEBUGF(infof(data, "multi_done"));
  566|       |
  567|    524|  if(data->state.done)
  568|       |    /* Stop if multi_done() has already been called */
  569|      0|    return CURLE_OK;
  570|       |
  571|       |  /* Stop the resolver and free its own resources (but not dns_entry yet). */
  572|    524|  Curl_resolver_kill(data);
  573|       |
  574|       |  /* Cleanup possible redirect junk */
  575|    524|  Curl_safefree(data->req.newurl);
  576|    524|  Curl_safefree(data->req.location);
  577|       |
  578|    524|  switch(status) {
  579|      0|  case CURLE_ABORTED_BY_CALLBACK:
  580|      0|  case CURLE_READ_ERROR:
  581|      0|  case CURLE_WRITE_ERROR:
  582|       |    /* When we're aborted due to a callback return code it basically have to
  583|       |       be counted as premature as there is trouble ahead if we don't. We have
  584|       |       many callbacks and protocols work differently, we could potentially do
  585|       |       this more fine-grained in the future. */
  586|      0|    premature = TRUE;
  587|    524|  default:
  588|    524|    break;
  589|    524|  }
  590|       |
  591|       |  /* this calls the protocol-specific function pointer previously set */
  592|    524|  if(conn->handler->done)
  593|    524|    result = conn->handler->done(data, status, premature);
  594|      0|  else
  595|      0|    result = status;
  596|       |
  597|    524|  if(CURLE_ABORTED_BY_CALLBACK != result) {
  598|       |    /* avoid this if we already aborted by callback to avoid this calling
  599|       |       another callback */
  600|    524|    CURLcode rc = Curl_pgrsDone(data);
  601|    524|    if(!result && rc)
  602|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  603|    524|  }
  604|       |
  605|    524|  process_pending_handles(data->multi); /* connection / multiplex */
  606|       |
  607|    524|  CONNCACHE_LOCK(data);
  608|    524|  Curl_detach_connnection(data);
  609|    524|  if(CONN_INUSE(conn)) {
  610|       |    /* Stop if still used. */
  611|      0|    CONNCACHE_UNLOCK(data);
  612|      0|    DEBUGF(infof(data, "Connection still in use %zu, "
  613|      0|                 "no more multi_done now!",
  614|      0|                 conn->easyq.size));
  615|      0|    return CURLE_OK;
  616|      0|  }
  617|       |
  618|    524|  data->state.done = TRUE; /* called just now! */
  619|       |
  620|    524|  if(conn->dns_entry) {
  621|    524|    Curl_resolv_unlock(data, conn->dns_entry); /* done with this */
  622|    524|    conn->dns_entry = NULL;
  623|    524|  }
  624|    524|  Curl_hostcache_prune(data);
  625|    524|  Curl_safefree(data->state.ulbuf);
  626|       |
  627|       |  /* if the transfer was completed in a paused state there can be buffered
  628|       |     data left to free */
  629|    524|  for(i = 0; i < data->state.tempcount; i++) {
  630|      0|    Curl_dyn_free(&data->state.tempwrite[i].b);
  631|      0|  }
  632|    524|  data->state.tempcount = 0;
  633|       |
  634|       |  /* if data->set.reuse_forbid is TRUE, it means the libcurl client has
  635|       |     forced us to close this connection. This is ignored for requests taking
  636|       |     place in a NTLM/NEGOTIATE authentication handshake
  637|       |
  638|       |     if conn->bits.close is TRUE, it means that the connection should be
  639|       |     closed in spite of all our efforts to be nice, due to protocol
  640|       |     restrictions in our or the server's end
  641|       |
  642|       |     if premature is TRUE, it means this connection was said to be DONE before
  643|       |     the entire request operation is complete and thus we can't know in what
  644|       |     state it is for re-using, so we're forced to close it. In a perfect world
  645|       |     we can add code that keep track of if we really must close it here or not,
  646|       |     but currently we have no such detail knowledge.
  647|       |  */
  648|       |
  649|    524|  if((data->set.reuse_forbid
  650|    524|#if defined(USE_NTLM)
  651|    524|      && !(conn->http_ntlm_state == NTLMSTATE_TYPE2 ||
  652|      0|           conn->proxy_ntlm_state == NTLMSTATE_TYPE2)
  653|    524|#endif
  654|       |#if defined(USE_SPNEGO)
  655|       |      && !(conn->http_negotiate_state == GSS_AUTHRECV ||
  656|       |           conn->proxy_negotiate_state == GSS_AUTHRECV)
  657|       |#endif
  658|    524|     ) || conn->bits.close
  659|    524|       || (premature && !(conn->handler->flags & PROTOPT_STREAM))) {
  660|    496|    CURLcode res2;
  661|    496|    connclose(conn, "disconnecting");
  662|    496|    Curl_conncache_remove_conn(data, conn, FALSE);
  663|    496|    CONNCACHE_UNLOCK(data);
  664|    496|    res2 = Curl_disconnect(data, conn, premature);
  665|       |
  666|       |    /* If we had an error already, make sure we return that one. But
  667|       |       if we got a new error, return that. */
  668|    496|    if(!result && res2)
  669|      0|      result = res2;
  670|    496|  }
  671|     28|  else {
  672|     28|    char buffer[256];
  673|     28|    const char *host =
  674|     28|#ifndef CURL_DISABLE_PROXY
  675|     28|      conn->bits.socksproxy ?
  676|      0|      conn->socks_proxy.host.dispname :
  677|     28|      conn->bits.httpproxy ? conn->http_proxy.host.dispname :
  678|     28|#endif
  679|     28|      conn->bits.conn_to_host ? conn->conn_to_host.dispname :
  680|     28|      conn->host.dispname;
  681|       |    /* create string before returning the connection */
  682|     28|    msnprintf(buffer, sizeof(buffer),
  683|     28|              "Connection #%ld to host %s left intact",
  684|     28|              conn->connection_id, host);
  685|       |    /* the connection is no longer in use by this transfer */
  686|     28|    CONNCACHE_UNLOCK(data);
  687|     28|    if(Curl_conncache_return_conn(data, conn)) {
  688|       |      /* remember the most recently used connection */
  689|     28|      data->state.lastconnect_id = conn->connection_id;
  690|     28|      infof(data, "%s", buffer);
  691|     28|    }
  692|      0|    else
  693|      0|      data->state.lastconnect_id = -1;
  694|     28|  }
  695|       |
  696|    524|  Curl_safefree(data->state.buffer);
  697|    524|  Curl_free_request_state(data);
  698|    524|  return result;
  699|    524|}
multi.c:close_connect_only:
  703|     28|{
  704|     28|  (void)param;
  705|     28|  if(data->state.lastconnect_id != conn->connection_id)
  706|      0|    return 0;
  707|       |
  708|     28|  if(!conn->bits.connect_only)
  709|     28|    return 1;
  710|       |
  711|      0|  connclose(conn, "Removing connect-only easy handle");
  712|       |
  713|      0|  return 1;
  714|     28|}
multi.c:multi_getsock:
  984|  1.51k|{
  985|  1.51k|  struct connectdata *conn = data->conn;
  986|       |  /* The no connection case can happen when this is called from
  987|       |     curl_multi_remove_handle() => singlesocket() => multi_getsock().
  988|       |  */
  989|  1.51k|  if(!conn)
  990|    783|    return 0;
  991|       |
  992|    733|  switch(data->mstate) {
  993|      0|  default:
  994|      0|    return 0;
  995|       |
  996|      0|  case MSTATE_RESOLVING:
  997|      0|    return Curl_resolv_getsock(data, socks);
  998|       |
  999|    470|  case MSTATE_PROTOCONNECTING:
 1000|    470|  case MSTATE_PROTOCONNECT:
 1001|    470|    return protocol_getsock(data, conn, socks);
 1002|       |
 1003|      0|  case MSTATE_DO:
 1004|    263|  case MSTATE_DOING:
 1005|    263|    return doing_getsock(data, conn, socks);
 1006|       |
 1007|      0|  case MSTATE_TUNNELING:
 1008|      0|    return waitproxyconnect_getsock(conn, socks);
 1009|       |
 1010|      0|  case MSTATE_CONNECTING:
 1011|      0|    return waitconnect_getsock(conn, socks);
 1012|       |
 1013|      0|  case MSTATE_DOING_MORE:
 1014|      0|    return domore_getsock(data, conn, socks);
 1015|       |
 1016|      0|  case MSTATE_DID: /* since is set after DO is completed, we switch to
 1017|       |                        waiting for the same as the PERFORMING state */
 1018|      0|  case MSTATE_PERFORMING:
 1019|      0|    return Curl_single_getsock(data, conn, socks);
 1020|    733|  }
 1021|       |
 1022|    733|}
multi.c:protocol_getsock:
  970|    470|{
  971|    470|  if(conn->handler->proto_getsock)
  972|    470|    return conn->handler->proto_getsock(data, conn, socks);
  973|       |  /* Backup getsock logic. Since there is a live socket in use, we must wait
  974|       |     for it or it will be removed from watching when the multi_socket API is
  975|       |     used. */
  976|      0|  socks[0] = conn->sock[FIRSTSOCKET];
  977|      0|  return GETSOCK_READSOCK(0) | GETSOCK_WRITESOCK(0);
  978|    470|}
multi.c:doing_getsock:
  961|    263|{
  962|    263|  if(conn && conn->handler->doing_getsock)
  963|    263|    return conn->handler->doing_getsock(data, conn, socks);
  964|      0|  return GETSOCK_BLANK;
  965|    263|}
multi.c:multi_runsingle:
 1729|  1.40k|{
 1730|  1.40k|  struct Curl_message *msg = NULL;
 1731|  1.40k|  bool connected;
 1732|  1.40k|  bool async;
 1733|  1.40k|  bool protocol_connected = FALSE;
 1734|  1.40k|  bool dophase_done = FALSE;
 1735|  1.40k|  bool done = FALSE;
 1736|  1.40k|  CURLMcode rc;
 1737|  1.40k|  CURLcode result = CURLE_OK;
 1738|  1.40k|  timediff_t recv_timeout_ms;
 1739|  1.40k|  timediff_t send_timeout_ms;
 1740|  1.40k|  int control;
 1741|       |
 1742|  1.40k|  if(!GOOD_EASY_HANDLE(data))
 1743|      0|    return CURLM_BAD_EASY_HANDLE;
 1744|       |
 1745|  3.24k|  do {
 1746|       |    /* A "stream" here is a logical stream if the protocol can handle that
 1747|       |       (HTTP/2), or the full connection for older protocols */
 1748|  3.24k|    bool stream_error = FALSE;
 1749|  3.24k|    rc = CURLM_OK;
 1750|       |
 1751|  3.24k|    if(multi_ischanged(multi, TRUE)) {
 1752|      0|      DEBUGF(infof(data, "multi changed, check CONNECT_PEND queue!"));
 1753|      0|      process_pending_handles(multi); /* multiplexed */
 1754|      0|    }
 1755|       |
 1756|  3.24k|    if(data->mstate > MSTATE_CONNECT &&
 1757|  3.24k|       data->mstate < MSTATE_COMPLETED) {
 1758|       |      /* Make sure we set the connection's current owner */
 1759|  1.76k|      DEBUGASSERT(data->conn);
 1760|  1.76k|      if(!data->conn)
 1761|      0|        return CURLM_INTERNAL_ERROR;
 1762|  1.76k|    }
 1763|       |
 1764|  3.24k|    if(data->conn &&
 1765|  3.24k|       (data->mstate >= MSTATE_CONNECT) &&
 1766|  3.24k|       (data->mstate < MSTATE_COMPLETED)) {
 1767|       |      /* Check for overall operation timeout here but defer handling the
 1768|       |       * connection timeout to later, to allow for a connection to be set up
 1769|       |       * in the window since we last checked timeout. This prevents us
 1770|       |       * tearing down a completed connection in the case where we were slow
 1771|       |       * to check the timeout (e.g. process descheduled during this loop).
 1772|       |       * We set connect_timeout=FALSE to do this. */
 1773|       |
 1774|       |      /* we need to wait for the connect state as only then is the start time
 1775|       |         stored, but we must not check already completed handles */
 1776|  1.76k|      if(multi_handle_timeout(data, nowp, &stream_error, &result, FALSE)) {
 1777|       |        /* Skip the statemachine and go directly to error handling section. */
 1778|      0|        goto statemachine_end;
 1779|      0|      }
 1780|  1.76k|    }
 1781|       |
 1782|  3.24k|    switch(data->mstate) {
 1783|    783|    case MSTATE_INIT:
 1784|       |      /* init this transfer. */
 1785|    783|      result = Curl_pretransfer(data);
 1786|       |
 1787|    783|      if(!result) {
 1788|       |        /* after init, go CONNECT */
 1789|    688|        multistate(data, MSTATE_CONNECT);
 1790|    688|        *nowp = Curl_pgrsTime(data, TIMER_STARTOP);
 1791|    688|        rc = CURLM_CALL_MULTI_PERFORM;
 1792|    688|      }
 1793|    783|      break;
 1794|       |
 1795|      0|    case MSTATE_PENDING:
 1796|       |      /* We will stay here until there is a connection available. Then
 1797|       |         we try again in the MSTATE_CONNECT state. */
 1798|      0|      break;
 1799|       |
 1800|    688|    case MSTATE_CONNECT:
 1801|       |      /* Connect. We want to get a connection identifier filled in. */
 1802|       |      /* init this transfer. */
 1803|    688|      result = Curl_preconnect(data);
 1804|    688|      if(result)
 1805|      0|        break;
 1806|       |
 1807|    688|      *nowp = Curl_pgrsTime(data, TIMER_STARTSINGLE);
 1808|    688|      if(data->set.timeout)
 1809|    688|        Curl_expire(data, data->set.timeout, EXPIRE_TIMEOUT);
 1810|       |
 1811|    688|      if(data->set.connecttimeout)
 1812|      0|        Curl_expire(data, data->set.connecttimeout, EXPIRE_CONNECTTIMEOUT);
 1813|       |
 1814|    688|      result = Curl_connect(data, &async, &protocol_connected);
 1815|    688|      if(CURLE_NO_CONNECTION_AVAILABLE == result) {
 1816|       |        /* There was no connection available. We will go to the pending
 1817|       |           state and wait for an available connection. */
 1818|      0|        multistate(data, MSTATE_PENDING);
 1819|       |
 1820|       |        /* add this handle to the list of connect-pending handles */
 1821|      0|        Curl_llist_insert_next(&multi->pending, multi->pending.tail, data,
 1822|      0|                               &data->connect_queue);
 1823|      0|        result = CURLE_OK;
 1824|      0|        break;
 1825|      0|      }
 1826|    688|      else if(data->state.previouslypending) {
 1827|       |        /* this transfer comes from the pending queue so try move another */
 1828|      0|        infof(data, "Transfer was pending, now try another");
 1829|      0|        process_pending_handles(data->multi);
 1830|      0|      }
 1831|       |
 1832|    688|      if(!result) {
 1833|    524|        if(async)
 1834|       |          /* We're now waiting for an asynchronous name lookup */
 1835|      0|          multistate(data, MSTATE_RESOLVING);
 1836|    524|        else {
 1837|       |          /* after the connect has been sent off, go WAITCONNECT unless the
 1838|       |             protocol connect is already done and we can go directly to
 1839|       |             WAITDO or DO! */
 1840|    524|          rc = CURLM_CALL_MULTI_PERFORM;
 1841|       |
 1842|    524|          if(protocol_connected)
 1843|      0|            multistate(data, MSTATE_DO);
 1844|    524|          else {
 1845|    524|#ifndef CURL_DISABLE_HTTP
 1846|    524|            if(Curl_connect_ongoing(data->conn))
 1847|      0|              multistate(data, MSTATE_TUNNELING);
 1848|    524|            else
 1849|    524|#endif
 1850|    524|              multistate(data, MSTATE_CONNECTING);
 1851|    524|          }
 1852|    524|        }
 1853|    524|      }
 1854|    688|      break;
 1855|       |
 1856|      0|    case MSTATE_RESOLVING:
 1857|       |      /* awaiting an asynch name resolve to complete */
 1858|      0|    {
 1859|      0|      struct Curl_dns_entry *dns = NULL;
 1860|      0|      struct connectdata *conn = data->conn;
 1861|      0|      const char *hostname;
 1862|       |
 1863|      0|      DEBUGASSERT(conn);
 1864|      0|#ifndef CURL_DISABLE_PROXY
 1865|      0|      if(conn->bits.httpproxy)
 1866|      0|        hostname = conn->http_proxy.host.name;
 1867|      0|      else
 1868|      0|#endif
 1869|      0|        if(conn->bits.conn_to_host)
 1870|      0|        hostname = conn->conn_to_host.name;
 1871|      0|      else
 1872|      0|        hostname = conn->host.name;
 1873|       |
 1874|       |      /* check if we have the name resolved by now */
 1875|      0|      dns = Curl_fetch_addr(data, hostname, (int)conn->port);
 1876|       |
 1877|      0|      if(dns) {
 1878|      0|#ifdef CURLRES_ASYNCH
 1879|      0|        data->state.async.dns = dns;
 1880|      0|        data->state.async.done = TRUE;
 1881|      0|#endif
 1882|      0|        result = CURLE_OK;
 1883|      0|        infof(data, "Hostname '%s' was found in DNS cache", hostname);
 1884|      0|      }
 1885|       |
 1886|      0|      if(!dns)
 1887|      0|        result = Curl_resolv_check(data, &dns);
 1888|       |
 1889|       |      /* Update sockets here, because the socket(s) may have been
 1890|       |         closed and the application thus needs to be told, even if it
 1891|       |         is likely that the same socket(s) will again be used further
 1892|       |         down.  If the name has not yet been resolved, it is likely
 1893|       |         that new sockets have been opened in an attempt to contact
 1894|       |         another resolver. */
 1895|      0|      singlesocket(multi, data);
 1896|       |
 1897|      0|      if(dns) {
 1898|       |        /* Perform the next step in the connection phase, and then move on
 1899|       |           to the WAITCONNECT state */
 1900|      0|        result = Curl_once_resolved(data, &protocol_connected);
 1901|       |
 1902|      0|        if(result)
 1903|       |          /* if Curl_once_resolved() returns failure, the connection struct
 1904|       |             is already freed and gone */
 1905|      0|          data->conn = NULL; /* no more connection */
 1906|      0|        else {
 1907|       |          /* call again please so that we get the next socket setup */
 1908|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 1909|      0|          if(protocol_connected)
 1910|      0|            multistate(data, MSTATE_DO);
 1911|      0|          else {
 1912|      0|#ifndef CURL_DISABLE_HTTP
 1913|      0|            if(Curl_connect_ongoing(data->conn))
 1914|      0|              multistate(data, MSTATE_TUNNELING);
 1915|      0|            else
 1916|      0|#endif
 1917|      0|              multistate(data, MSTATE_CONNECTING);
 1918|      0|          }
 1919|      0|        }
 1920|      0|      }
 1921|       |
 1922|      0|      if(result) {
 1923|       |        /* failure detected */
 1924|      0|        stream_error = TRUE;
 1925|      0|        break;
 1926|      0|      }
 1927|      0|    }
 1928|      0|    break;
 1929|       |
 1930|      0|#ifndef CURL_DISABLE_HTTP
 1931|      0|    case MSTATE_TUNNELING:
 1932|       |      /* this is HTTP-specific, but sending CONNECT to a proxy is HTTP... */
 1933|      0|      DEBUGASSERT(data->conn);
 1934|      0|      result = Curl_http_connect(data, &protocol_connected);
 1935|      0|#ifndef CURL_DISABLE_PROXY
 1936|      0|      if(data->conn->bits.proxy_connect_closed) {
 1937|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 1938|       |        /* connect back to proxy again */
 1939|      0|        result = CURLE_OK;
 1940|      0|        multi_done(data, CURLE_OK, FALSE);
 1941|      0|        multistate(data, MSTATE_CONNECT);
 1942|      0|      }
 1943|      0|      else
 1944|      0|#endif
 1945|      0|        if(!result) {
 1946|      0|          if(
 1947|      0|#ifndef CURL_DISABLE_PROXY
 1948|      0|            (data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||
 1949|      0|             data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&
 1950|      0|#endif
 1951|      0|            Curl_connect_complete(data->conn)) {
 1952|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 1953|       |            /* initiate protocol connect phase */
 1954|      0|            multistate(data, MSTATE_PROTOCONNECT);
 1955|      0|          }
 1956|      0|        }
 1957|      0|      else
 1958|      0|        stream_error = TRUE;
 1959|      0|      break;
 1960|      0|#endif
 1961|       |
 1962|    524|    case MSTATE_CONNECTING:
 1963|       |      /* awaiting a completion of an asynch TCP connect */
 1964|    524|      DEBUGASSERT(data->conn);
 1965|    524|      result = Curl_is_connected(data, data->conn, FIRSTSOCKET, &connected);
 1966|    524|      if(connected && !result) {
 1967|    524|#ifndef CURL_DISABLE_HTTP
 1968|    524|        if(
 1969|    524|#ifndef CURL_DISABLE_PROXY
 1970|    524|          (data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&
 1971|    524|           !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||
 1972|    524|#endif
 1973|    524|          Curl_connect_ongoing(data->conn)) {
 1974|      0|          multistate(data, MSTATE_TUNNELING);
 1975|      0|          break;
 1976|      0|        }
 1977|    524|#endif
 1978|    524|        rc = CURLM_CALL_MULTI_PERFORM;
 1979|    524|#ifndef CURL_DISABLE_PROXY
 1980|    524|        multistate(data,
 1981|    524|                   data->conn->bits.tunnel_proxy?
 1982|    524|                   MSTATE_TUNNELING : MSTATE_PROTOCONNECT);
 1983|       |#else
 1984|       |        multistate(data, MSTATE_PROTOCONNECT);
 1985|       |#endif
 1986|    524|      }
 1987|      0|      else if(result) {
 1988|       |        /* failure detected */
 1989|      0|        Curl_posttransfer(data);
 1990|      0|        multi_done(data, result, TRUE);
 1991|      0|        stream_error = TRUE;
 1992|      0|        break;
 1993|      0|      }
 1994|    524|      break;
 1995|       |
 1996|    524|    case MSTATE_PROTOCONNECT:
 1997|    524|      result = protocol_connect(data, &protocol_connected);
 1998|    524|      if(!result && !protocol_connected)
 1999|       |        /* switch to waiting state */
 2000|    228|        multistate(data, MSTATE_PROTOCONNECTING);
 2001|    296|      else if(!result) {
 2002|       |        /* protocol connect has completed, go WAITDO or DO */
 2003|      0|        multistate(data, MSTATE_DO);
 2004|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2005|      0|      }
 2006|    296|      else {
 2007|       |        /* failure detected */
 2008|    296|        Curl_posttransfer(data);
 2009|    296|        multi_done(data, result, TRUE);
 2010|    296|        stream_error = TRUE;
 2011|    296|      }
 2012|    524|      break;
 2013|       |
 2014|    374|    case MSTATE_PROTOCONNECTING:
 2015|       |      /* protocol-specific connect phase */
 2016|    374|      result = protocol_connecting(data, &protocol_connected);
 2017|    374|      if(!result && protocol_connected) {
 2018|       |        /* after the connect has completed, go WAITDO or DO */
 2019|     91|        multistate(data, MSTATE_DO);
 2020|     91|        rc = CURLM_CALL_MULTI_PERFORM;
 2021|     91|      }
 2022|    283|      else if(result) {
 2023|       |        /* failure detected */
 2024|     41|        Curl_posttransfer(data);
 2025|     41|        multi_done(data, result, TRUE);
 2026|     41|        stream_error = TRUE;
 2027|     41|      }
 2028|    374|      break;
 2029|       |
 2030|     91|    case MSTATE_DO:
 2031|     91|      if(data->set.fprereq) {
 2032|      0|        int prereq_rc;
 2033|       |
 2034|       |        /* call the prerequest callback function */
 2035|      0|        Curl_set_in_callback(data, true);
 2036|      0|        prereq_rc = data->set.fprereq(data->set.prereq_userp,
 2037|      0|                                      data->info.conn_primary_ip,
 2038|      0|                                      data->info.conn_local_ip,
 2039|      0|                                      data->info.conn_primary_port,
 2040|      0|                                      data->info.conn_local_port);
 2041|      0|        Curl_set_in_callback(data, false);
 2042|      0|        if(prereq_rc != CURL_PREREQFUNC_OK) {
 2043|      0|          failf(data, "operation aborted by pre-request callback");
 2044|       |          /* failure in pre-request callback - don't do any other processing */
 2045|      0|          result = CURLE_ABORTED_BY_CALLBACK;
 2046|      0|          Curl_posttransfer(data);
 2047|      0|          multi_done(data, result, FALSE);
 2048|      0|          stream_error = TRUE;
 2049|      0|          break;
 2050|      0|        }
 2051|      0|      }
 2052|       |
 2053|     91|      if(data->set.connect_only) {
 2054|       |        /* keep connection open for application to use the socket */
 2055|      0|        connkeep(data->conn, "CONNECT_ONLY");
 2056|      0|        multistate(data, MSTATE_DONE);
 2057|      0|        result = CURLE_OK;
 2058|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2059|      0|      }
 2060|     91|      else {
 2061|       |        /* Perform the protocol's DO action */
 2062|     91|        result = multi_do(data, &dophase_done);
 2063|       |
 2064|       |        /* When multi_do() returns failure, data->conn might be NULL! */
 2065|       |
 2066|     91|        if(!result) {
 2067|     81|          if(!dophase_done) {
 2068|     80|#ifndef CURL_DISABLE_FTP
 2069|       |            /* some steps needed for wildcard matching */
 2070|     80|            if(data->state.wildcardmatch) {
 2071|      2|              struct WildcardData *wc = &data->wildcard;
 2072|      2|              if(wc->state == CURLWC_DONE || wc->state == CURLWC_SKIP) {
 2073|       |                /* skip some states if it is important */
 2074|      0|                multi_done(data, CURLE_OK, FALSE);
 2075|       |
 2076|       |                /* if there's no connection left, skip the DONE state */
 2077|      0|                multistate(data, data->conn ?
 2078|      0|                           MSTATE_DONE : MSTATE_COMPLETED);
 2079|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2080|      0|                break;
 2081|      0|              }
 2082|      2|            }
 2083|     80|#endif
 2084|       |            /* DO was not completed in one function call, we must continue
 2085|       |               DOING... */
 2086|     80|            multistate(data, MSTATE_DOING);
 2087|     80|            rc = CURLM_OK;
 2088|     80|          }
 2089|       |
 2090|       |          /* after DO, go DO_DONE... or DO_MORE */
 2091|      1|          else if(data->conn->bits.do_more) {
 2092|       |            /* we're supposed to do more, but we need to sit down, relax
 2093|       |               and wait a little while first */
 2094|      0|            multistate(data, MSTATE_DOING_MORE);
 2095|      0|            rc = CURLM_OK;
 2096|      0|          }
 2097|      1|          else {
 2098|       |            /* we're done with the DO, now DID */
 2099|      1|            multistate(data, MSTATE_DID);
 2100|      1|            rc = CURLM_CALL_MULTI_PERFORM;
 2101|      1|          }
 2102|     81|        }
 2103|     10|        else if((CURLE_SEND_ERROR == result) &&
 2104|     10|                data->conn->bits.reuse) {
 2105|       |          /*
 2106|       |           * In this situation, a connection that we were trying to use
 2107|       |           * may have unexpectedly died.  If possible, send the connection
 2108|       |           * back to the CONNECT phase so we can try again.
 2109|       |           */
 2110|      0|          char *newurl = NULL;
 2111|      0|          followtype follow = FOLLOW_NONE;
 2112|      0|          CURLcode drc;
 2113|       |
 2114|      0|          drc = Curl_retry_request(data, &newurl);
 2115|      0|          if(drc) {
 2116|       |            /* a failure here pretty much implies an out of memory */
 2117|      0|            result = drc;
 2118|      0|            stream_error = TRUE;
 2119|      0|          }
 2120|       |
 2121|      0|          Curl_posttransfer(data);
 2122|      0|          drc = multi_done(data, result, FALSE);
 2123|       |
 2124|       |          /* When set to retry the connection, we must to go back to
 2125|       |           * the CONNECT state */
 2126|      0|          if(newurl) {
 2127|      0|            if(!drc || (drc == CURLE_SEND_ERROR)) {
 2128|      0|              follow = FOLLOW_RETRY;
 2129|      0|              drc = Curl_follow(data, newurl, follow);
 2130|      0|              if(!drc) {
 2131|      0|                multistate(data, MSTATE_CONNECT);
 2132|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2133|      0|                result = CURLE_OK;
 2134|      0|              }
 2135|      0|              else {
 2136|       |                /* Follow failed */
 2137|      0|                result = drc;
 2138|      0|              }
 2139|      0|            }
 2140|      0|            else {
 2141|       |              /* done didn't return OK or SEND_ERROR */
 2142|      0|              result = drc;
 2143|      0|            }
 2144|      0|          }
 2145|      0|          else {
 2146|       |            /* Have error handler disconnect conn if we can't retry */
 2147|      0|            stream_error = TRUE;
 2148|      0|          }
 2149|      0|          free(newurl);
 2150|      0|        }
 2151|     10|        else {
 2152|       |          /* failure detected */
 2153|     10|          Curl_posttransfer(data);
 2154|     10|          if(data->conn)
 2155|     10|            multi_done(data, result, FALSE);
 2156|     10|          stream_error = TRUE;
 2157|     10|        }
 2158|     91|      }
 2159|     91|      break;
 2160|       |
 2161|    250|    case MSTATE_DOING:
 2162|       |      /* we continue DOING until the DO phase is complete */
 2163|    250|      DEBUGASSERT(data->conn);
 2164|    250|      result = protocol_doing(data, &dophase_done);
 2165|    250|      if(!result) {
 2166|    185|        if(dophase_done) {
 2167|       |          /* after DO, go DO_DONE or DO_MORE */
 2168|      2|          multistate(data, data->conn->bits.do_more?
 2169|      2|                     MSTATE_DOING_MORE : MSTATE_DID);
 2170|      2|          rc = CURLM_CALL_MULTI_PERFORM;
 2171|      2|        } /* dophase_done */
 2172|    185|      }
 2173|     65|      else {
 2174|       |        /* failure detected */
 2175|     65|        Curl_posttransfer(data);
 2176|     65|        multi_done(data, result, FALSE);
 2177|     65|        stream_error = TRUE;
 2178|     65|      }
 2179|    250|      break;
 2180|       |
 2181|      0|    case MSTATE_DOING_MORE:
 2182|       |      /*
 2183|       |       * When we are connected, DOING MORE and then go DID
 2184|       |       */
 2185|      0|      DEBUGASSERT(data->conn);
 2186|      0|      result = multi_do_more(data, &control);
 2187|       |
 2188|      0|      if(!result) {
 2189|      0|        if(control) {
 2190|       |          /* if positive, advance to DO_DONE
 2191|       |             if negative, go back to DOING */
 2192|      0|          multistate(data, control == 1?
 2193|      0|                     MSTATE_DID : MSTATE_DOING);
 2194|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 2195|      0|        }
 2196|      0|        else
 2197|       |          /* stay in DO_MORE */
 2198|      0|          rc = CURLM_OK;
 2199|      0|      }
 2200|      0|      else {
 2201|       |        /* failure detected */
 2202|      0|        Curl_posttransfer(data);
 2203|      0|        multi_done(data, result, FALSE);
 2204|      0|        stream_error = TRUE;
 2205|      0|      }
 2206|      0|      break;
 2207|       |
 2208|      3|    case MSTATE_DID:
 2209|      3|      DEBUGASSERT(data->conn);
 2210|      3|      if(data->conn->bits.multiplex)
 2211|       |        /* Check if we can move pending requests to send pipe */
 2212|      0|        process_pending_handles(multi); /*  multiplexed */
 2213|       |
 2214|       |      /* Only perform the transfer if there's a good socket to work with.
 2215|       |         Having both BAD is a signal to skip immediately to DONE */
 2216|      3|      if((data->conn->sockfd != CURL_SOCKET_BAD) ||
 2217|      3|         (data->conn->writesockfd != CURL_SOCKET_BAD))
 2218|      0|        multistate(data, MSTATE_PERFORMING);
 2219|      3|      else {
 2220|      3|#ifndef CURL_DISABLE_FTP
 2221|      3|        if(data->state.wildcardmatch &&
 2222|      3|           ((data->conn->handler->flags & PROTOPT_WILDCARD) == 0)) {
 2223|      0|          data->wildcard.state = CURLWC_DONE;
 2224|      0|        }
 2225|      3|#endif
 2226|      3|        multistate(data, MSTATE_DONE);
 2227|      3|      }
 2228|      3|      rc = CURLM_CALL_MULTI_PERFORM;
 2229|      3|      break;
 2230|       |
 2231|      0|    case MSTATE_RATELIMITING: /* limit-rate exceeded in either direction */
 2232|      0|      DEBUGASSERT(data->conn);
 2233|       |      /* if both rates are within spec, resume transfer */
 2234|      0|      if(Curl_pgrsUpdate(data))
 2235|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2236|      0|      else
 2237|      0|        result = Curl_speedcheck(data, *nowp);
 2238|       |
 2239|      0|      if(result) {
 2240|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2241|      0|           result != CURLE_HTTP2_STREAM)
 2242|      0|          streamclose(data->conn, "Transfer returned error");
 2243|       |
 2244|      0|        Curl_posttransfer(data);
 2245|      0|        multi_done(data, result, TRUE);
 2246|      0|      }
 2247|      0|      else {
 2248|      0|        send_timeout_ms = 0;
 2249|      0|        if(data->set.max_send_speed)
 2250|      0|          send_timeout_ms =
 2251|      0|            Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2252|      0|                                   data->progress.ul_limit_size,
 2253|      0|                                   data->set.max_send_speed,
 2254|      0|                                   data->progress.ul_limit_start,
 2255|      0|                                   *nowp);
 2256|       |
 2257|      0|        recv_timeout_ms = 0;
 2258|      0|        if(data->set.max_recv_speed)
 2259|      0|          recv_timeout_ms =
 2260|      0|            Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2261|      0|                                   data->progress.dl_limit_size,
 2262|      0|                                   data->set.max_recv_speed,
 2263|      0|                                   data->progress.dl_limit_start,
 2264|      0|                                   *nowp);
 2265|       |
 2266|      0|        if(!send_timeout_ms && !recv_timeout_ms) {
 2267|      0|          multistate(data, MSTATE_PERFORMING);
 2268|      0|          Curl_ratelimit(data, *nowp);
 2269|      0|        }
 2270|      0|        else if(send_timeout_ms >= recv_timeout_ms)
 2271|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2272|      0|        else
 2273|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2274|      0|      }
 2275|      0|      break;
 2276|       |
 2277|      0|    case MSTATE_PERFORMING:
 2278|      0|    {
 2279|      0|      char *newurl = NULL;
 2280|      0|      bool retry = FALSE;
 2281|      0|      bool comeback = FALSE;
 2282|      0|      DEBUGASSERT(data->state.buffer);
 2283|       |      /* check if over send speed */
 2284|      0|      send_timeout_ms = 0;
 2285|      0|      if(data->set.max_send_speed)
 2286|      0|        send_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2287|      0|                                                 data->progress.ul_limit_size,
 2288|      0|                                                 data->set.max_send_speed,
 2289|      0|                                                 data->progress.ul_limit_start,
 2290|      0|                                                 *nowp);
 2291|       |
 2292|       |      /* check if over recv speed */
 2293|      0|      recv_timeout_ms = 0;
 2294|      0|      if(data->set.max_recv_speed)
 2295|      0|        recv_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2296|      0|                                                 data->progress.dl_limit_size,
 2297|      0|                                                 data->set.max_recv_speed,
 2298|      0|                                                 data->progress.dl_limit_start,
 2299|      0|                                                 *nowp);
 2300|       |
 2301|      0|      if(send_timeout_ms || recv_timeout_ms) {
 2302|      0|        Curl_ratelimit(data, *nowp);
 2303|      0|        multistate(data, MSTATE_RATELIMITING);
 2304|      0|        if(send_timeout_ms >= recv_timeout_ms)
 2305|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2306|      0|        else
 2307|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2308|      0|        break;
 2309|      0|      }
 2310|       |
 2311|       |      /* read/write data if it is ready to do so */
 2312|      0|      result = Curl_readwrite(data->conn, data, &done, &comeback);
 2313|       |
 2314|      0|      if(done || (result == CURLE_RECV_ERROR)) {
 2315|       |        /* If CURLE_RECV_ERROR happens early enough, we assume it was a race
 2316|       |         * condition and the server closed the re-used connection exactly when
 2317|       |         * we wanted to use it, so figure out if that is indeed the case.
 2318|       |         */
 2319|      0|        CURLcode ret = Curl_retry_request(data, &newurl);
 2320|      0|        if(!ret)
 2321|      0|          retry = (newurl)?TRUE:FALSE;
 2322|      0|        else if(!result)
 2323|      0|          result = ret;
 2324|       |
 2325|      0|        if(retry) {
 2326|       |          /* if we are to retry, set the result to OK and consider the
 2327|       |             request as done */
 2328|      0|          result = CURLE_OK;
 2329|      0|          done = TRUE;
 2330|      0|        }
 2331|      0|      }
 2332|      0|      else if((CURLE_HTTP2_STREAM == result) &&
 2333|      0|              Curl_h2_http_1_1_error(data)) {
 2334|      0|        CURLcode ret = Curl_retry_request(data, &newurl);
 2335|       |
 2336|      0|        if(!ret) {
 2337|      0|          infof(data, "Downgrades to HTTP/1.1!");
 2338|      0|          streamclose(data->conn, "Disconnect HTTP/2 for HTTP/1");
 2339|      0|          data->state.httpwant = CURL_HTTP_VERSION_1_1;
 2340|       |          /* clear the error message bit too as we ignore the one we got */
 2341|      0|          data->state.errorbuf = FALSE;
 2342|      0|          if(!newurl)
 2343|       |            /* typically for HTTP_1_1_REQUIRED error on first flight */
 2344|      0|            newurl = strdup(data->state.url);
 2345|       |          /* if we are to retry, set the result to OK and consider the request
 2346|       |             as done */
 2347|      0|          retry = TRUE;
 2348|      0|          result = CURLE_OK;
 2349|      0|          done = TRUE;
 2350|      0|        }
 2351|      0|        else
 2352|      0|          result = ret;
 2353|      0|      }
 2354|       |
 2355|      0|      if(result) {
 2356|       |        /*
 2357|       |         * The transfer phase returned error, we mark the connection to get
 2358|       |         * closed to prevent being re-used. This is because we can't possibly
 2359|       |         * know if the connection is in a good shape or not now.  Unless it is
 2360|       |         * a protocol which uses two "channels" like FTP, as then the error
 2361|       |         * happened in the data connection.
 2362|       |         */
 2363|       |
 2364|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2365|      0|           result != CURLE_HTTP2_STREAM)
 2366|      0|          streamclose(data->conn, "Transfer returned error");
 2367|       |
 2368|      0|        Curl_posttransfer(data);
 2369|      0|        multi_done(data, result, TRUE);
 2370|      0|      }
 2371|      0|      else if(done) {
 2372|       |
 2373|       |        /* call this even if the readwrite function returned error */
 2374|      0|        Curl_posttransfer(data);
 2375|       |
 2376|       |        /* When we follow redirects or is set to retry the connection, we must
 2377|       |           to go back to the CONNECT state */
 2378|      0|        if(data->req.newurl || retry) {
 2379|      0|          followtype follow = FOLLOW_NONE;
 2380|      0|          if(!retry) {
 2381|       |            /* if the URL is a follow-location and not just a retried request
 2382|       |               then figure out the URL here */
 2383|      0|            free(newurl);
 2384|      0|            newurl = data->req.newurl;
 2385|      0|            data->req.newurl = NULL;
 2386|      0|            follow = FOLLOW_REDIR;
 2387|      0|          }
 2388|      0|          else
 2389|      0|            follow = FOLLOW_RETRY;
 2390|      0|          (void)multi_done(data, CURLE_OK, FALSE);
 2391|       |          /* multi_done() might return CURLE_GOT_NOTHING */
 2392|      0|          result = Curl_follow(data, newurl, follow);
 2393|      0|          if(!result) {
 2394|      0|            multistate(data, MSTATE_CONNECT);
 2395|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 2396|      0|          }
 2397|      0|          free(newurl);
 2398|      0|        }
 2399|      0|        else {
 2400|       |          /* after the transfer is done, go DONE */
 2401|       |
 2402|       |          /* but first check to see if we got a location info even though we're
 2403|       |             not following redirects */
 2404|      0|          if(data->req.location) {
 2405|      0|            free(newurl);
 2406|      0|            newurl = data->req.location;
 2407|      0|            data->req.location = NULL;
 2408|      0|            result = Curl_follow(data, newurl, FOLLOW_FAKE);
 2409|      0|            free(newurl);
 2410|      0|            if(result) {
 2411|      0|              stream_error = TRUE;
 2412|      0|              result = multi_done(data, result, TRUE);
 2413|      0|            }
 2414|      0|          }
 2415|       |
 2416|      0|          if(!result) {
 2417|      0|            multistate(data, MSTATE_DONE);
 2418|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 2419|      0|          }
 2420|      0|        }
 2421|      0|      }
 2422|      0|      else if(comeback) {
 2423|       |        /* This avoids CURLM_CALL_MULTI_PERFORM so that a very fast transfer
 2424|       |           won't get stuck on this transfer at the expense of other concurrent
 2425|       |           transfers */
 2426|      0|        Curl_expire(data, 0, EXPIRE_RUN_NOW);
 2427|      0|        rc = CURLM_OK;
 2428|      0|      }
 2429|      0|      break;
 2430|      0|    }
 2431|       |
 2432|      3|    case MSTATE_DONE:
 2433|       |      /* this state is highly transient, so run another loop after this */
 2434|      3|      rc = CURLM_CALL_MULTI_PERFORM;
 2435|       |
 2436|      3|      if(data->conn) {
 2437|      3|        CURLcode res;
 2438|       |
 2439|      3|        if(data->conn->bits.multiplex)
 2440|       |          /* Check if we can move pending requests to connection */
 2441|      0|          process_pending_handles(multi); /* multiplexing */
 2442|       |
 2443|       |        /* post-transfer command */
 2444|      3|        res = multi_done(data, result, FALSE);
 2445|       |
 2446|       |        /* allow a previously set error code take precedence */
 2447|      3|        if(!result)
 2448|      3|          result = res;
 2449|      3|      }
 2450|       |
 2451|      3|#ifndef CURL_DISABLE_FTP
 2452|      3|      if(data->state.wildcardmatch) {
 2453|      0|        if(data->wildcard.state != CURLWC_DONE) {
 2454|       |          /* if a wildcard is set and we are not ending -> lets start again
 2455|       |             with MSTATE_INIT */
 2456|      0|          multistate(data, MSTATE_INIT);
 2457|      0|          break;
 2458|      0|        }
 2459|      0|      }
 2460|      3|#endif
 2461|       |      /* after we have DONE what we're supposed to do, go COMPLETED, and
 2462|       |         it doesn't matter what the multi_done() returned! */
 2463|      3|      multistate(data, MSTATE_COMPLETED);
 2464|      3|      break;
 2465|       |
 2466|      0|    case MSTATE_COMPLETED:
 2467|      0|      break;
 2468|       |
 2469|      0|    case MSTATE_MSGSENT:
 2470|      0|      data->result = result;
 2471|      0|      return CURLM_OK; /* do nothing */
 2472|       |
 2473|      0|    default:
 2474|      0|      return CURLM_INTERNAL_ERROR;
 2475|  3.24k|    }
 2476|       |
 2477|  3.24k|    if(data->conn &&
 2478|  3.24k|       data->mstate >= MSTATE_CONNECT &&
 2479|  3.24k|       data->mstate < MSTATE_DO &&
 2480|  3.24k|       rc != CURLM_CALL_MULTI_PERFORM &&
 2481|  3.24k|       !multi_ischanged(multi, false)) {
 2482|       |      /* We now handle stream timeouts if and only if this will be the last
 2483|       |       * loop iteration. We only check this on the last iteration to ensure
 2484|       |       * that if we know we have additional work to do immediately
 2485|       |       * (i.e. CURLM_CALL_MULTI_PERFORM == TRUE) then we should do that before
 2486|       |       * declaring the connection timed out as we may almost have a completed
 2487|       |       * connection. */
 2488|    470|      multi_handle_timeout(data, nowp, &stream_error, &result, TRUE);
 2489|    470|    }
 2490|       |
 2491|  3.24k|    statemachine_end:
 2492|       |
 2493|  3.24k|    if(data->mstate < MSTATE_COMPLETED) {
 2494|  3.23k|      if(result) {
 2495|       |        /*
 2496|       |         * If an error was returned, and we aren't in completed state now,
 2497|       |         * then we go to completed and consider this transfer aborted.
 2498|       |         */
 2499|       |
 2500|       |        /* NOTE: no attempt to disconnect connections must be made
 2501|       |           in the case blocks above - cleanup happens only here */
 2502|       |
 2503|       |        /* Check if we can move pending requests to send pipe */
 2504|    671|        process_pending_handles(multi); /* connection */
 2505|       |
 2506|    671|        if(data->conn) {
 2507|      0|          if(stream_error) {
 2508|       |            /* Don't attempt to send data over a connection that timed out */
 2509|      0|            bool dead_connection = result == CURLE_OPERATION_TIMEDOUT;
 2510|      0|            struct connectdata *conn = data->conn;
 2511|       |
 2512|       |            /* This is where we make sure that the conn pointer is reset.
 2513|       |               We don't have to do this in every case block above where a
 2514|       |               failure is detected */
 2515|      0|            Curl_detach_connnection(data);
 2516|       |
 2517|       |            /* remove connection from cache */
 2518|      0|            Curl_conncache_remove_conn(data, conn, TRUE);
 2519|       |
 2520|       |            /* disconnect properly */
 2521|      0|            Curl_disconnect(data, conn, dead_connection);
 2522|      0|          }
 2523|      0|        }
 2524|    671|        else if(data->mstate == MSTATE_CONNECT) {
 2525|       |          /* Curl_connect() failed */
 2526|    164|          (void)Curl_posttransfer(data);
 2527|    164|        }
 2528|       |
 2529|    671|        multistate(data, MSTATE_COMPLETED);
 2530|    671|        rc = CURLM_CALL_MULTI_PERFORM;
 2531|    671|      }
 2532|       |      /* if there's still a connection to use, call the progress function */
 2533|  2.56k|      else if(data->conn && Curl_pgrsUpdate(data)) {
 2534|       |        /* aborted due to progress callback return code must close the
 2535|       |           connection */
 2536|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2537|      0|        streamclose(data->conn, "Aborted by callback");
 2538|       |
 2539|       |        /* if not yet in DONE state, go there, otherwise COMPLETED */
 2540|      0|        multistate(data, (data->mstate < MSTATE_DONE)?
 2541|      0|                   MSTATE_DONE: MSTATE_COMPLETED);
 2542|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2543|      0|      }
 2544|  3.23k|    }
 2545|       |
 2546|  3.24k|    if(MSTATE_COMPLETED == data->mstate) {
 2547|    674|      if(data->set.fmultidone) {
 2548|       |        /* signal via callback instead */
 2549|      0|        data->set.fmultidone(data, result);
 2550|      0|      }
 2551|    674|      else {
 2552|       |        /* now fill in the Curl_message with this info */
 2553|    674|        msg = &data->msg;
 2554|       |
 2555|    674|        msg->extmsg.msg = CURLMSG_DONE;
 2556|    674|        msg->extmsg.easy_handle = data;
 2557|    674|        msg->extmsg.data.result = result;
 2558|       |
 2559|    674|        rc = multi_addmsg(multi, msg);
 2560|    674|        DEBUGASSERT(!data->conn);
 2561|    674|      }
 2562|    674|      multistate(data, MSTATE_MSGSENT);
 2563|    674|    }
 2564|  3.24k|  } while((rc == CURLM_CALL_MULTI_PERFORM) || multi_ischanged(multi, FALSE));
 2565|       |
 2566|  1.40k|  data->result = result;
 2567|  1.40k|  return rc;
 2568|  1.40k|}
multi.c:multi_ischanged:
 1486|  5.11k|{
 1487|  5.11k|  bool retval = multi->recheckstate;
 1488|  5.11k|  if(clear)
 1489|  3.24k|    multi->recheckstate = FALSE;
 1490|  5.11k|  return retval;
 1491|  5.11k|}
multi.c:multi_handle_timeout:
 1563|  2.23k|{
 1564|  2.23k|  timediff_t timeout_ms;
 1565|  2.23k|  timeout_ms = Curl_timeleft(data, now, connect_timeout);
 1566|       |
 1567|  2.23k|  if(timeout_ms < 0) {
 1568|       |    /* Handle timed out */
 1569|      0|    if(data->mstate == MSTATE_RESOLVING)
 1570|      0|      failf(data, "Resolving timed out after %" CURL_FORMAT_TIMEDIFF_T
 1571|      0|            " milliseconds",
 1572|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1573|      0|    else if(data->mstate == MSTATE_CONNECTING)
 1574|      0|      failf(data, "Connection timed out after %" CURL_FORMAT_TIMEDIFF_T
 1575|      0|            " milliseconds",
 1576|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1577|      0|    else {
 1578|      0|      struct SingleRequest *k = &data->req;
 1579|      0|      if(k->size != -1) {
 1580|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1581|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1582|      0|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1583|      0|              Curl_timediff(*now, data->progress.t_startsingle),
 1584|      0|              k->bytecount, k->size);
 1585|      0|      }
 1586|      0|      else {
 1587|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1588|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T
 1589|      0|              " bytes received",
 1590|      0|              Curl_timediff(*now, data->progress.t_startsingle),
 1591|      0|              k->bytecount);
 1592|      0|      }
 1593|      0|    }
 1594|       |
 1595|       |    /* Force connection closed if the connection has indeed been used */
 1596|      0|    if(data->mstate > MSTATE_DO) {
 1597|      0|      streamclose(data->conn, "Disconnected with pending data");
 1598|      0|      *stream_error = TRUE;
 1599|      0|    }
 1600|      0|    *result = CURLE_OPERATION_TIMEDOUT;
 1601|      0|    (void)multi_done(data, *result, TRUE);
 1602|      0|  }
 1603|       |
 1604|  2.23k|  return (timeout_ms < 0);
 1605|  2.23k|}
multi.c:protocol_connect:
 1655|    524|{
 1656|    524|  CURLcode result = CURLE_OK;
 1657|    524|  struct connectdata *conn = data->conn;
 1658|    524|  DEBUGASSERT(conn);
 1659|    524|  DEBUGASSERT(protocol_done);
 1660|       |
 1661|    524|  *protocol_done = FALSE;
 1662|       |
 1663|    524|  if(conn->bits.tcpconnect[FIRSTSOCKET] && conn->bits.protoconnstart) {
 1664|       |    /* We already are connected, get back. This may happen when the connect
 1665|       |       worked fine in the first call, like when we connect to a local server
 1666|       |       or proxy. Note that we don't know if the protocol is actually done.
 1667|       |
 1668|       |       Unless this protocol doesn't have any protocol-connect callback, as
 1669|       |       then we know we're done. */
 1670|      0|    if(!conn->handler->connecting)
 1671|      0|      *protocol_done = TRUE;
 1672|       |
 1673|      0|    return CURLE_OK;
 1674|      0|  }
 1675|       |
 1676|    524|  if(!conn->bits.protoconnstart) {
 1677|    524|#ifndef CURL_DISABLE_PROXY
 1678|    524|    result = Curl_proxy_connect(data, FIRSTSOCKET);
 1679|    524|    if(result)
 1680|      0|      return result;
 1681|       |
 1682|    524|    if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1683|       |      /* wait for HTTPS proxy SSL initialization to complete */
 1684|      0|      return CURLE_OK;
 1685|       |
 1686|    524|    if(conn->bits.tunnel_proxy && conn->bits.httpproxy &&
 1687|    524|       Curl_connect_ongoing(conn))
 1688|       |      /* when using an HTTP tunnel proxy, await complete tunnel establishment
 1689|       |         before proceeding further. Return CURLE_OK so we'll be called again */
 1690|      0|      return CURLE_OK;
 1691|    524|#endif
 1692|    524|    if(conn->handler->connect_it) {
 1693|       |      /* is there a protocol-specific connect() procedure? */
 1694|       |
 1695|       |      /* Call the protocol-specific connect function */
 1696|    524|      result = conn->handler->connect_it(data, protocol_done);
 1697|    524|    }
 1698|      0|    else
 1699|      0|      *protocol_done = TRUE;
 1700|       |
 1701|       |    /* it has started, possibly even completed but that knowledge isn't stored
 1702|       |       in this bit! */
 1703|    524|    if(!result)
 1704|    228|      conn->bits.protoconnstart = TRUE;
 1705|    524|  }
 1706|       |
 1707|    524|  return result; /* pass back status */
 1708|    524|}
multi.c:protocol_connecting:
 1614|    374|{
 1615|    374|  CURLcode result = CURLE_OK;
 1616|    374|  struct connectdata *conn = data->conn;
 1617|       |
 1618|    374|  if(conn && conn->handler->connecting) {
 1619|    374|    *done = FALSE;
 1620|    374|    result = conn->handler->connecting(data, done);
 1621|    374|  }
 1622|      0|  else
 1623|      0|    *done = TRUE;
 1624|       |
 1625|    374|  return result;
 1626|    374|}
multi.c:multi_do:
 1519|     91|{
 1520|     91|  CURLcode result = CURLE_OK;
 1521|     91|  struct connectdata *conn = data->conn;
 1522|       |
 1523|     91|  DEBUGASSERT(conn);
 1524|     91|  DEBUGASSERT(conn->handler);
 1525|       |
 1526|     91|  if(conn->handler->do_it)
 1527|       |    /* generic protocol-specific function pointer set in curl_connect() */
 1528|     91|    result = conn->handler->do_it(data, done);
 1529|       |
 1530|     91|  return result;
 1531|     91|}
multi.c:protocol_doing:
 1634|    250|{
 1635|    250|  CURLcode result = CURLE_OK;
 1636|    250|  struct connectdata *conn = data->conn;
 1637|       |
 1638|    250|  if(conn && conn->handler->doing) {
 1639|    250|    *done = FALSE;
 1640|    250|    result = conn->handler->doing(data, done);
 1641|    250|  }
 1642|      0|  else
 1643|      0|    *done = TRUE;
 1644|       |
 1645|    250|  return result;
 1646|    250|}
multi.c:multi_addmsg:
  349|    674|{
  350|    674|  Curl_llist_insert_next(&multi->msglist, multi->msglist.tail, msg,
  351|    674|                         &msg->list);
  352|    674|  return CURLM_OK;
  353|    674|}
multi.c:singlesocket:
 2732|    783|{
 2733|    783|  curl_socket_t socks[MAX_SOCKSPEREASYHANDLE];
 2734|    783|  int i;
 2735|    783|  struct Curl_sh_entry *entry;
 2736|    783|  curl_socket_t s;
 2737|    783|  int num;
 2738|    783|  unsigned int curraction;
 2739|    783|  unsigned char actions[MAX_SOCKSPEREASYHANDLE];
 2740|       |
 2741|  4.69k|  for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++)
 2742|  3.91k|    socks[i] = CURL_SOCKET_BAD;
 2743|       |
 2744|       |  /* Fill in the 'current' struct with the state as it is now: what sockets to
 2745|       |     supervise and for what actions */
 2746|    783|  curraction = multi_getsock(data, socks);
 2747|       |
 2748|       |  /* We have 0 .. N sockets already and we get to know about the 0 .. M
 2749|       |     sockets we should have from now on. Detect the differences, remove no
 2750|       |     longer supervised ones and add new ones */
 2751|       |
 2752|       |  /* walk over the sockets we got right now */
 2753|    783|  for(i = 0; (i< MAX_SOCKSPEREASYHANDLE) &&
 2754|    783|        (curraction & (GETSOCK_READSOCK(i) | GETSOCK_WRITESOCK(i)));
 2755|    783|      i++) {
 2756|      0|    unsigned char action = CURL_POLL_NONE;
 2757|      0|    unsigned char prevaction = 0;
 2758|      0|    int comboaction;
 2759|      0|    bool sincebefore = FALSE;
 2760|       |
 2761|      0|    s = socks[i];
 2762|       |
 2763|       |    /* get it from the hash */
 2764|      0|    entry = sh_getentry(&multi->sockhash, s);
 2765|       |
 2766|      0|    if(curraction & GETSOCK_READSOCK(i))
 2767|      0|      action |= CURL_POLL_IN;
 2768|      0|    if(curraction & GETSOCK_WRITESOCK(i))
 2769|      0|      action |= CURL_POLL_OUT;
 2770|       |
 2771|      0|    actions[i] = action;
 2772|      0|    if(entry) {
 2773|       |      /* check if new for this transfer */
 2774|      0|      int j;
 2775|      0|      for(j = 0; j< data->numsocks; j++) {
 2776|      0|        if(s == data->sockets[j]) {
 2777|      0|          prevaction = data->actions[j];
 2778|      0|          sincebefore = TRUE;
 2779|      0|          break;
 2780|      0|        }
 2781|      0|      }
 2782|      0|    }
 2783|      0|    else {
 2784|       |      /* this is a socket we didn't have before, add it to the hash! */
 2785|      0|      entry = sh_addentry(&multi->sockhash, s);
 2786|      0|      if(!entry)
 2787|       |        /* fatal */
 2788|      0|        return CURLM_OUT_OF_MEMORY;
 2789|      0|    }
 2790|      0|    if(sincebefore && (prevaction != action)) {
 2791|       |      /* Socket was used already, but different action now */
 2792|      0|      if(prevaction & CURL_POLL_IN)
 2793|      0|        entry->readers--;
 2794|      0|      if(prevaction & CURL_POLL_OUT)
 2795|      0|        entry->writers--;
 2796|      0|      if(action & CURL_POLL_IN)
 2797|      0|        entry->readers++;
 2798|      0|      if(action & CURL_POLL_OUT)
 2799|      0|        entry->writers++;
 2800|      0|    }
 2801|      0|    else if(!sincebefore) {
 2802|       |      /* a new user */
 2803|      0|      entry->users++;
 2804|      0|      if(action & CURL_POLL_IN)
 2805|      0|        entry->readers++;
 2806|      0|      if(action & CURL_POLL_OUT)
 2807|      0|        entry->writers++;
 2808|       |
 2809|       |      /* add 'data' to the transfer hash on this socket! */
 2810|      0|      if(!Curl_hash_add(&entry->transfers, (char *)&data, /* hash key */
 2811|      0|                        sizeof(struct Curl_easy *), data))
 2812|      0|        return CURLM_OUT_OF_MEMORY;
 2813|      0|    }
 2814|       |
 2815|      0|    comboaction = (entry->writers? CURL_POLL_OUT : 0) |
 2816|      0|                   (entry->readers ? CURL_POLL_IN : 0);
 2817|       |
 2818|       |    /* socket existed before and has the same action set as before */
 2819|      0|    if(sincebefore && ((int)entry->action == comboaction))
 2820|       |      /* same, continue */
 2821|      0|      continue;
 2822|       |
 2823|      0|    if(multi->socket_cb)
 2824|      0|      multi->socket_cb(data, s, comboaction, multi->socket_userp,
 2825|      0|                       entry->socketp);
 2826|       |
 2827|      0|    entry->action = comboaction; /* store the current action state */
 2828|      0|  }
 2829|       |
 2830|    783|  num = i; /* number of sockets */
 2831|       |
 2832|       |  /* when we've walked over all the sockets we should have right now, we must
 2833|       |     make sure to detect sockets that are removed */
 2834|    783|  for(i = 0; i< data->numsocks; i++) {
 2835|      0|    int j;
 2836|      0|    bool stillused = FALSE;
 2837|      0|    s = data->sockets[i];
 2838|      0|    for(j = 0; j < num; j++) {
 2839|      0|      if(s == socks[j]) {
 2840|       |        /* this is still supervised */
 2841|      0|        stillused = TRUE;
 2842|      0|        break;
 2843|      0|      }
 2844|      0|    }
 2845|      0|    if(stillused)
 2846|      0|      continue;
 2847|       |
 2848|      0|    entry = sh_getentry(&multi->sockhash, s);
 2849|       |    /* if this is NULL here, the socket has been closed and notified so
 2850|       |       already by Curl_multi_closed() */
 2851|      0|    if(entry) {
 2852|      0|      unsigned char oldactions = data->actions[i];
 2853|       |      /* this socket has been removed. Decrease user count */
 2854|      0|      entry->users--;
 2855|      0|      if(oldactions & CURL_POLL_OUT)
 2856|      0|        entry->writers--;
 2857|      0|      if(oldactions & CURL_POLL_IN)
 2858|      0|        entry->readers--;
 2859|      0|      if(!entry->users) {
 2860|      0|        if(multi->socket_cb)
 2861|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2862|      0|                           multi->socket_userp,
 2863|      0|                           entry->socketp);
 2864|      0|        sh_delentry(entry, &multi->sockhash, s);
 2865|      0|      }
 2866|      0|      else {
 2867|       |        /* still users, but remove this handle as a user of this socket */
 2868|      0|        if(Curl_hash_delete(&entry->transfers, (char *)&data,
 2869|      0|                            sizeof(struct Curl_easy *))) {
 2870|      0|          DEBUGASSERT(NULL);
 2871|      0|        }
 2872|      0|      }
 2873|      0|    }
 2874|      0|  } /* for loop over numsocks */
 2875|       |
 2876|    783|  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
 2877|    783|  memcpy(data->actions, actions, num*sizeof(char));
 2878|    783|  data->numsocks = num;
 2879|    783|  return CURLM_OK;
 2880|    783|}
multi.c:sh_getentry:
  216|    496|{
  217|    496|  if(s != CURL_SOCKET_BAD) {
  218|       |    /* only look for proper sockets */
  219|    496|    return Curl_hash_pick(sh, (char *)&s, sizeof(curl_socket_t));
  220|    496|  }
  221|      0|  return NULL;
  222|    496|}
multi.c:add_next_timeout:
 2936|    228|{
 2937|    228|  struct curltime *tv = &d->state.expiretime;
 2938|    228|  struct Curl_llist *list = &d->state.timeoutlist;
 2939|    228|  struct Curl_llist_element *e;
 2940|    228|  struct time_node *node = NULL;
 2941|       |
 2942|       |  /* move over the timeout list for this specific handle and remove all
 2943|       |     timeouts that are now passed tense and store the next pending
 2944|       |     timeout in *tv */
 2945|    456|  for(e = list->head; e;) {
 2946|    456|    struct Curl_llist_element *n = e->next;
 2947|    456|    timediff_t diff;
 2948|    456|    node = (struct time_node *)e->ptr;
 2949|    456|    diff = Curl_timediff(node->time, now);
 2950|    456|    if(diff <= 0)
 2951|       |      /* remove outdated entry */
 2952|    228|      Curl_llist_remove(list, e, NULL);
 2953|    228|    else
 2954|       |      /* the list is sorted so get out on the first mismatch */
 2955|    228|      break;
 2956|    228|    e = n;
 2957|    228|  }
 2958|    228|  e = list->head;
 2959|    228|  if(!e) {
 2960|       |    /* clear the expire times within the handles that we remove from the
 2961|       |       splay tree */
 2962|      0|    tv->tv_sec = 0;
 2963|      0|    tv->tv_usec = 0;
 2964|      0|  }
 2965|    228|  else {
 2966|       |    /* copy the first entry to 'tv' */
 2967|    228|    memcpy(tv, &node->time, sizeof(*tv));
 2968|       |
 2969|       |    /* Insert this node again into the splay.  Keep the timer in the list in
 2970|       |       case we need to recompute future timers. */
 2971|    228|    multi->timetree = Curl_splayinsert(*tv, multi->timetree,
 2972|    228|                                       &d->state.timenode);
 2973|    228|  }
 2974|    228|  return CURLM_OK;
 2975|    228|}
multi.c:multi_deltimeout:
 3298|  1.99k|{
 3299|  1.99k|  struct Curl_llist_element *e;
 3300|  1.99k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3301|       |  /* find and remove the specific node from the list */
 3302|  3.74k|  for(e = timeoutlist->head; e; e = e->next) {
 3303|  1.74k|    struct time_node *n = (struct time_node *)e->ptr;
 3304|  1.74k|    if(n->eid == eid) {
 3305|      0|      Curl_llist_remove(timeoutlist, e, NULL);
 3306|      0|      return;
 3307|      0|    }
 3308|  1.74k|  }
 3309|  1.99k|}
multi.c:multi_addtimeout:
 3322|  1.99k|{
 3323|  1.99k|  struct Curl_llist_element *e;
 3324|  1.99k|  struct time_node *node;
 3325|  1.99k|  struct Curl_llist_element *prev = NULL;
 3326|  1.99k|  size_t n;
 3327|  1.99k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3328|       |
 3329|  1.99k|  node = &data->state.expires[eid];
 3330|       |
 3331|       |  /* copy the timestamp and id */
 3332|  1.99k|  memcpy(&node->time, stamp, sizeof(*stamp));
 3333|  1.99k|  node->eid = eid; /* also marks it as in use */
 3334|       |
 3335|  1.99k|  n = Curl_llist_count(timeoutlist);
 3336|  1.99k|  if(n) {
 3337|       |    /* find the correct spot in the list */
 3338|  2.95k|    for(e = timeoutlist->head; e; e = e->next) {
 3339|  1.73k|      struct time_node *check = (struct time_node *)e->ptr;
 3340|  1.73k|      timediff_t diff = Curl_timediff(check->time, node->time);
 3341|  1.73k|      if(diff > 0)
 3342|      3|        break;
 3343|  1.73k|      prev = e;
 3344|  1.73k|    }
 3345|       |
 3346|  1.21k|  }
 3347|       |  /* else
 3348|       |     this is the first timeout on the list */
 3349|       |
 3350|  1.99k|  Curl_llist_insert_next(timeoutlist, prev, node, &node->list);
 3351|  1.99k|  return CURLM_OK;
 3352|  1.99k|}
multi.c:process_pending_handles:
 3524|  1.97k|{
 3525|  1.97k|  struct Curl_llist_element *e = multi->pending.head;
 3526|  1.97k|  if(e) {
 3527|      0|    struct Curl_easy *data = e->ptr;
 3528|       |
 3529|      0|    DEBUGASSERT(data->mstate == MSTATE_PENDING);
 3530|       |
 3531|      0|    multistate(data, MSTATE_CONNECT);
 3532|       |
 3533|       |    /* Remove this node from the list */
 3534|      0|    Curl_llist_remove(&multi->pending, e, NULL);
 3535|       |
 3536|       |    /* Make sure that the handle will be processed soonish. */
 3537|      0|    Curl_expire(data, 0, EXPIRE_RUN_NOW);
 3538|       |
 3539|       |    /* mark this as having been in the pending queue */
 3540|      0|    data->state.previouslypending = TRUE;
 3541|      0|  }
 3542|  1.97k|}

curlx_nonblock:
   49|  2.09k|{
   50|  2.09k|#if defined(HAVE_FCNTL_O_NONBLOCK)
   51|       |  /* most recent unix versions */
   52|  2.09k|  int flags;
   53|  2.09k|  flags = sfcntl(sockfd, F_GETFL, 0);
   54|  2.09k|  if(nonblock)
   55|  2.09k|    return sfcntl(sockfd, F_SETFL, flags | O_NONBLOCK);
   56|      0|  return sfcntl(sockfd, F_SETFL, flags & (~O_NONBLOCK));
   57|       |
   58|       |#elif defined(HAVE_IOCTL_FIONBIO)
   59|       |
   60|       |  /* older unix versions */
   61|       |  int flags = nonblock ? 1 : 0;
   62|       |  return ioctl(sockfd, FIONBIO, &flags);
   63|       |
   64|       |#elif defined(HAVE_IOCTLSOCKET_FIONBIO)
   65|       |
   66|       |  /* Windows */
   67|       |  unsigned long flags = nonblock ? 1UL : 0UL;
   68|       |  return ioctlsocket(sockfd, FIONBIO, &flags);
   69|       |
   70|       |#elif defined(HAVE_IOCTLSOCKET_CAMEL_FIONBIO)
   71|       |
   72|       |  /* Amiga */
   73|       |  long flags = nonblock ? 1L : 0L;
   74|       |  return IoctlSocket(sockfd, FIONBIO, (char *)&flags);
   75|       |
   76|       |#elif defined(HAVE_SETSOCKOPT_SO_NONBLOCK)
   77|       |
   78|       |  /* BeOS */
   79|       |  long b = nonblock ? 1L : 0L;
   80|       |  return setsockopt(sockfd, SOL_SOCKET, SO_NONBLOCK, &b, sizeof(b));
   81|       |
   82|       |#else
   83|       |#  error "no non-blocking method was found/used/set"
   84|       |#endif
   85|  2.09k|}

Curl_pp_state_timeout:
   49|  1.23k|{
   50|  1.23k|  struct connectdata *conn = data->conn;
   51|  1.23k|  timediff_t timeout_ms; /* in milliseconds */
   52|  1.23k|  timediff_t response_time = (data->set.server_response_timeout)?
   53|  1.23k|    data->set.server_response_timeout: pp->response_time;
   54|       |
   55|       |  /* if CURLOPT_SERVER_RESPONSE_TIMEOUT is set, use that to determine
   56|       |     remaining time, or use pp->response because SERVER_RESPONSE_TIMEOUT is
   57|       |     supposed to govern the response for any given server response, not for
   58|       |     the time from connect to the given server response. */
   59|       |
   60|       |  /* Without a requested timeout, we only wait 'response_time' seconds for the
   61|       |     full response to arrive before we bail out */
   62|  1.23k|  timeout_ms = response_time -
   63|  1.23k|    Curl_timediff(Curl_now(), pp->response); /* spent time */
   64|       |
   65|  1.23k|  if(data->set.timeout && !disconnecting) {
   66|       |    /* if timeout is requested, find out how much remaining time we have */
   67|  1.18k|    timediff_t timeout2_ms = data->set.timeout - /* timeout time */
   68|  1.18k|      Curl_timediff(Curl_now(), conn->now); /* spent time */
   69|       |
   70|       |    /* pick the lowest number */
   71|  1.18k|    timeout_ms = CURLMIN(timeout_ms, timeout2_ms);
   72|  1.18k|  }
   73|       |
   74|  1.23k|  return timeout_ms;
   75|  1.23k|}
Curl_pp_statemach:
   83|  1.23k|{
   84|  1.23k|  struct connectdata *conn = data->conn;
   85|  1.23k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
   86|  1.23k|  int rc;
   87|  1.23k|  timediff_t interval_ms;
   88|  1.23k|  timediff_t timeout_ms = Curl_pp_state_timeout(data, pp, disconnecting);
   89|  1.23k|  CURLcode result = CURLE_OK;
   90|       |
   91|  1.23k|  if(timeout_ms <= 0) {
   92|     12|    failf(data, "server response timeout");
   93|     12|    return CURLE_OPERATION_TIMEDOUT; /* already too little time */
   94|     12|  }
   95|       |
   96|  1.22k|  if(block) {
   97|     32|    interval_ms = 1000;  /* use 1 second timeout intervals */
   98|     32|    if(timeout_ms < interval_ms)
   99|      0|      interval_ms = timeout_ms;
  100|     32|  }
  101|  1.18k|  else
  102|  1.18k|    interval_ms = 0; /* immediate */
  103|       |
  104|  1.22k|  if(Curl_ssl_data_pending(conn, FIRSTSOCKET))
  105|      0|    rc = 1;
  106|  1.22k|  else if(Curl_pp_moredata(pp))
  107|       |    /* We are receiving and there is data in the cache so just read it */
  108|     61|    rc = 1;
  109|  1.15k|  else if(!pp->sendleft && Curl_ssl_data_pending(conn, FIRSTSOCKET))
  110|       |    /* We are receiving and there is data ready in the SSL library */
  111|      0|    rc = 1;
  112|  1.15k|  else
  113|  1.15k|    rc = Curl_socket_check(pp->sendleft?CURL_SOCKET_BAD:sock, /* reading */
  114|  1.15k|                           CURL_SOCKET_BAD,
  115|  1.15k|                           pp->sendleft?sock:CURL_SOCKET_BAD, /* writing */
  116|  1.15k|                           interval_ms);
  117|       |
  118|  1.22k|  if(block) {
  119|       |    /* if we didn't wait, we don't have to spend time on this now */
  120|     32|    if(Curl_pgrsUpdate(data))
  121|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  122|     32|    else
  123|     32|      result = Curl_speedcheck(data, Curl_now());
  124|       |
  125|     32|    if(result)
  126|      0|      return result;
  127|     32|  }
  128|       |
  129|  1.22k|  if(rc == -1) {
  130|      0|    failf(data, "select/poll error");
  131|      0|    result = CURLE_OUT_OF_MEMORY;
  132|      0|  }
  133|  1.22k|  else if(rc)
  134|  1.00k|    result = pp->statemachine(data, data->conn);
  135|       |
  136|  1.22k|  return result;
  137|  1.22k|}
Curl_pp_init:
  141|  1.02k|{
  142|  1.02k|  DEBUGASSERT(data);
  143|  1.02k|  pp->nread_resp = 0;
  144|  1.02k|  pp->linestart_resp = data->state.buffer;
  145|  1.02k|  pp->pending_resp = TRUE;
  146|  1.02k|  pp->response = Curl_now(); /* start response time-out now! */
  147|  1.02k|}
Curl_pp_setup:
  151|    475|{
  152|    475|  Curl_dyn_init(&pp->sendbuf, DYN_PINGPPONG_CMD);
  153|    475|}
Curl_pp_vsendf:
  169|    551|{
  170|    551|  ssize_t bytes_written = 0;
  171|    551|  size_t write_len;
  172|    551|  char *s;
  173|    551|  CURLcode result;
  174|    551|  struct connectdata *conn = data->conn;
  175|       |
  176|       |#ifdef HAVE_GSSAPI
  177|       |  enum protection_level data_sec;
  178|       |#endif
  179|       |
  180|    551|  DEBUGASSERT(pp->sendleft == 0);
  181|    551|  DEBUGASSERT(pp->sendsize == 0);
  182|    551|  DEBUGASSERT(pp->sendthis == NULL);
  183|       |
  184|    551|  if(!conn)
  185|       |    /* can't send without a connection! */
  186|      0|    return CURLE_SEND_ERROR;
  187|       |
  188|    551|  Curl_dyn_reset(&pp->sendbuf);
  189|    551|  result = Curl_dyn_vaddf(&pp->sendbuf, fmt, args);
  190|    551|  if(result)
  191|      0|    return result;
  192|       |
  193|       |  /* append CRLF */
  194|    551|  result = Curl_dyn_addn(&pp->sendbuf, "\r\n", 2);
  195|    551|  if(result)
  196|      0|    return result;
  197|       |
  198|    551|  write_len = Curl_dyn_len(&pp->sendbuf);
  199|    551|  s = Curl_dyn_ptr(&pp->sendbuf);
  200|    551|  Curl_pp_init(data, pp);
  201|       |
  202|    551|  result = Curl_convert_to_network(data, s, write_len);
  203|       |  /* Curl_convert_to_network calls failf if unsuccessful */
  204|    551|  if(result)
  205|      0|    return result;
  206|       |
  207|       |#ifdef HAVE_GSSAPI
  208|       |  conn->data_prot = PROT_CMD;
  209|       |#endif
  210|    551|  result = Curl_write(data, conn->sock[FIRSTSOCKET], s, write_len,
  211|    551|                      &bytes_written);
  212|    551|  if(result)
  213|      0|    return result;
  214|       |#ifdef HAVE_GSSAPI
  215|       |  data_sec = conn->data_prot;
  216|       |  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  217|       |  conn->data_prot = data_sec;
  218|       |#endif
  219|       |
  220|    551|  Curl_debug(data, CURLINFO_HEADER_OUT, s, (size_t)bytes_written);
  221|       |
  222|    551|  if(bytes_written != (ssize_t)write_len) {
  223|       |    /* the whole chunk was not sent, keep it around and adjust sizes */
  224|      0|    pp->sendthis = s;
  225|      0|    pp->sendsize = write_len;
  226|      0|    pp->sendleft = write_len - bytes_written;
  227|      0|  }
  228|    551|  else {
  229|    551|    pp->sendthis = NULL;
  230|    551|    pp->sendleft = pp->sendsize = 0;
  231|    551|    pp->response = Curl_now();
  232|    551|  }
  233|       |
  234|    551|  return CURLE_OK;
  235|    551|}
Curl_pp_sendf:
  250|    551|{
  251|    551|  CURLcode result;
  252|    551|  va_list ap;
  253|    551|  va_start(ap, fmt);
  254|       |
  255|    551|  result = Curl_pp_vsendf(data, pp, fmt, ap);
  256|       |
  257|    551|  va_end(ap);
  258|       |
  259|    551|  return result;
  260|    551|}
Curl_pp_readresp:
  272|  1.00k|{
  273|  1.00k|  ssize_t perline; /* count bytes per line */
  274|  1.00k|  bool keepon = TRUE;
  275|  1.00k|  ssize_t gotbytes;
  276|  1.00k|  char *ptr;
  277|  1.00k|  struct connectdata *conn = data->conn;
  278|  1.00k|  char * const buf = data->state.buffer;
  279|  1.00k|  CURLcode result = CURLE_OK;
  280|       |
  281|  1.00k|  *code = 0; /* 0 for errors or not done */
  282|  1.00k|  *size = 0;
  283|       |
  284|  1.00k|  ptr = buf + pp->nread_resp;
  285|       |
  286|       |  /* number of bytes in the current line, so far */
  287|  1.00k|  perline = (ssize_t)(ptr-pp->linestart_resp);
  288|       |
  289|  2.06k|  while((pp->nread_resp < (size_t)data->set.buffer_size) &&
  290|  2.06k|        (keepon && !result)) {
  291|       |
  292|  1.16k|    if(pp->cache) {
  293|       |      /* we had data in the "cache", copy that instead of doing an actual
  294|       |       * read
  295|       |       *
  296|       |       * pp->cache_size is cast to ssize_t here.  This should be safe, because
  297|       |       * it would have been populated with something of size int to begin
  298|       |       * with, even though its datatype may be larger than an int.
  299|       |       */
  300|     63|      if((ptr + pp->cache_size) > (buf + data->set.buffer_size + 1)) {
  301|      0|        failf(data, "cached response data too big to handle");
  302|      0|        return CURLE_RECV_ERROR;
  303|      0|      }
  304|     63|      memcpy(ptr, pp->cache, pp->cache_size);
  305|     63|      gotbytes = (ssize_t)pp->cache_size;
  306|     63|      free(pp->cache);    /* free the cache */
  307|     63|      pp->cache = NULL;   /* clear the pointer */
  308|     63|      pp->cache_size = 0; /* zero the size just in case */
  309|     63|    }
  310|  1.09k|    else {
  311|       |#ifdef HAVE_GSSAPI
  312|       |      enum protection_level prot = conn->data_prot;
  313|       |      conn->data_prot = PROT_CLEAR;
  314|       |#endif
  315|  1.09k|      DEBUGASSERT((ptr + data->set.buffer_size - pp->nread_resp) <=
  316|  1.09k|                  (buf + data->set.buffer_size + 1));
  317|  1.09k|      result = Curl_read(data, sockfd, ptr,
  318|  1.09k|                         data->set.buffer_size - pp->nread_resp,
  319|  1.09k|                         &gotbytes);
  320|       |#ifdef HAVE_GSSAPI
  321|       |      DEBUGASSERT(prot  > PROT_NONE && prot < PROT_LAST);
  322|       |      conn->data_prot = prot;
  323|       |#endif
  324|  1.09k|      if(result == CURLE_AGAIN)
  325|     96|        return CURLE_OK; /* return */
  326|       |
  327|  1.00k|      if(!result && (gotbytes > 0))
  328|       |        /* convert from the network encoding */
  329|    696|        result = Curl_convert_from_network(data, ptr, gotbytes);
  330|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  331|       |
  332|  1.00k|      if(result)
  333|       |        /* Set outer result variable to this error. */
  334|      0|        keepon = FALSE;
  335|  1.00k|    }
  336|       |
  337|  1.06k|    if(!keepon)
  338|      0|      ;
  339|  1.06k|    else if(gotbytes <= 0) {
  340|    307|      keepon = FALSE;
  341|    307|      result = CURLE_RECV_ERROR;
  342|    307|      failf(data, "response reading failed");
  343|    307|    }
  344|    759|    else {
  345|       |      /* we got a whole chunk of data, which can be anything from one
  346|       |       * byte to a set of lines and possible just a piece of the last
  347|       |       * line */
  348|    759|      ssize_t i;
  349|    759|      ssize_t clipamount = 0;
  350|    759|      bool restart = FALSE;
  351|       |
  352|    759|      data->req.headerbytecount += (long)gotbytes;
  353|       |
  354|    759|      pp->nread_resp += gotbytes;
  355|  21.2k|      for(i = 0; i < gotbytes; ptr++, i++) {
  356|  21.1k|        perline++;
  357|  21.1k|        if(*ptr == '\n') {
  358|       |          /* a newline is CRLF in pp-talk, so the CR is ignored as
  359|       |             the line isn't really terminated until the LF comes */
  360|       |
  361|       |          /* output debug output if that is requested */
  362|       |#ifdef HAVE_GSSAPI
  363|       |          if(!conn->sec_complete)
  364|       |#endif
  365|  1.16k|            Curl_debug(data, CURLINFO_HEADER_IN,
  366|  1.16k|                       pp->linestart_resp, (size_t)perline);
  367|       |
  368|       |          /*
  369|       |           * We pass all response-lines to the callback function registered
  370|       |           * for "headers". The response lines can be seen as a kind of
  371|       |           * headers.
  372|       |           */
  373|  1.16k|          result = Curl_client_write(data, CLIENTWRITE_HEADER,
  374|  1.16k|                                     pp->linestart_resp, perline);
  375|  1.16k|          if(result)
  376|      0|            return result;
  377|       |
  378|  1.16k|          if(pp->endofresp(data, conn, pp->linestart_resp, perline, code)) {
  379|       |            /* This is the end of the last line, copy the last line to the
  380|       |               start of the buffer and null-terminate, for old times sake */
  381|    599|            size_t n = ptr - pp->linestart_resp;
  382|    599|            memmove(buf, pp->linestart_resp, n);
  383|    599|            buf[n] = 0; /* null-terminate */
  384|    599|            keepon = FALSE;
  385|    599|            pp->linestart_resp = ptr + 1; /* advance pointer */
  386|    599|            i++; /* skip this before getting out */
  387|       |
  388|    599|            *size = pp->nread_resp; /* size of the response */
  389|    599|            pp->nread_resp = 0; /* restart */
  390|    599|            break;
  391|    599|          }
  392|    562|          perline = 0; /* line starts over here */
  393|    562|          pp->linestart_resp = ptr + 1;
  394|    562|        }
  395|  21.1k|      }
  396|       |
  397|    759|      if(!keepon && (i != gotbytes)) {
  398|       |        /* We found the end of the response lines, but we didn't parse the
  399|       |           full chunk of data we have read from the server. We therefore need
  400|       |           to store the rest of the data to be checked on the next invoke as
  401|       |           it may actually contain another end of response already! */
  402|     73|        clipamount = gotbytes - i;
  403|     73|        restart = TRUE;
  404|     73|        DEBUGF(infof(data, "Curl_pp_readresp_ %d bytes of trailing "
  405|     73|                     "server response left",
  406|     73|                     (int)clipamount));
  407|     73|      }
  408|    686|      else if(keepon) {
  409|       |
  410|    160|        if((perline == gotbytes) && (gotbytes > data->set.buffer_size/2)) {
  411|       |          /* We got an excessive line without newlines and we need to deal
  412|       |             with it. We keep the first bytes of the line then we throw
  413|       |             away the rest. */
  414|      0|          infof(data, "Excessive server response line length received, "
  415|      0|                "%zd bytes. Stripping", gotbytes);
  416|      0|          restart = TRUE;
  417|       |
  418|       |          /* we keep 40 bytes since all our pingpong protocols are only
  419|       |             interested in the first piece */
  420|      0|          clipamount = 40;
  421|      0|        }
  422|    160|        else if(pp->nread_resp > (size_t)data->set.buffer_size/2) {
  423|       |          /* We got a large chunk of data and there's potentially still
  424|       |             trailing data to take care of, so we put any such part in the
  425|       |             "cache", clear the buffer to make space and restart. */
  426|      2|          clipamount = perline;
  427|      2|          restart = TRUE;
  428|      2|        }
  429|    160|      }
  430|    526|      else if(i == gotbytes)
  431|    526|        restart = TRUE;
  432|       |
  433|    759|      if(clipamount) {
  434|     75|        pp->cache_size = clipamount;
  435|     75|        pp->cache = malloc(pp->cache_size);
  436|     75|        if(pp->cache)
  437|     75|          memcpy(pp->cache, pp->linestart_resp, pp->cache_size);
  438|      0|        else
  439|      0|          return CURLE_OUT_OF_MEMORY;
  440|     75|      }
  441|    759|      if(restart) {
  442|       |        /* now reset a few variables to start over nicely from the start of
  443|       |           the big buffer */
  444|    601|        pp->nread_resp = 0; /* start over from scratch in the buffer */
  445|    601|        ptr = pp->linestart_resp = buf;
  446|    601|        perline = 0;
  447|    601|      }
  448|       |
  449|    759|    } /* there was data */
  450|       |
  451|  1.06k|  } /* while there's buffer left and loop is requested */
  452|       |
  453|    906|  pp->pending_resp = FALSE;
  454|       |
  455|    906|  return result;
  456|  1.00k|}
Curl_pp_getsock:
  460|    733|{
  461|    733|  struct connectdata *conn = data->conn;
  462|    733|  socks[0] = conn->sock[FIRSTSOCKET];
  463|       |
  464|    733|  if(pp->sendleft) {
  465|       |    /* write mode */
  466|      0|    return GETSOCK_WRITESOCK(0);
  467|      0|  }
  468|       |
  469|       |  /* read mode */
  470|    733|  return GETSOCK_READSOCK(0);
  471|    733|}
Curl_pp_disconnect:
  498|    526|{
  499|    526|  Curl_dyn_free(&pp->sendbuf);
  500|    526|  Curl_safefree(pp->cache);
  501|    526|  return CURLE_OK;
  502|    526|}
Curl_pp_moredata:
  505|  1.22k|{
  506|  1.22k|  return (!pp->sendleft && pp->cache && pp->nread_resp < pp->cache_size) ?
  507|  1.22k|    TRUE : FALSE;
  508|  1.22k|}

Curl_pgrsDone:
  141|    524|{
  142|    524|  int rc;
  143|    524|  data->progress.lastshow = 0;
  144|    524|  rc = Curl_pgrsUpdate(data); /* the final (forced) update */
  145|    524|  if(rc)
  146|      0|    return rc;
  147|       |
  148|    524|  if(!(data->progress.flags & PGRS_HIDE) &&
  149|    524|     !data->progress.callback)
  150|       |    /* only output if we don't use a progress callback and we're not
  151|       |     * hidden */
  152|      0|    fprintf(data->set.err, "\n");
  153|       |
  154|    524|  data->progress.speeder_c = 0; /* reset the progress meter display */
  155|    524|  return 0;
  156|    524|}
Curl_pgrsResetTransferSizes:
  160|    688|{
  161|    688|  Curl_pgrsSetDownloadSize(data, -1);
  162|    688|  Curl_pgrsSetUploadSize(data, -1);
  163|    688|}
Curl_pgrsTime:
  173|  2.42k|{
  174|  2.42k|  struct curltime now = Curl_now();
  175|  2.42k|  timediff_t *delta = NULL;
  176|       |
  177|  2.42k|  switch(timer) {
  178|      0|  default:
  179|      0|  case TIMER_NONE:
  180|       |    /* mistake filter */
  181|      0|    break;
  182|    688|  case TIMER_STARTOP:
  183|       |    /* This is set at the start of a transfer */
  184|    688|    data->progress.t_startop = now;
  185|    688|    break;
  186|    688|  case TIMER_STARTSINGLE:
  187|       |    /* This is set at the start of each single fetch */
  188|    688|    data->progress.t_startsingle = now;
  189|    688|    data->progress.is_t_startransfer_set = false;
  190|    688|    break;
  191|      0|  case TIMER_STARTACCEPT:
  192|      0|    data->progress.t_acceptdata = now;
  193|      0|    break;
  194|    524|  case TIMER_NAMELOOKUP:
  195|    524|    delta = &data->progress.t_nslookup;
  196|    524|    break;
  197|    524|  case TIMER_CONNECT:
  198|    524|    delta = &data->progress.t_connect;
  199|    524|    break;
  200|      0|  case TIMER_APPCONNECT:
  201|      0|    delta = &data->progress.t_appconnect;
  202|      0|    break;
  203|      3|  case TIMER_PRETRANSFER:
  204|      3|    delta = &data->progress.t_pretransfer;
  205|      3|    break;
  206|      0|  case TIMER_STARTTRANSFER:
  207|      0|    delta = &data->progress.t_starttransfer;
  208|       |    /* prevent updating t_starttransfer unless:
  209|       |     *   1) this is the first time we're setting t_starttransfer
  210|       |     *   2) a redirect has occurred since the last time t_starttransfer was set
  211|       |     * This prevents repeated invocations of the function from incorrectly
  212|       |     * changing the t_starttransfer time.
  213|       |     */
  214|      0|    if(data->progress.is_t_startransfer_set) {
  215|      0|      return now;
  216|      0|    }
  217|      0|    else {
  218|      0|      data->progress.is_t_startransfer_set = true;
  219|      0|      break;
  220|      0|    }
  221|      0|  case TIMER_POSTRANSFER:
  222|       |    /* this is the normal end-of-transfer thing */
  223|      0|    break;
  224|      0|  case TIMER_REDIRECT:
  225|      0|    data->progress.t_redirect = Curl_timediff_us(now, data->progress.start);
  226|      0|    break;
  227|  2.42k|  }
  228|  2.42k|  if(delta) {
  229|  1.05k|    timediff_t us = Curl_timediff_us(now, data->progress.t_startsingle);
  230|  1.05k|    if(us < 1)
  231|      0|      us = 1; /* make sure at least one microsecond passed */
  232|  1.05k|    *delta += us;
  233|  1.05k|  }
  234|  2.42k|  return now;
  235|  2.42k|}
Curl_pgrsStartNow:
  238|    688|{
  239|    688|  data->progress.speeder_c = 0; /* reset the progress meter display */
  240|    688|  data->progress.start = Curl_now();
  241|    688|  data->progress.is_t_startransfer_set = false;
  242|    688|  data->progress.ul_limit_start = data->progress.start;
  243|    688|  data->progress.dl_limit_start = data->progress.start;
  244|    688|  data->progress.ul_limit_size = 0;
  245|    688|  data->progress.dl_limit_size = 0;
  246|    688|  data->progress.downloaded = 0;
  247|    688|  data->progress.uploaded = 0;
  248|       |  /* clear all bits except HIDE and HEADERS_OUT */
  249|    688|  data->progress.flags &= PGRS_HIDE|PGRS_HEADERS_OUT;
  250|    688|  Curl_ratelimit(data, data->progress.start);
  251|    688|}
Curl_pgrsSetDownloadCounter:
  316|    613|{
  317|    613|  data->progress.downloaded = size;
  318|    613|}
Curl_ratelimit:
  324|    688|{
  325|       |  /* don't set a new stamp unless the time since last update is long enough */
  326|    688|  if(data->set.max_recv_speed) {
  327|      0|    if(Curl_timediff(now, data->progress.dl_limit_start) >=
  328|      0|       MIN_RATE_LIMIT_PERIOD) {
  329|      0|      data->progress.dl_limit_start = now;
  330|      0|      data->progress.dl_limit_size = data->progress.downloaded;
  331|      0|    }
  332|      0|  }
  333|    688|  if(data->set.max_send_speed) {
  334|      0|    if(Curl_timediff(now, data->progress.ul_limit_start) >=
  335|      0|       MIN_RATE_LIMIT_PERIOD) {
  336|      0|      data->progress.ul_limit_start = now;
  337|      0|      data->progress.ul_limit_size = data->progress.uploaded;
  338|      0|    }
  339|      0|  }
  340|    688|}
Curl_pgrsSetUploadCounter:
  346|    613|{
  347|    613|  data->progress.uploaded = size;
  348|    613|}
Curl_pgrsSetDownloadSize:
  351|    779|{
  352|    779|  if(size >= 0) {
  353|      0|    data->progress.size_dl = size;
  354|      0|    data->progress.flags |= PGRS_DL_SIZE_KNOWN;
  355|      0|  }
  356|    779|  else {
  357|    779|    data->progress.size_dl = 0;
  358|    779|    data->progress.flags &= ~PGRS_DL_SIZE_KNOWN;
  359|    779|  }
  360|    779|}
Curl_pgrsSetUploadSize:
  363|    777|{
  364|    777|  if(size >= 0) {
  365|      0|    data->progress.size_ul = size;
  366|      0|    data->progress.flags |= PGRS_UL_SIZE_KNOWN;
  367|      0|  }
  368|    777|  else {
  369|    777|    data->progress.size_ul = 0;
  370|    777|    data->progress.flags &= ~PGRS_UL_SIZE_KNOWN;
  371|    777|  }
  372|    777|}
Curl_pgrsUpdate:
  577|  2.43k|{
  578|  2.43k|  struct curltime now = Curl_now(); /* what time is it */
  579|  2.43k|  bool showprogress = progress_calc(data, now);
  580|  2.43k|  if(!(data->progress.flags & PGRS_HIDE)) {
  581|      0|    if(data->set.fxferinfo) {
  582|      0|      int result;
  583|       |      /* There's a callback set, call that */
  584|      0|      Curl_set_in_callback(data, true);
  585|      0|      result = data->set.fxferinfo(data->set.progress_client,
  586|      0|                                   data->progress.size_dl,
  587|      0|                                   data->progress.downloaded,
  588|      0|                                   data->progress.size_ul,
  589|      0|                                   data->progress.uploaded);
  590|      0|      Curl_set_in_callback(data, false);
  591|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  592|      0|        if(result)
  593|      0|          failf(data, "Callback aborted");
  594|      0|        return result;
  595|      0|      }
  596|      0|    }
  597|      0|    else if(data->set.fprogress) {
  598|      0|      int result;
  599|       |      /* The older deprecated callback is set, call that */
  600|      0|      Curl_set_in_callback(data, true);
  601|      0|      result = data->set.fprogress(data->set.progress_client,
  602|      0|                                   (double)data->progress.size_dl,
  603|      0|                                   (double)data->progress.downloaded,
  604|      0|                                   (double)data->progress.size_ul,
  605|      0|                                   (double)data->progress.uploaded);
  606|      0|      Curl_set_in_callback(data, false);
  607|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  608|      0|        if(result)
  609|      0|          failf(data, "Callback aborted");
  610|      0|        return result;
  611|      0|      }
  612|      0|    }
  613|       |
  614|      0|    if(showprogress)
  615|      0|      progress_meter(data);
  616|      0|  }
  617|       |
  618|  2.43k|  return 0;
  619|  2.43k|}
progress.c:progress_calc:
  390|  2.43k|{
  391|  2.43k|  bool timetoshow = FALSE;
  392|  2.43k|  struct Progress * const p = &data->progress;
  393|       |
  394|       |  /* The time spent so far (from the start) in microseconds */
  395|  2.43k|  p->timespent = Curl_timediff_us(now, p->start);
  396|  2.43k|  p->dlspeed = trspeed(p->downloaded, p->timespent);
  397|  2.43k|  p->ulspeed = trspeed(p->uploaded, p->timespent);
  398|       |
  399|       |  /* Calculations done at most once a second, unless end is reached */
  400|  2.43k|  if(p->lastshow != now.tv_sec) {
  401|  1.08k|    int countindex; /* amount of seconds stored in the speeder array */
  402|  1.08k|    int nowindex = p->speeder_c% CURR_TIME;
  403|  1.08k|    p->lastshow = now.tv_sec;
  404|  1.08k|    timetoshow = TRUE;
  405|       |
  406|       |    /* Let's do the "current speed" thing, with the dl + ul speeds
  407|       |       combined. Store the speed at entry 'nowindex'. */
  408|  1.08k|    p->speeder[ nowindex ] = p->downloaded + p->uploaded;
  409|       |
  410|       |    /* remember the exact time for this moment */
  411|  1.08k|    p->speeder_time [ nowindex ] = now;
  412|       |
  413|       |    /* advance our speeder_c counter, which is increased every time we get
  414|       |       here and we expect it to never wrap as 2^32 is a lot of seconds! */
  415|  1.08k|    p->speeder_c++;
  416|       |
  417|       |    /* figure out how many index entries of data we have stored in our speeder
  418|       |       array. With N_ENTRIES filled in, we have about N_ENTRIES-1 seconds of
  419|       |       transfer. Imagine, after one second we have filled in two entries,
  420|       |       after two seconds we've filled in three entries etc. */
  421|  1.08k|    countindex = ((p->speeder_c >= CURR_TIME)? CURR_TIME:p->speeder_c) - 1;
  422|       |
  423|       |    /* first of all, we don't do this if there's no counted seconds yet */
  424|  1.08k|    if(countindex) {
  425|    529|      int checkindex;
  426|    529|      timediff_t span_ms;
  427|    529|      curl_off_t amount;
  428|       |
  429|       |      /* Get the index position to compare with the 'nowindex' position.
  430|       |         Get the oldest entry possible. While we have less than CURR_TIME
  431|       |         entries, the first entry will remain the oldest. */
  432|    529|      checkindex = (p->speeder_c >= CURR_TIME)? p->speeder_c%CURR_TIME:0;
  433|       |
  434|       |      /* Figure out the exact time for the time span */
  435|    529|      span_ms = Curl_timediff(now, p->speeder_time[checkindex]);
  436|    529|      if(0 == span_ms)
  437|    366|        span_ms = 1; /* at least one millisecond MUST have passed */
  438|       |
  439|       |      /* Calculate the average speed the last 'span_ms' milliseconds */
  440|    529|      amount = p->speeder[nowindex]- p->speeder[checkindex];
  441|       |
  442|    529|      if(amount > CURL_OFF_T_C(4294967) /* 0xffffffff/1000 */)
  443|       |        /* the 'amount' value is bigger than would fit in 32 bits if
  444|       |           multiplied with 1000, so we use the double math for this */
  445|      0|        p->current_speed = (curl_off_t)
  446|      0|          ((double)amount/((double)span_ms/1000.0));
  447|    529|      else
  448|       |        /* the 'amount' value is small enough to fit within 32 bits even
  449|       |           when multiplied with 1000 */
  450|    529|        p->current_speed = amount*CURL_OFF_T_C(1000)/span_ms;
  451|    529|    }
  452|    552|    else
  453|       |      /* the first second we use the average */
  454|    552|      p->current_speed = p->ulspeed + p->dlspeed;
  455|       |
  456|  1.08k|  } /* Calculations end */
  457|  2.43k|  return timetoshow;
  458|  2.43k|}
progress.c:trspeed:
  377|  4.86k|{
  378|  4.86k|  if(us < 1)
  379|      0|    return size * 1000000;
  380|  4.86k|  else if(size < CURL_OFF_T_MAX/1000000)
  381|  4.86k|    return (size * 1000000) / us;
  382|      0|  else if(us >= 1000000)
  383|      0|    return size / (us / 1000000);
  384|      0|  else
  385|      0|    return CURL_OFF_T_MAX;
  386|  4.86k|}

Curl_rand:
  120|    865|{
  121|    865|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  122|       |
  123|    865|  DEBUGASSERT(num > 0);
  124|       |
  125|  1.81k|  while(num) {
  126|    947|    unsigned int r;
  127|    947|    size_t left = num < sizeof(unsigned int) ? num : sizeof(unsigned int);
  128|       |
  129|    947|    result = randit(data, &r);
  130|    947|    if(result)
  131|      0|      return result;
  132|       |
  133|  4.73k|    while(left) {
  134|  3.78k|      *rnd++ = (unsigned char)(r & 0xFF);
  135|  3.78k|      r >>= 8;
  136|  3.78k|      --num;
  137|  3.78k|      --left;
  138|  3.78k|    }
  139|    947|  }
  140|       |
  141|    865|  return result;
  142|    865|}
Curl_rand_hex:
  152|    865|{
  153|    865|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  154|    865|  const char *hex = "0123456789abcdef";
  155|    865|  unsigned char buffer[128];
  156|    865|  unsigned char *bufp = buffer;
  157|    865|  DEBUGASSERT(num > 1);
  158|       |
  159|       |#ifdef __clang_analyzer__
  160|       |  /* This silences a scan-build warning about accessing this buffer with
  161|       |     uninitialized memory. */
  162|       |  memset(buffer, 0, sizeof(buffer));
  163|       |#endif
  164|       |
  165|    865|  if((num/2 >= sizeof(buffer)) || !(num&1))
  166|       |    /* make sure it fits in the local buffer and that it is an odd number! */
  167|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  168|       |
  169|    865|  num--; /* save one for zero termination */
  170|       |
  171|    865|  result = Curl_rand(data, buffer, num/2);
  172|    865|  if(result)
  173|      0|    return result;
  174|       |
  175|  4.65k|  while(num) {
  176|       |    /* clang-tidy warns on this line without this comment: */
  177|       |    /* NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult) */
  178|  3.78k|    *rnd++ = hex[(*bufp & 0xF0)>>4];
  179|  3.78k|    *rnd++ = hex[*bufp & 0x0F];
  180|  3.78k|    bufp++;
  181|  3.78k|    num -= 2;
  182|  3.78k|  }
  183|    865|  *rnd = 0;
  184|       |
  185|    865|  return result;
  186|    865|}
rand.c:randit:
   40|    947|{
   41|    947|  unsigned int r;
   42|    947|  CURLcode result = CURLE_OK;
   43|    947|  static unsigned int randseed;
   44|    947|  static bool seeded = FALSE;
   45|       |
   46|    947|#ifdef CURLDEBUG
   47|    947|  char *force_entropy = getenv("CURL_ENTROPY");
   48|    947|  if(force_entropy) {
   49|      0|    if(!seeded) {
   50|      0|      unsigned int seed = 0;
   51|      0|      size_t elen = strlen(force_entropy);
   52|      0|      size_t clen = sizeof(seed);
   53|      0|      size_t min = elen < clen ? elen : clen;
   54|      0|      memcpy((char *)&seed, force_entropy, min);
   55|      0|      randseed = ntohl(seed);
   56|      0|      seeded = TRUE;
   57|      0|    }
   58|      0|    else
   59|      0|      randseed++;
   60|      0|    *rnd = randseed;
   61|      0|    return CURLE_OK;
   62|      0|  }
   63|    947|#endif
   64|       |
   65|       |  /* data may be NULL! */
   66|    947|  result = Curl_ssl_random(data, (unsigned char *)rnd, sizeof(*rnd));
   67|    947|  if(result != CURLE_NOT_BUILT_IN)
   68|       |    /* only if there is no random function in the TLS backend do the non crypto
   69|       |       version, otherwise return result */
   70|    947|    return result;
   71|       |
   72|       |  /* ---- non-cryptographic version following ---- */
   73|       |
   74|      0|#ifdef RANDOM_FILE
   75|      0|  if(!seeded) {
   76|       |    /* if there's a random file to read a seed from, use it */
   77|      0|    int fd = open(RANDOM_FILE, O_RDONLY);
   78|      0|    if(fd > -1) {
   79|       |      /* read random data into the randseed variable */
   80|      0|      ssize_t nread = read(fd, &randseed, sizeof(randseed));
   81|      0|      if(nread == sizeof(randseed))
   82|      0|        seeded = TRUE;
   83|      0|      close(fd);
   84|      0|    }
   85|      0|  }
   86|      0|#endif
   87|       |
   88|      0|  if(!seeded) {
   89|      0|    struct curltime now = Curl_now();
   90|      0|    infof(data, "WARNING: Using weak random seed");
   91|      0|    randseed += (unsigned int)now.tv_usec + (unsigned int)now.tv_sec;
   92|      0|    randseed = randseed * 1103515245 + 12345;
   93|      0|    randseed = randseed * 1103515245 + 12345;
   94|      0|    randseed = randseed * 1103515245 + 12345;
   95|      0|    seeded = TRUE;
   96|      0|  }
   97|       |
   98|       |  /* Return an unsigned 32-bit pseudo-random number. */
   99|      0|  r = randseed = randseed * 1103515245 + 12345;
  100|      0|  *rnd = (r << 16) | ((r >> 16) & 0xFFFF);
  101|      0|  return CURLE_OK;
  102|    947|}

Curl_rename:
   40|    783|{
   41|       |#ifdef WIN32
   42|       |  /* rename() on Windows doesn't overwrite, so we can't use it here.
   43|       |     MoveFileEx() will overwrite and is usually atomic, however it fails
   44|       |     when there are open handles to the file. */
   45|       |  const int max_wait_ms = 1000;
   46|       |  struct curltime start = Curl_now();
   47|       |  TCHAR *tchar_oldpath = curlx_convert_UTF8_to_tchar((char *)oldpath);
   48|       |  TCHAR *tchar_newpath = curlx_convert_UTF8_to_tchar((char *)newpath);
   49|       |  for(;;) {
   50|       |    timediff_t diff;
   51|       |    if(MoveFileEx(tchar_oldpath, tchar_newpath, MOVEFILE_REPLACE_EXISTING)) {
   52|       |      curlx_unicodefree(tchar_oldpath);
   53|       |      curlx_unicodefree(tchar_newpath);
   54|       |      break;
   55|       |    }
   56|       |    diff = Curl_timediff(Curl_now(), start);
   57|       |    if(diff < 0 || diff > max_wait_ms) {
   58|       |      curlx_unicodefree(tchar_oldpath);
   59|       |      curlx_unicodefree(tchar_newpath);
   60|       |      return 1;
   61|       |    }
   62|       |    Sleep(1);
   63|       |  }
   64|       |#else
   65|    783|  if(rename(oldpath, newpath))
   66|      0|    return 1;
   67|    783|#endif
   68|    783|  return 0;
   69|    783|}

Curl_socket_check:
  250|  1.68k|{
  251|  1.68k|  struct pollfd pfd[3];
  252|  1.68k|  int num;
  253|  1.68k|  int r;
  254|       |
  255|  1.68k|  if((readfd0 == CURL_SOCKET_BAD) && (readfd1 == CURL_SOCKET_BAD) &&
  256|  1.68k|     (writefd == CURL_SOCKET_BAD)) {
  257|       |    /* no sockets, just wait */
  258|      0|    return Curl_wait_ms(timeout_ms);
  259|      0|  }
  260|       |
  261|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  262|       |     time in this function does not need to be measured. This happens
  263|       |     when function is called with a zero timeout or a negative timeout
  264|       |     value indicating a blocking call should be performed. */
  265|       |
  266|  1.68k|  num = 0;
  267|  1.68k|  if(readfd0 != CURL_SOCKET_BAD) {
  268|  1.16k|    pfd[num].fd = readfd0;
  269|  1.16k|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  270|  1.16k|    pfd[num].revents = 0;
  271|  1.16k|    num++;
  272|  1.16k|  }
  273|  1.68k|  if(readfd1 != CURL_SOCKET_BAD) {
  274|      0|    pfd[num].fd = readfd1;
  275|      0|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  276|      0|    pfd[num].revents = 0;
  277|      0|    num++;
  278|      0|  }
  279|  1.68k|  if(writefd != CURL_SOCKET_BAD) {
  280|    524|    pfd[num].fd = writefd;
  281|    524|    pfd[num].events = POLLWRNORM|POLLOUT|POLLPRI;
  282|    524|    pfd[num].revents = 0;
  283|    524|    num++;
  284|    524|  }
  285|       |
  286|  1.68k|  r = Curl_poll(pfd, num, timeout_ms);
  287|  1.68k|  if(r <= 0)
  288|    219|    return r;
  289|       |
  290|  1.46k|  r = 0;
  291|  1.46k|  num = 0;
  292|  1.46k|  if(readfd0 != CURL_SOCKET_BAD) {
  293|    941|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  294|    941|      r |= CURL_CSELECT_IN;
  295|    941|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  296|      0|      r |= CURL_CSELECT_ERR;
  297|    941|    num++;
  298|    941|  }
  299|  1.46k|  if(readfd1 != CURL_SOCKET_BAD) {
  300|      0|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  301|      0|      r |= CURL_CSELECT_IN2;
  302|      0|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  303|      0|      r |= CURL_CSELECT_ERR;
  304|      0|    num++;
  305|      0|  }
  306|  1.46k|  if(writefd != CURL_SOCKET_BAD) {
  307|    524|    if(pfd[num].revents & (POLLWRNORM|POLLOUT))
  308|    524|      r |= CURL_CSELECT_OUT;
  309|    524|    if(pfd[num].revents & (POLLERR|POLLHUP|POLLPRI|POLLNVAL))
  310|      0|      r |= CURL_CSELECT_ERR;
  311|    524|  }
  312|       |
  313|  1.46k|  return r;
  314|  1.68k|}
Curl_poll:
  330|  1.68k|{
  331|  1.68k|#ifdef HAVE_POLL_FINE
  332|  1.68k|  int pending_ms;
  333|       |#else
  334|       |  fd_set fds_read;
  335|       |  fd_set fds_write;
  336|       |  fd_set fds_err;
  337|       |  curl_socket_t maxfd;
  338|       |#endif
  339|  1.68k|  bool fds_none = TRUE;
  340|  1.68k|  unsigned int i;
  341|  1.68k|  int r;
  342|       |
  343|  1.68k|  if(ufds) {
  344|  1.68k|    for(i = 0; i < nfds; i++) {
  345|  1.68k|      if(ufds[i].fd != CURL_SOCKET_BAD) {
  346|  1.68k|        fds_none = FALSE;
  347|  1.68k|        break;
  348|  1.68k|      }
  349|  1.68k|    }
  350|  1.68k|  }
  351|  1.68k|  if(fds_none) {
  352|       |    /* no sockets, just wait */
  353|      0|    return Curl_wait_ms(timeout_ms);
  354|      0|  }
  355|       |
  356|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  357|       |     time in this function does not need to be measured. This happens
  358|       |     when function is called with a zero timeout or a negative timeout
  359|       |     value indicating a blocking call should be performed. */
  360|       |
  361|  1.68k|#ifdef HAVE_POLL_FINE
  362|       |
  363|       |  /* prevent overflow, timeout_ms is typecast to int. */
  364|  1.68k|#if TIMEDIFF_T_MAX > INT_MAX
  365|  1.68k|  if(timeout_ms > INT_MAX)
  366|      0|    timeout_ms = INT_MAX;
  367|  1.68k|#endif
  368|  1.68k|  if(timeout_ms > 0)
  369|     23|    pending_ms = (int)timeout_ms;
  370|  1.66k|  else if(timeout_ms < 0)
  371|      0|    pending_ms = -1;
  372|  1.66k|  else
  373|  1.66k|    pending_ms = 0;
  374|  1.68k|  r = poll(ufds, nfds, pending_ms);
  375|  1.68k|  if(r <= 0)
  376|    219|    return r;
  377|       |
  378|  2.93k|  for(i = 0; i < nfds; i++) {
  379|  1.46k|    if(ufds[i].fd == CURL_SOCKET_BAD)
  380|      0|      continue;
  381|  1.46k|    if(ufds[i].revents & POLLHUP)
  382|      0|      ufds[i].revents |= POLLIN;
  383|  1.46k|    if(ufds[i].revents & POLLERR)
  384|      0|      ufds[i].revents |= POLLIN|POLLOUT;
  385|  1.46k|  }
  386|       |
  387|       |#else  /* HAVE_POLL_FINE */
  388|       |
  389|       |  FD_ZERO(&fds_read);
  390|       |  FD_ZERO(&fds_write);
  391|       |  FD_ZERO(&fds_err);
  392|       |  maxfd = (curl_socket_t)-1;
  393|       |
  394|       |  for(i = 0; i < nfds; i++) {
  395|       |    ufds[i].revents = 0;
  396|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  397|       |      continue;
  398|       |    VERIFY_SOCK(ufds[i].fd);
  399|       |    if(ufds[i].events & (POLLIN|POLLOUT|POLLPRI|
  400|       |                         POLLRDNORM|POLLWRNORM|POLLRDBAND)) {
  401|       |      if(ufds[i].fd > maxfd)
  402|       |        maxfd = ufds[i].fd;
  403|       |      if(ufds[i].events & (POLLRDNORM|POLLIN))
  404|       |        FD_SET(ufds[i].fd, &fds_read);
  405|       |      if(ufds[i].events & (POLLWRNORM|POLLOUT))
  406|       |        FD_SET(ufds[i].fd, &fds_write);
  407|       |      if(ufds[i].events & (POLLRDBAND|POLLPRI))
  408|       |        FD_SET(ufds[i].fd, &fds_err);
  409|       |    }
  410|       |  }
  411|       |
  412|       |  /*
  413|       |     Note also that WinSock ignores the first argument, so we don't worry
  414|       |     about the fact that maxfd is computed incorrectly with WinSock (since
  415|       |     curl_socket_t is unsigned in such cases and thus -1 is the largest
  416|       |     value).
  417|       |  */
  418|       |  r = our_select(maxfd, &fds_read, &fds_write, &fds_err, timeout_ms);
  419|       |  if(r <= 0)
  420|       |    return r;
  421|       |
  422|       |  r = 0;
  423|       |  for(i = 0; i < nfds; i++) {
  424|       |    ufds[i].revents = 0;
  425|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  426|       |      continue;
  427|       |    if(FD_ISSET(ufds[i].fd, &fds_read)) {
  428|       |      if(ufds[i].events & POLLRDNORM)
  429|       |        ufds[i].revents |= POLLRDNORM;
  430|       |      if(ufds[i].events & POLLIN)
  431|       |        ufds[i].revents |= POLLIN;
  432|       |    }
  433|       |    if(FD_ISSET(ufds[i].fd, &fds_write)) {
  434|       |      if(ufds[i].events & POLLWRNORM)
  435|       |        ufds[i].revents |= POLLWRNORM;
  436|       |      if(ufds[i].events & POLLOUT)
  437|       |        ufds[i].revents |= POLLOUT;
  438|       |    }
  439|       |    if(FD_ISSET(ufds[i].fd, &fds_err)) {
  440|       |      if(ufds[i].events & POLLRDBAND)
  441|       |        ufds[i].revents |= POLLRDBAND;
  442|       |      if(ufds[i].events & POLLPRI)
  443|       |        ufds[i].revents |= POLLPRI;
  444|       |    }
  445|       |    if(ufds[i].revents)
  446|       |      r++;
  447|       |  }
  448|       |
  449|       |#endif  /* HAVE_POLL_FINE */
  450|       |
  451|  1.46k|  return r;
  452|  1.68k|}

Curl_infof:
  242|  9.23k|{
  243|  9.23k|  DEBUGASSERT(!strchr(fmt, '\n'));
  244|  9.23k|  if(data && data->set.verbose) {
  245|      0|    va_list ap;
  246|      0|    size_t len;
  247|      0|    char buffer[MAXINFO + 2];
  248|      0|    va_start(ap, fmt);
  249|      0|    len = mvsnprintf(buffer, MAXINFO, fmt, ap);
  250|      0|    va_end(ap);
  251|      0|    buffer[len++] = '\n';
  252|      0|    buffer[len] = '\0';
  253|      0|    Curl_debug(data, CURLINFO_TEXT, buffer, len);
  254|      0|  }
  255|  9.23k|}
Curl_failf:
  262|    634|{
  263|    634|  DEBUGASSERT(!strchr(fmt, '\n'));
  264|    634|  if(data->set.verbose || data->set.errorbuffer) {
  265|      0|    va_list ap;
  266|      0|    size_t len;
  267|      0|    char error[CURL_ERROR_SIZE + 2];
  268|      0|    va_start(ap, fmt);
  269|      0|    len = mvsnprintf(error, CURL_ERROR_SIZE, fmt, ap);
  270|       |
  271|      0|    if(data->set.errorbuffer && !data->state.errorbuf) {
  272|      0|      strcpy(data->set.errorbuffer, error);
  273|      0|      data->state.errorbuf = TRUE; /* wrote error string */
  274|      0|    }
  275|      0|    error[len++] = '\n';
  276|      0|    error[len] = '\0';
  277|      0|    Curl_debug(data, CURLINFO_TEXT, error, len);
  278|      0|    va_end(ap);
  279|      0|  }
  280|    634|}
Curl_write:
  294|    551|{
  295|    551|  ssize_t bytes_written;
  296|    551|  CURLcode result = CURLE_OK;
  297|    551|  struct connectdata *conn;
  298|    551|  int num;
  299|    551|  DEBUGASSERT(data);
  300|    551|  DEBUGASSERT(data->conn);
  301|    551|  conn = data->conn;
  302|    551|  num = (sockfd == conn->sock[SECONDARYSOCKET]);
  303|       |
  304|    551|#ifdef CURLDEBUG
  305|    551|  {
  306|       |    /* Allow debug builds to override this logic to force short sends
  307|       |    */
  308|    551|    char *p = getenv("CURL_SMALLSENDS");
  309|    551|    if(p) {
  310|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
  311|      0|      if(altsize)
  312|      0|        len = CURLMIN(len, altsize);
  313|      0|    }
  314|    551|  }
  315|    551|#endif
  316|    551|  bytes_written = conn->send[num](data, num, mem, len, &result);
  317|       |
  318|    551|  *written = bytes_written;
  319|    551|  if(bytes_written >= 0)
  320|       |    /* we completely ignore the curlcode value when subzero is not returned */
  321|    551|    return CURLE_OK;
  322|       |
  323|       |  /* handle CURLE_AGAIN or a send failure */
  324|      0|  switch(result) {
  325|      0|  case CURLE_AGAIN:
  326|      0|    *written = 0;
  327|      0|    return CURLE_OK;
  328|       |
  329|      0|  case CURLE_OK:
  330|       |    /* general send failure */
  331|      0|    return CURLE_SEND_ERROR;
  332|       |
  333|      0|  default:
  334|       |    /* we got a specific curlcode, forward it */
  335|      0|    return result;
  336|      0|  }
  337|      0|}
Curl_send_plain:
  341|    551|{
  342|    551|  struct connectdata *conn;
  343|    551|  curl_socket_t sockfd;
  344|    551|  ssize_t bytes_written;
  345|       |
  346|    551|  DEBUGASSERT(data);
  347|    551|  DEBUGASSERT(data->conn);
  348|    551|  conn = data->conn;
  349|    551|  sockfd = conn->sock[num];
  350|       |  /* WinSock will destroy unread received data if send() is
  351|       |     failed.
  352|       |     To avoid lossage of received data, recv() must be
  353|       |     performed before every send() if any incoming data is
  354|       |     available. */
  355|    551|  if(pre_receive_plain(data, conn, num)) {
  356|      0|    *code = CURLE_OUT_OF_MEMORY;
  357|      0|    return -1;
  358|      0|  }
  359|       |
  360|       |#if defined(MSG_FASTOPEN) && !defined(TCP_FASTOPEN_CONNECT) /* Linux */
  361|       |  if(conn->bits.tcp_fastopen) {
  362|       |    bytes_written = sendto(sockfd, mem, len, MSG_FASTOPEN,
  363|       |                           conn->ip_addr->ai_addr, conn->ip_addr->ai_addrlen);
  364|       |    conn->bits.tcp_fastopen = FALSE;
  365|       |  }
  366|       |  else
  367|       |#endif
  368|    551|    bytes_written = swrite(sockfd, mem, len);
  369|       |
  370|    551|  *code = CURLE_OK;
  371|    551|  if(-1 == bytes_written) {
  372|      0|    int err = SOCKERRNO;
  373|       |
  374|      0|    if(
  375|       |#ifdef WSAEWOULDBLOCK
  376|       |      /* This is how Windows does it */
  377|       |      (WSAEWOULDBLOCK == err)
  378|       |#else
  379|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  380|       |         due to its inability to send off data without blocking. We therefore
  381|       |         treat both error codes the same here */
  382|      0|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err) ||
  383|      0|      (EINPROGRESS == err)
  384|      0|#endif
  385|      0|      ) {
  386|       |      /* this is just a case of EWOULDBLOCK */
  387|      0|      bytes_written = 0;
  388|      0|      *code = CURLE_AGAIN;
  389|      0|    }
  390|      0|    else {
  391|      0|      char buffer[STRERROR_LEN];
  392|      0|      failf(data, "Send failure: %s",
  393|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  394|      0|      data->state.os_errno = err;
  395|      0|      *code = CURLE_SEND_ERROR;
  396|      0|    }
  397|      0|  }
  398|    551|  return bytes_written;
  399|    551|}
Curl_recv_plain:
  425|  1.09k|{
  426|  1.09k|  struct connectdata *conn;
  427|  1.09k|  curl_socket_t sockfd;
  428|  1.09k|  ssize_t nread;
  429|  1.09k|  DEBUGASSERT(data);
  430|  1.09k|  DEBUGASSERT(data->conn);
  431|  1.09k|  conn = data->conn;
  432|  1.09k|  sockfd = conn->sock[num];
  433|       |  /* Check and return data that already received and storied in internal
  434|       |     intermediate buffer */
  435|  1.09k|  nread = get_pre_recved(conn, num, buf, len);
  436|  1.09k|  if(nread > 0) {
  437|      0|    *code = CURLE_OK;
  438|      0|    return nread;
  439|      0|  }
  440|       |
  441|  1.09k|  nread = sread(sockfd, buf, len);
  442|       |
  443|  1.09k|  *code = CURLE_OK;
  444|  1.09k|  if(-1 == nread) {
  445|     96|    int err = SOCKERRNO;
  446|       |
  447|     96|    if(
  448|       |#ifdef WSAEWOULDBLOCK
  449|       |      /* This is how Windows does it */
  450|       |      (WSAEWOULDBLOCK == err)
  451|       |#else
  452|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  453|       |         due to its inability to send off data without blocking. We therefore
  454|       |         treat both error codes the same here */
  455|     96|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err)
  456|     96|#endif
  457|     96|      ) {
  458|       |      /* this is just a case of EWOULDBLOCK */
  459|     96|      *code = CURLE_AGAIN;
  460|     96|    }
  461|      0|    else {
  462|      0|      char buffer[STRERROR_LEN];
  463|      0|      failf(data, "Recv failure: %s",
  464|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  465|      0|      data->state.os_errno = err;
  466|      0|      *code = CURLE_RECV_ERROR;
  467|      0|    }
  468|     96|  }
  469|  1.09k|  return nread;
  470|  1.09k|}
Curl_client_write:
  621|  1.16k|{
  622|  1.16k|  struct connectdata *conn = data->conn;
  623|       |
  624|  1.16k|  DEBUGASSERT(!(type & ~CLIENTWRITE_BOTH));
  625|       |
  626|  1.16k|  if(!len)
  627|      0|    return CURLE_OK;
  628|       |
  629|       |  /* FTP data may need conversion. */
  630|  1.16k|  if((type & CLIENTWRITE_BODY) &&
  631|  1.16k|    (conn->handler->protocol & PROTO_FAMILY_FTP) &&
  632|  1.16k|    conn->proto.ftpc.transfertype == 'A') {
  633|       |    /* convert from the network encoding */
  634|      0|    CURLcode result = Curl_convert_from_network(data, ptr, len);
  635|       |    /* Curl_convert_from_network calls failf if unsuccessful */
  636|      0|    if(result)
  637|      0|      return result;
  638|       |
  639|      0|#ifdef CURL_DO_LINEEND_CONV
  640|       |    /* convert end-of-line markers */
  641|      0|    len = convert_lineends(data, ptr, len);
  642|      0|#endif /* CURL_DO_LINEEND_CONV */
  643|      0|    }
  644|       |
  645|  1.16k|  return chop_write(data, type, ptr, len);
  646|  1.16k|}
Curl_read:
  685|  1.09k|{
  686|  1.09k|  CURLcode result = CURLE_RECV_ERROR;
  687|  1.09k|  ssize_t nread = 0;
  688|  1.09k|  size_t bytesfromsocket = 0;
  689|  1.09k|  char *buffertofill = NULL;
  690|  1.09k|  struct connectdata *conn = data->conn;
  691|       |
  692|       |  /* Set 'num' to 0 or 1, depending on which socket that has been sent here.
  693|       |     If it is the second socket, we set num to 1. Otherwise to 0. This lets
  694|       |     us use the correct ssl handle. */
  695|  1.09k|  int num = (sockfd == conn->sock[SECONDARYSOCKET]);
  696|       |
  697|  1.09k|  *n = 0; /* reset amount to zero */
  698|       |
  699|  1.09k|  bytesfromsocket = CURLMIN(sizerequested, (size_t)data->set.buffer_size);
  700|  1.09k|  buffertofill = buf;
  701|       |
  702|  1.09k|  nread = conn->recv[num](data, num, buffertofill, bytesfromsocket, &result);
  703|  1.09k|  if(nread < 0)
  704|     96|    return result;
  705|       |
  706|  1.00k|  *n += nread;
  707|       |
  708|  1.00k|  return CURLE_OK;
  709|  1.09k|}
Curl_debug:
  714|  1.71k|{
  715|  1.71k|  int rc = 0;
  716|  1.71k|  if(data->set.verbose) {
  717|      0|    static const char s_infotype[CURLINFO_END][3] = {
  718|      0|      "* ", "< ", "> ", "{ ", "} ", "{ ", "} " };
  719|       |
  720|       |#ifdef CURL_DOES_CONVERSIONS
  721|       |    char *buf = NULL;
  722|       |    size_t conv_size = 0;
  723|       |
  724|       |    switch(type) {
  725|       |    case CURLINFO_HEADER_OUT:
  726|       |      buf = Curl_memdup(ptr, size);
  727|       |      if(!buf)
  728|       |        return 1;
  729|       |      conv_size = size;
  730|       |
  731|       |      /* Special processing is needed for this block if it
  732|       |       * contains both headers and data (separated by CRLFCRLF).
  733|       |       * We want to convert just the headers, leaving the data as-is.
  734|       |       */
  735|       |      if(size > 4) {
  736|       |        size_t i;
  737|       |        for(i = 0; i < size-4; i++) {
  738|       |          if(memcmp(&buf[i], "\x0d\x0a\x0d\x0a", 4) == 0) {
  739|       |            /* convert everything through this CRLFCRLF but no further */
  740|       |            conv_size = i + 4;
  741|       |            break;
  742|       |          }
  743|       |        }
  744|       |      }
  745|       |
  746|       |      Curl_convert_from_network(data, buf, conv_size);
  747|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  748|       |      /* we might as well continue even if it fails...   */
  749|       |      ptr = buf; /* switch pointer to use my buffer instead */
  750|       |      break;
  751|       |    default:
  752|       |      /* leave everything else as-is */
  753|       |      break;
  754|       |    }
  755|       |#endif /* CURL_DOES_CONVERSIONS */
  756|       |
  757|      0|    if(data->set.fdebug) {
  758|      0|      Curl_set_in_callback(data, true);
  759|      0|      rc = (*data->set.fdebug)(data, type, ptr, size, data->set.debugdata);
  760|      0|      Curl_set_in_callback(data, false);
  761|      0|    }
  762|      0|    else {
  763|      0|      switch(type) {
  764|      0|      case CURLINFO_TEXT:
  765|      0|      case CURLINFO_HEADER_OUT:
  766|      0|      case CURLINFO_HEADER_IN:
  767|      0|        fwrite(s_infotype[type], 2, 1, data->set.err);
  768|      0|        fwrite(ptr, size, 1, data->set.err);
  769|       |#ifdef CURL_DOES_CONVERSIONS
  770|       |        if(size != conv_size) {
  771|       |          /* we had untranslated data so we need an explicit newline */
  772|       |          fwrite("\n", 1, 1, data->set.err);
  773|       |        }
  774|       |#endif
  775|      0|        break;
  776|      0|      default: /* nada */
  777|      0|        break;
  778|      0|      }
  779|      0|    }
  780|       |#ifdef CURL_DOES_CONVERSIONS
  781|       |    free(buf);
  782|       |#endif
  783|      0|  }
  784|  1.71k|  return rc;
  785|  1.71k|}
sendf.c:chop_write:
  526|  1.16k|{
  527|  1.16k|  struct connectdata *conn = data->conn;
  528|  1.16k|  curl_write_callback writeheader = NULL;
  529|  1.16k|  curl_write_callback writebody = NULL;
  530|  1.16k|  char *ptr = optr;
  531|  1.16k|  size_t len = olen;
  532|       |
  533|  1.16k|  if(!len)
  534|      0|    return CURLE_OK;
  535|       |
  536|       |  /* If reading is paused, append this data to the already held data for this
  537|       |     type. */
  538|  1.16k|  if(data->req.keepon & KEEP_RECV_PAUSE)
  539|      0|    return pausewrite(data, type, ptr, len);
  540|       |
  541|       |  /* Determine the callback(s) to use. */
  542|  1.16k|  if(type & CLIENTWRITE_BODY)
  543|      0|    writebody = data->set.fwrite_func;
  544|  1.16k|  if((type & CLIENTWRITE_HEADER) &&
  545|  1.16k|     (data->set.fwrite_header || data->set.writeheader)) {
  546|       |    /*
  547|       |     * Write headers to the same callback or to the especially setup
  548|       |     * header callback function (added after version 7.7.1).
  549|       |     */
  550|      0|    writeheader =
  551|      0|      data->set.fwrite_header? data->set.fwrite_header: data->set.fwrite_func;
  552|      0|  }
  553|       |
  554|       |  /* Chop data, write chunks. */
  555|  2.32k|  while(len) {
  556|  1.16k|    size_t chunklen = len <= CURL_MAX_WRITE_SIZE? len: CURL_MAX_WRITE_SIZE;
  557|       |
  558|  1.16k|    if(writebody) {
  559|      0|      size_t wrote;
  560|      0|      Curl_set_in_callback(data, true);
  561|      0|      wrote = writebody(ptr, 1, chunklen, data->set.out);
  562|      0|      Curl_set_in_callback(data, false);
  563|       |
  564|      0|      if(CURL_WRITEFUNC_PAUSE == wrote) {
  565|      0|        if(conn->handler->flags & PROTOPT_NONETWORK) {
  566|       |          /* Protocols that work without network cannot be paused. This is
  567|       |             actually only FILE:// just now, and it can't pause since the
  568|       |             transfer isn't done using the "normal" procedure. */
  569|      0|          failf(data, "Write callback asked for PAUSE when not supported!");
  570|      0|          return CURLE_WRITE_ERROR;
  571|      0|        }
  572|      0|        return pausewrite(data, type, ptr, len);
  573|      0|      }
  574|      0|      if(wrote != chunklen) {
  575|      0|        failf(data, "Failure writing output to destination");
  576|      0|        return CURLE_WRITE_ERROR;
  577|      0|      }
  578|      0|    }
  579|       |
  580|  1.16k|    ptr += chunklen;
  581|  1.16k|    len -= chunklen;
  582|  1.16k|  }
  583|       |
  584|  1.16k|  if(writeheader) {
  585|      0|    size_t wrote;
  586|      0|    ptr = optr;
  587|      0|    len = olen;
  588|      0|    Curl_set_in_callback(data, true);
  589|      0|    wrote = writeheader(ptr, 1, len, data->set.writeheader);
  590|      0|    Curl_set_in_callback(data, false);
  591|       |
  592|      0|    if(CURL_WRITEFUNC_PAUSE == wrote)
  593|       |      /* here we pass in the HEADER bit only since if this was body as well
  594|       |         then it was passed already and clearly that didn't trigger the
  595|       |         pause, so this is saved for later with the HEADER bit only */
  596|      0|      return pausewrite(data, CLIENTWRITE_HEADER, ptr, len);
  597|       |
  598|      0|    if(wrote != len) {
  599|      0|      failf(data, "Failed writing header");
  600|      0|      return CURLE_WRITE_ERROR;
  601|      0|    }
  602|      0|  }
  603|       |
  604|  1.16k|  return CURLE_OK;
  605|  1.16k|}

Curl_setstropt:
   58|  8.19k|{
   59|       |  /* Release the previous storage at `charp' and replace by a dynamic storage
   60|       |     copy of `s'. Return CURLE_OK or CURLE_OUT_OF_MEMORY. */
   61|       |
   62|  8.19k|  Curl_safefree(*charp);
   63|       |
   64|  8.19k|  if(s) {
   65|  5.60k|    char *str = strdup(s);
   66|       |
   67|  5.60k|    if(str) {
   68|  5.60k|      size_t len = strlen(str);
   69|  5.60k|      if(len > CURL_MAX_INPUT_LENGTH) {
   70|      0|        free(str);
   71|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
   72|      0|      }
   73|  5.60k|    }
   74|  5.60k|    if(!str)
   75|      0|      return CURLE_OUT_OF_MEMORY;
   76|       |
   77|  5.60k|    *charp = str;
   78|  5.60k|  }
   79|       |
   80|  8.19k|  return CURLE_OK;
   81|  8.19k|}
Curl_vsetopt:
  161|  10.4k|{
  162|  10.4k|  char *argptr;
  163|  10.4k|  CURLcode result = CURLE_OK;
  164|  10.4k|  long arg;
  165|  10.4k|  unsigned long uarg;
  166|  10.4k|  curl_off_t bigsize;
  167|       |
  168|  10.4k|  switch(option) {
  169|      0|  case CURLOPT_DNS_CACHE_TIMEOUT:
  170|      0|    arg = va_arg(param, long);
  171|      0|    if(arg < -1)
  172|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  173|      0|    data->set.dns_cache_timeout = arg;
  174|      0|    break;
  175|      0|  case CURLOPT_DNS_USE_GLOBAL_CACHE:
  176|       |    /* deprecated */
  177|      0|    break;
  178|      0|  case CURLOPT_SSL_CIPHER_LIST:
  179|       |    /* set a list of cipher we want to use in the SSL connection */
  180|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST],
  181|      0|                            va_arg(param, char *));
  182|      0|    break;
  183|      0|#ifndef CURL_DISABLE_PROXY
  184|      0|  case CURLOPT_PROXY_SSL_CIPHER_LIST:
  185|       |    /* set a list of cipher we want to use in the SSL connection for proxy */
  186|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST_PROXY],
  187|      0|                            va_arg(param, char *));
  188|      0|    break;
  189|      0|#endif
  190|      0|  case CURLOPT_TLS13_CIPHERS:
  191|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  192|       |      /* set preferred list of TLS 1.3 cipher suites */
  193|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST],
  194|      0|                              va_arg(param, char *));
  195|      0|    }
  196|      0|    else
  197|      0|      return CURLE_NOT_BUILT_IN;
  198|      0|    break;
  199|      0|#ifndef CURL_DISABLE_PROXY
  200|      0|  case CURLOPT_PROXY_TLS13_CIPHERS:
  201|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  202|       |      /* set preferred list of TLS 1.3 cipher suites for proxy */
  203|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST_PROXY],
  204|      0|                              va_arg(param, char *));
  205|      0|    }
  206|      0|    else
  207|      0|      return CURLE_NOT_BUILT_IN;
  208|      0|    break;
  209|      0|#endif
  210|      0|  case CURLOPT_RANDOM_FILE:
  211|       |    /*
  212|       |     * This is the path name to a file that contains random data to seed
  213|       |     * the random SSL stuff with. The file is only used for reading.
  214|       |     */
  215|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_RANDOM_FILE],
  216|      0|                            va_arg(param, char *));
  217|      0|    break;
  218|      0|  case CURLOPT_EGDSOCKET:
  219|       |    /*
  220|       |     * The Entropy Gathering Daemon socket pathname
  221|       |     */
  222|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EGDSOCKET],
  223|      0|                            va_arg(param, char *));
  224|      0|    break;
  225|      0|  case CURLOPT_MAXCONNECTS:
  226|       |    /*
  227|       |     * Set the absolute number of maximum simultaneous alive connection that
  228|       |     * libcurl is allowed to have.
  229|       |     */
  230|      0|    arg = va_arg(param, long);
  231|      0|    if(arg < 0)
  232|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  233|      0|    data->set.maxconnects = arg;
  234|      0|    break;
  235|      0|  case CURLOPT_FORBID_REUSE:
  236|       |    /*
  237|       |     * When this transfer is done, it must not be left to be reused by a
  238|       |     * subsequent transfer but shall be closed immediately.
  239|       |     */
  240|      0|    data->set.reuse_forbid = (0 != va_arg(param, long)) ? TRUE : FALSE;
  241|      0|    break;
  242|      0|  case CURLOPT_FRESH_CONNECT:
  243|       |    /*
  244|       |     * This transfer shall not use a previously cached connection but
  245|       |     * should be made with a fresh new connect!
  246|       |     */
  247|      0|    data->set.reuse_fresh = (0 != va_arg(param, long)) ? TRUE : FALSE;
  248|      0|    break;
  249|      0|  case CURLOPT_VERBOSE:
  250|       |    /*
  251|       |     * Verbose means infof() calls that give a lot of information about
  252|       |     * the connection and transfer procedures as well as internal choices.
  253|       |     */
  254|      0|    data->set.verbose = (0 != va_arg(param, long)) ? TRUE : FALSE;
  255|      0|    break;
  256|      3|  case CURLOPT_HEADER:
  257|       |    /*
  258|       |     * Set to include the header in the general data output stream.
  259|       |     */
  260|      3|    data->set.include_header = (0 != va_arg(param, long)) ? TRUE : FALSE;
  261|      3|    break;
  262|      0|  case CURLOPT_NOPROGRESS:
  263|       |    /*
  264|       |     * Shut off the internal supported progress meter
  265|       |     */
  266|      0|    data->set.hide_progress = (0 != va_arg(param, long)) ? TRUE : FALSE;
  267|      0|    if(data->set.hide_progress)
  268|      0|      data->progress.flags |= PGRS_HIDE;
  269|      0|    else
  270|      0|      data->progress.flags &= ~PGRS_HIDE;
  271|      0|    break;
  272|     11|  case CURLOPT_NOBODY:
  273|       |    /*
  274|       |     * Do not include the body part in the output data stream.
  275|       |     */
  276|     11|    data->set.opt_no_body = (0 != va_arg(param, long)) ? TRUE : FALSE;
  277|     11|#ifndef CURL_DISABLE_HTTP
  278|     11|    if(data->set.opt_no_body)
  279|       |      /* in HTTP lingo, no body means using the HEAD request... */
  280|      9|      data->set.method = HTTPREQ_HEAD;
  281|      2|    else if(data->set.method == HTTPREQ_HEAD)
  282|      0|      data->set.method = HTTPREQ_GET;
  283|     11|#endif
  284|     11|    break;
  285|      0|  case CURLOPT_FAILONERROR:
  286|       |    /*
  287|       |     * Don't output the >=400 error code HTML-page, but instead only
  288|       |     * return error.
  289|       |     */
  290|      0|    data->set.http_fail_on_error = (0 != va_arg(param, long)) ? TRUE : FALSE;
  291|      0|    break;
  292|      0|  case CURLOPT_KEEP_SENDING_ON_ERROR:
  293|      0|    data->set.http_keep_sending_on_error = (0 != va_arg(param, long)) ?
  294|      0|      TRUE : FALSE;
  295|      0|    break;
  296|     13|  case CURLOPT_UPLOAD:
  297|     13|  case CURLOPT_PUT:
  298|       |    /*
  299|       |     * We want to sent data to the remote host. If this is HTTP, that equals
  300|       |     * using the PUT request.
  301|       |     */
  302|     13|    data->set.upload = (0 != va_arg(param, long)) ? TRUE : FALSE;
  303|     13|    if(data->set.upload) {
  304|       |      /* If this is HTTP, PUT is what's needed to "upload" */
  305|     13|      data->set.method = HTTPREQ_PUT;
  306|     13|      data->set.opt_no_body = FALSE; /* this is implied */
  307|     13|    }
  308|      0|    else
  309|       |      /* In HTTP, the opposite of upload is GET (unless NOBODY is true as
  310|       |         then this can be changed to HEAD later on) */
  311|      0|      data->set.method = HTTPREQ_GET;
  312|     13|    break;
  313|      0|  case CURLOPT_REQUEST_TARGET:
  314|      0|    result = Curl_setstropt(&data->set.str[STRING_TARGET],
  315|      0|                            va_arg(param, char *));
  316|      0|    break;
  317|      0|  case CURLOPT_FILETIME:
  318|       |    /*
  319|       |     * Try to get the file time of the remote document. The time will
  320|       |     * later (possibly) become available using curl_easy_getinfo().
  321|       |     */
  322|      0|    data->set.get_filetime = (0 != va_arg(param, long)) ? TRUE : FALSE;
  323|      0|    break;
  324|    783|  case CURLOPT_SERVER_RESPONSE_TIMEOUT:
  325|       |    /*
  326|       |     * Option that specifies how quickly an server response must be obtained
  327|       |     * before it is considered failure. For pingpong protocols.
  328|       |     */
  329|    783|    arg = va_arg(param, long);
  330|    783|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
  331|    783|      data->set.server_response_timeout = arg * 1000;
  332|      0|    else
  333|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  334|    783|    break;
  335|    783|#ifndef CURL_DISABLE_TFTP
  336|    783|  case CURLOPT_TFTP_NO_OPTIONS:
  337|       |    /*
  338|       |     * Option that prevents libcurl from sending TFTP option requests to the
  339|       |     * server.
  340|       |     */
  341|      0|    data->set.tftp_no_options = va_arg(param, long) != 0;
  342|      0|    break;
  343|      0|  case CURLOPT_TFTP_BLKSIZE:
  344|       |    /*
  345|       |     * TFTP option that specifies the block size to use for data transmission.
  346|       |     */
  347|      0|    arg = va_arg(param, long);
  348|      0|    if(arg < 0)
  349|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  350|      0|    data->set.tftp_blksize = arg;
  351|      0|    break;
  352|      0|#endif
  353|      0|#ifndef CURL_DISABLE_NETRC
  354|      0|  case CURLOPT_NETRC:
  355|       |    /*
  356|       |     * Parse the $HOME/.netrc file
  357|       |     */
  358|      0|    arg = va_arg(param, long);
  359|      0|    if((arg < CURL_NETRC_IGNORED) || (arg >= CURL_NETRC_LAST))
  360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  361|      0|    data->set.use_netrc = (enum CURL_NETRC_OPTION)arg;
  362|      0|    break;
  363|      0|  case CURLOPT_NETRC_FILE:
  364|       |    /*
  365|       |     * Use this file instead of the $HOME/.netrc file
  366|       |     */
  367|      0|    result = Curl_setstropt(&data->set.str[STRING_NETRC_FILE],
  368|      0|                            va_arg(param, char *));
  369|      0|    break;
  370|      0|#endif
  371|      0|  case CURLOPT_TRANSFERTEXT:
  372|       |    /*
  373|       |     * This option was previously named 'FTPASCII'. Renamed to work with
  374|       |     * more protocols than merely FTP.
  375|       |     *
  376|       |     * Transfer using ASCII (instead of BINARY).
  377|       |     */
  378|      0|    data->set.prefer_ascii = (0 != va_arg(param, long)) ? TRUE : FALSE;
  379|      0|    break;
  380|      0|  case CURLOPT_TIMECONDITION:
  381|       |    /*
  382|       |     * Set HTTP time condition. This must be one of the defines in the
  383|       |     * curl/curl.h header file.
  384|       |     */
  385|      0|    arg = va_arg(param, long);
  386|      0|    if((arg < CURL_TIMECOND_NONE) || (arg >= CURL_TIMECOND_LAST))
  387|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  388|      0|    data->set.timecondition = (curl_TimeCond)arg;
  389|      0|    break;
  390|      0|  case CURLOPT_TIMEVALUE:
  391|       |    /*
  392|       |     * This is the value to compare with the remote document with the
  393|       |     * method set with CURLOPT_TIMECONDITION
  394|       |     */
  395|      0|    data->set.timevalue = (time_t)va_arg(param, long);
  396|      0|    break;
  397|       |
  398|      0|  case CURLOPT_TIMEVALUE_LARGE:
  399|       |    /*
  400|       |     * This is the value to compare with the remote document with the
  401|       |     * method set with CURLOPT_TIMECONDITION
  402|       |     */
  403|      0|    data->set.timevalue = (time_t)va_arg(param, curl_off_t);
  404|      0|    break;
  405|       |
  406|      0|  case CURLOPT_SSLVERSION:
  407|      0|#ifndef CURL_DISABLE_PROXY
  408|      0|  case CURLOPT_PROXY_SSLVERSION:
  409|      0|#endif
  410|       |    /*
  411|       |     * Set explicit SSL version to try to connect with, as some SSL
  412|       |     * implementations are lame.
  413|       |     */
  414|      0|#ifdef USE_SSL
  415|      0|    {
  416|      0|      long version, version_max;
  417|      0|      struct ssl_primary_config *primary = &data->set.ssl.primary;
  418|      0|#ifndef CURL_DISABLE_PROXY
  419|      0|      if(option != CURLOPT_SSLVERSION)
  420|      0|        primary = &data->set.proxy_ssl.primary;
  421|      0|#endif
  422|       |
  423|      0|      arg = va_arg(param, long);
  424|       |
  425|      0|      version = C_SSLVERSION_VALUE(arg);
  426|      0|      version_max = C_SSLVERSION_MAX_VALUE(arg);
  427|       |
  428|      0|      if(version < CURL_SSLVERSION_DEFAULT ||
  429|      0|         version == CURL_SSLVERSION_SSLv2 ||
  430|      0|         version == CURL_SSLVERSION_SSLv3 ||
  431|      0|         version >= CURL_SSLVERSION_LAST ||
  432|      0|         version_max < CURL_SSLVERSION_MAX_NONE ||
  433|      0|         version_max >= CURL_SSLVERSION_MAX_LAST)
  434|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  435|       |
  436|      0|      primary->version = version;
  437|      0|      primary->version_max = version_max;
  438|      0|    }
  439|       |#else
  440|       |    result = CURLE_NOT_BUILT_IN;
  441|       |#endif
  442|      0|    break;
  443|       |
  444|       |    /* MQTT "borrows" some of the HTTP options */
  445|      0|#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MQTT)
  446|      0|  case CURLOPT_COPYPOSTFIELDS:
  447|       |    /*
  448|       |     * A string with POST data. Makes curl HTTP POST. Even if it is NULL.
  449|       |     * If needed, CURLOPT_POSTFIELDSIZE must have been set prior to
  450|       |     *  CURLOPT_COPYPOSTFIELDS and not altered later.
  451|       |     */
  452|      0|    argptr = va_arg(param, char *);
  453|       |
  454|      0|    if(!argptr || data->set.postfieldsize == -1)
  455|      0|      result = Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], argptr);
  456|      0|    else {
  457|       |      /*
  458|       |       *  Check that requested length does not overflow the size_t type.
  459|       |       */
  460|       |
  461|      0|      if((data->set.postfieldsize < 0) ||
  462|      0|         ((sizeof(curl_off_t) != sizeof(size_t)) &&
  463|      0|          (data->set.postfieldsize > (curl_off_t)((size_t)-1))))
  464|      0|        result = CURLE_OUT_OF_MEMORY;
  465|      0|      else {
  466|      0|        char *p;
  467|       |
  468|      0|        (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  469|       |
  470|       |        /* Allocate even when size == 0. This satisfies the need of possible
  471|       |           later address compare to detect the COPYPOSTFIELDS mode, and
  472|       |           to mark that postfields is used rather than read function or
  473|       |           form data.
  474|       |        */
  475|      0|        p = malloc((size_t)(data->set.postfieldsize?
  476|      0|                            data->set.postfieldsize:1));
  477|       |
  478|      0|        if(!p)
  479|      0|          result = CURLE_OUT_OF_MEMORY;
  480|      0|        else {
  481|      0|          if(data->set.postfieldsize)
  482|      0|            memcpy(p, argptr, (size_t)data->set.postfieldsize);
  483|       |
  484|      0|          data->set.str[STRING_COPYPOSTFIELDS] = p;
  485|      0|        }
  486|      0|      }
  487|      0|    }
  488|       |
  489|      0|    data->set.postfields = data->set.str[STRING_COPYPOSTFIELDS];
  490|      0|    data->set.method = HTTPREQ_POST;
  491|      0|    break;
  492|       |
  493|      5|  case CURLOPT_POSTFIELDS:
  494|       |    /*
  495|       |     * Like above, but use static data instead of copying it.
  496|       |     */
  497|      5|    data->set.postfields = va_arg(param, void *);
  498|       |    /* Release old copied data. */
  499|      5|    (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  500|      5|    data->set.method = HTTPREQ_POST;
  501|      5|    break;
  502|       |
  503|      0|  case CURLOPT_POSTFIELDSIZE:
  504|       |    /*
  505|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  506|       |     * figure it out. Enables binary posts.
  507|       |     */
  508|      0|    bigsize = va_arg(param, long);
  509|      0|    if(bigsize < -1)
  510|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  511|       |
  512|      0|    if(data->set.postfieldsize < bigsize &&
  513|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  514|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  515|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  516|      0|      data->set.postfields = NULL;
  517|      0|    }
  518|       |
  519|      0|    data->set.postfieldsize = bigsize;
  520|      0|    break;
  521|       |
  522|      0|  case CURLOPT_POSTFIELDSIZE_LARGE:
  523|       |    /*
  524|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  525|       |     * figure it out. Enables binary posts.
  526|       |     */
  527|      0|    bigsize = va_arg(param, curl_off_t);
  528|      0|    if(bigsize < -1)
  529|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  530|       |
  531|      0|    if(data->set.postfieldsize < bigsize &&
  532|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  533|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  534|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  535|      0|      data->set.postfields = NULL;
  536|      0|    }
  537|       |
  538|      0|    data->set.postfieldsize = bigsize;
  539|      0|    break;
  540|      0|#endif
  541|      0|#ifndef CURL_DISABLE_HTTP
  542|      0|  case CURLOPT_AUTOREFERER:
  543|       |    /*
  544|       |     * Switch on automatic referer that gets set if curl follows locations.
  545|       |     */
  546|      0|    data->set.http_auto_referer = (0 != va_arg(param, long)) ? TRUE : FALSE;
  547|      0|    break;
  548|       |
  549|      4|  case CURLOPT_ACCEPT_ENCODING:
  550|       |    /*
  551|       |     * String to use at the value of Accept-Encoding header.
  552|       |     *
  553|       |     * If the encoding is set to "" we use an Accept-Encoding header that
  554|       |     * encompasses all the encodings we support.
  555|       |     * If the encoding is set to NULL we don't send an Accept-Encoding header
  556|       |     * and ignore an received Content-Encoding header.
  557|       |     *
  558|       |     */
  559|      4|    argptr = va_arg(param, char *);
  560|      4|    if(argptr && !*argptr) {
  561|      3|      argptr = Curl_all_content_encodings();
  562|      3|      if(!argptr)
  563|      0|        result = CURLE_OUT_OF_MEMORY;
  564|      3|      else {
  565|      3|        result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  566|      3|        free(argptr);
  567|      3|      }
  568|      3|    }
  569|      1|    else
  570|      1|      result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  571|      4|    break;
  572|       |
  573|      0|  case CURLOPT_TRANSFER_ENCODING:
  574|      0|    data->set.http_transfer_encoding = (0 != va_arg(param, long)) ?
  575|      0|      TRUE : FALSE;
  576|      0|    break;
  577|       |
  578|      2|  case CURLOPT_FOLLOWLOCATION:
  579|       |    /*
  580|       |     * Follow Location: header hints on a HTTP-server.
  581|       |     */
  582|      2|    data->set.http_follow_location = (0 != va_arg(param, long)) ? TRUE : FALSE;
  583|      2|    break;
  584|       |
  585|      0|  case CURLOPT_UNRESTRICTED_AUTH:
  586|       |    /*
  587|       |     * Send authentication (user+password) when following locations, even when
  588|       |     * hostname changed.
  589|       |     */
  590|      0|    data->set.allow_auth_to_other_hosts =
  591|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
  592|      0|    break;
  593|       |
  594|      0|  case CURLOPT_MAXREDIRS:
  595|       |    /*
  596|       |     * The maximum amount of hops you allow curl to follow Location:
  597|       |     * headers. This should mostly be used to detect never-ending loops.
  598|       |     */
  599|      0|    arg = va_arg(param, long);
  600|      0|    if(arg < -1)
  601|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  602|      0|    data->set.maxredirs = arg;
  603|      0|    break;
  604|       |
  605|      0|  case CURLOPT_POSTREDIR:
  606|       |    /*
  607|       |     * Set the behavior of POST when redirecting
  608|       |     * CURL_REDIR_GET_ALL - POST is changed to GET after 301 and 302
  609|       |     * CURL_REDIR_POST_301 - POST is kept as POST after 301
  610|       |     * CURL_REDIR_POST_302 - POST is kept as POST after 302
  611|       |     * CURL_REDIR_POST_303 - POST is kept as POST after 303
  612|       |     * CURL_REDIR_POST_ALL - POST is kept as POST after 301, 302 and 303
  613|       |     * other - POST is kept as POST after 301 and 302
  614|       |     */
  615|      0|    arg = va_arg(param, long);
  616|      0|    if(arg < CURL_REDIR_GET_ALL)
  617|       |      /* no return error on too high numbers since the bitmask could be
  618|       |         extended in a future */
  619|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  620|      0|    data->set.keep_post = arg & CURL_REDIR_POST_ALL;
  621|      0|    break;
  622|       |
  623|      0|  case CURLOPT_POST:
  624|       |    /* Does this option serve a purpose anymore? Yes it does, when
  625|       |       CURLOPT_POSTFIELDS isn't used and the POST data is read off the
  626|       |       callback! */
  627|      0|    if(va_arg(param, long)) {
  628|      0|      data->set.method = HTTPREQ_POST;
  629|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  630|      0|    }
  631|      0|    else
  632|      0|      data->set.method = HTTPREQ_GET;
  633|      0|    break;
  634|       |
  635|      0|  case CURLOPT_HTTPPOST:
  636|       |    /*
  637|       |     * Set to make us do HTTP POST
  638|       |     */
  639|      0|    data->set.httppost = va_arg(param, struct curl_httppost *);
  640|      0|    data->set.method = HTTPREQ_POST_FORM;
  641|      0|    data->set.opt_no_body = FALSE; /* this is implied */
  642|      0|    break;
  643|       |
  644|      0|  case CURLOPT_AWS_SIGV4:
  645|       |    /*
  646|       |     * String that is merged to some authentication
  647|       |     * parameters are used by the algorithm.
  648|       |     */
  649|      0|    result = Curl_setstropt(&data->set.str[STRING_AWS_SIGV4],
  650|      0|                            va_arg(param, char *));
  651|       |    /*
  652|       |     * Basic been set by default it need to be unset here
  653|       |     */
  654|      0|    if(data->set.str[STRING_AWS_SIGV4])
  655|      0|      data->set.httpauth = CURLAUTH_AWS_SIGV4;
  656|      0|    break;
  657|       |
  658|     34|  case CURLOPT_MIMEPOST:
  659|       |    /*
  660|       |     * Set to make us do MIME/form POST
  661|       |     */
  662|     34|    result = Curl_mime_set_subparts(&data->set.mimepost,
  663|     34|                                    va_arg(param, curl_mime *), FALSE);
  664|     34|    if(!result) {
  665|     34|      data->set.method = HTTPREQ_POST_MIME;
  666|     34|      data->set.opt_no_body = FALSE; /* this is implied */
  667|     34|    }
  668|     34|    break;
  669|       |
  670|      0|  case CURLOPT_REFERER:
  671|       |    /*
  672|       |     * String to set in the HTTP Referer: field.
  673|       |     */
  674|      0|    if(data->state.referer_alloc) {
  675|      0|      Curl_safefree(data->state.referer);
  676|      0|      data->state.referer_alloc = FALSE;
  677|      0|    }
  678|      0|    result = Curl_setstropt(&data->set.str[STRING_SET_REFERER],
  679|      0|                            va_arg(param, char *));
  680|      0|    data->state.referer = data->set.str[STRING_SET_REFERER];
  681|      0|    break;
  682|       |
  683|      0|  case CURLOPT_USERAGENT:
  684|       |    /*
  685|       |     * String to use in the HTTP User-Agent field
  686|       |     */
  687|      0|    result = Curl_setstropt(&data->set.str[STRING_USERAGENT],
  688|      0|                            va_arg(param, char *));
  689|      0|    break;
  690|       |
  691|     14|  case CURLOPT_HTTPHEADER:
  692|       |    /*
  693|       |     * Set a list with HTTP headers to use (or replace internals with)
  694|       |     */
  695|     14|    data->set.headers = va_arg(param, struct curl_slist *);
  696|     14|    break;
  697|       |
  698|      0|#ifndef CURL_DISABLE_PROXY
  699|      0|  case CURLOPT_PROXYHEADER:
  700|       |    /*
  701|       |     * Set a list with proxy headers to use (or replace internals with)
  702|       |     *
  703|       |     * Since CURLOPT_HTTPHEADER was the only way to set HTTP headers for a
  704|       |     * long time we remain doing it this way until CURLOPT_PROXYHEADER is
  705|       |     * used. As soon as this option has been used, if set to anything but
  706|       |     * NULL, custom headers for proxies are only picked from this list.
  707|       |     *
  708|       |     * Set this option to NULL to restore the previous behavior.
  709|       |     */
  710|      0|    data->set.proxyheaders = va_arg(param, struct curl_slist *);
  711|      0|    break;
  712|      0|#endif
  713|      0|  case CURLOPT_HEADEROPT:
  714|       |    /*
  715|       |     * Set header option.
  716|       |     */
  717|      0|    arg = va_arg(param, long);
  718|      0|    data->set.sep_headers = (bool)((arg & CURLHEADER_SEPARATE)? TRUE: FALSE);
  719|      0|    break;
  720|       |
  721|      0|  case CURLOPT_HTTP200ALIASES:
  722|       |    /*
  723|       |     * Set a list of aliases for HTTP 200 in response header
  724|       |     */
  725|      0|    data->set.http200aliases = va_arg(param, struct curl_slist *);
  726|      0|    break;
  727|       |
  728|      0|#if !defined(CURL_DISABLE_COOKIES)
  729|      3|  case CURLOPT_COOKIE:
  730|       |    /*
  731|       |     * Cookie string to send to the remote server in the request.
  732|       |     */
  733|      3|    result = Curl_setstropt(&data->set.str[STRING_COOKIE],
  734|      3|                            va_arg(param, char *));
  735|      3|    break;
  736|       |
  737|      0|  case CURLOPT_COOKIEFILE:
  738|       |    /*
  739|       |     * Set cookie file to read and parse. Can be used multiple times.
  740|       |     */
  741|      0|    argptr = (char *)va_arg(param, void *);
  742|      0|    if(argptr) {
  743|      0|      struct curl_slist *cl;
  744|       |      /* general protection against mistakes and abuse */
  745|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  746|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  747|       |      /* append the cookie file name to the list of file names, and deal with
  748|       |         them later */
  749|      0|      cl = curl_slist_append(data->state.cookielist, argptr);
  750|      0|      if(!cl) {
  751|      0|        curl_slist_free_all(data->state.cookielist);
  752|      0|        data->state.cookielist = NULL;
  753|      0|        return CURLE_OUT_OF_MEMORY;
  754|      0|      }
  755|      0|      data->state.cookielist = cl; /* store the list for later use */
  756|      0|    }
  757|      0|    else {
  758|       |      /* clear the list of cookie files */
  759|      0|      curl_slist_free_all(data->state.cookielist);
  760|      0|      data->state.cookielist = NULL;
  761|       |
  762|      0|      if(!data->share || !data->share->cookies) {
  763|       |        /* throw away all existing cookies if this isn't a shared cookie
  764|       |           container */
  765|      0|        Curl_cookie_clearall(data->cookies);
  766|      0|        Curl_cookie_cleanup(data->cookies);
  767|      0|      }
  768|       |      /* disable the cookie engine */
  769|      0|      data->cookies = NULL;
  770|      0|    }
  771|      0|    break;
  772|       |
  773|    783|  case CURLOPT_COOKIEJAR:
  774|       |    /*
  775|       |     * Set cookie file name to dump all cookies to when we're done.
  776|       |     */
  777|    783|  {
  778|    783|    struct CookieInfo *newcookies;
  779|    783|    result = Curl_setstropt(&data->set.str[STRING_COOKIEJAR],
  780|    783|                            va_arg(param, char *));
  781|       |
  782|       |    /*
  783|       |     * Activate the cookie parser. This may or may not already
  784|       |     * have been made.
  785|       |     */
  786|    783|    newcookies = Curl_cookie_init(data, NULL, data->cookies,
  787|    783|                                  data->set.cookiesession);
  788|    783|    if(!newcookies)
  789|      0|      result = CURLE_OUT_OF_MEMORY;
  790|    783|    data->cookies = newcookies;
  791|    783|  }
  792|    783|  break;
  793|       |
  794|      0|  case CURLOPT_COOKIESESSION:
  795|       |    /*
  796|       |     * Set this option to TRUE to start a new "cookie session". It will
  797|       |     * prevent the forthcoming read-cookies-from-file actions to accept
  798|       |     * cookies that are marked as being session cookies, as they belong to a
  799|       |     * previous session.
  800|       |     *
  801|       |     * In the original Netscape cookie spec, "session cookies" are cookies
  802|       |     * with no expire date set. RFC2109 describes the same action if no
  803|       |     * 'Max-Age' is set and RFC2965 includes the RFC2109 description and adds
  804|       |     * a 'Discard' action that can enforce the discard even for cookies that
  805|       |     * have a Max-Age.
  806|       |     *
  807|       |     * We run mostly with the original cookie spec, as hardly anyone implements
  808|       |     * anything else.
  809|       |     */
  810|      0|    data->set.cookiesession = (0 != va_arg(param, long)) ? TRUE : FALSE;
  811|      0|    break;
  812|       |
  813|      0|  case CURLOPT_COOKIELIST:
  814|      0|    argptr = va_arg(param, char *);
  815|       |
  816|      0|    if(!argptr)
  817|      0|      break;
  818|       |
  819|      0|    if(strcasecompare(argptr, "ALL")) {
  820|       |      /* clear all cookies */
  821|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  822|      0|      Curl_cookie_clearall(data->cookies);
  823|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  824|      0|    }
  825|      0|    else if(strcasecompare(argptr, "SESS")) {
  826|       |      /* clear session cookies */
  827|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  828|      0|      Curl_cookie_clearsess(data->cookies);
  829|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  830|      0|    }
  831|      0|    else if(strcasecompare(argptr, "FLUSH")) {
  832|       |      /* flush cookies to file, takes care of the locking */
  833|      0|      Curl_flush_cookies(data, FALSE);
  834|      0|    }
  835|      0|    else if(strcasecompare(argptr, "RELOAD")) {
  836|       |      /* reload cookies from file */
  837|      0|      Curl_cookie_loadfiles(data);
  838|      0|      break;
  839|      0|    }
  840|      0|    else {
  841|      0|      if(!data->cookies)
  842|       |        /* if cookie engine was not running, activate it */
  843|      0|        data->cookies = Curl_cookie_init(data, NULL, NULL, TRUE);
  844|       |
  845|       |      /* general protection against mistakes and abuse */
  846|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  847|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  848|      0|      argptr = strdup(argptr);
  849|      0|      if(!argptr || !data->cookies) {
  850|      0|        result = CURLE_OUT_OF_MEMORY;
  851|      0|        free(argptr);
  852|      0|      }
  853|      0|      else {
  854|      0|        Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  855|       |
  856|      0|        if(checkprefix("Set-Cookie:", argptr))
  857|       |          /* HTTP Header format line */
  858|      0|          Curl_cookie_add(data, data->cookies, TRUE, FALSE, argptr + 11, NULL,
  859|      0|                          NULL, TRUE);
  860|       |
  861|      0|        else
  862|       |          /* Netscape format line */
  863|      0|          Curl_cookie_add(data, data->cookies, FALSE, FALSE, argptr, NULL,
  864|      0|                          NULL, TRUE);
  865|       |
  866|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  867|      0|        free(argptr);
  868|      0|      }
  869|      0|    }
  870|       |
  871|      0|    break;
  872|      0|#endif /* !CURL_DISABLE_COOKIES */
  873|       |
  874|      0|  case CURLOPT_HTTPGET:
  875|       |    /*
  876|       |     * Set to force us do HTTP GET
  877|       |     */
  878|      0|    if(va_arg(param, long)) {
  879|      0|      data->set.method = HTTPREQ_GET;
  880|      0|      data->set.upload = FALSE; /* switch off upload */
  881|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  882|      0|    }
  883|      0|    break;
  884|       |
  885|      4|  case CURLOPT_HTTP_VERSION:
  886|       |    /*
  887|       |     * This sets a requested HTTP version to be used. The value is one of
  888|       |     * the listed enums in curl/curl.h.
  889|       |     */
  890|      4|    arg = va_arg(param, long);
  891|      4|    if(arg < CURL_HTTP_VERSION_NONE)
  892|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  893|       |#ifdef ENABLE_QUIC
  894|       |    if(arg == CURL_HTTP_VERSION_3)
  895|       |      ;
  896|       |    else
  897|       |#endif
  898|       |#if !defined(USE_NGHTTP2) && !defined(USE_HYPER)
  899|       |    if(arg >= CURL_HTTP_VERSION_2)
  900|       |      return CURLE_UNSUPPORTED_PROTOCOL;
  901|       |#else
  902|      4|    if(arg >= CURL_HTTP_VERSION_LAST)
  903|      1|      return CURLE_UNSUPPORTED_PROTOCOL;
  904|      3|    if(arg == CURL_HTTP_VERSION_NONE)
  905|      1|      arg = CURL_HTTP_VERSION_2TLS;
  906|      3|#endif
  907|      3|    data->set.httpwant = (unsigned char)arg;
  908|      3|    break;
  909|       |
  910|      0|  case CURLOPT_EXPECT_100_TIMEOUT_MS:
  911|       |    /*
  912|       |     * Time to wait for a response to a HTTP request containing an
  913|       |     * Expect: 100-continue header before sending the data anyway.
  914|       |     */
  915|      0|    arg = va_arg(param, long);
  916|      0|    if(arg < 0)
  917|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  918|      0|    data->set.expect_100_timeout = arg;
  919|      0|    break;
  920|       |
  921|      0|  case CURLOPT_HTTP09_ALLOWED:
  922|      0|    arg = va_arg(param, unsigned long);
  923|      0|    if(arg > 1L)
  924|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  925|       |#ifdef USE_HYPER
  926|       |    /* Hyper does not support HTTP/0.9 */
  927|       |    if(arg)
  928|       |      return CURLE_BAD_FUNCTION_ARGUMENT;
  929|       |#else
  930|      0|    data->set.http09_allowed = arg ? TRUE : FALSE;
  931|      0|#endif
  932|      0|    break;
  933|      0|#endif   /* CURL_DISABLE_HTTP */
  934|       |
  935|      9|  case CURLOPT_HTTPAUTH:
  936|       |    /*
  937|       |     * Set HTTP Authentication type BITMASK.
  938|       |     */
  939|      9|  {
  940|      9|    int bitcheck;
  941|      9|    bool authbits;
  942|      9|    unsigned long auth = va_arg(param, unsigned long);
  943|       |
  944|      9|    if(auth == CURLAUTH_NONE) {
  945|      1|      data->set.httpauth = auth;
  946|      1|      break;
  947|      1|    }
  948|       |
  949|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
  950|       |       rest we need to handle it as normal DIGEST */
  951|      8|    data->state.authhost.iestyle =
  952|      8|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
  953|       |
  954|      8|    if(auth & CURLAUTH_DIGEST_IE) {
  955|      3|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
  956|      3|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
  957|      3|    }
  958|       |
  959|       |    /* switch off bits we can't support */
  960|       |#ifndef USE_NTLM
  961|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
  962|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  963|       |#elif !defined(NTLM_WB_ENABLED)
  964|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  965|       |#endif
  966|      8|#ifndef USE_SPNEGO
  967|      8|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
  968|       |                                    GSS-API or SSPI */
  969|      8|#endif
  970|       |
  971|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
  972|      8|    bitcheck = 0;
  973|      8|    authbits = FALSE;
  974|     78|    while(bitcheck < 31) {
  975|     77|      if(auth & (1UL << bitcheck++)) {
  976|      7|        authbits = TRUE;
  977|      7|        break;
  978|      7|      }
  979|     77|    }
  980|      8|    if(!authbits)
  981|      1|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
  982|       |
  983|      7|    data->set.httpauth = auth;
  984|      7|  }
  985|      0|  break;
  986|       |
  987|      5|  case CURLOPT_CUSTOMREQUEST:
  988|       |    /*
  989|       |     * Set a custom string to use as request
  990|       |     */
  991|      5|    result = Curl_setstropt(&data->set.str[STRING_CUSTOMREQUEST],
  992|      5|                            va_arg(param, char *));
  993|       |
  994|       |    /* we don't set
  995|       |       data->set.method = HTTPREQ_CUSTOM;
  996|       |       here, we continue as if we were using the already set type
  997|       |       and this just changes the actual request keyword */
  998|      5|    break;
  999|       |
 1000|      0|#ifndef CURL_DISABLE_PROXY
 1001|      0|  case CURLOPT_HTTPPROXYTUNNEL:
 1002|       |    /*
 1003|       |     * Tunnel operations through the proxy instead of normal proxy use
 1004|       |     */
 1005|      0|    data->set.tunnel_thru_httpproxy = (0 != va_arg(param, long)) ?
 1006|      0|      TRUE : FALSE;
 1007|      0|    break;
 1008|       |
 1009|      0|  case CURLOPT_PROXYPORT:
 1010|       |    /*
 1011|       |     * Explicitly set HTTP proxy port number.
 1012|       |     */
 1013|      0|    arg = va_arg(param, long);
 1014|      0|    if((arg < 0) || (arg > 65535))
 1015|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1016|      0|    data->set.proxyport = arg;
 1017|      0|    break;
 1018|       |
 1019|      0|  case CURLOPT_PROXYAUTH:
 1020|       |    /*
 1021|       |     * Set HTTP Authentication type BITMASK.
 1022|       |     */
 1023|      0|  {
 1024|      0|    int bitcheck;
 1025|      0|    bool authbits;
 1026|      0|    unsigned long auth = va_arg(param, unsigned long);
 1027|       |
 1028|      0|    if(auth == CURLAUTH_NONE) {
 1029|      0|      data->set.proxyauth = auth;
 1030|      0|      break;
 1031|      0|    }
 1032|       |
 1033|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
 1034|       |       rest we need to handle it as normal DIGEST */
 1035|      0|    data->state.authproxy.iestyle =
 1036|      0|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
 1037|       |
 1038|      0|    if(auth & CURLAUTH_DIGEST_IE) {
 1039|      0|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
 1040|      0|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
 1041|      0|    }
 1042|       |    /* switch off bits we can't support */
 1043|       |#ifndef USE_NTLM
 1044|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
 1045|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1046|       |#elif !defined(NTLM_WB_ENABLED)
 1047|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1048|       |#endif
 1049|      0|#ifndef USE_SPNEGO
 1050|      0|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
 1051|       |                                    GSS-API or SSPI */
 1052|      0|#endif
 1053|       |
 1054|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
 1055|      0|    bitcheck = 0;
 1056|      0|    authbits = FALSE;
 1057|      0|    while(bitcheck < 31) {
 1058|      0|      if(auth & (1UL << bitcheck++)) {
 1059|      0|        authbits = TRUE;
 1060|      0|        break;
 1061|      0|      }
 1062|      0|    }
 1063|      0|    if(!authbits)
 1064|      0|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
 1065|       |
 1066|      0|    data->set.proxyauth = auth;
 1067|      0|  }
 1068|      0|  break;
 1069|       |
 1070|      0|  case CURLOPT_PROXY:
 1071|       |    /*
 1072|       |     * Set proxy server:port to use as proxy.
 1073|       |     *
 1074|       |     * If the proxy is set to "" (and CURLOPT_SOCKS_PROXY is set to "" or NULL)
 1075|       |     * we explicitly say that we don't want to use a proxy
 1076|       |     * (even though there might be environment variables saying so).
 1077|       |     *
 1078|       |     * Setting it to NULL, means no proxy but allows the environment variables
 1079|       |     * to decide for us (if CURLOPT_SOCKS_PROXY setting it to NULL).
 1080|       |     */
 1081|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY],
 1082|      0|                            va_arg(param, char *));
 1083|      0|    break;
 1084|       |
 1085|      0|  case CURLOPT_PRE_PROXY:
 1086|       |    /*
 1087|       |     * Set proxy server:port to use as SOCKS proxy.
 1088|       |     *
 1089|       |     * If the proxy is set to "" or NULL we explicitly say that we don't want
 1090|       |     * to use the socks proxy.
 1091|       |     */
 1092|      0|    result = Curl_setstropt(&data->set.str[STRING_PRE_PROXY],
 1093|      0|                            va_arg(param, char *));
 1094|      0|    break;
 1095|       |
 1096|      0|  case CURLOPT_PROXYTYPE:
 1097|       |    /*
 1098|       |     * Set proxy type. HTTP/HTTP_1_0/SOCKS4/SOCKS4a/SOCKS5/SOCKS5_HOSTNAME
 1099|       |     */
 1100|      0|    arg = va_arg(param, long);
 1101|      0|    if((arg < CURLPROXY_HTTP) || (arg > CURLPROXY_SOCKS5_HOSTNAME))
 1102|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1103|      0|    data->set.proxytype = (curl_proxytype)arg;
 1104|      0|    break;
 1105|       |
 1106|      0|  case CURLOPT_PROXY_TRANSFER_MODE:
 1107|       |    /*
 1108|       |     * set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy
 1109|       |     */
 1110|      0|    switch(va_arg(param, long)) {
 1111|      0|    case 0:
 1112|      0|      data->set.proxy_transfer_mode = FALSE;
 1113|      0|      break;
 1114|      0|    case 1:
 1115|      0|      data->set.proxy_transfer_mode = TRUE;
 1116|      0|      break;
 1117|      0|    default:
 1118|       |      /* reserve other values for future use */
 1119|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1120|      0|      break;
 1121|      0|    }
 1122|      0|    break;
 1123|      0|#endif   /* CURL_DISABLE_PROXY */
 1124|       |
 1125|      0|  case CURLOPT_SOCKS5_AUTH:
 1126|      0|    data->set.socks5auth = va_arg(param, unsigned long);
 1127|      0|    if(data->set.socks5auth & ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))
 1128|      0|      result = CURLE_NOT_BUILT_IN;
 1129|      0|    break;
 1130|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
 1131|       |  case CURLOPT_SOCKS5_GSSAPI_NEC:
 1132|       |    /*
 1133|       |     * Set flag for NEC SOCK5 support
 1134|       |     */
 1135|       |    data->set.socks5_gssapi_nec = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1136|       |    break;
 1137|       |#endif
 1138|      0|#ifndef CURL_DISABLE_PROXY
 1139|      0|  case CURLOPT_SOCKS5_GSSAPI_SERVICE:
 1140|      0|  case CURLOPT_PROXY_SERVICE_NAME:
 1141|       |    /*
 1142|       |     * Set proxy authentication service name for Kerberos 5 and SPNEGO
 1143|       |     */
 1144|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY_SERVICE_NAME],
 1145|      0|                            va_arg(param, char *));
 1146|      0|    break;
 1147|      0|#endif
 1148|      0|  case CURLOPT_SERVICE_NAME:
 1149|       |    /*
 1150|       |     * Set authentication service name for DIGEST-MD5, Kerberos 5 and SPNEGO
 1151|       |     */
 1152|      0|    result = Curl_setstropt(&data->set.str[STRING_SERVICE_NAME],
 1153|      0|                            va_arg(param, char *));
 1154|      0|    break;
 1155|       |
 1156|      0|  case CURLOPT_HEADERDATA:
 1157|       |    /*
 1158|       |     * Custom pointer to pass the header write callback function
 1159|       |     */
 1160|      0|    data->set.writeheader = (void *)va_arg(param, void *);
 1161|      0|    break;
 1162|      0|  case CURLOPT_ERRORBUFFER:
 1163|       |    /*
 1164|       |     * Error buffer provided by the caller to get the human readable
 1165|       |     * error string in.
 1166|       |     */
 1167|      0|    data->set.errorbuffer = va_arg(param, char *);
 1168|      0|    break;
 1169|    783|  case CURLOPT_WRITEDATA:
 1170|       |    /*
 1171|       |     * FILE pointer to write to. Or possibly
 1172|       |     * used as argument to the write callback.
 1173|       |     */
 1174|    783|    data->set.out = va_arg(param, void *);
 1175|    783|    break;
 1176|       |
 1177|      0|  case CURLOPT_DIRLISTONLY:
 1178|       |    /*
 1179|       |     * An option that changes the command to one that asks for a list only, no
 1180|       |     * file info details. Used for FTP, POP3 and SFTP.
 1181|       |     */
 1182|      0|    data->set.list_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1183|      0|    break;
 1184|       |
 1185|      0|  case CURLOPT_APPEND:
 1186|       |    /*
 1187|       |     * We want to upload and append to an existing file. Used for FTP and
 1188|       |     * SFTP.
 1189|       |     */
 1190|      0|    data->set.remote_append = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1191|      0|    break;
 1192|       |
 1193|      0|#ifndef CURL_DISABLE_FTP
 1194|      0|  case CURLOPT_FTP_FILEMETHOD:
 1195|       |    /*
 1196|       |     * How do access files over FTP.
 1197|       |     */
 1198|      0|    arg = va_arg(param, long);
 1199|      0|    if((arg < CURLFTPMETHOD_DEFAULT) || (arg >= CURLFTPMETHOD_LAST))
 1200|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1201|      0|    data->set.ftp_filemethod = (curl_ftpfile)arg;
 1202|      0|    break;
 1203|      0|  case CURLOPT_FTPPORT:
 1204|       |    /*
 1205|       |     * Use FTP PORT, this also specifies which IP address to use
 1206|       |     */
 1207|      0|    result = Curl_setstropt(&data->set.str[STRING_FTPPORT],
 1208|      0|                            va_arg(param, char *));
 1209|      0|    data->set.ftp_use_port = (data->set.str[STRING_FTPPORT]) ? TRUE : FALSE;
 1210|      0|    break;
 1211|       |
 1212|      0|  case CURLOPT_FTP_USE_EPRT:
 1213|      0|    data->set.ftp_use_eprt = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1214|      0|    break;
 1215|       |
 1216|      0|  case CURLOPT_FTP_USE_EPSV:
 1217|      0|    data->set.ftp_use_epsv = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1218|      0|    break;
 1219|       |
 1220|      0|  case CURLOPT_FTP_USE_PRET:
 1221|      0|    data->set.ftp_use_pret = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1222|      0|    break;
 1223|       |
 1224|      0|  case CURLOPT_FTP_SSL_CCC:
 1225|      0|    arg = va_arg(param, long);
 1226|      0|    if((arg < CURLFTPSSL_CCC_NONE) || (arg >= CURLFTPSSL_CCC_LAST))
 1227|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1228|      0|    data->set.ftp_ccc = (curl_ftpccc)arg;
 1229|      0|    break;
 1230|       |
 1231|      0|  case CURLOPT_FTP_SKIP_PASV_IP:
 1232|       |    /*
 1233|       |     * Enable or disable FTP_SKIP_PASV_IP, which will disable/enable the
 1234|       |     * bypass of the IP address in PASV responses.
 1235|       |     */
 1236|      0|    data->set.ftp_skip_ip = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1237|      0|    break;
 1238|       |
 1239|      0|  case CURLOPT_FTP_ACCOUNT:
 1240|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ACCOUNT],
 1241|      0|                            va_arg(param, char *));
 1242|      0|    break;
 1243|       |
 1244|      0|  case CURLOPT_FTP_ALTERNATIVE_TO_USER:
 1245|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ALTERNATIVE_TO_USER],
 1246|      0|                            va_arg(param, char *));
 1247|      0|    break;
 1248|       |
 1249|      0|  case CURLOPT_FTPSSLAUTH:
 1250|       |    /*
 1251|       |     * Set a specific auth for FTP-SSL transfers.
 1252|       |     */
 1253|      0|    arg = va_arg(param, long);
 1254|      0|    if((arg < CURLFTPAUTH_DEFAULT) || (arg >= CURLFTPAUTH_LAST))
 1255|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1256|      0|    data->set.ftpsslauth = (curl_ftpauth)arg;
 1257|      0|    break;
 1258|      0|  case CURLOPT_KRBLEVEL:
 1259|       |    /*
 1260|       |     * A string that defines the kerberos security level.
 1261|       |     */
 1262|      0|    result = Curl_setstropt(&data->set.str[STRING_KRB_LEVEL],
 1263|      0|                            va_arg(param, char *));
 1264|      0|    data->set.krb = (data->set.str[STRING_KRB_LEVEL]) ? TRUE : FALSE;
 1265|      0|    break;
 1266|      0|#endif
 1267|      0|  case CURLOPT_FTP_CREATE_MISSING_DIRS:
 1268|       |    /*
 1269|       |     * An FTP/SFTP option that modifies an upload to create missing
 1270|       |     * directories on the server.
 1271|       |     */
 1272|      0|    arg = va_arg(param, long);
 1273|       |    /* reserve other values for future use */
 1274|      0|    if((arg < CURLFTP_CREATE_DIR_NONE) ||
 1275|      0|       (arg > CURLFTP_CREATE_DIR_RETRY))
 1276|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1277|      0|    else
 1278|      0|      data->set.ftp_create_missing_dirs = (int)arg;
 1279|      0|    break;
 1280|    783|  case CURLOPT_READDATA:
 1281|       |    /*
 1282|       |     * FILE pointer to read the file to be uploaded from. Or possibly
 1283|       |     * used as argument to the read callback.
 1284|       |     */
 1285|    783|    data->set.in_set = va_arg(param, void *);
 1286|    783|    break;
 1287|      0|  case CURLOPT_INFILESIZE:
 1288|       |    /*
 1289|       |     * If known, this should inform curl about the file size of the
 1290|       |     * to-be-uploaded file.
 1291|       |     */
 1292|      0|    arg = va_arg(param, long);
 1293|      0|    if(arg < -1)
 1294|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1295|      0|    data->set.filesize = arg;
 1296|      0|    break;
 1297|     13|  case CURLOPT_INFILESIZE_LARGE:
 1298|       |    /*
 1299|       |     * If known, this should inform curl about the file size of the
 1300|       |     * to-be-uploaded file.
 1301|       |     */
 1302|     13|    bigsize = va_arg(param, curl_off_t);
 1303|     13|    if(bigsize < -1)
 1304|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1305|     13|    data->set.filesize = bigsize;
 1306|     13|    break;
 1307|      0|  case CURLOPT_LOW_SPEED_LIMIT:
 1308|       |    /*
 1309|       |     * The low speed limit that if transfers are below this for
 1310|       |     * CURLOPT_LOW_SPEED_TIME, the transfer is aborted.
 1311|       |     */
 1312|      0|    arg = va_arg(param, long);
 1313|      0|    if(arg < 0)
 1314|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1315|      0|    data->set.low_speed_limit = arg;
 1316|      0|    break;
 1317|      0|  case CURLOPT_MAX_SEND_SPEED_LARGE:
 1318|       |    /*
 1319|       |     * When transfer uploads are faster then CURLOPT_MAX_SEND_SPEED_LARGE
 1320|       |     * bytes per second the transfer is throttled..
 1321|       |     */
 1322|      0|    bigsize = va_arg(param, curl_off_t);
 1323|      0|    if(bigsize < 0)
 1324|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1325|      0|    data->set.max_send_speed = bigsize;
 1326|      0|    break;
 1327|      0|  case CURLOPT_MAX_RECV_SPEED_LARGE:
 1328|       |    /*
 1329|       |     * When receiving data faster than CURLOPT_MAX_RECV_SPEED_LARGE bytes per
 1330|       |     * second the transfer is throttled..
 1331|       |     */
 1332|      0|    bigsize = va_arg(param, curl_off_t);
 1333|      0|    if(bigsize < 0)
 1334|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1335|      0|    data->set.max_recv_speed = bigsize;
 1336|      0|    break;
 1337|      0|  case CURLOPT_LOW_SPEED_TIME:
 1338|       |    /*
 1339|       |     * The low speed time that if transfers are below the set
 1340|       |     * CURLOPT_LOW_SPEED_LIMIT during this time, the transfer is aborted.
 1341|       |     */
 1342|      0|    arg = va_arg(param, long);
 1343|      0|    if(arg < 0)
 1344|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1345|      0|    data->set.low_speed_time = arg;
 1346|      0|    break;
 1347|      0|  case CURLOPT_CURLU:
 1348|       |    /*
 1349|       |     * pass CURLU to set URL
 1350|       |     */
 1351|      0|    data->set.uh = va_arg(param, CURLU *);
 1352|      0|    break;
 1353|    711|  case CURLOPT_URL:
 1354|       |    /*
 1355|       |     * The URL to fetch.
 1356|       |     */
 1357|    711|    if(data->state.url_alloc) {
 1358|       |      /* the already set URL is allocated, free it first! */
 1359|      0|      Curl_safefree(data->state.url);
 1360|      0|      data->state.url_alloc = FALSE;
 1361|      0|    }
 1362|    711|    result = Curl_setstropt(&data->set.str[STRING_SET_URL],
 1363|    711|                            va_arg(param, char *));
 1364|    711|    data->state.url = data->set.str[STRING_SET_URL];
 1365|    711|    break;
 1366|      0|  case CURLOPT_PORT:
 1367|       |    /*
 1368|       |     * The port number to use when getting the URL
 1369|       |     */
 1370|      0|    arg = va_arg(param, long);
 1371|      0|    if((arg < 0) || (arg > 65535))
 1372|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1373|      0|    data->set.use_port = arg;
 1374|      0|    break;
 1375|      0|  case CURLOPT_TIMEOUT:
 1376|       |    /*
 1377|       |     * The maximum time you allow curl to use for a single transfer
 1378|       |     * operation.
 1379|       |     */
 1380|      0|    arg = va_arg(param, long);
 1381|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1382|      0|      data->set.timeout = arg * 1000;
 1383|      0|    else
 1384|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1385|      0|    break;
 1386|       |
 1387|    783|  case CURLOPT_TIMEOUT_MS:
 1388|    783|    arg = va_arg(param, long);
 1389|    783|    if(arg < 0)
 1390|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1391|    783|    data->set.timeout = arg;
 1392|    783|    break;
 1393|       |
 1394|      0|  case CURLOPT_CONNECTTIMEOUT:
 1395|       |    /*
 1396|       |     * The maximum time you allow curl to use to connect.
 1397|       |     */
 1398|      0|    arg = va_arg(param, long);
 1399|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1400|      0|      data->set.connecttimeout = arg * 1000;
 1401|      0|    else
 1402|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1403|      0|    break;
 1404|       |
 1405|      0|  case CURLOPT_CONNECTTIMEOUT_MS:
 1406|      0|    arg = va_arg(param, long);
 1407|      0|    if(arg < 0)
 1408|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|      0|    data->set.connecttimeout = arg;
 1410|      0|    break;
 1411|       |
 1412|      0|  case CURLOPT_ACCEPTTIMEOUT_MS:
 1413|       |    /*
 1414|       |     * The maximum time you allow curl to wait for server connect
 1415|       |     */
 1416|      0|    arg = va_arg(param, long);
 1417|      0|    if(arg < 0)
 1418|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1419|      0|    data->set.accepttimeout = arg;
 1420|      0|    break;
 1421|       |
 1422|      0|  case CURLOPT_USERPWD:
 1423|       |    /*
 1424|       |     * user:password to use in the operation
 1425|       |     */
 1426|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1427|      0|                               &data->set.str[STRING_USERNAME],
 1428|      0|                               &data->set.str[STRING_PASSWORD]);
 1429|      0|    break;
 1430|       |
 1431|    163|  case CURLOPT_USERNAME:
 1432|       |    /*
 1433|       |     * authentication user name to use in the operation
 1434|       |     */
 1435|    163|    result = Curl_setstropt(&data->set.str[STRING_USERNAME],
 1436|    163|                            va_arg(param, char *));
 1437|    163|    break;
 1438|      7|  case CURLOPT_PASSWORD:
 1439|       |    /*
 1440|       |     * authentication password to use in the operation
 1441|       |     */
 1442|      7|    result = Curl_setstropt(&data->set.str[STRING_PASSWORD],
 1443|      7|                            va_arg(param, char *));
 1444|      7|    break;
 1445|       |
 1446|      0|  case CURLOPT_LOGIN_OPTIONS:
 1447|       |    /*
 1448|       |     * authentication options to use in the operation
 1449|       |     */
 1450|      0|    result = Curl_setstropt(&data->set.str[STRING_OPTIONS],
 1451|      0|                            va_arg(param, char *));
 1452|      0|    break;
 1453|       |
 1454|      0|  case CURLOPT_XOAUTH2_BEARER:
 1455|       |    /*
 1456|       |     * OAuth 2.0 bearer token to use in the operation
 1457|       |     */
 1458|      0|    result = Curl_setstropt(&data->set.str[STRING_BEARER],
 1459|      0|                            va_arg(param, char *));
 1460|      0|    break;
 1461|       |
 1462|      0|  case CURLOPT_POSTQUOTE:
 1463|       |    /*
 1464|       |     * List of RAW FTP commands to use after a transfer
 1465|       |     */
 1466|      0|    data->set.postquote = va_arg(param, struct curl_slist *);
 1467|      0|    break;
 1468|      0|  case CURLOPT_PREQUOTE:
 1469|       |    /*
 1470|       |     * List of RAW FTP commands to use prior to RETR (Wesley Laxton)
 1471|       |     */
 1472|      0|    data->set.prequote = va_arg(param, struct curl_slist *);
 1473|      0|    break;
 1474|      0|  case CURLOPT_QUOTE:
 1475|       |    /*
 1476|       |     * List of RAW FTP commands to use before a transfer
 1477|       |     */
 1478|      0|    data->set.quote = va_arg(param, struct curl_slist *);
 1479|      0|    break;
 1480|      0|  case CURLOPT_RESOLVE:
 1481|       |    /*
 1482|       |     * List of HOST:PORT:[addresses] strings to populate the DNS cache with
 1483|       |     * Entries added this way will remain in the cache until explicitly
 1484|       |     * removed or the handle is cleaned up.
 1485|       |     *
 1486|       |     * Prefix the HOST with plus sign (+) to have the entry expire just like
 1487|       |     * automatically added entries.
 1488|       |     *
 1489|       |     * Prefix the HOST with dash (-) to _remove_ the entry from the cache.
 1490|       |     *
 1491|       |     * This API can remove any entry from the DNS cache, but only entries
 1492|       |     * that aren't actually in use right now will be pruned immediately.
 1493|       |     */
 1494|      0|    data->set.resolve = va_arg(param, struct curl_slist *);
 1495|      0|    data->state.resolve = data->set.resolve;
 1496|      0|    break;
 1497|      0|  case CURLOPT_PROGRESSFUNCTION:
 1498|       |    /*
 1499|       |     * Progress callback function
 1500|       |     */
 1501|      0|    data->set.fprogress = va_arg(param, curl_progress_callback);
 1502|      0|    if(data->set.fprogress)
 1503|      0|      data->progress.callback = TRUE; /* no longer internal */
 1504|      0|    else
 1505|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1506|      0|    break;
 1507|       |
 1508|      0|  case CURLOPT_XFERINFOFUNCTION:
 1509|       |    /*
 1510|       |     * Transfer info callback function
 1511|       |     */
 1512|      0|    data->set.fxferinfo = va_arg(param, curl_xferinfo_callback);
 1513|      0|    if(data->set.fxferinfo)
 1514|      0|      data->progress.callback = TRUE; /* no longer internal */
 1515|      0|    else
 1516|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1517|       |
 1518|      0|    break;
 1519|       |
 1520|      0|  case CURLOPT_PROGRESSDATA:
 1521|       |    /*
 1522|       |     * Custom client data to pass to the progress callback
 1523|       |     */
 1524|      0|    data->set.progress_client = va_arg(param, void *);
 1525|      0|    break;
 1526|       |
 1527|      0|#ifndef CURL_DISABLE_PROXY
 1528|      0|  case CURLOPT_PROXYUSERPWD:
 1529|       |    /*
 1530|       |     * user:password needed to use the proxy
 1531|       |     */
 1532|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1533|      0|                               &data->set.str[STRING_PROXYUSERNAME],
 1534|      0|                               &data->set.str[STRING_PROXYPASSWORD]);
 1535|      0|    break;
 1536|      0|  case CURLOPT_PROXYUSERNAME:
 1537|       |    /*
 1538|       |     * authentication user name to use in the operation
 1539|       |     */
 1540|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYUSERNAME],
 1541|      0|                            va_arg(param, char *));
 1542|      0|    break;
 1543|      0|  case CURLOPT_PROXYPASSWORD:
 1544|       |    /*
 1545|       |     * authentication password to use in the operation
 1546|       |     */
 1547|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYPASSWORD],
 1548|      0|                            va_arg(param, char *));
 1549|      0|    break;
 1550|      0|  case CURLOPT_NOPROXY:
 1551|       |    /*
 1552|       |     * proxy exception list
 1553|       |     */
 1554|      0|    result = Curl_setstropt(&data->set.str[STRING_NOPROXY],
 1555|      0|                            va_arg(param, char *));
 1556|      0|    break;
 1557|      0|#endif
 1558|       |
 1559|      5|  case CURLOPT_RANGE:
 1560|       |    /*
 1561|       |     * What range of the file you want to transfer
 1562|       |     */
 1563|      5|    result = Curl_setstropt(&data->set.str[STRING_SET_RANGE],
 1564|      5|                            va_arg(param, char *));
 1565|      5|    break;
 1566|      0|  case CURLOPT_RESUME_FROM:
 1567|       |    /*
 1568|       |     * Resume transfer at the given file position
 1569|       |     */
 1570|      0|    arg = va_arg(param, long);
 1571|      0|    if(arg < -1)
 1572|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1573|      0|    data->set.set_resume_from = arg;
 1574|      0|    break;
 1575|      0|  case CURLOPT_RESUME_FROM_LARGE:
 1576|       |    /*
 1577|       |     * Resume transfer at the given file position
 1578|       |     */
 1579|      0|    bigsize = va_arg(param, curl_off_t);
 1580|      0|    if(bigsize < -1)
 1581|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1582|      0|    data->set.set_resume_from = bigsize;
 1583|      0|    break;
 1584|      0|  case CURLOPT_DEBUGFUNCTION:
 1585|       |    /*
 1586|       |     * stderr write callback.
 1587|       |     */
 1588|      0|    data->set.fdebug = va_arg(param, curl_debug_callback);
 1589|       |    /*
 1590|       |     * if the callback provided is NULL, it'll use the default callback
 1591|       |     */
 1592|      0|    break;
 1593|      0|  case CURLOPT_DEBUGDATA:
 1594|       |    /*
 1595|       |     * Set to a void * that should receive all error writes. This
 1596|       |     * defaults to CURLOPT_STDERR for normal operations.
 1597|       |     */
 1598|      0|    data->set.debugdata = va_arg(param, void *);
 1599|      0|    break;
 1600|      0|  case CURLOPT_STDERR:
 1601|       |    /*
 1602|       |     * Set to a FILE * that should receive all error writes. This
 1603|       |     * defaults to stderr for normal operations.
 1604|       |     */
 1605|      0|    data->set.err = va_arg(param, FILE *);
 1606|      0|    if(!data->set.err)
 1607|      0|      data->set.err = stderr;
 1608|      0|    break;
 1609|      0|  case CURLOPT_HEADERFUNCTION:
 1610|       |    /*
 1611|       |     * Set header write callback
 1612|       |     */
 1613|      0|    data->set.fwrite_header = va_arg(param, curl_write_callback);
 1614|      0|    break;
 1615|    783|  case CURLOPT_WRITEFUNCTION:
 1616|       |    /*
 1617|       |     * Set data write callback
 1618|       |     */
 1619|    783|    data->set.fwrite_func = va_arg(param, curl_write_callback);
 1620|    783|    if(!data->set.fwrite_func) {
 1621|      0|      data->set.is_fwrite_set = 0;
 1622|       |      /* When set to NULL, reset to our internal default function */
 1623|      0|      data->set.fwrite_func = (curl_write_callback)fwrite;
 1624|      0|    }
 1625|    783|    else
 1626|    783|      data->set.is_fwrite_set = 1;
 1627|    783|    break;
 1628|    783|  case CURLOPT_READFUNCTION:
 1629|       |    /*
 1630|       |     * Read data callback
 1631|       |     */
 1632|    783|    data->set.fread_func_set = va_arg(param, curl_read_callback);
 1633|    783|    if(!data->set.fread_func_set) {
 1634|      0|      data->set.is_fread_set = 0;
 1635|       |      /* When set to NULL, reset to our internal default function */
 1636|      0|      data->set.fread_func_set = (curl_read_callback)fread;
 1637|      0|    }
 1638|    783|    else
 1639|    783|      data->set.is_fread_set = 1;
 1640|    783|    break;
 1641|      0|  case CURLOPT_SEEKFUNCTION:
 1642|       |    /*
 1643|       |     * Seek callback. Might be NULL.
 1644|       |     */
 1645|      0|    data->set.seek_func = va_arg(param, curl_seek_callback);
 1646|      0|    break;
 1647|      0|  case CURLOPT_SEEKDATA:
 1648|       |    /*
 1649|       |     * Seek control callback. Might be NULL.
 1650|       |     */
 1651|      0|    data->set.seek_client = va_arg(param, void *);
 1652|      0|    break;
 1653|      0|  case CURLOPT_CONV_FROM_NETWORK_FUNCTION:
 1654|       |    /*
 1655|       |     * "Convert from network encoding" callback
 1656|       |     */
 1657|      0|    data->set.convfromnetwork = va_arg(param, curl_conv_callback);
 1658|      0|    break;
 1659|      0|  case CURLOPT_CONV_TO_NETWORK_FUNCTION:
 1660|       |    /*
 1661|       |     * "Convert to network encoding" callback
 1662|       |     */
 1663|      0|    data->set.convtonetwork = va_arg(param, curl_conv_callback);
 1664|      0|    break;
 1665|      0|  case CURLOPT_CONV_FROM_UTF8_FUNCTION:
 1666|       |    /*
 1667|       |     * "Convert from UTF-8 encoding" callback
 1668|       |     */
 1669|      0|    data->set.convfromutf8 = va_arg(param, curl_conv_callback);
 1670|      0|    break;
 1671|      0|  case CURLOPT_IOCTLFUNCTION:
 1672|       |    /*
 1673|       |     * I/O control callback. Might be NULL.
 1674|       |     */
 1675|      0|    data->set.ioctl_func = va_arg(param, curl_ioctl_callback);
 1676|      0|    break;
 1677|      0|  case CURLOPT_IOCTLDATA:
 1678|       |    /*
 1679|       |     * I/O control data pointer. Might be NULL.
 1680|       |     */
 1681|      0|    data->set.ioctl_client = va_arg(param, void *);
 1682|      0|    break;
 1683|      0|  case CURLOPT_SSLCERT:
 1684|       |    /*
 1685|       |     * String that holds file name of the SSL certificate to use
 1686|       |     */
 1687|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT],
 1688|      0|                            va_arg(param, char *));
 1689|      0|    break;
 1690|      0|  case CURLOPT_SSLCERT_BLOB:
 1691|       |    /*
 1692|       |     * Blob that holds file content of the SSL certificate to use
 1693|       |     */
 1694|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT],
 1695|      0|                             va_arg(param, struct curl_blob *));
 1696|      0|    break;
 1697|      0|#ifndef CURL_DISABLE_PROXY
 1698|      0|  case CURLOPT_PROXY_SSLCERT:
 1699|       |    /*
 1700|       |     * String that holds file name of the SSL certificate to use for proxy
 1701|       |     */
 1702|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_PROXY],
 1703|      0|                            va_arg(param, char *));
 1704|      0|    break;
 1705|      0|  case CURLOPT_PROXY_SSLCERT_BLOB:
 1706|       |    /*
 1707|       |     * Blob that holds file content of the SSL certificate to use for proxy
 1708|       |     */
 1709|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT_PROXY],
 1710|      0|                             va_arg(param, struct curl_blob *));
 1711|      0|    break;
 1712|      0|#endif
 1713|      0|  case CURLOPT_SSLCERTTYPE:
 1714|       |    /*
 1715|       |     * String that holds file type of the SSL certificate to use
 1716|       |     */
 1717|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE],
 1718|      0|                            va_arg(param, char *));
 1719|      0|    break;
 1720|      0|#ifndef CURL_DISABLE_PROXY
 1721|      0|  case CURLOPT_PROXY_SSLCERTTYPE:
 1722|       |    /*
 1723|       |     * String that holds file type of the SSL certificate to use for proxy
 1724|       |     */
 1725|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE_PROXY],
 1726|      0|                            va_arg(param, char *));
 1727|      0|    break;
 1728|      0|#endif
 1729|      0|  case CURLOPT_SSLKEY:
 1730|       |    /*
 1731|       |     * String that holds file name of the SSL key to use
 1732|       |     */
 1733|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY],
 1734|      0|                            va_arg(param, char *));
 1735|      0|    break;
 1736|      0|  case CURLOPT_SSLKEY_BLOB:
 1737|       |    /*
 1738|       |     * Blob that holds file content of the SSL key to use
 1739|       |     */
 1740|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY],
 1741|      0|                             va_arg(param, struct curl_blob *));
 1742|      0|    break;
 1743|      0|#ifndef CURL_DISABLE_PROXY
 1744|      0|  case CURLOPT_PROXY_SSLKEY:
 1745|       |    /*
 1746|       |     * String that holds file name of the SSL key to use for proxy
 1747|       |     */
 1748|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PROXY],
 1749|      0|                            va_arg(param, char *));
 1750|      0|    break;
 1751|      0|  case CURLOPT_PROXY_SSLKEY_BLOB:
 1752|       |    /*
 1753|       |     * Blob that holds file content of the SSL key to use for proxy
 1754|       |     */
 1755|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY_PROXY],
 1756|      0|                             va_arg(param, struct curl_blob *));
 1757|      0|    break;
 1758|      0|#endif
 1759|      0|  case CURLOPT_SSLKEYTYPE:
 1760|       |    /*
 1761|       |     * String that holds file type of the SSL key to use
 1762|       |     */
 1763|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE],
 1764|      0|                            va_arg(param, char *));
 1765|      0|    break;
 1766|      0|#ifndef CURL_DISABLE_PROXY
 1767|      0|  case CURLOPT_PROXY_SSLKEYTYPE:
 1768|       |    /*
 1769|       |     * String that holds file type of the SSL key to use for proxy
 1770|       |     */
 1771|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE_PROXY],
 1772|      0|                            va_arg(param, char *));
 1773|      0|    break;
 1774|      0|#endif
 1775|      0|  case CURLOPT_KEYPASSWD:
 1776|       |    /*
 1777|       |     * String that holds the SSL or SSH private key password.
 1778|       |     */
 1779|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD],
 1780|      0|                            va_arg(param, char *));
 1781|      0|    break;
 1782|      0|#ifndef CURL_DISABLE_PROXY
 1783|      0|  case CURLOPT_PROXY_KEYPASSWD:
 1784|       |    /*
 1785|       |     * String that holds the SSL private key password for proxy.
 1786|       |     */
 1787|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD_PROXY],
 1788|      0|                            va_arg(param, char *));
 1789|      0|    break;
 1790|      0|#endif
 1791|      0|  case CURLOPT_SSLENGINE:
 1792|       |    /*
 1793|       |     * String that holds the SSL crypto engine.
 1794|       |     */
 1795|      0|    argptr = va_arg(param, char *);
 1796|      0|    if(argptr && argptr[0]) {
 1797|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], argptr);
 1798|      0|      if(!result) {
 1799|      0|        result = Curl_ssl_set_engine(data, argptr);
 1800|      0|      }
 1801|      0|    }
 1802|      0|    break;
 1803|       |
 1804|      0|  case CURLOPT_SSLENGINE_DEFAULT:
 1805|       |    /*
 1806|       |     * flag to set engine as default.
 1807|       |     */
 1808|      0|    Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], NULL);
 1809|      0|    result = Curl_ssl_set_engine_default(data);
 1810|      0|    break;
 1811|      0|  case CURLOPT_CRLF:
 1812|       |    /*
 1813|       |     * Kludgy option to enable CRLF conversions. Subject for removal.
 1814|       |     */
 1815|      0|    data->set.crlf = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1816|      0|    break;
 1817|      0|#ifndef CURL_DISABLE_PROXY
 1818|      0|  case CURLOPT_HAPROXYPROTOCOL:
 1819|       |    /*
 1820|       |     * Set to send the HAProxy Proxy Protocol header
 1821|       |     */
 1822|      0|    data->set.haproxyprotocol = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1823|      0|    break;
 1824|      0|#endif
 1825|      0|  case CURLOPT_INTERFACE:
 1826|       |    /*
 1827|       |     * Set what interface or address/hostname to bind the socket to when
 1828|       |     * performing an operation and thus what from-IP your connection will use.
 1829|       |     */
 1830|      0|    result = Curl_setstropt(&data->set.str[STRING_DEVICE],
 1831|      0|                            va_arg(param, char *));
 1832|      0|    break;
 1833|      0|  case CURLOPT_LOCALPORT:
 1834|       |    /*
 1835|       |     * Set what local port to bind the socket to when performing an operation.
 1836|       |     */
 1837|      0|    arg = va_arg(param, long);
 1838|      0|    if((arg < 0) || (arg > 65535))
 1839|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1840|      0|    data->set.localport = curlx_sltous(arg);
 1841|      0|    break;
 1842|      0|  case CURLOPT_LOCALPORTRANGE:
 1843|       |    /*
 1844|       |     * Set number of local ports to try, starting with CURLOPT_LOCALPORT.
 1845|       |     */
 1846|      0|    arg = va_arg(param, long);
 1847|      0|    if((arg < 0) || (arg > 65535))
 1848|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1849|      0|    data->set.localportrange = curlx_sltosi(arg);
 1850|      0|    break;
 1851|      0|  case CURLOPT_GSSAPI_DELEGATION:
 1852|       |    /*
 1853|       |     * GSS-API credential delegation bitmask
 1854|       |     */
 1855|      0|    arg = va_arg(param, long);
 1856|      0|    if(arg < CURLGSSAPI_DELEGATION_NONE)
 1857|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1858|      0|    data->set.gssapi_delegation = arg;
 1859|      0|    break;
 1860|      0|  case CURLOPT_SSL_VERIFYPEER:
 1861|       |    /*
 1862|       |     * Enable peer SSL verifying.
 1863|       |     */
 1864|      0|    data->set.ssl.primary.verifypeer = (0 != va_arg(param, long)) ?
 1865|      0|      TRUE : FALSE;
 1866|       |
 1867|       |    /* Update the current connection ssl_config. */
 1868|      0|    if(data->conn) {
 1869|      0|      data->conn->ssl_config.verifypeer =
 1870|      0|        data->set.ssl.primary.verifypeer;
 1871|      0|    }
 1872|      0|    break;
 1873|      0|  case CURLOPT_DOH_SSL_VERIFYPEER:
 1874|       |    /*
 1875|       |     * Enable peer SSL verifying for DoH.
 1876|       |     */
 1877|      0|    data->set.doh_verifypeer = (0 != va_arg(param, long)) ?
 1878|      0|      TRUE : FALSE;
 1879|      0|    break;
 1880|      0|#ifndef CURL_DISABLE_PROXY
 1881|      0|  case CURLOPT_PROXY_SSL_VERIFYPEER:
 1882|       |    /*
 1883|       |     * Enable peer SSL verifying for proxy.
 1884|       |     */
 1885|      0|    data->set.proxy_ssl.primary.verifypeer =
 1886|      0|      (0 != va_arg(param, long))?TRUE:FALSE;
 1887|       |
 1888|       |    /* Update the current connection proxy_ssl_config. */
 1889|      0|    if(data->conn) {
 1890|      0|      data->conn->proxy_ssl_config.verifypeer =
 1891|      0|        data->set.proxy_ssl.primary.verifypeer;
 1892|      0|    }
 1893|      0|    break;
 1894|      0|#endif
 1895|      0|  case CURLOPT_SSL_VERIFYHOST:
 1896|       |    /*
 1897|       |     * Enable verification of the host name in the peer certificate
 1898|       |     */
 1899|      0|    arg = va_arg(param, long);
 1900|       |
 1901|       |    /* Obviously people are not reading documentation and too many thought
 1902|       |       this argument took a boolean when it wasn't and misused it.
 1903|       |       Treat 1 and 2 the same */
 1904|      0|    data->set.ssl.primary.verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1905|       |
 1906|       |    /* Update the current connection ssl_config. */
 1907|      0|    if(data->conn) {
 1908|      0|      data->conn->ssl_config.verifyhost =
 1909|      0|        data->set.ssl.primary.verifyhost;
 1910|      0|    }
 1911|      0|    break;
 1912|      0|  case CURLOPT_DOH_SSL_VERIFYHOST:
 1913|       |    /*
 1914|       |     * Enable verification of the host name in the peer certificate for DoH
 1915|       |     */
 1916|      0|    arg = va_arg(param, long);
 1917|       |
 1918|       |    /* Treat both 1 and 2 as TRUE */
 1919|      0|    data->set.doh_verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1920|      0|    break;
 1921|      0|#ifndef CURL_DISABLE_PROXY
 1922|      0|  case CURLOPT_PROXY_SSL_VERIFYHOST:
 1923|       |    /*
 1924|       |     * Enable verification of the host name in the peer certificate for proxy
 1925|       |     */
 1926|      0|    arg = va_arg(param, long);
 1927|       |
 1928|       |    /* Treat both 1 and 2 as TRUE */
 1929|      0|    data->set.proxy_ssl.primary.verifyhost = (bool)((arg & 3)?TRUE:FALSE);
 1930|       |
 1931|       |    /* Update the current connection proxy_ssl_config. */
 1932|      0|    if(data->conn) {
 1933|      0|      data->conn->proxy_ssl_config.verifyhost =
 1934|      0|        data->set.proxy_ssl.primary.verifyhost;
 1935|      0|    }
 1936|      0|    break;
 1937|      0|#endif
 1938|      0|  case CURLOPT_SSL_VERIFYSTATUS:
 1939|       |    /*
 1940|       |     * Enable certificate status verifying.
 1941|       |     */
 1942|      0|    if(!Curl_ssl_cert_status_request()) {
 1943|      0|      result = CURLE_NOT_BUILT_IN;
 1944|      0|      break;
 1945|      0|    }
 1946|       |
 1947|      0|    data->set.ssl.primary.verifystatus = (0 != va_arg(param, long)) ?
 1948|      0|      TRUE : FALSE;
 1949|       |
 1950|       |    /* Update the current connection ssl_config. */
 1951|      0|    if(data->conn) {
 1952|      0|      data->conn->ssl_config.verifystatus =
 1953|      0|        data->set.ssl.primary.verifystatus;
 1954|      0|    }
 1955|      0|    break;
 1956|      0|  case CURLOPT_DOH_SSL_VERIFYSTATUS:
 1957|       |    /*
 1958|       |     * Enable certificate status verifying for DoH.
 1959|       |     */
 1960|      0|    if(!Curl_ssl_cert_status_request()) {
 1961|      0|      result = CURLE_NOT_BUILT_IN;
 1962|      0|      break;
 1963|      0|    }
 1964|       |
 1965|      0|    data->set.doh_verifystatus = (0 != va_arg(param, long)) ?
 1966|      0|      TRUE : FALSE;
 1967|      0|    break;
 1968|      0|  case CURLOPT_SSL_CTX_FUNCTION:
 1969|       |    /*
 1970|       |     * Set a SSL_CTX callback
 1971|       |     */
 1972|      0|#ifdef USE_SSL
 1973|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1974|      0|      data->set.ssl.fsslctx = va_arg(param, curl_ssl_ctx_callback);
 1975|      0|    else
 1976|      0|#endif
 1977|      0|      result = CURLE_NOT_BUILT_IN;
 1978|      0|    break;
 1979|      0|  case CURLOPT_SSL_CTX_DATA:
 1980|       |    /*
 1981|       |     * Set a SSL_CTX callback parameter pointer
 1982|       |     */
 1983|      0|#ifdef USE_SSL
 1984|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1985|      0|      data->set.ssl.fsslctxp = va_arg(param, void *);
 1986|      0|    else
 1987|      0|#endif
 1988|      0|      result = CURLE_NOT_BUILT_IN;
 1989|      0|    break;
 1990|      0|  case CURLOPT_SSL_FALSESTART:
 1991|       |    /*
 1992|       |     * Enable TLS false start.
 1993|       |     */
 1994|      0|    if(!Curl_ssl_false_start()) {
 1995|      0|      result = CURLE_NOT_BUILT_IN;
 1996|      0|      break;
 1997|      0|    }
 1998|       |
 1999|      0|    data->set.ssl.falsestart = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2000|      0|    break;
 2001|      0|  case CURLOPT_CERTINFO:
 2002|      0|#ifdef USE_SSL
 2003|      0|    if(Curl_ssl->supports & SSLSUPP_CERTINFO)
 2004|      0|      data->set.ssl.certinfo = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2005|      0|    else
 2006|      0|#endif
 2007|      0|      result = CURLE_NOT_BUILT_IN;
 2008|      0|        break;
 2009|      0|  case CURLOPT_PINNEDPUBLICKEY:
 2010|       |    /*
 2011|       |     * Set pinned public key for SSL connection.
 2012|       |     * Specify file name of the public key in DER format.
 2013|       |     */
 2014|      0|#ifdef USE_SSL
 2015|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2016|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY],
 2017|      0|                              va_arg(param, char *));
 2018|      0|    else
 2019|      0|#endif
 2020|      0|      result = CURLE_NOT_BUILT_IN;
 2021|      0|    break;
 2022|      0|#ifndef CURL_DISABLE_PROXY
 2023|      0|  case CURLOPT_PROXY_PINNEDPUBLICKEY:
 2024|       |    /*
 2025|       |     * Set pinned public key for SSL connection.
 2026|       |     * Specify file name of the public key in DER format.
 2027|       |     */
 2028|      0|#ifdef USE_SSL
 2029|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2030|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY],
 2031|      0|                              va_arg(param, char *));
 2032|      0|    else
 2033|      0|#endif
 2034|      0|      result = CURLE_NOT_BUILT_IN;
 2035|      0|    break;
 2036|      0|#endif
 2037|      0|  case CURLOPT_CAINFO:
 2038|       |    /*
 2039|       |     * Set CA info for SSL connection. Specify file name of the CA certificate
 2040|       |     */
 2041|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE],
 2042|      0|                            va_arg(param, char *));
 2043|      0|    break;
 2044|      0|  case CURLOPT_CAINFO_BLOB:
 2045|       |    /*
 2046|       |     * Blob that holds CA info for SSL connection.
 2047|       |     * Specify entire PEM of the CA certificate
 2048|       |     */
 2049|      0|#ifdef USE_SSL
 2050|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2051|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO],
 2052|      0|                               va_arg(param, struct curl_blob *));
 2053|      0|    else
 2054|      0|#endif
 2055|      0|      return CURLE_NOT_BUILT_IN;
 2056|       |
 2057|      0|    break;
 2058|      0|#ifndef CURL_DISABLE_PROXY
 2059|      0|  case CURLOPT_PROXY_CAINFO:
 2060|       |    /*
 2061|       |     * Set CA info SSL connection for proxy. Specify file name of the
 2062|       |     * CA certificate
 2063|       |     */
 2064|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE_PROXY],
 2065|      0|                            va_arg(param, char *));
 2066|      0|    break;
 2067|      0|  case CURLOPT_PROXY_CAINFO_BLOB:
 2068|       |    /*
 2069|       |     * Blob that holds CA info for SSL connection proxy.
 2070|       |     * Specify entire PEM of the CA certificate
 2071|       |     */
 2072|      0|#ifdef USE_SSL
 2073|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2074|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO_PROXY],
 2075|      0|                               va_arg(param, struct curl_blob *));
 2076|      0|    else
 2077|      0|#endif
 2078|      0|      return CURLE_NOT_BUILT_IN;
 2079|      0|    break;
 2080|      0|#endif
 2081|      0|  case CURLOPT_CAPATH:
 2082|       |    /*
 2083|       |     * Set CA path info for SSL connection. Specify directory name of the CA
 2084|       |     * certificates which have been prepared using openssl c_rehash utility.
 2085|       |     */
 2086|      0|#ifdef USE_SSL
 2087|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2088|       |      /* This does not work on windows. */
 2089|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH],
 2090|      0|                              va_arg(param, char *));
 2091|      0|    else
 2092|      0|#endif
 2093|      0|      result = CURLE_NOT_BUILT_IN;
 2094|      0|    break;
 2095|      0|#ifndef CURL_DISABLE_PROXY
 2096|      0|  case CURLOPT_PROXY_CAPATH:
 2097|       |    /*
 2098|       |     * Set CA path info for SSL connection proxy. Specify directory name of the
 2099|       |     * CA certificates which have been prepared using openssl c_rehash utility.
 2100|       |     */
 2101|      0|#ifdef USE_SSL
 2102|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2103|       |      /* This does not work on windows. */
 2104|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH_PROXY],
 2105|      0|                              va_arg(param, char *));
 2106|      0|    else
 2107|      0|#endif
 2108|      0|      result = CURLE_NOT_BUILT_IN;
 2109|      0|    break;
 2110|      0|#endif
 2111|      0|  case CURLOPT_CRLFILE:
 2112|       |    /*
 2113|       |     * Set CRL file info for SSL connection. Specify file name of the CRL
 2114|       |     * to check certificates revocation
 2115|       |     */
 2116|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE],
 2117|      0|                            va_arg(param, char *));
 2118|      0|    break;
 2119|      0|#ifndef CURL_DISABLE_PROXY
 2120|      0|  case CURLOPT_PROXY_CRLFILE:
 2121|       |    /*
 2122|       |     * Set CRL file info for SSL connection for proxy. Specify file name of the
 2123|       |     * CRL to check certificates revocation
 2124|       |     */
 2125|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE_PROXY],
 2126|      0|                            va_arg(param, char *));
 2127|      0|    break;
 2128|      0|#endif
 2129|      0|  case CURLOPT_ISSUERCERT:
 2130|       |    /*
 2131|       |     * Set Issuer certificate file
 2132|       |     * to check certificates issuer
 2133|       |     */
 2134|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT],
 2135|      0|                            va_arg(param, char *));
 2136|      0|    break;
 2137|      0|  case CURLOPT_ISSUERCERT_BLOB:
 2138|       |    /*
 2139|       |     * Blob that holds Issuer certificate to check certificates issuer
 2140|       |     */
 2141|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT],
 2142|      0|                             va_arg(param, struct curl_blob *));
 2143|      0|    break;
 2144|      0|#ifndef CURL_DISABLE_PROXY
 2145|      0|  case CURLOPT_PROXY_ISSUERCERT:
 2146|       |    /*
 2147|       |     * Set Issuer certificate file
 2148|       |     * to check certificates issuer
 2149|       |     */
 2150|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT_PROXY],
 2151|      0|                            va_arg(param, char *));
 2152|      0|    break;
 2153|      0|  case CURLOPT_PROXY_ISSUERCERT_BLOB:
 2154|       |    /*
 2155|       |     * Blob that holds Issuer certificate to check certificates issuer
 2156|       |     */
 2157|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY],
 2158|      0|                             va_arg(param, struct curl_blob *));
 2159|      0|    break;
 2160|      0|#endif
 2161|      0|#ifndef CURL_DISABLE_TELNET
 2162|      0|  case CURLOPT_TELNETOPTIONS:
 2163|       |    /*
 2164|       |     * Set a linked list of telnet options
 2165|       |     */
 2166|      0|    data->set.telnet_options = va_arg(param, struct curl_slist *);
 2167|      0|    break;
 2168|      0|#endif
 2169|      0|  case CURLOPT_BUFFERSIZE:
 2170|       |    /*
 2171|       |     * The application kindly asks for a differently sized receive buffer.
 2172|       |     * If it seems reasonable, we'll use it.
 2173|       |     */
 2174|      0|    if(data->state.buffer)
 2175|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2176|       |
 2177|      0|    arg = va_arg(param, long);
 2178|       |
 2179|      0|    if(arg > READBUFFER_MAX)
 2180|      0|      arg = READBUFFER_MAX;
 2181|      0|    else if(arg < 1)
 2182|      0|      arg = READBUFFER_SIZE;
 2183|      0|    else if(arg < READBUFFER_MIN)
 2184|      0|      arg = READBUFFER_MIN;
 2185|       |
 2186|      0|    data->set.buffer_size = arg;
 2187|      0|    break;
 2188|       |
 2189|      0|  case CURLOPT_UPLOAD_BUFFERSIZE:
 2190|       |    /*
 2191|       |     * The application kindly asks for a differently sized upload buffer.
 2192|       |     * Cap it to sensible.
 2193|       |     */
 2194|      0|    arg = va_arg(param, long);
 2195|       |
 2196|      0|    if(arg > UPLOADBUFFER_MAX)
 2197|      0|      arg = UPLOADBUFFER_MAX;
 2198|      0|    else if(arg < UPLOADBUFFER_MIN)
 2199|      0|      arg = UPLOADBUFFER_MIN;
 2200|       |
 2201|      0|    data->set.upload_buffer_size = (unsigned int)arg;
 2202|      0|    Curl_safefree(data->state.ulbuf); /* force a realloc next opportunity */
 2203|      0|    break;
 2204|       |
 2205|      0|  case CURLOPT_NOSIGNAL:
 2206|       |    /*
 2207|       |     * The application asks not to set any signal() or alarm() handlers,
 2208|       |     * even when using a timeout.
 2209|       |     */
 2210|      0|    data->set.no_signal = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2211|      0|    break;
 2212|       |
 2213|      0|  case CURLOPT_SHARE:
 2214|      0|  {
 2215|      0|    struct Curl_share *set;
 2216|      0|    set = va_arg(param, struct Curl_share *);
 2217|       |
 2218|       |    /* disconnect from old share, if any */
 2219|      0|    if(data->share) {
 2220|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2221|       |
 2222|      0|      if(data->dns.hostcachetype == HCACHE_SHARED) {
 2223|      0|        data->dns.hostcache = NULL;
 2224|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2225|      0|      }
 2226|       |
 2227|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2228|      0|      if(data->share->cookies == data->cookies)
 2229|      0|        data->cookies = NULL;
 2230|      0|#endif
 2231|       |
 2232|      0|      if(data->share->sslsession == data->state.session)
 2233|      0|        data->state.session = NULL;
 2234|       |
 2235|       |#ifdef USE_LIBPSL
 2236|       |      if(data->psl == &data->share->psl)
 2237|       |        data->psl = data->multi? &data->multi->psl: NULL;
 2238|       |#endif
 2239|       |
 2240|      0|      data->share->dirty--;
 2241|       |
 2242|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2243|      0|      data->share = NULL;
 2244|      0|    }
 2245|       |
 2246|      0|    if(GOOD_SHARE_HANDLE(set))
 2247|       |      /* use new share if it set */
 2248|      0|      data->share = set;
 2249|      0|    if(data->share) {
 2250|       |
 2251|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2252|       |
 2253|      0|      data->share->dirty++;
 2254|       |
 2255|      0|      if(data->share->specifier & (1<< CURL_LOCK_DATA_DNS)) {
 2256|       |        /* use shared host cache */
 2257|      0|        data->dns.hostcache = &data->share->hostcache;
 2258|      0|        data->dns.hostcachetype = HCACHE_SHARED;
 2259|      0|      }
 2260|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2261|      0|      if(data->share->cookies) {
 2262|       |        /* use shared cookie list, first free own one if any */
 2263|      0|        Curl_cookie_cleanup(data->cookies);
 2264|       |        /* enable cookies since we now use a share that uses cookies! */
 2265|      0|        data->cookies = data->share->cookies;
 2266|      0|      }
 2267|      0|#endif   /* CURL_DISABLE_HTTP */
 2268|      0|      if(data->share->sslsession) {
 2269|      0|        data->set.general_ssl.max_ssl_sessions = data->share->max_ssl_sessions;
 2270|      0|        data->state.session = data->share->sslsession;
 2271|      0|      }
 2272|       |#ifdef USE_LIBPSL
 2273|       |      if(data->share->specifier & (1 << CURL_LOCK_DATA_PSL))
 2274|       |        data->psl = &data->share->psl;
 2275|       |#endif
 2276|       |
 2277|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2278|      0|    }
 2279|       |    /* check for host cache not needed,
 2280|       |     * it will be done by curl_easy_perform */
 2281|      0|  }
 2282|      0|  break;
 2283|       |
 2284|      0|  case CURLOPT_PRIVATE:
 2285|       |    /*
 2286|       |     * Set private data pointer.
 2287|       |     */
 2288|      0|    data->set.private_data = va_arg(param, void *);
 2289|      0|    break;
 2290|       |
 2291|      0|  case CURLOPT_MAXFILESIZE:
 2292|       |    /*
 2293|       |     * Set the maximum size of a file to download.
 2294|       |     */
 2295|      0|    arg = va_arg(param, long);
 2296|      0|    if(arg < 0)
 2297|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2298|      0|    data->set.max_filesize = arg;
 2299|      0|    break;
 2300|       |
 2301|      0|#ifdef USE_SSL
 2302|      0|  case CURLOPT_USE_SSL:
 2303|       |    /*
 2304|       |     * Make transfers attempt to use SSL/TLS.
 2305|       |     */
 2306|      0|    arg = va_arg(param, long);
 2307|      0|    if((arg < CURLUSESSL_NONE) || (arg >= CURLUSESSL_LAST))
 2308|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2309|      0|    data->set.use_ssl = (curl_usessl)arg;
 2310|      0|    break;
 2311|       |
 2312|      0|  case CURLOPT_SSL_OPTIONS:
 2313|      0|    arg = va_arg(param, long);
 2314|      0|    data->set.ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2315|      0|    data->set.ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2316|      0|    data->set.ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2317|      0|    data->set.ssl.revoke_best_effort = !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2318|      0|    data->set.ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2319|      0|    data->set.ssl.auto_client_cert = !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2320|       |    /* If a setting is added here it should also be added in dohprobe()
 2321|       |       which sets its own CURLOPT_SSL_OPTIONS based on these settings. */
 2322|      0|    break;
 2323|       |
 2324|      0|#ifndef CURL_DISABLE_PROXY
 2325|      0|  case CURLOPT_PROXY_SSL_OPTIONS:
 2326|      0|    arg = va_arg(param, long);
 2327|      0|    data->set.proxy_ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2328|      0|    data->set.proxy_ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2329|      0|    data->set.proxy_ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2330|      0|    data->set.proxy_ssl.revoke_best_effort =
 2331|      0|      !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2332|      0|    data->set.proxy_ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2333|      0|    data->set.proxy_ssl.auto_client_cert =
 2334|      0|      !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2335|      0|    break;
 2336|      0|#endif
 2337|       |
 2338|      0|  case CURLOPT_SSL_EC_CURVES:
 2339|       |    /*
 2340|       |     * Set accepted curves in SSL connection setup.
 2341|       |     * Specify colon-delimited list of curve algorithm names.
 2342|       |     */
 2343|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EC_CURVES],
 2344|      0|                            va_arg(param, char *));
 2345|      0|    break;
 2346|      0|#endif
 2347|      0|  case CURLOPT_IPRESOLVE:
 2348|      0|    arg = va_arg(param, long);
 2349|      0|    if((arg < CURL_IPRESOLVE_WHATEVER) || (arg > CURL_IPRESOLVE_V6))
 2350|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2351|      0|    data->set.ipver = (unsigned char) arg;
 2352|      0|    break;
 2353|       |
 2354|      0|  case CURLOPT_MAXFILESIZE_LARGE:
 2355|       |    /*
 2356|       |     * Set the maximum size of a file to download.
 2357|       |     */
 2358|      0|    bigsize = va_arg(param, curl_off_t);
 2359|      0|    if(bigsize < 0)
 2360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2361|      0|    data->set.max_filesize = bigsize;
 2362|      0|    break;
 2363|       |
 2364|      0|  case CURLOPT_TCP_NODELAY:
 2365|       |    /*
 2366|       |     * Enable or disable TCP_NODELAY, which will disable/enable the Nagle
 2367|       |     * algorithm
 2368|       |     */
 2369|      0|    data->set.tcp_nodelay = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2370|      0|    break;
 2371|       |
 2372|      0|  case CURLOPT_IGNORE_CONTENT_LENGTH:
 2373|      0|    data->set.ignorecl = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2374|      0|    break;
 2375|       |
 2376|      0|  case CURLOPT_CONNECT_ONLY:
 2377|       |    /*
 2378|       |     * No data transfer, set up connection and let application use the socket
 2379|       |     */
 2380|      0|    data->set.connect_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2381|      0|    break;
 2382|       |
 2383|    783|  case CURLOPT_SOCKOPTFUNCTION:
 2384|       |    /*
 2385|       |     * socket callback function: called after socket() but before connect()
 2386|       |     */
 2387|    783|    data->set.fsockopt = va_arg(param, curl_sockopt_callback);
 2388|    783|    break;
 2389|       |
 2390|      0|  case CURLOPT_SOCKOPTDATA:
 2391|       |    /*
 2392|       |     * socket callback data pointer. Might be NULL.
 2393|       |     */
 2394|      0|    data->set.sockopt_client = va_arg(param, void *);
 2395|      0|    break;
 2396|       |
 2397|    783|  case CURLOPT_OPENSOCKETFUNCTION:
 2398|       |    /*
 2399|       |     * open/create socket callback function: called instead of socket(),
 2400|       |     * before connect()
 2401|       |     */
 2402|    783|    data->set.fopensocket = va_arg(param, curl_opensocket_callback);
 2403|    783|    break;
 2404|       |
 2405|    783|  case CURLOPT_OPENSOCKETDATA:
 2406|       |    /*
 2407|       |     * socket callback data pointer. Might be NULL.
 2408|       |     */
 2409|    783|    data->set.opensocket_client = va_arg(param, void *);
 2410|    783|    break;
 2411|       |
 2412|      0|  case CURLOPT_CLOSESOCKETFUNCTION:
 2413|       |    /*
 2414|       |     * close socket callback function: called instead of close()
 2415|       |     * when shutting down a connection
 2416|       |     */
 2417|      0|    data->set.fclosesocket = va_arg(param, curl_closesocket_callback);
 2418|      0|    break;
 2419|       |
 2420|      0|  case CURLOPT_RESOLVER_START_FUNCTION:
 2421|       |    /*
 2422|       |     * resolver start callback function: called before a new resolver request
 2423|       |     * is started
 2424|       |     */
 2425|      0|    data->set.resolver_start = va_arg(param, curl_resolver_start_callback);
 2426|      0|    break;
 2427|       |
 2428|      0|  case CURLOPT_RESOLVER_START_DATA:
 2429|       |    /*
 2430|       |     * resolver start callback data pointer. Might be NULL.
 2431|       |     */
 2432|      0|    data->set.resolver_start_client = va_arg(param, void *);
 2433|      0|    break;
 2434|       |
 2435|      0|  case CURLOPT_CLOSESOCKETDATA:
 2436|       |    /*
 2437|       |     * socket callback data pointer. Might be NULL.
 2438|       |     */
 2439|      0|    data->set.closesocket_client = va_arg(param, void *);
 2440|      0|    break;
 2441|       |
 2442|      0|  case CURLOPT_SSL_SESSIONID_CACHE:
 2443|      0|    data->set.ssl.primary.sessionid = (0 != va_arg(param, long)) ?
 2444|      0|      TRUE : FALSE;
 2445|      0|#ifndef CURL_DISABLE_PROXY
 2446|      0|    data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;
 2447|      0|#endif
 2448|      0|    break;
 2449|       |
 2450|       |#ifdef USE_SSH
 2451|       |    /* we only include SSH options if explicitly built to support SSH */
 2452|       |  case CURLOPT_SSH_AUTH_TYPES:
 2453|       |    data->set.ssh_auth_types = va_arg(param, long);
 2454|       |    break;
 2455|       |
 2456|       |  case CURLOPT_SSH_PUBLIC_KEYFILE:
 2457|       |    /*
 2458|       |     * Use this file instead of the $HOME/.ssh/id_dsa.pub file
 2459|       |     */
 2460|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PUBLIC_KEY],
 2461|       |                            va_arg(param, char *));
 2462|       |    break;
 2463|       |
 2464|       |  case CURLOPT_SSH_PRIVATE_KEYFILE:
 2465|       |    /*
 2466|       |     * Use this file instead of the $HOME/.ssh/id_dsa file
 2467|       |     */
 2468|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PRIVATE_KEY],
 2469|       |                            va_arg(param, char *));
 2470|       |    break;
 2471|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
 2472|       |    /*
 2473|       |     * Option to allow for the MD5 of the host public key to be checked
 2474|       |     * for validation purposes.
 2475|       |     */
 2476|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5],
 2477|       |                            va_arg(param, char *));
 2478|       |    break;
 2479|       |
 2480|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256:
 2481|       |    /*
 2482|       |     * Option to allow for the SHA256 of the host public key to be checked
 2483|       |     * for validation purposes.
 2484|       |     */
 2485|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_SHA256],
 2486|       |                            va_arg(param, char *));
 2487|       |    break;
 2488|       |
 2489|       |  case CURLOPT_SSH_KNOWNHOSTS:
 2490|       |    /*
 2491|       |     * Store the file name to read known hosts from.
 2492|       |     */
 2493|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_KNOWNHOSTS],
 2494|       |                            va_arg(param, char *));
 2495|       |    break;
 2496|       |
 2497|       |  case CURLOPT_SSH_KEYFUNCTION:
 2498|       |    /* setting to NULL is fine since the ssh.c functions themselves will
 2499|       |       then revert to use the internal default */
 2500|       |    data->set.ssh_keyfunc = va_arg(param, curl_sshkeycallback);
 2501|       |    break;
 2502|       |
 2503|       |  case CURLOPT_SSH_KEYDATA:
 2504|       |    /*
 2505|       |     * Custom client data to pass to the SSH keyfunc callback
 2506|       |     */
 2507|       |    data->set.ssh_keyfunc_userp = va_arg(param, void *);
 2508|       |    break;
 2509|       |
 2510|       |  case CURLOPT_SSH_COMPRESSION:
 2511|       |    data->set.ssh_compression = (0 != va_arg(param, long))?TRUE:FALSE;
 2512|       |    break;
 2513|       |#endif /* USE_SSH */
 2514|       |
 2515|      0|  case CURLOPT_HTTP_TRANSFER_DECODING:
 2516|       |    /*
 2517|       |     * disable libcurl transfer encoding is used
 2518|       |     */
 2519|      0|#ifndef USE_HYPER
 2520|      0|    data->set.http_te_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2521|      0|    break;
 2522|       |#else
 2523|       |    return CURLE_NOT_BUILT_IN; /* hyper doesn't support */
 2524|       |#endif
 2525|       |
 2526|      0|  case CURLOPT_HTTP_CONTENT_DECODING:
 2527|       |    /*
 2528|       |     * raw data passed to the application when content encoding is used
 2529|       |     */
 2530|      0|    data->set.http_ce_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2531|      0|    break;
 2532|       |
 2533|      0|#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)
 2534|      0|  case CURLOPT_NEW_FILE_PERMS:
 2535|       |    /*
 2536|       |     * Uses these permissions instead of 0644
 2537|       |     */
 2538|      0|    arg = va_arg(param, long);
 2539|      0|    if((arg < 0) || (arg > 0777))
 2540|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2541|      0|    data->set.new_file_perms = arg;
 2542|      0|    break;
 2543|       |
 2544|      0|  case CURLOPT_NEW_DIRECTORY_PERMS:
 2545|       |    /*
 2546|       |     * Uses these permissions instead of 0755
 2547|       |     */
 2548|      0|    arg = va_arg(param, long);
 2549|      0|    if((arg < 0) || (arg > 0777))
 2550|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2551|      0|    data->set.new_directory_perms = arg;
 2552|      0|    break;
 2553|      0|#endif
 2554|       |
 2555|      0|  case CURLOPT_ADDRESS_SCOPE:
 2556|       |    /*
 2557|       |     * Use this scope id when using IPv6
 2558|       |     * We always get longs when passed plain numericals so we should check
 2559|       |     * that the value fits into an unsigned 32 bit integer.
 2560|       |     */
 2561|      0|    uarg = va_arg(param, unsigned long);
 2562|      0|#if SIZEOF_LONG > 4
 2563|      0|    if(uarg > UINT_MAX)
 2564|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2565|      0|#endif
 2566|      0|    data->set.scope_id = (unsigned int)uarg;
 2567|      0|    break;
 2568|       |
 2569|    783|  case CURLOPT_PROTOCOLS:
 2570|       |    /* set the bitmask for the protocols that are allowed to be used for the
 2571|       |       transfer, which thus helps the app which takes URLs from users or other
 2572|       |       external inputs and want to restrict what protocol(s) to deal
 2573|       |       with. Defaults to CURLPROTO_ALL. */
 2574|    783|    data->set.allowed_protocols = va_arg(param, long);
 2575|    783|    break;
 2576|       |
 2577|      0|  case CURLOPT_REDIR_PROTOCOLS:
 2578|       |    /* set the bitmask for the protocols that libcurl is allowed to follow to,
 2579|       |       as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
 2580|       |       to be set in both bitmasks to be allowed to get redirected to. */
 2581|      0|    data->set.redir_protocols = va_arg(param, long);
 2582|      0|    break;
 2583|       |
 2584|      0|  case CURLOPT_DEFAULT_PROTOCOL:
 2585|       |    /* Set the protocol to use when the URL doesn't include any protocol */
 2586|      0|    result = Curl_setstropt(&data->set.str[STRING_DEFAULT_PROTOCOL],
 2587|      0|                            va_arg(param, char *));
 2588|      0|    break;
 2589|      0|#ifndef CURL_DISABLE_SMTP
 2590|      6|  case CURLOPT_MAIL_FROM:
 2591|       |    /* Set the SMTP mail originator */
 2592|      6|    result = Curl_setstropt(&data->set.str[STRING_MAIL_FROM],
 2593|      6|                            va_arg(param, char *));
 2594|      6|    break;
 2595|       |
 2596|      2|  case CURLOPT_MAIL_AUTH:
 2597|       |    /* Set the SMTP auth originator */
 2598|      2|    result = Curl_setstropt(&data->set.str[STRING_MAIL_AUTH],
 2599|      2|                            va_arg(param, char *));
 2600|      2|    break;
 2601|       |
 2602|     20|  case CURLOPT_MAIL_RCPT:
 2603|       |    /* Set the list of mail recipients */
 2604|     20|    data->set.mail_rcpt = va_arg(param, struct curl_slist *);
 2605|     20|    break;
 2606|      0|  case CURLOPT_MAIL_RCPT_ALLLOWFAILS:
 2607|       |    /* allow RCPT TO command to fail for some recipients */
 2608|      0|    data->set.mail_rcpt_allowfails = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2609|      0|    break;
 2610|      0|#endif
 2611|       |
 2612|      0|  case CURLOPT_SASL_AUTHZID:
 2613|       |    /* Authorisation identity (identity to act as) */
 2614|      0|    result = Curl_setstropt(&data->set.str[STRING_SASL_AUTHZID],
 2615|      0|                            va_arg(param, char *));
 2616|      0|    break;
 2617|       |
 2618|      0|  case CURLOPT_SASL_IR:
 2619|       |    /* Enable/disable SASL initial response */
 2620|      0|    data->set.sasl_ir = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2621|      0|    break;
 2622|      0|#ifndef CURL_DISABLE_RTSP
 2623|      3|  case CURLOPT_RTSP_REQUEST:
 2624|      3|  {
 2625|       |    /*
 2626|       |     * Set the RTSP request method (OPTIONS, SETUP, PLAY, etc...)
 2627|       |     * Would this be better if the RTSPREQ_* were just moved into here?
 2628|       |     */
 2629|      3|    long in_rtspreq = va_arg(param, long);
 2630|      3|    Curl_RtspReq rtspreq = RTSPREQ_NONE;
 2631|      3|    switch(in_rtspreq) {
 2632|      0|    case CURL_RTSPREQ_OPTIONS:
 2633|      0|      rtspreq = RTSPREQ_OPTIONS;
 2634|      0|      break;
 2635|       |
 2636|      0|    case CURL_RTSPREQ_DESCRIBE:
 2637|      0|      rtspreq = RTSPREQ_DESCRIBE;
 2638|      0|      break;
 2639|       |
 2640|      0|    case CURL_RTSPREQ_ANNOUNCE:
 2641|      0|      rtspreq = RTSPREQ_ANNOUNCE;
 2642|      0|      break;
 2643|       |
 2644|      1|    case CURL_RTSPREQ_SETUP:
 2645|      1|      rtspreq = RTSPREQ_SETUP;
 2646|      1|      break;
 2647|       |
 2648|      0|    case CURL_RTSPREQ_PLAY:
 2649|      0|      rtspreq = RTSPREQ_PLAY;
 2650|      0|      break;
 2651|       |
 2652|      0|    case CURL_RTSPREQ_PAUSE:
 2653|      0|      rtspreq = RTSPREQ_PAUSE;
 2654|      0|      break;
 2655|       |
 2656|      0|    case CURL_RTSPREQ_TEARDOWN:
 2657|      0|      rtspreq = RTSPREQ_TEARDOWN;
 2658|      0|      break;
 2659|       |
 2660|      0|    case CURL_RTSPREQ_GET_PARAMETER:
 2661|      0|      rtspreq = RTSPREQ_GET_PARAMETER;
 2662|      0|      break;
 2663|       |
 2664|      0|    case CURL_RTSPREQ_SET_PARAMETER:
 2665|      0|      rtspreq = RTSPREQ_SET_PARAMETER;
 2666|      0|      break;
 2667|       |
 2668|      0|    case CURL_RTSPREQ_RECORD:
 2669|      0|      rtspreq = RTSPREQ_RECORD;
 2670|      0|      break;
 2671|       |
 2672|      0|    case CURL_RTSPREQ_RECEIVE:
 2673|      0|      rtspreq = RTSPREQ_RECEIVE;
 2674|      0|      break;
 2675|      2|    default:
 2676|      2|      rtspreq = RTSPREQ_NONE;
 2677|      3|    }
 2678|       |
 2679|      3|    data->set.rtspreq = rtspreq;
 2680|      3|    break;
 2681|      3|  }
 2682|       |
 2683|       |
 2684|      4|  case CURLOPT_RTSP_SESSION_ID:
 2685|       |    /*
 2686|       |     * Set the RTSP Session ID manually. Useful if the application is
 2687|       |     * resuming a previously established RTSP session
 2688|       |     */
 2689|      4|    result = Curl_setstropt(&data->set.str[STRING_RTSP_SESSION_ID],
 2690|      4|                            va_arg(param, char *));
 2691|      4|    break;
 2692|       |
 2693|      2|  case CURLOPT_RTSP_STREAM_URI:
 2694|       |    /*
 2695|       |     * Set the Stream URI for the RTSP request. Unless the request is
 2696|       |     * for generic server options, the application will need to set this.
 2697|       |     */
 2698|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_STREAM_URI],
 2699|      2|                            va_arg(param, char *));
 2700|      2|    break;
 2701|       |
 2702|      2|  case CURLOPT_RTSP_TRANSPORT:
 2703|       |    /*
 2704|       |     * The content of the Transport: header for the RTSP request
 2705|       |     */
 2706|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_TRANSPORT],
 2707|      2|                            va_arg(param, char *));
 2708|      2|    break;
 2709|       |
 2710|      1|  case CURLOPT_RTSP_CLIENT_CSEQ:
 2711|       |    /*
 2712|       |     * Set the CSEQ number to issue for the next RTSP request. Useful if the
 2713|       |     * application is resuming a previously broken connection. The CSEQ
 2714|       |     * will increment from this new number henceforth.
 2715|       |     */
 2716|      1|    data->state.rtsp_next_client_CSeq = va_arg(param, long);
 2717|      1|    break;
 2718|       |
 2719|      0|  case CURLOPT_RTSP_SERVER_CSEQ:
 2720|       |    /* Same as the above, but for server-initiated requests */
 2721|      0|    data->state.rtsp_next_server_CSeq = va_arg(param, long);
 2722|      0|    break;
 2723|       |
 2724|      0|  case CURLOPT_INTERLEAVEDATA:
 2725|      0|    data->set.rtp_out = va_arg(param, void *);
 2726|      0|    break;
 2727|      0|  case CURLOPT_INTERLEAVEFUNCTION:
 2728|       |    /* Set the user defined RTP write function */
 2729|      0|    data->set.fwrite_rtp = va_arg(param, curl_write_callback);
 2730|      0|    break;
 2731|      0|#endif
 2732|      0|#ifndef CURL_DISABLE_FTP
 2733|      8|  case CURLOPT_WILDCARDMATCH:
 2734|      8|    data->set.wildcard_enabled = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2735|      8|    break;
 2736|      0|  case CURLOPT_CHUNK_BGN_FUNCTION:
 2737|      0|    data->set.chunk_bgn = va_arg(param, curl_chunk_bgn_callback);
 2738|      0|    break;
 2739|      0|  case CURLOPT_CHUNK_END_FUNCTION:
 2740|      0|    data->set.chunk_end = va_arg(param, curl_chunk_end_callback);
 2741|      0|    break;
 2742|      0|  case CURLOPT_FNMATCH_FUNCTION:
 2743|      0|    data->set.fnmatch = va_arg(param, curl_fnmatch_callback);
 2744|      0|    break;
 2745|      0|  case CURLOPT_CHUNK_DATA:
 2746|      0|    data->wildcard.customptr = va_arg(param, void *);
 2747|      0|    break;
 2748|      0|  case CURLOPT_FNMATCH_DATA:
 2749|      0|    data->set.fnmatch_data = va_arg(param, void *);
 2750|      0|    break;
 2751|      0|#endif
 2752|      0|#ifdef USE_TLS_SRP
 2753|      0|  case CURLOPT_TLSAUTH_USERNAME:
 2754|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME],
 2755|      0|                            va_arg(param, char *));
 2756|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2757|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2758|      0|    break;
 2759|      0|  case CURLOPT_PROXY_TLSAUTH_USERNAME:
 2760|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],
 2761|      0|                            va_arg(param, char *));
 2762|      0|#ifndef CURL_DISABLE_PROXY
 2763|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2764|      0|       !data->set.proxy_ssl.authtype)
 2765|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2766|      0|#endif
 2767|      0|    break;
 2768|      0|  case CURLOPT_TLSAUTH_PASSWORD:
 2769|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD],
 2770|      0|                            va_arg(param, char *));
 2771|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2772|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2773|      0|    break;
 2774|      0|  case CURLOPT_PROXY_TLSAUTH_PASSWORD:
 2775|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],
 2776|      0|                            va_arg(param, char *));
 2777|      0|#ifndef CURL_DISABLE_PROXY
 2778|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2779|      0|       !data->set.proxy_ssl.authtype)
 2780|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2781|      0|#endif
 2782|      0|    break;
 2783|      0|  case CURLOPT_TLSAUTH_TYPE:
 2784|      0|    argptr = va_arg(param, char *);
 2785|      0|    if(!argptr ||
 2786|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2787|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP;
 2788|      0|    else
 2789|      0|      data->set.ssl.authtype = CURL_TLSAUTH_NONE;
 2790|      0|    break;
 2791|      0|#ifndef CURL_DISABLE_PROXY
 2792|      0|  case CURLOPT_PROXY_TLSAUTH_TYPE:
 2793|      0|    argptr = va_arg(param, char *);
 2794|      0|    if(!argptr ||
 2795|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2796|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP;
 2797|      0|    else
 2798|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_NONE;
 2799|      0|    break;
 2800|      0|#endif
 2801|      0|#endif
 2802|       |#ifdef USE_ARES
 2803|       |  case CURLOPT_DNS_SERVERS:
 2804|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],
 2805|       |                            va_arg(param, char *));
 2806|       |    if(result)
 2807|       |      return result;
 2808|       |    result = Curl_set_dns_servers(data, data->set.str[STRING_DNS_SERVERS]);
 2809|       |    break;
 2810|       |  case CURLOPT_DNS_INTERFACE:
 2811|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_INTERFACE],
 2812|       |                            va_arg(param, char *));
 2813|       |    if(result)
 2814|       |      return result;
 2815|       |    result = Curl_set_dns_interface(data, data->set.str[STRING_DNS_INTERFACE]);
 2816|       |    break;
 2817|       |  case CURLOPT_DNS_LOCAL_IP4:
 2818|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP4],
 2819|       |                            va_arg(param, char *));
 2820|       |    if(result)
 2821|       |      return result;
 2822|       |    result = Curl_set_dns_local_ip4(data, data->set.str[STRING_DNS_LOCAL_IP4]);
 2823|       |    break;
 2824|       |  case CURLOPT_DNS_LOCAL_IP6:
 2825|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP6],
 2826|       |                            va_arg(param, char *));
 2827|       |    if(result)
 2828|       |      return result;
 2829|       |    result = Curl_set_dns_local_ip6(data, data->set.str[STRING_DNS_LOCAL_IP6]);
 2830|       |    break;
 2831|       |#endif
 2832|      0|  case CURLOPT_TCP_KEEPALIVE:
 2833|      0|    data->set.tcp_keepalive = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2834|      0|    break;
 2835|      0|  case CURLOPT_TCP_KEEPIDLE:
 2836|      0|    arg = va_arg(param, long);
 2837|      0|    if(arg < 0)
 2838|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2839|      0|    data->set.tcp_keepidle = arg;
 2840|      0|    break;
 2841|      0|  case CURLOPT_TCP_KEEPINTVL:
 2842|      0|    arg = va_arg(param, long);
 2843|      0|    if(arg < 0)
 2844|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2845|      0|    data->set.tcp_keepintvl = arg;
 2846|      0|    break;
 2847|      0|  case CURLOPT_TCP_FASTOPEN:
 2848|      0|#if defined(CONNECT_DATA_IDEMPOTENT) || defined(MSG_FASTOPEN) || \
 2849|      0|   defined(TCP_FASTOPEN_CONNECT)
 2850|      0|    data->set.tcp_fastopen = (0 != va_arg(param, long))?TRUE:FALSE;
 2851|       |#else
 2852|       |    result = CURLE_NOT_BUILT_IN;
 2853|       |#endif
 2854|      0|    break;
 2855|      0|  case CURLOPT_SSL_ENABLE_NPN:
 2856|      0|    data->set.ssl_enable_npn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2857|      0|    break;
 2858|      0|  case CURLOPT_SSL_ENABLE_ALPN:
 2859|      0|    data->set.ssl_enable_alpn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2860|      0|    break;
 2861|      0|#ifdef USE_UNIX_SOCKETS
 2862|      0|  case CURLOPT_UNIX_SOCKET_PATH:
 2863|      0|    data->set.abstract_unix_socket = FALSE;
 2864|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2865|      0|                            va_arg(param, char *));
 2866|      0|    break;
 2867|      0|  case CURLOPT_ABSTRACT_UNIX_SOCKET:
 2868|      0|    data->set.abstract_unix_socket = TRUE;
 2869|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2870|      0|                            va_arg(param, char *));
 2871|      0|    break;
 2872|      0|#endif
 2873|       |
 2874|      0|  case CURLOPT_PATH_AS_IS:
 2875|      0|    data->set.path_as_is = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2876|      0|    break;
 2877|      0|  case CURLOPT_PIPEWAIT:
 2878|      0|    data->set.pipewait = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2879|      0|    break;
 2880|      0|  case CURLOPT_STREAM_WEIGHT:
 2881|       |#ifndef USE_NGHTTP2
 2882|       |    return CURLE_NOT_BUILT_IN;
 2883|       |#else
 2884|      0|    arg = va_arg(param, long);
 2885|      0|    if((arg >= 1) && (arg <= 256))
 2886|      0|      data->set.stream_weight = (int)arg;
 2887|      0|    break;
 2888|      0|#endif
 2889|      0|  case CURLOPT_STREAM_DEPENDS:
 2890|      0|  case CURLOPT_STREAM_DEPENDS_E:
 2891|      0|  {
 2892|       |#ifndef USE_NGHTTP2
 2893|       |    return CURLE_NOT_BUILT_IN;
 2894|       |#else
 2895|      0|    struct Curl_easy *dep = va_arg(param, struct Curl_easy *);
 2896|      0|    if(!dep || GOOD_EASY_HANDLE(dep)) {
 2897|      0|      if(data->set.stream_depends_on) {
 2898|      0|        Curl_http2_remove_child(data->set.stream_depends_on, data);
 2899|      0|      }
 2900|      0|      Curl_http2_add_child(dep, data, (option == CURLOPT_STREAM_DEPENDS_E));
 2901|      0|    }
 2902|      0|    break;
 2903|      0|#endif
 2904|      0|  }
 2905|    783|  case CURLOPT_CONNECT_TO:
 2906|    783|    data->set.connect_to = va_arg(param, struct curl_slist *);
 2907|    783|    break;
 2908|      0|  case CURLOPT_SUPPRESS_CONNECT_HEADERS:
 2909|      0|    data->set.suppress_connect_headers = (0 != va_arg(param, long))?TRUE:FALSE;
 2910|      0|    break;
 2911|      0|  case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
 2912|      0|    arg = va_arg(param, long);
 2913|      0|    if(arg < 0)
 2914|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2915|      0|    data->set.happy_eyeballs_timeout = arg;
 2916|      0|    break;
 2917|      0|#ifndef CURL_DISABLE_SHUFFLE_DNS
 2918|      0|  case CURLOPT_DNS_SHUFFLE_ADDRESSES:
 2919|      0|    data->set.dns_shuffle_addresses = (0 != va_arg(param, long)) ? TRUE:FALSE;
 2920|      0|    break;
 2921|      0|#endif
 2922|      0|  case CURLOPT_DISALLOW_USERNAME_IN_URL:
 2923|      0|    data->set.disallow_username_in_url =
 2924|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
 2925|      0|    break;
 2926|      0|#ifndef CURL_DISABLE_DOH
 2927|      2|  case CURLOPT_DOH_URL:
 2928|      2|    result = Curl_setstropt(&data->set.str[STRING_DOH],
 2929|      2|                            va_arg(param, char *));
 2930|      2|    data->set.doh = data->set.str[STRING_DOH]?TRUE:FALSE;
 2931|      2|    break;
 2932|      0|#endif
 2933|      0|  case CURLOPT_UPKEEP_INTERVAL_MS:
 2934|      0|    arg = va_arg(param, long);
 2935|      0|    if(arg < 0)
 2936|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2937|      0|    data->set.upkeep_interval_ms = arg;
 2938|      0|    break;
 2939|      0|  case CURLOPT_MAXAGE_CONN:
 2940|      0|    arg = va_arg(param, long);
 2941|      0|    if(arg < 0)
 2942|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2943|      0|    data->set.maxage_conn = arg;
 2944|      0|    break;
 2945|      0|  case CURLOPT_MAXLIFETIME_CONN:
 2946|      0|    arg = va_arg(param, long);
 2947|      0|    if(arg < 0)
 2948|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2949|      0|    data->set.maxlifetime_conn = arg;
 2950|      0|    break;
 2951|      0|  case CURLOPT_TRAILERFUNCTION:
 2952|      0|#ifndef CURL_DISABLE_HTTP
 2953|      0|    data->set.trailer_callback = va_arg(param, curl_trailer_callback);
 2954|      0|#endif
 2955|      0|    break;
 2956|      0|  case CURLOPT_TRAILERDATA:
 2957|      0|#ifndef CURL_DISABLE_HTTP
 2958|      0|    data->set.trailer_data = va_arg(param, void *);
 2959|      0|#endif
 2960|      0|    break;
 2961|      0|#ifndef CURL_DISABLE_HSTS
 2962|      0|  case CURLOPT_HSTSREADFUNCTION:
 2963|      0|    data->set.hsts_read = va_arg(param, curl_hstsread_callback);
 2964|      0|    break;
 2965|      0|  case CURLOPT_HSTSREADDATA:
 2966|      0|    data->set.hsts_read_userp = va_arg(param, void *);
 2967|      0|    break;
 2968|      0|  case CURLOPT_HSTSWRITEFUNCTION:
 2969|      0|    data->set.hsts_write = va_arg(param, curl_hstswrite_callback);
 2970|      0|    break;
 2971|      0|  case CURLOPT_HSTSWRITEDATA:
 2972|      0|    data->set.hsts_write_userp = va_arg(param, void *);
 2973|      0|    break;
 2974|      0|  case CURLOPT_HSTS:
 2975|      0|    if(!data->hsts) {
 2976|      0|      data->hsts = Curl_hsts_init();
 2977|      0|      if(!data->hsts)
 2978|      0|        return CURLE_OUT_OF_MEMORY;
 2979|      0|    }
 2980|      0|    argptr = va_arg(param, char *);
 2981|      0|    result = Curl_setstropt(&data->set.str[STRING_HSTS], argptr);
 2982|      0|    if(result)
 2983|      0|      return result;
 2984|      0|    if(argptr)
 2985|      0|      (void)Curl_hsts_loadfile(data, data->hsts, argptr);
 2986|      0|    break;
 2987|      0|  case CURLOPT_HSTS_CTRL:
 2988|      0|    arg = va_arg(param, long);
 2989|      0|    if(arg & CURLHSTS_ENABLE) {
 2990|      0|      if(!data->hsts) {
 2991|      0|        data->hsts = Curl_hsts_init();
 2992|      0|        if(!data->hsts)
 2993|      0|          return CURLE_OUT_OF_MEMORY;
 2994|      0|      }
 2995|      0|    }
 2996|      0|    else
 2997|      0|      Curl_hsts_cleanup(&data->hsts);
 2998|      0|    break;
 2999|      0|#endif
 3000|      0|#ifndef CURL_DISABLE_ALTSVC
 3001|      0|  case CURLOPT_ALTSVC:
 3002|      0|    if(!data->asi) {
 3003|      0|      data->asi = Curl_altsvc_init();
 3004|      0|      if(!data->asi)
 3005|      0|        return CURLE_OUT_OF_MEMORY;
 3006|      0|    }
 3007|      0|    argptr = va_arg(param, char *);
 3008|      0|    result = Curl_setstropt(&data->set.str[STRING_ALTSVC], argptr);
 3009|      0|    if(result)
 3010|      0|      return result;
 3011|      0|    if(argptr)
 3012|      0|      (void)Curl_altsvc_load(data->asi, argptr);
 3013|      0|    break;
 3014|      0|  case CURLOPT_ALTSVC_CTRL:
 3015|      0|    if(!data->asi) {
 3016|      0|      data->asi = Curl_altsvc_init();
 3017|      0|      if(!data->asi)
 3018|      0|        return CURLE_OUT_OF_MEMORY;
 3019|      0|    }
 3020|      0|    arg = va_arg(param, long);
 3021|      0|    result = Curl_altsvc_ctrl(data->asi, arg);
 3022|      0|    if(result)
 3023|      0|      return result;
 3024|      0|    break;
 3025|      0|#endif
 3026|      0|  case CURLOPT_PREREQFUNCTION:
 3027|      0|    data->set.fprereq = va_arg(param, curl_prereq_callback);
 3028|      0|    break;
 3029|      0|  case CURLOPT_PREREQDATA:
 3030|      0|    data->set.prereq_userp = va_arg(param, void *);
 3031|      0|    break;
 3032|      0|  default:
 3033|       |    /* unknown tag and its companion, just ignore: */
 3034|      0|    result = CURLE_UNKNOWN_OPTION;
 3035|      0|    break;
 3036|  10.4k|  }
 3037|       |
 3038|  10.4k|  return result;
 3039|  10.4k|}
curl_easy_setopt:
 3051|  10.4k|{
 3052|  10.4k|  va_list arg;
 3053|  10.4k|  CURLcode result;
 3054|       |
 3055|  10.4k|  if(!data)
 3056|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 3057|       |
 3058|  10.4k|  va_start(arg, tag);
 3059|       |
 3060|  10.4k|  result = Curl_vsetopt(data, tag, arg);
 3061|       |
 3062|  10.4k|  va_end(arg);
 3063|  10.4k|  return result;
 3064|  10.4k|}

Curl_share_lock:
  235|  1.66k|{
  236|  1.66k|  struct Curl_share *share = data->share;
  237|       |
  238|  1.66k|  if(!share)
  239|  1.66k|    return CURLSHE_INVALID;
  240|       |
  241|      0|  if(share->specifier & (1<<type)) {
  242|      0|    if(share->lockfunc) /* only call this if set! */
  243|      0|      share->lockfunc(data, type, accesstype, share->clientdata);
  244|      0|  }
  245|       |  /* else if we don't share this, pretend successful lock */
  246|       |
  247|      0|  return CURLSHE_OK;
  248|  1.66k|}
Curl_share_unlock:
  252|  1.66k|{
  253|  1.66k|  struct Curl_share *share = data->share;
  254|       |
  255|  1.66k|  if(!share)
  256|  1.66k|    return CURLSHE_INVALID;
  257|       |
  258|      0|  if(share->specifier & (1<<type)) {
  259|      0|    if(share->unlockfunc) /* only call this if set! */
  260|      0|      share->unlockfunc (data, type, share->clientdata);
  261|      0|  }
  262|       |
  263|      0|  return CURLSHE_OK;
  264|  1.66k|}

Curl_slist_append_nodup:
   60|  2.25k|{
   61|  2.25k|  struct curl_slist     *last;
   62|  2.25k|  struct curl_slist     *new_item;
   63|       |
   64|  2.25k|  DEBUGASSERT(data);
   65|       |
   66|  2.25k|  new_item = malloc(sizeof(struct curl_slist));
   67|  2.25k|  if(!new_item)
   68|      0|    return NULL;
   69|       |
   70|  2.25k|  new_item->next = NULL;
   71|  2.25k|  new_item->data = data;
   72|       |
   73|       |  /* if this is the first item, then new_item *is* the list */
   74|  2.25k|  if(!list)
   75|    843|    return new_item;
   76|       |
   77|  1.41k|  last = slist_get_last(list);
   78|  1.41k|  last->next = new_item;
   79|  1.41k|  return list;
   80|  2.25k|}
curl_slist_append:
   91|  2.25k|{
   92|  2.25k|  char *dupdata = strdup(data);
   93|       |
   94|  2.25k|  if(!dupdata)
   95|      0|    return NULL;
   96|       |
   97|  2.25k|  list = Curl_slist_append_nodup(list, dupdata);
   98|  2.25k|  if(!list)
   99|      0|    free(dupdata);
  100|       |
  101|  2.25k|  return list;
  102|  2.25k|}
curl_slist_free_all:
  130|  3.20k|{
  131|  3.20k|  struct curl_slist     *next;
  132|  3.20k|  struct curl_slist     *item;
  133|       |
  134|  3.20k|  if(!list)
  135|  2.36k|    return;
  136|       |
  137|    843|  item = list;
  138|  2.25k|  do {
  139|  2.25k|    next = item->next;
  140|  2.25k|    Curl_safefree(item->data);
  141|  2.25k|    free(item);
  142|  2.25k|    item = next;
  143|  2.25k|  } while(next);
  144|    843|}
slist.c:slist_get_last:
   35|  1.41k|{
   36|  1.41k|  struct curl_slist     *item;
   37|       |
   38|       |  /* if caller passed us a NULL, return now */
   39|  1.41k|  if(!list)
   40|      0|    return NULL;
   41|       |
   42|       |  /* loop through to find the last item */
   43|  1.41k|  item = list;
   44|  56.5k|  while(item->next) {
   45|  55.0k|    item = item->next;
   46|  55.0k|  }
   47|  1.41k|  return item;
   48|  1.41k|}

Curl_speedinit:
   32|    524|{
   33|    524|  memset(&data->state.keeps_speed, 0, sizeof(struct curltime));
   34|    524|}
Curl_speedcheck:
   41|     32|{
   42|     32|  if(data->req.keepon & KEEP_RECV_PAUSE)
   43|       |    /* A paused transfer is not qualified for speed checks */
   44|      0|    return CURLE_OK;
   45|       |
   46|     32|  if((data->progress.current_speed >= 0) && data->set.low_speed_time) {
   47|      0|    if(data->progress.current_speed < data->set.low_speed_limit) {
   48|      0|      if(!data->state.keeps_speed.tv_sec)
   49|       |        /* under the limit at this very moment */
   50|      0|        data->state.keeps_speed = now;
   51|      0|      else {
   52|       |        /* how long has it been under the limit */
   53|      0|        timediff_t howlong = Curl_timediff(now, data->state.keeps_speed);
   54|       |
   55|      0|        if(howlong >= data->set.low_speed_time * 1000) {
   56|       |          /* too long */
   57|      0|          failf(data,
   58|      0|                "Operation too slow. "
   59|      0|                "Less than %ld bytes/sec transferred the last %ld seconds",
   60|      0|                data->set.low_speed_limit,
   61|      0|                data->set.low_speed_time);
   62|      0|          return CURLE_OPERATION_TIMEDOUT;
   63|      0|        }
   64|      0|      }
   65|      0|    }
   66|      0|    else
   67|       |      /* faster right now */
   68|      0|      data->state.keeps_speed.tv_sec = 0;
   69|      0|  }
   70|       |
   71|     32|  if(data->set.low_speed_limit)
   72|       |    /* if low speed limit is enabled, set the expire timer to make this
   73|       |       connection's speed get checked again in a second */
   74|      0|    Curl_expire(data, 1000, EXPIRE_SPEEDCHECK);
   75|       |
   76|     32|  return CURLE_OK;
   77|     32|}

Curl_splay:
   42|  1.74k|{
   43|  1.74k|  struct Curl_tree N, *l, *r, *y;
   44|       |
   45|  1.74k|  if(!t)
   46|      0|    return t;
   47|  1.74k|  N.smaller = N.larger = NULL;
   48|  1.74k|  l = r = &N;
   49|       |
   50|  1.74k|  for(;;) {
   51|  1.74k|    long comp = compare(i, t->key);
   52|  1.74k|    if(comp < 0) {
   53|    961|      if(!t->smaller)
   54|    961|        break;
   55|      0|      if(compare(i, t->smaller->key) < 0) {
   56|      0|        y = t->smaller;                           /* rotate smaller */
   57|      0|        t->smaller = y->larger;
   58|      0|        y->larger = t;
   59|      0|        t = y;
   60|      0|        if(!t->smaller)
   61|      0|          break;
   62|      0|      }
   63|      0|      r->smaller = t;                               /* link smaller */
   64|      0|      r = t;
   65|      0|      t = t->smaller;
   66|      0|    }
   67|    786|    else if(comp > 0) {
   68|      0|      if(!t->larger)
   69|      0|        break;
   70|      0|      if(compare(i, t->larger->key) > 0) {
   71|      0|        y = t->larger;                          /* rotate larger */
   72|      0|        t->larger = y->smaller;
   73|      0|        y->smaller = t;
   74|      0|        t = y;
   75|      0|        if(!t->larger)
   76|      0|          break;
   77|      0|      }
   78|      0|      l->larger = t;                              /* link larger */
   79|      0|      l = t;
   80|      0|      t = t->larger;
   81|      0|    }
   82|    786|    else
   83|    786|      break;
   84|  1.74k|  }
   85|       |
   86|  1.74k|  l->larger = t->smaller;                                /* assemble */
   87|  1.74k|  r->smaller = t->larger;
   88|  1.74k|  t->smaller = N.larger;
   89|  1.74k|  t->larger = N.smaller;
   90|       |
   91|  1.74k|  return t;
   92|  1.74k|}
Curl_splayinsert:
  102|  1.01k|{
  103|  1.01k|  static const struct curltime KEY_NOTUSED = {
  104|  1.01k|    (time_t)-1, (unsigned int)-1
  105|  1.01k|  }; /* will *NEVER* appear */
  106|       |
  107|  1.01k|  if(!node)
  108|      0|    return t;
  109|       |
  110|  1.01k|  if(t != NULL) {
  111|      0|    t = Curl_splay(i, t);
  112|      0|    if(compare(i, t->key) == 0) {
  113|       |      /* There already exists a node in the tree with the very same key. Build
  114|       |         a doubly-linked circular list of nodes. We add the new 'node' struct
  115|       |         to the end of this list. */
  116|       |
  117|      0|      node->key = KEY_NOTUSED; /* we set the key in the sub node to NOTUSED
  118|       |                                  to quickly identify this node as a subnode */
  119|      0|      node->samen = t;
  120|      0|      node->samep = t->samep;
  121|      0|      t->samep->samen = node;
  122|      0|      t->samep = node;
  123|       |
  124|      0|      return t; /* the root node always stays the same */
  125|      0|    }
  126|      0|  }
  127|       |
  128|  1.01k|  if(!t) {
  129|  1.01k|    node->smaller = node->larger = NULL;
  130|  1.01k|  }
  131|      0|  else if(compare(i, t->key) < 0) {
  132|      0|    node->smaller = t->smaller;
  133|      0|    node->larger = t;
  134|      0|    t->smaller = NULL;
  135|       |
  136|      0|  }
  137|      0|  else {
  138|      0|    node->larger = t->larger;
  139|      0|    node->smaller = t;
  140|      0|    t->larger = NULL;
  141|      0|  }
  142|  1.01k|  node->key = i;
  143|       |
  144|       |  /* no identical nodes (yet), we are the only one in the list of nodes */
  145|  1.01k|  node->samen = node;
  146|  1.01k|  node->samep = node;
  147|  1.01k|  return node;
  148|  1.01k|}
Curl_splaygetbest:
  156|  1.63k|{
  157|  1.63k|  static const struct curltime tv_zero = {0, 0};
  158|  1.63k|  struct Curl_tree *x;
  159|       |
  160|  1.63k|  if(!t) {
  161|    674|    *removed = NULL; /* none removed since there was no root */
  162|    674|    return NULL;
  163|    674|  }
  164|       |
  165|       |  /* find smallest */
  166|    961|  t = Curl_splay(tv_zero, t);
  167|    961|  if(compare(i, t->key) < 0) {
  168|       |    /* even the smallest is too big */
  169|    733|    *removed = NULL;
  170|    733|    return t;
  171|    733|  }
  172|       |
  173|       |  /* FIRST! Check if there is a list with identical keys */
  174|    228|  x = t->samen;
  175|    228|  if(x != t) {
  176|       |    /* there is, pick one from the list */
  177|       |
  178|       |    /* 'x' is the new root node */
  179|       |
  180|      0|    x->key = t->key;
  181|      0|    x->larger = t->larger;
  182|      0|    x->smaller = t->smaller;
  183|      0|    x->samep = t->samep;
  184|      0|    t->samep->samen = x;
  185|       |
  186|      0|    *removed = t;
  187|      0|    return x; /* new root */
  188|      0|  }
  189|       |
  190|       |  /* we splayed the tree to the smallest element, there is no smaller */
  191|    228|  x = t->larger;
  192|    228|  *removed = t;
  193|       |
  194|    228|  return x;
  195|    228|}
Curl_splayremove:
  212|    786|{
  213|    786|  static const struct curltime KEY_NOTUSED = {
  214|    786|    (time_t)-1, (unsigned int)-1
  215|    786|  }; /* will *NEVER* appear */
  216|    786|  struct Curl_tree *x;
  217|       |
  218|    786|  if(!t || !removenode)
  219|      0|    return 1;
  220|       |
  221|    786|  if(compare(KEY_NOTUSED, removenode->key) == 0) {
  222|       |    /* Key set to NOTUSED means it is a subnode within a 'same' linked list
  223|       |       and thus we can unlink it easily. */
  224|      0|    if(removenode->samen == removenode)
  225|       |      /* A non-subnode should never be set to KEY_NOTUSED */
  226|      0|      return 3;
  227|       |
  228|      0|    removenode->samep->samen = removenode->samen;
  229|      0|    removenode->samen->samep = removenode->samep;
  230|       |
  231|       |    /* Ensures that double-remove gets caught. */
  232|      0|    removenode->samen = removenode;
  233|       |
  234|      0|    *newroot = t; /* return the same root */
  235|      0|    return 0;
  236|      0|  }
  237|       |
  238|    786|  t = Curl_splay(removenode->key, t);
  239|       |
  240|       |  /* First make sure that we got the same root node as the one we want
  241|       |     to remove, as otherwise we might be trying to remove a node that
  242|       |     isn't actually in the tree.
  243|       |
  244|       |     We cannot just compare the keys here as a double remove in quick
  245|       |     succession of a node with key != KEY_NOTUSED && same != NULL
  246|       |     could return the same key but a different node. */
  247|    786|  if(t != removenode)
  248|      0|    return 2;
  249|       |
  250|       |  /* Check if there is a list with identical sizes, as then we're trying to
  251|       |     remove the root node of a list of nodes with identical keys. */
  252|    786|  x = t->samen;
  253|    786|  if(x != t) {
  254|       |    /* 'x' is the new root node, we just make it use the root node's
  255|       |       smaller/larger links */
  256|       |
  257|      0|    x->key = t->key;
  258|      0|    x->larger = t->larger;
  259|      0|    x->smaller = t->smaller;
  260|      0|    x->samep = t->samep;
  261|      0|    t->samep->samen = x;
  262|      0|  }
  263|    786|  else {
  264|       |    /* Remove the root node */
  265|    786|    if(!t->smaller)
  266|    786|      x = t->larger;
  267|      0|    else {
  268|      0|      x = Curl_splay(removenode->key, t->smaller);
  269|      0|      x->larger = t->larger;
  270|      0|    }
  271|    786|  }
  272|       |
  273|    786|  *newroot = x; /* store new root pointer */
  274|       |
  275|    786|  return 0;
  276|    786|}

Curl_raw_toupper:
   34|  69.6k|{
   35|  69.6k|#if !defined(CURL_DOES_CONVERSIONS)
   36|  69.6k|  if(in >= 'a' && in <= 'z')
   37|  36.2k|    return (char)('A' + in - 'a');
   38|       |#else
   39|       |  switch(in) {
   40|       |  case 'a':
   41|       |    return 'A';
   42|       |  case 'b':
   43|       |    return 'B';
   44|       |  case 'c':
   45|       |    return 'C';
   46|       |  case 'd':
   47|       |    return 'D';
   48|       |  case 'e':
   49|       |    return 'E';
   50|       |  case 'f':
   51|       |    return 'F';
   52|       |  case 'g':
   53|       |    return 'G';
   54|       |  case 'h':
   55|       |    return 'H';
   56|       |  case 'i':
   57|       |    return 'I';
   58|       |  case 'j':
   59|       |    return 'J';
   60|       |  case 'k':
   61|       |    return 'K';
   62|       |  case 'l':
   63|       |    return 'L';
   64|       |  case 'm':
   65|       |    return 'M';
   66|       |  case 'n':
   67|       |    return 'N';
   68|       |  case 'o':
   69|       |    return 'O';
   70|       |  case 'p':
   71|       |    return 'P';
   72|       |  case 'q':
   73|       |    return 'Q';
   74|       |  case 'r':
   75|       |    return 'R';
   76|       |  case 's':
   77|       |    return 'S';
   78|       |  case 't':
   79|       |    return 'T';
   80|       |  case 'u':
   81|       |    return 'U';
   82|       |  case 'v':
   83|       |    return 'V';
   84|       |  case 'w':
   85|       |    return 'W';
   86|       |  case 'x':
   87|       |    return 'X';
   88|       |  case 'y':
   89|       |    return 'Y';
   90|       |  case 'z':
   91|       |    return 'Z';
   92|       |  }
   93|       |#endif
   94|       |
   95|  33.4k|  return in;
   96|  69.6k|}
Curl_strcasecompare:
  181|  11.3k|{
  182|  22.7k|  while(*first && *second) {
  183|  19.7k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second))
  184|       |      /* get out of the loop as soon as they don't match */
  185|  8.35k|      break;
  186|  11.4k|    first++;
  187|  11.4k|    second++;
  188|  11.4k|  }
  189|       |  /* we do the comparison here (possibly again), just to make sure that if the
  190|       |     loop above is skipped because one of the strings reached zero, we must not
  191|       |     return this as a successful match */
  192|  11.3k|  return (Curl_raw_toupper(*first) == Curl_raw_toupper(*second));
  193|  11.3k|}
Curl_strncasecompare:
  209|    488|{
  210|    568|  while(*first && *second && max) {
  211|    557|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second)) {
  212|    477|      break;
  213|    477|    }
  214|     80|    max--;
  215|     80|    first++;
  216|     80|    second++;
  217|     80|  }
  218|    488|  if(0 == max)
  219|      8|    return 1; /* they are equal this far */
  220|       |
  221|    480|  return Curl_raw_toupper(*first) == Curl_raw_toupper(*second);
  222|    488|}
Curl_strntoupper:
  230|    524|{
  231|    524|  if(n < 1)
  232|      0|    return;
  233|       |
  234|  5.28k|  do {
  235|  5.28k|    *dest++ = Curl_raw_toupper(*src);
  236|  5.28k|  } while(*src++ && --n);
  237|    524|}
Curl_strntolower:
  245|  2.14k|{
  246|  2.14k|  if(n < 1)
  247|      1|    return;
  248|       |
  249|  33.7k|  do {
  250|  33.7k|    *dest++ = raw_tolower(*src);
  251|  33.7k|  } while(*src++ && --n);
  252|  2.14k|}
curl_strnequal:
  261|    488|{
  262|    488|  return Curl_strncasecompare(first, second, max);
  263|    488|}
strcase.c:raw_tolower:
  102|  33.7k|{
  103|  33.7k|#if !defined(CURL_DOES_CONVERSIONS)
  104|  33.7k|  if(in >= 'A' && in <= 'Z')
  105|    190|    return (char)('a' + in - 'A');
  106|       |#else
  107|       |  switch(in) {
  108|       |  case 'A':
  109|       |    return 'a';
  110|       |  case 'B':
  111|       |    return 'b';
  112|       |  case 'C':
  113|       |    return 'c';
  114|       |  case 'D':
  115|       |    return 'd';
  116|       |  case 'E':
  117|       |    return 'e';
  118|       |  case 'F':
  119|       |    return 'f';
  120|       |  case 'G':
  121|       |    return 'g';
  122|       |  case 'H':
  123|       |    return 'h';
  124|       |  case 'I':
  125|       |    return 'i';
  126|       |  case 'J':
  127|       |    return 'j';
  128|       |  case 'K':
  129|       |    return 'k';
  130|       |  case 'L':
  131|       |    return 'l';
  132|       |  case 'M':
  133|       |    return 'm';
  134|       |  case 'N':
  135|       |    return 'n';
  136|       |  case 'O':
  137|       |    return 'o';
  138|       |  case 'P':
  139|       |    return 'p';
  140|       |  case 'Q':
  141|       |    return 'q';
  142|       |  case 'R':
  143|       |    return 'r';
  144|       |  case 'S':
  145|       |    return 's';
  146|       |  case 'T':
  147|       |    return 't';
  148|       |  case 'U':
  149|       |    return 'u';
  150|       |  case 'V':
  151|       |    return 'v';
  152|       |  case 'W':
  153|       |    return 'w';
  154|       |  case 'X':
  155|       |    return 'x';
  156|       |  case 'Y':
  157|       |    return 'y';
  158|       |  case 'Z':
  159|       |    return 'z';
  160|       |  }
  161|       |#endif
  162|       |
  163|  33.5k|  return in;
  164|  33.7k|}

curl_url_strerror:
  458|     60|{
  459|     60|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  460|     60|  switch(error) {
  461|      0|  case CURLUE_OK:
  462|      0|    return "No error";
  463|       |
  464|      0|  case CURLUE_BAD_HANDLE:
  465|      0|    return "An invalid CURLU pointer was passed as argument";
  466|       |
  467|      0|  case CURLUE_BAD_PARTPOINTER:
  468|      0|    return "An invalid 'part' argument was passed as argument";
  469|       |
  470|     49|  case CURLUE_MALFORMED_INPUT:
  471|     49|    return "A malformed input was passed to a URL API function";
  472|       |
  473|      8|  case CURLUE_BAD_PORT_NUMBER:
  474|      8|    return "The port number was not a decimal number between 0 and 65535";
  475|       |
  476|      0|  case CURLUE_UNSUPPORTED_SCHEME:
  477|      0|    return "This libcurl build doesn't support the given URL scheme";
  478|       |
  479|      0|  case CURLUE_URLDECODE:
  480|      0|    return "URL decode error, most likely because of rubbish in the input";
  481|       |
  482|      0|  case CURLUE_OUT_OF_MEMORY:
  483|      0|    return "A memory function failed";
  484|       |
  485|      0|  case CURLUE_USER_NOT_ALLOWED:
  486|      0|    return "Credentials was passed in the URL when prohibited";
  487|       |
  488|      0|  case CURLUE_UNKNOWN_PART:
  489|      0|    return "An unknown part ID was passed to a URL API function";
  490|       |
  491|      0|  case CURLUE_NO_SCHEME:
  492|      0|    return "There is no scheme part in the URL";
  493|       |
  494|      0|  case CURLUE_NO_USER:
  495|      0|    return "There is no user part in the URL";
  496|       |
  497|      0|  case CURLUE_NO_PASSWORD:
  498|      0|    return "There is no password part in the URL";
  499|       |
  500|      0|  case CURLUE_NO_OPTIONS:
  501|      0|    return "There is no options part in the URL";
  502|       |
  503|      3|  case CURLUE_NO_HOST:
  504|      3|    return "There is no host part in the URL";
  505|       |
  506|      0|  case CURLUE_NO_PORT:
  507|      0|    return "There is no port part in the URL";
  508|       |
  509|      0|  case CURLUE_NO_QUERY:
  510|      0|    return "There is no query part in the URL";
  511|       |
  512|      0|  case CURLUE_NO_FRAGMENT:
  513|      0|    return "There is no fragment part in the URL";
  514|       |
  515|      0|  case CURLUE_LAST:
  516|      0|    break;
  517|     60|  }
  518|       |
  519|      0|  return "CURLUcode unknown";
  520|       |#else
  521|       |  if(error == CURLUE_OK)
  522|       |    return "No error";
  523|       |  else
  524|       |    return "Error";
  525|       |#endif
  526|     60|}
Curl_strerror:
  788|    524|{
  789|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  790|       |  DWORD old_win_err = GetLastError();
  791|       |#endif
  792|    524|  int old_errno = errno;
  793|    524|  char *p;
  794|    524|  size_t max;
  795|       |
  796|    524|  if(!buflen)
  797|      0|    return NULL;
  798|       |
  799|    524|#ifndef WIN32
  800|    524|  DEBUGASSERT(err >= 0);
  801|    524|#endif
  802|       |
  803|    524|  max = buflen - 1;
  804|    524|  *buf = '\0';
  805|       |
  806|       |#if defined(WIN32) || defined(_WIN32_WCE)
  807|       |#if defined(WIN32)
  808|       |  /* 'sys_nerr' is the maximum errno number, it is not widely portable */
  809|       |  if(err >= 0 && err < sys_nerr)
  810|       |    strncpy(buf, sys_errlist[err], max);
  811|       |  else
  812|       |#endif
  813|       |  {
  814|       |    if(
  815|       |#ifdef USE_WINSOCK
  816|       |       !get_winsock_error(err, buf, max) &&
  817|       |#endif
  818|       |       !get_winapi_error((DWORD)err, buf, max))
  819|       |      msnprintf(buf, max, "Unknown error %d (%#x)", err, err);
  820|       |  }
  821|       |#else /* not Windows coming up */
  822|       |
  823|    524|#if defined(HAVE_STRERROR_R) && defined(HAVE_POSIX_STRERROR_R)
  824|       | /*
  825|       |  * The POSIX-style strerror_r() may set errno to ERANGE if insufficient
  826|       |  * storage is supplied via 'strerrbuf' and 'buflen' to hold the generated
  827|       |  * message string, or EINVAL if 'errnum' is not a valid error number.
  828|       |  */
  829|    524|  if(0 != strerror_r(err, buf, max)) {
  830|      0|    if('\0' == buf[0])
  831|      0|      msnprintf(buf, max, "Unknown error %d", err);
  832|      0|  }
  833|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_GLIBC_STRERROR_R)
  834|       | /*
  835|       |  * The glibc-style strerror_r() only *might* use the buffer we pass to
  836|       |  * the function, but it always returns the error message as a pointer,
  837|       |  * so we must copy that string unconditionally (if non-NULL).
  838|       |  */
  839|       |  {
  840|       |    char buffer[256];
  841|       |    char *msg = strerror_r(err, buffer, sizeof(buffer));
  842|       |    if(msg)
  843|       |      strncpy(buf, msg, max);
  844|       |    else
  845|       |      msnprintf(buf, max, "Unknown error %d", err);
  846|       |  }
  847|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_VXWORKS_STRERROR_R)
  848|       | /*
  849|       |  * The vxworks-style strerror_r() does use the buffer we pass to the function.
  850|       |  * The buffer size should be at least NAME_MAX (256)
  851|       |  */
  852|       |  {
  853|       |    char buffer[256];
  854|       |    if(OK == strerror_r(err, buffer))
  855|       |      strncpy(buf, buffer, max);
  856|       |    else
  857|       |      msnprintf(buf, max, "Unknown error %d", err);
  858|       |  }
  859|       |#else
  860|       |  {
  861|       |    /* !checksrc! disable STRERROR 1 */
  862|       |    const char *msg = strerror(err);
  863|       |    if(msg)
  864|       |      strncpy(buf, msg, max);
  865|       |    else
  866|       |      msnprintf(buf, max, "Unknown error %d", err);
  867|       |  }
  868|       |#endif
  869|       |
  870|    524|#endif /* end of not Windows */
  871|       |
  872|    524|  buf[max] = '\0'; /* make sure the string is null-terminated */
  873|       |
  874|       |  /* strip trailing '\r\n' or '\n'. */
  875|    524|  p = strrchr(buf, '\n');
  876|    524|  if(p && (p - buf) >= 2)
  877|      0|    *p = '\0';
  878|    524|  p = strrchr(buf, '\r');
  879|    524|  if(p && (p - buf) >= 1)
  880|      0|    *p = '\0';
  881|       |
  882|    524|  if(errno != old_errno)
  883|      0|    errno = old_errno;
  884|       |
  885|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  886|       |  if(old_win_err != GetLastError())
  887|       |    SetLastError(old_win_err);
  888|       |#endif
  889|       |
  890|    524|  return buf;
  891|    524|}

Curl_now:
   62|  19.3k|{
   63|       |  /*
   64|       |  ** clock_gettime() is granted to be increased monotonically when the
   65|       |  ** monotonic clock is queried. Time starting point is unspecified, it
   66|       |  ** could be the system start-up time, the Epoch, or something else,
   67|       |  ** in any case the time starting point does not change once that the
   68|       |  ** system has started up.
   69|       |  */
   70|  19.3k|#ifdef HAVE_GETTIMEOFDAY
   71|  19.3k|  struct timeval now;
   72|  19.3k|#endif
   73|  19.3k|  struct curltime cnow;
   74|  19.3k|  struct timespec tsnow;
   75|       |
   76|       |  /*
   77|       |  ** clock_gettime() may be defined by Apple's SDK as weak symbol thus
   78|       |  ** code compiles but fails during run-time if clock_gettime() is
   79|       |  ** called on unsupported OS version.
   80|       |  */
   81|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   82|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   83|       |  bool have_clock_gettime = FALSE;
   84|       |  if(__builtin_available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *))
   85|       |    have_clock_gettime = TRUE;
   86|       |#endif
   87|       |
   88|  19.3k|  if(
   89|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   90|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   91|       |    have_clock_gettime &&
   92|       |#endif
   93|  19.3k|    (0 == clock_gettime(CLOCK_MONOTONIC, &tsnow))) {
   94|  19.3k|    cnow.tv_sec = tsnow.tv_sec;
   95|  19.3k|    cnow.tv_usec = (unsigned int)(tsnow.tv_nsec / 1000);
   96|  19.3k|  }
   97|       |  /*
   98|       |  ** Even when the configure process has truly detected monotonic clock
   99|       |  ** availability, it might happen that it is not actually available at
  100|       |  ** run-time. When this occurs simply fallback to other time source.
  101|       |  */
  102|      0|#ifdef HAVE_GETTIMEOFDAY
  103|      0|  else {
  104|      0|    (void)gettimeofday(&now, NULL);
  105|      0|    cnow.tv_sec = now.tv_sec;
  106|      0|    cnow.tv_usec = (unsigned int)now.tv_usec;
  107|      0|  }
  108|       |#else
  109|       |  else {
  110|       |    cnow.tv_sec = time(NULL);
  111|       |    cnow.tv_usec = 0;
  112|       |  }
  113|       |#endif
  114|  19.3k|  return cnow;
  115|  19.3k|}
Curl_timediff:
  187|  11.8k|{
  188|  11.8k|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  189|  11.8k|  if(diff >= (TIMEDIFF_T_MAX/1000))
  190|      0|    return TIMEDIFF_T_MAX;
  191|  11.8k|  else if(diff <= (TIMEDIFF_T_MIN/1000))
  192|      0|    return TIMEDIFF_T_MIN;
  193|  11.8k|  return diff * 1000 + (newer.tv_usec-older.tv_usec)/1000;
  194|  11.8k|}
Curl_timediff_us:
  201|  3.48k|{
  202|  3.48k|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  203|  3.48k|  if(diff >= (TIMEDIFF_T_MAX/1000000))
  204|      0|    return TIMEDIFF_T_MAX;
  205|  3.48k|  else if(diff <= (TIMEDIFF_T_MIN/1000000))
  206|      0|    return TIMEDIFF_T_MIN;
  207|  3.48k|  return diff * 1000000 + newer.tv_usec-older.tv_usec;
  208|  3.48k|}

Curl_init_CONNECT:
 1391|    688|{
 1392|    688|  data->state.fread_func = data->set.fread_func_set;
 1393|    688|  data->state.in = data->set.in_set;
 1394|    688|}
Curl_pretransfer:
 1402|    783|{
 1403|    783|  CURLcode result;
 1404|       |
 1405|    783|  if(!data->state.url && !data->set.uh) {
 1406|       |    /* we can't do anything without URL */
 1407|     95|    failf(data, "No URL set!");
 1408|     95|    return CURLE_URL_MALFORMAT;
 1409|     95|  }
 1410|       |
 1411|       |  /* since the URL may have been redirected in a previous use of this handle */
 1412|    688|  if(data->state.url_alloc) {
 1413|       |    /* the already set URL is allocated, free it first! */
 1414|      0|    Curl_safefree(data->state.url);
 1415|      0|    data->state.url_alloc = FALSE;
 1416|      0|  }
 1417|       |
 1418|    688|  if(!data->state.url && data->set.uh) {
 1419|      0|    CURLUcode uc;
 1420|      0|    free(data->set.str[STRING_SET_URL]);
 1421|      0|    uc = curl_url_get(data->set.uh,
 1422|      0|                      CURLUPART_URL, &data->set.str[STRING_SET_URL], 0);
 1423|      0|    if(uc) {
 1424|      0|      failf(data, "No URL set!");
 1425|      0|      return CURLE_URL_MALFORMAT;
 1426|      0|    }
 1427|      0|  }
 1428|       |
 1429|    688|  data->state.prefer_ascii = data->set.prefer_ascii;
 1430|    688|  data->state.list_only = data->set.list_only;
 1431|    688|  data->state.httpreq = data->set.method;
 1432|    688|  data->state.url = data->set.str[STRING_SET_URL];
 1433|       |
 1434|       |  /* Init the SSL session ID cache here. We do it here since we want to do it
 1435|       |     after the *_setopt() calls (that could specify the size of the cache) but
 1436|       |     before any transfer takes place. */
 1437|    688|  result = Curl_ssl_initsessions(data, data->set.general_ssl.max_ssl_sessions);
 1438|    688|  if(result)
 1439|      0|    return result;
 1440|       |
 1441|    688|  data->state.wildcardmatch = data->set.wildcard_enabled;
 1442|    688|  data->state.followlocation = 0; /* reset the location-follow counter */
 1443|    688|  data->state.this_is_a_follow = FALSE; /* reset this */
 1444|    688|  data->state.errorbuf = FALSE; /* no error has occurred */
 1445|    688|  data->state.httpwant = data->set.httpwant;
 1446|    688|  data->state.httpversion = 0;
 1447|    688|  data->state.authproblem = FALSE;
 1448|    688|  data->state.authhost.want = data->set.httpauth;
 1449|    688|  data->state.authproxy.want = data->set.proxyauth;
 1450|    688|  Curl_safefree(data->info.wouldredirect);
 1451|       |
 1452|    688|  if(data->state.httpreq == HTTPREQ_PUT)
 1453|      7|    data->state.infilesize = data->set.filesize;
 1454|    681|  else if((data->state.httpreq != HTTPREQ_GET) &&
 1455|    681|          (data->state.httpreq != HTTPREQ_HEAD)) {
 1456|      5|    data->state.infilesize = data->set.postfieldsize;
 1457|      5|    if(data->set.postfields && (data->state.infilesize == -1))
 1458|      2|      data->state.infilesize = (curl_off_t)strlen(data->set.postfields);
 1459|      5|  }
 1460|    676|  else
 1461|    676|    data->state.infilesize = 0;
 1462|       |
 1463|       |  /* If there is a list of cookie files to read, do it now! */
 1464|    688|  if(data->state.cookielist)
 1465|      0|    Curl_cookie_loadfiles(data);
 1466|       |
 1467|       |  /* If there is a list of host pairs to deal with */
 1468|    688|  if(data->state.resolve)
 1469|      0|    result = Curl_loadhostpairs(data);
 1470|       |
 1471|    688|  if(!result) {
 1472|       |    /* Allow data->set.use_port to set which port to use. This needs to be
 1473|       |     * disabled for example when we follow Location: headers to URLs using
 1474|       |     * different ports! */
 1475|    688|    data->state.allow_port = TRUE;
 1476|       |
 1477|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1478|       |    /*************************************************************
 1479|       |     * Tell signal handler to ignore SIGPIPE
 1480|       |     *************************************************************/
 1481|       |    if(!data->set.no_signal)
 1482|       |      data->state.prev_signal = signal(SIGPIPE, SIG_IGN);
 1483|       |#endif
 1484|       |
 1485|    688|    Curl_initinfo(data); /* reset session-specific information "variables" */
 1486|    688|    Curl_pgrsResetTransferSizes(data);
 1487|    688|    Curl_pgrsStartNow(data);
 1488|       |
 1489|       |    /* In case the handle is re-used and an authentication method was picked
 1490|       |       in the session we need to make sure we only use the one(s) we now
 1491|       |       consider to be fine */
 1492|    688|    data->state.authhost.picked &= data->state.authhost.want;
 1493|    688|    data->state.authproxy.picked &= data->state.authproxy.want;
 1494|       |
 1495|    688|#ifndef CURL_DISABLE_FTP
 1496|    688|    if(data->state.wildcardmatch) {
 1497|      7|      struct WildcardData *wc = &data->wildcard;
 1498|      7|      if(wc->state < CURLWC_INIT) {
 1499|      7|        result = Curl_wildcard_init(wc); /* init wildcard structures */
 1500|      7|        if(result)
 1501|      0|          return CURLE_OUT_OF_MEMORY;
 1502|      7|      }
 1503|      7|    }
 1504|    688|#endif
 1505|    688|    Curl_http2_init_state(&data->state);
 1506|    688|    result = Curl_hsts_loadcb(data, data->hsts);
 1507|    688|  }
 1508|       |
 1509|       |  /*
 1510|       |   * Set user-agent. Used for HTTP, but since we can attempt to tunnel
 1511|       |   * basically anything through a http proxy we can't limit this based on
 1512|       |   * protocol.
 1513|       |   */
 1514|    688|  if(data->set.str[STRING_USERAGENT]) {
 1515|      0|    Curl_safefree(data->state.aptr.uagent);
 1516|      0|    data->state.aptr.uagent =
 1517|      0|      aprintf("User-Agent: %s\r\n", data->set.str[STRING_USERAGENT]);
 1518|      0|    if(!data->state.aptr.uagent)
 1519|      0|      return CURLE_OUT_OF_MEMORY;
 1520|      0|  }
 1521|       |
 1522|    688|  if(!result)
 1523|    688|    result = Curl_setstropt(&data->state.aptr.user,
 1524|    688|                            data->set.str[STRING_USERNAME]);
 1525|    688|  if(!result)
 1526|    688|    result = Curl_setstropt(&data->state.aptr.passwd,
 1527|    688|                            data->set.str[STRING_PASSWORD]);
 1528|    688|  if(!result)
 1529|    688|    result = Curl_setstropt(&data->state.aptr.proxyuser,
 1530|    688|                            data->set.str[STRING_PROXYUSERNAME]);
 1531|    688|  if(!result)
 1532|    688|    result = Curl_setstropt(&data->state.aptr.proxypasswd,
 1533|    688|                            data->set.str[STRING_PROXYPASSWORD]);
 1534|       |
 1535|    688|  data->req.headerbytecount = 0;
 1536|    688|  return result;
 1537|    688|}
Curl_posttransfer:
 1543|    576|{
 1544|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1545|       |  /* restore the signal handler for SIGPIPE before we get back */
 1546|       |  if(!data->set.no_signal)
 1547|       |    signal(SIGPIPE, data->state.prev_signal);
 1548|       |#else
 1549|    576|  (void)data; /* unused parameter */
 1550|    576|#endif
 1551|       |
 1552|    576|  return CURLE_OK;
 1553|    576|}
Curl_setup_transfer:
 1881|      3|{
 1882|      3|  struct SingleRequest *k = &data->req;
 1883|      3|  struct connectdata *conn = data->conn;
 1884|      3|  struct HTTP *http = data->req.p.http;
 1885|      3|  bool httpsending = ((conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1886|      3|                      (http->sending == HTTPSEND_REQUEST));
 1887|      3|  DEBUGASSERT(conn != NULL);
 1888|      3|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
 1889|       |
 1890|      3|  if(conn->bits.multiplex || conn->httpversion == 20 || httpsending) {
 1891|       |    /* when multiplexing, the read/write sockets need to be the same! */
 1892|      0|    conn->sockfd = sockindex == -1 ?
 1893|      0|      ((writesockindex == -1 ? CURL_SOCKET_BAD : conn->sock[writesockindex])) :
 1894|      0|      conn->sock[sockindex];
 1895|      0|    conn->writesockfd = conn->sockfd;
 1896|      0|    if(httpsending)
 1897|       |      /* special and very HTTP-specific */
 1898|      0|      writesockindex = FIRSTSOCKET;
 1899|      0|  }
 1900|      3|  else {
 1901|      3|    conn->sockfd = sockindex == -1 ?
 1902|      3|      CURL_SOCKET_BAD : conn->sock[sockindex];
 1903|      3|    conn->writesockfd = writesockindex == -1 ?
 1904|      3|      CURL_SOCKET_BAD:conn->sock[writesockindex];
 1905|      3|  }
 1906|      3|  k->getheader = getheader;
 1907|       |
 1908|      3|  k->size = size;
 1909|       |
 1910|       |  /* The code sequence below is placed in this function just because all
 1911|       |     necessary input is not always known in do_complete() as this function may
 1912|       |     be called after that */
 1913|       |
 1914|      3|  if(!k->getheader) {
 1915|      3|    k->header = FALSE;
 1916|      3|    if(size > 0)
 1917|      0|      Curl_pgrsSetDownloadSize(data, size);
 1918|      3|  }
 1919|       |  /* we want header and/or body, if neither then don't do this! */
 1920|      3|  if(k->getheader || !data->set.opt_no_body) {
 1921|       |
 1922|      0|    if(sockindex != -1)
 1923|      0|      k->keepon |= KEEP_RECV;
 1924|       |
 1925|      0|    if(writesockindex != -1) {
 1926|       |      /* HTTP 1.1 magic:
 1927|       |
 1928|       |         Even if we require a 100-return code before uploading data, we might
 1929|       |         need to write data before that since the REQUEST may not have been
 1930|       |         finished sent off just yet.
 1931|       |
 1932|       |         Thus, we must check if the request has been sent before we set the
 1933|       |         state info where we wait for the 100-return code
 1934|       |      */
 1935|      0|      if((data->state.expect100header) &&
 1936|      0|         (conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1937|      0|         (http->sending == HTTPSEND_BODY)) {
 1938|       |        /* wait with write until we either got 100-continue or a timeout */
 1939|      0|        k->exp100 = EXP100_AWAITING_CONTINUE;
 1940|      0|        k->start100 = Curl_now();
 1941|       |
 1942|       |        /* Set a timeout for the multi interface. Add the inaccuracy margin so
 1943|       |           that we don't fire slightly too early and get denied to run. */
 1944|      0|        Curl_expire(data, data->set.expect_100_timeout, EXPIRE_100_TIMEOUT);
 1945|      0|      }
 1946|      0|      else {
 1947|      0|        if(data->state.expect100header)
 1948|       |          /* when we've sent off the rest of the headers, we must await a
 1949|       |             100-continue but first finish sending the request */
 1950|      0|          k->exp100 = EXP100_SENDING_REQUEST;
 1951|       |
 1952|       |        /* enable the write bit when we're not waiting for continue */
 1953|      0|        k->keepon |= KEEP_SEND;
 1954|      0|      }
 1955|      0|    } /* if(writesockindex != -1) */
 1956|      0|  } /* if(k->getheader || !data->set.opt_no_body) */
 1957|       |
 1958|      3|}

Curl_freeset:
  310|  1.66k|{
  311|       |  /* Free all dynamic strings stored in the data->set substructure. */
  312|  1.66k|  enum dupstring i;
  313|  1.66k|  enum dupblob j;
  314|       |
  315|   136k|  for(i = (enum dupstring)0; i < STRING_LAST; i++) {
  316|   135k|    Curl_safefree(data->set.str[i]);
  317|   135k|  }
  318|       |
  319|  15.0k|  for(j = (enum dupblob)0; j < BLOB_LAST; j++) {
  320|  13.3k|    Curl_safefree(data->set.blobs[j]);
  321|  13.3k|  }
  322|       |
  323|  1.66k|  if(data->state.referer_alloc) {
  324|      0|    Curl_safefree(data->state.referer);
  325|      0|    data->state.referer_alloc = FALSE;
  326|      0|  }
  327|  1.66k|  data->state.referer = NULL;
  328|  1.66k|  if(data->state.url_alloc) {
  329|    628|    Curl_safefree(data->state.url);
  330|    628|    data->state.url_alloc = FALSE;
  331|    628|  }
  332|  1.66k|  data->state.url = NULL;
  333|       |
  334|  1.66k|  Curl_mime_cleanpart(&data->set.mimepost);
  335|  1.66k|}
Curl_close:
  363|  1.66k|{
  364|  1.66k|  struct Curl_multi *m;
  365|  1.66k|  struct Curl_easy *data;
  366|       |
  367|  1.66k|  if(!datap || !*datap)
  368|      0|    return CURLE_OK;
  369|       |
  370|  1.66k|  data = *datap;
  371|  1.66k|  *datap = NULL;
  372|       |
  373|  1.66k|  Curl_expire_clear(data); /* shut off timers */
  374|       |
  375|       |  /* Detach connection if any is left. This should not be normal, but can be
  376|       |     the case for example with CONNECT_ONLY + recv/send (test 556) */
  377|  1.66k|  Curl_detach_connnection(data);
  378|  1.66k|  m = data->multi;
  379|  1.66k|  if(m)
  380|       |    /* This handle is still part of a multi handle, take care of this first
  381|       |       and detach this handle from there. */
  382|      0|    curl_multi_remove_handle(data->multi, data);
  383|       |
  384|  1.66k|  if(data->multi_easy) {
  385|       |    /* when curl_easy_perform() is used, it creates its own multi handle to
  386|       |       use and this is the one */
  387|      0|    curl_multi_cleanup(data->multi_easy);
  388|      0|    data->multi_easy = NULL;
  389|      0|  }
  390|       |
  391|       |  /* Destroy the timeout list that is held in the easy handle. It is
  392|       |     /normally/ done by curl_multi_remove_handle() but this is "just in
  393|       |     case" */
  394|  1.66k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  395|       |
  396|  1.66k|  data->magic = 0; /* force a clear AFTER the possibly enforced removal from
  397|       |                      the multi handle, since that function uses the magic
  398|       |                      field! */
  399|       |
  400|  1.66k|  if(data->state.rangestringalloc)
  401|      1|    free(data->state.range);
  402|       |
  403|       |  /* freed here just in case DONE wasn't called */
  404|  1.66k|  Curl_free_request_state(data);
  405|       |
  406|       |  /* Close down all open SSL info and sessions */
  407|  1.66k|  Curl_ssl_close_all(data);
  408|  1.66k|  Curl_safefree(data->state.first_host);
  409|  1.66k|  Curl_safefree(data->state.scratch);
  410|  1.66k|  Curl_ssl_free_certinfo(data);
  411|       |
  412|       |  /* Cleanup possible redirect junk */
  413|  1.66k|  free(data->req.newurl);
  414|  1.66k|  data->req.newurl = NULL;
  415|       |
  416|  1.66k|  if(data->state.referer_alloc) {
  417|      0|    Curl_safefree(data->state.referer);
  418|      0|    data->state.referer_alloc = FALSE;
  419|      0|  }
  420|  1.66k|  data->state.referer = NULL;
  421|       |
  422|  1.66k|  up_free(data);
  423|  1.66k|  Curl_safefree(data->state.buffer);
  424|  1.66k|  Curl_dyn_free(&data->state.headerb);
  425|  1.66k|  Curl_safefree(data->state.ulbuf);
  426|  1.66k|  Curl_flush_cookies(data, TRUE);
  427|  1.66k|  Curl_altsvc_save(data, data->asi, data->set.str[STRING_ALTSVC]);
  428|  1.66k|  Curl_altsvc_cleanup(&data->asi);
  429|  1.66k|  Curl_hsts_save(data, data->hsts, data->set.str[STRING_HSTS]);
  430|  1.66k|  Curl_hsts_cleanup(&data->hsts);
  431|  1.66k|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_CRYPTO_AUTH)
  432|  1.66k|  Curl_http_auth_cleanup_digest(data);
  433|  1.66k|#endif
  434|  1.66k|  Curl_safefree(data->info.contenttype);
  435|  1.66k|  Curl_safefree(data->info.wouldredirect);
  436|       |
  437|       |  /* this destroys the channel and we cannot use it anymore after this */
  438|  1.66k|  Curl_resolver_cleanup(data->state.async.resolver);
  439|       |
  440|  1.66k|  Curl_http2_cleanup_dependencies(data);
  441|  1.66k|  Curl_convert_close(data);
  442|       |
  443|       |  /* No longer a dirty share, if it exists */
  444|  1.66k|  if(data->share) {
  445|      0|    Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
  446|      0|    data->share->dirty--;
  447|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
  448|      0|  }
  449|       |
  450|  1.66k|  Curl_safefree(data->state.aptr.proxyuserpwd);
  451|  1.66k|  Curl_safefree(data->state.aptr.uagent);
  452|  1.66k|  Curl_safefree(data->state.aptr.userpwd);
  453|  1.66k|  Curl_safefree(data->state.aptr.accept_encoding);
  454|  1.66k|  Curl_safefree(data->state.aptr.te);
  455|  1.66k|  Curl_safefree(data->state.aptr.rangeline);
  456|  1.66k|  Curl_safefree(data->state.aptr.ref);
  457|  1.66k|  Curl_safefree(data->state.aptr.host);
  458|  1.66k|  Curl_safefree(data->state.aptr.cookiehost);
  459|  1.66k|  Curl_safefree(data->state.aptr.rtsp_transport);
  460|  1.66k|  Curl_safefree(data->state.aptr.user);
  461|  1.66k|  Curl_safefree(data->state.aptr.passwd);
  462|  1.66k|  Curl_safefree(data->state.aptr.proxyuser);
  463|  1.66k|  Curl_safefree(data->state.aptr.proxypasswd);
  464|       |
  465|  1.66k|#ifndef CURL_DISABLE_DOH
  466|  1.66k|  if(data->req.doh) {
  467|      0|    Curl_dyn_free(&data->req.doh->probe[0].serverdoh);
  468|      0|    Curl_dyn_free(&data->req.doh->probe[1].serverdoh);
  469|      0|    curl_slist_free_all(data->req.doh->headers);
  470|      0|    Curl_safefree(data->req.doh);
  471|      0|  }
  472|  1.66k|#endif
  473|       |
  474|       |  /* destruct wildcard structures if it is needed */
  475|  1.66k|  Curl_wildcard_dtor(&data->wildcard);
  476|  1.66k|  Curl_freeset(data);
  477|  1.66k|  free(data);
  478|  1.66k|  return CURLE_OK;
  479|  1.66k|}
Curl_init_userdefined:
  486|  1.66k|{
  487|  1.66k|  struct UserDefined *set = &data->set;
  488|  1.66k|  CURLcode result = CURLE_OK;
  489|       |
  490|  1.66k|  set->out = stdout; /* default output to stdout */
  491|  1.66k|  set->in_set = stdin;  /* default input from stdin */
  492|  1.66k|  set->err  = stderr;  /* default stderr to stderr */
  493|       |
  494|       |  /* use fwrite as default function to store output */
  495|  1.66k|  set->fwrite_func = (curl_write_callback)fwrite;
  496|       |
  497|       |  /* use fread as default function to read input */
  498|  1.66k|  set->fread_func_set = (curl_read_callback)fread;
  499|  1.66k|  set->is_fread_set = 0;
  500|  1.66k|  set->is_fwrite_set = 0;
  501|       |
  502|  1.66k|  set->seek_func = ZERO_NULL;
  503|  1.66k|  set->seek_client = ZERO_NULL;
  504|       |
  505|       |  /* conversion callbacks for non-ASCII hosts */
  506|  1.66k|  set->convfromnetwork = ZERO_NULL;
  507|  1.66k|  set->convtonetwork   = ZERO_NULL;
  508|  1.66k|  set->convfromutf8    = ZERO_NULL;
  509|       |
  510|  1.66k|  set->filesize = -1;        /* we don't know the size */
  511|  1.66k|  set->postfieldsize = -1;   /* unknown size */
  512|  1.66k|  set->maxredirs = -1;       /* allow any amount by default */
  513|       |
  514|  1.66k|  set->method = HTTPREQ_GET; /* Default HTTP request */
  515|  1.66k|  set->rtspreq = RTSPREQ_OPTIONS; /* Default RTSP request */
  516|  1.66k|#ifndef CURL_DISABLE_FTP
  517|  1.66k|  set->ftp_use_epsv = TRUE;   /* FTP defaults to EPSV operations */
  518|  1.66k|  set->ftp_use_eprt = TRUE;   /* FTP defaults to EPRT operations */
  519|  1.66k|  set->ftp_use_pret = FALSE;  /* mainly useful for drftpd servers */
  520|  1.66k|  set->ftp_filemethod = FTPFILE_MULTICWD;
  521|  1.66k|  set->ftp_skip_ip = TRUE;    /* skip PASV IP by default */
  522|  1.66k|#endif
  523|  1.66k|  set->dns_cache_timeout = 60; /* Timeout every 60 seconds by default */
  524|       |
  525|       |  /* Set the default size of the SSL session ID cache */
  526|  1.66k|  set->general_ssl.max_ssl_sessions = 5;
  527|       |
  528|  1.66k|  set->proxyport = 0;
  529|  1.66k|  set->proxytype = CURLPROXY_HTTP; /* defaults to HTTP proxy */
  530|  1.66k|  set->httpauth = CURLAUTH_BASIC;  /* defaults to basic */
  531|  1.66k|  set->proxyauth = CURLAUTH_BASIC; /* defaults to basic */
  532|       |
  533|       |  /* SOCKS5 proxy auth defaults to username/password + GSS-API */
  534|  1.66k|  set->socks5auth = CURLAUTH_BASIC | CURLAUTH_GSSAPI;
  535|       |
  536|       |  /* make libcurl quiet by default: */
  537|  1.66k|  set->hide_progress = TRUE;  /* CURLOPT_NOPROGRESS changes these */
  538|       |
  539|  1.66k|  Curl_mime_initpart(&set->mimepost, data);
  540|       |
  541|       |  /*
  542|       |   * libcurl 7.10 introduced SSL verification *by default*! This needs to be
  543|       |   * switched off unless wanted.
  544|       |   */
  545|  1.66k|  set->doh_verifyhost = TRUE;
  546|  1.66k|  set->doh_verifypeer = TRUE;
  547|  1.66k|  set->ssl.primary.verifypeer = TRUE;
  548|  1.66k|  set->ssl.primary.verifyhost = TRUE;
  549|  1.66k|#ifdef USE_TLS_SRP
  550|  1.66k|  set->ssl.authtype = CURL_TLSAUTH_NONE;
  551|  1.66k|#endif
  552|  1.66k|  set->ssh_auth_types = CURLSSH_AUTH_DEFAULT; /* defaults to any auth
  553|       |                                                      type */
  554|  1.66k|  set->ssl.primary.sessionid = TRUE; /* session ID caching enabled by
  555|       |                                        default */
  556|  1.66k|#ifndef CURL_DISABLE_PROXY
  557|  1.66k|  set->proxy_ssl = set->ssl;
  558|  1.66k|#endif
  559|       |
  560|  1.66k|  set->new_file_perms = 0644;    /* Default permissions */
  561|  1.66k|  set->new_directory_perms = 0755; /* Default permissions */
  562|       |
  563|       |  /* for the *protocols fields we don't use the CURLPROTO_ALL convenience
  564|       |     define since we internally only use the lower 16 bits for the passed
  565|       |     in bitmask to not conflict with the private bits */
  566|  1.66k|  set->allowed_protocols = CURLPROTO_ALL;
  567|  1.66k|  set->redir_protocols = CURLPROTO_HTTP | CURLPROTO_HTTPS | CURLPROTO_FTP |
  568|  1.66k|                         CURLPROTO_FTPS;
  569|       |
  570|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
  571|       |  /*
  572|       |   * disallow unprotected protection negotiation NEC reference implementation
  573|       |   * seem not to follow rfc1961 section 4.3/4.4
  574|       |   */
  575|       |  set->socks5_gssapi_nec = FALSE;
  576|       |#endif
  577|       |
  578|       |  /* Set the default CA cert bundle/path detected/specified at build time.
  579|       |   *
  580|       |   * If Schannel is the selected SSL backend then these locations are
  581|       |   * ignored. We allow setting CA location for schannel only when explicitly
  582|       |   * specified by the user via CURLOPT_CAINFO / --cacert.
  583|       |   */
  584|  1.66k|  if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL) {
  585|  1.66k|#if defined(CURL_CA_BUNDLE)
  586|  1.66k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
  587|  1.66k|    if(result)
  588|      0|      return result;
  589|       |
  590|  1.66k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
  591|  1.66k|                            CURL_CA_BUNDLE);
  592|  1.66k|    if(result)
  593|      0|      return result;
  594|  1.66k|#endif
  595|       |#if defined(CURL_CA_PATH)
  596|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
  597|       |    if(result)
  598|       |      return result;
  599|       |
  600|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
  601|       |    if(result)
  602|       |      return result;
  603|       |#endif
  604|  1.66k|  }
  605|       |
  606|  1.66k|  set->wildcard_enabled = FALSE;
  607|  1.66k|  set->chunk_bgn      = ZERO_NULL;
  608|  1.66k|  set->chunk_end      = ZERO_NULL;
  609|  1.66k|  set->tcp_keepalive = FALSE;
  610|  1.66k|  set->tcp_keepintvl = 60;
  611|  1.66k|  set->tcp_keepidle = 60;
  612|  1.66k|  set->tcp_fastopen = FALSE;
  613|  1.66k|  set->tcp_nodelay = TRUE;
  614|  1.66k|  set->ssl_enable_npn = TRUE;
  615|  1.66k|  set->ssl_enable_alpn = TRUE;
  616|  1.66k|  set->expect_100_timeout = 1000L; /* Wait for a second by default. */
  617|  1.66k|  set->sep_headers = TRUE; /* separated header lists by default */
  618|  1.66k|  set->buffer_size = READBUFFER_SIZE;
  619|  1.66k|  set->upload_buffer_size = UPLOADBUFFER_DEFAULT;
  620|  1.66k|  set->happy_eyeballs_timeout = CURL_HET_DEFAULT;
  621|  1.66k|  set->fnmatch = ZERO_NULL;
  622|  1.66k|  set->upkeep_interval_ms = CURL_UPKEEP_INTERVAL_DEFAULT;
  623|  1.66k|  set->maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */
  624|  1.66k|  set->maxage_conn = 118;
  625|  1.66k|  set->maxlifetime_conn = 0;
  626|  1.66k|  set->http09_allowed = FALSE;
  627|  1.66k|  set->httpwant =
  628|  1.66k|#ifdef USE_NGHTTP2
  629|  1.66k|    CURL_HTTP_VERSION_2TLS
  630|       |#else
  631|       |    CURL_HTTP_VERSION_1_1
  632|       |#endif
  633|  1.66k|    ;
  634|  1.66k|  Curl_http2_init_userset(set);
  635|  1.66k|  return result;
  636|  1.66k|}
Curl_open:
  647|  1.66k|{
  648|  1.66k|  CURLcode result;
  649|  1.66k|  struct Curl_easy *data;
  650|       |
  651|       |  /* Very simple start-up: alloc the struct, init it with zeroes and return */
  652|  1.66k|  data = calloc(1, sizeof(struct Curl_easy));
  653|  1.66k|  if(!data) {
  654|       |    /* this is a very serious error */
  655|      0|    DEBUGF(fprintf(stderr, "Error: calloc of Curl_easy failed\n"));
  656|      0|    return CURLE_OUT_OF_MEMORY;
  657|      0|  }
  658|       |
  659|  1.66k|  data->magic = CURLEASY_MAGIC_NUMBER;
  660|       |
  661|  1.66k|  result = Curl_resolver_init(data, &data->state.async.resolver);
  662|  1.66k|  if(result) {
  663|      0|    DEBUGF(fprintf(stderr, "Error: resolver_init failed\n"));
  664|      0|    free(data);
  665|      0|    return result;
  666|      0|  }
  667|       |
  668|  1.66k|  result = Curl_init_userdefined(data);
  669|  1.66k|  if(!result) {
  670|  1.66k|    Curl_dyn_init(&data->state.headerb, CURL_MAX_HTTP_HEADER);
  671|  1.66k|    Curl_convert_init(data);
  672|  1.66k|    Curl_initinfo(data);
  673|       |
  674|       |    /* most recent connection is not yet defined */
  675|  1.66k|    data->state.lastconnect_id = -1;
  676|       |
  677|  1.66k|    data->progress.flags |= PGRS_HIDE;
  678|  1.66k|    data->state.current_speed = -1; /* init to negative == impossible */
  679|  1.66k|  }
  680|       |
  681|  1.66k|  if(result) {
  682|      0|    Curl_resolver_cleanup(data->state.async.resolver);
  683|      0|    Curl_dyn_free(&data->state.headerb);
  684|      0|    Curl_freeset(data);
  685|      0|    free(data);
  686|      0|    data = NULL;
  687|      0|  }
  688|  1.66k|  else
  689|  1.66k|    *curl = data;
  690|       |
  691|  1.66k|  return result;
  692|  1.66k|}
Curl_disconnect:
  826|    688|{
  827|       |  /* there must be a connection to close */
  828|    688|  DEBUGASSERT(conn);
  829|       |
  830|       |  /* it must be removed from the connection cache */
  831|    688|  DEBUGASSERT(!conn->bundle);
  832|       |
  833|       |  /* there must be an associated transfer */
  834|    688|  DEBUGASSERT(data);
  835|       |
  836|       |  /* the transfer must be detached from the connection */
  837|    688|  DEBUGASSERT(!data->conn);
  838|       |
  839|       |  /*
  840|       |   * If this connection isn't marked to force-close, leave it open if there
  841|       |   * are other users of it
  842|       |   */
  843|    688|  if(CONN_INUSE(conn) && !dead_connection) {
  844|      0|    DEBUGF(infof(data, "Curl_disconnect when inuse: %zu", CONN_INUSE(conn)));
  845|      0|    return CURLE_OK;
  846|      0|  }
  847|       |
  848|    688|  if(conn->dns_entry != NULL) {
  849|      0|    Curl_resolv_unlock(data, conn->dns_entry);
  850|      0|    conn->dns_entry = NULL;
  851|      0|  }
  852|       |
  853|       |  /* Cleanup NTLM connection-related data */
  854|    688|  Curl_http_auth_cleanup_ntlm(conn);
  855|       |
  856|       |  /* Cleanup NEGOTIATE connection-related data */
  857|    688|  Curl_http_auth_cleanup_negotiate(conn);
  858|       |
  859|    688|  if(conn->bits.connect_only)
  860|       |    /* treat the connection as dead in CONNECT_ONLY situations */
  861|      0|    dead_connection = TRUE;
  862|       |
  863|       |  /* temporarily attach the connection to this transfer handle for the
  864|       |     disconnect and shutdown */
  865|    688|  Curl_attach_connnection(data, conn);
  866|       |
  867|    688|  if(conn->handler->disconnect)
  868|       |    /* This is set if protocol-specific cleanups should be made */
  869|    526|    conn->handler->disconnect(data, conn, dead_connection);
  870|       |
  871|    688|  conn_shutdown(data, conn);
  872|       |
  873|       |  /* detach it again */
  874|    688|  Curl_detach_connnection(data);
  875|       |
  876|    688|  conn_free(conn);
  877|    688|  return CURLE_OK;
  878|    688|}
Curl_verboseconnect:
 1538|    524|{
 1539|    524|  if(data->set.verbose)
 1540|      0|    infof(data, "Connected to %s (%s) port %u (#%ld)",
 1541|      0|#ifndef CURL_DISABLE_PROXY
 1542|      0|          conn->bits.socksproxy ? conn->socks_proxy.host.dispname :
 1543|      0|          conn->bits.httpproxy ? conn->http_proxy.host.dispname :
 1544|      0|#endif
 1545|      0|          conn->bits.conn_to_host ? conn->conn_to_host.dispname :
 1546|      0|          conn->host.dispname,
 1547|      0|          conn->primary_ip, conn->port, conn->connection_id);
 1548|    524|}
Curl_is_ASCII_name:
 1555|  1.04k|{
 1556|       |  /* get an UNSIGNED local version of the pointer */
 1557|  1.04k|  const unsigned char *ch = (const unsigned char *)hostname;
 1558|       |
 1559|  1.04k|  if(!hostname) /* bad input, consider it ASCII! */
 1560|      0|    return TRUE;
 1561|       |
 1562|  9.82k|  while(*ch) {
 1563|  8.84k|    if(*ch++ & 0x80)
 1564|     72|      return FALSE;
 1565|  8.84k|  }
 1566|    976|  return TRUE;
 1567|  1.04k|}
Curl_idnconvert_hostname:
 1588|  1.04k|{
 1589|  1.04k|#ifndef USE_LIBIDN2
 1590|  1.04k|  (void)data;
 1591|  1.04k|  (void)data;
 1592|       |#elif defined(CURL_DISABLE_VERBOSE_STRINGS)
 1593|       |  (void)data;
 1594|       |#endif
 1595|       |
 1596|       |  /* set the name we use to display the host name */
 1597|  1.04k|  host->dispname = host->name;
 1598|       |
 1599|       |  /* Check name for non-ASCII and convert hostname to ACE form if we can */
 1600|  1.04k|  if(!Curl_is_ASCII_name(host->name)) {
 1601|       |#ifdef USE_LIBIDN2
 1602|       |    if(idn2_check_version(IDN2_VERSION)) {
 1603|       |      char *ace_hostname = NULL;
 1604|       |#if IDN2_VERSION_NUMBER >= 0x00140000
 1605|       |      /* IDN2_NFC_INPUT: Normalize input string using normalization form C.
 1606|       |         IDN2_NONTRANSITIONAL: Perform Unicode TR46 non-transitional
 1607|       |         processing. */
 1608|       |      int flags = IDN2_NFC_INPUT | IDN2_NONTRANSITIONAL;
 1609|       |#else
 1610|       |      int flags = IDN2_NFC_INPUT;
 1611|       |#endif
 1612|       |      int rc = IDN2_LOOKUP(host->name, &ace_hostname, flags);
 1613|       |      if(rc != IDN2_OK)
 1614|       |        /* fallback to TR46 Transitional mode for better IDNA2003
 1615|       |           compatibility */
 1616|       |        rc = IDN2_LOOKUP(host->name, &ace_hostname,
 1617|       |                         IDN2_TRANSITIONAL);
 1618|       |      if(rc == IDN2_OK) {
 1619|       |        host->encalloc = (char *)ace_hostname;
 1620|       |        /* change the name pointer to point to the encoded hostname */
 1621|       |        host->name = host->encalloc;
 1622|       |      }
 1623|       |      else {
 1624|       |        failf(data, "Failed to convert %s to ACE; %s", host->name,
 1625|       |              idn2_strerror(rc));
 1626|       |        return CURLE_URL_MALFORMAT;
 1627|       |      }
 1628|       |    }
 1629|       |#elif defined(USE_WIN32_IDN)
 1630|       |    char *ace_hostname = NULL;
 1631|       |
 1632|       |    if(curl_win32_idn_to_ascii(host->name, &ace_hostname)) {
 1633|       |      host->encalloc = ace_hostname;
 1634|       |      /* change the name pointer to point to the encoded hostname */
 1635|       |      host->name = host->encalloc;
 1636|       |    }
 1637|       |    else {
 1638|       |      char buffer[STRERROR_LEN];
 1639|       |      failf(data, "Failed to convert %s to ACE; %s", host->name,
 1640|       |            Curl_winapi_strerror(GetLastError(), buffer, sizeof(buffer)));
 1641|       |      return CURLE_URL_MALFORMAT;
 1642|       |    }
 1643|       |#else
 1644|     72|    infof(data, "IDN support not present, can't parse Unicode domains");
 1645|     72|#endif
 1646|     72|  }
 1647|  1.04k|  return CURLE_OK;
 1648|  1.04k|}
Curl_free_idnconverted_hostname:
 1654|  2.75k|{
 1655|       |#if defined(USE_LIBIDN2)
 1656|       |  if(host->encalloc) {
 1657|       |    idn2_free(host->encalloc); /* must be freed with idn2_free() since this was
 1658|       |                                 allocated by libidn */
 1659|       |    host->encalloc = NULL;
 1660|       |  }
 1661|       |#elif defined(USE_WIN32_IDN)
 1662|       |  free(host->encalloc); /* must be freed with free() since this was
 1663|       |                           allocated by curl_win32_idn_to_ascii */
 1664|       |  host->encalloc = NULL;
 1665|       |#else
 1666|  2.75k|  (void)host;
 1667|  2.75k|#endif
 1668|  2.75k|}
Curl_builtin_scheme:
 1816|  2.53k|{
 1817|  2.53k|  const struct Curl_handler * const *pp;
 1818|  2.53k|  const struct Curl_handler *p;
 1819|       |  /* Scan protocol handler table and match against 'scheme'. The handler may
 1820|       |     be changed later when the protocol specific setup function is called. */
 1821|  9.16k|  for(pp = protocols; (p = *pp) != NULL; pp++)
 1822|  9.08k|    if(strcasecompare(p->scheme, scheme))
 1823|       |      /* Protocol found in table. Check if allowed */
 1824|  2.45k|      return p;
 1825|     82|  return NULL; /* not found */
 1826|  2.53k|}
Curl_uc_to_curlcode:
 1864|     60|{
 1865|     60|  switch(uc) {
 1866|     60|  default:
 1867|     60|    return CURLE_URL_MALFORMAT;
 1868|      0|  case CURLUE_UNSUPPORTED_SCHEME:
 1869|      0|    return CURLE_UNSUPPORTED_PROTOCOL;
 1870|      0|  case CURLUE_OUT_OF_MEMORY:
 1871|      0|    return CURLE_OUT_OF_MEMORY;
 1872|      0|  case CURLUE_USER_NOT_ALLOWED:
 1873|      0|    return CURLE_LOGIN_DENIED;
 1874|     60|  }
 1875|     60|}
Curl_free_request_state:
 2204|  2.88k|{
 2205|  2.88k|  Curl_safefree(data->req.p.http);
 2206|  2.88k|  Curl_safefree(data->req.newurl);
 2207|       |
 2208|  2.88k|#ifndef CURL_DISABLE_DOH
 2209|  2.88k|  if(data->req.doh) {
 2210|      0|    Curl_close(&data->req.doh->probe[0].easy);
 2211|      0|    Curl_close(&data->req.doh->probe[1].easy);
 2212|      0|  }
 2213|  2.88k|#endif
 2214|  2.88k|}
Curl_parse_login_details:
 2777|    203|{
 2778|    203|  CURLcode result = CURLE_OK;
 2779|    203|  char *ubuf = NULL;
 2780|    203|  char *pbuf = NULL;
 2781|    203|  char *obuf = NULL;
 2782|    203|  const char *psep = NULL;
 2783|    203|  const char *osep = NULL;
 2784|    203|  size_t ulen;
 2785|    203|  size_t plen;
 2786|    203|  size_t olen;
 2787|       |
 2788|       |  /* the input length check is because this is called directly from setopt
 2789|       |     and isn't going through the regular string length check */
 2790|    203|  size_t llen = strlen(login);
 2791|    203|  if(llen > CURL_MAX_INPUT_LENGTH)
 2792|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 2793|       |
 2794|       |  /* Attempt to find the password separator */
 2795|    203|  if(passwdp) {
 2796|    203|    psep = strchr(login, ':');
 2797|       |
 2798|       |    /* Within the constraint of the login string */
 2799|    203|    if(psep >= login + len)
 2800|      1|      psep = NULL;
 2801|    203|  }
 2802|       |
 2803|       |  /* Attempt to find the options separator */
 2804|    203|  if(optionsp) {
 2805|      0|    osep = strchr(login, ';');
 2806|       |
 2807|       |    /* Within the constraint of the login string */
 2808|      0|    if(osep >= login + len)
 2809|      0|      osep = NULL;
 2810|      0|  }
 2811|       |
 2812|       |  /* Calculate the portion lengths */
 2813|    203|  ulen = (psep ?
 2814|     18|          (size_t)(osep && psep > osep ? osep - login : psep - login) :
 2815|    203|          (osep ? (size_t)(osep - login) : len));
 2816|    203|  plen = (psep ?
 2817|     18|          (osep && osep > psep ? (size_t)(osep - psep) :
 2818|    185|                                 (size_t)(login + len - psep)) - 1 : 0);
 2819|    203|  olen = (osep ?
 2820|      0|          (psep && psep > osep ? (size_t)(psep - osep) :
 2821|    203|                                 (size_t)(login + len - osep)) - 1 : 0);
 2822|       |
 2823|       |  /* Allocate the user portion buffer */
 2824|    203|  if(userp && ulen) {
 2825|    198|    ubuf = malloc(ulen + 1);
 2826|    198|    if(!ubuf)
 2827|      0|      result = CURLE_OUT_OF_MEMORY;
 2828|    198|  }
 2829|       |
 2830|       |  /* Allocate the password portion buffer */
 2831|    203|  if(!result && passwdp && plen) {
 2832|     14|    pbuf = malloc(plen + 1);
 2833|     14|    if(!pbuf) {
 2834|      0|      free(ubuf);
 2835|      0|      result = CURLE_OUT_OF_MEMORY;
 2836|      0|    }
 2837|     14|  }
 2838|       |
 2839|       |  /* Allocate the options portion buffer */
 2840|    203|  if(!result && optionsp && olen) {
 2841|      0|    obuf = malloc(olen + 1);
 2842|      0|    if(!obuf) {
 2843|      0|      free(pbuf);
 2844|      0|      free(ubuf);
 2845|      0|      result = CURLE_OUT_OF_MEMORY;
 2846|      0|    }
 2847|      0|  }
 2848|       |
 2849|    203|  if(!result) {
 2850|       |    /* Store the user portion if necessary */
 2851|    203|    if(ubuf) {
 2852|    198|      memcpy(ubuf, login, ulen);
 2853|    198|      ubuf[ulen] = '\0';
 2854|    198|      Curl_safefree(*userp);
 2855|    198|      *userp = ubuf;
 2856|    198|    }
 2857|       |
 2858|       |    /* Store the password portion if necessary */
 2859|    203|    if(pbuf) {
 2860|     14|      memcpy(pbuf, psep + 1, plen);
 2861|     14|      pbuf[plen] = '\0';
 2862|     14|      Curl_safefree(*passwdp);
 2863|     14|      *passwdp = pbuf;
 2864|     14|    }
 2865|       |
 2866|       |    /* Store the options portion if necessary */
 2867|    203|    if(obuf) {
 2868|      0|      memcpy(obuf, osep + 1, olen);
 2869|      0|      obuf[olen] = '\0';
 2870|      0|      Curl_safefree(*optionsp);
 2871|      0|      *optionsp = obuf;
 2872|      0|    }
 2873|    203|  }
 2874|       |
 2875|    203|  return result;
 2876|    203|}
Curl_setup_conn:
 4055|    524|{
 4056|    524|  CURLcode result = CURLE_OK;
 4057|    524|  struct connectdata *conn = data->conn;
 4058|       |
 4059|    524|  Curl_pgrsTime(data, TIMER_NAMELOOKUP);
 4060|       |
 4061|    524|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 4062|       |    /* nothing to setup when not using a network */
 4063|      0|    *protocol_done = TRUE;
 4064|      0|    return result;
 4065|      0|  }
 4066|    524|  *protocol_done = FALSE; /* default to not done */
 4067|       |
 4068|    524|#ifndef CURL_DISABLE_PROXY
 4069|       |  /* set proxy_connect_closed to false unconditionally already here since it
 4070|       |     is used strictly to provide extra information to a parent function in the
 4071|       |     case of proxy CONNECT failures and we must make sure we don't have it
 4072|       |     lingering set from a previous invoke */
 4073|    524|  conn->bits.proxy_connect_closed = FALSE;
 4074|    524|#endif
 4075|       |
 4076|    524|#ifdef CURL_DO_LINEEND_CONV
 4077|    524|  data->state.crlf_conversions = 0; /* reset CRLF conversion counter */
 4078|    524|#endif /* CURL_DO_LINEEND_CONV */
 4079|       |
 4080|       |  /* set start time here for timeout purposes in the connect procedure, it
 4081|       |     is later set again for the progress meter purpose */
 4082|    524|  conn->now = Curl_now();
 4083|       |
 4084|    524|  if(CURL_SOCKET_BAD == conn->sock[FIRSTSOCKET]) {
 4085|    524|    conn->bits.tcpconnect[FIRSTSOCKET] = FALSE;
 4086|    524|    result = Curl_connecthost(data, conn, conn->dns_entry);
 4087|    524|    if(result)
 4088|      0|      return result;
 4089|    524|  }
 4090|      0|  else {
 4091|      0|    Curl_pgrsTime(data, TIMER_CONNECT);    /* we're connected already */
 4092|      0|    if(conn->ssl[FIRSTSOCKET].use ||
 4093|      0|       (conn->handler->protocol & PROTO_FAMILY_SSH))
 4094|      0|      Curl_pgrsTime(data, TIMER_APPCONNECT); /* we're connected already */
 4095|      0|    conn->bits.tcpconnect[FIRSTSOCKET] = TRUE;
 4096|      0|    *protocol_done = TRUE;
 4097|      0|    Curl_updateconninfo(data, conn, conn->sock[FIRSTSOCKET]);
 4098|      0|    Curl_verboseconnect(data, conn);
 4099|      0|  }
 4100|       |
 4101|    524|  conn->now = Curl_now(); /* time this *after* the connect is done, we set
 4102|       |                             this here perhaps a second time */
 4103|    524|  return result;
 4104|    524|}
Curl_connect:
 4109|    688|{
 4110|    688|  CURLcode result;
 4111|    688|  struct connectdata *conn;
 4112|       |
 4113|    688|  *asyncp = FALSE; /* assume synchronous resolves by default */
 4114|       |
 4115|       |  /* init the single-transfer specific data */
 4116|    688|  Curl_free_request_state(data);
 4117|    688|  memset(&data->req, 0, sizeof(struct SingleRequest));
 4118|    688|  data->req.size = data->req.maxdownload = -1;
 4119|       |
 4120|       |  /* call the stuff that needs to be called */
 4121|    688|  result = create_conn(data, &conn, asyncp);
 4122|       |
 4123|    688|  if(!result) {
 4124|    524|    if(CONN_INUSE(conn) > 1)
 4125|       |      /* multiplexed */
 4126|      0|      *protocol_done = TRUE;
 4127|    524|    else if(!*asyncp) {
 4128|       |      /* DNS resolution is done: that's either because this is a reused
 4129|       |         connection, in which case DNS was unnecessary, or because DNS
 4130|       |         really did finish already (synch resolver/fast async resolve) */
 4131|    524|      result = Curl_setup_conn(data, protocol_done);
 4132|    524|    }
 4133|    524|  }
 4134|       |
 4135|    688|  if(result == CURLE_NO_CONNECTION_AVAILABLE) {
 4136|      0|    return result;
 4137|      0|  }
 4138|    688|  else if(result && conn) {
 4139|       |    /* We're not allowed to return failure with memory left allocated in the
 4140|       |       connectdata struct, free those here */
 4141|    164|    Curl_detach_connnection(data);
 4142|    164|    Curl_conncache_remove_conn(data, conn, TRUE);
 4143|    164|    Curl_disconnect(data, conn, TRUE);
 4144|    164|  }
 4145|       |
 4146|    688|  return result;
 4147|    688|}
Curl_init_do:
 4160|    524|{
 4161|    524|  struct SingleRequest *k = &data->req;
 4162|       |
 4163|       |  /* if this is a pushed stream, we need this: */
 4164|    524|  CURLcode result = Curl_preconnect(data);
 4165|    524|  if(result)
 4166|      0|    return result;
 4167|       |
 4168|    524|  if(conn) {
 4169|    524|    conn->bits.do_more = FALSE; /* by default there's no curl_do_more() to
 4170|       |                                   use */
 4171|       |    /* if the protocol used doesn't support wildcards, switch it off */
 4172|    524|    if(data->state.wildcardmatch &&
 4173|    524|       !(conn->handler->flags & PROTOPT_WILDCARD))
 4174|      0|      data->state.wildcardmatch = FALSE;
 4175|    524|  }
 4176|       |
 4177|    524|  data->state.done = FALSE; /* *_done() is not called yet */
 4178|    524|  data->state.expect100header = FALSE;
 4179|       |
 4180|    524|  if(data->set.opt_no_body)
 4181|       |    /* in HTTP lingo, no body means using the HEAD request... */
 4182|      8|    data->state.httpreq = HTTPREQ_HEAD;
 4183|       |
 4184|    524|  k->start = Curl_now(); /* start time */
 4185|    524|  k->now = k->start;   /* current time is now */
 4186|    524|  k->header = TRUE; /* assume header */
 4187|    524|  k->bytecount = 0;
 4188|    524|  k->ignorebody = FALSE;
 4189|       |
 4190|    524|  Curl_speedinit(data);
 4191|    524|  Curl_pgrsSetUploadCounter(data, 0);
 4192|    524|  Curl_pgrsSetDownloadCounter(data, 0);
 4193|       |
 4194|    524|  return CURLE_OK;
 4195|    524|}
url.c:up_free:
  339|  2.35k|{
  340|  2.35k|  struct urlpieces *up = &data->state.up;
  341|  2.35k|  Curl_safefree(up->scheme);
  342|  2.35k|  Curl_safefree(up->hostname);
  343|  2.35k|  Curl_safefree(up->port);
  344|  2.35k|  Curl_safefree(up->user);
  345|  2.35k|  Curl_safefree(up->password);
  346|  2.35k|  Curl_safefree(up->options);
  347|  2.35k|  Curl_safefree(up->path);
  348|  2.35k|  Curl_safefree(up->query);
  349|  2.35k|  curl_url_cleanup(data->state.uh);
  350|  2.35k|  data->state.uh = NULL;
  351|  2.35k|}
url.c:conn_shutdown:
  734|    688|{
  735|    688|  DEBUGASSERT(conn);
  736|    688|  DEBUGASSERT(data);
  737|    688|  infof(data, "Closing connection %ld", conn->connection_id);
  738|       |
  739|    688|#ifndef USE_HYPER
  740|    688|  if(conn->connect_state && conn->connect_state->prot_save) {
  741|       |    /* If this was closed with a CONNECT in progress, cleanup this temporary
  742|       |       struct arrangement */
  743|      0|    data->req.p.http = NULL;
  744|      0|    Curl_safefree(conn->connect_state->prot_save);
  745|      0|  }
  746|    688|#endif
  747|       |
  748|       |  /* possible left-overs from the async name resolvers */
  749|    688|  Curl_resolver_cancel(data);
  750|       |
  751|       |  /* close the SSL stuff before we close any sockets since they will/may
  752|       |     write to the sockets */
  753|    688|  Curl_ssl_close(data, conn, FIRSTSOCKET);
  754|    688|  Curl_ssl_close(data, conn, SECONDARYSOCKET);
  755|       |
  756|       |  /* close possibly still open sockets */
  757|    688|  if(CURL_SOCKET_BAD != conn->sock[SECONDARYSOCKET])
  758|      0|    Curl_closesocket(data, conn, conn->sock[SECONDARYSOCKET]);
  759|    688|  if(CURL_SOCKET_BAD != conn->sock[FIRSTSOCKET])
  760|    524|    Curl_closesocket(data, conn, conn->sock[FIRSTSOCKET]);
  761|    688|  if(CURL_SOCKET_BAD != conn->tempsock[0])
  762|      0|    Curl_closesocket(data, conn, conn->tempsock[0]);
  763|    688|  if(CURL_SOCKET_BAD != conn->tempsock[1])
  764|      0|    Curl_closesocket(data, conn, conn->tempsock[1]);
  765|    688|}
url.c:conn_free:
  768|    688|{
  769|    688|  DEBUGASSERT(conn);
  770|       |
  771|    688|  Curl_free_idnconverted_hostname(&conn->host);
  772|    688|  Curl_free_idnconverted_hostname(&conn->conn_to_host);
  773|    688|#ifndef CURL_DISABLE_PROXY
  774|    688|  Curl_free_idnconverted_hostname(&conn->http_proxy.host);
  775|    688|  Curl_free_idnconverted_hostname(&conn->socks_proxy.host);
  776|    688|  Curl_safefree(conn->http_proxy.user);
  777|    688|  Curl_safefree(conn->socks_proxy.user);
  778|    688|  Curl_safefree(conn->http_proxy.passwd);
  779|    688|  Curl_safefree(conn->socks_proxy.passwd);
  780|    688|  Curl_safefree(conn->http_proxy.host.rawalloc); /* http proxy name buffer */
  781|    688|  Curl_safefree(conn->socks_proxy.host.rawalloc); /* socks proxy name buffer */
  782|    688|  Curl_free_primary_ssl_config(&conn->proxy_ssl_config);
  783|    688|#endif
  784|    688|  Curl_safefree(conn->user);
  785|    688|  Curl_safefree(conn->passwd);
  786|    688|  Curl_safefree(conn->sasl_authzid);
  787|    688|  Curl_safefree(conn->options);
  788|    688|  Curl_dyn_free(&conn->trailer);
  789|    688|  Curl_safefree(conn->host.rawalloc); /* host name buffer */
  790|    688|  Curl_safefree(conn->conn_to_host.rawalloc); /* host name buffer */
  791|    688|  Curl_safefree(conn->hostname_resolve);
  792|    688|  Curl_safefree(conn->secondaryhostname);
  793|    688|  Curl_safefree(conn->connect_state);
  794|       |
  795|    688|  conn_reset_all_postponed_data(conn);
  796|    688|  Curl_llist_destroy(&conn->easyq, NULL);
  797|    688|  Curl_safefree(conn->localdev);
  798|    688|  Curl_free_primary_ssl_config(&conn->ssl_config);
  799|       |
  800|    688|#ifdef USE_UNIX_SOCKETS
  801|    688|  Curl_safefree(conn->unix_domain_socket);
  802|    688|#endif
  803|       |
  804|    688|#ifdef USE_SSL
  805|    688|  Curl_safefree(conn->ssl_extra);
  806|    688|#endif
  807|    688|  free(conn); /* free all the connection oriented data */
  808|    688|}
url.c:create_conn:
 3571|    688|{
 3572|    688|  CURLcode result = CURLE_OK;
 3573|    688|  struct connectdata *conn;
 3574|    688|  struct connectdata *conn_temp = NULL;
 3575|    688|  bool reuse;
 3576|    688|  bool connections_available = TRUE;
 3577|    688|  bool force_reuse = FALSE;
 3578|    688|  bool waitpipe = FALSE;
 3579|    688|  size_t max_host_connections = Curl_multi_max_host_connections(data->multi);
 3580|    688|  size_t max_total_connections = Curl_multi_max_total_connections(data->multi);
 3581|       |
 3582|    688|  *async = FALSE;
 3583|    688|  *in_connect = NULL;
 3584|       |
 3585|       |  /*************************************************************
 3586|       |   * Check input data
 3587|       |   *************************************************************/
 3588|    688|  if(!data->state.url) {
 3589|      0|    result = CURLE_URL_MALFORMAT;
 3590|      0|    goto out;
 3591|      0|  }
 3592|       |
 3593|       |  /* First, split up the current URL in parts so that we can use the
 3594|       |     parts for checking against the already present connections. In order
 3595|       |     to not have to modify everything at once, we allocate a temporary
 3596|       |     connection data struct and fill in for comparison purposes. */
 3597|    688|  conn = allocate_conn(data);
 3598|       |
 3599|    688|  if(!conn) {
 3600|      0|    result = CURLE_OUT_OF_MEMORY;
 3601|      0|    goto out;
 3602|      0|  }
 3603|       |
 3604|       |  /* We must set the return variable as soon as possible, so that our
 3605|       |     parent can cleanup any possible allocs we may have done before
 3606|       |     any failure */
 3607|    688|  *in_connect = conn;
 3608|       |
 3609|    688|  result = parseurlandfillconn(data, conn);
 3610|    688|  if(result)
 3611|    164|    goto out;
 3612|       |
 3613|    524|  if(data->set.str[STRING_SASL_AUTHZID]) {
 3614|      0|    conn->sasl_authzid = strdup(data->set.str[STRING_SASL_AUTHZID]);
 3615|      0|    if(!conn->sasl_authzid) {
 3616|      0|      result = CURLE_OUT_OF_MEMORY;
 3617|      0|      goto out;
 3618|      0|    }
 3619|      0|  }
 3620|       |
 3621|    524|#ifdef USE_UNIX_SOCKETS
 3622|    524|  if(data->set.str[STRING_UNIX_SOCKET_PATH]) {
 3623|      0|    conn->unix_domain_socket = strdup(data->set.str[STRING_UNIX_SOCKET_PATH]);
 3624|      0|    if(!conn->unix_domain_socket) {
 3625|      0|      result = CURLE_OUT_OF_MEMORY;
 3626|      0|      goto out;
 3627|      0|    }
 3628|      0|    conn->bits.abstract_unix_socket = data->set.abstract_unix_socket;
 3629|      0|  }
 3630|    524|#endif
 3631|       |
 3632|       |  /* After the unix socket init but before the proxy vars are used, parse and
 3633|       |     initialize the proxy vars */
 3634|    524|#ifndef CURL_DISABLE_PROXY
 3635|    524|  result = create_conn_helper_init_proxy(data, conn);
 3636|    524|  if(result)
 3637|      0|    goto out;
 3638|       |
 3639|       |  /*************************************************************
 3640|       |   * If the protocol is using SSL and HTTP proxy is used, we set
 3641|       |   * the tunnel_proxy bit.
 3642|       |   *************************************************************/
 3643|    524|  if((conn->given->flags&PROTOPT_SSL) && conn->bits.httpproxy)
 3644|      0|    conn->bits.tunnel_proxy = TRUE;
 3645|    524|#endif
 3646|       |
 3647|       |  /*************************************************************
 3648|       |   * Figure out the remote port number and fix it in the URL
 3649|       |   *************************************************************/
 3650|    524|  result = parse_remote_port(data, conn);
 3651|    524|  if(result)
 3652|      0|    goto out;
 3653|       |
 3654|       |  /* Check for overridden login details and set them accordingly so that
 3655|       |     they are known when protocol->setup_connection is called! */
 3656|    524|  result = override_login(data, conn);
 3657|    524|  if(result)
 3658|      0|    goto out;
 3659|       |
 3660|    524|  result = set_login(conn); /* default credentials */
 3661|    524|  if(result)
 3662|      0|    goto out;
 3663|       |
 3664|       |  /*************************************************************
 3665|       |   * Process the "connect to" linked list of hostname/port mappings.
 3666|       |   * Do this after the remote port number has been fixed in the URL.
 3667|       |   *************************************************************/
 3668|    524|  result = parse_connect_to_slist(data, conn, data->set.connect_to);
 3669|    524|  if(result)
 3670|      0|    goto out;
 3671|       |
 3672|       |  /*************************************************************
 3673|       |   * IDN-convert the hostnames
 3674|       |   *************************************************************/
 3675|    524|  result = Curl_idnconvert_hostname(data, &conn->host);
 3676|    524|  if(result)
 3677|      0|    goto out;
 3678|    524|  if(conn->bits.conn_to_host) {
 3679|    524|    result = Curl_idnconvert_hostname(data, &conn->conn_to_host);
 3680|    524|    if(result)
 3681|      0|      goto out;
 3682|    524|  }
 3683|    524|#ifndef CURL_DISABLE_PROXY
 3684|    524|  if(conn->bits.httpproxy) {
 3685|      0|    result = Curl_idnconvert_hostname(data, &conn->http_proxy.host);
 3686|      0|    if(result)
 3687|      0|      goto out;
 3688|      0|  }
 3689|    524|  if(conn->bits.socksproxy) {
 3690|      0|    result = Curl_idnconvert_hostname(data, &conn->socks_proxy.host);
 3691|      0|    if(result)
 3692|      0|      goto out;
 3693|      0|  }
 3694|    524|#endif
 3695|       |
 3696|       |  /*************************************************************
 3697|       |   * Check whether the host and the "connect to host" are equal.
 3698|       |   * Do this after the hostnames have been IDN-converted.
 3699|       |   *************************************************************/
 3700|    524|  if(conn->bits.conn_to_host &&
 3701|    524|     strcasecompare(conn->conn_to_host.name, conn->host.name)) {
 3702|      0|    conn->bits.conn_to_host = FALSE;
 3703|      0|  }
 3704|       |
 3705|       |  /*************************************************************
 3706|       |   * Check whether the port and the "connect to port" are equal.
 3707|       |   * Do this after the remote port number has been fixed in the URL.
 3708|       |   *************************************************************/
 3709|    524|  if(conn->bits.conn_to_port && conn->conn_to_port == conn->remote_port) {
 3710|      0|    conn->bits.conn_to_port = FALSE;
 3711|      0|  }
 3712|       |
 3713|    524|#ifndef CURL_DISABLE_PROXY
 3714|       |  /*************************************************************
 3715|       |   * If the "connect to" feature is used with an HTTP proxy,
 3716|       |   * we set the tunnel_proxy bit.
 3717|       |   *************************************************************/
 3718|    524|  if((conn->bits.conn_to_host || conn->bits.conn_to_port) &&
 3719|    524|      conn->bits.httpproxy)
 3720|      0|    conn->bits.tunnel_proxy = TRUE;
 3721|    524|#endif
 3722|       |
 3723|       |  /*************************************************************
 3724|       |   * Setup internals depending on protocol. Needs to be done after
 3725|       |   * we figured out what/if proxy to use.
 3726|       |   *************************************************************/
 3727|    524|  result = setup_connection_internals(data, conn);
 3728|    524|  if(result)
 3729|      0|    goto out;
 3730|       |
 3731|    524|  conn->recv[FIRSTSOCKET] = Curl_recv_plain;
 3732|    524|  conn->send[FIRSTSOCKET] = Curl_send_plain;
 3733|    524|  conn->recv[SECONDARYSOCKET] = Curl_recv_plain;
 3734|    524|  conn->send[SECONDARYSOCKET] = Curl_send_plain;
 3735|       |
 3736|    524|  conn->bits.tcp_fastopen = data->set.tcp_fastopen;
 3737|       |
 3738|       |  /***********************************************************************
 3739|       |   * file: is a special case in that it doesn't need a network connection
 3740|       |   ***********************************************************************/
 3741|    524|#ifndef CURL_DISABLE_FILE
 3742|    524|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 3743|      0|    bool done;
 3744|       |    /* this is supposed to be the connect function so we better at least check
 3745|       |       that the file is present here! */
 3746|      0|    DEBUGASSERT(conn->handler->connect_it);
 3747|      0|    Curl_persistconninfo(data, conn, NULL, -1);
 3748|      0|    result = conn->handler->connect_it(data, &done);
 3749|       |
 3750|       |    /* Setup a "faked" transfer that'll do nothing */
 3751|      0|    if(!result) {
 3752|      0|      conn->bits.tcpconnect[FIRSTSOCKET] = TRUE; /* we are "connected */
 3753|       |
 3754|      0|      Curl_attach_connnection(data, conn);
 3755|      0|      result = Curl_conncache_add_conn(data);
 3756|      0|      if(result)
 3757|      0|        goto out;
 3758|       |
 3759|       |      /*
 3760|       |       * Setup whatever necessary for a resumed transfer
 3761|       |       */
 3762|      0|      result = setup_range(data);
 3763|      0|      if(result) {
 3764|      0|        DEBUGASSERT(conn->handler->done);
 3765|       |        /* we ignore the return code for the protocol-specific DONE */
 3766|      0|        (void)conn->handler->done(data, result, FALSE);
 3767|      0|        goto out;
 3768|      0|      }
 3769|      0|      Curl_setup_transfer(data, -1, -1, FALSE, -1);
 3770|      0|    }
 3771|       |
 3772|       |    /* since we skip do_init() */
 3773|      0|    Curl_init_do(data, conn);
 3774|       |
 3775|      0|    goto out;
 3776|      0|  }
 3777|    524|#endif
 3778|       |
 3779|       |  /* Get a cloned copy of the SSL config situation stored in the
 3780|       |     connection struct. But to get this going nicely, we must first make
 3781|       |     sure that the strings in the master copy are pointing to the correct
 3782|       |     strings in the session handle strings array!
 3783|       |
 3784|       |     Keep in mind that the pointers in the master copy are pointing to strings
 3785|       |     that will be freed as part of the Curl_easy struct, but all cloned
 3786|       |     copies will be separately allocated.
 3787|       |  */
 3788|    524|  data->set.ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH];
 3789|    524|  data->set.ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE];
 3790|    524|  data->set.ssl.primary.issuercert = data->set.str[STRING_SSL_ISSUERCERT];
 3791|    524|  data->set.ssl.primary.issuercert_blob = data->set.blobs[BLOB_SSL_ISSUERCERT];
 3792|    524|  data->set.ssl.primary.random_file = data->set.str[STRING_SSL_RANDOM_FILE];
 3793|    524|  data->set.ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3794|    524|  data->set.ssl.primary.cipher_list =
 3795|    524|    data->set.str[STRING_SSL_CIPHER_LIST];
 3796|    524|  data->set.ssl.primary.cipher_list13 =
 3797|    524|    data->set.str[STRING_SSL_CIPHER13_LIST];
 3798|    524|  data->set.ssl.primary.pinned_key =
 3799|    524|    data->set.str[STRING_SSL_PINNEDPUBLICKEY];
 3800|    524|  data->set.ssl.primary.cert_blob = data->set.blobs[BLOB_CERT];
 3801|    524|  data->set.ssl.primary.ca_info_blob = data->set.blobs[BLOB_CAINFO];
 3802|    524|  data->set.ssl.primary.curves = data->set.str[STRING_SSL_EC_CURVES];
 3803|       |
 3804|    524|#ifndef CURL_DISABLE_PROXY
 3805|    524|  data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];
 3806|    524|  data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];
 3807|    524|  data->set.proxy_ssl.primary.random_file =
 3808|    524|    data->set.str[STRING_SSL_RANDOM_FILE];
 3809|    524|  data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3810|    524|  data->set.proxy_ssl.primary.cipher_list =
 3811|    524|    data->set.str[STRING_SSL_CIPHER_LIST_PROXY];
 3812|    524|  data->set.proxy_ssl.primary.cipher_list13 =
 3813|    524|    data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];
 3814|    524|  data->set.proxy_ssl.primary.pinned_key =
 3815|    524|    data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY];
 3816|    524|  data->set.proxy_ssl.primary.cert_blob = data->set.blobs[BLOB_CERT_PROXY];
 3817|    524|  data->set.proxy_ssl.primary.ca_info_blob =
 3818|    524|    data->set.blobs[BLOB_CAINFO_PROXY];
 3819|    524|  data->set.proxy_ssl.primary.issuercert =
 3820|    524|    data->set.str[STRING_SSL_ISSUERCERT_PROXY];
 3821|    524|  data->set.proxy_ssl.primary.issuercert_blob =
 3822|    524|    data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY];
 3823|    524|  data->set.proxy_ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_PROXY];
 3824|    524|  data->set.proxy_ssl.cert_type = data->set.str[STRING_CERT_TYPE_PROXY];
 3825|    524|  data->set.proxy_ssl.key = data->set.str[STRING_KEY_PROXY];
 3826|    524|  data->set.proxy_ssl.key_type = data->set.str[STRING_KEY_TYPE_PROXY];
 3827|    524|  data->set.proxy_ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_PROXY];
 3828|    524|  data->set.proxy_ssl.primary.clientcert = data->set.str[STRING_CERT_PROXY];
 3829|    524|  data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];
 3830|    524|#endif
 3831|    524|  data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE];
 3832|    524|  data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE];
 3833|    524|  data->set.ssl.key = data->set.str[STRING_KEY];
 3834|    524|  data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE];
 3835|    524|  data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD];
 3836|    524|  data->set.ssl.primary.clientcert = data->set.str[STRING_CERT];
 3837|    524|#ifdef USE_TLS_SRP
 3838|    524|  data->set.ssl.username = data->set.str[STRING_TLSAUTH_USERNAME];
 3839|    524|  data->set.ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD];
 3840|    524|#ifndef CURL_DISABLE_PROXY
 3841|    524|  data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];
 3842|    524|  data->set.proxy_ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_PROXY];
 3843|    524|#endif
 3844|    524|#endif
 3845|    524|  data->set.ssl.key_blob = data->set.blobs[BLOB_KEY];
 3846|       |
 3847|    524|  if(!Curl_clone_primary_ssl_config(&data->set.ssl.primary,
 3848|    524|                                    &conn->ssl_config)) {
 3849|      0|    result = CURLE_OUT_OF_MEMORY;
 3850|      0|    goto out;
 3851|      0|  }
 3852|       |
 3853|    524|#ifndef CURL_DISABLE_PROXY
 3854|    524|  if(!Curl_clone_primary_ssl_config(&data->set.proxy_ssl.primary,
 3855|    524|                                    &conn->proxy_ssl_config)) {
 3856|      0|    result = CURLE_OUT_OF_MEMORY;
 3857|      0|    goto out;
 3858|      0|  }
 3859|    524|#endif
 3860|       |
 3861|    524|  prune_dead_connections(data);
 3862|       |
 3863|       |  /*************************************************************
 3864|       |   * Check the current list of connections to see if we can
 3865|       |   * re-use an already existing one or if we have to create a
 3866|       |   * new one.
 3867|       |   *************************************************************/
 3868|       |
 3869|    524|  DEBUGASSERT(conn->user);
 3870|    524|  DEBUGASSERT(conn->passwd);
 3871|       |
 3872|       |  /* reuse_fresh is TRUE if we are told to use a new connection by force, but
 3873|       |     we only acknowledge this option if this is not a re-used connection
 3874|       |     already (which happens due to follow-location or during a HTTP
 3875|       |     authentication phase). CONNECT_ONLY transfers also refuse reuse. */
 3876|    524|  if((data->set.reuse_fresh && !data->state.this_is_a_follow) ||
 3877|    524|     data->set.connect_only)
 3878|      0|    reuse = FALSE;
 3879|    524|  else
 3880|    524|    reuse = ConnectionExists(data, conn, &conn_temp, &force_reuse, &waitpipe);
 3881|       |
 3882|    524|  if(reuse) {
 3883|       |    /*
 3884|       |     * We already have a connection for this, we got the former connection in
 3885|       |     * the conn_temp variable and thus we need to cleanup the one we just
 3886|       |     * allocated before we can move along and use the previously existing one.
 3887|       |     */
 3888|      0|    reuse_conn(data, conn, conn_temp);
 3889|      0|#ifdef USE_SSL
 3890|      0|    free(conn->ssl_extra);
 3891|      0|#endif
 3892|      0|    free(conn);          /* we don't need this anymore */
 3893|      0|    conn = conn_temp;
 3894|      0|    *in_connect = conn;
 3895|       |
 3896|      0|#ifndef CURL_DISABLE_PROXY
 3897|      0|    infof(data, "Re-using existing connection! (#%ld) with %s %s",
 3898|      0|          conn->connection_id,
 3899|      0|          conn->bits.proxy?"proxy":"host",
 3900|      0|          conn->socks_proxy.host.name ? conn->socks_proxy.host.dispname :
 3901|      0|          conn->http_proxy.host.name ? conn->http_proxy.host.dispname :
 3902|      0|          conn->host.dispname);
 3903|       |#else
 3904|       |    infof(data, "Re-using existing connection! (#%ld) with host %s",
 3905|       |          conn->connection_id, conn->host.dispname);
 3906|       |#endif
 3907|      0|  }
 3908|    524|  else {
 3909|       |    /* We have decided that we want a new connection. However, we may not
 3910|       |       be able to do that if we have reached the limit of how many
 3911|       |       connections we are allowed to open. */
 3912|       |
 3913|    524|    if(conn->handler->flags & PROTOPT_ALPN_NPN) {
 3914|       |      /* The protocol wants it, so set the bits if enabled in the easy handle
 3915|       |         (default) */
 3916|      0|      if(data->set.ssl_enable_alpn)
 3917|      0|        conn->bits.tls_enable_alpn = TRUE;
 3918|      0|      if(data->set.ssl_enable_npn)
 3919|      0|        conn->bits.tls_enable_npn = TRUE;
 3920|      0|    }
 3921|       |
 3922|    524|    if(waitpipe)
 3923|       |      /* There is a connection that *might* become usable for multiplexing
 3924|       |         "soon", and we wait for that */
 3925|      0|      connections_available = FALSE;
 3926|    524|    else {
 3927|       |      /* this gets a lock on the conncache */
 3928|    524|      const char *bundlehost;
 3929|    524|      struct connectbundle *bundle =
 3930|    524|        Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
 3931|    524|                                   &bundlehost);
 3932|       |
 3933|    524|      if(max_host_connections > 0 && bundle &&
 3934|    524|         (bundle->num_connections >= max_host_connections)) {
 3935|      0|        struct connectdata *conn_candidate;
 3936|       |
 3937|       |        /* The bundle is full. Extract the oldest connection. */
 3938|      0|        conn_candidate = Curl_conncache_extract_bundle(data, bundle);
 3939|      0|        CONNCACHE_UNLOCK(data);
 3940|       |
 3941|      0|        if(conn_candidate)
 3942|      0|          (void)Curl_disconnect(data, conn_candidate, FALSE);
 3943|      0|        else {
 3944|      0|          infof(data, "No more connections allowed to host %s: %zu",
 3945|      0|                bundlehost, max_host_connections);
 3946|      0|          connections_available = FALSE;
 3947|      0|        }
 3948|      0|      }
 3949|    524|      else
 3950|    524|        CONNCACHE_UNLOCK(data);
 3951|       |
 3952|    524|    }
 3953|       |
 3954|    524|    if(connections_available &&
 3955|    524|       (max_total_connections > 0) &&
 3956|    524|       (Curl_conncache_size(data) >= max_total_connections)) {
 3957|      0|      struct connectdata *conn_candidate;
 3958|       |
 3959|       |      /* The cache is full. Let's see if we can kill a connection. */
 3960|      0|      conn_candidate = Curl_conncache_extract_oldest(data);
 3961|      0|      if(conn_candidate)
 3962|      0|        (void)Curl_disconnect(data, conn_candidate, FALSE);
 3963|      0|      else {
 3964|      0|        infof(data, "No connections available in cache");
 3965|      0|        connections_available = FALSE;
 3966|      0|      }
 3967|      0|    }
 3968|       |
 3969|    524|    if(!connections_available) {
 3970|      0|      infof(data, "No connections available.");
 3971|       |
 3972|      0|      conn_free(conn);
 3973|      0|      *in_connect = NULL;
 3974|       |
 3975|      0|      result = CURLE_NO_CONNECTION_AVAILABLE;
 3976|      0|      goto out;
 3977|      0|    }
 3978|    524|    else {
 3979|       |      /*
 3980|       |       * This is a brand new connection, so let's store it in the connection
 3981|       |       * cache of ours!
 3982|       |       */
 3983|    524|      Curl_attach_connnection(data, conn);
 3984|    524|      result = Curl_conncache_add_conn(data);
 3985|    524|      if(result)
 3986|      0|        goto out;
 3987|    524|    }
 3988|       |
 3989|    524|#if defined(USE_NTLM)
 3990|       |    /* If NTLM is requested in a part of this connection, make sure we don't
 3991|       |       assume the state is fine as this is a fresh connection and NTLM is
 3992|       |       connection based. */
 3993|    524|    if((data->state.authhost.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 3994|    524|       data->state.authhost.done) {
 3995|      0|      infof(data, "NTLM picked AND auth done set, clear picked!");
 3996|      0|      data->state.authhost.picked = CURLAUTH_NONE;
 3997|      0|      data->state.authhost.done = FALSE;
 3998|      0|    }
 3999|       |
 4000|    524|    if((data->state.authproxy.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 4001|    524|       data->state.authproxy.done) {
 4002|      0|      infof(data, "NTLM-proxy picked AND auth done set, clear picked!");
 4003|      0|      data->state.authproxy.picked = CURLAUTH_NONE;
 4004|      0|      data->state.authproxy.done = FALSE;
 4005|      0|    }
 4006|    524|#endif
 4007|    524|  }
 4008|       |
 4009|       |  /* Setup and init stuff before DO starts, in preparing for the transfer. */
 4010|    524|  Curl_init_do(data, conn);
 4011|       |
 4012|       |  /*
 4013|       |   * Setup whatever necessary for a resumed transfer
 4014|       |   */
 4015|    524|  result = setup_range(data);
 4016|    524|  if(result)
 4017|      0|    goto out;
 4018|       |
 4019|       |  /* Continue connectdata initialization here. */
 4020|       |
 4021|       |  /*
 4022|       |   * Inherit the proper values from the urldata struct AFTER we have arranged
 4023|       |   * the persistent connection stuff
 4024|       |   */
 4025|    524|  conn->seek_func = data->set.seek_func;
 4026|    524|  conn->seek_client = data->set.seek_client;
 4027|       |
 4028|       |  /*************************************************************
 4029|       |   * Resolve the address of the server or proxy
 4030|       |   *************************************************************/
 4031|    524|  result = resolve_server(data, conn, async);
 4032|       |
 4033|       |  /* Strip trailing dots. resolve_server copied the name. */
 4034|    524|  strip_trailing_dot(&conn->host);
 4035|    524|#ifndef CURL_DISABLE_PROXY
 4036|    524|  if(conn->bits.httpproxy)
 4037|      0|    strip_trailing_dot(&conn->http_proxy.host);
 4038|    524|  if(conn->bits.socksproxy)
 4039|      0|    strip_trailing_dot(&conn->socks_proxy.host);
 4040|    524|#endif
 4041|    524|  if(conn->bits.conn_to_host)
 4042|    524|    strip_trailing_dot(&conn->conn_to_host);
 4043|       |
 4044|    688|out:
 4045|    688|  return result;
 4046|    524|}
url.c:allocate_conn:
 1674|    688|{
 1675|    688|  struct connectdata *conn = calloc(1, sizeof(struct connectdata));
 1676|    688|  if(!conn)
 1677|      0|    return NULL;
 1678|       |
 1679|    688|#ifdef USE_SSL
 1680|       |  /* The SSL backend-specific data (ssl_backend_data) objects are allocated as
 1681|       |     a separate array to ensure suitable alignment.
 1682|       |     Note that these backend pointers can be swapped by vtls (eg ssl backend
 1683|       |     data becomes proxy backend data). */
 1684|    688|  {
 1685|    688|    size_t sslsize = Curl_ssl->sizeof_ssl_backend_data;
 1686|    688|    char *ssl = calloc(4, sslsize);
 1687|    688|    if(!ssl) {
 1688|      0|      free(conn);
 1689|      0|      return NULL;
 1690|      0|    }
 1691|    688|    conn->ssl_extra = ssl;
 1692|    688|    conn->ssl[0].backend = (void *)ssl;
 1693|    688|    conn->ssl[1].backend = (void *)(ssl + sslsize);
 1694|    688|#ifndef CURL_DISABLE_PROXY
 1695|    688|    conn->proxy_ssl[0].backend = (void *)(ssl + 2 * sslsize);
 1696|    688|    conn->proxy_ssl[1].backend = (void *)(ssl + 3 * sslsize);
 1697|    688|#endif
 1698|    688|  }
 1699|      0|#endif
 1700|       |
 1701|      0|  conn->handler = &Curl_handler_dummy;  /* Be sure we have a handler defined
 1702|       |                                           already from start to avoid NULL
 1703|       |                                           situations and checks */
 1704|       |
 1705|       |  /* and we setup a few fields in case we end up actually using this struct */
 1706|       |
 1707|    688|  conn->sock[FIRSTSOCKET] = CURL_SOCKET_BAD;     /* no file descriptor */
 1708|    688|  conn->sock[SECONDARYSOCKET] = CURL_SOCKET_BAD; /* no file descriptor */
 1709|    688|  conn->tempsock[0] = CURL_SOCKET_BAD; /* no file descriptor */
 1710|    688|  conn->tempsock[1] = CURL_SOCKET_BAD; /* no file descriptor */
 1711|    688|  conn->connection_id = -1;    /* no ID */
 1712|    688|  conn->port = -1; /* unknown at this point */
 1713|    688|  conn->remote_port = -1; /* unknown at this point */
 1714|       |#if defined(USE_RECV_BEFORE_SEND_WORKAROUND) && defined(DEBUGBUILD)
 1715|       |  conn->postponed[0].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1716|       |  conn->postponed[1].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1717|       |#endif /* USE_RECV_BEFORE_SEND_WORKAROUND && DEBUGBUILD */
 1718|       |
 1719|       |  /* Default protocol-independent behavior doesn't support persistent
 1720|       |     connections, so we set this to force-close. Protocols that support
 1721|       |     this need to set this to FALSE in their "curl_do" functions. */
 1722|    688|  connclose(conn, "Default to force-close");
 1723|       |
 1724|       |  /* Store creation time to help future close decision making */
 1725|    688|  conn->created = Curl_now();
 1726|       |
 1727|       |  /* Store current time to give a baseline to keepalive connection times. */
 1728|    688|  conn->keepalive = Curl_now();
 1729|       |
 1730|    688|#ifndef CURL_DISABLE_PROXY
 1731|    688|  conn->http_proxy.proxytype = data->set.proxytype;
 1732|    688|  conn->socks_proxy.proxytype = CURLPROXY_SOCKS4;
 1733|       |
 1734|       |  /* note that these two proxy bits are now just on what looks to be
 1735|       |     requested, they may be altered down the road */
 1736|    688|  conn->bits.proxy = (data->set.str[STRING_PROXY] &&
 1737|    688|                      *data->set.str[STRING_PROXY]) ? TRUE : FALSE;
 1738|    688|  conn->bits.httpproxy = (conn->bits.proxy &&
 1739|    688|                          (conn->http_proxy.proxytype == CURLPROXY_HTTP ||
 1740|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0 ||
 1741|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTPS)) ?
 1742|    688|                           TRUE : FALSE;
 1743|    688|  conn->bits.socksproxy = (conn->bits.proxy &&
 1744|    688|                           !conn->bits.httpproxy) ? TRUE : FALSE;
 1745|       |
 1746|    688|  if(data->set.str[STRING_PRE_PROXY] && *data->set.str[STRING_PRE_PROXY]) {
 1747|      0|    conn->bits.proxy = TRUE;
 1748|      0|    conn->bits.socksproxy = TRUE;
 1749|      0|  }
 1750|       |
 1751|    688|  conn->bits.proxy_user_passwd =
 1752|    688|    (data->state.aptr.proxyuser) ? TRUE : FALSE;
 1753|    688|  conn->bits.tunnel_proxy = data->set.tunnel_thru_httpproxy;
 1754|    688|#endif /* CURL_DISABLE_PROXY */
 1755|       |
 1756|    688|  conn->bits.user_passwd = (data->state.aptr.user) ? TRUE : FALSE;
 1757|    688|#ifndef CURL_DISABLE_FTP
 1758|    688|  conn->bits.ftp_use_epsv = data->set.ftp_use_epsv;
 1759|    688|  conn->bits.ftp_use_eprt = data->set.ftp_use_eprt;
 1760|    688|#endif
 1761|    688|  conn->ssl_config.verifystatus = data->set.ssl.primary.verifystatus;
 1762|    688|  conn->ssl_config.verifypeer = data->set.ssl.primary.verifypeer;
 1763|    688|  conn->ssl_config.verifyhost = data->set.ssl.primary.verifyhost;
 1764|    688|#ifndef CURL_DISABLE_PROXY
 1765|    688|  conn->proxy_ssl_config.verifystatus =
 1766|    688|    data->set.proxy_ssl.primary.verifystatus;
 1767|    688|  conn->proxy_ssl_config.verifypeer = data->set.proxy_ssl.primary.verifypeer;
 1768|    688|  conn->proxy_ssl_config.verifyhost = data->set.proxy_ssl.primary.verifyhost;
 1769|    688|#endif
 1770|    688|  conn->ip_version = data->set.ipver;
 1771|    688|  conn->bits.connect_only = data->set.connect_only;
 1772|    688|  conn->transport = TRNSPRT_TCP; /* most of them are TCP streams */
 1773|       |
 1774|    688|#if !defined(CURL_DISABLE_HTTP) && defined(USE_NTLM) && \
 1775|    688|    defined(NTLM_WB_ENABLED)
 1776|    688|  conn->ntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1777|    688|  conn->proxyntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1778|    688|#endif
 1779|       |
 1780|       |  /* Initialize the easy handle list */
 1781|    688|  Curl_llist_init(&conn->easyq, NULL);
 1782|       |
 1783|       |#ifdef HAVE_GSSAPI
 1784|       |  conn->data_prot = PROT_CLEAR;
 1785|       |#endif
 1786|       |
 1787|       |  /* Store the local bind parameters that will be used for this connection */
 1788|    688|  if(data->set.str[STRING_DEVICE]) {
 1789|      0|    conn->localdev = strdup(data->set.str[STRING_DEVICE]);
 1790|      0|    if(!conn->localdev)
 1791|      0|      goto error;
 1792|      0|  }
 1793|    688|  conn->localportrange = data->set.localportrange;
 1794|    688|  conn->localport = data->set.localport;
 1795|       |
 1796|       |  /* the close socket stuff needs to be copied to the connection struct as
 1797|       |     it may live on without (this specific) Curl_easy */
 1798|    688|  conn->fclosesocket = data->set.fclosesocket;
 1799|    688|  conn->closesocket_client = data->set.closesocket_client;
 1800|    688|  conn->lastused = Curl_now(); /* used now */
 1801|       |
 1802|    688|  return conn;
 1803|      0|  error:
 1804|       |
 1805|      0|  Curl_llist_destroy(&conn->easyq, NULL);
 1806|      0|  free(conn->localdev);
 1807|      0|#ifdef USE_SSL
 1808|      0|  free(conn->ssl_extra);
 1809|      0|#endif
 1810|      0|  free(conn);
 1811|      0|  return NULL;
 1812|    688|}
url.c:parseurlandfillconn:
 1932|    688|{
 1933|    688|  CURLcode result;
 1934|    688|  CURLU *uh;
 1935|    688|  CURLUcode uc;
 1936|    688|  char *hostname;
 1937|    688|  bool use_set_uh = (data->set.uh && !data->state.this_is_a_follow);
 1938|       |
 1939|    688|  up_free(data); /* cleanup previous leftovers first */
 1940|       |
 1941|       |  /* parse the URL */
 1942|    688|  if(use_set_uh) {
 1943|      0|    uh = data->state.uh = curl_url_dup(data->set.uh);
 1944|      0|  }
 1945|    688|  else {
 1946|    688|    uh = data->state.uh = curl_url();
 1947|    688|  }
 1948|       |
 1949|    688|  if(!uh)
 1950|      0|    return CURLE_OUT_OF_MEMORY;
 1951|       |
 1952|    688|  if(data->set.str[STRING_DEFAULT_PROTOCOL] &&
 1953|    688|     !Curl_is_absolute_url(data->state.url, NULL, MAX_SCHEME_LEN)) {
 1954|      0|    char *url = aprintf("%s://%s", data->set.str[STRING_DEFAULT_PROTOCOL],
 1955|      0|                        data->state.url);
 1956|      0|    if(!url)
 1957|      0|      return CURLE_OUT_OF_MEMORY;
 1958|      0|    if(data->state.url_alloc)
 1959|      0|      free(data->state.url);
 1960|      0|    data->state.url = url;
 1961|      0|    data->state.url_alloc = TRUE;
 1962|      0|  }
 1963|       |
 1964|    688|  if(!use_set_uh) {
 1965|    688|    char *newurl;
 1966|    688|    uc = curl_url_set(uh, CURLUPART_URL, data->state.url,
 1967|    688|                    CURLU_GUESS_SCHEME |
 1968|    688|                    CURLU_NON_SUPPORT_SCHEME |
 1969|    688|                    (data->set.disallow_username_in_url ?
 1970|    688|                     CURLU_DISALLOW_USER : 0) |
 1971|    688|                    (data->set.path_as_is ? CURLU_PATH_AS_IS : 0));
 1972|    688|    if(uc) {
 1973|     60|      DEBUGF(infof(data, "curl_url_set rejected %s: %s", data->state.url,
 1974|     60|                   curl_url_strerror(uc)));
 1975|     60|      return Curl_uc_to_curlcode(uc);
 1976|     60|    }
 1977|       |
 1978|       |    /* after it was parsed, get the generated normalized version */
 1979|    628|    uc = curl_url_get(uh, CURLUPART_URL, &newurl, 0);
 1980|    628|    if(uc)
 1981|      0|      return Curl_uc_to_curlcode(uc);
 1982|    628|    if(data->state.url_alloc)
 1983|      0|      free(data->state.url);
 1984|    628|    data->state.url = newurl;
 1985|    628|    data->state.url_alloc = TRUE;
 1986|    628|  }
 1987|       |
 1988|    628|  uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 1989|    628|  if(uc)
 1990|      0|    return Curl_uc_to_curlcode(uc);
 1991|       |
 1992|    628|  uc = curl_url_get(uh, CURLUPART_HOST, &data->state.up.hostname, 0);
 1993|    628|  if(uc) {
 1994|      0|    if(!strcasecompare("file", data->state.up.scheme))
 1995|      0|      return CURLE_OUT_OF_MEMORY;
 1996|      0|  }
 1997|       |
 1998|    628|#ifndef CURL_DISABLE_HSTS
 1999|    628|  if(data->hsts && strcasecompare("http", data->state.up.scheme)) {
 2000|      0|    if(Curl_hsts(data->hsts, data->state.up.hostname, TRUE)) {
 2001|      0|      char *url;
 2002|      0|      Curl_safefree(data->state.up.scheme);
 2003|      0|      uc = curl_url_set(uh, CURLUPART_SCHEME, "https", 0);
 2004|      0|      if(uc)
 2005|      0|        return Curl_uc_to_curlcode(uc);
 2006|      0|      if(data->state.url_alloc)
 2007|      0|        Curl_safefree(data->state.url);
 2008|       |      /* after update, get the updated version */
 2009|      0|      uc = curl_url_get(uh, CURLUPART_URL, &url, 0);
 2010|      0|      if(uc)
 2011|      0|        return Curl_uc_to_curlcode(uc);
 2012|      0|      uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 2013|      0|      if(uc) {
 2014|      0|        free(url);
 2015|      0|        return Curl_uc_to_curlcode(uc);
 2016|      0|      }
 2017|      0|      data->state.url = url;
 2018|      0|      data->state.url_alloc = TRUE;
 2019|      0|      infof(data, "Switched from HTTP to HTTPS due to HSTS => %s",
 2020|      0|            data->state.url);
 2021|      0|    }
 2022|      0|  }
 2023|    628|#endif
 2024|       |
 2025|    628|  result = findprotocol(data, conn, data->state.up.scheme);
 2026|    628|  if(result)
 2027|    102|    return result;
 2028|       |
 2029|       |  /*
 2030|       |   * User name and password set with their own options override the
 2031|       |   * credentials possibly set in the URL.
 2032|       |   */
 2033|    526|  if(!data->state.aptr.user) {
 2034|       |    /* we don't use the URL API's URL decoder option here since it rejects
 2035|       |       control codes and we want to allow them for some schemes in the user
 2036|       |       and password fields */
 2037|    365|    uc = curl_url_get(uh, CURLUPART_USER, &data->state.up.user, 0);
 2038|    365|    if(!uc) {
 2039|    189|      char *decoded;
 2040|    189|      result = Curl_urldecode(NULL, data->state.up.user, 0, &decoded, NULL,
 2041|    189|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2042|    189|                              REJECT_ZERO : REJECT_CTRL);
 2043|    189|      if(result)
 2044|      1|        return result;
 2045|    188|      conn->user = decoded;
 2046|    188|      conn->bits.user_passwd = TRUE;
 2047|    188|      result = Curl_setstropt(&data->state.aptr.user, decoded);
 2048|    188|      if(result)
 2049|      0|        return result;
 2050|    188|    }
 2051|    176|    else if(uc != CURLUE_NO_USER)
 2052|      0|      return Curl_uc_to_curlcode(uc);
 2053|    365|  }
 2054|       |
 2055|    525|  if(!data->state.aptr.passwd) {
 2056|    520|    uc = curl_url_get(uh, CURLUPART_PASSWORD, &data->state.up.password, 0);
 2057|    520|    if(!uc) {
 2058|     13|      char *decoded;
 2059|     13|      result = Curl_urldecode(NULL, data->state.up.password, 0, &decoded, NULL,
 2060|     13|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2061|     13|                              REJECT_ZERO : REJECT_CTRL);
 2062|     13|      if(result)
 2063|      1|        return result;
 2064|     12|      conn->passwd = decoded;
 2065|     12|      conn->bits.user_passwd = TRUE;
 2066|     12|      result = Curl_setstropt(&data->state.aptr.passwd, decoded);
 2067|     12|      if(result)
 2068|      0|        return result;
 2069|     12|    }
 2070|    507|    else if(uc != CURLUE_NO_PASSWORD)
 2071|      0|      return Curl_uc_to_curlcode(uc);
 2072|    520|  }
 2073|       |
 2074|    524|  uc = curl_url_get(uh, CURLUPART_OPTIONS, &data->state.up.options,
 2075|    524|                    CURLU_URLDECODE);
 2076|    524|  if(!uc) {
 2077|      0|    conn->options = strdup(data->state.up.options);
 2078|      0|    if(!conn->options)
 2079|      0|      return CURLE_OUT_OF_MEMORY;
 2080|      0|  }
 2081|    524|  else if(uc != CURLUE_NO_OPTIONS)
 2082|      0|    return Curl_uc_to_curlcode(uc);
 2083|       |
 2084|    524|  uc = curl_url_get(uh, CURLUPART_PATH, &data->state.up.path, 0);
 2085|    524|  if(uc)
 2086|      0|    return Curl_uc_to_curlcode(uc);
 2087|       |
 2088|    524|  uc = curl_url_get(uh, CURLUPART_PORT, &data->state.up.port,
 2089|    524|                    CURLU_DEFAULT_PORT);
 2090|    524|  if(uc) {
 2091|      0|    if(!strcasecompare("file", data->state.up.scheme))
 2092|      0|      return CURLE_OUT_OF_MEMORY;
 2093|      0|  }
 2094|    524|  else {
 2095|    524|    unsigned long port = strtoul(data->state.up.port, NULL, 10);
 2096|    524|    conn->port = conn->remote_port =
 2097|    524|      (data->set.use_port && data->state.allow_port) ?
 2098|    524|      (int)data->set.use_port : curlx_ultous(port);
 2099|    524|  }
 2100|       |
 2101|    524|  (void)curl_url_get(uh, CURLUPART_QUERY, &data->state.up.query, 0);
 2102|       |
 2103|    524|  hostname = data->state.up.hostname;
 2104|    524|  if(hostname && hostname[0] == '[') {
 2105|       |    /* This looks like an IPv6 address literal. See if there is an address
 2106|       |       scope. */
 2107|      0|    size_t hlen;
 2108|      0|    conn->bits.ipv6_ip = TRUE;
 2109|       |    /* cut off the brackets! */
 2110|      0|    hostname++;
 2111|      0|    hlen = strlen(hostname);
 2112|      0|    hostname[hlen - 1] = 0;
 2113|       |
 2114|      0|    zonefrom_url(uh, data, conn);
 2115|      0|  }
 2116|       |
 2117|       |  /* make sure the connect struct gets its own copy of the host name */
 2118|    524|  conn->host.rawalloc = strdup(hostname ? hostname : "");
 2119|    524|  if(!conn->host.rawalloc)
 2120|      0|    return CURLE_OUT_OF_MEMORY;
 2121|    524|  conn->host.name = conn->host.rawalloc;
 2122|       |
 2123|    524|  if(data->set.scope_id)
 2124|       |    /* Override any scope that was set above.  */
 2125|      0|    conn->scope_id = data->set.scope_id;
 2126|       |
 2127|    524|  return CURLE_OK;
 2128|    524|}
url.c:findprotocol:
 1832|    628|{
 1833|    628|  const struct Curl_handler *p = Curl_builtin_scheme(protostr);
 1834|       |
 1835|    628|  if(p && /* Protocol found in table. Check if allowed */
 1836|    628|     (data->set.allowed_protocols & p->protocol)) {
 1837|       |
 1838|       |    /* it is allowed for "normal" request, now do an extra check if this is
 1839|       |       the result of a redirect */
 1840|    526|    if(data->state.this_is_a_follow &&
 1841|    526|       !(data->set.redir_protocols & p->protocol))
 1842|       |      /* nope, get out */
 1843|      0|      ;
 1844|    526|    else {
 1845|       |      /* Perform setup complement if some. */
 1846|    526|      conn->handler = conn->given = p;
 1847|       |
 1848|       |      /* 'port' and 'remote_port' are set in setup_connection_internals() */
 1849|    526|      return CURLE_OK;
 1850|    526|    }
 1851|    526|  }
 1852|       |
 1853|       |  /* The protocol was not found in the table, but we don't have to assign it
 1854|       |     to anything since it is already assigned to a dummy-struct in the
 1855|       |     create_conn() function when the connectdata struct is allocated. */
 1856|    102|  failf(data, "Protocol \"%s\" not supported or disabled in " LIBCURL_NAME,
 1857|    102|        protostr);
 1858|       |
 1859|    102|  return CURLE_UNSUPPORTED_PROTOCOL;
 1860|    628|}
url.c:create_conn_helper_init_proxy:
 2575|    524|{
 2576|    524|  char *proxy = NULL;
 2577|    524|  char *socksproxy = NULL;
 2578|    524|  char *no_proxy = NULL;
 2579|    524|  CURLcode result = CURLE_OK;
 2580|       |
 2581|       |  /*************************************************************
 2582|       |   * Extract the user and password from the authentication string
 2583|       |   *************************************************************/
 2584|    524|  if(conn->bits.proxy_user_passwd) {
 2585|      0|    result = parse_proxy_auth(data, conn);
 2586|      0|    if(result)
 2587|      0|      goto out;
 2588|      0|  }
 2589|       |
 2590|       |  /*************************************************************
 2591|       |   * Detect what (if any) proxy to use
 2592|       |   *************************************************************/
 2593|    524|  if(data->set.str[STRING_PROXY]) {
 2594|      0|    proxy = strdup(data->set.str[STRING_PROXY]);
 2595|       |    /* if global proxy is set, this is it */
 2596|      0|    if(NULL == proxy) {
 2597|      0|      failf(data, "memory shortage");
 2598|      0|      result = CURLE_OUT_OF_MEMORY;
 2599|      0|      goto out;
 2600|      0|    }
 2601|      0|  }
 2602|       |
 2603|    524|  if(data->set.str[STRING_PRE_PROXY]) {
 2604|      0|    socksproxy = strdup(data->set.str[STRING_PRE_PROXY]);
 2605|       |    /* if global socks proxy is set, this is it */
 2606|      0|    if(NULL == socksproxy) {
 2607|      0|      failf(data, "memory shortage");
 2608|      0|      result = CURLE_OUT_OF_MEMORY;
 2609|      0|      goto out;
 2610|      0|    }
 2611|      0|  }
 2612|       |
 2613|    524|  if(!data->set.str[STRING_NOPROXY]) {
 2614|    524|    const char *p = "no_proxy";
 2615|    524|    no_proxy = curl_getenv(p);
 2616|    524|    if(!no_proxy) {
 2617|    524|      p = "NO_PROXY";
 2618|    524|      no_proxy = curl_getenv(p);
 2619|    524|    }
 2620|    524|    if(no_proxy) {
 2621|      0|      infof(data, "Uses proxy env variable %s == '%s'", p, no_proxy);
 2622|      0|    }
 2623|    524|  }
 2624|       |
 2625|    524|  if(check_noproxy(conn->host.name, data->set.str[STRING_NOPROXY] ?
 2626|    524|      data->set.str[STRING_NOPROXY] : no_proxy)) {
 2627|      0|    Curl_safefree(proxy);
 2628|      0|    Curl_safefree(socksproxy);
 2629|      0|  }
 2630|    524|#ifndef CURL_DISABLE_HTTP
 2631|    524|  else if(!proxy && !socksproxy)
 2632|       |    /* if the host is not in the noproxy list, detect proxy. */
 2633|    524|    proxy = detect_proxy(data, conn);
 2634|    524|#endif /* CURL_DISABLE_HTTP */
 2635|       |
 2636|    524|  Curl_safefree(no_proxy);
 2637|       |
 2638|    524|#ifdef USE_UNIX_SOCKETS
 2639|       |  /* For the time being do not mix proxy and unix domain sockets. See #1274 */
 2640|    524|  if(proxy && conn->unix_domain_socket) {
 2641|      0|    free(proxy);
 2642|      0|    proxy = NULL;
 2643|      0|  }
 2644|    524|#endif
 2645|       |
 2646|    524|  if(proxy && (!*proxy || (conn->handler->flags & PROTOPT_NONETWORK))) {
 2647|      0|    free(proxy);  /* Don't bother with an empty proxy string or if the
 2648|       |                     protocol doesn't work with network */
 2649|      0|    proxy = NULL;
 2650|      0|  }
 2651|    524|  if(socksproxy && (!*socksproxy ||
 2652|      0|                    (conn->handler->flags & PROTOPT_NONETWORK))) {
 2653|      0|    free(socksproxy);  /* Don't bother with an empty socks proxy string or if
 2654|       |                          the protocol doesn't work with network */
 2655|      0|    socksproxy = NULL;
 2656|      0|  }
 2657|       |
 2658|       |  /***********************************************************************
 2659|       |   * If this is supposed to use a proxy, we need to figure out the proxy host
 2660|       |   * name, proxy type and port number, so that we can re-use an existing
 2661|       |   * connection that may exist registered to the same proxy host.
 2662|       |   ***********************************************************************/
 2663|    524|  if(proxy || socksproxy) {
 2664|      0|    if(proxy) {
 2665|      0|      result = parse_proxy(data, conn, proxy, conn->http_proxy.proxytype);
 2666|      0|      Curl_safefree(proxy); /* parse_proxy copies the proxy string */
 2667|      0|      if(result)
 2668|      0|        goto out;
 2669|      0|    }
 2670|       |
 2671|      0|    if(socksproxy) {
 2672|      0|      result = parse_proxy(data, conn, socksproxy,
 2673|      0|                           conn->socks_proxy.proxytype);
 2674|       |      /* parse_proxy copies the socks proxy string */
 2675|      0|      Curl_safefree(socksproxy);
 2676|      0|      if(result)
 2677|      0|        goto out;
 2678|      0|    }
 2679|       |
 2680|      0|    if(conn->http_proxy.host.rawalloc) {
 2681|       |#ifdef CURL_DISABLE_HTTP
 2682|       |      /* asking for a HTTP proxy is a bit funny when HTTP is disabled... */
 2683|       |      result = CURLE_UNSUPPORTED_PROTOCOL;
 2684|       |      goto out;
 2685|       |#else
 2686|       |      /* force this connection's protocol to become HTTP if compatible */
 2687|      0|      if(!(conn->handler->protocol & PROTO_FAMILY_HTTP)) {
 2688|      0|        if((conn->handler->flags & PROTOPT_PROXY_AS_HTTP) &&
 2689|      0|           !conn->bits.tunnel_proxy)
 2690|      0|          conn->handler = &Curl_handler_http;
 2691|      0|        else
 2692|       |          /* if not converting to HTTP over the proxy, enforce tunneling */
 2693|      0|          conn->bits.tunnel_proxy = TRUE;
 2694|      0|      }
 2695|      0|      conn->bits.httpproxy = TRUE;
 2696|      0|#endif
 2697|      0|    }
 2698|      0|    else {
 2699|      0|      conn->bits.httpproxy = FALSE; /* not a HTTP proxy */
 2700|      0|      conn->bits.tunnel_proxy = FALSE; /* no tunneling if not HTTP */
 2701|      0|    }
 2702|       |
 2703|      0|    if(conn->socks_proxy.host.rawalloc) {
 2704|      0|      if(!conn->http_proxy.host.rawalloc) {
 2705|       |        /* once a socks proxy */
 2706|      0|        if(!conn->socks_proxy.user) {
 2707|      0|          conn->socks_proxy.user = conn->http_proxy.user;
 2708|      0|          conn->http_proxy.user = NULL;
 2709|      0|          Curl_safefree(conn->socks_proxy.passwd);
 2710|      0|          conn->socks_proxy.passwd = conn->http_proxy.passwd;
 2711|      0|          conn->http_proxy.passwd = NULL;
 2712|      0|        }
 2713|      0|      }
 2714|      0|      conn->bits.socksproxy = TRUE;
 2715|      0|    }
 2716|      0|    else
 2717|      0|      conn->bits.socksproxy = FALSE; /* not a socks proxy */
 2718|      0|  }
 2719|    524|  else {
 2720|    524|    conn->bits.socksproxy = FALSE;
 2721|    524|    conn->bits.httpproxy = FALSE;
 2722|    524|  }
 2723|    524|  conn->bits.proxy = conn->bits.httpproxy || conn->bits.socksproxy;
 2724|       |
 2725|    524|  if(!conn->bits.proxy) {
 2726|       |    /* we aren't using the proxy after all... */
 2727|    524|    conn->bits.proxy = FALSE;
 2728|    524|    conn->bits.httpproxy = FALSE;
 2729|    524|    conn->bits.socksproxy = FALSE;
 2730|    524|    conn->bits.proxy_user_passwd = FALSE;
 2731|    524|    conn->bits.tunnel_proxy = FALSE;
 2732|       |    /* CURLPROXY_HTTPS does not have its own flag in conn->bits, yet we need
 2733|       |       to signal that CURLPROXY_HTTPS is not used for this connection */
 2734|    524|    conn->http_proxy.proxytype = CURLPROXY_HTTP;
 2735|    524|  }
 2736|       |
 2737|    524|out:
 2738|       |
 2739|    524|  free(socksproxy);
 2740|    524|  free(proxy);
 2741|    524|  return result;
 2742|    524|}
url.c:check_noproxy:
 2223|    524|{
 2224|       |  /* no_proxy=domain1.dom,host.domain2.dom
 2225|       |   *   (a comma-separated list of hosts which should
 2226|       |   *   not be proxied, or an asterisk to override
 2227|       |   *   all proxy variables)
 2228|       |   */
 2229|    524|  if(no_proxy && no_proxy[0]) {
 2230|      0|    size_t tok_start;
 2231|      0|    size_t tok_end;
 2232|      0|    const char *separator = ", ";
 2233|      0|    size_t no_proxy_len;
 2234|      0|    size_t namelen;
 2235|      0|    char *endptr;
 2236|      0|    if(strcasecompare("*", no_proxy)) {
 2237|      0|      return TRUE;
 2238|      0|    }
 2239|       |
 2240|       |    /* NO_PROXY was specified and it wasn't just an asterisk */
 2241|       |
 2242|      0|    no_proxy_len = strlen(no_proxy);
 2243|      0|    if(name[0] == '[') {
 2244|       |      /* IPv6 numerical address */
 2245|      0|      endptr = strchr(name, ']');
 2246|      0|      if(!endptr)
 2247|      0|        return FALSE;
 2248|      0|      name++;
 2249|      0|      namelen = endptr - name;
 2250|      0|    }
 2251|      0|    else
 2252|      0|      namelen = strlen(name);
 2253|       |
 2254|      0|    for(tok_start = 0; tok_start < no_proxy_len; tok_start = tok_end + 1) {
 2255|      0|      while(tok_start < no_proxy_len &&
 2256|      0|            strchr(separator, no_proxy[tok_start]) != NULL) {
 2257|       |        /* Look for the beginning of the token. */
 2258|      0|        ++tok_start;
 2259|      0|      }
 2260|       |
 2261|      0|      if(tok_start == no_proxy_len)
 2262|      0|        break; /* It was all trailing separator chars, no more tokens. */
 2263|       |
 2264|      0|      for(tok_end = tok_start; tok_end < no_proxy_len &&
 2265|      0|            strchr(separator, no_proxy[tok_end]) == NULL; ++tok_end)
 2266|       |        /* Look for the end of the token. */
 2267|      0|        ;
 2268|       |
 2269|       |      /* To match previous behavior, where it was necessary to specify
 2270|       |       * ".local.com" to prevent matching "notlocal.com", we will leave
 2271|       |       * the '.' off.
 2272|       |       */
 2273|      0|      if(no_proxy[tok_start] == '.')
 2274|      0|        ++tok_start;
 2275|       |
 2276|      0|      if((tok_end - tok_start) <= namelen) {
 2277|       |        /* Match the last part of the name to the domain we are checking. */
 2278|      0|        const char *checkn = name + namelen - (tok_end - tok_start);
 2279|      0|        if(strncasecompare(no_proxy + tok_start, checkn,
 2280|      0|                           tok_end - tok_start)) {
 2281|      0|          if((tok_end - tok_start) == namelen || *(checkn - 1) == '.') {
 2282|       |            /* We either have an exact match, or the previous character is a .
 2283|       |             * so it is within the same domain, so no proxy for this host.
 2284|       |             */
 2285|      0|            return TRUE;
 2286|      0|          }
 2287|      0|        }
 2288|      0|      } /* if((tok_end - tok_start) <= namelen) */
 2289|      0|    } /* for(tok_start = 0; tok_start < no_proxy_len;
 2290|       |         tok_start = tok_end + 1) */
 2291|      0|  } /* NO_PROXY was specified and it wasn't just an asterisk */
 2292|       |
 2293|    524|  return FALSE;
 2294|    524|}
url.c:detect_proxy:
 2304|    524|{
 2305|    524|  char *proxy = NULL;
 2306|       |
 2307|       |  /* If proxy was not specified, we check for default proxy environment
 2308|       |   * variables, to enable i.e Lynx compliance:
 2309|       |   *
 2310|       |   * http_proxy=http://some.server.dom:port/
 2311|       |   * https_proxy=http://some.server.dom:port/
 2312|       |   * ftp_proxy=http://some.server.dom:port/
 2313|       |   * no_proxy=domain1.dom,host.domain2.dom
 2314|       |   *   (a comma-separated list of hosts which should
 2315|       |   *   not be proxied, or an asterisk to override
 2316|       |   *   all proxy variables)
 2317|       |   * all_proxy=http://some.server.dom:port/
 2318|       |   *   (seems to exist for the CERN www lib. Probably
 2319|       |   *   the first to check for.)
 2320|       |   *
 2321|       |   * For compatibility, the all-uppercase versions of these variables are
 2322|       |   * checked if the lowercase versions don't exist.
 2323|       |   */
 2324|    524|  char proxy_env[128];
 2325|    524|  const char *protop = conn->handler->scheme;
 2326|    524|  char *envp = proxy_env;
 2327|    524|  char *prox;
 2328|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
 2329|       |  (void)data;
 2330|       |#endif
 2331|       |
 2332|       |  /* Now, build <protocol>_proxy and check for such a one to use */
 2333|  2.14k|  while(*protop)
 2334|  1.62k|    *envp++ = (char)tolower((int)*protop++);
 2335|       |
 2336|       |  /* append _proxy */
 2337|    524|  strcpy(envp, "_proxy");
 2338|       |
 2339|       |  /* read the protocol proxy: */
 2340|    524|  prox = curl_getenv(proxy_env);
 2341|       |
 2342|       |  /*
 2343|       |   * We don't try the uppercase version of HTTP_PROXY because of
 2344|       |   * security reasons:
 2345|       |   *
 2346|       |   * When curl is used in a webserver application
 2347|       |   * environment (cgi or php), this environment variable can
 2348|       |   * be controlled by the web server user by setting the
 2349|       |   * http header 'Proxy:' to some value.
 2350|       |   *
 2351|       |   * This can cause 'internal' http/ftp requests to be
 2352|       |   * arbitrarily redirected by any external attacker.
 2353|       |   */
 2354|    524|  if(!prox && !strcasecompare("http_proxy", proxy_env)) {
 2355|       |    /* There was no lowercase variable, try the uppercase version: */
 2356|    524|    Curl_strntoupper(proxy_env, proxy_env, sizeof(proxy_env));
 2357|    524|    prox = curl_getenv(proxy_env);
 2358|    524|  }
 2359|       |
 2360|    524|  envp = proxy_env;
 2361|    524|  if(prox) {
 2362|      0|    proxy = prox; /* use this */
 2363|      0|  }
 2364|    524|  else {
 2365|    524|    envp = (char *)"all_proxy";
 2366|    524|    proxy = curl_getenv(envp); /* default proxy to use */
 2367|    524|    if(!proxy) {
 2368|    524|      envp = (char *)"ALL_PROXY";
 2369|    524|      proxy = curl_getenv(envp);
 2370|    524|    }
 2371|    524|  }
 2372|    524|  if(proxy)
 2373|      0|    infof(data, "Uses proxy env variable %s == '%s'", envp, proxy);
 2374|       |
 2375|    524|  return proxy;
 2376|    524|}
url.c:parse_remote_port:
 2888|    524|{
 2889|       |
 2890|    524|  if(data->set.use_port && data->state.allow_port) {
 2891|       |    /* if set, we use this instead of the port possibly given in the URL */
 2892|      0|    char portbuf[16];
 2893|      0|    CURLUcode uc;
 2894|      0|    conn->remote_port = (unsigned short)data->set.use_port;
 2895|      0|    msnprintf(portbuf, sizeof(portbuf), "%d", conn->remote_port);
 2896|      0|    uc = curl_url_set(data->state.uh, CURLUPART_PORT, portbuf, 0);
 2897|      0|    if(uc)
 2898|      0|      return CURLE_OUT_OF_MEMORY;
 2899|      0|  }
 2900|       |
 2901|    524|  return CURLE_OK;
 2902|    524|}
url.c:override_login:
 2910|    524|{
 2911|    524|  CURLUcode uc;
 2912|    524|  char **userp = &conn->user;
 2913|    524|  char **passwdp = &conn->passwd;
 2914|    524|  char **optionsp = &conn->options;
 2915|       |
 2916|    524|#ifndef CURL_DISABLE_NETRC
 2917|    524|  if(data->set.use_netrc == CURL_NETRC_REQUIRED && conn->bits.user_passwd) {
 2918|      0|    Curl_safefree(*userp);
 2919|      0|    Curl_safefree(*passwdp);
 2920|      0|    conn->bits.user_passwd = FALSE; /* disable user+password */
 2921|      0|  }
 2922|    524|#endif
 2923|       |
 2924|    524|  if(data->set.str[STRING_OPTIONS]) {
 2925|      0|    free(*optionsp);
 2926|      0|    *optionsp = strdup(data->set.str[STRING_OPTIONS]);
 2927|      0|    if(!*optionsp)
 2928|      0|      return CURLE_OUT_OF_MEMORY;
 2929|      0|  }
 2930|       |
 2931|    524|#ifndef CURL_DISABLE_NETRC
 2932|    524|  conn->bits.netrc = FALSE;
 2933|    524|  if(data->set.use_netrc && !data->set.str[STRING_USERNAME]) {
 2934|      0|    bool netrc_user_changed = FALSE;
 2935|      0|    bool netrc_passwd_changed = FALSE;
 2936|      0|    int ret;
 2937|       |
 2938|      0|    ret = Curl_parsenetrc(conn->host.name,
 2939|      0|                          userp, passwdp,
 2940|      0|                          &netrc_user_changed, &netrc_passwd_changed,
 2941|      0|                          data->set.str[STRING_NETRC_FILE]);
 2942|      0|    if(ret > 0) {
 2943|      0|      infof(data, "Couldn't find host %s in the %s file; using defaults",
 2944|      0|            conn->host.name, data->set.str[STRING_NETRC_FILE]);
 2945|      0|    }
 2946|      0|    else if(ret < 0) {
 2947|      0|      return CURLE_OUT_OF_MEMORY;
 2948|      0|    }
 2949|      0|    else {
 2950|       |      /* set bits.netrc TRUE to remember that we got the name from a .netrc
 2951|       |         file, so that it is safe to use even if we followed a Location: to a
 2952|       |         different host or similar. */
 2953|      0|      conn->bits.netrc = TRUE;
 2954|      0|      conn->bits.user_passwd = TRUE; /* enable user+password */
 2955|      0|    }
 2956|      0|  }
 2957|    524|#endif
 2958|       |
 2959|       |  /* for updated strings, we update them in the URL */
 2960|    524|  if(*userp) {
 2961|    187|    CURLcode result = Curl_setstropt(&data->state.aptr.user, *userp);
 2962|    187|    if(result)
 2963|      0|      return result;
 2964|    187|  }
 2965|    524|  if(data->state.aptr.user) {
 2966|    348|    uc = curl_url_set(data->state.uh, CURLUPART_USER, data->state.aptr.user,
 2967|    348|                      CURLU_URLENCODE);
 2968|    348|    if(uc)
 2969|      0|      return Curl_uc_to_curlcode(uc);
 2970|    348|    if(!*userp) {
 2971|    161|      *userp = strdup(data->state.aptr.user);
 2972|    161|      if(!*userp)
 2973|      0|        return CURLE_OUT_OF_MEMORY;
 2974|    161|    }
 2975|    348|  }
 2976|       |
 2977|    524|  if(*passwdp) {
 2978|     12|    CURLcode result = Curl_setstropt(&data->state.aptr.passwd, *passwdp);
 2979|     12|    if(result)
 2980|      0|      return result;
 2981|     12|  }
 2982|    524|  if(data->state.aptr.passwd) {
 2983|     17|    uc = curl_url_set(data->state.uh, CURLUPART_PASSWORD,
 2984|     17|                      data->state.aptr.passwd, CURLU_URLENCODE);
 2985|     17|    if(uc)
 2986|      0|      return Curl_uc_to_curlcode(uc);
 2987|     17|    if(!*passwdp) {
 2988|      5|      *passwdp = strdup(data->state.aptr.passwd);
 2989|      5|      if(!*passwdp)
 2990|      0|        return CURLE_OUT_OF_MEMORY;
 2991|      5|    }
 2992|     17|  }
 2993|       |
 2994|    524|  return CURLE_OK;
 2995|    524|}
url.c:set_login:
 3001|    524|{
 3002|    524|  CURLcode result = CURLE_OK;
 3003|    524|  const char *setuser = CURL_DEFAULT_USER;
 3004|    524|  const char *setpasswd = CURL_DEFAULT_PASSWORD;
 3005|       |
 3006|       |  /* If our protocol needs a password and we have none, use the defaults */
 3007|    524|  if((conn->handler->flags & PROTOPT_NEEDSPWD) && !conn->bits.user_passwd)
 3008|    175|    ;
 3009|    349|  else {
 3010|    349|    setuser = "";
 3011|    349|    setpasswd = "";
 3012|    349|  }
 3013|       |  /* Store the default user */
 3014|    524|  if(!conn->user) {
 3015|    176|    conn->user = strdup(setuser);
 3016|    176|    if(!conn->user)
 3017|      0|      return CURLE_OUT_OF_MEMORY;
 3018|    176|  }
 3019|       |
 3020|       |  /* Store the default password */
 3021|    524|  if(!conn->passwd) {
 3022|    507|    conn->passwd = strdup(setpasswd);
 3023|    507|    if(!conn->passwd)
 3024|      0|      result = CURLE_OUT_OF_MEMORY;
 3025|    507|  }
 3026|       |
 3027|    524|  return result;
 3028|    524|}
url.c:parse_connect_to_slist:
 3211|    524|{
 3212|    524|  CURLcode result = CURLE_OK;
 3213|    524|  char *host = NULL;
 3214|    524|  int port = -1;
 3215|       |
 3216|  1.04k|  while(conn_to_host && !host && port == -1) {
 3217|    524|    result = parse_connect_to_string(data, conn, conn_to_host->data,
 3218|    524|                                     &host, &port);
 3219|    524|    if(result)
 3220|      0|      return result;
 3221|       |
 3222|    524|    if(host && *host) {
 3223|    524|      conn->conn_to_host.rawalloc = host;
 3224|    524|      conn->conn_to_host.name = host;
 3225|    524|      conn->bits.conn_to_host = TRUE;
 3226|       |
 3227|    524|      infof(data, "Connecting to hostname: %s", host);
 3228|    524|    }
 3229|      0|    else {
 3230|       |      /* no "connect to host" */
 3231|      0|      conn->bits.conn_to_host = FALSE;
 3232|      0|      Curl_safefree(host);
 3233|      0|    }
 3234|       |
 3235|    524|    if(port >= 0) {
 3236|      0|      conn->conn_to_port = port;
 3237|      0|      conn->bits.conn_to_port = TRUE;
 3238|      0|      infof(data, "Connecting to port: %d", port);
 3239|      0|    }
 3240|    524|    else {
 3241|       |      /* no "connect to port" */
 3242|    524|      conn->bits.conn_to_port = FALSE;
 3243|    524|      port = -1;
 3244|    524|    }
 3245|       |
 3246|    524|    conn_to_host = conn_to_host->next;
 3247|    524|  }
 3248|       |
 3249|    524|#ifndef CURL_DISABLE_ALTSVC
 3250|    524|  if(data->asi && !host && (port == -1) &&
 3251|    524|     ((conn->handler->protocol == CURLPROTO_HTTPS) ||
 3252|      0|#ifdef CURLDEBUG
 3253|       |      /* allow debug builds to circumvent the HTTPS restriction */
 3254|      0|      getenv("CURL_ALTSVC_HTTP")
 3255|       |#else
 3256|       |      0
 3257|       |#endif
 3258|      0|       )) {
 3259|       |    /* no connect_to match, try alt-svc! */
 3260|      0|    enum alpnid srcalpnid;
 3261|      0|    bool hit;
 3262|      0|    struct altsvc *as;
 3263|      0|    const int allowed_versions = ( ALPN_h1
 3264|      0|#ifdef USE_NGHTTP2
 3265|      0|      | ALPN_h2
 3266|      0|#endif
 3267|       |#ifdef ENABLE_QUIC
 3268|       |      | ALPN_h3
 3269|       |#endif
 3270|      0|      ) & data->asi->flags;
 3271|       |
 3272|      0|    host = conn->host.rawalloc;
 3273|      0|#ifdef USE_NGHTTP2
 3274|       |    /* with h2 support, check that first */
 3275|      0|    srcalpnid = ALPN_h2;
 3276|      0|    hit = Curl_altsvc_lookup(data->asi,
 3277|      0|                             srcalpnid, host, conn->remote_port, /* from */
 3278|      0|                             &as /* to */,
 3279|      0|                             allowed_versions);
 3280|      0|    if(!hit)
 3281|      0|#endif
 3282|      0|    {
 3283|      0|      srcalpnid = ALPN_h1;
 3284|      0|      hit = Curl_altsvc_lookup(data->asi,
 3285|      0|                               srcalpnid, host, conn->remote_port, /* from */
 3286|      0|                               &as /* to */,
 3287|      0|                               allowed_versions);
 3288|      0|    }
 3289|      0|    if(hit) {
 3290|      0|      char *hostd = strdup((char *)as->dst.host);
 3291|      0|      if(!hostd)
 3292|      0|        return CURLE_OUT_OF_MEMORY;
 3293|      0|      conn->conn_to_host.rawalloc = hostd;
 3294|      0|      conn->conn_to_host.name = hostd;
 3295|      0|      conn->bits.conn_to_host = TRUE;
 3296|      0|      conn->conn_to_port = as->dst.port;
 3297|      0|      conn->bits.conn_to_port = TRUE;
 3298|      0|      conn->bits.altused = TRUE;
 3299|      0|      infof(data, "Alt-svc connecting from [%s]%s:%d to [%s]%s:%d",
 3300|      0|            Curl_alpnid2str(srcalpnid), host, conn->remote_port,
 3301|      0|            Curl_alpnid2str(as->dst.alpnid), hostd, as->dst.port);
 3302|      0|      if(srcalpnid != as->dst.alpnid) {
 3303|       |        /* protocol version switch */
 3304|      0|        switch(as->dst.alpnid) {
 3305|      0|        case ALPN_h1:
 3306|      0|          conn->httpversion = 11;
 3307|      0|          break;
 3308|      0|        case ALPN_h2:
 3309|      0|          conn->httpversion = 20;
 3310|      0|          break;
 3311|      0|        case ALPN_h3:
 3312|      0|          conn->transport = TRNSPRT_QUIC;
 3313|      0|          conn->httpversion = 30;
 3314|      0|          break;
 3315|      0|        default: /* shouldn't be possible */
 3316|      0|          break;
 3317|      0|        }
 3318|      0|      }
 3319|      0|    }
 3320|      0|  }
 3321|    524|#endif
 3322|       |
 3323|    524|  return result;
 3324|    524|}
url.c:parse_connect_to_string:
 3143|    524|{
 3144|    524|  CURLcode result = CURLE_OK;
 3145|    524|  const char *ptr = conn_to_host;
 3146|    524|  int host_match = FALSE;
 3147|    524|  int port_match = FALSE;
 3148|       |
 3149|    524|  *host_result = NULL;
 3150|    524|  *port_result = -1;
 3151|       |
 3152|    524|  if(*ptr == ':') {
 3153|       |    /* an empty hostname always matches */
 3154|    524|    host_match = TRUE;
 3155|    524|    ptr++;
 3156|    524|  }
 3157|      0|  else {
 3158|       |    /* check whether the URL's hostname matches */
 3159|      0|    size_t hostname_to_match_len;
 3160|      0|    char *hostname_to_match = aprintf("%s%s%s",
 3161|      0|                                      conn->bits.ipv6_ip ? "[" : "",
 3162|      0|                                      conn->host.name,
 3163|      0|                                      conn->bits.ipv6_ip ? "]" : "");
 3164|      0|    if(!hostname_to_match)
 3165|      0|      return CURLE_OUT_OF_MEMORY;
 3166|      0|    hostname_to_match_len = strlen(hostname_to_match);
 3167|      0|    host_match = strncasecompare(ptr, hostname_to_match,
 3168|      0|                                 hostname_to_match_len);
 3169|      0|    free(hostname_to_match);
 3170|      0|    ptr += hostname_to_match_len;
 3171|       |
 3172|      0|    host_match = host_match && *ptr == ':';
 3173|      0|    ptr++;
 3174|      0|  }
 3175|       |
 3176|    524|  if(host_match) {
 3177|    524|    if(*ptr == ':') {
 3178|       |      /* an empty port always matches */
 3179|    524|      port_match = TRUE;
 3180|    524|      ptr++;
 3181|    524|    }
 3182|      0|    else {
 3183|       |      /* check whether the URL's port matches */
 3184|      0|      char *ptr_next = strchr(ptr, ':');
 3185|      0|      if(ptr_next) {
 3186|      0|        char *endp = NULL;
 3187|      0|        long port_to_match = strtol(ptr, &endp, 10);
 3188|      0|        if((endp == ptr_next) && (port_to_match == conn->remote_port)) {
 3189|      0|          port_match = TRUE;
 3190|      0|          ptr = ptr_next + 1;
 3191|      0|        }
 3192|      0|      }
 3193|      0|    }
 3194|    524|  }
 3195|       |
 3196|    524|  if(host_match && port_match) {
 3197|       |    /* parse the hostname and port to connect to */
 3198|    524|    result = parse_connect_to_host_port(data, ptr, host_result, port_result);
 3199|    524|  }
 3200|       |
 3201|    524|  return result;
 3202|    524|}
url.c:parse_connect_to_host_port:
 3039|    524|{
 3040|    524|  char *host_dup;
 3041|    524|  char *hostptr;
 3042|    524|  char *host_portno;
 3043|    524|  char *portptr;
 3044|    524|  int port = -1;
 3045|    524|  CURLcode result = CURLE_OK;
 3046|       |
 3047|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
 3048|       |  (void) data;
 3049|       |#endif
 3050|       |
 3051|    524|  *hostname_result = NULL;
 3052|    524|  *port_result = -1;
 3053|       |
 3054|    524|  if(!host || !*host)
 3055|      0|    return CURLE_OK;
 3056|       |
 3057|    524|  host_dup = strdup(host);
 3058|    524|  if(!host_dup)
 3059|      0|    return CURLE_OUT_OF_MEMORY;
 3060|       |
 3061|    524|  hostptr = host_dup;
 3062|       |
 3063|       |  /* start scanning for port number at this point */
 3064|    524|  portptr = hostptr;
 3065|       |
 3066|       |  /* detect and extract RFC6874-style IPv6-addresses */
 3067|    524|  if(*hostptr == '[') {
 3068|      0|#ifdef ENABLE_IPV6
 3069|      0|    char *ptr = ++hostptr; /* advance beyond the initial bracket */
 3070|      0|    while(*ptr && (ISXDIGIT(*ptr) || (*ptr == ':') || (*ptr == '.')))
 3071|      0|      ptr++;
 3072|      0|    if(*ptr == '%') {
 3073|       |      /* There might be a zone identifier */
 3074|      0|      if(strncmp("%25", ptr, 3))
 3075|      0|        infof(data, "Please URL encode %% as %%25, see RFC 6874.");
 3076|      0|      ptr++;
 3077|       |      /* Allow unreserved characters as defined in RFC 3986 */
 3078|      0|      while(*ptr && (ISALPHA(*ptr) || ISXDIGIT(*ptr) || (*ptr == '-') ||
 3079|      0|                     (*ptr == '.') || (*ptr == '_') || (*ptr == '~')))
 3080|      0|        ptr++;
 3081|      0|    }
 3082|      0|    if(*ptr == ']')
 3083|       |      /* yeps, it ended nicely with a bracket as well */
 3084|      0|      *ptr++ = '\0';
 3085|      0|    else
 3086|      0|      infof(data, "Invalid IPv6 address format");
 3087|      0|    portptr = ptr;
 3088|       |    /* Note that if this didn't end with a bracket, we still advanced the
 3089|       |     * hostptr first, but I can't see anything wrong with that as no host
 3090|       |     * name nor a numeric can legally start with a bracket.
 3091|       |     */
 3092|       |#else
 3093|       |    failf(data, "Use of IPv6 in *_CONNECT_TO without IPv6 support built-in!");
 3094|       |    result = CURLE_NOT_BUILT_IN;
 3095|       |    goto error;
 3096|       |#endif
 3097|      0|  }
 3098|       |
 3099|       |  /* Get port number off server.com:1080 */
 3100|    524|  host_portno = strchr(portptr, ':');
 3101|    524|  if(host_portno) {
 3102|    524|    char *endp = NULL;
 3103|    524|    *host_portno = '\0'; /* cut off number from host name */
 3104|    524|    host_portno++;
 3105|    524|    if(*host_portno) {
 3106|      0|      long portparse = strtol(host_portno, &endp, 10);
 3107|      0|      if((endp && *endp) || (portparse < 0) || (portparse > 65535)) {
 3108|      0|        failf(data, "No valid port number in connect to host string (%s)",
 3109|      0|              host_portno);
 3110|      0|        result = CURLE_SETOPT_OPTION_SYNTAX;
 3111|      0|        goto error;
 3112|      0|      }
 3113|      0|      else
 3114|      0|        port = (int)portparse; /* we know it will fit */
 3115|      0|    }
 3116|    524|  }
 3117|       |
 3118|       |  /* now, clone the cleaned host name */
 3119|    524|  if(hostptr) {
 3120|    524|    *hostname_result = strdup(hostptr);
 3121|    524|    if(!*hostname_result) {
 3122|      0|      result = CURLE_OUT_OF_MEMORY;
 3123|      0|      goto error;
 3124|      0|    }
 3125|    524|  }
 3126|       |
 3127|    524|  *port_result = port;
 3128|       |
 3129|    524|  error:
 3130|    524|  free(host_dup);
 3131|    524|  return result;
 3132|    524|}
url.c:setup_connection_internals:
 2174|    524|{
 2175|    524|  const struct Curl_handler *p;
 2176|    524|  CURLcode result;
 2177|       |
 2178|       |  /* Perform setup complement if some. */
 2179|    524|  p = conn->handler;
 2180|       |
 2181|    524|  if(p->setup_connection) {
 2182|    524|    result = (*p->setup_connection)(data, conn);
 2183|       |
 2184|    524|    if(result)
 2185|      0|      return result;
 2186|       |
 2187|    524|    p = conn->handler;              /* May have changed. */
 2188|    524|  }
 2189|       |
 2190|    524|  if(conn->port < 0)
 2191|       |    /* we check for -1 here since if proxy was detected already, this
 2192|       |       was very likely already set to the proxy port */
 2193|      0|    conn->port = p->defport;
 2194|       |
 2195|    524|  return CURLE_OK;
 2196|    524|}
url.c:setup_range:
 2136|    524|{
 2137|    524|  struct UrlState *s = &data->state;
 2138|    524|  s->resume_from = data->set.set_resume_from;
 2139|    524|  if(s->resume_from || data->set.str[STRING_SET_RANGE]) {
 2140|      1|    if(s->rangestringalloc)
 2141|      0|      free(s->range);
 2142|       |
 2143|      1|    if(s->resume_from)
 2144|      0|      s->range = aprintf("%" CURL_FORMAT_CURL_OFF_T "-", s->resume_from);
 2145|      1|    else
 2146|      1|      s->range = strdup(data->set.str[STRING_SET_RANGE]);
 2147|       |
 2148|      1|    s->rangestringalloc = (s->range) ? TRUE : FALSE;
 2149|       |
 2150|      1|    if(!s->range)
 2151|      0|      return CURLE_OUT_OF_MEMORY;
 2152|       |
 2153|       |    /* tell ourselves to fetch this range */
 2154|      1|    s->use_range = TRUE;        /* enable range download */
 2155|      1|  }
 2156|    523|  else
 2157|    523|    s->use_range = FALSE; /* disable range download */
 2158|       |
 2159|    524|  return CURLE_OK;
 2160|    524|}
url.c:prune_dead_connections:
 1077|    524|{
 1078|    524|  struct curltime now = Curl_now();
 1079|    524|  timediff_t elapsed;
 1080|       |
 1081|    524|  DEBUGASSERT(!data->conn); /* no connection */
 1082|    524|  CONNCACHE_LOCK(data);
 1083|    524|  elapsed =
 1084|    524|    Curl_timediff(now, data->state.conn_cache->last_cleanup);
 1085|    524|  CONNCACHE_UNLOCK(data);
 1086|       |
 1087|    524|  if(elapsed >= 1000L) {
 1088|    524|    struct prunedead prune;
 1089|    524|    prune.data = data;
 1090|    524|    prune.extracted = NULL;
 1091|    524|    while(Curl_conncache_foreach(data, data->state.conn_cache, &prune,
 1092|    524|                                 call_extract_if_dead)) {
 1093|       |      /* unlocked */
 1094|       |
 1095|       |      /* remove connection from cache */
 1096|      0|      Curl_conncache_remove_conn(data, prune.extracted, TRUE);
 1097|       |
 1098|       |      /* disconnect it */
 1099|      0|      (void)Curl_disconnect(data, prune.extracted, TRUE);
 1100|      0|    }
 1101|    524|    CONNCACHE_LOCK(data);
 1102|    524|    data->state.conn_cache->last_cleanup = now;
 1103|    524|    CONNCACHE_UNLOCK(data);
 1104|    524|  }
 1105|    524|}
url.c:ConnectionExists:
 1124|    524|{
 1125|    524|  struct connectdata *check;
 1126|    524|  struct connectdata *chosen = 0;
 1127|    524|  bool foundPendingCandidate = FALSE;
 1128|    524|  bool canmultiplex = IsMultiplexingPossible(data, needle);
 1129|    524|  struct connectbundle *bundle;
 1130|    524|  const char *hostbundle;
 1131|       |
 1132|    524|#ifdef USE_NTLM
 1133|    524|  bool wantNTLMhttp = ((data->state.authhost.want &
 1134|    524|                        (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1135|    524|                       (needle->handler->protocol & PROTO_FAMILY_HTTP));
 1136|    524|#ifndef CURL_DISABLE_PROXY
 1137|    524|  bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&
 1138|    524|                            ((data->state.authproxy.want &
 1139|      0|                              (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1140|      0|                             (needle->handler->protocol & PROTO_FAMILY_HTTP)));
 1141|       |#else
 1142|       |  bool wantProxyNTLMhttp = FALSE;
 1143|       |#endif
 1144|    524|#endif
 1145|       |
 1146|    524|  *force_reuse = FALSE;
 1147|    524|  *waitpipe = FALSE;
 1148|       |
 1149|       |  /* Look up the bundle with all the connections to this particular host.
 1150|       |     Locks the connection cache, beware of early returns! */
 1151|    524|  bundle = Curl_conncache_find_bundle(data, needle, data->state.conn_cache,
 1152|    524|                                      &hostbundle);
 1153|    524|  if(bundle) {
 1154|       |    /* Max pipe length is zero (unlimited) for multiplexed connections */
 1155|      0|    struct Curl_llist_element *curr;
 1156|       |
 1157|      0|    infof(data, "Found bundle for host %s: %p [%s]",
 1158|      0|          hostbundle, (void *)bundle, (bundle->multiuse == BUNDLE_MULTIPLEX ?
 1159|      0|                                       "can multiplex" : "serially"));
 1160|       |
 1161|       |    /* We can't multiplex if we don't know anything about the server */
 1162|      0|    if(canmultiplex) {
 1163|      0|      if(bundle->multiuse == BUNDLE_UNKNOWN) {
 1164|      0|        if(data->set.pipewait) {
 1165|      0|          infof(data, "Server doesn't support multiplex yet, wait");
 1166|      0|          *waitpipe = TRUE;
 1167|      0|          CONNCACHE_UNLOCK(data);
 1168|      0|          return FALSE; /* no re-use */
 1169|      0|        }
 1170|       |
 1171|      0|        infof(data, "Server doesn't support multiplex (yet)");
 1172|      0|        canmultiplex = FALSE;
 1173|      0|      }
 1174|      0|      if((bundle->multiuse == BUNDLE_MULTIPLEX) &&
 1175|      0|         !Curl_multiplex_wanted(data->multi)) {
 1176|      0|        infof(data, "Could multiplex, but not asked to!");
 1177|      0|        canmultiplex = FALSE;
 1178|      0|      }
 1179|      0|      if(bundle->multiuse == BUNDLE_NO_MULTIUSE) {
 1180|      0|        infof(data, "Can not multiplex, even if we wanted to!");
 1181|      0|        canmultiplex = FALSE;
 1182|      0|      }
 1183|      0|    }
 1184|       |
 1185|      0|    curr = bundle->conn_list.head;
 1186|      0|    while(curr) {
 1187|      0|      bool match = FALSE;
 1188|      0|      size_t multiplexed = 0;
 1189|       |
 1190|       |      /*
 1191|       |       * Note that if we use a HTTP proxy in normal mode (no tunneling), we
 1192|       |       * check connections to that proxy and not to the actual remote server.
 1193|       |       */
 1194|      0|      check = curr->ptr;
 1195|      0|      curr = curr->next;
 1196|       |
 1197|      0|      if(check->bits.connect_only || check->bits.close)
 1198|       |        /* connect-only or to-be-closed connections will not be reused */
 1199|      0|        continue;
 1200|       |
 1201|      0|      if(extract_if_dead(check, data)) {
 1202|       |        /* disconnect it */
 1203|      0|        (void)Curl_disconnect(data, check, TRUE);
 1204|      0|        continue;
 1205|      0|      }
 1206|       |
 1207|      0|      if(data->set.ipver != CURL_IPRESOLVE_WHATEVER
 1208|      0|          && data->set.ipver != check->ip_version) {
 1209|       |        /* skip because the connection is not via the requested IP version */
 1210|      0|        continue;
 1211|      0|      }
 1212|       |
 1213|      0|      if(bundle->multiuse == BUNDLE_MULTIPLEX)
 1214|      0|        multiplexed = CONN_INUSE(check);
 1215|       |
 1216|      0|      if(!canmultiplex) {
 1217|      0|        if(multiplexed) {
 1218|       |          /* can only happen within multi handles, and means that another easy
 1219|       |             handle is using this connection */
 1220|      0|          continue;
 1221|      0|        }
 1222|       |
 1223|      0|        if(Curl_resolver_asynch()) {
 1224|       |          /* primary_ip[0] is NUL only if the resolving of the name hasn't
 1225|       |             completed yet and until then we don't re-use this connection */
 1226|      0|          if(!check->primary_ip[0]) {
 1227|      0|            infof(data,
 1228|      0|                  "Connection #%ld is still name resolving, can't reuse",
 1229|      0|                  check->connection_id);
 1230|      0|            continue;
 1231|      0|          }
 1232|      0|        }
 1233|       |
 1234|      0|        if(check->sock[FIRSTSOCKET] == CURL_SOCKET_BAD) {
 1235|      0|          foundPendingCandidate = TRUE;
 1236|       |          /* Don't pick a connection that hasn't connected yet */
 1237|      0|          infof(data, "Connection #%ld isn't open enough, can't reuse",
 1238|      0|                check->connection_id);
 1239|      0|          continue;
 1240|      0|        }
 1241|      0|      }
 1242|       |
 1243|      0|#ifdef USE_UNIX_SOCKETS
 1244|      0|      if(needle->unix_domain_socket) {
 1245|      0|        if(!check->unix_domain_socket)
 1246|      0|          continue;
 1247|      0|        if(strcmp(needle->unix_domain_socket, check->unix_domain_socket))
 1248|      0|          continue;
 1249|      0|        if(needle->bits.abstract_unix_socket !=
 1250|      0|           check->bits.abstract_unix_socket)
 1251|      0|          continue;
 1252|      0|      }
 1253|      0|      else if(check->unix_domain_socket)
 1254|      0|        continue;
 1255|      0|#endif
 1256|       |
 1257|      0|      if((needle->handler->flags&PROTOPT_SSL) !=
 1258|      0|         (check->handler->flags&PROTOPT_SSL))
 1259|       |        /* don't do mixed SSL and non-SSL connections */
 1260|      0|        if(get_protocol_family(check->handler) !=
 1261|      0|           needle->handler->protocol || !check->bits.tls_upgraded)
 1262|       |          /* except protocols that have been upgraded via TLS */
 1263|      0|          continue;
 1264|       |
 1265|      0|#ifndef CURL_DISABLE_PROXY
 1266|      0|      if(needle->bits.httpproxy != check->bits.httpproxy ||
 1267|      0|         needle->bits.socksproxy != check->bits.socksproxy)
 1268|      0|        continue;
 1269|       |
 1270|      0|      if(needle->bits.socksproxy &&
 1271|      0|        !socks_proxy_info_matches(&needle->socks_proxy,
 1272|      0|                                  &check->socks_proxy))
 1273|      0|        continue;
 1274|      0|#endif
 1275|      0|      if(needle->bits.conn_to_host != check->bits.conn_to_host)
 1276|       |        /* don't mix connections that use the "connect to host" feature and
 1277|       |         * connections that don't use this feature */
 1278|      0|        continue;
 1279|       |
 1280|      0|      if(needle->bits.conn_to_port != check->bits.conn_to_port)
 1281|       |        /* don't mix connections that use the "connect to port" feature and
 1282|       |         * connections that don't use this feature */
 1283|      0|        continue;
 1284|       |
 1285|      0|#ifndef CURL_DISABLE_PROXY
 1286|      0|      if(needle->bits.httpproxy) {
 1287|      0|        if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))
 1288|      0|          continue;
 1289|       |
 1290|      0|        if(needle->bits.tunnel_proxy != check->bits.tunnel_proxy)
 1291|      0|          continue;
 1292|       |
 1293|      0|        if(needle->http_proxy.proxytype == CURLPROXY_HTTPS) {
 1294|       |          /* use https proxy */
 1295|      0|          if(needle->handler->flags&PROTOPT_SSL) {
 1296|       |            /* use double layer ssl */
 1297|      0|            if(!Curl_ssl_config_matches(&needle->proxy_ssl_config,
 1298|      0|                                        &check->proxy_ssl_config))
 1299|      0|              continue;
 1300|      0|            if(check->proxy_ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1301|      0|              continue;
 1302|      0|          }
 1303|      0|          else {
 1304|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1305|      0|                                        &check->ssl_config))
 1306|      0|              continue;
 1307|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1308|      0|              continue;
 1309|      0|          }
 1310|      0|        }
 1311|      0|      }
 1312|      0|#endif
 1313|       |
 1314|      0|      if(!canmultiplex && CONN_INUSE(check))
 1315|       |        /* this request can't be multiplexed but the checked connection is
 1316|       |           already in use so we skip it */
 1317|      0|        continue;
 1318|       |
 1319|      0|      if(CONN_INUSE(check)) {
 1320|       |        /* Subject for multiplex use if 'checks' belongs to the same multi
 1321|       |           handle as 'data' is. */
 1322|      0|        struct Curl_llist_element *e = check->easyq.head;
 1323|      0|        struct Curl_easy *entry = e->ptr;
 1324|      0|        if(entry->multi != data->multi)
 1325|      0|          continue;
 1326|      0|      }
 1327|       |
 1328|      0|      if(needle->localdev || needle->localport) {
 1329|       |        /* If we are bound to a specific local end (IP+port), we must not
 1330|       |           re-use a random other one, although if we didn't ask for a
 1331|       |           particular one we can reuse one that was bound.
 1332|       |
 1333|       |           This comparison is a bit rough and too strict. Since the input
 1334|       |           parameters can be specified in numerous ways and still end up the
 1335|       |           same it would take a lot of processing to make it really accurate.
 1336|       |           Instead, this matching will assume that re-uses of bound connections
 1337|       |           will most likely also re-use the exact same binding parameters and
 1338|       |           missing out a few edge cases shouldn't hurt anyone very much.
 1339|       |        */
 1340|      0|        if((check->localport != needle->localport) ||
 1341|      0|           (check->localportrange != needle->localportrange) ||
 1342|      0|           (needle->localdev &&
 1343|      0|            (!check->localdev || strcmp(check->localdev, needle->localdev))))
 1344|      0|          continue;
 1345|      0|      }
 1346|       |
 1347|      0|      if(!(needle->handler->flags & PROTOPT_CREDSPERREQUEST)) {
 1348|       |        /* This protocol requires credentials per connection,
 1349|       |           so verify that we're using the same name and password as well */
 1350|      0|        if(strcmp(needle->user, check->user) ||
 1351|      0|           strcmp(needle->passwd, check->passwd)) {
 1352|       |          /* one of them was different */
 1353|      0|          continue;
 1354|      0|        }
 1355|      0|      }
 1356|       |
 1357|       |      /* If multiplexing isn't enabled on the h2 connection and h1 is
 1358|       |         explicitly requested, handle it: */
 1359|      0|      if((needle->handler->protocol & PROTO_FAMILY_HTTP) &&
 1360|      0|         (check->httpversion >= 20) &&
 1361|      0|         (data->state.httpwant < CURL_HTTP_VERSION_2_0))
 1362|      0|        continue;
 1363|       |
 1364|      0|      if((needle->handler->flags&PROTOPT_SSL)
 1365|      0|#ifndef CURL_DISABLE_PROXY
 1366|      0|         || !needle->bits.httpproxy || needle->bits.tunnel_proxy
 1367|      0|#endif
 1368|      0|        ) {
 1369|       |        /* The requested connection does not use a HTTP proxy or it uses SSL or
 1370|       |           it is a non-SSL protocol tunneled or it is a non-SSL protocol which
 1371|       |           is allowed to be upgraded via TLS */
 1372|       |
 1373|      0|        if((strcasecompare(needle->handler->scheme, check->handler->scheme) ||
 1374|      0|            (get_protocol_family(check->handler) ==
 1375|      0|             needle->handler->protocol && check->bits.tls_upgraded)) &&
 1376|      0|           (!needle->bits.conn_to_host || strcasecompare(
 1377|      0|            needle->conn_to_host.name, check->conn_to_host.name)) &&
 1378|      0|           (!needle->bits.conn_to_port ||
 1379|      0|             needle->conn_to_port == check->conn_to_port) &&
 1380|      0|           strcasecompare(needle->host.name, check->host.name) &&
 1381|      0|           needle->remote_port == check->remote_port) {
 1382|       |          /* The schemes match or the protocol family is the same and the
 1383|       |             previous connection was TLS upgraded, and the hostname and host
 1384|       |             port match */
 1385|      0|          if(needle->handler->flags & PROTOPT_SSL) {
 1386|       |            /* This is a SSL connection so verify that we're using the same
 1387|       |               SSL options as well */
 1388|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1389|      0|                                        &check->ssl_config)) {
 1390|      0|              DEBUGF(infof(data,
 1391|      0|                           "Connection #%ld has different SSL parameters, "
 1392|      0|                           "can't reuse",
 1393|      0|                           check->connection_id));
 1394|      0|              continue;
 1395|      0|            }
 1396|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete) {
 1397|      0|              foundPendingCandidate = TRUE;
 1398|      0|              DEBUGF(infof(data,
 1399|      0|                           "Connection #%ld has not started SSL connect, "
 1400|      0|                           "can't reuse",
 1401|      0|                           check->connection_id));
 1402|      0|              continue;
 1403|      0|            }
 1404|      0|          }
 1405|      0|          match = TRUE;
 1406|      0|        }
 1407|      0|      }
 1408|      0|      else {
 1409|       |        /* The requested connection is using the same HTTP proxy in normal
 1410|       |           mode (no tunneling) */
 1411|      0|        match = TRUE;
 1412|      0|      }
 1413|       |
 1414|      0|      if(match) {
 1415|      0|#if defined(USE_NTLM)
 1416|       |        /* If we are looking for an HTTP+NTLM connection, check if this is
 1417|       |           already authenticating with the right credentials. If not, keep
 1418|       |           looking so that we can reuse NTLM connections if
 1419|       |           possible. (Especially we must not reuse the same connection if
 1420|       |           partway through a handshake!) */
 1421|      0|        if(wantNTLMhttp) {
 1422|      0|          if(strcmp(needle->user, check->user) ||
 1423|      0|             strcmp(needle->passwd, check->passwd)) {
 1424|       |
 1425|       |            /* we prefer a credential match, but this is at least a connection
 1426|       |               that can be reused and "upgraded" to NTLM */
 1427|      0|            if(check->http_ntlm_state == NTLMSTATE_NONE)
 1428|      0|              chosen = check;
 1429|      0|            continue;
 1430|      0|          }
 1431|      0|        }
 1432|      0|        else if(check->http_ntlm_state != NTLMSTATE_NONE) {
 1433|       |          /* Connection is using NTLM auth but we don't want NTLM */
 1434|      0|          continue;
 1435|      0|        }
 1436|       |
 1437|      0|#ifndef CURL_DISABLE_PROXY
 1438|       |        /* Same for Proxy NTLM authentication */
 1439|      0|        if(wantProxyNTLMhttp) {
 1440|       |          /* Both check->http_proxy.user and check->http_proxy.passwd can be
 1441|       |           * NULL */
 1442|      0|          if(!check->http_proxy.user || !check->http_proxy.passwd)
 1443|      0|            continue;
 1444|       |
 1445|      0|          if(strcmp(needle->http_proxy.user, check->http_proxy.user) ||
 1446|      0|             strcmp(needle->http_proxy.passwd, check->http_proxy.passwd))
 1447|      0|            continue;
 1448|      0|        }
 1449|      0|        else if(check->proxy_ntlm_state != NTLMSTATE_NONE) {
 1450|       |          /* Proxy connection is using NTLM auth but we don't want NTLM */
 1451|      0|          continue;
 1452|      0|        }
 1453|      0|#endif
 1454|      0|        if(wantNTLMhttp || wantProxyNTLMhttp) {
 1455|       |          /* Credentials are already checked, we can use this connection */
 1456|      0|          chosen = check;
 1457|       |
 1458|      0|          if((wantNTLMhttp &&
 1459|      0|             (check->http_ntlm_state != NTLMSTATE_NONE)) ||
 1460|      0|              (wantProxyNTLMhttp &&
 1461|      0|               (check->proxy_ntlm_state != NTLMSTATE_NONE))) {
 1462|       |            /* We must use this connection, no other */
 1463|      0|            *force_reuse = TRUE;
 1464|      0|            break;
 1465|      0|          }
 1466|       |
 1467|       |          /* Continue look up for a better connection */
 1468|      0|          continue;
 1469|      0|        }
 1470|      0|#endif
 1471|      0|        if(canmultiplex) {
 1472|       |          /* We can multiplex if we want to. Let's continue looking for
 1473|       |             the optimal connection to use. */
 1474|       |
 1475|      0|          if(!multiplexed) {
 1476|       |            /* We have the optimal connection. Let's stop looking. */
 1477|      0|            chosen = check;
 1478|      0|            break;
 1479|      0|          }
 1480|       |
 1481|      0|#ifdef USE_NGHTTP2
 1482|       |          /* If multiplexed, make sure we don't go over concurrency limit */
 1483|      0|          if(check->bits.multiplex) {
 1484|       |            /* Multiplexed connections can only be HTTP/2 for now */
 1485|      0|            struct http_conn *httpc = &check->proto.httpc;
 1486|      0|            if(multiplexed >= httpc->settings.max_concurrent_streams) {
 1487|      0|              infof(data, "MAX_CONCURRENT_STREAMS reached, skip (%zu)",
 1488|      0|                    multiplexed);
 1489|      0|              continue;
 1490|      0|            }
 1491|      0|            else if(multiplexed >=
 1492|      0|                    Curl_multi_max_concurrent_streams(data->multi)) {
 1493|      0|              infof(data, "client side MAX_CONCURRENT_STREAMS reached"
 1494|      0|                    ", skip (%zu)",
 1495|      0|                    multiplexed);
 1496|      0|              continue;
 1497|      0|            }
 1498|      0|          }
 1499|      0|#endif
 1500|       |          /* When not multiplexed, we have a match here! */
 1501|      0|          chosen = check;
 1502|      0|          infof(data, "Multiplexed connection found!");
 1503|      0|          break;
 1504|      0|        }
 1505|      0|        else {
 1506|       |          /* We have found a connection. Let's stop searching. */
 1507|      0|          chosen = check;
 1508|      0|          break;
 1509|      0|        }
 1510|      0|      }
 1511|      0|    }
 1512|      0|  }
 1513|       |
 1514|    524|  if(chosen) {
 1515|       |    /* mark it as used before releasing the lock */
 1516|      0|    Curl_attach_connnection(data, chosen);
 1517|      0|    CONNCACHE_UNLOCK(data);
 1518|      0|    *usethis = chosen;
 1519|      0|    return TRUE; /* yes, we found one to use! */
 1520|      0|  }
 1521|    524|  CONNCACHE_UNLOCK(data);
 1522|       |
 1523|    524|  if(foundPendingCandidate && data->set.pipewait) {
 1524|      0|    infof(data,
 1525|      0|          "Found pending candidate for reuse and CURLOPT_PIPEWAIT is set");
 1526|      0|    *waitpipe = TRUE;
 1527|      0|  }
 1528|       |
 1529|    524|  return FALSE; /* no matching connecting exists */
 1530|    524|}
url.c:IsMultiplexingPossible:
  906|    524|{
  907|    524|  int avail = 0;
  908|       |
  909|       |  /* If a HTTP protocol and multiplexing is enabled */
  910|    524|  if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  911|    524|     (!conn->bits.protoconnstart || !conn->bits.close)) {
  912|       |
  913|      0|    if(Curl_multiplex_wanted(handle->multi) &&
  914|      0|       (handle->state.httpwant >= CURL_HTTP_VERSION_2))
  915|       |      /* allows HTTP/2 */
  916|      0|      avail |= CURLPIPE_MULTIPLEX;
  917|      0|  }
  918|    524|  return avail;
  919|    524|}
url.c:resolve_server:
 3332|    524|{
 3333|    524|  CURLcode result = CURLE_OK;
 3334|    524|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 3335|       |
 3336|    524|  DEBUGASSERT(conn);
 3337|    524|  DEBUGASSERT(data);
 3338|       |  /*************************************************************
 3339|       |   * Resolve the name of the server or proxy
 3340|       |   *************************************************************/
 3341|    524|  if(conn->bits.reuse)
 3342|       |    /* We're reusing the connection - no need to resolve anything, and
 3343|       |       idnconvert_hostname() was called already in create_conn() for the re-use
 3344|       |       case. */
 3345|      0|    *async = FALSE;
 3346|       |
 3347|    524|  else {
 3348|       |    /* this is a fresh connect */
 3349|    524|    int rc;
 3350|    524|    struct Curl_dns_entry *hostaddr = NULL;
 3351|       |
 3352|    524|#ifdef USE_UNIX_SOCKETS
 3353|    524|    if(conn->unix_domain_socket) {
 3354|       |      /* Unix domain sockets are local. The host gets ignored, just use the
 3355|       |       * specified domain socket address. Do not cache "DNS entries". There is
 3356|       |       * no DNS involved and we already have the filesystem path available */
 3357|      0|      const char *path = conn->unix_domain_socket;
 3358|       |
 3359|      0|      hostaddr = calloc(1, sizeof(struct Curl_dns_entry));
 3360|      0|      if(!hostaddr)
 3361|      0|        result = CURLE_OUT_OF_MEMORY;
 3362|      0|      else {
 3363|      0|        bool longpath = FALSE;
 3364|      0|        hostaddr->addr = Curl_unix2addr(path, &longpath,
 3365|      0|                                        conn->bits.abstract_unix_socket);
 3366|      0|        if(hostaddr->addr)
 3367|      0|          hostaddr->inuse++;
 3368|      0|        else {
 3369|       |          /* Long paths are not supported for now */
 3370|      0|          if(longpath) {
 3371|      0|            failf(data, "Unix socket path too long: '%s'", path);
 3372|      0|            result = CURLE_COULDNT_RESOLVE_HOST;
 3373|      0|          }
 3374|      0|          else
 3375|      0|            result = CURLE_OUT_OF_MEMORY;
 3376|      0|          free(hostaddr);
 3377|      0|          hostaddr = NULL;
 3378|      0|        }
 3379|      0|      }
 3380|      0|    }
 3381|    524|    else
 3382|    524|#endif
 3383|       |
 3384|    524|    if(!conn->bits.proxy) {
 3385|    524|      struct hostname *connhost;
 3386|    524|      if(conn->bits.conn_to_host)
 3387|    524|        connhost = &conn->conn_to_host;
 3388|      0|      else
 3389|      0|        connhost = &conn->host;
 3390|       |
 3391|       |      /* If not connecting via a proxy, extract the port from the URL, if it is
 3392|       |       * there, thus overriding any defaults that might have been set above. */
 3393|    524|      if(conn->bits.conn_to_port)
 3394|      0|        conn->port = conn->conn_to_port;
 3395|    524|      else
 3396|    524|        conn->port = conn->remote_port;
 3397|       |
 3398|       |      /* Resolve target host right on */
 3399|    524|      conn->hostname_resolve = strdup(connhost->name);
 3400|    524|      if(!conn->hostname_resolve)
 3401|      0|        return CURLE_OUT_OF_MEMORY;
 3402|    524|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3403|    524|                               &hostaddr, timeout_ms);
 3404|    524|      if(rc == CURLRESOLV_PENDING)
 3405|      0|        *async = TRUE;
 3406|       |
 3407|    524|      else if(rc == CURLRESOLV_TIMEDOUT) {
 3408|      0|        failf(data, "Failed to resolve host '%s' with timeout after %ld ms",
 3409|      0|              connhost->dispname,
 3410|      0|              Curl_timediff(Curl_now(), data->progress.t_startsingle));
 3411|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3412|      0|      }
 3413|    524|      else if(!hostaddr) {
 3414|      0|        failf(data, "Could not resolve host: %s", connhost->dispname);
 3415|      0|        result = CURLE_COULDNT_RESOLVE_HOST;
 3416|       |        /* don't return yet, we need to clean up the timeout first */
 3417|      0|      }
 3418|    524|    }
 3419|      0|#ifndef CURL_DISABLE_PROXY
 3420|      0|    else {
 3421|       |      /* This is a proxy that hasn't been resolved yet. */
 3422|       |
 3423|      0|      struct hostname * const host = conn->bits.socksproxy ?
 3424|      0|        &conn->socks_proxy.host : &conn->http_proxy.host;
 3425|       |
 3426|       |      /* resolve proxy */
 3427|      0|      conn->hostname_resolve = strdup(host->name);
 3428|      0|      if(!conn->hostname_resolve)
 3429|      0|        return CURLE_OUT_OF_MEMORY;
 3430|      0|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3431|      0|                               &hostaddr, timeout_ms);
 3432|       |
 3433|      0|      if(rc == CURLRESOLV_PENDING)
 3434|      0|        *async = TRUE;
 3435|       |
 3436|      0|      else if(rc == CURLRESOLV_TIMEDOUT)
 3437|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3438|       |
 3439|      0|      else if(!hostaddr) {
 3440|      0|        failf(data, "Couldn't resolve proxy '%s'", host->dispname);
 3441|      0|        result = CURLE_COULDNT_RESOLVE_PROXY;
 3442|       |        /* don't return yet, we need to clean up the timeout first */
 3443|      0|      }
 3444|      0|    }
 3445|    524|#endif
 3446|    524|    DEBUGASSERT(conn->dns_entry == NULL);
 3447|    524|    conn->dns_entry = hostaddr;
 3448|    524|  }
 3449|       |
 3450|    524|  return result;
 3451|    524|}
url.c:strip_trailing_dot:
 1574|  1.04k|{
 1575|  1.04k|  size_t len;
 1576|  1.04k|  if(!host || !host->name)
 1577|      0|    return;
 1578|  1.04k|  len = strlen(host->name);
 1579|  1.04k|  if(len && (host->name[len-1] == '.'))
 1580|     16|    host->name[len-1] = 0;
 1581|  1.04k|}

Curl_is_absolute_url:
  236|  1.37k|{
  237|  1.37k|  size_t i;
  238|       |#ifdef WIN32
  239|       |  if(STARTS_WITH_DRIVE_PREFIX(url))
  240|       |    return FALSE;
  241|       |#endif
  242|  6.17k|  for(i = 0; i < buflen && url[i]; ++i) {
  243|  6.14k|    char s = url[i];
  244|  6.14k|    if((s == ':') && (url[i + 1] == '/')) {
  245|  1.12k|      if(buf)
  246|    563|        buf[i] = 0;
  247|  1.12k|      return TRUE;
  248|  1.12k|    }
  249|       |    /* RFC 3986 3.1 explains:
  250|       |      scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  251|       |    */
  252|  5.02k|    else if(ISALNUM(s) || (s == '+') || (s == '-') || (s == '.') ) {
  253|  4.80k|      if(buf)
  254|  2.40k|        buf[i] = (char)TOLOWER(s);
  255|  4.80k|    }
  256|    220|    else
  257|    220|      break;
  258|  6.14k|  }
  259|    250|  return FALSE;
  260|  1.37k|}
Curl_parse_port:
  500|    655|{
  501|    655|  char *portptr = NULL;
  502|    655|  char endbracket;
  503|    655|  int len;
  504|       |
  505|       |  /*
  506|       |   * Find the end of an IPv6 address, either on the ']' ending bracket or
  507|       |   * a percent-encoded zone index.
  508|       |   */
  509|    655|  if(1 == sscanf(hostname, "[%*45[0123456789abcdefABCDEF:.]%c%n",
  510|    655|                 &endbracket, &len)) {
  511|      9|    if(']' == endbracket)
  512|      1|      portptr = &hostname[len];
  513|      8|    else if('%' == endbracket) {
  514|      7|      int zonelen = len;
  515|      7|      if(1 == sscanf(hostname + zonelen, "%*[^]]%c%n", &endbracket, &len)) {
  516|      6|        if(']' != endbracket)
  517|      0|          return CURLUE_MALFORMED_INPUT;
  518|      6|        portptr = &hostname[--zonelen + len + 1];
  519|      6|      }
  520|      1|      else
  521|      1|        return CURLUE_MALFORMED_INPUT;
  522|      7|    }
  523|      1|    else
  524|      1|      return CURLUE_MALFORMED_INPUT;
  525|       |
  526|       |    /* this is a RFC2732-style specified IP-address */
  527|      7|    if(portptr && *portptr) {
  528|      3|      if(*portptr != ':')
  529|      1|        return CURLUE_MALFORMED_INPUT;
  530|      3|    }
  531|      4|    else
  532|      4|      portptr = NULL;
  533|      7|  }
  534|    646|  else
  535|    646|    portptr = strchr(hostname, ':');
  536|       |
  537|    652|  if(portptr) {
  538|    193|    char *rest;
  539|    193|    long port;
  540|    193|    char portbuf[7];
  541|       |
  542|       |    /* Browser behavior adaptation. If there's a colon with no digits after,
  543|       |       just cut off the name there which makes us ignore the colon and just
  544|       |       use the default port. Firefox, Chrome and Safari all do that.
  545|       |
  546|       |       Don't do it if the URL has no scheme, to make something that looks like
  547|       |       a scheme not work!
  548|       |    */
  549|    193|    if(!portptr[1]) {
  550|      5|      *portptr = '\0';
  551|      5|      return has_scheme ? CURLUE_OK : CURLUE_BAD_PORT_NUMBER;
  552|      5|    }
  553|       |
  554|    188|    if(!ISDIGIT(portptr[1]))
  555|      2|      return CURLUE_BAD_PORT_NUMBER;
  556|       |
  557|    186|    port = strtol(portptr + 1, &rest, 10);  /* Port number must be decimal */
  558|       |
  559|    186|    if((port <= 0) || (port > 0xffff))
  560|       |      /* Single unix standard says port numbers are 16 bits long, but we don't
  561|       |         treat port zero as OK. */
  562|      2|      return CURLUE_BAD_PORT_NUMBER;
  563|       |
  564|    184|    if(rest[0])
  565|      1|      return CURLUE_BAD_PORT_NUMBER;
  566|       |
  567|    183|    *portptr++ = '\0'; /* cut off the name there */
  568|    183|    *rest = 0;
  569|       |    /* generate a new port number string to get rid of leading zeroes etc */
  570|    183|    msnprintf(portbuf, sizeof(portbuf), "%ld", port);
  571|    183|    u->portnum = port;
  572|    183|    u->port = strdup(portbuf);
  573|    183|    if(!u->port)
  574|      0|      return CURLUE_OUT_OF_MEMORY;
  575|    183|  }
  576|       |
  577|    642|  return CURLUE_OK;
  578|    652|}
curl_url:
 1117|  1.37k|{
 1118|  1.37k|  return calloc(sizeof(struct Curl_URL), 1);
 1119|  1.37k|}
curl_url_cleanup:
 1122|  2.41k|{
 1123|  2.41k|  if(u) {
 1124|    748|    free_urlhandle(u);
 1125|    748|    free(u);
 1126|    748|  }
 1127|  2.41k|}
curl_url_get:
 1161|  4.99k|{
 1162|  4.99k|  char *ptr;
 1163|  4.99k|  CURLUcode ifmissing = CURLUE_UNKNOWN_PART;
 1164|  4.99k|  char portbuf[7];
 1165|  4.99k|  bool urldecode = (flags & CURLU_URLDECODE)?1:0;
 1166|  4.99k|  bool urlencode = (flags & CURLU_URLENCODE)?1:0;
 1167|  4.99k|  bool plusdecode = FALSE;
 1168|  4.99k|  (void)flags;
 1169|  4.99k|  if(!u)
 1170|      0|    return CURLUE_BAD_HANDLE;
 1171|  4.99k|  if(!part)
 1172|      0|    return CURLUE_BAD_PARTPOINTER;
 1173|  4.99k|  *part = NULL;
 1174|       |
 1175|  4.99k|  switch(what) {
 1176|    628|  case CURLUPART_SCHEME:
 1177|    628|    ptr = u->scheme;
 1178|    628|    ifmissing = CURLUE_NO_SCHEME;
 1179|    628|    urldecode = FALSE; /* never for schemes */
 1180|    628|    break;
 1181|    365|  case CURLUPART_USER:
 1182|    365|    ptr = u->user;
 1183|    365|    ifmissing = CURLUE_NO_USER;
 1184|    365|    break;
 1185|    520|  case CURLUPART_PASSWORD:
 1186|    520|    ptr = u->password;
 1187|    520|    ifmissing = CURLUE_NO_PASSWORD;
 1188|    520|    break;
 1189|    524|  case CURLUPART_OPTIONS:
 1190|    524|    ptr = u->options;
 1191|    524|    ifmissing = CURLUE_NO_OPTIONS;
 1192|    524|    break;
 1193|    628|  case CURLUPART_HOST:
 1194|    628|    ptr = u->host;
 1195|    628|    ifmissing = CURLUE_NO_HOST;
 1196|    628|    break;
 1197|      0|  case CURLUPART_ZONEID:
 1198|      0|    ptr = u->zoneid;
 1199|      0|    break;
 1200|    524|  case CURLUPART_PORT:
 1201|    524|    ptr = u->port;
 1202|    524|    ifmissing = CURLUE_NO_PORT;
 1203|    524|    urldecode = FALSE; /* never for port */
 1204|    524|    if(!ptr && (flags & CURLU_DEFAULT_PORT) && u->scheme) {
 1205|       |      /* there's no stored port number, but asked to deliver
 1206|       |         a default one for the scheme */
 1207|    347|      const struct Curl_handler *h =
 1208|    347|        Curl_builtin_scheme(u->scheme);
 1209|    347|      if(h) {
 1210|    347|        msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1211|    347|        ptr = portbuf;
 1212|    347|      }
 1213|    347|    }
 1214|    177|    else if(ptr && u->scheme) {
 1215|       |      /* there is a stored port number, but ask to inhibit if
 1216|       |         it matches the default one for the scheme */
 1217|    177|      const struct Curl_handler *h =
 1218|    177|        Curl_builtin_scheme(u->scheme);
 1219|    177|      if(h && (h->defport == u->portnum) &&
 1220|    177|         (flags & CURLU_NO_DEFAULT_PORT))
 1221|      0|        ptr = NULL;
 1222|    177|    }
 1223|    524|    break;
 1224|    524|  case CURLUPART_PATH:
 1225|    524|    ptr = u->path;
 1226|    524|    if(!ptr) {
 1227|    266|      ptr = u->path = strdup("/");
 1228|    266|      if(!u->path)
 1229|      0|        return CURLUE_OUT_OF_MEMORY;
 1230|    266|    }
 1231|    524|    break;
 1232|    524|  case CURLUPART_QUERY:
 1233|    524|    ptr = u->query;
 1234|    524|    ifmissing = CURLUE_NO_QUERY;
 1235|    524|    plusdecode = urldecode;
 1236|    524|    break;
 1237|      0|  case CURLUPART_FRAGMENT:
 1238|      0|    ptr = u->fragment;
 1239|      0|    ifmissing = CURLUE_NO_FRAGMENT;
 1240|      0|    break;
 1241|    753|  case CURLUPART_URL: {
 1242|    753|    char *url;
 1243|    753|    char *scheme;
 1244|    753|    char *options = u->options;
 1245|    753|    char *port = u->port;
 1246|    753|    char *allochost = NULL;
 1247|    753|    if(u->scheme && strcasecompare("file", u->scheme)) {
 1248|      0|      url = aprintf("file://%s%s%s",
 1249|      0|                    u->path,
 1250|      0|                    u->fragment? "#": "",
 1251|      0|                    u->fragment? u->fragment : "");
 1252|      0|    }
 1253|    753|    else if(!u->host)
 1254|    125|      return CURLUE_NO_HOST;
 1255|    628|    else {
 1256|    628|      const struct Curl_handler *h = NULL;
 1257|    628|      if(u->scheme)
 1258|    628|        scheme = u->scheme;
 1259|      0|      else if(flags & CURLU_DEFAULT_SCHEME)
 1260|      0|        scheme = (char *) DEFAULT_SCHEME;
 1261|      0|      else
 1262|      0|        return CURLUE_NO_SCHEME;
 1263|       |
 1264|    628|      h = Curl_builtin_scheme(scheme);
 1265|    628|      if(!port && (flags & CURLU_DEFAULT_PORT)) {
 1266|       |        /* there's no stored port number, but asked to deliver
 1267|       |           a default one for the scheme */
 1268|      0|        if(h) {
 1269|      0|          msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1270|      0|          port = portbuf;
 1271|      0|        }
 1272|      0|      }
 1273|    628|      else if(port) {
 1274|       |        /* there is a stored port number, but asked to inhibit if it matches
 1275|       |           the default one for the scheme */
 1276|    181|        if(h && (h->defport == u->portnum) &&
 1277|    181|           (flags & CURLU_NO_DEFAULT_PORT))
 1278|      0|          port = NULL;
 1279|    181|      }
 1280|       |
 1281|    628|      if(h && !(h->flags & PROTOPT_URLOPTIONS))
 1282|    607|        options = NULL;
 1283|       |
 1284|    628|      if(u->host[0] == '[') {
 1285|      0|        if(u->zoneid) {
 1286|       |          /* make it '[ host %25 zoneid ]' */
 1287|      0|          size_t hostlen = strlen(u->host);
 1288|      0|          size_t alen = hostlen + 3 + strlen(u->zoneid) + 1;
 1289|      0|          allochost = malloc(alen);
 1290|      0|          if(!allochost)
 1291|      0|            return CURLUE_OUT_OF_MEMORY;
 1292|      0|          memcpy(allochost, u->host, hostlen - 1);
 1293|      0|          msnprintf(&allochost[hostlen - 1], alen - hostlen + 1,
 1294|      0|                    "%%25%s]", u->zoneid);
 1295|      0|        }
 1296|      0|      }
 1297|    628|      else if(urlencode) {
 1298|      0|        allochost = curl_easy_escape(NULL, u->host, 0);
 1299|      0|        if(!allochost)
 1300|      0|          return CURLUE_OUT_OF_MEMORY;
 1301|      0|      }
 1302|    628|      else {
 1303|       |        /* only encode '%' in output host name */
 1304|    628|        char *host = u->host;
 1305|    628|        size_t pcount = 0;
 1306|       |        /* first, count number of percents present in the name */
 1307|  10.7k|        while(*host) {
 1308|  10.0k|          if(*host == '%')
 1309|    300|            pcount++;
 1310|  10.0k|          host++;
 1311|  10.0k|        }
 1312|       |        /* if there were percents, encode the host name */
 1313|    628|        if(pcount) {
 1314|     44|          size_t hostlen = strlen(u->host);
 1315|     44|          size_t alen = hostlen + 2 * pcount + 1;
 1316|     44|          char *o = allochost = malloc(alen);
 1317|     44|          if(!allochost)
 1318|      0|            return CURLUE_OUT_OF_MEMORY;
 1319|       |
 1320|     44|          host = u->host;
 1321|  3.11k|          while(*host) {
 1322|  3.06k|            if(*host == '%') {
 1323|    300|              memcpy(o, "%25", 3);
 1324|    300|              o += 3;
 1325|    300|              host++;
 1326|    300|              continue;
 1327|    300|            }
 1328|  2.76k|            *o++ = *host++;
 1329|  2.76k|          }
 1330|     44|          *o = '\0';
 1331|     44|        }
 1332|    628|      }
 1333|       |
 1334|    628|      url = aprintf("%s://%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
 1335|    628|                    scheme,
 1336|    628|                    u->user ? u->user : "",
 1337|    628|                    u->password ? ":": "",
 1338|    628|                    u->password ? u->password : "",
 1339|    628|                    options ? ";" : "",
 1340|    628|                    options ? options : "",
 1341|    628|                    (u->user || u->password || options) ? "@": "",
 1342|    628|                    allochost ? allochost : u->host,
 1343|    628|                    port ? ":": "",
 1344|    628|                    port ? port : "",
 1345|    628|                    (u->path && (u->path[0] != '/')) ? "/": "",
 1346|    628|                    u->path ? u->path : "/",
 1347|    628|                    (u->query && u->query[0]) ? "?": "",
 1348|    628|                    (u->query && u->query[0]) ? u->query : "",
 1349|    628|                    u->fragment? "#": "",
 1350|    628|                    u->fragment? u->fragment : "");
 1351|    628|      free(allochost);
 1352|    628|    }
 1353|    628|    if(!url)
 1354|      0|      return CURLUE_OUT_OF_MEMORY;
 1355|    628|    *part = url;
 1356|    628|    return CURLUE_OK;
 1357|    628|  }
 1358|      0|  default:
 1359|      0|    ptr = NULL;
 1360|      0|    break;
 1361|  4.99k|  }
 1362|  4.23k|  if(ptr) {
 1363|  2.52k|    *part = strdup(ptr);
 1364|  2.52k|    if(!*part)
 1365|      0|      return CURLUE_OUT_OF_MEMORY;
 1366|  2.52k|    if(plusdecode) {
 1367|       |      /* convert + to space */
 1368|      0|      char *plus;
 1369|      0|      for(plus = *part; *plus; ++plus) {
 1370|      0|        if(*plus == '+')
 1371|      0|          *plus = ' ';
 1372|      0|      }
 1373|      0|    }
 1374|  2.52k|    if(urldecode) {
 1375|      0|      char *decoded;
 1376|      0|      size_t dlen;
 1377|       |      /* this unconditional rejection of control bytes is documented
 1378|       |         API behavior */
 1379|      0|      CURLcode res = Curl_urldecode(NULL, *part, 0, &decoded, &dlen,
 1380|      0|                                    REJECT_CTRL);
 1381|      0|      free(*part);
 1382|      0|      if(res) {
 1383|      0|        *part = NULL;
 1384|      0|        return CURLUE_URLDECODE;
 1385|      0|      }
 1386|      0|      *part = decoded;
 1387|      0|    }
 1388|  2.52k|    return CURLUE_OK;
 1389|  2.52k|  }
 1390|  1.71k|  else
 1391|  1.71k|    return ifmissing;
 1392|  4.23k|}
curl_url_set:
 1396|  1.05k|{
 1397|  1.05k|  char **storep = NULL;
 1398|  1.05k|  long port = 0;
 1399|  1.05k|  bool urlencode = (flags & CURLU_URLENCODE)? 1 : 0;
 1400|  1.05k|  bool plusencode = FALSE;
 1401|  1.05k|  bool urlskipslash = FALSE;
 1402|  1.05k|  bool appendquery = FALSE;
 1403|  1.05k|  bool equalsencode = FALSE;
 1404|       |
 1405|  1.05k|  if(!u)
 1406|      0|    return CURLUE_BAD_HANDLE;
 1407|  1.05k|  if(!part) {
 1408|       |    /* setting a part to NULL clears it */
 1409|      0|    switch(what) {
 1410|      0|    case CURLUPART_URL:
 1411|      0|      break;
 1412|      0|    case CURLUPART_SCHEME:
 1413|      0|      storep = &u->scheme;
 1414|      0|      break;
 1415|      0|    case CURLUPART_USER:
 1416|      0|      storep = &u->user;
 1417|      0|      break;
 1418|      0|    case CURLUPART_PASSWORD:
 1419|      0|      storep = &u->password;
 1420|      0|      break;
 1421|      0|    case CURLUPART_OPTIONS:
 1422|      0|      storep = &u->options;
 1423|      0|      break;
 1424|      0|    case CURLUPART_HOST:
 1425|      0|      storep = &u->host;
 1426|      0|      break;
 1427|      0|    case CURLUPART_ZONEID:
 1428|      0|      storep = &u->zoneid;
 1429|      0|      break;
 1430|      0|    case CURLUPART_PORT:
 1431|      0|      u->portnum = 0;
 1432|      0|      storep = &u->port;
 1433|      0|      break;
 1434|      0|    case CURLUPART_PATH:
 1435|      0|      storep = &u->path;
 1436|      0|      break;
 1437|      0|    case CURLUPART_QUERY:
 1438|      0|      storep = &u->query;
 1439|      0|      break;
 1440|      0|    case CURLUPART_FRAGMENT:
 1441|      0|      storep = &u->fragment;
 1442|      0|      break;
 1443|      0|    default:
 1444|      0|      return CURLUE_UNKNOWN_PART;
 1445|      0|    }
 1446|      0|    if(storep && *storep) {
 1447|      0|      Curl_safefree(*storep);
 1448|      0|    }
 1449|      0|    return CURLUE_OK;
 1450|      0|  }
 1451|       |
 1452|  1.05k|  switch(what) {
 1453|      0|  case CURLUPART_SCHEME:
 1454|      0|    if(strlen(part) > MAX_SCHEME_LEN)
 1455|       |      /* too long */
 1456|      0|      return CURLUE_MALFORMED_INPUT;
 1457|      0|    if(!(flags & CURLU_NON_SUPPORT_SCHEME) &&
 1458|       |       /* verify that it is a fine scheme */
 1459|      0|       !Curl_builtin_scheme(part))
 1460|      0|      return CURLUE_UNSUPPORTED_SCHEME;
 1461|      0|    storep = &u->scheme;
 1462|      0|    urlencode = FALSE; /* never */
 1463|      0|    break;
 1464|    348|  case CURLUPART_USER:
 1465|    348|    storep = &u->user;
 1466|    348|    break;
 1467|     17|  case CURLUPART_PASSWORD:
 1468|     17|    storep = &u->password;
 1469|     17|    break;
 1470|      0|  case CURLUPART_OPTIONS:
 1471|      0|    storep = &u->options;
 1472|      0|    break;
 1473|      0|  case CURLUPART_HOST: {
 1474|      0|    size_t len = strcspn(part, " \r\n");
 1475|      0|    if(strlen(part) != len)
 1476|       |      /* hostname with bad content */
 1477|      0|      return CURLUE_MALFORMED_INPUT;
 1478|      0|    storep = &u->host;
 1479|      0|    Curl_safefree(u->zoneid);
 1480|      0|    break;
 1481|      0|  }
 1482|      0|  case CURLUPART_ZONEID:
 1483|      0|    storep = &u->zoneid;
 1484|      0|    break;
 1485|      0|  case CURLUPART_PORT:
 1486|      0|  {
 1487|      0|    char *endp;
 1488|      0|    urlencode = FALSE; /* never */
 1489|      0|    port = strtol(part, &endp, 10);  /* Port number must be decimal */
 1490|      0|    if((port <= 0) || (port > 0xffff))
 1491|      0|      return CURLUE_BAD_PORT_NUMBER;
 1492|      0|    if(*endp)
 1493|       |      /* weirdly provided number, not good! */
 1494|      0|      return CURLUE_MALFORMED_INPUT;
 1495|      0|    storep = &u->port;
 1496|      0|  }
 1497|      0|  break;
 1498|      0|  case CURLUPART_PATH:
 1499|      0|    urlskipslash = TRUE;
 1500|      0|    storep = &u->path;
 1501|      0|    break;
 1502|      0|  case CURLUPART_QUERY:
 1503|      0|    plusencode = urlencode;
 1504|      0|    appendquery = (flags & CURLU_APPENDQUERY)?1:0;
 1505|      0|    equalsencode = appendquery;
 1506|      0|    storep = &u->query;
 1507|      0|    break;
 1508|      0|  case CURLUPART_FRAGMENT:
 1509|      0|    storep = &u->fragment;
 1510|      0|    break;
 1511|    688|  case CURLUPART_URL: {
 1512|       |    /*
 1513|       |     * Allow a new URL to replace the existing (if any) contents.
 1514|       |     *
 1515|       |     * If the existing contents is enough for a URL, allow a relative URL to
 1516|       |     * replace it.
 1517|       |     */
 1518|    688|    CURLUcode result;
 1519|    688|    char *oldurl;
 1520|    688|    char *redired_url;
 1521|    688|    CURLU *handle2;
 1522|       |
 1523|    688|    if(Curl_is_absolute_url(part, NULL, MAX_SCHEME_LEN + 1)) {
 1524|    563|      handle2 = curl_url();
 1525|    563|      if(!handle2)
 1526|      0|        return CURLUE_OUT_OF_MEMORY;
 1527|    563|      result = parseurl(part, handle2, flags);
 1528|    563|      if(!result)
 1529|    540|        mv_urlhandle(handle2, u);
 1530|     23|      else
 1531|     23|        curl_url_cleanup(handle2);
 1532|    563|      return result;
 1533|    563|    }
 1534|       |    /* extract the full "old" URL to do the redirect on */
 1535|    125|    result = curl_url_get(u, CURLUPART_URL, &oldurl, flags);
 1536|    125|    if(result) {
 1537|       |      /* couldn't get the old URL, just use the new! */
 1538|    125|      handle2 = curl_url();
 1539|    125|      if(!handle2)
 1540|      0|        return CURLUE_OUT_OF_MEMORY;
 1541|    125|      result = parseurl(part, handle2, flags);
 1542|    125|      if(!result)
 1543|     88|        mv_urlhandle(handle2, u);
 1544|     37|      else
 1545|     37|        curl_url_cleanup(handle2);
 1546|    125|      return result;
 1547|    125|    }
 1548|       |
 1549|       |    /* apply the relative part to create a new URL */
 1550|      0|    redired_url = concat_url(oldurl, part);
 1551|      0|    free(oldurl);
 1552|      0|    if(!redired_url)
 1553|      0|      return CURLUE_OUT_OF_MEMORY;
 1554|       |
 1555|       |    /* now parse the new URL */
 1556|      0|    handle2 = curl_url();
 1557|      0|    if(!handle2) {
 1558|      0|      free(redired_url);
 1559|      0|      return CURLUE_OUT_OF_MEMORY;
 1560|      0|    }
 1561|      0|    result = parseurl(redired_url, handle2, flags);
 1562|      0|    free(redired_url);
 1563|      0|    if(!result)
 1564|      0|      mv_urlhandle(handle2, u);
 1565|      0|    else
 1566|      0|      curl_url_cleanup(handle2);
 1567|      0|    return result;
 1568|      0|  }
 1569|      0|  default:
 1570|      0|    return CURLUE_UNKNOWN_PART;
 1571|  1.05k|  }
 1572|    365|  DEBUGASSERT(storep);
 1573|    365|  {
 1574|    365|    const char *newp = part;
 1575|    365|    size_t nalloc = strlen(part);
 1576|       |
 1577|    365|    if(nalloc > CURL_MAX_INPUT_LENGTH)
 1578|       |      /* excessive input length */
 1579|      0|      return CURLUE_MALFORMED_INPUT;
 1580|       |
 1581|    365|    if(urlencode) {
 1582|    365|      const unsigned char *i;
 1583|    365|      char *o;
 1584|    365|      char *enc = malloc(nalloc * 3 + 1); /* for worst case! */
 1585|    365|      if(!enc)
 1586|      0|        return CURLUE_OUT_OF_MEMORY;
 1587|  75.5k|      for(i = (const unsigned char *)part, o = enc; *i; i++) {
 1588|  75.1k|        if((*i == ' ') && plusencode) {
 1589|      0|          *o = '+';
 1590|      0|          o++;
 1591|      0|        }
 1592|  75.1k|        else if(Curl_isunreserved(*i) ||
 1593|  75.1k|                ((*i == '/') && urlskipslash) ||
 1594|  75.1k|                ((*i == '=') && equalsencode)) {
 1595|  41.9k|          if((*i == '=') && equalsencode)
 1596|       |            /* only skip the first equals sign */
 1597|      0|            equalsencode = FALSE;
 1598|  41.9k|          *o = *i;
 1599|  41.9k|          o++;
 1600|  41.9k|        }
 1601|  33.2k|        else {
 1602|  33.2k|          msnprintf(o, 4, "%%%02x", *i);
 1603|  33.2k|          o += 3;
 1604|  33.2k|        }
 1605|  75.1k|      }
 1606|    365|      *o = 0; /* null-terminate */
 1607|    365|      newp = enc;
 1608|    365|    }
 1609|      0|    else {
 1610|      0|      char *p;
 1611|      0|      newp = strdup(part);
 1612|      0|      if(!newp)
 1613|      0|        return CURLUE_OUT_OF_MEMORY;
 1614|      0|      p = (char *)newp;
 1615|      0|      while(*p) {
 1616|       |        /* make sure percent encoded are lower case */
 1617|      0|        if((*p == '%') && ISXDIGIT(p[1]) && ISXDIGIT(p[2]) &&
 1618|      0|           (ISUPPER(p[1]) || ISUPPER(p[2]))) {
 1619|      0|          p[1] = (char)TOLOWER(p[1]);
 1620|      0|          p[2] = (char)TOLOWER(p[2]);
 1621|      0|          p += 3;
 1622|      0|        }
 1623|      0|        else
 1624|      0|          p++;
 1625|      0|      }
 1626|      0|    }
 1627|       |
 1628|    365|    if(appendquery) {
 1629|       |      /* Append the string onto the old query. Add a '&' separator if none is
 1630|       |         present at the end of the exsting query already */
 1631|      0|      size_t querylen = u->query ? strlen(u->query) : 0;
 1632|      0|      bool addamperand = querylen && (u->query[querylen -1] != '&');
 1633|      0|      if(querylen) {
 1634|      0|        size_t newplen = strlen(newp);
 1635|      0|        char *p = malloc(querylen + addamperand + newplen + 1);
 1636|      0|        if(!p) {
 1637|      0|          free((char *)newp);
 1638|      0|          return CURLUE_OUT_OF_MEMORY;
 1639|      0|        }
 1640|      0|        strcpy(p, u->query); /* original query */
 1641|      0|        if(addamperand)
 1642|      0|          p[querylen] = '&'; /* ampersand */
 1643|      0|        strcpy(&p[querylen + addamperand], newp); /* new suffix */
 1644|      0|        free((char *)newp);
 1645|      0|        free(*storep);
 1646|      0|        *storep = p;
 1647|      0|        return CURLUE_OK;
 1648|      0|      }
 1649|      0|    }
 1650|       |
 1651|    365|    if(what == CURLUPART_HOST) {
 1652|      0|      if(0 == strlen(newp) && (flags & CURLU_NO_AUTHORITY)) {
 1653|       |        /* Skip hostname check, it's allowed to be empty. */
 1654|      0|      }
 1655|      0|      else {
 1656|      0|        if(hostname_check(u, (char *)newp)) {
 1657|      0|          free((char *)newp);
 1658|      0|          return CURLUE_MALFORMED_INPUT;
 1659|      0|        }
 1660|      0|      }
 1661|      0|    }
 1662|       |
 1663|    365|    free(*storep);
 1664|    365|    *storep = (char *)newp;
 1665|    365|  }
 1666|       |  /* set after the string, to make it not assigned if the allocation above
 1667|       |     fails */
 1668|    365|  if(port)
 1669|      0|    u->portnum = port;
 1670|    365|  return CURLUE_OK;
 1671|    365|}
urlapi.c:free_urlhandle:
   74|  1.43k|{
   75|  1.43k|  free(u->scheme);
   76|  1.43k|  free(u->user);
   77|  1.43k|  free(u->password);
   78|  1.43k|  free(u->options);
   79|  1.43k|  free(u->host);
   80|  1.43k|  free(u->zoneid);
   81|  1.43k|  free(u->port);
   82|  1.43k|  free(u->path);
   83|  1.43k|  free(u->query);
   84|  1.43k|  free(u->fragment);
   85|  1.43k|  free(u->scratch);
   86|  1.43k|  free(u->temppath);
   87|  1.43k|}
urlapi.c:parseurl:
 1105|    688|{
 1106|    688|  CURLUcode result = seturl(url, u, flags);
 1107|    688|  if(result) {
 1108|     60|    free_urlhandle(u);
 1109|     60|    memset(u, 0, sizeof(struct Curl_URL));
 1110|     60|  }
 1111|    688|  return result;
 1112|    688|}
urlapi.c:seturl:
  782|    688|{
  783|    688|  char *path;
  784|    688|  bool path_alloced = FALSE;
  785|    688|  bool uncpath = FALSE;
  786|    688|  char *hostname;
  787|    688|  char *query = NULL;
  788|    688|  char *fragment = NULL;
  789|    688|  CURLUcode result;
  790|    688|  bool url_has_scheme = FALSE;
  791|    688|  char schemebuf[MAX_SCHEME_LEN + 1];
  792|    688|  const char *schemep = NULL;
  793|    688|  size_t schemelen = 0;
  794|    688|  size_t urllen;
  795|       |
  796|    688|  DEBUGASSERT(url);
  797|       |
  798|       |  /*************************************************************
  799|       |   * Parse the URL.
  800|       |   ************************************************************/
  801|       |  /* allocate scratch area */
  802|    688|  urllen = strlen(url);
  803|    688|  if(urllen > CURL_MAX_INPUT_LENGTH)
  804|       |    /* excessive input length */
  805|      0|    return CURLUE_MALFORMED_INPUT;
  806|       |
  807|    688|  path = u->scratch = malloc(urllen * 2 + 2);
  808|    688|  if(!path)
  809|      0|    return CURLUE_OUT_OF_MEMORY;
  810|       |
  811|    688|  hostname = &path[urllen + 1];
  812|    688|  hostname[0] = 0;
  813|       |
  814|    688|  if(Curl_is_absolute_url(url, schemebuf, sizeof(schemebuf))) {
  815|    563|    url_has_scheme = TRUE;
  816|    563|    schemelen = strlen(schemebuf);
  817|    563|  }
  818|       |
  819|       |  /* handle the file: scheme */
  820|    688|  if(url_has_scheme && strcasecompare(schemebuf, "file")) {
  821|       |    /* path has been allocated large enough to hold this */
  822|      0|    strcpy(path, &url[5]);
  823|       |
  824|      0|    u->scheme = strdup("file");
  825|      0|    if(!u->scheme)
  826|      0|      return CURLUE_OUT_OF_MEMORY;
  827|       |
  828|       |    /* Extra handling URLs with an authority component (i.e. that start with
  829|       |     * "file://")
  830|       |     *
  831|       |     * We allow omitted hostname (e.g. file:/<path>) -- valid according to
  832|       |     * RFC 8089, but not the (current) WHAT-WG URL spec.
  833|       |     */
  834|      0|    if(path[0] == '/' && path[1] == '/') {
  835|       |      /* swallow the two slashes */
  836|      0|      char *ptr = &path[2];
  837|       |
  838|       |      /*
  839|       |       * According to RFC 8089, a file: URL can be reliably dereferenced if:
  840|       |       *
  841|       |       *  o it has no/blank hostname, or
  842|       |       *
  843|       |       *  o the hostname matches "localhost" (case-insensitively), or
  844|       |       *
  845|       |       *  o the hostname is a FQDN that resolves to this machine, or
  846|       |       *
  847|       |       *  o it is an UNC String transformed to an URI (Windows only, RFC 8089
  848|       |       *    Appendix E.3).
  849|       |       *
  850|       |       * For brevity, we only consider URLs with empty, "localhost", or
  851|       |       * "127.0.0.1" hostnames as local, otherwise as an UNC String.
  852|       |       *
  853|       |       * Additionally, there is an exception for URLs with a Windows drive
  854|       |       * letter in the authority (which was accidentally omitted from RFC 8089
  855|       |       * Appendix E, but believe me, it was meant to be there. --MK)
  856|       |       */
  857|      0|      if(ptr[0] != '/' && !STARTS_WITH_URL_DRIVE_PREFIX(ptr)) {
  858|       |        /* the URL includes a host name, it must match "localhost" or
  859|       |           "127.0.0.1" to be valid */
  860|      0|        if(checkprefix("localhost/", ptr) ||
  861|      0|           checkprefix("127.0.0.1/", ptr)) {
  862|      0|          ptr += 9; /* now points to the slash after the host */
  863|      0|        }
  864|      0|        else {
  865|       |#if defined(WIN32)
  866|       |          size_t len;
  867|       |
  868|       |          /* the host name, NetBIOS computer name, can not contain disallowed
  869|       |             chars, and the delimiting slash character must be appended to the
  870|       |             host name */
  871|       |          path = strpbrk(ptr, "/\\:*?\"<>|");
  872|       |          if(!path || *path != '/')
  873|       |            return CURLUE_MALFORMED_INPUT;
  874|       |
  875|       |          len = path - ptr;
  876|       |          if(len) {
  877|       |            memcpy(hostname, ptr, len);
  878|       |            hostname[len] = 0;
  879|       |            uncpath = TRUE;
  880|       |          }
  881|       |
  882|       |          ptr -= 2; /* now points to the // before the host in UNC */
  883|       |#else
  884|       |          /* Invalid file://hostname/, expected localhost or 127.0.0.1 or
  885|       |             none */
  886|      0|          return CURLUE_MALFORMED_INPUT;
  887|      0|#endif
  888|      0|        }
  889|      0|      }
  890|       |
  891|      0|      path = ptr;
  892|      0|    }
  893|       |
  894|      0|    if(!uncpath)
  895|      0|        hostname = NULL; /* no host for file: URLs by default */
  896|       |
  897|      0|#if !defined(MSDOS) && !defined(WIN32) && !defined(__CYGWIN__)
  898|       |    /* Don't allow Windows drive letters when not in Windows.
  899|       |     * This catches both "file:/c:" and "file:c:" */
  900|      0|    if(('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) ||
  901|      0|       STARTS_WITH_URL_DRIVE_PREFIX(path)) {
  902|       |      /* File drive letters are only accepted in MSDOS/Windows */
  903|      0|      return CURLUE_MALFORMED_INPUT;
  904|      0|    }
  905|       |#else
  906|       |    /* If the path starts with a slash and a drive letter, ditch the slash */
  907|       |    if('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) {
  908|       |      /* This cannot be done with strcpy, as the memory chunks overlap! */
  909|       |      memmove(path, &path[1], strlen(&path[1]) + 1);
  910|       |    }
  911|       |#endif
  912|       |
  913|      0|  }
  914|    688|  else {
  915|       |    /* clear path */
  916|    688|    const char *p;
  917|    688|    const char *hostp;
  918|    688|    size_t len;
  919|    688|    path[0] = 0;
  920|       |
  921|    688|    if(url_has_scheme) {
  922|    563|      int i = 0;
  923|    563|      p = &url[schemelen + 1];
  924|  1.42k|      while(p && (*p == '/') && (i < 4)) {
  925|    862|        p++;
  926|    862|        i++;
  927|    862|      }
  928|    563|      if((i < 1) || (i>3))
  929|       |        /* less than one or more than three slashes */
  930|      2|        return CURLUE_MALFORMED_INPUT;
  931|       |
  932|    561|      schemep = schemebuf;
  933|    561|      if(!Curl_builtin_scheme(schemep) &&
  934|    561|         !(flags & CURLU_NON_SUPPORT_SCHEME))
  935|      0|        return CURLUE_UNSUPPORTED_SCHEME;
  936|       |
  937|    561|      if(junkscan(schemep, flags))
  938|      0|        return CURLUE_MALFORMED_INPUT;
  939|    561|    }
  940|    125|    else {
  941|       |      /* no scheme! */
  942|       |
  943|    125|      if(!(flags & (CURLU_DEFAULT_SCHEME|CURLU_GUESS_SCHEME)))
  944|      0|        return CURLUE_MALFORMED_INPUT;
  945|    125|      if(flags & CURLU_DEFAULT_SCHEME)
  946|      0|        schemep = DEFAULT_SCHEME;
  947|       |
  948|       |      /*
  949|       |       * The URL was badly formatted, let's try without scheme specified.
  950|       |       */
  951|    125|      p = url;
  952|    125|    }
  953|    686|    hostp = p; /* host name starts here */
  954|       |
  955|  14.7k|    while(*p && !HOSTNAME_END(*p)) /* find end of host name */
  956|  14.0k|      p++;
  957|       |
  958|    686|    len = p - hostp;
  959|    686|    if(len) {
  960|    681|      memcpy(hostname, hostp, len);
  961|    681|      hostname[len] = 0;
  962|    681|    }
  963|      5|    else {
  964|      5|      if(!(flags & CURLU_NO_AUTHORITY))
  965|      5|        return CURLUE_MALFORMED_INPUT;
  966|      5|    }
  967|       |
  968|    681|    len = strlen(p);
  969|    681|    memcpy(path, p, len);
  970|    681|    path[len] = 0;
  971|       |
  972|    681|    if(schemep) {
  973|    560|      u->scheme = strdup(schemep);
  974|    560|      if(!u->scheme)
  975|      0|        return CURLUE_OUT_OF_MEMORY;
  976|    560|    }
  977|    681|  }
  978|       |
  979|    681|  if(junkscan(path, flags))
  980|      4|    return CURLUE_MALFORMED_INPUT;
  981|       |
  982|    677|  if((flags & CURLU_URLENCODE) && path[0]) {
  983|       |    /* worst case output length is 3x the original! */
  984|      0|    char *newp = malloc(strlen(path) * 3);
  985|      0|    if(!newp)
  986|      0|      return CURLUE_OUT_OF_MEMORY;
  987|      0|    path_alloced = TRUE;
  988|      0|    strcpy_url(newp, path, TRUE); /* consider it relative */
  989|      0|    u->temppath = path = newp;
  990|      0|  }
  991|       |
  992|    677|  fragment = strchr(path, '#');
  993|    677|  if(fragment) {
  994|      2|    *fragment++ = 0;
  995|      2|    if(fragment[0]) {
  996|      1|      u->fragment = strdup(fragment);
  997|      1|      if(!u->fragment)
  998|      0|        return CURLUE_OUT_OF_MEMORY;
  999|      1|    }
 1000|      2|  }
 1001|       |
 1002|    677|  query = strchr(path, '?');
 1003|    677|  if(query) {
 1004|     24|    *query++ = 0;
 1005|       |    /* done even if the query part is a blank string */
 1006|     24|    u->query = strdup(query);
 1007|     24|    if(!u->query)
 1008|      0|      return CURLUE_OUT_OF_MEMORY;
 1009|     24|  }
 1010|       |
 1011|    677|  if(!path[0])
 1012|       |    /* if there's no path left set, unset */
 1013|    368|    path = NULL;
 1014|    309|  else {
 1015|    309|    if(!(flags & CURLU_PATH_AS_IS)) {
 1016|       |      /* remove ../ and ./ sequences according to RFC3986 */
 1017|    309|      char *newp = Curl_dedotdotify(path);
 1018|    309|      if(!newp)
 1019|      0|        return CURLUE_OUT_OF_MEMORY;
 1020|       |
 1021|    309|      if(strcmp(newp, path)) {
 1022|       |        /* if we got a new version */
 1023|     46|        if(path_alloced)
 1024|      0|          Curl_safefree(u->temppath);
 1025|     46|        u->temppath = path = newp;
 1026|     46|        path_alloced = TRUE;
 1027|     46|      }
 1028|    263|      else
 1029|    263|        free(newp);
 1030|    309|    }
 1031|       |
 1032|    309|    u->path = path_alloced?path:strdup(path);
 1033|    309|    if(!u->path)
 1034|      0|      return CURLUE_OUT_OF_MEMORY;
 1035|    309|    u->temppath = NULL; /* used now */
 1036|    309|  }
 1037|       |
 1038|    677|  if(hostname) {
 1039|    677|    char normalized_ipv4[sizeof("255.255.255.255") + 1];
 1040|       |    /*
 1041|       |     * Parse the login details and strip them out of the host name.
 1042|       |     */
 1043|    677|    if(junkscan(hostname, flags))
 1044|     22|      return CURLUE_MALFORMED_INPUT;
 1045|       |
 1046|    655|    result = parse_hostname_login(u, &hostname, flags);
 1047|    655|    if(result)
 1048|      0|      return result;
 1049|       |
 1050|    655|    result = Curl_parse_port(u, hostname, url_has_scheme);
 1051|    655|    if(result)
 1052|     11|      return result;
 1053|       |
 1054|    644|    if(0 == strlen(hostname) && (flags & CURLU_NO_AUTHORITY)) {
 1055|       |      /* Skip hostname check, it's allowed to be empty. */
 1056|      0|      u->host = strdup("");
 1057|      0|    }
 1058|    644|    else {
 1059|    644|      if(ipv4_normalize(hostname, normalized_ipv4, sizeof(normalized_ipv4)))
 1060|    231|        u->host = strdup(normalized_ipv4);
 1061|    413|      else {
 1062|    413|        result = decode_host(hostname, &u->host);
 1063|    413|        if(result)
 1064|      3|          return result;
 1065|    410|        result = hostname_check(u, u->host);
 1066|    410|        if(result)
 1067|     13|          return result;
 1068|    410|      }
 1069|    644|    }
 1070|    628|    if(!u->host)
 1071|      0|      return CURLUE_OUT_OF_MEMORY;
 1072|    628|    if((flags & CURLU_GUESS_SCHEME) && !schemep) {
 1073|       |      /* legacy curl-style guess based on host name */
 1074|     88|      if(checkprefix("ftp.", hostname))
 1075|      8|        schemep = "ftp";
 1076|     80|      else if(checkprefix("dict.", hostname))
 1077|      0|        schemep = "dict";
 1078|     80|      else if(checkprefix("ldap.", hostname))
 1079|      0|        schemep = "ldap";
 1080|     80|      else if(checkprefix("imap.", hostname))
 1081|      0|        schemep = "imap";
 1082|     80|      else if(checkprefix("smtp.", hostname))
 1083|      0|        schemep = "smtp";
 1084|     80|      else if(checkprefix("pop3.", hostname))
 1085|      0|        schemep = "pop3";
 1086|     80|      else
 1087|     80|        schemep = "http";
 1088|       |
 1089|     88|      u->scheme = strdup(schemep);
 1090|     88|      if(!u->scheme)
 1091|      0|        return CURLUE_OUT_OF_MEMORY;
 1092|     88|    }
 1093|    628|  }
 1094|       |
 1095|    628|  Curl_safefree(u->scratch);
 1096|    628|  Curl_safefree(u->temppath);
 1097|       |
 1098|    628|  return CURLUE_OK;
 1099|    677|}
urlapi.c:junkscan:
  582|  1.91k|{
  583|  1.91k|  if(part) {
  584|  1.91k|    static const char badbytes[]={
  585|  1.91k|      /* */ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  586|  1.91k|      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  587|  1.91k|      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  588|  1.91k|      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  589|  1.91k|      0x7f, 0x00 /* null-terminate */
  590|  1.91k|    };
  591|  1.91k|    size_t n = strlen(part);
  592|  1.91k|    size_t nfine = strcspn(part, badbytes);
  593|  1.91k|    if(nfine != n)
  594|       |      /* since we don't know which part is scanned, return a generic error
  595|       |         code */
  596|     21|      return TRUE;
  597|  1.89k|    if(!(flags & CURLU_ALLOW_SPACE) && strchr(part, ' '))
  598|      5|      return TRUE;
  599|  1.89k|  }
  600|  1.89k|  return FALSE;
  601|  1.91k|}
urlapi.c:parse_hostname_login:
  431|    655|{
  432|    655|  CURLUcode result = CURLUE_OK;
  433|    655|  CURLcode ccode;
  434|    655|  char *userp = NULL;
  435|    655|  char *passwdp = NULL;
  436|    655|  char *optionsp = NULL;
  437|    655|  const struct Curl_handler *h = NULL;
  438|       |
  439|       |  /* At this point, we're hoping all the other special cases have
  440|       |   * been taken care of, so conn->host.name is at most
  441|       |   *    [user[:password][;options]]@]hostname
  442|       |   *
  443|       |   * We need somewhere to put the embedded details, so do that first.
  444|       |   */
  445|       |
  446|    655|  char *ptr = strchr(*hostname, '@');
  447|    655|  char *login = *hostname;
  448|       |
  449|    655|  if(!ptr)
  450|    452|    goto out;
  451|       |
  452|       |  /* We will now try to extract the
  453|       |   * possible login information in a string like:
  454|       |   * ftp://user:password@ftp.my.site:8021/README */
  455|    203|  *hostname = ++ptr;
  456|       |
  457|       |  /* if this is a known scheme, get some details */
  458|    203|  if(u->scheme)
  459|    198|    h = Curl_builtin_scheme(u->scheme);
  460|       |
  461|       |  /* We could use the login information in the URL so extract it. Only parse
  462|       |     options if the handler says we should. Note that 'h' might be NULL! */
  463|    203|  ccode = Curl_parse_login_details(login, ptr - login - 1,
  464|    203|                                   &userp, &passwdp,
  465|    203|                                   (h && (h->flags & PROTOPT_URLOPTIONS)) ?
  466|      0|                                   &optionsp:NULL);
  467|    203|  if(ccode) {
  468|      0|    result = CURLUE_MALFORMED_INPUT;
  469|      0|    goto out;
  470|      0|  }
  471|       |
  472|    203|  if(userp) {
  473|    198|    if(flags & CURLU_DISALLOW_USER) {
  474|       |      /* Option DISALLOW_USER is set and url contains username. */
  475|      0|      result = CURLUE_USER_NOT_ALLOWED;
  476|      0|      goto out;
  477|      0|    }
  478|       |
  479|    198|    u->user = userp;
  480|    198|  }
  481|       |
  482|    203|  if(passwdp)
  483|     14|    u->password = passwdp;
  484|       |
  485|    203|  if(optionsp)
  486|      0|    u->options = optionsp;
  487|       |
  488|    203|  return CURLUE_OK;
  489|    452|  out:
  490|       |
  491|    452|  free(userp);
  492|    452|  free(passwdp);
  493|    452|  free(optionsp);
  494|       |
  495|    452|  return result;
  496|    203|}
urlapi.c:ipv4_normalize:
  680|    644|{
  681|    644|  bool done = FALSE;
  682|    644|  int n = 0;
  683|    644|  const char *c = hostname;
  684|    644|  unsigned long parts[4] = {0, 0, 0, 0};
  685|       |
  686|  1.46k|  while(!done) {
  687|  1.21k|    char *endp;
  688|  1.21k|    unsigned long l;
  689|  1.21k|    if((*c < '0') || (*c > '9'))
  690|       |      /* most importantly this doesn't allow a leading plus or minus */
  691|    339|      return FALSE;
  692|    876|    l = strtoul(c, &endp, 0);
  693|       |
  694|       |    /* overflow or nothing parsed at all */
  695|    876|    if(((l == ULONG_MAX) && (errno == ERANGE)) ||  (endp == c))
  696|      1|      return FALSE;
  697|       |
  698|    875|#if SIZEOF_LONG > 4
  699|       |    /* a value larger than 32 bits */
  700|    875|    if(l > UINT_MAX)
  701|      1|      return FALSE;
  702|    874|#endif
  703|       |
  704|    874|    parts[n] = l;
  705|    874|    c = endp;
  706|       |
  707|    874|    switch (*c) {
  708|    572|    case '.' :
  709|    572|      if(n == 3)
  710|      1|        return FALSE;
  711|    571|      n++;
  712|    571|      c++;
  713|    571|      break;
  714|       |
  715|    250|    case '\0':
  716|    250|      done = TRUE;
  717|    250|      break;
  718|       |
  719|     52|    default:
  720|     52|      return FALSE;
  721|    874|    }
  722|    874|  }
  723|       |
  724|       |  /* this is deemed a valid IPv4 numerical address */
  725|       |
  726|    250|  switch(n) {
  727|     77|  case 0: /* a -- 32 bits */
  728|     77|    msnprintf(outp, olen, "%u.%u.%u.%u",
  729|     77|              parts[0] >> 24, (parts[0] >> 16) & 0xff,
  730|     77|              (parts[0] >> 8) & 0xff, parts[0] & 0xff);
  731|     77|    break;
  732|     14|  case 1: /* a.b -- 8.24 bits */
  733|     14|    if((parts[0] > 0xff) || (parts[1] > 0xffffff))
  734|      2|      return FALSE;
  735|     12|    msnprintf(outp, olen, "%u.%u.%u.%u",
  736|     12|              parts[0], (parts[1] >> 16) & 0xff,
  737|     12|              (parts[1] >> 8) & 0xff, parts[1] & 0xff);
  738|     12|    break;
  739|     10|  case 2: /* a.b.c -- 8.8.16 bits */
  740|     10|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xffff))
  741|      3|      return FALSE;
  742|      7|    msnprintf(outp, olen, "%u.%u.%u.%u",
  743|      7|              parts[0], parts[1], (parts[2] >> 8) & 0xff,
  744|      7|              parts[2] & 0xff);
  745|      7|    break;
  746|    149|  case 3: /* a.b.c.d -- 8.8.8.8 bits */
  747|    149|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff) ||
  748|    149|       (parts[3] > 0xff))
  749|     14|      return FALSE;
  750|    135|    msnprintf(outp, olen, "%u.%u.%u.%u",
  751|    135|              parts[0], parts[1], parts[2], parts[3]);
  752|    135|    break;
  753|    250|  }
  754|    231|  return TRUE;
  755|    250|}
urlapi.c:decode_host:
  759|    413|{
  760|    413|  char *per = NULL;
  761|    413|  if(hostname[0] != '[')
  762|       |    /* only decode if not an ipv6 numerical */
  763|    404|    per = strchr(hostname, '%');
  764|    413|  if(!per) {
  765|    365|    *outp = strdup(hostname);
  766|    365|    if(!*outp)
  767|      0|      return CURLUE_OUT_OF_MEMORY;
  768|    365|  }
  769|     48|  else {
  770|       |    /* might be encoded */
  771|     48|    size_t dlen;
  772|     48|    CURLcode result = Curl_urldecode(NULL, hostname, 0,
  773|     48|                                     outp, &dlen, REJECT_CTRL);
  774|     48|    if(result)
  775|      3|      return CURLUE_MALFORMED_INPUT;
  776|     48|  }
  777|       |
  778|    410|  return CURLUE_OK;
  779|    413|}
urlapi.c:mv_urlhandle:
   93|    628|{
   94|    628|  free_urlhandle(to);
   95|    628|  *to = *from;
   96|    628|  free(from);
   97|    628|}
urlapi.c:hostname_check:
  604|    410|{
  605|    410|  size_t len;
  606|    410|  size_t hlen = strlen(hostname);
  607|       |
  608|    410|  if(hostname[0] == '[') {
  609|      9|#ifdef ENABLE_IPV6
  610|      9|    char dest[16]; /* fits a binary IPv6 address */
  611|      9|#endif
  612|      9|    const char *l = "0123456789abcdefABCDEF:.";
  613|      9|    if(hlen < 4) /* '[::]' is the shortest possible valid string */
  614|      1|      return CURLUE_MALFORMED_INPUT;
  615|      8|    hostname++;
  616|      8|    hlen -= 2;
  617|       |
  618|      8|    if(hostname[hlen] != ']')
  619|      1|      return CURLUE_MALFORMED_INPUT;
  620|       |
  621|       |    /* only valid letters are ok */
  622|      7|    len = strspn(hostname, l);
  623|      7|    if(hlen != len) {
  624|      6|      hlen = len;
  625|      6|      if(hostname[len] == '%') {
  626|       |        /* this could now be '%[zone id]' */
  627|      5|        char zoneid[16];
  628|      5|        int i = 0;
  629|      5|        char *h = &hostname[len + 1];
  630|       |        /* pass '25' if present and is a url encoded percent sign */
  631|      5|        if(!strncmp(h, "25", 2) && h[2] && (h[2] != ']'))
  632|      1|          h += 2;
  633|     25|        while(*h && (*h != ']') && (i < 15))
  634|     20|          zoneid[i++] = *h++;
  635|      5|        if(!i || (']' != *h))
  636|      0|          return CURLUE_MALFORMED_INPUT;
  637|      5|        zoneid[i] = 0;
  638|      5|        u->zoneid = strdup(zoneid);
  639|      5|        if(!u->zoneid)
  640|      0|          return CURLUE_OUT_OF_MEMORY;
  641|      5|        hostname[len] = ']'; /* insert end bracket */
  642|      5|        hostname[len + 1] = 0; /* terminate the hostname */
  643|      5|      }
  644|      1|      else
  645|      1|        return CURLUE_MALFORMED_INPUT;
  646|       |      /* hostname is fine */
  647|      6|    }
  648|      6|#ifdef ENABLE_IPV6
  649|      6|    hostname[hlen] = 0; /* end the address there */
  650|      6|    if(1 != Curl_inet_pton(AF_INET6, hostname, dest))
  651|      6|      return CURLUE_MALFORMED_INPUT;
  652|      0|    hostname[hlen] = ']'; /* restore ending bracket */
  653|      0|#endif
  654|      0|  }
  655|    401|  else {
  656|       |    /* letters from the second string is not ok */
  657|    401|    len = strcspn(hostname, " \r\n");
  658|    401|    if(hlen != len)
  659|       |      /* hostname with bad content */
  660|      1|      return CURLUE_MALFORMED_INPUT;
  661|    401|  }
  662|    400|  if(!hostname[0])
  663|      3|    return CURLUE_NO_HOST;
  664|    397|  return CURLUE_OK;
  665|    400|}

Curl_auth_digest_cleanup:
  960|  3.33k|{
  961|  3.33k|  Curl_safefree(digest->nonce);
  962|  3.33k|  Curl_safefree(digest->cnonce);
  963|  3.33k|  Curl_safefree(digest->realm);
  964|  3.33k|  Curl_safefree(digest->opaque);
  965|  3.33k|  Curl_safefree(digest->qop);
  966|  3.33k|  Curl_safefree(digest->algorithm);
  967|       |
  968|  3.33k|  digest->nc = 0;
  969|  3.33k|  digest->algo = CURLDIGESTALGO_MD5; /* default algorithm */
  970|  3.33k|  digest->stale = FALSE; /* default means normal, not stale */
  971|  3.33k|  digest->userhash = FALSE;
  972|  3.33k|}

Curl_auth_cleanup_ntlm:
  849|  1.37k|{
  850|       |  /* Free the target info */
  851|  1.37k|  Curl_safefree(ntlm->target_info);
  852|       |
  853|       |  /* Reset any variables */
  854|  1.37k|  ntlm->target_info_len = 0;
  855|  1.37k|}

Curl_tls_keylog_open:
   47|      1|{
   48|      1|  char *keylog_file_name;
   49|       |
   50|      1|  if(!keylog_file_fp) {
   51|      1|    keylog_file_name = curl_getenv("SSLKEYLOGFILE");
   52|      1|    if(keylog_file_name) {
   53|      0|      keylog_file_fp = fopen(keylog_file_name, FOPEN_APPENDTEXT);
   54|      0|      if(keylog_file_fp) {
   55|       |#ifdef WIN32
   56|       |        if(setvbuf(keylog_file_fp, NULL, _IONBF, 0))
   57|       |#else
   58|      0|        if(setvbuf(keylog_file_fp, NULL, _IOLBF, 4096))
   59|      0|#endif
   60|      0|        {
   61|      0|          fclose(keylog_file_fp);
   62|      0|          keylog_file_fp = NULL;
   63|      0|        }
   64|      0|      }
   65|      0|      Curl_safefree(keylog_file_name);
   66|      0|    }
   67|      1|  }
   68|      1|}
Curl_tls_keylog_enabled:
   81|     49|{
   82|     49|  return keylog_file_fp != NULL;
   83|     49|}

openssl.c:ossl_init:
 1172|      1|{
 1173|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) &&  \
 1174|       |  !defined(LIBRESSL_VERSION_NUMBER)
 1175|       |  const uint64_t flags =
 1176|       |#ifdef OPENSSL_INIT_ENGINE_ALL_BUILTIN
 1177|       |    /* not present in BoringSSL */
 1178|       |    OPENSSL_INIT_ENGINE_ALL_BUILTIN |
 1179|       |#endif
 1180|       |#ifdef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1181|       |    OPENSSL_INIT_NO_LOAD_CONFIG |
 1182|       |#else
 1183|       |    OPENSSL_INIT_LOAD_CONFIG |
 1184|       |#endif
 1185|       |    0;
 1186|       |  OPENSSL_init_ssl(flags, NULL);
 1187|       |#else
 1188|      1|  OPENSSL_load_builtin_modules();
 1189|       |
 1190|      1|#ifdef USE_OPENSSL_ENGINE
 1191|      1|  ENGINE_load_builtin_engines();
 1192|      1|#endif
 1193|       |
 1194|       |/* CONF_MFLAGS_DEFAULT_SECTION was introduced some time between 0.9.8b and
 1195|       |   0.9.8e */
 1196|       |#ifndef CONF_MFLAGS_DEFAULT_SECTION
 1197|       |#define CONF_MFLAGS_DEFAULT_SECTION 0x0
 1198|       |#endif
 1199|       |
 1200|      1|#ifndef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1201|      1|  CONF_modules_load_file(NULL, NULL,
 1202|      1|                         CONF_MFLAGS_DEFAULT_SECTION|
 1203|      1|                         CONF_MFLAGS_IGNORE_MISSING_FILE);
 1204|      1|#endif
 1205|       |
 1206|       |  /* Let's get nice error messages */
 1207|      1|  SSL_load_error_strings();
 1208|       |
 1209|       |  /* Init the global ciphers and digests */
 1210|      1|  if(!SSLeay_add_ssl_algorithms())
 1211|      0|    return 0;
 1212|       |
 1213|      1|  OpenSSL_add_all_algorithms();
 1214|      1|#endif
 1215|       |
 1216|      1|  Curl_tls_keylog_open();
 1217|       |
 1218|       |  /* Initialize the extra data indexes */
 1219|      1|  if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||
 1220|      1|     ossl_get_ssl_sockindex_index() < 0 || ossl_get_proxy_index() < 0)
 1221|      0|    return 0;
 1222|       |
 1223|      1|  return 1;
 1224|      1|}
openssl.c:ossl_get_ssl_data_index:
  373|    148|{
  374|    148|  static int ssl_ex_data_data_index = -1;
  375|    148|  if(ssl_ex_data_data_index < 0) {
  376|      1|    ssl_ex_data_data_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  377|      1|  }
  378|    148|  return ssl_ex_data_data_index;
  379|    148|}
openssl.c:ossl_get_ssl_conn_index:
  385|    148|{
  386|    148|  static int ssl_ex_data_conn_index = -1;
  387|    148|  if(ssl_ex_data_conn_index < 0) {
  388|      1|    ssl_ex_data_conn_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  389|      1|  }
  390|    148|  return ssl_ex_data_conn_index;
  391|    148|}
openssl.c:ossl_get_ssl_sockindex_index:
  397|    148|{
  398|    148|  static int sockindex_index = -1;
  399|    148|  if(sockindex_index < 0) {
  400|      1|    sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  401|      1|  }
  402|    148|  return sockindex_index;
  403|    148|}
openssl.c:ossl_get_proxy_index:
  409|    148|{
  410|    148|  static int proxy_index = -1;
  411|    148|  if(proxy_index < 0) {
  412|      1|    proxy_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  413|      1|  }
  414|    148|  return proxy_index;
  415|    148|}
openssl.c:ossl_strerror:
  351|     48|{
  352|     48|  if(size)
  353|     48|    *buf = '\0';
  354|       |
  355|       |#ifdef OPENSSL_IS_BORINGSSL
  356|       |  ERR_error_string_n((uint32_t)error, buf, size);
  357|       |#else
  358|     48|  ERR_error_string_n(error, buf, size);
  359|     48|#endif
  360|       |
  361|     48|  if(size > 1 && !*buf) {
  362|      0|    strncpy(buf, (error ? "Unknown error" : "No error"), size);
  363|      0|    buf[size - 1] = '\0';
  364|      0|  }
  365|       |
  366|     48|  return buf;
  367|     48|}
openssl.c:SSL_ERROR_to_str:
  311|     48|{
  312|     48|  switch(err) {
  313|      0|  case SSL_ERROR_NONE:
  314|      0|    return "SSL_ERROR_NONE";
  315|      0|  case SSL_ERROR_SSL:
  316|      0|    return "SSL_ERROR_SSL";
  317|      0|  case SSL_ERROR_WANT_READ:
  318|      0|    return "SSL_ERROR_WANT_READ";
  319|      0|  case SSL_ERROR_WANT_WRITE:
  320|      0|    return "SSL_ERROR_WANT_WRITE";
  321|      0|  case SSL_ERROR_WANT_X509_LOOKUP:
  322|      0|    return "SSL_ERROR_WANT_X509_LOOKUP";
  323|     48|  case SSL_ERROR_SYSCALL:
  324|     48|    return "SSL_ERROR_SYSCALL";
  325|      0|  case SSL_ERROR_ZERO_RETURN:
  326|      0|    return "SSL_ERROR_ZERO_RETURN";
  327|      0|  case SSL_ERROR_WANT_CONNECT:
  328|      0|    return "SSL_ERROR_WANT_CONNECT";
  329|      0|  case SSL_ERROR_WANT_ACCEPT:
  330|      0|    return "SSL_ERROR_WANT_ACCEPT";
  331|       |#if defined(SSL_ERROR_WANT_ASYNC)
  332|       |  case SSL_ERROR_WANT_ASYNC:
  333|       |    return "SSL_ERROR_WANT_ASYNC";
  334|       |#endif
  335|       |#if defined(SSL_ERROR_WANT_ASYNC_JOB)
  336|       |  case SSL_ERROR_WANT_ASYNC_JOB:
  337|       |    return "SSL_ERROR_WANT_ASYNC_JOB";
  338|       |#endif
  339|       |#if defined(SSL_ERROR_WANT_EARLY)
  340|       |  case SSL_ERROR_WANT_EARLY:
  341|       |    return "SSL_ERROR_WANT_EARLY";
  342|       |#endif
  343|      0|  default:
  344|      0|    return "SSL_ERROR unknown";
  345|     48|  }
  346|     48|}
openssl.c:ossl_data_pending:
 4167|  2.37k|{
 4168|  2.37k|  const struct ssl_connect_data *connssl = &conn->ssl[connindex];
 4169|  2.37k|  if(connssl->backend->handle && SSL_pending(connssl->backend->handle))
 4170|      0|    return TRUE;
 4171|  2.37k|#ifndef CURL_DISABLE_PROXY
 4172|  2.37k|  {
 4173|  2.37k|    const struct ssl_connect_data *proxyssl = &conn->proxy_ssl[connindex];
 4174|  2.37k|    if(proxyssl->backend->handle && SSL_pending(proxyssl->backend->handle))
 4175|      0|      return TRUE;
 4176|  2.37k|  }
 4177|  2.37k|#endif
 4178|  2.37k|  return FALSE;
 4179|  2.37k|}
openssl.c:ossl_random:
 4427|    947|{
 4428|    947|  int rc;
 4429|    947|  if(data) {
 4430|    947|    if(ossl_seed(data)) /* Initiate the seed if not already done */
 4431|      0|      return CURLE_FAILED_INIT; /* couldn't seed for some reason */
 4432|    947|  }
 4433|      0|  else {
 4434|      0|    if(!rand_enough())
 4435|      0|      return CURLE_FAILED_INIT;
 4436|      0|  }
 4437|       |  /* RAND_bytes() returns 1 on success, 0 otherwise.  */
 4438|    947|  rc = RAND_bytes(entropy, curlx_uztosi(length));
 4439|    947|  return (rc == 1 ? CURLE_OK : CURLE_FAILED_INIT);
 4440|    947|}
openssl.c:ossl_seed:
  441|    996|{
  442|       |  /* This might get called before it has been added to a multi handle */
  443|    996|  if(data->multi && data->multi->ssl_seeded)
  444|      0|    return CURLE_OK;
  445|       |
  446|    996|  if(rand_enough()) {
  447|       |    /* OpenSSL 1.1.0+ should return here */
  448|    996|    if(data->multi)
  449|     49|      data->multi->ssl_seeded = TRUE;
  450|    996|    return CURLE_OK;
  451|    996|  }
  452|       |#ifdef HAVE_RANDOM_INIT_BY_DEFAULT
  453|       |  /* with OpenSSL 1.1.0+, a failed RAND_status is a showstopper */
  454|       |  failf(data, "Insufficient randomness");
  455|       |  return CURLE_SSL_CONNECT_ERROR;
  456|       |#else
  457|       |
  458|       |#ifndef RANDOM_FILE
  459|       |  /* if RANDOM_FILE isn't defined, we only perform this if an option tells
  460|       |     us to! */
  461|       |  if(data->set.str[STRING_SSL_RANDOM_FILE])
  462|       |#define RANDOM_FILE "" /* doesn't matter won't be used */
  463|       |#endif
  464|      0|  {
  465|       |    /* let the option override the define */
  466|      0|    RAND_load_file((data->set.str[STRING_SSL_RANDOM_FILE]?
  467|      0|                    data->set.str[STRING_SSL_RANDOM_FILE]:
  468|      0|                    RANDOM_FILE),
  469|      0|                   RAND_LOAD_LENGTH);
  470|      0|    if(rand_enough())
  471|      0|      return CURLE_OK;
  472|      0|  }
  473|       |
  474|      0|#if defined(HAVE_RAND_EGD)
  475|       |  /* only available in OpenSSL 0.9.5 and later */
  476|       |  /* EGD_SOCKET is set at configure time or not at all */
  477|      0|#ifndef EGD_SOCKET
  478|       |  /* If we don't have the define set, we only do this if the egd-option
  479|       |     is set */
  480|      0|  if(data->set.str[STRING_SSL_EGDSOCKET])
  481|      0|#define EGD_SOCKET "" /* doesn't matter won't be used */
  482|      0|#endif
  483|      0|  {
  484|       |    /* If there's an option and a define, the option overrides the
  485|       |       define */
  486|      0|    int ret = RAND_egd(data->set.str[STRING_SSL_EGDSOCKET]?
  487|      0|                       data->set.str[STRING_SSL_EGDSOCKET]:EGD_SOCKET);
  488|      0|    if(-1 != ret) {
  489|      0|      if(rand_enough())
  490|      0|        return CURLE_OK;
  491|      0|    }
  492|      0|  }
  493|      0|#endif
  494|       |
  495|       |  /* fallback to a custom seeding of the PRNG using a hash based on a current
  496|       |     time */
  497|      0|  do {
  498|      0|    unsigned char randb[64];
  499|      0|    size_t len = sizeof(randb);
  500|      0|    size_t i, i_max;
  501|      0|    for(i = 0, i_max = len / sizeof(struct curltime); i < i_max; ++i) {
  502|      0|      struct curltime tv = Curl_now();
  503|      0|      Curl_wait_ms(1);
  504|      0|      tv.tv_sec *= i + 1;
  505|      0|      tv.tv_usec *= (unsigned int)i + 2;
  506|      0|      tv.tv_sec ^= ((Curl_now().tv_sec + Curl_now().tv_usec) *
  507|      0|                    (i + 3)) << 8;
  508|      0|      tv.tv_usec ^= (unsigned int) ((Curl_now().tv_sec +
  509|      0|                                     Curl_now().tv_usec) *
  510|      0|                                    (i + 4)) << 16;
  511|      0|      memcpy(&randb[i * sizeof(struct curltime)], &tv,
  512|      0|             sizeof(struct curltime));
  513|      0|    }
  514|      0|    RAND_add(randb, (int)len, (double)len/2);
  515|      0|  } while(!rand_enough());
  516|       |
  517|      0|  {
  518|       |    /* generates a default path for the random seed file */
  519|      0|    char fname[256];
  520|      0|    fname[0] = 0; /* blank it first */
  521|      0|    RAND_file_name(fname, sizeof(fname));
  522|      0|    if(fname[0]) {
  523|       |      /* we got a file name to try */
  524|      0|      RAND_load_file(fname, RAND_LOAD_LENGTH);
  525|      0|      if(rand_enough())
  526|      0|        return CURLE_OK;
  527|      0|    }
  528|      0|  }
  529|       |
  530|      0|  infof(data, "libcurl is now using a weak random seed!");
  531|      0|  return (rand_enough() ? CURLE_OK :
  532|      0|          CURLE_SSL_CONNECT_ERROR /* confusing error code */);
  533|      0|#endif
  534|      0|}
openssl.c:rand_enough:
  436|    996|{
  437|    996|  return (0 != RAND_status()) ? TRUE : FALSE;
  438|    996|}
openssl.c:ossl_connect:
 4152|     49|{
 4153|     49|  CURLcode result;
 4154|     49|  bool done = FALSE;
 4155|       |
 4156|     49|  result = ossl_connect_common(data, conn, sockindex, FALSE, &done);
 4157|     49|  if(result)
 4158|     49|    return result;
 4159|       |
 4160|      0|  DEBUGASSERT(done);
 4161|       |
 4162|      0|  return CURLE_OK;
 4163|      0|}
openssl.c:ossl_connect_common:
 4038|     49|{
 4039|     49|  CURLcode result;
 4040|     49|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4041|     49|  curl_socket_t sockfd = conn->sock[sockindex];
 4042|     49|  int what;
 4043|       |
 4044|       |  /* check if the connection has already been established */
 4045|     49|  if(ssl_connection_complete == connssl->state) {
 4046|      0|    *done = TRUE;
 4047|      0|    return CURLE_OK;
 4048|      0|  }
 4049|       |
 4050|     49|  if(ssl_connect_1 == connssl->connecting_state) {
 4051|       |    /* Find out how much more time we're allowed */
 4052|     49|    const timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 4053|       |
 4054|     49|    if(timeout_ms < 0) {
 4055|       |      /* no need to continue if time is already up */
 4056|      0|      failf(data, "SSL connection timeout");
 4057|      0|      return CURLE_OPERATION_TIMEDOUT;
 4058|      0|    }
 4059|       |
 4060|     49|    result = ossl_connect_step1(data, conn, sockindex);
 4061|     49|    if(result)
 4062|      0|      return result;
 4063|     49|  }
 4064|       |
 4065|     50|  while(ssl_connect_2 == connssl->connecting_state ||
 4066|     50|        ssl_connect_2_reading == connssl->connecting_state ||
 4067|     50|        ssl_connect_2_writing == connssl->connecting_state) {
 4068|       |
 4069|       |    /* check allowed time left */
 4070|     50|    const timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 4071|       |
 4072|     50|    if(timeout_ms < 0) {
 4073|       |      /* no need to continue if time already is up */
 4074|      0|      failf(data, "SSL connection timeout");
 4075|      0|      return CURLE_OPERATION_TIMEDOUT;
 4076|      0|    }
 4077|       |
 4078|       |    /* if ssl is expecting something, check if it's available. */
 4079|     50|    if(connssl->connecting_state == ssl_connect_2_reading ||
 4080|     50|       connssl->connecting_state == ssl_connect_2_writing) {
 4081|       |
 4082|      1|      curl_socket_t writefd = ssl_connect_2_writing ==
 4083|      1|        connssl->connecting_state?sockfd:CURL_SOCKET_BAD;
 4084|      1|      curl_socket_t readfd = ssl_connect_2_reading ==
 4085|      1|        connssl->connecting_state?sockfd:CURL_SOCKET_BAD;
 4086|       |
 4087|      1|      what = Curl_socket_check(readfd, CURL_SOCKET_BAD, writefd,
 4088|      1|                               nonblocking?0:timeout_ms);
 4089|      1|      if(what < 0) {
 4090|       |        /* fatal error */
 4091|      0|        failf(data, "select/poll on SSL socket, errno: %d", SOCKERRNO);
 4092|      0|        return CURLE_SSL_CONNECT_ERROR;
 4093|      0|      }
 4094|      1|      if(0 == what) {
 4095|      1|        if(nonblocking) {
 4096|      0|          *done = FALSE;
 4097|      0|          return CURLE_OK;
 4098|      0|        }
 4099|       |        /* timeout */
 4100|      1|        failf(data, "SSL connection timeout");
 4101|      1|        return CURLE_OPERATION_TIMEDOUT;
 4102|      1|      }
 4103|       |      /* socket is readable or writable */
 4104|      1|    }
 4105|       |
 4106|       |    /* Run transaction, and return to the caller if it failed or if this
 4107|       |     * connection is done nonblocking and this loop would execute again. This
 4108|       |     * permits the owner of a multi handle to abort a connection attempt
 4109|       |     * before step2 has completed while ensuring that a client using select()
 4110|       |     * or epoll() will always have a valid fdset to wait on.
 4111|       |     */
 4112|     49|    result = ossl_connect_step2(data, conn, sockindex);
 4113|     49|    if(result || (nonblocking &&
 4114|      1|                  (ssl_connect_2 == connssl->connecting_state ||
 4115|      0|                   ssl_connect_2_reading == connssl->connecting_state ||
 4116|      0|                   ssl_connect_2_writing == connssl->connecting_state)))
 4117|     48|      return result;
 4118|       |
 4119|     49|  } /* repeat step2 until all transactions are done. */
 4120|       |
 4121|      0|  if(ssl_connect_3 == connssl->connecting_state) {
 4122|      0|    result = ossl_connect_step3(data, conn, sockindex);
 4123|      0|    if(result)
 4124|      0|      return result;
 4125|      0|  }
 4126|       |
 4127|      0|  if(ssl_connect_done == connssl->connecting_state) {
 4128|      0|    connssl->state = ssl_connection_complete;
 4129|      0|    conn->recv[sockindex] = ossl_recv;
 4130|      0|    conn->send[sockindex] = ossl_send;
 4131|      0|    *done = TRUE;
 4132|      0|  }
 4133|      0|  else
 4134|      0|    *done = FALSE;
 4135|       |
 4136|       |  /* Reset our connect state machine */
 4137|      0|  connssl->connecting_state = ssl_connect_1;
 4138|       |
 4139|      0|  return CURLE_OK;
 4140|      0|}
openssl.c:ossl_connect_step1:
 2604|     49|{
 2605|     49|  CURLcode result = CURLE_OK;
 2606|     49|  char *ciphers;
 2607|     49|  SSL_METHOD_QUAL SSL_METHOD *req_method = NULL;
 2608|     49|  X509_LOOKUP *lookup = NULL;
 2609|     49|  curl_socket_t sockfd = conn->sock[sockindex];
 2610|     49|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 2611|     49|  ctx_option_t ctx_options = 0;
 2612|     49|  void *ssl_sessionid = NULL;
 2613|       |
 2614|     49|#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
 2615|     49|  bool sni;
 2616|     49|  const char * const hostname = SSL_HOST_NAME();
 2617|       |
 2618|     49|#ifdef ENABLE_IPV6
 2619|     49|  struct in6_addr addr;
 2620|       |#else
 2621|       |  struct in_addr addr;
 2622|       |#endif
 2623|     49|#endif
 2624|     49|  const long int ssl_version = SSL_CONN_CONFIG(version);
 2625|     49|#ifdef USE_OPENSSL_SRP
 2626|     49|  const enum CURL_TLSAUTH ssl_authtype = SSL_SET_OPTION(authtype);
 2627|     49|#endif
 2628|     49|  char * const ssl_cert = SSL_SET_OPTION(primary.clientcert);
 2629|     49|  const struct curl_blob *ssl_cert_blob = SSL_SET_OPTION(primary.cert_blob);
 2630|     49|  const struct curl_blob *ca_info_blob = SSL_CONN_CONFIG(ca_info_blob);
 2631|     49|  const char * const ssl_cert_type = SSL_SET_OPTION(cert_type);
 2632|     49|  const char * const ssl_cafile =
 2633|       |    /* CURLOPT_CAINFO_BLOB overrides CURLOPT_CAINFO */
 2634|     49|    (ca_info_blob ? NULL : SSL_CONN_CONFIG(CAfile));
 2635|     49|  const char * const ssl_capath = SSL_CONN_CONFIG(CApath);
 2636|     49|  const bool verifypeer = SSL_CONN_CONFIG(verifypeer);
 2637|     49|  const char * const ssl_crlfile = SSL_SET_OPTION(CRLfile);
 2638|     49|  char error_buffer[256];
 2639|     49|  struct ssl_backend_data *backend = connssl->backend;
 2640|     49|  bool imported_native_ca = false;
 2641|       |
 2642|     49|  DEBUGASSERT(ssl_connect_1 == connssl->connecting_state);
 2643|       |
 2644|       |  /* Make funny stuff to get random input */
 2645|     49|  result = ossl_seed(data);
 2646|     49|  if(result)
 2647|      0|    return result;
 2648|       |
 2649|     49|  SSL_SET_OPTION_LVALUE(certverifyresult) = !X509_V_OK;
 2650|       |
 2651|       |  /* check to see if we've been told to use an explicit SSL/TLS version */
 2652|       |
 2653|     49|  switch(ssl_version) {
 2654|     49|  case CURL_SSLVERSION_DEFAULT:
 2655|     49|  case CURL_SSLVERSION_TLSv1:
 2656|     49|  case CURL_SSLVERSION_TLSv1_0:
 2657|     49|  case CURL_SSLVERSION_TLSv1_1:
 2658|     49|  case CURL_SSLVERSION_TLSv1_2:
 2659|     49|  case CURL_SSLVERSION_TLSv1_3:
 2660|       |    /* it will be handled later with the context options */
 2661|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
 2662|       |    req_method = TLS_client_method();
 2663|       |#else
 2664|     49|    req_method = SSLv23_client_method();
 2665|     49|#endif
 2666|     49|    use_sni(TRUE);
 2667|     49|    break;
 2668|      0|  case CURL_SSLVERSION_SSLv2:
 2669|      0|    failf(data, "No SSLv2 support");
 2670|      0|    return CURLE_NOT_BUILT_IN;
 2671|      0|  case CURL_SSLVERSION_SSLv3:
 2672|      0|    failf(data, "No SSLv3 support");
 2673|      0|    return CURLE_NOT_BUILT_IN;
 2674|      0|  default:
 2675|      0|    failf(data, "Unrecognized parameter passed via CURLOPT_SSLVERSION");
 2676|      0|    return CURLE_SSL_CONNECT_ERROR;
 2677|     49|  }
 2678|       |
 2679|     49|  DEBUGASSERT(!backend->ctx);
 2680|     49|  backend->ctx = SSL_CTX_new(req_method);
 2681|       |
 2682|     49|  if(!backend->ctx) {
 2683|      0|    failf(data, "SSL: couldn't create a context: %s",
 2684|      0|          ossl_strerror(ERR_peek_error(), error_buffer, sizeof(error_buffer)));
 2685|      0|    return CURLE_OUT_OF_MEMORY;
 2686|      0|  }
 2687|       |
 2688|     49|#ifdef SSL_MODE_RELEASE_BUFFERS
 2689|     49|  SSL_CTX_set_mode(backend->ctx, SSL_MODE_RELEASE_BUFFERS);
 2690|     49|#endif
 2691|       |
 2692|     49|#ifdef SSL_CTRL_SET_MSG_CALLBACK
 2693|     49|  if(data->set.fdebug && data->set.verbose) {
 2694|       |    /* the SSL trace callback is only used for verbose logging */
 2695|      0|    SSL_CTX_set_msg_callback(backend->ctx, ossl_trace);
 2696|      0|    SSL_CTX_set_msg_callback_arg(backend->ctx, conn);
 2697|      0|    set_logger(conn, data);
 2698|      0|  }
 2699|     49|#endif
 2700|       |
 2701|       |  /* OpenSSL contains code to work around lots of bugs and flaws in various
 2702|       |     SSL-implementations. SSL_CTX_set_options() is used to enabled those
 2703|       |     work-arounds. The man page for this option states that SSL_OP_ALL enables
 2704|       |     all the work-arounds and that "It is usually safe to use SSL_OP_ALL to
 2705|       |     enable the bug workaround options if compatibility with somewhat broken
 2706|       |     implementations is desired."
 2707|       |
 2708|       |     The "-no_ticket" option was introduced in OpenSSL 0.9.8j. It's a flag to
 2709|       |     disable "rfc4507bis session ticket support".  rfc4507bis was later turned
 2710|       |     into the proper RFC5077 it seems: https://tools.ietf.org/html/rfc5077
 2711|       |
 2712|       |     The enabled extension concerns the session management. I wonder how often
 2713|       |     libcurl stops a connection and then resumes a TLS session. Also, sending
 2714|       |     the session data is some overhead. I suggest that you just use your
 2715|       |     proposed patch (which explicitly disables TICKET).
 2716|       |
 2717|       |     If someone writes an application with libcurl and OpenSSL who wants to
 2718|       |     enable the feature, one can do this in the SSL callback.
 2719|       |
 2720|       |     SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG option enabling allowed proper
 2721|       |     interoperability with web server Netscape Enterprise Server 2.0.1 which
 2722|       |     was released back in 1996.
 2723|       |
 2724|       |     Due to CVE-2010-4180, option SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG has
 2725|       |     become ineffective as of OpenSSL 0.9.8q and 1.0.0c. In order to mitigate
 2726|       |     CVE-2010-4180 when using previous OpenSSL versions we no longer enable
 2727|       |     this option regardless of OpenSSL version and SSL_OP_ALL definition.
 2728|       |
 2729|       |     OpenSSL added a work-around for a SSL 3.0/TLS 1.0 CBC vulnerability
 2730|       |     (https://www.openssl.org/~bodo/tls-cbc.txt). In 0.9.6e they added a bit to
 2731|       |     SSL_OP_ALL that _disables_ that work-around despite the fact that
 2732|       |     SSL_OP_ALL is documented to do "rather harmless" workarounds. In order to
 2733|       |     keep the secure work-around, the SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS bit
 2734|       |     must not be set.
 2735|       |  */
 2736|       |
 2737|     49|  ctx_options = SSL_OP_ALL;
 2738|       |
 2739|     49|#ifdef SSL_OP_NO_TICKET
 2740|     49|  ctx_options |= SSL_OP_NO_TICKET;
 2741|     49|#endif
 2742|       |
 2743|     49|#ifdef SSL_OP_NO_COMPRESSION
 2744|     49|  ctx_options |= SSL_OP_NO_COMPRESSION;
 2745|     49|#endif
 2746|       |
 2747|     49|#ifdef SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 2748|       |  /* mitigate CVE-2010-4180 */
 2749|     49|  ctx_options &= ~SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG;
 2750|     49|#endif
 2751|       |
 2752|     49|#ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 2753|       |  /* unless the user explicitly asks to allow the protocol vulnerability we
 2754|       |     use the work-around */
 2755|     49|  if(!SSL_SET_OPTION(enable_beast))
 2756|     49|    ctx_options &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
 2757|     49|#endif
 2758|       |
 2759|     49|  switch(ssl_version) {
 2760|      0|    case CURL_SSLVERSION_SSLv2:
 2761|      0|    case CURL_SSLVERSION_SSLv3:
 2762|      0|      return CURLE_NOT_BUILT_IN;
 2763|       |
 2764|       |    /* "--tlsv<x.y>" options mean TLS >= version <x.y> */
 2765|     49|    case CURL_SSLVERSION_DEFAULT:
 2766|     49|    case CURL_SSLVERSION_TLSv1: /* TLS >= version 1.0 */
 2767|     49|    case CURL_SSLVERSION_TLSv1_0: /* TLS >= version 1.0 */
 2768|     49|    case CURL_SSLVERSION_TLSv1_1: /* TLS >= version 1.1 */
 2769|     49|    case CURL_SSLVERSION_TLSv1_2: /* TLS >= version 1.2 */
 2770|     49|    case CURL_SSLVERSION_TLSv1_3: /* TLS >= version 1.3 */
 2771|       |      /* asking for any TLS version as the minimum, means no SSL versions
 2772|       |        allowed */
 2773|     49|      ctx_options |= SSL_OP_NO_SSLv2;
 2774|     49|      ctx_options |= SSL_OP_NO_SSLv3;
 2775|       |
 2776|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) /* 1.1.0 */
 2777|       |      result = set_ssl_version_min_max(backend->ctx, conn);
 2778|       |#else
 2779|     49|      result = set_ssl_version_min_max_legacy(&ctx_options, data, conn,
 2780|     49|                                              sockindex);
 2781|     49|#endif
 2782|     49|      if(result != CURLE_OK)
 2783|      0|        return result;
 2784|     49|      break;
 2785|       |
 2786|     49|    default:
 2787|      0|      failf(data, "Unrecognized parameter passed via CURLOPT_SSLVERSION");
 2788|      0|      return CURLE_SSL_CONNECT_ERROR;
 2789|     49|  }
 2790|       |
 2791|     49|  SSL_CTX_set_options(backend->ctx, ctx_options);
 2792|       |
 2793|     49|#ifdef HAS_NPN
 2794|     49|  if(conn->bits.tls_enable_npn)
 2795|      0|    SSL_CTX_set_next_proto_select_cb(backend->ctx, select_next_proto_cb, data);
 2796|     49|#endif
 2797|       |
 2798|     49|#ifdef HAS_ALPN
 2799|     49|  if(conn->bits.tls_enable_alpn) {
 2800|      0|    int cur = 0;
 2801|      0|    unsigned char protocols[128];
 2802|       |
 2803|      0|#ifdef USE_HTTP2
 2804|      0|    if(data->state.httpwant >= CURL_HTTP_VERSION_2
 2805|      0|#ifndef CURL_DISABLE_PROXY
 2806|      0|       && (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)
 2807|      0|#endif
 2808|      0|      ) {
 2809|      0|      protocols[cur++] = ALPN_H2_LENGTH;
 2810|       |
 2811|      0|      memcpy(&protocols[cur], ALPN_H2, ALPN_H2_LENGTH);
 2812|      0|      cur += ALPN_H2_LENGTH;
 2813|      0|      infof(data, "ALPN, offering %s", ALPN_H2);
 2814|      0|    }
 2815|      0|#endif
 2816|       |
 2817|      0|    protocols[cur++] = ALPN_HTTP_1_1_LENGTH;
 2818|      0|    memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
 2819|      0|    cur += ALPN_HTTP_1_1_LENGTH;
 2820|      0|    infof(data, "ALPN, offering %s", ALPN_HTTP_1_1);
 2821|       |
 2822|       |    /* expects length prefixed preference ordered list of protocols in wire
 2823|       |     * format
 2824|       |     */
 2825|      0|    if(SSL_CTX_set_alpn_protos(backend->ctx, protocols, cur)) {
 2826|      0|      failf(data, "Error setting ALPN");
 2827|      0|      return CURLE_SSL_CONNECT_ERROR;
 2828|      0|    }
 2829|      0|  }
 2830|     49|#endif
 2831|       |
 2832|     49|  if(ssl_cert || ssl_cert_blob || ssl_cert_type) {
 2833|      0|    if(!result &&
 2834|      0|       !cert_stuff(data, backend->ctx,
 2835|      0|                   ssl_cert, ssl_cert_blob, ssl_cert_type,
 2836|      0|                   SSL_SET_OPTION(key), SSL_SET_OPTION(key_blob),
 2837|      0|                   SSL_SET_OPTION(key_type), SSL_SET_OPTION(key_passwd)))
 2838|      0|      result = CURLE_SSL_CERTPROBLEM;
 2839|      0|    if(result)
 2840|       |      /* failf() is already done in cert_stuff() */
 2841|      0|      return result;
 2842|      0|  }
 2843|       |
 2844|     49|  ciphers = SSL_CONN_CONFIG(cipher_list);
 2845|     49|  if(!ciphers)
 2846|     49|    ciphers = (char *)DEFAULT_CIPHER_SELECTION;
 2847|     49|  if(ciphers) {
 2848|     49|    if(!SSL_CTX_set_cipher_list(backend->ctx, ciphers)) {
 2849|      0|      failf(data, "failed setting cipher list: %s", ciphers);
 2850|      0|      return CURLE_SSL_CIPHER;
 2851|      0|    }
 2852|     49|    infof(data, "Cipher selection: %s", ciphers);
 2853|     49|  }
 2854|       |
 2855|       |#ifdef HAVE_SSL_CTX_SET_CIPHERSUITES
 2856|       |  {
 2857|       |    char *ciphers13 = SSL_CONN_CONFIG(cipher_list13);
 2858|       |    if(ciphers13) {
 2859|       |      if(!SSL_CTX_set_ciphersuites(backend->ctx, ciphers13)) {
 2860|       |        failf(data, "failed setting TLS 1.3 cipher suite: %s", ciphers13);
 2861|       |        return CURLE_SSL_CIPHER;
 2862|       |      }
 2863|       |      infof(data, "TLS 1.3 cipher selection: %s", ciphers13);
 2864|       |    }
 2865|       |  }
 2866|       |#endif
 2867|       |
 2868|       |#ifdef HAVE_SSL_CTX_SET_POST_HANDSHAKE_AUTH
 2869|       |  /* OpenSSL 1.1.1 requires clients to opt-in for PHA */
 2870|       |  SSL_CTX_set_post_handshake_auth(backend->ctx, 1);
 2871|       |#endif
 2872|       |
 2873|       |#ifdef HAVE_SSL_CTX_SET_EC_CURVES
 2874|       |  {
 2875|       |    char *curves = SSL_CONN_CONFIG(curves);
 2876|       |    if(curves) {
 2877|       |      if(!SSL_CTX_set1_curves_list(backend->ctx, curves)) {
 2878|       |        failf(data, "failed setting curves list: '%s'", curves);
 2879|       |        return CURLE_SSL_CIPHER;
 2880|       |      }
 2881|       |    }
 2882|       |  }
 2883|       |#endif
 2884|       |
 2885|     49|#ifdef USE_OPENSSL_SRP
 2886|     49|  if(ssl_authtype == CURL_TLSAUTH_SRP) {
 2887|      0|    char * const ssl_username = SSL_SET_OPTION(username);
 2888|       |
 2889|      0|    infof(data, "Using TLS-SRP username: %s", ssl_username);
 2890|       |
 2891|      0|    if(!SSL_CTX_set_srp_username(backend->ctx, ssl_username)) {
 2892|      0|      failf(data, "Unable to set SRP user name");
 2893|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2894|      0|    }
 2895|      0|    if(!SSL_CTX_set_srp_password(backend->ctx, SSL_SET_OPTION(password))) {
 2896|      0|      failf(data, "failed setting SRP password");
 2897|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2898|      0|    }
 2899|      0|    if(!SSL_CONN_CONFIG(cipher_list)) {
 2900|      0|      infof(data, "Setting cipher list SRP");
 2901|       |
 2902|      0|      if(!SSL_CTX_set_cipher_list(backend->ctx, "SRP")) {
 2903|      0|        failf(data, "failed setting SRP cipher list");
 2904|      0|        return CURLE_SSL_CIPHER;
 2905|      0|      }
 2906|      0|    }
 2907|      0|  }
 2908|     49|#endif
 2909|       |
 2910|       |
 2911|       |#if defined(USE_WIN32_CRYPTO)
 2912|       |  /* Import certificates from the Windows root certificate store if requested.
 2913|       |     https://stackoverflow.com/questions/9507184/
 2914|       |     https://github.com/d3x0r/SACK/blob/master/src/netlib/ssl_layer.c#L1037
 2915|       |     https://tools.ietf.org/html/rfc5280 */
 2916|       |  if((SSL_CONN_CONFIG(verifypeer) || SSL_CONN_CONFIG(verifyhost)) &&
 2917|       |     (SSL_SET_OPTION(native_ca_store))) {
 2918|       |    X509_STORE *store = SSL_CTX_get_cert_store(backend->ctx);
 2919|       |    HCERTSTORE hStore = CertOpenSystemStore(0, TEXT("ROOT"));
 2920|       |
 2921|       |    if(hStore) {
 2922|       |      PCCERT_CONTEXT pContext = NULL;
 2923|       |      /* The array of enhanced key usage OIDs will vary per certificate and is
 2924|       |         declared outside of the loop so that rather than malloc/free each
 2925|       |         iteration we can grow it with realloc, when necessary. */
 2926|       |      CERT_ENHKEY_USAGE *enhkey_usage = NULL;
 2927|       |      DWORD enhkey_usage_size = 0;
 2928|       |
 2929|       |      /* This loop makes a best effort to import all valid certificates from
 2930|       |         the MS root store. If a certificate cannot be imported it is skipped.
 2931|       |         'result' is used to store only hard-fail conditions (such as out of
 2932|       |         memory) that cause an early break. */
 2933|       |      result = CURLE_OK;
 2934|       |      for(;;) {
 2935|       |        X509 *x509;
 2936|       |        FILETIME now;
 2937|       |        BYTE key_usage[2];
 2938|       |        DWORD req_size;
 2939|       |        const unsigned char *encoded_cert;
 2940|       |#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 2941|       |        char cert_name[256];
 2942|       |#endif
 2943|       |
 2944|       |        pContext = CertEnumCertificatesInStore(hStore, pContext);
 2945|       |        if(!pContext)
 2946|       |          break;
 2947|       |
 2948|       |#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 2949|       |        if(!CertGetNameStringA(pContext, CERT_NAME_SIMPLE_DISPLAY_TYPE, 0,
 2950|       |                               NULL, cert_name, sizeof(cert_name))) {
 2951|       |          strcpy(cert_name, "Unknown");
 2952|       |        }
 2953|       |        infof(data, "SSL: Checking cert \"%s\"", cert_name);
 2954|       |#endif
 2955|       |
 2956|       |        encoded_cert = (const unsigned char *)pContext->pbCertEncoded;
 2957|       |        if(!encoded_cert)
 2958|       |          continue;
 2959|       |
 2960|       |        GetSystemTimeAsFileTime(&now);
 2961|       |        if(CompareFileTime(&pContext->pCertInfo->NotBefore, &now) > 0 ||
 2962|       |           CompareFileTime(&now, &pContext->pCertInfo->NotAfter) > 0)
 2963|       |          continue;
 2964|       |
 2965|       |        /* If key usage exists check for signing attribute */
 2966|       |        if(CertGetIntendedKeyUsage(pContext->dwCertEncodingType,
 2967|       |                                   pContext->pCertInfo,
 2968|       |                                   key_usage, sizeof(key_usage))) {
 2969|       |          if(!(key_usage[0] & CERT_KEY_CERT_SIGN_KEY_USAGE))
 2970|       |            continue;
 2971|       |        }
 2972|       |        else if(GetLastError())
 2973|       |          continue;
 2974|       |
 2975|       |        /* If enhanced key usage exists check for server auth attribute.
 2976|       |         *
 2977|       |         * Note "In a Microsoft environment, a certificate might also have EKU
 2978|       |         * extended properties that specify valid uses for the certificate."
 2979|       |         * The call below checks both, and behavior varies depending on what is
 2980|       |         * found. For more details see CertGetEnhancedKeyUsage doc.
 2981|       |         */
 2982|       |        if(CertGetEnhancedKeyUsage(pContext, 0, NULL, &req_size)) {
 2983|       |          if(req_size && req_size > enhkey_usage_size) {
 2984|       |            void *tmp = realloc(enhkey_usage, req_size);
 2985|       |
 2986|       |            if(!tmp) {
 2987|       |              failf(data, "SSL: Out of memory allocating for OID list");
 2988|       |              result = CURLE_OUT_OF_MEMORY;
 2989|       |              break;
 2990|       |            }
 2991|       |
 2992|       |            enhkey_usage = (CERT_ENHKEY_USAGE *)tmp;
 2993|       |            enhkey_usage_size = req_size;
 2994|       |          }
 2995|       |
 2996|       |          if(CertGetEnhancedKeyUsage(pContext, 0, enhkey_usage, &req_size)) {
 2997|       |            if(!enhkey_usage->cUsageIdentifier) {
 2998|       |              /* "If GetLastError returns CRYPT_E_NOT_FOUND, the certificate is
 2999|       |                 good for all uses. If it returns zero, the certificate has no
 3000|       |                 valid uses." */
 3001|       |              if((HRESULT)GetLastError() != CRYPT_E_NOT_FOUND)
 3002|       |                continue;
 3003|       |            }
 3004|       |            else {
 3005|       |              DWORD i;
 3006|       |              bool found = false;
 3007|       |
 3008|       |              for(i = 0; i < enhkey_usage->cUsageIdentifier; ++i) {
 3009|       |                if(!strcmp("1.3.6.1.5.5.7.3.1" /* OID server auth */,
 3010|       |                           enhkey_usage->rgpszUsageIdentifier[i])) {
 3011|       |                  found = true;
 3012|       |                  break;
 3013|       |                }
 3014|       |              }
 3015|       |
 3016|       |              if(!found)
 3017|       |                continue;
 3018|       |            }
 3019|       |          }
 3020|       |          else
 3021|       |            continue;
 3022|       |        }
 3023|       |        else
 3024|       |          continue;
 3025|       |
 3026|       |        x509 = d2i_X509(NULL, &encoded_cert, pContext->cbCertEncoded);
 3027|       |        if(!x509)
 3028|       |          continue;
 3029|       |
 3030|       |        /* Try to import the certificate. This may fail for legitimate reasons
 3031|       |           such as duplicate certificate, which is allowed by MS but not
 3032|       |           OpenSSL. */
 3033|       |        if(X509_STORE_add_cert(store, x509) == 1) {
 3034|       |#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 3035|       |          infof(data, "SSL: Imported cert \"%s\"", cert_name);
 3036|       |#endif
 3037|       |          imported_native_ca = true;
 3038|       |        }
 3039|       |        X509_free(x509);
 3040|       |      }
 3041|       |
 3042|       |      free(enhkey_usage);
 3043|       |      CertFreeCertificateContext(pContext);
 3044|       |      CertCloseStore(hStore, 0);
 3045|       |
 3046|       |      if(result)
 3047|       |        return result;
 3048|       |    }
 3049|       |    if(imported_native_ca)
 3050|       |      infof(data, "successfully imported Windows CA store");
 3051|       |    else
 3052|       |      infof(data, "error importing Windows CA store, continuing anyway");
 3053|       |  }
 3054|       |#endif
 3055|       |
 3056|     49|  if(ca_info_blob) {
 3057|      0|    result = load_cacert_from_memory(backend->ctx, ca_info_blob);
 3058|      0|    if(result) {
 3059|      0|      if(result == CURLE_OUT_OF_MEMORY ||
 3060|      0|         (verifypeer && !imported_native_ca)) {
 3061|      0|        failf(data, "error importing CA certificate blob");
 3062|      0|        return result;
 3063|      0|      }
 3064|       |      /* Only warn if no certificate verification is required. */
 3065|      0|      infof(data, "error importing CA certificate blob, continuing anyway");
 3066|      0|    }
 3067|      0|  }
 3068|       |
 3069|     49|  if(verifypeer && !imported_native_ca && (ssl_cafile || ssl_capath)) {
 3070|       |#if defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR >= 3)
 3071|       |  /* OpenSSL 3.0.0 has deprecated SSL_CTX_load_verify_locations */
 3072|       |    if(ssl_cafile &&
 3073|       |       !SSL_CTX_load_verify_file(backend->ctx, ssl_cafile)) {
 3074|       |      /* Fail if we insist on successfully verifying the server. */
 3075|       |      failf(data, "error setting certificate file: %s", ssl_cafile);
 3076|       |      return CURLE_SSL_CACERT_BADFILE;
 3077|       |    }
 3078|       |    if(ssl_capath &&
 3079|       |       !SSL_CTX_load_verify_dir(backend->ctx, ssl_capath)) {
 3080|       |      /* Fail if we insist on successfully verifying the server. */
 3081|       |      failf(data, "error setting certificate path: %s", ssl_capath);
 3082|       |      return CURLE_SSL_CACERT_BADFILE;
 3083|       |    }
 3084|       |#else
 3085|       |    /* tell OpenSSL where to find CA certificates that are used to verify the
 3086|       |       server's certificate. */
 3087|     49|    if(!SSL_CTX_load_verify_locations(backend->ctx, ssl_cafile, ssl_capath)) {
 3088|       |      /* Fail if we insist on successfully verifying the server. */
 3089|      0|      failf(data, "error setting certificate verify locations:"
 3090|      0|            "  CAfile: %s CApath: %s",
 3091|      0|            ssl_cafile ? ssl_cafile : "none",
 3092|      0|            ssl_capath ? ssl_capath : "none");
 3093|      0|      return CURLE_SSL_CACERT_BADFILE;
 3094|      0|    }
 3095|     49|#endif
 3096|     49|    infof(data, " CAfile: %s", ssl_cafile ? ssl_cafile : "none");
 3097|     49|    infof(data, " CApath: %s", ssl_capath ? ssl_capath : "none");
 3098|     49|  }
 3099|       |
 3100|       |#ifdef CURL_CA_FALLBACK
 3101|       |  if(verifypeer &&
 3102|       |     !ca_info_blob && !ssl_cafile && !ssl_capath && !imported_native_ca) {
 3103|       |    /* verifying the peer without any CA certificates won't
 3104|       |       work so use openssl's built-in default as fallback */
 3105|       |    SSL_CTX_set_default_verify_paths(backend->ctx);
 3106|       |  }
 3107|       |#endif
 3108|       |
 3109|     49|  if(ssl_crlfile) {
 3110|       |    /* tell OpenSSL where to find CRL file that is used to check certificate
 3111|       |     * revocation */
 3112|      0|    lookup = X509_STORE_add_lookup(SSL_CTX_get_cert_store(backend->ctx),
 3113|      0|                                 X509_LOOKUP_file());
 3114|      0|    if(!lookup ||
 3115|      0|       (!X509_load_crl_file(lookup, ssl_crlfile, X509_FILETYPE_PEM)) ) {
 3116|      0|      failf(data, "error loading CRL file: %s", ssl_crlfile);
 3117|      0|      return CURLE_SSL_CRL_BADFILE;
 3118|      0|    }
 3119|       |    /* Everything is fine. */
 3120|      0|    infof(data, "successfully loaded CRL file:");
 3121|      0|    X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),
 3122|      0|                         X509_V_FLAG_CRL_CHECK|X509_V_FLAG_CRL_CHECK_ALL);
 3123|       |
 3124|      0|    infof(data, "  CRLfile: %s", ssl_crlfile);
 3125|      0|  }
 3126|       |
 3127|     49|  if(verifypeer) {
 3128|       |    /* Try building a chain using issuers in the trusted store first to avoid
 3129|       |       problems with server-sent legacy intermediates.  Newer versions of
 3130|       |       OpenSSL do alternate chain checking by default but we do not know how to
 3131|       |       determine that in a reliable manner.
 3132|       |       https://rt.openssl.org/Ticket/Display.html?id=3621&user=guest&pass=guest
 3133|       |    */
 3134|     49|#if defined(X509_V_FLAG_TRUSTED_FIRST)
 3135|     49|    X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),
 3136|     49|                         X509_V_FLAG_TRUSTED_FIRST);
 3137|     49|#endif
 3138|     49|#ifdef X509_V_FLAG_PARTIAL_CHAIN
 3139|     49|    if(!SSL_SET_OPTION(no_partialchain) && !ssl_crlfile) {
 3140|       |      /* Have intermediate certificates in the trust store be treated as
 3141|       |         trust-anchors, in the same way as self-signed root CA certificates
 3142|       |         are. This allows users to verify servers using the intermediate cert
 3143|       |         only, instead of needing the whole chain.
 3144|       |
 3145|       |         Due to OpenSSL bug https://github.com/openssl/openssl/issues/5081 we
 3146|       |         cannot do partial chains with a CRL check.
 3147|       |      */
 3148|     49|      X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),
 3149|     49|                           X509_V_FLAG_PARTIAL_CHAIN);
 3150|     49|    }
 3151|     49|#endif
 3152|     49|  }
 3153|       |
 3154|       |  /* OpenSSL always tries to verify the peer, this only says whether it should
 3155|       |   * fail to connect if the verification fails, or if it should continue
 3156|       |   * anyway. In the latter case the result of the verification is checked with
 3157|       |   * SSL_get_verify_result() below. */
 3158|     49|  SSL_CTX_set_verify(backend->ctx,
 3159|     49|                     verifypeer ? SSL_VERIFY_PEER : SSL_VERIFY_NONE, NULL);
 3160|       |
 3161|       |  /* Enable logging of secrets to the file specified in env SSLKEYLOGFILE. */
 3162|       |#ifdef HAVE_KEYLOG_CALLBACK
 3163|       |  if(Curl_tls_keylog_enabled()) {
 3164|       |    SSL_CTX_set_keylog_callback(backend->ctx, ossl_keylog_callback);
 3165|       |  }
 3166|       |#endif
 3167|       |
 3168|       |  /* Enable the session cache because it's a prerequisite for the "new session"
 3169|       |   * callback. Use the "external storage" mode to prevent OpenSSL from creating
 3170|       |   * an internal session cache.
 3171|       |   */
 3172|     49|  SSL_CTX_set_session_cache_mode(backend->ctx,
 3173|     49|      SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL);
 3174|     49|  SSL_CTX_sess_set_new_cb(backend->ctx, ossl_new_session_cb);
 3175|       |
 3176|       |  /* give application a chance to interfere with SSL set up. */
 3177|     49|  if(data->set.ssl.fsslctx) {
 3178|      0|    Curl_set_in_callback(data, true);
 3179|      0|    result = (*data->set.ssl.fsslctx)(data, backend->ctx,
 3180|      0|                                      data->set.ssl.fsslctxp);
 3181|      0|    Curl_set_in_callback(data, false);
 3182|      0|    if(result) {
 3183|      0|      failf(data, "error signaled by ssl ctx callback");
 3184|      0|      return result;
 3185|      0|    }
 3186|      0|  }
 3187|       |
 3188|       |  /* Let's make an SSL structure */
 3189|     49|  if(backend->handle)
 3190|      0|    SSL_free(backend->handle);
 3191|     49|  backend->handle = SSL_new(backend->ctx);
 3192|     49|  if(!backend->handle) {
 3193|      0|    failf(data, "SSL: couldn't create a context (handle)!");
 3194|      0|    return CURLE_OUT_OF_MEMORY;
 3195|      0|  }
 3196|       |
 3197|     49|#if (OPENSSL_VERSION_NUMBER >= 0x0090808fL) && !defined(OPENSSL_NO_TLSEXT) && \
 3198|     49|    !defined(OPENSSL_NO_OCSP)
 3199|     49|  if(SSL_CONN_CONFIG(verifystatus))
 3200|      0|    SSL_set_tlsext_status_type(backend->handle, TLSEXT_STATUSTYPE_ocsp);
 3201|     49|#endif
 3202|       |
 3203|       |#if defined(OPENSSL_IS_BORINGSSL) && defined(ALLOW_RENEG)
 3204|       |  SSL_set_renegotiate_mode(backend->handle, ssl_renegotiate_freely);
 3205|       |#endif
 3206|       |
 3207|     49|  SSL_set_connect_state(backend->handle);
 3208|       |
 3209|     49|  backend->server_cert = 0x0;
 3210|     49|#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
 3211|     49|  if((0 == Curl_inet_pton(AF_INET, hostname, &addr)) &&
 3212|     49|#ifdef ENABLE_IPV6
 3213|     49|     (0 == Curl_inet_pton(AF_INET6, hostname, &addr)) &&
 3214|     49|#endif
 3215|     49|     sni) {
 3216|     48|    size_t nlen = strlen(hostname);
 3217|     48|    if((long)nlen >= data->set.buffer_size)
 3218|       |      /* this is seriously messed up */
 3219|      0|      return CURLE_SSL_CONNECT_ERROR;
 3220|       |
 3221|       |    /* RFC 6066 section 3 says the SNI field is case insensitive, but browsers
 3222|       |       send the data lowercase and subsequently there are now numerous servers
 3223|       |       out there that don't work unless the name is lowercased */
 3224|     48|    Curl_strntolower(data->state.buffer, hostname, nlen);
 3225|     48|    data->state.buffer[nlen] = 0;
 3226|     48|    if(!SSL_set_tlsext_host_name(backend->handle, data->state.buffer))
 3227|      1|      infof(data, "WARNING: failed to configure server name indication (SNI) "
 3228|      1|            "TLS extension");
 3229|     48|  }
 3230|     49|#endif
 3231|       |
 3232|     49|  ossl_associate_connection(data, conn, sockindex);
 3233|       |
 3234|     49|  Curl_ssl_sessionid_lock(data);
 3235|     49|  if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,
 3236|     49|                            &ssl_sessionid, NULL, sockindex)) {
 3237|       |    /* we got a session id, use it! */
 3238|      0|    if(!SSL_set_session(backend->handle, ssl_sessionid)) {
 3239|      0|      Curl_ssl_sessionid_unlock(data);
 3240|      0|      failf(data, "SSL: SSL_set_session failed: %s",
 3241|      0|            ossl_strerror(ERR_get_error(), error_buffer,
 3242|      0|                          sizeof(error_buffer)));
 3243|      0|      return CURLE_SSL_CONNECT_ERROR;
 3244|      0|    }
 3245|       |    /* Informational message */
 3246|      0|    infof(data, "SSL re-using session ID");
 3247|      0|  }
 3248|     49|  Curl_ssl_sessionid_unlock(data);
 3249|       |
 3250|     49|#ifndef CURL_DISABLE_PROXY
 3251|     49|  if(conn->proxy_ssl[sockindex].use) {
 3252|      0|    BIO *const bio = BIO_new(BIO_f_ssl());
 3253|      0|    SSL *handle = conn->proxy_ssl[sockindex].backend->handle;
 3254|      0|    DEBUGASSERT(ssl_connection_complete == conn->proxy_ssl[sockindex].state);
 3255|      0|    DEBUGASSERT(handle != NULL);
 3256|      0|    DEBUGASSERT(bio != NULL);
 3257|      0|    BIO_set_ssl(bio, handle, FALSE);
 3258|      0|    SSL_set_bio(backend->handle, bio, bio);
 3259|      0|  }
 3260|     49|  else
 3261|     49|#endif
 3262|     49|    if(!SSL_set_fd(backend->handle, (int)sockfd)) {
 3263|       |    /* pass the raw socket into the SSL layers */
 3264|      0|    failf(data, "SSL: SSL_set_fd failed: %s",
 3265|      0|          ossl_strerror(ERR_get_error(), error_buffer, sizeof(error_buffer)));
 3266|      0|    return CURLE_SSL_CONNECT_ERROR;
 3267|      0|  }
 3268|       |
 3269|     49|  connssl->connecting_state = ssl_connect_2;
 3270|       |
 3271|     49|  return CURLE_OK;
 3272|     49|}
openssl.c:set_ssl_version_min_max_legacy:
 2404|     49|{
 2405|     49|  long ssl_version = SSL_CONN_CONFIG(version);
 2406|     49|  long ssl_version_max = SSL_CONN_CONFIG(version_max);
 2407|       |
 2408|     49|  (void) data; /* In case it's unused. */
 2409|       |
 2410|     49|  switch(ssl_version) {
 2411|      0|    case CURL_SSLVERSION_TLSv1_3:
 2412|       |#ifdef TLS1_3_VERSION
 2413|       |    {
 2414|       |      struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 2415|       |      SSL_CTX_set_max_proto_version(backend->ctx, TLS1_3_VERSION);
 2416|       |      *ctx_options |= SSL_OP_NO_TLSv1_2;
 2417|       |    }
 2418|       |#else
 2419|      0|      (void)sockindex;
 2420|      0|      (void)ctx_options;
 2421|      0|      failf(data, OSSL_PACKAGE " was built without TLS 1.3 support");
 2422|      0|      return CURLE_NOT_BUILT_IN;
 2423|      0|#endif
 2424|       |      /* FALLTHROUGH */
 2425|      0|    case CURL_SSLVERSION_TLSv1_2:
 2426|      0|#if OPENSSL_VERSION_NUMBER >= 0x1000100FL
 2427|      0|      *ctx_options |= SSL_OP_NO_TLSv1_1;
 2428|       |#else
 2429|       |      failf(data, OSSL_PACKAGE " was built without TLS 1.2 support");
 2430|       |      return CURLE_NOT_BUILT_IN;
 2431|       |#endif
 2432|       |      /* FALLTHROUGH */
 2433|      0|    case CURL_SSLVERSION_TLSv1_1:
 2434|      0|#if OPENSSL_VERSION_NUMBER >= 0x1000100FL
 2435|      0|      *ctx_options |= SSL_OP_NO_TLSv1;
 2436|       |#else
 2437|       |      failf(data, OSSL_PACKAGE " was built without TLS 1.1 support");
 2438|       |      return CURLE_NOT_BUILT_IN;
 2439|       |#endif
 2440|       |      /* FALLTHROUGH */
 2441|      0|    case CURL_SSLVERSION_TLSv1_0:
 2442|      0|    case CURL_SSLVERSION_TLSv1:
 2443|      0|      break;
 2444|     49|  }
 2445|       |
 2446|     49|  switch(ssl_version_max) {
 2447|      0|    case CURL_SSLVERSION_MAX_TLSv1_0:
 2448|      0|#if OPENSSL_VERSION_NUMBER >= 0x1000100FL
 2449|      0|      *ctx_options |= SSL_OP_NO_TLSv1_1;
 2450|      0|#endif
 2451|       |      /* FALLTHROUGH */
 2452|      0|    case CURL_SSLVERSION_MAX_TLSv1_1:
 2453|      0|#if OPENSSL_VERSION_NUMBER >= 0x1000100FL
 2454|      0|      *ctx_options |= SSL_OP_NO_TLSv1_2;
 2455|      0|#endif
 2456|       |      /* FALLTHROUGH */
 2457|      0|    case CURL_SSLVERSION_MAX_TLSv1_2:
 2458|       |#ifdef TLS1_3_VERSION
 2459|       |      *ctx_options |= SSL_OP_NO_TLSv1_3;
 2460|       |#endif
 2461|      0|      break;
 2462|      0|    case CURL_SSLVERSION_MAX_TLSv1_3:
 2463|       |#ifdef TLS1_3_VERSION
 2464|       |      break;
 2465|       |#else
 2466|      0|      failf(data, OSSL_PACKAGE " was built without TLS 1.3 support");
 2467|      0|      return CURLE_NOT_BUILT_IN;
 2468|     49|#endif
 2469|     49|  }
 2470|     49|  return CURLE_OK;
 2471|     49|}
openssl.c:ossl_connect_step2:
 3276|     49|{
 3277|     49|  int err;
 3278|     49|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 3279|     49|  struct ssl_backend_data *backend = connssl->backend;
 3280|     49|  DEBUGASSERT(ssl_connect_2 == connssl->connecting_state
 3281|     49|              || ssl_connect_2_reading == connssl->connecting_state
 3282|     49|              || ssl_connect_2_writing == connssl->connecting_state);
 3283|       |
 3284|     49|  ERR_clear_error();
 3285|       |
 3286|     49|  err = SSL_connect(backend->handle);
 3287|     49|#ifndef HAVE_KEYLOG_CALLBACK
 3288|     49|  if(Curl_tls_keylog_enabled()) {
 3289|       |    /* If key logging is enabled, wait for the handshake to complete and then
 3290|       |     * proceed with logging secrets (for TLS 1.2 or older).
 3291|       |     */
 3292|      0|    ossl_log_tls12_secret(backend->handle, &backend->keylog_done);
 3293|      0|  }
 3294|     49|#endif
 3295|       |
 3296|       |  /* 1  is fine
 3297|       |     0  is "not successful but was shut down controlled"
 3298|       |     <0 is "handshake was not successful, because a fatal error occurred" */
 3299|     49|  if(1 != err) {
 3300|     49|    int detail = SSL_get_error(backend->handle, err);
 3301|       |
 3302|     49|    if(SSL_ERROR_WANT_READ == detail) {
 3303|      1|      connssl->connecting_state = ssl_connect_2_reading;
 3304|      1|      return CURLE_OK;
 3305|      1|    }
 3306|     48|    if(SSL_ERROR_WANT_WRITE == detail) {
 3307|      0|      connssl->connecting_state = ssl_connect_2_writing;
 3308|      0|      return CURLE_OK;
 3309|      0|    }
 3310|       |#ifdef SSL_ERROR_WANT_ASYNC
 3311|       |    if(SSL_ERROR_WANT_ASYNC == detail) {
 3312|       |      connssl->connecting_state = ssl_connect_2;
 3313|       |      return CURLE_OK;
 3314|       |    }
 3315|       |#endif
 3316|     48|    else {
 3317|       |      /* untreated error */
 3318|     48|      unsigned long errdetail;
 3319|     48|      char error_buffer[256]="";
 3320|     48|      CURLcode result;
 3321|     48|      long lerr;
 3322|     48|      int lib;
 3323|     48|      int reason;
 3324|       |
 3325|       |      /* the connection failed, we're not waiting for anything else. */
 3326|     48|      connssl->connecting_state = ssl_connect_2;
 3327|       |
 3328|       |      /* Get the earliest error code from the thread's error queue and remove
 3329|       |         the entry. */
 3330|     48|      errdetail = ERR_get_error();
 3331|       |
 3332|       |      /* Extract which lib and reason */
 3333|     48|      lib = ERR_GET_LIB(errdetail);
 3334|     48|      reason = ERR_GET_REASON(errdetail);
 3335|       |
 3336|     48|      if((lib == ERR_LIB_SSL) &&
 3337|     48|         ((reason == SSL_R_CERTIFICATE_VERIFY_FAILED) ||
 3338|      0|          (reason == SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED))) {
 3339|      0|        result = CURLE_PEER_FAILED_VERIFICATION;
 3340|       |
 3341|      0|        lerr = SSL_get_verify_result(backend->handle);
 3342|      0|        if(lerr != X509_V_OK) {
 3343|      0|          SSL_SET_OPTION_LVALUE(certverifyresult) = lerr;
 3344|      0|          msnprintf(error_buffer, sizeof(error_buffer),
 3345|      0|                    "SSL certificate problem: %s",
 3346|      0|                    X509_verify_cert_error_string(lerr));
 3347|      0|        }
 3348|      0|        else
 3349|       |          /* strcpy() is fine here as long as the string fits within
 3350|       |             error_buffer */
 3351|      0|          strcpy(error_buffer, "SSL certificate verification failed");
 3352|      0|      }
 3353|       |#if (OPENSSL_VERSION_NUMBER >= 0x10101000L && \
 3354|       |    !defined(LIBRESSL_VERSION_NUMBER) && \
 3355|       |    !defined(OPENSSL_IS_BORINGSSL))
 3356|       |      /* SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED is only available on
 3357|       |         OpenSSL version above v1.1.1, not LibreSSL nor BoringSSL */
 3358|       |      else if((lib == ERR_LIB_SSL) &&
 3359|       |              (reason == SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED)) {
 3360|       |          /* If client certificate is required, communicate the
 3361|       |             error to client */
 3362|       |          result = CURLE_SSL_CLIENTCERT;
 3363|       |          ossl_strerror(errdetail, error_buffer, sizeof(error_buffer));
 3364|       |      }
 3365|       |#endif
 3366|     48|      else {
 3367|     48|        result = CURLE_SSL_CONNECT_ERROR;
 3368|     48|        ossl_strerror(errdetail, error_buffer, sizeof(error_buffer));
 3369|     48|      }
 3370|       |
 3371|       |      /* detail is already set to the SSL error above */
 3372|       |
 3373|       |      /* If we e.g. use SSLv2 request-method and the server doesn't like us
 3374|       |       * (RST connection, etc.), OpenSSL gives no explanation whatsoever and
 3375|       |       * the SO_ERROR is also lost.
 3376|       |       */
 3377|     48|      if(CURLE_SSL_CONNECT_ERROR == result && errdetail == 0) {
 3378|     48|        const char * const hostname = SSL_HOST_NAME();
 3379|     48|        const long int port = SSL_HOST_PORT();
 3380|     48|        char extramsg[80]="";
 3381|     48|        int sockerr = SOCKERRNO;
 3382|     48|        if(sockerr && detail == SSL_ERROR_SYSCALL)
 3383|      0|          Curl_strerror(sockerr, extramsg, sizeof(extramsg));
 3384|     48|        failf(data, OSSL_PACKAGE " SSL_connect: %s in connection to %s:%ld ",
 3385|     48|              extramsg[0] ? extramsg : SSL_ERROR_to_str(detail),
 3386|     48|              hostname, port);
 3387|     48|        return result;
 3388|     48|      }
 3389|       |
 3390|       |      /* Could be a CERT problem */
 3391|      0|      failf(data, "%s", error_buffer);
 3392|       |
 3393|      0|      return result;
 3394|     48|    }
 3395|     48|  }
 3396|      0|  else {
 3397|       |    /* we connected fine, we're not waiting for anything else. */
 3398|      0|    connssl->connecting_state = ssl_connect_3;
 3399|       |
 3400|       |    /* Informational message */
 3401|      0|    infof(data, "SSL connection using %s / %s",
 3402|      0|          SSL_get_version(backend->handle),
 3403|      0|          SSL_get_cipher(backend->handle));
 3404|       |
 3405|      0|#ifdef HAS_ALPN
 3406|       |    /* Sets data and len to negotiated protocol, len is 0 if no protocol was
 3407|       |     * negotiated
 3408|       |     */
 3409|      0|    if(conn->bits.tls_enable_alpn) {
 3410|      0|      const unsigned char *neg_protocol;
 3411|      0|      unsigned int len;
 3412|      0|      SSL_get0_alpn_selected(backend->handle, &neg_protocol, &len);
 3413|      0|      if(len) {
 3414|      0|        infof(data, "ALPN, server accepted to use %.*s", len, neg_protocol);
 3415|       |
 3416|      0|#ifdef USE_HTTP2
 3417|      0|        if(len == ALPN_H2_LENGTH &&
 3418|      0|           !memcmp(ALPN_H2, neg_protocol, len)) {
 3419|      0|          conn->negnpn = CURL_HTTP_VERSION_2;
 3420|      0|        }
 3421|      0|        else
 3422|      0|#endif
 3423|      0|        if(len == ALPN_HTTP_1_1_LENGTH &&
 3424|      0|           !memcmp(ALPN_HTTP_1_1, neg_protocol, ALPN_HTTP_1_1_LENGTH)) {
 3425|      0|          conn->negnpn = CURL_HTTP_VERSION_1_1;
 3426|      0|        }
 3427|      0|      }
 3428|      0|      else
 3429|      0|        infof(data, "ALPN, server did not agree to a protocol");
 3430|       |
 3431|      0|      Curl_multiuse_state(data, conn->negnpn == CURL_HTTP_VERSION_2 ?
 3432|      0|                          BUNDLE_MULTIPLEX : BUNDLE_NO_MULTIUSE);
 3433|      0|    }
 3434|      0|#endif
 3435|       |
 3436|      0|    return CURLE_OK;
 3437|      0|  }
 3438|     49|}
openssl.c:ossl_close:
 1437|  1.37k|{
 1438|  1.37k|  ossl_closeone(data, conn, &conn->ssl[sockindex]);
 1439|  1.37k|#ifndef CURL_DISABLE_PROXY
 1440|  1.37k|  ossl_closeone(data, conn, &conn->proxy_ssl[sockindex]);
 1441|  1.37k|#endif
 1442|  1.37k|}
openssl.c:ossl_closeone:
 1410|  2.75k|{
 1411|  2.75k|  struct ssl_backend_data *backend = connssl->backend;
 1412|  2.75k|  if(backend->handle) {
 1413|     49|    char buf[32];
 1414|     49|    set_logger(conn, data);
 1415|       |
 1416|       |    /* Maybe the server has already sent a close notify alert.
 1417|       |       Read it to avoid an RST on the TCP connection. */
 1418|     49|    (void)SSL_read(backend->handle, buf, (int)sizeof(buf));
 1419|       |
 1420|     49|    (void)SSL_shutdown(backend->handle);
 1421|     49|    SSL_set_connect_state(backend->handle);
 1422|       |
 1423|     49|    SSL_free(backend->handle);
 1424|     49|    backend->handle = NULL;
 1425|     49|  }
 1426|  2.75k|  if(backend->ctx) {
 1427|     49|    SSL_CTX_free(backend->ctx);
 1428|     49|    backend->ctx = NULL;
 1429|     49|  }
 1430|  2.75k|}
openssl.c:ossl_close_all:
 1561|  1.66k|{
 1562|  1.66k|#ifdef USE_OPENSSL_ENGINE
 1563|  1.66k|  if(data->state.engine) {
 1564|      0|    ENGINE_finish(data->state.engine);
 1565|      0|    ENGINE_free(data->state.engine);
 1566|      0|    data->state.engine = NULL;
 1567|      0|  }
 1568|       |#else
 1569|       |  (void)data;
 1570|       |#endif
 1571|  1.66k|#if !defined(HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED) && \
 1572|  1.66k|  defined(HAVE_ERR_REMOVE_THREAD_STATE)
 1573|       |  /* OpenSSL 1.0.1 and 1.0.2 build an error queue that is stored per-thread
 1574|       |     so we need to clean it here in case the thread will be killed. All OpenSSL
 1575|       |     code should extract the error in association with the error so clearing
 1576|       |     this queue here should be harmless at worst. */
 1577|  1.66k|  ERR_remove_thread_state(NULL);
 1578|  1.66k|#endif
 1579|  1.66k|}
openssl.c:ossl_associate_connection:
 4485|  1.26k|{
 4486|  1.26k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4487|  1.26k|  struct ssl_backend_data *backend = connssl->backend;
 4488|       |
 4489|       |  /* If we don't have SSL context, do nothing. */
 4490|  1.26k|  if(!backend->handle)
 4491|  1.16k|    return;
 4492|       |
 4493|     98|  if(SSL_SET_OPTION(primary.sessionid)) {
 4494|     98|    int data_idx = ossl_get_ssl_data_index();
 4495|     98|    int connectdata_idx = ossl_get_ssl_conn_index();
 4496|     98|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4497|     98|    int proxy_idx = ossl_get_proxy_index();
 4498|       |
 4499|     98|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4500|     98|       proxy_idx >= 0) {
 4501|       |      /* Store the data needed for the "new session" callback.
 4502|       |       * The sockindex is stored as a pointer to an array element. */
 4503|     98|      SSL_set_ex_data(backend->handle, data_idx, data);
 4504|     98|      SSL_set_ex_data(backend->handle, connectdata_idx, conn);
 4505|     98|      SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
 4506|     98|#ifndef CURL_DISABLE_PROXY
 4507|     98|      SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:
 4508|     98|                      NULL);
 4509|       |#else
 4510|       |      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4511|       |#endif
 4512|     98|    }
 4513|     98|  }
 4514|     98|}
openssl.c:ossl_disassociate_connection:
 4526|  1.21k|{
 4527|  1.21k|  struct connectdata *conn = data->conn;
 4528|  1.21k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4529|  1.21k|  struct ssl_backend_data *backend = connssl->backend;
 4530|       |
 4531|       |  /* If we don't have SSL context, do nothing. */
 4532|  1.21k|  if(!backend->handle)
 4533|  1.16k|    return;
 4534|       |
 4535|     49|  if(SSL_SET_OPTION(primary.sessionid)) {
 4536|     49|    int data_idx = ossl_get_ssl_data_index();
 4537|     49|    int connectdata_idx = ossl_get_ssl_conn_index();
 4538|     49|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4539|     49|    int proxy_idx = ossl_get_proxy_index();
 4540|       |
 4541|     49|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4542|     49|       proxy_idx >= 0) {
 4543|       |      /* Disable references to data in "new session" callback to avoid
 4544|       |       * accessing a stale pointer. */
 4545|     49|      SSL_set_ex_data(backend->handle, data_idx, NULL);
 4546|     49|      SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
 4547|     49|      SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
 4548|     49|      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4549|     49|    }
 4550|     49|  }
 4551|     49|}

Curl_clone_primary_ssl_config:
  168|  1.04k|{
  169|  1.04k|  dest->version = source->version;
  170|  1.04k|  dest->version_max = source->version_max;
  171|  1.04k|  dest->verifypeer = source->verifypeer;
  172|  1.04k|  dest->verifyhost = source->verifyhost;
  173|  1.04k|  dest->verifystatus = source->verifystatus;
  174|  1.04k|  dest->sessionid = source->sessionid;
  175|       |
  176|  1.04k|  CLONE_BLOB(cert_blob);
  177|  1.04k|  CLONE_BLOB(ca_info_blob);
  178|  1.04k|  CLONE_BLOB(issuercert_blob);
  179|  1.04k|  CLONE_STRING(CApath);
  180|  1.04k|  CLONE_STRING(CAfile);
  181|  1.04k|  CLONE_STRING(issuercert);
  182|  1.04k|  CLONE_STRING(clientcert);
  183|  1.04k|  CLONE_STRING(random_file);
  184|  1.04k|  CLONE_STRING(egdsocket);
  185|  1.04k|  CLONE_STRING(cipher_list);
  186|  1.04k|  CLONE_STRING(cipher_list13);
  187|  1.04k|  CLONE_STRING(pinned_key);
  188|  1.04k|  CLONE_STRING(curves);
  189|       |
  190|  1.04k|  return TRUE;
  191|  1.04k|}
Curl_free_primary_ssl_config:
  194|  1.37k|{
  195|  1.37k|  Curl_safefree(sslc->CApath);
  196|  1.37k|  Curl_safefree(sslc->CAfile);
  197|  1.37k|  Curl_safefree(sslc->issuercert);
  198|  1.37k|  Curl_safefree(sslc->clientcert);
  199|  1.37k|  Curl_safefree(sslc->random_file);
  200|  1.37k|  Curl_safefree(sslc->egdsocket);
  201|  1.37k|  Curl_safefree(sslc->cipher_list);
  202|  1.37k|  Curl_safefree(sslc->cipher_list13);
  203|  1.37k|  Curl_safefree(sslc->pinned_key);
  204|  1.37k|  Curl_safefree(sslc->cert_blob);
  205|  1.37k|  Curl_safefree(sslc->ca_info_blob);
  206|  1.37k|  Curl_safefree(sslc->issuercert_blob);
  207|  1.37k|  Curl_safefree(sslc->curves);
  208|  1.37k|}
Curl_ssl_backend:
  215|  1.66k|{
  216|  1.66k|#ifdef USE_SSL
  217|  1.66k|  multissl_setup(NULL);
  218|  1.66k|  return Curl_ssl->info.id;
  219|       |#else
  220|       |  return (int)CURLSSLBACKEND_NONE;
  221|       |#endif
  222|  1.66k|}
Curl_ssl_init:
  236|      1|{
  237|       |  /* make sure this is only done once */
  238|      1|  if(init_ssl)
  239|      0|    return 1;
  240|      1|  init_ssl = TRUE; /* never again */
  241|       |
  242|      1|  return Curl_ssl->init();
  243|      1|}
Curl_ssl_connect:
  315|     49|{
  316|     49|  CURLcode result;
  317|       |
  318|     49|#ifndef CURL_DISABLE_PROXY
  319|     49|  if(conn->bits.proxy_ssl_connected[sockindex]) {
  320|      0|    result = ssl_connect_init_proxy(conn, sockindex);
  321|      0|    if(result)
  322|      0|      return result;
  323|      0|  }
  324|     49|#endif
  325|       |
  326|     49|  if(!ssl_prefs_check(data))
  327|      0|    return CURLE_SSL_CONNECT_ERROR;
  328|       |
  329|       |  /* mark this is being ssl-enabled from here on. */
  330|     49|  conn->ssl[sockindex].use = TRUE;
  331|     49|  conn->ssl[sockindex].state = ssl_connection_negotiating;
  332|       |
  333|     49|  result = Curl_ssl->connect_blocking(data, conn, sockindex);
  334|       |
  335|     49|  if(!result)
  336|      0|    Curl_pgrsTime(data, TIMER_APPCONNECT); /* SSL is connected */
  337|     49|  else
  338|     49|    conn->ssl[sockindex].use = FALSE;
  339|       |
  340|     49|  return result;
  341|     49|}
Curl_ssl_sessionid_lock:
  373|     49|{
  374|     49|  if(SSLSESSION_SHARED(data))
  375|      0|    Curl_share_lock(data, CURL_LOCK_DATA_SSL_SESSION, CURL_LOCK_ACCESS_SINGLE);
  376|     49|}
Curl_ssl_sessionid_unlock:
  382|     49|{
  383|     49|  if(SSLSESSION_SHARED(data))
  384|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_SSL_SESSION);
  385|     49|}
Curl_ssl_getsessionid:
  397|     49|{
  398|     49|  struct Curl_ssl_session *check;
  399|     49|  size_t i;
  400|     49|  long *general_age;
  401|     49|  bool no_match = TRUE;
  402|       |
  403|     49|#ifndef CURL_DISABLE_PROXY
  404|     49|  struct ssl_primary_config * const ssl_config = isProxy ?
  405|      0|    &conn->proxy_ssl_config :
  406|     49|    &conn->ssl_config;
  407|     49|  const char * const name = isProxy ?
  408|     49|    conn->http_proxy.host.name : conn->host.name;
  409|     49|  int port = isProxy ? (int)conn->port : conn->remote_port;
  410|       |#else
  411|       |  /* no proxy support */
  412|       |  struct ssl_primary_config * const ssl_config = &conn->ssl_config;
  413|       |  const char * const name = conn->host.name;
  414|       |  int port = conn->remote_port;
  415|       |#endif
  416|     49|  (void)sockindex;
  417|     49|  *ssl_sessionid = NULL;
  418|       |
  419|       |#ifdef CURL_DISABLE_PROXY
  420|       |  if(isProxy)
  421|       |    return TRUE;
  422|       |#endif
  423|       |
  424|     49|  DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));
  425|       |
  426|     49|  if(!SSL_SET_OPTION(primary.sessionid) || !data->state.session)
  427|       |    /* session ID re-use is disabled or the session cache has not been
  428|       |       setup */
  429|      0|    return TRUE;
  430|       |
  431|       |  /* Lock if shared */
  432|     49|  if(SSLSESSION_SHARED(data))
  433|      0|    general_age = &data->share->sessionage;
  434|     49|  else
  435|     49|    general_age = &data->state.sessionage;
  436|       |
  437|    294|  for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++) {
  438|    245|    check = &data->state.session[i];
  439|    245|    if(!check->sessionid)
  440|       |      /* not session ID means blank entry */
  441|    245|      continue;
  442|      0|    if(strcasecompare(name, check->name) &&
  443|      0|       ((!conn->bits.conn_to_host && !check->conn_to_host) ||
  444|      0|        (conn->bits.conn_to_host && check->conn_to_host &&
  445|      0|         strcasecompare(conn->conn_to_host.name, check->conn_to_host))) &&
  446|      0|       ((!conn->bits.conn_to_port && check->conn_to_port == -1) ||
  447|      0|        (conn->bits.conn_to_port && check->conn_to_port != -1 &&
  448|      0|         conn->conn_to_port == check->conn_to_port)) &&
  449|      0|       (port == check->remote_port) &&
  450|      0|       strcasecompare(conn->handler->scheme, check->scheme) &&
  451|      0|       Curl_ssl_config_matches(ssl_config, &check->ssl_config)) {
  452|       |      /* yes, we have a session ID! */
  453|      0|      (*general_age)++;          /* increase general age */
  454|      0|      check->age = *general_age; /* set this as used in this age */
  455|      0|      *ssl_sessionid = check->sessionid;
  456|      0|      if(idsize)
  457|      0|        *idsize = check->idsize;
  458|      0|      no_match = FALSE;
  459|      0|      break;
  460|      0|    }
  461|      0|  }
  462|       |
  463|     49|  DEBUGF(infof(data, "%s Session ID in cache for %s %s://%s:%d",
  464|     49|               no_match? "Didn't find": "Found",
  465|     49|               isProxy ? "proxy" : "host",
  466|     49|               conn->handler->scheme, name, port));
  467|     49|  return no_match;
  468|     49|}
Curl_ssl_kill_session:
  474|  3.44k|{
  475|  3.44k|  if(session->sessionid) {
  476|       |    /* defensive check */
  477|       |
  478|       |    /* free the ID the SSL-layer specific way */
  479|      0|    Curl_ssl->session_free(session->sessionid);
  480|       |
  481|      0|    session->sessionid = NULL;
  482|      0|    session->age = 0; /* fresh */
  483|       |
  484|      0|    Curl_free_primary_ssl_config(&session->ssl_config);
  485|       |
  486|      0|    Curl_safefree(session->name);
  487|      0|    Curl_safefree(session->conn_to_host);
  488|      0|  }
  489|  3.44k|}
Curl_ssl_associate_conn:
  628|  1.21k|{
  629|  1.21k|  if(Curl_ssl->associate_connection) {
  630|  1.21k|    Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);
  631|  1.21k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  632|      0|      Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);
  633|  1.21k|  }
  634|  1.21k|}
Curl_ssl_detach_conn:
  638|  1.21k|{
  639|  1.21k|  if(Curl_ssl->disassociate_connection) {
  640|  1.21k|    Curl_ssl->disassociate_connection(data, FIRSTSOCKET);
  641|  1.21k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  642|      0|      Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);
  643|  1.21k|  }
  644|  1.21k|}
Curl_ssl_close_all:
  647|  1.66k|{
  648|       |  /* kill the session ID cache if not shared */
  649|  1.66k|  if(data->state.session && !SSLSESSION_SHARED(data)) {
  650|    688|    size_t i;
  651|  4.12k|    for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++)
  652|       |      /* the single-killer function handles empty table slots */
  653|  3.44k|      Curl_ssl_kill_session(&data->state.session[i]);
  654|       |
  655|       |    /* free the cache data */
  656|    688|    Curl_safefree(data->state.session);
  657|    688|  }
  658|       |
  659|  1.66k|  Curl_ssl->close_all(data);
  660|  1.66k|}
Curl_ssl_close:
  682|  1.37k|{
  683|  1.37k|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
  684|  1.37k|  Curl_ssl->close_one(data, conn, sockindex);
  685|  1.37k|  conn->ssl[sockindex].state = ssl_connection_none;
  686|  1.37k|}
Curl_ssl_initsessions:
  728|    688|{
  729|    688|  struct Curl_ssl_session *session;
  730|       |
  731|    688|  if(data->state.session)
  732|       |    /* this is just a precaution to prevent multiple inits */
  733|      0|    return CURLE_OK;
  734|       |
  735|    688|  session = calloc(amount, sizeof(struct Curl_ssl_session));
  736|    688|  if(!session)
  737|      0|    return CURLE_OUT_OF_MEMORY;
  738|       |
  739|       |  /* store the info in the SSL section */
  740|    688|  data->set.general_ssl.max_ssl_sessions = amount;
  741|    688|  data->state.session = session;
  742|    688|  data->state.sessionage = 1; /* this is brand new */
  743|    688|  return CURLE_OK;
  744|    688|}
Curl_ssl_data_pending:
  772|  2.37k|{
  773|  2.37k|  return Curl_ssl->data_pending(conn, connindex);
  774|  2.37k|}
Curl_ssl_free_certinfo:
  777|  4.02k|{
  778|  4.02k|  struct curl_certinfo *ci = &data->info.certs;
  779|       |
  780|  4.02k|  if(ci->num_of_certs) {
  781|       |    /* free all individual lists used */
  782|      0|    int i;
  783|      0|    for(i = 0; i<ci->num_of_certs; i++) {
  784|      0|      curl_slist_free_all(ci->certinfo[i]);
  785|      0|      ci->certinfo[i] = NULL;
  786|      0|    }
  787|       |
  788|      0|    free(ci->certinfo); /* free the actual array too */
  789|      0|    ci->certinfo = NULL;
  790|      0|    ci->num_of_certs = 0;
  791|      0|  }
  792|  4.02k|}
Curl_ssl_random:
  870|    947|{
  871|    947|  return Curl_ssl->random(data, entropy, length);
  872|    947|}
vtls.c:blobdup:
   96|  3.14k|{
   97|  3.14k|  DEBUGASSERT(dest);
   98|  3.14k|  DEBUGASSERT(!*dest);
   99|  3.14k|  if(src) {
  100|       |    /* only if there's data to dupe! */
  101|      0|    struct curl_blob *d;
  102|      0|    d = malloc(sizeof(struct curl_blob) + src->len);
  103|      0|    if(!d)
  104|      0|      return CURLE_OUT_OF_MEMORY;
  105|      0|    d->len = src->len;
  106|       |    /* Always duplicate because the connection may survive longer than the
  107|       |       handle that passed in the blob. */
  108|      0|    d->flags = CURL_BLOB_COPY;
  109|      0|    d->data = (void *)((char *)d + sizeof(struct curl_blob));
  110|      0|    memcpy(d->data, src->data, src->len);
  111|      0|    *dest = d;
  112|      0|  }
  113|  3.14k|  return CURLE_OK;
  114|  3.14k|}
vtls.c:ssl_prefs_check:
  263|     49|{
  264|       |  /* check for CURLOPT_SSLVERSION invalid parameter value */
  265|     49|  const long sslver = data->set.ssl.primary.version;
  266|     49|  if((sslver < 0) || (sslver >= CURL_SSLVERSION_LAST)) {
  267|      0|    failf(data, "Unrecognized parameter value passed via CURLOPT_SSLVERSION");
  268|      0|    return FALSE;
  269|      0|  }
  270|       |
  271|     49|  switch(data->set.ssl.primary.version_max) {
  272|     49|  case CURL_SSLVERSION_MAX_NONE:
  273|     49|  case CURL_SSLVERSION_MAX_DEFAULT:
  274|     49|    break;
  275|       |
  276|      0|  default:
  277|      0|    if((data->set.ssl.primary.version_max >> 16) < sslver) {
  278|      0|      failf(data, "CURL_SSLVERSION_MAX incompatible with CURL_SSLVERSION");
  279|      0|      return FALSE;
  280|      0|    }
  281|     49|  }
  282|       |
  283|     49|  return TRUE;
  284|     49|}
vtls.c:multissl_setup:
 1389|  1.66k|{
 1390|  1.66k|  const char *env;
 1391|  1.66k|  char *env_tmp;
 1392|       |
 1393|  1.66k|  if(Curl_ssl != &Curl_ssl_multi)
 1394|  1.66k|    return 1;
 1395|       |
 1396|      0|  if(backend) {
 1397|      0|    Curl_ssl = backend;
 1398|      0|    return 0;
 1399|      0|  }
 1400|       |
 1401|      0|  if(!available_backends[0])
 1402|      0|    return 1;
 1403|       |
 1404|      0|  env = env_tmp = curl_getenv("CURL_SSL_BACKEND");
 1405|       |#ifdef CURL_DEFAULT_SSL_BACKEND
 1406|       |  if(!env)
 1407|       |    env = CURL_DEFAULT_SSL_BACKEND;
 1408|       |#endif
 1409|      0|  if(env) {
 1410|      0|    int i;
 1411|      0|    for(i = 0; available_backends[i]; i++) {
 1412|      0|      if(strcasecompare(env, available_backends[i]->info.name)) {
 1413|      0|        Curl_ssl = available_backends[i];
 1414|      0|        free(env_tmp);
 1415|      0|        return 0;
 1416|      0|      }
 1417|      0|    }
 1418|      0|  }
 1419|       |
 1420|       |  /* Fall back to first available backend */
 1421|      0|  Curl_ssl = available_backends[0];
 1422|      0|  free(env_tmp);
 1423|      0|  return 0;
 1424|      0|}

curlx_ultous:
   63|    524|{
   64|       |#ifdef __INTEL_COMPILER
   65|       |#  pragma warning(push)
   66|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   67|       |#endif
   68|       |
   69|    524|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_USHORT);
   70|    524|  return (unsigned short)(ulnum & (unsigned long) CURL_MASK_USHORT);
   71|       |
   72|       |#ifdef __INTEL_COMPILER
   73|       |#  pragma warning(pop)
   74|       |#endif
   75|    524|}
curlx_ultouc:
   82|     14|{
   83|       |#ifdef __INTEL_COMPILER
   84|       |#  pragma warning(push)
   85|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   86|       |#endif
   87|       |
   88|     14|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_UCHAR);
   89|     14|  return (unsigned char)(ulnum & (unsigned long) CURL_MASK_UCHAR);
   90|       |
   91|       |#ifdef __INTEL_COMPILER
   92|       |#  pragma warning(pop)
   93|       |#endif
   94|     14|}
curlx_uztosi:
  123|    947|{
  124|       |#ifdef __INTEL_COMPILER
  125|       |#  pragma warning(push)
  126|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  127|       |#endif
  128|       |
  129|    947|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_SINT);
  130|    947|  return (int)(uznum & (size_t) CURL_MASK_SINT);
  131|       |
  132|       |#ifdef __INTEL_COMPILER
  133|       |#  pragma warning(pop)
  134|       |#endif
  135|    947|}
curlx_sltosi:
  184|    599|{
  185|       |#ifdef __INTEL_COMPILER
  186|       |#  pragma warning(push)
  187|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  188|       |#endif
  189|       |
  190|    599|  DEBUGASSERT(slnum >= 0);
  191|    599|#if INT_MAX < LONG_MAX
  192|    599|  DEBUGASSERT((unsigned long) slnum <= (unsigned long) CURL_MASK_SINT);
  193|    599|#endif
  194|    599|  return (int)(slnum & (long) CURL_MASK_SINT);
  195|       |
  196|       |#ifdef __INTEL_COMPILER
  197|       |#  pragma warning(pop)
  198|       |#endif
  199|    599|}

Curl_wildcard_init:
   42|      7|{
   43|      7|  Curl_llist_init(&wc->filelist, fileinfo_dtor);
   44|      7|  wc->state = CURLWC_INIT;
   45|       |
   46|      7|  return CURLE_OK;
   47|      7|}
Curl_wildcard_dtor:
   50|  2.45k|{
   51|  2.45k|  if(!wc)
   52|      0|    return;
   53|       |
   54|  2.45k|  if(wc->dtor) {
   55|      2|    wc->dtor(wc->protdata);
   56|      2|    wc->dtor = ZERO_NULL;
   57|      2|    wc->protdata = NULL;
   58|      2|  }
   59|  2.45k|  DEBUGASSERT(wc->protdata == NULL);
   60|       |
   61|  2.45k|  Curl_llist_destroy(&wc->filelist, NULL);
   62|       |
   63|       |
   64|  2.45k|  free(wc->path);
   65|  2.45k|  wc->path = NULL;
   66|  2.45k|  free(wc->pattern);
   67|  2.45k|  wc->pattern = NULL;
   68|       |
   69|  2.45k|  wc->customptr = NULL;
   70|  2.45k|  wc->state = CURLWC_INIT;
   71|  2.45k|}

LLVMFuzzerTestOneInput:
   35|    887|{
   36|    887|  int rc = 0;
   37|    887|  int tlv_rc;
   38|    887|  FUZZ_DATA fuzz;
   39|    887|  TLV tlv;
   40|       |
   41|       |  /* Ignore SIGPIPE errors. We'll handle the errors ourselves. */
   42|    887|  signal(SIGPIPE, SIG_IGN);
   43|       |
   44|       |  /* Have to set all fields to zero before getting to the terminate function */
   45|    887|  memset(&fuzz, 0, sizeof(FUZZ_DATA));
   46|       |
   47|    887|  if(size < sizeof(TLV_RAW)) {
   48|       |    /* Not enough data for a single TLV - don't continue */
   49|      1|    goto EXIT_LABEL;
   50|      1|  }
   51|       |
   52|       |  /* Try to initialize the fuzz data */
   53|    886|  FTRY(fuzz_initialize_fuzz_data(&fuzz, data, size));
   54|       |
   55|    886|  for(tlv_rc = fuzz_get_first_tlv(&fuzz, &tlv);
   56|  5.62k|      tlv_rc == 0;
   57|  4.77k|      tlv_rc = fuzz_get_next_tlv(&fuzz, &tlv)) {
   58|       |
   59|       |    /* Have the TLV in hand. Parse the TLV. */
   60|  4.77k|    rc = fuzz_parse_tlv(&fuzz, &tlv);
   61|       |
   62|  4.77k|    if(rc != 0) {
   63|       |      /* Failed to parse the TLV. Can't continue. */
   64|     39|      goto EXIT_LABEL;
   65|     39|    }
   66|  4.77k|  }
   67|       |
   68|    847|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
   69|       |    /* A TLV call failed. Can't continue. */
   70|     64|    goto EXIT_LABEL;
   71|     64|  }
   72|       |
   73|       |  /* Set up the standard easy options. */
   74|    783|  FTRY(fuzz_set_easy_options(&fuzz));
   75|       |
   76|       |  /**
   77|       |   * Add in more curl options that have been accumulated over possibly
   78|       |   * multiple TLVs.
   79|       |   */
   80|    783|  if(fuzz.header_list != NULL) {
   81|     14|    curl_easy_setopt(fuzz.easy, CURLOPT_HTTPHEADER, fuzz.header_list);
   82|     14|  }
   83|       |
   84|    783|  if(fuzz.mail_recipients_list != NULL) {
   85|     20|    curl_easy_setopt(fuzz.easy, CURLOPT_MAIL_RCPT, fuzz.mail_recipients_list);
   86|     20|  }
   87|       |
   88|    783|  if(fuzz.mime != NULL) {
   89|     34|    curl_easy_setopt(fuzz.easy, CURLOPT_MIMEPOST, fuzz.mime);
   90|     34|  }
   91|       |
   92|       |  /* Run the transfer. */
   93|    783|  fuzz_handle_transfer(&fuzz);
   94|       |
   95|    887|EXIT_LABEL:
   96|       |
   97|    887|  fuzz_terminate_fuzz_data(&fuzz);
   98|       |
   99|       |  /* This function must always return 0. Non-zero codes are reserved. */
  100|    887|  return 0;
  101|    783|}
_Z6to_u32PKh:
  107|  5.08k|{
  108|  5.08k|  uint32_t u;
  109|  5.08k|  u = (b[0] << 24) + (b[1] << 16) + (b[2] << 8) + b[3];
  110|  5.08k|  return u;
  111|  5.08k|}
_Z6to_u16PKh:
  117|  5.04k|{
  118|  5.04k|  uint16_t u;
  119|  5.04k|  u = (b[0] << 8) + b[1];
  120|  5.04k|  return u;
  121|  5.04k|}
_Z25fuzz_initialize_fuzz_dataP9fuzz_dataPKhm:
  129|    886|{
  130|    886|  int rc = 0;
  131|    886|  int ii;
  132|       |
  133|       |  /* Initialize the fuzz data. */
  134|    886|  memset(fuzz, 0, sizeof(FUZZ_DATA));
  135|       |
  136|       |  /* Create an easy handle. This will have all of the settings configured on
  137|       |     it. */
  138|    886|  fuzz->easy = curl_easy_init();
  139|    886|  FCHECK(fuzz->easy != NULL);
  140|       |
  141|       |  /* Set up the state parser */
  142|    886|  fuzz->state.data = data;
  143|    886|  fuzz->state.data_len = data_len;
  144|       |
  145|       |  /* Set up the state of the server sockets. */
  146|  2.65k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  147|  1.77k|    fuzz->sockman[ii].index = ii;
  148|  1.77k|    fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  149|  1.77k|  }
  150|       |
  151|       |  /* Check for verbose mode. */
  152|    886|  fuzz->verbose = (getenv("FUZZ_VERBOSE") != NULL);
  153|       |
  154|    886|EXIT_LABEL:
  155|       |
  156|    886|  return rc;
  157|    886|}
_Z21fuzz_set_easy_optionsP9fuzz_data:
  163|    783|{
  164|    783|  int rc = 0;
  165|    783|  unsigned long allowed_protocols;
  166|       |
  167|       |  /* Set some standard options on the CURL easy handle. We need to override the
  168|       |     socket function so that we create our own sockets to present to CURL. */
  169|    783|  FTRY(curl_easy_setopt(fuzz->easy,
  170|    783|                        CURLOPT_OPENSOCKETFUNCTION,
  171|    783|                        fuzz_open_socket));
  172|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_OPENSOCKETDATA, fuzz));
  173|       |
  174|       |  /* In case something tries to set a socket option, intercept this. */
  175|    783|  FTRY(curl_easy_setopt(fuzz->easy,
  176|    783|                        CURLOPT_SOCKOPTFUNCTION,
  177|    783|                        fuzz_sockopt_callback));
  178|       |
  179|       |  /* Set the standard read function callback. */
  180|    783|  FTRY(curl_easy_setopt(fuzz->easy,
  181|    783|                        CURLOPT_READFUNCTION,
  182|    783|                        fuzz_read_callback));
  183|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_READDATA, fuzz));
  184|       |
  185|       |  /* Set the standard write function callback. */
  186|    783|  FTRY(curl_easy_setopt(fuzz->easy,
  187|    783|                        CURLOPT_WRITEFUNCTION,
  188|    783|                        fuzz_write_callback));
  189|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_WRITEDATA, fuzz));
  190|       |
  191|       |  /* Set the cookie jar so cookies are tested. */
  192|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_COOKIEJAR, FUZZ_COOKIE_JAR_PATH));
  193|       |
  194|       |  /* Time out requests quickly. */
  195|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_TIMEOUT_MS, 200L));
  196|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_SERVER_RESPONSE_TIMEOUT, 1L));
  197|       |
  198|       |  /* Can enable verbose mode by having the environment variable FUZZ_VERBOSE. */
  199|    783|  if(fuzz->verbose) {
  200|      0|    FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_VERBOSE, 1L));
  201|      0|  }
  202|       |
  203|       |  /* Force resolution of all addresses to a specific IP address. */
  204|    783|  fuzz->connect_to_list = curl_slist_append(NULL, "::127.0.1.127:");
  205|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_CONNECT_TO, fuzz->connect_to_list));
  206|       |
  207|       |  /* Limit the protocols in use by this fuzzer. */
  208|    783|  FTRY(fuzz_set_allowed_protocols(fuzz));
  209|       |
  210|    783|EXIT_LABEL:
  211|       |
  212|    783|  return rc;
  213|    783|}
_Z24fuzz_terminate_fuzz_dataP9fuzz_data:
  219|    887|{
  220|    887|  int ii;
  221|       |
  222|    887|  fuzz_free((void **)&fuzz->postfields);
  223|       |
  224|  2.66k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  225|  1.77k|    if(fuzz->sockman[ii].fd_state != FUZZ_SOCK_CLOSED) {
  226|    524|      close(fuzz->sockman[ii].fd);
  227|    524|      fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  228|    524|    }
  229|  1.77k|  }
  230|       |
  231|    887|  if(fuzz->connect_to_list != NULL) {
  232|    783|    curl_slist_free_all(fuzz->connect_to_list);
  233|    783|    fuzz->connect_to_list = NULL;
  234|    783|  }
  235|       |
  236|    887|  if(fuzz->header_list != NULL) {
  237|     27|    curl_slist_free_all(fuzz->header_list);
  238|     27|    fuzz->header_list = NULL;
  239|     27|  }
  240|       |
  241|    887|  if(fuzz->mail_recipients_list != NULL) {
  242|     33|    curl_slist_free_all(fuzz->mail_recipients_list);
  243|     33|    fuzz->mail_recipients_list = NULL;
  244|     33|  }
  245|       |
  246|    887|  if(fuzz->mime != NULL) {
  247|     82|    curl_mime_free(fuzz->mime);
  248|     82|    fuzz->mime = NULL;
  249|     82|  }
  250|       |
  251|    887|  if(fuzz->easy != NULL) {
  252|    886|    curl_easy_cleanup(fuzz->easy);
  253|    886|    fuzz->easy = NULL;
  254|    886|  }
  255|    887|}
_Z9fuzz_freePPv:
  261|  5.67k|{
  262|  5.67k|  if(*ptr != NULL) {
  263|  2.40k|    free(*ptr);
  264|  2.40k|    *ptr = NULL;
  265|  2.40k|  }
  266|  5.67k|}
_Z20fuzz_handle_transferP9fuzz_data:
  273|    783|{
  274|    783|  int rc = 0;
  275|    783|  CURLM *multi_handle;
  276|    783|  int still_running; /* keep number of running handles */
  277|    783|  CURLMsg *msg; /* for picking up messages with the transfer status */
  278|    783|  int msgs_left; /* how many messages are left */
  279|    783|  int double_timeout = 0;
  280|    783|  fd_set fdread;
  281|    783|  fd_set fdwrite;
  282|    783|  fd_set fdexcep;
  283|    783|  struct timeval timeout;
  284|    783|  int select_rc;
  285|    783|  CURLMcode mc;
  286|    783|  int maxfd = -1;
  287|    783|  long curl_timeo = -1;
  288|    783|  int ii;
  289|    783|  FUZZ_SOCKET_MANAGER *sman[FUZZ_NUM_CONNECTIONS];
  290|       |
  291|  2.34k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  292|  1.56k|    sman[ii] = &fuzz->sockman[ii];
  293|       |
  294|       |    /* Set up the starting index for responses. */
  295|  1.56k|    sman[ii]->response_index = 1;
  296|  1.56k|  }
  297|       |
  298|       |  /* init a multi stack */
  299|    783|  multi_handle = curl_multi_init();
  300|       |
  301|       |  /* add the individual transfers */
  302|    783|  curl_multi_add_handle(multi_handle, fuzz->easy);
  303|       |
  304|       |  /* Do an initial process. This might end the transfer immediately. */
  305|    783|  curl_multi_perform(multi_handle, &still_running);
  306|    783|  FV_PRINTF(fuzz,
  307|    783|            "FUZZ: Initial perform; still running? %d \n",
  308|    783|            still_running);
  309|       |
  310|  1.40k|  while(still_running) {
  311|       |    /* Reset the sets of file descriptors. */
  312|    733|    FD_ZERO(&fdread);
  313|    733|    FD_ZERO(&fdwrite);
  314|    733|    FD_ZERO(&fdexcep);
  315|       |
  316|       |    /* Set a timeout of 10ms. This is lower than recommended by the multi guide
  317|       |       but we're not going to any remote servers, so everything should complete
  318|       |       very quickly. */
  319|    733|    timeout.tv_sec = 0;
  320|    733|    timeout.tv_usec = 10000;
  321|       |
  322|       |    /* get file descriptors from the transfers */
  323|    733|    mc = curl_multi_fdset(multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);
  324|    733|    if(mc != CURLM_OK) {
  325|      0|      fprintf(stderr, "curl_multi_fdset() failed, code %d.\n", mc);
  326|      0|      rc = -1;
  327|      0|      break;
  328|      0|    }
  329|       |
  330|  2.19k|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  331|       |      /* Add the socket FD into the readable set if connected. */
  332|  1.46k|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN) {
  333|    677|        FD_SET(sman[ii]->fd, &fdread);
  334|       |
  335|       |        /* Work out the maximum FD between the cURL file descriptors and the
  336|       |           server FD. */
  337|    677|        maxfd = FUZZ_MAX(sman[ii]->fd, maxfd);
  338|    677|      }
  339|  1.46k|    }
  340|       |
  341|       |    /* Work out what file descriptors need work. */
  342|    733|    rc = fuzz_select(maxfd + 1, &fdread, &fdwrite, &fdexcep, &timeout);
  343|       |
  344|    733|    if(rc == -1) {
  345|       |      /* Had an issue while selecting a file descriptor. Let's just exit. */
  346|      0|      FV_PRINTF(fuzz, "FUZZ: select failed, exiting \n");
  347|      0|      break;
  348|      0|    }
  349|    733|    else if(rc == 0) {
  350|    218|      FV_PRINTF(fuzz,
  351|    218|                "FUZZ: Timed out; double timeout? %d \n",
  352|    218|                double_timeout);
  353|       |
  354|       |      /* Timed out. */
  355|    218|      if(double_timeout == 1) {
  356|       |        /* We don't expect multiple timeouts in a row. If there are double
  357|       |           timeouts then exit. */
  358|    109|        break;
  359|    109|      }
  360|    109|      else {
  361|       |        /* Set the timeout flag for the next time we select(). */
  362|    109|        double_timeout = 1;
  363|    109|      }
  364|    218|    }
  365|    515|    else {
  366|       |      /* There's an active file descriptor. Reset the timeout flag. */
  367|    515|      double_timeout = 0;
  368|    515|    }
  369|       |
  370|       |    /* Check to see if a server file descriptor is readable. If it is,
  371|       |       then send the next response from the fuzzing data. */
  372|  1.87k|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  373|  1.24k|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN &&
  374|  1.24k|         FD_ISSET(sman[ii]->fd, &fdread)) {
  375|    459|        rc = fuzz_send_next_response(fuzz, sman[ii]);
  376|    459|        if(rc != 0) {
  377|       |          /* Failed to send a response. Break out here. */
  378|      0|          break;
  379|      0|        }
  380|    459|      }
  381|  1.24k|    }
  382|       |
  383|    624|    curl_multi_perform(multi_handle, &still_running);
  384|    624|  }
  385|       |
  386|       |  /* Remove the easy handle from the multi stack. */
  387|    783|  curl_multi_remove_handle(multi_handle, fuzz->easy);
  388|       |
  389|       |  /* Clean up the multi handle - the top level function will handle the easy
  390|       |     handle. */
  391|    783|  curl_multi_cleanup(multi_handle);
  392|       |
  393|    783|  return(rc);
  394|    783|}
_Z23fuzz_send_next_responseP9fuzz_dataP19fuzz_socket_manager:
  400|    459|{
  401|    459|  int rc = 0;
  402|    459|  ssize_t ret_in;
  403|    459|  ssize_t ret_out;
  404|    459|  char buffer[8192];
  405|    459|  const uint8_t *data;
  406|    459|  size_t data_len;
  407|       |
  408|       |  /* Need to read all data sent by the client so the file descriptor becomes
  409|       |     unreadable. Because the file descriptor is non-blocking we won't just
  410|       |     hang here. */
  411|    918|  do {
  412|    918|    ret_in = read(sman->fd, buffer, sizeof(buffer));
  413|    918|    if(fuzz->verbose && ret_in > 0) {
  414|      0|      printf("FUZZ[%d]: Received %zu bytes \n==>\n", sman->index, ret_in);
  415|      0|      fwrite(buffer, ret_in, 1, stdout);
  416|      0|      printf("\n<==\n");
  417|      0|    }
  418|    918|  } while (ret_in > 0);
  419|       |
  420|       |  /* Now send a response to the request that the client just made. */
  421|    459|  FV_PRINTF(fuzz,
  422|    459|            "FUZZ[%d]: Sending next response: %d \n",
  423|    459|            sman->index,
  424|    459|            sman->response_index);
  425|    459|  data = sman->responses[sman->response_index].data;
  426|    459|  data_len = sman->responses[sman->response_index].data_len;
  427|       |
  428|    459|  if(data != NULL) {
  429|    459|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  430|       |      /* Failed to write the data back to the client. Prevent any further
  431|       |         testing. */
  432|      0|      rc = -1;
  433|      0|    }
  434|    459|  }
  435|       |
  436|       |  /* Work out if there are any more responses. If not, then shut down the
  437|       |     server. */
  438|    459|  sman->response_index++;
  439|       |
  440|    459|  if(sman->response_index >= TLV_MAX_NUM_RESPONSES ||
  441|    459|     sman->responses[sman->response_index].data == NULL) {
  442|     67|    FV_PRINTF(fuzz,
  443|     67|              "FUZZ[%d]: Shutting down server socket: %d \n",
  444|     67|              sman->index,
  445|     67|              sman->fd);
  446|     67|    shutdown(sman->fd, SHUT_WR);
  447|     67|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  448|     67|  }
  449|       |
  450|    459|  return(rc);
  451|    459|}
_Z11fuzz_selectiP6fd_setS0_S0_P7timeval:
  460|    733|                struct timeval *timeout) {
  461|    733|  return select(nfds, readfds, writefds, exceptfds, timeout);
  462|    733|}
_Z26fuzz_set_allowed_protocolsP9fuzz_data:
  468|    783|{
  469|    783|  int rc = 0;
  470|    783|  unsigned long allowed_protocols = 0;
  471|       |
  472|       |#ifdef FUZZ_PROTOCOLS_ALL
  473|       |  /* Do not allow telnet currently as it accepts input from stdin. */
  474|       |  allowed_protocols |= CURLPROTO_ALL & ~CURLPROTO_TELNET;
  475|       |#endif
  476|       |#ifdef FUZZ_PROTOCOLS_DICT
  477|       |  allowed_protocols |= CURLPROTO_DICT;
  478|       |#endif
  479|       |#ifdef FUZZ_PROTOCOLS_FILE
  480|       |  allowed_protocols |= CURLPROTO_FILE;
  481|       |#endif
  482|    783|#ifdef FUZZ_PROTOCOLS_FTP
  483|    783|  allowed_protocols |= CURLPROTO_FTP;
  484|    783|  allowed_protocols |= CURLPROTO_FTPS;
  485|    783|#endif
  486|       |#ifdef FUZZ_PROTOCOLS_GOPHER
  487|       |  allowed_protocols |= CURLPROTO_GOPHER;
  488|       |#endif
  489|       |#ifdef FUZZ_PROTOCOLS_HTTP
  490|       |  allowed_protocols |= CURLPROTO_HTTP;
  491|       |#endif
  492|       |#ifdef FUZZ_PROTOCOLS_HTTPS
  493|       |  allowed_protocols |= CURLPROTO_HTTPS;
  494|       |#endif
  495|       |#ifdef FUZZ_PROTOCOLS_IMAP
  496|       |  allowed_protocols |= CURLPROTO_IMAP;
  497|       |  allowed_protocols |= CURLPROTO_IMAPS;
  498|       |#endif
  499|       |#ifdef FUZZ_PROTOCOLS_LDAP
  500|       |  allowed_protocols |= CURLPROTO_LDAP;
  501|       |  allowed_protocols |= CURLPROTO_LDAPS;
  502|       |#endif
  503|       |#ifdef FUZZ_PROTOCOLS_MQTT
  504|       |  allowed_protocols |= CURLPROTO_MQTT;
  505|       |#endif
  506|       |#ifdef FUZZ_PROTOCOLS_POP3
  507|       |  allowed_protocols |= CURLPROTO_POP3;
  508|       |  allowed_protocols |= CURLPROTO_POP3S;
  509|       |#endif
  510|       |#ifdef FUZZ_PROTOCOLS_RTMP
  511|       |  allowed_protocols |= CURLPROTO_RTMP;
  512|       |  allowed_protocols |= CURLPROTO_RTMPE;
  513|       |  allowed_protocols |= CURLPROTO_RTMPS;
  514|       |  allowed_protocols |= CURLPROTO_RTMPT;
  515|       |  allowed_protocols |= CURLPROTO_RTMPTE;
  516|       |  allowed_protocols |= CURLPROTO_RTMPTS;
  517|       |#endif
  518|       |#ifdef FUZZ_PROTOCOLS_RTSP
  519|       |  allowed_protocols |= CURLPROTO_RTSP;
  520|       |#endif
  521|       |#ifdef FUZZ_PROTOCOLS_SCP
  522|       |  allowed_protocols |= CURLPROTO_SCP;
  523|       |#endif
  524|       |#ifdef FUZZ_PROTOCOLS_SFTP
  525|       |  allowed_protocols |= CURLPROTO_SFTP;
  526|       |#endif
  527|       |#ifdef FUZZ_PROTOCOLS_SMB
  528|       |  allowed_protocols |= CURLPROTO_SMB;
  529|       |  allowed_protocols |= CURLPROTO_SMBS;
  530|       |#endif
  531|       |#ifdef FUZZ_PROTOCOLS_SMTP
  532|       |  allowed_protocols |= CURLPROTO_SMTP;
  533|       |  allowed_protocols |= CURLPROTO_SMTPS;
  534|       |#endif
  535|       |#ifdef FUZZ_PROTOCOLS_TFTP
  536|       |  allowed_protocols |= CURLPROTO_TFTP;
  537|       |#endif
  538|       |
  539|    783|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_PROTOCOLS, allowed_protocols));
  540|       |
  541|    783|EXIT_LABEL:
  542|       |
  543|    783|  return rc;
  544|    783|}

_Z16fuzz_open_socketPv12curlsocktypeP13curl_sockaddr:
   42|    524|{
   43|    524|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
   44|    524|  int fds[2];
   45|    524|  int flags;
   46|    524|  int status;
   47|    524|  const uint8_t *data;
   48|    524|  size_t data_len;
   49|    524|  struct sockaddr_un client_addr;
   50|    524|  FUZZ_SOCKET_MANAGER *sman;
   51|       |
   52|       |  /* Handle unused parameters */
   53|    524|  (void)purpose;
   54|    524|  (void)address;
   55|       |
   56|    524|  if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED &&
   57|    524|     fuzz->sockman[1].fd_state != FUZZ_SOCK_CLOSED) {
   58|       |    /* Both sockets have already been opened. */
   59|      0|    return CURL_SOCKET_BAD;
   60|      0|  }
   61|    524|  else if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED) {
   62|      0|    sman = &fuzz->sockman[1];
   63|      0|  }
   64|    524|  else {
   65|    524|    FV_PRINTF(fuzz, "FUZZ: Using socket manager 0 \n");
   66|    524|    sman = &fuzz->sockman[0];
   67|    524|  }
   68|    524|  FV_PRINTF(fuzz, "FUZZ[%d]: Using socket manager %d \n",
   69|    524|            sman->index,
   70|    524|            sman->index);
   71|       |
   72|    524|  if(socketpair(AF_UNIX, SOCK_STREAM, 0, fds)) {
   73|       |    /* Failed to create a pair of sockets. */
   74|      0|    return CURL_SOCKET_BAD;
   75|      0|  }
   76|       |
   77|    524|  if(!FUZZ_VALID_SOCK(fds[0]) || !FUZZ_VALID_SOCK(fds[1])) {
   78|       |    /* One or more of the file descriptors is too large to fit in an fd_set,
   79|       |       so reject it here. Print out a message because this ought to be quite
   80|       |       rare. */
   81|      0|    printf("FUZZ[%d]: Not using file descriptors %d,%d as FD_SETSIZE is %d\n",
   82|      0|           sman->index,
   83|      0|           fds[0],
   84|      0|           fds[1],
   85|      0|           FD_SETSIZE);
   86|       |
   87|       |    /* Close the file descriptors so they don't leak. */
   88|      0|    close(fds[0]);
   89|      0|    close(fds[1]);
   90|       |
   91|      0|    return CURL_SOCKET_BAD;
   92|      0|  }
   93|       |
   94|       |  /* Make the server non-blocking. */
   95|    524|  flags = fcntl(fds[0], F_GETFL, 0);
   96|    524|  status = fcntl(fds[0], F_SETFL, flags | O_NONBLOCK);
   97|       |
   98|    524|  if(status == -1) {
   99|       |    /* Close the file descriptors so they don't leak. */
  100|      0|    close(fds[0]);
  101|      0|    close(fds[1]);
  102|       |
  103|       |    /* Setting non-blocking failed. Return a negative response code. */
  104|      0|    return CURL_SOCKET_BAD;
  105|      0|  }
  106|       |
  107|       |  /* At this point, the file descriptors in hand should be good enough to
  108|       |     work with. */
  109|    524|  sman->fd = fds[0];
  110|    524|  sman->fd_state = FUZZ_SOCK_OPEN;
  111|       |
  112|       |  /* If the server should be sending data immediately, send it here. */
  113|    524|  data = sman->responses[0].data;
  114|    524|  data_len = sman->responses[0].data_len;
  115|       |
  116|    524|  if(data != NULL) {
  117|    239|    FV_PRINTF(fuzz, "FUZZ[%d]: Sending initial response \n", sman->index);
  118|       |
  119|    239|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  120|       |      /* Close the file descriptors so they don't leak. */
  121|      0|      close(sman->fd);
  122|      0|      sman->fd = -1;
  123|       |
  124|      0|      close(fds[1]);
  125|       |
  126|       |      /* Failed to write all of the response data. */
  127|      0|      return CURL_SOCKET_BAD;
  128|      0|    }
  129|    239|  }
  130|       |
  131|       |  /* Check to see if the socket should be shut down immediately. */
  132|    524|  if(sman->responses[1].data == NULL) {
  133|    311|    FV_PRINTF(fuzz,
  134|    311|              "FUZZ[%d]: Shutting down server socket: %d \n",
  135|    311|              sman->index,
  136|    311|              sman->fd);
  137|    311|    shutdown(sman->fd, SHUT_WR);
  138|    311|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  139|    311|  }
  140|       |
  141|       |  /* Return the other half of the socket pair. */
  142|    524|  return fds[1];
  143|    524|}
_Z21fuzz_sockopt_callbackPvi12curlsocktype:
  152|    524|{
  153|    524|  (void)ptr;
  154|    524|  (void)curlfd;
  155|    524|  (void)purpose;
  156|       |
  157|    524|  return CURL_SOCKOPT_ALREADY_CONNECTED;
  158|    524|}

_Z18fuzz_get_first_tlvP9fuzz_dataP3tlv:
   32|    976|{
   33|       |  /* Reset the cursor. */
   34|    976|  fuzz->state.data_pos = 0;
   35|    976|  return fuzz_get_tlv_comn(fuzz, tlv);
   36|    976|}
_Z17fuzz_get_next_tlvP9fuzz_dataP3tlv:
   43|  4.85k|{
   44|       |  /* Advance the cursor by the full length of the previous TLV. */
   45|  4.85k|  fuzz->state.data_pos += sizeof(TLV_RAW) + tlv->length;
   46|       |
   47|       |  /* Work out if there's a TLV's worth of data to read */
   48|  4.85k|  if(fuzz->state.data_pos + sizeof(TLV_RAW) > fuzz->state.data_len) {
   49|       |    /* No more TLVs to parse */
   50|    794|    return TLV_RC_NO_MORE_TLVS;
   51|    794|  }
   52|       |
   53|  4.06k|  return fuzz_get_tlv_comn(fuzz, tlv);
   54|  4.85k|}
_Z17fuzz_get_tlv_comnP9fuzz_dataP3tlv:
   61|  5.04k|{
   62|  5.04k|  int rc = 0;
   63|  5.04k|  size_t data_offset;
   64|  5.04k|  TLV_RAW *raw;
   65|       |
   66|       |  /* Start by casting the data stream to a TLV. */
   67|  5.04k|  raw = (TLV_RAW *)&fuzz->state.data[fuzz->state.data_pos];
   68|  5.04k|  data_offset = fuzz->state.data_pos + sizeof(TLV_RAW);
   69|       |
   70|       |  /* Set the TLV values. */
   71|  5.04k|  tlv->type = to_u16(raw->raw_type);
   72|  5.04k|  tlv->length = to_u32(raw->raw_length);
   73|  5.04k|  tlv->value = &fuzz->state.data[data_offset];
   74|       |
   75|  5.04k|  FV_PRINTF(fuzz, "TLV: type %x length %u\n", tlv->type, tlv->length);
   76|       |
   77|       |  /* Use uint64s to verify lengths of TLVs so that overflow problems don't
   78|       |     matter. */
   79|  5.04k|  uint64_t check_length = data_offset;
   80|  5.04k|  check_length += tlv->length;
   81|       |
   82|  5.04k|  uint64_t remaining_len = fuzz->state.data_len;
   83|  5.04k|  FV_PRINTF(fuzz, "Check length of data: %lu \n", check_length);
   84|  5.04k|  FV_PRINTF(fuzz, "Remaining length of data: %lu \n", remaining_len);
   85|       |
   86|       |  /* Sanity check that the TLV length is ok. */
   87|  5.04k|  if(check_length > remaining_len) {
   88|     93|    FV_PRINTF(fuzz, "Returning TLV_RC_SIZE_ERROR\n");
   89|     93|    rc = TLV_RC_SIZE_ERROR;
   90|     93|  }
   91|       |
   92|  5.04k|  return rc;
   93|  5.04k|}
_Z14fuzz_parse_tlvP9fuzz_dataP3tlv:
   99|  4.77k|{
  100|  4.77k|  int rc;
  101|  4.77k|  char *tmp = NULL;
  102|  4.77k|  uint32_t tmp_u32;
  103|       |
  104|  4.77k|  switch(tlv->type) {
  105|       |    /* The pointers in response TLVs will always be valid as long as the fuzz
  106|       |       data is in scope, which is the entirety of this file. */
  107|    297|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE0, 0);
  108|    320|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE1, 1);
  109|    295|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE2, 2);
  110|    160|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE3, 3);
  111|    138|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE4, 4);
  112|    110|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE5, 5);
  113|     60|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE6, 6);
  114|     42|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE7, 7);
  115|     51|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE8, 8);
  116|     40|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE9, 9);
  117|     10|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE10, 10);
  118|       |
  119|     58|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE0, 0);
  120|     18|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE1, 1);
  121|       |
  122|     14|    case TLV_TYPE_UPLOAD1:
  123|       |      /* The pointers in the TLV will always be valid as long as the fuzz data
  124|       |         is in scope, which is the entirety of this file. */
  125|       |
  126|     14|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_UPLOAD);
  127|       |
  128|     13|      fuzz->upload1_data = tlv->value;
  129|     13|      fuzz->upload1_data_len = tlv->length;
  130|       |
  131|     13|      FSET_OPTION(fuzz, CURLOPT_UPLOAD, 1L);
  132|     13|      FSET_OPTION(fuzz,
  133|     13|                  CURLOPT_INFILESIZE_LARGE,
  134|     13|                  (curl_off_t)fuzz->upload1_data_len);
  135|     13|      break;
  136|       |
  137|    146|    case TLV_TYPE_HEADER:
  138|       |      /* Limit the number of headers that can be added to a message to prevent
  139|       |         timeouts. */
  140|    146|      if(fuzz->header_list_count >= TLV_MAX_NUM_CURLOPT_HEADER) {
  141|      0|        rc = 255;
  142|      0|        goto EXIT_LABEL;
  143|      0|      }
  144|       |
  145|    146|      tmp = fuzz_tlv_to_string(tlv);
  146|    146|      fuzz->header_list = curl_slist_append(fuzz->header_list, tmp);
  147|    146|      fuzz->header_list_count++;
  148|    146|      break;
  149|       |
  150|  1.32k|    case TLV_TYPE_MAIL_RECIPIENT:
  151|  1.32k|      tmp = fuzz_tlv_to_string(tlv);
  152|  1.32k|      fuzz->mail_recipients_list =
  153|  1.32k|                            curl_slist_append(fuzz->mail_recipients_list, tmp);
  154|  1.32k|      break;
  155|       |
  156|    692|    case TLV_TYPE_MIME_PART:
  157|    692|      if(fuzz->mime == NULL) {
  158|     82|        fuzz->mime = curl_mime_init(fuzz->easy);
  159|     82|      }
  160|       |
  161|    692|      fuzz->part = curl_mime_addpart(fuzz->mime);
  162|       |
  163|       |      /* This TLV may have sub TLVs. */
  164|    692|      fuzz_add_mime_part(tlv, fuzz->part);
  165|    692|      break;
  166|       |
  167|      6|    case TLV_TYPE_POSTFIELDS:
  168|      6|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_POSTFIELDS);
  169|      5|      fuzz->postfields = fuzz_tlv_to_string(tlv);
  170|      5|      FSET_OPTION(fuzz, CURLOPT_POSTFIELDS, fuzz->postfields);
  171|      5|      break;
  172|       |
  173|       |    /* Define a set of u32 options. */
  174|     30|    FU32TLV(fuzz, TLV_TYPE_HTTPAUTH, CURLOPT_HTTPAUTH);
  175|     12|    FU32TLV(fuzz, TLV_TYPE_OPTHEADER, CURLOPT_HEADER);
  176|     36|    FU32TLV(fuzz, TLV_TYPE_NOBODY, CURLOPT_NOBODY);
  177|      9|    FU32TLV(fuzz, TLV_TYPE_FOLLOWLOCATION, CURLOPT_FOLLOWLOCATION);
  178|     27|    FU32TLV(fuzz, TLV_TYPE_WILDCARDMATCH, CURLOPT_WILDCARDMATCH);
  179|     12|    FU32TLV(fuzz, TLV_TYPE_RTSP_REQUEST, CURLOPT_RTSP_REQUEST);
  180|      4|    FU32TLV(fuzz, TLV_TYPE_RTSP_CLIENT_CSEQ, CURLOPT_RTSP_CLIENT_CSEQ);
  181|     15|    FU32TLV(fuzz, TLV_TYPE_HTTP_VERSION, CURLOPT_HTTP_VERSION);
  182|       |
  183|       |    /* Define a set of singleton TLVs - they can only have their value set once
  184|       |       and all follow the same pattern. */
  185|  1.42k|    FSINGLETONTLV(fuzz, TLV_TYPE_URL, CURLOPT_URL);
  186|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_DOH_URL, CURLOPT_DOH_URL);
  187|    327|    FSINGLETONTLV(fuzz, TLV_TYPE_USERNAME, CURLOPT_USERNAME);
  188|     15|    FSINGLETONTLV(fuzz, TLV_TYPE_PASSWORD, CURLOPT_PASSWORD);
  189|      7|    FSINGLETONTLV(fuzz, TLV_TYPE_COOKIE, CURLOPT_COOKIE);
  190|     11|    FSINGLETONTLV(fuzz, TLV_TYPE_RANGE, CURLOPT_RANGE);
  191|     11|    FSINGLETONTLV(fuzz, TLV_TYPE_CUSTOMREQUEST, CURLOPT_CUSTOMREQUEST);
  192|     13|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_FROM, CURLOPT_MAIL_FROM);
  193|      9|    FSINGLETONTLV(fuzz, TLV_TYPE_ACCEPTENCODING, CURLOPT_ACCEPT_ENCODING);
  194|      9|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_SESSION_ID, CURLOPT_RTSP_SESSION_ID);
  195|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_STREAM_URI, CURLOPT_RTSP_STREAM_URI);
  196|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_TRANSPORT, CURLOPT_RTSP_TRANSPORT);
  197|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_AUTH, CURLOPT_MAIL_AUTH);
  198|       |
  199|      7|    default:
  200|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  201|       |         corpus so we reject any unknown TLVs. */
  202|      7|      rc = 127;
  203|      7|      goto EXIT_LABEL;
  204|      0|      break;
  205|  4.77k|  }
  206|       |
  207|  4.73k|  rc = 0;
  208|       |
  209|  4.77k|EXIT_LABEL:
  210|       |
  211|  4.77k|  fuzz_free((void **)&tmp);
  212|       |
  213|  4.77k|  return rc;
  214|  4.73k|}
_Z18fuzz_tlv_to_stringP3tlv:
  220|  2.40k|{
  221|  2.40k|  char *tlvstr;
  222|       |
  223|       |  /* Allocate enough space, plus a null terminator */
  224|  2.40k|  tlvstr = (char *)malloc(tlv->length + 1);
  225|       |
  226|  2.40k|  if(tlvstr != NULL) {
  227|  2.40k|    memcpy(tlvstr, tlv->value, tlv->length);
  228|  2.40k|    tlvstr[tlv->length] = 0;
  229|  2.40k|  }
  230|       |
  231|  2.40k|  return tlvstr;
  232|  2.40k|}
_Z18fuzz_add_mime_partP3tlvP13curl_mimepart:
  238|    692|{
  239|    692|  FUZZ_DATA part_fuzz;
  240|    692|  TLV tlv;
  241|    692|  int rc = 0;
  242|    692|  int tlv_rc;
  243|       |
  244|    692|  memset(&part_fuzz, 0, sizeof(FUZZ_DATA));
  245|       |
  246|    692|  if(src_tlv->length < sizeof(TLV_RAW)) {
  247|       |    /* Not enough data for a single TLV - don't continue */
  248|    602|    goto EXIT_LABEL;
  249|    602|  }
  250|       |
  251|       |  /* Set up the state parser */
  252|     90|  part_fuzz.state.data = src_tlv->value;
  253|     90|  part_fuzz.state.data_len = src_tlv->length;
  254|       |
  255|     90|  for(tlv_rc = fuzz_get_first_tlv(&part_fuzz, &tlv);
  256|    212|      tlv_rc == 0;
  257|    172|      tlv_rc = fuzz_get_next_tlv(&part_fuzz, &tlv)) {
  258|       |
  259|       |    /* Have the TLV in hand. Parse the TLV. */
  260|    172|    rc = fuzz_parse_mime_tlv(part, &tlv);
  261|       |
  262|    172|    if(rc != 0) {
  263|       |      /* Failed to parse the TLV. Can't continue. */
  264|     50|      goto EXIT_LABEL;
  265|     50|    }
  266|    172|  }
  267|       |
  268|     40|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
  269|       |    /* A TLV call failed. Can't continue. */
  270|     29|    goto EXIT_LABEL;
  271|     29|  }
  272|       |
  273|    692|EXIT_LABEL:
  274|       |
  275|    692|  return(rc);
  276|     40|}
_Z19fuzz_parse_mime_tlvP13curl_mimepartP3tlv:
  282|    172|{
  283|    172|  int rc;
  284|    172|  char *tmp;
  285|       |
  286|    172|  switch(tlv->type) {
  287|     11|    case TLV_TYPE_MIME_PART_NAME:
  288|     11|      tmp = fuzz_tlv_to_string(tlv);
  289|     11|      curl_mime_name(part, tmp);
  290|     11|      fuzz_free((void **)&tmp);
  291|     11|      break;
  292|       |
  293|    111|    case TLV_TYPE_MIME_PART_DATA:
  294|    111|      curl_mime_data(part, (const char *)tlv->value, tlv->length);
  295|    111|      break;
  296|       |
  297|     50|    default:
  298|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  299|       |         corpus so we reject any unknown TLVs. */
  300|     50|      rc = 255;
  301|     50|      goto EXIT_LABEL;
  302|      0|      break;
  303|    172|  }
  304|       |
  305|    122|  rc = 0;
  306|       |
  307|    172|EXIT_LABEL:
  308|       |
  309|    172|  return rc;
  310|    122|}

ex_data.c:ex_class_item_LHASH_HASH:
  105|  13.2k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  13.2k|                const o_type *a = arg; \
  107|  13.2k|                return name##_hash(a); }
ex_data.c:ex_class_item_LHASH_COMP:
  114|  13.2k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  13.2k|                const o_type *a = arg1;             \
  116|  13.2k|                const o_type *b = arg2; \
  117|  13.2k|                return name##_cmp(a,b); }

X509_NAME_ENTRY_new:
  848|  47.3k|        { \
  849|  47.3k|                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
  850|  47.3k|        } \
X509_NAME_ENTRY_free:
  852|  94.6k|        { \
  853|  94.6k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  94.6k|        }
d2i_X509:
  862|  6.27k|        { \
  863|  6.27k|                return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
  864|  6.27k|        } \
X509_free:
  852|  12.5k|        { \
  853|  12.5k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  12.5k|        }
X509_CERT_AUX_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }
ASN1_OCTET_STRING_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }
ASN1_TYPE_new:
  848|  16.5k|        { \
  849|  16.5k|                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
  850|  16.5k|        } \

c2i_ASN1_BIT_STRING:
  129|  12.5k|{
  130|  12.5k|    ASN1_BIT_STRING *ret = NULL;
  131|  12.5k|    const unsigned char *p;
  132|  12.5k|    unsigned char *s;
  133|  12.5k|    int i;
  134|       |
  135|  12.5k|    if (len < 1) {
  136|      0|        i = ASN1_R_STRING_TOO_SHORT;
  137|      0|        goto err;
  138|      0|    }
  139|       |
  140|  12.5k|    if (len > INT_MAX) {
  141|      0|        i = ASN1_R_STRING_TOO_LONG;
  142|      0|        goto err;
  143|      0|    }
  144|       |
  145|  12.5k|    if ((a == NULL) || ((*a) == NULL)) {
  146|      0|        if ((ret = M_ASN1_BIT_STRING_new()) == NULL)
  147|      0|            return (NULL);
  148|      0|    } else
  149|  12.5k|        ret = (*a);
  150|       |
  151|  12.5k|    p = *pp;
  152|  12.5k|    i = *(p++);
  153|  12.5k|    if (i > 7) {
  154|      0|        i = ASN1_R_INVALID_BIT_STRING_BITS_LEFT;
  155|      0|        goto err;
  156|      0|    }
  157|       |    /*
  158|       |     * We do this to preserve the settings.  If we modify the settings, via
  159|       |     * the _set_bit function, we will recalculate on output
  160|       |     */
  161|  12.5k|    ret->flags &= ~(ASN1_STRING_FLAG_BITS_LEFT | 0x07); /* clear */
  162|  12.5k|    ret->flags |= (ASN1_STRING_FLAG_BITS_LEFT | i); /* set */
  163|       |
  164|  12.5k|    if (len-- > 1) {            /* using one because of the bits left byte */
  165|  12.5k|        s = (unsigned char *)OPENSSL_malloc((int)len);
  166|  12.5k|        if (s == NULL) {
  167|      0|            i = ERR_R_MALLOC_FAILURE;
  168|      0|            goto err;
  169|      0|        }
  170|  12.5k|        memcpy(s, p, (int)len);
  171|  12.5k|        s[len - 1] &= (0xff << i);
  172|  12.5k|        p += len;
  173|  12.5k|    } else
  174|      0|        s = NULL;
  175|       |
  176|  12.5k|    ret->length = (int)len;
  177|  12.5k|    if (ret->data != NULL)
  178|      0|        OPENSSL_free(ret->data);
  179|  12.5k|    ret->data = s;
  180|  12.5k|    ret->type = V_ASN1_BIT_STRING;
  181|  12.5k|    if (a != NULL)
  182|  12.5k|        (*a) = ret;
  183|  12.5k|    *pp = p;
  184|  12.5k|    return (ret);
  185|      0| err:
  186|      0|    ASN1err(ASN1_F_C2I_ASN1_BIT_STRING, i);
  187|      0|    if ((ret != NULL) && ((a == NULL) || (*a != ret)))
  188|      0|        M_ASN1_BIT_STRING_free(ret);
  189|      0|    return (NULL);
  190|  12.5k|}

c2i_ASN1_INTEGER:
  188|  12.5k|{
  189|  12.5k|    ASN1_INTEGER *ret = NULL;
  190|  12.5k|    const unsigned char *p, *pend;
  191|  12.5k|    unsigned char *to, *s;
  192|  12.5k|    int i;
  193|       |
  194|  12.5k|    if ((a == NULL) || ((*a) == NULL)) {
  195|  6.27k|        if ((ret = M_ASN1_INTEGER_new()) == NULL)
  196|      0|            return (NULL);
  197|  6.27k|        ret->type = V_ASN1_INTEGER;
  198|  6.27k|    } else
  199|  6.27k|        ret = (*a);
  200|       |
  201|  12.5k|    p = *pp;
  202|  12.5k|    pend = p + len;
  203|       |
  204|       |    /*
  205|       |     * We must OPENSSL_malloc stuff, even for 0 bytes otherwise it signifies
  206|       |     * a missing NULL parameter.
  207|       |     */
  208|  12.5k|    s = (unsigned char *)OPENSSL_malloc((int)len + 1);
  209|  12.5k|    if (s == NULL) {
  210|      0|        i = ERR_R_MALLOC_FAILURE;
  211|      0|        goto err;
  212|      0|    }
  213|  12.5k|    to = s;
  214|  12.5k|    if (!len) {
  215|       |        /*
  216|       |         * Strictly speaking this is an illegal INTEGER but we tolerate it.
  217|       |         */
  218|      0|        ret->type = V_ASN1_INTEGER;
  219|  12.5k|    } else if (*p & 0x80) {     /* a negative number */
  220|     49|        ret->type = V_ASN1_NEG_INTEGER;
  221|     49|        if ((*p == 0xff) && (len != 1)) {
  222|      0|            p++;
  223|      0|            len--;
  224|      0|        }
  225|     49|        i = len;
  226|     49|        p += i - 1;
  227|     49|        to += i - 1;
  228|     49|        while ((!*p) && i) {
  229|      0|            *(to--) = 0;
  230|      0|            i--;
  231|      0|            p--;
  232|      0|        }
  233|       |        /*
  234|       |         * Special case: if all zeros then the number will be of the form FF
  235|       |         * followed by n zero bytes: this corresponds to 1 followed by n zero
  236|       |         * bytes. We've already written n zeros so we just append an extra
  237|       |         * one and set the first byte to a 1. This is treated separately
  238|       |         * because it is the only case where the number of bytes is larger
  239|       |         * than len.
  240|       |         */
  241|     49|        if (!i) {
  242|      0|            *s = 1;
  243|      0|            s[len] = 0;
  244|      0|            len++;
  245|     49|        } else {
  246|     49|            *(to--) = (*(p--) ^ 0xff) + 1;
  247|     49|            i--;
  248|    784|            for (; i > 0; i--)
  249|    735|                *(to--) = *(p--) ^ 0xff;
  250|     49|        }
  251|  12.4k|    } else {
  252|  12.4k|        ret->type = V_ASN1_INTEGER;
  253|  12.4k|        if ((*p == 0) && (len != 1)) {
  254|    833|            p++;
  255|    833|            len--;
  256|    833|        }
  257|  12.4k|        memcpy(s, p, (int)len);
  258|  12.4k|    }
  259|       |
  260|  12.5k|    if (ret->data != NULL)
  261|      0|        OPENSSL_free(ret->data);
  262|  12.5k|    ret->data = s;
  263|  12.5k|    ret->length = (int)len;
  264|  12.5k|    if (a != NULL)
  265|  12.5k|        (*a) = ret;
  266|  12.5k|    *pp = pend;
  267|  12.5k|    return (ret);
  268|      0| err:
  269|      0|    ASN1err(ASN1_F_C2I_ASN1_INTEGER, i);
  270|      0|    if ((ret != NULL) && ((a == NULL) || (*a != ret)))
  271|      0|        M_ASN1_INTEGER_free(ret);
  272|      0|    return (NULL);
  273|  12.5k|}

ASN1_mbstring_copy:
   88|  47.3k|{
   89|  47.3k|    return ASN1_mbstring_ncopy(out, in, len, inform, mask, 0, 0);
   90|  47.3k|}
ASN1_mbstring_ncopy:
   95|  47.3k|{
   96|  47.3k|    int str_type;
   97|  47.3k|    int ret;
   98|  47.3k|    char free_out;
   99|  47.3k|    int outform, outlen = 0;
  100|  47.3k|    ASN1_STRING *dest;
  101|  47.3k|    unsigned char *p;
  102|  47.3k|    int nchar;
  103|  47.3k|    char strbuf[32];
  104|  47.3k|    int (*cpyfunc) (unsigned long, void *) = NULL;
  105|  47.3k|    if (len == -1)
  106|      0|        len = strlen((const char *)in);
  107|  47.3k|    if (!mask)
  108|      0|        mask = DIRSTRING_TYPE;
  109|       |
  110|       |    /* First do a string check and work out the number of characters */
  111|  47.3k|    switch (inform) {
  112|       |
  113|      0|    case MBSTRING_BMP:
  114|      0|        if (len & 1) {
  115|      0|            ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY,
  116|      0|                    ASN1_R_INVALID_BMPSTRING_LENGTH);
  117|      0|            return -1;
  118|      0|        }
  119|      0|        nchar = len >> 1;
  120|      0|        break;
  121|       |
  122|      0|    case MBSTRING_UNIV:
  123|      0|        if (len & 3) {
  124|      0|            ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY,
  125|      0|                    ASN1_R_INVALID_UNIVERSALSTRING_LENGTH);
  126|      0|            return -1;
  127|      0|        }
  128|      0|        nchar = len >> 2;
  129|      0|        break;
  130|       |
  131|  11.4k|    case MBSTRING_UTF8:
  132|  11.4k|        nchar = 0;
  133|       |        /* This counts the characters and does utf8 syntax checking */
  134|  11.4k|        ret = traverse_string(in, len, MBSTRING_UTF8, in_utf8, &nchar);
  135|  11.4k|        if (ret < 0) {
  136|      0|            ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ASN1_R_INVALID_UTF8STRING);
  137|      0|            return -1;
  138|      0|        }
  139|  11.4k|        break;
  140|       |
  141|  35.8k|    case MBSTRING_ASC:
  142|  35.8k|        nchar = len;
  143|  35.8k|        break;
  144|       |
  145|      0|    default:
  146|      0|        ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ASN1_R_UNKNOWN_FORMAT);
  147|      0|        return -1;
  148|  47.3k|    }
  149|       |
  150|  47.3k|    if ((minsize > 0) && (nchar < minsize)) {
  151|      0|        ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ASN1_R_STRING_TOO_SHORT);
  152|      0|        BIO_snprintf(strbuf, sizeof strbuf, "%ld", minsize);
  153|      0|        ERR_add_error_data(2, "minsize=", strbuf);
  154|      0|        return -1;
  155|      0|    }
  156|       |
  157|  47.3k|    if ((maxsize > 0) && (nchar > maxsize)) {
  158|      0|        ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ASN1_R_STRING_TOO_LONG);
  159|      0|        BIO_snprintf(strbuf, sizeof strbuf, "%ld", maxsize);
  160|      0|        ERR_add_error_data(2, "maxsize=", strbuf);
  161|      0|        return -1;
  162|      0|    }
  163|       |
  164|       |    /* Now work out minimal type (if any) */
  165|  47.3k|    if (traverse_string(in, len, inform, type_str, &mask) < 0) {
  166|      0|        ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ASN1_R_ILLEGAL_CHARACTERS);
  167|      0|        return -1;
  168|      0|    }
  169|       |
  170|       |    /* Now work out output format and string type */
  171|  47.3k|    outform = MBSTRING_ASC;
  172|  47.3k|    if (mask & B_ASN1_PRINTABLESTRING)
  173|      0|        str_type = V_ASN1_PRINTABLESTRING;
  174|  47.3k|    else if (mask & B_ASN1_IA5STRING)
  175|      0|        str_type = V_ASN1_IA5STRING;
  176|  47.3k|    else if (mask & B_ASN1_T61STRING)
  177|      0|        str_type = V_ASN1_T61STRING;
  178|  47.3k|    else if (mask & B_ASN1_BMPSTRING) {
  179|      0|        str_type = V_ASN1_BMPSTRING;
  180|      0|        outform = MBSTRING_BMP;
  181|  47.3k|    } else if (mask & B_ASN1_UNIVERSALSTRING) {
  182|      0|        str_type = V_ASN1_UNIVERSALSTRING;
  183|      0|        outform = MBSTRING_UNIV;
  184|  47.3k|    } else {
  185|  47.3k|        str_type = V_ASN1_UTF8STRING;
  186|  47.3k|        outform = MBSTRING_UTF8;
  187|  47.3k|    }
  188|  47.3k|    if (!out)
  189|      0|        return str_type;
  190|  47.3k|    if (*out) {
  191|  47.3k|        free_out = 0;
  192|  47.3k|        dest = *out;
  193|  47.3k|        if (dest->data) {
  194|      0|            dest->length = 0;
  195|      0|            OPENSSL_free(dest->data);
  196|      0|            dest->data = NULL;
  197|      0|        }
  198|  47.3k|        dest->type = str_type;
  199|  47.3k|    } else {
  200|      0|        free_out = 1;
  201|      0|        dest = ASN1_STRING_type_new(str_type);
  202|      0|        if (!dest) {
  203|      0|            ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ERR_R_MALLOC_FAILURE);
  204|      0|            return -1;
  205|      0|        }
  206|      0|        *out = dest;
  207|      0|    }
  208|       |    /* If both the same type just copy across */
  209|  47.3k|    if (inform == outform) {
  210|  11.4k|        if (!ASN1_STRING_set(dest, in, len)) {
  211|      0|            ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ERR_R_MALLOC_FAILURE);
  212|      0|            return -1;
  213|      0|        }
  214|  11.4k|        return str_type;
  215|  11.4k|    }
  216|       |
  217|       |    /* Work out how much space the destination will need */
  218|  35.8k|    switch (outform) {
  219|      0|    case MBSTRING_ASC:
  220|      0|        outlen = nchar;
  221|      0|        cpyfunc = cpy_asc;
  222|      0|        break;
  223|       |
  224|      0|    case MBSTRING_BMP:
  225|      0|        outlen = nchar << 1;
  226|      0|        cpyfunc = cpy_bmp;
  227|      0|        break;
  228|       |
  229|      0|    case MBSTRING_UNIV:
  230|      0|        outlen = nchar << 2;
  231|      0|        cpyfunc = cpy_univ;
  232|      0|        break;
  233|       |
  234|  35.8k|    case MBSTRING_UTF8:
  235|  35.8k|        outlen = 0;
  236|  35.8k|        traverse_string(in, len, inform, out_utf8, &outlen);
  237|  35.8k|        cpyfunc = cpy_utf8;
  238|  35.8k|        break;
  239|  35.8k|    }
  240|  35.8k|    if (!(p = OPENSSL_malloc(outlen + 1))) {
  241|      0|        if (free_out)
  242|      0|            ASN1_STRING_free(dest);
  243|      0|        ASN1err(ASN1_F_ASN1_MBSTRING_NCOPY, ERR_R_MALLOC_FAILURE);
  244|      0|        return -1;
  245|      0|    }
  246|  35.8k|    dest->length = outlen;
  247|  35.8k|    dest->data = p;
  248|  35.8k|    p[outlen] = 0;
  249|  35.8k|    traverse_string(in, len, inform, cpyfunc, &p);
  250|  35.8k|    return str_type;
  251|  35.8k|}
a_mbstr.c:traverse_string:
  261|   130k|{
  262|   130k|    unsigned long value;
  263|   130k|    int ret;
  264|  2.27M|    while (len) {
  265|  2.14M|        if (inform == MBSTRING_ASC) {
  266|  1.69M|            value = *p++;
  267|  1.69M|            len--;
  268|  1.69M|        } else if (inform == MBSTRING_BMP) {
  269|      0|            value = *p++ << 8;
  270|      0|            value |= *p++;
  271|      0|            len -= 2;
  272|   452k|        } else if (inform == MBSTRING_UNIV) {
  273|      0|            value = ((unsigned long)*p++) << 24;
  274|      0|            value |= ((unsigned long)*p++) << 16;
  275|      0|            value |= *p++ << 8;
  276|      0|            value |= *p++;
  277|      0|            len -= 4;
  278|   452k|        } else {
  279|   452k|            ret = UTF8_getc(p, len, &value);
  280|   452k|            if (ret < 0)
  281|      0|                return -1;
  282|   452k|            len -= ret;
  283|   452k|            p += ret;
  284|   452k|        }
  285|  2.14M|        if (rfunc) {
  286|  2.14M|            ret = rfunc(value, arg);
  287|  2.14M|            if (ret <= 0)
  288|      0|                return ret;
  289|  2.14M|        }
  290|  2.14M|    }
  291|   130k|    return 1;
  292|   130k|}
a_mbstr.c:in_utf8:
  299|   226k|{
  300|   226k|    int *nchar;
  301|   226k|    nchar = arg;
  302|   226k|    (*nchar)++;
  303|   226k|    return 1;
  304|   226k|}
a_mbstr.c:out_utf8:
  309|   563k|{
  310|   563k|    int *outlen;
  311|   563k|    outlen = arg;
  312|   563k|    *outlen += UTF8_putc(NULL, -1, value);
  313|   563k|    return 1;
  314|   563k|}
a_mbstr.c:type_str:
  322|   789k|{
  323|   789k|    unsigned long types;
  324|   789k|    types = *((unsigned long *)arg);
  325|   789k|    if ((types & B_ASN1_PRINTABLESTRING) && !is_printable(value))
  326|      0|        types &= ~B_ASN1_PRINTABLESTRING;
  327|   789k|    if ((types & B_ASN1_IA5STRING) && (value > 127))
  328|      0|        types &= ~B_ASN1_IA5STRING;
  329|   789k|    if ((types & B_ASN1_T61STRING) && (value > 0xff))
  330|      0|        types &= ~B_ASN1_T61STRING;
  331|   789k|    if ((types & B_ASN1_BMPSTRING) && (value > 0xffff))
  332|      0|        types &= ~B_ASN1_BMPSTRING;
  333|   789k|    if (!types)
  334|      0|        return -1;
  335|   789k|    *((unsigned long *)arg) = types;
  336|   789k|    return 1;
  337|   789k|}
a_mbstr.c:cpy_utf8:
  382|   563k|{
  383|   563k|    unsigned char **p;
  384|   563k|    int ret;
  385|   563k|    p = arg;
  386|       |    /* We already know there is enough room so pass 0xff as the length */
  387|   563k|    ret = UTF8_putc(*p, 0xff, value);
  388|   563k|    *p += ret;
  389|   563k|    return 1;
  390|   563k|}

i2t_ASN1_OBJECT:
  218|     49|{
  219|     49|    return OBJ_obj2txt(buf, buf_len, a, 0);
  220|     49|}
c2i_ASN1_OBJECT:
  274|  89.7k|{
  275|  89.7k|    ASN1_OBJECT *ret = NULL;
  276|  89.7k|    const unsigned char *p;
  277|  89.7k|    unsigned char *data;
  278|  89.7k|    int i, length;
  279|       |
  280|       |    /*
  281|       |     * Sanity check OID encoding. Need at least one content octet. MSB must
  282|       |     * be clear in the last octet. can't have leading 0x80 in subidentifiers,
  283|       |     * see: X.690 8.19.2
  284|       |     */
  285|  89.7k|    if (len <= 0 || len > INT_MAX || pp == NULL || (p = *pp) == NULL ||
  286|  89.7k|        p[len - 1] & 0x80) {
  287|      0|        ASN1err(ASN1_F_C2I_ASN1_OBJECT, ASN1_R_INVALID_OBJECT_ENCODING);
  288|      0|        return NULL;
  289|      0|    }
  290|       |    /* Now 0 < len <= INT_MAX, so the cast is safe. */
  291|  89.7k|    length = (int)len;
  292|   475k|    for (i = 0; i < length; i++, p++) {
  293|   385k|        if (*p == 0x80 && (!i || !(p[-1] & 0x80))) {
  294|      0|            ASN1err(ASN1_F_C2I_ASN1_OBJECT, ASN1_R_INVALID_OBJECT_ENCODING);
  295|      0|            return NULL;
  296|      0|        }
  297|   385k|    }
  298|       |
  299|       |    /*
  300|       |     * only the ASN1_OBJECTs from the 'table' will have values for ->sn or
  301|       |     * ->ln
  302|       |     */
  303|  89.7k|    if ((a == NULL) || ((*a) == NULL) ||
  304|  89.7k|        !((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC)) {
  305|  89.7k|        if ((ret = ASN1_OBJECT_new()) == NULL)
  306|      0|            return (NULL);
  307|  89.7k|    } else
  308|      0|        ret = (*a);
  309|       |
  310|  89.7k|    p = *pp;
  311|       |    /* detach data from object */
  312|  89.7k|    data = (unsigned char *)ret->data;
  313|  89.7k|    ret->data = NULL;
  314|       |    /* once detached we can change it */
  315|  89.7k|    if ((data == NULL) || (ret->length < length)) {
  316|  89.7k|        ret->length = 0;
  317|  89.7k|        if (data != NULL)
  318|      0|            OPENSSL_free(data);
  319|  89.7k|        data = (unsigned char *)OPENSSL_malloc(length);
  320|  89.7k|        if (data == NULL) {
  321|      0|            i = ERR_R_MALLOC_FAILURE;
  322|      0|            goto err;
  323|      0|        }
  324|  89.7k|        ret->flags |= ASN1_OBJECT_FLAG_DYNAMIC_DATA;
  325|  89.7k|    }
  326|  89.7k|    memcpy(data, p, length);
  327|       |    /* reattach data to object, after which it remains const */
  328|  89.7k|    ret->data = data;
  329|  89.7k|    ret->length = length;
  330|  89.7k|    ret->sn = NULL;
  331|  89.7k|    ret->ln = NULL;
  332|       |    /* ret->flags=ASN1_OBJECT_FLAG_DYNAMIC; we know it is dynamic */
  333|  89.7k|    p += length;
  334|       |
  335|  89.7k|    if (a != NULL)
  336|  89.7k|        (*a) = ret;
  337|  89.7k|    *pp = p;
  338|  89.7k|    return (ret);
  339|      0| err:
  340|      0|    ASN1err(ASN1_F_C2I_ASN1_OBJECT, i);
  341|      0|    if ((ret != NULL) && ((a == NULL) || (*a != ret)))
  342|      0|        ASN1_OBJECT_free(ret);
  343|      0|    return (NULL);
  344|  89.7k|}
ASN1_OBJECT_new:
  347|   137k|{
  348|   137k|    ASN1_OBJECT *ret;
  349|       |
  350|   137k|    ret = (ASN1_OBJECT *)OPENSSL_malloc(sizeof(ASN1_OBJECT));
  351|   137k|    if (ret == NULL) {
  352|      0|        ASN1err(ASN1_F_ASN1_OBJECT_NEW, ERR_R_MALLOC_FAILURE);
  353|      0|        return (NULL);
  354|      0|    }
  355|   137k|    ret->length = 0;
  356|   137k|    ret->data = NULL;
  357|   137k|    ret->nid = 0;
  358|   137k|    ret->sn = NULL;
  359|   137k|    ret->ln = NULL;
  360|   137k|    ret->flags = ASN1_OBJECT_FLAG_DYNAMIC;
  361|   137k|    return (ret);
  362|   137k|}
ASN1_OBJECT_free:
  365|   137k|{
  366|   137k|    if (a == NULL)
  367|      0|        return;
  368|   137k|    if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_STRINGS) {
  369|  47.3k|#ifndef CONST_STRICT            /* disable purely for compile-time strict
  370|       |                                 * const checking. Doing this on a "real"
  371|       |                                 * compile will cause memory leaks */
  372|  47.3k|        if (a->sn != NULL)
  373|      0|            OPENSSL_free((void *)a->sn);
  374|  47.3k|        if (a->ln != NULL)
  375|      0|            OPENSSL_free((void *)a->ln);
  376|  47.3k|#endif
  377|  47.3k|        a->sn = a->ln = NULL;
  378|  47.3k|    }
  379|   137k|    if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_DATA) {
  380|   137k|        if (a->data != NULL)
  381|   137k|            OPENSSL_free((void *)a->data);
  382|   137k|        a->data = NULL;
  383|   137k|        a->length = 0;
  384|   137k|    }
  385|   137k|    if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC)
  386|   137k|        OPENSSL_free(a);
  387|   137k|}

ASN1_STRING_to_UTF8:
  627|  47.3k|{
  628|  47.3k|    ASN1_STRING stmp, *str = &stmp;
  629|  47.3k|    int mbflag, type, ret;
  630|  47.3k|    if (!in)
  631|      0|        return -1;
  632|  47.3k|    type = in->type;
  633|  47.3k|    if ((type < 0) || (type > 30))
  634|      0|        return -1;
  635|  47.3k|    mbflag = tag2nbyte[type];
  636|  47.3k|    if (mbflag == -1)
  637|      0|        return -1;
  638|  47.3k|    mbflag |= MBSTRING_FLAG;
  639|  47.3k|    stmp.data = NULL;
  640|  47.3k|    stmp.length = 0;
  641|  47.3k|    stmp.flags = 0;
  642|  47.3k|    ret =
  643|  47.3k|        ASN1_mbstring_copy(&str, in->data, in->length, mbflag,
  644|  47.3k|                           B_ASN1_UTF8STRING);
  645|  47.3k|    if (ret < 0)
  646|      0|        return ret;
  647|  47.3k|    *out = stmp.data;
  648|  47.3k|    return stmp.length;
  649|  47.3k|}

ASN1_TYPE_set:
   73|  16.5k|{
   74|  16.5k|    if (a->value.ptr != NULL) {
   75|      0|        ASN1_TYPE **tmp_a = &a;
   76|      0|        ASN1_primitive_free((ASN1_VALUE **)tmp_a, NULL);
   77|      0|    }
   78|  16.5k|    a->type = type;
   79|  16.5k|    if (type == V_ASN1_BOOLEAN)
   80|      0|        a->value.boolean = value ? 0xff : 0;
   81|  16.5k|    else
   82|  16.5k|        a->value.ptr = value;
   83|  16.5k|}

UTF8_getc:
   77|   452k|{
   78|   452k|    const unsigned char *p;
   79|   452k|    unsigned long value;
   80|   452k|    int ret;
   81|   452k|    if (len <= 0)
   82|      0|        return 0;
   83|   452k|    p = str;
   84|       |
   85|       |    /* Check syntax and work out the encoded value (if correct) */
   86|   452k|    if ((*p & 0x80) == 0) {
   87|   450k|        value = *p++ & 0x7f;
   88|   450k|        ret = 1;
   89|   450k|    } else if ((*p & 0xe0) == 0xc0) {
   90|  2.15k|        if (len < 2)
   91|      0|            return -1;
   92|  2.15k|        if ((p[1] & 0xc0) != 0x80)
   93|      0|            return -3;
   94|  2.15k|        value = (*p++ & 0x1f) << 6;
   95|  2.15k|        value |= *p++ & 0x3f;
   96|  2.15k|        if (value < 0x80)
   97|      0|            return -4;
   98|  2.15k|        ret = 2;
   99|  2.15k|    } else if ((*p & 0xf0) == 0xe0) {
  100|      0|        if (len < 3)
  101|      0|            return -1;
  102|      0|        if (((p[1] & 0xc0) != 0x80)
  103|      0|            || ((p[2] & 0xc0) != 0x80))
  104|      0|            return -3;
  105|      0|        value = (*p++ & 0xf) << 12;
  106|      0|        value |= (*p++ & 0x3f) << 6;
  107|      0|        value |= *p++ & 0x3f;
  108|      0|        if (value < 0x800)
  109|      0|            return -4;
  110|      0|        ret = 3;
  111|      0|    } else if ((*p & 0xf8) == 0xf0) {
  112|      0|        if (len < 4)
  113|      0|            return -1;
  114|      0|        if (((p[1] & 0xc0) != 0x80)
  115|      0|            || ((p[2] & 0xc0) != 0x80)
  116|      0|            || ((p[3] & 0xc0) != 0x80))
  117|      0|            return -3;
  118|      0|        value = ((unsigned long)(*p++ & 0x7)) << 18;
  119|      0|        value |= (*p++ & 0x3f) << 12;
  120|      0|        value |= (*p++ & 0x3f) << 6;
  121|      0|        value |= *p++ & 0x3f;
  122|      0|        if (value < 0x10000)
  123|      0|            return -4;
  124|      0|        ret = 4;
  125|      0|    } else if ((*p & 0xfc) == 0xf8) {
  126|      0|        if (len < 5)
  127|      0|            return -1;
  128|      0|        if (((p[1] & 0xc0) != 0x80)
  129|      0|            || ((p[2] & 0xc0) != 0x80)
  130|      0|            || ((p[3] & 0xc0) != 0x80)
  131|      0|            || ((p[4] & 0xc0) != 0x80))
  132|      0|            return -3;
  133|      0|        value = ((unsigned long)(*p++ & 0x3)) << 24;
  134|      0|        value |= ((unsigned long)(*p++ & 0x3f)) << 18;
  135|      0|        value |= ((unsigned long)(*p++ & 0x3f)) << 12;
  136|      0|        value |= (*p++ & 0x3f) << 6;
  137|      0|        value |= *p++ & 0x3f;
  138|      0|        if (value < 0x200000)
  139|      0|            return -4;
  140|      0|        ret = 5;
  141|      0|    } else if ((*p & 0xfe) == 0xfc) {
  142|      0|        if (len < 6)
  143|      0|            return -1;
  144|      0|        if (((p[1] & 0xc0) != 0x80)
  145|      0|            || ((p[2] & 0xc0) != 0x80)
  146|      0|            || ((p[3] & 0xc0) != 0x80)
  147|      0|            || ((p[4] & 0xc0) != 0x80)
  148|      0|            || ((p[5] & 0xc0) != 0x80))
  149|      0|            return -3;
  150|      0|        value = ((unsigned long)(*p++ & 0x1)) << 30;
  151|      0|        value |= ((unsigned long)(*p++ & 0x3f)) << 24;
  152|      0|        value |= ((unsigned long)(*p++ & 0x3f)) << 18;
  153|      0|        value |= ((unsigned long)(*p++ & 0x3f)) << 12;
  154|      0|        value |= (*p++ & 0x3f) << 6;
  155|      0|        value |= *p++ & 0x3f;
  156|      0|        if (value < 0x4000000)
  157|      0|            return -4;
  158|      0|        ret = 6;
  159|      0|    } else
  160|      0|        return -2;
  161|   452k|    *val = value;
  162|   452k|    return ret;
  163|   452k|}
UTF8_putc:
  174|  1.12M|{
  175|  1.12M|    if (!str)
  176|   563k|        len = 6;                /* Maximum we will need */
  177|   563k|    else if (len <= 0)
  178|      0|        return -1;
  179|  1.12M|    if (value < 0x80) {
  180|  1.12M|        if (str)
  181|   563k|            *str = (unsigned char)value;
  182|  1.12M|        return 1;
  183|  1.12M|    }
  184|      0|    if (value < 0x800) {
  185|      0|        if (len < 2)
  186|      0|            return -1;
  187|      0|        if (str) {
  188|      0|            *str++ = (unsigned char)(((value >> 6) & 0x1f) | 0xc0);
  189|      0|            *str = (unsigned char)((value & 0x3f) | 0x80);
  190|      0|        }
  191|      0|        return 2;
  192|      0|    }
  193|      0|    if (value < 0x10000) {
  194|      0|        if (len < 3)
  195|      0|            return -1;
  196|      0|        if (str) {
  197|      0|            *str++ = (unsigned char)(((value >> 12) & 0xf) | 0xe0);
  198|      0|            *str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
  199|      0|            *str = (unsigned char)((value & 0x3f) | 0x80);
  200|      0|        }
  201|      0|        return 3;
  202|      0|    }
  203|      0|    if (value < 0x200000) {
  204|      0|        if (len < 4)
  205|      0|            return -1;
  206|      0|        if (str) {
  207|      0|            *str++ = (unsigned char)(((value >> 18) & 0x7) | 0xf0);
  208|      0|            *str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
  209|      0|            *str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
  210|      0|            *str = (unsigned char)((value & 0x3f) | 0x80);
  211|      0|        }
  212|      0|        return 4;
  213|      0|    }
  214|      0|    if (value < 0x4000000) {
  215|      0|        if (len < 5)
  216|      0|            return -1;
  217|      0|        if (str) {
  218|      0|            *str++ = (unsigned char)(((value >> 24) & 0x3) | 0xf8);
  219|      0|            *str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
  220|      0|            *str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
  221|      0|            *str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
  222|      0|            *str = (unsigned char)((value & 0x3f) | 0x80);
  223|      0|        }
  224|      0|        return 5;
  225|      0|    }
  226|      0|    if (len < 6)
  227|      0|        return -1;
  228|      0|    if (str) {
  229|      0|        *str++ = (unsigned char)(((value >> 30) & 0x1) | 0xfc);
  230|      0|        *str++ = (unsigned char)(((value >> 24) & 0x3f) | 0x80);
  231|      0|        *str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
  232|      0|        *str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
  233|      0|        *str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
  234|      0|        *str = (unsigned char)((value & 0x3f) | 0x80);
  235|      0|    }
  236|      0|    return 6;
  237|      0|}

EVP_PKEY_asn1_get_count:
  133|  2.56k|{
  134|  2.56k|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  135|  2.56k|    if (app_methods)
  136|      0|        num += sk_EVP_PKEY_ASN1_METHOD_num(app_methods);
  137|  2.56k|    return num;
  138|  2.56k|}
EVP_PKEY_asn1_get0:
  141|  2.36k|{
  142|  2.36k|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  143|  2.36k|    if (idx < 0)
  144|      0|        return NULL;
  145|  2.36k|    if (idx < num)
  146|  2.36k|        return standard_methods[idx];
  147|      0|    idx -= num;
  148|      0|    return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
  149|  2.36k|}
EVP_PKEY_asn1_find_str:
  202|    197|{
  203|    197|    int i;
  204|    197|    const EVP_PKEY_ASN1_METHOD *ameth;
  205|    197|    if (len == -1)
  206|    197|        len = strlen(str);
  207|    197|    if (pe) {
  208|    197|#ifndef OPENSSL_NO_ENGINE
  209|    197|        ENGINE *e;
  210|    197|        ameth = ENGINE_pkey_asn1_find_str(&e, str, len);
  211|    197|        if (ameth) {
  212|       |            /*
  213|       |             * Convert structural into functional reference
  214|       |             */
  215|      0|            if (!ENGINE_init(e))
  216|      0|                ameth = NULL;
  217|      0|            ENGINE_free(e);
  218|      0|            *pe = e;
  219|      0|            return ameth;
  220|      0|        }
  221|    197|#endif
  222|    197|        *pe = NULL;
  223|    197|    }
  224|  2.56k|    for (i = 0; i < EVP_PKEY_asn1_get_count(); i++) {
  225|  2.36k|        ameth = EVP_PKEY_asn1_get0(i);
  226|  2.36k|        if (ameth->pkey_flags & ASN1_PKEY_ALIAS)
  227|    985|            continue;
  228|  1.37k|        if (((int)strlen(ameth->pem_str) == len) &&
  229|  1.37k|            !strncasecmp(ameth->pem_str, str, len))
  230|      0|            return ameth;
  231|  1.37k|    }
  232|    197|    return NULL;
  233|    197|}
EVP_PKEY_asn1_new:
  289|      3|{
  290|      3|    EVP_PKEY_ASN1_METHOD *ameth;
  291|      3|    ameth = OPENSSL_malloc(sizeof(EVP_PKEY_ASN1_METHOD));
  292|      3|    if (!ameth)
  293|      0|        return NULL;
  294|       |
  295|      3|    memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));
  296|       |
  297|      3|    ameth->pkey_id = id;
  298|      3|    ameth->pkey_base_id = id;
  299|      3|    ameth->pkey_flags = flags | ASN1_PKEY_DYNAMIC;
  300|       |
  301|      3|    if (info) {
  302|      3|        ameth->info = BUF_strdup(info);
  303|      3|        if (!ameth->info)
  304|      0|            goto err;
  305|      3|    } else
  306|      0|        ameth->info = NULL;
  307|       |
  308|      3|    if (pem_str) {
  309|      3|        ameth->pem_str = BUF_strdup(pem_str);
  310|      3|        if (!ameth->pem_str)
  311|      0|            goto err;
  312|      3|    } else
  313|      0|        ameth->pem_str = NULL;
  314|       |
  315|      3|    ameth->pub_decode = 0;
  316|      3|    ameth->pub_encode = 0;
  317|      3|    ameth->pub_cmp = 0;
  318|      3|    ameth->pub_print = 0;
  319|       |
  320|      3|    ameth->priv_decode = 0;
  321|      3|    ameth->priv_encode = 0;
  322|      3|    ameth->priv_print = 0;
  323|       |
  324|      3|    ameth->old_priv_encode = 0;
  325|      3|    ameth->old_priv_decode = 0;
  326|       |
  327|      3|    ameth->item_verify = 0;
  328|      3|    ameth->item_sign = 0;
  329|       |
  330|      3|    ameth->pkey_size = 0;
  331|      3|    ameth->pkey_bits = 0;
  332|       |
  333|      3|    ameth->param_decode = 0;
  334|      3|    ameth->param_encode = 0;
  335|      3|    ameth->param_missing = 0;
  336|      3|    ameth->param_copy = 0;
  337|      3|    ameth->param_cmp = 0;
  338|      3|    ameth->param_print = 0;
  339|       |
  340|      3|    ameth->pkey_free = 0;
  341|      3|    ameth->pkey_ctrl = 0;
  342|       |
  343|      3|    return ameth;
  344|       |
  345|      0| err:
  346|       |
  347|      0|    EVP_PKEY_asn1_free(ameth);
  348|      0|    return NULL;
  349|       |
  350|      3|}
EVP_PKEY_asn1_set_public:
  409|      2|{
  410|      2|    ameth->pub_decode = pub_decode;
  411|      2|    ameth->pub_encode = pub_encode;
  412|      2|    ameth->pub_cmp = pub_cmp;
  413|      2|    ameth->pub_print = pub_print;
  414|      2|    ameth->pkey_size = pkey_size;
  415|      2|    ameth->pkey_bits = pkey_bits;
  416|      2|}
EVP_PKEY_asn1_set_private:
  428|      2|{
  429|      2|    ameth->priv_decode = priv_decode;
  430|      2|    ameth->priv_encode = priv_encode;
  431|      2|    ameth->priv_print = priv_print;
  432|      2|}
EVP_PKEY_asn1_set_param:
  448|      2|{
  449|      2|    ameth->param_decode = param_decode;
  450|      2|    ameth->param_encode = param_encode;
  451|      2|    ameth->param_missing = param_missing;
  452|      2|    ameth->param_copy = param_copy;
  453|      2|    ameth->param_cmp = param_cmp;
  454|      2|    ameth->param_print = param_print;
  455|      2|}
EVP_PKEY_asn1_set_free:
  459|      3|{
  460|      3|    ameth->pkey_free = pkey_free;
  461|      3|}
EVP_PKEY_asn1_set_ctrl:
  466|      3|{
  467|      3|    ameth->pkey_ctrl = pkey_ctrl;
  468|      3|}

ERR_load_ASN1_strings:
  346|      1|{
  347|      1|#ifndef OPENSSL_NO_ERR
  348|       |
  349|      1|    if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
  350|      1|        ERR_load_strings(0, ASN1_str_functs);
  351|      1|        ERR_load_strings(0, ASN1_str_reasons);
  352|      1|    }
  353|      1|#endif
  354|      1|}

ASN1_get_object:
   96|   416k|{
   97|   416k|    int i, ret;
   98|   416k|    long l;
   99|   416k|    const unsigned char *p = *pp;
  100|   416k|    int tag, xclass, inf;
  101|   416k|    long max = omax;
  102|       |
  103|   416k|    if (!max)
  104|      0|        goto err;
  105|   416k|    ret = (*p & V_ASN1_CONSTRUCTED);
  106|   416k|    xclass = (*p & V_ASN1_PRIVATE);
  107|   416k|    i = *p & V_ASN1_PRIMITIVE_TAG;
  108|   416k|    if (i == V_ASN1_PRIMITIVE_TAG) { /* high-tag */
  109|      0|        p++;
  110|      0|        if (--max == 0)
  111|      0|            goto err;
  112|      0|        l = 0;
  113|      0|        while (*p & 0x80) {
  114|      0|            l <<= 7L;
  115|      0|            l |= *(p++) & 0x7f;
  116|      0|            if (--max == 0)
  117|      0|                goto err;
  118|      0|            if (l > (INT_MAX >> 7L))
  119|      0|                goto err;
  120|      0|        }
  121|      0|        l <<= 7L;
  122|      0|        l |= *(p++) & 0x7f;
  123|      0|        tag = (int)l;
  124|      0|        if (--max == 0)
  125|      0|            goto err;
  126|   416k|    } else {
  127|   416k|        tag = i;
  128|   416k|        p++;
  129|   416k|        if (--max == 0)
  130|      0|            goto err;
  131|   416k|    }
  132|   416k|    *ptag = tag;
  133|   416k|    *pclass = xclass;
  134|   416k|    if (!asn1_get_length(&p, &inf, plength, max))
  135|      0|        goto err;
  136|       |
  137|   416k|    if (inf && !(ret & V_ASN1_CONSTRUCTED))
  138|      0|        goto err;
  139|       |
  140|       |#if 0
  141|       |    fprintf(stderr, "p=%d + *plength=%ld > omax=%ld + *pp=%d  (%d > %d)\n",
  142|       |            (int)p, *plength, omax, (int)*pp, (int)(p + *plength),
  143|       |            (int)(omax + *pp));
  144|       |
  145|       |#endif
  146|   416k|    if (*plength > (omax - (p - *pp))) {
  147|      0|        ASN1err(ASN1_F_ASN1_GET_OBJECT, ASN1_R_TOO_LONG);
  148|       |        /*
  149|       |         * Set this so that even if things are not long enough the values are
  150|       |         * set correctly
  151|       |         */
  152|      0|        ret |= 0x80;
  153|      0|    }
  154|   416k|    *pp = p;
  155|   416k|    return (ret | inf);
  156|      0| err:
  157|      0|    ASN1err(ASN1_F_ASN1_GET_OBJECT, ASN1_R_HEADER_TOO_LONG);
  158|      0|    return (0x80);
  159|   416k|}
ASN1_put_object:
  199|   189k|{
  200|   189k|    unsigned char *p = *pp;
  201|   189k|    int i, ttag;
  202|       |
  203|   189k|    i = (constructed) ? V_ASN1_CONSTRUCTED : 0;
  204|   189k|    i |= (xclass & V_ASN1_PRIVATE);
  205|   189k|    if (tag < 31)
  206|   189k|        *(p++) = i | (tag & V_ASN1_PRIMITIVE_TAG);
  207|      0|    else {
  208|      0|        *(p++) = i | V_ASN1_PRIMITIVE_TAG;
  209|      0|        for (i = 0, ttag = tag; ttag > 0; i++)
  210|      0|            ttag >>= 7;
  211|      0|        ttag = i;
  212|      0|        while (i-- > 0) {
  213|      0|            p[i] = tag & 0x7f;
  214|      0|            if (i != (ttag - 1))
  215|      0|                p[i] |= 0x80;
  216|      0|            tag >>= 7;
  217|      0|        }
  218|      0|        p += ttag;
  219|      0|    }
  220|   189k|    if (constructed == 2)
  221|      0|        *(p++) = 0x80;
  222|   189k|    else
  223|   189k|        asn1_put_length(&p, length);
  224|   189k|    *pp = p;
  225|   189k|}
ASN1_object_size:
  258|   615k|{
  259|   615k|    int ret = 1;
  260|   615k|    if (length < 0)
  261|      0|        return -1;
  262|   615k|    if (tag >= 31) {
  263|      0|        while (tag > 0) {
  264|      0|            tag >>= 7;
  265|      0|            ret++;
  266|      0|        }
  267|      0|    }
  268|   615k|    if (constructed == 2) {
  269|      0|        ret += 3;
  270|   615k|    } else {
  271|   615k|        ret++;
  272|   615k|        if (length > 127) {
  273|      0|            int tmplen = length;
  274|      0|            while (tmplen > 0) {
  275|      0|                tmplen >>= 8;
  276|      0|                ret++;
  277|      0|            }
  278|      0|        }
  279|   615k|    }
  280|   615k|    if (ret >= INT_MAX - length)
  281|      0|        return -1;
  282|   615k|    return ret + length;
  283|   615k|}
ASN1_STRING_set:
  363|  93.7k|{
  364|  93.7k|    unsigned char *c;
  365|  93.7k|    const char *data = _data;
  366|       |
  367|  93.7k|    if (len < 0) {
  368|      0|        if (data == NULL)
  369|      0|            return (0);
  370|      0|        else
  371|      0|            len = strlen(data);
  372|      0|    }
  373|  93.7k|    if ((str->length <= len) || (str->data == NULL)) {
  374|  93.7k|        c = str->data;
  375|  93.7k|        if (c == NULL)
  376|  93.7k|            str->data = OPENSSL_malloc(len + 1);
  377|      0|        else
  378|      0|            str->data = OPENSSL_realloc(c, len + 1);
  379|       |
  380|  93.7k|        if (str->data == NULL) {
  381|      0|            ASN1err(ASN1_F_ASN1_STRING_SET, ERR_R_MALLOC_FAILURE);
  382|      0|            str->data = c;
  383|      0|            return (0);
  384|      0|        }
  385|  93.7k|    }
  386|  93.7k|    str->length = len;
  387|  93.7k|    if (data != NULL) {
  388|  93.7k|        memcpy(str->data, data, len);
  389|       |        /* an allowance for strings :-) */
  390|  93.7k|        str->data[len] = '\0';
  391|  93.7k|    }
  392|  93.7k|    return (1);
  393|  93.7k|}
ASN1_STRING_type_new:
  409|   154k|{
  410|   154k|    ASN1_STRING *ret;
  411|       |
  412|   154k|    ret = (ASN1_STRING *)OPENSSL_malloc(sizeof(ASN1_STRING));
  413|   154k|    if (ret == NULL) {
  414|      0|        ASN1err(ASN1_F_ASN1_STRING_TYPE_NEW, ERR_R_MALLOC_FAILURE);
  415|      0|        return (NULL);
  416|      0|    }
  417|   154k|    ret->length = 0;
  418|   154k|    ret->type = type;
  419|   154k|    ret->data = NULL;
  420|   154k|    ret->flags = 0;
  421|   154k|    return (ret);
  422|   154k|}
ASN1_STRING_free:
  425|   154k|{
  426|   154k|    if (a == NULL)
  427|      0|        return;
  428|   154k|    if (a->data && !(a->flags & ASN1_STRING_FLAG_NDEF))
  429|   154k|        OPENSSL_free(a->data);
  430|   154k|    OPENSSL_free(a);
  431|   154k|}
asn1_lib.c:asn1_get_length:
  163|   416k|{
  164|   416k|    const unsigned char *p = *pp;
  165|   416k|    unsigned long ret = 0;
  166|   416k|    unsigned long i;
  167|       |
  168|   416k|    if (max-- < 1)
  169|      0|        return 0;
  170|   416k|    if (*p == 0x80) {
  171|      0|        *inf = 1;
  172|      0|        ret = 0;
  173|      0|        p++;
  174|   416k|    } else {
  175|   416k|        *inf = 0;
  176|   416k|        i = *p & 0x7f;
  177|   416k|        if (*(p++) & 0x80) {
  178|  35.5k|            if (i > sizeof(ret) || max < (long)i)
  179|      0|                return 0;
  180|   100k|            while (i-- > 0) {
  181|  64.5k|                ret <<= 8L;
  182|  64.5k|                ret |= *(p++);
  183|  64.5k|            }
  184|  35.5k|        } else
  185|   381k|            ret = i;
  186|   416k|    }
  187|   416k|    if (ret > LONG_MAX)
  188|      0|        return 0;
  189|   416k|    *pp = p;
  190|   416k|    *rl = (long)ret;
  191|   416k|    return 1;
  192|   416k|}
asn1_lib.c:asn1_put_length:
  237|   189k|{
  238|   189k|    unsigned char *p = *pp;
  239|   189k|    int i, l;
  240|   189k|    if (length <= 127)
  241|   189k|        *(p++) = (unsigned char)length;
  242|      0|    else {
  243|      0|        l = length;
  244|      0|        for (i = 0; l > 0; i++)
  245|      0|            l >>= 8;
  246|      0|        *(p++) = i | 0x80;
  247|      0|        l = i;
  248|      0|        while (i-- > 0) {
  249|      0|            p[i] = length & 0xff;
  250|      0|            length >>= 8;
  251|      0|        }
  252|      0|        p += l;
  253|      0|    }
  254|   189k|    *pp = p;
  255|   189k|}

ASN1_add_oid_module:
   99|      1|{
  100|      1|    CONF_module_add("oid_section", oid_module_init, oid_module_finish);
  101|      1|}

ASN1_tag2bit:
  118|   107k|{
  119|   107k|    if ((tag < 0) || (tag > 30))
  120|      0|        return 0;
  121|   107k|    return tag2bit[tag];
  122|   107k|}
ASN1_item_d2i:
  140|  6.27k|{
  141|  6.27k|    ASN1_TLC c;
  142|  6.27k|    ASN1_VALUE *ptmpval = NULL;
  143|  6.27k|    if (!pval)
  144|      0|        pval = &ptmpval;
  145|  6.27k|    asn1_tlc_clear_nc(&c);
  146|  6.27k|    if (ASN1_item_ex_d2i(pval, in, len, it, -1, 0, 0, &c) > 0)
  147|  6.27k|        return *pval;
  148|      0|    return NULL;
  149|  6.27k|}
ASN1_item_ex_d2i:
  168|   433k|{
  169|   433k|    const ASN1_TEMPLATE *tt, *errtt = NULL;
  170|   433k|    const ASN1_COMPAT_FUNCS *cf;
  171|   433k|    const ASN1_EXTERN_FUNCS *ef;
  172|   433k|    const ASN1_AUX *aux = it->funcs;
  173|   433k|    ASN1_aux_cb *asn1_cb;
  174|   433k|    const unsigned char *p = NULL, *q;
  175|   433k|    unsigned char *wp = NULL;   /* BIG FAT WARNING! BREAKS CONST WHERE USED */
  176|   433k|    unsigned char imphack = 0, oclass;
  177|   433k|    char seq_eoc, seq_nolen, cst, isopt;
  178|   433k|    long tmplen;
  179|   433k|    int i;
  180|   433k|    int otag;
  181|   433k|    int ret = 0;
  182|   433k|    ASN1_VALUE **pchptr, *ptmpval;
  183|   433k|    int combine = aclass & ASN1_TFLG_COMBINE;
  184|   433k|    aclass &= ~ASN1_TFLG_COMBINE;
  185|   433k|    if (!pval)
  186|      0|        return 0;
  187|   433k|    if (aux && aux->asn1_cb)
  188|  12.5k|        asn1_cb = aux->asn1_cb;
  189|   421k|    else
  190|   421k|        asn1_cb = 0;
  191|       |
  192|   433k|    switch (it->itype) {
  193|   247k|    case ASN1_ITYPE_PRIMITIVE:
  194|   247k|        if (it->templates) {
  195|       |            /*
  196|       |             * tagging or OPTIONAL is currently illegal on an item template
  197|       |             * because the flags can't get passed down. In practice this
  198|       |             * isn't a problem: we include the relevant flags from the item
  199|       |             * template in the template itself.
  200|       |             */
  201|  59.8k|            if ((tag != -1) || opt) {
  202|      0|                ASN1err(ASN1_F_ASN1_ITEM_EX_D2I,
  203|      0|                        ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE);
  204|      0|                goto err;
  205|      0|            }
  206|  59.8k|            return asn1_template_ex_d2i(pval, in, len,
  207|  59.8k|                                        it->templates, opt, ctx);
  208|  59.8k|        }
  209|   187k|        return asn1_d2i_ex_primitive(pval, in, len, it,
  210|   187k|                                     tag, aclass, opt, ctx);
  211|      0|        break;
  212|       |
  213|  59.8k|    case ASN1_ITYPE_MSTRING:
  214|  59.8k|        p = *in;
  215|       |        /* Just read in tag and class */
  216|  59.8k|        ret = asn1_check_tlen(NULL, &otag, &oclass, NULL, NULL,
  217|  59.8k|                              &p, len, -1, 0, 1, ctx);
  218|  59.8k|        if (!ret) {
  219|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  220|      0|            goto err;
  221|      0|        }
  222|       |
  223|       |        /* Must be UNIVERSAL class */
  224|  59.8k|        if (oclass != V_ASN1_UNIVERSAL) {
  225|       |            /* If OPTIONAL, assume this is OK */
  226|      0|            if (opt)
  227|      0|                return -1;
  228|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_MSTRING_NOT_UNIVERSAL);
  229|      0|            goto err;
  230|      0|        }
  231|       |        /* Check tag matches bit map */
  232|  59.8k|        if (!(ASN1_tag2bit(otag) & it->utype)) {
  233|       |            /* If OPTIONAL, assume this is OK */
  234|      0|            if (opt)
  235|      0|                return -1;
  236|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_MSTRING_WRONG_TAG);
  237|      0|            goto err;
  238|      0|        }
  239|  59.8k|        return asn1_d2i_ex_primitive(pval, in, len, it, otag, 0, 0, ctx);
  240|       |
  241|  12.5k|    case ASN1_ITYPE_EXTERN:
  242|       |        /* Use new style d2i */
  243|  12.5k|        ef = it->funcs;
  244|  12.5k|        return ef->asn1_ex_d2i(pval, in, len, it, tag, aclass, opt, ctx);
  245|       |
  246|      0|    case ASN1_ITYPE_COMPAT:
  247|       |        /* we must resort to old style evil hackery */
  248|      0|        cf = it->funcs;
  249|       |
  250|       |        /* If OPTIONAL see if it is there */
  251|      0|        if (opt) {
  252|      0|            int exptag;
  253|      0|            p = *in;
  254|      0|            if (tag == -1)
  255|      0|                exptag = it->utype;
  256|      0|            else
  257|      0|                exptag = tag;
  258|       |            /*
  259|       |             * Don't care about anything other than presence of expected tag
  260|       |             */
  261|       |
  262|      0|            ret = asn1_check_tlen(NULL, NULL, NULL, NULL, NULL,
  263|      0|                                  &p, len, exptag, aclass, 1, ctx);
  264|      0|            if (!ret) {
  265|      0|                ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  266|      0|                goto err;
  267|      0|            }
  268|      0|            if (ret == -1)
  269|      0|                return -1;
  270|      0|        }
  271|       |
  272|       |        /*
  273|       |         * This is the old style evil hack IMPLICIT handling: since the
  274|       |         * underlying code is expecting a tag and class other than the one
  275|       |         * present we change the buffer temporarily then change it back
  276|       |         * afterwards. This doesn't and never did work for tags > 30. Yes
  277|       |         * this is *horrible* but it is only needed for old style d2i which
  278|       |         * will hopefully not be around for much longer. FIXME: should copy
  279|       |         * the buffer then modify it so the input buffer can be const: we
  280|       |         * should *always* copy because the old style d2i might modify the
  281|       |         * buffer.
  282|       |         */
  283|       |
  284|      0|        if (tag != -1) {
  285|      0|            wp = *(unsigned char **)in;
  286|      0|            imphack = *wp;
  287|      0|            if (p == NULL) {
  288|      0|                ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  289|      0|                goto err;
  290|      0|            }
  291|      0|            *wp = (unsigned char)((*p & V_ASN1_CONSTRUCTED)
  292|      0|                                  | it->utype);
  293|      0|        }
  294|       |
  295|      0|        ptmpval = cf->asn1_d2i(pval, in, len);
  296|       |
  297|      0|        if (tag != -1)
  298|      0|            *wp = imphack;
  299|       |
  300|      0|        if (ptmpval)
  301|      0|            return 1;
  302|       |
  303|      0|        ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  304|      0|        goto err;
  305|       |
  306|      0|    case ASN1_ITYPE_CHOICE:
  307|      0|        if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))
  308|      0|            goto auxerr;
  309|      0|        if (*pval) {
  310|       |            /* Free up and zero CHOICE value if initialised */
  311|      0|            i = asn1_get_choice_selector(pval, it);
  312|      0|            if ((i >= 0) && (i < it->tcount)) {
  313|      0|                tt = it->templates + i;
  314|      0|                pchptr = asn1_get_field_ptr(pval, tt);
  315|      0|                ASN1_template_free(pchptr, tt);
  316|      0|                asn1_set_choice_selector(pval, -1, it);
  317|      0|            }
  318|      0|        } else if (!ASN1_item_ex_new(pval, it)) {
  319|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  320|      0|            goto err;
  321|      0|        }
  322|       |        /* CHOICE type, try each possibility in turn */
  323|      0|        p = *in;
  324|      0|        for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {
  325|      0|            pchptr = asn1_get_field_ptr(pval, tt);
  326|       |            /*
  327|       |             * We mark field as OPTIONAL so its absence can be recognised.
  328|       |             */
  329|      0|            ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx);
  330|       |            /* If field not present, try the next one */
  331|      0|            if (ret == -1)
  332|      0|                continue;
  333|       |            /* If positive return, read OK, break loop */
  334|      0|            if (ret > 0)
  335|      0|                break;
  336|       |            /* Otherwise must be an ASN1 parsing error */
  337|      0|            errtt = tt;
  338|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  339|      0|            goto err;
  340|      0|        }
  341|       |
  342|       |        /* Did we fall off the end without reading anything? */
  343|      0|        if (i == it->tcount) {
  344|       |            /* If OPTIONAL, this is OK */
  345|      0|            if (opt) {
  346|       |                /* Free and zero it */
  347|      0|                ASN1_item_ex_free(pval, it);
  348|      0|                return -1;
  349|      0|            }
  350|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_NO_MATCHING_CHOICE_TYPE);
  351|      0|            goto err;
  352|      0|        }
  353|       |
  354|      0|        asn1_set_choice_selector(pval, i, it);
  355|      0|        if (asn1_cb && !asn1_cb(ASN1_OP_D2I_POST, pval, it, NULL))
  356|      0|            goto auxerr;
  357|      0|        *in = p;
  358|      0|        return 1;
  359|       |
  360|      0|    case ASN1_ITYPE_NDEF_SEQUENCE:
  361|   113k|    case ASN1_ITYPE_SEQUENCE:
  362|   113k|        p = *in;
  363|   113k|        tmplen = len;
  364|       |
  365|       |        /* If no IMPLICIT tagging set to SEQUENCE, UNIVERSAL */
  366|   113k|        if (tag == -1) {
  367|   113k|            tag = V_ASN1_SEQUENCE;
  368|   113k|            aclass = V_ASN1_UNIVERSAL;
  369|   113k|        }
  370|       |        /* Get SEQUENCE length and update len, p */
  371|   113k|        ret = asn1_check_tlen(&len, NULL, NULL, &seq_eoc, &cst,
  372|   113k|                              &p, len, tag, aclass, opt, ctx);
  373|   113k|        if (!ret) {
  374|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  375|      0|            goto err;
  376|   113k|        } else if (ret == -1)
  377|      0|            return -1;
  378|   113k|        if (aux && (aux->flags & ASN1_AFLG_BROKEN)) {
  379|      0|            len = tmplen - (p - *in);
  380|      0|            seq_nolen = 1;
  381|      0|        }
  382|       |        /* If indefinite we don't do a length check */
  383|   113k|        else
  384|   113k|            seq_nolen = seq_eoc;
  385|   113k|        if (!cst) {
  386|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_SEQUENCE_NOT_CONSTRUCTED);
  387|      0|            goto err;
  388|      0|        }
  389|       |
  390|   113k|        if (!*pval && !ASN1_item_ex_new(pval, it)) {
  391|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  392|      0|            goto err;
  393|      0|        }
  394|       |
  395|   113k|        if (asn1_cb && !asn1_cb(ASN1_OP_D2I_PRE, pval, it, NULL))
  396|      0|            goto auxerr;
  397|       |
  398|       |        /* Free up and zero any ADB found */
  399|   419k|        for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {
  400|   306k|            if (tt->flags & ASN1_TFLG_ADB_MASK) {
  401|      0|                const ASN1_TEMPLATE *seqtt;
  402|      0|                ASN1_VALUE **pseqval;
  403|      0|                seqtt = asn1_do_adb(pval, tt, 0);
  404|      0|                if (seqtt == NULL)
  405|      0|                    continue;
  406|      0|                pseqval = asn1_get_field_ptr(pval, seqtt);
  407|      0|                ASN1_template_free(pseqval, seqtt);
  408|      0|            }
  409|   306k|        }
  410|       |
  411|       |        /* Get each field entry */
  412|   417k|        for (i = 0, tt = it->templates; i < it->tcount; i++, tt++) {
  413|   306k|            const ASN1_TEMPLATE *seqtt;
  414|   306k|            ASN1_VALUE **pseqval;
  415|   306k|            seqtt = asn1_do_adb(pval, tt, 1);
  416|   306k|            if (seqtt == NULL)
  417|      0|                goto err;
  418|   306k|            pseqval = asn1_get_field_ptr(pval, seqtt);
  419|       |            /* Have we ran out of data? */
  420|   306k|            if (!len)
  421|  2.25k|                break;
  422|   303k|            q = p;
  423|   303k|            if (asn1_check_eoc(&p, len)) {
  424|      0|                if (!seq_eoc) {
  425|      0|                    ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_UNEXPECTED_EOC);
  426|      0|                    goto err;
  427|      0|                }
  428|      0|                len -= p - q;
  429|      0|                seq_eoc = 0;
  430|      0|                q = p;
  431|      0|                break;
  432|      0|            }
  433|       |            /*
  434|       |             * This determines the OPTIONAL flag value. The field cannot be
  435|       |             * omitted if it is the last of a SEQUENCE and there is still
  436|       |             * data to be read. This isn't strictly necessary but it
  437|       |             * increases efficiency in some cases.
  438|       |             */
  439|   303k|            if (i == (it->tcount - 1))
  440|   111k|                isopt = 0;
  441|   192k|            else
  442|   192k|                isopt = (char)(seqtt->flags & ASN1_TFLG_OPTIONAL);
  443|       |            /*
  444|       |             * attempt to read in field, allowing each to be OPTIONAL
  445|       |             */
  446|       |
  447|   303k|            ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx);
  448|   303k|            if (!ret) {
  449|      0|                errtt = seqtt;
  450|      0|                goto err;
  451|   303k|            } else if (ret == -1) {
  452|       |                /*
  453|       |                 * OPTIONAL component absent. Free and zero the field.
  454|       |                 */
  455|  23.2k|                ASN1_template_free(pseqval, seqtt);
  456|  23.2k|                continue;
  457|  23.2k|            }
  458|       |            /* Update length */
  459|   280k|            len -= p - q;
  460|   280k|        }
  461|       |
  462|       |        /* Check for EOC if expecting one */
  463|   113k|        if (seq_eoc && !asn1_check_eoc(&p, len)) {
  464|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_MISSING_EOC);
  465|      0|            goto err;
  466|      0|        }
  467|       |        /* Check all data read */
  468|   113k|        if (!seq_nolen && len) {
  469|      0|            ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_SEQUENCE_LENGTH_MISMATCH);
  470|      0|            goto err;
  471|      0|        }
  472|       |
  473|       |        /*
  474|       |         * If we get here we've got no more data in the SEQUENCE, however we
  475|       |         * may not have read all fields so check all remaining are OPTIONAL
  476|       |         * and clear any that are.
  477|       |         */
  478|   115k|        for (; i < it->tcount; tt++, i++) {
  479|  2.25k|            const ASN1_TEMPLATE *seqtt;
  480|  2.25k|            seqtt = asn1_do_adb(pval, tt, 1);
  481|  2.25k|            if (seqtt == NULL)
  482|      0|                goto err;
  483|  2.25k|            if (seqtt->flags & ASN1_TFLG_OPTIONAL) {
  484|  2.25k|                ASN1_VALUE **pseqval;
  485|  2.25k|                pseqval = asn1_get_field_ptr(pval, seqtt);
  486|  2.25k|                ASN1_template_free(pseqval, seqtt);
  487|  2.25k|            } else {
  488|      0|                errtt = seqtt;
  489|      0|                ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_FIELD_MISSING);
  490|      0|                goto err;
  491|      0|            }
  492|  2.25k|        }
  493|       |        /* Save encoding */
  494|   113k|        if (!asn1_enc_save(pval, *in, p - *in, it))
  495|      0|            goto auxerr;
  496|   113k|        if (asn1_cb && !asn1_cb(ASN1_OP_D2I_POST, pval, it, NULL))
  497|      0|            goto auxerr;
  498|   113k|        *in = p;
  499|   113k|        return 1;
  500|       |
  501|      0|    default:
  502|      0|        return 0;
  503|   433k|    }
  504|      0| auxerr:
  505|      0|    ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_AUX_ERROR);
  506|      0| err:
  507|      0|    if (combine == 0)
  508|      0|        ASN1_item_ex_free(pval, it);
  509|      0|    if (errtt)
  510|      0|        ERR_add_error_data(4, "Field=", errtt->field_name,
  511|      0|                           ", Type=", it->sname);
  512|      0|    else
  513|      0|        ERR_add_error_data(2, "Type=", it->sname);
  514|      0|    return 0;
  515|      0|}
asn1_ex_c2i:
  850|   224k|{
  851|   224k|    ASN1_VALUE **opval = NULL;
  852|   224k|    ASN1_STRING *stmp;
  853|   224k|    ASN1_TYPE *typ = NULL;
  854|   224k|    int ret = 0;
  855|   224k|    const ASN1_PRIMITIVE_FUNCS *pf;
  856|   224k|    ASN1_INTEGER **tint;
  857|   224k|    pf = it->funcs;
  858|       |
  859|   224k|    if (pf && pf->prim_c2i)
  860|      0|        return pf->prim_c2i(pval, cont, len, utype, free_cont, it);
  861|       |    /* If ANY type clear type and set pointer to internal value */
  862|   224k|    if (it->utype == V_ASN1_ANY) {
  863|  16.5k|        if (!*pval) {
  864|  16.5k|            typ = ASN1_TYPE_new();
  865|  16.5k|            if (typ == NULL)
  866|      0|                goto err;
  867|  16.5k|            *pval = (ASN1_VALUE *)typ;
  868|  16.5k|        } else
  869|      0|            typ = (ASN1_TYPE *)*pval;
  870|       |
  871|  16.5k|        if (utype != typ->type)
  872|  16.5k|            ASN1_TYPE_set(typ, utype, NULL);
  873|  16.5k|        opval = pval;
  874|  16.5k|        pval = &typ->value.asn1_value;
  875|  16.5k|    }
  876|   224k|    switch (utype) {
  877|  89.7k|    case V_ASN1_OBJECT:
  878|  89.7k|        if (!c2i_ASN1_OBJECT((ASN1_OBJECT **)pval, &cont, len))
  879|      0|            goto err;
  880|  89.7k|        break;
  881|       |
  882|  89.7k|    case V_ASN1_NULL:
  883|  15.4k|        if (len) {
  884|      0|            ASN1err(ASN1_F_ASN1_EX_C2I, ASN1_R_NULL_IS_WRONG_LENGTH);
  885|      0|            goto err;
  886|      0|        }
  887|  15.4k|        *pval = (ASN1_VALUE *)1;
  888|  15.4k|        break;
  889|       |
  890|  11.7k|    case V_ASN1_BOOLEAN:
  891|  11.7k|        if (len != 1) {
  892|      0|            ASN1err(ASN1_F_ASN1_EX_C2I, ASN1_R_BOOLEAN_IS_WRONG_LENGTH);
  893|      0|            goto err;
  894|  11.7k|        } else {
  895|  11.7k|            ASN1_BOOLEAN *tbool;
  896|  11.7k|            tbool = (ASN1_BOOLEAN *)pval;
  897|  11.7k|            *tbool = *cont;
  898|  11.7k|        }
  899|  11.7k|        break;
  900|       |
  901|  12.5k|    case V_ASN1_BIT_STRING:
  902|  12.5k|        if (!c2i_ASN1_BIT_STRING((ASN1_BIT_STRING **)pval, &cont, len))
  903|      0|            goto err;
  904|  12.5k|        break;
  905|       |
  906|  12.5k|    case V_ASN1_INTEGER:
  907|  12.5k|    case V_ASN1_ENUMERATED:
  908|  12.5k|        tint = (ASN1_INTEGER **)pval;
  909|  12.5k|        if (!c2i_ASN1_INTEGER(tint, &cont, len))
  910|      0|            goto err;
  911|       |        /* Fixup type to match the expected form */
  912|  12.5k|        (*tint)->type = utype | ((*tint)->type & V_ASN1_NEG);
  913|  12.5k|        break;
  914|       |
  915|  22.4k|    case V_ASN1_OCTET_STRING:
  916|  22.4k|    case V_ASN1_NUMERICSTRING:
  917|  58.1k|    case V_ASN1_PRINTABLESTRING:
  918|  58.2k|    case V_ASN1_T61STRING:
  919|  58.2k|    case V_ASN1_VIDEOTEXSTRING:
  920|  58.3k|    case V_ASN1_IA5STRING:
  921|  70.7k|    case V_ASN1_UTCTIME:
  922|  70.8k|    case V_ASN1_GENERALIZEDTIME:
  923|  70.8k|    case V_ASN1_GRAPHICSTRING:
  924|  70.8k|    case V_ASN1_VISIBLESTRING:
  925|  70.8k|    case V_ASN1_GENERALSTRING:
  926|  70.8k|    case V_ASN1_UNIVERSALSTRING:
  927|  70.8k|    case V_ASN1_BMPSTRING:
  928|  82.3k|    case V_ASN1_UTF8STRING:
  929|  82.3k|    case V_ASN1_OTHER:
  930|  82.3k|    case V_ASN1_SET:
  931|  82.3k|    case V_ASN1_SEQUENCE:
  932|  82.3k|    default:
  933|  82.3k|        if (utype == V_ASN1_BMPSTRING && (len & 1)) {
  934|      0|            ASN1err(ASN1_F_ASN1_EX_C2I, ASN1_R_BMPSTRING_IS_WRONG_LENGTH);
  935|      0|            goto err;
  936|      0|        }
  937|  82.3k|        if (utype == V_ASN1_UNIVERSALSTRING && (len & 3)) {
  938|      0|            ASN1err(ASN1_F_ASN1_EX_C2I,
  939|      0|                    ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH);
  940|      0|            goto err;
  941|      0|        }
  942|       |        /* All based on ASN1_STRING and handled the same */
  943|  82.3k|        if (!*pval) {
  944|      0|            stmp = ASN1_STRING_type_new(utype);
  945|      0|            if (!stmp) {
  946|      0|                ASN1err(ASN1_F_ASN1_EX_C2I, ERR_R_MALLOC_FAILURE);
  947|      0|                goto err;
  948|      0|            }
  949|      0|            *pval = (ASN1_VALUE *)stmp;
  950|  82.3k|        } else {
  951|  82.3k|            stmp = (ASN1_STRING *)*pval;
  952|  82.3k|            stmp->type = utype;
  953|  82.3k|        }
  954|       |        /* If we've already allocated a buffer use it */
  955|  82.3k|        if (*free_cont) {
  956|      0|            if (stmp->data)
  957|      0|                OPENSSL_free(stmp->data);
  958|      0|            stmp->data = (unsigned char *)cont; /* UGLY CAST! RL */
  959|      0|            stmp->length = len;
  960|      0|            *free_cont = 0;
  961|  82.3k|        } else {
  962|  82.3k|            if (!ASN1_STRING_set(stmp, cont, len)) {
  963|      0|                ASN1err(ASN1_F_ASN1_EX_C2I, ERR_R_MALLOC_FAILURE);
  964|      0|                ASN1_STRING_free(stmp);
  965|      0|                *pval = NULL;
  966|      0|                goto err;
  967|      0|            }
  968|  82.3k|        }
  969|  82.3k|        break;
  970|   224k|    }
  971|       |    /* If ASN1_ANY and NULL type fix up value */
  972|   224k|    if (typ && (utype == V_ASN1_NULL))
  973|  15.4k|        typ->value.ptr = NULL;
  974|       |
  975|   224k|    ret = 1;
  976|   224k| err:
  977|   224k|    if (!ret) {
  978|      0|        ASN1_TYPE_free(typ);
  979|      0|        if (opval)
  980|      0|            *opval = NULL;
  981|      0|    }
  982|   224k|    return ret;
  983|   224k|}
tasn_dec.c:asn1_template_ex_d2i:
  526|   363k|{
  527|   363k|    int flags, aclass;
  528|   363k|    int ret;
  529|   363k|    long len;
  530|   363k|    const unsigned char *p, *q;
  531|   363k|    char exp_eoc;
  532|   363k|    if (!val)
  533|      0|        return 0;
  534|   363k|    flags = tt->flags;
  535|   363k|    aclass = flags & ASN1_TFLG_TAG_CLASS;
  536|       |
  537|   363k|    p = *in;
  538|       |
  539|       |    /* Check if EXPLICIT tag expected */
  540|   363k|    if (flags & ASN1_TFLG_EXPTAG) {
  541|  12.5k|        char cst;
  542|       |        /*
  543|       |         * Need to work out amount of data available to the inner content and
  544|       |         * where it starts: so read in EXPLICIT header to get the info.
  545|       |         */
  546|  12.5k|        ret = asn1_check_tlen(&len, NULL, NULL, &exp_eoc, &cst,
  547|  12.5k|                              &p, inlen, tt->tag, aclass, opt, ctx);
  548|  12.5k|        q = p;
  549|  12.5k|        if (!ret) {
  550|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  551|      0|            return 0;
  552|  12.5k|        } else if (ret == -1)
  553|      0|            return -1;
  554|  12.5k|        if (!cst) {
  555|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I,
  556|      0|                    ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED);
  557|      0|            return 0;
  558|      0|        }
  559|       |        /* We've found the field so it can't be OPTIONAL now */
  560|  12.5k|        ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx);
  561|  12.5k|        if (!ret) {
  562|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  563|      0|            return 0;
  564|      0|        }
  565|       |        /* We read the field in OK so update length */
  566|  12.5k|        len -= p - q;
  567|  12.5k|        if (exp_eoc) {
  568|       |            /* If NDEF we must have an EOC here */
  569|      0|            if (!asn1_check_eoc(&p, len)) {
  570|      0|                ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ASN1_R_MISSING_EOC);
  571|      0|                goto err;
  572|      0|            }
  573|  12.5k|        } else {
  574|       |            /*
  575|       |             * Otherwise we must hit the EXPLICIT tag end or its an error
  576|       |             */
  577|  12.5k|            if (len) {
  578|      0|                ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I,
  579|      0|                        ASN1_R_EXPLICIT_LENGTH_MISMATCH);
  580|      0|                goto err;
  581|      0|            }
  582|  12.5k|        }
  583|  12.5k|    } else
  584|   351k|        return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx);
  585|       |
  586|  12.5k|    *in = p;
  587|  12.5k|    return 1;
  588|       |
  589|      0| err:
  590|      0|    ASN1_template_free(val, tt);
  591|      0|    return 0;
  592|   363k|}
tasn_dec.c:asn1_template_noexp_d2i:
  598|   363k|{
  599|   363k|    int flags, aclass;
  600|   363k|    int ret;
  601|   363k|    const unsigned char *p, *q;
  602|   363k|    if (!val)
  603|      0|        return 0;
  604|   363k|    flags = tt->flags;
  605|   363k|    aclass = flags & ASN1_TFLG_TAG_CLASS;
  606|       |
  607|   363k|    p = *in;
  608|   363k|    q = p;
  609|       |
  610|   363k|    if (flags & ASN1_TFLG_SK_MASK) {
  611|       |        /* SET OF, SEQUENCE OF */
  612|  66.1k|        int sktag, skaclass;
  613|  66.1k|        char sk_eoc;
  614|       |        /* First work out expected inner tag value */
  615|  66.1k|        if (flags & ASN1_TFLG_IMPTAG) {
  616|      0|            sktag = tt->tag;
  617|      0|            skaclass = aclass;
  618|  66.1k|        } else {
  619|  66.1k|            skaclass = V_ASN1_UNIVERSAL;
  620|  66.1k|            if (flags & ASN1_TFLG_SET_OF)
  621|  47.3k|                sktag = V_ASN1_SET;
  622|  18.8k|            else
  623|  18.8k|                sktag = V_ASN1_SEQUENCE;
  624|  66.1k|        }
  625|       |        /* Get the tag */
  626|  66.1k|        ret = asn1_check_tlen(&len, NULL, NULL, &sk_eoc, NULL,
  627|  66.1k|                              &p, len, sktag, skaclass, opt, ctx);
  628|  66.1k|        if (!ret) {
  629|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);
  630|      0|            return 0;
  631|  66.1k|        } else if (ret == -1)
  632|      0|            return -1;
  633|  66.1k|        if (!*val)
  634|  66.1k|            *val = (ASN1_VALUE *)sk_new_null();
  635|      0|        else {
  636|       |            /*
  637|       |             * We've got a valid STACK: free up any items present
  638|       |             */
  639|      0|            STACK_OF(ASN1_VALUE) *sktmp = (STACK_OF(ASN1_VALUE) *)*val;
  640|      0|            ASN1_VALUE *vtmp;
  641|      0|            while (sk_ASN1_VALUE_num(sktmp) > 0) {
  642|      0|                vtmp = sk_ASN1_VALUE_pop(sktmp);
  643|      0|                ASN1_item_ex_free(&vtmp, ASN1_ITEM_ptr(tt->item));
  644|      0|            }
  645|      0|        }
  646|       |
  647|  66.1k|        if (!*val) {
  648|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_MALLOC_FAILURE);
  649|      0|            goto err;
  650|      0|        }
  651|       |
  652|       |        /* Read as many items as we can */
  653|   183k|        while (len > 0) {
  654|   117k|            ASN1_VALUE *skfield;
  655|   117k|            q = p;
  656|       |            /* See if EOC found */
  657|   117k|            if (asn1_check_eoc(&p, len)) {
  658|      0|                if (!sk_eoc) {
  659|      0|                    ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I,
  660|      0|                            ASN1_R_UNEXPECTED_EOC);
  661|      0|                    goto err;
  662|      0|                }
  663|      0|                len -= p - q;
  664|      0|                sk_eoc = 0;
  665|      0|                break;
  666|      0|            }
  667|   117k|            skfield = NULL;
  668|   117k|            if (!ASN1_item_ex_d2i(&skfield, &p, len,
  669|   117k|                                  ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx)) {
  670|      0|                ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I,
  671|      0|                        ERR_R_NESTED_ASN1_ERROR);
  672|      0|                goto err;
  673|      0|            }
  674|   117k|            len -= p - q;
  675|   117k|            if (!sk_ASN1_VALUE_push((STACK_OF(ASN1_VALUE) *)*val, skfield)) {
  676|      0|                ASN1_item_ex_free(&skfield, ASN1_ITEM_ptr(tt->item));
  677|      0|                ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_MALLOC_FAILURE);
  678|      0|                goto err;
  679|      0|            }
  680|   117k|        }
  681|  66.1k|        if (sk_eoc) {
  682|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ASN1_R_MISSING_EOC);
  683|      0|            goto err;
  684|      0|        }
  685|   297k|    } else if (flags & ASN1_TFLG_IMPTAG) {
  686|       |        /* IMPLICIT tagging */
  687|  12.5k|        ret = ASN1_item_ex_d2i(val, &p, len,
  688|  12.5k|                               ASN1_ITEM_ptr(tt->item), tt->tag, aclass, opt,
  689|  12.5k|                               ctx);
  690|  12.5k|        if (!ret) {
  691|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);
  692|      0|            goto err;
  693|  12.5k|        } else if (ret == -1)
  694|  12.5k|            return -1;
  695|   285k|    } else {
  696|       |        /* Nothing special */
  697|   285k|        ret = ASN1_item_ex_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item),
  698|   285k|                               -1, tt->flags & ASN1_TFLG_COMBINE, opt, ctx);
  699|   285k|        if (!ret) {
  700|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);
  701|      0|            goto err;
  702|   285k|        } else if (ret == -1)
  703|  10.7k|            return -1;
  704|   285k|    }
  705|       |
  706|   340k|    *in = p;
  707|   340k|    return 1;
  708|       |
  709|      0| err:
  710|      0|    ASN1_template_free(val, tt);
  711|      0|    return 0;
  712|   363k|}
tasn_dec.c:asn1_d2i_ex_primitive:
  718|   247k|{
  719|   247k|    int ret = 0, utype;
  720|   247k|    long plen;
  721|   247k|    char cst, inf, free_cont = 0;
  722|   247k|    const unsigned char *p;
  723|   247k|    BUF_MEM buf = { 0, NULL, 0 };
  724|   247k|    const unsigned char *cont = NULL;
  725|   247k|    long len;
  726|   247k|    if (!pval) {
  727|      0|        ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ASN1_R_ILLEGAL_NULL);
  728|      0|        return 0;               /* Should never happen */
  729|      0|    }
  730|       |
  731|   247k|    if (it->itype == ASN1_ITYPE_MSTRING) {
  732|  59.8k|        utype = tag;
  733|  59.8k|        tag = -1;
  734|  59.8k|    } else
  735|   187k|        utype = it->utype;
  736|       |
  737|   247k|    if (utype == V_ASN1_ANY) {
  738|       |        /* If type is ANY need to figure out type from tag */
  739|  16.5k|        unsigned char oclass;
  740|  16.5k|        if (tag >= 0) {
  741|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ASN1_R_ILLEGAL_TAGGED_ANY);
  742|      0|            return 0;
  743|      0|        }
  744|  16.5k|        if (opt) {
  745|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE,
  746|      0|                    ASN1_R_ILLEGAL_OPTIONAL_ANY);
  747|      0|            return 0;
  748|      0|        }
  749|  16.5k|        p = *in;
  750|  16.5k|        ret = asn1_check_tlen(NULL, &utype, &oclass, NULL, NULL,
  751|  16.5k|                              &p, inlen, -1, 0, 0, ctx);
  752|  16.5k|        if (!ret) {
  753|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ERR_R_NESTED_ASN1_ERROR);
  754|      0|            return 0;
  755|      0|        }
  756|  16.5k|        if (oclass != V_ASN1_UNIVERSAL)
  757|      0|            utype = V_ASN1_OTHER;
  758|  16.5k|    }
  759|   247k|    if (tag == -1) {
  760|   235k|        tag = utype;
  761|   235k|        aclass = V_ASN1_UNIVERSAL;
  762|   235k|    }
  763|   247k|    p = *in;
  764|       |    /* Check header */
  765|   247k|    ret = asn1_check_tlen(&plen, NULL, NULL, &inf, &cst,
  766|   247k|                          &p, inlen, tag, aclass, opt, ctx);
  767|   247k|    if (!ret) {
  768|      0|        ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ERR_R_NESTED_ASN1_ERROR);
  769|      0|        return 0;
  770|   247k|    } else if (ret == -1)
  771|  23.2k|        return -1;
  772|   224k|    ret = 0;
  773|       |    /* SEQUENCE, SET and "OTHER" are left in encoded form */
  774|   224k|    if ((utype == V_ASN1_SEQUENCE)
  775|   224k|        || (utype == V_ASN1_SET) || (utype == V_ASN1_OTHER)) {
  776|       |        /*
  777|       |         * Clear context cache for type OTHER because the auto clear when we
  778|       |         * have a exact match wont work
  779|       |         */
  780|      0|        if (utype == V_ASN1_OTHER) {
  781|      0|            asn1_tlc_clear(ctx);
  782|      0|        }
  783|       |        /* SEQUENCE and SET must be constructed */
  784|      0|        else if (!cst) {
  785|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE,
  786|      0|                    ASN1_R_TYPE_NOT_CONSTRUCTED);
  787|      0|            return 0;
  788|      0|        }
  789|       |
  790|      0|        cont = *in;
  791|       |        /* If indefinite length constructed find the real end */
  792|      0|        if (inf) {
  793|      0|            if (!asn1_find_end(&p, plen, inf))
  794|      0|                goto err;
  795|      0|            len = p - cont;
  796|      0|        } else {
  797|      0|            len = p - cont + plen;
  798|      0|            p += plen;
  799|      0|        }
  800|   224k|    } else if (cst) {
  801|      0|        if (utype == V_ASN1_NULL || utype == V_ASN1_BOOLEAN
  802|      0|            || utype == V_ASN1_OBJECT || utype == V_ASN1_INTEGER
  803|      0|            || utype == V_ASN1_ENUMERATED) {
  804|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ASN1_R_TYPE_NOT_PRIMITIVE);
  805|      0|            return 0;
  806|      0|        }
  807|       |
  808|       |        /* Free any returned 'buf' content */
  809|      0|        free_cont = 1;
  810|       |        /*
  811|       |         * Should really check the internal tags are correct but some things
  812|       |         * may get this wrong. The relevant specs say that constructed string
  813|       |         * types should be OCTET STRINGs internally irrespective of the type.
  814|       |         * So instead just check for UNIVERSAL class and ignore the tag.
  815|       |         */
  816|      0|        if (!asn1_collect(&buf, &p, plen, inf, -1, V_ASN1_UNIVERSAL, 0)) {
  817|      0|            goto err;
  818|      0|        }
  819|      0|        len = buf.length;
  820|       |        /* Append a final null to string */
  821|      0|        if (!BUF_MEM_grow_clean(&buf, len + 1)) {
  822|      0|            ASN1err(ASN1_F_ASN1_D2I_EX_PRIMITIVE, ERR_R_MALLOC_FAILURE);
  823|      0|            goto err;
  824|      0|        }
  825|      0|        buf.data[len] = 0;
  826|      0|        cont = (const unsigned char *)buf.data;
  827|   224k|    } else {
  828|   224k|        cont = p;
  829|   224k|        len = plen;
  830|   224k|        p += plen;
  831|   224k|    }
  832|       |
  833|       |    /* We now have content length and type: translate into a structure */
  834|       |    /* asn1_ex_c2i may reuse allocated buffer, and so sets free_cont to 0 */
  835|   224k|    if (!asn1_ex_c2i(pval, cont, len, utype, &free_cont, it))
  836|      0|        goto err;
  837|       |
  838|   224k|    *in = p;
  839|   224k|    ret = 1;
  840|   224k| err:
  841|   224k|    if (free_cont && buf.data)
  842|      0|        OPENSSL_free(buf.data);
  843|   224k|    return ret;
  844|   224k|}
tasn_dec.c:asn1_check_eoc:
 1129|   421k|{
 1130|   421k|    const unsigned char *p;
 1131|   421k|    if (len < 2)
 1132|      0|        return 0;
 1133|   421k|    p = *in;
 1134|   421k|    if (!p[0] && !p[1]) {
 1135|      0|        *in += 2;
 1136|      0|        return 1;
 1137|      0|    }
 1138|   421k|    return 0;
 1139|   421k|}
tasn_dec.c:asn1_check_tlen:
 1152|   516k|{
 1153|   516k|    int i;
 1154|   516k|    int ptag, pclass;
 1155|   516k|    long plen;
 1156|   516k|    const unsigned char *p, *q;
 1157|   516k|    p = *in;
 1158|   516k|    q = p;
 1159|       |
 1160|   516k|    if (ctx && ctx->valid) {
 1161|  99.7k|        i = ctx->ret;
 1162|  99.7k|        plen = ctx->plen;
 1163|  99.7k|        pclass = ctx->pclass;
 1164|  99.7k|        ptag = ctx->ptag;
 1165|  99.7k|        p += ctx->hdrlen;
 1166|   416k|    } else {
 1167|   416k|        i = ASN1_get_object(&p, &plen, &ptag, &pclass, len);
 1168|   416k|        if (ctx) {
 1169|   416k|            ctx->ret = i;
 1170|   416k|            ctx->plen = plen;
 1171|   416k|            ctx->pclass = pclass;
 1172|   416k|            ctx->ptag = ptag;
 1173|   416k|            ctx->hdrlen = p - q;
 1174|   416k|            ctx->valid = 1;
 1175|       |            /*
 1176|       |             * If definite length, and no error, length + header can't exceed
 1177|       |             * total amount of data available.
 1178|       |             */
 1179|   416k|            if (!(i & 0x81) && ((plen + ctx->hdrlen) > len)) {
 1180|      0|                ASN1err(ASN1_F_ASN1_CHECK_TLEN, ASN1_R_TOO_LONG);
 1181|      0|                asn1_tlc_clear(ctx);
 1182|      0|                return 0;
 1183|      0|            }
 1184|   416k|        }
 1185|   416k|    }
 1186|       |
 1187|   516k|    if (i & 0x80) {
 1188|      0|        ASN1err(ASN1_F_ASN1_CHECK_TLEN, ASN1_R_BAD_OBJECT_HEADER);
 1189|      0|        asn1_tlc_clear(ctx);
 1190|      0|        return 0;
 1191|      0|    }
 1192|   516k|    if (exptag >= 0) {
 1193|   439k|        if ((exptag != ptag) || (expclass != pclass)) {
 1194|       |            /*
 1195|       |             * If type is OPTIONAL, not an error: indicate missing type.
 1196|       |             */
 1197|  23.2k|            if (opt)
 1198|  23.2k|                return -1;
 1199|      0|            asn1_tlc_clear(ctx);
 1200|      0|            ASN1err(ASN1_F_ASN1_CHECK_TLEN, ASN1_R_WRONG_TAG);
 1201|      0|            return 0;
 1202|  23.2k|        }
 1203|       |        /*
 1204|       |         * We have a tag and class match: assume we are going to do something
 1205|       |         * with it
 1206|       |         */
 1207|   416k|        asn1_tlc_clear(ctx);
 1208|   416k|    }
 1209|       |
 1210|   493k|    if (i & 1)
 1211|      0|        plen = len - (p - q);
 1212|       |
 1213|   493k|    if (inf)
 1214|   416k|        *inf = i & 1;
 1215|       |
 1216|   493k|    if (cst)
 1217|   350k|        *cst = i & V_ASN1_CONSTRUCTED;
 1218|       |
 1219|   493k|    if (olen)
 1220|   416k|        *olen = plen;
 1221|       |
 1222|   493k|    if (oclass)
 1223|  76.4k|        *oclass = pclass;
 1224|       |
 1225|   493k|    if (otag)
 1226|  76.4k|        *otag = ptag;
 1227|       |
 1228|   493k|    *in = p;
 1229|   493k|    return 1;
 1230|   516k|}

ASN1_item_ex_i2d:
  129|   615k|{
  130|   615k|    const ASN1_TEMPLATE *tt = NULL;
  131|   615k|    unsigned char *p = NULL;
  132|   615k|    int i, seqcontlen, seqlen, ndef = 1;
  133|   615k|    const ASN1_COMPAT_FUNCS *cf;
  134|   615k|    const ASN1_EXTERN_FUNCS *ef;
  135|   615k|    const ASN1_AUX *aux = it->funcs;
  136|   615k|    ASN1_aux_cb *asn1_cb = 0;
  137|       |
  138|   615k|    if ((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval)
  139|      0|        return 0;
  140|       |
  141|   615k|    if (aux && aux->asn1_cb)
  142|      0|        asn1_cb = aux->asn1_cb;
  143|       |
  144|   615k|    switch (it->itype) {
  145|       |
  146|   284k|    case ASN1_ITYPE_PRIMITIVE:
  147|   284k|        if (it->templates)
  148|  94.6k|            return asn1_template_ex_i2d(pval, out, it->templates,
  149|  94.6k|                                        tag, aclass);
  150|   189k|        return asn1_i2d_ex_primitive(pval, out, it, tag, aclass);
  151|      0|        break;
  152|       |
  153|   189k|    case ASN1_ITYPE_MSTRING:
  154|   189k|        return asn1_i2d_ex_primitive(pval, out, it, -1, aclass);
  155|       |
  156|      0|    case ASN1_ITYPE_CHOICE:
  157|      0|        if (asn1_cb && !asn1_cb(ASN1_OP_I2D_PRE, pval, it, NULL))
  158|      0|            return 0;
  159|      0|        i = asn1_get_choice_selector(pval, it);
  160|      0|        if ((i >= 0) && (i < it->tcount)) {
  161|      0|            ASN1_VALUE **pchval;
  162|      0|            const ASN1_TEMPLATE *chtt;
  163|      0|            chtt = it->templates + i;
  164|      0|            pchval = asn1_get_field_ptr(pval, chtt);
  165|      0|            return asn1_template_ex_i2d(pchval, out, chtt, -1, aclass);
  166|      0|        }
  167|       |        /* Fixme: error condition if selector out of range */
  168|      0|        if (asn1_cb && !asn1_cb(ASN1_OP_I2D_POST, pval, it, NULL))
  169|      0|            return 0;
  170|      0|        break;
  171|       |
  172|      0|    case ASN1_ITYPE_EXTERN:
  173|       |        /* If new style i2d it does all the work */
  174|      0|        ef = it->funcs;
  175|      0|        return ef->asn1_ex_i2d(pval, out, it, tag, aclass);
  176|       |
  177|      0|    case ASN1_ITYPE_COMPAT:
  178|       |        /* old style hackery... */
  179|      0|        cf = it->funcs;
  180|      0|        if (out)
  181|      0|            p = *out;
  182|      0|        i = cf->asn1_i2d(*pval, out);
  183|       |        /*
  184|       |         * Fixup for IMPLICIT tag: note this messes up for tags > 30, but so
  185|       |         * did the old code. Tags > 30 are very rare anyway.
  186|       |         */
  187|      0|        if (out && (tag != -1))
  188|      0|            *p = aclass | tag | (*p & V_ASN1_CONSTRUCTED);
  189|      0|        return i;
  190|       |
  191|      0|    case ASN1_ITYPE_NDEF_SEQUENCE:
  192|       |        /* Use indefinite length constructed if requested */
  193|      0|        if (aclass & ASN1_TFLG_NDEF)
  194|      0|            ndef = 2;
  195|       |        /* fall through */
  196|       |
  197|   142k|    case ASN1_ITYPE_SEQUENCE:
  198|   142k|        i = asn1_enc_restore(&seqcontlen, out, pval, it);
  199|       |        /* An error occurred */
  200|   142k|        if (i < 0)
  201|      0|            return 0;
  202|       |        /* We have a valid cached encoding... */
  203|   142k|        if (i > 0)
  204|      0|            return seqcontlen;
  205|       |        /* Otherwise carry on */
  206|   142k|        seqcontlen = 0;
  207|       |        /* If no IMPLICIT tagging set to SEQUENCE, UNIVERSAL */
  208|   142k|        if (tag == -1) {
  209|   142k|            tag = V_ASN1_SEQUENCE;
  210|       |            /* Retain any other flags in aclass */
  211|   142k|            aclass = (aclass & ~ASN1_TFLG_TAG_CLASS)
  212|   142k|                | V_ASN1_UNIVERSAL;
  213|   142k|        }
  214|   142k|        if (asn1_cb && !asn1_cb(ASN1_OP_I2D_PRE, pval, it, NULL))
  215|      0|            return 0;
  216|       |        /* First work out sequence content length */
  217|   426k|        for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
  218|   284k|            const ASN1_TEMPLATE *seqtt;
  219|   284k|            ASN1_VALUE **pseqval;
  220|   284k|            int tmplen;
  221|   284k|            seqtt = asn1_do_adb(pval, tt, 1);
  222|   284k|            if (!seqtt)
  223|      0|                return 0;
  224|   284k|            pseqval = asn1_get_field_ptr(pval, seqtt);
  225|   284k|            tmplen = asn1_template_ex_i2d(pseqval, NULL, seqtt, -1, aclass);
  226|   284k|            if (tmplen == -1 || (tmplen > INT_MAX - seqcontlen))
  227|      0|                return -1;
  228|   284k|            seqcontlen += tmplen;
  229|   284k|        }
  230|       |
  231|   142k|        seqlen = ASN1_object_size(ndef, seqcontlen, tag);
  232|   142k|        if (!out || seqlen == -1)
  233|  94.6k|            return seqlen;
  234|       |        /* Output SEQUENCE header */
  235|  47.3k|        ASN1_put_object(out, ndef, seqcontlen, tag, aclass);
  236|   142k|        for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
  237|  94.6k|            const ASN1_TEMPLATE *seqtt;
  238|  94.6k|            ASN1_VALUE **pseqval;
  239|  94.6k|            seqtt = asn1_do_adb(pval, tt, 1);
  240|  94.6k|            if (!seqtt)
  241|      0|                return 0;
  242|  94.6k|            pseqval = asn1_get_field_ptr(pval, seqtt);
  243|       |            /* FIXME: check for errors in enhanced version */
  244|  94.6k|            asn1_template_ex_i2d(pseqval, out, seqtt, -1, aclass);
  245|  94.6k|        }
  246|  47.3k|        if (ndef == 2)
  247|      0|            ASN1_put_eoc(out);
  248|  47.3k|        if (asn1_cb && !asn1_cb(ASN1_OP_I2D_POST, pval, it, NULL))
  249|      0|            return 0;
  250|  47.3k|        return seqlen;
  251|       |
  252|      0|    default:
  253|      0|        return 0;
  254|       |
  255|   615k|    }
  256|      0|    return 0;
  257|   615k|}
asn1_ex_i2c:
  551|   473k|{
  552|   473k|    ASN1_BOOLEAN *tbool = NULL;
  553|   473k|    ASN1_STRING *strtmp;
  554|   473k|    ASN1_OBJECT *otmp;
  555|   473k|    int utype;
  556|   473k|    const unsigned char *cont;
  557|   473k|    unsigned char c;
  558|   473k|    int len;
  559|   473k|    const ASN1_PRIMITIVE_FUNCS *pf;
  560|   473k|    pf = it->funcs;
  561|   473k|    if (pf && pf->prim_i2c)
  562|      0|        return pf->prim_i2c(pval, cout, putype, it);
  563|       |
  564|       |    /* Should type be omitted? */
  565|   473k|    if ((it->itype != ASN1_ITYPE_PRIMITIVE)
  566|   473k|        || (it->utype != V_ASN1_BOOLEAN)) {
  567|   473k|        if (!*pval)
  568|      0|            return -1;
  569|   473k|    }
  570|       |
  571|   473k|    if (it->itype == ASN1_ITYPE_MSTRING) {
  572|       |        /* If MSTRING type set the underlying type */
  573|   236k|        strtmp = (ASN1_STRING *)*pval;
  574|   236k|        utype = strtmp->type;
  575|   236k|        *putype = utype;
  576|   236k|    } else if (it->utype == V_ASN1_ANY) {
  577|       |        /* If ANY set type and pointer to value */
  578|      0|        ASN1_TYPE *typ;
  579|      0|        typ = (ASN1_TYPE *)*pval;
  580|      0|        utype = typ->type;
  581|      0|        *putype = utype;
  582|      0|        pval = &typ->value.asn1_value;
  583|      0|    } else
  584|   236k|        utype = *putype;
  585|       |
  586|   473k|    switch (utype) {
  587|   236k|    case V_ASN1_OBJECT:
  588|   236k|        otmp = (ASN1_OBJECT *)*pval;
  589|   236k|        cont = otmp->data;
  590|   236k|        len = otmp->length;
  591|   236k|        break;
  592|       |
  593|      0|    case V_ASN1_NULL:
  594|      0|        cont = NULL;
  595|      0|        len = 0;
  596|      0|        break;
  597|       |
  598|      0|    case V_ASN1_BOOLEAN:
  599|      0|        tbool = (ASN1_BOOLEAN *)pval;
  600|      0|        if (*tbool == -1)
  601|      0|            return -1;
  602|      0|        if (it->utype != V_ASN1_ANY) {
  603|       |            /*
  604|       |             * Default handling if value == size field then omit
  605|       |             */
  606|      0|            if (*tbool && (it->size > 0))
  607|      0|                return -1;
  608|      0|            if (!*tbool && !it->size)
  609|      0|                return -1;
  610|      0|        }
  611|      0|        c = (unsigned char)*tbool;
  612|      0|        cont = &c;
  613|      0|        len = 1;
  614|      0|        break;
  615|       |
  616|      0|    case V_ASN1_BIT_STRING:
  617|      0|        return i2c_ASN1_BIT_STRING((ASN1_BIT_STRING *)*pval,
  618|      0|                                   cout ? &cout : NULL);
  619|      0|        break;
  620|       |
  621|      0|    case V_ASN1_INTEGER:
  622|      0|    case V_ASN1_ENUMERATED:
  623|       |        /*
  624|       |         * These are all have the same content format as ASN1_INTEGER
  625|       |         */
  626|      0|        return i2c_ASN1_INTEGER((ASN1_INTEGER *)*pval, cout ? &cout : NULL);
  627|      0|        break;
  628|       |
  629|      0|    case V_ASN1_OCTET_STRING:
  630|      0|    case V_ASN1_NUMERICSTRING:
  631|      0|    case V_ASN1_PRINTABLESTRING:
  632|      0|    case V_ASN1_T61STRING:
  633|      0|    case V_ASN1_VIDEOTEXSTRING:
  634|      0|    case V_ASN1_IA5STRING:
  635|      0|    case V_ASN1_UTCTIME:
  636|      0|    case V_ASN1_GENERALIZEDTIME:
  637|      0|    case V_ASN1_GRAPHICSTRING:
  638|      0|    case V_ASN1_VISIBLESTRING:
  639|      0|    case V_ASN1_GENERALSTRING:
  640|      0|    case V_ASN1_UNIVERSALSTRING:
  641|      0|    case V_ASN1_BMPSTRING:
  642|   236k|    case V_ASN1_UTF8STRING:
  643|   236k|    case V_ASN1_SEQUENCE:
  644|   236k|    case V_ASN1_SET:
  645|   236k|    default:
  646|       |        /* All based on ASN1_STRING and handled the same */
  647|   236k|        strtmp = (ASN1_STRING *)*pval;
  648|       |        /* Special handling for NDEF */
  649|   236k|        if ((it->size == ASN1_TFLG_NDEF)
  650|   236k|            && (strtmp->flags & ASN1_STRING_FLAG_NDEF)) {
  651|      0|            if (cout) {
  652|      0|                strtmp->data = cout;
  653|      0|                strtmp->length = 0;
  654|      0|            }
  655|       |            /* Special return code */
  656|      0|            return -2;
  657|      0|        }
  658|   236k|        cont = strtmp->data;
  659|   236k|        len = strtmp->length;
  660|       |
  661|   236k|        break;
  662|       |
  663|   473k|    }
  664|   473k|    if (cout && len)
  665|  94.6k|        memcpy(cout, cont, len);
  666|   473k|    return len;
  667|   473k|}
tasn_enc.c:asn1_template_ex_i2d:
  267|   473k|{
  268|   473k|    int i, ret, flags, ttag, tclass, ndef;
  269|   473k|    flags = tt->flags;
  270|       |    /*
  271|       |     * Work out tag and class to use: tagging may come either from the
  272|       |     * template or the arguments, not both because this would create
  273|       |     * ambiguity. Additionally the iclass argument may contain some
  274|       |     * additional flags which should be noted and passed down to other
  275|       |     * levels.
  276|       |     */
  277|   473k|    if (flags & ASN1_TFLG_TAG_MASK) {
  278|       |        /* Error if argument and template tagging */
  279|      0|        if (tag != -1)
  280|       |            /* FIXME: error code here */
  281|      0|            return -1;
  282|       |        /* Get tagging from template */
  283|      0|        ttag = tt->tag;
  284|      0|        tclass = flags & ASN1_TFLG_TAG_CLASS;
  285|   473k|    } else if (tag != -1) {
  286|       |        /* No template tagging, get from arguments */
  287|      0|        ttag = tag;
  288|      0|        tclass = iclass & ASN1_TFLG_TAG_CLASS;
  289|   473k|    } else {
  290|   473k|        ttag = -1;
  291|   473k|        tclass = 0;
  292|   473k|    }
  293|       |    /*
  294|       |     * Remove any class mask from iflag.
  295|       |     */
  296|   473k|    iclass &= ~ASN1_TFLG_TAG_CLASS;
  297|       |
  298|       |    /*
  299|       |     * At this point 'ttag' contains the outer tag to use, 'tclass' is the
  300|       |     * class and iclass is any flags passed to this function.
  301|       |     */
  302|       |
  303|       |    /* if template and arguments require ndef, use it */
  304|   473k|    if ((flags & ASN1_TFLG_NDEF) && (iclass & ASN1_TFLG_NDEF))
  305|      0|        ndef = 2;
  306|   473k|    else
  307|   473k|        ndef = 1;
  308|       |
  309|   473k|    if (flags & ASN1_TFLG_SK_MASK) {
  310|       |        /* SET OF, SEQUENCE OF */
  311|  94.6k|        STACK_OF(ASN1_VALUE) *sk = (STACK_OF(ASN1_VALUE) *)*pval;
  312|  94.6k|        int isset, sktag, skaclass;
  313|  94.6k|        int skcontlen, sklen;
  314|  94.6k|        ASN1_VALUE *skitem;
  315|       |
  316|  94.6k|        if (!*pval)
  317|      0|            return 0;
  318|       |
  319|  94.6k|        if (flags & ASN1_TFLG_SET_OF) {
  320|  94.6k|            isset = 1;
  321|       |            /* 2 means we reorder */
  322|  94.6k|            if (flags & ASN1_TFLG_SEQUENCE_OF)
  323|      0|                isset = 2;
  324|  94.6k|        } else
  325|      0|            isset = 0;
  326|       |
  327|       |        /*
  328|       |         * Work out inner tag value: if EXPLICIT or no tagging use underlying
  329|       |         * type.
  330|       |         */
  331|  94.6k|        if ((ttag != -1) && !(flags & ASN1_TFLG_EXPTAG)) {
  332|      0|            sktag = ttag;
  333|      0|            skaclass = tclass;
  334|  94.6k|        } else {
  335|  94.6k|            skaclass = V_ASN1_UNIVERSAL;
  336|  94.6k|            if (isset)
  337|  94.6k|                sktag = V_ASN1_SET;
  338|      0|            else
  339|      0|                sktag = V_ASN1_SEQUENCE;
  340|  94.6k|        }
  341|       |
  342|       |        /* Determine total length of items */
  343|  94.6k|        skcontlen = 0;
  344|   189k|        for (i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
  345|  94.6k|            int tmplen;
  346|  94.6k|            skitem = sk_ASN1_VALUE_value(sk, i);
  347|  94.6k|            tmplen = ASN1_item_ex_i2d(&skitem, NULL, ASN1_ITEM_ptr(tt->item),
  348|  94.6k|                                      -1, iclass);
  349|  94.6k|            if (tmplen == -1 || (skcontlen > INT_MAX - tmplen))
  350|      0|                return -1;
  351|  94.6k|            skcontlen += tmplen;
  352|  94.6k|        }
  353|  94.6k|        sklen = ASN1_object_size(ndef, skcontlen, sktag);
  354|  94.6k|        if (sklen == -1)
  355|      0|            return -1;
  356|       |        /* If EXPLICIT need length of surrounding tag */
  357|  94.6k|        if (flags & ASN1_TFLG_EXPTAG)
  358|      0|            ret = ASN1_object_size(ndef, sklen, ttag);
  359|  94.6k|        else
  360|  94.6k|            ret = sklen;
  361|       |
  362|  94.6k|        if (!out || ret == -1)
  363|  47.3k|            return ret;
  364|       |
  365|       |        /* Now encode this lot... */
  366|       |        /* EXPLICIT tag */
  367|  47.3k|        if (flags & ASN1_TFLG_EXPTAG)
  368|      0|            ASN1_put_object(out, ndef, sklen, ttag, tclass);
  369|       |        /* SET or SEQUENCE and IMPLICIT tag */
  370|  47.3k|        ASN1_put_object(out, ndef, skcontlen, sktag, skaclass);
  371|       |        /* And the stuff itself */
  372|  47.3k|        asn1_set_seq_out(sk, out, skcontlen, ASN1_ITEM_ptr(tt->item),
  373|  47.3k|                         isset, iclass);
  374|  47.3k|        if (ndef == 2) {
  375|      0|            ASN1_put_eoc(out);
  376|      0|            if (flags & ASN1_TFLG_EXPTAG)
  377|      0|                ASN1_put_eoc(out);
  378|      0|        }
  379|       |
  380|  47.3k|        return ret;
  381|  94.6k|    }
  382|       |
  383|   378k|    if (flags & ASN1_TFLG_EXPTAG) {
  384|       |        /* EXPLICIT tagging */
  385|       |        /* Find length of tagged item */
  386|      0|        i = ASN1_item_ex_i2d(pval, NULL, ASN1_ITEM_ptr(tt->item), -1, iclass);
  387|      0|        if (!i)
  388|      0|            return 0;
  389|       |        /* Find length of EXPLICIT tag */
  390|      0|        ret = ASN1_object_size(ndef, i, ttag);
  391|      0|        if (out && ret != -1) {
  392|       |            /* Output tag and item */
  393|      0|            ASN1_put_object(out, ndef, i, ttag, tclass);
  394|      0|            ASN1_item_ex_i2d(pval, out, ASN1_ITEM_ptr(tt->item), -1, iclass);
  395|      0|            if (ndef == 2)
  396|      0|                ASN1_put_eoc(out);
  397|      0|        }
  398|      0|        return ret;
  399|      0|    }
  400|       |
  401|       |    /* Either normal or IMPLICIT tagging: combine class and flags */
  402|   378k|    return ASN1_item_ex_i2d(pval, out, ASN1_ITEM_ptr(tt->item),
  403|   378k|                            ttag, tclass | iclass);
  404|       |
  405|   378k|}
tasn_enc.c:asn1_set_seq_out:
  431|  47.3k|{
  432|  47.3k|    int i;
  433|  47.3k|    ASN1_VALUE *skitem;
  434|  47.3k|    unsigned char *tmpdat = NULL, *p = NULL;
  435|  47.3k|    DER_ENC *derlst = NULL, *tder;
  436|  47.3k|    if (do_sort) {
  437|       |        /* Don't need to sort less than 2 items */
  438|  47.3k|        if (sk_ASN1_VALUE_num(sk) < 2)
  439|  47.3k|            do_sort = 0;
  440|      0|        else {
  441|      0|            derlst = OPENSSL_malloc(sk_ASN1_VALUE_num(sk)
  442|      0|                                    * sizeof(*derlst));
  443|      0|            if (!derlst)
  444|      0|                return 0;
  445|      0|            tmpdat = OPENSSL_malloc(skcontlen);
  446|      0|            if (!tmpdat) {
  447|      0|                OPENSSL_free(derlst);
  448|      0|                return 0;
  449|      0|            }
  450|      0|        }
  451|  47.3k|    }
  452|       |    /* If not sorting just output each item */
  453|  47.3k|    if (!do_sort) {
  454|  94.6k|        for (i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
  455|  47.3k|            skitem = sk_ASN1_VALUE_value(sk, i);
  456|  47.3k|            ASN1_item_ex_i2d(&skitem, out, item, -1, iclass);
  457|  47.3k|        }
  458|  47.3k|        return 1;
  459|  47.3k|    }
  460|      0|    p = tmpdat;
  461|       |
  462|       |    /* Doing sort: build up a list of each member's DER encoding */
  463|      0|    for (i = 0, tder = derlst; i < sk_ASN1_VALUE_num(sk); i++, tder++) {
  464|      0|        skitem = sk_ASN1_VALUE_value(sk, i);
  465|      0|        tder->data = p;
  466|      0|        tder->length = ASN1_item_ex_i2d(&skitem, &p, item, -1, iclass);
  467|      0|        tder->field = skitem;
  468|      0|    }
  469|       |
  470|       |    /* Now sort them */
  471|      0|    qsort(derlst, sk_ASN1_VALUE_num(sk), sizeof(*derlst), der_cmp);
  472|       |    /* Output sorted DER encoding */
  473|      0|    p = *out;
  474|      0|    for (i = 0, tder = derlst; i < sk_ASN1_VALUE_num(sk); i++, tder++) {
  475|      0|        memcpy(p, tder->data, tder->length);
  476|      0|        p += tder->length;
  477|      0|    }
  478|      0|    *out = p;
  479|       |    /* If do_sort is 2 then reorder the STACK */
  480|      0|    if (do_sort == 2) {
  481|      0|        for (i = 0, tder = derlst; i < sk_ASN1_VALUE_num(sk); i++, tder++)
  482|      0|            (void)sk_ASN1_VALUE_set(sk, i, tder->field);
  483|      0|    }
  484|      0|    OPENSSL_free(derlst);
  485|      0|    OPENSSL_free(tmpdat);
  486|      0|    return 1;
  487|  47.3k|}
tasn_enc.c:asn1_i2d_ex_primitive:
  491|   378k|{
  492|   378k|    int len;
  493|   378k|    int utype;
  494|   378k|    int usetag;
  495|   378k|    int ndef = 0;
  496|       |
  497|   378k|    utype = it->utype;
  498|       |
  499|       |    /*
  500|       |     * Get length of content octets and maybe find out the underlying type.
  501|       |     */
  502|       |
  503|   378k|    len = asn1_ex_i2c(pval, NULL, &utype, it);
  504|       |
  505|       |    /*
  506|       |     * If SEQUENCE, SET or OTHER then header is included in pseudo content
  507|       |     * octets so don't include tag+length. We need to check here because the
  508|       |     * call to asn1_ex_i2c() could change utype.
  509|       |     */
  510|   378k|    if ((utype == V_ASN1_SEQUENCE) || (utype == V_ASN1_SET) ||
  511|   378k|        (utype == V_ASN1_OTHER))
  512|      0|        usetag = 0;
  513|   378k|    else
  514|   378k|        usetag = 1;
  515|       |
  516|       |    /* -1 means omit type */
  517|       |
  518|   378k|    if (len == -1)
  519|      0|        return 0;
  520|       |
  521|       |    /* -2 return is special meaning use ndef */
  522|   378k|    if (len == -2) {
  523|      0|        ndef = 2;
  524|      0|        len = 0;
  525|      0|    }
  526|       |
  527|       |    /* If not implicitly tagged get tag from underlying type */
  528|   378k|    if (tag == -1)
  529|   378k|        tag = utype;
  530|       |
  531|       |    /* Output tag+length followed by content octets */
  532|   378k|    if (out) {
  533|  94.6k|        if (usetag)
  534|  94.6k|            ASN1_put_object(out, ndef, len, tag, aclass);
  535|  94.6k|        asn1_ex_i2c(pval, *out, &utype, it);
  536|  94.6k|        if (ndef)
  537|      0|            ASN1_put_eoc(out);
  538|  94.6k|        else
  539|  94.6k|            *out += len;
  540|  94.6k|    }
  541|       |
  542|   378k|    if (usetag)
  543|   378k|        return ASN1_object_size(ndef, len, tag);
  544|      0|    return len;
  545|   378k|}

ASN1_item_free:
   69|   144k|{
   70|   144k|    asn1_item_combine_free(&val, it, 0);
   71|   144k|}
asn1_item_combine_free:
   79|   587k|{
   80|   587k|    const ASN1_TEMPLATE *tt = NULL, *seqtt;
   81|   587k|    const ASN1_EXTERN_FUNCS *ef;
   82|   587k|    const ASN1_COMPAT_FUNCS *cf;
   83|   587k|    const ASN1_AUX *aux = it->funcs;
   84|   587k|    ASN1_aux_cb *asn1_cb;
   85|   587k|    int i;
   86|   587k|    if (!pval)
   87|      0|        return;
   88|   587k|    if ((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval)
   89|  18.8k|        return;
   90|   568k|    if (aux && aux->asn1_cb)
   91|  18.8k|        asn1_cb = aux->asn1_cb;
   92|   549k|    else
   93|   549k|        asn1_cb = 0;
   94|       |
   95|   568k|    switch (it->itype) {
   96|       |
   97|   281k|    case ASN1_ITYPE_PRIMITIVE:
   98|   281k|        if (it->templates)
   99|  12.5k|            ASN1_template_free(pval, it->templates);
  100|   269k|        else
  101|   269k|            ASN1_primitive_free(pval, it);
  102|   281k|        break;
  103|       |
  104|   107k|    case ASN1_ITYPE_MSTRING:
  105|   107k|        ASN1_primitive_free(pval, it);
  106|   107k|        break;
  107|       |
  108|      0|    case ASN1_ITYPE_CHOICE:
  109|      0|        if (asn1_cb) {
  110|      0|            i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
  111|      0|            if (i == 2)
  112|      0|                return;
  113|      0|        }
  114|      0|        i = asn1_get_choice_selector(pval, it);
  115|      0|        if ((i >= 0) && (i < it->tcount)) {
  116|      0|            ASN1_VALUE **pchval;
  117|      0|            tt = it->templates + i;
  118|      0|            pchval = asn1_get_field_ptr(pval, tt);
  119|      0|            ASN1_template_free(pchval, tt);
  120|      0|        }
  121|      0|        if (asn1_cb)
  122|      0|            asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
  123|      0|        if (!combine) {
  124|      0|            OPENSSL_free(*pval);
  125|      0|            *pval = NULL;
  126|      0|        }
  127|      0|        break;
  128|       |
  129|      0|    case ASN1_ITYPE_COMPAT:
  130|      0|        cf = it->funcs;
  131|      0|        if (cf && cf->asn1_free)
  132|      0|            cf->asn1_free(*pval);
  133|      0|        break;
  134|       |
  135|  12.5k|    case ASN1_ITYPE_EXTERN:
  136|  12.5k|        ef = it->funcs;
  137|  12.5k|        if (ef && ef->asn1_ex_free)
  138|  12.5k|            ef->asn1_ex_free(pval, it);
  139|  12.5k|        break;
  140|       |
  141|      0|    case ASN1_ITYPE_NDEF_SEQUENCE:
  142|   167k|    case ASN1_ITYPE_SEQUENCE:
  143|   167k|        if (asn1_do_lock(pval, -1, it) > 0)
  144|  6.27k|            return;
  145|   161k|        if (asn1_cb) {
  146|  12.5k|            i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
  147|  12.5k|            if (i == 2)
  148|      0|                return;
  149|  12.5k|        }
  150|   161k|        asn1_enc_free(pval, it);
  151|       |        /*
  152|       |         * If we free up as normal we will invalidate any ANY DEFINED BY
  153|       |         * field and we wont be able to determine the type of the field it
  154|       |         * defines. So free up in reverse order.
  155|       |         */
  156|   161k|        tt = it->templates + it->tcount - 1;
  157|   561k|        for (i = 0; i < it->tcount; tt--, i++) {
  158|   400k|            ASN1_VALUE **pseqval;
  159|   400k|            seqtt = asn1_do_adb(pval, tt, 0);
  160|   400k|            if (!seqtt)
  161|      0|                continue;
  162|   400k|            pseqval = asn1_get_field_ptr(pval, seqtt);
  163|   400k|            ASN1_template_free(pseqval, seqtt);
  164|   400k|        }
  165|   161k|        if (asn1_cb)
  166|  12.5k|            asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
  167|   161k|        if (!combine) {
  168|   161k|            OPENSSL_free(*pval);
  169|   161k|            *pval = NULL;
  170|   161k|        }
  171|   161k|        break;
  172|   568k|    }
  173|   568k|}
ASN1_template_free:
  176|   438k|{
  177|   438k|    int i;
  178|   438k|    if (tt->flags & ASN1_TFLG_SK_MASK) {
  179|  18.8k|        STACK_OF(ASN1_VALUE) *sk = (STACK_OF(ASN1_VALUE) *)*pval;
  180|  41.2k|        for (i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
  181|  22.4k|            ASN1_VALUE *vtmp;
  182|  22.4k|            vtmp = sk_ASN1_VALUE_value(sk, i);
  183|  22.4k|            asn1_item_combine_free(&vtmp, ASN1_ITEM_ptr(tt->item), 0);
  184|  22.4k|        }
  185|  18.8k|        sk_ASN1_VALUE_free(sk);
  186|  18.8k|        *pval = NULL;
  187|  18.8k|    } else
  188|   420k|        asn1_item_combine_free(pval, ASN1_ITEM_ptr(tt->item),
  189|   420k|                               tt->flags & ASN1_TFLG_COMBINE);
  190|   438k|}
ASN1_primitive_free:
  193|   392k|{
  194|   392k|    int utype;
  195|   392k|    if (it) {
  196|   376k|        const ASN1_PRIMITIVE_FUNCS *pf;
  197|   376k|        pf = it->funcs;
  198|   376k|        if (pf && pf->prim_free) {
  199|      0|            pf->prim_free(pval, it);
  200|      0|            return;
  201|      0|        }
  202|   376k|    }
  203|       |    /* Special case: if 'it' is NULL free contents of ASN1_TYPE */
  204|   392k|    if (!it) {
  205|  16.5k|        ASN1_TYPE *typ = (ASN1_TYPE *)*pval;
  206|  16.5k|        utype = typ->type;
  207|  16.5k|        pval = &typ->value.asn1_value;
  208|  16.5k|        if (!*pval)
  209|  15.4k|            return;
  210|   376k|    } else if (it->itype == ASN1_ITYPE_MSTRING) {
  211|   107k|        utype = -1;
  212|   107k|        if (!*pval)
  213|      0|            return;
  214|   269k|    } else {
  215|   269k|        utype = it->utype;
  216|   269k|        if ((utype != V_ASN1_BOOLEAN) && !*pval)
  217|  35.8k|            return;
  218|   269k|    }
  219|       |
  220|   341k|    switch (utype) {
  221|   137k|    case V_ASN1_OBJECT:
  222|   137k|        ASN1_OBJECT_free((ASN1_OBJECT *)*pval);
  223|   137k|        break;
  224|       |
  225|  33.1k|    case V_ASN1_BOOLEAN:
  226|  33.1k|        if (it)
  227|  33.1k|            *(ASN1_BOOLEAN *)pval = it->size;
  228|      0|        else
  229|      0|            *(ASN1_BOOLEAN *)pval = -1;
  230|  33.1k|        return;
  231|       |
  232|      0|    case V_ASN1_NULL:
  233|      0|        break;
  234|       |
  235|  16.5k|    case V_ASN1_ANY:
  236|  16.5k|        ASN1_primitive_free(pval, NULL);
  237|  16.5k|        OPENSSL_free(*pval);
  238|  16.5k|        break;
  239|       |
  240|   154k|    default:
  241|   154k|        ASN1_STRING_free((ASN1_STRING *)*pval);
  242|   154k|        *pval = NULL;
  243|   154k|        break;
  244|   341k|    }
  245|   308k|    *pval = NULL;
  246|   308k|}

ASN1_item_new:
   75|  63.8k|{
   76|  63.8k|    ASN1_VALUE *ret = NULL;
   77|  63.8k|    if (ASN1_item_ex_new(&ret, it) > 0)
   78|  63.8k|        return ret;
   79|      0|    return NULL;
   80|  63.8k|}
ASN1_item_ex_new:
   85|   139k|{
   86|   139k|    return asn1_item_ex_combine_new(pval, it, 0);
   87|   139k|}
ASN1_template_new:
  259|   400k|{
  260|   400k|    const ASN1_ITEM *it = ASN1_ITEM_ptr(tt->item);
  261|   400k|    int ret;
  262|   400k|    if (tt->flags & ASN1_TFLG_OPTIONAL) {
  263|  66.3k|        asn1_template_clear(pval, tt);
  264|  66.3k|        return 1;
  265|  66.3k|    }
  266|       |    /* If ANY DEFINED BY nothing to do */
  267|       |
  268|   334k|    if (tt->flags & ASN1_TFLG_ADB_MASK) {
  269|      0|        *pval = NULL;
  270|      0|        return 1;
  271|      0|    }
  272|       |#ifdef CRYPTO_MDEBUG
  273|       |    if (tt->field_name)
  274|       |        CRYPTO_push_info(tt->field_name);
  275|       |#endif
  276|       |    /* If SET OF or SEQUENCE OF, its a STACK */
  277|   334k|    if (tt->flags & ASN1_TFLG_SK_MASK) {
  278|      0|        STACK_OF(ASN1_VALUE) *skval;
  279|      0|        skval = sk_ASN1_VALUE_new_null();
  280|      0|        if (!skval) {
  281|      0|            ASN1err(ASN1_F_ASN1_TEMPLATE_NEW, ERR_R_MALLOC_FAILURE);
  282|      0|            ret = 0;
  283|      0|            goto done;
  284|      0|        }
  285|      0|        *pval = (ASN1_VALUE *)skval;
  286|      0|        ret = 1;
  287|      0|        goto done;
  288|      0|    }
  289|       |    /* Otherwise pass it back to the item routine */
  290|   334k|    ret = asn1_item_ex_combine_new(pval, it, tt->flags & ASN1_TFLG_COMBINE);
  291|   334k| done:
  292|       |#ifdef CRYPTO_MDEBUG
  293|       |    if (it->sname)
  294|       |        CRYPTO_pop_info();
  295|       |#endif
  296|   334k|    return ret;
  297|   334k|}
ASN1_primitive_new:
  314|   300k|{
  315|   300k|    ASN1_TYPE *typ;
  316|   300k|    ASN1_STRING *str;
  317|   300k|    int utype;
  318|       |
  319|   300k|    if (!it)
  320|      0|        return 0;
  321|       |
  322|   300k|    if (it->funcs) {
  323|      0|        const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
  324|      0|        if (pf->prim_new)
  325|      0|            return pf->prim_new(pval, it);
  326|      0|    }
  327|       |
  328|   300k|    if (it->itype == ASN1_ITYPE_MSTRING)
  329|   107k|        utype = -1;
  330|   193k|    else
  331|   193k|        utype = it->utype;
  332|   300k|    switch (utype) {
  333|   135k|    case V_ASN1_OBJECT:
  334|   135k|        *pval = (ASN1_VALUE *)OBJ_nid2obj(NID_undef);
  335|   135k|        return 1;
  336|       |
  337|      0|    case V_ASN1_BOOLEAN:
  338|      0|        *(ASN1_BOOLEAN *)pval = it->size;
  339|      0|        return 1;
  340|       |
  341|      0|    case V_ASN1_NULL:
  342|      0|        *pval = (ASN1_VALUE *)1;
  343|      0|        return 1;
  344|       |
  345|  16.5k|    case V_ASN1_ANY:
  346|  16.5k|        typ = OPENSSL_malloc(sizeof(ASN1_TYPE));
  347|  16.5k|        if (!typ)
  348|      0|            return 0;
  349|  16.5k|        typ->value.ptr = NULL;
  350|  16.5k|        typ->type = -1;
  351|  16.5k|        *pval = (ASN1_VALUE *)typ;
  352|  16.5k|        break;
  353|       |
  354|   148k|    default:
  355|   148k|        str = ASN1_STRING_type_new(utype);
  356|   148k|        if (it->itype == ASN1_ITYPE_MSTRING && str)
  357|   107k|            str->flags |= ASN1_STRING_FLAG_MSTRING;
  358|   148k|        *pval = (ASN1_VALUE *)str;
  359|   148k|        break;
  360|   300k|    }
  361|   165k|    if (*pval)
  362|   165k|        return 1;
  363|      0|    return 0;
  364|   165k|}
tasn_new.c:asn1_item_ex_combine_new:
   91|   474k|{
   92|   474k|    const ASN1_TEMPLATE *tt = NULL;
   93|   474k|    const ASN1_COMPAT_FUNCS *cf;
   94|   474k|    const ASN1_EXTERN_FUNCS *ef;
   95|   474k|    const ASN1_AUX *aux = it->funcs;
   96|   474k|    ASN1_aux_cb *asn1_cb;
   97|   474k|    ASN1_VALUE **pseqval;
   98|   474k|    int i;
   99|   474k|    if (aux && aux->asn1_cb)
  100|  12.5k|        asn1_cb = aux->asn1_cb;
  101|   461k|    else
  102|   461k|        asn1_cb = 0;
  103|       |
  104|       |#ifdef CRYPTO_MDEBUG
  105|       |    if (it->sname)
  106|       |        CRYPTO_push_info(it->sname);
  107|       |#endif
  108|       |
  109|   474k|    switch (it->itype) {
  110|       |
  111|  12.5k|    case ASN1_ITYPE_EXTERN:
  112|  12.5k|        ef = it->funcs;
  113|  12.5k|        if (ef && ef->asn1_ex_new) {
  114|  12.5k|            if (!ef->asn1_ex_new(pval, it))
  115|      0|                goto memerr;
  116|  12.5k|        }
  117|  12.5k|        break;
  118|       |
  119|  12.5k|    case ASN1_ITYPE_COMPAT:
  120|      0|        cf = it->funcs;
  121|      0|        if (cf && cf->asn1_new) {
  122|      0|            *pval = cf->asn1_new();
  123|      0|            if (!*pval)
  124|      0|                goto memerr;
  125|      0|        }
  126|      0|        break;
  127|       |
  128|   193k|    case ASN1_ITYPE_PRIMITIVE:
  129|   193k|        if (it->templates) {
  130|      0|            if (!ASN1_template_new(pval, it->templates))
  131|      0|                goto memerr;
  132|   193k|        } else if (!ASN1_primitive_new(pval, it))
  133|      0|            goto memerr;
  134|   193k|        break;
  135|       |
  136|   193k|    case ASN1_ITYPE_MSTRING:
  137|   107k|        if (!ASN1_primitive_new(pval, it))
  138|      0|            goto memerr;
  139|   107k|        break;
  140|       |
  141|   107k|    case ASN1_ITYPE_CHOICE:
  142|      0|        if (asn1_cb) {
  143|      0|            i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
  144|      0|            if (!i)
  145|      0|                goto auxerr;
  146|      0|            if (i == 2) {
  147|       |#ifdef CRYPTO_MDEBUG
  148|       |                if (it->sname)
  149|       |                    CRYPTO_pop_info();
  150|       |#endif
  151|      0|                return 1;
  152|      0|            }
  153|      0|        }
  154|      0|        if (!combine) {
  155|      0|            *pval = OPENSSL_malloc(it->size);
  156|      0|            if (!*pval)
  157|      0|                goto memerr;
  158|      0|            memset(*pval, 0, it->size);
  159|      0|        }
  160|      0|        asn1_set_choice_selector(pval, -1, it);
  161|      0|        if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
  162|      0|            goto auxerr2;
  163|      0|        break;
  164|       |
  165|      0|    case ASN1_ITYPE_NDEF_SEQUENCE:
  166|   161k|    case ASN1_ITYPE_SEQUENCE:
  167|   161k|        if (asn1_cb) {
  168|  12.5k|            i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
  169|  12.5k|            if (!i)
  170|      0|                goto auxerr;
  171|  12.5k|            if (i == 2) {
  172|       |#ifdef CRYPTO_MDEBUG
  173|       |                if (it->sname)
  174|       |                    CRYPTO_pop_info();
  175|       |#endif
  176|      0|                return 1;
  177|      0|            }
  178|  12.5k|        }
  179|   161k|        if (!combine) {
  180|   161k|            *pval = OPENSSL_malloc(it->size);
  181|   161k|            if (!*pval)
  182|      0|                goto memerr;
  183|   161k|            memset(*pval, 0, it->size);
  184|   161k|            asn1_do_lock(pval, 0, it);
  185|   161k|            asn1_enc_init(pval, it);
  186|   161k|        }
  187|   561k|        for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
  188|   400k|            pseqval = asn1_get_field_ptr(pval, tt);
  189|   400k|            if (!ASN1_template_new(pseqval, tt))
  190|      0|                goto memerr2;
  191|   400k|        }
  192|   161k|        if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
  193|      0|            goto auxerr2;
  194|   161k|        break;
  195|   474k|    }
  196|       |#ifdef CRYPTO_MDEBUG
  197|       |    if (it->sname)
  198|       |        CRYPTO_pop_info();
  199|       |#endif
  200|   474k|    return 1;
  201|       |
  202|      0| memerr2:
  203|      0|    asn1_item_combine_free(pval, it, combine);
  204|      0| memerr:
  205|      0|    ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ERR_R_MALLOC_FAILURE);
  206|       |#ifdef CRYPTO_MDEBUG
  207|       |    if (it->sname)
  208|       |        CRYPTO_pop_info();
  209|       |#endif
  210|      0|    return 0;
  211|       |
  212|      0| auxerr2:
  213|      0|    asn1_item_combine_free(pval, it, combine);
  214|      0| auxerr:
  215|      0|    ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ASN1_R_AUX_ERROR);
  216|       |#ifdef CRYPTO_MDEBUG
  217|       |    if (it->sname)
  218|       |        CRYPTO_pop_info();
  219|       |#endif
  220|      0|    return 0;
  221|       |
  222|      0|}
tasn_new.c:asn1_template_clear:
  300|  66.3k|{
  301|       |    /* If ADB or STACK just NULL the field */
  302|  66.3k|    if (tt->flags & (ASN1_TFLG_ADB_MASK | ASN1_TFLG_SK_MASK))
  303|  6.27k|        *pval = NULL;
  304|  60.0k|    else
  305|  60.0k|        asn1_item_clear(pval, ASN1_ITEM_ptr(tt->item));
  306|  66.3k|}
tasn_new.c:asn1_item_clear:
  225|  60.0k|{
  226|  60.0k|    const ASN1_EXTERN_FUNCS *ef;
  227|       |
  228|  60.0k|    switch (it->itype) {
  229|       |
  230|      0|    case ASN1_ITYPE_EXTERN:
  231|      0|        ef = it->funcs;
  232|      0|        if (ef && ef->asn1_ex_clear)
  233|      0|            ef->asn1_ex_clear(pval, it);
  234|      0|        else
  235|      0|            *pval = NULL;
  236|      0|        break;
  237|       |
  238|  60.0k|    case ASN1_ITYPE_PRIMITIVE:
  239|  60.0k|        if (it->templates)
  240|      0|            asn1_template_clear(pval, it->templates);
  241|  60.0k|        else
  242|  60.0k|            asn1_primitive_clear(pval, it);
  243|  60.0k|        break;
  244|       |
  245|      0|    case ASN1_ITYPE_MSTRING:
  246|      0|        asn1_primitive_clear(pval, it);
  247|      0|        break;
  248|       |
  249|      0|    case ASN1_ITYPE_COMPAT:
  250|      0|    case ASN1_ITYPE_CHOICE:
  251|      0|    case ASN1_ITYPE_SEQUENCE:
  252|      0|    case ASN1_ITYPE_NDEF_SEQUENCE:
  253|      0|        *pval = NULL;
  254|      0|        break;
  255|  60.0k|    }
  256|  60.0k|}
tasn_new.c:asn1_primitive_clear:
  367|  60.0k|{
  368|  60.0k|    int utype;
  369|  60.0k|    if (it && it->funcs) {
  370|      0|        const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
  371|      0|        if (pf->prim_clear)
  372|      0|            pf->prim_clear(pval, it);
  373|      0|        else
  374|      0|            *pval = NULL;
  375|      0|        return;
  376|      0|    }
  377|  60.0k|    if (!it || (it->itype == ASN1_ITYPE_MSTRING))
  378|      0|        utype = -1;
  379|  60.0k|    else
  380|  60.0k|        utype = it->utype;
  381|  60.0k|    if (utype == V_ASN1_BOOLEAN)
  382|  22.4k|        *(ASN1_BOOLEAN *)pval = it->size;
  383|  37.6k|    else
  384|  37.6k|        *pval = NULL;
  385|  60.0k|}

asn1_do_lock:
  104|   328k|{
  105|   328k|    const ASN1_AUX *aux;
  106|   328k|    int *lck, ret;
  107|   328k|    if ((it->itype != ASN1_ITYPE_SEQUENCE)
  108|   328k|        && (it->itype != ASN1_ITYPE_NDEF_SEQUENCE))
  109|      0|        return 0;
  110|   328k|    aux = it->funcs;
  111|   328k|    if (!aux || !(aux->flags & ASN1_AFLG_REFCOUNT))
  112|   309k|        return 0;
  113|  18.8k|    lck = offset2ptr(*pval, aux->ref_offset);
  114|  18.8k|    if (op == 0) {
  115|  6.27k|        *lck = 1;
  116|  6.27k|        return 1;
  117|  6.27k|    }
  118|  12.5k|    ret = CRYPTO_add(lck, op, aux->ref_lock);
  119|       |#ifdef REF_PRINT
  120|       |    fprintf(stderr, "%s: Reference Count: %d\n", it->sname, *lck);
  121|       |#endif
  122|       |#ifdef REF_CHECK
  123|       |    if (ret < 0)
  124|       |        fprintf(stderr, "%s, bad reference count\n", it->sname);
  125|       |#endif
  126|  12.5k|    return ret;
  127|  18.8k|}
asn1_enc_init:
  141|   161k|{
  142|   161k|    ASN1_ENCODING *enc;
  143|   161k|    enc = asn1_get_enc_ptr(pval, it);
  144|   161k|    if (enc) {
  145|  6.27k|        enc->enc = NULL;
  146|  6.27k|        enc->len = 0;
  147|  6.27k|        enc->modified = 1;
  148|  6.27k|    }
  149|   161k|}
asn1_enc_free:
  152|   161k|{
  153|   161k|    ASN1_ENCODING *enc;
  154|   161k|    enc = asn1_get_enc_ptr(pval, it);
  155|   161k|    if (enc) {
  156|  6.27k|        if (enc->enc)
  157|  6.27k|            OPENSSL_free(enc->enc);
  158|  6.27k|        enc->enc = NULL;
  159|  6.27k|        enc->len = 0;
  160|  6.27k|        enc->modified = 1;
  161|  6.27k|    }
  162|   161k|}
asn1_enc_save:
  166|   113k|{
  167|   113k|    ASN1_ENCODING *enc;
  168|   113k|    enc = asn1_get_enc_ptr(pval, it);
  169|   113k|    if (!enc)
  170|   107k|        return 1;
  171|       |
  172|  6.27k|    if (enc->enc)
  173|      0|        OPENSSL_free(enc->enc);
  174|  6.27k|    enc->enc = OPENSSL_malloc(inlen);
  175|  6.27k|    if (!enc->enc)
  176|      0|        return 0;
  177|  6.27k|    memcpy(enc->enc, in, inlen);
  178|  6.27k|    enc->len = inlen;
  179|  6.27k|    enc->modified = 0;
  180|       |
  181|  6.27k|    return 1;
  182|  6.27k|}
asn1_enc_restore:
  186|   142k|{
  187|   142k|    ASN1_ENCODING *enc;
  188|   142k|    enc = asn1_get_enc_ptr(pval, it);
  189|   142k|    if (!enc || enc->modified)
  190|   142k|        return 0;
  191|      0|    if (out) {
  192|      0|        memcpy(*out, enc->enc, enc->len);
  193|      0|        *out += enc->len;
  194|      0|    }
  195|      0|    if (len)
  196|      0|        *len = enc->len;
  197|      0|    return 1;
  198|   142k|}
asn1_get_field_ptr:
  202|  1.48M|{
  203|  1.48M|    ASN1_VALUE **pvaltmp;
  204|  1.48M|    if (tt->flags & ASN1_TFLG_COMBINE)
  205|      0|        return pval;
  206|  1.48M|    pvaltmp = offset2ptr(*pval, tt->offset);
  207|       |    /*
  208|       |     * NOTE for BOOLEAN types the field is just a plain int so we can't
  209|       |     * return int **, so settle for (int *).
  210|       |     */
  211|  1.48M|    return pvaltmp;
  212|  1.48M|}
asn1_do_adb:
  221|  1.08M|{
  222|  1.08M|    const ASN1_ADB *adb;
  223|  1.08M|    const ASN1_ADB_TABLE *atbl;
  224|  1.08M|    long selector;
  225|  1.08M|    ASN1_VALUE **sfld;
  226|  1.08M|    int i;
  227|  1.08M|    if (!(tt->flags & ASN1_TFLG_ADB_MASK))
  228|  1.08M|        return tt;
  229|       |
  230|       |    /* Else ANY DEFINED BY ... get the table */
  231|      0|    adb = ASN1_ADB_ptr(tt->item);
  232|       |
  233|       |    /* Get the selector field */
  234|      0|    sfld = offset2ptr(*pval, adb->offset);
  235|       |
  236|       |    /* Check if NULL */
  237|      0|    if (*sfld == NULL) {
  238|      0|        if (!adb->null_tt)
  239|      0|            goto err;
  240|      0|        return adb->null_tt;
  241|      0|    }
  242|       |
  243|       |    /*
  244|       |     * Convert type to a long: NB: don't check for NID_undef here because it
  245|       |     * might be a legitimate value in the table
  246|       |     */
  247|      0|    if (tt->flags & ASN1_TFLG_ADB_OID)
  248|      0|        selector = OBJ_obj2nid((ASN1_OBJECT *)*sfld);
  249|      0|    else
  250|      0|        selector = ASN1_INTEGER_get((ASN1_INTEGER *)*sfld);
  251|       |
  252|       |    /*
  253|       |     * Try to find matching entry in table Maybe should check application
  254|       |     * types first to allow application override? Might also be useful to
  255|       |     * have a flag which indicates table is sorted and we can do a binary
  256|       |     * search. For now stick to a linear search.
  257|       |     */
  258|       |
  259|      0|    for (atbl = adb->tbl, i = 0; i < adb->tblcount; i++, atbl++)
  260|      0|        if (atbl->value == selector)
  261|      0|            return &atbl->tt;
  262|       |
  263|       |    /* FIXME: need to search application table too */
  264|       |
  265|       |    /* No match, return default type */
  266|      0|    if (!adb->default_tt)
  267|      0|        goto err;
  268|      0|    return adb->default_tt;
  269|       |
  270|      0| err:
  271|       |    /* FIXME: should log the value or OID of unsupported type */
  272|      0|    if (nullerr)
  273|      0|        ASN1err(ASN1_F_ASN1_DO_ADB, ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
  274|      0|    return NULL;
  275|      0|}
tasn_utl.c:asn1_get_enc_ptr:
  130|   577k|{
  131|   577k|    const ASN1_AUX *aux;
  132|   577k|    if (!pval || !*pval)
  133|      0|        return NULL;
  134|   577k|    aux = it->funcs;
  135|   577k|    if (!aux || !(aux->flags & ASN1_AFLG_ENCODING))
  136|   558k|        return NULL;
  137|  18.8k|    return offset2ptr(*pval, aux->enc_offset);
  138|   577k|}

X509_INFO_new:
   66|  6.27k|{
   67|  6.27k|    X509_INFO *ret = NULL;
   68|       |
   69|  6.27k|    ret = (X509_INFO *)OPENSSL_malloc(sizeof(X509_INFO));
   70|  6.27k|    if (ret == NULL) {
   71|      0|        ASN1err(ASN1_F_X509_INFO_NEW, ERR_R_MALLOC_FAILURE);
   72|      0|        return (NULL);
   73|      0|    }
   74|       |
   75|  6.27k|    ret->enc_cipher.cipher = NULL;
   76|  6.27k|    ret->enc_len = 0;
   77|  6.27k|    ret->enc_data = NULL;
   78|       |
   79|  6.27k|    ret->references = 1;
   80|  6.27k|    ret->x509 = NULL;
   81|  6.27k|    ret->crl = NULL;
   82|  6.27k|    ret->x_pkey = NULL;
   83|  6.27k|    return (ret);
   84|  6.27k|}
X509_INFO_free:
   87|  6.27k|{
   88|  6.27k|    int i;
   89|       |
   90|  6.27k|    if (x == NULL)
   91|      0|        return;
   92|       |
   93|  6.27k|    i = CRYPTO_add(&x->references, -1, CRYPTO_LOCK_X509_INFO);
   94|       |#ifdef REF_PRINT
   95|       |    REF_PRINT("X509_INFO", x);
   96|       |#endif
   97|  6.27k|    if (i > 0)
   98|      0|        return;
   99|       |#ifdef REF_CHECK
  100|       |    if (i < 0) {
  101|       |        fprintf(stderr, "X509_INFO_free, bad reference count\n");
  102|       |        abort();
  103|       |    }
  104|       |#endif
  105|       |
  106|  6.27k|    if (x->x509 != NULL)
  107|  6.27k|        X509_free(x->x509);
  108|  6.27k|    if (x->crl != NULL)
  109|      0|        X509_CRL_free(x->crl);
  110|  6.27k|    if (x->x_pkey != NULL)
  111|      0|        X509_PKEY_free(x->x_pkey);
  112|  6.27k|    if (x->enc_data != NULL)
  113|      0|        OPENSSL_free(x->enc_data);
  114|  6.27k|    OPENSSL_free(x);
  115|  6.27k|}

x_name.c:x509_name_ex_new:
  141|  25.0k|{
  142|  25.0k|    X509_NAME *ret = NULL;
  143|  25.0k|    ret = OPENSSL_malloc(sizeof(X509_NAME));
  144|  25.0k|    if (!ret)
  145|      0|        goto memerr;
  146|  25.0k|    if ((ret->entries = sk_X509_NAME_ENTRY_new_null()) == NULL)
  147|      0|        goto memerr;
  148|  25.0k|    if ((ret->bytes = BUF_MEM_new()) == NULL)
  149|      0|        goto memerr;
  150|  25.0k|    ret->canon_enc = NULL;
  151|  25.0k|    ret->canon_enclen = 0;
  152|  25.0k|    ret->modified = 1;
  153|  25.0k|    *val = (ASN1_VALUE *)ret;
  154|  25.0k|    return 1;
  155|       |
  156|      0| memerr:
  157|      0|    ASN1err(ASN1_F_X509_NAME_EX_NEW, ERR_R_MALLOC_FAILURE);
  158|      0|    if (ret) {
  159|      0|        if (ret->entries)
  160|      0|            sk_X509_NAME_ENTRY_free(ret->entries);
  161|      0|        OPENSSL_free(ret);
  162|      0|    }
  163|      0|    return 0;
  164|  25.0k|}
x_name.c:x509_name_ex_free:
  167|  25.0k|{
  168|  25.0k|    X509_NAME *a;
  169|  25.0k|    if (!pval || !*pval)
  170|      0|        return;
  171|  25.0k|    a = (X509_NAME *)*pval;
  172|       |
  173|  25.0k|    BUF_MEM_free(a->bytes);
  174|  25.0k|    sk_X509_NAME_ENTRY_pop_free(a->entries, X509_NAME_ENTRY_free);
  175|  25.0k|    if (a->canon_enc)
  176|  12.5k|        OPENSSL_free(a->canon_enc);
  177|  25.0k|    OPENSSL_free(a);
  178|  25.0k|    *pval = NULL;
  179|  25.0k|}
x_name.c:x509_name_ex_d2i:
  195|  12.5k|{
  196|  12.5k|    const unsigned char *p = *in, *q;
  197|  12.5k|    union {
  198|  12.5k|        STACK_OF(STACK_OF_X509_NAME_ENTRY) *s;
  199|  12.5k|        ASN1_VALUE *a;
  200|  12.5k|    } intname = {
  201|  12.5k|        NULL
  202|  12.5k|    };
  203|  12.5k|    union {
  204|  12.5k|        X509_NAME *x;
  205|  12.5k|        ASN1_VALUE *a;
  206|  12.5k|    } nm = {
  207|  12.5k|        NULL
  208|  12.5k|    };
  209|  12.5k|    int i, j, ret;
  210|  12.5k|    STACK_OF(X509_NAME_ENTRY) *entries;
  211|  12.5k|    X509_NAME_ENTRY *entry;
  212|  12.5k|    if (len > X509_NAME_MAX)
  213|      0|        len = X509_NAME_MAX;
  214|  12.5k|    q = p;
  215|       |
  216|       |    /* Get internal representation of Name */
  217|  12.5k|    ret = ASN1_item_ex_d2i(&intname.a,
  218|  12.5k|                           &p, len, ASN1_ITEM_rptr(X509_NAME_INTERNAL),
  219|  12.5k|                           tag, aclass, opt, ctx);
  220|       |
  221|  12.5k|    if (ret <= 0)
  222|      0|        return ret;
  223|       |
  224|  12.5k|    if (*val)
  225|  12.5k|        x509_name_ex_free(val, NULL);
  226|  12.5k|    if (!x509_name_ex_new(&nm.a, NULL))
  227|      0|        goto err;
  228|       |    /* We've decoded it: now cache encoding */
  229|  12.5k|    if (!BUF_MEM_grow(nm.x->bytes, p - q))
  230|      0|        goto err;
  231|  12.5k|    memcpy(nm.x->bytes->data, q, p - q);
  232|       |
  233|       |    /* Convert internal representation to X509_NAME structure */
  234|  59.8k|    for (i = 0; i < sk_STACK_OF_X509_NAME_ENTRY_num(intname.s); i++) {
  235|  47.3k|        entries = sk_STACK_OF_X509_NAME_ENTRY_value(intname.s, i);
  236|  94.6k|        for (j = 0; j < sk_X509_NAME_ENTRY_num(entries); j++) {
  237|  47.3k|            entry = sk_X509_NAME_ENTRY_value(entries, j);
  238|  47.3k|            entry->set = i;
  239|  47.3k|            if (!sk_X509_NAME_ENTRY_push(nm.x->entries, entry))
  240|      0|                goto err;
  241|  47.3k|            sk_X509_NAME_ENTRY_set(entries, j, NULL);
  242|  47.3k|        }
  243|  47.3k|    }
  244|  12.5k|    ret = x509_name_canon(nm.x);
  245|  12.5k|    if (!ret)
  246|      0|        goto err;
  247|  12.5k|    sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,
  248|  12.5k|                                         local_sk_X509_NAME_ENTRY_free);
  249|  12.5k|    nm.x->modified = 0;
  250|  12.5k|    *val = nm.a;
  251|  12.5k|    *in = p;
  252|  12.5k|    return ret;
  253|      0| err:
  254|      0|    if (nm.x != NULL)
  255|      0|        X509_NAME_free(nm.x);
  256|      0|    sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,
  257|      0|                                         local_sk_X509_NAME_ENTRY_pop_free);
  258|      0|    ASN1err(ASN1_F_X509_NAME_EX_D2I, ERR_R_NESTED_ASN1_ERROR);
  259|      0|    return 0;
  260|  12.5k|}
x_name.c:x509_name_canon:
  353|  12.5k|{
  354|  12.5k|    unsigned char *p;
  355|  12.5k|    STACK_OF(STACK_OF_X509_NAME_ENTRY) *intname = NULL;
  356|  12.5k|    STACK_OF(X509_NAME_ENTRY) *entries = NULL;
  357|  12.5k|    X509_NAME_ENTRY *entry, *tmpentry = NULL;
  358|  12.5k|    int i, set = -1, ret = 0;
  359|       |
  360|  12.5k|    if (a->canon_enc) {
  361|      0|        OPENSSL_free(a->canon_enc);
  362|      0|        a->canon_enc = NULL;
  363|      0|    }
  364|       |    /* Special case: empty X509_NAME => null encoding */
  365|  12.5k|    if (sk_X509_NAME_ENTRY_num(a->entries) == 0) {
  366|      0|        a->canon_enclen = 0;
  367|      0|        return 1;
  368|      0|    }
  369|  12.5k|    intname = sk_STACK_OF_X509_NAME_ENTRY_new_null();
  370|  12.5k|    if (!intname)
  371|      0|        goto err;
  372|  59.8k|    for (i = 0; i < sk_X509_NAME_ENTRY_num(a->entries); i++) {
  373|  47.3k|        entry = sk_X509_NAME_ENTRY_value(a->entries, i);
  374|  47.3k|        if (entry->set != set) {
  375|  47.3k|            entries = sk_X509_NAME_ENTRY_new_null();
  376|  47.3k|            if (!entries)
  377|      0|                goto err;
  378|  47.3k|            if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries)) {
  379|      0|                sk_X509_NAME_ENTRY_free(entries);
  380|      0|                goto err;
  381|      0|            }
  382|  47.3k|            set = entry->set;
  383|  47.3k|        }
  384|  47.3k|        tmpentry = X509_NAME_ENTRY_new();
  385|  47.3k|        if (!tmpentry)
  386|      0|            goto err;
  387|  47.3k|        tmpentry->object = OBJ_dup(entry->object);
  388|  47.3k|        if (!asn1_string_canon(tmpentry->value, entry->value))
  389|      0|            goto err;
  390|  47.3k|        if (!sk_X509_NAME_ENTRY_push(entries, tmpentry))
  391|      0|            goto err;
  392|  47.3k|        tmpentry = NULL;
  393|  47.3k|    }
  394|       |
  395|       |    /* Finally generate encoding */
  396|       |
  397|  12.5k|    a->canon_enclen = i2d_name_canon(intname, NULL);
  398|       |
  399|  12.5k|    p = OPENSSL_malloc(a->canon_enclen);
  400|       |
  401|  12.5k|    if (!p)
  402|      0|        goto err;
  403|       |
  404|  12.5k|    a->canon_enc = p;
  405|       |
  406|  12.5k|    i2d_name_canon(intname, &p);
  407|       |
  408|  12.5k|    ret = 1;
  409|       |
  410|  12.5k| err:
  411|       |
  412|  12.5k|    if (tmpentry)
  413|      0|        X509_NAME_ENTRY_free(tmpentry);
  414|  12.5k|    if (intname)
  415|  12.5k|        sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname,
  416|  12.5k|                                             local_sk_X509_NAME_ENTRY_pop_free);
  417|  12.5k|    return ret;
  418|  12.5k|}
x_name.c:asn1_string_canon:
  428|  47.3k|{
  429|  47.3k|    unsigned char *to, *from;
  430|  47.3k|    int len, i;
  431|       |
  432|       |    /* If type not in bitmask just copy string across */
  433|  47.3k|    if (!(ASN1_tag2bit(in->type) & ASN1_MASK_CANON)) {
  434|      0|        if (!ASN1_STRING_copy(out, in))
  435|      0|            return 0;
  436|      0|        return 1;
  437|      0|    }
  438|       |
  439|  47.3k|    out->type = V_ASN1_UTF8STRING;
  440|  47.3k|    out->length = ASN1_STRING_to_UTF8(&out->data, in);
  441|  47.3k|    if (out->length == -1)
  442|      0|        return 0;
  443|       |
  444|  47.3k|    to = out->data;
  445|  47.3k|    from = to;
  446|       |
  447|  47.3k|    len = out->length;
  448|       |
  449|       |    /*
  450|       |     * Convert string in place to canonical form. Ultimately we may need to
  451|       |     * handle a wider range of characters but for now ignore anything with
  452|       |     * MSB set and rely on the isspace() and tolower() functions.
  453|       |     */
  454|       |
  455|       |    /* Ignore leading spaces */
  456|  47.3k|    while ((len > 0) && !(*from & 0x80) && isspace(*from)) {
  457|      0|        from++;
  458|      0|        len--;
  459|      0|    }
  460|       |
  461|  47.3k|    to = from + len - 1;
  462|       |
  463|       |    /* Ignore trailing spaces */
  464|  47.3k|    while ((len > 0) && !(*to & 0x80) && isspace(*to)) {
  465|      0|        to--;
  466|      0|        len--;
  467|      0|    }
  468|       |
  469|  47.3k|    to = out->data;
  470|       |
  471|  47.3k|    i = 0;
  472|   838k|    while (i < len) {
  473|       |        /* If MSB set just copy across */
  474|   790k|        if (*from & 0x80) {
  475|  2.15k|            *to++ = *from++;
  476|  2.15k|            i++;
  477|  2.15k|        }
  478|       |        /* Collapse multiple spaces */
  479|   788k|        else if (isspace(*from)) {
  480|       |            /* Copy one space across */
  481|  74.6k|            *to++ = ' ';
  482|       |            /*
  483|       |             * Ignore subsequent spaces. Note: don't need to check len here
  484|       |             * because we know the last character is a non-space so we can't
  485|       |             * overflow.
  486|       |             */
  487|  74.6k|            do {
  488|  74.6k|                from++;
  489|  74.6k|                i++;
  490|  74.6k|            }
  491|  74.6k|            while (!(*from & 0x80) && isspace(*from));
  492|   714k|        } else {
  493|   714k|            *to++ = tolower(*from);
  494|   714k|            from++;
  495|   714k|            i++;
  496|   714k|        }
  497|   790k|    }
  498|       |
  499|  47.3k|    out->length = to - out->data;
  500|       |
  501|  47.3k|    return 1;
  502|       |
  503|  47.3k|}
x_name.c:i2d_name_canon:
  507|  25.0k|{
  508|  25.0k|    int i, len, ltmp;
  509|  25.0k|    ASN1_VALUE *v;
  510|  25.0k|    STACK_OF(ASN1_VALUE) *intname = (STACK_OF(ASN1_VALUE) *)_intname;
  511|       |
  512|  25.0k|    len = 0;
  513|   119k|    for (i = 0; i < sk_ASN1_VALUE_num(intname); i++) {
  514|  94.6k|        v = sk_ASN1_VALUE_value(intname, i);
  515|  94.6k|        ltmp = ASN1_item_ex_i2d(&v, in,
  516|  94.6k|                                ASN1_ITEM_rptr(X509_NAME_ENTRIES), -1, -1);
  517|  94.6k|        if (ltmp < 0)
  518|      0|            return ltmp;
  519|  94.6k|        len += ltmp;
  520|  94.6k|    }
  521|  25.0k|    return len;
  522|  25.0k|}
x_name.c:local_sk_X509_NAME_ENTRY_free:
  182|  47.3k|{
  183|  47.3k|    sk_X509_NAME_ENTRY_free(ne);
  184|  47.3k|}
x_name.c:local_sk_X509_NAME_ENTRY_pop_free:
  187|  47.3k|{
  188|  47.3k|    sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);
  189|  47.3k|}

x_pubkey.c:pubkey_cb:
   74|  37.6k|{
   75|  37.6k|    if (operation == ASN1_OP_FREE_POST) {
   76|  6.27k|        X509_PUBKEY *pubkey = (X509_PUBKEY *)*pval;
   77|  6.27k|        EVP_PKEY_free(pubkey->pkey);
   78|  6.27k|    }
   79|  37.6k|    return 1;
   80|  37.6k|}

x_x509.c:x509_cb:
   86|  37.6k|{
   87|  37.6k|    X509 *ret = (X509 *)*pval;
   88|       |
   89|  37.6k|    switch (operation) {
   90|       |
   91|  6.27k|    case ASN1_OP_NEW_POST:
   92|  6.27k|        ret->valid = 0;
   93|  6.27k|        ret->name = NULL;
   94|  6.27k|        ret->ex_flags = 0;
   95|  6.27k|        ret->ex_pathlen = -1;
   96|  6.27k|        ret->skid = NULL;
   97|  6.27k|        ret->akid = NULL;
   98|       |#ifndef OPENSSL_NO_RFC3779
   99|       |        ret->rfc3779_addr = NULL;
  100|       |        ret->rfc3779_asid = NULL;
  101|       |#endif
  102|  6.27k|        ret->aux = NULL;
  103|  6.27k|        ret->crldp = NULL;
  104|  6.27k|        CRYPTO_new_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
  105|  6.27k|        break;
  106|       |
  107|  6.27k|    case ASN1_OP_D2I_POST:
  108|  6.27k|        if (ret->name != NULL)
  109|      0|            OPENSSL_free(ret->name);
  110|  6.27k|        ret->name = X509_NAME_oneline(ret->cert_info->subject, NULL, 0);
  111|  6.27k|        break;
  112|       |
  113|  6.27k|    case ASN1_OP_FREE_POST:
  114|  6.27k|        CRYPTO_free_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
  115|  6.27k|        X509_CERT_AUX_free(ret->aux);
  116|  6.27k|        ASN1_OCTET_STRING_free(ret->skid);
  117|  6.27k|        AUTHORITY_KEYID_free(ret->akid);
  118|  6.27k|        CRL_DIST_POINTS_free(ret->crldp);
  119|  6.27k|        policy_cache_free(ret->policy_cache);
  120|  6.27k|        GENERAL_NAMES_free(ret->altname);
  121|  6.27k|        NAME_CONSTRAINTS_free(ret->nc);
  122|       |#ifndef OPENSSL_NO_RFC3779
  123|       |        sk_IPAddressFamily_pop_free(ret->rfc3779_addr, IPAddressFamily_free);
  124|       |        ASIdentifiers_free(ret->rfc3779_asid);
  125|       |#endif
  126|       |
  127|  6.27k|        if (ret->name != NULL)
  128|  6.27k|            OPENSSL_free(ret->name);
  129|  6.27k|        break;
  130|       |
  131|  37.6k|    }
  132|       |
  133|  37.6k|    return 1;
  134|       |
  135|  37.6k|}

BIO_snprintf:
  839|    339|{
  840|    339|    va_list args;
  841|    339|    int ret;
  842|       |
  843|    339|    va_start(args, format);
  844|       |
  845|    339|    ret = BIO_vsnprintf(buf, n, format, args);
  846|       |
  847|    339|    va_end(args);
  848|    339|    return (ret);
  849|    339|}
BIO_vsnprintf:
  852|    339|{
  853|    339|    size_t retlen;
  854|    339|    int truncated;
  855|       |
  856|    339|    if(!_dopr(&buf, NULL, &n, &retlen, &truncated, format, args))
  857|      0|        return -1;
  858|       |
  859|    339|    if (truncated)
  860|       |        /*
  861|       |         * In case of truncation, return -1 like traditional snprintf.
  862|       |         * (Current drafts for ISO/IEC 9899 say snprintf should return the
  863|       |         * number of characters that would have been written, had the buffer
  864|       |         * been large enough.)
  865|       |         */
  866|      0|        return -1;
  867|    339|    else
  868|    339|        return (retlen <= INT_MAX) ? (int)retlen : -1;
  869|    339|}
b_print.c:_dopr:
  173|    339|{
  174|    339|    char ch;
  175|    339|    LLONG value;
  176|    339|    LDOUBLE fvalue;
  177|    339|    char *strvalue;
  178|    339|    int min;
  179|    339|    int max;
  180|    339|    int state;
  181|    339|    int flags;
  182|    339|    int cflags;
  183|    339|    size_t currlen;
  184|       |
  185|    339|    state = DP_S_DEFAULT;
  186|    339|    flags = currlen = cflags = min = 0;
  187|    339|    max = -1;
  188|    339|    ch = *format++;
  189|       |
  190|  5.16k|    while (state != DP_S_DONE) {
  191|  4.82k|        if (ch == '\0' || (buffer == NULL && currlen >= *maxlen))
  192|    339|            state = DP_S_DONE;
  193|       |
  194|  4.82k|        switch (state) {
  195|  1.97k|        case DP_S_DEFAULT:
  196|  1.97k|            if (ch == '%')
  197|    483|                state = DP_S_FLAGS;
  198|  1.49k|            else
  199|  1.49k|                if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))
  200|      0|                    return 0;
  201|  1.97k|            ch = *format++;
  202|  1.97k|            break;
  203|    531|        case DP_S_FLAGS:
  204|    531|            switch (ch) {
  205|      0|            case '-':
  206|      0|                flags |= DP_F_MINUS;
  207|      0|                ch = *format++;
  208|      0|                break;
  209|      0|            case '+':
  210|      0|                flags |= DP_F_PLUS;
  211|      0|                ch = *format++;
  212|      0|                break;
  213|      0|            case ' ':
  214|      0|                flags |= DP_F_SPACE;
  215|      0|                ch = *format++;
  216|      0|                break;
  217|      0|            case '#':
  218|      0|                flags |= DP_F_NUM;
  219|      0|                ch = *format++;
  220|      0|                break;
  221|     48|            case '0':
  222|     48|                flags |= DP_F_ZERO;
  223|     48|                ch = *format++;
  224|     48|                break;
  225|    483|            default:
  226|    483|                state = DP_S_MIN;
  227|    483|                break;
  228|    531|            }
  229|    531|            break;
  230|    531|        case DP_S_MIN:
  231|    531|            if (isdigit((unsigned char)ch)) {
  232|     48|                min = 10 * min + char_to_int(ch);
  233|     48|                ch = *format++;
  234|    483|            } else if (ch == '*') {
  235|      0|                min = va_arg(args, int);
  236|      0|                ch = *format++;
  237|      0|                state = DP_S_DOT;
  238|      0|            } else
  239|    483|                state = DP_S_DOT;
  240|    531|            break;
  241|    483|        case DP_S_DOT:
  242|    483|            if (ch == '.') {
  243|      0|                state = DP_S_MAX;
  244|      0|                ch = *format++;
  245|      0|            } else
  246|    483|                state = DP_S_MOD;
  247|    483|            break;
  248|      0|        case DP_S_MAX:
  249|      0|            if (isdigit((unsigned char)ch)) {
  250|      0|                if (max < 0)
  251|      0|                    max = 0;
  252|      0|                max = 10 * max + char_to_int(ch);
  253|      0|                ch = *format++;
  254|      0|            } else if (ch == '*') {
  255|      0|                max = va_arg(args, int);
  256|      0|                ch = *format++;
  257|      0|                state = DP_S_MOD;
  258|      0|            } else
  259|      0|                state = DP_S_MOD;
  260|      0|            break;
  261|    483|        case DP_S_MOD:
  262|    483|            switch (ch) {
  263|      0|            case 'h':
  264|      0|                cflags = DP_C_SHORT;
  265|      0|                ch = *format++;
  266|      0|                break;
  267|    339|            case 'l':
  268|    339|                if (*format == 'l') {
  269|      0|                    cflags = DP_C_LLONG;
  270|      0|                    format++;
  271|      0|                } else
  272|    339|                    cflags = DP_C_LONG;
  273|    339|                ch = *format++;
  274|    339|                break;
  275|      0|            case 'q':
  276|      0|                cflags = DP_C_LLONG;
  277|      0|                ch = *format++;
  278|      0|                break;
  279|      0|            case 'L':
  280|      0|                cflags = DP_C_LDOUBLE;
  281|      0|                ch = *format++;
  282|      0|                break;
  283|    144|            default:
  284|    144|                break;
  285|    483|            }
  286|    483|            state = DP_S_CONV;
  287|    483|            break;
  288|    483|        case DP_S_CONV:
  289|    483|            switch (ch) {
  290|      0|            case 'd':
  291|      0|            case 'i':
  292|      0|                switch (cflags) {
  293|      0|                case DP_C_SHORT:
  294|      0|                    value = (short int)va_arg(args, int);
  295|      0|                    break;
  296|      0|                case DP_C_LONG:
  297|      0|                    value = va_arg(args, long int);
  298|      0|                    break;
  299|      0|                case DP_C_LLONG:
  300|      0|                    value = va_arg(args, LLONG);
  301|      0|                    break;
  302|      0|                default:
  303|      0|                    value = va_arg(args, int);
  304|      0|                    break;
  305|      0|                }
  306|      0|                if (!fmtint(sbuffer, buffer, &currlen, maxlen, value, 10, min,
  307|      0|                            max, flags))
  308|      0|                    return 0;
  309|      0|                break;
  310|     48|            case 'X':
  311|     48|                flags |= DP_F_UP;
  312|       |                /* FALLTHROUGH */
  313|     48|            case 'x':
  314|     48|            case 'o':
  315|    339|            case 'u':
  316|    339|                flags |= DP_F_UNSIGNED;
  317|    339|                switch (cflags) {
  318|      0|                case DP_C_SHORT:
  319|      0|                    value = (unsigned short int)va_arg(args, unsigned int);
  320|      0|                    break;
  321|    339|                case DP_C_LONG:
  322|    339|                    value = (LLONG) va_arg(args, unsigned long int);
  323|    339|                    break;
  324|      0|                case DP_C_LLONG:
  325|      0|                    value = va_arg(args, unsigned LLONG);
  326|      0|                    break;
  327|      0|                default:
  328|      0|                    value = (LLONG) va_arg(args, unsigned int);
  329|      0|                    break;
  330|    339|                }
  331|    339|                if (!fmtint(sbuffer, buffer, &currlen, maxlen, value,
  332|    339|                            ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),
  333|    339|                            min, max, flags))
  334|      0|                    return 0;
  335|    339|                break;
  336|    339|            case 'f':
  337|      0|                if (cflags == DP_C_LDOUBLE)
  338|      0|                    fvalue = va_arg(args, LDOUBLE);
  339|      0|                else
  340|      0|                    fvalue = va_arg(args, double);
  341|      0|                if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,
  342|      0|                           flags))
  343|      0|                    return 0;
  344|      0|                break;
  345|      0|            case 'E':
  346|      0|                flags |= DP_F_UP;
  347|      0|            case 'e':
  348|      0|                if (cflags == DP_C_LDOUBLE)
  349|      0|                    fvalue = va_arg(args, LDOUBLE);
  350|      0|                else
  351|      0|                    fvalue = va_arg(args, double);
  352|      0|                break;
  353|      0|            case 'G':
  354|      0|                flags |= DP_F_UP;
  355|      0|            case 'g':
  356|      0|                if (cflags == DP_C_LDOUBLE)
  357|      0|                    fvalue = va_arg(args, LDOUBLE);
  358|      0|                else
  359|      0|                    fvalue = va_arg(args, double);
  360|      0|                break;
  361|      0|            case 'c':
  362|      0|                if(!doapr_outch(sbuffer, buffer, &currlen, maxlen,
  363|      0|                            va_arg(args, int)))
  364|      0|                    return 0;
  365|      0|                break;
  366|    144|            case 's':
  367|    144|                strvalue = va_arg(args, char *);
  368|    144|                if (max < 0) {
  369|    144|                    if (buffer)
  370|      0|                        max = INT_MAX;
  371|    144|                    else
  372|    144|                        max = *maxlen;
  373|    144|                }
  374|    144|                if (!fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,
  375|    144|                            flags, min, max))
  376|      0|                    return 0;
  377|    144|                break;
  378|    144|            case 'p':
  379|      0|                value = (long)va_arg(args, void *);
  380|      0|                if (!fmtint(sbuffer, buffer, &currlen, maxlen,
  381|      0|                            value, 16, min, max, flags | DP_F_NUM))
  382|      0|                    return 0;
  383|      0|                break;
  384|      0|            case 'n':          /* XXX */
  385|      0|                if (cflags == DP_C_SHORT) {
  386|      0|                    short int *num;
  387|      0|                    num = va_arg(args, short int *);
  388|      0|                    *num = currlen;
  389|      0|                } else if (cflags == DP_C_LONG) { /* XXX */
  390|      0|                    long int *num;
  391|      0|                    num = va_arg(args, long int *);
  392|      0|                    *num = (long int)currlen;
  393|      0|                } else if (cflags == DP_C_LLONG) { /* XXX */
  394|      0|                    LLONG *num;
  395|      0|                    num = va_arg(args, LLONG *);
  396|      0|                    *num = (LLONG) currlen;
  397|      0|                } else {
  398|      0|                    int *num;
  399|      0|                    num = va_arg(args, int *);
  400|      0|                    *num = currlen;
  401|      0|                }
  402|      0|                break;
  403|      0|            case '%':
  404|      0|                if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))
  405|      0|                    return 0;
  406|      0|                break;
  407|      0|            case 'w':
  408|       |                /* not supported yet, treat as next char */
  409|      0|                ch = *format++;
  410|      0|                break;
  411|      0|            default:
  412|       |                /* unknown, skip */
  413|      0|                break;
  414|    483|            }
  415|    483|            ch = *format++;
  416|    483|            state = DP_S_DEFAULT;
  417|    483|            flags = cflags = min = 0;
  418|    483|            max = -1;
  419|    483|            break;
  420|    339|        case DP_S_DONE:
  421|    339|            break;
  422|      0|        default:
  423|      0|            break;
  424|  4.82k|        }
  425|  4.82k|    }
  426|       |    /*
  427|       |     * We have to truncate if there is no dynamic buffer and we have filled the
  428|       |     * static buffer.
  429|       |     */
  430|    339|    if (buffer == NULL) {
  431|    339|        *truncated = (currlen > *maxlen - 1);
  432|    339|        if (*truncated)
  433|      0|            currlen = *maxlen - 1;
  434|    339|    }
  435|    339|    if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, '\0'))
  436|      0|        return 0;
  437|    339|    *retlen = currlen - 1;
  438|    339|    return 1;
  439|    339|}
b_print.c:doapr_outch:
  748|  3.61k|{
  749|       |    /* If we haven't at least one buffer, someone has doe a big booboo */
  750|  3.61k|    assert(*sbuffer != NULL || buffer != NULL);
  751|       |
  752|       |    /* |currlen| must always be <= |*maxlen| */
  753|  3.61k|    assert(*currlen <= *maxlen);
  754|       |
  755|  3.61k|    if (buffer && *currlen == *maxlen) {
  756|      0|        if (*maxlen > INT_MAX - BUFFER_INC)
  757|      0|            return 0;
  758|       |
  759|      0|        *maxlen += BUFFER_INC;
  760|      0|        if (*buffer == NULL) {
  761|      0|            *buffer = OPENSSL_malloc(*maxlen);
  762|      0|            if (*buffer == NULL)
  763|      0|                return 0;
  764|      0|            if (*currlen > 0) {
  765|      0|                assert(*sbuffer != NULL);
  766|      0|                memcpy(*buffer, *sbuffer, *currlen);
  767|      0|            }
  768|      0|            *sbuffer = NULL;
  769|      0|        } else {
  770|      0|            char *tmpbuf;
  771|      0|            tmpbuf = OPENSSL_realloc(*buffer, *maxlen);
  772|      0|            if (tmpbuf == NULL)
  773|      0|                return 0;
  774|      0|            *buffer = tmpbuf;
  775|      0|        }
  776|      0|    }
  777|       |
  778|  3.61k|    if (*currlen < *maxlen) {
  779|  3.61k|        if (*sbuffer)
  780|  3.61k|            (*sbuffer)[(*currlen)++] = (char)c;
  781|      0|        else
  782|      0|            (*buffer)[(*currlen)++] = (char)c;
  783|  3.61k|    }
  784|       |
  785|  3.61k|    return 1;
  786|  3.61k|}
b_print.c:fmtint:
  489|    339|{
  490|    339|    int signvalue = 0;
  491|    339|    const char *prefix = "";
  492|    339|    unsigned LLONG uvalue;
  493|    339|    char convert[DECIMAL_SIZE(value) + 3];
  494|    339|    int place = 0;
  495|    339|    int spadlen = 0;
  496|    339|    int zpadlen = 0;
  497|    339|    int caps = 0;
  498|       |
  499|    339|    if (max < 0)
  500|    339|        max = 0;
  501|    339|    uvalue = value;
  502|    339|    if (!(flags & DP_F_UNSIGNED)) {
  503|      0|        if (value < 0) {
  504|      0|            signvalue = '-';
  505|      0|            uvalue = -(unsigned LLONG)value;
  506|      0|        } else if (flags & DP_F_PLUS)
  507|      0|            signvalue = '+';
  508|      0|        else if (flags & DP_F_SPACE)
  509|      0|            signvalue = ' ';
  510|      0|    }
  511|    339|    if (flags & DP_F_NUM) {
  512|      0|        if (base == 8)
  513|      0|            prefix = "0";
  514|      0|        if (base == 16)
  515|      0|            prefix = "0x";
  516|      0|    }
  517|    339|    if (flags & DP_F_UP)
  518|     48|        caps = 1;
  519|    388|    do {
  520|    388|        convert[place++] = (caps ? "0123456789ABCDEF" : "0123456789abcdef")
  521|    388|            [uvalue % (unsigned)base];
  522|    388|        uvalue = (uvalue / (unsigned)base);
  523|    388|    } while (uvalue && (place < (int)sizeof(convert)));
  524|    339|    if (place == sizeof(convert))
  525|      0|        place--;
  526|    339|    convert[place] = 0;
  527|       |
  528|    339|    zpadlen = max - place;
  529|    339|    spadlen =
  530|    339|        min - OSSL_MAX(max, place) - (signvalue ? 1 : 0) - strlen(prefix);
  531|    339|    if (zpadlen < 0)
  532|    339|        zpadlen = 0;
  533|    339|    if (spadlen < 0)
  534|    291|        spadlen = 0;
  535|    339|    if (flags & DP_F_ZERO) {
  536|     48|        zpadlen = OSSL_MAX(zpadlen, spadlen);
  537|     48|        spadlen = 0;
  538|     48|    }
  539|    339|    if (flags & DP_F_MINUS)
  540|      0|        spadlen = -spadlen;
  541|       |
  542|       |    /* spaces */
  543|    339|    while (spadlen > 0) {
  544|      0|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))
  545|      0|            return 0;
  546|      0|        --spadlen;
  547|      0|    }
  548|       |
  549|       |    /* sign */
  550|    339|    if (signvalue)
  551|      0|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))
  552|      0|            return 0;
  553|       |
  554|       |    /* prefix */
  555|    339|    while (*prefix) {
  556|      0|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix))
  557|      0|            return 0;
  558|      0|        prefix++;
  559|      0|    }
  560|       |
  561|       |    /* zeros */
  562|    339|    if (zpadlen > 0) {
  563|    384|        while (zpadlen > 0) {
  564|    336|            if(!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))
  565|      0|                return 0;
  566|    336|            --zpadlen;
  567|    336|        }
  568|     48|    }
  569|       |    /* digits */
  570|    727|    while (place > 0) {
  571|    388|        if (!doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]))
  572|      0|            return 0;
  573|    388|    }
  574|       |
  575|       |    /* left justified spaces */
  576|    339|    while (spadlen < 0) {
  577|      0|        if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))
  578|      0|            return 0;
  579|      0|        ++spadlen;
  580|      0|    }
  581|    339|    return 1;
  582|    339|}
b_print.c:fmtstr:
  446|    144|{
  447|    144|    int padlen;
  448|    144|    size_t strln;
  449|    144|    int cnt = 0;
  450|       |
  451|    144|    if (value == 0)
  452|      0|        value = "<NULL>";
  453|       |
  454|    144|    strln = strlen(value);
  455|    144|    if (strln > INT_MAX)
  456|      0|        strln = INT_MAX;
  457|       |
  458|    144|    padlen = min - strln;
  459|    144|    if (min < 0 || padlen < 0)
  460|    144|        padlen = 0;
  461|    144|    if (flags & DP_F_MINUS)
  462|      0|        padlen = -padlen;
  463|       |
  464|    144|    while ((padlen > 0) && (cnt < max)) {
  465|      0|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))
  466|      0|            return 0;
  467|      0|        --padlen;
  468|      0|        ++cnt;
  469|      0|    }
  470|  1.20k|    while (*value && (cnt < max)) {
  471|  1.05k|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *value++))
  472|      0|            return 0;
  473|  1.05k|        ++cnt;
  474|  1.05k|    }
  475|    144|    while ((padlen < 0) && (cnt < max)) {
  476|      0|        if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))
  477|      0|            return 0;
  478|      0|        ++padlen;
  479|      0|        ++cnt;
  480|      0|    }
  481|    144|    return 1;
  482|    144|}

ERR_load_BIO_strings:
  149|      1|{
  150|      1|#ifndef OPENSSL_NO_ERR
  151|       |
  152|      1|    if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
  153|      1|        ERR_load_strings(0, BIO_str_functs);
  154|      1|        ERR_load_strings(0, BIO_str_reasons);
  155|      1|    }
  156|      1|#endif
  157|      1|}

BIO_new:
   67|    147|{
   68|    147|    BIO *ret = NULL;
   69|       |
   70|    147|    ret = (BIO *)OPENSSL_malloc(sizeof(BIO));
   71|    147|    if (ret == NULL) {
   72|      0|        BIOerr(BIO_F_BIO_NEW, ERR_R_MALLOC_FAILURE);
   73|      0|        return (NULL);
   74|      0|    }
   75|    147|    if (!BIO_set(ret, method)) {
   76|      0|        OPENSSL_free(ret);
   77|      0|        ret = NULL;
   78|      0|    }
   79|    147|    return (ret);
   80|    147|}
BIO_set:
   83|    147|{
   84|    147|    bio->method = method;
   85|    147|    bio->callback = NULL;
   86|    147|    bio->cb_arg = NULL;
   87|    147|    bio->init = 0;
   88|    147|    bio->shutdown = 1;
   89|    147|    bio->flags = 0;
   90|    147|    bio->retry_reason = 0;
   91|    147|    bio->num = 0;
   92|    147|    bio->ptr = NULL;
   93|    147|    bio->prev_bio = NULL;
   94|    147|    bio->next_bio = NULL;
   95|    147|    bio->references = 1;
   96|    147|    bio->num_read = 0L;
   97|    147|    bio->num_write = 0L;
   98|    147|    CRYPTO_new_ex_data(CRYPTO_EX_INDEX_BIO, bio, &bio->ex_data);
   99|    147|    if (method->create != NULL)
  100|    147|        if (!method->create(bio)) {
  101|      0|            CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, bio, &bio->ex_data);
  102|      0|            return (0);
  103|      0|        }
  104|    147|    return (1);
  105|    147|}
BIO_free:
  108|    147|{
  109|    147|    int i;
  110|       |
  111|    147|    if (a == NULL)
  112|      0|        return (0);
  113|       |
  114|    147|    i = CRYPTO_add(&a->references, -1, CRYPTO_LOCK_BIO);
  115|       |#ifdef REF_PRINT
  116|       |    REF_PRINT("BIO", a);
  117|       |#endif
  118|    147|    if (i > 0)
  119|      0|        return (1);
  120|       |#ifdef REF_CHECK
  121|       |    if (i < 0) {
  122|       |        fprintf(stderr, "BIO_free, bad reference count\n");
  123|       |        abort();
  124|       |    }
  125|       |#endif
  126|    147|    if ((a->callback != NULL) &&
  127|    147|        ((i = (int)a->callback(a, BIO_CB_FREE, NULL, 0, 0L, 1L)) <= 0))
  128|      0|        return (i);
  129|       |
  130|    147|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, a, &a->ex_data);
  131|       |
  132|    147|    if ((a->method != NULL) && (a->method->destroy != NULL))
  133|    147|        a->method->destroy(a);
  134|    147|    OPENSSL_free(a);
  135|    147|    return (1);
  136|    147|}
BIO_clear_flags:
  144|    245|{
  145|    245|    b->flags &= ~flags;
  146|    245|}
BIO_test_flags:
  149|      1|{
  150|      1|    return (b->flags & flags);
  151|      1|}
BIO_set_flags:
  154|      2|{
  155|      2|    b->flags |= flags;
  156|      2|}
BIO_read:
  191|     98|{
  192|     98|    int i;
  193|     98|    long (*cb) (BIO *, int, const char *, int, long, long);
  194|       |
  195|     98|    if ((b == NULL) || (b->method == NULL) || (b->method->bread == NULL)) {
  196|      0|        BIOerr(BIO_F_BIO_READ, BIO_R_UNSUPPORTED_METHOD);
  197|      0|        return (-2);
  198|      0|    }
  199|       |
  200|     98|    cb = b->callback;
  201|     98|    if ((cb != NULL) &&
  202|     98|        ((i = (int)cb(b, BIO_CB_READ, out, outl, 0L, 1L)) <= 0))
  203|      0|        return (i);
  204|       |
  205|     98|    if (!b->init) {
  206|      0|        BIOerr(BIO_F_BIO_READ, BIO_R_UNINITIALIZED);
  207|      0|        return (-2);
  208|      0|    }
  209|       |
  210|     98|    i = b->method->bread(b, out, outl);
  211|       |
  212|     98|    if (i > 0)
  213|      0|        b->num_read += (unsigned long)i;
  214|       |
  215|     98|    if (cb != NULL)
  216|      0|        i = (int)cb(b, BIO_CB_READ | BIO_CB_RETURN, out, outl, 0L, (long)i);
  217|     98|    return (i);
  218|     98|}
BIO_write:
  221|     98|{
  222|     98|    int i;
  223|     98|    long (*cb) (BIO *, int, const char *, int, long, long);
  224|       |
  225|     98|    if (b == NULL)
  226|      0|        return (0);
  227|       |
  228|     98|    cb = b->callback;
  229|     98|    if ((b->method == NULL) || (b->method->bwrite == NULL)) {
  230|      0|        BIOerr(BIO_F_BIO_WRITE, BIO_R_UNSUPPORTED_METHOD);
  231|      0|        return (-2);
  232|      0|    }
  233|       |
  234|     98|    if ((cb != NULL) &&
  235|     98|        ((i = (int)cb(b, BIO_CB_WRITE, in, inl, 0L, 1L)) <= 0))
  236|      0|        return (i);
  237|       |
  238|     98|    if (!b->init) {
  239|      0|        BIOerr(BIO_F_BIO_WRITE, BIO_R_UNINITIALIZED);
  240|      0|        return (-2);
  241|      0|    }
  242|       |
  243|     98|    i = b->method->bwrite(b, in, inl);
  244|       |
  245|     98|    if (i > 0)
  246|     98|        b->num_write += (unsigned long)i;
  247|       |
  248|     98|    if (cb != NULL)
  249|      0|        i = (int)cb(b, BIO_CB_WRITE | BIO_CB_RETURN, in, inl, 0L, (long)i);
  250|     98|    return (i);
  251|     98|}
BIO_gets:
  284|   160k|{
  285|   160k|    int i;
  286|   160k|    long (*cb) (BIO *, int, const char *, int, long, long);
  287|       |
  288|   160k|    if ((b == NULL) || (b->method == NULL) || (b->method->bgets == NULL)) {
  289|      0|        BIOerr(BIO_F_BIO_GETS, BIO_R_UNSUPPORTED_METHOD);
  290|      0|        return (-2);
  291|      0|    }
  292|       |
  293|   160k|    cb = b->callback;
  294|       |
  295|   160k|    if ((cb != NULL) && ((i = (int)cb(b, BIO_CB_GETS, in, inl, 0L, 1L)) <= 0))
  296|      0|        return (i);
  297|       |
  298|   160k|    if (!b->init) {
  299|      0|        BIOerr(BIO_F_BIO_GETS, BIO_R_UNINITIALIZED);
  300|      0|        return (-2);
  301|      0|    }
  302|       |
  303|   160k|    i = b->method->bgets(b, in, inl);
  304|       |
  305|   160k|    if (cb != NULL)
  306|      0|        i = (int)cb(b, BIO_CB_GETS | BIO_CB_RETURN, in, inl, 0L, (long)i);
  307|   160k|    return (i);
  308|   160k|}
BIO_int_ctrl:
  323|     49|{
  324|     49|    int i;
  325|       |
  326|     49|    i = iarg;
  327|     49|    return (BIO_ctrl(b, cmd, larg, (char *)&i));
  328|     49|}
BIO_ctrl:
  341|    147|{
  342|    147|    long ret;
  343|    147|    long (*cb) (BIO *, int, const char *, int, long, long);
  344|       |
  345|    147|    if (b == NULL)
  346|      0|        return (0);
  347|       |
  348|    147|    if ((b->method == NULL) || (b->method->ctrl == NULL)) {
  349|      0|        BIOerr(BIO_F_BIO_CTRL, BIO_R_UNSUPPORTED_METHOD);
  350|      0|        return (-2);
  351|      0|    }
  352|       |
  353|    147|    cb = b->callback;
  354|       |
  355|    147|    if ((cb != NULL) &&
  356|    147|        ((ret = cb(b, BIO_CB_CTRL, parg, cmd, larg, 1L)) <= 0))
  357|      0|        return (ret);
  358|       |
  359|    147|    ret = b->method->ctrl(b, cmd, larg, parg);
  360|       |
  361|    147|    if (cb != NULL)
  362|      0|        ret = cb(b, BIO_CB_CTRL | BIO_CB_RETURN, parg, cmd, larg, ret);
  363|    147|    return (ret);
  364|    147|}
BIO_free_all:
  501|     49|{
  502|     49|    BIO *b;
  503|     49|    int ref;
  504|       |
  505|     98|    while (bio != NULL) {
  506|     49|        b = bio;
  507|     49|        ref = b->references;
  508|     49|        bio = bio->next_bio;
  509|     49|        BIO_free(b);
  510|       |        /* Since ref count > 1, don't free anyone else. */
  511|     49|        if (ref > 1)
  512|      0|            break;
  513|     49|    }
  514|     49|}

BIO_new_file:
  170|     50|{
  171|     50|    BIO  *ret;
  172|     50|    FILE *file = file_fopen(filename, mode);
  173|       |
  174|     50|    if (file == NULL) {
  175|      1|        SYSerr(SYS_F_FOPEN, get_last_sys_error());
  176|      1|        ERR_add_error_data(5, "fopen('", filename, "','", mode, "')");
  177|      1|        if (errno == ENOENT
  178|      1|# ifdef ENXIO
  179|      1|            || errno == ENXIO
  180|      1|# endif
  181|      1|            )
  182|      1|            BIOerr(BIO_F_BIO_NEW_FILE, BIO_R_NO_SUCH_FILE);
  183|      0|        else
  184|      1|            BIOerr(BIO_F_BIO_NEW_FILE, ERR_R_SYS_LIB);
  185|      1|        return (NULL);
  186|      1|    }
  187|     49|    if ((ret = BIO_new(BIO_s_file())) == NULL) {
  188|      0|        fclose(file);
  189|      0|        return (NULL);
  190|      0|    }
  191|       |
  192|     49|    BIO_clear_flags(ret, BIO_FLAGS_UPLINK); /* we did fopen -> we disengage
  193|       |                                             * UPLINK */
  194|     49|    BIO_set_fp(ret, file, BIO_CLOSE);
  195|     49|    return (ret);
  196|     49|}
BIO_s_file:
  212|     49|{
  213|     49|    return (&methods_filep);
  214|     49|}
bss_file.c:file_fopen:
  119|     50|{
  120|     50|    FILE *file = NULL;
  121|       |
  122|       |#  if defined(_WIN32) && defined(CP_UTF8)
  123|       |    int sz, len_0 = (int)strlen(filename) + 1;
  124|       |    DWORD flags;
  125|       |
  126|       |    /*
  127|       |     * Basically there are three cases to cover: a) filename is
  128|       |     * pure ASCII string; b) actual UTF-8 encoded string and
  129|       |     * c) locale-ized string, i.e. one containing 8-bit
  130|       |     * characters that are meaningful in current system locale.
  131|       |     * If filename is pure ASCII or real UTF-8 encoded string,
  132|       |     * MultiByteToWideChar succeeds and _wfopen works. If
  133|       |     * filename is locale-ized string, chances are that
  134|       |     * MultiByteToWideChar fails reporting
  135|       |     * ERROR_NO_UNICODE_TRANSLATION, in which case we fall
  136|       |     * back to fopen...
  137|       |     */
  138|       |    if ((sz = MultiByteToWideChar(CP_UTF8, (flags = MB_ERR_INVALID_CHARS),
  139|       |                                  filename, len_0, NULL, 0)) > 0 ||
  140|       |        (GetLastError() == ERROR_INVALID_FLAGS &&
  141|       |         (sz = MultiByteToWideChar(CP_UTF8, (flags = 0),
  142|       |                                   filename, len_0, NULL, 0)) > 0)
  143|       |        ) {
  144|       |        WCHAR wmode[8];
  145|       |        WCHAR *wfilename = _alloca(sz * sizeof(WCHAR));
  146|       |
  147|       |        if (MultiByteToWideChar(CP_UTF8, flags,
  148|       |                                filename, len_0, wfilename, sz) &&
  149|       |            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
  150|       |                                wmode, sizeof(wmode) / sizeof(wmode[0])) &&
  151|       |            (file = _wfopen(wfilename, wmode)) == NULL &&
  152|       |            (errno == ENOENT || errno == EBADF)
  153|       |            ) {
  154|       |            /*
  155|       |             * UTF-8 decode succeeded, but no file, filename
  156|       |             * could still have been locale-ized...
  157|       |             */
  158|       |            file = fopen(filename, mode);
  159|       |        }
  160|       |    } else if (GetLastError() == ERROR_NO_UNICODE_TRANSLATION) {
  161|       |        file = fopen(filename, mode);
  162|       |    }
  163|       |#  else
  164|     50|    file = fopen(filename, mode);
  165|     50|#  endif
  166|     50|    return (file);
  167|     50|}
bss_file.c:file_gets:
  456|   160k|{
  457|   160k|    int ret = 0;
  458|       |
  459|   160k|    buf[0] = '\0';
  460|   160k|    if (bp->flags & BIO_FLAGS_UPLINK) {
  461|      0|        if (!UP_fgets(buf, size, bp->ptr))
  462|      0|            goto err;
  463|   160k|    } else {
  464|   160k|        if (!fgets(buf, size, (FILE *)bp->ptr))
  465|     49|            goto err;
  466|   160k|    }
  467|   160k|    if (buf[0] != '\0')
  468|   160k|        ret = strlen(buf);
  469|   160k| err:
  470|   160k|    return (ret);
  471|   160k|}
bss_file.c:file_ctrl:
  285|     49|{
  286|     49|    long ret = 1;
  287|     49|    FILE *fp = (FILE *)b->ptr;
  288|     49|    FILE **fpp;
  289|     49|    char p[4];
  290|     49|    int st;
  291|       |
  292|     49|    switch (cmd) {
  293|      0|    case BIO_C_FILE_SEEK:
  294|      0|    case BIO_CTRL_RESET:
  295|      0|        if (b->flags & BIO_FLAGS_UPLINK)
  296|      0|            ret = (long)UP_fseek(b->ptr, num, 0);
  297|      0|        else
  298|      0|            ret = (long)fseek(fp, num, 0);
  299|      0|        break;
  300|      0|    case BIO_CTRL_EOF:
  301|      0|        if (b->flags & BIO_FLAGS_UPLINK)
  302|      0|            ret = (long)UP_feof(fp);
  303|      0|        else
  304|      0|            ret = (long)feof(fp);
  305|      0|        break;
  306|      0|    case BIO_C_FILE_TELL:
  307|      0|    case BIO_CTRL_INFO:
  308|      0|        if (b->flags & BIO_FLAGS_UPLINK)
  309|      0|            ret = UP_ftell(b->ptr);
  310|      0|        else
  311|      0|            ret = ftell(fp);
  312|      0|        break;
  313|     49|    case BIO_C_SET_FILE_PTR:
  314|     49|        file_free(b);
  315|     49|        b->shutdown = (int)num & BIO_CLOSE;
  316|     49|        b->ptr = ptr;
  317|     49|        b->init = 1;
  318|       |#  if BIO_FLAGS_UPLINK!=0
  319|       |#   if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)
  320|       |#    define _IOB_ENTRIES 20
  321|       |#   endif
  322|       |        /* Safety net to catch purely internal BIO_set_fp calls */
  323|       |#   if defined(_MSC_VER) && _MSC_VER>=1900
  324|       |        if (ptr == stdin || ptr == stdout || ptr == stderr)
  325|       |            BIO_clear_flags(b, BIO_FLAGS_UPLINK);
  326|       |#   elif defined(_IOB_ENTRIES)
  327|       |        if ((size_t)ptr >= (size_t)stdin &&
  328|       |            (size_t)ptr < (size_t)(stdin + _IOB_ENTRIES))
  329|       |            BIO_clear_flags(b, BIO_FLAGS_UPLINK);
  330|       |#   endif
  331|       |#  endif
  332|       |#  ifdef UP_fsetmod
  333|       |        if (b->flags & BIO_FLAGS_UPLINK)
  334|       |            UP_fsetmod(b->ptr, (char)((num & BIO_FP_TEXT) ? 't' : 'b'));
  335|       |        else
  336|       |#  endif
  337|     49|        {
  338|       |#  if defined(OPENSSL_SYS_WINDOWS)
  339|       |            int fd = _fileno((FILE *)ptr);
  340|       |            if (num & BIO_FP_TEXT)
  341|       |                _setmode(fd, _O_TEXT);
  342|       |            else
  343|       |                _setmode(fd, _O_BINARY);
  344|       |#  elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)
  345|       |            int fd = fileno((FILE *)ptr);
  346|       |            /* Under CLib there are differences in file modes */
  347|       |            if (num & BIO_FP_TEXT)
  348|       |                setmode(fd, O_TEXT);
  349|       |            else
  350|       |                setmode(fd, O_BINARY);
  351|       |#  elif defined(OPENSSL_SYS_MSDOS)
  352|       |            int fd = fileno((FILE *)ptr);
  353|       |            /* Set correct text/binary mode */
  354|       |            if (num & BIO_FP_TEXT)
  355|       |                _setmode(fd, _O_TEXT);
  356|       |            /* Dangerous to set stdin/stdout to raw (unless redirected) */
  357|       |            else {
  358|       |                if (fd == STDIN_FILENO || fd == STDOUT_FILENO) {
  359|       |                    if (isatty(fd) <= 0)
  360|       |                        _setmode(fd, _O_BINARY);
  361|       |                } else
  362|       |                    _setmode(fd, _O_BINARY);
  363|       |            }
  364|       |#  elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)
  365|       |            int fd = fileno((FILE *)ptr);
  366|       |            if (num & BIO_FP_TEXT)
  367|       |                setmode(fd, O_TEXT);
  368|       |            else
  369|       |                setmode(fd, O_BINARY);
  370|       |#  endif
  371|     49|        }
  372|     49|        break;
  373|      0|    case BIO_C_SET_FILENAME:
  374|      0|        file_free(b);
  375|      0|        b->shutdown = (int)num & BIO_CLOSE;
  376|      0|        if (num & BIO_FP_APPEND) {
  377|      0|            if (num & BIO_FP_READ)
  378|      0|                BUF_strlcpy(p, "a+", sizeof p);
  379|      0|            else
  380|      0|                BUF_strlcpy(p, "a", sizeof p);
  381|      0|        } else if ((num & BIO_FP_READ) && (num & BIO_FP_WRITE))
  382|      0|            BUF_strlcpy(p, "r+", sizeof p);
  383|      0|        else if (num & BIO_FP_WRITE)
  384|      0|            BUF_strlcpy(p, "w", sizeof p);
  385|      0|        else if (num & BIO_FP_READ)
  386|      0|            BUF_strlcpy(p, "r", sizeof p);
  387|      0|        else {
  388|      0|            BIOerr(BIO_F_FILE_CTRL, BIO_R_BAD_FOPEN_MODE);
  389|      0|            ret = 0;
  390|      0|            break;
  391|      0|        }
  392|       |#  if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)
  393|       |        if (!(num & BIO_FP_TEXT))
  394|       |            strcat(p, "b");
  395|       |        else
  396|       |            strcat(p, "t");
  397|       |#  endif
  398|       |#  if defined(OPENSSL_SYS_NETWARE)
  399|       |        if (!(num & BIO_FP_TEXT))
  400|       |            strcat(p, "b");
  401|       |        else
  402|       |            strcat(p, "t");
  403|       |#  endif
  404|      0|        fp = file_fopen(ptr, p);
  405|      0|        if (fp == NULL) {
  406|      0|            SYSerr(SYS_F_FOPEN, get_last_sys_error());
  407|      0|            ERR_add_error_data(5, "fopen('", ptr, "','", p, "')");
  408|      0|            BIOerr(BIO_F_FILE_CTRL, ERR_R_SYS_LIB);
  409|      0|            ret = 0;
  410|      0|            break;
  411|      0|        }
  412|      0|        b->ptr = fp;
  413|      0|        b->init = 1;
  414|      0|        BIO_clear_flags(b, BIO_FLAGS_UPLINK); /* we did fopen -> we disengage
  415|       |                                               * UPLINK */
  416|      0|        break;
  417|      0|    case BIO_C_GET_FILE_PTR:
  418|       |        /* the ptr parameter is actually a FILE ** in this case. */
  419|      0|        if (ptr != NULL) {
  420|      0|            fpp = (FILE **)ptr;
  421|      0|            *fpp = (FILE *)b->ptr;
  422|      0|        }
  423|      0|        break;
  424|      0|    case BIO_CTRL_GET_CLOSE:
  425|      0|        ret = (long)b->shutdown;
  426|      0|        break;
  427|      0|    case BIO_CTRL_SET_CLOSE:
  428|      0|        b->shutdown = (int)num;
  429|      0|        break;
  430|      0|    case BIO_CTRL_FLUSH:
  431|      0|        st = b->flags & BIO_FLAGS_UPLINK
  432|      0|                ? UP_fflush(b->ptr) : fflush((FILE *)b->ptr);
  433|      0|        if (st == EOF) {
  434|      0|            SYSerr(SYS_F_FFLUSH, get_last_sys_error());
  435|      0|            ERR_add_error_data(1, "fflush()");
  436|      0|            BIOerr(BIO_F_FILE_CTRL, ERR_R_SYS_LIB);
  437|      0|            ret = 0;
  438|      0|        }
  439|      0|        break;
  440|      0|    case BIO_CTRL_DUP:
  441|      0|        ret = 1;
  442|      0|        break;
  443|       |
  444|      0|    case BIO_CTRL_WPENDING:
  445|      0|    case BIO_CTRL_PENDING:
  446|      0|    case BIO_CTRL_PUSH:
  447|      0|    case BIO_CTRL_POP:
  448|      0|    default:
  449|      0|        ret = 0;
  450|      0|        break;
  451|     49|    }
  452|     49|    return (ret);
  453|     49|}
bss_file.c:file_new:
  217|     49|{
  218|     49|    bi->init = 0;
  219|     49|    bi->num = 0;
  220|     49|    bi->ptr = NULL;
  221|     49|    bi->flags = BIO_FLAGS_UPLINK; /* default to UPLINK */
  222|     49|    return (1);
  223|     49|}
bss_file.c:file_free:
  226|     98|{
  227|     98|    if (a == NULL)
  228|      0|        return (0);
  229|     98|    if (a->shutdown) {
  230|     98|        if ((a->init) && (a->ptr != NULL)) {
  231|     49|            if (a->flags & BIO_FLAGS_UPLINK)
  232|      0|                UP_fclose(a->ptr);
  233|     49|            else
  234|     49|                fclose(a->ptr);
  235|     49|            a->ptr = NULL;
  236|     49|            a->flags = BIO_FLAGS_UPLINK;
  237|     49|        }
  238|     98|        a->init = 0;
  239|     98|    }
  240|     98|    return (1);
  241|     98|}

BIO_s_mem:
   90|     49|{
   91|     49|    return (&mem_method);
   92|     49|}
bss_mem.c:mem_write:
  174|     49|{
  175|     49|    int ret = -1;
  176|     49|    int blen;
  177|     49|    BUF_MEM *bm;
  178|       |
  179|     49|    bm = (BUF_MEM *)b->ptr;
  180|     49|    if (in == NULL) {
  181|      0|        BIOerr(BIO_F_MEM_WRITE, BIO_R_NULL_PARAMETER);
  182|      0|        goto end;
  183|      0|    }
  184|       |
  185|     49|    if (b->flags & BIO_FLAGS_MEM_RDONLY) {
  186|      0|        BIOerr(BIO_F_MEM_WRITE, BIO_R_WRITE_TO_READ_ONLY_BIO);
  187|      0|        goto end;
  188|      0|    }
  189|       |
  190|     49|    BIO_clear_retry_flags(b);
  191|     49|    blen = bm->length;
  192|     49|    if (BUF_MEM_grow_clean(bm, blen + inl) != (blen + inl))
  193|      0|        goto end;
  194|     49|    memcpy(&(bm->data[blen]), in, inl);
  195|     49|    ret = inl;
  196|     49| end:
  197|     49|    return (ret);
  198|     49|}
bss_mem.c:mem_ctrl:
  201|     49|{
  202|     49|    long ret = 1;
  203|     49|    char **pptr;
  204|       |
  205|     49|    BUF_MEM *bm = (BUF_MEM *)b->ptr;
  206|       |
  207|     49|    switch (cmd) {
  208|      0|    case BIO_CTRL_RESET:
  209|      0|        if (bm->data != NULL) {
  210|       |            /* For read only case reset to the start again */
  211|      0|            if (b->flags & BIO_FLAGS_MEM_RDONLY) {
  212|      0|                bm->data -= bm->max - bm->length;
  213|      0|                bm->length = bm->max;
  214|      0|            } else {
  215|      0|                memset(bm->data, 0, bm->max);
  216|      0|                bm->length = 0;
  217|      0|            }
  218|      0|        }
  219|      0|        break;
  220|      0|    case BIO_CTRL_EOF:
  221|      0|        ret = (long)(bm->length == 0);
  222|      0|        break;
  223|      0|    case BIO_C_SET_BUF_MEM_EOF_RETURN:
  224|      0|        b->num = (int)num;
  225|      0|        break;
  226|      0|    case BIO_CTRL_INFO:
  227|      0|        ret = (long)bm->length;
  228|      0|        if (ptr != NULL) {
  229|      0|            pptr = (char **)ptr;
  230|      0|            *pptr = (char *)&(bm->data[0]);
  231|      0|        }
  232|      0|        break;
  233|      0|    case BIO_C_SET_BUF_MEM:
  234|      0|        mem_free(b);
  235|      0|        b->shutdown = (int)num;
  236|      0|        b->ptr = ptr;
  237|      0|        break;
  238|      0|    case BIO_C_GET_BUF_MEM_PTR:
  239|      0|        if (ptr != NULL) {
  240|      0|            pptr = (char **)ptr;
  241|      0|            *pptr = (char *)bm;
  242|      0|        }
  243|      0|        break;
  244|      0|    case BIO_CTRL_GET_CLOSE:
  245|      0|        ret = (long)b->shutdown;
  246|      0|        break;
  247|     49|    case BIO_CTRL_SET_CLOSE:
  248|     49|        b->shutdown = (int)num;
  249|     49|        break;
  250|       |
  251|      0|    case BIO_CTRL_WPENDING:
  252|      0|        ret = 0L;
  253|      0|        break;
  254|      0|    case BIO_CTRL_PENDING:
  255|      0|        ret = (long)bm->length;
  256|      0|        break;
  257|      0|    case BIO_CTRL_DUP:
  258|      0|    case BIO_CTRL_FLUSH:
  259|      0|        ret = 1;
  260|      0|        break;
  261|      0|    case BIO_CTRL_PUSH:
  262|      0|    case BIO_CTRL_POP:
  263|      0|    default:
  264|      0|        ret = 0;
  265|      0|        break;
  266|     49|    }
  267|     49|    return (ret);
  268|     49|}
bss_mem.c:mem_new:
  120|     49|{
  121|     49|    BUF_MEM *b;
  122|       |
  123|     49|    if ((b = BUF_MEM_new()) == NULL)
  124|      0|        return (0);
  125|     49|    bi->shutdown = 1;
  126|     49|    bi->init = 1;
  127|     49|    bi->num = -1;
  128|     49|    bi->ptr = (char *)b;
  129|     49|    return (1);
  130|     49|}
bss_mem.c:mem_free:
  133|     49|{
  134|     49|    if (a == NULL)
  135|      0|        return (0);
  136|     49|    if (a->shutdown) {
  137|     49|        if ((a->init) && (a->ptr != NULL)) {
  138|     49|            BUF_MEM *b;
  139|     49|            b = (BUF_MEM *)a->ptr;
  140|     49|            if (a->flags & BIO_FLAGS_MEM_RDONLY)
  141|      0|                b->data = NULL;
  142|     49|            BUF_MEM_free(b);
  143|     49|            a->ptr = NULL;
  144|     49|        }
  145|     49|    }
  146|     49|    return (1);
  147|     49|}

BIO_s_socket:
   96|     49|{
   97|     49|    return (&methods_sockp);
   98|     49|}
BIO_sock_should_retry:
  212|     98|{
  213|     98|    int err;
  214|       |
  215|     98|    if ((i == 0) || (i == -1)) {
  216|     98|        err = get_last_socket_error();
  217|       |
  218|       |# if defined(OPENSSL_SYS_WINDOWS) && 0/* more microsoft stupidity? perhaps
  219|       |                                       * not? Ben 4/1/99 */
  220|       |        if ((i == -1) && (err == 0))
  221|       |            return (1);
  222|       |# endif
  223|       |
  224|     98|        return (BIO_sock_non_fatal_error(err));
  225|     98|    }
  226|      0|    return (0);
  227|     98|}
BIO_sock_non_fatal_error:
  230|     98|{
  231|     98|    switch (err) {
  232|       |# if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_NETWARE)
  233|       |#  if defined(WSAEWOULDBLOCK)
  234|       |    case WSAEWOULDBLOCK:
  235|       |#  endif
  236|       |
  237|       |#  if 0                         /* This appears to always be an error */
  238|       |#   if defined(WSAENOTCONN)
  239|       |    case WSAENOTCONN:
  240|       |#   endif
  241|       |#  endif
  242|       |# endif
  243|       |
  244|      0|# ifdef EWOULDBLOCK
  245|       |#  ifdef WSAEWOULDBLOCK
  246|       |#   if WSAEWOULDBLOCK != EWOULDBLOCK
  247|       |    case EWOULDBLOCK:
  248|       |#   endif
  249|       |#  else
  250|      2|    case EWOULDBLOCK:
  251|      2|#  endif
  252|      2|# endif
  253|       |
  254|      2|# if defined(ENOTCONN)
  255|      2|    case ENOTCONN:
  256|      2|# endif
  257|       |
  258|      2|# ifdef EINTR
  259|      2|    case EINTR:
  260|      2|# endif
  261|       |
  262|      2|# ifdef EAGAIN
  263|       |#  if EWOULDBLOCK != EAGAIN
  264|       |    case EAGAIN:
  265|       |#  endif
  266|      2|# endif
  267|       |
  268|      2|# ifdef EPROTO
  269|      2|    case EPROTO:
  270|      2|# endif
  271|       |
  272|      2|# ifdef EINPROGRESS
  273|      2|    case EINPROGRESS:
  274|      2|# endif
  275|       |
  276|      2|# ifdef EALREADY
  277|      2|    case EALREADY:
  278|      2|# endif
  279|      2|        return (1);
  280|       |        /* break; */
  281|     96|    default:
  282|     96|        break;
  283|     98|    }
  284|     96|    return (0);
  285|     98|}
bss_sock.c:sock_write:
  151|     49|{
  152|     49|    int ret;
  153|       |
  154|     49|    clear_socket_error();
  155|     49|    ret = writesocket(b->num, in, inl);
  156|     49|    BIO_clear_retry_flags(b);
  157|     49|    if (ret <= 0) {
  158|      0|        if (BIO_sock_should_retry(ret))
  159|      0|            BIO_set_retry_write(b);
  160|      0|    }
  161|     49|    return (ret);
  162|     49|}
bss_sock.c:sock_read:
  135|     98|{
  136|     98|    int ret = 0;
  137|       |
  138|     98|    if (out != NULL) {
  139|     98|        clear_socket_error();
  140|     98|        ret = readsocket(b->num, out, outl);
  141|     98|        BIO_clear_retry_flags(b);
  142|     98|        if (ret <= 0) {
  143|     98|            if (BIO_sock_should_retry(ret))
  144|      2|                BIO_set_retry_read(b);
  145|     98|        }
  146|     98|    }
  147|     98|    return (ret);
  148|     98|}
bss_sock.c:sock_ctrl:
  165|     49|{
  166|     49|    long ret = 1;
  167|     49|    int *ip;
  168|       |
  169|     49|    switch (cmd) {
  170|     49|    case BIO_C_SET_FD:
  171|     49|        sock_free(b);
  172|     49|        b->num = *((int *)ptr);
  173|     49|        b->shutdown = (int)num;
  174|     49|        b->init = 1;
  175|     49|        break;
  176|      0|    case BIO_C_GET_FD:
  177|      0|        if (b->init) {
  178|      0|            ip = (int *)ptr;
  179|      0|            if (ip != NULL)
  180|      0|                *ip = b->num;
  181|      0|            ret = b->num;
  182|      0|        } else
  183|      0|            ret = -1;
  184|      0|        break;
  185|      0|    case BIO_CTRL_GET_CLOSE:
  186|      0|        ret = b->shutdown;
  187|      0|        break;
  188|      0|    case BIO_CTRL_SET_CLOSE:
  189|      0|        b->shutdown = (int)num;
  190|      0|        break;
  191|      0|    case BIO_CTRL_DUP:
  192|      0|    case BIO_CTRL_FLUSH:
  193|      0|        ret = 1;
  194|      0|        break;
  195|      0|    default:
  196|      0|        ret = 0;
  197|      0|        break;
  198|     49|    }
  199|     49|    return (ret);
  200|     49|}
bss_sock.c:sock_new:
  112|     49|{
  113|     49|    bi->init = 0;
  114|     49|    bi->num = 0;
  115|     49|    bi->ptr = NULL;
  116|     49|    bi->flags = 0;
  117|     49|    return (1);
  118|     49|}
bss_sock.c:sock_free:
  121|     98|{
  122|     98|    if (a == NULL)
  123|      0|        return (0);
  124|     98|    if (a->shutdown) {
  125|     49|        if (a->init) {
  126|      0|            SHUTDOWN2(a->num);
  127|      0|        }
  128|     49|        a->init = 0;
  129|     49|        a->flags = 0;
  130|     49|    }
  131|     98|    return (1);
  132|     98|}

ERR_load_BN_strings:
  146|      1|{
  147|      1|#ifndef OPENSSL_NO_ERR
  148|       |
  149|      1|    if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
  150|      1|        ERR_load_strings(0, BN_str_functs);
  151|      1|        ERR_load_strings(0, BN_str_reasons);
  152|      1|    }
  153|      1|#endif
  154|      1|}

BN_free:
  246|    784|{
  247|    784|    if (a == NULL)
  248|    784|        return;
  249|      0|    bn_check_top(a);
  250|      0|    if ((a->d != NULL) && !(BN_get_flags(a, BN_FLG_STATIC_DATA)))
  251|      0|        OPENSSL_free(a->d);
  252|      0|    if (a->flags & BN_FLG_MALLOCED)
  253|      0|        OPENSSL_free(a);
  254|      0|    else {
  255|      0|#ifndef OPENSSL_NO_DEPRECATED
  256|      0|        a->flags |= BN_FLG_FREE;
  257|      0|#endif
  258|      0|        a->d = NULL;
  259|      0|    }
  260|      0|}

ERR_load_BUF_strings:
   89|      1|{
   90|      1|#ifndef OPENSSL_NO_ERR
   91|       |
   92|      1|    if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
   93|      1|        ERR_load_strings(0, BUF_str_functs);
   94|      1|        ERR_load_strings(0, BUF_str_reasons);
   95|      1|    }
   96|      1|#endif
   97|      1|}

BUF_strnlen:
   65|     56|{
   66|     56|    const char *p;
   67|       |
   68|  3.30k|    for (p = str; maxlen-- != 0 && *p != '\0'; ++p) ;
   69|       |
   70|     56|    return p - str;
   71|     56|}
BUF_strdup:
   74|     56|{
   75|     56|    if (str == NULL)
   76|      0|        return NULL;
   77|     56|    return BUF_strndup(str, strlen(str));
   78|     56|}
BUF_strndup:
   81|     56|{
   82|     56|    char *ret;
   83|       |
   84|     56|    if (str == NULL)
   85|      0|        return NULL;
   86|       |
   87|     56|    siz = BUF_strnlen(str, siz);
   88|       |
   89|     56|    if (siz >= INT_MAX)
   90|      0|        return NULL;
   91|       |
   92|     56|    ret = OPENSSL_malloc(siz + 1);
   93|     56|    if (ret == NULL) {
   94|      0|        BUFerr(BUF_F_BUF_STRNDUP, ERR_R_MALLOC_FAILURE);
   95|      0|        return NULL;
   96|      0|    }
   97|       |
   98|     56|    memcpy(ret, str, siz);
   99|     56|    ret[siz] = '\0';
  100|       |
  101|     56|    return (ret);
  102|     56|}
BUF_strlcpy:
  120|    175|{
  121|    175|    size_t l = 0;
  122|  1.02k|    for (; size > 1 && *src; size--) {
  123|    854|        *dst++ = *src++;
  124|    854|        l++;
  125|    854|    }
  126|    175|    if (size)
  127|    175|        *dst = '\0';
  128|    175|    return l + strlen(src);
  129|    175|}
BUF_strlcat:
  132|     23|{
  133|     23|    size_t l = 0;
  134|    435|    for (; size > 0 && *dst; size--, dst++)
  135|    412|        l++;
  136|     23|    return l + BUF_strlcpy(dst, src, size);
  137|     23|}

BUF_MEM_new:
   71|  50.4k|{
   72|  50.4k|    BUF_MEM *ret;
   73|       |
   74|  50.4k|    ret = OPENSSL_malloc(sizeof(BUF_MEM));
   75|  50.4k|    if (ret == NULL) {
   76|      0|        BUFerr(BUF_F_BUF_MEM_NEW, ERR_R_MALLOC_FAILURE);
   77|      0|        return (NULL);
   78|      0|    }
   79|  50.4k|    ret->length = 0;
   80|  50.4k|    ret->max = 0;
   81|  50.4k|    ret->data = NULL;
   82|  50.4k|    return (ret);
   83|  50.4k|}
BUF_MEM_free:
   86|  25.3k|{
   87|  25.3k|    if (a == NULL)
   88|      0|        return;
   89|       |
   90|  25.3k|    if (a->data != NULL) {
   91|  12.6k|        OPENSSL_cleanse(a->data, a->max);
   92|  12.6k|        OPENSSL_free(a->data);
   93|  12.6k|    }
   94|  25.3k|    OPENSSL_free(a);
   95|  25.3k|}
BUF_MEM_grow:
   98|   215k|{
   99|   215k|    char *ret;
  100|   215k|    size_t n;
  101|       |
  102|   215k|    if (str->length >= len) {
  103|  12.5k|        str->length = len;
  104|  12.5k|        return (len);
  105|  12.5k|    }
  106|   202k|    if (str->max >= len) {
  107|   138k|        memset(&str->data[str->length], 0, len - str->length);
  108|   138k|        str->length = len;
  109|   138k|        return (len);
  110|   138k|    }
  111|       |    /* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
  112|  64.2k|    if (len > LIMIT_BEFORE_EXPANSION) {
  113|      0|        BUFerr(BUF_F_BUF_MEM_GROW, ERR_R_MALLOC_FAILURE);
  114|      0|        return 0;
  115|      0|    }
  116|  64.2k|    n = (len + 3) / 3 * 4;
  117|  64.2k|    if (str->data == NULL)
  118|  37.6k|        ret = OPENSSL_malloc(n);
  119|  26.5k|    else
  120|  26.5k|        ret = OPENSSL_realloc(str->data, n);
  121|  64.2k|    if (ret == NULL) {
  122|      0|        BUFerr(BUF_F_BUF_MEM_GROW, ERR_R_MALLOC_FAILURE);
  123|      0|        len = 0;
  124|  64.2k|    } else {
  125|  64.2k|        str->data = ret;
  126|  64.2k|        str->max = n;
  127|  64.2k|        memset(&str->data[str->length], 0, len - str->length);
  128|  64.2k|        str->length = len;
  129|  64.2k|    }
  130|  64.2k|    return (len);
  131|  64.2k|}
BUF_MEM_grow_clean:
  134|     49|{
  135|     49|    char *ret;
  136|     49|    size_t n;
  137|       |
  138|     49|    if (str->length >= len) {
  139|      0|        memset(&str->data[len], 0, str->length - len);
  140|      0|        str->length = len;
  141|      0|        return (len);
  142|      0|    }
  143|     49|    if (str->max >= len) {
  144|      0|        memset(&str->data[str->length], 0, len - str->length);
  145|      0|        str->length = len;
  146|      0|        return (len);
  147|      0|    }
  148|       |    /* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
  149|     49|    if (len > LIMIT_BEFORE_EXPANSION) {
  150|      0|        BUFerr(BUF_F_BUF_MEM_GROW_CLEAN, ERR_R_MALLOC_FAILURE);
  151|      0|        return 0;
  152|      0|    }
  153|     49|    n = (len + 3) / 3 * 4;
  154|     49|    if (str->data == NULL)
  155|     49|        ret = OPENSSL_malloc(n);
  156|      0|    else
  157|      0|        ret = OPENSSL_realloc_clean(str->data, str->max, n);
  158|     49|    if (ret == NULL) {
  159|      0|        BUFerr(BUF_F_BUF_MEM_GROW_CLEAN, ERR_R_MALLOC_FAILURE);
  160|      0|        len = 0;
  161|     49|    } else {
  162|     49|        str->data = ret;
  163|     49|        str->max = n;
  164|     49|        memset(&str->data[str->length], 0, len - str->length);
  165|     49|        str->length = len;
  166|     49|    }
  167|     49|    return (len);
  168|     49|}

ERR_load_CMS_strings:
  301|      1|{
  302|      1|#ifndef OPENSSL_NO_ERR
  303|       |
  304|      1|    if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
  305|      1|        ERR_load_strings(0, CMS_str_functs);
  306|      1|        ERR_load_strings(0, CMS_str_reasons);
  307|      1|    }
  308|      1|#endif
  309|      1|}

COMP_zlib:
  344|      1|{
  345|      1|    COMP_METHOD *meth = &zlib_method_nozlib;
  346|       |
  347|       |#ifdef ZLIB_SHARED
  348|       |    if (!zlib_loaded) {
  349|       |# if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)
  350|       |        zlib_dso = DSO_load(NULL, "ZLIB1", NULL, 0);
  351|       |# else
  352|       |        zlib_dso = DSO_load(NULL, "z", NULL, 0);
  353|       |# endif
  354|       |        if (zlib_dso != NULL) {
  355|       |            p_compress = (compress_ft) DSO_bind_func(zlib_dso, "compress");
  356|       |            p_inflateEnd
  357|       |                = (inflateEnd_ft) DSO_bind_func(zlib_dso, "inflateEnd");
  358|       |            p_inflate = (inflate_ft) DSO_bind_func(zlib_dso, "inflate");
  359|       |            p_inflateInit_
  360|       |                = (inflateInit__ft) DSO_bind_func(zlib_dso, "inflateInit_");
  361|       |            p_deflateEnd
  362|       |                = (deflateEnd_ft) DSO_bind_func(zlib_dso, "deflateEnd");
  363|       |            p_deflate = (deflate_ft) DSO_bind_func(zlib_dso, "deflate");
  364|       |            p_deflateInit_
  365|       |                = (deflateInit__ft) DSO_bind_func(zlib_dso, "deflateInit_");
  366|       |            p_zError = (zError__ft) DSO_bind_func(zlib_dso, "zError");
  367|       |
  368|       |            if (p_compress && p_inflateEnd && p_inflate
  369|       |                && p_inflateInit_ && p_deflateEnd
  370|       |                && p_deflate && p_deflateInit_ && p_zError)
  371|       |                zlib_loaded++;
  372|       |        }
  373|       |    }
  374|       |#endif
  375|       |#ifdef ZLIB_SHARED
  376|       |    if (zlib_loaded)
  377|       |#endif
  378|       |#if defined(ZLIB) || defined(ZLIB_SHARED)
  379|       |    {
  380|       |        /*
  381|       |         * init zlib_stateful_ex_idx here so that in a multi-process
  382|       |         * application it's enough to intialize openssl before forking (idx
  383|       |         * will be inherited in all the children)
  384|       |         */
  385|       |        if (zlib_stateful_ex_idx == -1) {
  386|       |            CRYPTO_w_lock(CRYPTO_LOCK_COMP);
  387|       |            if (zlib_stateful_ex_idx == -1)
  388|       |                zlib_stateful_ex_idx =
  389|       |                    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_COMP,
  390|       |                                            0, NULL, NULL, NULL, NULL);
  391|       |            CRYPTO_w_unlock(CRYPTO_LOCK_COMP);
  392|       |            if (zlib_stateful_ex_idx == -1)
  393|       |                goto err;
  394|       |        }
  395|       |
  396|       |        meth = &zlib_stateful_method;
  397|       |    }
  398|       | err:
  399|       |#endif
  400|       |
  401|      1|    return (meth);
  402|      1|}

ERR_load_COMP_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, COMP_str_functs);
   95|      1|        ERR_load_strings(0, COMP_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

_CONF_free_data:
  223|      1|{
  224|      1|    if (conf == NULL || conf->data == NULL)
  225|      1|        return;
  226|       |
  227|      0|    lh_CONF_VALUE_down_load(conf->data) = 0; /* evil thing to make * sure the
  228|       |                                              * 'OPENSSL_free()' works as *
  229|       |                                              * expected */
  230|      0|    lh_CONF_VALUE_doall_arg(conf->data,
  231|      0|                            LHASH_DOALL_ARG_FN(value_free_hash),
  232|      0|                            LHASH_OF(CONF_VALUE), conf->data);
  233|       |
  234|       |    /*
  235|       |     * We now have only 'section' entries in the hash table. Due to problems
  236|       |     * with
  237|       |     */
  238|       |
  239|      0|    lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
  240|      0|    lh_CONF_VALUE_free(conf->data);
  241|      0|}

NCONF_default:
  126|      1|{
  127|      1|    return &default_method;
  128|      1|}
conf_def.c:def_create:
  136|      1|{
  137|      1|    CONF *ret;
  138|       |
  139|      1|    ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
  140|      1|    if (ret)
  141|      1|        if (meth->init(ret) == 0) {
  142|      0|            OPENSSL_free(ret);
  143|      0|            ret = NULL;
  144|      0|        }
  145|      1|    return ret;
  146|      1|}
conf_def.c:def_init_default:
  149|      1|{
  150|      1|    if (conf == NULL)
  151|      0|        return 0;
  152|       |
  153|      1|    conf->meth = &default_method;
  154|      1|    conf->meth_data = CONF_type_default;
  155|      1|    conf->data = NULL;
  156|       |
  157|      1|    return 1;
  158|      1|}
conf_def.c:def_destroy:
  173|      1|{
  174|      1|    if (def_destroy_data(conf)) {
  175|      1|        OPENSSL_free(conf);
  176|      1|        return 1;
  177|      1|    }
  178|      0|    return 0;
  179|      1|}
conf_def.c:def_destroy_data:
  182|      1|{
  183|      1|    if (conf == NULL)
  184|      0|        return 0;
  185|      1|    _CONF_free_data(conf);
  186|      1|    return 1;
  187|      1|}
conf_def.c:def_load:
  190|      1|{
  191|      1|    int ret;
  192|      1|    BIO *in = NULL;
  193|       |
  194|       |#ifdef OPENSSL_SYS_VMS
  195|       |    in = BIO_new_file(name, "r");
  196|       |#else
  197|      1|    in = BIO_new_file(name, "rb");
  198|      1|#endif
  199|      1|    if (in == NULL) {
  200|      1|        if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
  201|      1|            CONFerr(CONF_F_DEF_LOAD, CONF_R_NO_SUCH_FILE);
  202|      0|        else
  203|      1|            CONFerr(CONF_F_DEF_LOAD, ERR_R_SYS_LIB);
  204|      1|        return 0;
  205|      1|    }
  206|       |
  207|      0|    ret = def_load_bio(conf, in, line);
  208|      0|    BIO_free(in);
  209|       |
  210|      0|    return ret;
  211|      1|}

ERR_load_CONF_strings:
  127|      1|{
  128|      1|#ifndef OPENSSL_NO_ERR
  129|       |
  130|      1|    if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
  131|      1|        ERR_load_strings(0, CONF_str_functs);
  132|      1|        ERR_load_strings(0, CONF_str_reasons);
  133|      1|    }
  134|      1|#endif
  135|      1|}

NCONF_new:
  229|      1|{
  230|      1|    CONF *ret;
  231|       |
  232|      1|    if (meth == NULL)
  233|      1|        meth = NCONF_default();
  234|       |
  235|      1|    ret = meth->create(meth);
  236|      1|    if (ret == NULL) {
  237|      0|        CONFerr(CONF_F_NCONF_NEW, ERR_R_MALLOC_FAILURE);
  238|      0|        return (NULL);
  239|      0|    }
  240|       |
  241|      1|    return ret;
  242|      1|}
NCONF_free:
  245|      1|{
  246|      1|    if (conf == NULL)
  247|      0|        return;
  248|      1|    conf->meth->destroy(conf);
  249|      1|}
NCONF_load:
  259|      1|{
  260|      1|    if (conf == NULL) {
  261|      0|        CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
  262|      0|        return 0;
  263|      0|    }
  264|       |
  265|      1|    return conf->meth->load(conf, file, eline);
  266|      1|}

OPENSSL_load_builtin_modules:
   74|      1|{
   75|       |    /* Add builtin modules here */
   76|      1|    ASN1_add_oid_module();
   77|      1|#ifndef OPENSSL_NO_ENGINE
   78|      1|    ENGINE_add_conf_module();
   79|      1|#endif
   80|      1|    EVP_add_alg_module();
   81|      1|}

CONF_modules_load_file:
  164|      1|{
  165|      1|    char *file = NULL;
  166|      1|    CONF *conf = NULL;
  167|      1|    int ret = 0;
  168|      1|    conf = NCONF_new(NULL);
  169|      1|    if (!conf)
  170|      0|        goto err;
  171|       |
  172|      1|    if (filename == NULL) {
  173|      1|        file = CONF_get1_default_config_file();
  174|      1|        if (!file)
  175|      0|            goto err;
  176|      1|    } else
  177|      0|        file = (char *)filename;
  178|       |
  179|      1|    if (NCONF_load(conf, file, NULL) <= 0) {
  180|      1|        if ((flags & CONF_MFLAGS_IGNORE_MISSING_FILE) &&
  181|      1|            (ERR_GET_REASON(ERR_peek_last_error()) == CONF_R_NO_SUCH_FILE)) {
  182|      1|            ERR_clear_error();
  183|      1|            ret = 1;
  184|      1|        }
  185|      1|        goto err;
  186|      1|    }
  187|       |
  188|      0|    ret = CONF_modules_load(conf, appname, flags);
  189|       |
  190|      1| err:
  191|      1|    if (filename == NULL)
  192|      1|        OPENSSL_free(file);
  193|      1|    NCONF_free(conf);
  194|       |
  195|      1|    return ret;
  196|      0|}
CONF_module_add:
  466|      3|{
  467|      3|    if (module_add(NULL, name, ifunc, ffunc))
  468|      3|        return 1;
  469|      0|    else
  470|      0|        return 0;
  471|      3|}
CONF_get1_default_config_file:
  529|      1|{
  530|      1|    char *file;
  531|      1|    int len;
  532|       |
  533|      1|    file = getenv("OPENSSL_CONF");
  534|      1|    if (file)
  535|      0|        return BUF_strdup(file);
  536|       |
  537|      1|    len = strlen(X509_get_default_cert_area());
  538|      1|#ifndef OPENSSL_SYS_VMS
  539|      1|    len++;
  540|      1|#endif
  541|      1|    len += strlen(OPENSSL_CONF);
  542|       |
  543|      1|    file = OPENSSL_malloc(len + 1);
  544|       |
  545|      1|    if (!file)
  546|      0|        return NULL;
  547|      1|    BUF_strlcpy(file, X509_get_default_cert_area(), len + 1);
  548|      1|#ifndef OPENSSL_SYS_VMS
  549|      1|    BUF_strlcat(file, "/", len + 1);
  550|      1|#endif
  551|      1|    BUF_strlcat(file, OPENSSL_CONF, len + 1);
  552|       |
  553|      1|    return file;
  554|      1|}
conf_mod.c:module_add:
  279|      3|{
  280|      3|    CONF_MODULE *tmod = NULL;
  281|      3|    if (supported_modules == NULL)
  282|      1|        supported_modules = sk_CONF_MODULE_new_null();
  283|      3|    if (supported_modules == NULL)
  284|      0|        return NULL;
  285|      3|    tmod = OPENSSL_malloc(sizeof(CONF_MODULE));
  286|      3|    if (tmod == NULL)
  287|      0|        return NULL;
  288|       |
  289|      3|    tmod->dso = dso;
  290|      3|    tmod->name = BUF_strdup(name);
  291|      3|    if (tmod->name == NULL) {
  292|      0|        OPENSSL_free(tmod);
  293|      0|        return NULL;
  294|      0|    }
  295|      3|    tmod->init = ifunc;
  296|      3|    tmod->finish = ffunc;
  297|      3|    tmod->links = 0;
  298|       |
  299|      3|    if (!sk_CONF_MODULE_push(supported_modules, tmod)) {
  300|      0|        OPENSSL_free(tmod);
  301|      0|        return NULL;
  302|      0|    }
  303|       |
  304|      3|    return tmod;
  305|      3|}

ERR_load_CRYPTO_strings:
   96|      1|{
   97|      1|#ifndef OPENSSL_NO_ERR
   98|       |
   99|      1|    if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
  100|      1|        ERR_load_strings(0, CRYPTO_str_functs);
  101|      1|        ERR_load_strings(0, CRYPTO_str_reasons);
  102|      1|    }
  103|      1|#endif
  104|      1|}

CRYPTO_THREADID_set_pointer:
  436|  9.85k|{
  437|  9.85k|    unsigned char *dest = (void *)&id->val;
  438|  9.85k|    unsigned int accum = 0;
  439|  9.85k|    unsigned char dnum = sizeof(id->val);
  440|       |
  441|  9.85k|    memset(id, 0, sizeof(*id));
  442|  9.85k|    id->ptr = ptr;
  443|  9.85k|    if (sizeof(id->val) >= sizeof(id->ptr)) {
  444|       |        /*
  445|       |         * 'ptr' can be embedded in 'val' without loss of uniqueness
  446|       |         */
  447|  9.85k|        id->val = (unsigned long)id->ptr;
  448|  9.85k|        return;
  449|  9.85k|    }
  450|       |    /*
  451|       |     * hash ptr ==> val. Each byte of 'val' gets the mod-256 total of a
  452|       |     * linear function over the bytes in 'ptr', the co-efficients of which
  453|       |     * are a sequence of low-primes (hash_coeffs is an 8-element cycle) - the
  454|       |     * starting prime for the sequence varies for each byte of 'val' (unique
  455|       |     * polynomials unless pointers are >64-bit). For added spice, the totals
  456|       |     * accumulate rather than restarting from zero, and the index of the
  457|       |     * 'val' byte is added each time (position dependence). If I was a
  458|       |     * black-belt, I'd scan big-endian pointers in reverse to give low-order
  459|       |     * bits more play, but this isn't crypto and I'd prefer nobody mistake it
  460|       |     * as such. Plus I'm lazy.
  461|       |     */
  462|      0|    while (dnum--) {
  463|      0|        const unsigned char *src = (void *)&id->ptr;
  464|      0|        unsigned char snum = sizeof(id->ptr);
  465|      0|        while (snum--)
  466|      0|            accum += *(src++) * hash_coeffs[(snum + dnum) & 7];
  467|      0|        accum += dnum;
  468|      0|        *(dest++) = accum & 255;
  469|      0|    }
  470|      0|}
CRYPTO_THREADID_current:
  492|  9.85k|{
  493|  9.85k|    if (threadid_callback) {
  494|      0|        threadid_callback(id);
  495|      0|        return;
  496|      0|    }
  497|  9.85k|#ifndef OPENSSL_NO_DEPRECATED
  498|       |    /* If the deprecated callback was set, fall back to that */
  499|  9.85k|    if (id_callback) {
  500|      0|        CRYPTO_THREADID_set_numeric(id, id_callback());
  501|      0|        return;
  502|      0|    }
  503|  9.85k|#endif
  504|       |    /* Else pick a backup */
  505|       |#ifdef OPENSSL_SYS_WIN16
  506|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentTask());
  507|       |#elif defined(OPENSSL_SYS_WIN32)
  508|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentThreadId());
  509|       |#elif defined(OPENSSL_SYS_BEOS)
  510|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)find_thread(NULL));
  511|       |#else
  512|       |    /* For everything else, default to using the address of 'errno' */
  513|  9.85k|    CRYPTO_THREADID_set_pointer(id, (void *)&errno);
  514|  9.85k|#endif
  515|  9.85k|}
CRYPTO_THREADID_cmp:
  518|  6.86k|{
  519|  6.86k|    return memcmp(a, b, sizeof(*a));
  520|  6.86k|}
CRYPTO_THREADID_cpy:
  523|  7.80k|{
  524|  7.80k|    memcpy(dest, src, sizeof(*src));
  525|  7.80k|}
CRYPTO_THREADID_hash:
  528|  7.62k|{
  529|  7.62k|    return id->val;
  530|  7.62k|}
CRYPTO_lock:
  565|   261k|{
  566|       |#ifdef LOCK_DEBUG
  567|       |    {
  568|       |        CRYPTO_THREADID id;
  569|       |        char *rw_text, *operation_text;
  570|       |
  571|       |        if (mode & CRYPTO_LOCK)
  572|       |            operation_text = "lock  ";
  573|       |        else if (mode & CRYPTO_UNLOCK)
  574|       |            operation_text = "unlock";
  575|       |        else
  576|       |            operation_text = "ERROR ";
  577|       |
  578|       |        if (mode & CRYPTO_READ)
  579|       |            rw_text = "r";
  580|       |        else if (mode & CRYPTO_WRITE)
  581|       |            rw_text = "w";
  582|       |        else
  583|       |            rw_text = "ERROR";
  584|       |
  585|       |        CRYPTO_THREADID_current(&id);
  586|       |        fprintf(stderr, "lock:%08lx:(%s)%s %-18s %s:%d\n",
  587|       |                CRYPTO_THREADID_hash(&id), rw_text, operation_text,
  588|       |                CRYPTO_get_lock_name(type), file, line);
  589|       |    }
  590|       |#endif
  591|   261k|    if (type < 0) {
  592|      0|        if (dynlock_lock_callback != NULL) {
  593|      0|            struct CRYPTO_dynlock_value *pointer
  594|      0|                = CRYPTO_get_dynlock_value(type);
  595|       |
  596|      0|            OPENSSL_assert(pointer != NULL);
  597|       |
  598|      0|            dynlock_lock_callback(mode, pointer, file, line);
  599|       |
  600|      0|            CRYPTO_destroy_dynlockid(type);
  601|      0|        }
  602|   261k|    } else if (locking_callback != NULL)
  603|      0|        locking_callback(mode, type, file, line);
  604|   261k|}
CRYPTO_add_lock:
  608|  33.3k|{
  609|  33.3k|    int ret = 0;
  610|       |
  611|  33.3k|    if (add_lock_callback != NULL) {
  612|       |#ifdef LOCK_DEBUG
  613|       |        int before = *pointer;
  614|       |#endif
  615|       |
  616|      0|        ret = add_lock_callback(pointer, amount, type, file, line);
  617|       |#ifdef LOCK_DEBUG
  618|       |        {
  619|       |            CRYPTO_THREADID id;
  620|       |            CRYPTO_THREADID_current(&id);
  621|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  622|       |                    CRYPTO_THREADID_hash(&id), before, amount, ret,
  623|       |                    CRYPTO_get_lock_name(type), file, line);
  624|       |        }
  625|       |#endif
  626|  33.3k|    } else {
  627|  33.3k|        CRYPTO_lock(CRYPTO_LOCK | CRYPTO_WRITE, type, file, line);
  628|       |
  629|  33.3k|        ret = *pointer + amount;
  630|       |#ifdef LOCK_DEBUG
  631|       |        {
  632|       |            CRYPTO_THREADID id;
  633|       |            CRYPTO_THREADID_current(&id);
  634|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  635|       |                    CRYPTO_THREADID_hash(&id),
  636|       |                    *pointer, amount, ret,
  637|       |                    CRYPTO_get_lock_name(type), file, line);
  638|       |        }
  639|       |#endif
  640|  33.3k|        *pointer = ret;
  641|  33.3k|        CRYPTO_lock(CRYPTO_UNLOCK | CRYPTO_WRITE, type, file, line);
  642|  33.3k|    }
  643|  33.3k|    return (ret);
  644|  33.3k|}
OPENSSL_cpuid_setup:
  687|      4|{
  688|      4|    static int trigger = 0;
  689|      4|    IA32CAP OPENSSL_ia32_cpuid(unsigned int *);
  690|      4|    IA32CAP vec;
  691|      4|    char *env;
  692|       |
  693|      4|    if (trigger)
  694|      2|        return;
  695|       |
  696|      2|    trigger = 1;
  697|      2|    if ((env = getenv("OPENSSL_ia32cap"))) {
  698|      0|        int off = (env[0] == '~') ? 1 : 0;
  699|       |#  if defined(_WIN32)
  700|       |        if (!sscanf(env + off, "%I64i", &vec))
  701|       |            vec = strtoul(env + off, NULL, 0);
  702|       |#  else
  703|      0|        if (!sscanf(env + off, "%lli", (long long *)&vec))
  704|      0|            vec = strtoul(env + off, NULL, 0);
  705|      0|#  endif
  706|      0|        if (off)
  707|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~vec;
  708|      0|        else if (env[0] == ':')
  709|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  710|       |
  711|      0|        OPENSSL_ia32cap_P[2] = 0;
  712|      0|        if ((env = strchr(env, ':'))) {
  713|      0|            unsigned int vecx;
  714|      0|            env++;
  715|      0|            off = (env[0] == '~') ? 1 : 0;
  716|      0|            vecx = strtoul(env + off, NULL, 0);
  717|      0|            if (off)
  718|      0|                OPENSSL_ia32cap_P[2] &= ~vecx;
  719|      0|            else
  720|      0|                OPENSSL_ia32cap_P[2] = vecx;
  721|      0|        }
  722|      0|    } else
  723|      2|        vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  724|       |
  725|       |    /*
  726|       |     * |(1<<10) sets a reserved bit to signal that variable
  727|       |     * was initialized already... This is to avoid interference
  728|       |     * with cpuid snippets in ELF .init segment.
  729|       |     */
  730|      2|    OPENSSL_ia32cap_P[0] = (unsigned int)vec | (1 << 10);
  731|      2|    OPENSSL_ia32cap_P[1] = (unsigned int)(vec >> 32);
  732|      2|}

ERR_load_DH_strings:
  118|      1|{
  119|      1|#ifndef OPENSSL_NO_ERR
  120|       |
  121|      1|    if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
  122|      1|        ERR_load_strings(0, DH_str_functs);
  123|      1|        ERR_load_strings(0, DH_str_reasons);
  124|      1|    }
  125|      1|#endif
  126|      1|}

DH_OpenSSL:
  124|      7|{
  125|      7|    return &dh_ossl;
  126|      7|}

ERR_load_DSA_strings:
  125|      1|{
  126|      1|#ifndef OPENSSL_NO_ERR
  127|       |
  128|      1|    if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
  129|      1|        ERR_load_strings(0, DSA_str_functs);
  130|      1|        ERR_load_strings(0, DSA_str_reasons);
  131|      1|    }
  132|      1|#endif
  133|      1|}

DSA_get_default_method:
   87|      1|{
   88|      1|    if (!default_DSA_method) {
   89|       |#ifdef OPENSSL_FIPS
   90|       |        if (FIPS_mode())
   91|       |            return FIPS_dsa_openssl();
   92|       |        else
   93|       |            return DSA_OpenSSL();
   94|       |#else
   95|      1|        default_DSA_method = DSA_OpenSSL();
   96|      1|#endif
   97|      1|    }
   98|      1|    return default_DSA_method;
   99|      1|}

DSA_OpenSSL:
  129|      5|{
  130|      5|    return &openssl_dsa_meth;
  131|      5|}

DSO_METHOD_dlfcn:
  135|      1|{
  136|      1|    return (&dso_meth_dlfcn);
  137|      1|}
dso_dlfcn.c:dlfcn_load:
  171|      4|{
  172|      4|    void *ptr = NULL;
  173|       |    /* See applicable comments in dso_dl.c */
  174|      4|    char *filename = DSO_convert_filename(dso, NULL);
  175|      4|    int flags = DLOPEN_FLAG;
  176|       |
  177|      4|    if (filename == NULL) {
  178|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);
  179|      0|        goto err;
  180|      0|    }
  181|      4|# ifdef RTLD_GLOBAL
  182|      4|    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)
  183|      0|        flags |= RTLD_GLOBAL;
  184|      4|# endif
  185|      4|    ptr = dlopen(filename, flags);
  186|      4|    if (ptr == NULL) {
  187|      4|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);
  188|      4|        ERR_add_error_data(4, "filename(", filename, "): ", dlerror());
  189|      4|        goto err;
  190|      4|    }
  191|      0|    if (!sk_void_push(dso->meth_data, (char *)ptr)) {
  192|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);
  193|      0|        goto err;
  194|      0|    }
  195|       |    /* Success */
  196|      0|    dso->loaded_filename = filename;
  197|      0|    return (1);
  198|      4| err:
  199|       |    /* Cleanup! */
  200|      4|    if (filename != NULL)
  201|      4|        OPENSSL_free(filename);
  202|      4|    if (ptr != NULL)
  203|      0|        dlclose(ptr);
  204|      4|    return (0);
  205|      0|}
dso_dlfcn.c:dlfcn_unload:
  208|      4|{
  209|      4|    void *ptr;
  210|      4|    if (dso == NULL) {
  211|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);
  212|      0|        return (0);
  213|      0|    }
  214|      4|    if (sk_void_num(dso->meth_data) < 1)
  215|      4|        return (1);
  216|      0|    ptr = sk_void_pop(dso->meth_data);
  217|      0|    if (ptr == NULL) {
  218|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);
  219|       |        /*
  220|       |         * Should push the value back onto the stack in case of a retry.
  221|       |         */
  222|      0|        sk_void_push(dso->meth_data, ptr);
  223|      0|        return (0);
  224|      0|    }
  225|       |    /* For now I'm not aware of any errors associated with dlclose() */
  226|      0|    dlclose(ptr);
  227|      0|    return (1);
  228|      0|}
dso_dlfcn.c:dlfcn_name_converter:
  355|      4|{
  356|      4|    char *translated;
  357|      4|    int len, rsize, transform;
  358|       |
  359|      4|    len = strlen(filename);
  360|      4|    rsize = len + 1;
  361|      4|    transform = (strstr(filename, "/") == NULL);
  362|      4|    if (transform) {
  363|       |        /* We will convert this to "%s.so" or "lib%s.so" etc */
  364|      4|        rsize += DSO_extlen;    /* The length of ".so" */
  365|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  366|      4|            rsize += 3;         /* The length of "lib" */
  367|      4|    }
  368|      4|    translated = OPENSSL_malloc(rsize);
  369|      4|    if (translated == NULL) {
  370|      0|        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);
  371|      0|        return (NULL);
  372|      0|    }
  373|      4|    if (transform) {
  374|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  375|      4|            sprintf(translated, "lib%s" DSO_ext, filename);
  376|      0|        else
  377|      0|            sprintf(translated, "%s" DSO_ext, filename);
  378|      4|    } else
  379|      0|        sprintf(translated, "%s", filename);
  380|      4|    return (translated);
  381|      4|}

ERR_load_DSO_strings:
  150|      1|{
  151|      1|#ifndef OPENSSL_NO_ERR
  152|       |
  153|      1|    if (ERR_func_error_string(DSO_str_functs[0].error) == NULL) {
  154|      1|        ERR_load_strings(0, DSO_str_functs);
  155|      1|        ERR_load_strings(0, DSO_str_reasons);
  156|      1|    }
  157|      1|#endif
  158|      1|}

DSO_new_method:
   96|      4|{
   97|      4|    DSO *ret;
   98|       |
   99|      4|    if (default_DSO_meth == NULL)
  100|       |        /*
  101|       |         * We default to DSO_METH_openssl() which in turn defaults to
  102|       |         * stealing the "best available" method. Will fallback to
  103|       |         * DSO_METH_null() in the worst case.
  104|       |         */
  105|      1|        default_DSO_meth = DSO_METHOD_openssl();
  106|      4|    ret = (DSO *)OPENSSL_malloc(sizeof(DSO));
  107|      4|    if (ret == NULL) {
  108|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  109|      0|        return (NULL);
  110|      0|    }
  111|      4|    memset(ret, 0, sizeof(DSO));
  112|      4|    ret->meth_data = sk_void_new_null();
  113|      4|    if (ret->meth_data == NULL) {
  114|       |        /* sk_new doesn't generate any errors so we do */
  115|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  116|      0|        OPENSSL_free(ret);
  117|      0|        return (NULL);
  118|      0|    }
  119|      4|    if (meth == NULL)
  120|      4|        ret->meth = default_DSO_meth;
  121|      0|    else
  122|      0|        ret->meth = meth;
  123|      4|    ret->references = 1;
  124|      4|    if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {
  125|      0|        sk_void_free(ret->meth_data);
  126|      0|        OPENSSL_free(ret);
  127|      0|        ret = NULL;
  128|      0|    }
  129|      4|    return (ret);
  130|      4|}
DSO_free:
  133|      4|{
  134|      4|    int i;
  135|       |
  136|      4|    if (dso == NULL) {
  137|      0|        DSOerr(DSO_F_DSO_FREE, ERR_R_PASSED_NULL_PARAMETER);
  138|      0|        return (0);
  139|      0|    }
  140|       |
  141|      4|    i = CRYPTO_add(&dso->references, -1, CRYPTO_LOCK_DSO);
  142|       |#ifdef REF_PRINT
  143|       |    REF_PRINT("DSO", dso);
  144|       |#endif
  145|      4|    if (i > 0)
  146|      0|        return (1);
  147|       |#ifdef REF_CHECK
  148|       |    if (i < 0) {
  149|       |        fprintf(stderr, "DSO_free, bad reference count\n");
  150|       |        abort();
  151|       |    }
  152|       |#endif
  153|       |
  154|      4|    if ((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso)) {
  155|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_UNLOAD_FAILED);
  156|      0|        return (0);
  157|      0|    }
  158|       |
  159|      4|    if ((dso->meth->finish != NULL) && !dso->meth->finish(dso)) {
  160|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_FINISH_FAILED);
  161|      0|        return (0);
  162|      0|    }
  163|       |
  164|      4|    sk_void_free(dso->meth_data);
  165|      4|    if (dso->filename != NULL)
  166|      4|        OPENSSL_free(dso->filename);
  167|      4|    if (dso->loaded_filename != NULL)
  168|      0|        OPENSSL_free(dso->loaded_filename);
  169|       |
  170|      4|    OPENSSL_free(dso);
  171|      4|    return (1);
  172|      4|}
DSO_flags:
  175|      8|{
  176|      8|    return ((dso == NULL) ? 0 : dso->flags);
  177|      8|}
DSO_load:
  191|      4|{
  192|      4|    DSO *ret;
  193|      4|    int allocated = 0;
  194|       |
  195|      4|    if (dso == NULL) {
  196|      4|        ret = DSO_new_method(meth);
  197|      4|        if (ret == NULL) {
  198|      0|            DSOerr(DSO_F_DSO_LOAD, ERR_R_MALLOC_FAILURE);
  199|      0|            goto err;
  200|      0|        }
  201|      4|        allocated = 1;
  202|       |        /* Pass the provided flags to the new DSO object */
  203|      4|        if (DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0) {
  204|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_CTRL_FAILED);
  205|      0|            goto err;
  206|      0|        }
  207|      4|    } else
  208|      0|        ret = dso;
  209|       |    /* Don't load if we're currently already loaded */
  210|      4|    if (ret->filename != NULL) {
  211|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_DSO_ALREADY_LOADED);
  212|      0|        goto err;
  213|      0|    }
  214|       |    /*
  215|       |     * filename can only be NULL if we were passed a dso that already has one
  216|       |     * set.
  217|       |     */
  218|      4|    if (filename != NULL)
  219|      4|        if (!DSO_set_filename(ret, filename)) {
  220|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_SET_FILENAME_FAILED);
  221|      0|            goto err;
  222|      0|        }
  223|      4|    filename = ret->filename;
  224|      4|    if (filename == NULL) {
  225|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_NO_FILENAME);
  226|      0|        goto err;
  227|      0|    }
  228|      4|    if (ret->meth->dso_load == NULL) {
  229|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_UNSUPPORTED);
  230|      0|        goto err;
  231|      0|    }
  232|      4|    if (!ret->meth->dso_load(ret)) {
  233|      4|        DSOerr(DSO_F_DSO_LOAD, DSO_R_LOAD_FAILED);
  234|      4|        goto err;
  235|      4|    }
  236|       |    /* Load succeeded */
  237|      0|    return (ret);
  238|      4| err:
  239|      4|    if (allocated)
  240|      4|        DSO_free(ret);
  241|      4|    return (NULL);
  242|      4|}
DSO_ctrl:
  294|      4|{
  295|      4|    if (dso == NULL) {
  296|      0|        DSOerr(DSO_F_DSO_CTRL, ERR_R_PASSED_NULL_PARAMETER);
  297|      0|        return (-1);
  298|      0|    }
  299|       |    /*
  300|       |     * We should intercept certain generic commands and only pass control to
  301|       |     * the method-specific ctrl() function if it's something we don't handle.
  302|       |     */
  303|      4|    switch (cmd) {
  304|      0|    case DSO_CTRL_GET_FLAGS:
  305|      0|        return dso->flags;
  306|      4|    case DSO_CTRL_SET_FLAGS:
  307|      4|        dso->flags = (int)larg;
  308|      4|        return (0);
  309|      0|    case DSO_CTRL_OR_FLAGS:
  310|      0|        dso->flags |= (int)larg;
  311|      0|        return (0);
  312|      0|    default:
  313|      0|        break;
  314|      4|    }
  315|      0|    if ((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL)) {
  316|      0|        DSOerr(DSO_F_DSO_CTRL, DSO_R_UNSUPPORTED);
  317|      0|        return (-1);
  318|      0|    }
  319|      0|    return (dso->meth->dso_ctrl(dso, cmd, larg, parg));
  320|      0|}
DSO_set_filename:
  345|      4|{
  346|      4|    char *copied;
  347|       |
  348|      4|    if ((dso == NULL) || (filename == NULL)) {
  349|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  350|      0|        return (0);
  351|      0|    }
  352|      4|    if (dso->loaded_filename) {
  353|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, DSO_R_DSO_ALREADY_LOADED);
  354|      0|        return (0);
  355|      0|    }
  356|       |    /* We'll duplicate filename */
  357|      4|    copied = OPENSSL_malloc(strlen(filename) + 1);
  358|      4|    if (copied == NULL) {
  359|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_MALLOC_FAILURE);
  360|      0|        return (0);
  361|      0|    }
  362|      4|    BUF_strlcpy(copied, filename, strlen(filename) + 1);
  363|      4|    if (dso->filename)
  364|      0|        OPENSSL_free(dso->filename);
  365|      4|    dso->filename = copied;
  366|      4|    return (1);
  367|      4|}
DSO_convert_filename:
  387|      4|{
  388|      4|    char *result = NULL;
  389|       |
  390|      4|    if (dso == NULL) {
  391|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  392|      0|        return (NULL);
  393|      0|    }
  394|      4|    if (filename == NULL)
  395|      4|        filename = dso->filename;
  396|      4|    if (filename == NULL) {
  397|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, DSO_R_NO_FILENAME);
  398|      0|        return (NULL);
  399|      0|    }
  400|      4|    if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
  401|      4|        if (dso->name_converter != NULL)
  402|      0|            result = dso->name_converter(dso, filename);
  403|      4|        else if (dso->meth->dso_name_converter != NULL)
  404|      4|            result = dso->meth->dso_name_converter(dso, filename);
  405|      4|    }
  406|      4|    if (result == NULL) {
  407|      0|        result = OPENSSL_malloc(strlen(filename) + 1);
  408|      0|        if (result == NULL) {
  409|      0|            DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_MALLOC_FAILURE);
  410|      0|            return (NULL);
  411|      0|        }
  412|      0|        BUF_strlcpy(result, filename, strlen(filename) + 1);
  413|      0|    }
  414|      4|    return (result);
  415|      4|}

DSO_METHOD_openssl:
   67|      1|{
   68|       |#ifdef DEF_DSO_METHOD
   69|       |    return (DEF_DSO_METHOD());
   70|       |#elif defined(DSO_DLFCN)
   71|      1|    return (DSO_METHOD_dlfcn());
   72|       |#elif defined(DSO_DL)
   73|       |    return (DSO_METHOD_dl());
   74|       |#elif defined(DSO_WIN32)
   75|       |    return (DSO_METHOD_win32());
   76|       |#elif defined(DSO_VMS)
   77|       |    return (DSO_METHOD_vms());
   78|       |#elif defined(DSO_BEOS)
   79|       |    return (DSO_METHOD_beos());
   80|       |#else
   81|       |    return (DSO_METHOD_null());
   82|       |#endif
   83|      1|}

ERR_load_EC_strings:
  324|      1|{
  325|      1|#ifndef OPENSSL_NO_ERR
  326|       |
  327|      1|    if (ERR_func_error_string(EC_str_functs[0].error) == NULL) {
  328|      1|        ERR_load_strings(0, EC_str_functs);
  329|      1|        ERR_load_strings(0, EC_str_reasons);
  330|      1|    }
  331|      1|#endif
  332|      1|}

ERR_load_ECDH_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(ECDH_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, ECDH_str_functs);
   95|      1|        ERR_load_strings(0, ECDH_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

ERR_load_ECDSA_strings:
   99|      1|{
  100|      1|#ifndef OPENSSL_NO_ERR
  101|       |
  102|      1|    if (ERR_func_error_string(ECDSA_str_functs[0].error) == NULL) {
  103|      1|        ERR_load_strings(0, ECDSA_str_functs);
  104|      1|        ERR_load_strings(0, ECDSA_str_reasons);
  105|      1|    }
  106|      1|#endif
  107|      1|}

eng_table.c:engine_pile_LHASH_HASH:
  105|  2.78k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  2.78k|                const o_type *a = arg; \
  107|  2.78k|                return name##_hash(a); }
eng_table.c:engine_pile_LHASH_COMP:
  114|     29|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     29|                const o_type *a = arg1;             \
  116|     29|                const o_type *b = arg2; \
  117|     29|                return name##_cmp(a,b); }

ENGINE_load_builtin_engines:
   64|      1|{
   65|       |    /* Some ENGINEs need this */
   66|      1|    OPENSSL_cpuid_setup();
   67|       |#if 0
   68|       |    /*
   69|       |     * There's no longer any need for an "openssl" ENGINE unless, one day, it
   70|       |     * is the *only* way for standard builtin implementations to be be
   71|       |     * accessed (ie. it would be possible to statically link binaries with
   72|       |     * *no* builtin implementations).
   73|       |     */
   74|       |    ENGINE_load_openssl();
   75|       |#endif
   76|       |#if !defined(OPENSSL_NO_HW) && (defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV))
   77|       |    ENGINE_load_cryptodev();
   78|       |#endif
   79|      1|#ifndef OPENSSL_NO_RDRAND
   80|      1|    ENGINE_load_rdrand();
   81|      1|#endif
   82|      1|    ENGINE_load_dynamic();
   83|      1|#ifndef OPENSSL_NO_STATIC_ENGINE
   84|      1|# ifndef OPENSSL_NO_HW
   85|      1|#  ifndef OPENSSL_NO_HW_4758_CCA
   86|      1|    ENGINE_load_4758cca();
   87|      1|#  endif
   88|      1|#  ifndef OPENSSL_NO_HW_AEP
   89|      1|    ENGINE_load_aep();
   90|      1|#  endif
   91|      1|#  ifndef OPENSSL_NO_HW_ATALLA
   92|      1|    ENGINE_load_atalla();
   93|      1|#  endif
   94|      1|#  ifndef OPENSSL_NO_HW_CSWIFT
   95|      1|    ENGINE_load_cswift();
   96|      1|#  endif
   97|      1|#  ifndef OPENSSL_NO_HW_NCIPHER
   98|      1|    ENGINE_load_chil();
   99|      1|#  endif
  100|      1|#  ifndef OPENSSL_NO_HW_NURON
  101|      1|    ENGINE_load_nuron();
  102|      1|#  endif
  103|      1|#  ifndef OPENSSL_NO_HW_SUREWARE
  104|      1|    ENGINE_load_sureware();
  105|      1|#  endif
  106|      1|#  ifndef OPENSSL_NO_HW_UBSEC
  107|      1|    ENGINE_load_ubsec();
  108|      1|#  endif
  109|      1|#  ifndef OPENSSL_NO_HW_PADLOCK
  110|      1|    ENGINE_load_padlock();
  111|      1|#  endif
  112|      1|# endif
  113|      1|# ifndef OPENSSL_NO_GOST
  114|      1|    ENGINE_load_gost();
  115|      1|# endif
  116|       |# ifndef OPENSSL_NO_GMP
  117|       |    ENGINE_load_gmp();
  118|       |# endif
  119|       |# if defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_NO_CAPIENG)
  120|       |    ENGINE_load_capi();
  121|       |# endif
  122|      1|#endif
  123|      1|    ENGINE_register_all_complete();
  124|      1|}

ENGINE_add_conf_module:
  239|      1|{
  240|      1|    CONF_module_add("engines",
  241|      1|                    int_engine_module_init, int_engine_module_finish);
  242|      1|}

ENGINE_load_dynamic:
  312|      1|{
  313|      1|    ENGINE *toadd = engine_dynamic();
  314|      1|    if (!toadd)
  315|      0|        return;
  316|      1|    ENGINE_add(toadd);
  317|       |    /*
  318|       |     * If the "add" worked, it gets a structural reference. So either way, we
  319|       |     * release our just-created reference.
  320|       |     */
  321|      1|    ENGINE_free(toadd);
  322|       |    /*
  323|       |     * If the "add" didn't work, it was probably a conflict because it was
  324|       |     * already added (eg. someone calling ENGINE_load_blah then calling
  325|       |     * ENGINE_load_builtin_engines() perhaps).
  326|       |     */
  327|      1|    ERR_clear_error();
  328|      1|}
eng_dyn.c:engine_dynamic:
  294|      1|{
  295|      1|    ENGINE *ret = ENGINE_new();
  296|      1|    if (!ret)
  297|      0|        return NULL;
  298|      1|    if (!ENGINE_set_id(ret, engine_dynamic_id) ||
  299|      1|        !ENGINE_set_name(ret, engine_dynamic_name) ||
  300|      1|        !ENGINE_set_init_function(ret, dynamic_init) ||
  301|      1|        !ENGINE_set_finish_function(ret, dynamic_finish) ||
  302|      1|        !ENGINE_set_ctrl_function(ret, dynamic_ctrl) ||
  303|      1|        !ENGINE_set_flags(ret, ENGINE_FLAGS_BY_ID_COPY) ||
  304|      1|        !ENGINE_set_cmd_defns(ret, dynamic_cmd_defns)) {
  305|      0|        ENGINE_free(ret);
  306|      0|        return NULL;
  307|      0|    }
  308|      1|    return ret;
  309|      1|}

ERR_load_ENGINE_strings:
  173|      1|{
  174|      1|#ifndef OPENSSL_NO_ERR
  175|       |
  176|      1|    if (ERR_func_error_string(ENGINE_str_functs[0].error) == NULL) {
  177|      1|        ERR_load_strings(0, ENGINE_str_functs);
  178|      1|        ERR_load_strings(0, ENGINE_str_reasons);
  179|      1|    }
  180|      1|#endif
  181|      1|}

ENGINE_register_complete:
  150|     10|{
  151|     10|    ENGINE_register_ciphers(e);
  152|     10|    ENGINE_register_digests(e);
  153|     10|#ifndef OPENSSL_NO_RSA
  154|     10|    ENGINE_register_RSA(e);
  155|     10|#endif
  156|     10|#ifndef OPENSSL_NO_DSA
  157|     10|    ENGINE_register_DSA(e);
  158|     10|#endif
  159|     10|#ifndef OPENSSL_NO_DH
  160|     10|    ENGINE_register_DH(e);
  161|     10|#endif
  162|     10|#ifndef OPENSSL_NO_ECDH
  163|     10|    ENGINE_register_ECDH(e);
  164|     10|#endif
  165|     10|#ifndef OPENSSL_NO_ECDSA
  166|     10|    ENGINE_register_ECDSA(e);
  167|     10|#endif
  168|     10|    ENGINE_register_RAND(e);
  169|     10|    ENGINE_register_pkey_meths(e);
  170|     10|    return 1;
  171|     10|}
ENGINE_register_all_complete:
  174|      1|{
  175|      1|    ENGINE *e;
  176|       |
  177|     12|    for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
  178|     11|        if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
  179|     10|            ENGINE_register_complete(e);
  180|      1|    return 1;
  181|      1|}

engine_unlocked_init:
   63|      4|{
   64|      4|    int to_return = 1;
   65|       |
   66|      4|    if ((e->funct_ref == 0) && e->init)
   67|       |        /*
   68|       |         * This is the first functional reference and the engine requires
   69|       |         * initialisation so we do it now.
   70|       |         */
   71|      4|        to_return = e->init(e);
   72|      4|    if (to_return) {
   73|       |        /*
   74|       |         * OK, we return a functional reference which is also a structural
   75|       |         * reference.
   76|       |         */
   77|      0|        e->struct_ref++;
   78|      0|        e->funct_ref++;
   79|      0|        engine_ref_debug(e, 0, 1)
   80|      0|            engine_ref_debug(e, 1, 1)
   81|      0|    }
   82|      4|    return to_return;
   83|      4|}

ENGINE_new:
   66|     11|{
   67|     11|    ENGINE *ret;
   68|       |
   69|     11|    ret = (ENGINE *)OPENSSL_malloc(sizeof(ENGINE));
   70|     11|    if (ret == NULL) {
   71|      0|        ENGINEerr(ENGINE_F_ENGINE_NEW, ERR_R_MALLOC_FAILURE);
   72|      0|        return NULL;
   73|      0|    }
   74|     11|    memset(ret, 0, sizeof(ENGINE));
   75|     11|    ret->struct_ref = 1;
   76|     11|    engine_ref_debug(ret, 0, 1)
   77|     11|        CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ENGINE, ret, &ret->ex_data);
   78|     11|    return ret;
   79|     11|}
engine_free_util:
  108|     22|{
  109|     22|    int i;
  110|       |
  111|     22|    if (e == NULL) {
  112|      0|        ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL, ERR_R_PASSED_NULL_PARAMETER);
  113|      0|        return 0;
  114|      0|    }
  115|     22|    if (locked)
  116|     22|        i = CRYPTO_add(&e->struct_ref, -1, CRYPTO_LOCK_ENGINE);
  117|      0|    else
  118|      0|        i = --e->struct_ref;
  119|     22|    engine_ref_debug(e, 0, -1)
  120|     22|        if (i > 0)
  121|     22|        return 1;
  122|       |#ifdef REF_CHECK
  123|       |    if (i < 0) {
  124|       |        fprintf(stderr, "ENGINE_free, bad structural reference count\n");
  125|       |        abort();
  126|       |    }
  127|       |#endif
  128|       |    /* Free up any dynamically allocated public key methods */
  129|      0|    engine_pkey_meths_free(e);
  130|      0|    engine_pkey_asn1_meths_free(e);
  131|       |    /*
  132|       |     * Give the ENGINE a chance to do any structural cleanup corresponding to
  133|       |     * allocation it did in its constructor (eg. unload error strings)
  134|       |     */
  135|      0|    if (e->destroy)
  136|      0|        e->destroy(e);
  137|      0|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ENGINE, e, &e->ex_data);
  138|      0|    OPENSSL_free(e);
  139|      0|    return 1;
  140|     22|}
ENGINE_free:
  143|     22|{
  144|     22|    return engine_free_util(e, 1);
  145|     22|}
engine_cleanup_add_first:
  176|      7|{
  177|      7|    ENGINE_CLEANUP_ITEM *item;
  178|      7|    if (!int_cleanup_check(1))
  179|      0|        return;
  180|      7|    item = int_cleanup_item(cb);
  181|      7|    if (item)
  182|      7|        sk_ENGINE_CLEANUP_ITEM_insert(cleanup_stack, item, 0);
  183|      7|}
engine_cleanup_add_last:
  186|      1|{
  187|      1|    ENGINE_CLEANUP_ITEM *item;
  188|      1|    if (!int_cleanup_check(1))
  189|      0|        return;
  190|      1|    item = int_cleanup_item(cb);
  191|      1|    if (item)
  192|      1|        sk_ENGINE_CLEANUP_ITEM_push(cleanup_stack, item);
  193|      1|}
ENGINE_set_id:
  242|     11|{
  243|     11|    if (id == NULL) {
  244|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_ID, ERR_R_PASSED_NULL_PARAMETER);
  245|      0|        return 0;
  246|      0|    }
  247|     11|    e->id = id;
  248|     11|    return 1;
  249|     11|}
ENGINE_set_name:
  252|     11|{
  253|     11|    if (name == NULL) {
  254|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_NAME, ERR_R_PASSED_NULL_PARAMETER);
  255|      0|        return 0;
  256|      0|    }
  257|     11|    e->name = name;
  258|     11|    return 1;
  259|     11|}
ENGINE_set_destroy_function:
  262|      9|{
  263|      9|    e->destroy = destroy_f;
  264|      9|    return 1;
  265|      9|}
ENGINE_set_init_function:
  268|     11|{
  269|     11|    e->init = init_f;
  270|     11|    return 1;
  271|     11|}
ENGINE_set_finish_function:
  274|     10|{
  275|     10|    e->finish = finish_f;
  276|     10|    return 1;
  277|     10|}
ENGINE_set_ctrl_function:
  280|     10|{
  281|     10|    e->ctrl = ctrl_f;
  282|     10|    return 1;
  283|     10|}
ENGINE_set_flags:
  286|      2|{
  287|      2|    e->flags = flags;
  288|      2|    return 1;
  289|      2|}
ENGINE_set_cmd_defns:
  292|      9|{
  293|      9|    e->cmd_defns = defns;
  294|      9|    return 1;
  295|      9|}
eng_lib.c:int_cleanup_check:
  157|      8|{
  158|      8|    if (cleanup_stack)
  159|      7|        return 1;
  160|      1|    if (!create)
  161|      0|        return 0;
  162|      1|    cleanup_stack = sk_ENGINE_CLEANUP_ITEM_new_null();
  163|      1|    return (cleanup_stack ? 1 : 0);
  164|      1|}
eng_lib.c:int_cleanup_item:
  167|      8|{
  168|      8|    ENGINE_CLEANUP_ITEM *item = OPENSSL_malloc(sizeof(ENGINE_CLEANUP_ITEM));
  169|      8|    if (!item)
  170|      0|        return NULL;
  171|      8|    item->cb = cb;
  172|      8|    return item;
  173|      8|}

ENGINE_get_first:
  185|      1|{
  186|      1|    ENGINE *ret;
  187|       |
  188|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  189|      1|    ret = engine_list_head;
  190|      1|    if (ret) {
  191|      1|        ret->struct_ref++;
  192|      1|        engine_ref_debug(ret, 0, 1)
  193|      1|    }
  194|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  195|      1|    return ret;
  196|      1|}
ENGINE_get_next:
  214|     11|{
  215|     11|    ENGINE *ret = NULL;
  216|     11|    if (e == NULL) {
  217|      0|        ENGINEerr(ENGINE_F_ENGINE_GET_NEXT, ERR_R_PASSED_NULL_PARAMETER);
  218|      0|        return 0;
  219|      0|    }
  220|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  221|     11|    ret = e->next;
  222|     11|    if (ret) {
  223|       |        /* Return a valid structural refernce to the next ENGINE */
  224|     10|        ret->struct_ref++;
  225|     10|        engine_ref_debug(ret, 0, 1)
  226|     10|    }
  227|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  228|       |    /* Release the structural reference to the previous ENGINE */
  229|     11|    ENGINE_free(e);
  230|     11|    return ret;
  231|     11|}
ENGINE_add:
  255|     11|{
  256|     11|    int to_return = 1;
  257|     11|    if (e == NULL) {
  258|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ERR_R_PASSED_NULL_PARAMETER);
  259|      0|        return 0;
  260|      0|    }
  261|     11|    if ((e->id == NULL) || (e->name == NULL)) {
  262|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_ID_OR_NAME_MISSING);
  263|      0|        return 0;
  264|      0|    }
  265|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  266|     11|    if (!engine_list_add(e)) {
  267|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  268|      0|        to_return = 0;
  269|      0|    }
  270|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  271|     11|    return to_return;
  272|     11|}
eng_list.c:engine_list_add:
  103|     11|{
  104|     11|    int conflict = 0;
  105|     11|    ENGINE *iterator = NULL;
  106|       |
  107|     11|    if (e == NULL) {
  108|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ERR_R_PASSED_NULL_PARAMETER);
  109|      0|        return 0;
  110|      0|    }
  111|     11|    iterator = engine_list_head;
  112|     66|    while (iterator && !conflict) {
  113|     55|        conflict = (strcmp(iterator->id, e->id) == 0);
  114|     55|        iterator = iterator->next;
  115|     55|    }
  116|     11|    if (conflict) {
  117|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_CONFLICTING_ENGINE_ID);
  118|      0|        return 0;
  119|      0|    }
  120|     11|    if (engine_list_head == NULL) {
  121|       |        /* We are adding to an empty list. */
  122|      1|        if (engine_list_tail) {
  123|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  124|      0|            return 0;
  125|      0|        }
  126|      1|        engine_list_head = e;
  127|      1|        e->prev = NULL;
  128|       |        /*
  129|       |         * The first time the list allocates, we should register the cleanup.
  130|       |         */
  131|      1|        engine_cleanup_add_last(engine_list_cleanup);
  132|     10|    } else {
  133|       |        /* We are adding to the tail of an existing list. */
  134|     10|        if ((engine_list_tail == NULL) || (engine_list_tail->next != NULL)) {
  135|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  136|      0|            return 0;
  137|      0|        }
  138|     10|        engine_list_tail->next = e;
  139|     10|        e->prev = engine_list_tail;
  140|     10|    }
  141|       |    /*
  142|       |     * Having the engine in the list assumes a structural reference.
  143|       |     */
  144|     11|    e->struct_ref++;
  145|     11|    engine_ref_debug(e, 0, 1)
  146|       |        /* However it came to be, e is the last item in the list. */
  147|     11|        engine_list_tail = e;
  148|     11|    e->next = NULL;
  149|     11|    return 1;
  150|     11|}

ENGINE_set_load_privkey_function:
   62|      3|{
   63|      3|    e->load_privkey = loadpriv_f;
   64|      3|    return 1;
   65|      3|}
ENGINE_set_load_pubkey_function:
   68|      3|{
   69|      3|    e->load_pubkey = loadpub_f;
   70|      3|    return 1;
   71|      3|}

ENGINE_load_rdrand:
  133|      1|{
  134|      1|    extern unsigned int OPENSSL_ia32cap_P[];
  135|       |
  136|      1|    if (OPENSSL_ia32cap_P[1] & (1 << (62 - 32))) {
  137|      1|        ENGINE *toadd = ENGINE_rdrand();
  138|      1|        if (!toadd)
  139|      0|            return;
  140|      1|        ENGINE_add(toadd);
  141|      1|        ENGINE_free(toadd);
  142|      1|        ERR_clear_error();
  143|      1|    }
  144|      1|}
eng_rdrand.c:ENGINE_rdrand:
  121|      1|{
  122|      1|    ENGINE *ret = ENGINE_new();
  123|      1|    if (!ret)
  124|      0|        return NULL;
  125|      1|    if (!bind_helper(ret)) {
  126|      0|        ENGINE_free(ret);
  127|      0|        return NULL;
  128|      0|    }
  129|      1|    return ret;
  130|      1|}
eng_rdrand.c:bind_helper:
  109|      1|{
  110|      1|    if (!ENGINE_set_id(e, engine_e_rdrand_id) ||
  111|      1|        !ENGINE_set_name(e, engine_e_rdrand_name) ||
  112|      1|        !ENGINE_set_flags(e, ENGINE_FLAGS_NO_REGISTER_ALL) ||
  113|      1|        !ENGINE_set_init_function(e, rdrand_init) ||
  114|      1|        !ENGINE_set_RAND(e, &rdrand_meth))
  115|      0|        return 0;
  116|       |
  117|      1|    return 1;
  118|      1|}

engine_table_register:
  135|     31|{
  136|     31|    int ret = 0, added = 0;
  137|     31|    ENGINE_PILE tmplate, *fnd;
  138|     31|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  139|     31|    if (!(*table))
  140|      7|        added = 1;
  141|     31|    if (!int_table_check(table, 1))
  142|      0|        goto end;
  143|     31|    if (added)
  144|       |        /* The cleanup callback needs to be added */
  145|      7|        engine_cleanup_add_first(cleanup);
  146|     70|    while (num_nids--) {
  147|     39|        tmplate.nid = *nids;
  148|     39|        fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  149|     39|        if (!fnd) {
  150|     11|            fnd = OPENSSL_malloc(sizeof(ENGINE_PILE));
  151|     11|            if (!fnd)
  152|      0|                goto end;
  153|     11|            fnd->uptodate = 1;
  154|     11|            fnd->nid = *nids;
  155|     11|            fnd->sk = sk_ENGINE_new_null();
  156|     11|            if (!fnd->sk) {
  157|      0|                OPENSSL_free(fnd);
  158|      0|                goto end;
  159|      0|            }
  160|     11|            fnd->funct = NULL;
  161|     11|            (void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
  162|     11|        }
  163|       |        /* A registration shouldn't add duplciate entries */
  164|     39|        (void)sk_ENGINE_delete_ptr(fnd->sk, e);
  165|       |        /*
  166|       |         * if 'setdefault', this ENGINE goes to the head of the list
  167|       |         */
  168|     39|        if (!sk_ENGINE_push(fnd->sk, e))
  169|      0|            goto end;
  170|       |        /* "touch" this ENGINE_PILE */
  171|     39|        fnd->uptodate = 0;
  172|     39|        if (setdefault) {
  173|      0|            if (!engine_unlocked_init(e)) {
  174|      0|                ENGINEerr(ENGINE_F_ENGINE_TABLE_REGISTER,
  175|      0|                          ENGINE_R_INIT_FAILED);
  176|      0|                goto end;
  177|      0|            }
  178|      0|            if (fnd->funct)
  179|      0|                engine_unlocked_finish(fnd->funct, 0);
  180|      0|            fnd->funct = e;
  181|      0|            fnd->uptodate = 1;
  182|      0|        }
  183|     39|        nids++;
  184|     39|    }
  185|     31|    ret = 1;
  186|     31| end:
  187|     31|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  188|     31|    return ret;
  189|     31|}
engine_table_select:
  246|  2.73k|{
  247|  2.73k|    ENGINE *ret = NULL;
  248|  2.73k|    ENGINE_PILE tmplate, *fnd = NULL;
  249|  2.73k|    int initres, loop = 0;
  250|       |
  251|  2.73k|    if (!(*table)) {
  252|       |#ifdef ENGINE_TABLE_DEBUG
  253|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
  254|       |                "registered!\n", f, l, nid);
  255|       |#endif
  256|      0|        return NULL;
  257|      0|    }
  258|  2.73k|    ERR_set_mark();
  259|  2.73k|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  260|       |    /*
  261|       |     * Check again inside the lock otherwise we could race against cleanup
  262|       |     * operations. But don't worry about a fprintf(stderr).
  263|       |     */
  264|  2.73k|    if (!int_table_check(table, 0))
  265|      0|        goto end;
  266|  2.73k|    tmplate.nid = nid;
  267|  2.73k|    fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  268|  2.73k|    if (!fnd)
  269|  2.73k|        goto end;
  270|      1|    if (fnd->funct && engine_unlocked_init(fnd->funct)) {
  271|       |#ifdef ENGINE_TABLE_DEBUG
  272|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  273|       |                "ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
  274|       |#endif
  275|      0|        ret = fnd->funct;
  276|      0|        goto end;
  277|      0|    }
  278|      1|    if (fnd->uptodate) {
  279|      0|        ret = fnd->funct;
  280|      0|        goto end;
  281|      0|    }
  282|      5| trynext:
  283|      5|    ret = sk_ENGINE_value(fnd->sk, loop++);
  284|      5|    if (!ret) {
  285|       |#ifdef ENGINE_TABLE_DEBUG
  286|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
  287|       |                "registered implementations would initialise\n", f, l, nid);
  288|       |#endif
  289|      1|        goto end;
  290|      1|    }
  291|       |    /* Try to initialise the ENGINE? */
  292|      4|    if ((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
  293|      4|        initres = engine_unlocked_init(ret);
  294|      0|    else
  295|      0|        initres = 0;
  296|      4|    if (initres) {
  297|       |        /* Update 'funct' */
  298|      0|        if ((fnd->funct != ret) && engine_unlocked_init(ret)) {
  299|       |            /* If there was a previous default we release it. */
  300|      0|            if (fnd->funct)
  301|      0|                engine_unlocked_finish(fnd->funct, 0);
  302|      0|            fnd->funct = ret;
  303|       |#ifdef ENGINE_TABLE_DEBUG
  304|       |            fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, "
  305|       |                    "setting default to '%s'\n", f, l, nid, ret->id);
  306|       |#endif
  307|      0|        }
  308|       |#ifdef ENGINE_TABLE_DEBUG
  309|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  310|       |                "newly initialised '%s'\n", f, l, nid, ret->id);
  311|       |#endif
  312|      0|        goto end;
  313|      0|    }
  314|      4|    goto trynext;
  315|  2.73k| end:
  316|       |    /*
  317|       |     * If it failed, it is unlikely to succeed again until some future
  318|       |     * registrations have taken place. In all cases, we cache.
  319|       |     */
  320|  2.73k|    if (fnd)
  321|      1|        fnd->uptodate = 1;
  322|       |#ifdef ENGINE_TABLE_DEBUG
  323|       |    if (ret)
  324|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  325|       |                "ENGINE '%s'\n", f, l, nid, ret->id);
  326|       |    else
  327|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  328|       |                "'no matching ENGINE'\n", f, l, nid);
  329|       |#endif
  330|  2.73k|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  331|       |    /*
  332|       |     * Whatever happened, any failed init()s are not failures in this
  333|       |     * context, so clear our error state.
  334|       |     */
  335|  2.73k|    ERR_pop_to_mark();
  336|  2.73k|    return ret;
  337|      4|}
engine_table_doall:
  350|    197|{
  351|    197|    ENGINE_PILE_DOALL dall;
  352|    197|    dall.cb = cb;
  353|    197|    dall.arg = arg;
  354|    197|    if (table)
  355|    197|        lh_ENGINE_PILE_doall_arg(&table->piles,
  356|    197|                                 LHASH_DOALL_ARG_FN(int_cb),
  357|    197|                                 ENGINE_PILE_DOALL, &dall);
  358|    197|}
eng_table.c:int_table_check:
  115|  2.76k|{
  116|  2.76k|    LHASH_OF(ENGINE_PILE) *lh;
  117|       |
  118|  2.76k|    if (*t)
  119|  2.76k|        return 1;
  120|      7|    if (!create)
  121|      0|        return 0;
  122|      7|    if ((lh = lh_ENGINE_PILE_new()) == NULL)
  123|      0|        return 0;
  124|      7|    *t = (ENGINE_TABLE *)lh;
  125|      7|    return 1;
  126|      7|}
eng_table.c:engine_pile_hash:
  102|  2.78k|{
  103|  2.78k|    return c->nid;
  104|  2.78k|}
eng_table.c:engine_pile_cmp:
  107|     29|{
  108|     29|    return a->nid - b->nid;
  109|     29|}

ENGINE_set_pkey_asn1_meths:
  147|      1|{
  148|      1|    e->pkey_asn1_meths = f;
  149|      1|    return 1;
  150|      1|}
ENGINE_pkey_asn1_find_str:
  230|    197|{
  231|    197|    ENGINE_FIND_STR fstr;
  232|    197|    fstr.e = NULL;
  233|    197|    fstr.ameth = NULL;
  234|    197|    fstr.str = str;
  235|    197|    fstr.len = len;
  236|    197|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  237|    197|    engine_table_doall(pkey_asn1_meth_table, look_str_cb, &fstr);
  238|       |    /* If found obtain a structural reference to engine */
  239|    197|    if (fstr.e) {
  240|      0|        fstr.e->struct_ref++;
  241|      0|        engine_ref_debug(fstr.e, 0, 1)
  242|      0|    }
  243|    197|    *pe = fstr.e;
  244|    197|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  245|    197|    return fstr.ameth;
  246|    197|}

ENGINE_register_ciphers:
   77|     11|{
   78|     11|    if (e->ciphers) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->ciphers(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&cipher_table,
   83|      2|                                         engine_unregister_all_ciphers, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_set_ciphers:
  140|      1|{
  141|      1|    e->ciphers = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DH:
   78|     10|{
   79|     10|    if (e->dh_meth)
   80|      7|        return engine_table_register(&dh_table,
   81|      7|                                     engine_unregister_all_DH, e, &dummy_nid,
   82|      7|                                     1, 0);
   83|      3|    return 1;
   84|     10|}
ENGINE_set_DH:
  121|      7|{
  122|      7|    e->dh_meth = dh_meth;
  123|      7|    return 1;
  124|      7|}

ENGINE_register_digests:
   77|     11|{
   78|     11|    if (e->digests) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->digests(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&digest_table,
   83|      2|                                         engine_unregister_all_digests, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_get_digest_engine:
  116|  2.73k|{
  117|  2.73k|    return engine_table_select(&digest_table, nid);
  118|  2.73k|}
ENGINE_set_digests:
  140|      1|{
  141|      1|    e->digests = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DSA:
   78|     10|{
   79|     10|    if (e->dsa_meth)
   80|      6|        return engine_table_register(&dsa_table,
   81|      6|                                     engine_unregister_all_DSA, e, &dummy_nid,
   82|      6|                                     1, 0);
   83|      4|    return 1;
   84|     10|}
ENGINE_set_DSA:
  121|      6|{
  122|      6|    e->dsa_meth = dsa_meth;
  123|      6|    return 1;
  124|      6|}

ENGINE_register_ECDH:
   93|     10|{
   94|     10|    if (e->ecdh_meth)
   95|      0|        return engine_table_register(&ecdh_table,
   96|      0|                                     engine_unregister_all_ECDH, e,
   97|      0|                                     &dummy_nid, 1, 0);
   98|     10|    return 1;
   99|     10|}

ENGINE_register_ECDSA:
   78|     10|{
   79|     10|    if (e->ecdsa_meth)
   80|      0|        return engine_table_register(&ecdsa_table,
   81|      0|                                     engine_unregister_all_ECDSA, e,
   82|      0|                                     &dummy_nid, 1, 0);
   83|     10|    return 1;
   84|     10|}

ENGINE_register_pkey_meths:
   78|     11|{
   79|     11|    if (e->pkey_meths) {
   80|      2|        const int *nids;
   81|      2|        int num_nids = e->pkey_meths(e, NULL, &nids, 0);
   82|      2|        if (num_nids > 0)
   83|      2|            return engine_table_register(&pkey_meth_table,
   84|      2|                                         engine_unregister_all_pkey_meths, e,
   85|      2|                                         nids, num_nids, 0);
   86|      2|    }
   87|      9|    return 1;
   88|     11|}
ENGINE_set_pkey_meths:
  142|      1|{
  143|      1|    e->pkey_meths = f;
  144|      1|    return 1;
  145|      1|}

ENGINE_register_RAND:
   78|     10|{
   79|     10|    if (e->rand_meth)
   80|      4|        return engine_table_register(&rand_table,
   81|      4|                                     engine_unregister_all_RAND, e,
   82|      4|                                     &dummy_nid, 1, 0);
   83|      6|    return 1;
   84|     10|}
ENGINE_get_default_RAND:
  109|      1|{
  110|      1|    return engine_table_select(&rand_table, dummy_nid);
  111|      1|}
ENGINE_set_RAND:
  121|      5|{
  122|      5|    e->rand_meth = rand_meth;
  123|      5|    return 1;
  124|      5|}

ENGINE_register_RSA:
   78|     10|{
   79|     10|    if (e->rsa_meth)
   80|      8|        return engine_table_register(&rsa_table,
   81|      8|                                     engine_unregister_all_RSA, e, &dummy_nid,
   82|      8|                                     1, 0);
   83|      2|    return 1;
   84|     10|}
ENGINE_set_RSA:
  121|      8|{
  122|      8|    e->rsa_meth = rsa_meth;
  123|      8|    return 1;
  124|      8|}

err.c:err_string_data_LHASH_HASH:
  105|  19.2k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  19.2k|                const o_type *a = arg; \
  107|  19.2k|                return name##_hash(a); }
err.c:err_string_data_LHASH_COMP:
  114|  17.2k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  17.2k|                const o_type *a = arg1;             \
  116|  17.2k|                const o_type *b = arg2; \
  117|  17.2k|                return name##_cmp(a,b); }
err.c:err_state_LHASH_HASH:
  105|  7.62k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  7.62k|                const o_type *a = arg; \
  107|  7.62k|                return name##_hash(a); }
err.c:err_state_LHASH_COMP:
  114|  6.80k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  6.80k|                const o_type *a = arg1;             \
  116|  6.80k|                const o_type *b = arg2; \
  117|  6.80k|                return name##_cmp(a,b); }

ERR_load_ERR_strings:
  659|     81|{
  660|     81|    err_fns_check();
  661|     81|#ifndef OPENSSL_NO_ERR
  662|     81|    err_load_strings(0, ERR_str_libraries);
  663|     81|    err_load_strings(0, ERR_str_reasons);
  664|     81|    err_load_strings(ERR_LIB_SYS, ERR_str_functs);
  665|     81|    build_SYS_str_reasons();
  666|     81|    err_load_strings(ERR_LIB_SYS, SYS_str_reasons);
  667|     81|#endif
  668|     81|}
ERR_load_strings:
  681|     80|{
  682|     80|    ERR_load_ERR_strings();
  683|     80|    err_load_strings(lib, str);
  684|     80|}
ERR_put_error:
  705|    162|{
  706|    162|    ERR_STATE *es;
  707|       |
  708|       |#ifdef _OSD_POSIX
  709|       |    /*
  710|       |     * In the BS2000-OSD POSIX subsystem, the compiler generates path names
  711|       |     * in the form "*POSIX(/etc/passwd)". This dirty hack strips them to
  712|       |     * something sensible. @@@ We shouldn't modify a const string, though.
  713|       |     */
  714|       |    if (strncmp(file, "*POSIX(", sizeof("*POSIX(") - 1) == 0) {
  715|       |        char *end;
  716|       |
  717|       |        /* Skip the "*POSIX(" prefix */
  718|       |        file += sizeof("*POSIX(") - 1;
  719|       |        end = &file[strlen(file) - 1];
  720|       |        if (*end == ')')
  721|       |            *end = '\0';
  722|       |        /* Optional: use the basename of the path only. */
  723|       |        if ((end = strrchr(file, '/')) != NULL)
  724|       |            file = &end[1];
  725|       |    }
  726|       |#endif
  727|    162|    es = ERR_get_state();
  728|    162|    if (es == NULL)
  729|      0|        return;
  730|       |
  731|    162|    es->top = (es->top + 1) % ERR_NUM_ERRORS;
  732|    162|    if (es->top == es->bottom)
  733|      0|        es->bottom = (es->bottom + 1) % ERR_NUM_ERRORS;
  734|    162|    es->err_flags[es->top] = 0;
  735|    162|    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
  736|    162|    es->err_file[es->top] = file;
  737|    162|    es->err_line[es->top] = line;
  738|    162|    err_clear_data(es, es->top);
  739|    162|}
ERR_clear_error:
  742|    208|{
  743|    208|    int i;
  744|    208|    ERR_STATE *es;
  745|       |
  746|    208|    es = ERR_get_state();
  747|    208|    if (es == NULL)
  748|      0|        return;
  749|       |
  750|  3.53k|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  751|  3.32k|        err_clear(es, i);
  752|  3.32k|    }
  753|    208|    es->top = es->bottom = 0;
  754|    208|}
ERR_get_error:
  757|     48|{
  758|     48|    return (get_error_values(1, 0, NULL, NULL, NULL, NULL));
  759|     48|}
ERR_peek_error:
  773|     49|{
  774|     49|    return (get_error_values(0, 0, NULL, NULL, NULL, NULL));
  775|     49|}
ERR_peek_last_error:
  789|     51|{
  790|     51|    return (get_error_values(0, 1, NULL, NULL, NULL, NULL));
  791|     51|}
ERR_error_string_n:
  873|     48|{
  874|     48|    char lsbuf[64], fsbuf[64], rsbuf[64];
  875|     48|    const char *ls, *fs, *rs;
  876|     48|    unsigned long l, f, r;
  877|       |
  878|     48|    if (len == 0)
  879|      0|        return;
  880|       |
  881|     48|    l = ERR_GET_LIB(e);
  882|     48|    f = ERR_GET_FUNC(e);
  883|     48|    r = ERR_GET_REASON(e);
  884|       |
  885|     48|    ls = ERR_lib_error_string(e);
  886|     48|    fs = ERR_func_error_string(e);
  887|     48|    rs = ERR_reason_error_string(e);
  888|       |
  889|     48|    if (ls == NULL)
  890|     48|        BIO_snprintf(lsbuf, sizeof(lsbuf), "lib(%lu)", l);
  891|     48|    if (fs == NULL)
  892|     48|        BIO_snprintf(fsbuf, sizeof(fsbuf), "func(%lu)", f);
  893|     48|    if (rs == NULL)
  894|     48|        BIO_snprintf(rsbuf, sizeof(rsbuf), "reason(%lu)", r);
  895|       |
  896|     48|    BIO_snprintf(buf, len, "error:%08lX:%s:%s:%s", e, ls ? ls : lsbuf,
  897|     48|                 fs ? fs : fsbuf, rs ? rs : rsbuf);
  898|     48|    if (strlen(buf) == len - 1) {
  899|       |        /*
  900|       |         * output may be truncated; make sure we always have 5
  901|       |         * colon-separated fields, i.e. 4 colons ...
  902|       |         */
  903|      0|#define NUM_COLONS 4
  904|      0|        if (len > NUM_COLONS) { /* ... if possible */
  905|      0|            int i;
  906|      0|            char *s = buf;
  907|       |
  908|      0|            for (i = 0; i < NUM_COLONS; i++) {
  909|      0|                char *colon = strchr(s, ':');
  910|      0|                if (colon == NULL || colon > &buf[len - 1] - NUM_COLONS + i) {
  911|       |                    /*
  912|       |                     * set colon no. i at last possible position (buf[len-1]
  913|       |                     * is the terminating 0)
  914|       |                     */
  915|      0|                    colon = &buf[len - 1] - NUM_COLONS + i;
  916|      0|                    *colon = ':';
  917|      0|                }
  918|      0|                s = colon + 1;
  919|      0|            }
  920|      0|        }
  921|      0|    }
  922|     48|}
ERR_lib_error_string:
  959|     48|{
  960|     48|    ERR_STRING_DATA d, *p;
  961|     48|    unsigned long l;
  962|       |
  963|     48|    err_fns_check();
  964|     48|    l = ERR_GET_LIB(e);
  965|     48|    d.error = ERR_PACK(l, 0, 0);
  966|     48|    p = ERRFN(err_get_item) (&d);
  967|     48|    return ((p == NULL) ? NULL : p->string);
  968|     48|}
ERR_func_error_string:
  971|     76|{
  972|     76|    ERR_STRING_DATA d, *p;
  973|     76|    unsigned long l, f;
  974|       |
  975|     76|    err_fns_check();
  976|     76|    l = ERR_GET_LIB(e);
  977|     76|    f = ERR_GET_FUNC(e);
  978|     76|    d.error = ERR_PACK(l, f, 0);
  979|     76|    p = ERRFN(err_get_item) (&d);
  980|     76|    return ((p == NULL) ? NULL : p->string);
  981|     76|}
ERR_reason_error_string:
  984|     48|{
  985|     48|    ERR_STRING_DATA d, *p = NULL;
  986|     48|    unsigned long l, r;
  987|       |
  988|     48|    err_fns_check();
  989|     48|    l = ERR_GET_LIB(e);
  990|     48|    r = ERR_GET_REASON(e);
  991|     48|    d.error = ERR_PACK(l, 0, r);
  992|     48|    p = ERRFN(err_get_item) (&d);
  993|     48|    if (!p) {
  994|     48|        d.error = ERR_PACK(0, 0, r);
  995|     48|        p = ERRFN(err_get_item) (&d);
  996|     48|    }
  997|     48|    return ((p == NULL) ? NULL : p->string);
  998|     48|}
ERR_remove_thread_state:
 1001|  1.66k|{
 1002|  1.66k|    ERR_STATE tmp;
 1003|       |
 1004|  1.66k|    if (id)
 1005|      0|        CRYPTO_THREADID_cpy(&tmp.tid, id);
 1006|  1.66k|    else
 1007|  1.66k|        CRYPTO_THREADID_current(&tmp.tid);
 1008|  1.66k|    err_fns_check();
 1009|       |    /*
 1010|       |     * thread_del_item automatically destroys the LHASH if the number of
 1011|       |     * items reaches zero.
 1012|       |     */
 1013|  1.66k|    ERRFN(thread_del_item) (&tmp);
 1014|  1.66k|}
ERR_get_state:
 1024|  5.99k|{
 1025|  5.99k|    ERR_STATE *ret, tmp, *tmpp = NULL;
 1026|  5.99k|    int i;
 1027|  5.99k|    CRYPTO_THREADID tid;
 1028|       |
 1029|  5.99k|    err_fns_check();
 1030|  5.99k|    CRYPTO_THREADID_current(&tid);
 1031|  5.99k|    CRYPTO_THREADID_cpy(&tmp.tid, &tid);
 1032|  5.99k|    ret = ERRFN(thread_get_item) (&tmp);
 1033|       |
 1034|       |    /* ret == the error state, if NULL, make a new one */
 1035|  5.99k|    if (ret == NULL) {
 1036|    813|        ret = (ERR_STATE *)OPENSSL_malloc(sizeof(ERR_STATE));
 1037|    813|        if (ret == NULL)
 1038|      0|            return NULL;
 1039|    813|        CRYPTO_THREADID_cpy(&ret->tid, &tid);
 1040|    813|        ret->top = 0;
 1041|    813|        ret->bottom = 0;
 1042|  13.8k|        for (i = 0; i < ERR_NUM_ERRORS; i++) {
 1043|  13.0k|            ret->err_data[i] = NULL;
 1044|  13.0k|            ret->err_data_flags[i] = 0;
 1045|  13.0k|        }
 1046|    813|        tmpp = ERRFN(thread_set_item) (ret);
 1047|       |        /* To check if insertion failed, do a get. */
 1048|    813|        if (ERRFN(thread_get_item) (ret) != ret) {
 1049|      0|            ERR_STATE_free(ret); /* could not insert it */
 1050|      0|            return NULL;
 1051|      0|        }
 1052|       |        /*
 1053|       |         * If a race occured in this function and we came second, tmpp is the
 1054|       |         * first one that we just replaced.
 1055|       |         */
 1056|    813|        if (tmpp)
 1057|      0|            ERR_STATE_free(tmpp);
 1058|    813|    }
 1059|  5.99k|    return ret;
 1060|  5.99k|}
ERR_get_next_error_library:
 1063|      9|{
 1064|      9|    err_fns_check();
 1065|      9|    return ERRFN(get_next_lib) ();
 1066|      9|}
ERR_set_error_data:
 1069|      5|{
 1070|      5|    ERR_STATE *es;
 1071|      5|    int i;
 1072|       |
 1073|      5|    es = ERR_get_state();
 1074|      5|    if (es == NULL)
 1075|      0|        return;
 1076|       |
 1077|      5|    i = es->top;
 1078|       |
 1079|      5|    err_clear_data(es, i);
 1080|      5|    es->err_data[i] = data;
 1081|      5|    es->err_data_flags[i] = flags;
 1082|      5|}
ERR_add_error_data:
 1085|      5|{
 1086|      5|    va_list args;
 1087|      5|    va_start(args, num);
 1088|      5|    ERR_add_error_vdata(num, args);
 1089|      5|    va_end(args);
 1090|      5|}
ERR_add_error_vdata:
 1093|      5|{
 1094|      5|    int i, n, s;
 1095|      5|    char *str, *p, *a;
 1096|       |
 1097|      5|    s = 80;
 1098|      5|    str = OPENSSL_malloc(s + 1);
 1099|      5|    if (str == NULL)
 1100|      0|        return;
 1101|      5|    str[0] = '\0';
 1102|       |
 1103|      5|    n = 0;
 1104|     26|    for (i = 0; i < num; i++) {
 1105|     21|        a = va_arg(args, char *);
 1106|       |        /* ignore NULLs, thanks to Bob Beck <beck@obtuse.com> */
 1107|     21|        if (a != NULL) {
 1108|     21|            n += strlen(a);
 1109|     21|            if (n > s) {
 1110|      4|                s = n + 20;
 1111|      4|                p = OPENSSL_realloc(str, s + 1);
 1112|      4|                if (p == NULL) {
 1113|      0|                    OPENSSL_free(str);
 1114|      0|                    return;
 1115|      0|                } else
 1116|      4|                    str = p;
 1117|      4|            }
 1118|     21|            BUF_strlcat(str, a, (size_t)s + 1);
 1119|     21|        }
 1120|     21|    }
 1121|      5|    ERR_set_error_data(str, ERR_TXT_MALLOCED | ERR_TXT_STRING);
 1122|      5|}
ERR_set_mark:
 1125|  2.73k|{
 1126|  2.73k|    ERR_STATE *es;
 1127|       |
 1128|  2.73k|    es = ERR_get_state();
 1129|  2.73k|    if (es == NULL)
 1130|      0|        return 0;
 1131|       |
 1132|  2.73k|    if (es->bottom == es->top)
 1133|  2.73k|        return 0;
 1134|      0|    es->err_flags[es->top] |= ERR_FLAG_MARK;
 1135|      0|    return 1;
 1136|  2.73k|}
ERR_pop_to_mark:
 1139|  2.73k|{
 1140|  2.73k|    ERR_STATE *es;
 1141|       |
 1142|  2.73k|    es = ERR_get_state();
 1143|  2.73k|    if (es == NULL)
 1144|      0|        return 0;
 1145|       |
 1146|  2.74k|    while (es->bottom != es->top
 1147|  2.74k|           && (es->err_flags[es->top] & ERR_FLAG_MARK) == 0) {
 1148|     12|        err_clear(es, es->top);
 1149|     12|        es->top -= 1;
 1150|     12|        if (es->top == -1)
 1151|      0|            es->top = ERR_NUM_ERRORS - 1;
 1152|     12|    }
 1153|       |
 1154|  2.73k|    if (es->bottom == es->top)
 1155|  2.73k|        return 0;
 1156|      0|    es->err_flags[es->top] &= ~ERR_FLAG_MARK;
 1157|      0|    return 1;
 1158|  2.73k|}
err.c:err_fns_check:
  292|  36.5k|{
  293|  36.5k|    if (err_fns)
  294|  36.5k|        return;
  295|       |
  296|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  297|      1|    if (!err_fns)
  298|      1|        err_fns = &err_defaults;
  299|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  300|      1|}
err.c:int_err_get:
  358|  19.2k|{
  359|  19.2k|    LHASH_OF(ERR_STRING_DATA) *ret = NULL;
  360|       |
  361|  19.2k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  362|  19.2k|    if (!int_error_hash && create) {
  363|      1|        CRYPTO_push_info("int_err_get (err.c)");
  364|      1|        int_error_hash = lh_ERR_STRING_DATA_new();
  365|      1|        CRYPTO_pop_info();
  366|      1|    }
  367|  19.2k|    if (int_error_hash)
  368|  19.2k|        ret = int_error_hash;
  369|  19.2k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  370|       |
  371|  19.2k|    return ret;
  372|  19.2k|}
err.c:err_string_data_hash:
  339|  19.2k|{
  340|  19.2k|    unsigned long ret, l;
  341|       |
  342|  19.2k|    l = a->error;
  343|  19.2k|    ret = l ^ ERR_GET_LIB(l) ^ ERR_GET_FUNC(l);
  344|  19.2k|    return (ret ^ ret % 19 * 13);
  345|  19.2k|}
err.c:err_string_data_cmp:
  351|  17.2k|{
  352|  17.2k|    return (int)(a->error - b->error);
  353|  17.2k|}
err.c:int_err_get_item:
  385|    220|{
  386|    220|    ERR_STRING_DATA *p;
  387|    220|    LHASH_OF(ERR_STRING_DATA) *hash;
  388|       |
  389|    220|    err_fns_check();
  390|    220|    hash = ERRFN(err_get) (0);
  391|    220|    if (!hash)
  392|      0|        return NULL;
  393|       |
  394|    220|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  395|    220|    p = lh_ERR_STRING_DATA_retrieve(hash, d);
  396|    220|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  397|       |
  398|    220|    return p;
  399|    220|}
err.c:int_err_set_item:
  402|  19.0k|{
  403|  19.0k|    ERR_STRING_DATA *p;
  404|  19.0k|    LHASH_OF(ERR_STRING_DATA) *hash;
  405|       |
  406|  19.0k|    err_fns_check();
  407|  19.0k|    hash = ERRFN(err_get) (1);
  408|  19.0k|    if (!hash)
  409|      0|        return NULL;
  410|       |
  411|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  412|  19.0k|    p = lh_ERR_STRING_DATA_insert(hash, d);
  413|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  414|       |
  415|  19.0k|    return p;
  416|  19.0k|}
err.c:int_thread_get:
  450|  9.29k|{
  451|  9.29k|    LHASH_OF(ERR_STATE) *ret = NULL;
  452|       |
  453|  9.29k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  454|  9.29k|    if (!int_thread_hash && create) {
  455|    813|        CRYPTO_push_info("int_thread_get (err.c)");
  456|    813|        int_thread_hash = lh_ERR_STATE_new();
  457|    813|        CRYPTO_pop_info();
  458|    813|    }
  459|  9.29k|    if (int_thread_hash) {
  460|  7.62k|        int_thread_hash_references++;
  461|  7.62k|        ret = int_thread_hash;
  462|  7.62k|    }
  463|  9.29k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  464|  9.29k|    return ret;
  465|  9.29k|}
err.c:err_state_hash:
  436|  7.62k|{
  437|  7.62k|    return CRYPTO_THREADID_hash(&a->tid) * 13;
  438|  7.62k|}
err.c:err_state_cmp:
  443|  6.80k|{
  444|  6.80k|    return CRYPTO_THREADID_cmp(&a->tid, &b->tid);
  445|  6.80k|}
err.c:int_thread_release:
  468|  7.62k|{
  469|  7.62k|    int i;
  470|       |
  471|  7.62k|    if (hash == NULL || *hash == NULL)
  472|      0|        return;
  473|       |
  474|  7.62k|    i = CRYPTO_add(&int_thread_hash_references, -1, CRYPTO_LOCK_ERR);
  475|       |
  476|       |#ifdef REF_PRINT
  477|       |    fprintf(stderr, "%4d:%s\n", int_thread_hash_references, "ERR");
  478|       |#endif
  479|  7.62k|    if (i > 0)
  480|      0|        return;
  481|       |#ifdef REF_CHECK
  482|       |    if (i < 0) {
  483|       |        fprintf(stderr, "int_thread_release, bad reference count\n");
  484|       |        abort();                /* ok */
  485|       |    }
  486|       |#endif
  487|  7.62k|    *hash = NULL;
  488|  7.62k|}
err.c:int_thread_get_item:
  491|  6.80k|{
  492|  6.80k|    ERR_STATE *p;
  493|  6.80k|    LHASH_OF(ERR_STATE) *hash;
  494|       |
  495|  6.80k|    err_fns_check();
  496|  6.80k|    hash = ERRFN(thread_get) (0);
  497|  6.80k|    if (!hash)
  498|    813|        return NULL;
  499|       |
  500|  5.99k|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  501|  5.99k|    p = lh_ERR_STATE_retrieve(hash, d);
  502|  5.99k|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  503|       |
  504|  5.99k|    ERRFN(thread_release) (&hash);
  505|  5.99k|    return p;
  506|  6.80k|}
err.c:int_thread_set_item:
  509|    813|{
  510|    813|    ERR_STATE *p;
  511|    813|    LHASH_OF(ERR_STATE) *hash;
  512|       |
  513|    813|    err_fns_check();
  514|    813|    hash = ERRFN(thread_get) (1);
  515|    813|    if (!hash)
  516|      0|        return NULL;
  517|       |
  518|    813|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  519|    813|    p = lh_ERR_STATE_insert(hash, d);
  520|    813|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  521|       |
  522|    813|    ERRFN(thread_release) (&hash);
  523|    813|    return p;
  524|    813|}
err.c:int_thread_del_item:
  527|  1.66k|{
  528|  1.66k|    ERR_STATE *p;
  529|  1.66k|    LHASH_OF(ERR_STATE) *hash;
  530|       |
  531|  1.66k|    err_fns_check();
  532|  1.66k|    hash = ERRFN(thread_get) (0);
  533|  1.66k|    if (!hash)
  534|    856|        return;
  535|       |
  536|    813|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  537|    813|    p = lh_ERR_STATE_delete(hash, d);
  538|       |    /* make sure we don't leak memory */
  539|    813|    if (int_thread_hash_references == 1
  540|    813|        && int_thread_hash && lh_ERR_STATE_num_items(int_thread_hash) == 0) {
  541|    813|        lh_ERR_STATE_free(int_thread_hash);
  542|    813|        int_thread_hash = NULL;
  543|    813|    }
  544|    813|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  545|       |
  546|    813|    ERRFN(thread_release) (&hash);
  547|    813|    if (p)
  548|    813|        ERR_STATE_free(p);
  549|    813|}
err.c:int_err_get_next_lib:
  552|      9|{
  553|      9|    int ret;
  554|       |
  555|      9|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  556|      9|    ret = int_err_library_number++;
  557|      9|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  558|       |
  559|      9|    return ret;
  560|      9|}
err.c:build_SYS_str_reasons:
  578|     81|{
  579|       |    /* OPENSSL_malloc cannot be used here, use static storage instead */
  580|     81|    static char strerror_tab[NUM_SYS_STR_REASONS][LEN_SYS_STR_REASON];
  581|     81|    int i;
  582|     81|    static int init = 1;
  583|       |
  584|     81|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  585|     81|    if (!init) {
  586|     80|        CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  587|     80|        return;
  588|     80|    }
  589|       |
  590|      1|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  591|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  592|      1|    if (!init) {
  593|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  594|      0|        return;
  595|      0|    }
  596|       |
  597|    128|    for (i = 1; i <= NUM_SYS_STR_REASONS; i++) {
  598|    127|        ERR_STRING_DATA *str = &SYS_str_reasons[i - 1];
  599|       |
  600|    127|        str->error = (unsigned long)i;
  601|    127|        if (str->string == NULL) {
  602|    127|            char (*dest)[LEN_SYS_STR_REASON] = &(strerror_tab[i - 1]);
  603|    127|            char *src = strerror(i);
  604|    127|            if (src != NULL) {
  605|    127|                strncpy(*dest, src, sizeof *dest);
  606|    127|                (*dest)[sizeof *dest - 1] = '\0';
  607|    127|                str->string = *dest;
  608|    127|            }
  609|    127|        }
  610|    127|        if (str->string == NULL)
  611|      0|            str->string = "unknown";
  612|    127|    }
  613|       |
  614|       |    /*
  615|       |     * Now we still have SYS_str_reasons[NUM_SYS_STR_REASONS] = {0, NULL}, as
  616|       |     * required by ERR_load_strings.
  617|       |     */
  618|       |
  619|      1|    init = 0;
  620|       |
  621|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  622|      1|}
err.c:err_load_strings:
  671|    404|{
  672|  19.4k|    while (str->error) {
  673|  19.0k|        if (lib)
  674|  11.4k|            str->error |= ERR_PACK(lib, 0, 0);
  675|  19.0k|        ERRFN(err_set_item) (str);
  676|  19.0k|        str++;
  677|  19.0k|    }
  678|    404|}
err.c:get_error_values:
  807|    148|{
  808|    148|    int i = 0;
  809|    148|    ERR_STATE *es;
  810|    148|    unsigned long ret;
  811|       |
  812|    148|    es = ERR_get_state();
  813|    148|    if (es == NULL)
  814|      0|        return 0;
  815|       |
  816|    148|    if (inc && top) {
  817|      0|        if (file)
  818|      0|            *file = "";
  819|      0|        if (line)
  820|      0|            *line = 0;
  821|      0|        if (data)
  822|      0|            *data = "";
  823|      0|        if (flags)
  824|      0|            *flags = 0;
  825|       |
  826|      0|        return ERR_R_INTERNAL_ERROR;
  827|      0|    }
  828|       |
  829|    148|    if (es->bottom == es->top)
  830|     97|        return 0;
  831|     51|    if (top)
  832|     51|        i = es->top;            /* last error */
  833|      0|    else
  834|      0|        i = (es->bottom + 1) % ERR_NUM_ERRORS; /* first error */
  835|       |
  836|     51|    ret = es->err_buffer[i];
  837|     51|    if (inc) {
  838|      0|        es->bottom = i;
  839|      0|        es->err_buffer[i] = 0;
  840|      0|    }
  841|       |
  842|     51|    if ((file != NULL) && (line != NULL)) {
  843|      0|        if (es->err_file[i] == NULL) {
  844|      0|            *file = "NA";
  845|      0|            if (line != NULL)
  846|      0|                *line = 0;
  847|      0|        } else {
  848|      0|            *file = es->err_file[i];
  849|      0|            if (line != NULL)
  850|      0|                *line = es->err_line[i];
  851|      0|        }
  852|      0|    }
  853|       |
  854|     51|    if (data == NULL) {
  855|     51|        if (inc) {
  856|      0|            err_clear_data(es, i);
  857|      0|        }
  858|     51|    } else {
  859|      0|        if (es->err_data[i] == NULL) {
  860|      0|            *data = "";
  861|      0|            if (flags != NULL)
  862|      0|                *flags = 0;
  863|      0|        } else {
  864|      0|            *data = es->err_data[i];
  865|      0|            if (flags != NULL)
  866|      0|                *flags = es->err_data_flags[i];
  867|      0|        }
  868|      0|    }
  869|     51|    return ret;
  870|    148|}
err.c:ERR_STATE_free:
  646|    813|{
  647|    813|    int i;
  648|       |
  649|    813|    if (s == NULL)
  650|      0|        return;
  651|       |
  652|  13.8k|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  653|  13.0k|        err_clear_data(s, i);
  654|  13.0k|    }
  655|    813|    OPENSSL_free(s);
  656|    813|}

ERR_load_crypto_strings:
  112|      1|{
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|    ERR_load_ERR_strings();     /* include error strings for SYSerr */
  115|      1|    ERR_load_BN_strings();
  116|      1|# ifndef OPENSSL_NO_RSA
  117|      1|    ERR_load_RSA_strings();
  118|      1|# endif
  119|      1|# ifndef OPENSSL_NO_DH
  120|      1|    ERR_load_DH_strings();
  121|      1|# endif
  122|      1|    ERR_load_EVP_strings();
  123|      1|    ERR_load_BUF_strings();
  124|      1|    ERR_load_OBJ_strings();
  125|      1|    ERR_load_PEM_strings();
  126|      1|# ifndef OPENSSL_NO_DSA
  127|      1|    ERR_load_DSA_strings();
  128|      1|# endif
  129|      1|    ERR_load_X509_strings();
  130|      1|    ERR_load_ASN1_strings();
  131|      1|    ERR_load_CONF_strings();
  132|      1|    ERR_load_CRYPTO_strings();
  133|      1|# ifndef OPENSSL_NO_COMP
  134|      1|    ERR_load_COMP_strings();
  135|      1|# endif
  136|      1|# ifndef OPENSSL_NO_EC
  137|      1|    ERR_load_EC_strings();
  138|      1|# endif
  139|      1|# ifndef OPENSSL_NO_ECDSA
  140|      1|    ERR_load_ECDSA_strings();
  141|      1|# endif
  142|      1|# ifndef OPENSSL_NO_ECDH
  143|      1|    ERR_load_ECDH_strings();
  144|      1|# endif
  145|       |    /* skip ERR_load_SSL_strings() because it is not in this library */
  146|      1|    ERR_load_BIO_strings();
  147|      1|    ERR_load_PKCS7_strings();
  148|      1|    ERR_load_X509V3_strings();
  149|      1|    ERR_load_PKCS12_strings();
  150|      1|    ERR_load_RAND_strings();
  151|      1|    ERR_load_DSO_strings();
  152|      1|    ERR_load_TS_strings();
  153|      1|# ifndef OPENSSL_NO_ENGINE
  154|      1|    ERR_load_ENGINE_strings();
  155|      1|# endif
  156|      1|    ERR_load_OCSP_strings();
  157|      1|    ERR_load_UI_strings();
  158|       |# ifdef OPENSSL_FIPS
  159|       |    ERR_load_FIPS_strings();
  160|       |# endif
  161|      1|# ifndef OPENSSL_NO_CMS
  162|      1|    ERR_load_CMS_strings();
  163|      1|# endif
  164|       |# ifndef OPENSSL_NO_JPAKE
  165|       |    ERR_load_JPAKE_strings();
  166|       |# endif
  167|      1|#endif
  168|      1|}

EVP_des_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cfb128:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }

OPENSSL_add_all_algorithms_noconf:
   76|      1|{
   77|       |    /*
   78|       |     * For the moment OPENSSL_cpuid_setup does something
   79|       |     * only on IA-32, but we reserve the option for all
   80|       |     * platforms...
   81|       |     */
   82|      1|    OPENSSL_cpuid_setup();
   83|      1|    OpenSSL_add_all_ciphers();
   84|      1|    OpenSSL_add_all_digests();
   85|      1|}

OpenSSL_add_all_ciphers:
   66|      1|{
   67|       |
   68|      1|#ifndef OPENSSL_NO_DES
   69|      1|    EVP_add_cipher(EVP_des_cfb());
   70|      1|    EVP_add_cipher(EVP_des_cfb1());
   71|      1|    EVP_add_cipher(EVP_des_cfb8());
   72|      1|    EVP_add_cipher(EVP_des_ede_cfb());
   73|      1|    EVP_add_cipher(EVP_des_ede3_cfb());
   74|      1|    EVP_add_cipher(EVP_des_ede3_cfb1());
   75|      1|    EVP_add_cipher(EVP_des_ede3_cfb8());
   76|       |
   77|      1|    EVP_add_cipher(EVP_des_ofb());
   78|      1|    EVP_add_cipher(EVP_des_ede_ofb());
   79|      1|    EVP_add_cipher(EVP_des_ede3_ofb());
   80|       |
   81|      1|    EVP_add_cipher(EVP_desx_cbc());
   82|      1|    EVP_add_cipher_alias(SN_desx_cbc, "DESX");
   83|      1|    EVP_add_cipher_alias(SN_desx_cbc, "desx");
   84|       |
   85|      1|    EVP_add_cipher(EVP_des_cbc());
   86|      1|    EVP_add_cipher_alias(SN_des_cbc, "DES");
   87|      1|    EVP_add_cipher_alias(SN_des_cbc, "des");
   88|      1|    EVP_add_cipher(EVP_des_ede_cbc());
   89|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   90|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "DES3");
   91|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "des3");
   92|       |
   93|      1|    EVP_add_cipher(EVP_des_ecb());
   94|      1|    EVP_add_cipher(EVP_des_ede());
   95|      1|    EVP_add_cipher(EVP_des_ede3());
   96|      1|    EVP_add_cipher(EVP_des_ede3_wrap());
   97|      1|#endif
   98|       |
   99|      1|#ifndef OPENSSL_NO_RC4
  100|      1|    EVP_add_cipher(EVP_rc4());
  101|      1|    EVP_add_cipher(EVP_rc4_40());
  102|      1|# ifndef OPENSSL_NO_MD5
  103|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
  104|      1|# endif
  105|      1|#endif
  106|       |
  107|      1|#ifndef OPENSSL_NO_IDEA
  108|      1|    EVP_add_cipher(EVP_idea_ecb());
  109|      1|    EVP_add_cipher(EVP_idea_cfb());
  110|      1|    EVP_add_cipher(EVP_idea_ofb());
  111|      1|    EVP_add_cipher(EVP_idea_cbc());
  112|      1|    EVP_add_cipher_alias(SN_idea_cbc, "IDEA");
  113|      1|    EVP_add_cipher_alias(SN_idea_cbc, "idea");
  114|      1|#endif
  115|       |
  116|      1|#ifndef OPENSSL_NO_SEED
  117|      1|    EVP_add_cipher(EVP_seed_ecb());
  118|      1|    EVP_add_cipher(EVP_seed_cfb());
  119|      1|    EVP_add_cipher(EVP_seed_ofb());
  120|      1|    EVP_add_cipher(EVP_seed_cbc());
  121|      1|    EVP_add_cipher_alias(SN_seed_cbc, "SEED");
  122|      1|    EVP_add_cipher_alias(SN_seed_cbc, "seed");
  123|      1|#endif
  124|       |
  125|      1|#ifndef OPENSSL_NO_RC2
  126|      1|    EVP_add_cipher(EVP_rc2_ecb());
  127|      1|    EVP_add_cipher(EVP_rc2_cfb());
  128|      1|    EVP_add_cipher(EVP_rc2_ofb());
  129|      1|    EVP_add_cipher(EVP_rc2_cbc());
  130|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
  131|      1|    EVP_add_cipher(EVP_rc2_64_cbc());
  132|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "RC2");
  133|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "rc2");
  134|      1|#endif
  135|       |
  136|      1|#ifndef OPENSSL_NO_BF
  137|      1|    EVP_add_cipher(EVP_bf_ecb());
  138|      1|    EVP_add_cipher(EVP_bf_cfb());
  139|      1|    EVP_add_cipher(EVP_bf_ofb());
  140|      1|    EVP_add_cipher(EVP_bf_cbc());
  141|      1|    EVP_add_cipher_alias(SN_bf_cbc, "BF");
  142|      1|    EVP_add_cipher_alias(SN_bf_cbc, "bf");
  143|      1|    EVP_add_cipher_alias(SN_bf_cbc, "blowfish");
  144|      1|#endif
  145|       |
  146|      1|#ifndef OPENSSL_NO_CAST
  147|      1|    EVP_add_cipher(EVP_cast5_ecb());
  148|      1|    EVP_add_cipher(EVP_cast5_cfb());
  149|      1|    EVP_add_cipher(EVP_cast5_ofb());
  150|      1|    EVP_add_cipher(EVP_cast5_cbc());
  151|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST");
  152|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast");
  153|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST-cbc");
  154|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast-cbc");
  155|      1|#endif
  156|       |
  157|      1|#ifndef OPENSSL_NO_RC5
  158|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ecb());
  159|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cfb());
  160|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ofb());
  161|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cbc());
  162|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "rc5");
  163|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "RC5");
  164|      1|#endif
  165|       |
  166|      1|#ifndef OPENSSL_NO_AES
  167|      1|    EVP_add_cipher(EVP_aes_128_ecb());
  168|      1|    EVP_add_cipher(EVP_aes_128_cbc());
  169|      1|    EVP_add_cipher(EVP_aes_128_cfb());
  170|      1|    EVP_add_cipher(EVP_aes_128_cfb1());
  171|      1|    EVP_add_cipher(EVP_aes_128_cfb8());
  172|      1|    EVP_add_cipher(EVP_aes_128_ofb());
  173|      1|    EVP_add_cipher(EVP_aes_128_ctr());
  174|      1|    EVP_add_cipher(EVP_aes_128_gcm());
  175|      1|    EVP_add_cipher(EVP_aes_128_xts());
  176|      1|    EVP_add_cipher(EVP_aes_128_ccm());
  177|      1|    EVP_add_cipher(EVP_aes_128_wrap());
  178|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "AES128");
  179|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "aes128");
  180|      1|    EVP_add_cipher(EVP_aes_192_ecb());
  181|      1|    EVP_add_cipher(EVP_aes_192_cbc());
  182|      1|    EVP_add_cipher(EVP_aes_192_cfb());
  183|      1|    EVP_add_cipher(EVP_aes_192_cfb1());
  184|      1|    EVP_add_cipher(EVP_aes_192_cfb8());
  185|      1|    EVP_add_cipher(EVP_aes_192_ofb());
  186|      1|    EVP_add_cipher(EVP_aes_192_ctr());
  187|      1|    EVP_add_cipher(EVP_aes_192_gcm());
  188|      1|    EVP_add_cipher(EVP_aes_192_ccm());
  189|      1|    EVP_add_cipher(EVP_aes_192_wrap());
  190|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "AES192");
  191|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "aes192");
  192|      1|    EVP_add_cipher(EVP_aes_256_ecb());
  193|      1|    EVP_add_cipher(EVP_aes_256_cbc());
  194|      1|    EVP_add_cipher(EVP_aes_256_cfb());
  195|      1|    EVP_add_cipher(EVP_aes_256_cfb1());
  196|      1|    EVP_add_cipher(EVP_aes_256_cfb8());
  197|      1|    EVP_add_cipher(EVP_aes_256_ofb());
  198|      1|    EVP_add_cipher(EVP_aes_256_ctr());
  199|      1|    EVP_add_cipher(EVP_aes_256_gcm());
  200|      1|    EVP_add_cipher(EVP_aes_256_xts());
  201|      1|    EVP_add_cipher(EVP_aes_256_ccm());
  202|      1|    EVP_add_cipher(EVP_aes_256_wrap());
  203|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "AES256");
  204|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "aes256");
  205|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
  206|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
  207|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
  208|      1|# endif
  209|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
  210|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  211|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  212|      1|# endif
  213|      1|#endif
  214|       |
  215|      1|#ifndef OPENSSL_NO_CAMELLIA
  216|      1|    EVP_add_cipher(EVP_camellia_128_ecb());
  217|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  218|      1|    EVP_add_cipher(EVP_camellia_128_cfb());
  219|      1|    EVP_add_cipher(EVP_camellia_128_cfb1());
  220|      1|    EVP_add_cipher(EVP_camellia_128_cfb8());
  221|      1|    EVP_add_cipher(EVP_camellia_128_ofb());
  222|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "CAMELLIA128");
  223|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "camellia128");
  224|      1|    EVP_add_cipher(EVP_camellia_192_ecb());
  225|      1|    EVP_add_cipher(EVP_camellia_192_cbc());
  226|      1|    EVP_add_cipher(EVP_camellia_192_cfb());
  227|      1|    EVP_add_cipher(EVP_camellia_192_cfb1());
  228|      1|    EVP_add_cipher(EVP_camellia_192_cfb8());
  229|      1|    EVP_add_cipher(EVP_camellia_192_ofb());
  230|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "CAMELLIA192");
  231|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "camellia192");
  232|      1|    EVP_add_cipher(EVP_camellia_256_ecb());
  233|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  234|      1|    EVP_add_cipher(EVP_camellia_256_cfb());
  235|      1|    EVP_add_cipher(EVP_camellia_256_cfb1());
  236|      1|    EVP_add_cipher(EVP_camellia_256_cfb8());
  237|      1|    EVP_add_cipher(EVP_camellia_256_ofb());
  238|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "CAMELLIA256");
  239|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "camellia256");
  240|      1|#endif
  241|      1|}

OpenSSL_add_all_digests:
   66|      1|{
   67|      1|#ifndef OPENSSL_NO_MD4
   68|      1|    EVP_add_digest(EVP_md4());
   69|      1|#endif
   70|      1|#ifndef OPENSSL_NO_MD5
   71|      1|    EVP_add_digest(EVP_md5());
   72|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
   73|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
   74|      1|#endif
   75|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA0)
   76|      1|    EVP_add_digest(EVP_sha());
   77|      1|# ifndef OPENSSL_NO_DSA
   78|      1|    EVP_add_digest(EVP_dss());
   79|      1|# endif
   80|      1|#endif
   81|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   82|      1|    EVP_add_digest(EVP_sha1());
   83|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
   84|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
   85|      1|# ifndef OPENSSL_NO_DSA
   86|      1|    EVP_add_digest(EVP_dss1());
   87|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
   88|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
   89|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
   90|      1|# endif
   91|      1|# ifndef OPENSSL_NO_ECDSA
   92|      1|    EVP_add_digest(EVP_ecdsa());
   93|      1|# endif
   94|      1|#endif
   95|      1|#if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)
   96|      1|    EVP_add_digest(EVP_mdc2());
   97|      1|#endif
   98|      1|#ifndef OPENSSL_NO_RIPEMD
   99|      1|    EVP_add_digest(EVP_ripemd160());
  100|      1|    EVP_add_digest_alias(SN_ripemd160, "ripemd");
  101|      1|    EVP_add_digest_alias(SN_ripemd160, "rmd160");
  102|      1|#endif
  103|      1|#ifndef OPENSSL_NO_SHA256
  104|      1|    EVP_add_digest(EVP_sha224());
  105|      1|    EVP_add_digest(EVP_sha256());
  106|      1|#endif
  107|      1|#ifndef OPENSSL_NO_SHA512
  108|      1|    EVP_add_digest(EVP_sha384());
  109|      1|    EVP_add_digest(EVP_sha512());
  110|      1|#endif
  111|      1|#ifndef OPENSSL_NO_WHIRLPOOL
  112|      1|    EVP_add_digest(EVP_whirlpool());
  113|      1|#endif
  114|      1|}

EVP_MD_CTX_init:
  126|  1.29k|{
  127|  1.29k|    memset(ctx, '\0', sizeof *ctx);
  128|  1.29k|}
EVP_DigestInit_ex:
  147|  2.73k|{
  148|  2.73k|    EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  149|       |#ifdef OPENSSL_FIPS
  150|       |    /* If FIPS mode switch to approved implementation if possible */
  151|       |    if (FIPS_mode()) {
  152|       |        const EVP_MD *fipsmd;
  153|       |        if (type) {
  154|       |            fipsmd = evp_get_fips_md(type);
  155|       |            if (fipsmd)
  156|       |                type = fipsmd;
  157|       |        }
  158|       |    }
  159|       |#endif
  160|  2.73k|#ifndef OPENSSL_NO_ENGINE
  161|       |    /*
  162|       |     * Whether it's nice or not, "Inits" can be used on "Final"'d contexts so
  163|       |     * this context may already have an ENGINE! Try to avoid releasing the
  164|       |     * previous handle, re-querying for an ENGINE, and having a
  165|       |     * reinitialisation, when it may all be unecessary.
  166|       |     */
  167|  2.73k|    if (ctx->engine && ctx->digest && (!type ||
  168|      0|                                       (type
  169|      0|                                        && (type->type ==
  170|      0|                                            ctx->digest->type))))
  171|      0|        goto skip_to_init;
  172|  2.73k|    if (type) {
  173|       |        /*
  174|       |         * Ensure an ENGINE left lying around from last time is cleared (the
  175|       |         * previous check attempted to avoid this if the same ENGINE and
  176|       |         * EVP_MD could be used).
  177|       |         */
  178|  2.73k|        if (ctx->engine)
  179|      0|            ENGINE_finish(ctx->engine);
  180|  2.73k|        if (impl) {
  181|      0|            if (!ENGINE_init(impl)) {
  182|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  183|      0|                return 0;
  184|      0|            }
  185|      0|        } else
  186|       |            /* Ask if an ENGINE is reserved for this job */
  187|  2.73k|            impl = ENGINE_get_digest_engine(type->type);
  188|  2.73k|        if (impl) {
  189|       |            /* There's an ENGINE for this job ... (apparently) */
  190|      0|            const EVP_MD *d = ENGINE_get_digest(impl, type->type);
  191|      0|            if (!d) {
  192|       |                /* Same comment from evp_enc.c */
  193|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  194|      0|                ENGINE_finish(impl);
  195|      0|                return 0;
  196|      0|            }
  197|       |            /* We'll use the ENGINE's private digest definition */
  198|      0|            type = d;
  199|       |            /*
  200|       |             * Store the ENGINE functional reference so we know 'type' came
  201|       |             * from an ENGINE and we need to release it when done.
  202|       |             */
  203|      0|            ctx->engine = impl;
  204|      0|        } else
  205|  2.73k|            ctx->engine = NULL;
  206|  2.73k|    } else {
  207|      0|        if (!ctx->digest) {
  208|      0|            EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_NO_DIGEST_SET);
  209|      0|            return 0;
  210|      0|        }
  211|      0|        type = ctx->digest;
  212|      0|    }
  213|  2.73k|#endif
  214|  2.73k|    if (ctx->digest != type) {
  215|  1.29k|        if (ctx->digest && ctx->digest->ctx_size) {
  216|      0|            OPENSSL_free(ctx->md_data);
  217|      0|            ctx->md_data = NULL;
  218|      0|        }
  219|  1.29k|        ctx->digest = type;
  220|  1.29k|        if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size) {
  221|  1.29k|            ctx->update = type->update;
  222|  1.29k|            ctx->md_data = OPENSSL_malloc(type->ctx_size);
  223|  1.29k|            if (ctx->md_data == NULL) {
  224|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, ERR_R_MALLOC_FAILURE);
  225|      0|                return 0;
  226|      0|            }
  227|  1.29k|        }
  228|  1.29k|    }
  229|  2.73k|#ifndef OPENSSL_NO_ENGINE
  230|  2.73k| skip_to_init:
  231|  2.73k|#endif
  232|  2.73k|    if (ctx->pctx) {
  233|      0|        int r;
  234|      0|        r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
  235|      0|                              EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
  236|      0|        if (r <= 0 && (r != -2))
  237|      0|            return 0;
  238|      0|    }
  239|  2.73k|    if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
  240|      0|        return 1;
  241|       |#ifdef OPENSSL_FIPS
  242|       |    if (FIPS_mode()) {
  243|       |        if (FIPS_digestinit(ctx, type))
  244|       |            return 1;
  245|       |        OPENSSL_free(ctx->md_data);
  246|       |        ctx->md_data = NULL;
  247|       |        return 0;
  248|       |    }
  249|       |#endif
  250|  2.73k|    return ctx->digest->init(ctx);
  251|  2.73k|}
EVP_DigestUpdate:
  254|  10.9k|{
  255|       |#ifdef OPENSSL_FIPS
  256|       |    if (FIPS_mode())
  257|       |        return FIPS_digestupdate(ctx, data, count);
  258|       |#endif
  259|  10.9k|    return ctx->update(ctx, data, count);
  260|  10.9k|}
EVP_DigestFinal_ex:
  273|  2.73k|{
  274|  2.73k|    int ret;
  275|       |#ifdef OPENSSL_FIPS
  276|       |    if (FIPS_mode())
  277|       |        return FIPS_digestfinal(ctx, md, size);
  278|       |#endif
  279|       |
  280|  2.73k|    OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
  281|  2.73k|    ret = ctx->digest->final(ctx, md);
  282|  2.73k|    if (size != NULL)
  283|      0|        *size = ctx->digest->md_size;
  284|  2.73k|    if (ctx->digest->cleanup) {
  285|      0|        ctx->digest->cleanup(ctx);
  286|      0|        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  287|      0|    }
  288|  2.73k|    OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  289|  2.73k|    return ret;
  290|  2.73k|}
EVP_MD_CTX_cleanup:
  377|  1.29k|{
  378|  1.29k|#ifndef OPENSSL_FIPS
  379|       |    /*
  380|       |     * Don't assume ctx->md_data was cleaned in EVP_Digest_Final, because
  381|       |     * sometimes only copies of the context are ever finalised.
  382|       |     */
  383|  1.29k|    if (ctx->digest && ctx->digest->cleanup
  384|  1.29k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_CLEANED))
  385|      0|        ctx->digest->cleanup(ctx);
  386|  1.29k|    if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
  387|  1.29k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
  388|  1.29k|        OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  389|  1.29k|        OPENSSL_free(ctx->md_data);
  390|  1.29k|    }
  391|  1.29k|#endif
  392|  1.29k|    if (ctx->pctx)
  393|      0|        EVP_PKEY_CTX_free(ctx->pctx);
  394|  1.29k|#ifndef OPENSSL_NO_ENGINE
  395|  1.29k|    if (ctx->engine)
  396|       |        /*
  397|       |         * The EVP_MD we used belongs to an ENGINE, release the functional
  398|       |         * reference we held for this reason.
  399|       |         */
  400|      0|        ENGINE_finish(ctx->engine);
  401|  1.29k|#endif
  402|       |#ifdef OPENSSL_FIPS
  403|       |    FIPS_md_ctx_cleanup(ctx);
  404|       |#endif
  405|  1.29k|    memset(ctx, '\0', sizeof *ctx);
  406|       |
  407|  1.29k|    return 1;
  408|  1.29k|}

EVP_aes_128_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_gcm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_wrap:
 2001|      1|{
 2002|      1|    return &aes_128_wrap;
 2003|      1|}
EVP_aes_192_wrap:
 2015|      1|{
 2016|      1|    return &aes_192_wrap;
 2017|      1|}
EVP_aes_256_wrap:
 2029|      1|{
 2030|      1|    return &aes_256_wrap;
 2031|      1|}

EVP_aes_128_cbc_hmac_sha1:
  994|      2|{
  995|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
  996|      2|            &aesni_128_cbc_hmac_sha1_cipher : NULL);
  997|      2|}
EVP_aes_256_cbc_hmac_sha1:
 1000|      2|{
 1001|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
 1002|      2|            &aesni_256_cbc_hmac_sha1_cipher : NULL);
 1003|      2|}

EVP_aes_128_cbc_hmac_sha256:
  973|      2|{
  974|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  975|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  976|      0|            &aesni_128_cbc_hmac_sha256_cipher : NULL);
  977|      2|}
EVP_aes_256_cbc_hmac_sha256:
  980|      2|{
  981|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  982|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  983|      0|            &aesni_256_cbc_hmac_sha256_cipher : NULL);
  984|      2|}

EVP_camellia_128_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cbc:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }

EVP_des_ede:
  378|      1|{
  379|      1|    return &des_ede_ecb;
  380|      1|}
EVP_des_ede3:
  383|      1|{
  384|      1|    return &des_ede3_ecb;
  385|      1|}
EVP_des_ede3_wrap:
  492|      1|{
  493|      1|    return &des3_wrap;
  494|      1|}

EVP_rc2_64_cbc:
  123|      1|{
  124|      1|    return (&r2_64_cbc_cipher);
  125|      1|}
EVP_rc2_40_cbc:
  128|      2|{
  129|      2|    return (&r2_40_cbc_cipher);
  130|      2|}

EVP_rc4:
  111|      2|{
  112|      2|    return (&r4_cipher);
  113|      2|}
EVP_rc4_40:
  116|      1|{
  117|      1|    return (&r4_40_cipher);
  118|      1|}

EVP_rc4_hmac_md5:
  309|      2|{
  310|      2|    return (&r4_hmac_md5_cipher);
  311|      2|}

EVP_desx_cbc:
   97|      1|{
   98|      1|    return (&d_xcbc_cipher);
   99|      1|}

EVP_DecodeInit:
  243|  6.27k|{
  244|       |    /* Only ctx->num is used during decoding. */
  245|  6.27k|    ctx->num = 0;
  246|  6.27k|    ctx->length = 0;
  247|  6.27k|    ctx->line_num = 0;
  248|  6.27k|    ctx->expect_nl = 0;
  249|  6.27k|}
EVP_DecodeUpdate:
  273|  6.27k|{
  274|  6.27k|    int seof = 0, eof = 0, rv = -1, ret = 0, i, v, tmp, n, decoded_len;
  275|  6.27k|    unsigned char *d;
  276|       |
  277|  6.27k|    n = ctx->num;
  278|  6.27k|    d = ctx->enc_data;
  279|       |
  280|  6.27k|    if (n > 0 && d[n - 1] == '=') {
  281|      0|        eof++;
  282|      0|        if (n > 1 && d[n - 2] == '=')
  283|      0|            eof++;
  284|      0|    }
  285|       |
  286|       |     /* Legacy behaviour: an empty input chunk signals end of input. */
  287|  6.27k|    if (inl == 0) {
  288|      0|        rv = 0;
  289|      0|        goto end;
  290|      0|    }
  291|       |
  292|  9.42M|    for (i = 0; i < inl; i++) {
  293|  9.41M|        tmp = *(in++);
  294|  9.41M|        v = conv_ascii2bin(tmp);
  295|  9.41M|        if (v == B64_ERROR) {
  296|      0|            rv = -1;
  297|      0|            goto end;
  298|      0|        }
  299|       |
  300|  9.41M|        if (tmp == '=') {
  301|  5.34k|            eof++;
  302|  9.41M|        } else if (eof > 0 && B64_BASE64(v)) {
  303|       |            /* More data after padding. */
  304|      0|            rv = -1;
  305|      0|            goto end;
  306|      0|        }
  307|       |
  308|  9.41M|        if (eof > 2) {
  309|      0|            rv = -1;
  310|      0|            goto end;
  311|      0|        }
  312|       |
  313|  9.41M|        if (v == B64_EOF) {
  314|      0|            seof = 1;
  315|      0|            goto tail;
  316|      0|        }
  317|       |
  318|       |        /* Only save valid base64 characters. */
  319|  9.41M|        if (B64_BASE64(v)) {
  320|  9.27M|            if (n >= 64) {
  321|       |                /*
  322|       |                 * We increment n once per loop, and empty the buffer as soon as
  323|       |                 * we reach 64 characters, so this can only happen if someone's
  324|       |                 * manually messed with the ctx. Refuse to write any more data.
  325|       |                 */
  326|      0|                rv = -1;
  327|      0|                goto end;
  328|      0|            }
  329|  9.27M|            OPENSSL_assert(n < (int)sizeof(ctx->enc_data));
  330|  9.27M|            d[n++] = tmp;
  331|  9.27M|        }
  332|       |
  333|  9.41M|        if (n == 64) {
  334|   141k|            decoded_len = EVP_DecodeBlock(out, d, n);
  335|   141k|            n = 0;
  336|   141k|            if (decoded_len < 0 || eof > decoded_len) {
  337|      0|                rv = -1;
  338|      0|                goto end;
  339|      0|            }
  340|   141k|            ret += decoded_len - eof;
  341|   141k|            out += decoded_len - eof;
  342|   141k|        }
  343|  9.41M|    }
  344|       |
  345|       |    /*
  346|       |     * Legacy behaviour: if the current line is a full base64-block (i.e., has
  347|       |     * 0 mod 4 base64 characters), it is processed immediately. We keep this
  348|       |     * behaviour as applications may not be calling EVP_DecodeFinal properly.
  349|       |     */
  350|  6.27k|tail:
  351|  6.27k|    if (n > 0) {
  352|  5.88k|        if ((n & 3) == 0) {
  353|  5.88k|            decoded_len = EVP_DecodeBlock(out, d, n);
  354|  5.88k|            n = 0;
  355|  5.88k|            if (decoded_len < 0 || eof > decoded_len) {
  356|      0|                rv = -1;
  357|      0|                goto end;
  358|      0|            }
  359|  5.88k|            ret += (decoded_len - eof);
  360|  5.88k|        } else if (seof) {
  361|       |            /* EOF in the middle of a base64 block. */
  362|      0|            rv = -1;
  363|      0|            goto end;
  364|      0|        }
  365|  5.88k|    }
  366|       |
  367|  6.27k|    rv = seof || (n == 0 && eof) ? 0 : 1;
  368|  6.27k|end:
  369|       |    /* Legacy behaviour. This should probably rather be zeroed on error. */
  370|  6.27k|    *outl = ret;
  371|  6.27k|    ctx->num = n;
  372|  6.27k|    return (rv);
  373|  6.27k|}
EVP_DecodeBlock:
  376|   147k|{
  377|   147k|    int i, ret = 0, a, b, c, d;
  378|   147k|    unsigned long l;
  379|       |
  380|       |    /* trim white space from the start of the line. */
  381|   147k|    while ((conv_ascii2bin(*f) == B64_WS) && (n > 0)) {
  382|      0|        f++;
  383|      0|        n--;
  384|      0|    }
  385|       |
  386|       |    /*
  387|       |     * strip off stuff at the end of the line ascii2bin values B64_WS,
  388|       |     * B64_EOLN, B64_EOLN and B64_EOF
  389|       |     */
  390|   147k|    while ((n > 3) && (B64_NOT_BASE64(conv_ascii2bin(f[n - 1]))))
  391|      0|        n--;
  392|       |
  393|   147k|    if (n % 4 != 0)
  394|      0|        return (-1);
  395|       |
  396|  2.46M|    for (i = 0; i < n; i += 4) {
  397|  2.31M|        a = conv_ascii2bin(*(f++));
  398|  2.31M|        b = conv_ascii2bin(*(f++));
  399|  2.31M|        c = conv_ascii2bin(*(f++));
  400|  2.31M|        d = conv_ascii2bin(*(f++));
  401|  2.31M|        if ((a & 0x80) || (b & 0x80) || (c & 0x80) || (d & 0x80))
  402|      0|            return (-1);
  403|  2.31M|        l = ((((unsigned long)a) << 18L) |
  404|  2.31M|             (((unsigned long)b) << 12L) |
  405|  2.31M|             (((unsigned long)c) << 6L) | (((unsigned long)d)));
  406|  2.31M|        *(t++) = (unsigned char)(l >> 16L) & 0xff;
  407|  2.31M|        *(t++) = (unsigned char)(l >> 8L) & 0xff;
  408|  2.31M|        *(t++) = (unsigned char)(l) & 0xff;
  409|  2.31M|        ret += 3;
  410|  2.31M|    }
  411|   147k|    return (ret);
  412|   147k|}
EVP_DecodeFinal:
  415|  6.27k|{
  416|  6.27k|    int i;
  417|       |
  418|  6.27k|    *outl = 0;
  419|  6.27k|    if (ctx->num != 0) {
  420|      0|        i = EVP_DecodeBlock(out, ctx->enc_data, ctx->num);
  421|      0|        if (i < 0)
  422|      0|            return (-1);
  423|      0|        ctx->num = 0;
  424|      0|        *outl = i;
  425|      0|        return (1);
  426|      0|    } else
  427|  6.27k|        return (1);
  428|  6.27k|}
encode.c:conv_ascii2bin:
  129|  18.9M|{
  130|  18.9M|    if (a & 0x80)
  131|      0|        return B64_ERROR;
  132|  18.9M|    return data_ascii2bin[a];
  133|  18.9M|}

EVP_add_alg_module:
  116|      1|{
  117|      1|    CONF_module_add("alg_section", alg_module_init, 0);
  118|      1|}

ERR_load_EVP_strings:
  247|      1|{
  248|      1|#ifndef OPENSSL_NO_ERR
  249|       |
  250|      1|    if (ERR_func_error_string(EVP_str_functs[0].error) == NULL) {
  251|      1|        ERR_load_strings(0, EVP_str_functs);
  252|      1|        ERR_load_strings(0, EVP_str_reasons);
  253|      1|    }
  254|      1|#endif
  255|      1|}

EVP_MD_size:
  311|      5|{
  312|      5|    if (!md) {
  313|      0|        EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
  314|      0|        return -1;
  315|      0|    }
  316|      5|    return md->md_size;
  317|      5|}
EVP_MD_CTX_clear_flags:
  369|  2.73k|{
  370|  2.73k|    ctx->flags &= ~flags;
  371|  2.73k|}
EVP_MD_CTX_test_flags:
  374|  1.29k|{
  375|  1.29k|    return (ctx->flags & flags);
  376|  1.29k|}

EVP_dss:
  101|      1|{
  102|      1|    return (&dsa_md);
  103|      1|}

EVP_dss1:
  102|      2|{
  103|      2|    return (&dss1_md);
  104|      2|}

EVP_ecdsa:
  151|      2|{
  152|      2|    return (&ecdsa_md);
  153|      2|}

EVP_md4:
  105|      1|{
  106|      1|    return (&md4_md);
  107|      1|}

EVP_md5:
  104|      2|{
  105|      2|    return (&md5_md);
  106|      2|}

EVP_mdc2:
  105|      1|{
  106|      1|    return (&mdc2_md);
  107|      1|}

EVP_ripemd160:
  104|      1|{
  105|      1|    return (&ripemd160_md);
  106|      1|}

EVP_sha:
  103|      1|{
  104|      1|    return (&sha_md);
  105|      1|}

EVP_sha1:
  102|  3.12k|{
  103|  3.12k|    return (&sha1_md);
  104|  3.12k|}
EVP_sha224:
  149|      2|{
  150|      2|    return (&sha224_md);
  151|      2|}
EVP_sha256:
  169|      2|{
  170|      2|    return (&sha256_md);
  171|      2|}
EVP_sha384:
  212|      2|{
  213|      2|    return (&sha384_md);
  214|      2|}
EVP_sha512:
  232|      2|{
  233|      2|    return (&sha512_md);
  234|      2|}
m_sha1.c:init:
   72|  2.73k|{
   73|  2.73k|    return SHA1_Init(ctx->md_data);
   74|  2.73k|}
m_sha1.c:update:
   77|  10.9k|{
   78|  10.9k|    return SHA1_Update(ctx->md_data, data, count);
   79|  10.9k|}
m_sha1.c:final:
   82|  2.73k|{
   83|  2.73k|    return SHA1_Final(md, ctx->md_data);
   84|  2.73k|}

EVP_whirlpool:
   45|      1|{
   46|      1|    return (&whirlpool_md);
   47|      1|}

EVP_add_cipher:
   66|    122|{
   67|    122|    int r;
   68|       |
   69|    122|    if (c == NULL)
   70|      4|        return 0;
   71|       |
   72|    118|    OPENSSL_init();
   73|       |
   74|    118|    r = OBJ_NAME_add(OBJ_nid2sn(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   75|    118|                     (const char *)c);
   76|    118|    if (r == 0)
   77|      0|        return (0);
   78|    118|    check_defer(c->nid);
   79|    118|    r = OBJ_NAME_add(OBJ_nid2ln(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   80|    118|                     (const char *)c);
   81|    118|    return (r);
   82|    118|}
EVP_add_digest:
   85|     24|{
   86|     24|    int r;
   87|     24|    const char *name;
   88|     24|    OPENSSL_init();
   89|       |
   90|     24|    name = OBJ_nid2sn(md->type);
   91|     24|    r = OBJ_NAME_add(name, OBJ_NAME_TYPE_MD_METH, (const char *)md);
   92|     24|    if (r == 0)
   93|      0|        return (0);
   94|     24|    check_defer(md->type);
   95|     24|    r = OBJ_NAME_add(OBJ_nid2ln(md->type), OBJ_NAME_TYPE_MD_METH,
   96|     24|                     (const char *)md);
   97|     24|    if (r == 0)
   98|      0|        return (0);
   99|       |
  100|     24|    if (md->pkey_type && md->type != md->pkey_type) {
  101|     18|        r = OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
  102|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  103|     18|        if (r == 0)
  104|      0|            return (0);
  105|     18|        check_defer(md->pkey_type);
  106|     18|        r = OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
  107|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  108|     18|    }
  109|     24|    return (r);
  110|     24|}
EVP_get_cipherbyname:
  113|     13|{
  114|     13|    const EVP_CIPHER *cp;
  115|       |
  116|     13|    cp = (const EVP_CIPHER *)OBJ_NAME_get(name, OBJ_NAME_TYPE_CIPHER_METH);
  117|     13|    return (cp);
  118|     13|}
EVP_get_digestbyname:
  121|    153|{
  122|    153|    const EVP_MD *cp;
  123|       |
  124|    153|    cp = (const EVP_MD *)OBJ_NAME_get(name, OBJ_NAME_TYPE_MD_METH);
  125|    153|    return (cp);
  126|    153|}

EVP_PKEY_free:
  385|  6.27k|{
  386|  6.27k|    int i;
  387|       |
  388|  6.27k|    if (x == NULL)
  389|  6.27k|        return;
  390|       |
  391|      0|    i = CRYPTO_add(&x->references, -1, CRYPTO_LOCK_EVP_PKEY);
  392|       |#ifdef REF_PRINT
  393|       |    REF_PRINT("EVP_PKEY", x);
  394|       |#endif
  395|      0|    if (i > 0)
  396|      0|        return;
  397|       |#ifdef REF_CHECK
  398|       |    if (i < 0) {
  399|       |        fprintf(stderr, "EVP_PKEY_free, bad reference count\n");
  400|       |        abort();
  401|       |    }
  402|       |#endif
  403|      0|    EVP_PKEY_free_it(x);
  404|      0|    if (x->attributes)
  405|      0|        sk_X509_ATTRIBUTE_pop_free(x->attributes, X509_ATTRIBUTE_free);
  406|      0|    OPENSSL_free(x);
  407|      0|}

EVP_PKEY_meth_new:
  201|      3|{
  202|      3|    EVP_PKEY_METHOD *pmeth;
  203|       |
  204|      3|    pmeth = OPENSSL_malloc(sizeof(EVP_PKEY_METHOD));
  205|      3|    if (!pmeth)
  206|      0|        return NULL;
  207|       |
  208|      3|    memset(pmeth, 0, sizeof(EVP_PKEY_METHOD));
  209|       |
  210|      3|    pmeth->pkey_id = id;
  211|      3|    pmeth->flags = flags | EVP_PKEY_FLAG_DYNAMIC;
  212|      3|    return pmeth;
  213|      3|}
EVP_PKEY_meth_set_init:
  450|      3|{
  451|      3|    pmeth->init = init;
  452|      3|}
EVP_PKEY_meth_set_copy:
  457|      3|{
  458|      3|    pmeth->copy = copy;
  459|      3|}
EVP_PKEY_meth_set_cleanup:
  463|      3|{
  464|      3|    pmeth->cleanup = cleanup;
  465|      3|}
EVP_PKEY_meth_set_paramgen:
  471|      2|{
  472|      2|    pmeth->paramgen_init = paramgen_init;
  473|      2|    pmeth->paramgen = paramgen;
  474|      2|}
EVP_PKEY_meth_set_keygen:
  480|      3|{
  481|      3|    pmeth->keygen_init = keygen_init;
  482|      3|    pmeth->keygen = keygen;
  483|      3|}
EVP_PKEY_meth_set_sign:
  491|      2|{
  492|      2|    pmeth->sign_init = sign_init;
  493|      2|    pmeth->sign = sign;
  494|      2|}
EVP_PKEY_meth_set_verify:
  503|      2|{
  504|      2|    pmeth->verify_init = verify_init;
  505|      2|    pmeth->verify = verify;
  506|      2|}
EVP_PKEY_meth_set_signctx:
  531|      1|{
  532|      1|    pmeth->signctx_init = signctx_init;
  533|      1|    pmeth->signctx = signctx;
  534|      1|}
EVP_PKEY_meth_set_encrypt:
  555|      2|{
  556|      2|    pmeth->encrypt_init = encrypt_init;
  557|      2|    pmeth->encrypt = encryptfn;
  558|      2|}
EVP_PKEY_meth_set_decrypt:
  567|      2|{
  568|      2|    pmeth->decrypt_init = decrypt_init;
  569|      2|    pmeth->decrypt = decrypt;
  570|      2|}
EVP_PKEY_meth_set_derive:
  577|      2|{
  578|      2|    pmeth->derive_init = derive_init;
  579|      2|    pmeth->derive = derive;
  580|      2|}
EVP_PKEY_meth_set_ctrl:
  588|      3|{
  589|      3|    pmeth->ctrl = ctrl;
  590|      3|    pmeth->ctrl_str = ctrl_str;
  591|      3|}

CRYPTO_get_ex_new_index:
  581|      5|{
  582|      5|    int ret = -1;
  583|       |
  584|      5|    IMPL_CHECK
  585|      5|        ret = EX_IMPL(get_new_index) (class_index,
  586|      5|                                      argl, argp, new_func, dup_func,
  587|      5|                                      free_func);
  588|      5|    return ret;
  589|      5|}
CRYPTO_new_ex_data:
  596|  6.62k|{
  597|  6.62k|    IMPL_CHECK return EX_IMPL(new_ex_data) (class_index, obj, ad);
  598|  6.62k|}
CRYPTO_free_ex_data:
  615|  6.61k|{
  616|  6.61k|    IMPL_CHECK EX_IMPL(free_ex_data) (class_index, obj, ad);
  617|  6.61k|}
CRYPTO_set_ex_data:
  624|    588|{
  625|    588|    int i;
  626|       |
  627|    588|    if (ad->sk == NULL) {
  628|     49|        if ((ad->sk = sk_void_new_null()) == NULL) {
  629|      0|            CRYPTOerr(CRYPTO_F_CRYPTO_SET_EX_DATA, ERR_R_MALLOC_FAILURE);
  630|      0|            return (0);
  631|      0|        }
  632|     49|    }
  633|    588|    i = sk_void_num(ad->sk);
  634|       |
  635|    784|    while (i <= idx) {
  636|    196|        if (!sk_void_push(ad->sk, NULL)) {
  637|      0|            CRYPTOerr(CRYPTO_F_CRYPTO_SET_EX_DATA, ERR_R_MALLOC_FAILURE);
  638|      0|            return (0);
  639|      0|        }
  640|    196|        i++;
  641|    196|    }
  642|    588|    sk_void_set(ad->sk, idx, val);
  643|    588|    return (1);
  644|    588|}
ex_data.c:impl_check:
  200|      1|{
  201|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  202|      1|    if (!impl)
  203|      1|        impl = &impl_default;
  204|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  205|      1|}
ex_data.c:ex_data_check:
  276|      1|{
  277|      1|    int toret = 1;
  278|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  279|      1|    if (!ex_data && (ex_data = lh_EX_CLASS_ITEM_new()) == NULL)
  280|      0|        toret = 0;
  281|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  282|      1|    return toret;
  283|      1|}
ex_data.c:ex_class_item_hash:
  258|  13.2k|{
  259|  13.2k|    return a->class_index;
  260|  13.2k|}
ex_data.c:ex_class_item_cmp:
  265|  13.2k|{
  266|  13.2k|    return a->class_index - b->class_index;
  267|  13.2k|}
ex_data.c:int_get_new_index:
  407|      5|{
  408|      5|    EX_CLASS_ITEM *item = def_get_class(class_index);
  409|      5|    if (!item)
  410|      0|        return -1;
  411|      5|    return def_add_index(item, argl, argp, new_func, dup_func, free_func);
  412|      5|}
ex_data.c:def_get_class:
  314|  13.2k|{
  315|  13.2k|    EX_CLASS_ITEM d, *p, *gen;
  316|  13.2k|    EX_DATA_CHECK(return NULL;)
  317|  13.2k|        d.class_index = class_index;
  318|  13.2k|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  319|  13.2k|    p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  320|  13.2k|    if (!p) {
  321|      8|        gen = OPENSSL_malloc(sizeof(EX_CLASS_ITEM));
  322|      8|        if (gen) {
  323|      8|            gen->class_index = class_index;
  324|      8|            gen->meth_num = 0;
  325|      8|            gen->meth = sk_CRYPTO_EX_DATA_FUNCS_new_null();
  326|      8|            if (!gen->meth)
  327|      0|                OPENSSL_free(gen);
  328|      8|            else {
  329|       |                /*
  330|       |                 * Because we're inside the ex_data lock, the return value
  331|       |                 * from the insert will be NULL
  332|       |                 */
  333|      8|                (void)lh_EX_CLASS_ITEM_insert(ex_data, gen);
  334|      8|                p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  335|      8|                if (p != gen) {
  336|      0|                    sk_CRYPTO_EX_DATA_FUNCS_free(gen->meth);
  337|      0|                    OPENSSL_free(gen);
  338|      0|                }
  339|      8|            }
  340|      8|        }
  341|      8|    }
  342|  13.2k|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  343|  13.2k|    if (!p)
  344|  13.2k|        CRYPTOerr(CRYPTO_F_DEF_GET_CLASS, ERR_R_MALLOC_FAILURE);
  345|  13.2k|    return p;
  346|  13.2k|}
ex_data.c:def_add_index:
  355|      5|{
  356|      5|    int toret = -1;
  357|      5|    CRYPTO_EX_DATA_FUNCS *a =
  358|      5|        (CRYPTO_EX_DATA_FUNCS *)OPENSSL_malloc(sizeof(CRYPTO_EX_DATA_FUNCS));
  359|      5|    if (!a) {
  360|      0|        CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  361|      0|        return -1;
  362|      0|    }
  363|      5|    a->argl = argl;
  364|      5|    a->argp = argp;
  365|      5|    a->new_func = new_func;
  366|      5|    a->dup_func = dup_func;
  367|      5|    a->free_func = free_func;
  368|      5|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  369|     10|    while (sk_CRYPTO_EX_DATA_FUNCS_num(item->meth) <= item->meth_num) {
  370|      5|        if (!sk_CRYPTO_EX_DATA_FUNCS_push(item->meth, NULL)) {
  371|      0|            CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  372|      0|            OPENSSL_free(a);
  373|      0|            goto err;
  374|      0|        }
  375|      5|    }
  376|      5|    toret = item->meth_num++;
  377|      5|    (void)sk_CRYPTO_EX_DATA_FUNCS_set(item->meth, toret, a);
  378|      5| err:
  379|      5|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  380|      5|    return toret;
  381|      5|}
ex_data.c:int_new_ex_data:
  421|  6.62k|{
  422|  6.62k|    int mx, i;
  423|  6.62k|    void *ptr;
  424|  6.62k|    CRYPTO_EX_DATA_FUNCS **storage = NULL;
  425|  6.62k|    EX_CLASS_ITEM *item = def_get_class(class_index);
  426|  6.62k|    if (!item)
  427|       |        /* error is already set */
  428|      0|        return 0;
  429|  6.62k|    ad->sk = NULL;
  430|  6.62k|    CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  431|  6.62k|    mx = sk_CRYPTO_EX_DATA_FUNCS_num(item->meth);
  432|  6.62k|    if (mx > 0) {
  433|     49|        storage = OPENSSL_malloc(mx * sizeof(CRYPTO_EX_DATA_FUNCS *));
  434|     49|        if (!storage)
  435|      0|            goto skip;
  436|    245|        for (i = 0; i < mx; i++)
  437|    196|            storage[i] = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  438|     49|    }
  439|  6.62k| skip:
  440|  6.62k|    CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  441|  6.62k|    if ((mx > 0) && !storage) {
  442|      0|        CRYPTOerr(CRYPTO_F_INT_NEW_EX_DATA, ERR_R_MALLOC_FAILURE);
  443|      0|        return 0;
  444|      0|    }
  445|  6.82k|    for (i = 0; i < mx; i++) {
  446|    196|        if (storage[i] && storage[i]->new_func) {
  447|      0|            ptr = CRYPTO_get_ex_data(ad, i);
  448|      0|            storage[i]->new_func(obj, ptr, ad, i,
  449|      0|                                 storage[i]->argl, storage[i]->argp);
  450|      0|        }
  451|    196|    }
  452|  6.62k|    if (storage)
  453|     49|        OPENSSL_free(storage);
  454|  6.62k|    return 1;
  455|  6.62k|}
ex_data.c:int_free_ex_data:
  511|  6.61k|{
  512|  6.61k|    int mx, i;
  513|  6.61k|    EX_CLASS_ITEM *item;
  514|  6.61k|    void *ptr;
  515|  6.61k|    CRYPTO_EX_DATA_FUNCS *f;
  516|  6.61k|    CRYPTO_EX_DATA_FUNCS **storage = NULL;
  517|  6.61k|    if (ex_data == NULL)
  518|      0|        goto err;
  519|  6.61k|    if ((item = def_get_class(class_index)) == NULL)
  520|      0|        goto err;
  521|  6.61k|    CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  522|  6.61k|    mx = sk_CRYPTO_EX_DATA_FUNCS_num(item->meth);
  523|  6.61k|    if (mx > 0) {
  524|     49|        storage = OPENSSL_malloc(mx * sizeof(CRYPTO_EX_DATA_FUNCS *));
  525|     49|        if (!storage)
  526|      0|            goto skip;
  527|    245|        for (i = 0; i < mx; i++)
  528|    196|            storage[i] = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  529|     49|    }
  530|  6.61k| skip:
  531|  6.61k|    CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  532|  6.81k|    for (i = 0; i < mx; i++) {
  533|    196|        if (storage != NULL)
  534|    196|            f = storage[i];
  535|      0|        else {
  536|      0|            CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  537|      0|            f = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  538|      0|            CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  539|      0|        }
  540|    196|        if (f != NULL && f->free_func != NULL) {
  541|      0|            ptr = CRYPTO_get_ex_data(ad, i);
  542|      0|            f->free_func(obj, ptr, ad, i, f->argl, f->argp);
  543|      0|        }
  544|    196|    }
  545|  6.61k|    OPENSSL_free(storage);
  546|  6.61k| err:
  547|  6.61k|    sk_void_free(ad->sk);
  548|  6.61k|    ad->sk = NULL;
  549|  6.61k|}

lh_new:
  134|    872|{
  135|    872|    _LHASH *ret;
  136|    872|    int i;
  137|       |
  138|    872|    if ((ret = OPENSSL_malloc(sizeof(_LHASH))) == NULL)
  139|      0|        goto err0;
  140|    872|    if ((ret->b = OPENSSL_malloc(sizeof(LHASH_NODE *) * MIN_NODES)) == NULL)
  141|      0|        goto err1;
  142|  14.8k|    for (i = 0; i < MIN_NODES; i++)
  143|  13.9k|        ret->b[i] = NULL;
  144|    872|    ret->comp = ((c == NULL) ? (LHASH_COMP_FN_TYPE)strcmp : c);
  145|    872|    ret->hash = ((h == NULL) ? (LHASH_HASH_FN_TYPE)lh_strhash : h);
  146|    872|    ret->num_nodes = MIN_NODES / 2;
  147|    872|    ret->num_alloc_nodes = MIN_NODES;
  148|    872|    ret->p = 0;
  149|    872|    ret->pmax = MIN_NODES / 2;
  150|    872|    ret->up_load = UP_LOAD;
  151|    872|    ret->down_load = DOWN_LOAD;
  152|    872|    ret->num_items = 0;
  153|       |
  154|    872|    ret->num_expands = 0;
  155|    872|    ret->num_expand_reallocs = 0;
  156|    872|    ret->num_contracts = 0;
  157|    872|    ret->num_contract_reallocs = 0;
  158|    872|    ret->num_hash_calls = 0;
  159|    872|    ret->num_comp_calls = 0;
  160|    872|    ret->num_insert = 0;
  161|    872|    ret->num_replace = 0;
  162|    872|    ret->num_delete = 0;
  163|    872|    ret->num_no_delete = 0;
  164|    872|    ret->num_retrieve = 0;
  165|    872|    ret->num_retrieve_miss = 0;
  166|    872|    ret->num_hash_comps = 0;
  167|       |
  168|    872|    ret->error = 0;
  169|    872|    return (ret);
  170|      0| err1:
  171|      0|    OPENSSL_free(ret);
  172|      0| err0:
  173|      0|    return (NULL);
  174|      0|}
lh_free:
  177|    862|{
  178|    862|    unsigned int i;
  179|    862|    LHASH_NODE *n, *nn;
  180|       |
  181|    862|    if (lh == NULL)
  182|      0|        return;
  183|       |
  184|  7.75k|    for (i = 0; i < lh->num_nodes; i++) {
  185|  6.89k|        n = lh->b[i];
  186|  6.89k|        while (n != NULL) {
  187|      0|            nn = n->next;
  188|      0|            OPENSSL_free(n);
  189|      0|            n = nn;
  190|      0|        }
  191|  6.89k|    }
  192|    862|    OPENSSL_free(lh->b);
  193|    862|    OPENSSL_free(lh);
  194|    862|}
lh_insert:
  197|  20.2k|{
  198|  20.2k|    unsigned long hash;
  199|  20.2k|    LHASH_NODE *nn, **rn;
  200|  20.2k|    void *ret;
  201|       |
  202|  20.2k|    lh->error = 0;
  203|  20.2k|    if (lh->up_load <= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)
  204|  20.2k|            && !expand(lh))
  205|      0|        return NULL;
  206|       |
  207|  20.2k|    rn = getrn(lh, data, &hash);
  208|       |
  209|  20.2k|    if (*rn == NULL) {
  210|  4.03k|        if ((nn = (LHASH_NODE *)OPENSSL_malloc(sizeof(LHASH_NODE))) == NULL) {
  211|      0|            lh->error++;
  212|      0|            return (NULL);
  213|      0|        }
  214|  4.03k|        nn->data = data;
  215|  4.03k|        nn->next = NULL;
  216|  4.03k|#ifndef OPENSSL_NO_HASH_COMP
  217|  4.03k|        nn->hash = hash;
  218|  4.03k|#endif
  219|  4.03k|        *rn = nn;
  220|  4.03k|        ret = NULL;
  221|  4.03k|        lh->num_insert++;
  222|  4.03k|        lh->num_items++;
  223|  16.2k|    } else {                    /* replace same key */
  224|       |
  225|  16.2k|        ret = (*rn)->data;
  226|  16.2k|        (*rn)->data = data;
  227|  16.2k|        lh->num_replace++;
  228|  16.2k|    }
  229|  20.2k|    return (ret);
  230|  20.2k|}
lh_delete:
  233|    813|{
  234|    813|    unsigned long hash;
  235|    813|    LHASH_NODE *nn, **rn;
  236|    813|    void *ret;
  237|       |
  238|    813|    lh->error = 0;
  239|    813|    rn = getrn(lh, data, &hash);
  240|       |
  241|    813|    if (*rn == NULL) {
  242|      0|        lh->num_no_delete++;
  243|      0|        return (NULL);
  244|    813|    } else {
  245|    813|        nn = *rn;
  246|    813|        *rn = nn->next;
  247|    813|        ret = nn->data;
  248|    813|        OPENSSL_free(nn);
  249|    813|        lh->num_delete++;
  250|    813|    }
  251|       |
  252|    813|    lh->num_items--;
  253|    813|    if ((lh->num_nodes > MIN_NODES) &&
  254|    813|        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))
  255|      0|        contract(lh);
  256|       |
  257|    813|    return (ret);
  258|    813|}
lh_retrieve:
  261|  22.5k|{
  262|  22.5k|    unsigned long hash;
  263|  22.5k|    LHASH_NODE **rn;
  264|  22.5k|    void *ret;
  265|       |
  266|  22.5k|    lh->error = 0;
  267|  22.5k|    rn = getrn(lh, data, &hash);
  268|       |
  269|  22.5k|    if (*rn == NULL) {
  270|  2.97k|        lh->num_retrieve_miss++;
  271|  2.97k|        return (NULL);
  272|  19.5k|    } else {
  273|  19.5k|        ret = (*rn)->data;
  274|  19.5k|        lh->num_retrieve++;
  275|  19.5k|    }
  276|  19.5k|    return (ret);
  277|  22.5k|}
lh_doall_arg:
  318|     49|{
  319|     49|    doall_util_fn(lh, 1, (LHASH_DOALL_FN_TYPE)0, func, arg);
  320|     49|}
lh_strhash:
  447|    682|{
  448|    682|    unsigned long ret = 0;
  449|    682|    long n;
  450|    682|    unsigned long v;
  451|    682|    int r;
  452|       |
  453|    682|    if ((c == NULL) || (*c == '\0'))
  454|      0|        return (ret);
  455|       |/*-
  456|       |    unsigned char b[16];
  457|       |    MD5(c,strlen(c),b);
  458|       |    return(b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<24));
  459|       |*/
  460|       |
  461|    682|    n = 0x100;
  462|  6.39k|    while (*c) {
  463|  5.71k|        v = n | (*c);
  464|  5.71k|        n += 0x100;
  465|  5.71k|        r = (int)((v >> 2) ^ v) & 0x0f;
  466|  5.71k|        ret = (ret << r) | (ret >> (32 - r));
  467|  5.71k|        ret &= 0xFFFFFFFFL;
  468|  5.71k|        ret ^= v * v;
  469|  5.71k|        c++;
  470|  5.71k|    }
  471|    682|    return ((ret >> 16) ^ ret);
  472|    682|}
lh_num_items:
  475|    813|{
  476|    813|    return lh ? lh->num_items : 0;
  477|    813|}
lhash.c:doall_util_fn:
  281|     49|{
  282|     49|    int i;
  283|     49|    LHASH_NODE *a, *n;
  284|       |
  285|     49|    if (lh == NULL)
  286|      0|        return;
  287|       |
  288|       |    /*
  289|       |     * reverse the order so we search from 'top to bottom' We were having
  290|       |     * memory leaks otherwise
  291|       |     */
  292|    441|    for (i = lh->num_nodes - 1; i >= 0; i--) {
  293|    392|        a = lh->b[i];
  294|    392|        while (a != NULL) {
  295|       |            /*
  296|       |             * 28/05/91 - eay - n added so items can be deleted via lh_doall
  297|       |             */
  298|       |            /*
  299|       |             * 22/05/08 - ben - eh? since a is not passed, this should not be
  300|       |             * needed
  301|       |             */
  302|      0|            n = a->next;
  303|      0|            if (use_arg)
  304|      0|                func_arg(a->data, arg);
  305|      0|            else
  306|      0|                func(a->data);
  307|      0|            a = n;
  308|      0|        }
  309|    392|    }
  310|     49|}
lhash.c:expand:
  323|  1.58k|{
  324|  1.58k|    LHASH_NODE **n, **n1, **n2, *np;
  325|  1.58k|    unsigned int p, pmax, nni, j;
  326|  1.58k|    unsigned long hash;
  327|       |
  328|  1.58k|    nni = lh->num_alloc_nodes;
  329|  1.58k|    p = lh->p;
  330|  1.58k|    pmax = lh->pmax;
  331|  1.58k|    if (p + 1 >= pmax) {
  332|     11|        j = nni * 2;
  333|     11|        n = OPENSSL_realloc(lh->b, (int)(sizeof(LHASH_NODE *) * j));
  334|     11|        if (n == NULL) {
  335|      0|            lh->error++;
  336|      0|            return 0;
  337|      0|        }
  338|     11|        lh->b = n;
  339|     11|        memset(n + nni, 0, sizeof(*n) * (j - nni));
  340|     11|        lh->pmax = nni;
  341|     11|        lh->num_alloc_nodes = j;
  342|     11|        lh->num_expand_reallocs++;
  343|     11|        lh->p = 0;
  344|  1.57k|    } else {
  345|  1.57k|        lh->p++;
  346|  1.57k|    }
  347|       |
  348|  1.58k|    lh->num_nodes++;
  349|  1.58k|    lh->num_expands++;
  350|  1.58k|    n1 = &(lh->b[p]);
  351|  1.58k|    n2 = &(lh->b[p + pmax]);
  352|  1.58k|    *n2 = NULL;
  353|       |
  354|  7.20k|    for (np = *n1; np != NULL;) {
  355|  5.61k|#ifndef OPENSSL_NO_HASH_COMP
  356|  5.61k|        hash = np->hash;
  357|       |#else
  358|       |        hash = lh->hash(np->data);
  359|       |        lh->num_hash_calls++;
  360|       |#endif
  361|  5.61k|        if ((hash % nni) != p) { /* move it */
  362|    558|            *n1 = (*n1)->next;
  363|    558|            np->next = *n2;
  364|    558|            *n2 = np;
  365|    558|        } else
  366|  5.05k|            n1 = &((*n1)->next);
  367|  5.61k|        np = *n1;
  368|  5.61k|    }
  369|       |
  370|  1.58k|    return 1;
  371|  1.58k|}
lhash.c:getrn:
  410|  43.6k|{
  411|  43.6k|    LHASH_NODE **ret, *n1;
  412|  43.6k|    unsigned long hash, nn;
  413|  43.6k|    LHASH_COMP_FN_TYPE cf;
  414|       |
  415|  43.6k|    hash = (*(lh->hash)) (data);
  416|  43.6k|    lh->num_hash_calls++;
  417|  43.6k|    *rhash = hash;
  418|       |
  419|  43.6k|    nn = hash % lh->pmax;
  420|  43.6k|    if (nn < lh->p)
  421|  11.8k|        nn = hash % lh->num_alloc_nodes;
  422|       |
  423|  43.6k|    cf = lh->comp;
  424|  43.6k|    ret = &(lh->b[(int)nn]);
  425|  84.0k|    for (n1 = *ret; n1 != NULL; n1 = n1->next) {
  426|  77.0k|#ifndef OPENSSL_NO_HASH_COMP
  427|  77.0k|        lh->num_hash_comps++;
  428|  77.0k|        if (n1->hash != hash) {
  429|  39.3k|            ret = &(n1->next);
  430|  39.3k|            continue;
  431|  39.3k|        }
  432|  37.6k|#endif
  433|  37.6k|        lh->num_comp_calls++;
  434|  37.6k|        if (cf(n1->data, data) == 0)
  435|  36.6k|            break;
  436|  1.06k|        ret = &(n1->next);
  437|  1.06k|    }
  438|  43.6k|    return (ret);
  439|  43.6k|}

CRYPTO_malloc:
  333|  1.21M|{
  334|  1.21M|    void *ret = NULL;
  335|       |
  336|  1.21M|    if (num <= 0)
  337|      0|        return NULL;
  338|       |
  339|  1.21M|    if (allow_customize)
  340|      1|        allow_customize = 0;
  341|  1.21M|    if (malloc_debug_func != NULL) {
  342|      0|        if (allow_customize_debug)
  343|      0|            allow_customize_debug = 0;
  344|      0|        malloc_debug_func(NULL, num, file, line, 0);
  345|      0|    }
  346|  1.21M|    ret = malloc_ex_func(num, file, line);
  347|       |#ifdef LEVITTE_DEBUG_MEM
  348|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         > 0x%p (%d)\n", ret, num);
  349|       |#endif
  350|  1.21M|    if (malloc_debug_func != NULL)
  351|      0|        malloc_debug_func(ret, num, file, line, 1);
  352|       |
  353|  1.21M|    return ret;
  354|  1.21M|}
CRYPTO_realloc:
  368|  49.3k|{
  369|  49.3k|    void *ret = NULL;
  370|       |
  371|  49.3k|    if (str == NULL)
  372|      0|        return CRYPTO_malloc(num, file, line);
  373|       |
  374|  49.3k|    if (num <= 0)
  375|      0|        return NULL;
  376|       |
  377|  49.3k|    if (realloc_debug_func != NULL)
  378|      0|        realloc_debug_func(str, NULL, num, file, line, 0);
  379|  49.3k|    ret = realloc_ex_func(str, num, file, line);
  380|       |#ifdef LEVITTE_DEBUG_MEM
  381|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         | 0x%p -> 0x%p (%d)\n", str,
  382|       |            ret, num);
  383|       |#endif
  384|  49.3k|    if (realloc_debug_func != NULL)
  385|      0|        realloc_debug_func(str, ret, num, file, line, 1);
  386|       |
  387|  49.3k|    return ret;
  388|  49.3k|}
CRYPTO_free:
  428|  1.22M|{
  429|  1.22M|    if (free_debug_func != NULL)
  430|      0|        free_debug_func(str, 0);
  431|       |#ifdef LEVITTE_DEBUG_MEM
  432|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         < 0x%p\n", str);
  433|       |#endif
  434|  1.22M|    free_func(str);
  435|  1.22M|    if (free_debug_func != NULL)
  436|      0|        free_debug_func(NULL, 1);
  437|  1.22M|}
mem.c:default_malloc_ex:
   78|  1.21M|{
   79|  1.21M|    return malloc_func(num);
   80|  1.21M|}
mem.c:default_realloc_ex:
   96|  49.3k|{
   97|  49.3k|    return realloc_func(str, num);
   98|  49.3k|}

CRYPTO_mem_ctrl:
  209|      4|{
  210|      4|    int ret = mh_mode;
  211|       |
  212|      4|    CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  213|      4|    switch (mode) {
  214|       |        /*
  215|       |         * for applications (not to be called while multiple threads use the
  216|       |         * library):
  217|       |         */
  218|      0|    case CRYPTO_MEM_CHECK_ON:  /* aka MemCheck_start() */
  219|      0|        mh_mode = CRYPTO_MEM_CHECK_ON | CRYPTO_MEM_CHECK_ENABLE;
  220|      0|        num_disable = 0;
  221|      0|        break;
  222|      0|    case CRYPTO_MEM_CHECK_OFF: /* aka MemCheck_stop() */
  223|      0|        mh_mode = 0;
  224|      0|        num_disable = 0;        /* should be true *before* MemCheck_stop is
  225|       |                                 * used, or there'll be a lot of confusion */
  226|      0|        break;
  227|       |
  228|       |        /* switch off temporarily (for library-internal use): */
  229|      2|    case CRYPTO_MEM_CHECK_DISABLE: /* aka MemCheck_off() */
  230|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  231|      0|            CRYPTO_THREADID cur;
  232|      0|            CRYPTO_THREADID_current(&cur);
  233|       |            /* see if we don't have the MALLOC2 lock already */
  234|      0|            if (!num_disable
  235|      0|                || CRYPTO_THREADID_cmp(&disabling_threadid, &cur)) {
  236|       |                /*
  237|       |                 * Long-time lock CRYPTO_LOCK_MALLOC2 must not be claimed
  238|       |                 * while we're holding CRYPTO_LOCK_MALLOC, or we'll deadlock
  239|       |                 * if somebody else holds CRYPTO_LOCK_MALLOC2 (and cannot
  240|       |                 * release it because we block entry to this function). Give
  241|       |                 * them a chance, first, and then claim the locks in
  242|       |                 * appropriate order (long-time lock first).
  243|       |                 */
  244|      0|                CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  245|       |                /*
  246|       |                 * Note that after we have waited for CRYPTO_LOCK_MALLOC2 and
  247|       |                 * CRYPTO_LOCK_MALLOC, we'll still be in the right "case" and
  248|       |                 * "if" branch because MemCheck_start and MemCheck_stop may
  249|       |                 * never be used while there are multiple OpenSSL threads.
  250|       |                 */
  251|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC2);
  252|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  253|      0|                mh_mode &= ~CRYPTO_MEM_CHECK_ENABLE;
  254|      0|                CRYPTO_THREADID_cpy(&disabling_threadid, &cur);
  255|      0|            }
  256|      0|            num_disable++;
  257|      0|        }
  258|      2|        break;
  259|      2|    case CRYPTO_MEM_CHECK_ENABLE: /* aka MemCheck_on() */
  260|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  261|      0|            if (num_disable) {  /* always true, or something is going wrong */
  262|      0|                num_disable--;
  263|      0|                if (num_disable == 0) {
  264|      0|                    mh_mode |= CRYPTO_MEM_CHECK_ENABLE;
  265|      0|                    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC2);
  266|      0|                }
  267|      0|            }
  268|      0|        }
  269|      2|        break;
  270|       |
  271|      0|    default:
  272|      0|        break;
  273|      4|    }
  274|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  275|      4|    return (ret);
  276|      4|}
CRYPTO_is_mem_check_on:
  279|  1.62k|{
  280|  1.62k|    int ret = 0;
  281|       |
  282|  1.62k|    if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  283|      0|        CRYPTO_THREADID cur;
  284|      0|        CRYPTO_THREADID_current(&cur);
  285|      0|        CRYPTO_r_lock(CRYPTO_LOCK_MALLOC);
  286|       |
  287|      0|        ret = (mh_mode & CRYPTO_MEM_CHECK_ENABLE)
  288|      0|            || CRYPTO_THREADID_cmp(&disabling_threadid, &cur);
  289|       |
  290|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_MALLOC);
  291|      0|    }
  292|  1.62k|    return (ret);
  293|  1.62k|}
CRYPTO_push_info_:
  390|    814|{
  391|    814|    APP_INFO *ami, *amim;
  392|    814|    int ret = 0;
  393|       |
  394|    814|    if (is_MemCheck_on()) {
  395|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  396|       |
  397|      0|        if ((ami = (APP_INFO *)OPENSSL_malloc(sizeof(APP_INFO))) == NULL) {
  398|      0|            ret = 0;
  399|      0|            goto err;
  400|      0|        }
  401|      0|        if (amih == NULL) {
  402|      0|            if ((amih = lh_APP_INFO_new()) == NULL) {
  403|      0|                OPENSSL_free(ami);
  404|      0|                ret = 0;
  405|      0|                goto err;
  406|      0|            }
  407|      0|        }
  408|       |
  409|      0|        CRYPTO_THREADID_current(&ami->threadid);
  410|      0|        ami->file = file;
  411|      0|        ami->line = line;
  412|      0|        ami->info = info;
  413|      0|        ami->references = 1;
  414|      0|        ami->next = NULL;
  415|       |
  416|      0|        if ((amim = lh_APP_INFO_insert(amih, ami)) != NULL) {
  417|       |#ifdef LEVITTE_DEBUG_MEM
  418|       |            if (CRYPTO_THREADID_cmp(&ami->threadid, &amim->threadid)) {
  419|       |                fprintf(stderr,
  420|       |                        "CRYPTO_push_info(): previous info has other thread ID (%lu) than the current thread (%lu)!!!!\n",
  421|       |                        CRYPTO_THREADID_hash(&amim->threadid),
  422|       |                        CRYPTO_THREADID_hash(&ami->threadid));
  423|       |                abort();
  424|       |            }
  425|       |#endif
  426|      0|            ami->next = amim;
  427|      0|        }
  428|      0| err:
  429|      0|        MemCheck_on();          /* release MALLOC2 lock */
  430|      0|    }
  431|       |
  432|    814|    return (ret);
  433|    814|}
CRYPTO_pop_info:
  436|    814|{
  437|    814|    int ret = 0;
  438|       |
  439|    814|    if (is_MemCheck_on()) {     /* _must_ be true, or something went severely
  440|       |                                 * wrong */
  441|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  442|       |
  443|      0|        ret = (pop_info() != NULL);
  444|       |
  445|      0|        MemCheck_on();          /* release MALLOC2 lock */
  446|      0|    }
  447|    814|    return (ret);
  448|    814|}

OPENSSL_init:
   69|    142|{
   70|    142|    static int done = 0;
   71|    142|    if (done)
   72|    141|        return;
   73|      1|    done = 1;
   74|       |#ifdef OPENSSL_FIPS
   75|       |    FIPS_set_locking_callbacks(CRYPTO_lock, CRYPTO_add_lock);
   76|       |# ifndef OPENSSL_NO_DEPRECATED
   77|       |    FIPS_crypto_set_id_callback(CRYPTO_thread_id);
   78|       |# endif
   79|       |    FIPS_set_error_callbacks(ERR_put_error, ERR_add_error_vdata);
   80|       |    FIPS_set_malloc_callbacks(CRYPTO_malloc, CRYPTO_free);
   81|       |    RAND_init_fips();
   82|       |#endif
   83|       |#if 0
   84|       |    fprintf(stderr, "Called OPENSSL_init\n");
   85|       |#endif
   86|      1|}

o_names.c:obj_name_LHASH_HASH:
  105|    682|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|    682|                const o_type *a = arg; \
  107|    682|                return name##_hash(a); }
o_names.c:obj_name_LHASH_COMP:
  114|    391|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|    391|                const o_type *a = arg1;             \
  116|    391|                const o_type *b = arg2; \
  117|    391|                return name##_cmp(a,b); }

obj_dat.c:OBJ_bsearch_obj:
 1070|  23.7k|      { \
 1071|  23.7k|      return (type2 *)OBJ_bsearch_(key, base, num, sizeof(type2), \
 1072|  23.7k|                                        nm##_cmp_BSEARCH_CMP_FN); \
 1073|  23.7k|      } \
obj_dat.c:obj_cmp_BSEARCH_CMP_FN:
 1064|   217k|      { \
 1065|   217k|      type1 const *a = a_; \
 1066|   217k|      type2 const *b = b_; \
 1067|   217k|      return nm##_cmp(a,b); \
 1068|   217k|      } \

OBJ_NAME_init:
   57|      1|{
   58|      1|    if (names_lh != NULL)
   59|      0|        return (1);
   60|      1|    MemCheck_off();
   61|      1|    names_lh = lh_OBJ_NAME_new();
   62|      1|    MemCheck_on();
   63|      1|    return (names_lh != NULL);
   64|      1|}
OBJ_NAME_get:
  151|    166|{
  152|    166|    OBJ_NAME on, *ret;
  153|    166|    int num = 0, alias;
  154|       |
  155|    166|    if (name == NULL)
  156|      0|        return (NULL);
  157|    166|    if ((names_lh == NULL) && !OBJ_NAME_init())
  158|      0|        return (NULL);
  159|       |
  160|    166|    alias = type & OBJ_NAME_ALIAS;
  161|    166|    type &= ~OBJ_NAME_ALIAS;
  162|       |
  163|    166|    on.name = name;
  164|    166|    on.type = type;
  165|       |
  166|    313|    for (;;) {
  167|    313|        ret = lh_OBJ_NAME_retrieve(names_lh, &on);
  168|    313|        if (ret == NULL)
  169|      0|            return (NULL);
  170|    313|        if ((ret->alias) && !alias) {
  171|    147|            if (++num > 10)
  172|      0|                return (NULL);
  173|    147|            on.name = ret->data;
  174|    166|        } else {
  175|    166|            return (ret->data);
  176|    166|        }
  177|    313|    }
  178|    166|}
OBJ_NAME_add:
  181|    369|{
  182|    369|    OBJ_NAME *onp, *ret;
  183|    369|    int alias;
  184|       |
  185|    369|    if ((names_lh == NULL) && !OBJ_NAME_init())
  186|      0|        return (0);
  187|       |
  188|    369|    alias = type & OBJ_NAME_ALIAS;
  189|    369|    type &= ~OBJ_NAME_ALIAS;
  190|       |
  191|    369|    onp = (OBJ_NAME *)OPENSSL_malloc(sizeof(OBJ_NAME));
  192|    369|    if (onp == NULL) {
  193|       |        /* ERROR */
  194|      0|        return 0;
  195|      0|    }
  196|       |
  197|    369|    onp->name = name;
  198|    369|    onp->alias = alias;
  199|    369|    onp->type = type;
  200|    369|    onp->data = data;
  201|       |
  202|    369|    ret = lh_OBJ_NAME_insert(names_lh, onp);
  203|    369|    if (ret != NULL) {
  204|       |        /* free things */
  205|     78|        if ((name_funcs_stack != NULL)
  206|     78|            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {
  207|       |            /*
  208|       |             * XXX: I'm not sure I understand why the free function should
  209|       |             * get three arguments... -- Richard Levitte
  210|       |             */
  211|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  212|      0|                                ret->type)->free_func(ret->name, ret->type,
  213|      0|                                                      ret->data);
  214|      0|        }
  215|     78|        OPENSSL_free(ret);
  216|    291|    } else {
  217|    291|        if (lh_OBJ_NAME_error(names_lh)) {
  218|       |            /* ERROR */
  219|      0|            OPENSSL_free(onp);
  220|      0|            return 0;
  221|      0|        }
  222|    291|    }
  223|    369|    return 1;
  224|    369|}
o_names.c:obj_name_hash:
  134|    682|{
  135|    682|    unsigned long ret;
  136|    682|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  137|       |
  138|    682|    if ((name_funcs_stack != NULL)
  139|    682|        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  140|      0|        ret =
  141|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  142|      0|                                a->type)->hash_func(a->name);
  143|    682|    } else {
  144|    682|        ret = lh_strhash(a->name);
  145|    682|    }
  146|    682|    ret ^= a->type;
  147|    682|    return (ret);
  148|    682|}
o_names.c:obj_name_cmp:
  115|    391|{
  116|    391|    int ret;
  117|    391|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  118|    391|    const OBJ_NAME *b = (const OBJ_NAME *)b_void;
  119|       |
  120|    391|    ret = a->type - b->type;
  121|    391|    if (ret == 0) {
  122|    391|        if ((name_funcs_stack != NULL)
  123|    391|            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  124|      0|            ret = sk_NAME_FUNCS_value(name_funcs_stack,
  125|      0|                                      a->type)->cmp_func(a->name, b->name);
  126|      0|        } else
  127|    391|            ret = strcmp(a->name, b->name);
  128|    391|    }
  129|    391|    return (ret);
  130|    391|}

check_defer:
  229|    160|{
  230|    160|    if (!obj_cleanup_defer && nid >= NUM_NID)
  231|      0|        obj_cleanup_defer = 1;
  232|    160|}
OBJ_nid2obj:
  314|   135k|{
  315|   135k|    ADDED_OBJ ad, *adp;
  316|   135k|    ASN1_OBJECT ob;
  317|       |
  318|   135k|    if ((n >= 0) && (n < NUM_NID)) {
  319|   135k|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  320|      0|            OBJerr(OBJ_F_OBJ_NID2OBJ, OBJ_R_UNKNOWN_NID);
  321|      0|            return (NULL);
  322|      0|        }
  323|   135k|        return ((ASN1_OBJECT *)&(nid_objs[n]));
  324|   135k|    } else if (added == NULL)
  325|      0|        return (NULL);
  326|      0|    else {
  327|      0|        ad.type = ADDED_NID;
  328|      0|        ad.obj = &ob;
  329|      0|        ob.nid = n;
  330|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  331|      0|        if (adp != NULL)
  332|      0|            return (adp->obj);
  333|      0|        else {
  334|      0|            OBJerr(OBJ_F_OBJ_NID2OBJ, OBJ_R_UNKNOWN_NID);
  335|      0|            return (NULL);
  336|      0|        }
  337|      0|    }
  338|   135k|}
OBJ_nid2sn:
  341|  23.7k|{
  342|  23.7k|    ADDED_OBJ ad, *adp;
  343|  23.7k|    ASN1_OBJECT ob;
  344|       |
  345|  23.7k|    if ((n >= 0) && (n < NUM_NID)) {
  346|  23.7k|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  347|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  348|      0|            return (NULL);
  349|      0|        }
  350|  23.7k|        return (nid_objs[n].sn);
  351|  23.7k|    } else if (added == NULL)
  352|      0|        return (NULL);
  353|      0|    else {
  354|      0|        ad.type = ADDED_NID;
  355|      0|        ad.obj = &ob;
  356|      0|        ob.nid = n;
  357|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  358|      0|        if (adp != NULL)
  359|      0|            return (adp->obj->sn);
  360|      0|        else {
  361|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  362|      0|            return (NULL);
  363|      0|        }
  364|      0|    }
  365|  23.7k|}
OBJ_nid2ln:
  368|    160|{
  369|    160|    ADDED_OBJ ad, *adp;
  370|    160|    ASN1_OBJECT ob;
  371|       |
  372|    160|    if ((n >= 0) && (n < NUM_NID)) {
  373|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  374|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  375|      0|            return (NULL);
  376|      0|        }
  377|    160|        return (nid_objs[n].ln);
  378|    160|    } else if (added == NULL)
  379|      0|        return (NULL);
  380|      0|    else {
  381|      0|        ad.type = ADDED_NID;
  382|      0|        ad.obj = &ob;
  383|      0|        ob.nid = n;
  384|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  385|      0|        if (adp != NULL)
  386|      0|            return (adp->obj->ln);
  387|      0|        else {
  388|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  389|      0|            return (NULL);
  390|      0|        }
  391|      0|    }
  392|    160|}
OBJ_obj2nid:
  411|  23.7k|{
  412|  23.7k|    const unsigned int *op;
  413|  23.7k|    ADDED_OBJ ad, *adp;
  414|       |
  415|  23.7k|    if (a == NULL)
  416|      0|        return (NID_undef);
  417|  23.7k|    if (a->nid != 0)
  418|      0|        return (a->nid);
  419|       |
  420|  23.7k|    if (a->length == 0)
  421|      0|        return NID_undef;
  422|       |
  423|  23.7k|    if (added != NULL) {
  424|      0|        ad.type = ADDED_DATA;
  425|      0|        ad.obj = (ASN1_OBJECT *)a; /* XXX: ugly but harmless */
  426|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  427|      0|        if (adp != NULL)
  428|      0|            return (adp->obj->nid);
  429|      0|    }
  430|  23.7k|    op = OBJ_bsearch_obj(&a, obj_objs, NUM_OBJ);
  431|  23.7k|    if (op == NULL)
  432|     98|        return (NID_undef);
  433|  23.6k|    return (nid_objs[*op].nid);
  434|  23.7k|}
OBJ_obj2txt:
  486|     49|{
  487|     49|    int i, n = 0, len, nid, first, use_bn;
  488|     49|    BIGNUM *bl;
  489|     49|    unsigned long l;
  490|     49|    const unsigned char *p;
  491|     49|    char tbuf[DECIMAL_SIZE(i) + DECIMAL_SIZE(l) + 2];
  492|       |
  493|       |    /* Ensure that, at every state, |buf| is NUL-terminated. */
  494|     49|    if (buf && buf_len > 0)
  495|     49|        buf[0] = '\0';
  496|       |
  497|     49|    if ((a == NULL) || (a->data == NULL))
  498|      0|        return (0);
  499|       |
  500|     49|    if (!no_name && (nid = OBJ_obj2nid(a)) != NID_undef) {
  501|      0|        const char *s;
  502|      0|        s = OBJ_nid2ln(nid);
  503|      0|        if (s == NULL)
  504|      0|            s = OBJ_nid2sn(nid);
  505|      0|        if (s) {
  506|      0|            if (buf)
  507|      0|                BUF_strlcpy(buf, s, buf_len);
  508|      0|            n = strlen(s);
  509|      0|            return n;
  510|      0|        }
  511|      0|    }
  512|       |
  513|     49|    len = a->length;
  514|     49|    p = a->data;
  515|       |
  516|     49|    first = 1;
  517|     49|    bl = NULL;
  518|       |
  519|    196|    while (len > 0) {
  520|    147|        l = 0;
  521|    147|        use_bn = 0;
  522|    147|        for (;;) {
  523|    147|            unsigned char c = *p++;
  524|    147|            len--;
  525|    147|            if ((len == 0) && (c & 0x80))
  526|      0|                goto err;
  527|    147|            if (use_bn) {
  528|      0|                if (!BN_add_word(bl, c & 0x7f))
  529|      0|                    goto err;
  530|      0|            } else
  531|    147|                l |= c & 0x7f;
  532|    147|            if (!(c & 0x80))
  533|    147|                break;
  534|      0|            if (!use_bn && (l > (ULONG_MAX >> 7L))) {
  535|      0|                if (!bl && !(bl = BN_new()))
  536|      0|                    goto err;
  537|      0|                if (!BN_set_word(bl, l))
  538|      0|                    goto err;
  539|      0|                use_bn = 1;
  540|      0|            }
  541|      0|            if (use_bn) {
  542|      0|                if (!BN_lshift(bl, bl, 7))
  543|      0|                    goto err;
  544|      0|            } else
  545|      0|                l <<= 7L;
  546|      0|        }
  547|       |
  548|    147|        if (first) {
  549|     49|            first = 0;
  550|     49|            if (l >= 80) {
  551|     49|                i = 2;
  552|     49|                if (use_bn) {
  553|      0|                    if (!BN_sub_word(bl, 80))
  554|      0|                        goto err;
  555|      0|                } else
  556|     49|                    l -= 80;
  557|     49|            } else {
  558|      0|                i = (int)(l / 40);
  559|      0|                l -= (long)(i * 40);
  560|      0|            }
  561|     49|            if (buf && (buf_len > 1)) {
  562|     49|                *buf++ = i + '0';
  563|     49|                *buf = '\0';
  564|     49|                buf_len--;
  565|     49|            }
  566|     49|            n++;
  567|     49|        }
  568|       |
  569|    147|        if (use_bn) {
  570|      0|            char *bndec;
  571|      0|            bndec = BN_bn2dec(bl);
  572|      0|            if (!bndec)
  573|      0|                goto err;
  574|      0|            i = strlen(bndec);
  575|      0|            if (buf) {
  576|      0|                if (buf_len > 1) {
  577|      0|                    *buf++ = '.';
  578|      0|                    *buf = '\0';
  579|      0|                    buf_len--;
  580|      0|                }
  581|      0|                BUF_strlcpy(buf, bndec, buf_len);
  582|      0|                if (i > buf_len) {
  583|      0|                    buf += buf_len;
  584|      0|                    buf_len = 0;
  585|      0|                } else {
  586|      0|                    buf += i;
  587|      0|                    buf_len -= i;
  588|      0|                }
  589|      0|            }
  590|      0|            n++;
  591|      0|            n += i;
  592|      0|            OPENSSL_free(bndec);
  593|    147|        } else {
  594|    147|            BIO_snprintf(tbuf, sizeof tbuf, ".%lu", l);
  595|    147|            i = strlen(tbuf);
  596|    147|            if (buf && (buf_len > 0)) {
  597|    147|                BUF_strlcpy(buf, tbuf, buf_len);
  598|    147|                if (i > buf_len) {
  599|      0|                    buf += buf_len;
  600|      0|                    buf_len = 0;
  601|    147|                } else {
  602|    147|                    buf += i;
  603|    147|                    buf_len -= i;
  604|    147|                }
  605|    147|            }
  606|    147|            n += i;
  607|    147|            l = 0;
  608|    147|        }
  609|    147|    }
  610|       |
  611|     49|    if (bl)
  612|      0|        BN_free(bl);
  613|     49|    return n;
  614|       |
  615|      0| err:
  616|      0|    if (bl)
  617|      0|        BN_free(bl);
  618|      0|    return -1;
  619|     49|}
OBJ_bsearch_:
  675|  23.7k|{
  676|  23.7k|    return OBJ_bsearch_ex_(key, base, num, size, cmp, 0);
  677|  23.7k|}
OBJ_bsearch_ex_:
  683|  29.9k|{
  684|  29.9k|    const char *base = base_;
  685|  29.9k|    int l, h, i = 0, c = 0;
  686|  29.9k|    const char *p = NULL;
  687|       |
  688|  29.9k|    if (num == 0)
  689|     49|        return (NULL);
  690|  29.9k|    l = 0;
  691|  29.9k|    h = num;
  692|   259k|    while (l < h) {
  693|   252k|        i = (l + h) / 2;
  694|   252k|        p = &(base[i * size]);
  695|   252k|        c = (*cmp) (key, p);
  696|   252k|        if (c < 0)
  697|   158k|            h = i;
  698|  94.5k|        else if (c > 0)
  699|  70.9k|            l = i + 1;
  700|  23.6k|        else
  701|  23.6k|            break;
  702|   252k|    }
  703|       |#ifdef CHARSET_EBCDIC
  704|       |    /*
  705|       |     * THIS IS A KLUDGE - Because the *_obj is sorted in ASCII order, and I
  706|       |     * don't have perl (yet), we revert to a *LINEAR* search when the object
  707|       |     * wasn't found in the binary search.
  708|       |     */
  709|       |    if (c != 0) {
  710|       |        for (i = 0; i < num; ++i) {
  711|       |            p = &(base[i * size]);
  712|       |            c = (*cmp) (key, p);
  713|       |            if (c == 0 || (c < 0 && (flags & OBJ_BSEARCH_VALUE_ON_NOMATCH)))
  714|       |                return p;
  715|       |        }
  716|       |    }
  717|       |#endif
  718|  29.9k|    if (c != 0 && !(flags & OBJ_BSEARCH_VALUE_ON_NOMATCH))
  719|  6.32k|        p = NULL;
  720|  23.6k|    else if (c == 0 && (flags & OBJ_BSEARCH_FIRST_VALUE_ON_MATCH)) {
  721|      0|        while (i > 0 && (*cmp) (key, &(base[(i - 1) * size])) == 0)
  722|      0|            i--;
  723|      0|        p = &(base[i * size]);
  724|      0|    }
  725|  29.9k|    return (p);
  726|  29.9k|}
obj_dat.c:obj_cmp:
  395|   217k|{
  396|   217k|    int j;
  397|   217k|    const ASN1_OBJECT *a = *ap;
  398|   217k|    const ASN1_OBJECT *b = &nid_objs[*bp];
  399|       |
  400|   217k|    j = (a->length - b->length);
  401|   217k|    if (j)
  402|  82.9k|        return (j);
  403|   134k|    if (a->length == 0)
  404|      0|        return 0;
  405|   134k|    return (memcmp(a->data, b->data, a->length));
  406|   134k|}

ERR_load_OBJ_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(OBJ_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, OBJ_str_functs);
   97|      1|        ERR_load_strings(0, OBJ_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

OBJ_dup:
   66|  47.3k|{
   67|  47.3k|    ASN1_OBJECT *r;
   68|  47.3k|    int i;
   69|  47.3k|    char *ln = NULL, *sn = NULL;
   70|  47.3k|    unsigned char *data = NULL;
   71|       |
   72|  47.3k|    if (o == NULL)
   73|      0|        return (NULL);
   74|  47.3k|    if (!(o->flags & ASN1_OBJECT_FLAG_DYNAMIC))
   75|      0|        return ((ASN1_OBJECT *)o); /* XXX: ugh! Why? What kind of duplication
   76|       |                                    * is this??? */
   77|       |
   78|  47.3k|    r = ASN1_OBJECT_new();
   79|  47.3k|    if (r == NULL) {
   80|      0|        OBJerr(OBJ_F_OBJ_DUP, ERR_R_ASN1_LIB);
   81|      0|        return (NULL);
   82|      0|    }
   83|  47.3k|    data = OPENSSL_malloc(o->length);
   84|  47.3k|    if (data == NULL)
   85|      0|        goto err;
   86|  47.3k|    if (o->data != NULL)
   87|  47.3k|        memcpy(data, o->data, o->length);
   88|       |    /* once data attached to object it remains const */
   89|  47.3k|    r->data = data;
   90|  47.3k|    r->length = o->length;
   91|  47.3k|    r->nid = o->nid;
   92|  47.3k|    r->ln = r->sn = NULL;
   93|  47.3k|    if (o->ln != NULL) {
   94|      0|        i = strlen(o->ln) + 1;
   95|      0|        ln = OPENSSL_malloc(i);
   96|      0|        if (ln == NULL)
   97|      0|            goto err;
   98|      0|        memcpy(ln, o->ln, i);
   99|      0|        r->ln = ln;
  100|      0|    }
  101|       |
  102|  47.3k|    if (o->sn != NULL) {
  103|      0|        i = strlen(o->sn) + 1;
  104|      0|        sn = OPENSSL_malloc(i);
  105|      0|        if (sn == NULL)
  106|      0|            goto err;
  107|      0|        memcpy(sn, o->sn, i);
  108|      0|        r->sn = sn;
  109|      0|    }
  110|  47.3k|    r->flags = o->flags | (ASN1_OBJECT_FLAG_DYNAMIC |
  111|  47.3k|                           ASN1_OBJECT_FLAG_DYNAMIC_STRINGS |
  112|  47.3k|                           ASN1_OBJECT_FLAG_DYNAMIC_DATA);
  113|  47.3k|    return (r);
  114|      0| err:
  115|      0|    OBJerr(OBJ_F_OBJ_DUP, ERR_R_MALLOC_FAILURE);
  116|      0|    if (ln != NULL)
  117|      0|        OPENSSL_free(ln);
  118|      0|    if (sn != NULL)
  119|      0|        OPENSSL_free(sn);
  120|      0|    if (data != NULL)
  121|      0|        OPENSSL_free(data);
  122|      0|    if (r != NULL)
  123|      0|        OPENSSL_free(r);
  124|      0|    return (NULL);
  125|  47.3k|}

ERR_load_OCSP_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(OCSP_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, OCSP_str_functs);
  146|      1|        ERR_load_strings(0, OCSP_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PEM_strings:
  161|      1|{
  162|      1|#ifndef OPENSSL_NO_ERR
  163|       |
  164|      1|    if (ERR_func_error_string(PEM_str_functs[0].error) == NULL) {
  165|      1|        ERR_load_strings(0, PEM_str_functs);
  166|      1|        ERR_load_strings(0, PEM_str_reasons);
  167|      1|    }
  168|      1|#endif
  169|      1|}

PEM_X509_INFO_read_bio:
   93|     49|{
   94|     49|    X509_INFO *xi = NULL;
   95|     49|    char *name = NULL, *header = NULL;
   96|     49|    void *pp;
   97|     49|    unsigned char *data = NULL;
   98|     49|    const unsigned char *p;
   99|     49|    long len, error = 0;
  100|     49|    int ok = 0;
  101|     49|    STACK_OF(X509_INFO) *ret = NULL;
  102|     49|    unsigned int i, raw, ptype;
  103|     49|    d2i_of_void *d2i = 0;
  104|       |
  105|     49|    if (sk == NULL) {
  106|     49|        if ((ret = sk_X509_INFO_new_null()) == NULL) {
  107|      0|            PEMerr(PEM_F_PEM_X509_INFO_READ_BIO, ERR_R_MALLOC_FAILURE);
  108|      0|            goto err;
  109|      0|        }
  110|     49|    } else
  111|      0|        ret = sk;
  112|       |
  113|     49|    if ((xi = X509_INFO_new()) == NULL)
  114|      0|        goto err;
  115|  6.32k|    for (;;) {
  116|  6.32k|        raw = 0;
  117|  6.32k|        ptype = 0;
  118|  6.32k|        i = PEM_read_bio(bp, &name, &header, &data, &len);
  119|  6.32k|        if (i == 0) {
  120|     49|            error = ERR_GET_REASON(ERR_peek_last_error());
  121|     49|            if (error == PEM_R_NO_START_LINE) {
  122|     49|                ERR_clear_error();
  123|     49|                break;
  124|     49|            }
  125|      0|            goto err;
  126|     49|        }
  127|  12.4k| start:
  128|  12.4k|        if ((strcmp(name, PEM_STRING_X509) == 0) ||
  129|  12.4k|            (strcmp(name, PEM_STRING_X509_OLD) == 0)) {
  130|  12.4k|            d2i = (D2I_OF(void)) d2i_X509;
  131|  12.4k|            if (xi->x509 != NULL) {
  132|  6.22k|                if (!sk_X509_INFO_push(ret, xi))
  133|      0|                    goto err;
  134|  6.22k|                if ((xi = X509_INFO_new()) == NULL)
  135|      0|                    goto err;
  136|  6.22k|                goto start;
  137|  6.22k|            }
  138|  6.27k|            pp = &(xi->x509);
  139|  6.27k|        } else if ((strcmp(name, PEM_STRING_X509_TRUSTED) == 0)) {
  140|      0|            d2i = (D2I_OF(void)) d2i_X509_AUX;
  141|      0|            if (xi->x509 != NULL) {
  142|      0|                if (!sk_X509_INFO_push(ret, xi))
  143|      0|                    goto err;
  144|      0|                if ((xi = X509_INFO_new()) == NULL)
  145|      0|                    goto err;
  146|      0|                goto start;
  147|      0|            }
  148|      0|            pp = &(xi->x509);
  149|      0|        } else if (strcmp(name, PEM_STRING_X509_CRL) == 0) {
  150|      0|            d2i = (D2I_OF(void)) d2i_X509_CRL;
  151|      0|            if (xi->crl != NULL) {
  152|      0|                if (!sk_X509_INFO_push(ret, xi))
  153|      0|                    goto err;
  154|      0|                if ((xi = X509_INFO_new()) == NULL)
  155|      0|                    goto err;
  156|      0|                goto start;
  157|      0|            }
  158|      0|            pp = &(xi->crl);
  159|      0|        } else
  160|      0|#ifndef OPENSSL_NO_RSA
  161|      0|        if (strcmp(name, PEM_STRING_RSA) == 0) {
  162|      0|            d2i = (D2I_OF(void)) d2i_RSAPrivateKey;
  163|      0|            if (xi->x_pkey != NULL) {
  164|      0|                if (!sk_X509_INFO_push(ret, xi))
  165|      0|                    goto err;
  166|      0|                if ((xi = X509_INFO_new()) == NULL)
  167|      0|                    goto err;
  168|      0|                goto start;
  169|      0|            }
  170|       |
  171|      0|            xi->enc_data = NULL;
  172|      0|            xi->enc_len = 0;
  173|       |
  174|      0|            xi->x_pkey = X509_PKEY_new();
  175|      0|            if (xi->x_pkey == NULL)
  176|      0|                goto err;
  177|      0|            ptype = EVP_PKEY_RSA;
  178|      0|            pp = &xi->x_pkey->dec_pkey;
  179|      0|            if ((int)strlen(header) > 10) /* assume encrypted */
  180|      0|                raw = 1;
  181|      0|        } else
  182|      0|#endif
  183|      0|#ifndef OPENSSL_NO_DSA
  184|      0|        if (strcmp(name, PEM_STRING_DSA) == 0) {
  185|      0|            d2i = (D2I_OF(void)) d2i_DSAPrivateKey;
  186|      0|            if (xi->x_pkey != NULL) {
  187|      0|                if (!sk_X509_INFO_push(ret, xi))
  188|      0|                    goto err;
  189|      0|                if ((xi = X509_INFO_new()) == NULL)
  190|      0|                    goto err;
  191|      0|                goto start;
  192|      0|            }
  193|       |
  194|      0|            xi->enc_data = NULL;
  195|      0|            xi->enc_len = 0;
  196|       |
  197|      0|            xi->x_pkey = X509_PKEY_new();
  198|      0|            if (xi->x_pkey == NULL)
  199|      0|                goto err;
  200|      0|            ptype = EVP_PKEY_DSA;
  201|      0|            pp = &xi->x_pkey->dec_pkey;
  202|      0|            if ((int)strlen(header) > 10) /* assume encrypted */
  203|      0|                raw = 1;
  204|      0|        } else
  205|      0|#endif
  206|      0|#ifndef OPENSSL_NO_EC
  207|      0|        if (strcmp(name, PEM_STRING_ECPRIVATEKEY) == 0) {
  208|      0|            d2i = (D2I_OF(void)) d2i_ECPrivateKey;
  209|      0|            if (xi->x_pkey != NULL) {
  210|      0|                if (!sk_X509_INFO_push(ret, xi))
  211|      0|                    goto err;
  212|      0|                if ((xi = X509_INFO_new()) == NULL)
  213|      0|                    goto err;
  214|      0|                goto start;
  215|      0|            }
  216|       |
  217|      0|            xi->enc_data = NULL;
  218|      0|            xi->enc_len = 0;
  219|       |
  220|      0|            xi->x_pkey = X509_PKEY_new();
  221|      0|            if (xi->x_pkey == NULL)
  222|      0|                goto err;
  223|      0|            ptype = EVP_PKEY_EC;
  224|      0|            pp = &xi->x_pkey->dec_pkey;
  225|      0|            if ((int)strlen(header) > 10) /* assume encrypted */
  226|      0|                raw = 1;
  227|      0|        } else
  228|      0|#endif
  229|      0|        {
  230|      0|            d2i = NULL;
  231|      0|            pp = NULL;
  232|      0|        }
  233|       |
  234|  6.27k|        if (d2i != NULL) {
  235|  6.27k|            if (!raw) {
  236|  6.27k|                EVP_CIPHER_INFO cipher;
  237|       |
  238|  6.27k|                if (!PEM_get_EVP_CIPHER_INFO(header, &cipher))
  239|      0|                    goto err;
  240|  6.27k|                if (!PEM_do_header(&cipher, data, &len, cb, u))
  241|      0|                    goto err;
  242|  6.27k|                p = data;
  243|  6.27k|                if (ptype) {
  244|      0|                    if (!d2i_PrivateKey(ptype, pp, &p, len)) {
  245|      0|                        PEMerr(PEM_F_PEM_X509_INFO_READ_BIO, ERR_R_ASN1_LIB);
  246|      0|                        goto err;
  247|      0|                    }
  248|  6.27k|                } else if (d2i(pp, &p, len) == NULL) {
  249|      0|                    PEMerr(PEM_F_PEM_X509_INFO_READ_BIO, ERR_R_ASN1_LIB);
  250|      0|                    goto err;
  251|      0|                }
  252|  6.27k|            } else {            /* encrypted RSA data */
  253|      0|                if (!PEM_get_EVP_CIPHER_INFO(header, &xi->enc_cipher))
  254|      0|                    goto err;
  255|      0|                xi->enc_data = (char *)data;
  256|      0|                xi->enc_len = (int)len;
  257|      0|                data = NULL;
  258|      0|            }
  259|  6.27k|        } else {
  260|       |            /* unknown */
  261|      0|        }
  262|  6.27k|        if (name != NULL)
  263|  6.27k|            OPENSSL_free(name);
  264|  6.27k|        if (header != NULL)
  265|  6.27k|            OPENSSL_free(header);
  266|  6.27k|        if (data != NULL)
  267|  6.27k|            OPENSSL_free(data);
  268|  6.27k|        name = NULL;
  269|  6.27k|        header = NULL;
  270|  6.27k|        data = NULL;
  271|  6.27k|    }
  272|       |
  273|       |    /*
  274|       |     * if the last one hasn't been pushed yet and there is anything in it
  275|       |     * then add it to the stack ...
  276|       |     */
  277|     49|    if ((xi->x509 != NULL) || (xi->crl != NULL) ||
  278|     49|        (xi->x_pkey != NULL) || (xi->enc_data != NULL)) {
  279|     49|        if (!sk_X509_INFO_push(ret, xi))
  280|      0|            goto err;
  281|     49|        xi = NULL;
  282|     49|    }
  283|     49|    ok = 1;
  284|     49| err:
  285|     49|    if (xi != NULL)
  286|      0|        X509_INFO_free(xi);
  287|     49|    if (!ok) {
  288|      0|        for (i = 0; ((int)i) < sk_X509_INFO_num(ret); i++) {
  289|      0|            xi = sk_X509_INFO_value(ret, i);
  290|      0|            X509_INFO_free(xi);
  291|      0|        }
  292|      0|        if (ret != sk)
  293|      0|            sk_X509_INFO_free(ret);
  294|      0|        ret = NULL;
  295|      0|    }
  296|       |
  297|     49|    if (name != NULL)
  298|      0|        OPENSSL_free(name);
  299|     49|    if (header != NULL)
  300|      0|        OPENSSL_free(header);
  301|     49|    if (data != NULL)
  302|      0|        OPENSSL_free(data);
  303|     49|    return (ret);
  304|     49|}

PEM_do_header:
  447|  6.27k|{
  448|  6.27k|    int i = 0, j, o, klen;
  449|  6.27k|    long len;
  450|  6.27k|    EVP_CIPHER_CTX ctx;
  451|  6.27k|    unsigned char key[EVP_MAX_KEY_LENGTH];
  452|  6.27k|    char buf[PEM_BUFSIZE];
  453|       |
  454|  6.27k|    len = *plen;
  455|       |
  456|  6.27k|    if (cipher->cipher == NULL)
  457|  6.27k|        return (1);
  458|      0|    if (callback == NULL)
  459|      0|        klen = PEM_def_callback(buf, PEM_BUFSIZE, 0, u);
  460|      0|    else
  461|      0|        klen = callback(buf, PEM_BUFSIZE, 0, u);
  462|      0|    if (klen <= 0) {
  463|      0|        PEMerr(PEM_F_PEM_DO_HEADER, PEM_R_BAD_PASSWORD_READ);
  464|      0|        return (0);
  465|      0|    }
  466|       |#ifdef CHARSET_EBCDIC
  467|       |    /* Convert the pass phrase from EBCDIC */
  468|       |    ebcdic2ascii(buf, buf, klen);
  469|       |#endif
  470|       |
  471|      0|    if (!EVP_BytesToKey(cipher->cipher, EVP_md5(), &(cipher->iv[0]),
  472|      0|                        (unsigned char *)buf, klen, 1, key, NULL))
  473|      0|        return 0;
  474|       |
  475|      0|    j = (int)len;
  476|      0|    EVP_CIPHER_CTX_init(&ctx);
  477|      0|    o = EVP_DecryptInit_ex(&ctx, cipher->cipher, NULL, key, &(cipher->iv[0]));
  478|      0|    if (o)
  479|      0|        o = EVP_DecryptUpdate(&ctx, data, &i, data, j);
  480|      0|    if (o)
  481|      0|        o = EVP_DecryptFinal_ex(&ctx, &(data[i]), &j);
  482|      0|    EVP_CIPHER_CTX_cleanup(&ctx);
  483|      0|    OPENSSL_cleanse((char *)buf, sizeof(buf));
  484|      0|    OPENSSL_cleanse((char *)key, sizeof(key));
  485|      0|    if (o)
  486|      0|        j += i;
  487|      0|    else {
  488|      0|        PEMerr(PEM_F_PEM_DO_HEADER, PEM_R_BAD_DECRYPT);
  489|      0|        return (0);
  490|      0|    }
  491|      0|    *plen = j;
  492|      0|    return (1);
  493|      0|}
PEM_get_EVP_CIPHER_INFO:
  496|  6.27k|{
  497|  6.27k|    const EVP_CIPHER *enc = NULL;
  498|  6.27k|    char *p, c;
  499|  6.27k|    char **header_pp = &header;
  500|       |
  501|  6.27k|    cipher->cipher = NULL;
  502|  6.27k|    if ((header == NULL) || (*header == '\0') || (*header == '\n'))
  503|  6.27k|        return (1);
  504|      0|    if (strncmp(header, "Proc-Type: ", 11) != 0) {
  505|      0|        PEMerr(PEM_F_PEM_GET_EVP_CIPHER_INFO, PEM_R_NOT_PROC_TYPE);
  506|      0|        return (0);
  507|      0|    }
  508|      0|    header += 11;
  509|      0|    if (*header != '4')
  510|      0|        return (0);
  511|      0|    header++;
  512|      0|    if (*header != ',')
  513|      0|        return (0);
  514|      0|    header++;
  515|      0|    if (strncmp(header, "ENCRYPTED", 9) != 0) {
  516|      0|        PEMerr(PEM_F_PEM_GET_EVP_CIPHER_INFO, PEM_R_NOT_ENCRYPTED);
  517|      0|        return (0);
  518|      0|    }
  519|      0|    for (; (*header != '\n') && (*header != '\0'); header++) ;
  520|      0|    if (*header == '\0') {
  521|      0|        PEMerr(PEM_F_PEM_GET_EVP_CIPHER_INFO, PEM_R_SHORT_HEADER);
  522|      0|        return (0);
  523|      0|    }
  524|      0|    header++;
  525|      0|    if (strncmp(header, "DEK-Info: ", 10) != 0) {
  526|      0|        PEMerr(PEM_F_PEM_GET_EVP_CIPHER_INFO, PEM_R_NOT_DEK_INFO);
  527|      0|        return (0);
  528|      0|    }
  529|      0|    header += 10;
  530|       |
  531|      0|    p = header;
  532|      0|    for (;;) {
  533|      0|        c = *header;
  534|      0|#ifndef CHARSET_EBCDIC
  535|      0|        if (!(((c >= 'A') && (c <= 'Z')) || (c == '-') ||
  536|      0|              ((c >= '0') && (c <= '9'))))
  537|      0|            break;
  538|       |#else
  539|       |        if (!(isupper((unsigned char)c) || (c == '-')
  540|       |            || isdigit((unsigned char)c)))
  541|       |            break;
  542|       |#endif
  543|      0|        header++;
  544|      0|    }
  545|      0|    *header = '\0';
  546|      0|    cipher->cipher = enc = EVP_get_cipherbyname(p);
  547|      0|    *header = c;
  548|      0|    header++;
  549|       |
  550|      0|    if (enc == NULL) {
  551|      0|        PEMerr(PEM_F_PEM_GET_EVP_CIPHER_INFO, PEM_R_UNSUPPORTED_ENCRYPTION);
  552|      0|        return (0);
  553|      0|    }
  554|      0|    if (!load_iv(header_pp, &(cipher->iv[0]), enc->iv_len))
  555|      0|        return (0);
  556|       |
  557|      0|    return (1);
  558|      0|}
PEM_read_bio:
  684|  6.32k|{
  685|  6.32k|    EVP_ENCODE_CTX ctx;
  686|  6.32k|    int end = 0, i, k, bl = 0, hl = 0, nohead = 0;
  687|  6.32k|    char buf[256];
  688|  6.32k|    BUF_MEM *nameB;
  689|  6.32k|    BUF_MEM *headerB;
  690|  6.32k|    BUF_MEM *dataB, *tmpB;
  691|       |
  692|  6.32k|    nameB = BUF_MEM_new();
  693|  6.32k|    headerB = BUF_MEM_new();
  694|  6.32k|    dataB = BUF_MEM_new();
  695|  6.32k|    if ((nameB == NULL) || (headerB == NULL) || (dataB == NULL)) {
  696|      0|        BUF_MEM_free(nameB);
  697|      0|        BUF_MEM_free(headerB);
  698|      0|        BUF_MEM_free(dataB);
  699|      0|        PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  700|      0|        return (0);
  701|      0|    }
  702|       |
  703|  6.32k|    buf[254] = '\0';
  704|  6.32k|    for (;;) {
  705|  6.32k|        i = BIO_gets(bp, buf, 254);
  706|       |
  707|  6.32k|        if (i <= 0) {
  708|     49|            PEMerr(PEM_F_PEM_READ_BIO, PEM_R_NO_START_LINE);
  709|     49|            goto err;
  710|     49|        }
  711|       |
  712|  18.8k|        while ((i >= 0) && (buf[i] <= ' '))
  713|  12.5k|            i--;
  714|  6.27k|        buf[++i] = '\n';
  715|  6.27k|        buf[++i] = '\0';
  716|       |
  717|  6.27k|        if (strncmp(buf, "-----BEGIN ", 11) == 0) {
  718|  6.27k|            i = strlen(&(buf[11]));
  719|       |
  720|  6.27k|            if (strncmp(&(buf[11 + i - 6]), "-----\n", 6) != 0)
  721|      0|                continue;
  722|  6.27k|            if (!BUF_MEM_grow(nameB, i + 9)) {
  723|      0|                PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  724|      0|                goto err;
  725|      0|            }
  726|  6.27k|            memcpy(nameB->data, &(buf[11]), i - 6);
  727|  6.27k|            nameB->data[i - 6] = '\0';
  728|  6.27k|            break;
  729|  6.27k|        }
  730|  6.27k|    }
  731|  6.27k|    hl = 0;
  732|  6.27k|    if (!BUF_MEM_grow(headerB, 256)) {
  733|      0|        PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  734|      0|        goto err;
  735|      0|    }
  736|  6.27k|    headerB->data[0] = '\0';
  737|   154k|    for (;;) {
  738|   154k|        i = BIO_gets(bp, buf, 254);
  739|   154k|        if (i <= 0)
  740|      0|            break;
  741|       |
  742|   462k|        while ((i >= 0) && (buf[i] <= ' '))
  743|   308k|            i--;
  744|   154k|        buf[++i] = '\n';
  745|   154k|        buf[++i] = '\0';
  746|       |
  747|   154k|        if (buf[0] == '\n')
  748|      0|            break;
  749|   154k|        if (!BUF_MEM_grow(headerB, hl + i + 9)) {
  750|      0|            PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  751|      0|            goto err;
  752|      0|        }
  753|   154k|        if (strncmp(buf, "-----END ", 9) == 0) {
  754|  6.27k|            nohead = 1;
  755|  6.27k|            break;
  756|  6.27k|        }
  757|   147k|        memcpy(&(headerB->data[hl]), buf, i);
  758|   147k|        headerB->data[hl + i] = '\0';
  759|   147k|        hl += i;
  760|   147k|    }
  761|       |
  762|  6.27k|    bl = 0;
  763|  6.27k|    if (!BUF_MEM_grow(dataB, 1024)) {
  764|      0|        PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  765|      0|        goto err;
  766|      0|    }
  767|  6.27k|    dataB->data[0] = '\0';
  768|  6.27k|    if (!nohead) {
  769|      0|        for (;;) {
  770|      0|            i = BIO_gets(bp, buf, 254);
  771|      0|            if (i <= 0)
  772|      0|                break;
  773|       |
  774|      0|            while ((i >= 0) && (buf[i] <= ' '))
  775|      0|                i--;
  776|      0|            buf[++i] = '\n';
  777|      0|            buf[++i] = '\0';
  778|       |
  779|      0|            if (i != 65)
  780|      0|                end = 1;
  781|      0|            if (strncmp(buf, "-----END ", 9) == 0)
  782|      0|                break;
  783|      0|            if (i > 65)
  784|      0|                break;
  785|      0|            if (!BUF_MEM_grow_clean(dataB, i + bl + 9)) {
  786|      0|                PEMerr(PEM_F_PEM_READ_BIO, ERR_R_MALLOC_FAILURE);
  787|      0|                goto err;
  788|      0|            }
  789|      0|            memcpy(&(dataB->data[bl]), buf, i);
  790|      0|            dataB->data[bl + i] = '\0';
  791|      0|            bl += i;
  792|      0|            if (end) {
  793|      0|                buf[0] = '\0';
  794|      0|                i = BIO_gets(bp, buf, 254);
  795|      0|                if (i <= 0)
  796|      0|                    break;
  797|       |
  798|      0|                while ((i >= 0) && (buf[i] <= ' '))
  799|      0|                    i--;
  800|      0|                buf[++i] = '\n';
  801|      0|                buf[++i] = '\0';
  802|       |
  803|      0|                break;
  804|      0|            }
  805|      0|        }
  806|  6.27k|    } else {
  807|  6.27k|        tmpB = headerB;
  808|  6.27k|        headerB = dataB;
  809|  6.27k|        dataB = tmpB;
  810|  6.27k|        bl = hl;
  811|  6.27k|    }
  812|  6.27k|    i = strlen(nameB->data);
  813|  6.27k|    if ((strncmp(buf, "-----END ", 9) != 0) ||
  814|  6.27k|        (strncmp(nameB->data, &(buf[9]), i) != 0) ||
  815|  6.27k|        (strncmp(&(buf[9 + i]), "-----\n", 6) != 0)) {
  816|      0|        PEMerr(PEM_F_PEM_READ_BIO, PEM_R_BAD_END_LINE);
  817|      0|        goto err;
  818|      0|    }
  819|       |
  820|  6.27k|    EVP_DecodeInit(&ctx);
  821|  6.27k|    i = EVP_DecodeUpdate(&ctx,
  822|  6.27k|                         (unsigned char *)dataB->data, &bl,
  823|  6.27k|                         (unsigned char *)dataB->data, bl);
  824|  6.27k|    if (i < 0) {
  825|      0|        PEMerr(PEM_F_PEM_READ_BIO, PEM_R_BAD_BASE64_DECODE);
  826|      0|        goto err;
  827|      0|    }
  828|  6.27k|    i = EVP_DecodeFinal(&ctx, (unsigned char *)&(dataB->data[bl]), &k);
  829|  6.27k|    if (i < 0) {
  830|      0|        PEMerr(PEM_F_PEM_READ_BIO, PEM_R_BAD_BASE64_DECODE);
  831|      0|        goto err;
  832|      0|    }
  833|  6.27k|    bl += k;
  834|       |
  835|  6.27k|    if (bl == 0)
  836|      0|        goto err;
  837|  6.27k|    *name = nameB->data;
  838|  6.27k|    *header = headerB->data;
  839|  6.27k|    *data = (unsigned char *)dataB->data;
  840|  6.27k|    *len = bl;
  841|  6.27k|    OPENSSL_free(nameB);
  842|  6.27k|    OPENSSL_free(headerB);
  843|  6.27k|    OPENSSL_free(dataB);
  844|  6.27k|    return (1);
  845|     49| err:
  846|     49|    BUF_MEM_free(nameB);
  847|     49|    BUF_MEM_free(headerB);
  848|     49|    BUF_MEM_free(dataB);
  849|     49|    return (0);
  850|  6.27k|}

ERR_load_PKCS12_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(PKCS12_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, PKCS12_str_functs);
  146|      1|        ERR_load_strings(0, PKCS12_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PKCS7_strings:
  199|      1|{
  200|      1|#ifndef OPENSSL_NO_ERR
  201|       |
  202|      1|    if (ERR_func_error_string(PKCS7_str_functs[0].error) == NULL) {
  203|      1|        ERR_load_strings(0, PKCS7_str_functs);
  204|      1|        ERR_load_strings(0, PKCS7_str_reasons);
  205|      1|    }
  206|      1|#endif
  207|      1|}

RAND_SSLeay:
  177|      1|{
  178|      1|    return (&rand_ssleay_meth);
  179|      1|}
ssleay_rand_bytes:
  344|  1.14k|{
  345|  1.14k|    static volatile int stirred_pool = 0;
  346|  1.14k|    int i, j, k;
  347|  1.14k|    size_t num_ceil, st_idx, st_num;
  348|  1.14k|    int ok;
  349|  1.14k|    long md_c[2];
  350|  1.14k|    unsigned char local_md[MD_DIGEST_LENGTH];
  351|  1.14k|    EVP_MD_CTX m;
  352|  1.14k|#ifndef GETPID_IS_MEANINGLESS
  353|  1.14k|    pid_t curr_pid = getpid();
  354|  1.14k|#endif
  355|  1.14k|    int do_stir_pool = 0;
  356|       |
  357|       |#ifdef PREDICT
  358|       |    if (rand_predictable) {
  359|       |        static unsigned char val = 0;
  360|       |
  361|       |        for (i = 0; i < num; i++)
  362|       |            buf[i] = val++;
  363|       |        return (1);
  364|       |    }
  365|       |#endif
  366|       |
  367|  1.14k|    if (num <= 0)
  368|      0|        return 1;
  369|       |
  370|  1.14k|    EVP_MD_CTX_init(&m);
  371|       |    /* round upwards to multiple of MD_DIGEST_LENGTH/2 */
  372|  1.14k|    num_ceil =
  373|  1.14k|        (1 + (num - 1) / (MD_DIGEST_LENGTH / 2)) * (MD_DIGEST_LENGTH / 2);
  374|       |
  375|       |    /*
  376|       |     * (Based on the rand(3) manpage:)
  377|       |     *
  378|       |     * For each group of 10 bytes (or less), we do the following:
  379|       |     *
  380|       |     * Input into the hash function the local 'md' (which is initialized from
  381|       |     * the global 'md' before any bytes are generated), the bytes that are to
  382|       |     * be overwritten by the random bytes, and bytes from the 'state'
  383|       |     * (incrementing looping index). From this digest output (which is kept
  384|       |     * in 'md'), the top (up to) 10 bytes are returned to the caller and the
  385|       |     * bottom 10 bytes are xored into the 'state'.
  386|       |     *
  387|       |     * Finally, after we have finished 'num' random bytes for the
  388|       |     * caller, 'count' (which is incremented) and the local and global 'md'
  389|       |     * are fed into the hash function and the results are kept in the
  390|       |     * global 'md'.
  391|       |     */
  392|  1.14k|    if (lock)
  393|  1.14k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  394|       |
  395|       |    /* prevent ssleay_rand_bytes() from trying to obtain the lock again */
  396|  1.14k|    CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  397|  1.14k|    CRYPTO_THREADID_current(&locking_threadid);
  398|  1.14k|    CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  399|  1.14k|    crypto_lock_rand = 1;
  400|       |
  401|  1.14k|    if (!initialized) {
  402|      0|        RAND_poll();
  403|      0|        initialized = 1;
  404|      0|    }
  405|       |
  406|  1.14k|    if (!stirred_pool)
  407|      1|        do_stir_pool = 1;
  408|       |
  409|  1.14k|    ok = (entropy >= ENTROPY_NEEDED);
  410|  1.14k|    if (!ok) {
  411|       |        /*
  412|       |         * If the PRNG state is not yet unpredictable, then seeing the PRNG
  413|       |         * output may help attackers to determine the new state; thus we have
  414|       |         * to decrease the entropy estimate. Once we've had enough initial
  415|       |         * seeding we don't bother to adjust the entropy count, though,
  416|       |         * because we're not ambitious to provide *information-theoretic*
  417|       |         * randomness. NOTE: This approach fails if the program forks before
  418|       |         * we have enough entropy. Entropy should be collected in a separate
  419|       |         * input pool and be transferred to the output pool only when the
  420|       |         * entropy limit has been reached.
  421|       |         */
  422|      0|        entropy -= num;
  423|      0|        if (entropy < 0)
  424|      0|            entropy = 0;
  425|      0|    }
  426|       |
  427|  1.14k|    if (do_stir_pool) {
  428|       |        /*
  429|       |         * In the output function only half of 'md' remains secret, so we
  430|       |         * better make sure that the required entropy gets 'evenly
  431|       |         * distributed' through 'state', our randomness pool. The input
  432|       |         * function (ssleay_rand_add) chains all of 'md', which makes it more
  433|       |         * suitable for this purpose.
  434|       |         */
  435|       |
  436|      1|        int n = STATE_SIZE;     /* so that the complete pool gets accessed */
  437|     53|        while (n > 0) {
  438|       |#if MD_DIGEST_LENGTH > 20
  439|       |# error "Please adjust DUMMY_SEED."
  440|       |#endif
  441|     52|#define DUMMY_SEED "...................." /* at least MD_DIGEST_LENGTH */
  442|       |            /*
  443|       |             * Note that the seed does not matter, it's just that
  444|       |             * ssleay_rand_add expects to have something to hash.
  445|       |             */
  446|     52|            ssleay_rand_add(DUMMY_SEED, MD_DIGEST_LENGTH, 0.0);
  447|     52|            n -= MD_DIGEST_LENGTH;
  448|     52|        }
  449|      1|        if (ok)
  450|      1|            stirred_pool = 1;
  451|      1|    }
  452|       |
  453|  1.14k|    st_idx = state_index;
  454|  1.14k|    st_num = state_num;
  455|  1.14k|    md_c[0] = md_count[0];
  456|  1.14k|    md_c[1] = md_count[1];
  457|  1.14k|    memcpy(local_md, md, sizeof md);
  458|       |
  459|  1.14k|    state_index += num_ceil;
  460|  1.14k|    if (state_index > state_num)
  461|     13|        state_index %= state_num;
  462|       |
  463|       |    /*
  464|       |     * state[st_idx], ..., state[(st_idx + num_ceil - 1) % st_num] are now
  465|       |     * ours (but other threads may use them too)
  466|       |     */
  467|       |
  468|  1.14k|    md_count[0] += 1;
  469|       |
  470|       |    /* before unlocking, we must clear 'crypto_lock_rand' */
  471|  1.14k|    crypto_lock_rand = 0;
  472|  1.14k|    if (lock)
  473|  1.14k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  474|       |
  475|  2.58k|    while (num > 0) {
  476|       |        /* num_ceil -= MD_DIGEST_LENGTH/2 */
  477|  1.43k|        j = (num >= MD_DIGEST_LENGTH / 2) ? MD_DIGEST_LENGTH / 2 : num;
  478|  1.43k|        num -= j;
  479|  1.43k|        if (!MD_Init(&m))
  480|      0|           goto err;
  481|  1.43k|#ifndef GETPID_IS_MEANINGLESS
  482|  1.43k|        if (curr_pid) {         /* just in the first iteration to save time */
  483|  1.14k|            if (!MD_Update(&m, (unsigned char *)&curr_pid, sizeof curr_pid))
  484|      0|                goto err;
  485|  1.14k|            curr_pid = 0;
  486|  1.14k|        }
  487|  1.43k|#endif
  488|  1.43k|        if (!MD_Update(&m, local_md, MD_DIGEST_LENGTH) ||
  489|  1.43k|            !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)))
  490|      0|            goto err;
  491|       |
  492|  1.43k|#ifndef PURIFY                  /* purify complains */
  493|       |        /*
  494|       |         * The following line uses the supplied buffer as a small source of
  495|       |         * entropy: since this buffer is often uninitialised it may cause
  496|       |         * programs such as purify or valgrind to complain. So for those
  497|       |         * builds it is not used: the removal of such a small source of
  498|       |         * entropy has negligible impact on security.
  499|       |         */
  500|  1.43k|        if (!MD_Update(&m, buf, j))
  501|      0|            goto err;
  502|  1.43k|#endif
  503|       |
  504|  1.43k|        k = (st_idx + MD_DIGEST_LENGTH / 2) - st_num;
  505|  1.43k|        if (k > 0) {
  506|     12|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2 - k) ||
  507|     12|                !MD_Update(&m, &(state[0]), k))
  508|      0|                goto err;
  509|  1.42k|        } else {
  510|  1.42k|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2))
  511|      0|                goto err;
  512|  1.42k|        }
  513|  1.43k|        if (!MD_Final(&m, local_md))
  514|      0|            goto err;
  515|       |
  516|  15.8k|        for (i = 0; i < MD_DIGEST_LENGTH / 2; i++) {
  517|       |            /* may compete with other threads */
  518|  14.3k|            state[st_idx++] ^= local_md[i];
  519|  14.3k|            if (st_idx >= st_num)
  520|     14|                st_idx = 0;
  521|  14.3k|            if (i < j)
  522|  7.70k|                *(buf++) = local_md[i + MD_DIGEST_LENGTH / 2];
  523|  14.3k|        }
  524|  1.43k|    }
  525|       |
  526|  1.14k|    if (!MD_Init(&m) ||
  527|  1.14k|        !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  528|  1.14k|        !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  529|      0|        goto err;
  530|  1.14k|    if (lock)
  531|  1.14k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  532|  1.14k|    if (!MD_Update(&m, md, MD_DIGEST_LENGTH) ||
  533|  1.14k|        !MD_Final(&m, md)) {
  534|      0|        if (lock)
  535|      0|            CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  536|      0|        goto err;
  537|      0|    }
  538|  1.14k|    if (lock)
  539|  1.14k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  540|       |
  541|  1.14k|    EVP_MD_CTX_cleanup(&m);
  542|  1.14k|    if (ok)
  543|  1.14k|        return (1);
  544|      0|    else if (pseudo)
  545|      0|        return 0;
  546|      0|    else {
  547|      0|        RANDerr(RAND_F_SSLEAY_RAND_BYTES, RAND_R_PRNG_NOT_SEEDED);
  548|      0|        ERR_add_error_data(1, "You need to read the OpenSSL FAQ, "
  549|      0|                           "http://www.openssl.org/support/faq.html");
  550|      0|        return (0);
  551|      0|    }
  552|       |
  553|      0| err:
  554|      0|    EVP_MD_CTX_cleanup(&m);
  555|      0|    return (0);
  556|  1.14k|}
md_rand.c:ssleay_rand_add:
  194|    154|{
  195|    154|    int i, j, k, st_idx;
  196|    154|    long md_c[2];
  197|    154|    unsigned char local_md[MD_DIGEST_LENGTH];
  198|    154|    EVP_MD_CTX m;
  199|    154|    int do_not_lock;
  200|       |
  201|    154|    if (!num)
  202|      0|        return;
  203|       |
  204|       |    /*
  205|       |     * (Based on the rand(3) manpage)
  206|       |     *
  207|       |     * The input is chopped up into units of 20 bytes (or less for
  208|       |     * the last block).  Each of these blocks is run through the hash
  209|       |     * function as follows:  The data passed to the hash function
  210|       |     * is the current 'md', the same number of bytes from the 'state'
  211|       |     * (the location determined by in incremented looping index) as
  212|       |     * the current 'block', the new key data 'block', and 'count'
  213|       |     * (which is incremented after each use).
  214|       |     * The result of this is kept in 'md' and also xored into the
  215|       |     * 'state' at the same locations that were used as input into the
  216|       |     * hash function.
  217|       |     */
  218|       |
  219|       |    /* check if we already have the lock */
  220|    154|    if (crypto_lock_rand) {
  221|     56|        CRYPTO_THREADID cur;
  222|     56|        CRYPTO_THREADID_current(&cur);
  223|     56|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  224|     56|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  225|     56|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  226|     56|    } else
  227|     98|        do_not_lock = 0;
  228|       |
  229|    154|    if (!do_not_lock)
  230|     98|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  231|    154|    st_idx = state_index;
  232|       |
  233|       |    /*
  234|       |     * use our own copies of the counters so that even if a concurrent thread
  235|       |     * seeds with exactly the same data and uses the same subarray there's
  236|       |     * _some_ difference
  237|       |     */
  238|    154|    md_c[0] = md_count[0];
  239|    154|    md_c[1] = md_count[1];
  240|       |
  241|    154|    memcpy(local_md, md, sizeof md);
  242|       |
  243|       |    /* state_index <= state_num <= STATE_SIZE */
  244|    154|    state_index += num;
  245|    154|    if (state_index >= STATE_SIZE) {
  246|      2|        state_index %= STATE_SIZE;
  247|      2|        state_num = STATE_SIZE;
  248|    152|    } else if (state_num < STATE_SIZE) {
  249|     52|        if (state_index > state_num)
  250|     52|            state_num = state_index;
  251|     52|    }
  252|       |    /* state_index <= state_num <= STATE_SIZE */
  253|       |
  254|       |    /*
  255|       |     * state[st_idx], ..., state[(st_idx + num - 1) % STATE_SIZE] are what we
  256|       |     * will use now, but other threads may use them as well
  257|       |     */
  258|       |
  259|    154|    md_count[1] += (num / MD_DIGEST_LENGTH) + (num % MD_DIGEST_LENGTH > 0);
  260|       |
  261|    154|    if (!do_not_lock)
  262|     98|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  263|       |
  264|    154|    EVP_MD_CTX_init(&m);
  265|    309|    for (i = 0; i < num; i += MD_DIGEST_LENGTH) {
  266|    155|        j = (num - i);
  267|    155|        j = (j > MD_DIGEST_LENGTH) ? MD_DIGEST_LENGTH : j;
  268|       |
  269|    155|        if (!MD_Init(&m) ||
  270|    155|            !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  271|      0|            goto err;
  272|    155|        k = (st_idx + j) - STATE_SIZE;
  273|    155|        if (k > 0) {
  274|      2|            if (!MD_Update(&m, &(state[st_idx]), j - k) ||
  275|      2|                !MD_Update(&m, &(state[0]), k))
  276|      0|                goto err;
  277|      2|        } else
  278|    153|            if (!MD_Update(&m, &(state[st_idx]), j))
  279|      0|                goto err;
  280|       |
  281|       |        /* DO NOT REMOVE THE FOLLOWING CALL TO MD_Update()! */
  282|    155|        if (!MD_Update(&m, buf, j))
  283|      0|            goto err;
  284|       |        /*
  285|       |         * We know that line may cause programs such as purify and valgrind
  286|       |         * to complain about use of uninitialized data.  The problem is not,
  287|       |         * it's with the caller.  Removing that line will make sure you get
  288|       |         * really bad randomness and thereby other problems such as very
  289|       |         * insecure keys.
  290|       |         */
  291|       |
  292|    155|        if (!MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  293|    155|            !MD_Final(&m, local_md))
  294|      0|            goto err;
  295|    155|        md_c[1]++;
  296|       |
  297|    155|        buf = (const char *)buf + j;
  298|       |
  299|  2.03k|        for (k = 0; k < j; k++) {
  300|       |            /*
  301|       |             * Parallel threads may interfere with this, but always each byte
  302|       |             * of the new state is the XOR of some previous value of its and
  303|       |             * local_md (itermediate values may be lost). Alway using locking
  304|       |             * could hurt performance more than necessary given that
  305|       |             * conflicts occur only when the total seeding is longer than the
  306|       |             * random state.
  307|       |             */
  308|  1.88k|            state[st_idx++] ^= local_md[k];
  309|  1.88k|            if (st_idx >= STATE_SIZE)
  310|      2|                st_idx = 0;
  311|  1.88k|        }
  312|    155|    }
  313|       |
  314|    154|    if (!do_not_lock)
  315|     98|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  316|       |    /*
  317|       |     * Don't just copy back local_md into md -- this could mean that other
  318|       |     * thread's seeding remains without effect (except for the incremented
  319|       |     * counter).  By XORing it we keep at least as much entropy as fits into
  320|       |     * md.
  321|       |     */
  322|  3.23k|    for (k = 0; k < (int)sizeof(md); k++) {
  323|  3.08k|        md[k] ^= local_md[k];
  324|  3.08k|    }
  325|    154|    if (entropy < ENTROPY_NEEDED) /* stop counting when we have enough */
  326|      1|        entropy += add;
  327|    154|    if (!do_not_lock)
  328|     98|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  329|       |
  330|       |#if !defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32)
  331|       |    assert(md_c[1] == md_count[1]);
  332|       |#endif
  333|       |
  334|    154| err:
  335|    154|    EVP_MD_CTX_cleanup(&m);
  336|    154|}
md_rand.c:ssleay_rand_nopseudo_bytes:
  559|  1.14k|{
  560|  1.14k|    return ssleay_rand_bytes(buf, num, 0, 1);
  561|  1.14k|}
md_rand.c:ssleay_rand_status:
  572|    996|{
  573|    996|    CRYPTO_THREADID cur;
  574|    996|    int ret;
  575|    996|    int do_not_lock;
  576|       |
  577|    996|    CRYPTO_THREADID_current(&cur);
  578|       |    /*
  579|       |     * check if we already have the lock (could happen if a RAND_poll()
  580|       |     * implementation calls RAND_status())
  581|       |     */
  582|    996|    if (crypto_lock_rand) {
  583|      0|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  584|      0|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  585|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  586|      0|    } else
  587|    996|        do_not_lock = 0;
  588|       |
  589|    996|    if (!do_not_lock) {
  590|    996|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  591|       |
  592|       |        /*
  593|       |         * prevent ssleay_rand_bytes() from trying to obtain the lock again
  594|       |         */
  595|    996|        CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  596|    996|        CRYPTO_THREADID_cpy(&locking_threadid, &cur);
  597|    996|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  598|    996|        crypto_lock_rand = 1;
  599|    996|    }
  600|       |
  601|    996|    if (!initialized) {
  602|      1|        RAND_poll();
  603|      1|        initialized = 1;
  604|      1|    }
  605|       |
  606|    996|    ret = entropy >= ENTROPY_NEEDED;
  607|       |
  608|    996|    if (!do_not_lock) {
  609|       |        /* before unlocking, we must clear 'crypto_lock_rand' */
  610|    996|        crypto_lock_rand = 0;
  611|       |
  612|    996|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  613|    996|    }
  614|       |
  615|    996|    return ret;
  616|    996|}

ERR_load_RAND_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(RAND_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, RAND_str_functs);
   97|      1|        ERR_load_strings(0, RAND_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

RAND_get_rand_method:
   93|  2.24k|{
   94|  2.24k|    if (!default_RAND_meth) {
   95|      1|#ifndef OPENSSL_NO_ENGINE
   96|      1|        ENGINE *e = ENGINE_get_default_RAND();
   97|      1|        if (e) {
   98|      0|            default_RAND_meth = ENGINE_get_RAND(e);
   99|      0|            if (!default_RAND_meth) {
  100|      0|                ENGINE_finish(e);
  101|      0|                e = NULL;
  102|      0|            }
  103|      0|        }
  104|      1|        if (e)
  105|      0|            funct_ref = e;
  106|      1|        else
  107|      1|#endif
  108|      1|            default_RAND_meth = RAND_SSLeay();
  109|      1|    }
  110|  2.24k|    return default_RAND_meth;
  111|  2.24k|}
RAND_add:
  149|    102|{
  150|    102|    const RAND_METHOD *meth = RAND_get_rand_method();
  151|    102|    if (meth && meth->add)
  152|    102|        meth->add(buf, num, entropy);
  153|    102|}
RAND_bytes:
  156|  1.14k|{
  157|  1.14k|    const RAND_METHOD *meth = RAND_get_rand_method();
  158|  1.14k|    if (meth && meth->bytes)
  159|  1.14k|        return meth->bytes(buf, num);
  160|      0|    return (-1);
  161|  1.14k|}
RAND_status:
  172|    996|{
  173|    996|    const RAND_METHOD *meth = RAND_get_rand_method();
  174|    996|    if (meth && meth->status)
  175|    996|        return meth->status();
  176|      0|    return 0;
  177|    996|}

RAND_poll:
  244|      1|{
  245|      1|    unsigned long l;
  246|      1|    pid_t curr_pid = getpid();
  247|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  248|      1|    unsigned char tmpbuf[ENTROPY_NEEDED];
  249|      1|    int n = 0;
  250|      1|#  endif
  251|      1|#  ifdef DEVRANDOM
  252|      1|    static const char *randomfiles[] = { DEVRANDOM };
  253|      1|    struct stat randomstats[sizeof(randomfiles) / sizeof(randomfiles[0])];
  254|      1|    int fd;
  255|      1|    unsigned int i;
  256|      1|#  endif
  257|      1|#  ifdef DEVRANDOM_EGD
  258|      1|    static const char *egdsockets[] = { DEVRANDOM_EGD, NULL };
  259|      1|    const char **egdsocket = NULL;
  260|      1|#  endif
  261|       |
  262|      1|#  ifdef DEVRANDOM
  263|      1|    memset(randomstats, 0, sizeof(randomstats));
  264|       |    /*
  265|       |     * Use a random entropy pool device. Linux, FreeBSD and OpenBSD have
  266|       |     * this. Use /dev/urandom if you can as /dev/random may block if it runs
  267|       |     * out of random entries.
  268|       |     */
  269|       |
  270|      2|    for (i = 0; (i < sizeof(randomfiles) / sizeof(randomfiles[0])) &&
  271|      2|         (n < ENTROPY_NEEDED); i++) {
  272|      1|        if ((fd = open(randomfiles[i], O_RDONLY
  273|      1|#   ifdef O_NONBLOCK
  274|      1|                       | O_NONBLOCK
  275|      1|#   endif
  276|       |#   ifdef O_BINARY
  277|       |                       | O_BINARY
  278|       |#   endif
  279|      1|#   ifdef O_NOCTTY              /* If it happens to be a TTY (god forbid), do
  280|       |                                 * not make it our controlling tty */
  281|      1|                       | O_NOCTTY
  282|      1|#   endif
  283|      1|             )) >= 0) {
  284|      1|            int usec = 10 * 1000; /* spend 10ms on each file */
  285|      1|            int r;
  286|      1|            unsigned int j;
  287|      1|            struct stat *st = &randomstats[i];
  288|       |
  289|       |            /*
  290|       |             * Avoid using same input... Used to be O_NOFOLLOW above, but
  291|       |             * it's not universally appropriate...
  292|       |             */
  293|      1|            if (fstat(fd, st) != 0) {
  294|      0|                close(fd);
  295|      0|                continue;
  296|      0|            }
  297|      1|            for (j = 0; j < i; j++) {
  298|      0|                if (randomstats[j].st_ino == st->st_ino &&
  299|      0|                    randomstats[j].st_dev == st->st_dev)
  300|      0|                    break;
  301|      0|            }
  302|      1|            if (j < i) {
  303|      0|                close(fd);
  304|      0|                continue;
  305|      0|            }
  306|       |
  307|      1|            do {
  308|      1|                int try_read = 0;
  309|       |
  310|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  311|       |                /*
  312|       |                 * select() is broken in BeOS R5, so we simply try to read
  313|       |                 * something and snooze if we couldn't
  314|       |                 */
  315|       |                try_read = 1;
  316|       |
  317|       |#   elif defined(OPENSSL_SYS_LINUX)
  318|       |                /* use poll() */
  319|      1|                struct pollfd pset;
  320|       |
  321|      1|                pset.fd = fd;
  322|      1|                pset.events = POLLIN;
  323|      1|                pset.revents = 0;
  324|       |
  325|      1|                if (poll(&pset, 1, usec / 1000) < 0)
  326|      0|                    usec = 0;
  327|      1|                else
  328|      1|                    try_read = (pset.revents & POLLIN) != 0;
  329|       |
  330|       |#   else
  331|       |                /* use select() */
  332|       |                fd_set fset;
  333|       |                struct timeval t;
  334|       |
  335|       |                t.tv_sec = 0;
  336|       |                t.tv_usec = usec;
  337|       |
  338|       |                if (FD_SETSIZE > 0 && (unsigned)fd >= FD_SETSIZE) {
  339|       |                    /*
  340|       |                     * can't use select, so just try to read once anyway
  341|       |                     */
  342|       |                    try_read = 1;
  343|       |                } else {
  344|       |                    FD_ZERO(&fset);
  345|       |                    FD_SET(fd, &fset);
  346|       |
  347|       |                    if (select(fd + 1, &fset, NULL, NULL, &t) >= 0) {
  348|       |                        usec = t.tv_usec;
  349|       |                        if (FD_ISSET(fd, &fset))
  350|       |                            try_read = 1;
  351|       |                    } else
  352|       |                        usec = 0;
  353|       |                }
  354|       |#   endif
  355|       |
  356|      1|                if (try_read) {
  357|      1|                    r = read(fd, (unsigned char *)tmpbuf + n,
  358|      1|                             ENTROPY_NEEDED - n);
  359|      1|                    if (r > 0)
  360|      1|                        n += r;
  361|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  362|       |                    if (r == 0)
  363|       |                        snooze(t.tv_usec);
  364|       |#   endif
  365|      1|                } else
  366|      0|                    r = -1;
  367|       |
  368|       |                /*
  369|       |                 * Some Unixen will update t in select(), some won't.  For
  370|       |                 * those who won't, or if we didn't use select() in the first
  371|       |                 * place, give up here, otherwise, we will do this once again
  372|       |                 * for the remaining time.
  373|       |                 */
  374|      1|                if (usec == 10 * 1000)
  375|      1|                    usec = 0;
  376|      1|            }
  377|      1|            while ((r > 0 ||
  378|      1|                    (errno == EINTR || errno == EAGAIN)) && usec != 0
  379|      1|                   && n < ENTROPY_NEEDED);
  380|       |
  381|      1|            close(fd);
  382|      1|        }
  383|      1|    }
  384|      1|#  endif                        /* defined(DEVRANDOM) */
  385|       |
  386|      1|#  ifdef DEVRANDOM_EGD
  387|       |    /*
  388|       |     * Use an EGD socket to read entropy from an EGD or PRNGD entropy
  389|       |     * collecting daemon.
  390|       |     */
  391|       |
  392|      1|    for (egdsocket = egdsockets; *egdsocket && n < ENTROPY_NEEDED;
  393|      1|         egdsocket++) {
  394|      0|        int r;
  395|       |
  396|      0|        r = RAND_query_egd_bytes(*egdsocket, (unsigned char *)tmpbuf + n,
  397|      0|                                 ENTROPY_NEEDED - n);
  398|      0|        if (r > 0)
  399|      0|            n += r;
  400|      0|    }
  401|      1|#  endif                        /* defined(DEVRANDOM_EGD) */
  402|       |
  403|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  404|      1|    if (n > 0) {
  405|      1|        RAND_add(tmpbuf, sizeof tmpbuf, (double)n);
  406|      1|        OPENSSL_cleanse(tmpbuf, n);
  407|      1|    }
  408|      1|#  endif
  409|       |
  410|       |    /* put in some default random data, we need more than just this */
  411|      1|    l = curr_pid;
  412|      1|    RAND_add(&l, sizeof(l), 0.0);
  413|      1|    l = getuid();
  414|      1|    RAND_add(&l, sizeof(l), 0.0);
  415|       |
  416|      1|    l = time(NULL);
  417|      1|    RAND_add(&l, sizeof(l), 0.0);
  418|       |
  419|       |#  if defined(OPENSSL_SYS_BEOS)
  420|       |    {
  421|       |        system_info sysInfo;
  422|       |        get_system_info(&sysInfo);
  423|       |        RAND_add(&sysInfo, sizeof(sysInfo), 0);
  424|       |    }
  425|       |#  endif
  426|       |
  427|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  428|      1|    return 1;
  429|       |#  else
  430|       |    return 0;
  431|       |#  endif
  432|      1|}

RSA_PKCS1_SSLeay:
  151|      7|{
  152|      7|    return (&rsa_pkcs1_eay_meth);
  153|      7|}

ERR_load_RSA_strings:
  239|      1|{
  240|      1|#ifndef OPENSSL_NO_ERR
  241|       |
  242|      1|    if (ERR_func_error_string(RSA_str_functs[0].error) == NULL) {
  243|      1|        ERR_load_strings(0, RSA_str_functs);
  244|      1|        ERR_load_strings(0, RSA_str_reasons);
  245|      1|    }
  246|      1|#endif
  247|      1|}

SHA1_Update:
  303|  10.9k|{
  304|  10.9k|    const unsigned char *data = data_;
  305|  10.9k|    unsigned char *p;
  306|  10.9k|    HASH_LONG l;
  307|  10.9k|    size_t n;
  308|       |
  309|  10.9k|    if (len == 0)
  310|      1|        return 1;
  311|       |
  312|  10.9k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  10.9k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  10.9k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  10.9k|    c->Nl = l;
  322|       |
  323|  10.9k|    n = c->num;
  324|  10.9k|    if (n != 0) {
  325|  8.21k|        p = (unsigned char *)c->data;
  326|       |
  327|  8.21k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|     53|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|     53|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|     53|            n = HASH_CBLOCK - n;
  331|     53|            data += n;
  332|     53|            len -= n;
  333|     53|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|     53|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  8.16k|        } else {
  342|  8.16k|            memcpy(p + n, data, len);
  343|  8.16k|            c->num += (unsigned int)len;
  344|  8.16k|            return 1;
  345|  8.16k|        }
  346|  8.21k|    }
  347|       |
  348|  2.78k|    n = len / HASH_CBLOCK;
  349|  2.78k|    if (n > 0) {
  350|      0|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|      0|        n *= HASH_CBLOCK;
  352|      0|        data += n;
  353|      0|        len -= n;
  354|      0|    }
  355|       |
  356|  2.78k|    if (len != 0) {
  357|  2.78k|        p = (unsigned char *)c->data;
  358|  2.78k|        c->num = (unsigned int)len;
  359|  2.78k|        memcpy(p, data, len);
  360|  2.78k|    }
  361|  2.78k|    return 1;
  362|  10.9k|}
SHA1_Final:
  370|  2.73k|{
  371|  2.73k|    unsigned char *p = (unsigned char *)c->data;
  372|  2.73k|    size_t n = c->num;
  373|       |
  374|  2.73k|    p[n] = 0x80;                /* there is always room for one */
  375|  2.73k|    n++;
  376|       |
  377|  2.73k|    if (n > (HASH_CBLOCK - 8)) {
  378|  1.43k|        memset(p + n, 0, HASH_CBLOCK - n);
  379|  1.43k|        n = 0;
  380|  1.43k|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|  1.43k|    }
  382|  2.73k|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|  2.73k|    p += HASH_CBLOCK - 8;
  385|  2.73k|#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|  2.73k|    (void)HOST_l2c(c->Nh, p);
  387|  2.73k|    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|       |    (void)HOST_l2c(c->Nl, p);
  390|       |    (void)HOST_l2c(c->Nh, p);
  391|       |#endif
  392|  2.73k|    p -= HASH_CBLOCK;
  393|  2.73k|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|  2.73k|    c->num = 0;
  395|  2.73k|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|  2.73k|    HASH_MAKE_STRING(c, md);
  401|  2.73k|#endif
  402|       |
  403|  2.73k|    return 1;
  404|  2.73k|}

SHA1_Init:
  130|  2.73k|{
  131|  2.73k|    memset(c, 0, sizeof(*c));
  132|  2.73k|    c->h0 = INIT_DATA_h0;
  133|  2.73k|    c->h1 = INIT_DATA_h1;
  134|  2.73k|    c->h2 = INIT_DATA_h2;
  135|  2.73k|    c->h3 = INIT_DATA_h3;
  136|  2.73k|    c->h4 = INIT_DATA_h4;
  137|  2.73k|    return 1;
  138|  2.73k|}

sk_set_cmp_func:
   82|     98| (const void *, const void *) {
   83|     98|    int (*old) (const void *, const void *) = sk->comp;
   84|       |
   85|     98|    if (sk->comp != c)
   86|     98|        sk->sorted = 0;
   87|     98|    sk->comp = c;
   88|       |
   89|     98|    return old;
   90|     98|}
sk_dup:
   93|     98|{
   94|     98|    _STACK *ret;
   95|     98|    char **s;
   96|       |
   97|     98|    if ((ret = sk_new(sk->comp)) == NULL)
   98|      0|        goto err;
   99|     98|    s = (char **)OPENSSL_realloc((char *)ret->data,
  100|     98|                                 (unsigned int)sizeof(char *) *
  101|     98|                                 sk->num_alloc);
  102|     98|    if (s == NULL)
  103|      0|        goto err;
  104|     98|    ret->data = s;
  105|       |
  106|     98|    ret->num = sk->num;
  107|     98|    memcpy(ret->data, sk->data, sizeof(char *) * sk->num);
  108|     98|    ret->sorted = sk->sorted;
  109|     98|    ret->num_alloc = sk->num_alloc;
  110|     98|    ret->comp = sk->comp;
  111|     98|    return (ret);
  112|      0| err:
  113|      0|    if (ret)
  114|      0|        sk_free(ret);
  115|      0|    return (NULL);
  116|     98|}
sk_new_null:
  153|   151k|{
  154|   151k|    return sk_new((int (*)(const void *, const void *))0);
  155|   151k|}
sk_new:
  158|   151k|{
  159|   151k|    _STACK *ret;
  160|   151k|    int i;
  161|       |
  162|   151k|    if ((ret = OPENSSL_malloc(sizeof(_STACK))) == NULL)
  163|      0|        goto err;
  164|   151k|    if ((ret->data = OPENSSL_malloc(sizeof(char *) * MIN_NODES)) == NULL)
  165|      0|        goto err;
  166|   757k|    for (i = 0; i < MIN_NODES; i++)
  167|   606k|        ret->data[i] = NULL;
  168|   151k|    ret->comp = c;
  169|   151k|    ret->num_alloc = MIN_NODES;
  170|   151k|    ret->num = 0;
  171|   151k|    ret->sorted = 0;
  172|   151k|    return (ret);
  173|      0| err:
  174|      0|    if (ret)
  175|      0|        OPENSSL_free(ret);
  176|      0|    return (NULL);
  177|   151k|}
sk_insert:
  180|   281k|{
  181|   281k|    char **s;
  182|       |
  183|   281k|    if (st == NULL)
  184|      0|        return 0;
  185|   281k|    if (st->num_alloc <= st->num + 1) {
  186|  22.6k|        s = OPENSSL_realloc((char *)st->data,
  187|  22.6k|                            (unsigned int)sizeof(char *) * st->num_alloc * 2);
  188|  22.6k|        if (s == NULL)
  189|      0|            return (0);
  190|  22.6k|        st->data = s;
  191|  22.6k|        st->num_alloc *= 2;
  192|  22.6k|    }
  193|   281k|    if ((loc >= (int)st->num) || (loc < 0))
  194|   281k|        st->data[st->num] = data;
  195|      7|    else {
  196|      7|        int i;
  197|      7|        char **f, **t;
  198|       |
  199|      7|        f = st->data;
  200|      7|        t = &(st->data[1]);
  201|     42|        for (i = st->num; i >= loc; i--)
  202|     35|            t[i] = f[i];
  203|       |
  204|       |#ifdef undef                    /* no memmove on sunos :-( */
  205|       |        memmove(&(st->data[loc + 1]),
  206|       |                &(st->data[loc]), sizeof(char *) * (st->num - loc));
  207|       |#endif
  208|      7|        st->data[loc] = data;
  209|      7|    }
  210|   281k|    st->num++;
  211|   281k|    st->sorted = 0;
  212|   281k|    return (st->num);
  213|   281k|}
sk_delete_ptr:
  216|     39|{
  217|     39|    int i;
  218|       |
  219|    109|    for (i = 0; i < st->num; i++)
  220|     77|        if (st->data[i] == p)
  221|      7|            return (sk_delete(st, i));
  222|     32|    return (NULL);
  223|     39|}
sk_delete:
  226|      7|{
  227|      7|    char *ret;
  228|      7|    int i, j;
  229|       |
  230|      7|    if (!st || (loc < 0) || (loc >= st->num))
  231|      0|        return NULL;
  232|       |
  233|      7|    ret = st->data[loc];
  234|      7|    if (loc != st->num - 1) {
  235|      0|        j = st->num - 1;
  236|      0|        for (i = loc; i < j; i++)
  237|      0|            st->data[i] = st->data[i + 1];
  238|       |        /*
  239|       |         * In theory memcpy is not safe for this memcpy( &(st->data[loc]),
  240|       |         * &(st->data[loc+1]), sizeof(char *)*(st->num-loc-1));
  241|       |         */
  242|      0|    }
  243|      7|    st->num--;
  244|      7|    return (ret);
  245|      7|}
sk_find:
  272|  6.27k|{
  273|  6.27k|    return internal_find(st, data, OBJ_BSEARCH_FIRST_VALUE_ON_MATCH);
  274|  6.27k|}
sk_push:
  282|   281k|{
  283|   281k|    return (sk_insert(st, data, st->num));
  284|   281k|}
sk_pop_free:
  320|  97.6k|{
  321|  97.6k|    int i;
  322|       |
  323|  97.6k|    if (st == NULL)
  324|      0|        return;
  325|   299k|    for (i = 0; i < st->num; i++)
  326|   201k|        if (st->data[i] != NULL)
  327|   201k|            func(st->data[i]);
  328|  97.6k|    sk_free(st);
  329|  97.6k|}
sk_free:
  332|   170k|{
  333|   170k|    if (st == NULL)
  334|  19.1k|        return;
  335|   151k|    if (st->data != NULL)
  336|   151k|        OPENSSL_free(st->data);
  337|   151k|    OPENSSL_free(st);
  338|   151k|}
sk_num:
  341|   774k|{
  342|   774k|    if (st == NULL)
  343|  12.5k|        return -1;
  344|   761k|    return st->num;
  345|   774k|}
sk_value:
  348|   436k|{
  349|   436k|    if (!st || (i < 0) || (i >= st->num))
  350|      1|        return NULL;
  351|   436k|    return st->data[i];
  352|   436k|}
sk_set:
  355|  47.9k|{
  356|  47.9k|    if (!st || (i < 0) || (i >= st->num))
  357|      0|        return NULL;
  358|  47.9k|    return (st->data[i] = value);
  359|  47.9k|}
sk_sort:
  362|  6.37k|{
  363|  6.37k|    if (st && !st->sorted && st->comp != NULL) {
  364|  6.37k|        int (*comp_func) (const void *, const void *);
  365|       |
  366|       |        /*
  367|       |         * same comment as in sk_find ... previously st->comp was declared as
  368|       |         * a (void*,void*) callback type, but this made the population of the
  369|       |         * callback pointer illogical - our callbacks compare type** with
  370|       |         * type**, so we leave the casting until absolutely necessary (ie.
  371|       |         * "now").
  372|       |         */
  373|  6.37k|        comp_func = (int (*)(const void *, const void *))(st->comp);
  374|  6.37k|        qsort(st->data, st->num, sizeof(char *), comp_func);
  375|  6.37k|        st->sorted = 1;
  376|  6.37k|    }
  377|  6.37k|}
stack.c:internal_find:
  248|  6.27k|{
  249|  6.27k|    const void *const *r;
  250|  6.27k|    int i;
  251|       |
  252|  6.27k|    if (st == NULL)
  253|      0|        return -1;
  254|       |
  255|  6.27k|    if (st->comp == NULL) {
  256|      0|        for (i = 0; i < st->num; i++)
  257|      0|            if (st->data[i] == data)
  258|      0|                return (i);
  259|      0|        return (-1);
  260|      0|    }
  261|  6.27k|    sk_sort(st);
  262|  6.27k|    if (data == NULL)
  263|      0|        return (-1);
  264|  6.27k|    r = OBJ_bsearch_ex_(&data, st->data, st->num, sizeof(void *), st->comp,
  265|  6.27k|                        ret_val_options);
  266|  6.27k|    if (r == NULL)
  267|  6.27k|        return (-1);
  268|      0|    return (int)((char **)r - st->data);
  269|  6.27k|}

ERR_load_TS_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(TS_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, TS_str_functs);
  185|      1|        ERR_load_strings(0, TS_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_UI_strings:
  103|      1|{
  104|      1|#ifndef OPENSSL_NO_ERR
  105|       |
  106|      1|    if (ERR_func_error_string(UI_str_functs[0].error) == NULL) {
  107|      1|        ERR_load_strings(0, UI_str_functs);
  108|      1|        ERR_load_strings(0, UI_str_reasons);
  109|      1|    }
  110|      1|#endif
  111|      1|}

X509_LOOKUP_file:
   87|     49|{
   88|     49|    return (&x509_file_lookup);
   89|     49|}
X509_load_cert_crl_file:
  244|     49|{
  245|     49|    STACK_OF(X509_INFO) *inf;
  246|     49|    X509_INFO *itmp;
  247|     49|    BIO *in;
  248|     49|    int i, count = 0;
  249|     49|    if (type != X509_FILETYPE_PEM)
  250|      0|        return X509_load_cert_file(ctx, file, type);
  251|     49|    in = BIO_new_file(file, "r");
  252|     49|    if (!in) {
  253|      0|        X509err(X509_F_X509_LOAD_CERT_CRL_FILE, ERR_R_SYS_LIB);
  254|      0|        return 0;
  255|      0|    }
  256|     49|    inf = PEM_X509_INFO_read_bio(in, NULL, NULL, "");
  257|     49|    BIO_free(in);
  258|     49|    if (!inf) {
  259|      0|        X509err(X509_F_X509_LOAD_CERT_CRL_FILE, ERR_R_PEM_LIB);
  260|      0|        return 0;
  261|      0|    }
  262|  6.32k|    for (i = 0; i < sk_X509_INFO_num(inf); i++) {
  263|  6.27k|        itmp = sk_X509_INFO_value(inf, i);
  264|  6.27k|        if (itmp->x509) {
  265|  6.27k|            X509_STORE_add_cert(ctx->store_ctx, itmp->x509);
  266|  6.27k|            count++;
  267|  6.27k|        }
  268|  6.27k|        if (itmp->crl) {
  269|      0|            X509_STORE_add_crl(ctx->store_ctx, itmp->crl);
  270|      0|            count++;
  271|      0|        }
  272|  6.27k|    }
  273|     49|    sk_X509_INFO_pop_free(inf, X509_INFO_free);
  274|     49|    return count;
  275|     49|}
by_file.c:by_file_ctrl:
   93|     49|{
   94|     49|    int ok = 0;
   95|     49|    const char *file;
   96|       |
   97|     49|    switch (cmd) {
   98|     49|    case X509_L_FILE_LOAD:
   99|     49|        if (argl == X509_FILETYPE_DEFAULT) {
  100|      0|            file = getenv(X509_get_default_cert_file_env());
  101|      0|            if (file)
  102|      0|                ok = (X509_load_cert_crl_file(ctx, file,
  103|      0|                                              X509_FILETYPE_PEM) != 0);
  104|       |
  105|      0|            else
  106|      0|                ok = (X509_load_cert_crl_file
  107|      0|                      (ctx, X509_get_default_cert_file(),
  108|      0|                       X509_FILETYPE_PEM) != 0);
  109|       |
  110|      0|            if (!ok) {
  111|      0|                X509err(X509_F_BY_FILE_CTRL, X509_R_LOADING_DEFAULTS);
  112|      0|            }
  113|     49|        } else {
  114|     49|            if (argl == X509_FILETYPE_PEM)
  115|     49|                ok = (X509_load_cert_crl_file(ctx, argp,
  116|     49|                                              X509_FILETYPE_PEM) != 0);
  117|      0|            else
  118|      0|                ok = (X509_load_cert_file(ctx, argp, (int)argl) != 0);
  119|     49|        }
  120|     49|        break;
  121|     49|    }
  122|     49|    return (ok);
  123|     49|}

X509_subject_name_cmp:
  116|  1.25M|{
  117|  1.25M|    return (X509_NAME_cmp(a->cert_info->subject, b->cert_info->subject));
  118|  1.25M|}
X509_NAME_cmp:
  203|  1.25M|{
  204|  1.25M|    int ret;
  205|       |
  206|       |    /* Ensure canonical encoding is present and up to date */
  207|       |
  208|  1.25M|    if (!a->canon_enc || a->modified) {
  209|      0|        ret = i2d_X509_NAME((X509_NAME *)a, NULL);
  210|      0|        if (ret < 0)
  211|      0|            return -2;
  212|      0|    }
  213|       |
  214|  1.25M|    if (!b->canon_enc || b->modified) {
  215|      0|        ret = i2d_X509_NAME((X509_NAME *)b, NULL);
  216|      0|        if (ret < 0)
  217|      0|            return -2;
  218|      0|    }
  219|       |
  220|  1.25M|    ret = a->canon_enclen - b->canon_enclen;
  221|       |
  222|  1.25M|    if (ret)
  223|  1.05M|        return ret;
  224|       |
  225|   199k|    return memcmp(a->canon_enc, b->canon_enc, a->canon_enclen);
  226|       |
  227|  1.25M|}

X509_STORE_load_locations:
   87|     49|{
   88|     49|    X509_LOOKUP *lookup;
   89|       |
   90|     49|    if (file != NULL) {
   91|     49|        lookup = X509_STORE_add_lookup(ctx, X509_LOOKUP_file());
   92|     49|        if (lookup == NULL)
   93|      0|            return (0);
   94|     49|        if (X509_LOOKUP_load_file(lookup, file, X509_FILETYPE_PEM) != 1)
   95|      0|            return (0);
   96|     49|    }
   97|     49|    if (path != NULL) {
   98|      0|        lookup = X509_STORE_add_lookup(ctx, X509_LOOKUP_hash_dir());
   99|      0|        if (lookup == NULL)
  100|      0|            return (0);
  101|      0|        if (X509_LOOKUP_add_dir(lookup, path, X509_FILETYPE_PEM) != 1)
  102|      0|            return (0);
  103|      0|    }
  104|     49|    if ((path == NULL) && (file == NULL))
  105|      0|        return (0);
  106|     49|    return (1);
  107|     49|}

X509_get_default_cert_area:
   70|      2|{
   71|      2|    return (X509_CERT_AREA);
   72|      2|}

ERR_load_X509_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(X509_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, X509_str_functs);
  185|      1|        ERR_load_strings(0, X509_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

X509_LOOKUP_new:
   66|     49|{
   67|     49|    X509_LOOKUP *ret;
   68|       |
   69|     49|    ret = (X509_LOOKUP *)OPENSSL_malloc(sizeof(X509_LOOKUP));
   70|     49|    if (ret == NULL)
   71|      0|        return NULL;
   72|       |
   73|     49|    ret->init = 0;
   74|     49|    ret->skip = 0;
   75|     49|    ret->method = method;
   76|     49|    ret->method_data = NULL;
   77|     49|    ret->store_ctx = NULL;
   78|     49|    if ((method->new_item != NULL) && !method->new_item(ret)) {
   79|      0|        OPENSSL_free(ret);
   80|      0|        return NULL;
   81|      0|    }
   82|     49|    return ret;
   83|     49|}
X509_LOOKUP_free:
   86|     49|{
   87|     49|    if (ctx == NULL)
   88|      0|        return;
   89|     49|    if ((ctx->method != NULL) && (ctx->method->free != NULL))
   90|      0|        (*ctx->method->free) (ctx);
   91|     49|    OPENSSL_free(ctx);
   92|     49|}
X509_LOOKUP_shutdown:
  105|     49|{
  106|     49|    if (ctx->method == NULL)
  107|      0|        return 0;
  108|     49|    if (ctx->method->shutdown != NULL)
  109|      0|        return ctx->method->shutdown(ctx);
  110|     49|    else
  111|     49|        return 1;
  112|     49|}
X509_LOOKUP_ctrl:
  116|     49|{
  117|     49|    if (ctx->method == NULL)
  118|      0|        return -1;
  119|     49|    if (ctx->method->ctrl != NULL)
  120|     49|        return ctx->method->ctrl(ctx, cmd, argc, argl, ret);
  121|      0|    else
  122|      0|        return 1;
  123|     49|}
X509_STORE_new:
  183|     49|{
  184|     49|    X509_STORE *ret;
  185|       |
  186|     49|    if ((ret = (X509_STORE *)OPENSSL_malloc(sizeof(X509_STORE))) == NULL)
  187|      0|        return NULL;
  188|     49|    if ((ret->objs = sk_X509_OBJECT_new(x509_object_cmp)) == NULL)
  189|      0|        goto err0;
  190|     49|    ret->cache = 1;
  191|     49|    if ((ret->get_cert_methods = sk_X509_LOOKUP_new_null()) == NULL)
  192|      0|        goto err1;
  193|     49|    ret->verify = 0;
  194|     49|    ret->verify_cb = 0;
  195|       |
  196|     49|    if ((ret->param = X509_VERIFY_PARAM_new()) == NULL)
  197|      0|        goto err2;
  198|       |
  199|     49|    ret->get_issuer = 0;
  200|     49|    ret->check_issued = 0;
  201|     49|    ret->check_revocation = 0;
  202|     49|    ret->get_crl = 0;
  203|     49|    ret->check_crl = 0;
  204|     49|    ret->cert_crl = 0;
  205|     49|    ret->lookup_certs = 0;
  206|     49|    ret->lookup_crls = 0;
  207|     49|    ret->cleanup = 0;
  208|       |
  209|     49|    if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_X509_STORE, ret, &ret->ex_data))
  210|      0|       goto err3;
  211|       |
  212|     49|    ret->references = 1;
  213|     49|    return ret;
  214|       |
  215|      0| err3:
  216|      0|    X509_VERIFY_PARAM_free(ret->param);
  217|      0| err2:
  218|      0|    sk_X509_LOOKUP_free(ret->get_cert_methods);
  219|      0| err1:
  220|      0|    sk_X509_OBJECT_free(ret->objs);
  221|      0| err0:
  222|      0|    OPENSSL_free(ret);
  223|      0|    return NULL;
  224|      0|}
X509_STORE_free:
  242|     49|{
  243|     49|    int i;
  244|     49|    STACK_OF(X509_LOOKUP) *sk;
  245|     49|    X509_LOOKUP *lu;
  246|       |
  247|     49|    if (vfy == NULL)
  248|      0|        return;
  249|       |
  250|     49|    i = CRYPTO_add(&vfy->references, -1, CRYPTO_LOCK_X509_STORE);
  251|       |#ifdef REF_PRINT
  252|       |    REF_PRINT("X509_STORE", vfy);
  253|       |#endif
  254|     49|    if (i > 0)
  255|      0|        return;
  256|       |#ifdef REF_CHECK
  257|       |    if (i < 0) {
  258|       |        fprintf(stderr, "X509_STORE_free, bad reference count\n");
  259|       |        abort();                /* ok */
  260|       |    }
  261|       |#endif
  262|       |
  263|     49|    sk = vfy->get_cert_methods;
  264|     98|    for (i = 0; i < sk_X509_LOOKUP_num(sk); i++) {
  265|     49|        lu = sk_X509_LOOKUP_value(sk, i);
  266|     49|        X509_LOOKUP_shutdown(lu);
  267|     49|        X509_LOOKUP_free(lu);
  268|     49|    }
  269|     49|    sk_X509_LOOKUP_free(sk);
  270|     49|    sk_X509_OBJECT_pop_free(vfy->objs, cleanup);
  271|       |
  272|     49|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_X509_STORE, vfy, &vfy->ex_data);
  273|     49|    if (vfy->param)
  274|     49|        X509_VERIFY_PARAM_free(vfy->param);
  275|     49|    OPENSSL_free(vfy);
  276|     49|}
X509_STORE_add_lookup:
  279|     49|{
  280|     49|    int i;
  281|     49|    STACK_OF(X509_LOOKUP) *sk;
  282|     49|    X509_LOOKUP *lu;
  283|       |
  284|     49|    sk = v->get_cert_methods;
  285|     49|    for (i = 0; i < sk_X509_LOOKUP_num(sk); i++) {
  286|      0|        lu = sk_X509_LOOKUP_value(sk, i);
  287|      0|        if (m == lu->method) {
  288|      0|            return lu;
  289|      0|        }
  290|      0|    }
  291|       |    /* a new one */
  292|     49|    lu = X509_LOOKUP_new(m);
  293|     49|    if (lu == NULL)
  294|      0|        return NULL;
  295|     49|    else {
  296|     49|        lu->store_ctx = v;
  297|     49|        if (sk_X509_LOOKUP_push(v->get_cert_methods, lu))
  298|     49|            return lu;
  299|      0|        else {
  300|      0|            X509_LOOKUP_free(lu);
  301|      0|            return NULL;
  302|      0|        }
  303|     49|    }
  304|     49|}
X509_STORE_add_cert:
  348|  6.27k|{
  349|  6.27k|    X509_OBJECT *obj;
  350|  6.27k|    int ret = 1;
  351|       |
  352|  6.27k|    if (x == NULL)
  353|      0|        return 0;
  354|  6.27k|    obj = (X509_OBJECT *)OPENSSL_malloc(sizeof(X509_OBJECT));
  355|  6.27k|    if (obj == NULL) {
  356|      0|        X509err(X509_F_X509_STORE_ADD_CERT, ERR_R_MALLOC_FAILURE);
  357|      0|        return 0;
  358|      0|    }
  359|  6.27k|    obj->type = X509_LU_X509;
  360|  6.27k|    obj->data.x509 = x;
  361|       |
  362|  6.27k|    CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
  363|       |
  364|  6.27k|    X509_OBJECT_up_ref_count(obj);
  365|       |
  366|  6.27k|    if (X509_OBJECT_retrieve_match(ctx->objs, obj)) {
  367|      0|        X509_OBJECT_free_contents(obj);
  368|      0|        OPENSSL_free(obj);
  369|      0|        X509err(X509_F_X509_STORE_ADD_CERT,
  370|      0|                X509_R_CERT_ALREADY_IN_HASH_TABLE);
  371|      0|        ret = 0;
  372|  6.27k|    } else if (!sk_X509_OBJECT_push(ctx->objs, obj)) {
  373|      0|        X509_OBJECT_free_contents(obj);
  374|      0|        OPENSSL_free(obj);
  375|      0|        X509err(X509_F_X509_STORE_ADD_CERT, ERR_R_MALLOC_FAILURE);
  376|      0|        ret = 0;
  377|      0|    }
  378|       |
  379|  6.27k|    CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);
  380|       |
  381|  6.27k|    return ret;
  382|  6.27k|}
X509_OBJECT_up_ref_count:
  421|  6.27k|{
  422|  6.27k|    switch (a->type) {
  423|  6.27k|    case X509_LU_X509:
  424|  6.27k|        CRYPTO_add(&a->data.x509->references, 1, CRYPTO_LOCK_X509);
  425|  6.27k|        break;
  426|      0|    case X509_LU_CRL:
  427|      0|        CRYPTO_add(&a->data.crl->references, 1, CRYPTO_LOCK_X509_CRL);
  428|      0|        break;
  429|  6.27k|    }
  430|  6.27k|}
X509_OBJECT_retrieve_match:
  591|  6.27k|{
  592|  6.27k|    int idx, i;
  593|  6.27k|    X509_OBJECT *obj;
  594|  6.27k|    idx = sk_X509_OBJECT_find(h, x);
  595|  6.27k|    if (idx == -1)
  596|  6.27k|        return NULL;
  597|      0|    if ((x->type != X509_LU_X509) && (x->type != X509_LU_CRL))
  598|      0|        return sk_X509_OBJECT_value(h, idx);
  599|      0|    for (i = idx; i < sk_X509_OBJECT_num(h); i++) {
  600|      0|        obj = sk_X509_OBJECT_value(h, i);
  601|      0|        if (x509_object_cmp
  602|      0|            ((const X509_OBJECT **)&obj, (const X509_OBJECT **)&x))
  603|      0|            return NULL;
  604|      0|        if (x->type == X509_LU_X509) {
  605|      0|            if (!X509_cmp(obj->data.x509, x->data.x509))
  606|      0|                return obj;
  607|      0|        } else if (x->type == X509_LU_CRL) {
  608|      0|            if (!X509_CRL_match(obj->data.crl, x->data.crl))
  609|      0|                return obj;
  610|      0|        } else
  611|      0|            return obj;
  612|      0|    }
  613|      0|    return NULL;
  614|      0|}
X509_STORE_set_flags:
  681|     98|{
  682|     98|    return X509_VERIFY_PARAM_set_flags(ctx->param, flags);
  683|     98|}
x509_lu.c:x509_object_cmp:
  162|  1.25M|{
  163|  1.25M|    int ret;
  164|       |
  165|  1.25M|    ret = ((*a)->type - (*b)->type);
  166|  1.25M|    if (ret)
  167|      0|        return ret;
  168|  1.25M|    switch ((*a)->type) {
  169|  1.25M|    case X509_LU_X509:
  170|  1.25M|        ret = X509_subject_name_cmp((*a)->data.x509, (*b)->data.x509);
  171|  1.25M|        break;
  172|      0|    case X509_LU_CRL:
  173|      0|        ret = X509_CRL_cmp((*a)->data.crl, (*b)->data.crl);
  174|      0|        break;
  175|      0|    default:
  176|       |        /* abort(); */
  177|      0|        return 0;
  178|  1.25M|    }
  179|  1.25M|    return ret;
  180|  1.25M|}
x509_lu.c:cleanup:
  227|  6.27k|{
  228|  6.27k|    if (!a)
  229|      0|        return;
  230|  6.27k|    if (a->type == X509_LU_X509) {
  231|  6.27k|        X509_free(a->data.x509);
  232|  6.27k|    } else if (a->type == X509_LU_CRL) {
  233|      0|        X509_CRL_free(a->data.crl);
  234|      0|    } else {
  235|       |        /* abort(); */
  236|      0|    }
  237|       |
  238|  6.27k|    OPENSSL_free(a);
  239|  6.27k|}

X509_NAME_oneline:
   74|  6.27k|{
   75|  6.27k|    X509_NAME_ENTRY *ne;
   76|  6.27k|    int i;
   77|  6.27k|    int n, lold, l, l1, l2, num, j, type;
   78|  6.27k|    const char *s;
   79|  6.27k|    char *p;
   80|  6.27k|    unsigned char *q;
   81|  6.27k|    BUF_MEM *b = NULL;
   82|  6.27k|    static const char hex[17] = "0123456789ABCDEF";
   83|  6.27k|    int gs_doit[4];
   84|  6.27k|    char tmp_buf[80];
   85|       |#ifdef CHARSET_EBCDIC
   86|       |    char ebcdic_buf[1024];
   87|       |#endif
   88|       |
   89|  6.27k|    if (buf == NULL) {
   90|  6.27k|        if ((b = BUF_MEM_new()) == NULL)
   91|      0|            goto err;
   92|  6.27k|        if (!BUF_MEM_grow(b, 200))
   93|      0|            goto err;
   94|  6.27k|        b->data[0] = '\0';
   95|  6.27k|        len = 200;
   96|  6.27k|    } else if (len == 0) {
   97|      0|        return NULL;
   98|      0|    }
   99|  6.27k|    if (a == NULL) {
  100|      0|        if (b) {
  101|      0|            buf = b->data;
  102|      0|            OPENSSL_free(b);
  103|      0|        }
  104|      0|        strncpy(buf, "NO X509_NAME", len);
  105|      0|        buf[len - 1] = '\0';
  106|      0|        return buf;
  107|      0|    }
  108|       |
  109|  6.27k|    len--;                      /* space for '\0' */
  110|  6.27k|    l = 0;
  111|  29.9k|    for (i = 0; i < sk_X509_NAME_ENTRY_num(a->entries); i++) {
  112|  23.6k|        ne = sk_X509_NAME_ENTRY_value(a->entries, i);
  113|  23.6k|        n = OBJ_obj2nid(ne->object);
  114|  23.6k|        if ((n == NID_undef) || ((s = OBJ_nid2sn(n)) == NULL)) {
  115|     49|            i2t_ASN1_OBJECT(tmp_buf, sizeof(tmp_buf), ne->object);
  116|     49|            s = tmp_buf;
  117|     49|        }
  118|  23.6k|        l1 = strlen(s);
  119|       |
  120|  23.6k|        type = ne->value->type;
  121|  23.6k|        num = ne->value->length;
  122|  23.6k|        if (num > NAME_ONELINE_MAX) {
  123|      0|            X509err(X509_F_X509_NAME_ONELINE, X509_R_NAME_TOO_LONG);
  124|      0|            goto end;
  125|      0|        }
  126|  23.6k|        q = ne->value->data;
  127|       |#ifdef CHARSET_EBCDIC
  128|       |        if (type == V_ASN1_GENERALSTRING ||
  129|       |            type == V_ASN1_VISIBLESTRING ||
  130|       |            type == V_ASN1_PRINTABLESTRING ||
  131|       |            type == V_ASN1_TELETEXSTRING ||
  132|       |            type == V_ASN1_IA5STRING) {
  133|       |            if (num > (int)sizeof(ebcdic_buf))
  134|       |                num = sizeof(ebcdic_buf);
  135|       |            ascii2ebcdic(ebcdic_buf, q, num);
  136|       |            q = ebcdic_buf;
  137|       |        }
  138|       |#endif
  139|       |
  140|  23.6k|        if ((type == V_ASN1_GENERALSTRING) && ((num % 4) == 0)) {
  141|      0|            gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 0;
  142|      0|            for (j = 0; j < num; j++)
  143|      0|                if (q[j] != 0)
  144|      0|                    gs_doit[j & 3] = 1;
  145|       |
  146|      0|            if (gs_doit[0] | gs_doit[1] | gs_doit[2])
  147|      0|                gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 1;
  148|      0|            else {
  149|      0|                gs_doit[0] = gs_doit[1] = gs_doit[2] = 0;
  150|      0|                gs_doit[3] = 1;
  151|      0|            }
  152|      0|        } else
  153|  23.6k|            gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 1;
  154|       |
  155|   419k|        for (l2 = j = 0; j < num; j++) {
  156|   395k|            if (!gs_doit[j & 3])
  157|      0|                continue;
  158|   395k|            l2++;
  159|   395k|#ifndef CHARSET_EBCDIC
  160|   395k|            if ((q[j] < ' ') || (q[j] > '~'))
  161|  1.07k|                l2 += 3;
  162|       |#else
  163|       |            if ((os_toascii[q[j]] < os_toascii[' ']) ||
  164|       |                (os_toascii[q[j]] > os_toascii['~']))
  165|       |                l2 += 3;
  166|       |#endif
  167|   395k|        }
  168|       |
  169|  23.6k|        lold = l;
  170|  23.6k|        l += 1 + l1 + 1 + l2;
  171|  23.6k|        if (l > NAME_ONELINE_MAX) {
  172|      0|            X509err(X509_F_X509_NAME_ONELINE, X509_R_NAME_TOO_LONG);
  173|      0|            goto end;
  174|      0|        }
  175|  23.6k|        if (b != NULL) {
  176|  23.6k|            if (!BUF_MEM_grow(b, l + 1))
  177|      0|                goto err;
  178|  23.6k|            p = &(b->data[lold]);
  179|  23.6k|        } else if (l > len) {
  180|      0|            break;
  181|      0|        } else
  182|      0|            p = &(buf[lold]);
  183|  23.6k|        *(p++) = '/';
  184|  23.6k|        memcpy(p, s, (unsigned int)l1);
  185|  23.6k|        p += l1;
  186|  23.6k|        *(p++) = '=';
  187|       |
  188|  23.6k|#ifndef CHARSET_EBCDIC          /* q was assigned above already. */
  189|  23.6k|        q = ne->value->data;
  190|  23.6k|#endif
  191|       |
  192|   419k|        for (j = 0; j < num; j++) {
  193|   395k|            if (!gs_doit[j & 3])
  194|      0|                continue;
  195|   395k|#ifndef CHARSET_EBCDIC
  196|   395k|            n = q[j];
  197|   395k|            if ((n < ' ') || (n > '~')) {
  198|  1.07k|                *(p++) = '\\';
  199|  1.07k|                *(p++) = 'x';
  200|  1.07k|                *(p++) = hex[(n >> 4) & 0x0f];
  201|  1.07k|                *(p++) = hex[n & 0x0f];
  202|  1.07k|            } else
  203|   394k|                *(p++) = n;
  204|       |#else
  205|       |            n = os_toascii[q[j]];
  206|       |            if ((n < os_toascii[' ']) || (n > os_toascii['~'])) {
  207|       |                *(p++) = '\\';
  208|       |                *(p++) = 'x';
  209|       |                *(p++) = hex[(n >> 4) & 0x0f];
  210|       |                *(p++) = hex[n & 0x0f];
  211|       |            } else
  212|       |                *(p++) = q[j];
  213|       |#endif
  214|   395k|        }
  215|  23.6k|        *p = '\0';
  216|  23.6k|    }
  217|  6.27k|    if (b != NULL) {
  218|  6.27k|        p = b->data;
  219|  6.27k|        OPENSSL_free(b);
  220|  6.27k|    } else
  221|      0|        p = buf;
  222|  6.27k|    if (i == 0)
  223|      0|        *p = '\0';
  224|  6.27k|    return (p);
  225|      0| err:
  226|      0|    X509err(X509_F_X509_NAME_ONELINE, ERR_R_MALLOC_FAILURE);
  227|      0| end:
  228|      0|    BUF_MEM_free(b);
  229|      0|    return (NULL);
  230|      0|}

X509_STORE_CTX_get_ex_new_index:
 2237|      1|{
 2238|       |    /*
 2239|       |     * This function is (usually) called only once, by
 2240|       |     * SSL_get_ex_data_X509_STORE_CTX_idx (ssl/ssl_cert.c).
 2241|       |     */
 2242|      1|    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE_CTX, argl, argp,
 2243|      1|                                   new_func, dup_func, free_func);
 2244|      1|}

X509_VERIFY_PARAM_new:
  172|    147|{
  173|    147|    X509_VERIFY_PARAM *param;
  174|    147|    X509_VERIFY_PARAM_ID *paramid;
  175|       |
  176|    147|    param = OPENSSL_malloc(sizeof *param);
  177|    147|    if (!param)
  178|      0|        return NULL;
  179|    147|    memset(param, 0, sizeof(*param));
  180|       |
  181|    147|    paramid = OPENSSL_malloc(sizeof(*paramid));
  182|    147|    if (!paramid) {
  183|      0|        OPENSSL_free(param);
  184|      0|        return NULL;
  185|      0|    }
  186|    147|    memset(paramid, 0, sizeof(*paramid));
  187|       |    /* Exotic platforms may have non-zero bit representation of NULL */
  188|    147|    paramid->hosts = NULL;
  189|    147|    paramid->peername = NULL;
  190|    147|    paramid->email = NULL;
  191|    147|    paramid->ip = NULL;
  192|       |
  193|    147|    param->id = paramid;
  194|    147|    x509_verify_param_zero(param);
  195|    147|    return param;
  196|    147|}
X509_VERIFY_PARAM_free:
  199|    147|{
  200|    147|    if (param == NULL)
  201|      0|        return;
  202|    147|    x509_verify_param_zero(param);
  203|    147|    OPENSSL_free(param->id);
  204|    147|    OPENSSL_free(param);
  205|    147|}
X509_VERIFY_PARAM_inherit:
  258|     49|{
  259|     49|    unsigned long inh_flags;
  260|     49|    int to_default, to_overwrite;
  261|     49|    X509_VERIFY_PARAM_ID *id;
  262|     49|    if (!src)
  263|      0|        return 1;
  264|     49|    id = src->id;
  265|     49|    inh_flags = dest->inh_flags | src->inh_flags;
  266|       |
  267|     49|    if (inh_flags & X509_VP_FLAG_ONCE)
  268|      0|        dest->inh_flags = 0;
  269|       |
  270|     49|    if (inh_flags & X509_VP_FLAG_LOCKED)
  271|      0|        return 1;
  272|       |
  273|     49|    if (inh_flags & X509_VP_FLAG_DEFAULT)
  274|      0|        to_default = 1;
  275|     49|    else
  276|     49|        to_default = 0;
  277|       |
  278|     49|    if (inh_flags & X509_VP_FLAG_OVERWRITE)
  279|      0|        to_overwrite = 1;
  280|     49|    else
  281|     49|        to_overwrite = 0;
  282|       |
  283|     49|    x509_verify_param_copy(purpose, 0);
  284|     49|    x509_verify_param_copy(trust, 0);
  285|     49|    x509_verify_param_copy(depth, -1);
  286|       |
  287|       |    /* If overwrite or check time not set, copy across */
  288|       |
  289|     49|    if (to_overwrite || !(dest->flags & X509_V_FLAG_USE_CHECK_TIME)) {
  290|     49|        dest->check_time = src->check_time;
  291|     49|        dest->flags &= ~X509_V_FLAG_USE_CHECK_TIME;
  292|       |        /* Don't need to copy flag: that is done below */
  293|     49|    }
  294|       |
  295|     49|    if (inh_flags & X509_VP_FLAG_RESET_FLAGS)
  296|      0|        dest->flags = 0;
  297|       |
  298|     49|    dest->flags |= src->flags;
  299|       |
  300|     49|    if (test_x509_verify_param_copy(policies, NULL)) {
  301|      0|        if (!X509_VERIFY_PARAM_set1_policies(dest, src->policies))
  302|      0|            return 0;
  303|      0|    }
  304|       |
  305|       |    /* Copy the host flags if and only if we're copying the host list */
  306|     49|    if (test_x509_verify_param_copy_id(hosts, NULL)) {
  307|      0|        if (dest->id->hosts) {
  308|      0|            string_stack_free(dest->id->hosts);
  309|      0|            dest->id->hosts = NULL;
  310|      0|        }
  311|      0|        if (id->hosts) {
  312|      0|            dest->id->hosts =
  313|      0|                sk_OPENSSL_STRING_deep_copy(id->hosts, str_copy, str_free);
  314|      0|            if (dest->id->hosts == NULL)
  315|      0|                return 0;
  316|      0|            dest->id->hostflags = id->hostflags;
  317|      0|        }
  318|      0|    }
  319|       |
  320|     49|    if (test_x509_verify_param_copy_id(email, NULL)) {
  321|      0|        if (!X509_VERIFY_PARAM_set1_email(dest, id->email, id->emaillen))
  322|      0|            return 0;
  323|      0|    }
  324|       |
  325|     49|    if (test_x509_verify_param_copy_id(ip, NULL)) {
  326|      0|        if (!X509_VERIFY_PARAM_set1_ip(dest, id->ip, id->iplen))
  327|      0|            return 0;
  328|      0|    }
  329|       |
  330|     49|    return 1;
  331|     49|}
X509_VERIFY_PARAM_set_flags:
  379|     98|{
  380|     98|    param->flags |= flags;
  381|     98|    if (flags & X509_V_FLAG_POLICY_MASK)
  382|      0|        param->flags |= X509_V_FLAG_POLICY_CHECK;
  383|     98|    return 1;
  384|     98|}
x509_vpm.c:x509_verify_param_zero:
  134|    294|{
  135|    294|    X509_VERIFY_PARAM_ID *paramid;
  136|    294|    if (!param)
  137|      0|        return;
  138|    294|    param->name = NULL;
  139|    294|    param->purpose = 0;
  140|    294|    param->trust = 0;
  141|       |    /*
  142|       |     * param->inh_flags = X509_VP_FLAG_DEFAULT;
  143|       |     */
  144|    294|    param->inh_flags = 0;
  145|    294|    param->flags = 0;
  146|    294|    param->depth = -1;
  147|    294|    if (param->policies) {
  148|      0|        sk_ASN1_OBJECT_pop_free(param->policies, ASN1_OBJECT_free);
  149|      0|        param->policies = NULL;
  150|      0|    }
  151|    294|    paramid = param->id;
  152|    294|    if (paramid->hosts) {
  153|      0|        string_stack_free(paramid->hosts);
  154|      0|        paramid->hosts = NULL;
  155|      0|    }
  156|    294|    if (paramid->peername)
  157|      0|        OPENSSL_free(paramid->peername);
  158|    294|    paramid->peername = NULL;
  159|    294|    if (paramid->email) {
  160|      0|        OPENSSL_free(paramid->email);
  161|      0|        paramid->email = NULL;
  162|      0|        paramid->emaillen = 0;
  163|      0|    }
  164|    294|    if (paramid->ip) {
  165|      0|        OPENSSL_free(paramid->ip);
  166|      0|        paramid->ip = NULL;
  167|      0|        paramid->iplen = 0;
  168|      0|    }
  169|    294|}

GENERAL_NAMES_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }
CRL_DIST_POINTS_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }
AUTHORITY_KEYID_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }
NAME_CONSTRAINTS_free:
  852|  6.27k|        { \
  853|  6.27k|                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
  854|  6.27k|        }

policy_cache_free:
  220|  6.27k|{
  221|  6.27k|    if (!cache)
  222|  6.27k|        return;
  223|      0|    if (cache->anyPolicy)
  224|      0|        policy_data_free(cache->anyPolicy);
  225|      0|    if (cache->data)
  226|      0|        sk_X509_POLICY_DATA_pop_free(cache->data, policy_data_free);
  227|      0|    OPENSSL_free(cache);
  228|      0|}

ERR_load_X509V3_strings:
  241|      1|{
  242|      1|#ifndef OPENSSL_NO_ERR
  243|       |
  244|      1|    if (ERR_func_error_string(X509V3_str_functs[0].error) == NULL) {
  245|      1|        ERR_load_strings(0, X509V3_str_functs);
  246|      1|        ERR_load_strings(0, X509V3_str_reasons);
  247|      1|    }
  248|      1|#endif
  249|      1|}

ERR_load_GOST_strings:
  183|      1|{
  184|      1|    if (GOST_lib_error_code == 0)
  185|      1|        GOST_lib_error_code = ERR_get_next_error_library();
  186|       |
  187|      1|    if (GOST_error_init) {
  188|      1|        GOST_error_init = 0;
  189|      1|#ifndef OPENSSL_NO_ERR
  190|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_functs);
  191|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_reasons);
  192|      1|#endif
  193|       |
  194|       |#ifdef GOST_LIB_NAME
  195|       |        GOST_lib_name->error = ERR_PACK(GOST_lib_error_code, 0, 0);
  196|       |        ERR_load_strings(0, GOST_lib_name);
  197|       |#endif
  198|      1|    }
  199|      1|}

register_ameth_gost:
  912|      3|{
  913|      3|    *ameth = EVP_PKEY_asn1_new(nid, ASN1_PKEY_SIGPARAM_NULL, pemstr, info);
  914|      3|    if (!*ameth)
  915|      0|        return 0;
  916|      3|    switch (nid) {
  917|      1|    case NID_id_GostR3410_94:
  918|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost94);
  919|      1|        EVP_PKEY_asn1_set_private(*ameth,
  920|      1|                                  priv_decode_gost, priv_encode_gost,
  921|      1|                                  priv_print_gost94);
  922|       |
  923|      1|        EVP_PKEY_asn1_set_param(*ameth,
  924|      1|                                gost94_param_decode, gost94_param_encode,
  925|      1|                                param_missing_gost94, param_copy_gost94,
  926|      1|                                param_cmp_gost94, param_print_gost94);
  927|      1|        EVP_PKEY_asn1_set_public(*ameth,
  928|      1|                                 pub_decode_gost94, pub_encode_gost94,
  929|      1|                                 pub_cmp_gost94, pub_print_gost94,
  930|      1|                                 pkey_size_gost, pkey_bits_gost);
  931|       |
  932|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  933|      1|        break;
  934|      1|    case NID_id_GostR3410_2001:
  935|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost01);
  936|      1|        EVP_PKEY_asn1_set_private(*ameth,
  937|      1|                                  priv_decode_gost, priv_encode_gost,
  938|      1|                                  priv_print_gost01);
  939|       |
  940|      1|        EVP_PKEY_asn1_set_param(*ameth,
  941|      1|                                gost2001_param_decode, gost2001_param_encode,
  942|      1|                                param_missing_gost01, param_copy_gost01,
  943|      1|                                param_cmp_gost01, param_print_gost01);
  944|      1|        EVP_PKEY_asn1_set_public(*ameth,
  945|      1|                                 pub_decode_gost01, pub_encode_gost01,
  946|      1|                                 pub_cmp_gost01, pub_print_gost01,
  947|      1|                                 pkey_size_gost, pkey_bits_gost);
  948|       |
  949|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  950|      1|        break;
  951|      1|    case NID_id_Gost28147_89_MAC:
  952|      1|        EVP_PKEY_asn1_set_free(*ameth, mackey_free_gost);
  953|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, mac_ctrl_gost);
  954|      1|        break;
  955|      3|    }
  956|      3|    return 1;
  957|      3|}

ENGINE_load_gost:
  270|      1|{
  271|      1|    ENGINE *toadd;
  272|      1|    if (pmeth_GostR3410_94)
  273|      0|        return;
  274|      1|    toadd = engine_gost();
  275|      1|    if (!toadd)
  276|      0|        return;
  277|      1|    ENGINE_add(toadd);
  278|      1|    ENGINE_free(toadd);
  279|      1|    ERR_clear_error();
  280|      1|}
gost_eng.c:engine_gost:
  258|      1|{
  259|      1|    ENGINE *ret = ENGINE_new();
  260|      1|    if (!ret)
  261|      0|        return NULL;
  262|      1|    if (!bind_gost(ret, engine_gost_id)) {
  263|      0|        ENGINE_free(ret);
  264|      0|        return NULL;
  265|      0|    }
  266|      1|    return ret;
  267|      1|}
gost_eng.c:bind_gost:
   75|      1|{
   76|      1|    int ret = 0;
   77|      1|    if (id && strcmp(id, engine_gost_id))
   78|      0|        return 0;
   79|      1|    if (ameth_GostR3410_94) {
   80|      0|        printf("GOST engine already loaded\n");
   81|      0|        goto end;
   82|      0|    }
   83|       |
   84|      1|    if (!ENGINE_set_id(e, engine_gost_id)) {
   85|      0|        printf("ENGINE_set_id failed\n");
   86|      0|        goto end;
   87|      0|    }
   88|      1|    if (!ENGINE_set_name(e, engine_gost_name)) {
   89|      0|        printf("ENGINE_set_name failed\n");
   90|      0|        goto end;
   91|      0|    }
   92|      1|    if (!ENGINE_set_digests(e, gost_digests)) {
   93|      0|        printf("ENGINE_set_digests failed\n");
   94|      0|        goto end;
   95|      0|    }
   96|      1|    if (!ENGINE_set_ciphers(e, gost_ciphers)) {
   97|      0|        printf("ENGINE_set_ciphers failed\n");
   98|      0|        goto end;
   99|      0|    }
  100|      1|    if (!ENGINE_set_pkey_meths(e, gost_pkey_meths)) {
  101|      0|        printf("ENGINE_set_pkey_meths failed\n");
  102|      0|        goto end;
  103|      0|    }
  104|      1|    if (!ENGINE_set_pkey_asn1_meths(e, gost_pkey_asn1_meths)) {
  105|      0|        printf("ENGINE_set_pkey_asn1_meths failed\n");
  106|      0|        goto end;
  107|      0|    }
  108|       |    /* Control function and commands */
  109|      1|    if (!ENGINE_set_cmd_defns(e, gost_cmds)) {
  110|      0|        fprintf(stderr, "ENGINE_set_cmd_defns failed\n");
  111|      0|        goto end;
  112|      0|    }
  113|      1|    if (!ENGINE_set_ctrl_function(e, gost_control_func)) {
  114|      0|        fprintf(stderr, "ENGINE_set_ctrl_func failed\n");
  115|      0|        goto end;
  116|      0|    }
  117|      1|    if (!ENGINE_set_destroy_function(e, gost_engine_destroy)
  118|      1|        || !ENGINE_set_init_function(e, gost_engine_init)
  119|      1|        || !ENGINE_set_finish_function(e, gost_engine_finish)) {
  120|      0|        goto end;
  121|      0|    }
  122|       |
  123|      1|    if (!register_ameth_gost
  124|      1|        (NID_id_GostR3410_94, &ameth_GostR3410_94, "GOST94",
  125|      1|         "GOST R 34.10-94"))
  126|      0|        goto end;
  127|      1|    if (!register_ameth_gost
  128|      1|        (NID_id_GostR3410_2001, &ameth_GostR3410_2001, "GOST2001",
  129|      1|         "GOST R 34.10-2001"))
  130|      0|        goto end;
  131|      1|    if (!register_ameth_gost(NID_id_Gost28147_89_MAC, &ameth_Gost28147_MAC,
  132|      1|                             "GOST-MAC", "GOST 28147-89 MAC"))
  133|      0|        goto end;
  134|       |
  135|      1|    if (!register_pmeth_gost(NID_id_GostR3410_94, &pmeth_GostR3410_94, 0))
  136|      0|        goto end;
  137|      1|    if (!register_pmeth_gost(NID_id_GostR3410_2001, &pmeth_GostR3410_2001, 0))
  138|      0|        goto end;
  139|      1|    if (!register_pmeth_gost
  140|      1|        (NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))
  141|      0|        goto end;
  142|      1|    if (!ENGINE_register_ciphers(e)
  143|      1|        || !ENGINE_register_digests(e)
  144|      1|        || !ENGINE_register_pkey_meths(e)
  145|       |        /* These two actually should go in LIST_ADD command */
  146|      1|        || !EVP_add_cipher(&cipher_gost)
  147|      1|        || !EVP_add_cipher(&cipher_gost_cpacnt)
  148|      1|        || !EVP_add_digest(&digest_gost)
  149|      1|        || !EVP_add_digest(&imit_gost_cpa)
  150|      1|        ) {
  151|      0|        goto end;
  152|      0|    }
  153|       |
  154|      1|    ERR_load_GOST_strings();
  155|      1|    ret = 1;
  156|      1| end:
  157|      1|    return ret;
  158|      1|}
gost_eng.c:gost_digests:
  166|      2|{
  167|      2|    int ok = 1;
  168|      2|    if (!digest) {
  169|      2|        *nids = gost_digest_nids;
  170|      2|        return 2;
  171|      2|    }
  172|       |    /*
  173|       |     * printf("Digest no %d requested\n",nid);
  174|       |     */
  175|      0|    if (nid == NID_id_GostR3411_94) {
  176|      0|        *digest = &digest_gost;
  177|      0|    } else if (nid == NID_id_Gost28147_89_MAC) {
  178|      0|        *digest = &imit_gost_cpa;
  179|      0|    } else {
  180|      0|        ok = 0;
  181|      0|        *digest = NULL;
  182|      0|    }
  183|      0|    return ok;
  184|      2|}
gost_eng.c:gost_ciphers:
  188|      2|{
  189|      2|    int ok = 1;
  190|      2|    if (!cipher) {
  191|      2|        *nids = gost_cipher_nids;
  192|      2|        return 2;               /* two ciphers are supported */
  193|      2|    }
  194|       |
  195|      0|    if (nid == NID_id_Gost28147_89) {
  196|      0|        *cipher = &cipher_gost;
  197|      0|    } else if (nid == NID_gost89_cnt) {
  198|      0|        *cipher = &cipher_gost_cpacnt;
  199|      0|    } else {
  200|      0|        ok = 0;
  201|      0|        *cipher = NULL;
  202|      0|    }
  203|      0|    return ok;
  204|      2|}
gost_eng.c:gost_pkey_meths:
  208|      2|{
  209|      2|    if (!pmeth) {
  210|      2|        *nids = gost_pkey_meth_nids;
  211|      2|        return 3;
  212|      2|    }
  213|       |
  214|      0|    switch (nid) {
  215|      0|    case NID_id_GostR3410_94:
  216|      0|        *pmeth = pmeth_GostR3410_94;
  217|      0|        return 1;
  218|      0|    case NID_id_GostR3410_2001:
  219|      0|        *pmeth = pmeth_GostR3410_2001;
  220|      0|        return 1;
  221|      0|    case NID_id_Gost28147_89_MAC:
  222|      0|        *pmeth = pmeth_Gost28147_MAC;
  223|      0|        return 1;
  224|      0|    default:;
  225|      0|    }
  226|       |
  227|      0|    *pmeth = NULL;
  228|      0|    return 0;
  229|      0|}

register_pmeth_gost:
  567|      3|{
  568|      3|    *pmeth = EVP_PKEY_meth_new(id, flags);
  569|      3|    if (!*pmeth)
  570|      0|        return 0;
  571|       |
  572|      3|    switch (id) {
  573|      1|    case NID_id_GostR3410_94:
  574|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl94_str);
  575|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost94cp_keygen);
  576|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost94_cp_sign);
  577|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost94_cp_verify);
  578|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  579|      1|                                  pkey_gost_encrypt_init,
  580|      1|                                  pkey_GOST94cp_encrypt);
  581|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST94cp_decrypt);
  582|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  583|      1|                                 pkey_gost_derive_init, pkey_gost94_derive);
  584|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  585|      1|                                   pkey_gost94_paramgen);
  586|      1|        break;
  587|      1|    case NID_id_GostR3410_2001:
  588|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl01_str);
  589|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost01_cp_sign);
  590|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost01_cp_verify);
  591|       |
  592|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost01cp_keygen);
  593|       |
  594|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  595|      1|                                  pkey_gost_encrypt_init,
  596|      1|                                  pkey_GOST01cp_encrypt);
  597|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST01cp_decrypt);
  598|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  599|      1|                                 pkey_gost_derive_init, pkey_gost2001_derive);
  600|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  601|      1|                                   pkey_gost01_paramgen);
  602|      1|        break;
  603|      1|    case NID_id_Gost28147_89_MAC:
  604|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_mac_ctrl,
  605|      1|                               pkey_gost_mac_ctrl_str);
  606|      1|        EVP_PKEY_meth_set_signctx(*pmeth, pkey_gost_mac_signctx_init,
  607|      1|                                  pkey_gost_mac_signctx);
  608|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost_mac_keygen);
  609|      1|        EVP_PKEY_meth_set_init(*pmeth, pkey_gost_mac_init);
  610|      1|        EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_mac_cleanup);
  611|      1|        EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_mac_copy);
  612|      1|        return 1;
  613|      0|    default:                   /* Unsupported method */
  614|      0|        return 0;
  615|      3|    }
  616|      2|    EVP_PKEY_meth_set_init(*pmeth, pkey_gost_init);
  617|      2|    EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_cleanup);
  618|       |
  619|      2|    EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_copy);
  620|       |    /*
  621|       |     * FIXME derive etc...
  622|       |     */
  623|       |
  624|      2|    return 1;
  625|      3|}

ENGINE_load_4758cca:
  264|      1|{
  265|      1|    ENGINE *e_4758 = engine_4758_cca();
  266|      1|    if (!e_4758)
  267|      0|        return;
  268|      1|    ENGINE_add(e_4758);
  269|      1|    ENGINE_free(e_4758);
  270|      1|    ERR_clear_error();
  271|      1|}
e_4758cca.c:engine_4758_cca:
  252|      1|{
  253|      1|    ENGINE *ret = ENGINE_new();
  254|      1|    if (!ret)
  255|      0|        return NULL;
  256|      1|    if (!bind_helper(ret)) {
  257|      0|        ENGINE_free(ret);
  258|      0|        return NULL;
  259|      0|    }
  260|      1|    return ret;
  261|      1|}
e_4758cca.c:bind_helper:
  228|      1|{
  229|      1|    if (!ENGINE_set_id(e, engine_4758_cca_id) ||
  230|      1|        !ENGINE_set_name(e, engine_4758_cca_name) ||
  231|      1|#  ifndef OPENSSL_NO_RSA
  232|      1|        !ENGINE_set_RSA(e, &ibm_4758_cca_rsa) ||
  233|      1|#  endif
  234|      1|        !ENGINE_set_RAND(e, &ibm_4758_cca_rand) ||
  235|      1|        !ENGINE_set_destroy_function(e, ibm_4758_cca_destroy) ||
  236|      1|        !ENGINE_set_init_function(e, ibm_4758_cca_init) ||
  237|      1|        !ENGINE_set_finish_function(e, ibm_4758_cca_finish) ||
  238|      1|        !ENGINE_set_ctrl_function(e, ibm_4758_cca_ctrl) ||
  239|      1|#  ifndef OPENSSL_NO_RSA
  240|      1|        !ENGINE_set_load_privkey_function(e, ibm_4758_load_privkey) ||
  241|      1|        !ENGINE_set_load_pubkey_function(e, ibm_4758_load_pubkey) ||
  242|      1|#  endif
  243|      1|        !ENGINE_set_cmd_defns(e, cca4758_cmd_defns))
  244|      0|        return 0;
  245|       |    /* Ensure the error handling is set up */
  246|      1|    ERR_load_CCA4758_strings();
  247|      1|    return 1;
  248|      1|}
e_4758cca.c:ibm_4758_cca_init:
  282|      1|{
  283|      1|    if (dso) {
  284|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_ALREADY_LOADED);
  285|      0|        goto err;
  286|      0|    }
  287|       |
  288|      1|    dso = DSO_load(NULL, get_CCA4758_LIB_NAME(), NULL, 0);
  289|      1|    if (!dso) {
  290|      1|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  291|      1|        goto err;
  292|      1|    }
  293|      0|#  ifndef OPENSSL_NO_RSA
  294|      0|    if (!(keyRecordRead = (F_KEYRECORDREAD)
  295|      0|          DSO_bind_func(dso, n_keyRecordRead)) ||
  296|      0|        !(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  297|      0|          DSO_bind_func(dso, n_randomNumberGenerate)) ||
  298|      0|        !(digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE)
  299|      0|          DSO_bind_func(dso, n_digitalSignatureGenerate)) ||
  300|      0|        !(digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)
  301|      0|          DSO_bind_func(dso, n_digitalSignatureVerify)) ||
  302|      0|        !(publicKeyExtract = (F_PUBLICKEYEXTRACT)
  303|      0|          DSO_bind_func(dso, n_publicKeyExtract)) ||
  304|      0|        !(pkaEncrypt = (F_PKAENCRYPT)
  305|      0|          DSO_bind_func(dso, n_pkaEncrypt)) || !(pkaDecrypt = (F_PKADECRYPT)
  306|      0|                                                 DSO_bind_func(dso,
  307|      0|                                                               n_pkaDecrypt)))
  308|      0|    {
  309|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  310|      0|        goto err;
  311|      0|    }
  312|       |#  else
  313|       |    if (!(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  314|       |          DSO_bind_func(dso, n_randomNumberGenerate))) {
  315|       |        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  316|       |        goto err;
  317|       |    }
  318|       |#  endif
  319|       |
  320|      0|#  ifndef OPENSSL_NO_RSA
  321|      0|    hndidx = RSA_get_ex_new_index(0, "IBM 4758 CCA RSA key handle",
  322|      0|                                  NULL, NULL, cca_ex_free);
  323|      0|#  endif
  324|       |
  325|      0|    return 1;
  326|      1| err:
  327|      1|    if (dso)
  328|      0|        DSO_free(dso);
  329|      1|    dso = NULL;
  330|       |
  331|      1|#  ifndef OPENSSL_NO_RSA
  332|      1|    keyRecordRead = (F_KEYRECORDREAD) 0;
  333|      1|    digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE) 0;
  334|      1|    digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)0;
  335|      1|    publicKeyExtract = (F_PUBLICKEYEXTRACT)0;
  336|      1|    pkaEncrypt = (F_PKAENCRYPT) 0;
  337|      1|    pkaDecrypt = (F_PKADECRYPT) 0;
  338|      1|#  endif
  339|      1|    randomNumberGenerate = (F_RANDOMNUMBERGENERATE) 0;
  340|      1|    return 0;
  341|      0|}
e_4758cca.c:get_CCA4758_LIB_NAME:
  142|      1|{
  143|      1|    if (CCA4758_LIB_NAME)
  144|      0|        return CCA4758_LIB_NAME;
  145|      1|    return CCA_LIB_NAME;
  146|      1|}

e_4758cca.c:ERR_CCA4758_error:
  149|      1|{
  150|      1|    if (CCA4758_lib_error_code == 0)
  151|      0|        CCA4758_lib_error_code = ERR_get_next_error_library();
  152|      1|    ERR_PUT_error(CCA4758_lib_error_code, function, reason, file, line);
  153|      1|}
e_4758cca.c:ERR_load_CCA4758_strings:
  115|      1|{
  116|      1|    if (CCA4758_lib_error_code == 0)
  117|      1|        CCA4758_lib_error_code = ERR_get_next_error_library();
  118|       |
  119|      1|    if (CCA4758_error_init) {
  120|      1|        CCA4758_error_init = 0;
  121|      1|#ifndef OPENSSL_NO_ERR
  122|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_functs);
  123|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_reasons);
  124|      1|#endif
  125|       |
  126|       |#ifdef CCA4758_LIB_NAME
  127|       |        CCA4758_lib_name->error = ERR_PACK(CCA4758_lib_error_code, 0, 0);
  128|       |        ERR_load_strings(0, CCA4758_lib_name);
  129|       |#endif
  130|      1|    }
  131|      1|}

ENGINE_load_aep:
  373|      1|{
  374|       |    /* Copied from eng_[openssl|dyn].c */
  375|      1|    ENGINE *toadd = engine_aep();
  376|      1|    if (!toadd)
  377|      0|        return;
  378|      1|    ENGINE_add(toadd);
  379|      1|    ENGINE_free(toadd);
  380|      1|    ERR_clear_error();
  381|      1|}
e_aep.c:engine_aep:
  361|      1|{
  362|      1|    ENGINE *ret = ENGINE_new();
  363|      1|    if (!ret)
  364|      0|        return NULL;
  365|      1|    if (!bind_aep(ret)) {
  366|      0|        ENGINE_free(ret);
  367|      0|        return NULL;
  368|      0|    }
  369|      1|    return ret;
  370|      1|}
e_aep.c:bind_aep:
  271|      1|{
  272|      1|#  ifndef OPENSSL_NO_RSA
  273|      1|    const RSA_METHOD *meth1;
  274|      1|#  endif
  275|      1|#  ifndef OPENSSL_NO_DSA
  276|      1|    const DSA_METHOD *meth2;
  277|      1|#  endif
  278|      1|#  ifndef OPENSSL_NO_DH
  279|      1|    const DH_METHOD *meth3;
  280|      1|#  endif
  281|       |
  282|      1|    if (!ENGINE_set_id(e, engine_aep_id) ||
  283|      1|        !ENGINE_set_name(e, engine_aep_name) ||
  284|      1|#  ifndef OPENSSL_NO_RSA
  285|      1|        !ENGINE_set_RSA(e, &aep_rsa) ||
  286|      1|#  endif
  287|      1|#  ifndef OPENSSL_NO_DSA
  288|      1|        !ENGINE_set_DSA(e, &aep_dsa) ||
  289|      1|#  endif
  290|      1|#  ifndef OPENSSL_NO_DH
  291|      1|        !ENGINE_set_DH(e, &aep_dh) ||
  292|      1|#  endif
  293|       |#  ifdef AEPRAND
  294|       |        !ENGINE_set_RAND(e, &aep_random) ||
  295|       |#  endif
  296|      1|        !ENGINE_set_init_function(e, aep_init) ||
  297|      1|        !ENGINE_set_destroy_function(e, aep_destroy) ||
  298|      1|        !ENGINE_set_finish_function(e, aep_finish) ||
  299|      1|        !ENGINE_set_ctrl_function(e, aep_ctrl) ||
  300|      1|        !ENGINE_set_cmd_defns(e, aep_cmd_defns))
  301|      0|        return 0;
  302|       |
  303|      1|#  ifndef OPENSSL_NO_RSA
  304|       |    /*
  305|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  306|       |     * aep-specific mod_exp and mod_exp_crt so we use those functions. NB: We
  307|       |     * don't use ENGINE_openssl() or anything "more generic" because
  308|       |     * something like the RSAref code may not hook properly, and if you own
  309|       |     * one of these cards then you have the right to do RSA operations on it
  310|       |     * anyway!
  311|       |     */
  312|      1|    meth1 = RSA_PKCS1_SSLeay();
  313|      1|    aep_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  314|      1|    aep_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  315|      1|    aep_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  316|      1|    aep_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  317|      1|#  endif
  318|       |
  319|      1|#  ifndef OPENSSL_NO_DSA
  320|       |    /*
  321|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  322|       |     */
  323|      1|    meth2 = DSA_OpenSSL();
  324|      1|    aep_dsa.dsa_do_sign = meth2->dsa_do_sign;
  325|      1|    aep_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  326|      1|    aep_dsa.dsa_do_verify = meth2->dsa_do_verify;
  327|       |
  328|      1|    aep_dsa = *DSA_get_default_method();
  329|      1|    aep_dsa.dsa_mod_exp = aep_dsa_mod_exp;
  330|      1|    aep_dsa.bn_mod_exp = aep_mod_exp_dsa;
  331|      1|#  endif
  332|       |
  333|      1|#  ifndef OPENSSL_NO_DH
  334|       |    /* Much the same for Diffie-Hellman */
  335|      1|    meth3 = DH_OpenSSL();
  336|      1|    aep_dh.generate_key = meth3->generate_key;
  337|      1|    aep_dh.compute_key = meth3->compute_key;
  338|      1|    aep_dh.bn_mod_exp = meth3->bn_mod_exp;
  339|      1|#  endif
  340|       |
  341|       |    /* Ensure the aep error handling is set up */
  342|      1|    ERR_load_AEPHK_strings();
  343|       |
  344|      1|    return 1;
  345|      1|}

e_aep.c:ERR_load_AEPHK_strings:
  121|      1|{
  122|      1|    if (AEPHK_lib_error_code == 0)
  123|      1|        AEPHK_lib_error_code = ERR_get_next_error_library();
  124|       |
  125|      1|    if (AEPHK_error_init) {
  126|      1|        AEPHK_error_init = 0;
  127|      1|#ifndef OPENSSL_NO_ERR
  128|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_functs);
  129|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_reasons);
  130|      1|#endif
  131|       |
  132|       |#ifdef AEPHK_LIB_NAME
  133|       |        AEPHK_lib_name->error = ERR_PACK(AEPHK_lib_error_code, 0, 0);
  134|       |        ERR_load_strings(0, AEPHK_lib_name);
  135|       |#endif
  136|      1|    }
  137|      1|}

ENGINE_load_atalla:
  279|      1|{
  280|       |    /* Copied from eng_[openssl|dyn].c */
  281|      1|    ENGINE *toadd = engine_atalla();
  282|      1|    if (!toadd)
  283|      0|        return;
  284|      1|    ENGINE_add(toadd);
  285|      1|    ENGINE_free(toadd);
  286|      1|    ERR_clear_error();
  287|      1|}
e_atalla.c:engine_atalla:
  267|      1|{
  268|      1|    ENGINE *ret = ENGINE_new();
  269|      1|    if (!ret)
  270|      0|        return NULL;
  271|      1|    if (!bind_helper(ret)) {
  272|      0|        ENGINE_free(ret);
  273|      0|        return NULL;
  274|      0|    }
  275|      1|    return ret;
  276|      1|}
e_atalla.c:bind_helper:
  199|      1|{
  200|      1|#  ifndef OPENSSL_NO_RSA
  201|      1|    const RSA_METHOD *meth1;
  202|      1|#  endif
  203|      1|#  ifndef OPENSSL_NO_DSA
  204|      1|    const DSA_METHOD *meth2;
  205|      1|#  endif
  206|      1|#  ifndef OPENSSL_NO_DH
  207|      1|    const DH_METHOD *meth3;
  208|      1|#  endif
  209|      1|    if (!ENGINE_set_id(e, engine_atalla_id) ||
  210|      1|        !ENGINE_set_name(e, engine_atalla_name) ||
  211|      1|#  ifndef OPENSSL_NO_RSA
  212|      1|        !ENGINE_set_RSA(e, &atalla_rsa) ||
  213|      1|#  endif
  214|      1|#  ifndef OPENSSL_NO_DSA
  215|      1|        !ENGINE_set_DSA(e, &atalla_dsa) ||
  216|      1|#  endif
  217|      1|#  ifndef OPENSSL_NO_DH
  218|      1|        !ENGINE_set_DH(e, &atalla_dh) ||
  219|      1|#  endif
  220|      1|        !ENGINE_set_destroy_function(e, atalla_destroy) ||
  221|      1|        !ENGINE_set_init_function(e, atalla_init) ||
  222|      1|        !ENGINE_set_finish_function(e, atalla_finish) ||
  223|      1|        !ENGINE_set_ctrl_function(e, atalla_ctrl) ||
  224|      1|        !ENGINE_set_cmd_defns(e, atalla_cmd_defns))
  225|      0|        return 0;
  226|       |
  227|      1|#  ifndef OPENSSL_NO_RSA
  228|       |    /*
  229|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  230|       |     * atalla-specific mod_exp and mod_exp_crt so we use those functions. NB:
  231|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  232|       |     * something like the RSAref code may not hook properly, and if you own
  233|       |     * one of these cards then you have the right to do RSA operations on it
  234|       |     * anyway!
  235|       |     */
  236|      1|    meth1 = RSA_PKCS1_SSLeay();
  237|      1|    atalla_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  238|      1|    atalla_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  239|      1|    atalla_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  240|      1|    atalla_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  241|      1|#  endif
  242|       |
  243|      1|#  ifndef OPENSSL_NO_DSA
  244|       |    /*
  245|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  246|       |     */
  247|      1|    meth2 = DSA_OpenSSL();
  248|      1|    atalla_dsa.dsa_do_sign = meth2->dsa_do_sign;
  249|      1|    atalla_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  250|      1|    atalla_dsa.dsa_do_verify = meth2->dsa_do_verify;
  251|      1|#  endif
  252|       |
  253|      1|#  ifndef OPENSSL_NO_DH
  254|       |    /* Much the same for Diffie-Hellman */
  255|      1|    meth3 = DH_OpenSSL();
  256|      1|    atalla_dh.generate_key = meth3->generate_key;
  257|      1|    atalla_dh.compute_key = meth3->compute_key;
  258|      1|#  endif
  259|       |
  260|       |    /* Ensure the atalla error handling is set up */
  261|      1|    ERR_load_ATALLA_strings();
  262|      1|    return 1;
  263|      1|}

e_atalla.c:ERR_load_ATALLA_strings:
  107|      1|{
  108|      1|    if (ATALLA_lib_error_code == 0)
  109|      1|        ATALLA_lib_error_code = ERR_get_next_error_library();
  110|       |
  111|      1|    if (ATALLA_error_init) {
  112|      1|        ATALLA_error_init = 0;
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_functs);
  115|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_reasons);
  116|      1|#endif
  117|       |
  118|      1|#ifdef ATALLA_LIB_NAME
  119|      1|        ATALLA_lib_name->error = ERR_PACK(ATALLA_lib_error_code, 0, 0);
  120|      1|        ERR_load_strings(0, ATALLA_lib_name);
  121|      1|#endif
  122|      1|    }
  123|      1|}

ENGINE_load_chil:
  419|      1|{
  420|       |    /* Copied from eng_[openssl|dyn].c */
  421|      1|    ENGINE *toadd = engine_chil();
  422|      1|    if (!toadd)
  423|      0|        return;
  424|      1|    ENGINE_add(toadd);
  425|      1|    ENGINE_free(toadd);
  426|      1|    ERR_clear_error();
  427|      1|}
e_chil.c:engine_chil:
  407|      1|{
  408|      1|    ENGINE *ret = ENGINE_new();
  409|      1|    if (!ret)
  410|      0|        return NULL;
  411|      1|    if (!bind_helper(ret)) {
  412|      0|        ENGINE_free(ret);
  413|      0|        return NULL;
  414|      0|    }
  415|      1|    return ret;
  416|      1|}
e_chil.c:bind_helper:
  352|      1|{
  353|      1|#  ifndef OPENSSL_NO_RSA
  354|      1|    const RSA_METHOD *meth1;
  355|      1|#  endif
  356|      1|#  ifndef OPENSSL_NO_DH
  357|      1|    const DH_METHOD *meth2;
  358|      1|#  endif
  359|      1|    if (!ENGINE_set_id(e, engine_hwcrhk_id) ||
  360|      1|        !ENGINE_set_name(e, engine_hwcrhk_name) ||
  361|      1|#  ifndef OPENSSL_NO_RSA
  362|      1|        !ENGINE_set_RSA(e, &hwcrhk_rsa) ||
  363|      1|#  endif
  364|      1|#  ifndef OPENSSL_NO_DH
  365|      1|        !ENGINE_set_DH(e, &hwcrhk_dh) ||
  366|      1|#  endif
  367|      1|        !ENGINE_set_RAND(e, &hwcrhk_rand) ||
  368|      1|        !ENGINE_set_destroy_function(e, hwcrhk_destroy) ||
  369|      1|        !ENGINE_set_init_function(e, hwcrhk_init) ||
  370|      1|        !ENGINE_set_finish_function(e, hwcrhk_finish) ||
  371|      1|        !ENGINE_set_ctrl_function(e, hwcrhk_ctrl) ||
  372|      1|        !ENGINE_set_load_privkey_function(e, hwcrhk_load_privkey) ||
  373|      1|        !ENGINE_set_load_pubkey_function(e, hwcrhk_load_pubkey) ||
  374|      1|        !ENGINE_set_cmd_defns(e, hwcrhk_cmd_defns))
  375|      0|        return 0;
  376|       |
  377|      1|#  ifndef OPENSSL_NO_RSA
  378|       |    /*
  379|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  380|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  381|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  382|       |     * something like the RSAref code may not hook properly, and if you own
  383|       |     * one of these cards then you have the right to do RSA operations on it
  384|       |     * anyway!
  385|       |     */
  386|      1|    meth1 = RSA_PKCS1_SSLeay();
  387|      1|    hwcrhk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  388|      1|    hwcrhk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  389|      1|    hwcrhk_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  390|      1|    hwcrhk_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  391|      1|#  endif
  392|       |
  393|      1|#  ifndef OPENSSL_NO_DH
  394|       |    /* Much the same for Diffie-Hellman */
  395|      1|    meth2 = DH_OpenSSL();
  396|      1|    hwcrhk_dh.generate_key = meth2->generate_key;
  397|      1|    hwcrhk_dh.compute_key = meth2->compute_key;
  398|      1|#  endif
  399|       |
  400|       |    /* Ensure the hwcrhk error handling is set up */
  401|      1|    ERR_load_HWCRHK_strings();
  402|      1|    return 1;
  403|      1|}
e_chil.c:hwcrhk_init:
  536|      1|{
  537|      1|    HWCryptoHook_Init_t *p1;
  538|      1|    HWCryptoHook_Finish_t *p2;
  539|      1|    HWCryptoHook_ModExp_t *p3;
  540|      1|#  ifndef OPENSSL_NO_RSA
  541|      1|    HWCryptoHook_RSA_t *p4;
  542|      1|    HWCryptoHook_RSALoadKey_t *p5;
  543|      1|    HWCryptoHook_RSAGetPublicKey_t *p6;
  544|      1|    HWCryptoHook_RSAUnloadKey_t *p7;
  545|      1|#  endif
  546|      1|    HWCryptoHook_RandomBytes_t *p8;
  547|      1|    HWCryptoHook_ModExpCRT_t *p9;
  548|       |
  549|      1|    if (hwcrhk_dso != NULL) {
  550|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_ALREADY_LOADED);
  551|      0|        goto err;
  552|      0|    }
  553|       |    /* Attempt to load libnfhwcrhk.so/nfhwcrhk.dll/whatever. */
  554|      1|    hwcrhk_dso = DSO_load(NULL, get_HWCRHK_LIBNAME(), NULL, 0);
  555|      1|    if (hwcrhk_dso == NULL) {
  556|      1|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  557|      1|        goto err;
  558|      1|    }
  559|      0|    if (!(p1 = (HWCryptoHook_Init_t *)
  560|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Init)) ||
  561|      0|        !(p2 = (HWCryptoHook_Finish_t *)
  562|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Finish)) ||
  563|      0|        !(p3 = (HWCryptoHook_ModExp_t *)
  564|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExp)) ||
  565|      0|#  ifndef OPENSSL_NO_RSA
  566|      0|        !(p4 = (HWCryptoHook_RSA_t *)
  567|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSA)) ||
  568|      0|        !(p5 = (HWCryptoHook_RSALoadKey_t *)
  569|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSALoadKey)) ||
  570|      0|        !(p6 = (HWCryptoHook_RSAGetPublicKey_t *)
  571|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAGetPublicKey)) ||
  572|      0|        !(p7 = (HWCryptoHook_RSAUnloadKey_t *)
  573|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAUnloadKey)) ||
  574|      0|#  endif
  575|      0|        !(p8 = (HWCryptoHook_RandomBytes_t *)
  576|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RandomBytes)) ||
  577|      0|        !(p9 = (HWCryptoHook_ModExpCRT_t *)
  578|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExpCRT))) {
  579|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  580|      0|        goto err;
  581|      0|    }
  582|       |    /* Copy the pointers */
  583|      0|    p_hwcrhk_Init = p1;
  584|      0|    p_hwcrhk_Finish = p2;
  585|      0|    p_hwcrhk_ModExp = p3;
  586|      0|#  ifndef OPENSSL_NO_RSA
  587|      0|    p_hwcrhk_RSA = p4;
  588|      0|    p_hwcrhk_RSALoadKey = p5;
  589|      0|    p_hwcrhk_RSAGetPublicKey = p6;
  590|      0|    p_hwcrhk_RSAUnloadKey = p7;
  591|      0|#  endif
  592|      0|    p_hwcrhk_RandomBytes = p8;
  593|      0|    p_hwcrhk_ModExpCRT = p9;
  594|       |
  595|       |    /*
  596|       |     * Check if the application decided to support dynamic locks, and if it
  597|       |     * does, use them.
  598|       |     */
  599|      0|    if (disable_mutex_callbacks == 0) {
  600|      0|        if (CRYPTO_get_dynlock_create_callback() != NULL &&
  601|      0|            CRYPTO_get_dynlock_lock_callback() != NULL &&
  602|      0|            CRYPTO_get_dynlock_destroy_callback() != NULL) {
  603|      0|            hwcrhk_globals.mutex_init = hwcrhk_mutex_init;
  604|      0|            hwcrhk_globals.mutex_acquire = hwcrhk_mutex_lock;
  605|      0|            hwcrhk_globals.mutex_release = hwcrhk_mutex_unlock;
  606|      0|            hwcrhk_globals.mutex_destroy = hwcrhk_mutex_destroy;
  607|      0|        }
  608|      0|    }
  609|       |
  610|       |    /*
  611|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  612|       |     */
  613|      0|    if (!get_context(&hwcrhk_context, &password_context)) {
  614|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_UNIT_FAILURE);
  615|      0|        goto err;
  616|      0|    }
  617|       |    /* Everything's fine. */
  618|      0|#  ifndef OPENSSL_NO_RSA
  619|      0|    if (hndidx_rsa == -1)
  620|      0|        hndidx_rsa = RSA_get_ex_new_index(0,
  621|      0|                                          "nFast HWCryptoHook RSA key handle",
  622|      0|                                          NULL, NULL, NULL);
  623|      0|#  endif
  624|      0|    return 1;
  625|      1| err:
  626|      1|    if (hwcrhk_dso)
  627|      0|        DSO_free(hwcrhk_dso);
  628|      1|    hwcrhk_dso = NULL;
  629|      1|    p_hwcrhk_Init = NULL;
  630|      1|    p_hwcrhk_Finish = NULL;
  631|      1|    p_hwcrhk_ModExp = NULL;
  632|      1|#  ifndef OPENSSL_NO_RSA
  633|      1|    p_hwcrhk_RSA = NULL;
  634|      1|    p_hwcrhk_RSALoadKey = NULL;
  635|      1|    p_hwcrhk_RSAGetPublicKey = NULL;
  636|      1|    p_hwcrhk_RSAUnloadKey = NULL;
  637|      1|#  endif
  638|      1|    p_hwcrhk_ModExpCRT = NULL;
  639|      1|    p_hwcrhk_RandomBytes = NULL;
  640|      1|    return 0;
  641|      0|}
e_chil.c:get_HWCRHK_LIBNAME:
  471|      1|{
  472|      1|    if (HWCRHK_LIBNAME)
  473|      0|        return HWCRHK_LIBNAME;
  474|      1|    return "nfhwcrhk";
  475|      1|}

e_chil.c:ERR_HWCRHK_error:
  153|      1|{
  154|      1|    if (HWCRHK_lib_error_code == 0)
  155|      0|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  156|      1|    ERR_PUT_error(HWCRHK_lib_error_code, function, reason, file, line);
  157|      1|}
e_chil.c:ERR_load_HWCRHK_strings:
  119|      1|{
  120|      1|    if (HWCRHK_lib_error_code == 0)
  121|      1|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  122|       |
  123|      1|    if (HWCRHK_error_init) {
  124|      1|        HWCRHK_error_init = 0;
  125|      1|#ifndef OPENSSL_NO_ERR
  126|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_functs);
  127|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_reasons);
  128|      1|#endif
  129|       |
  130|      1|#ifdef HWCRHK_LIB_NAME
  131|      1|        HWCRHK_lib_name->error = ERR_PACK(HWCRHK_lib_error_code, 0, 0);
  132|      1|        ERR_load_strings(0, HWCRHK_lib_name);
  133|      1|#endif
  134|      1|    }
  135|      1|}

ENGINE_load_cswift:
  302|      1|{
  303|       |    /* Copied from eng_[openssl|dyn].c */
  304|      1|    ENGINE *toadd = engine_cswift();
  305|      1|    if (!toadd)
  306|      0|        return;
  307|      1|    ENGINE_add(toadd);
  308|      1|    ENGINE_free(toadd);
  309|      1|    ERR_clear_error();
  310|      1|}
e_cswift.c:engine_cswift:
  290|      1|{
  291|      1|    ENGINE *ret = ENGINE_new();
  292|      1|    if (!ret)
  293|      0|        return NULL;
  294|      1|    if (!bind_helper(ret)) {
  295|      0|        ENGINE_free(ret);
  296|      0|        return NULL;
  297|      0|    }
  298|      1|    return ret;
  299|      1|}
e_cswift.c:bind_helper:
  234|      1|{
  235|      1|#  ifndef OPENSSL_NO_RSA
  236|      1|    const RSA_METHOD *meth1;
  237|      1|#  endif
  238|      1|#  ifndef OPENSSL_NO_DH
  239|      1|    const DH_METHOD *meth2;
  240|      1|#  endif
  241|      1|    if (!ENGINE_set_id(e, engine_cswift_id) ||
  242|      1|        !ENGINE_set_name(e, engine_cswift_name) ||
  243|      1|#  ifndef OPENSSL_NO_RSA
  244|      1|        !ENGINE_set_RSA(e, &cswift_rsa) ||
  245|      1|#  endif
  246|      1|#  ifndef OPENSSL_NO_DSA
  247|      1|        !ENGINE_set_DSA(e, &cswift_dsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DH
  250|      1|        !ENGINE_set_DH(e, &cswift_dh) ||
  251|      1|#  endif
  252|      1|        !ENGINE_set_RAND(e, &cswift_random) ||
  253|      1|        !ENGINE_set_destroy_function(e, cswift_destroy) ||
  254|      1|        !ENGINE_set_init_function(e, cswift_init) ||
  255|      1|        !ENGINE_set_finish_function(e, cswift_finish) ||
  256|      1|        !ENGINE_set_ctrl_function(e, cswift_ctrl) ||
  257|      1|        !ENGINE_set_cmd_defns(e, cswift_cmd_defns))
  258|      0|        return 0;
  259|       |
  260|      1|#  ifndef OPENSSL_NO_RSA
  261|       |    /*
  262|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  263|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  264|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  265|       |     * something like the RSAref code may not hook properly, and if you own
  266|       |     * one of these cards then you have the right to do RSA operations on it
  267|       |     * anyway!
  268|       |     */
  269|      1|    meth1 = RSA_PKCS1_SSLeay();
  270|      1|    cswift_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  271|      1|    cswift_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  272|      1|    cswift_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  273|      1|    cswift_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  274|      1|#  endif
  275|       |
  276|      1|#  ifndef OPENSSL_NO_DH
  277|       |    /* Much the same for Diffie-Hellman */
  278|      1|    meth2 = DH_OpenSSL();
  279|      1|    cswift_dh.generate_key = meth2->generate_key;
  280|      1|    cswift_dh.compute_key = meth2->compute_key;
  281|      1|#  endif
  282|       |
  283|       |    /* Ensure the cswift error handling is set up */
  284|      1|    ERR_load_CSWIFT_strings();
  285|      1|    return 1;
  286|      1|}
e_cswift.c:cswift_init:
  391|      1|{
  392|      1|    SW_CONTEXT_HANDLE hac;
  393|      1|    t_swAcquireAccContext *p1;
  394|      1|    t_swAttachKeyParam *p2;
  395|      1|    t_swSimpleRequest *p3;
  396|      1|    t_swReleaseAccContext *p4;
  397|       |
  398|      1|    if (cswift_dso != NULL) {
  399|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_ALREADY_LOADED);
  400|      0|        goto err;
  401|      0|    }
  402|       |    /* Attempt to load libswift.so/swift.dll/whatever. */
  403|      1|    cswift_dso = DSO_load(NULL, get_CSWIFT_LIBNAME(), NULL, 0);
  404|      1|    if (cswift_dso == NULL) {
  405|      1|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  406|      1|        goto err;
  407|      1|    }
  408|      0|    if (!(p1 = (t_swAcquireAccContext *)
  409|      0|          DSO_bind_func(cswift_dso, CSWIFT_F1)) ||
  410|      0|        !(p2 = (t_swAttachKeyParam *)
  411|      0|          DSO_bind_func(cswift_dso, CSWIFT_F2)) ||
  412|      0|        !(p3 = (t_swSimpleRequest *)
  413|      0|          DSO_bind_func(cswift_dso, CSWIFT_F3)) ||
  414|      0|        !(p4 = (t_swReleaseAccContext *)
  415|      0|          DSO_bind_func(cswift_dso, CSWIFT_F4))) {
  416|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  417|      0|        goto err;
  418|      0|    }
  419|       |    /* Copy the pointers */
  420|      0|    p_CSwift_AcquireAccContext = p1;
  421|      0|    p_CSwift_AttachKeyParam = p2;
  422|      0|    p_CSwift_SimpleRequest = p3;
  423|      0|    p_CSwift_ReleaseAccContext = p4;
  424|       |    /*
  425|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  426|       |     */
  427|      0|    if (!get_context(&hac)) {
  428|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_UNIT_FAILURE);
  429|      0|        goto err;
  430|      0|    }
  431|      0|    release_context(hac);
  432|       |    /* Everything's fine. */
  433|      0|    return 1;
  434|      1| err:
  435|      1|    if (cswift_dso) {
  436|      0|        DSO_free(cswift_dso);
  437|      0|        cswift_dso = NULL;
  438|      0|    }
  439|      1|    p_CSwift_AcquireAccContext = NULL;
  440|      1|    p_CSwift_AttachKeyParam = NULL;
  441|      1|    p_CSwift_SimpleRequest = NULL;
  442|      1|    p_CSwift_ReleaseAccContext = NULL;
  443|      1|    return 0;
  444|      0|}
e_cswift.c:get_CSWIFT_LIBNAME:
  333|      1|{
  334|      1|    if (CSWIFT_LIBNAME)
  335|      0|        return CSWIFT_LIBNAME;
  336|      1|    return "swift";
  337|      1|}

e_cswift.c:ERR_CSWIFT_error:
  146|      1|{
  147|      1|    if (CSWIFT_lib_error_code == 0)
  148|      0|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  149|      1|    ERR_PUT_error(CSWIFT_lib_error_code, function, reason, file, line);
  150|      1|}
e_cswift.c:ERR_load_CSWIFT_strings:
  112|      1|{
  113|      1|    if (CSWIFT_lib_error_code == 0)
  114|      1|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  115|       |
  116|      1|    if (CSWIFT_error_init) {
  117|      1|        CSWIFT_error_init = 0;
  118|      1|#ifndef OPENSSL_NO_ERR
  119|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_functs);
  120|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_reasons);
  121|      1|#endif
  122|       |
  123|      1|#ifdef CSWIFT_LIB_NAME
  124|      1|        CSWIFT_lib_name->error = ERR_PACK(CSWIFT_lib_error_code, 0, 0);
  125|      1|        ERR_load_strings(0, CSWIFT_lib_name);
  126|      1|#endif
  127|      1|    }
  128|      1|}

ENGINE_load_nuron:
  407|      1|{
  408|       |    /* Copied from eng_[openssl|dyn].c */
  409|      1|    ENGINE *toadd = engine_nuron();
  410|      1|    if (!toadd)
  411|      0|        return;
  412|      1|    ENGINE_add(toadd);
  413|      1|    ENGINE_free(toadd);
  414|      1|    ERR_clear_error();
  415|      1|}
e_nuron.c:engine_nuron:
  395|      1|{
  396|      1|    ENGINE *ret = ENGINE_new();
  397|      1|    if (!ret)
  398|      0|        return NULL;
  399|      1|    if (!bind_helper(ret)) {
  400|      0|        ENGINE_free(ret);
  401|      0|        return NULL;
  402|      0|    }
  403|      1|    return ret;
  404|      1|}
e_nuron.c:bind_helper:
  327|      1|{
  328|      1|#  ifndef OPENSSL_NO_RSA
  329|      1|    const RSA_METHOD *meth1;
  330|      1|#  endif
  331|      1|#  ifndef OPENSSL_NO_DSA
  332|      1|    const DSA_METHOD *meth2;
  333|      1|#  endif
  334|      1|#  ifndef OPENSSL_NO_DH
  335|      1|    const DH_METHOD *meth3;
  336|      1|#  endif
  337|      1|    if (!ENGINE_set_id(e, engine_nuron_id) ||
  338|      1|        !ENGINE_set_name(e, engine_nuron_name) ||
  339|      1|#  ifndef OPENSSL_NO_RSA
  340|      1|        !ENGINE_set_RSA(e, &nuron_rsa) ||
  341|      1|#  endif
  342|      1|#  ifndef OPENSSL_NO_DSA
  343|      1|        !ENGINE_set_DSA(e, &nuron_dsa) ||
  344|      1|#  endif
  345|      1|#  ifndef OPENSSL_NO_DH
  346|      1|        !ENGINE_set_DH(e, &nuron_dh) ||
  347|      1|#  endif
  348|      1|        !ENGINE_set_destroy_function(e, nuron_destroy) ||
  349|      1|        !ENGINE_set_init_function(e, nuron_init) ||
  350|      1|        !ENGINE_set_finish_function(e, nuron_finish) ||
  351|      1|        !ENGINE_set_ctrl_function(e, nuron_ctrl) ||
  352|      1|        !ENGINE_set_cmd_defns(e, nuron_cmd_defns))
  353|      0|        return 0;
  354|       |
  355|      1|#  ifndef OPENSSL_NO_RSA
  356|       |    /*
  357|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  358|       |     * nuron-specific mod_exp and mod_exp_crt so we use those functions. NB:
  359|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  360|       |     * something like the RSAref code may not hook properly, and if you own
  361|       |     * one of these cards then you have the right to do RSA operations on it
  362|       |     * anyway!
  363|       |     */
  364|      1|    meth1 = RSA_PKCS1_SSLeay();
  365|      1|    nuron_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  366|      1|    nuron_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  367|      1|    nuron_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  368|      1|    nuron_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  369|      1|#  endif
  370|       |
  371|      1|#  ifndef OPENSSL_NO_DSA
  372|       |    /*
  373|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  374|       |     */
  375|      1|    meth2 = DSA_OpenSSL();
  376|      1|    nuron_dsa.dsa_do_sign = meth2->dsa_do_sign;
  377|      1|    nuron_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  378|      1|    nuron_dsa.dsa_do_verify = meth2->dsa_do_verify;
  379|      1|#  endif
  380|       |
  381|      1|#  ifndef OPENSSL_NO_DH
  382|       |    /* Much the same for Diffie-Hellman */
  383|      1|    meth3 = DH_OpenSSL();
  384|      1|    nuron_dh.generate_key = meth3->generate_key;
  385|      1|    nuron_dh.compute_key = meth3->compute_key;
  386|      1|#  endif
  387|       |
  388|       |    /* Ensure the nuron error handling is set up */
  389|      1|    ERR_load_NURON_strings();
  390|      1|    return 1;
  391|      1|}

e_nuron.c:ERR_load_NURON_strings:
  104|      1|{
  105|      1|    if (NURON_lib_error_code == 0)
  106|      1|        NURON_lib_error_code = ERR_get_next_error_library();
  107|       |
  108|      1|    if (NURON_error_init) {
  109|      1|        NURON_error_init = 0;
  110|      1|#ifndef OPENSSL_NO_ERR
  111|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_functs);
  112|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_reasons);
  113|      1|#endif
  114|       |
  115|      1|#ifdef NURON_LIB_NAME
  116|      1|        NURON_lib_name->error = ERR_PACK(NURON_lib_error_code, 0, 0);
  117|      1|        ERR_load_strings(0, NURON_lib_name);
  118|      1|#endif
  119|      1|    }
  120|      1|}

ENGINE_load_padlock:
  116|      1|{
  117|       |/* On non-x86 CPUs it just returns. */
  118|       |#   ifdef COMPILE_HW_PADLOCK
  119|       |    ENGINE *toadd = ENGINE_padlock();
  120|       |    if (!toadd)
  121|       |        return;
  122|       |    ENGINE_add(toadd);
  123|       |    ENGINE_free(toadd);
  124|       |    ERR_clear_error();
  125|       |#   endif
  126|      1|}

ENGINE_load_sureware:
  330|      1|{
  331|       |    /* Copied from eng_[openssl|dyn].c */
  332|      1|    ENGINE *toadd = engine_sureware();
  333|      1|    if (!toadd)
  334|      0|        return;
  335|      1|    ENGINE_add(toadd);
  336|      1|    ENGINE_free(toadd);
  337|      1|    ERR_clear_error();
  338|      1|}
e_sureware.c:engine_sureware:
  318|      1|{
  319|      1|    ENGINE *ret = ENGINE_new();
  320|      1|    if (!ret)
  321|      0|        return NULL;
  322|      1|    if (!bind_sureware(ret)) {
  323|      0|        ENGINE_free(ret);
  324|      0|        return NULL;
  325|      0|    }
  326|      1|    return ret;
  327|      1|}
e_sureware.c:bind_sureware:
  233|      1|{
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|      1|    const RSA_METHOD *meth1;
  236|      1|#  endif
  237|      1|#  ifndef OPENSSL_NO_DSA
  238|      1|    const DSA_METHOD *meth2;
  239|      1|#  endif
  240|      1|#  ifndef OPENSSL_NO_DH
  241|      1|    const DH_METHOD *meth3;
  242|      1|#  endif
  243|       |
  244|      1|    if (!ENGINE_set_id(e, engine_sureware_id) ||
  245|      1|        !ENGINE_set_name(e, engine_sureware_name) ||
  246|      1|#  ifndef OPENSSL_NO_RSA
  247|      1|        !ENGINE_set_RSA(e, &surewarehk_rsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DSA
  250|      1|        !ENGINE_set_DSA(e, &surewarehk_dsa) ||
  251|      1|#  endif
  252|      1|#  ifndef OPENSSL_NO_DH
  253|      1|        !ENGINE_set_DH(e, &surewarehk_dh) ||
  254|      1|#  endif
  255|      1|        !ENGINE_set_RAND(e, &surewarehk_rand) ||
  256|      1|        !ENGINE_set_destroy_function(e, surewarehk_destroy) ||
  257|      1|        !ENGINE_set_init_function(e, surewarehk_init) ||
  258|      1|        !ENGINE_set_finish_function(e, surewarehk_finish) ||
  259|      1|        !ENGINE_set_ctrl_function(e, surewarehk_ctrl) ||
  260|      1|        !ENGINE_set_load_privkey_function(e, surewarehk_load_privkey) ||
  261|      1|        !ENGINE_set_load_pubkey_function(e, surewarehk_load_pubkey))
  262|      0|        return 0;
  263|       |
  264|      1|#  ifndef OPENSSL_NO_RSA
  265|       |    /*
  266|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  267|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  268|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  269|       |     * something like the RSAref code may not hook properly, and if you own
  270|       |     * one of these cards then you have the right to do RSA operations on it
  271|       |     * anyway!
  272|       |     */
  273|      1|    meth1 = RSA_PKCS1_SSLeay();
  274|      1|    if (meth1) {
  275|      1|        surewarehk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  276|      1|        surewarehk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  277|      1|    }
  278|      1|#  endif
  279|       |
  280|      1|#  ifndef OPENSSL_NO_DSA
  281|       |    /*
  282|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  283|       |     */
  284|      1|    meth2 = DSA_OpenSSL();
  285|      1|    if (meth2) {
  286|      1|        surewarehk_dsa.dsa_do_verify = meth2->dsa_do_verify;
  287|      1|    }
  288|      1|#  endif
  289|       |
  290|      1|#  ifndef OPENSSL_NO_DH
  291|       |    /* Much the same for Diffie-Hellman */
  292|      1|    meth3 = DH_OpenSSL();
  293|      1|    if (meth3) {
  294|      1|        surewarehk_dh.generate_key = meth3->generate_key;
  295|      1|        surewarehk_dh.compute_key = meth3->compute_key;
  296|      1|    }
  297|      1|#  endif
  298|       |
  299|       |    /* Ensure the sureware error handling is set up */
  300|      1|    ERR_load_SUREWARE_strings();
  301|      1|    return 1;
  302|      1|}
e_sureware.c:surewarehk_init:
  456|      1|{
  457|      1|    char msg[64] = "ENGINE_init";
  458|      1|    SureWareHook_Init_t *p1 = NULL;
  459|      1|    SureWareHook_Finish_t *p2 = NULL;
  460|      1|    SureWareHook_Rand_Bytes_t *p3 = NULL;
  461|      1|    SureWareHook_Rand_Seed_t *p4 = NULL;
  462|      1|    SureWareHook_Load_Privkey_t *p5 = NULL;
  463|      1|    SureWareHook_Load_Rsa_Pubkey_t *p6 = NULL;
  464|      1|    SureWareHook_Free_t *p7 = NULL;
  465|      1|    SureWareHook_Rsa_Priv_Dec_t *p8 = NULL;
  466|      1|    SureWareHook_Rsa_Sign_t *p9 = NULL;
  467|      1|    SureWareHook_Dsa_Sign_t *p12 = NULL;
  468|      1|    SureWareHook_Info_Pubkey_t *p13 = NULL;
  469|      1|    SureWareHook_Load_Dsa_Pubkey_t *p14 = NULL;
  470|      1|    SureWareHook_Mod_Exp_t *p15 = NULL;
  471|       |
  472|      1|    if (surewarehk_dso != NULL) {
  473|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_ALREADY_LOADED);
  474|      0|        goto err;
  475|      0|    }
  476|       |    /* Attempt to load libsurewarehk.so/surewarehk.dll/whatever. */
  477|      1|    surewarehk_dso = DSO_load(NULL, surewarehk_LIBNAME, NULL, 0);
  478|      1|    if (surewarehk_dso == NULL) {
  479|      1|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  480|      1|        goto err;
  481|      1|    }
  482|      0|    if (!
  483|      0|        (p1 =
  484|      0|         (SureWareHook_Init_t *) DSO_bind_func(surewarehk_dso,
  485|      0|                                               n_surewarehk_Init))
  486|      0||| !(p2 =
  487|      0|     (SureWareHook_Finish_t *) DSO_bind_func(surewarehk_dso,
  488|      0|                                             n_surewarehk_Finish))
  489|      0||| !(p3 =
  490|      0|     (SureWareHook_Rand_Bytes_t *) DSO_bind_func(surewarehk_dso,
  491|      0|                                                 n_surewarehk_Rand_Bytes))
  492|      0||| !(p4 =
  493|      0|     (SureWareHook_Rand_Seed_t *) DSO_bind_func(surewarehk_dso,
  494|      0|                                                n_surewarehk_Rand_Seed))
  495|      0||| !(p5 =
  496|      0|     (SureWareHook_Load_Privkey_t *) DSO_bind_func(surewarehk_dso,
  497|      0|                                                   n_surewarehk_Load_Privkey))
  498|      0||| !(p6 =
  499|      0|     (SureWareHook_Load_Rsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  500|      0|                                                      n_surewarehk_Load_Rsa_Pubkey))
  501|      0||| !(p7 =
  502|      0|     (SureWareHook_Free_t *) DSO_bind_func(surewarehk_dso, n_surewarehk_Free))
  503|      0||| !(p8 =
  504|      0|     (SureWareHook_Rsa_Priv_Dec_t *) DSO_bind_func(surewarehk_dso,
  505|      0|                                                   n_surewarehk_Rsa_Priv_Dec))
  506|      0||| !(p9 =
  507|      0|     (SureWareHook_Rsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  508|      0|                                               n_surewarehk_Rsa_Sign))
  509|      0||| !(p12 =
  510|      0|     (SureWareHook_Dsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  511|      0|                                               n_surewarehk_Dsa_Sign))
  512|      0||| !(p13 =
  513|      0|     (SureWareHook_Info_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  514|      0|                                                  n_surewarehk_Info_Pubkey))
  515|      0||| !(p14 =
  516|      0|     (SureWareHook_Load_Dsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  517|      0|                                                      n_surewarehk_Load_Dsa_Pubkey))
  518|      0||| !(p15 =
  519|      0|     (SureWareHook_Mod_Exp_t *) DSO_bind_func(surewarehk_dso,
  520|      0|                                              n_surewarehk_Mod_Exp))) {
  521|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  522|      0|        goto err;
  523|      0|    }
  524|       |    /* Copy the pointers */
  525|      0|    p_surewarehk_Init = p1;
  526|      0|    p_surewarehk_Finish = p2;
  527|      0|    p_surewarehk_Rand_Bytes = p3;
  528|      0|    p_surewarehk_Rand_Seed = p4;
  529|      0|    p_surewarehk_Load_Privkey = p5;
  530|      0|    p_surewarehk_Load_Rsa_Pubkey = p6;
  531|      0|    p_surewarehk_Free = p7;
  532|      0|    p_surewarehk_Rsa_Priv_Dec = p8;
  533|      0|    p_surewarehk_Rsa_Sign = p9;
  534|      0|    p_surewarehk_Dsa_Sign = p12;
  535|      0|    p_surewarehk_Info_Pubkey = p13;
  536|      0|    p_surewarehk_Load_Dsa_Pubkey = p14;
  537|      0|    p_surewarehk_Mod_Exp = p15;
  538|       |    /* Contact the hardware and initialises it. */
  539|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  540|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  541|      0|        goto err;
  542|      0|    }
  543|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  544|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  545|      0|        goto err;
  546|      0|    }
  547|       |    /*
  548|       |     * try to load the default private key, if failed does not return a
  549|       |     * failure but wait for an explicit ENGINE_load_privakey
  550|       |     */
  551|      0|    surewarehk_load_privkey(e, NULL, NULL, NULL);
  552|       |
  553|       |    /* Everything's fine. */
  554|      0|#  ifndef OPENSSL_NO_RSA
  555|      0|    if (rsaHndidx == -1)
  556|      0|        rsaHndidx = RSA_get_ex_new_index(0,
  557|      0|                                         "SureWareHook RSA key handle",
  558|      0|                                         NULL, NULL, surewarehk_ex_free);
  559|      0|#  endif
  560|      0|#  ifndef OPENSSL_NO_DSA
  561|      0|    if (dsaHndidx == -1)
  562|      0|        dsaHndidx = DSA_get_ex_new_index(0,
  563|      0|                                         "SureWareHook DSA key handle",
  564|      0|                                         NULL, NULL, surewarehk_ex_free);
  565|      0|#  endif
  566|       |
  567|      0|    return 1;
  568|      1| err:
  569|      1|    if (surewarehk_dso)
  570|      0|        DSO_free(surewarehk_dso);
  571|      1|    surewarehk_dso = NULL;
  572|      1|    p_surewarehk_Init = NULL;
  573|      1|    p_surewarehk_Finish = NULL;
  574|      1|    p_surewarehk_Rand_Bytes = NULL;
  575|      1|    p_surewarehk_Rand_Seed = NULL;
  576|      1|    p_surewarehk_Load_Privkey = NULL;
  577|      1|    p_surewarehk_Load_Rsa_Pubkey = NULL;
  578|      1|    p_surewarehk_Free = NULL;
  579|      1|    p_surewarehk_Rsa_Priv_Dec = NULL;
  580|      1|    p_surewarehk_Rsa_Sign = NULL;
  581|      1|    p_surewarehk_Dsa_Sign = NULL;
  582|      1|    p_surewarehk_Info_Pubkey = NULL;
  583|      1|    p_surewarehk_Load_Dsa_Pubkey = NULL;
  584|      1|    p_surewarehk_Mod_Exp = NULL;
  585|      1|    return 0;
  586|      0|}

e_sureware.c:ERR_SUREWARE_error:
  150|      1|{
  151|      1|    if (SUREWARE_lib_error_code == 0)
  152|      0|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  153|      1|    ERR_PUT_error(SUREWARE_lib_error_code, function, reason, file, line);
  154|      1|}
e_sureware.c:ERR_load_SUREWARE_strings:
  116|      1|{
  117|      1|    if (SUREWARE_lib_error_code == 0)
  118|      1|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (SUREWARE_error_init) {
  121|      1|        SUREWARE_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_functs);
  124|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef SUREWARE_LIB_NAME
  128|      1|        SUREWARE_lib_name->error = ERR_PACK(SUREWARE_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, SUREWARE_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

ENGINE_load_ubsec:
  278|      1|{
  279|       |    /* Copied from eng_[openssl|dyn].c */
  280|      1|    ENGINE *toadd = engine_ubsec();
  281|      1|    if (!toadd)
  282|      0|        return;
  283|      1|    ENGINE_add(toadd);
  284|      1|    ENGINE_free(toadd);
  285|      1|    ERR_clear_error();
  286|      1|}
e_ubsec.c:engine_ubsec:
  266|      1|{
  267|      1|    ENGINE *ret = ENGINE_new();
  268|      1|    if (!ret)
  269|      0|        return NULL;
  270|      1|    if (!bind_helper(ret)) {
  271|      0|        ENGINE_free(ret);
  272|      0|        return NULL;
  273|      0|    }
  274|      1|    return ret;
  275|      1|}
e_ubsec.c:bind_helper:
  207|      1|{
  208|      1|#  ifndef OPENSSL_NO_RSA
  209|      1|    const RSA_METHOD *meth1;
  210|      1|#  endif
  211|      1|#  ifndef OPENSSL_NO_DH
  212|      1|#   ifndef HAVE_UBSEC_DH
  213|      1|    const DH_METHOD *meth3;
  214|      1|#   endif                       /* HAVE_UBSEC_DH */
  215|      1|#  endif
  216|      1|    if (!ENGINE_set_id(e, engine_ubsec_id) ||
  217|      1|        !ENGINE_set_name(e, engine_ubsec_name) ||
  218|      1|#  ifndef OPENSSL_NO_RSA
  219|      1|        !ENGINE_set_RSA(e, &ubsec_rsa) ||
  220|      1|#  endif
  221|      1|#  ifndef OPENSSL_NO_DSA
  222|      1|        !ENGINE_set_DSA(e, &ubsec_dsa) ||
  223|      1|#  endif
  224|      1|#  ifndef OPENSSL_NO_DH
  225|      1|        !ENGINE_set_DH(e, &ubsec_dh) ||
  226|      1|#  endif
  227|      1|        !ENGINE_set_destroy_function(e, ubsec_destroy) ||
  228|      1|        !ENGINE_set_init_function(e, ubsec_init) ||
  229|      1|        !ENGINE_set_finish_function(e, ubsec_finish) ||
  230|      1|        !ENGINE_set_ctrl_function(e, ubsec_ctrl) ||
  231|      1|        !ENGINE_set_cmd_defns(e, ubsec_cmd_defns))
  232|      0|        return 0;
  233|       |
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|       |    /*
  236|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  237|       |     * Broadcom-specific mod_exp and mod_exp_crt so we use those functions.
  238|       |     * NB: We don't use ENGINE_openssl() or anything "more generic" because
  239|       |     * something like the RSAref code may not hook properly, and if you own
  240|       |     * one of these cards then you have the right to do RSA operations on it
  241|       |     * anyway!
  242|       |     */
  243|      1|    meth1 = RSA_PKCS1_SSLeay();
  244|      1|    ubsec_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  245|      1|    ubsec_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  246|      1|    ubsec_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  247|      1|    ubsec_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  248|      1|#  endif
  249|       |
  250|      1|#  ifndef OPENSSL_NO_DH
  251|      1|#   ifndef HAVE_UBSEC_DH
  252|       |    /* Much the same for Diffie-Hellman */
  253|      1|    meth3 = DH_OpenSSL();
  254|      1|    ubsec_dh.generate_key = meth3->generate_key;
  255|      1|    ubsec_dh.compute_key = meth3->compute_key;
  256|      1|#   endif                       /* HAVE_UBSEC_DH */
  257|      1|#  endif
  258|       |
  259|       |    /* Ensure the ubsec error handling is set up */
  260|      1|    ERR_load_UBSEC_strings();
  261|      1|    return 1;
  262|      1|}

e_ubsec.c:ERR_load_UBSEC_strings:
  116|      1|{
  117|      1|    if (UBSEC_lib_error_code == 0)
  118|      1|        UBSEC_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (UBSEC_error_init) {
  121|      1|        UBSEC_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_functs);
  124|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef UBSEC_LIB_NAME
  128|      1|        UBSEC_lib_name->error = ERR_PACK(UBSEC_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, UBSEC_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

ssl23_connect:
  147|     98|{
  148|     98|    BUF_MEM *buf = NULL;
  149|     98|    unsigned long Time = (unsigned long)time(NULL);
  150|     98|    void (*cb) (const SSL *ssl, int type, int val) = NULL;
  151|     98|    int ret = -1;
  152|     98|    int new_state, state;
  153|       |
  154|     98|    RAND_add(&Time, sizeof(Time), 0);
  155|     98|    ERR_clear_error();
  156|     98|    clear_sys_error();
  157|       |
  158|     98|    if (s->info_callback != NULL)
  159|      0|        cb = s->info_callback;
  160|     98|    else if (s->ctx->info_callback != NULL)
  161|      0|        cb = s->ctx->info_callback;
  162|       |
  163|     98|    s->in_handshake++;
  164|     98|    if (!SSL_in_init(s) || SSL_in_before(s))
  165|     49|        SSL_clear(s);
  166|       |
  167|    196|    for (;;) {
  168|    196|        state = s->state;
  169|       |
  170|    196|        switch (s->state) {
  171|      0|        case SSL_ST_BEFORE:
  172|      0|        case SSL_ST_CONNECT:
  173|     49|        case SSL_ST_BEFORE | SSL_ST_CONNECT:
  174|     49|        case SSL_ST_OK | SSL_ST_CONNECT:
  175|       |
  176|     49|            if (s->session != NULL) {
  177|      0|                SSLerr(SSL_F_SSL23_CONNECT,
  178|      0|                       SSL_R_SSL23_DOING_SESSION_ID_REUSE);
  179|      0|                ret = -1;
  180|      0|                goto end;
  181|      0|            }
  182|     49|            s->server = 0;
  183|     49|            if (cb != NULL)
  184|      0|                cb(s, SSL_CB_HANDSHAKE_START, 1);
  185|       |
  186|       |            /* s->version=TLS1_VERSION; */
  187|     49|            s->type = SSL_ST_CONNECT;
  188|       |
  189|     49|            if (s->init_buf == NULL) {
  190|     49|                if ((buf = BUF_MEM_new()) == NULL) {
  191|      0|                    ret = -1;
  192|      0|                    goto end;
  193|      0|                }
  194|     49|                if (!BUF_MEM_grow(buf, SSL3_RT_MAX_PLAIN_LENGTH)) {
  195|      0|                    ret = -1;
  196|      0|                    goto end;
  197|      0|                }
  198|     49|                s->init_buf = buf;
  199|     49|                buf = NULL;
  200|     49|            }
  201|       |
  202|     49|            if (!ssl3_setup_buffers(s)) {
  203|      0|                ret = -1;
  204|      0|                goto end;
  205|      0|            }
  206|       |
  207|     49|            if (!ssl3_init_finished_mac(s)) {
  208|      0|                ret = -1;
  209|      0|                goto end;
  210|      0|            }
  211|       |
  212|     49|            s->state = SSL23_ST_CW_CLNT_HELLO_A;
  213|     49|            s->ctx->stats.sess_connect++;
  214|     49|            s->init_num = 0;
  215|     49|            break;
  216|       |
  217|     49|        case SSL23_ST_CW_CLNT_HELLO_A:
  218|     49|        case SSL23_ST_CW_CLNT_HELLO_B:
  219|       |
  220|     49|            s->shutdown = 0;
  221|     49|            ret = ssl23_client_hello(s);
  222|     49|            if (ret <= 0)
  223|      0|                goto end;
  224|     49|            s->state = SSL23_ST_CR_SRVR_HELLO_A;
  225|     49|            s->init_num = 0;
  226|       |
  227|     49|            break;
  228|       |
  229|     98|        case SSL23_ST_CR_SRVR_HELLO_A:
  230|     98|        case SSL23_ST_CR_SRVR_HELLO_B:
  231|     98|            ret = ssl23_get_server_hello(s);
  232|     98|            if (ret >= 0)
  233|     96|                cb = NULL;
  234|     98|            goto end;
  235|       |            /* break; */
  236|       |
  237|      0|        default:
  238|      0|            SSLerr(SSL_F_SSL23_CONNECT, SSL_R_UNKNOWN_STATE);
  239|      0|            ret = -1;
  240|      0|            goto end;
  241|       |            /* break; */
  242|    196|        }
  243|       |
  244|     98|        if (s->debug) {
  245|      0|            (void)BIO_flush(s->wbio);
  246|      0|        }
  247|       |
  248|     98|        if ((cb != NULL) && (s->state != state)) {
  249|      0|            new_state = s->state;
  250|      0|            s->state = state;
  251|      0|            cb(s, SSL_CB_CONNECT_LOOP, 1);
  252|      0|            s->state = new_state;
  253|      0|        }
  254|     98|    }
  255|     98| end:
  256|     98|    s->in_handshake--;
  257|     98|    if (buf != NULL)
  258|      0|        BUF_MEM_free(buf);
  259|     98|    if (cb != NULL)
  260|      0|        cb(s, SSL_CB_CONNECT_EXIT, ret);
  261|     98|    return (ret);
  262|     98|}
ssl_fill_hello_random:
  283|     49|{
  284|     49|    int send_time = 0;
  285|     49|    if (len < 4)
  286|      0|        return 0;
  287|     49|    if (server)
  288|      0|        send_time = (s->mode & SSL_MODE_SEND_SERVERHELLO_TIME) != 0;
  289|     49|    else
  290|     49|        send_time = (s->mode & SSL_MODE_SEND_CLIENTHELLO_TIME) != 0;
  291|     49|    if (send_time) {
  292|      0|        unsigned long Time = (unsigned long)time(NULL);
  293|      0|        unsigned char *p = result;
  294|      0|        l2n(Time, p);
  295|      0|        return RAND_bytes(p, len - 4);
  296|      0|    } else
  297|     49|        return RAND_bytes(result, len);
  298|     49|}
s23_clnt.c:ssl23_client_hello:
  301|     49|{
  302|     49|    unsigned char *buf;
  303|     49|    unsigned char *p, *d;
  304|     49|    int i, ch_len;
  305|     49|    unsigned long l;
  306|     49|    int ssl2_compat;
  307|     49|    int version = 0, version_major, version_minor;
  308|     49|    int al = 0;
  309|     49|#ifndef OPENSSL_NO_COMP
  310|     49|    int j;
  311|     49|    SSL_COMP *comp;
  312|     49|#endif
  313|     49|    int ret;
  314|     49|    unsigned long mask, options = s->options;
  315|       |
  316|     49|    ssl2_compat = (options & SSL_OP_NO_SSLv2) ? 0 : 1;
  317|       |
  318|     49|    if (ssl2_compat && ssl23_no_ssl2_ciphers(s))
  319|      0|        ssl2_compat = 0;
  320|       |
  321|       |    /*
  322|       |     * SSL_OP_NO_X disables all protocols above X *if* there are
  323|       |     * some protocols below X enabled. This is required in order
  324|       |     * to maintain "version capability" vector contiguous. So
  325|       |     * that if application wants to disable TLS1.0 in favour of
  326|       |     * TLS1>=1, it would be insufficient to pass SSL_NO_TLSv1, the
  327|       |     * answer is SSL_OP_NO_TLSv1|SSL_OP_NO_SSLv3|SSL_OP_NO_SSLv2.
  328|       |     */
  329|     49|    mask = SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1
  330|     49|#if !defined(OPENSSL_NO_SSL3)
  331|     49|        | SSL_OP_NO_SSLv3
  332|     49|#endif
  333|       |#if !defined(OPENSSL_NO_SSL2)
  334|       |        | (ssl2_compat ? SSL_OP_NO_SSLv2 : 0)
  335|       |#endif
  336|     49|        ;
  337|     49|#if !defined(OPENSSL_NO_TLS1_2_CLIENT)
  338|     49|    version = TLS1_2_VERSION;
  339|       |
  340|     49|    if ((options & SSL_OP_NO_TLSv1_2) && (options & mask) != mask)
  341|      0|        version = TLS1_1_VERSION;
  342|       |#else
  343|       |    version = TLS1_1_VERSION;
  344|       |#endif
  345|     49|    mask &= ~SSL_OP_NO_TLSv1_1;
  346|     49|    if ((options & SSL_OP_NO_TLSv1_1) && (options & mask) != mask)
  347|      0|        version = TLS1_VERSION;
  348|     49|    mask &= ~SSL_OP_NO_TLSv1;
  349|     49|#if !defined(OPENSSL_NO_SSL3)
  350|     49|    if ((options & SSL_OP_NO_TLSv1) && (options & mask) != mask)
  351|      0|        version = SSL3_VERSION;
  352|     49|    mask &= ~SSL_OP_NO_SSLv3;
  353|     49|#endif
  354|       |#if !defined(OPENSSL_NO_SSL2)
  355|       |    if ((options & SSL_OP_NO_SSLv3) && (options & mask) != mask)
  356|       |        version = SSL2_VERSION;
  357|       |#endif
  358|       |
  359|     49|#ifndef OPENSSL_NO_TLSEXT
  360|     49|    if (version != SSL2_VERSION) {
  361|       |        /*
  362|       |         * have to disable SSL 2.0 compatibility if we need TLS extensions
  363|       |         */
  364|       |
  365|     49|        if (s->tlsext_hostname != NULL)
  366|     47|            ssl2_compat = 0;
  367|     49|        if (s->tlsext_status_type != -1)
  368|      0|            ssl2_compat = 0;
  369|       |# ifdef TLSEXT_TYPE_opaque_prf_input
  370|       |        if (s->ctx->tlsext_opaque_prf_input_callback != 0
  371|       |            || s->tlsext_opaque_prf_input != NULL)
  372|       |            ssl2_compat = 0;
  373|       |# endif
  374|     49|        if (s->cert->cli_ext.meths_count != 0)
  375|      0|            ssl2_compat = 0;
  376|     49|    }
  377|     49|#endif
  378|       |
  379|     49|    buf = (unsigned char *)s->init_buf->data;
  380|     49|    if (s->state == SSL23_ST_CW_CLNT_HELLO_A) {
  381|       |        /*
  382|       |         * Since we're sending s23 client hello, we're not reusing a session, as
  383|       |         * we'd be using the method from the saved session instead
  384|       |         */
  385|     49|        if (!ssl_get_new_session(s, 0)) {
  386|      0|            return -1;
  387|      0|        }
  388|       |
  389|     49|        p = s->s3->client_random;
  390|     49|        if (ssl_fill_hello_random(s, 0, p, SSL3_RANDOM_SIZE) <= 0)
  391|      0|            return -1;
  392|       |
  393|     49|        if (version == TLS1_2_VERSION) {
  394|     49|            version_major = TLS1_2_VERSION_MAJOR;
  395|     49|            version_minor = TLS1_2_VERSION_MINOR;
  396|     49|        } else if (tls1_suiteb(s)) {
  397|      0|            SSLerr(SSL_F_SSL23_CLIENT_HELLO,
  398|      0|                   SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE);
  399|      0|            return -1;
  400|      0|        } else if (version == TLS1_1_VERSION) {
  401|      0|            version_major = TLS1_1_VERSION_MAJOR;
  402|      0|            version_minor = TLS1_1_VERSION_MINOR;
  403|      0|        } else if (version == TLS1_VERSION) {
  404|      0|            version_major = TLS1_VERSION_MAJOR;
  405|      0|            version_minor = TLS1_VERSION_MINOR;
  406|      0|        }
  407|       |#ifdef OPENSSL_FIPS
  408|       |        else if (FIPS_mode()) {
  409|       |            SSLerr(SSL_F_SSL23_CLIENT_HELLO,
  410|       |                   SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);
  411|       |            return -1;
  412|       |        }
  413|       |#endif
  414|      0|        else if (version == SSL3_VERSION) {
  415|      0|            version_major = SSL3_VERSION_MAJOR;
  416|      0|            version_minor = SSL3_VERSION_MINOR;
  417|      0|        } else if (version == SSL2_VERSION) {
  418|      0|            version_major = SSL2_VERSION_MAJOR;
  419|      0|            version_minor = SSL2_VERSION_MINOR;
  420|      0|        } else {
  421|      0|            SSLerr(SSL_F_SSL23_CLIENT_HELLO, SSL_R_NO_PROTOCOLS_AVAILABLE);
  422|      0|            return (-1);
  423|      0|        }
  424|       |
  425|     49|        s->client_version = version;
  426|       |
  427|     49|        if (ssl2_compat) {
  428|       |            /* create SSL 2.0 compatible Client Hello */
  429|       |
  430|       |            /* two byte record header will be written last */
  431|      0|            d = &(buf[2]);
  432|      0|            p = d + 9;          /* leave space for message type, version,
  433|       |                                 * individual length fields */
  434|       |
  435|      0|            *(d++) = SSL2_MT_CLIENT_HELLO;
  436|      0|            *(d++) = version_major;
  437|      0|            *(d++) = version_minor;
  438|       |
  439|       |            /* Ciphers supported */
  440|      0|            i = ssl_cipher_list_to_bytes(s, SSL_get_ciphers(s), p, 0);
  441|      0|            if (i == 0) {
  442|       |                /* no ciphers */
  443|      0|                SSLerr(SSL_F_SSL23_CLIENT_HELLO, SSL_R_NO_CIPHERS_AVAILABLE);
  444|      0|                return -1;
  445|      0|            }
  446|      0|            s2n(i, d);
  447|      0|            p += i;
  448|       |
  449|       |            /*
  450|       |             * put in the session-id length (zero since there is no reuse)
  451|       |             */
  452|      0|            s2n(0, d);
  453|       |
  454|      0|            if (s->options & SSL_OP_NETSCAPE_CHALLENGE_BUG)
  455|      0|                ch_len = SSL2_CHALLENGE_LENGTH;
  456|      0|            else
  457|      0|                ch_len = SSL2_MAX_CHALLENGE_LENGTH;
  458|       |
  459|       |            /* write out sslv2 challenge */
  460|       |            /*
  461|       |             * Note that ch_len must be <= SSL3_RANDOM_SIZE (32), because it
  462|       |             * is one of SSL2_MAX_CHALLENGE_LENGTH (32) or
  463|       |             * SSL2_MAX_CHALLENGE_LENGTH (16), but leave the check in for
  464|       |             * futurproofing
  465|       |             */
  466|      0|            if (SSL3_RANDOM_SIZE < ch_len)
  467|      0|                i = SSL3_RANDOM_SIZE;
  468|      0|            else
  469|      0|                i = ch_len;
  470|      0|            s2n(i, d);
  471|      0|            memset(&(s->s3->client_random[0]), 0, SSL3_RANDOM_SIZE);
  472|      0|            if (RAND_bytes (&(s->s3->client_random[SSL3_RANDOM_SIZE - i]), i)
  473|      0|                    <= 0)
  474|      0|                return -1;
  475|       |
  476|      0|            memcpy(p, &(s->s3->client_random[SSL3_RANDOM_SIZE - i]), i);
  477|      0|            p += i;
  478|       |
  479|      0|            i = p - &(buf[2]);
  480|      0|            buf[0] = ((i >> 8) & 0xff) | 0x80;
  481|      0|            buf[1] = (i & 0xff);
  482|       |
  483|       |            /* number of bytes to write */
  484|      0|            s->init_num = i + 2;
  485|      0|            s->init_off = 0;
  486|       |
  487|      0|            ssl3_finish_mac(s, &(buf[2]), i);
  488|     49|        } else {
  489|       |            /* create Client Hello in SSL 3.0/TLS 1.0 format */
  490|       |
  491|       |            /*
  492|       |             * do the record header (5 bytes) and handshake message header (4
  493|       |             * bytes) last
  494|       |             */
  495|     49|            d = p = &(buf[9]);
  496|       |
  497|     49|            *(p++) = version_major;
  498|     49|            *(p++) = version_minor;
  499|       |
  500|       |            /* Random stuff */
  501|     49|            memcpy(p, s->s3->client_random, SSL3_RANDOM_SIZE);
  502|     49|            p += SSL3_RANDOM_SIZE;
  503|       |
  504|       |            /* Session ID (zero since there is no reuse) */
  505|     49|            *(p++) = 0;
  506|       |
  507|       |            /* Ciphers supported (using SSL 3.0/TLS 1.0 format) */
  508|     49|            i = ssl_cipher_list_to_bytes(s, SSL_get_ciphers(s), &(p[2]),
  509|     49|                                         ssl3_put_cipher_by_char);
  510|     49|            if (i == 0) {
  511|      0|                SSLerr(SSL_F_SSL23_CLIENT_HELLO, SSL_R_NO_CIPHERS_AVAILABLE);
  512|      0|                return -1;
  513|      0|            }
  514|       |#ifdef OPENSSL_MAX_TLS1_2_CIPHER_LENGTH
  515|       |            /*
  516|       |             * Some servers hang if client hello > 256 bytes as hack
  517|       |             * workaround chop number of supported ciphers to keep it well
  518|       |             * below this if we use TLS v1.2
  519|       |             */
  520|       |            if (TLS1_get_version(s) >= TLS1_2_VERSION
  521|       |                && i > OPENSSL_MAX_TLS1_2_CIPHER_LENGTH)
  522|       |                i = OPENSSL_MAX_TLS1_2_CIPHER_LENGTH & ~1;
  523|       |#endif
  524|     49|            s2n(i, p);
  525|     49|            p += i;
  526|       |
  527|       |            /* COMPRESSION */
  528|       |#ifdef OPENSSL_NO_COMP
  529|       |            *(p++) = 1;
  530|       |#else
  531|     49|            if ((s->options & SSL_OP_NO_COMPRESSION)
  532|     49|                || !s->ctx->comp_methods)
  533|     49|                j = 0;
  534|      0|            else
  535|      0|                j = sk_SSL_COMP_num(s->ctx->comp_methods);
  536|     49|            *(p++) = 1 + j;
  537|     49|            for (i = 0; i < j; i++) {
  538|      0|                comp = sk_SSL_COMP_value(s->ctx->comp_methods, i);
  539|      0|                *(p++) = comp->id;
  540|      0|            }
  541|     49|#endif
  542|     49|            *(p++) = 0;         /* Add the NULL method */
  543|       |
  544|     49|#ifndef OPENSSL_NO_TLSEXT
  545|       |            /* TLS extensions */
  546|     49|            if (ssl_prepare_clienthello_tlsext(s) <= 0) {
  547|      0|                SSLerr(SSL_F_SSL23_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);
  548|      0|                return -1;
  549|      0|            }
  550|     49|            if ((p =
  551|     49|                 ssl_add_clienthello_tlsext(s, p,
  552|     49|                                            buf + SSL3_RT_MAX_PLAIN_LENGTH,
  553|     49|                                            &al)) == NULL) {
  554|      0|                ssl3_send_alert(s, SSL3_AL_FATAL, al);
  555|      0|                SSLerr(SSL_F_SSL23_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);
  556|      0|                return -1;
  557|      0|            }
  558|     49|#endif
  559|       |
  560|     49|            l = p - d;
  561|       |
  562|       |            /* fill in 4-byte handshake header */
  563|     49|            d = &(buf[5]);
  564|     49|            *(d++) = SSL3_MT_CLIENT_HELLO;
  565|     49|            l2n3(l, d);
  566|       |
  567|     49|            l += 4;
  568|       |
  569|     49|            if (l > SSL3_RT_MAX_PLAIN_LENGTH) {
  570|      0|                SSLerr(SSL_F_SSL23_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);
  571|      0|                return -1;
  572|      0|            }
  573|       |
  574|       |            /* fill in 5-byte record header */
  575|     49|            d = buf;
  576|     49|            *(d++) = SSL3_RT_HANDSHAKE;
  577|     49|            *(d++) = version_major;
  578|       |            /*
  579|       |             * Some servers hang if we use long client hellos and a record
  580|       |             * number > TLS 1.0.
  581|       |             */
  582|     49|            if (TLS1_get_client_version(s) > TLS1_VERSION)
  583|     49|                *(d++) = 1;
  584|      0|            else
  585|      0|                *(d++) = version_minor;
  586|     49|            s2n((int)l, d);
  587|       |
  588|       |            /* number of bytes to write */
  589|     49|            s->init_num = p - buf;
  590|     49|            s->init_off = 0;
  591|       |
  592|     49|            ssl3_finish_mac(s, &(buf[5]), s->init_num - 5);
  593|     49|        }
  594|       |
  595|     49|        s->state = SSL23_ST_CW_CLNT_HELLO_B;
  596|     49|        s->init_off = 0;
  597|     49|    }
  598|       |
  599|       |    /* SSL3_ST_CW_CLNT_HELLO_B */
  600|     49|    ret = ssl23_write_bytes(s);
  601|       |
  602|     49|    if ((ret >= 2) && s->msg_callback) {
  603|       |        /* Client Hello has been sent; tell msg_callback */
  604|       |
  605|      0|        if (ssl2_compat)
  606|      0|            s->msg_callback(1, SSL2_VERSION, 0, s->init_buf->data + 2,
  607|      0|                            ret - 2, s, s->msg_callback_arg);
  608|      0|        else {
  609|      0|            s->msg_callback(1, version, SSL3_RT_HEADER, s->init_buf->data, 5,
  610|      0|                            s, s->msg_callback_arg);
  611|      0|            s->msg_callback(1, version, SSL3_RT_HANDSHAKE,
  612|      0|                            s->init_buf->data + 5, ret - 5, s,
  613|      0|                            s->msg_callback_arg);
  614|      0|        }
  615|      0|    }
  616|       |
  617|     49|    return ret;
  618|     49|}
s23_clnt.c:ssl23_get_server_hello:
  621|     98|{
  622|     98|    char buf[8];
  623|     98|    unsigned char *p;
  624|     98|    int i;
  625|     98|    int n;
  626|       |
  627|     98|    n = ssl23_read_bytes(s, 7);
  628|       |
  629|     98|    if (n != 7)
  630|     98|        return (n);
  631|      0|    p = s->packet;
  632|       |
  633|      0|    memcpy(buf, p, n);
  634|       |
  635|      0|    if ((p[0] & 0x80) && (p[2] == SSL2_MT_SERVER_HELLO) &&
  636|      0|        (p[5] == 0x00) && (p[6] == 0x02)) {
  637|      0|#ifdef OPENSSL_NO_SSL2
  638|      0|        SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, SSL_R_UNSUPPORTED_PROTOCOL);
  639|      0|        goto err;
  640|       |#else
  641|       |        /* we are talking sslv2 */
  642|       |        /*
  643|       |         * we need to clean up the SSLv3 setup and put in the sslv2 stuff.
  644|       |         */
  645|       |        int ch_len;
  646|       |
  647|       |        if (s->options & SSL_OP_NO_SSLv2) {
  648|       |            SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, SSL_R_UNSUPPORTED_PROTOCOL);
  649|       |            goto err;
  650|       |        }
  651|       |        if (s->s2 == NULL) {
  652|       |            if (!ssl2_new(s))
  653|       |                goto err;
  654|       |        } else
  655|       |            ssl2_clear(s);
  656|       |
  657|       |        if (s->options & SSL_OP_NETSCAPE_CHALLENGE_BUG)
  658|       |            ch_len = SSL2_CHALLENGE_LENGTH;
  659|       |        else
  660|       |            ch_len = SSL2_MAX_CHALLENGE_LENGTH;
  661|       |
  662|       |        /* write out sslv2 challenge */
  663|       |        /*
  664|       |         * Note that ch_len must be <= SSL3_RANDOM_SIZE (32), because it is
  665|       |         * one of SSL2_MAX_CHALLENGE_LENGTH (32) or SSL2_MAX_CHALLENGE_LENGTH
  666|       |         * (16), but leave the check in for futurproofing
  667|       |         */
  668|       |        i = (SSL3_RANDOM_SIZE < ch_len)
  669|       |            ? SSL3_RANDOM_SIZE : ch_len;
  670|       |        s->s2->challenge_length = i;
  671|       |        memcpy(s->s2->challenge,
  672|       |               &(s->s3->client_random[SSL3_RANDOM_SIZE - i]), i);
  673|       |
  674|       |        if (s->s3 != NULL)
  675|       |            ssl3_free(s);
  676|       |
  677|       |        if (!BUF_MEM_grow_clean(s->init_buf,
  678|       |                                SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)) {
  679|       |            SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, ERR_R_BUF_LIB);
  680|       |            goto err;
  681|       |        }
  682|       |
  683|       |        s->state = SSL2_ST_GET_SERVER_HELLO_A;
  684|       |        if (!(s->client_version == SSL2_VERSION))
  685|       |            /*
  686|       |             * use special padding (SSL 3.0 draft/RFC 2246, App. E.2)
  687|       |             */
  688|       |            s->s2->ssl2_rollback = 1;
  689|       |
  690|       |        /*
  691|       |         * setup the 7 bytes we have read so we get them from the sslv2
  692|       |         * buffer
  693|       |         */
  694|       |        s->rstate = SSL_ST_READ_HEADER;
  695|       |        s->packet_length = n;
  696|       |        s->packet = &(s->s2->rbuf[0]);
  697|       |        memcpy(s->packet, buf, n);
  698|       |        s->s2->rbuf_left = n;
  699|       |        s->s2->rbuf_offs = 0;
  700|       |
  701|       |        /* we have already written one */
  702|       |        s->s2->write_sequence = 1;
  703|       |
  704|       |        s->method = SSLv2_client_method();
  705|       |        s->handshake_func = s->method->ssl_connect;
  706|       |#endif
  707|      0|    } else if (p[1] == SSL3_VERSION_MAJOR &&
  708|      0|               p[2] <= TLS1_2_VERSION_MINOR &&
  709|      0|               ((p[0] == SSL3_RT_HANDSHAKE && p[5] == SSL3_MT_SERVER_HELLO) ||
  710|      0|                (p[0] == SSL3_RT_ALERT && p[3] == 0 && p[4] == 2))) {
  711|       |        /* we have sslv3 or tls1 (server hello or alert) */
  712|       |
  713|      0|#ifndef OPENSSL_NO_SSL3
  714|      0|        if ((p[2] == SSL3_VERSION_MINOR) && !(s->options & SSL_OP_NO_SSLv3)) {
  715|       |# ifdef OPENSSL_FIPS
  716|       |            if (FIPS_mode()) {
  717|       |                SSLerr(SSL_F_SSL23_GET_SERVER_HELLO,
  718|       |                       SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);
  719|       |                goto err;
  720|       |            }
  721|       |# endif
  722|      0|            s->version = SSL3_VERSION;
  723|      0|            s->method = SSLv3_client_method();
  724|      0|        } else
  725|      0|#endif
  726|      0|        if ((p[2] == TLS1_VERSION_MINOR) && !(s->options & SSL_OP_NO_TLSv1)) {
  727|      0|            s->version = TLS1_VERSION;
  728|      0|            s->method = TLSv1_client_method();
  729|      0|        } else if ((p[2] == TLS1_1_VERSION_MINOR) &&
  730|      0|                   !(s->options & SSL_OP_NO_TLSv1_1)) {
  731|      0|            s->version = TLS1_1_VERSION;
  732|      0|            s->method = TLSv1_1_client_method();
  733|      0|        } else if ((p[2] == TLS1_2_VERSION_MINOR) &&
  734|      0|                   !(s->options & SSL_OP_NO_TLSv1_2)) {
  735|      0|            s->version = TLS1_2_VERSION;
  736|      0|            s->method = TLSv1_2_client_method();
  737|      0|        } else {
  738|       |            /*
  739|       |             * Unrecognised version, we'll send a protocol version alert using
  740|       |             * our preferred version.
  741|       |             */
  742|      0|            switch(s->client_version) {
  743|      0|            default:
  744|       |                /*
  745|       |                 * Shouldn't happen
  746|       |                 * Fall through
  747|       |                 */
  748|      0|            case TLS1_2_VERSION:
  749|      0|                s->version = TLS1_2_VERSION;
  750|      0|                s->method = TLSv1_2_client_method();
  751|      0|                break;
  752|      0|            case TLS1_1_VERSION:
  753|      0|                s->version = TLS1_1_VERSION;
  754|      0|                s->method = TLSv1_1_client_method();
  755|      0|                break;
  756|      0|            case TLS1_VERSION:
  757|      0|                s->version = TLS1_VERSION;
  758|      0|                s->method = TLSv1_client_method();
  759|      0|                break;
  760|      0|            case SSL3_VERSION:
  761|      0|                s->version = SSL3_VERSION;
  762|      0|                s->method = SSLv3_client_method();
  763|      0|                break;
  764|      0|            }
  765|      0|            SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, SSL_R_UNSUPPORTED_PROTOCOL);
  766|      0|            ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_PROTOCOL_VERSION);
  767|      0|            goto err;
  768|      0|        }
  769|       |
  770|      0|        s->session->ssl_version = s->version;
  771|       |
  772|       |        /* ensure that TLS_MAX_VERSION is up-to-date */
  773|      0|        OPENSSL_assert(s->version <= TLS_MAX_VERSION);
  774|       |
  775|      0|        if (p[0] == SSL3_RT_ALERT && p[5] != SSL3_AL_WARNING) {
  776|       |            /* fatal alert */
  777|       |
  778|      0|            void (*cb) (const SSL *ssl, int type, int val) = NULL;
  779|      0|            int j;
  780|       |
  781|      0|            if (s->info_callback != NULL)
  782|      0|                cb = s->info_callback;
  783|      0|            else if (s->ctx->info_callback != NULL)
  784|      0|                cb = s->ctx->info_callback;
  785|       |
  786|      0|            i = p[5];
  787|      0|            if (cb != NULL) {
  788|      0|                j = (i << 8) | p[6];
  789|      0|                cb(s, SSL_CB_READ_ALERT, j);
  790|      0|            }
  791|       |
  792|      0|            if (s->msg_callback) {
  793|      0|                s->msg_callback(0, s->version, SSL3_RT_HEADER, p, 5, s,
  794|      0|                                s->msg_callback_arg);
  795|      0|                s->msg_callback(0, s->version, SSL3_RT_ALERT, p + 5, 2, s,
  796|      0|                                s->msg_callback_arg);
  797|      0|            }
  798|       |
  799|      0|            s->rwstate = SSL_NOTHING;
  800|      0|            SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, SSL_AD_REASON_OFFSET + p[6]);
  801|      0|            goto err;
  802|      0|        }
  803|       |
  804|      0|        if (!ssl_init_wbio_buffer(s, 1))
  805|      0|            goto err;
  806|       |
  807|       |        /* we are in this state */
  808|      0|        s->state = SSL3_ST_CR_SRVR_HELLO_A;
  809|       |
  810|       |        /*
  811|       |         * put the 7 bytes we have read into the input buffer for SSLv3
  812|       |         */
  813|      0|        s->rstate = SSL_ST_READ_HEADER;
  814|      0|        s->packet_length = n;
  815|      0|        if (s->s3->rbuf.buf == NULL)
  816|      0|            if (!ssl3_setup_read_buffer(s))
  817|      0|                goto err;
  818|      0|        s->packet = &(s->s3->rbuf.buf[0]);
  819|      0|        memcpy(s->packet, buf, n);
  820|      0|        s->s3->rbuf.left = n;
  821|      0|        s->s3->rbuf.offset = 0;
  822|       |
  823|      0|        s->handshake_func = s->method->ssl_connect;
  824|      0|    } else {
  825|      0|        SSLerr(SSL_F_SSL23_GET_SERVER_HELLO, SSL_R_UNKNOWN_PROTOCOL);
  826|      0|        goto err;
  827|      0|    }
  828|      0|    s->init_num = 0;
  829|       |
  830|      0|    return (SSL_connect(s));
  831|      0| err:
  832|      0|    return (-1);
  833|      0|}

ssl23_default_timeout:
   64|     49|{
   65|     49|    return (300);
   66|     49|}
ssl23_num_ciphers:
   69|     98|{
   70|     98|    return (ssl3_num_ciphers()
   71|       |#ifndef OPENSSL_NO_SSL2
   72|       |            + ssl2_num_ciphers()
   73|       |#endif
   74|     98|        );
   75|     98|}
ssl23_get_cipher:
   78|  13.7k|{
   79|  13.7k|    unsigned int uu = ssl3_num_ciphers();
   80|       |
   81|  13.7k|    if (u < uu)
   82|  13.7k|        return (ssl3_get_cipher(u));
   83|      0|    else
   84|       |#ifndef OPENSSL_NO_SSL2
   85|       |        return (ssl2_get_cipher(u - uu));
   86|       |#else
   87|      0|        return (NULL);
   88|  13.7k|#endif
   89|  13.7k|}
ssl23_read:
  128|     49|{
  129|     49|    int n;
  130|       |
  131|     49|    clear_sys_error();
  132|     49|    if (SSL_in_init(s) && (!s->in_handshake)) {
  133|     49|        n = s->handshake_func(s);
  134|     49|        if (n < 0)
  135|      1|            return (n);
  136|     48|        if (n == 0) {
  137|     48|            SSLerr(SSL_F_SSL23_READ, SSL_R_SSL_HANDSHAKE_FAILURE);
  138|     48|            return (-1);
  139|     48|        }
  140|      0|        return (SSL_read(s, buf, len));
  141|     48|    } else {
  142|      0|        ssl_undefined_function(s);
  143|      0|        return (-1);
  144|      0|    }
  145|     49|}

ssl23_write_bytes:
   70|     49|{
   71|     49|    int i, num, tot;
   72|     49|    char *buf;
   73|       |
   74|     49|    buf = s->init_buf->data;
   75|     49|    tot = s->init_off;
   76|     49|    num = s->init_num;
   77|     49|    for (;;) {
   78|     49|        s->rwstate = SSL_WRITING;
   79|     49|        i = BIO_write(s->wbio, &(buf[tot]), num);
   80|     49|        if (i <= 0) {
   81|      0|            s->init_off = tot;
   82|      0|            s->init_num = num;
   83|      0|            return i;
   84|      0|        }
   85|     49|        s->rwstate = SSL_NOTHING;
   86|     49|        if (i == num)
   87|     49|            return (tot + i);
   88|       |
   89|      0|        num -= i;
   90|      0|        tot += i;
   91|      0|    }
   92|     49|}
ssl23_read_bytes:
   99|     98|{
  100|     98|    unsigned char *p;
  101|     98|    int j;
  102|       |
  103|     98|    if (s->packet_length < (unsigned int)n) {
  104|     98|        p = s->packet;
  105|       |
  106|     98|        for (;;) {
  107|     98|            s->rwstate = SSL_READING;
  108|     98|            j = BIO_read(s->rbio, (char *)&(p[s->packet_length]),
  109|     98|                         n - s->packet_length);
  110|     98|            if (j <= 0)
  111|     98|                return j;
  112|      0|            s->rwstate = SSL_NOTHING;
  113|      0|            s->packet_length += j;
  114|      0|            if (s->packet_length >= (unsigned int)n)
  115|      0|                return (s->packet_length);
  116|      0|        }
  117|     98|    }
  118|      0|    return (n);
  119|     98|}

ssl3_setup_read_buffer:
  658|     49|{
  659|     49|    unsigned char *p;
  660|     49|    size_t len, align = 0, headerlen;
  661|       |
  662|     49|    if (SSL_IS_DTLS(s))
  663|      0|        headerlen = DTLS1_RT_HEADER_LENGTH;
  664|     49|    else
  665|     49|        headerlen = SSL3_RT_HEADER_LENGTH;
  666|       |
  667|     49|#if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0
  668|     49|    align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);
  669|     49|#endif
  670|       |
  671|     49|    if (s->s3->rbuf.buf == NULL) {
  672|     49|        len = SSL3_RT_MAX_PLAIN_LENGTH
  673|     49|            + SSL3_RT_MAX_ENCRYPTED_OVERHEAD + headerlen + align;
  674|     49|        if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER) {
  675|     49|            s->s3->init_extra = 1;
  676|     49|            len += SSL3_RT_MAX_EXTRA;
  677|     49|        }
  678|     49|#ifndef OPENSSL_NO_COMP
  679|     49|        if (!(s->options & SSL_OP_NO_COMPRESSION))
  680|      0|            len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;
  681|     49|#endif
  682|     49|        if ((p = freelist_extract(s->ctx, 1, len)) == NULL)
  683|      0|            goto err;
  684|     49|        s->s3->rbuf.buf = p;
  685|     49|        s->s3->rbuf.len = len;
  686|     49|    }
  687|       |
  688|     49|    s->packet = &(s->s3->rbuf.buf[0]);
  689|     49|    return 1;
  690|       |
  691|      0| err:
  692|      0|    SSLerr(SSL_F_SSL3_SETUP_READ_BUFFER, ERR_R_MALLOC_FAILURE);
  693|      0|    return 0;
  694|     49|}
ssl3_setup_write_buffer:
  697|     49|{
  698|     49|    unsigned char *p;
  699|     49|    size_t len, align = 0, headerlen;
  700|       |
  701|     49|    if (SSL_IS_DTLS(s))
  702|      0|        headerlen = DTLS1_RT_HEADER_LENGTH + 1;
  703|     49|    else
  704|     49|        headerlen = SSL3_RT_HEADER_LENGTH;
  705|       |
  706|     49|#if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0
  707|     49|    align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);
  708|     49|#endif
  709|       |
  710|     49|    if (s->s3->wbuf.buf == NULL) {
  711|     49|        len = s->max_send_fragment
  712|     49|            + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD + headerlen + align;
  713|     49|#ifndef OPENSSL_NO_COMP
  714|     49|        if (!(s->options & SSL_OP_NO_COMPRESSION))
  715|      0|            len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;
  716|     49|#endif
  717|     49|        if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))
  718|     49|            len += headerlen + align + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;
  719|       |
  720|     49|        if ((p = freelist_extract(s->ctx, 0, len)) == NULL)
  721|      0|            goto err;
  722|     49|        s->s3->wbuf.buf = p;
  723|     49|        s->s3->wbuf.len = len;
  724|     49|    }
  725|       |
  726|     49|    return 1;
  727|       |
  728|      0| err:
  729|      0|    SSLerr(SSL_F_SSL3_SETUP_WRITE_BUFFER, ERR_R_MALLOC_FAILURE);
  730|      0|    return 0;
  731|     49|}
ssl3_setup_buffers:
  734|     49|{
  735|     49|    if (!ssl3_setup_read_buffer(s))
  736|      0|        return 0;
  737|     49|    if (!ssl3_setup_write_buffer(s))
  738|      0|        return 0;
  739|     49|    return 1;
  740|     49|}
ssl3_release_write_buffer:
  743|     49|{
  744|     49|    if (s->s3->wbuf.buf != NULL) {
  745|     49|        freelist_insert(s->ctx, 0, s->s3->wbuf.len, s->s3->wbuf.buf);
  746|     49|        s->s3->wbuf.buf = NULL;
  747|     49|    }
  748|     49|    return 1;
  749|     49|}
ssl3_release_read_buffer:
  752|     49|{
  753|     49|    if (s->s3->rbuf.buf != NULL) {
  754|     49|        freelist_insert(s->ctx, 1, s->s3->rbuf.len, s->s3->rbuf.buf);
  755|     49|        s->s3->rbuf.buf = NULL;
  756|     49|    }
  757|     49|    return 1;
  758|     49|}
s3_both.c:freelist_extract:
  609|     98|{
  610|     98|    SSL3_BUF_FREELIST *list;
  611|     98|    SSL3_BUF_FREELIST_ENTRY *ent = NULL;
  612|     98|    void *result = NULL;
  613|       |
  614|     98|    CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  615|     98|    list = for_read ? ctx->rbuf_freelist : ctx->wbuf_freelist;
  616|     98|    if (list != NULL && sz == (int)list->chunklen)
  617|      0|        ent = list->head;
  618|     98|    if (ent != NULL) {
  619|      0|        list->head = ent->next;
  620|      0|        result = ent;
  621|      0|        if (--list->len == 0)
  622|      0|            list->chunklen = 0;
  623|      0|    }
  624|     98|    CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  625|     98|    if (!result)
  626|     98|        result = OPENSSL_malloc(sz);
  627|     98|    return result;
  628|     98|}
s3_both.c:freelist_insert:
  631|     98|{
  632|     98|    SSL3_BUF_FREELIST *list;
  633|     98|    SSL3_BUF_FREELIST_ENTRY *ent;
  634|       |
  635|     98|    CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  636|     98|    list = for_read ? ctx->rbuf_freelist : ctx->wbuf_freelist;
  637|     98|    if (list != NULL &&
  638|     98|        (sz == list->chunklen || list->chunklen == 0) &&
  639|     98|        list->len < ctx->freelist_max_len && sz >= sizeof(*ent)) {
  640|     98|        list->chunklen = sz;
  641|     98|        ent = mem;
  642|     98|        ent->next = list->head;
  643|     98|        list->head = ent;
  644|     98|        ++list->len;
  645|     98|        mem = NULL;
  646|     98|    }
  647|       |
  648|     98|    CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  649|     98|    if (mem)
  650|      0|        OPENSSL_free(mem);
  651|     98|}

ssl3_cleanup_key_block:
  493|    245|{
  494|    245|    if (s->s3->tmp.key_block != NULL) {
  495|      0|        OPENSSL_cleanse(s->s3->tmp.key_block, s->s3->tmp.key_block_length);
  496|      0|        OPENSSL_free(s->s3->tmp.key_block);
  497|      0|        s->s3->tmp.key_block = NULL;
  498|      0|    }
  499|    245|    s->s3->tmp.key_block_length = 0;
  500|    245|}
ssl3_init_finished_mac:
  577|     49|{
  578|     49|    if (s->s3->handshake_buffer)
  579|      0|        BIO_free(s->s3->handshake_buffer);
  580|     49|    if (s->s3->handshake_dgst)
  581|      0|        ssl3_free_digest_list(s);
  582|     49|    s->s3->handshake_buffer = BIO_new(BIO_s_mem());
  583|     49|    if (s->s3->handshake_buffer == NULL)
  584|      0|        return 0;
  585|     49|    (void)BIO_set_close(s->s3->handshake_buffer, BIO_CLOSE);
  586|     49|    return 1;
  587|     49|}
ssl3_finish_mac:
  603|     49|{
  604|     49|    if (s->s3->handshake_buffer
  605|     49|        && !(s->s3->flags & TLS1_FLAGS_KEEP_HANDSHAKE)) {
  606|     49|        BIO_write(s->s3->handshake_buffer, (void *)buf, len);
  607|     49|    } else {
  608|      0|        int i;
  609|      0|        for (i = 0; i < SSL_MAX_DIGEST; i++) {
  610|      0|            if (s->s3->handshake_dgst[i] != NULL)
  611|      0|                EVP_DigestUpdate(s->s3->handshake_dgst[i], buf, len);
  612|      0|        }
  613|      0|    }
  614|     49|}

ssl3_num_ciphers:
 2982|  13.8k|{
 2983|  13.8k|    return (SSL3_NUM_CIPHERS);
 2984|  13.8k|}
ssl3_get_cipher:
 2987|  13.7k|{
 2988|  13.7k|    if (u < SSL3_NUM_CIPHERS)
 2989|  13.7k|        return (&(ssl3_ciphers[SSL3_NUM_CIPHERS - 1 - u]));
 2990|      0|    else
 2991|      0|        return (NULL);
 2992|  13.7k|}
ssl3_new:
 3018|     49|{
 3019|     49|    SSL3_STATE *s3;
 3020|       |
 3021|     49|    if ((s3 = OPENSSL_malloc(sizeof *s3)) == NULL)
 3022|      0|        goto err;
 3023|     49|    memset(s3, 0, sizeof *s3);
 3024|     49|    memset(s3->rrec.seq_num, 0, sizeof(s3->rrec.seq_num));
 3025|     49|    memset(s3->wrec.seq_num, 0, sizeof(s3->wrec.seq_num));
 3026|       |
 3027|     49|    s->s3 = s3;
 3028|       |
 3029|     49|#ifndef OPENSSL_NO_SRP
 3030|     49|    SSL_SRP_CTX_init(s);
 3031|     49|#endif
 3032|     49|    s->method->ssl_clear(s);
 3033|     49|    return (1);
 3034|      0| err:
 3035|      0|    return (0);
 3036|     49|}
ssl3_free:
 3039|     49|{
 3040|     49|    if (s == NULL || s->s3 == NULL)
 3041|      0|        return;
 3042|       |
 3043|       |#ifdef TLSEXT_TYPE_opaque_prf_input
 3044|       |    if (s->s3->client_opaque_prf_input != NULL)
 3045|       |        OPENSSL_free(s->s3->client_opaque_prf_input);
 3046|       |    if (s->s3->server_opaque_prf_input != NULL)
 3047|       |        OPENSSL_free(s->s3->server_opaque_prf_input);
 3048|       |#endif
 3049|       |
 3050|     49|    ssl3_cleanup_key_block(s);
 3051|     49|    if (s->s3->rbuf.buf != NULL)
 3052|     49|        ssl3_release_read_buffer(s);
 3053|     49|    if (s->s3->wbuf.buf != NULL)
 3054|     49|        ssl3_release_write_buffer(s);
 3055|     49|    if (s->s3->rrec.comp != NULL)
 3056|      0|        OPENSSL_free(s->s3->rrec.comp);
 3057|     49|#ifndef OPENSSL_NO_DH
 3058|     49|    if (s->s3->tmp.dh != NULL)
 3059|      0|        DH_free(s->s3->tmp.dh);
 3060|     49|#endif
 3061|     49|#ifndef OPENSSL_NO_ECDH
 3062|     49|    if (s->s3->tmp.ecdh != NULL)
 3063|      0|        EC_KEY_free(s->s3->tmp.ecdh);
 3064|     49|#endif
 3065|       |
 3066|     49|    if (s->s3->tmp.ca_names != NULL)
 3067|     49|        sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);
 3068|     49|    if (s->s3->handshake_buffer) {
 3069|     49|        BIO_free(s->s3->handshake_buffer);
 3070|     49|    }
 3071|     49|    if (s->s3->handshake_dgst)
 3072|      0|        ssl3_free_digest_list(s);
 3073|     49|#ifndef OPENSSL_NO_TLSEXT
 3074|     49|    if (s->s3->alpn_selected)
 3075|      0|        OPENSSL_free(s->s3->alpn_selected);
 3076|     49|#endif
 3077|       |
 3078|     49|#ifndef OPENSSL_NO_SRP
 3079|     49|    SSL_SRP_CTX_free(s);
 3080|     49|#endif
 3081|     49|    OPENSSL_cleanse(s->s3, sizeof *s->s3);
 3082|     49|    OPENSSL_free(s->s3);
 3083|     49|    s->s3 = NULL;
 3084|     49|}
ssl3_clear:
 3087|    196|{
 3088|    196|    unsigned char *rp, *wp;
 3089|    196|    size_t rlen, wlen;
 3090|    196|    int init_extra;
 3091|       |
 3092|       |#ifdef TLSEXT_TYPE_opaque_prf_input
 3093|       |    if (s->s3->client_opaque_prf_input != NULL)
 3094|       |        OPENSSL_free(s->s3->client_opaque_prf_input);
 3095|       |    s->s3->client_opaque_prf_input = NULL;
 3096|       |    if (s->s3->server_opaque_prf_input != NULL)
 3097|       |        OPENSSL_free(s->s3->server_opaque_prf_input);
 3098|       |    s->s3->server_opaque_prf_input = NULL;
 3099|       |#endif
 3100|       |
 3101|    196|    ssl3_cleanup_key_block(s);
 3102|    196|    if (s->s3->tmp.ca_names != NULL)
 3103|    196|        sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);
 3104|       |
 3105|    196|    if (s->s3->rrec.comp != NULL) {
 3106|      0|        OPENSSL_free(s->s3->rrec.comp);
 3107|      0|        s->s3->rrec.comp = NULL;
 3108|      0|    }
 3109|    196|#ifndef OPENSSL_NO_DH
 3110|    196|    if (s->s3->tmp.dh != NULL) {
 3111|      0|        DH_free(s->s3->tmp.dh);
 3112|      0|        s->s3->tmp.dh = NULL;
 3113|      0|    }
 3114|    196|#endif
 3115|    196|#ifndef OPENSSL_NO_ECDH
 3116|    196|    if (s->s3->tmp.ecdh != NULL) {
 3117|      0|        EC_KEY_free(s->s3->tmp.ecdh);
 3118|      0|        s->s3->tmp.ecdh = NULL;
 3119|      0|    }
 3120|    196|#endif
 3121|    196|#ifndef OPENSSL_NO_TLSEXT
 3122|    196|# ifndef OPENSSL_NO_EC
 3123|    196|    s->s3->is_probably_safari = 0;
 3124|    196|# endif                         /* !OPENSSL_NO_EC */
 3125|    196|#endif                          /* !OPENSSL_NO_TLSEXT */
 3126|       |
 3127|    196|    rp = s->s3->rbuf.buf;
 3128|    196|    wp = s->s3->wbuf.buf;
 3129|    196|    rlen = s->s3->rbuf.len;
 3130|    196|    wlen = s->s3->wbuf.len;
 3131|    196|    init_extra = s->s3->init_extra;
 3132|    196|    if (s->s3->handshake_buffer) {
 3133|      0|        BIO_free(s->s3->handshake_buffer);
 3134|      0|        s->s3->handshake_buffer = NULL;
 3135|      0|    }
 3136|    196|    if (s->s3->handshake_dgst) {
 3137|      0|        ssl3_free_digest_list(s);
 3138|      0|    }
 3139|    196|#if !defined(OPENSSL_NO_TLSEXT)
 3140|    196|    if (s->s3->alpn_selected) {
 3141|      0|        OPENSSL_free(s->s3->alpn_selected);
 3142|      0|        s->s3->alpn_selected = NULL;
 3143|      0|    }
 3144|    196|#endif
 3145|    196|    memset(s->s3, 0, sizeof *s->s3);
 3146|    196|    s->s3->rbuf.buf = rp;
 3147|    196|    s->s3->wbuf.buf = wp;
 3148|    196|    s->s3->rbuf.len = rlen;
 3149|    196|    s->s3->wbuf.len = wlen;
 3150|    196|    s->s3->init_extra = init_extra;
 3151|       |
 3152|    196|    ssl_free_wbio_buffer(s);
 3153|       |
 3154|    196|    s->packet_length = 0;
 3155|    196|    s->s3->renegotiate = 0;
 3156|    196|    s->s3->total_renegotiations = 0;
 3157|    196|    s->s3->num_renegotiations = 0;
 3158|    196|    s->s3->in_read_app_data = 0;
 3159|    196|    s->version = SSL3_VERSION;
 3160|       |
 3161|    196|#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
 3162|    196|    if (s->next_proto_negotiated) {
 3163|      0|        OPENSSL_free(s->next_proto_negotiated);
 3164|      0|        s->next_proto_negotiated = NULL;
 3165|      0|        s->next_proto_negotiated_len = 0;
 3166|      0|    }
 3167|    196|#endif
 3168|    196|}
ssl3_ctrl:
 3181|     48|{
 3182|     48|    int ret = 0;
 3183|       |
 3184|     48|#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_RSA)
 3185|     48|    if (
 3186|     48|# ifndef OPENSSL_NO_RSA
 3187|     48|           cmd == SSL_CTRL_SET_TMP_RSA || cmd == SSL_CTRL_SET_TMP_RSA_CB ||
 3188|     48|# endif
 3189|     48|# ifndef OPENSSL_NO_DSA
 3190|     48|           cmd == SSL_CTRL_SET_TMP_DH || cmd == SSL_CTRL_SET_TMP_DH_CB ||
 3191|     48|# endif
 3192|     48|           0) {
 3193|      0|        if (!ssl_cert_inst(&s->cert)) {
 3194|      0|            SSLerr(SSL_F_SSL3_CTRL, ERR_R_MALLOC_FAILURE);
 3195|      0|            return (0);
 3196|      0|        }
 3197|      0|    }
 3198|     48|#endif
 3199|       |
 3200|     48|    switch (cmd) {
 3201|      0|    case SSL_CTRL_GET_SESSION_REUSED:
 3202|      0|        ret = s->hit;
 3203|      0|        break;
 3204|      0|    case SSL_CTRL_GET_CLIENT_CERT_REQUEST:
 3205|      0|        break;
 3206|      0|    case SSL_CTRL_GET_NUM_RENEGOTIATIONS:
 3207|      0|        ret = s->s3->num_renegotiations;
 3208|      0|        break;
 3209|      0|    case SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS:
 3210|      0|        ret = s->s3->num_renegotiations;
 3211|      0|        s->s3->num_renegotiations = 0;
 3212|      0|        break;
 3213|      0|    case SSL_CTRL_GET_TOTAL_RENEGOTIATIONS:
 3214|      0|        ret = s->s3->total_renegotiations;
 3215|      0|        break;
 3216|      0|    case SSL_CTRL_GET_FLAGS:
 3217|      0|        ret = (int)(s->s3->flags);
 3218|      0|        break;
 3219|      0|#ifndef OPENSSL_NO_RSA
 3220|      0|    case SSL_CTRL_NEED_TMP_RSA:
 3221|      0|        if ((s->cert != NULL) && (s->cert->rsa_tmp == NULL) &&
 3222|      0|            ((s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
 3223|      0|             (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) >
 3224|      0|              (512 / 8))))
 3225|      0|            ret = 1;
 3226|      0|        break;
 3227|      0|    case SSL_CTRL_SET_TMP_RSA:
 3228|      0|        {
 3229|      0|            RSA *rsa = (RSA *)parg;
 3230|      0|            if (rsa == NULL) {
 3231|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
 3232|      0|                return (ret);
 3233|      0|            }
 3234|      0|            if ((rsa = RSAPrivateKey_dup(rsa)) == NULL) {
 3235|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_RSA_LIB);
 3236|      0|                return (ret);
 3237|      0|            }
 3238|      0|            if (s->cert->rsa_tmp != NULL)
 3239|      0|                RSA_free(s->cert->rsa_tmp);
 3240|      0|            s->cert->rsa_tmp = rsa;
 3241|      0|            ret = 1;
 3242|      0|        }
 3243|      0|        break;
 3244|      0|    case SSL_CTRL_SET_TMP_RSA_CB:
 3245|      0|        {
 3246|      0|            SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
 3247|      0|            return (ret);
 3248|      0|        }
 3249|      0|        break;
 3250|      0|#endif
 3251|      0|#ifndef OPENSSL_NO_DH
 3252|      0|    case SSL_CTRL_SET_TMP_DH:
 3253|      0|        {
 3254|      0|            DH *dh = (DH *)parg;
 3255|      0|            if (dh == NULL) {
 3256|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
 3257|      0|                return (ret);
 3258|      0|            }
 3259|      0|            if ((dh = DHparams_dup(dh)) == NULL) {
 3260|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
 3261|      0|                return (ret);
 3262|      0|            }
 3263|      0|            if (s->cert->dh_tmp != NULL)
 3264|      0|                DH_free(s->cert->dh_tmp);
 3265|      0|            s->cert->dh_tmp = dh;
 3266|      0|            ret = 1;
 3267|      0|        }
 3268|      0|        break;
 3269|      0|    case SSL_CTRL_SET_TMP_DH_CB:
 3270|      0|        {
 3271|      0|            SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
 3272|      0|            return (ret);
 3273|      0|        }
 3274|      0|        break;
 3275|      0|#endif
 3276|      0|#ifndef OPENSSL_NO_ECDH
 3277|      0|    case SSL_CTRL_SET_TMP_ECDH:
 3278|      0|        {
 3279|      0|            EC_KEY *ecdh = NULL;
 3280|       |
 3281|      0|            if (parg == NULL) {
 3282|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
 3283|      0|                return (ret);
 3284|      0|            }
 3285|      0|            if (!EC_KEY_up_ref((EC_KEY *)parg)) {
 3286|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_ECDH_LIB);
 3287|      0|                return (ret);
 3288|      0|            }
 3289|      0|            ecdh = (EC_KEY *)parg;
 3290|      0|            if (!(s->options & SSL_OP_SINGLE_ECDH_USE)) {
 3291|      0|                if (!EC_KEY_generate_key(ecdh)) {
 3292|      0|                    EC_KEY_free(ecdh);
 3293|      0|                    SSLerr(SSL_F_SSL3_CTRL, ERR_R_ECDH_LIB);
 3294|      0|                    return (ret);
 3295|      0|                }
 3296|      0|            }
 3297|      0|            if (s->cert->ecdh_tmp != NULL)
 3298|      0|                EC_KEY_free(s->cert->ecdh_tmp);
 3299|      0|            s->cert->ecdh_tmp = ecdh;
 3300|      0|            ret = 1;
 3301|      0|        }
 3302|      0|        break;
 3303|      0|    case SSL_CTRL_SET_TMP_ECDH_CB:
 3304|      0|        {
 3305|      0|            SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
 3306|      0|            return (ret);
 3307|      0|        }
 3308|      0|        break;
 3309|      0|#endif                          /* !OPENSSL_NO_ECDH */
 3310|      0|#ifndef OPENSSL_NO_TLSEXT
 3311|     48|    case SSL_CTRL_SET_TLSEXT_HOSTNAME:
 3312|     48|        if (larg == TLSEXT_NAMETYPE_host_name) {
 3313|     48|            size_t len;
 3314|       |
 3315|     48|            if (s->tlsext_hostname != NULL)
 3316|      0|                OPENSSL_free(s->tlsext_hostname);
 3317|     48|            s->tlsext_hostname = NULL;
 3318|       |
 3319|     48|            ret = 1;
 3320|     48|            if (parg == NULL)
 3321|      0|                break;
 3322|     48|            len = strlen((char *)parg);
 3323|     48|            if (len == 0 || len > TLSEXT_MAXLEN_host_name) {
 3324|      1|                SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME);
 3325|      1|                return 0;
 3326|      1|            }
 3327|     47|            if ((s->tlsext_hostname = BUF_strdup((char *)parg)) == NULL) {
 3328|      0|                SSLerr(SSL_F_SSL3_CTRL, ERR_R_INTERNAL_ERROR);
 3329|      0|                return 0;
 3330|      0|            }
 3331|     47|        } else {
 3332|      0|            SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
 3333|      0|            return 0;
 3334|      0|        }
 3335|     47|        break;
 3336|     47|    case SSL_CTRL_SET_TLSEXT_DEBUG_ARG:
 3337|      0|        s->tlsext_debug_arg = parg;
 3338|      0|        ret = 1;
 3339|      0|        break;
 3340|       |
 3341|       |# ifdef TLSEXT_TYPE_opaque_prf_input
 3342|       |    case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT:
 3343|       |        if (larg > 12288) {     /* actual internal limit is 2^16 for the
 3344|       |                                 * complete hello message * (including the
 3345|       |                                 * cert chain and everything) */
 3346|       |            SSLerr(SSL_F_SSL3_CTRL, SSL_R_OPAQUE_PRF_INPUT_TOO_LONG);
 3347|       |            break;
 3348|       |        }
 3349|       |        if (s->tlsext_opaque_prf_input != NULL)
 3350|       |            OPENSSL_free(s->tlsext_opaque_prf_input);
 3351|       |        if ((size_t)larg == 0)
 3352|       |            s->tlsext_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte
 3353|       |                                                             * just to get
 3354|       |                                                             * non-NULL */
 3355|       |        else
 3356|       |            s->tlsext_opaque_prf_input = BUF_memdup(parg, (size_t)larg);
 3357|       |        if (s->tlsext_opaque_prf_input != NULL) {
 3358|       |            s->tlsext_opaque_prf_input_len = (size_t)larg;
 3359|       |            ret = 1;
 3360|       |        } else
 3361|       |            s->tlsext_opaque_prf_input_len = 0;
 3362|       |        break;
 3363|       |# endif
 3364|       |
 3365|      0|    case SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE:
 3366|      0|        s->tlsext_status_type = larg;
 3367|      0|        ret = 1;
 3368|      0|        break;
 3369|       |
 3370|      0|    case SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS:
 3371|      0|        *(STACK_OF(X509_EXTENSION) **)parg = s->tlsext_ocsp_exts;
 3372|      0|        ret = 1;
 3373|      0|        break;
 3374|       |
 3375|      0|    case SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS:
 3376|      0|        s->tlsext_ocsp_exts = parg;
 3377|      0|        ret = 1;
 3378|      0|        break;
 3379|       |
 3380|      0|    case SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS:
 3381|      0|        *(STACK_OF(OCSP_RESPID) **)parg = s->tlsext_ocsp_ids;
 3382|      0|        ret = 1;
 3383|      0|        break;
 3384|       |
 3385|      0|    case SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS:
 3386|      0|        s->tlsext_ocsp_ids = parg;
 3387|      0|        ret = 1;
 3388|      0|        break;
 3389|       |
 3390|      0|    case SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP:
 3391|      0|        *(unsigned char **)parg = s->tlsext_ocsp_resp;
 3392|      0|        return s->tlsext_ocsp_resplen;
 3393|       |
 3394|      0|    case SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP:
 3395|      0|        if (s->tlsext_ocsp_resp)
 3396|      0|            OPENSSL_free(s->tlsext_ocsp_resp);
 3397|      0|        s->tlsext_ocsp_resp = parg;
 3398|      0|        s->tlsext_ocsp_resplen = larg;
 3399|      0|        ret = 1;
 3400|      0|        break;
 3401|       |
 3402|      0|# ifndef OPENSSL_NO_HEARTBEATS
 3403|      0|    case SSL_CTRL_TLS_EXT_SEND_HEARTBEAT:
 3404|      0|        if (SSL_IS_DTLS(s))
 3405|      0|            ret = dtls1_heartbeat(s);
 3406|      0|        else
 3407|      0|            ret = tls1_heartbeat(s);
 3408|      0|        break;
 3409|       |
 3410|      0|    case SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING:
 3411|      0|        ret = s->tlsext_hb_pending;
 3412|      0|        break;
 3413|       |
 3414|      0|    case SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS:
 3415|      0|        if (larg)
 3416|      0|            s->tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
 3417|      0|        else
 3418|      0|            s->tlsext_heartbeat &= ~SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
 3419|      0|        ret = 1;
 3420|      0|        break;
 3421|      0|# endif
 3422|       |
 3423|      0|#endif                          /* !OPENSSL_NO_TLSEXT */
 3424|       |
 3425|      0|    case SSL_CTRL_CHAIN:
 3426|      0|        if (larg)
 3427|      0|            return ssl_cert_set1_chain(s->cert, (STACK_OF(X509) *)parg);
 3428|      0|        else
 3429|      0|            return ssl_cert_set0_chain(s->cert, (STACK_OF(X509) *)parg);
 3430|       |
 3431|      0|    case SSL_CTRL_CHAIN_CERT:
 3432|      0|        if (larg)
 3433|      0|            return ssl_cert_add1_chain_cert(s->cert, (X509 *)parg);
 3434|      0|        else
 3435|      0|            return ssl_cert_add0_chain_cert(s->cert, (X509 *)parg);
 3436|       |
 3437|      0|    case SSL_CTRL_GET_CHAIN_CERTS:
 3438|      0|        *(STACK_OF(X509) **)parg = s->cert->key->chain;
 3439|      0|        break;
 3440|       |
 3441|      0|    case SSL_CTRL_SELECT_CURRENT_CERT:
 3442|      0|        return ssl_cert_select_current(s->cert, (X509 *)parg);
 3443|       |
 3444|      0|    case SSL_CTRL_SET_CURRENT_CERT:
 3445|      0|        if (larg == SSL_CERT_SET_SERVER) {
 3446|      0|            CERT_PKEY *cpk;
 3447|      0|            const SSL_CIPHER *cipher;
 3448|      0|            if (!s->server)
 3449|      0|                return 0;
 3450|      0|            cipher = s->s3->tmp.new_cipher;
 3451|      0|            if (!cipher)
 3452|      0|                return 0;
 3453|       |            /*
 3454|       |             * No certificate for unauthenticated ciphersuites or using SRP
 3455|       |             * authentication
 3456|       |             */
 3457|      0|            if (cipher->algorithm_auth & (SSL_aNULL | SSL_aSRP))
 3458|      0|                return 2;
 3459|      0|            cpk = ssl_get_server_send_pkey(s);
 3460|      0|            if (!cpk)
 3461|      0|                return 0;
 3462|      0|            s->cert->key = cpk;
 3463|      0|            return 1;
 3464|      0|        }
 3465|      0|        return ssl_cert_set_current(s->cert, larg);
 3466|       |
 3467|      0|#ifndef OPENSSL_NO_EC
 3468|      0|    case SSL_CTRL_GET_CURVES:
 3469|      0|        {
 3470|      0|            unsigned char *clist;
 3471|      0|            size_t clistlen;
 3472|      0|            if (!s->session)
 3473|      0|                return 0;
 3474|      0|            clist = s->session->tlsext_ellipticcurvelist;
 3475|      0|            clistlen = s->session->tlsext_ellipticcurvelist_length / 2;
 3476|      0|            if (parg) {
 3477|      0|                size_t i;
 3478|      0|                int *cptr = parg;
 3479|      0|                unsigned int cid, nid;
 3480|      0|                for (i = 0; i < clistlen; i++) {
 3481|      0|                    n2s(clist, cid);
 3482|      0|                    nid = tls1_ec_curve_id2nid(cid);
 3483|      0|                    if (nid != 0)
 3484|      0|                        cptr[i] = nid;
 3485|      0|                    else
 3486|      0|                        cptr[i] = TLSEXT_nid_unknown | cid;
 3487|      0|                }
 3488|      0|            }
 3489|      0|            return (int)clistlen;
 3490|      0|        }
 3491|       |
 3492|      0|    case SSL_CTRL_SET_CURVES:
 3493|      0|        return tls1_set_curves(&s->tlsext_ellipticcurvelist,
 3494|      0|                               &s->tlsext_ellipticcurvelist_length,
 3495|      0|                               parg, larg);
 3496|       |
 3497|      0|    case SSL_CTRL_SET_CURVES_LIST:
 3498|      0|        return tls1_set_curves_list(&s->tlsext_ellipticcurvelist,
 3499|      0|                                    &s->tlsext_ellipticcurvelist_length,
 3500|      0|                                    parg);
 3501|       |
 3502|      0|    case SSL_CTRL_GET_SHARED_CURVE:
 3503|      0|        return tls1_shared_curve(s, larg);
 3504|       |
 3505|      0|# ifndef OPENSSL_NO_ECDH
 3506|      0|    case SSL_CTRL_SET_ECDH_AUTO:
 3507|      0|        s->cert->ecdh_tmp_auto = larg;
 3508|      0|        return 1;
 3509|      0|# endif
 3510|      0|#endif
 3511|      0|    case SSL_CTRL_SET_SIGALGS:
 3512|      0|        return tls1_set_sigalgs(s->cert, parg, larg, 0);
 3513|       |
 3514|      0|    case SSL_CTRL_SET_SIGALGS_LIST:
 3515|      0|        return tls1_set_sigalgs_list(s->cert, parg, 0);
 3516|       |
 3517|      0|    case SSL_CTRL_SET_CLIENT_SIGALGS:
 3518|      0|        return tls1_set_sigalgs(s->cert, parg, larg, 1);
 3519|       |
 3520|      0|    case SSL_CTRL_SET_CLIENT_SIGALGS_LIST:
 3521|      0|        return tls1_set_sigalgs_list(s->cert, parg, 1);
 3522|       |
 3523|      0|    case SSL_CTRL_GET_CLIENT_CERT_TYPES:
 3524|      0|        {
 3525|      0|            const unsigned char **pctype = parg;
 3526|      0|            if (s->server || !s->s3->tmp.cert_req)
 3527|      0|                return 0;
 3528|      0|            if (s->cert->ctypes) {
 3529|      0|                if (pctype)
 3530|      0|                    *pctype = s->cert->ctypes;
 3531|      0|                return (int)s->cert->ctype_num;
 3532|      0|            }
 3533|      0|            if (pctype)
 3534|      0|                *pctype = (unsigned char *)s->s3->tmp.ctype;
 3535|      0|            return s->s3->tmp.ctype_num;
 3536|      0|        }
 3537|       |
 3538|      0|    case SSL_CTRL_SET_CLIENT_CERT_TYPES:
 3539|      0|        if (!s->server)
 3540|      0|            return 0;
 3541|      0|        return ssl3_set_req_cert_type(s->cert, parg, larg);
 3542|       |
 3543|      0|    case SSL_CTRL_BUILD_CERT_CHAIN:
 3544|      0|        return ssl_build_cert_chain(s->cert, s->ctx->cert_store, larg);
 3545|       |
 3546|      0|    case SSL_CTRL_SET_VERIFY_CERT_STORE:
 3547|      0|        return ssl_cert_set_cert_store(s->cert, parg, 0, larg);
 3548|       |
 3549|      0|    case SSL_CTRL_SET_CHAIN_CERT_STORE:
 3550|      0|        return ssl_cert_set_cert_store(s->cert, parg, 1, larg);
 3551|       |
 3552|      0|    case SSL_CTRL_GET_PEER_SIGNATURE_NID:
 3553|      0|        if (SSL_USE_SIGALGS(s)) {
 3554|      0|            if (s->session && s->session->sess_cert) {
 3555|      0|                const EVP_MD *sig;
 3556|      0|                sig = s->session->sess_cert->peer_key->digest;
 3557|      0|                if (sig) {
 3558|      0|                    *(int *)parg = EVP_MD_type(sig);
 3559|      0|                    return 1;
 3560|      0|                }
 3561|      0|            }
 3562|      0|            return 0;
 3563|      0|        }
 3564|       |        /* Might want to do something here for other versions */
 3565|      0|        else
 3566|      0|            return 0;
 3567|       |
 3568|      0|    case SSL_CTRL_GET_SERVER_TMP_KEY:
 3569|      0|        if (s->server || !s->session || !s->session->sess_cert)
 3570|      0|            return 0;
 3571|      0|        else {
 3572|      0|            SESS_CERT *sc;
 3573|      0|            EVP_PKEY *ptmp;
 3574|      0|            int rv = 0;
 3575|      0|            sc = s->session->sess_cert;
 3576|      0|#if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_ECDH)
 3577|      0|            if (!sc->peer_rsa_tmp && !sc->peer_dh_tmp && !sc->peer_ecdh_tmp)
 3578|      0|                return 0;
 3579|      0|#endif
 3580|      0|            ptmp = EVP_PKEY_new();
 3581|      0|            if (!ptmp)
 3582|      0|                return 0;
 3583|      0|            if (0) ;
 3584|      0|#ifndef OPENSSL_NO_RSA
 3585|      0|            else if (sc->peer_rsa_tmp)
 3586|      0|                rv = EVP_PKEY_set1_RSA(ptmp, sc->peer_rsa_tmp);
 3587|      0|#endif
 3588|      0|#ifndef OPENSSL_NO_DH
 3589|      0|            else if (sc->peer_dh_tmp)
 3590|      0|                rv = EVP_PKEY_set1_DH(ptmp, sc->peer_dh_tmp);
 3591|      0|#endif
 3592|      0|#ifndef OPENSSL_NO_ECDH
 3593|      0|            else if (sc->peer_ecdh_tmp)
 3594|      0|                rv = EVP_PKEY_set1_EC_KEY(ptmp, sc->peer_ecdh_tmp);
 3595|      0|#endif
 3596|      0|            if (rv) {
 3597|      0|                *(EVP_PKEY **)parg = ptmp;
 3598|      0|                return 1;
 3599|      0|            }
 3600|      0|            EVP_PKEY_free(ptmp);
 3601|      0|            return 0;
 3602|      0|        }
 3603|      0|#ifndef OPENSSL_NO_EC
 3604|      0|    case SSL_CTRL_GET_EC_POINT_FORMATS:
 3605|      0|        {
 3606|      0|            SSL_SESSION *sess = s->session;
 3607|      0|            const unsigned char **pformat = parg;
 3608|      0|            if (!sess || !sess->tlsext_ecpointformatlist)
 3609|      0|                return 0;
 3610|      0|            *pformat = sess->tlsext_ecpointformatlist;
 3611|      0|            return (int)sess->tlsext_ecpointformatlist_length;
 3612|      0|        }
 3613|      0|#endif
 3614|       |
 3615|      0|    case SSL_CTRL_CHECK_PROTO_VERSION:
 3616|       |        /*
 3617|       |         * For library-internal use; checks that the current protocol is the
 3618|       |         * highest enabled version (according to s->ctx->method, as version
 3619|       |         * negotiation may have changed s->method).
 3620|       |         */
 3621|      0|        if (s->version == s->ctx->method->version)
 3622|      0|            return 1;
 3623|       |        /*
 3624|       |         * Apparently we're using a version-flexible SSL_METHOD (not at its
 3625|       |         * highest protocol version).
 3626|       |         */
 3627|      0|        if (s->ctx->method->version == SSLv23_method()->version) {
 3628|       |#if TLS_MAX_VERSION != TLS1_2_VERSION
 3629|       |# error Code needs update for SSLv23_method() support beyond TLS1_2_VERSION.
 3630|       |#endif
 3631|      0|            if (!(s->options & SSL_OP_NO_TLSv1_2))
 3632|      0|                return s->version == TLS1_2_VERSION;
 3633|      0|            if (!(s->options & SSL_OP_NO_TLSv1_1))
 3634|      0|                return s->version == TLS1_1_VERSION;
 3635|      0|            if (!(s->options & SSL_OP_NO_TLSv1))
 3636|      0|                return s->version == TLS1_VERSION;
 3637|      0|            if (!(s->options & SSL_OP_NO_SSLv3))
 3638|      0|                return s->version == SSL3_VERSION;
 3639|      0|            if (!(s->options & SSL_OP_NO_SSLv2))
 3640|      0|                return s->version == SSL2_VERSION;
 3641|      0|        }
 3642|      0|        return 0;               /* Unexpected state; fail closed. */
 3643|       |
 3644|      0|    default:
 3645|      0|        break;
 3646|     48|    }
 3647|     47|    return (ret);
 3648|     48|}
ssl3_put_cipher_by_char:
 4072|  3.92k|{
 4073|  3.92k|    long l;
 4074|       |
 4075|  3.92k|    if (p != NULL) {
 4076|  3.92k|        l = c->id;
 4077|  3.92k|        if ((l & 0xff000000) != 0x03000000)
 4078|      0|            return (0);
 4079|  3.92k|        p[0] = ((unsigned char)(l >> 8L)) & 0xFF;
 4080|  3.92k|        p[1] = ((unsigned char)(l)) & 0xFF;
 4081|  3.92k|    }
 4082|  3.92k|    return (2);
 4083|  3.92k|}

SSL_library_init:
   65|      1|{
   66|       |
   67|      1|#ifndef OPENSSL_NO_DES
   68|      1|    EVP_add_cipher(EVP_des_cbc());
   69|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   70|      1|#endif
   71|      1|#ifndef OPENSSL_NO_IDEA
   72|      1|    EVP_add_cipher(EVP_idea_cbc());
   73|      1|#endif
   74|      1|#ifndef OPENSSL_NO_RC4
   75|      1|    EVP_add_cipher(EVP_rc4());
   76|      1|# if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
   77|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
   78|      1|# endif
   79|      1|#endif
   80|      1|#ifndef OPENSSL_NO_RC2
   81|      1|    EVP_add_cipher(EVP_rc2_cbc());
   82|       |    /*
   83|       |     * Not actually used for SSL/TLS but this makes PKCS#12 work if an
   84|       |     * application only calls SSL_library_init().
   85|       |     */
   86|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
   87|      1|#endif
   88|      1|#ifndef OPENSSL_NO_AES
   89|      1|    EVP_add_cipher(EVP_aes_128_cbc());
   90|      1|    EVP_add_cipher(EVP_aes_192_cbc());
   91|      1|    EVP_add_cipher(EVP_aes_256_cbc());
   92|      1|    EVP_add_cipher(EVP_aes_128_gcm());
   93|      1|    EVP_add_cipher(EVP_aes_256_gcm());
   94|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   95|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
   96|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
   97|      1|# endif
   98|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
   99|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  100|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  101|      1|# endif
  102|       |
  103|      1|#endif
  104|      1|#ifndef OPENSSL_NO_CAMELLIA
  105|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  106|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  107|      1|#endif
  108|       |
  109|      1|#ifndef OPENSSL_NO_SEED
  110|      1|    EVP_add_cipher(EVP_seed_cbc());
  111|      1|#endif
  112|       |
  113|      1|#ifndef OPENSSL_NO_MD5
  114|      1|    EVP_add_digest(EVP_md5());
  115|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
  116|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
  117|      1|#endif
  118|      1|#ifndef OPENSSL_NO_SHA
  119|      1|    EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
  120|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
  121|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
  122|      1|#endif
  123|      1|#ifndef OPENSSL_NO_SHA256
  124|      1|    EVP_add_digest(EVP_sha224());
  125|      1|    EVP_add_digest(EVP_sha256());
  126|      1|#endif
  127|      1|#ifndef OPENSSL_NO_SHA512
  128|      1|    EVP_add_digest(EVP_sha384());
  129|      1|    EVP_add_digest(EVP_sha512());
  130|      1|#endif
  131|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
  132|      1|    EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
  133|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
  134|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
  135|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
  136|      1|#endif
  137|      1|#ifndef OPENSSL_NO_ECDSA
  138|      1|    EVP_add_digest(EVP_ecdsa());
  139|      1|#endif
  140|       |    /* If you want support for phased out ciphers, add the following */
  141|       |#if 0
  142|       |    EVP_add_digest(EVP_sha());
  143|       |    EVP_add_digest(EVP_dss());
  144|       |#endif
  145|      1|#ifndef OPENSSL_NO_COMP
  146|       |    /*
  147|       |     * This will initialise the built-in compression algorithms. The value
  148|       |     * returned is a STACK_OF(SSL_COMP), but that can be discarded safely
  149|       |     */
  150|      1|    (void)SSL_COMP_get_compression_methods();
  151|      1|#endif
  152|       |    /* initialize cipher/digest methods table */
  153|      1|    ssl_load_ciphers();
  154|      1|    return (1);
  155|      1|}

SSL_get_ex_data_X509_STORE_CTX_idx:
  138|     49|{
  139|     49|    static volatile int ssl_x509_store_ctx_idx = -1;
  140|     49|    int got_write_lock = 0;
  141|       |
  142|     49|    if (((size_t)&ssl_x509_store_ctx_idx &
  143|     49|         (sizeof(ssl_x509_store_ctx_idx) - 1))
  144|     49|        == 0) {                 /* check alignment, practically always true */
  145|     49|        int ret;
  146|       |
  147|     49|        if ((ret = ssl_x509_store_ctx_idx) < 0) {
  148|      1|            CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  149|      1|            if ((ret = ssl_x509_store_ctx_idx) < 0) {
  150|      1|                ret = ssl_x509_store_ctx_idx =
  151|      1|                    X509_STORE_CTX_get_ex_new_index(0,
  152|      1|                                                    "SSL for verify callback",
  153|      1|                                                    NULL, NULL, NULL);
  154|      1|            }
  155|      1|            CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  156|      1|        }
  157|       |
  158|     49|        return ret;
  159|     49|    } else {                    /* commonly eliminated */
  160|       |
  161|      0|        CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);
  162|       |
  163|      0|        if (ssl_x509_store_ctx_idx < 0) {
  164|      0|            CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
  165|      0|            CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  166|      0|            got_write_lock = 1;
  167|       |
  168|      0|            if (ssl_x509_store_ctx_idx < 0) {
  169|      0|                ssl_x509_store_ctx_idx =
  170|      0|                    X509_STORE_CTX_get_ex_new_index(0,
  171|      0|                                                    "SSL for verify callback",
  172|      0|                                                    NULL, NULL, NULL);
  173|      0|            }
  174|      0|        }
  175|       |
  176|      0|        if (got_write_lock)
  177|      0|            CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  178|      0|        else
  179|      0|            CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
  180|       |
  181|      0|        return ssl_x509_store_ctx_idx;
  182|      0|    }
  183|     49|}
ssl_cert_set_default_md:
  186|     98|{
  187|       |    /* Set digest values to defaults */
  188|     98|#ifndef OPENSSL_NO_DSA
  189|     98|    cert->pkeys[SSL_PKEY_DSA_SIGN].digest = EVP_sha1();
  190|     98|#endif
  191|     98|#ifndef OPENSSL_NO_RSA
  192|     98|    cert->pkeys[SSL_PKEY_RSA_SIGN].digest = EVP_sha1();
  193|     98|    cert->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();
  194|     98|#endif
  195|     98|#ifndef OPENSSL_NO_ECDSA
  196|     98|    cert->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();
  197|     98|#endif
  198|     98|}
ssl_cert_new:
  201|     49|{
  202|     49|    CERT *ret;
  203|       |
  204|     49|    ret = (CERT *)OPENSSL_malloc(sizeof(CERT));
  205|     49|    if (ret == NULL) {
  206|      0|        SSLerr(SSL_F_SSL_CERT_NEW, ERR_R_MALLOC_FAILURE);
  207|      0|        return (NULL);
  208|      0|    }
  209|     49|    memset(ret, 0, sizeof(CERT));
  210|       |
  211|     49|    ret->key = &(ret->pkeys[SSL_PKEY_RSA_ENC]);
  212|     49|    ret->references = 1;
  213|     49|    ssl_cert_set_default_md(ret);
  214|     49|    return (ret);
  215|     49|}
ssl_cert_dup:
  218|     49|{
  219|     49|    CERT *ret;
  220|     49|    int i;
  221|       |
  222|     49|    ret = (CERT *)OPENSSL_malloc(sizeof(CERT));
  223|     49|    if (ret == NULL) {
  224|      0|        SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_MALLOC_FAILURE);
  225|      0|        return (NULL);
  226|      0|    }
  227|       |
  228|     49|    memset(ret, 0, sizeof(CERT));
  229|       |
  230|     49|    ret->references = 1;
  231|     49|    ret->key = &ret->pkeys[cert->key - &cert->pkeys[0]];
  232|       |    /*
  233|       |     * or ret->key = ret->pkeys + (cert->key - cert->pkeys), if you find that
  234|       |     * more readable
  235|       |     */
  236|       |
  237|     49|    ret->valid = cert->valid;
  238|     49|    ret->mask_k = cert->mask_k;
  239|     49|    ret->mask_a = cert->mask_a;
  240|     49|    ret->export_mask_k = cert->export_mask_k;
  241|     49|    ret->export_mask_a = cert->export_mask_a;
  242|       |
  243|     49|#ifndef OPENSSL_NO_RSA
  244|     49|    if (cert->rsa_tmp != NULL) {
  245|      0|        RSA_up_ref(cert->rsa_tmp);
  246|      0|        ret->rsa_tmp = cert->rsa_tmp;
  247|      0|    }
  248|     49|    ret->rsa_tmp_cb = cert->rsa_tmp_cb;
  249|     49|#endif
  250|       |
  251|     49|#ifndef OPENSSL_NO_DH
  252|     49|    if (cert->dh_tmp != NULL) {
  253|      0|        ret->dh_tmp = DHparams_dup(cert->dh_tmp);
  254|      0|        if (ret->dh_tmp == NULL) {
  255|      0|            SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_DH_LIB);
  256|      0|            goto err;
  257|      0|        }
  258|      0|        if (cert->dh_tmp->priv_key) {
  259|      0|            BIGNUM *b = BN_dup(cert->dh_tmp->priv_key);
  260|      0|            if (!b) {
  261|      0|                SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_BN_LIB);
  262|      0|                goto err;
  263|      0|            }
  264|      0|            ret->dh_tmp->priv_key = b;
  265|      0|        }
  266|      0|        if (cert->dh_tmp->pub_key) {
  267|      0|            BIGNUM *b = BN_dup(cert->dh_tmp->pub_key);
  268|      0|            if (!b) {
  269|      0|                SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_BN_LIB);
  270|      0|                goto err;
  271|      0|            }
  272|      0|            ret->dh_tmp->pub_key = b;
  273|      0|        }
  274|      0|    }
  275|     49|    ret->dh_tmp_cb = cert->dh_tmp_cb;
  276|     49|#endif
  277|       |
  278|     49|#ifndef OPENSSL_NO_ECDH
  279|     49|    if (cert->ecdh_tmp) {
  280|      0|        ret->ecdh_tmp = EC_KEY_dup(cert->ecdh_tmp);
  281|      0|        if (ret->ecdh_tmp == NULL) {
  282|      0|            SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_EC_LIB);
  283|      0|            goto err;
  284|      0|        }
  285|      0|    }
  286|     49|    ret->ecdh_tmp_cb = cert->ecdh_tmp_cb;
  287|     49|    ret->ecdh_tmp_auto = cert->ecdh_tmp_auto;
  288|     49|#endif
  289|       |
  290|    441|    for (i = 0; i < SSL_PKEY_NUM; i++) {
  291|    392|        CERT_PKEY *cpk = cert->pkeys + i;
  292|    392|        CERT_PKEY *rpk = ret->pkeys + i;
  293|    392|        if (cpk->x509 != NULL) {
  294|      0|            rpk->x509 = cpk->x509;
  295|      0|            CRYPTO_add(&rpk->x509->references, 1, CRYPTO_LOCK_X509);
  296|      0|        }
  297|       |
  298|    392|        if (cpk->privatekey != NULL) {
  299|      0|            rpk->privatekey = cpk->privatekey;
  300|      0|            CRYPTO_add(&cpk->privatekey->references, 1, CRYPTO_LOCK_EVP_PKEY);
  301|      0|        }
  302|       |
  303|    392|        if (cpk->chain) {
  304|      0|            rpk->chain = X509_chain_up_ref(cpk->chain);
  305|      0|            if (!rpk->chain) {
  306|      0|                SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_MALLOC_FAILURE);
  307|      0|                goto err;
  308|      0|            }
  309|      0|        }
  310|    392|        rpk->valid_flags = 0;
  311|    392|#ifndef OPENSSL_NO_TLSEXT
  312|    392|        if (cert->pkeys[i].serverinfo != NULL) {
  313|       |            /* Just copy everything. */
  314|      0|            ret->pkeys[i].serverinfo =
  315|      0|                OPENSSL_malloc(cert->pkeys[i].serverinfo_length);
  316|      0|            if (ret->pkeys[i].serverinfo == NULL) {
  317|      0|                SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_MALLOC_FAILURE);
  318|      0|                goto err;
  319|      0|            }
  320|      0|            ret->pkeys[i].serverinfo_length =
  321|      0|                cert->pkeys[i].serverinfo_length;
  322|      0|            memcpy(ret->pkeys[i].serverinfo,
  323|      0|                   cert->pkeys[i].serverinfo,
  324|      0|                   cert->pkeys[i].serverinfo_length);
  325|      0|        }
  326|    392|#endif
  327|    392|    }
  328|       |
  329|       |    /*
  330|       |     * Set digests to defaults. NB: we don't copy existing values as they
  331|       |     * will be set during handshake.
  332|       |     */
  333|     49|    ssl_cert_set_default_md(ret);
  334|       |    /* Peer sigalgs set to NULL as we get these from handshake too */
  335|     49|    ret->peer_sigalgs = NULL;
  336|     49|    ret->peer_sigalgslen = 0;
  337|       |    /* Configured sigalgs however we copy across */
  338|       |
  339|     49|    if (cert->conf_sigalgs) {
  340|      0|        ret->conf_sigalgs = OPENSSL_malloc(cert->conf_sigalgslen);
  341|      0|        if (!ret->conf_sigalgs)
  342|      0|            goto err;
  343|      0|        memcpy(ret->conf_sigalgs, cert->conf_sigalgs, cert->conf_sigalgslen);
  344|      0|        ret->conf_sigalgslen = cert->conf_sigalgslen;
  345|      0|    } else
  346|     49|        ret->conf_sigalgs = NULL;
  347|       |
  348|     49|    if (cert->client_sigalgs) {
  349|      0|        ret->client_sigalgs = OPENSSL_malloc(cert->client_sigalgslen);
  350|      0|        if (!ret->client_sigalgs)
  351|      0|            goto err;
  352|      0|        memcpy(ret->client_sigalgs, cert->client_sigalgs,
  353|      0|               cert->client_sigalgslen);
  354|      0|        ret->client_sigalgslen = cert->client_sigalgslen;
  355|      0|    } else
  356|     49|        ret->client_sigalgs = NULL;
  357|       |    /* Shared sigalgs also NULL */
  358|     49|    ret->shared_sigalgs = NULL;
  359|       |    /* Copy any custom client certificate types */
  360|     49|    if (cert->ctypes) {
  361|      0|        ret->ctypes = OPENSSL_malloc(cert->ctype_num);
  362|      0|        if (!ret->ctypes)
  363|      0|            goto err;
  364|      0|        memcpy(ret->ctypes, cert->ctypes, cert->ctype_num);
  365|      0|        ret->ctype_num = cert->ctype_num;
  366|      0|    }
  367|       |
  368|     49|    ret->cert_flags = cert->cert_flags;
  369|       |
  370|     49|    ret->cert_cb = cert->cert_cb;
  371|     49|    ret->cert_cb_arg = cert->cert_cb_arg;
  372|       |
  373|     49|    if (cert->verify_store) {
  374|      0|        CRYPTO_add(&cert->verify_store->references, 1,
  375|      0|                   CRYPTO_LOCK_X509_STORE);
  376|      0|        ret->verify_store = cert->verify_store;
  377|      0|    }
  378|       |
  379|     49|    if (cert->chain_store) {
  380|      0|        CRYPTO_add(&cert->chain_store->references, 1, CRYPTO_LOCK_X509_STORE);
  381|      0|        ret->chain_store = cert->chain_store;
  382|      0|    }
  383|       |
  384|     49|    ret->ciphers_raw = NULL;
  385|       |
  386|     49|#ifndef OPENSSL_NO_TLSEXT
  387|     49|    if (!custom_exts_copy(&ret->cli_ext, &cert->cli_ext))
  388|      0|        goto err;
  389|     49|    if (!custom_exts_copy(&ret->srv_ext, &cert->srv_ext))
  390|      0|        goto err;
  391|     49|#endif
  392|       |
  393|     49|    return (ret);
  394|       |
  395|      0| err:
  396|      0|#ifndef OPENSSL_NO_RSA
  397|      0|    if (ret->rsa_tmp != NULL)
  398|      0|        RSA_free(ret->rsa_tmp);
  399|      0|#endif
  400|      0|#ifndef OPENSSL_NO_DH
  401|      0|    if (ret->dh_tmp != NULL)
  402|      0|        DH_free(ret->dh_tmp);
  403|      0|#endif
  404|      0|#ifndef OPENSSL_NO_ECDH
  405|      0|    if (ret->ecdh_tmp != NULL)
  406|      0|        EC_KEY_free(ret->ecdh_tmp);
  407|      0|#endif
  408|       |
  409|      0|#ifndef OPENSSL_NO_TLSEXT
  410|      0|    custom_exts_free(&ret->cli_ext);
  411|      0|    custom_exts_free(&ret->srv_ext);
  412|      0|#endif
  413|       |
  414|      0|    ssl_cert_clear_certs(ret);
  415|      0|    OPENSSL_free(ret);
  416|       |
  417|      0|    return NULL;
  418|     49|}
ssl_cert_clear_certs:
  423|     98|{
  424|     98|    int i;
  425|     98|    if (c == NULL)
  426|      0|        return;
  427|    882|    for (i = 0; i < SSL_PKEY_NUM; i++) {
  428|    784|        CERT_PKEY *cpk = c->pkeys + i;
  429|    784|        if (cpk->x509) {
  430|      0|            X509_free(cpk->x509);
  431|      0|            cpk->x509 = NULL;
  432|      0|        }
  433|    784|        if (cpk->privatekey) {
  434|      0|            EVP_PKEY_free(cpk->privatekey);
  435|      0|            cpk->privatekey = NULL;
  436|      0|        }
  437|    784|        if (cpk->chain) {
  438|      0|            sk_X509_pop_free(cpk->chain, X509_free);
  439|      0|            cpk->chain = NULL;
  440|      0|        }
  441|    784|#ifndef OPENSSL_NO_TLSEXT
  442|    784|        if (cpk->serverinfo) {
  443|      0|            OPENSSL_free(cpk->serverinfo);
  444|      0|            cpk->serverinfo = NULL;
  445|      0|            cpk->serverinfo_length = 0;
  446|      0|        }
  447|    784|#endif
  448|       |        /* Clear all flags apart from explicit sign */
  449|    784|        cpk->valid_flags &= CERT_PKEY_EXPLICIT_SIGN;
  450|    784|    }
  451|     98|}
ssl_cert_free:
  454|     98|{
  455|     98|    int i;
  456|       |
  457|     98|    if (c == NULL)
  458|      0|        return;
  459|       |
  460|     98|    i = CRYPTO_add(&c->references, -1, CRYPTO_LOCK_SSL_CERT);
  461|       |#ifdef REF_PRINT
  462|       |    REF_PRINT("CERT", c);
  463|       |#endif
  464|     98|    if (i > 0)
  465|      0|        return;
  466|       |#ifdef REF_CHECK
  467|       |    if (i < 0) {
  468|       |        fprintf(stderr, "ssl_cert_free, bad reference count\n");
  469|       |        abort();                /* ok */
  470|       |    }
  471|       |#endif
  472|       |
  473|     98|#ifndef OPENSSL_NO_RSA
  474|     98|    if (c->rsa_tmp)
  475|      0|        RSA_free(c->rsa_tmp);
  476|     98|#endif
  477|     98|#ifndef OPENSSL_NO_DH
  478|     98|    if (c->dh_tmp)
  479|      0|        DH_free(c->dh_tmp);
  480|     98|#endif
  481|     98|#ifndef OPENSSL_NO_ECDH
  482|     98|    if (c->ecdh_tmp)
  483|      0|        EC_KEY_free(c->ecdh_tmp);
  484|     98|#endif
  485|       |
  486|     98|    ssl_cert_clear_certs(c);
  487|     98|    if (c->peer_sigalgs)
  488|      0|        OPENSSL_free(c->peer_sigalgs);
  489|     98|    if (c->conf_sigalgs)
  490|      0|        OPENSSL_free(c->conf_sigalgs);
  491|     98|    if (c->client_sigalgs)
  492|      0|        OPENSSL_free(c->client_sigalgs);
  493|     98|    if (c->shared_sigalgs)
  494|      0|        OPENSSL_free(c->shared_sigalgs);
  495|     98|    if (c->ctypes)
  496|      0|        OPENSSL_free(c->ctypes);
  497|     98|    if (c->verify_store)
  498|      0|        X509_STORE_free(c->verify_store);
  499|     98|    if (c->chain_store)
  500|      0|        X509_STORE_free(c->chain_store);
  501|     98|    if (c->ciphers_raw)
  502|      0|        OPENSSL_free(c->ciphers_raw);
  503|     98|#ifndef OPENSSL_NO_TLSEXT
  504|     98|    custom_exts_free(&c->cli_ext);
  505|     98|    custom_exts_free(&c->srv_ext);
  506|     98|    if (c->alpn_proposed)
  507|      0|        OPENSSL_free(c->alpn_proposed);
  508|     98|#endif
  509|     98|    OPENSSL_free(c);
  510|     98|}

ssl_load_ciphers:
  406|      1|{
  407|      1|    ssl_cipher_methods[SSL_ENC_DES_IDX] = EVP_get_cipherbyname(SN_des_cbc);
  408|      1|    ssl_cipher_methods[SSL_ENC_3DES_IDX] =
  409|      1|        EVP_get_cipherbyname(SN_des_ede3_cbc);
  410|      1|    ssl_cipher_methods[SSL_ENC_RC4_IDX] = EVP_get_cipherbyname(SN_rc4);
  411|      1|    ssl_cipher_methods[SSL_ENC_RC2_IDX] = EVP_get_cipherbyname(SN_rc2_cbc);
  412|      1|#ifndef OPENSSL_NO_IDEA
  413|      1|    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = EVP_get_cipherbyname(SN_idea_cbc);
  414|       |#else
  415|       |    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = NULL;
  416|       |#endif
  417|      1|    ssl_cipher_methods[SSL_ENC_AES128_IDX] =
  418|      1|        EVP_get_cipherbyname(SN_aes_128_cbc);
  419|      1|    ssl_cipher_methods[SSL_ENC_AES256_IDX] =
  420|      1|        EVP_get_cipherbyname(SN_aes_256_cbc);
  421|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA128_IDX] =
  422|      1|        EVP_get_cipherbyname(SN_camellia_128_cbc);
  423|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA256_IDX] =
  424|      1|        EVP_get_cipherbyname(SN_camellia_256_cbc);
  425|      1|    ssl_cipher_methods[SSL_ENC_GOST89_IDX] =
  426|      1|        EVP_get_cipherbyname(SN_gost89_cnt);
  427|      1|    ssl_cipher_methods[SSL_ENC_SEED_IDX] = EVP_get_cipherbyname(SN_seed_cbc);
  428|       |
  429|      1|    ssl_cipher_methods[SSL_ENC_AES128GCM_IDX] =
  430|      1|        EVP_get_cipherbyname(SN_aes_128_gcm);
  431|      1|    ssl_cipher_methods[SSL_ENC_AES256GCM_IDX] =
  432|      1|        EVP_get_cipherbyname(SN_aes_256_gcm);
  433|       |
  434|      1|    ssl_digest_methods[SSL_MD_MD5_IDX] = EVP_get_digestbyname(SN_md5);
  435|      1|    ssl_mac_secret_size[SSL_MD_MD5_IDX] =
  436|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_MD5_IDX]);
  437|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0);
  438|      1|    ssl_digest_methods[SSL_MD_SHA1_IDX] = EVP_get_digestbyname(SN_sha1);
  439|      1|    ssl_mac_secret_size[SSL_MD_SHA1_IDX] =
  440|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA1_IDX]);
  441|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0);
  442|      1|    ssl_digest_methods[SSL_MD_GOST94_IDX] =
  443|      1|        EVP_get_digestbyname(SN_id_GostR3411_94);
  444|      1|    if (ssl_digest_methods[SSL_MD_GOST94_IDX]) {
  445|      1|        ssl_mac_secret_size[SSL_MD_GOST94_IDX] =
  446|      1|            EVP_MD_size(ssl_digest_methods[SSL_MD_GOST94_IDX]);
  447|      1|        OPENSSL_assert(ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0);
  448|      1|    }
  449|      1|    ssl_digest_methods[SSL_MD_GOST89MAC_IDX] =
  450|      1|        EVP_get_digestbyname(SN_id_Gost28147_89_MAC);
  451|      1|    ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX] = get_optional_pkey_id("gost-mac");
  452|      1|    if (ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX]) {
  453|      0|        ssl_mac_secret_size[SSL_MD_GOST89MAC_IDX] = 32;
  454|      0|    }
  455|       |
  456|      1|    ssl_digest_methods[SSL_MD_SHA256_IDX] = EVP_get_digestbyname(SN_sha256);
  457|      1|    ssl_mac_secret_size[SSL_MD_SHA256_IDX] =
  458|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA256_IDX]);
  459|      1|    ssl_digest_methods[SSL_MD_SHA384_IDX] = EVP_get_digestbyname(SN_sha384);
  460|      1|    ssl_mac_secret_size[SSL_MD_SHA384_IDX] =
  461|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA384_IDX]);
  462|      1|}
ssl_create_cipher_list:
 1471|     98|{
 1472|     98|    int ok, num_of_ciphers, num_of_alias_max, num_of_group_aliases;
 1473|     98|    unsigned long disabled_mkey, disabled_auth, disabled_enc, disabled_mac,
 1474|     98|        disabled_ssl;
 1475|     98|    STACK_OF(SSL_CIPHER) *cipherstack, *tmp_cipher_list;
 1476|     98|    const char *rule_p;
 1477|     98|    CIPHER_ORDER *co_list = NULL, *head = NULL, *tail = NULL, *curr;
 1478|     98|    const SSL_CIPHER **ca_list = NULL;
 1479|       |
 1480|       |    /*
 1481|       |     * Return with error if nothing to do.
 1482|       |     */
 1483|     98|    if (rule_str == NULL || cipher_list == NULL || cipher_list_by_id == NULL)
 1484|      0|        return NULL;
 1485|     98|#ifndef OPENSSL_NO_EC
 1486|     98|    if (!check_suiteb_cipher_list(ssl_method, c, &rule_str))
 1487|      0|        return NULL;
 1488|     98|#endif
 1489|       |
 1490|       |    /*
 1491|       |     * To reduce the work to do we only want to process the compiled
 1492|       |     * in algorithms, so we first get the mask of disabled ciphers.
 1493|       |     */
 1494|     98|    ssl_cipher_get_disabled(&disabled_mkey, &disabled_auth, &disabled_enc,
 1495|     98|                            &disabled_mac, &disabled_ssl);
 1496|       |
 1497|       |    /*
 1498|       |     * Now we have to collect the available ciphers from the compiled
 1499|       |     * in ciphers. We cannot get more than the number compiled in, so
 1500|       |     * it is used for allocation.
 1501|       |     */
 1502|     98|    num_of_ciphers = ssl_method->num_ciphers();
 1503|       |#ifdef KSSL_DEBUG
 1504|       |    fprintf(stderr, "ssl_create_cipher_list() for %d ciphers\n",
 1505|       |            num_of_ciphers);
 1506|       |#endif                          /* KSSL_DEBUG */
 1507|     98|    co_list =
 1508|     98|        (CIPHER_ORDER *)OPENSSL_malloc(sizeof(CIPHER_ORDER) * num_of_ciphers);
 1509|     98|    if (co_list == NULL) {
 1510|      0|        SSLerr(SSL_F_SSL_CREATE_CIPHER_LIST, ERR_R_MALLOC_FAILURE);
 1511|      0|        return (NULL);          /* Failure */
 1512|      0|    }
 1513|       |
 1514|     98|    ssl_cipher_collect_ciphers(ssl_method, num_of_ciphers,
 1515|     98|                               disabled_mkey, disabled_auth, disabled_enc,
 1516|     98|                               disabled_mac, disabled_ssl, co_list, &head,
 1517|     98|                               &tail);
 1518|       |
 1519|       |    /* Now arrange all ciphers by preference: */
 1520|       |
 1521|       |    /*
 1522|       |     * Everything else being equal, prefer ephemeral ECDH over other key
 1523|       |     * exchange mechanisms
 1524|       |     */
 1525|     98|    ssl_cipher_apply_rule(0, SSL_kEECDH, 0, 0, 0, 0, 0, CIPHER_ADD, -1, &head,
 1526|     98|                          &tail);
 1527|     98|    ssl_cipher_apply_rule(0, SSL_kEECDH, 0, 0, 0, 0, 0, CIPHER_DEL, -1, &head,
 1528|     98|                          &tail);
 1529|       |
 1530|       |    /* AES is our preferred symmetric cipher */
 1531|     98|    ssl_cipher_apply_rule(0, 0, 0, SSL_AES, 0, 0, 0, CIPHER_ADD, -1, &head,
 1532|     98|                          &tail);
 1533|       |
 1534|       |    /* Temporarily enable everything else for sorting */
 1535|     98|    ssl_cipher_apply_rule(0, 0, 0, 0, 0, 0, 0, CIPHER_ADD, -1, &head, &tail);
 1536|       |
 1537|       |    /* Low priority for MD5 */
 1538|     98|    ssl_cipher_apply_rule(0, 0, 0, 0, SSL_MD5, 0, 0, CIPHER_ORD, -1, &head,
 1539|     98|                          &tail);
 1540|       |
 1541|       |    /*
 1542|       |     * Move anonymous ciphers to the end.  Usually, these will remain
 1543|       |     * disabled. (For applications that allow them, they aren't too bad, but
 1544|       |     * we prefer authenticated ciphers.)
 1545|       |     */
 1546|     98|    ssl_cipher_apply_rule(0, 0, SSL_aNULL, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
 1547|     98|                          &tail);
 1548|       |
 1549|       |    /* Move ciphers without forward secrecy to the end */
 1550|     98|    ssl_cipher_apply_rule(0, 0, SSL_aECDH, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
 1551|     98|                          &tail);
 1552|       |    /*
 1553|       |     * ssl_cipher_apply_rule(0, 0, SSL_aDH, 0, 0, 0, 0, CIPHER_ORD, -1,
 1554|       |     * &head, &tail);
 1555|       |     */
 1556|     98|    ssl_cipher_apply_rule(0, SSL_kRSA, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
 1557|     98|                          &tail);
 1558|     98|    ssl_cipher_apply_rule(0, SSL_kPSK, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
 1559|     98|                          &tail);
 1560|     98|    ssl_cipher_apply_rule(0, SSL_kKRB5, 0, 0, 0, 0, 0, CIPHER_ORD, -1, &head,
 1561|     98|                          &tail);
 1562|       |
 1563|       |    /* RC4 is sort-of broken -- move the the end */
 1564|     98|    ssl_cipher_apply_rule(0, 0, 0, SSL_RC4, 0, 0, 0, CIPHER_ORD, -1, &head,
 1565|     98|                          &tail);
 1566|       |
 1567|       |    /*
 1568|       |     * Now sort by symmetric encryption strength.  The above ordering remains
 1569|       |     * in force within each class
 1570|       |     */
 1571|     98|    if (!ssl_cipher_strength_sort(&head, &tail)) {
 1572|      0|        OPENSSL_free(co_list);
 1573|      0|        return NULL;
 1574|      0|    }
 1575|       |
 1576|       |    /* Now disable everything (maintaining the ordering!) */
 1577|     98|    ssl_cipher_apply_rule(0, 0, 0, 0, 0, 0, 0, CIPHER_DEL, -1, &head, &tail);
 1578|       |
 1579|       |    /*
 1580|       |     * We also need cipher aliases for selecting based on the rule_str.
 1581|       |     * There might be two types of entries in the rule_str: 1) names
 1582|       |     * of ciphers themselves 2) aliases for groups of ciphers.
 1583|       |     * For 1) we need the available ciphers and for 2) the cipher
 1584|       |     * groups of cipher_aliases added together in one list (otherwise
 1585|       |     * we would be happy with just the cipher_aliases table).
 1586|       |     */
 1587|     98|    num_of_group_aliases = sizeof(cipher_aliases) / sizeof(SSL_CIPHER);
 1588|     98|    num_of_alias_max = num_of_ciphers + num_of_group_aliases + 1;
 1589|     98|    ca_list = OPENSSL_malloc(sizeof(SSL_CIPHER *) * num_of_alias_max);
 1590|     98|    if (ca_list == NULL) {
 1591|      0|        OPENSSL_free(co_list);
 1592|      0|        SSLerr(SSL_F_SSL_CREATE_CIPHER_LIST, ERR_R_MALLOC_FAILURE);
 1593|      0|        return (NULL);          /* Failure */
 1594|      0|    }
 1595|     98|    ssl_cipher_collect_aliases(ca_list, num_of_group_aliases,
 1596|     98|                               disabled_mkey, disabled_auth, disabled_enc,
 1597|     98|                               disabled_mac, disabled_ssl, head);
 1598|       |
 1599|       |    /*
 1600|       |     * If the rule_string begins with DEFAULT, apply the default rule
 1601|       |     * before using the (possibly available) additional rules.
 1602|       |     */
 1603|     98|    ok = 1;
 1604|     98|    rule_p = rule_str;
 1605|     98|    if (strncmp(rule_str, "DEFAULT", 7) == 0) {
 1606|      0|        ok = ssl_cipher_process_rulestr(SSL_DEFAULT_CIPHER_LIST,
 1607|      0|                                        &head, &tail, ca_list);
 1608|      0|        rule_p += 7;
 1609|      0|        if (*rule_p == ':')
 1610|      0|            rule_p++;
 1611|      0|    }
 1612|       |
 1613|     98|    if (ok && (strlen(rule_p) > 0))
 1614|     98|        ok = ssl_cipher_process_rulestr(rule_p, &head, &tail, ca_list);
 1615|       |
 1616|     98|    OPENSSL_free((void *)ca_list); /* Not needed anymore */
 1617|       |
 1618|     98|    if (!ok) {                  /* Rule processing failure */
 1619|      0|        OPENSSL_free(co_list);
 1620|      0|        return (NULL);
 1621|      0|    }
 1622|       |
 1623|       |    /*
 1624|       |     * Allocate new "cipherstack" for the result, return with error
 1625|       |     * if we cannot get one.
 1626|       |     */
 1627|     98|    if ((cipherstack = sk_SSL_CIPHER_new_null()) == NULL) {
 1628|      0|        OPENSSL_free(co_list);
 1629|      0|        return (NULL);
 1630|      0|    }
 1631|       |
 1632|       |    /*
 1633|       |     * The cipher selection for the list is done. The ciphers are added
 1634|       |     * to the resulting precedence to the STACK_OF(SSL_CIPHER).
 1635|       |     */
 1636|  9.70k|    for (curr = head; curr != NULL; curr = curr->next) {
 1637|       |#ifdef OPENSSL_FIPS
 1638|       |        if (curr->active
 1639|       |            && (!FIPS_mode() || curr->cipher->algo_strength & SSL_FIPS))
 1640|       |#else
 1641|  9.60k|        if (curr->active)
 1642|  9.26k|#endif
 1643|  9.26k|        {
 1644|  9.26k|            sk_SSL_CIPHER_push(cipherstack, curr->cipher);
 1645|       |#ifdef CIPHER_DEBUG
 1646|       |            fprintf(stderr, "<%s>\n", curr->cipher->name);
 1647|       |#endif
 1648|  9.26k|        }
 1649|  9.60k|    }
 1650|     98|    OPENSSL_free(co_list);      /* Not needed any longer */
 1651|       |
 1652|     98|    tmp_cipher_list = sk_SSL_CIPHER_dup(cipherstack);
 1653|     98|    if (tmp_cipher_list == NULL) {
 1654|      0|        sk_SSL_CIPHER_free(cipherstack);
 1655|      0|        return NULL;
 1656|      0|    }
 1657|     98|    if (*cipher_list != NULL)
 1658|     98|        sk_SSL_CIPHER_free(*cipher_list);
 1659|     98|    *cipher_list = cipherstack;
 1660|     98|    if (*cipher_list_by_id != NULL)
 1661|     98|        sk_SSL_CIPHER_free(*cipher_list_by_id);
 1662|     98|    *cipher_list_by_id = tmp_cipher_list;
 1663|     98|    (void)sk_SSL_CIPHER_set_cmp_func(*cipher_list_by_id,
 1664|     98|                                     ssl_cipher_ptr_id_cmp);
 1665|       |
 1666|     98|    sk_SSL_CIPHER_sort(*cipher_list_by_id);
 1667|     98|    return (cipherstack);
 1668|     98|}
SSL_COMP_get_compression_methods:
 1961|     50|{
 1962|     50|    load_builtin_compressions();
 1963|     50|    return (ssl_comp_methods);
 1964|     50|}
ssl_ciph.c:get_optional_pkey_id:
  388|    197|{
  389|    197|    const EVP_PKEY_ASN1_METHOD *ameth;
  390|    197|    ENGINE *tmpeng = NULL;
  391|    197|    int pkey_id = 0;
  392|    197|    ameth = EVP_PKEY_asn1_find_str(&tmpeng, pkey_name, -1);
  393|    197|    if (ameth) {
  394|      0|        if (EVP_PKEY_asn1_get0_info(&pkey_id, NULL, NULL, NULL, NULL,
  395|      0|                                    ameth) <= 0)
  396|      0|            pkey_id = 0;
  397|      0|    }
  398|    197|    if (tmpeng)
  399|      0|        ENGINE_finish(tmpeng);
  400|    197|    return pkey_id;
  401|    197|}
ssl_ciph.c:load_builtin_compressions:
  472|     50|{
  473|     50|    int got_write_lock = 0;
  474|       |
  475|     50|    CRYPTO_r_lock(CRYPTO_LOCK_SSL);
  476|     50|    if (ssl_comp_methods == NULL) {
  477|      1|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  478|      1|        CRYPTO_w_lock(CRYPTO_LOCK_SSL);
  479|      1|        got_write_lock = 1;
  480|       |
  481|      1|        if (ssl_comp_methods == NULL) {
  482|      1|            SSL_COMP *comp = NULL;
  483|       |
  484|      1|            MemCheck_off();
  485|      1|            ssl_comp_methods = sk_SSL_COMP_new(sk_comp_cmp);
  486|      1|            if (ssl_comp_methods != NULL) {
  487|      1|                comp = (SSL_COMP *)OPENSSL_malloc(sizeof(SSL_COMP));
  488|      1|                if (comp != NULL) {
  489|      1|                    comp->method = COMP_zlib();
  490|      1|                    if (comp->method && comp->method->type == NID_undef)
  491|      1|                        OPENSSL_free(comp);
  492|      0|                    else {
  493|      0|                        comp->id = SSL_COMP_ZLIB_IDX;
  494|      0|                        comp->name = comp->method->name;
  495|      0|                        sk_SSL_COMP_push(ssl_comp_methods, comp);
  496|      0|                    }
  497|      1|                }
  498|      1|                sk_SSL_COMP_sort(ssl_comp_methods);
  499|      1|            }
  500|      1|            MemCheck_on();
  501|      1|        }
  502|      1|    }
  503|       |
  504|     50|    if (got_write_lock)
  505|      1|        CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
  506|     49|    else
  507|     49|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  508|     50|}
ssl_ciph.c:check_suiteb_cipher_list:
 1408|     98|{
 1409|     98|    unsigned int suiteb_flags = 0, suiteb_comb2 = 0;
 1410|     98|    if (strncmp(*prule_str, "SUITEB128ONLY", 13) == 0) {
 1411|      0|        suiteb_flags = SSL_CERT_FLAG_SUITEB_128_LOS_ONLY;
 1412|     98|    } else if (strncmp(*prule_str, "SUITEB128C2", 11) == 0) {
 1413|      0|        suiteb_comb2 = 1;
 1414|      0|        suiteb_flags = SSL_CERT_FLAG_SUITEB_128_LOS;
 1415|     98|    } else if (strncmp(*prule_str, "SUITEB128", 9) == 0) {
 1416|      0|        suiteb_flags = SSL_CERT_FLAG_SUITEB_128_LOS;
 1417|     98|    } else if (strncmp(*prule_str, "SUITEB192", 9) == 0) {
 1418|      0|        suiteb_flags = SSL_CERT_FLAG_SUITEB_192_LOS;
 1419|      0|    }
 1420|       |
 1421|     98|    if (suiteb_flags) {
 1422|      0|        c->cert_flags &= ~SSL_CERT_FLAG_SUITEB_128_LOS;
 1423|      0|        c->cert_flags |= suiteb_flags;
 1424|      0|    } else
 1425|     98|        suiteb_flags = c->cert_flags & SSL_CERT_FLAG_SUITEB_128_LOS;
 1426|       |
 1427|     98|    if (!suiteb_flags)
 1428|     98|        return 1;
 1429|       |    /* Check version: if TLS 1.2 ciphers allowed we can use Suite B */
 1430|       |
 1431|      0|    if (!(meth->ssl3_enc->enc_flags & SSL_ENC_FLAG_TLS1_2_CIPHERS)) {
 1432|      0|        if (meth->ssl3_enc->enc_flags & SSL_ENC_FLAG_DTLS)
 1433|      0|            SSLerr(SSL_F_CHECK_SUITEB_CIPHER_LIST,
 1434|      0|                   SSL_R_ONLY_DTLS_1_2_ALLOWED_IN_SUITEB_MODE);
 1435|      0|        else
 1436|      0|            SSLerr(SSL_F_CHECK_SUITEB_CIPHER_LIST,
 1437|      0|                   SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE);
 1438|      0|        return 0;
 1439|      0|    }
 1440|      0|# ifndef OPENSSL_NO_ECDH
 1441|      0|    switch (suiteb_flags) {
 1442|      0|    case SSL_CERT_FLAG_SUITEB_128_LOS:
 1443|      0|        if (suiteb_comb2)
 1444|      0|            *prule_str = "ECDHE-ECDSA-AES256-GCM-SHA384";
 1445|      0|        else
 1446|      0|            *prule_str =
 1447|      0|                "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384";
 1448|      0|        break;
 1449|      0|    case SSL_CERT_FLAG_SUITEB_128_LOS_ONLY:
 1450|      0|        *prule_str = "ECDHE-ECDSA-AES128-GCM-SHA256";
 1451|      0|        break;
 1452|      0|    case SSL_CERT_FLAG_SUITEB_192_LOS:
 1453|      0|        *prule_str = "ECDHE-ECDSA-AES256-GCM-SHA384";
 1454|      0|        break;
 1455|      0|    }
 1456|       |    /* Set auto ECDH parameter determination */
 1457|      0|    c->ecdh_tmp_auto = 1;
 1458|      0|    return 1;
 1459|       |# else
 1460|       |    SSLerr(SSL_F_CHECK_SUITEB_CIPHER_LIST,
 1461|       |           SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE);
 1462|       |    return 0;
 1463|       |# endif
 1464|      0|}
ssl_ciph.c:ssl_cipher_get_disabled:
  729|     98|{
  730|     98|    *mkey = 0;
  731|     98|    *auth = 0;
  732|     98|    *enc = 0;
  733|     98|    *mac = 0;
  734|     98|    *ssl = 0;
  735|       |
  736|       |#ifdef OPENSSL_NO_RSA
  737|       |    *mkey |= SSL_kRSA;
  738|       |    *auth |= SSL_aRSA;
  739|       |#endif
  740|       |#ifdef OPENSSL_NO_DSA
  741|       |    *auth |= SSL_aDSS;
  742|       |#endif
  743|       |#ifdef OPENSSL_NO_DH
  744|       |    *mkey |= SSL_kDHr | SSL_kDHd | SSL_kEDH;
  745|       |    *auth |= SSL_aDH;
  746|       |#endif
  747|     98|#ifdef OPENSSL_NO_KRB5
  748|     98|    *mkey |= SSL_kKRB5;
  749|     98|    *auth |= SSL_aKRB5;
  750|     98|#endif
  751|       |#ifdef OPENSSL_NO_ECDSA
  752|       |    *auth |= SSL_aECDSA;
  753|       |#endif
  754|       |#ifdef OPENSSL_NO_ECDH
  755|       |    *mkey |= SSL_kECDHe | SSL_kECDHr;
  756|       |    *auth |= SSL_aECDH;
  757|       |#endif
  758|       |#ifdef OPENSSL_NO_PSK
  759|       |    *mkey |= SSL_kPSK;
  760|       |    *auth |= SSL_aPSK;
  761|       |#endif
  762|       |#ifdef OPENSSL_NO_SRP
  763|       |    *mkey |= SSL_kSRP;
  764|       |#endif
  765|       |    /*
  766|       |     * Check for presence of GOST 34.10 algorithms, and if they do not
  767|       |     * present, disable appropriate auth and key exchange
  768|       |     */
  769|     98|    if (!get_optional_pkey_id("gost94")) {
  770|     98|        *auth |= SSL_aGOST94;
  771|     98|    }
  772|     98|    if (!get_optional_pkey_id("gost2001")) {
  773|     98|        *auth |= SSL_aGOST01;
  774|     98|    }
  775|       |    /*
  776|       |     * Disable GOST key exchange if no GOST signature algs are available *
  777|       |     */
  778|     98|    if ((*auth & (SSL_aGOST94 | SSL_aGOST01)) == (SSL_aGOST94 | SSL_aGOST01)) {
  779|     98|        *mkey |= SSL_kGOST;
  780|     98|    }
  781|       |#ifdef SSL_FORBID_ENULL
  782|       |    *enc |= SSL_eNULL;
  783|       |#endif
  784|       |
  785|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_DES_IDX] == NULL) ? SSL_DES : 0;
  786|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_3DES_IDX] == NULL) ? SSL_3DES : 0;
  787|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_RC4_IDX] == NULL) ? SSL_RC4 : 0;
  788|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_RC2_IDX] == NULL) ? SSL_RC2 : 0;
  789|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_IDEA_IDX] == NULL) ? SSL_IDEA : 0;
  790|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_AES128_IDX] == NULL) ? SSL_AES128 : 0;
  791|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_AES256_IDX] == NULL) ? SSL_AES256 : 0;
  792|     98|    *enc |=
  793|     98|        (ssl_cipher_methods[SSL_ENC_AES128GCM_IDX] ==
  794|     98|         NULL) ? SSL_AES128GCM : 0;
  795|     98|    *enc |=
  796|     98|        (ssl_cipher_methods[SSL_ENC_AES256GCM_IDX] ==
  797|     98|         NULL) ? SSL_AES256GCM : 0;
  798|     98|    *enc |=
  799|     98|        (ssl_cipher_methods[SSL_ENC_CAMELLIA128_IDX] ==
  800|     98|         NULL) ? SSL_CAMELLIA128 : 0;
  801|     98|    *enc |=
  802|     98|        (ssl_cipher_methods[SSL_ENC_CAMELLIA256_IDX] ==
  803|     98|         NULL) ? SSL_CAMELLIA256 : 0;
  804|     98|    *enc |=
  805|     98|        (ssl_cipher_methods[SSL_ENC_GOST89_IDX] ==
  806|     98|         NULL) ? SSL_eGOST2814789CNT : 0;
  807|     98|    *enc |= (ssl_cipher_methods[SSL_ENC_SEED_IDX] == NULL) ? SSL_SEED : 0;
  808|       |
  809|     98|    *mac |= (ssl_digest_methods[SSL_MD_MD5_IDX] == NULL) ? SSL_MD5 : 0;
  810|     98|    *mac |= (ssl_digest_methods[SSL_MD_SHA1_IDX] == NULL) ? SSL_SHA1 : 0;
  811|     98|    *mac |= (ssl_digest_methods[SSL_MD_SHA256_IDX] == NULL) ? SSL_SHA256 : 0;
  812|     98|    *mac |= (ssl_digest_methods[SSL_MD_SHA384_IDX] == NULL) ? SSL_SHA384 : 0;
  813|     98|    *mac |= (ssl_digest_methods[SSL_MD_GOST94_IDX] == NULL) ? SSL_GOST94 : 0;
  814|     98|    *mac |= (ssl_digest_methods[SSL_MD_GOST89MAC_IDX] == NULL
  815|     98|             || ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX] ==
  816|     98|             NID_undef) ? SSL_GOST89MAC : 0;
  817|       |
  818|     98|}
ssl_ciph.c:ssl_cipher_collect_ciphers:
  830|     98|{
  831|     98|    int i, co_list_num;
  832|     98|    const SSL_CIPHER *c;
  833|       |
  834|       |    /*
  835|       |     * We have num_of_ciphers descriptions compiled in, depending on the
  836|       |     * method selected (SSLv2 and/or SSLv3, TLSv1 etc).
  837|       |     * These will later be sorted in a linked list with at most num
  838|       |     * entries.
  839|       |     */
  840|       |
  841|       |    /* Get the initial list of ciphers */
  842|     98|    co_list_num = 0;            /* actual count of ciphers */
  843|  13.8k|    for (i = 0; i < num_of_ciphers; i++) {
  844|  13.7k|        c = ssl_method->get_cipher(i);
  845|       |        /* drop those that use any of that is not available */
  846|  13.7k|        if ((c != NULL) && c->valid &&
  847|       |#ifdef OPENSSL_FIPS
  848|       |            (!FIPS_mode() || (c->algo_strength & SSL_FIPS)) &&
  849|       |#endif
  850|  13.7k|            !(c->algorithm_mkey & disabled_mkey) &&
  851|  13.7k|            !(c->algorithm_auth & disabled_auth) &&
  852|  13.7k|            !(c->algorithm_enc & disabled_enc) &&
  853|  13.7k|            !(c->algorithm_mac & disabled_mac) &&
  854|  13.7k|            !(c->algorithm_ssl & disabled_ssl)) {
  855|  13.1k|            co_list[co_list_num].cipher = c;
  856|  13.1k|            co_list[co_list_num].next = NULL;
  857|  13.1k|            co_list[co_list_num].prev = NULL;
  858|  13.1k|            co_list[co_list_num].active = 0;
  859|  13.1k|            co_list_num++;
  860|       |#ifdef KSSL_DEBUG
  861|       |            fprintf(stderr, "\t%d: %s %lx %lx %lx\n", i, c->name, c->id,
  862|       |                    c->algorithm_mkey, c->algorithm_auth);
  863|       |#endif                          /* KSSL_DEBUG */
  864|       |            /*
  865|       |             * if (!sk_push(ca_list,(char *)c)) goto err;
  866|       |             */
  867|  13.1k|        }
  868|  13.7k|    }
  869|       |
  870|       |    /*
  871|       |     * Prepare linked list from list entries
  872|       |     */
  873|     98|    if (co_list_num > 0) {
  874|     98|        co_list[0].prev = NULL;
  875|       |
  876|     98|        if (co_list_num > 1) {
  877|     98|            co_list[0].next = &co_list[1];
  878|       |
  879|  13.0k|            for (i = 1; i < co_list_num - 1; i++) {
  880|  12.9k|                co_list[i].prev = &co_list[i - 1];
  881|  12.9k|                co_list[i].next = &co_list[i + 1];
  882|  12.9k|            }
  883|       |
  884|     98|            co_list[co_list_num - 1].prev = &co_list[co_list_num - 2];
  885|     98|        }
  886|       |
  887|     98|        co_list[co_list_num - 1].next = NULL;
  888|       |
  889|     98|        *head_p = &co_list[0];
  890|     98|        *tail_p = &co_list[co_list_num - 1];
  891|     98|    }
  892|     98|}
ssl_ciph.c:ssl_cipher_apply_rule:
  972|  2.54k|{
  973|  2.54k|    CIPHER_ORDER *head, *tail, *curr, *next, *last;
  974|  2.54k|    const SSL_CIPHER *cp;
  975|  2.54k|    int reverse = 0;
  976|       |
  977|       |#ifdef CIPHER_DEBUG
  978|       |    fprintf(stderr,
  979|       |            "Applying rule %d with %08lx/%08lx/%08lx/%08lx/%08lx %08lx (%d)\n",
  980|       |            rule, alg_mkey, alg_auth, alg_enc, alg_mac, alg_ssl,
  981|       |            algo_strength, strength_bits);
  982|       |#endif
  983|       |
  984|  2.54k|    if (rule == CIPHER_DEL)
  985|    196|        reverse = 1;            /* needed to maintain sorting between
  986|       |                                 * currently deleted ciphers */
  987|       |
  988|  2.54k|    head = *head_p;
  989|  2.54k|    tail = *tail_p;
  990|       |
  991|  2.54k|    if (reverse) {
  992|    196|        next = tail;
  993|    196|        last = head;
  994|  2.35k|    } else {
  995|  2.35k|        next = head;
  996|  2.35k|        last = tail;
  997|  2.35k|    }
  998|       |
  999|  2.54k|    curr = NULL;
 1000|   330k|    for (;;) {
 1001|   330k|        if (curr == last)
 1002|  2.54k|            break;
 1003|       |
 1004|   328k|        curr = next;
 1005|       |
 1006|   328k|        if (curr == NULL)
 1007|      0|            break;
 1008|       |
 1009|   328k|        next = reverse ? curr->prev : curr->next;
 1010|       |
 1011|   328k|        cp = curr->cipher;
 1012|       |
 1013|       |        /*
 1014|       |         * Selection criteria is either the value of strength_bits
 1015|       |         * or the algorithms used.
 1016|       |         */
 1017|   328k|        if (strength_bits >= 0) {
 1018|  93.1k|            if (strength_bits != cp->strength_bits)
 1019|  75.6k|                continue;
 1020|   235k|        } else {
 1021|       |#ifdef CIPHER_DEBUG
 1022|       |            fprintf(stderr,
 1023|       |                    "\nName: %s:\nAlgo = %08lx/%08lx/%08lx/%08lx/%08lx Algo_strength = %08lx\n",
 1024|       |                    cp->name, cp->algorithm_mkey, cp->algorithm_auth,
 1025|       |                    cp->algorithm_enc, cp->algorithm_mac, cp->algorithm_ssl,
 1026|       |                    cp->algo_strength);
 1027|       |#endif
 1028|       |#ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
 1029|       |            if (cipher_id && cipher_id != cp->id)
 1030|       |                continue;
 1031|       |#endif
 1032|   235k|            if (alg_mkey && !(alg_mkey & cp->algorithm_mkey))
 1033|  58.8k|                continue;
 1034|   176k|            if (alg_auth && !(alg_auth & cp->algorithm_auth))
 1035|  33.1k|                continue;
 1036|   143k|            if (alg_enc && !(alg_enc & cp->algorithm_enc))
 1037|  28.7k|                continue;
 1038|   114k|            if (alg_mac && !(alg_mac & cp->algorithm_mac))
 1039|  12.5k|                continue;
 1040|   101k|            if (alg_ssl && !(alg_ssl & cp->algorithm_ssl))
 1041|  4.80k|                continue;
 1042|  97.1k|            if ((algo_strength & SSL_EXP_MASK)
 1043|  97.1k|                && !(algo_strength & SSL_EXP_MASK & cp->algo_strength))
 1044|  12.4k|                continue;
 1045|  84.6k|            if ((algo_strength & SSL_STRONG_MASK)
 1046|  84.6k|                && !(algo_strength & SSL_STRONG_MASK & cp->algo_strength))
 1047|  23.5k|                continue;
 1048|  61.1k|            if ((algo_strength & SSL_NOT_DEFAULT)
 1049|  61.1k|                && !(cp->algo_strength & SSL_NOT_DEFAULT))
 1050|      0|                continue;
 1051|  61.1k|        }
 1052|       |
 1053|       |#ifdef CIPHER_DEBUG
 1054|       |        fprintf(stderr, "Action = %d\n", rule);
 1055|       |#endif
 1056|       |
 1057|       |        /* add the cipher if it has not been added yet. */
 1058|  78.7k|        if (rule == CIPHER_ADD) {
 1059|       |            /* reverse == 0 */
 1060|  34.5k|            if (!curr->active) {
 1061|  27.7k|                ll_append_tail(&head, curr, &tail);
 1062|  27.7k|                curr->active = 1;
 1063|  27.7k|            }
 1064|  34.5k|        }
 1065|       |        /* Move the added cipher to this location */
 1066|  44.1k|        else if (rule == CIPHER_ORD) {
 1067|       |            /* reverse == 0 */
 1068|  25.2k|            if (curr->active) {
 1069|  25.2k|                ll_append_tail(&head, curr, &tail);
 1070|  25.2k|            }
 1071|  25.2k|        } else if (rule == CIPHER_DEL) {
 1072|       |            /* reverse == 1 */
 1073|  15.3k|            if (curr->active) {
 1074|       |                /*
 1075|       |                 * most recently deleted ciphersuites get best positions for
 1076|       |                 * any future CIPHER_ADD (note that the CIPHER_DEL loop works
 1077|       |                 * in reverse to maintain the order)
 1078|       |                 */
 1079|  15.3k|                ll_append_head(&head, curr, &tail);
 1080|  15.3k|                curr->active = 0;
 1081|  15.3k|            }
 1082|  15.3k|        } else if (rule == CIPHER_KILL) {
 1083|       |            /* reverse == 0 */
 1084|  3.52k|            if (head == curr)
 1085|    343|                head = curr->next;
 1086|  3.18k|            else
 1087|  3.18k|                curr->prev->next = curr->next;
 1088|  3.52k|            if (tail == curr)
 1089|    196|                tail = curr->prev;
 1090|  3.52k|            curr->active = 0;
 1091|  3.52k|            if (curr->next != NULL)
 1092|  3.33k|                curr->next->prev = curr->prev;
 1093|  3.52k|            if (curr->prev != NULL)
 1094|  3.18k|                curr->prev->next = curr->next;
 1095|  3.52k|            curr->next = NULL;
 1096|  3.52k|            curr->prev = NULL;
 1097|  3.52k|        }
 1098|  78.7k|    }
 1099|       |
 1100|  2.54k|    *head_p = head;
 1101|  2.54k|    *tail_p = tail;
 1102|  2.54k|}
ssl_ciph.c:ll_append_tail:
  694|  52.9k|{
  695|  52.9k|    if (curr == *tail)
  696|      0|        return;
  697|  52.9k|    if (curr == *head)
  698|  22.6k|        *head = curr->next;
  699|  52.9k|    if (curr->prev != NULL)
  700|  30.3k|        curr->prev->next = curr->next;
  701|  52.9k|    if (curr->next != NULL)
  702|  52.9k|        curr->next->prev = curr->prev;
  703|  52.9k|    (*tail)->next = curr;
  704|  52.9k|    curr->prev = *tail;
  705|  52.9k|    curr->next = NULL;
  706|  52.9k|    *tail = curr;
  707|  52.9k|}
ssl_ciph.c:ll_append_head:
  711|  15.3k|{
  712|  15.3k|    if (curr == *head)
  713|      0|        return;
  714|  15.3k|    if (curr == *tail)
  715|  15.3k|        *tail = curr->prev;
  716|  15.3k|    if (curr->next != NULL)
  717|      0|        curr->next->prev = curr->prev;
  718|  15.3k|    if (curr->prev != NULL)
  719|  15.3k|        curr->prev->next = curr->next;
  720|  15.3k|    (*head)->prev = curr;
  721|  15.3k|    curr->next = *head;
  722|  15.3k|    curr->prev = NULL;
  723|  15.3k|    *head = curr;
  724|  15.3k|}
ssl_ciph.c:ssl_cipher_strength_sort:
 1106|    147|{
 1107|    147|    int max_strength_bits, i, *number_uses;
 1108|    147|    CIPHER_ORDER *curr;
 1109|       |
 1110|       |    /*
 1111|       |     * This routine sorts the ciphers with descending strength. The sorting
 1112|       |     * must keep the pre-sorted sequence, so we apply the normal sorting
 1113|       |     * routine as '+' movement to the end of the list.
 1114|       |     */
 1115|    147|    max_strength_bits = 0;
 1116|    147|    curr = *head_p;
 1117|  18.0k|    while (curr != NULL) {
 1118|  17.9k|        if (curr->active && (curr->cipher->strength_bits > max_strength_bits))
 1119|    147|            max_strength_bits = curr->cipher->strength_bits;
 1120|  17.9k|        curr = curr->next;
 1121|  17.9k|    }
 1122|       |
 1123|    147|    number_uses = OPENSSL_malloc((max_strength_bits + 1) * sizeof(int));
 1124|    147|    if (!number_uses) {
 1125|      0|        SSLerr(SSL_F_SSL_CIPHER_STRENGTH_SORT, ERR_R_MALLOC_FAILURE);
 1126|      0|        return (0);
 1127|      0|    }
 1128|    147|    memset(number_uses, 0, (max_strength_bits + 1) * sizeof(int));
 1129|       |
 1130|       |    /*
 1131|       |     * Now find the strength_bits values actually used
 1132|       |     */
 1133|    147|    curr = *head_p;
 1134|  18.0k|    while (curr != NULL) {
 1135|  17.9k|        if (curr->active)
 1136|  17.5k|            number_uses[curr->cipher->strength_bits]++;
 1137|  17.9k|        curr = curr->next;
 1138|  17.9k|    }
 1139|       |    /*
 1140|       |     * Go through the list of used strength_bits values in descending
 1141|       |     * order.
 1142|       |     */
 1143|  37.9k|    for (i = max_strength_bits; i >= 0; i--)
 1144|  37.7k|        if (number_uses[i] > 0)
 1145|    735|            ssl_cipher_apply_rule(0, 0, 0, 0, 0, 0, 0, CIPHER_ORD, i, head_p,
 1146|    735|                                  tail_p);
 1147|       |
 1148|    147|    OPENSSL_free(number_uses);
 1149|    147|    return (1);
 1150|    147|}
ssl_ciph.c:ssl_cipher_collect_aliases:
  902|     98|{
  903|     98|    CIPHER_ORDER *ciph_curr;
  904|     98|    const SSL_CIPHER **ca_curr;
  905|     98|    int i;
  906|     98|    unsigned long mask_mkey = ~disabled_mkey;
  907|     98|    unsigned long mask_auth = ~disabled_auth;
  908|     98|    unsigned long mask_enc = ~disabled_enc;
  909|     98|    unsigned long mask_mac = ~disabled_mac;
  910|     98|    unsigned long mask_ssl = ~disabled_ssl;
  911|       |
  912|       |    /*
  913|       |     * First, add the real ciphers as already collected
  914|       |     */
  915|     98|    ciph_curr = head;
  916|     98|    ca_curr = ca_list;
  917|  13.2k|    while (ciph_curr != NULL) {
  918|  13.1k|        *ca_curr = ciph_curr->cipher;
  919|  13.1k|        ca_curr++;
  920|  13.1k|        ciph_curr = ciph_curr->next;
  921|  13.1k|    }
  922|       |
  923|       |    /*
  924|       |     * Now we add the available ones from the cipher_aliases[] table.
  925|       |     * They represent either one or more algorithms, some of which
  926|       |     * in any affected category must be supported (set in enabled_mask),
  927|       |     * or represent a cipher strength value (will be added in any case because algorithms=0).
  928|       |     */
  929|  8.33k|    for (i = 0; i < num_of_group_aliases; i++) {
  930|  8.23k|        unsigned long algorithm_mkey = cipher_aliases[i].algorithm_mkey;
  931|  8.23k|        unsigned long algorithm_auth = cipher_aliases[i].algorithm_auth;
  932|  8.23k|        unsigned long algorithm_enc = cipher_aliases[i].algorithm_enc;
  933|  8.23k|        unsigned long algorithm_mac = cipher_aliases[i].algorithm_mac;
  934|  8.23k|        unsigned long algorithm_ssl = cipher_aliases[i].algorithm_ssl;
  935|       |
  936|  8.23k|        if (algorithm_mkey)
  937|  3.23k|            if ((algorithm_mkey & mask_mkey) == 0)
  938|    294|                continue;
  939|       |
  940|  7.93k|        if (algorithm_auth)
  941|  2.74k|            if ((algorithm_auth & mask_auth) == 0)
  942|    392|                continue;
  943|       |
  944|  7.54k|        if (algorithm_enc)
  945|  2.35k|            if ((algorithm_enc & mask_enc) == 0)
  946|      0|                continue;
  947|       |
  948|  7.54k|        if (algorithm_mac)
  949|  1.27k|            if ((algorithm_mac & mask_mac) == 0)
  950|     98|                continue;
  951|       |
  952|  7.44k|        if (algorithm_ssl)
  953|    980|            if ((algorithm_ssl & mask_ssl) == 0)
  954|      0|                continue;
  955|       |
  956|  7.44k|        *ca_curr = (SSL_CIPHER *)(cipher_aliases + i);
  957|  7.44k|        ca_curr++;
  958|  7.44k|    }
  959|       |
  960|     98|    *ca_curr = NULL;            /* end of list */
  961|     98|}
ssl_ciph.c:ssl_cipher_process_rulestr:
 1156|     98|{
 1157|     98|    unsigned long alg_mkey, alg_auth, alg_enc, alg_mac, alg_ssl,
 1158|     98|        algo_strength;
 1159|     98|    const char *l, *buf;
 1160|     98|    int j, multi, found, rule, retval, ok, buflen;
 1161|     98|    unsigned long cipher_id = 0;
 1162|     98|    char ch;
 1163|       |
 1164|     98|    retval = 1;
 1165|     98|    l = rule_str;
 1166|  1.27k|    for (;;) {
 1167|  1.27k|        ch = *l;
 1168|       |
 1169|  1.27k|        if (ch == '\0')
 1170|      0|            break;              /* done */
 1171|  1.27k|        if (ch == '-') {
 1172|      0|            rule = CIPHER_DEL;
 1173|      0|            l++;
 1174|  1.27k|        } else if (ch == '+') {
 1175|      0|            rule = CIPHER_ORD;
 1176|      0|            l++;
 1177|  1.27k|        } else if (ch == '!') {
 1178|    539|            rule = CIPHER_KILL;
 1179|    539|            l++;
 1180|    735|        } else if (ch == '@') {
 1181|     49|            rule = CIPHER_SPECIAL;
 1182|     49|            l++;
 1183|    686|        } else {
 1184|    686|            rule = CIPHER_ADD;
 1185|    686|        }
 1186|       |
 1187|  1.27k|        if (ITEM_SEP(ch)) {
 1188|    588|            l++;
 1189|    588|            continue;
 1190|    588|        }
 1191|       |
 1192|    686|        alg_mkey = 0;
 1193|    686|        alg_auth = 0;
 1194|    686|        alg_enc = 0;
 1195|    686|        alg_mac = 0;
 1196|    686|        alg_ssl = 0;
 1197|    686|        algo_strength = 0;
 1198|       |
 1199|    686|        for (;;) {
 1200|    686|            ch = *l;
 1201|    686|            buf = l;
 1202|    686|            buflen = 0;
 1203|    686|#ifndef CHARSET_EBCDIC
 1204|  4.16k|            while (((ch >= 'A') && (ch <= 'Z')) ||
 1205|  4.16k|                   ((ch >= '0') && (ch <= '9')) ||
 1206|  4.16k|                   ((ch >= 'a') && (ch <= 'z')) || (ch == '-') || (ch == '.'))
 1207|       |#else
 1208|       |            while (isalnum((unsigned char)ch) || (ch == '-') || (ch == '.'))
 1209|       |#endif
 1210|  3.47k|            {
 1211|  3.47k|                ch = *(++l);
 1212|  3.47k|                buflen++;
 1213|  3.47k|            }
 1214|       |
 1215|    686|            if (buflen == 0) {
 1216|       |                /*
 1217|       |                 * We hit something we cannot deal with,
 1218|       |                 * it is no command or separator nor
 1219|       |                 * alphanumeric, so we call this an error.
 1220|       |                 */
 1221|      0|                SSLerr(SSL_F_SSL_CIPHER_PROCESS_RULESTR,
 1222|      0|                       SSL_R_INVALID_COMMAND);
 1223|      0|                retval = found = 0;
 1224|      0|                l++;
 1225|      0|                break;
 1226|      0|            }
 1227|       |
 1228|    686|            if (rule == CIPHER_SPECIAL) {
 1229|     49|                found = 0;      /* unused -- avoid compiler warning */
 1230|     49|                break;          /* special treatment */
 1231|     49|            }
 1232|       |
 1233|       |            /* check for multi-part specification */
 1234|    637|            if (ch == '+') {
 1235|      0|                multi = 1;
 1236|      0|                l++;
 1237|      0|            } else
 1238|    637|                multi = 0;
 1239|       |
 1240|       |            /*
 1241|       |             * Now search for the cipher alias in the ca_list. Be careful
 1242|       |             * with the strncmp, because the "buflen" limitation
 1243|       |             * will make the rule "ADH:SOME" and the cipher
 1244|       |             * "ADH-MY-CIPHER" look like a match for buflen=3.
 1245|       |             * So additionally check whether the cipher name found
 1246|       |             * has the correct length. We can save a strlen() call:
 1247|       |             * just checking for the '\0' at the right place is
 1248|       |             * sufficient, we have to strncmp() anyway. (We cannot
 1249|       |             * use strcmp(), because buf is not '\0' terminated.)
 1250|       |             */
 1251|    637|            j = found = 0;
 1252|    637|            cipher_id = 0;
 1253|   113k|            while (ca_list[j]) {
 1254|   113k|                if (!strncmp(buf, ca_list[j]->name, buflen) &&
 1255|   113k|                    (ca_list[j]->name[buflen] == '\0')) {
 1256|    637|                    found = 1;
 1257|    637|                    break;
 1258|    637|                } else
 1259|   113k|                    j++;
 1260|   113k|            }
 1261|       |
 1262|    637|            if (!found)
 1263|      0|                break;          /* ignore this entry */
 1264|       |
 1265|    637|            if (ca_list[j]->algorithm_mkey) {
 1266|      0|                if (alg_mkey) {
 1267|      0|                    alg_mkey &= ca_list[j]->algorithm_mkey;
 1268|      0|                    if (!alg_mkey) {
 1269|      0|                        found = 0;
 1270|      0|                        break;
 1271|      0|                    }
 1272|      0|                } else
 1273|      0|                    alg_mkey = ca_list[j]->algorithm_mkey;
 1274|      0|            }
 1275|       |
 1276|    637|            if (ca_list[j]->algorithm_auth) {
 1277|     98|                if (alg_auth) {
 1278|      0|                    alg_auth &= ca_list[j]->algorithm_auth;
 1279|      0|                    if (!alg_auth) {
 1280|      0|                        found = 0;
 1281|      0|                        break;
 1282|      0|                    }
 1283|      0|                } else
 1284|     98|                    alg_auth = ca_list[j]->algorithm_auth;
 1285|     98|            }
 1286|       |
 1287|    637|            if (ca_list[j]->algorithm_enc) {
 1288|    196|                if (alg_enc) {
 1289|      0|                    alg_enc &= ca_list[j]->algorithm_enc;
 1290|      0|                    if (!alg_enc) {
 1291|      0|                        found = 0;
 1292|      0|                        break;
 1293|      0|                    }
 1294|      0|                } else
 1295|    196|                    alg_enc = ca_list[j]->algorithm_enc;
 1296|    196|            }
 1297|       |
 1298|    637|            if (ca_list[j]->algorithm_mac) {
 1299|      0|                if (alg_mac) {
 1300|      0|                    alg_mac &= ca_list[j]->algorithm_mac;
 1301|      0|                    if (!alg_mac) {
 1302|      0|                        found = 0;
 1303|      0|                        break;
 1304|      0|                    }
 1305|      0|                } else
 1306|      0|                    alg_mac = ca_list[j]->algorithm_mac;
 1307|      0|            }
 1308|       |
 1309|    637|            if (ca_list[j]->algo_strength & SSL_EXP_MASK) {
 1310|     98|                if (algo_strength & SSL_EXP_MASK) {
 1311|      0|                    algo_strength &=
 1312|      0|                        (ca_list[j]->algo_strength & SSL_EXP_MASK) |
 1313|      0|                        ~SSL_EXP_MASK;
 1314|      0|                    if (!(algo_strength & SSL_EXP_MASK)) {
 1315|      0|                        found = 0;
 1316|      0|                        break;
 1317|      0|                    }
 1318|      0|                } else
 1319|     98|                    algo_strength |= ca_list[j]->algo_strength & SSL_EXP_MASK;
 1320|     98|            }
 1321|       |
 1322|    637|            if (ca_list[j]->algo_strength & SSL_STRONG_MASK) {
 1323|    196|                if (algo_strength & SSL_STRONG_MASK) {
 1324|      0|                    algo_strength &=
 1325|      0|                        (ca_list[j]->algo_strength & SSL_STRONG_MASK) |
 1326|      0|                        ~SSL_STRONG_MASK;
 1327|      0|                    if (!(algo_strength & SSL_STRONG_MASK)) {
 1328|      0|                        found = 0;
 1329|      0|                        break;
 1330|      0|                    }
 1331|      0|                } else
 1332|    196|                    algo_strength |=
 1333|    196|                        ca_list[j]->algo_strength & SSL_STRONG_MASK;
 1334|    196|            }
 1335|       |
 1336|    637|            if (ca_list[j]->algo_strength & SSL_NOT_DEFAULT) {
 1337|      0|                algo_strength |= SSL_NOT_DEFAULT;
 1338|      0|            }
 1339|       |
 1340|    637|            if (ca_list[j]->valid) {
 1341|       |                /*
 1342|       |                 * explicit ciphersuite found; its protocol version does not
 1343|       |                 * become part of the search pattern!
 1344|       |                 */
 1345|       |
 1346|      0|                cipher_id = ca_list[j]->id;
 1347|    637|            } else {
 1348|       |                /*
 1349|       |                 * not an explicit ciphersuite; only in this case, the
 1350|       |                 * protocol version is considered part of the search pattern
 1351|       |                 */
 1352|       |
 1353|    637|                if (ca_list[j]->algorithm_ssl) {
 1354|     49|                    if (alg_ssl) {
 1355|      0|                        alg_ssl &= ca_list[j]->algorithm_ssl;
 1356|      0|                        if (!alg_ssl) {
 1357|      0|                            found = 0;
 1358|      0|                            break;
 1359|      0|                        }
 1360|      0|                    } else
 1361|     49|                        alg_ssl = ca_list[j]->algorithm_ssl;
 1362|     49|                }
 1363|    637|            }
 1364|       |
 1365|    637|            if (!multi)
 1366|    637|                break;
 1367|    637|        }
 1368|       |
 1369|       |        /*
 1370|       |         * Ok, we have the rule, now apply it
 1371|       |         */
 1372|    686|        if (rule == CIPHER_SPECIAL) { /* special command */
 1373|     49|            ok = 0;
 1374|     49|            if ((buflen == 8) && !strncmp(buf, "STRENGTH", 8))
 1375|     49|                ok = ssl_cipher_strength_sort(head_p, tail_p);
 1376|      0|            else
 1377|     49|                SSLerr(SSL_F_SSL_CIPHER_PROCESS_RULESTR,
 1378|     49|                       SSL_R_INVALID_COMMAND);
 1379|     49|            if (ok == 0)
 1380|      0|                retval = 0;
 1381|       |            /*
 1382|       |             * We do not support any "multi" options
 1383|       |             * together with "@", so throw away the
 1384|       |             * rest of the command, if any left, until
 1385|       |             * end or ':' is found.
 1386|       |             */
 1387|     49|            while ((*l != '\0') && !ITEM_SEP(*l))
 1388|      0|                l++;
 1389|    637|        } else if (found) {
 1390|    637|            ssl_cipher_apply_rule(cipher_id,
 1391|    637|                                  alg_mkey, alg_auth, alg_enc, alg_mac,
 1392|    637|                                  alg_ssl, algo_strength, rule, -1, head_p,
 1393|    637|                                  tail_p);
 1394|    637|        } else {
 1395|      0|            while ((*l != '\0') && !ITEM_SEP(*l))
 1396|      0|                l++;
 1397|      0|        }
 1398|    686|        if (*l == '\0')
 1399|     98|            break;              /* done */
 1400|    686|    }
 1401|       |
 1402|     98|    return (retval);
 1403|     98|}

ERR_load_SSL_strings:
  832|      1|{
  833|      1|#ifndef OPENSSL_NO_ERR
  834|       |
  835|      1|    if (ERR_func_error_string(SSL_str_functs[0].error) == NULL) {
  836|      1|        ERR_load_strings(0, SSL_str_functs);
  837|      1|        ERR_load_strings(0, SSL_str_reasons);
  838|      1|    }
  839|      1|#endif
  840|      1|}

SSL_load_error_strings:
   64|      1|{
   65|      1|#ifndef OPENSSL_NO_ERR
   66|      1|    ERR_load_crypto_strings();
   67|      1|    ERR_load_SSL_strings();
   68|      1|#endif
   69|      1|}

SSL_clear:
  191|     98|{
  192|       |
  193|     98|    if (s->method == NULL) {
  194|      0|        SSLerr(SSL_F_SSL_CLEAR, SSL_R_NO_METHOD_SPECIFIED);
  195|      0|        return (0);
  196|      0|    }
  197|       |
  198|     98|    if (ssl_clear_bad_session(s)) {
  199|      0|        SSL_SESSION_free(s->session);
  200|      0|        s->session = NULL;
  201|      0|    }
  202|       |
  203|     98|    s->error = 0;
  204|     98|    s->hit = 0;
  205|     98|    s->shutdown = 0;
  206|       |
  207|       |#if 0
  208|       |    /*
  209|       |     * Disabled since version 1.10 of this file (early return not
  210|       |     * needed because SSL_clear is not called when doing renegotiation)
  211|       |     */
  212|       |    /*
  213|       |     * This is set if we are doing dynamic renegotiation so keep
  214|       |     * the old cipher.  It is sort of a SSL_clear_lite :-)
  215|       |     */
  216|       |    if (s->renegotiate)
  217|       |        return (1);
  218|       |#else
  219|     98|    if (s->renegotiate) {
  220|      0|        SSLerr(SSL_F_SSL_CLEAR, ERR_R_INTERNAL_ERROR);
  221|      0|        return 0;
  222|      0|    }
  223|     98|#endif
  224|       |
  225|     98|    s->type = 0;
  226|       |
  227|     98|    s->state = SSL_ST_BEFORE | ((s->server) ? SSL_ST_ACCEPT : SSL_ST_CONNECT);
  228|       |
  229|     98|    s->version = s->method->version;
  230|     98|    s->client_version = s->version;
  231|     98|    s->rwstate = SSL_NOTHING;
  232|     98|    s->rstate = SSL_ST_READ_HEADER;
  233|       |#if 0
  234|       |    s->read_ahead = s->ctx->read_ahead;
  235|       |#endif
  236|       |
  237|     98|    if (s->init_buf != NULL) {
  238|      0|        BUF_MEM_free(s->init_buf);
  239|      0|        s->init_buf = NULL;
  240|      0|    }
  241|       |
  242|     98|    ssl_clear_cipher_ctx(s);
  243|     98|    ssl_clear_hash_ctx(&s->read_hash);
  244|     98|    ssl_clear_hash_ctx(&s->write_hash);
  245|       |
  246|     98|    s->first_packet = 0;
  247|     98|#ifndef OPENSSL_NO_TLSEXT
  248|     98|    if (s->cert != NULL) {
  249|     98|        if (s->cert->alpn_proposed) {
  250|      0|            OPENSSL_free(s->cert->alpn_proposed);
  251|      0|            s->cert->alpn_proposed = NULL;
  252|      0|        }
  253|     98|        s->cert->alpn_proposed_len = 0;
  254|     98|        s->cert->alpn_sent = 0;
  255|     98|    }
  256|     98|#endif
  257|     98|#if 1
  258|       |    /*
  259|       |     * Check to see if we were changed into a different method, if so, revert
  260|       |     * back if we are not doing session-id reuse.
  261|       |     */
  262|     98|    if (!s->in_handshake && (s->session == NULL)
  263|     98|        && (s->method != s->ctx->method)) {
  264|      0|        s->method->ssl_free(s);
  265|      0|        s->method = s->ctx->method;
  266|      0|        if (!s->method->ssl_new(s))
  267|      0|            return (0);
  268|      0|    } else
  269|     98|#endif
  270|     98|        s->method->ssl_clear(s);
  271|     98|    return (1);
  272|     98|}
SSL_new:
  295|     49|{
  296|     49|    SSL *s;
  297|       |
  298|     49|    if (ctx == NULL) {
  299|      0|        SSLerr(SSL_F_SSL_NEW, SSL_R_NULL_SSL_CTX);
  300|      0|        return (NULL);
  301|      0|    }
  302|     49|    if (ctx->method == NULL) {
  303|      0|        SSLerr(SSL_F_SSL_NEW, SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION);
  304|      0|        return (NULL);
  305|      0|    }
  306|       |
  307|     49|    s = (SSL *)OPENSSL_malloc(sizeof(SSL));
  308|     49|    if (s == NULL)
  309|      0|        goto err;
  310|     49|    memset(s, 0, sizeof(SSL));
  311|       |
  312|       |#ifndef OPENSSL_NO_KRB5
  313|       |    s->kssl_ctx = kssl_ctx_new();
  314|       |#endif                          /* OPENSSL_NO_KRB5 */
  315|       |
  316|     49|    s->options = ctx->options;
  317|     49|    s->mode = ctx->mode;
  318|     49|    s->max_cert_list = ctx->max_cert_list;
  319|     49|    s->references = 1;
  320|       |
  321|     49|    if (ctx->cert != NULL) {
  322|       |        /*
  323|       |         * Earlier library versions used to copy the pointer to the CERT, not
  324|       |         * its contents; only when setting new parameters for the per-SSL
  325|       |         * copy, ssl_cert_new would be called (and the direct reference to
  326|       |         * the per-SSL_CTX settings would be lost, but those still were
  327|       |         * indirectly accessed for various purposes, and for that reason they
  328|       |         * used to be known as s->ctx->default_cert). Now we don't look at the
  329|       |         * SSL_CTX's CERT after having duplicated it once.
  330|       |         */
  331|       |
  332|     49|        s->cert = ssl_cert_dup(ctx->cert);
  333|     49|        if (s->cert == NULL)
  334|      0|            goto err;
  335|     49|    } else
  336|      0|        s->cert = NULL;         /* Cannot really happen (see SSL_CTX_new) */
  337|       |
  338|     49|    s->read_ahead = ctx->read_ahead;
  339|     49|    s->msg_callback = ctx->msg_callback;
  340|     49|    s->msg_callback_arg = ctx->msg_callback_arg;
  341|     49|    s->verify_mode = ctx->verify_mode;
  342|       |#if 0
  343|       |    s->verify_depth = ctx->verify_depth;
  344|       |#endif
  345|     49|    s->sid_ctx_length = ctx->sid_ctx_length;
  346|     49|    OPENSSL_assert(s->sid_ctx_length <= sizeof s->sid_ctx);
  347|     49|    memcpy(&s->sid_ctx, &ctx->sid_ctx, sizeof(s->sid_ctx));
  348|     49|    s->verify_callback = ctx->default_verify_callback;
  349|     49|    s->generate_session_id = ctx->generate_session_id;
  350|       |
  351|     49|    s->param = X509_VERIFY_PARAM_new();
  352|     49|    if (!s->param)
  353|      0|        goto err;
  354|     49|    X509_VERIFY_PARAM_inherit(s->param, ctx->param);
  355|       |#if 0
  356|       |    s->purpose = ctx->purpose;
  357|       |    s->trust = ctx->trust;
  358|       |#endif
  359|     49|    s->quiet_shutdown = ctx->quiet_shutdown;
  360|     49|    s->max_send_fragment = ctx->max_send_fragment;
  361|       |
  362|     49|    CRYPTO_add(&ctx->references, 1, CRYPTO_LOCK_SSL_CTX);
  363|     49|    s->ctx = ctx;
  364|     49|#ifndef OPENSSL_NO_TLSEXT
  365|     49|    s->tlsext_debug_cb = 0;
  366|     49|    s->tlsext_debug_arg = NULL;
  367|     49|    s->tlsext_ticket_expected = 0;
  368|     49|    s->tlsext_status_type = -1;
  369|     49|    s->tlsext_status_expected = 0;
  370|     49|    s->tlsext_ocsp_ids = NULL;
  371|     49|    s->tlsext_ocsp_exts = NULL;
  372|     49|    s->tlsext_ocsp_resp = NULL;
  373|     49|    s->tlsext_ocsp_resplen = -1;
  374|     49|    CRYPTO_add(&ctx->references, 1, CRYPTO_LOCK_SSL_CTX);
  375|     49|    s->initial_ctx = ctx;
  376|     49|# ifndef OPENSSL_NO_EC
  377|     49|    if (ctx->tlsext_ecpointformatlist) {
  378|      0|        s->tlsext_ecpointformatlist =
  379|      0|            BUF_memdup(ctx->tlsext_ecpointformatlist,
  380|      0|                       ctx->tlsext_ecpointformatlist_length);
  381|      0|        if (!s->tlsext_ecpointformatlist)
  382|      0|            goto err;
  383|      0|        s->tlsext_ecpointformatlist_length =
  384|      0|            ctx->tlsext_ecpointformatlist_length;
  385|      0|    }
  386|     49|    if (ctx->tlsext_ellipticcurvelist) {
  387|      0|        s->tlsext_ellipticcurvelist =
  388|      0|            BUF_memdup(ctx->tlsext_ellipticcurvelist,
  389|      0|                       ctx->tlsext_ellipticcurvelist_length);
  390|      0|        if (!s->tlsext_ellipticcurvelist)
  391|      0|            goto err;
  392|      0|        s->tlsext_ellipticcurvelist_length =
  393|      0|            ctx->tlsext_ellipticcurvelist_length;
  394|      0|    }
  395|     49|# endif
  396|     49|# ifndef OPENSSL_NO_NEXTPROTONEG
  397|     49|    s->next_proto_negotiated = NULL;
  398|     49|# endif
  399|       |
  400|     49|    if (s->ctx->alpn_client_proto_list) {
  401|      0|        s->alpn_client_proto_list =
  402|      0|            OPENSSL_malloc(s->ctx->alpn_client_proto_list_len);
  403|      0|        if (s->alpn_client_proto_list == NULL)
  404|      0|            goto err;
  405|      0|        memcpy(s->alpn_client_proto_list, s->ctx->alpn_client_proto_list,
  406|      0|               s->ctx->alpn_client_proto_list_len);
  407|      0|        s->alpn_client_proto_list_len = s->ctx->alpn_client_proto_list_len;
  408|      0|    }
  409|     49|#endif
  410|       |
  411|     49|    s->verify_result = X509_V_OK;
  412|       |
  413|     49|    s->method = ctx->method;
  414|       |
  415|     49|    if (!s->method->ssl_new(s))
  416|      0|        goto err;
  417|       |
  418|     49|    s->server = (ctx->method->ssl_accept == ssl_undefined_function) ? 0 : 1;
  419|       |
  420|     49|    SSL_clear(s);
  421|       |
  422|     49|    CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);
  423|       |
  424|     49|#ifndef OPENSSL_NO_PSK
  425|     49|    s->psk_client_callback = ctx->psk_client_callback;
  426|     49|    s->psk_server_callback = ctx->psk_server_callback;
  427|     49|#endif
  428|       |
  429|     49|    return (s);
  430|      0| err:
  431|      0|    if (s != NULL)
  432|      0|        SSL_free(s);
  433|      0|    SSLerr(SSL_F_SSL_NEW, ERR_R_MALLOC_FAILURE);
  434|      0|    return (NULL);
  435|     49|}
SSL_free:
  563|     49|{
  564|     49|    int i;
  565|       |
  566|     49|    if (s == NULL)
  567|      0|        return;
  568|       |
  569|     49|    i = CRYPTO_add(&s->references, -1, CRYPTO_LOCK_SSL);
  570|       |#ifdef REF_PRINT
  571|       |    REF_PRINT("SSL", s);
  572|       |#endif
  573|     49|    if (i > 0)
  574|      0|        return;
  575|       |#ifdef REF_CHECK
  576|       |    if (i < 0) {
  577|       |        fprintf(stderr, "SSL_free, bad reference count\n");
  578|       |        abort();                /* ok */
  579|       |    }
  580|       |#endif
  581|       |
  582|     49|    if (s->param)
  583|     49|        X509_VERIFY_PARAM_free(s->param);
  584|       |
  585|     49|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);
  586|       |
  587|     49|    if (s->bbio != NULL) {
  588|       |        /* If the buffering BIO is in place, pop it off */
  589|      0|        if (s->bbio == s->wbio) {
  590|      0|            s->wbio = BIO_pop(s->wbio);
  591|      0|        }
  592|      0|        BIO_free(s->bbio);
  593|      0|        s->bbio = NULL;
  594|      0|    }
  595|     49|    if (s->rbio != NULL)
  596|     49|        BIO_free_all(s->rbio);
  597|     49|    if ((s->wbio != NULL) && (s->wbio != s->rbio))
  598|      0|        BIO_free_all(s->wbio);
  599|       |
  600|     49|    if (s->init_buf != NULL)
  601|     49|        BUF_MEM_free(s->init_buf);
  602|       |
  603|       |    /* add extra stuff */
  604|     49|    if (s->cipher_list != NULL)
  605|     49|        sk_SSL_CIPHER_free(s->cipher_list);
  606|     49|    if (s->cipher_list_by_id != NULL)
  607|     49|        sk_SSL_CIPHER_free(s->cipher_list_by_id);
  608|       |
  609|       |    /* Make the next call work :-) */
  610|     49|    if (s->session != NULL) {
  611|     49|        ssl_clear_bad_session(s);
  612|     49|        SSL_SESSION_free(s->session);
  613|     49|    }
  614|       |
  615|     49|    ssl_clear_cipher_ctx(s);
  616|     49|    ssl_clear_hash_ctx(&s->read_hash);
  617|     49|    ssl_clear_hash_ctx(&s->write_hash);
  618|       |
  619|     49|    if (s->cert != NULL)
  620|     49|        ssl_cert_free(s->cert);
  621|       |    /* Free up if allocated */
  622|       |
  623|     49|#ifndef OPENSSL_NO_TLSEXT
  624|     49|    if (s->tlsext_hostname)
  625|     47|        OPENSSL_free(s->tlsext_hostname);
  626|     49|    if (s->initial_ctx)
  627|     49|        SSL_CTX_free(s->initial_ctx);
  628|     49|# ifndef OPENSSL_NO_EC
  629|     49|    if (s->tlsext_ecpointformatlist)
  630|      0|        OPENSSL_free(s->tlsext_ecpointformatlist);
  631|     49|    if (s->tlsext_ellipticcurvelist)
  632|      0|        OPENSSL_free(s->tlsext_ellipticcurvelist);
  633|     49|# endif                         /* OPENSSL_NO_EC */
  634|     49|    if (s->tlsext_opaque_prf_input)
  635|      0|        OPENSSL_free(s->tlsext_opaque_prf_input);
  636|     49|    if (s->tlsext_ocsp_exts)
  637|     49|        sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts, X509_EXTENSION_free);
  638|     49|    if (s->tlsext_ocsp_ids)
  639|     49|        sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);
  640|     49|    if (s->tlsext_ocsp_resp)
  641|      0|        OPENSSL_free(s->tlsext_ocsp_resp);
  642|     49|    if (s->alpn_client_proto_list)
  643|      0|        OPENSSL_free(s->alpn_client_proto_list);
  644|     49|#endif
  645|       |
  646|     49|    if (s->client_CA != NULL)
  647|     49|        sk_X509_NAME_pop_free(s->client_CA, X509_NAME_free);
  648|       |
  649|     49|    if (s->method != NULL)
  650|     49|        s->method->ssl_free(s);
  651|       |
  652|     49|    if (s->ctx)
  653|     49|        SSL_CTX_free(s->ctx);
  654|       |
  655|       |#ifndef OPENSSL_NO_KRB5
  656|       |    if (s->kssl_ctx != NULL)
  657|       |        kssl_ctx_free(s->kssl_ctx);
  658|       |#endif                          /* OPENSSL_NO_KRB5 */
  659|       |
  660|     49|#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
  661|     49|    if (s->next_proto_negotiated)
  662|      0|        OPENSSL_free(s->next_proto_negotiated);
  663|     49|#endif
  664|       |
  665|     49|#ifndef OPENSSL_NO_SRTP
  666|     49|    if (s->srtp_profiles)
  667|     49|        sk_SRTP_PROTECTION_PROFILE_free(s->srtp_profiles);
  668|     49|#endif
  669|       |
  670|     49|    OPENSSL_free(s);
  671|     49|}
SSL_set_bio:
  674|     49|{
  675|       |    /*
  676|       |     * If the output buffering BIO is still in place, remove it
  677|       |     */
  678|     49|    if (s->bbio != NULL) {
  679|      0|        if (s->wbio == s->bbio) {
  680|      0|            s->wbio = s->wbio->next_bio;
  681|      0|            s->bbio->next_bio = NULL;
  682|      0|        }
  683|      0|    }
  684|     49|    if ((s->rbio != NULL) && (s->rbio != rbio))
  685|      0|        BIO_free_all(s->rbio);
  686|     49|    if ((s->wbio != NULL) && (s->wbio != wbio) && (s->rbio != s->wbio))
  687|      0|        BIO_free_all(s->wbio);
  688|     49|    s->rbio = rbio;
  689|     49|    s->wbio = wbio;
  690|     49|}
SSL_get_rbio:
  693|      1|{
  694|      1|    return (s->rbio);
  695|      1|}
SSL_set_fd:
  733|     49|{
  734|     49|    int ret = 0;
  735|     49|    BIO *bio = NULL;
  736|       |
  737|     49|    bio = BIO_new(BIO_s_socket());
  738|       |
  739|     49|    if (bio == NULL) {
  740|      0|        SSLerr(SSL_F_SSL_SET_FD, ERR_R_BUF_LIB);
  741|      0|        goto err;
  742|      0|    }
  743|     49|    BIO_set_fd(bio, fd, BIO_NOCLOSE);
  744|     49|    SSL_set_bio(s, bio, bio);
  745|     49|    ret = 1;
  746|     49| err:
  747|     49|    return (ret);
  748|     49|}
SSL_connect:
 1003|     49|{
 1004|     49|    if (s->handshake_func == 0)
 1005|       |        /* Not properly initialized yet */
 1006|      0|        SSL_set_connect_state(s);
 1007|       |
 1008|     49|    return (s->method->ssl_connect(s));
 1009|     49|}
SSL_read:
 1017|     49|{
 1018|     49|    if (s->handshake_func == 0) {
 1019|      0|        SSLerr(SSL_F_SSL_READ, SSL_R_UNINITIALIZED);
 1020|      0|        return -1;
 1021|      0|    }
 1022|       |
 1023|     49|    if (s->shutdown & SSL_RECEIVED_SHUTDOWN) {
 1024|      0|        s->rwstate = SSL_NOTHING;
 1025|      0|        return (0);
 1026|      0|    }
 1027|     49|    return (s->method->ssl_read(s, buf, num));
 1028|     49|}
SSL_shutdown:
 1059|     49|{
 1060|       |    /*
 1061|       |     * Note that this function behaves differently from what one might
 1062|       |     * expect.  Return values are 0 for no success (yet), 1 for success; but
 1063|       |     * calling it once is usually not enough, even if blocking I/O is used
 1064|       |     * (see ssl3_shutdown).
 1065|       |     */
 1066|       |
 1067|     49|    if (s->handshake_func == 0) {
 1068|      0|        SSLerr(SSL_F_SSL_SHUTDOWN, SSL_R_UNINITIALIZED);
 1069|      0|        return -1;
 1070|      0|    }
 1071|       |
 1072|     49|    if (!SSL_in_init(s)) {
 1073|      0|        return s->method->ssl_shutdown(s);
 1074|     49|    } else {
 1075|     49|        SSLerr(SSL_F_SSL_SHUTDOWN, SSL_R_SHUTDOWN_WHILE_IN_INIT);
 1076|     49|        return -1;
 1077|     49|    }
 1078|     49|}
SSL_ctrl:
 1110|     97|{
 1111|     97|    long l;
 1112|       |
 1113|     97|    switch (cmd) {
 1114|      0|    case SSL_CTRL_GET_READ_AHEAD:
 1115|      0|        return (s->read_ahead);
 1116|      0|    case SSL_CTRL_SET_READ_AHEAD:
 1117|      0|        l = s->read_ahead;
 1118|      0|        s->read_ahead = larg;
 1119|      0|        return (l);
 1120|       |
 1121|      0|    case SSL_CTRL_SET_MSG_CALLBACK_ARG:
 1122|      0|        s->msg_callback_arg = parg;
 1123|      0|        return 1;
 1124|       |
 1125|     49|    case SSL_CTRL_OPTIONS:
 1126|     49|        return (s->options |= larg);
 1127|      0|    case SSL_CTRL_CLEAR_OPTIONS:
 1128|      0|        return (s->options &= ~larg);
 1129|      0|    case SSL_CTRL_MODE:
 1130|      0|        return (s->mode |= larg);
 1131|      0|    case SSL_CTRL_CLEAR_MODE:
 1132|      0|        return (s->mode &= ~larg);
 1133|      0|    case SSL_CTRL_GET_MAX_CERT_LIST:
 1134|      0|        return (s->max_cert_list);
 1135|      0|    case SSL_CTRL_SET_MAX_CERT_LIST:
 1136|      0|        l = s->max_cert_list;
 1137|      0|        s->max_cert_list = larg;
 1138|      0|        return (l);
 1139|      0|    case SSL_CTRL_SET_MAX_SEND_FRAGMENT:
 1140|      0|        if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)
 1141|      0|            return 0;
 1142|      0|        s->max_send_fragment = larg;
 1143|      0|        return 1;
 1144|      0|    case SSL_CTRL_GET_RI_SUPPORT:
 1145|      0|        if (s->s3)
 1146|      0|            return s->s3->send_connection_binding;
 1147|      0|        else
 1148|      0|            return 0;
 1149|      0|    case SSL_CTRL_CERT_FLAGS:
 1150|      0|        return (s->cert->cert_flags |= larg);
 1151|      0|    case SSL_CTRL_CLEAR_CERT_FLAGS:
 1152|      0|        return (s->cert->cert_flags &= ~larg);
 1153|       |
 1154|      0|    case SSL_CTRL_GET_RAW_CIPHERLIST:
 1155|      0|        if (parg) {
 1156|      0|            if (s->cert->ciphers_raw == NULL)
 1157|      0|                return 0;
 1158|      0|            *(unsigned char **)parg = s->cert->ciphers_raw;
 1159|      0|            return (int)s->cert->ciphers_rawlen;
 1160|      0|        } else
 1161|      0|            return ssl_put_cipher_by_char(s, NULL, NULL);
 1162|     48|    default:
 1163|     48|        return (s->method->ssl_ctrl(s, cmd, larg, parg));
 1164|     97|    }
 1165|     97|}
SSL_CTX_ctrl:
 1188|    147|{
 1189|    147|    long l;
 1190|       |    /* For some cases with ctx == NULL perform syntax checks */
 1191|    147|    if (ctx == NULL) {
 1192|      0|        switch (cmd) {
 1193|      0|#ifndef OPENSSL_NO_EC
 1194|      0|        case SSL_CTRL_SET_CURVES_LIST:
 1195|      0|            return tls1_set_curves_list(NULL, NULL, parg);
 1196|      0|#endif
 1197|      0|        case SSL_CTRL_SET_SIGALGS_LIST:
 1198|      0|        case SSL_CTRL_SET_CLIENT_SIGALGS_LIST:
 1199|      0|            return tls1_set_sigalgs_list(NULL, parg, 0);
 1200|      0|        default:
 1201|      0|            return 0;
 1202|      0|        }
 1203|      0|    }
 1204|       |
 1205|    147|    switch (cmd) {
 1206|      0|    case SSL_CTRL_GET_READ_AHEAD:
 1207|      0|        return (ctx->read_ahead);
 1208|      0|    case SSL_CTRL_SET_READ_AHEAD:
 1209|      0|        l = ctx->read_ahead;
 1210|      0|        ctx->read_ahead = larg;
 1211|      0|        return (l);
 1212|       |
 1213|      0|    case SSL_CTRL_SET_MSG_CALLBACK_ARG:
 1214|      0|        ctx->msg_callback_arg = parg;
 1215|      0|        return 1;
 1216|       |
 1217|      0|    case SSL_CTRL_GET_MAX_CERT_LIST:
 1218|      0|        return (ctx->max_cert_list);
 1219|      0|    case SSL_CTRL_SET_MAX_CERT_LIST:
 1220|      0|        l = ctx->max_cert_list;
 1221|      0|        ctx->max_cert_list = larg;
 1222|      0|        return (l);
 1223|       |
 1224|      0|    case SSL_CTRL_SET_SESS_CACHE_SIZE:
 1225|      0|        l = ctx->session_cache_size;
 1226|      0|        ctx->session_cache_size = larg;
 1227|      0|        return (l);
 1228|      0|    case SSL_CTRL_GET_SESS_CACHE_SIZE:
 1229|      0|        return (ctx->session_cache_size);
 1230|     49|    case SSL_CTRL_SET_SESS_CACHE_MODE:
 1231|     49|        l = ctx->session_cache_mode;
 1232|     49|        ctx->session_cache_mode = larg;
 1233|     49|        return (l);
 1234|      0|    case SSL_CTRL_GET_SESS_CACHE_MODE:
 1235|      0|        return (ctx->session_cache_mode);
 1236|       |
 1237|      0|    case SSL_CTRL_SESS_NUMBER:
 1238|      0|        return (lh_SSL_SESSION_num_items(ctx->sessions));
 1239|      0|    case SSL_CTRL_SESS_CONNECT:
 1240|      0|        return (ctx->stats.sess_connect);
 1241|      0|    case SSL_CTRL_SESS_CONNECT_GOOD:
 1242|      0|        return (ctx->stats.sess_connect_good);
 1243|      0|    case SSL_CTRL_SESS_CONNECT_RENEGOTIATE:
 1244|      0|        return (ctx->stats.sess_connect_renegotiate);
 1245|      0|    case SSL_CTRL_SESS_ACCEPT:
 1246|      0|        return (ctx->stats.sess_accept);
 1247|      0|    case SSL_CTRL_SESS_ACCEPT_GOOD:
 1248|      0|        return (ctx->stats.sess_accept_good);
 1249|      0|    case SSL_CTRL_SESS_ACCEPT_RENEGOTIATE:
 1250|      0|        return (ctx->stats.sess_accept_renegotiate);
 1251|      0|    case SSL_CTRL_SESS_HIT:
 1252|      0|        return (ctx->stats.sess_hit);
 1253|      0|    case SSL_CTRL_SESS_CB_HIT:
 1254|      0|        return (ctx->stats.sess_cb_hit);
 1255|      0|    case SSL_CTRL_SESS_MISSES:
 1256|      0|        return (ctx->stats.sess_miss);
 1257|      0|    case SSL_CTRL_SESS_TIMEOUTS:
 1258|      0|        return (ctx->stats.sess_timeout);
 1259|      0|    case SSL_CTRL_SESS_CACHE_FULL:
 1260|      0|        return (ctx->stats.sess_cache_full);
 1261|     49|    case SSL_CTRL_OPTIONS:
 1262|     49|        return (ctx->options |= larg);
 1263|      0|    case SSL_CTRL_CLEAR_OPTIONS:
 1264|      0|        return (ctx->options &= ~larg);
 1265|     49|    case SSL_CTRL_MODE:
 1266|     49|        return (ctx->mode |= larg);
 1267|      0|    case SSL_CTRL_CLEAR_MODE:
 1268|      0|        return (ctx->mode &= ~larg);
 1269|      0|    case SSL_CTRL_SET_MAX_SEND_FRAGMENT:
 1270|      0|        if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)
 1271|      0|            return 0;
 1272|      0|        ctx->max_send_fragment = larg;
 1273|      0|        return 1;
 1274|      0|    case SSL_CTRL_CERT_FLAGS:
 1275|      0|        return (ctx->cert->cert_flags |= larg);
 1276|      0|    case SSL_CTRL_CLEAR_CERT_FLAGS:
 1277|      0|        return (ctx->cert->cert_flags &= ~larg);
 1278|      0|    default:
 1279|      0|        return (ctx->method->ssl_ctx_ctrl(ctx, cmd, larg, parg));
 1280|    147|    }
 1281|    147|}
ssl_cipher_ptr_id_cmp:
 1311|  46.4k|{
 1312|  46.4k|    long l;
 1313|       |
 1314|  46.4k|    l = (*ap)->id - (*bp)->id;
 1315|  46.4k|    if (l == 0L)
 1316|      0|        return (0);
 1317|  46.4k|    else
 1318|  46.4k|        return ((l > 0) ? 1 : -1);
 1319|  46.4k|}
SSL_get_ciphers:
 1324|     98|{
 1325|     98|    if (s != NULL) {
 1326|     98|        if (s->cipher_list != NULL) {
 1327|      0|            return (s->cipher_list);
 1328|     98|        } else if ((s->ctx != NULL) && (s->ctx->cipher_list != NULL)) {
 1329|     98|            return (s->ctx->cipher_list);
 1330|     98|        }
 1331|     98|    }
 1332|      0|    return (NULL);
 1333|     98|}
SSL_CTX_set_cipher_list:
 1368|     49|{
 1369|     49|    STACK_OF(SSL_CIPHER) *sk;
 1370|       |
 1371|     49|    sk = ssl_create_cipher_list(ctx->method, &ctx->cipher_list,
 1372|     49|                                &ctx->cipher_list_by_id, str, ctx->cert);
 1373|       |    /*
 1374|       |     * ssl_create_cipher_list may return an empty stack if it was unable to
 1375|       |     * find a cipher matching the given rule string (for example if the rule
 1376|       |     * string specifies a cipher which has been disabled). This is not an
 1377|       |     * error as far as ssl_create_cipher_list is concerned, and hence
 1378|       |     * ctx->cipher_list and ctx->cipher_list_by_id has been updated.
 1379|       |     */
 1380|     49|    if (sk == NULL)
 1381|      0|        return 0;
 1382|     49|    else if (sk_SSL_CIPHER_num(sk) == 0) {
 1383|      0|        SSLerr(SSL_F_SSL_CTX_SET_CIPHER_LIST, SSL_R_NO_CIPHER_MATCH);
 1384|      0|        return 0;
 1385|      0|    }
 1386|     49|    return 1;
 1387|     49|}
ssl_cipher_list_to_bytes:
 1447|     49|{
 1448|     49|    int i, j = 0;
 1449|     49|    SSL_CIPHER *c;
 1450|     49|    CERT *ct = s->cert;
 1451|     49|    unsigned char *q;
 1452|     49|    int empty_reneg_info_scsv = !s->renegotiate;
 1453|       |    /* Set disabled masks for this session */
 1454|     49|    ssl_set_client_disabled(s);
 1455|       |
 1456|     49|    if (sk == NULL)
 1457|      0|        return (0);
 1458|     49|    q = p;
 1459|     49|    if (put_cb == NULL)
 1460|      0|        put_cb = s->method->put_cipher_by_char;
 1461|       |
 1462|  4.50k|    for (i = 0; i < sk_SSL_CIPHER_num(sk); i++) {
 1463|  4.45k|        c = sk_SSL_CIPHER_value(sk, i);
 1464|       |        /* Skip disabled ciphers */
 1465|  4.45k|        if (c->algorithm_ssl & ct->mask_ssl ||
 1466|  4.45k|            c->algorithm_mkey & ct->mask_k || c->algorithm_auth & ct->mask_a)
 1467|    588|            continue;
 1468|       |#ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
 1469|       |        if (c->id == SSL3_CK_SCSV) {
 1470|       |            if (!empty_reneg_info_scsv)
 1471|       |                continue;
 1472|       |            else
 1473|       |                empty_reneg_info_scsv = 0;
 1474|       |        }
 1475|       |#endif
 1476|  3.87k|        j = put_cb(c, p);
 1477|  3.87k|        p += j;
 1478|  3.87k|    }
 1479|       |    /*
 1480|       |     * If p == q, no ciphers; caller indicates an error. Otherwise, add
 1481|       |     * applicable SCSVs.
 1482|       |     */
 1483|     49|    if (p != q) {
 1484|     49|        if (empty_reneg_info_scsv) {
 1485|     49|            static SSL_CIPHER scsv = {
 1486|     49|                0, NULL, SSL3_CK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0
 1487|     49|            };
 1488|     49|            j = put_cb(&scsv, p);
 1489|     49|            p += j;
 1490|       |#ifdef OPENSSL_RI_DEBUG
 1491|       |            fprintf(stderr,
 1492|       |                    "TLS_EMPTY_RENEGOTIATION_INFO_SCSV sent by client\n");
 1493|       |#endif
 1494|     49|        }
 1495|     49|        if (s->mode & SSL_MODE_SEND_FALLBACK_SCSV) {
 1496|      0|            static SSL_CIPHER scsv = {
 1497|      0|                0, NULL, SSL3_CK_FALLBACK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0
 1498|      0|            };
 1499|      0|            j = put_cb(&scsv, p);
 1500|      0|            p += j;
 1501|      0|        }
 1502|     49|    }
 1503|       |
 1504|     49|    return (p - q);
 1505|     49|}
SSL_CTX_new:
 1885|     49|{
 1886|     49|    SSL_CTX *ret = NULL;
 1887|       |
 1888|     49|    if (meth == NULL) {
 1889|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_NULL_SSL_METHOD_PASSED);
 1890|      0|        return (NULL);
 1891|      0|    }
 1892|       |#ifdef OPENSSL_FIPS
 1893|       |    if (FIPS_mode() && (meth->version < TLS1_VERSION)) {
 1894|       |        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);
 1895|       |        return NULL;
 1896|       |    }
 1897|       |#endif
 1898|       |
 1899|     49|    if (SSL_get_ex_data_X509_STORE_CTX_idx() < 0) {
 1900|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_X509_VERIFICATION_SETUP_PROBLEMS);
 1901|      0|        goto err;
 1902|      0|    }
 1903|     49|    ret = (SSL_CTX *)OPENSSL_malloc(sizeof(SSL_CTX));
 1904|     49|    if (ret == NULL)
 1905|      0|        goto err;
 1906|       |
 1907|     49|    memset(ret, 0, sizeof(SSL_CTX));
 1908|       |
 1909|     49|    ret->method = meth;
 1910|       |
 1911|     49|    ret->cert_store = NULL;
 1912|     49|    ret->session_cache_mode = SSL_SESS_CACHE_SERVER;
 1913|     49|    ret->session_cache_size = SSL_SESSION_CACHE_MAX_SIZE_DEFAULT;
 1914|     49|    ret->session_cache_head = NULL;
 1915|     49|    ret->session_cache_tail = NULL;
 1916|       |
 1917|       |    /* We take the system default */
 1918|     49|    ret->session_timeout = meth->get_timeout();
 1919|       |
 1920|     49|    ret->new_session_cb = 0;
 1921|     49|    ret->remove_session_cb = 0;
 1922|     49|    ret->get_session_cb = 0;
 1923|     49|    ret->generate_session_id = 0;
 1924|       |
 1925|     49|    memset((char *)&ret->stats, 0, sizeof(ret->stats));
 1926|       |
 1927|     49|    ret->references = 1;
 1928|     49|    ret->quiet_shutdown = 0;
 1929|       |
 1930|       |/*  ret->cipher=NULL;*/
 1931|       |/*-
 1932|       |    ret->s2->challenge=NULL;
 1933|       |    ret->master_key=NULL;
 1934|       |    ret->key_arg=NULL;
 1935|       |    ret->s2->conn_id=NULL; */
 1936|       |
 1937|     49|    ret->info_callback = NULL;
 1938|       |
 1939|     49|    ret->app_verify_callback = 0;
 1940|     49|    ret->app_verify_arg = NULL;
 1941|       |
 1942|     49|    ret->max_cert_list = SSL_MAX_CERT_LIST_DEFAULT;
 1943|     49|    ret->read_ahead = 0;
 1944|     49|    ret->msg_callback = 0;
 1945|     49|    ret->msg_callback_arg = NULL;
 1946|     49|    ret->verify_mode = SSL_VERIFY_NONE;
 1947|       |#if 0
 1948|       |    ret->verify_depth = -1;     /* Don't impose a limit (but x509_lu.c does) */
 1949|       |#endif
 1950|     49|    ret->sid_ctx_length = 0;
 1951|     49|    ret->default_verify_callback = NULL;
 1952|     49|    if ((ret->cert = ssl_cert_new()) == NULL)
 1953|      0|        goto err;
 1954|       |
 1955|     49|    ret->default_passwd_callback = 0;
 1956|     49|    ret->default_passwd_callback_userdata = NULL;
 1957|     49|    ret->client_cert_cb = 0;
 1958|     49|    ret->app_gen_cookie_cb = 0;
 1959|     49|    ret->app_verify_cookie_cb = 0;
 1960|       |
 1961|     49|    ret->sessions = lh_SSL_SESSION_new();
 1962|     49|    if (ret->sessions == NULL)
 1963|      0|        goto err;
 1964|     49|    ret->cert_store = X509_STORE_new();
 1965|     49|    if (ret->cert_store == NULL)
 1966|      0|        goto err;
 1967|       |
 1968|     49|    ssl_create_cipher_list(ret->method,
 1969|     49|                           &ret->cipher_list, &ret->cipher_list_by_id,
 1970|     49|                           meth->version ==
 1971|     49|                           SSL2_VERSION ? "SSLv2" : SSL_DEFAULT_CIPHER_LIST,
 1972|     49|                           ret->cert);
 1973|     49|    if (ret->cipher_list == NULL || sk_SSL_CIPHER_num(ret->cipher_list) <= 0) {
 1974|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_LIBRARY_HAS_NO_CIPHERS);
 1975|      0|        goto err2;
 1976|      0|    }
 1977|       |
 1978|     49|    ret->param = X509_VERIFY_PARAM_new();
 1979|     49|    if (!ret->param)
 1980|      0|        goto err;
 1981|       |
 1982|     49|    if ((ret->rsa_md5 = EVP_get_digestbyname("ssl2-md5")) == NULL) {
 1983|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES);
 1984|      0|        goto err2;
 1985|      0|    }
 1986|     49|    if ((ret->md5 = EVP_get_digestbyname("ssl3-md5")) == NULL) {
 1987|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES);
 1988|      0|        goto err2;
 1989|      0|    }
 1990|     49|    if ((ret->sha1 = EVP_get_digestbyname("ssl3-sha1")) == NULL) {
 1991|      0|        SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES);
 1992|      0|        goto err2;
 1993|      0|    }
 1994|       |
 1995|     49|    if ((ret->client_CA = sk_X509_NAME_new_null()) == NULL)
 1996|      0|        goto err;
 1997|       |
 1998|     49|    CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL_CTX, ret, &ret->ex_data);
 1999|       |
 2000|     49|    ret->extra_certs = NULL;
 2001|       |    /* No compression for DTLS */
 2002|     49|    if (!(meth->ssl3_enc->enc_flags & SSL_ENC_FLAG_DTLS))
 2003|     49|        ret->comp_methods = SSL_COMP_get_compression_methods();
 2004|       |
 2005|     49|    ret->max_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;
 2006|       |
 2007|     49|#ifndef OPENSSL_NO_TLSEXT
 2008|     49|    ret->tlsext_servername_callback = 0;
 2009|     49|    ret->tlsext_servername_arg = NULL;
 2010|       |    /* Setup RFC4507 ticket keys */
 2011|     49|    if ((RAND_bytes(ret->tlsext_tick_key_name, 16) <= 0)
 2012|     49|        || (RAND_bytes(ret->tlsext_tick_hmac_key, 16) <= 0)
 2013|     49|        || (RAND_bytes(ret->tlsext_tick_aes_key, 16) <= 0))
 2014|      0|        ret->options |= SSL_OP_NO_TICKET;
 2015|       |
 2016|     49|    ret->tlsext_status_cb = 0;
 2017|     49|    ret->tlsext_status_arg = NULL;
 2018|       |
 2019|     49|# ifndef OPENSSL_NO_NEXTPROTONEG
 2020|     49|    ret->next_protos_advertised_cb = 0;
 2021|     49|    ret->next_proto_select_cb = 0;
 2022|     49|# endif
 2023|     49|#endif
 2024|     49|#ifndef OPENSSL_NO_PSK
 2025|     49|    ret->psk_identity_hint = NULL;
 2026|     49|    ret->psk_client_callback = NULL;
 2027|     49|    ret->psk_server_callback = NULL;
 2028|     49|#endif
 2029|     49|#ifndef OPENSSL_NO_SRP
 2030|     49|    SSL_CTX_SRP_CTX_init(ret);
 2031|     49|#endif
 2032|     49|#ifndef OPENSSL_NO_BUF_FREELISTS
 2033|     49|    ret->freelist_max_len = SSL_MAX_BUF_FREELIST_LEN_DEFAULT;
 2034|     49|    ret->rbuf_freelist = OPENSSL_malloc(sizeof(SSL3_BUF_FREELIST));
 2035|     49|    if (!ret->rbuf_freelist)
 2036|      0|        goto err;
 2037|     49|    ret->rbuf_freelist->chunklen = 0;
 2038|     49|    ret->rbuf_freelist->len = 0;
 2039|     49|    ret->rbuf_freelist->head = NULL;
 2040|     49|    ret->wbuf_freelist = OPENSSL_malloc(sizeof(SSL3_BUF_FREELIST));
 2041|     49|    if (!ret->wbuf_freelist)
 2042|      0|        goto err;
 2043|     49|    ret->wbuf_freelist->chunklen = 0;
 2044|     49|    ret->wbuf_freelist->len = 0;
 2045|     49|    ret->wbuf_freelist->head = NULL;
 2046|     49|#endif
 2047|     49|#ifndef OPENSSL_NO_ENGINE
 2048|     49|    ret->client_cert_engine = NULL;
 2049|       |# ifdef OPENSSL_SSL_CLIENT_ENGINE_AUTO
 2050|       |#  define eng_strx(x)     #x
 2051|       |#  define eng_str(x)      eng_strx(x)
 2052|       |    /* Use specific client engine automatically... ignore errors */
 2053|       |    {
 2054|       |        ENGINE *eng;
 2055|       |        eng = ENGINE_by_id(eng_str(OPENSSL_SSL_CLIENT_ENGINE_AUTO));
 2056|       |        if (!eng) {
 2057|       |            ERR_clear_error();
 2058|       |            ENGINE_load_builtin_engines();
 2059|       |            eng = ENGINE_by_id(eng_str(OPENSSL_SSL_CLIENT_ENGINE_AUTO));
 2060|       |        }
 2061|       |        if (!eng || !SSL_CTX_set_client_cert_engine(ret, eng))
 2062|       |            ERR_clear_error();
 2063|       |    }
 2064|       |# endif
 2065|     49|#endif
 2066|       |    /*
 2067|       |     * Default is to connect to non-RI servers. When RI is more widely
 2068|       |     * deployed might change this.
 2069|       |     */
 2070|     49|    ret->options |= SSL_OP_LEGACY_SERVER_CONNECT;
 2071|       |
 2072|       |    /*
 2073|       |     * Disable SSLv2 by default, callers that want to enable SSLv2 will have to
 2074|       |     * explicitly clear this option via either of SSL_CTX_clear_options() or
 2075|       |     * SSL_clear_options().
 2076|       |     */
 2077|     49|    ret->options |= SSL_OP_NO_SSLv2;
 2078|       |
 2079|     49|    return (ret);
 2080|      0| err:
 2081|      0|    SSLerr(SSL_F_SSL_CTX_NEW, ERR_R_MALLOC_FAILURE);
 2082|      0| err2:
 2083|      0|    if (ret != NULL)
 2084|      0|        SSL_CTX_free(ret);
 2085|      0|    return (NULL);
 2086|      0|}
SSL_CTX_free:
 2108|    147|{
 2109|    147|    int i;
 2110|       |
 2111|    147|    if (a == NULL)
 2112|      0|        return;
 2113|       |
 2114|    147|    i = CRYPTO_add(&a->references, -1, CRYPTO_LOCK_SSL_CTX);
 2115|       |#ifdef REF_PRINT
 2116|       |    REF_PRINT("SSL_CTX", a);
 2117|       |#endif
 2118|    147|    if (i > 0)
 2119|     98|        return;
 2120|       |#ifdef REF_CHECK
 2121|       |    if (i < 0) {
 2122|       |        fprintf(stderr, "SSL_CTX_free, bad reference count\n");
 2123|       |        abort();                /* ok */
 2124|       |    }
 2125|       |#endif
 2126|       |
 2127|     49|    if (a->param)
 2128|     49|        X509_VERIFY_PARAM_free(a->param);
 2129|       |
 2130|       |    /*
 2131|       |     * Free internal session cache. However: the remove_cb() may reference
 2132|       |     * the ex_data of SSL_CTX, thus the ex_data store can only be removed
 2133|       |     * after the sessions were flushed.
 2134|       |     * As the ex_data handling routines might also touch the session cache,
 2135|       |     * the most secure solution seems to be: empty (flush) the cache, then
 2136|       |     * free ex_data, then finally free the cache.
 2137|       |     * (See ticket [openssl.org #212].)
 2138|       |     */
 2139|     49|    if (a->sessions != NULL)
 2140|     49|        SSL_CTX_flush_sessions(a, 0);
 2141|       |
 2142|     49|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_SSL_CTX, a, &a->ex_data);
 2143|       |
 2144|     49|    if (a->sessions != NULL)
 2145|     49|        lh_SSL_SESSION_free(a->sessions);
 2146|       |
 2147|     49|    if (a->cert_store != NULL)
 2148|     49|        X509_STORE_free(a->cert_store);
 2149|     49|    if (a->cipher_list != NULL)
 2150|     49|        sk_SSL_CIPHER_free(a->cipher_list);
 2151|     49|    if (a->cipher_list_by_id != NULL)
 2152|     49|        sk_SSL_CIPHER_free(a->cipher_list_by_id);
 2153|     49|    if (a->cert != NULL)
 2154|     49|        ssl_cert_free(a->cert);
 2155|     49|    if (a->client_CA != NULL)
 2156|     49|        sk_X509_NAME_pop_free(a->client_CA, X509_NAME_free);
 2157|     49|    if (a->extra_certs != NULL)
 2158|     49|        sk_X509_pop_free(a->extra_certs, X509_free);
 2159|       |#if 0                           /* This should never be done, since it
 2160|       |                                 * removes a global database */
 2161|       |    if (a->comp_methods != NULL)
 2162|       |        sk_SSL_COMP_pop_free(a->comp_methods, SSL_COMP_free);
 2163|       |#else
 2164|     49|    a->comp_methods = NULL;
 2165|     49|#endif
 2166|       |
 2167|     49|#ifndef OPENSSL_NO_SRTP
 2168|     49|    if (a->srtp_profiles)
 2169|     49|        sk_SRTP_PROTECTION_PROFILE_free(a->srtp_profiles);
 2170|     49|#endif
 2171|       |
 2172|     49|#ifndef OPENSSL_NO_PSK
 2173|     49|    if (a->psk_identity_hint)
 2174|      0|        OPENSSL_free(a->psk_identity_hint);
 2175|     49|#endif
 2176|     49|#ifndef OPENSSL_NO_SRP
 2177|     49|    SSL_CTX_SRP_CTX_free(a);
 2178|     49|#endif
 2179|     49|#ifndef OPENSSL_NO_ENGINE
 2180|     49|    if (a->client_cert_engine)
 2181|      0|        ENGINE_finish(a->client_cert_engine);
 2182|     49|#endif
 2183|       |
 2184|     49|#ifndef OPENSSL_NO_BUF_FREELISTS
 2185|     49|    if (a->wbuf_freelist)
 2186|     49|        ssl_buf_freelist_free(a->wbuf_freelist);
 2187|     49|    if (a->rbuf_freelist)
 2188|     49|        ssl_buf_freelist_free(a->rbuf_freelist);
 2189|     49|#endif
 2190|     49|#ifndef OPENSSL_NO_TLSEXT
 2191|     49|# ifndef OPENSSL_NO_EC
 2192|     49|    if (a->tlsext_ecpointformatlist)
 2193|      0|        OPENSSL_free(a->tlsext_ecpointformatlist);
 2194|     49|    if (a->tlsext_ellipticcurvelist)
 2195|      0|        OPENSSL_free(a->tlsext_ellipticcurvelist);
 2196|     49|# endif                         /* OPENSSL_NO_EC */
 2197|     49|    if (a->alpn_client_proto_list != NULL)
 2198|      0|        OPENSSL_free(a->alpn_client_proto_list);
 2199|     49|#endif
 2200|       |
 2201|     49|    OPENSSL_free(a);
 2202|     49|}
SSL_CTX_set_verify:
 2224|     49|{
 2225|     49|    ctx->verify_mode = mode;
 2226|     49|    ctx->default_verify_callback = cb;
 2227|     49|}
SSL_get_error:
 2699|     49|{
 2700|     49|    int reason;
 2701|     49|    unsigned long l;
 2702|     49|    BIO *bio;
 2703|       |
 2704|     49|    if (i > 0)
 2705|      0|        return (SSL_ERROR_NONE);
 2706|       |
 2707|       |    /*
 2708|       |     * Make things return SSL_ERROR_SYSCALL when doing SSL_do_handshake etc,
 2709|       |     * where we do encode the error
 2710|       |     */
 2711|     49|    if ((l = ERR_peek_error()) != 0) {
 2712|      0|        if (ERR_GET_LIB(l) == ERR_LIB_SYS)
 2713|      0|            return (SSL_ERROR_SYSCALL);
 2714|      0|        else
 2715|      0|            return (SSL_ERROR_SSL);
 2716|      0|    }
 2717|       |
 2718|     49|    if ((i < 0) && SSL_want_read(s)) {
 2719|      1|        bio = SSL_get_rbio(s);
 2720|      1|        if (BIO_should_read(bio))
 2721|      1|            return (SSL_ERROR_WANT_READ);
 2722|      0|        else if (BIO_should_write(bio))
 2723|       |            /*
 2724|       |             * This one doesn't make too much sense ... We never try to write
 2725|       |             * to the rbio, and an application program where rbio and wbio
 2726|       |             * are separate couldn't even know what it should wait for.
 2727|       |             * However if we ever set s->rwstate incorrectly (so that we have
 2728|       |             * SSL_want_read(s) instead of SSL_want_write(s)) and rbio and
 2729|       |             * wbio *are* the same, this test works around that bug; so it
 2730|       |             * might be safer to keep it.
 2731|       |             */
 2732|      0|            return (SSL_ERROR_WANT_WRITE);
 2733|      0|        else if (BIO_should_io_special(bio)) {
 2734|      0|            reason = BIO_get_retry_reason(bio);
 2735|      0|            if (reason == BIO_RR_CONNECT)
 2736|      0|                return (SSL_ERROR_WANT_CONNECT);
 2737|      0|            else if (reason == BIO_RR_ACCEPT)
 2738|      0|                return (SSL_ERROR_WANT_ACCEPT);
 2739|      0|            else
 2740|      0|                return (SSL_ERROR_SYSCALL); /* unknown */
 2741|      0|        }
 2742|      1|    }
 2743|       |
 2744|     48|    if ((i < 0) && SSL_want_write(s)) {
 2745|      0|        bio = SSL_get_wbio(s);
 2746|      0|        if (BIO_should_write(bio))
 2747|      0|            return (SSL_ERROR_WANT_WRITE);
 2748|      0|        else if (BIO_should_read(bio))
 2749|       |            /*
 2750|       |             * See above (SSL_want_read(s) with BIO_should_write(bio))
 2751|       |             */
 2752|      0|            return (SSL_ERROR_WANT_READ);
 2753|      0|        else if (BIO_should_io_special(bio)) {
 2754|      0|            reason = BIO_get_retry_reason(bio);
 2755|      0|            if (reason == BIO_RR_CONNECT)
 2756|      0|                return (SSL_ERROR_WANT_CONNECT);
 2757|      0|            else if (reason == BIO_RR_ACCEPT)
 2758|      0|                return (SSL_ERROR_WANT_ACCEPT);
 2759|      0|            else
 2760|      0|                return (SSL_ERROR_SYSCALL);
 2761|      0|        }
 2762|      0|    }
 2763|     48|    if ((i < 0) && SSL_want_x509_lookup(s)) {
 2764|      0|        return (SSL_ERROR_WANT_X509_LOOKUP);
 2765|      0|    }
 2766|       |
 2767|     48|    if (i == 0) {
 2768|     48|        if (s->version == SSL2_VERSION) {
 2769|       |            /* assume it is the socket being closed */
 2770|      0|            return (SSL_ERROR_ZERO_RETURN);
 2771|     48|        } else {
 2772|     48|            if ((s->shutdown & SSL_RECEIVED_SHUTDOWN) &&
 2773|     48|                (s->s3->warn_alert == SSL_AD_CLOSE_NOTIFY))
 2774|      0|                return (SSL_ERROR_ZERO_RETURN);
 2775|     48|        }
 2776|     48|    }
 2777|     48|    return (SSL_ERROR_SYSCALL);
 2778|     48|}
SSL_set_connect_state:
 2814|     98|{
 2815|     98|    s->server = 0;
 2816|     98|    s->shutdown = 0;
 2817|     98|    s->state = SSL_ST_CONNECT | SSL_ST_BEFORE;
 2818|     98|    s->handshake_func = s->method->ssl_connect;
 2819|       |    /* clear the current cipher */
 2820|     98|    ssl_clear_cipher_ctx(s);
 2821|     98|    ssl_clear_hash_ctx(&s->read_hash);
 2822|     98|    ssl_clear_hash_ctx(&s->write_hash);
 2823|     98|}
ssl_clear_cipher_ctx:
 2996|    245|{
 2997|    245|    if (s->enc_read_ctx != NULL) {
 2998|      0|        EVP_CIPHER_CTX_cleanup(s->enc_read_ctx);
 2999|      0|        OPENSSL_free(s->enc_read_ctx);
 3000|      0|        s->enc_read_ctx = NULL;
 3001|      0|    }
 3002|    245|    if (s->enc_write_ctx != NULL) {
 3003|      0|        EVP_CIPHER_CTX_cleanup(s->enc_write_ctx);
 3004|      0|        OPENSSL_free(s->enc_write_ctx);
 3005|      0|        s->enc_write_ctx = NULL;
 3006|      0|    }
 3007|    245|#ifndef OPENSSL_NO_COMP
 3008|    245|    if (s->expand != NULL) {
 3009|      0|        COMP_CTX_free(s->expand);
 3010|      0|        s->expand = NULL;
 3011|      0|    }
 3012|    245|    if (s->compress != NULL) {
 3013|      0|        COMP_CTX_free(s->compress);
 3014|      0|        s->compress = NULL;
 3015|      0|    }
 3016|    245|#endif
 3017|    245|}
ssl_free_wbio_buffer:
 3116|    196|{
 3117|    196|    if (s->bbio == NULL)
 3118|    196|        return;
 3119|       |
 3120|      0|    if (s->bbio == s->wbio) {
 3121|       |        /* remove buffering */
 3122|      0|        s->wbio = BIO_pop(s->wbio);
 3123|       |#ifdef REF_CHECK                /* not the usual REF_CHECK, but this avoids
 3124|       |                                 * adding one more preprocessor symbol */
 3125|       |        assert(s->wbio != NULL);
 3126|       |#endif
 3127|      0|    }
 3128|      0|    BIO_free(s->bbio);
 3129|      0|    s->bbio = NULL;
 3130|      0|}
SSL_CTX_load_verify_locations:
 3243|     49|{
 3244|     49|    return (X509_STORE_load_locations(ctx->cert_store, CAfile, CApath));
 3245|     49|}
SSL_state:
 3265|    343|{
 3266|    343|    return (ssl->state);
 3267|    343|}
SSL_get_ex_new_index:
 3286|      4|{
 3287|      4|    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, argl, argp,
 3288|      4|                                   new_func, dup_func, free_func);
 3289|      4|}
SSL_set_ex_data:
 3292|    588|{
 3293|    588|    return (CRYPTO_set_ex_data(&s->ex_data, idx, arg));
 3294|    588|}
SSL_CTX_get_cert_store:
 3325|     98|{
 3326|     98|    return (ctx->cert_store);
 3327|     98|}
SSL_want:
 3337|      1|{
 3338|      1|    return (s->rwstate);
 3339|      1|}
ssl_clear_hash_ctx:
 3556|    490|{
 3557|       |
 3558|    490|    if (*hash)
 3559|      0|        EVP_MD_CTX_destroy(*hash);
 3560|    490|    *hash = NULL;
 3561|    490|}
ssl_lib.c:ssl_buf_freelist_free:
 2097|     98|{
 2098|     98|    SSL3_BUF_FREELIST_ENTRY *ent, *next;
 2099|    196|    for (ent = list->head; ent; ent = next) {
 2100|     98|        next = ent->next;
 2101|     98|        OPENSSL_free(ent);
 2102|     98|    }
 2103|     98|    OPENSSL_free(list);
 2104|     98|}

SSLv23_client_method:
  943|     49|        { \
  944|     49|        static const SSL_METHOD func_name##_data= { \
  945|     49|        TLS1_2_VERSION, \
  946|     49|        tls1_new, \
  947|     49|        tls1_clear, \
  948|     49|        tls1_free, \
  949|     49|        s_accept, \
  950|     49|        s_connect, \
  951|     49|        ssl23_read, \
  952|     49|        ssl23_peek, \
  953|     49|        ssl23_write, \
  954|     49|        ssl_undefined_function, \
  955|     49|        ssl_undefined_function, \
  956|     49|        ssl_ok, \
  957|     49|        ssl3_get_message, \
  958|     49|        ssl3_read_bytes, \
  959|     49|        ssl3_write_bytes, \
  960|     49|        ssl3_dispatch_alert, \
  961|     49|        ssl3_ctrl, \
  962|     49|        ssl3_ctx_ctrl, \
  963|     49|        ssl23_get_cipher_by_char, \
  964|     49|        ssl23_put_cipher_by_char, \
  965|     49|        ssl_undefined_const_function, \
  966|     49|        ssl23_num_ciphers, \
  967|     49|        ssl23_get_cipher, \
  968|     49|        s_get_meth, \
  969|     49|        ssl23_default_timeout, \
  970|     49|        &TLSv1_2_enc_data, \
  971|     49|        ssl_undefined_void_function, \
  972|     49|        ssl3_callback_ctrl, \
  973|     49|        ssl3_ctx_callback_ctrl, \
  974|     49|        }; \
  975|     49|        return &func_name##_data; \
  976|     49|        }

SSL_SESSION_new:
  193|     49|{
  194|     49|    SSL_SESSION *ss;
  195|       |
  196|     49|    ss = (SSL_SESSION *)OPENSSL_malloc(sizeof(SSL_SESSION));
  197|     49|    if (ss == NULL) {
  198|      0|        SSLerr(SSL_F_SSL_SESSION_NEW, ERR_R_MALLOC_FAILURE);
  199|      0|        return (0);
  200|      0|    }
  201|     49|    memset(ss, 0, sizeof(SSL_SESSION));
  202|       |
  203|     49|    ss->verify_result = 1;      /* avoid 0 (= X509_V_OK) just in case */
  204|     49|    ss->references = 1;
  205|     49|    ss->timeout = 60 * 5 + 4;   /* 5 minute timeout by default */
  206|     49|    ss->time = (unsigned long)time(NULL);
  207|     49|    ss->prev = NULL;
  208|     49|    ss->next = NULL;
  209|     49|    ss->compress_meth = 0;
  210|     49|#ifndef OPENSSL_NO_TLSEXT
  211|     49|    ss->tlsext_hostname = NULL;
  212|     49|# ifndef OPENSSL_NO_EC
  213|     49|    ss->tlsext_ecpointformatlist_length = 0;
  214|     49|    ss->tlsext_ecpointformatlist = NULL;
  215|     49|    ss->tlsext_ellipticcurvelist_length = 0;
  216|     49|    ss->tlsext_ellipticcurvelist = NULL;
  217|     49|# endif
  218|     49|#endif
  219|     49|    CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL_SESSION, ss, &ss->ex_data);
  220|     49|#ifndef OPENSSL_NO_PSK
  221|     49|    ss->psk_identity_hint = NULL;
  222|     49|    ss->psk_identity = NULL;
  223|     49|#endif
  224|     49|#ifndef OPENSSL_NO_SRP
  225|     49|    ss->srp_username = NULL;
  226|     49|#endif
  227|     49|    return (ss);
  228|     49|}
ssl_get_new_session:
  406|     49|{
  407|       |    /* This gets used by clients and servers. */
  408|       |
  409|     49|    unsigned int tmp;
  410|     49|    SSL_SESSION *ss = NULL;
  411|     49|    GEN_SESSION_CB cb = def_generate_session_id;
  412|       |
  413|     49|    if ((ss = SSL_SESSION_new()) == NULL)
  414|      0|        return (0);
  415|       |
  416|       |    /* If the context has a default timeout, use it */
  417|     49|    if (s->session_ctx->session_timeout == 0)
  418|      0|        ss->timeout = SSL_get_default_timeout(s);
  419|     49|    else
  420|     49|        ss->timeout = s->session_ctx->session_timeout;
  421|       |
  422|     49|    if (s->session != NULL) {
  423|      0|        SSL_SESSION_free(s->session);
  424|      0|        s->session = NULL;
  425|      0|    }
  426|       |
  427|     49|    if (session) {
  428|      0|        if (s->version == SSL2_VERSION) {
  429|      0|            ss->ssl_version = SSL2_VERSION;
  430|      0|            ss->session_id_length = SSL2_SSL_SESSION_ID_LENGTH;
  431|      0|        } else if (s->version == SSL3_VERSION) {
  432|      0|            ss->ssl_version = SSL3_VERSION;
  433|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  434|      0|        } else if (s->version == TLS1_VERSION) {
  435|      0|            ss->ssl_version = TLS1_VERSION;
  436|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  437|      0|        } else if (s->version == TLS1_1_VERSION) {
  438|      0|            ss->ssl_version = TLS1_1_VERSION;
  439|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  440|      0|        } else if (s->version == TLS1_2_VERSION) {
  441|      0|            ss->ssl_version = TLS1_2_VERSION;
  442|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  443|      0|        } else if (s->version == DTLS1_BAD_VER) {
  444|      0|            ss->ssl_version = DTLS1_BAD_VER;
  445|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  446|      0|        } else if (s->version == DTLS1_VERSION) {
  447|      0|            ss->ssl_version = DTLS1_VERSION;
  448|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  449|      0|        } else if (s->version == DTLS1_2_VERSION) {
  450|      0|            ss->ssl_version = DTLS1_2_VERSION;
  451|      0|            ss->session_id_length = SSL3_SSL_SESSION_ID_LENGTH;
  452|      0|        } else {
  453|      0|            SSLerr(SSL_F_SSL_GET_NEW_SESSION, SSL_R_UNSUPPORTED_SSL_VERSION);
  454|      0|            SSL_SESSION_free(ss);
  455|      0|            return (0);
  456|      0|        }
  457|      0|#ifndef OPENSSL_NO_TLSEXT
  458|       |        /*-
  459|       |         * If RFC5077 ticket, use empty session ID (as server).
  460|       |         * Note that:
  461|       |         * (a) ssl_get_prev_session() does lookahead into the
  462|       |         *     ClientHello extensions to find the session ticket.
  463|       |         *     When ssl_get_prev_session() fails, s3_srvr.c calls
  464|       |         *     ssl_get_new_session() in ssl3_get_client_hello().
  465|       |         *     At that point, it has not yet parsed the extensions,
  466|       |         *     however, because of the lookahead, it already knows
  467|       |         *     whether a ticket is expected or not.
  468|       |         *
  469|       |         * (b) s3_clnt.c calls ssl_get_new_session() before parsing
  470|       |         *     ServerHello extensions, and before recording the session
  471|       |         *     ID received from the server, so this block is a noop.
  472|       |         */
  473|      0|        if (s->tlsext_ticket_expected) {
  474|      0|            ss->session_id_length = 0;
  475|      0|            goto sess_id_done;
  476|      0|        }
  477|      0|#endif
  478|       |        /* Choose which callback will set the session ID */
  479|      0|        CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);
  480|      0|        if (s->generate_session_id)
  481|      0|            cb = s->generate_session_id;
  482|      0|        else if (s->session_ctx->generate_session_id)
  483|      0|            cb = s->session_ctx->generate_session_id;
  484|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
  485|       |        /* Choose a session ID */
  486|      0|        tmp = ss->session_id_length;
  487|      0|        if (!cb(s, ss->session_id, &tmp)) {
  488|       |            /* The callback failed */
  489|      0|            SSLerr(SSL_F_SSL_GET_NEW_SESSION,
  490|      0|                   SSL_R_SSL_SESSION_ID_CALLBACK_FAILED);
  491|      0|            SSL_SESSION_free(ss);
  492|      0|            return (0);
  493|      0|        }
  494|       |        /*
  495|       |         * Don't allow the callback to set the session length to zero. nor
  496|       |         * set it higher than it was.
  497|       |         */
  498|      0|        if (!tmp || (tmp > ss->session_id_length)) {
  499|       |            /* The callback set an illegal length */
  500|      0|            SSLerr(SSL_F_SSL_GET_NEW_SESSION,
  501|      0|                   SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH);
  502|      0|            SSL_SESSION_free(ss);
  503|      0|            return (0);
  504|      0|        }
  505|       |        /* If the session length was shrunk and we're SSLv2, pad it */
  506|      0|        if ((tmp < ss->session_id_length) && (s->version == SSL2_VERSION))
  507|      0|            memset(ss->session_id + tmp, 0, ss->session_id_length - tmp);
  508|      0|        else
  509|      0|            ss->session_id_length = tmp;
  510|       |        /* Finally, check for a conflict */
  511|      0|        if (SSL_has_matching_session_id(s, ss->session_id,
  512|      0|                                        ss->session_id_length)) {
  513|      0|            SSLerr(SSL_F_SSL_GET_NEW_SESSION, SSL_R_SSL_SESSION_ID_CONFLICT);
  514|      0|            SSL_SESSION_free(ss);
  515|      0|            return (0);
  516|      0|        }
  517|      0|#ifndef OPENSSL_NO_TLSEXT
  518|      0| sess_id_done:
  519|      0|        if (s->tlsext_hostname) {
  520|      0|            ss->tlsext_hostname = BUF_strdup(s->tlsext_hostname);
  521|      0|            if (ss->tlsext_hostname == NULL) {
  522|      0|                SSLerr(SSL_F_SSL_GET_NEW_SESSION, ERR_R_INTERNAL_ERROR);
  523|      0|                SSL_SESSION_free(ss);
  524|      0|                return 0;
  525|      0|            }
  526|      0|        }
  527|      0|#endif
  528|     49|    } else {
  529|     49|        ss->session_id_length = 0;
  530|     49|    }
  531|       |
  532|     49|    if (s->sid_ctx_length > sizeof ss->sid_ctx) {
  533|      0|        SSLerr(SSL_F_SSL_GET_NEW_SESSION, ERR_R_INTERNAL_ERROR);
  534|      0|        SSL_SESSION_free(ss);
  535|      0|        return 0;
  536|      0|    }
  537|     49|    memcpy(ss->sid_ctx, s->sid_ctx, s->sid_ctx_length);
  538|     49|    ss->sid_ctx_length = s->sid_ctx_length;
  539|     49|    s->session = ss;
  540|     49|    ss->ssl_version = s->version;
  541|     49|    ss->verify_result = X509_V_OK;
  542|       |
  543|     49|    return (1);
  544|     49|}
SSL_SESSION_free:
  852|     49|{
  853|     49|    int i;
  854|       |
  855|     49|    if (ss == NULL)
  856|      0|        return;
  857|       |
  858|     49|    i = CRYPTO_add(&ss->references, -1, CRYPTO_LOCK_SSL_SESSION);
  859|       |#ifdef REF_PRINT
  860|       |    REF_PRINT("SSL_SESSION", ss);
  861|       |#endif
  862|     49|    if (i > 0)
  863|      0|        return;
  864|       |#ifdef REF_CHECK
  865|       |    if (i < 0) {
  866|       |        fprintf(stderr, "SSL_SESSION_free, bad reference count\n");
  867|       |        abort();                /* ok */
  868|       |    }
  869|       |#endif
  870|       |
  871|     49|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_SSL_SESSION, ss, &ss->ex_data);
  872|       |
  873|     49|    OPENSSL_cleanse(ss->key_arg, sizeof ss->key_arg);
  874|     49|    OPENSSL_cleanse(ss->master_key, sizeof ss->master_key);
  875|     49|    OPENSSL_cleanse(ss->session_id, sizeof ss->session_id);
  876|     49|    if (ss->sess_cert != NULL)
  877|      0|        ssl_sess_cert_free(ss->sess_cert);
  878|     49|    if (ss->peer != NULL)
  879|      0|        X509_free(ss->peer);
  880|     49|    if (ss->ciphers != NULL)
  881|     49|        sk_SSL_CIPHER_free(ss->ciphers);
  882|     49|#ifndef OPENSSL_NO_TLSEXT
  883|     49|    if (ss->tlsext_hostname != NULL)
  884|      0|        OPENSSL_free(ss->tlsext_hostname);
  885|     49|    if (ss->tlsext_tick != NULL)
  886|      0|        OPENSSL_free(ss->tlsext_tick);
  887|     49|# ifndef OPENSSL_NO_EC
  888|     49|    ss->tlsext_ecpointformatlist_length = 0;
  889|     49|    if (ss->tlsext_ecpointformatlist != NULL)
  890|      0|        OPENSSL_free(ss->tlsext_ecpointformatlist);
  891|     49|    ss->tlsext_ellipticcurvelist_length = 0;
  892|     49|    if (ss->tlsext_ellipticcurvelist != NULL)
  893|      0|        OPENSSL_free(ss->tlsext_ellipticcurvelist);
  894|     49|# endif                         /* OPENSSL_NO_EC */
  895|     49|#endif
  896|     49|#ifndef OPENSSL_NO_PSK
  897|     49|    if (ss->psk_identity_hint != NULL)
  898|      0|        OPENSSL_free(ss->psk_identity_hint);
  899|     49|    if (ss->psk_identity != NULL)
  900|      0|        OPENSSL_free(ss->psk_identity);
  901|     49|#endif
  902|     49|#ifndef OPENSSL_NO_SRP
  903|     49|    if (ss->srp_username != NULL)
  904|      0|        OPENSSL_free(ss->srp_username);
  905|     49|#endif
  906|     49|    OPENSSL_cleanse(ss, sizeof(*ss));
  907|     49|    OPENSSL_free(ss);
  908|     49|}
SSL_CTX_flush_sessions:
 1119|     49|{
 1120|     49|    unsigned long i;
 1121|     49|    TIMEOUT_PARAM tp;
 1122|       |
 1123|     49|    tp.ctx = s;
 1124|     49|    tp.cache = s->sessions;
 1125|     49|    if (tp.cache == NULL)
 1126|      0|        return;
 1127|     49|    tp.time = t;
 1128|     49|    CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
 1129|     49|    i = CHECKED_LHASH_OF(SSL_SESSION, tp.cache)->down_load;
 1130|     49|    CHECKED_LHASH_OF(SSL_SESSION, tp.cache)->down_load = 0;
 1131|     49|    lh_SSL_SESSION_doall_arg(tp.cache, LHASH_DOALL_ARG_FN(timeout),
 1132|     49|                             TIMEOUT_PARAM, &tp);
 1133|     49|    CHECKED_LHASH_OF(SSL_SESSION, tp.cache)->down_load = i;
 1134|     49|    CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
 1135|     49|}
ssl_clear_bad_session:
 1138|    147|{
 1139|    147|    if ((s->session != NULL) &&
 1140|    147|        !(s->shutdown & SSL_SENT_SHUTDOWN) &&
 1141|    147|        !(SSL_in_init(s) || SSL_in_before(s))) {
 1142|      0|        SSL_CTX_remove_session(s->session_ctx, s->session);
 1143|      0|        return (1);
 1144|      0|    } else
 1145|    147|        return (0);
 1146|    147|}
SSL_CTX_sess_set_new_cb:
 1199|     49|{
 1200|     49|    ctx->new_session_cb = cb;
 1201|     49|}

custom_ext_init:
   79|     49|{
   80|     49|    size_t i;
   81|     49|    custom_ext_method *meth = exts->meths;
   82|     49|    for (i = 0; i < exts->meths_count; i++, meth++)
   83|      0|        meth->ext_flags = 0;
   84|     49|}
custom_ext_add:
  127|     49|{
  128|     49|    custom_ext_methods *exts = server ? &s->cert->srv_ext : &s->cert->cli_ext;
  129|     49|    custom_ext_method *meth;
  130|     49|    unsigned char *ret = *pret;
  131|     49|    size_t i;
  132|       |
  133|     49|    for (i = 0; i < exts->meths_count; i++) {
  134|      0|        const unsigned char *out = NULL;
  135|      0|        size_t outlen = 0;
  136|      0|        meth = exts->meths + i;
  137|       |
  138|      0|        if (server) {
  139|       |            /*
  140|       |             * For ServerHello only send extensions present in ClientHello.
  141|       |             */
  142|      0|            if (!(meth->ext_flags & SSL_EXT_FLAG_RECEIVED))
  143|      0|                continue;
  144|       |            /* If callback absent for server skip it */
  145|      0|            if (!meth->add_cb)
  146|      0|                continue;
  147|      0|        }
  148|      0|        if (meth->add_cb) {
  149|      0|            int cb_retval = 0;
  150|      0|            cb_retval = meth->add_cb(s, meth->ext_type,
  151|      0|                                     &out, &outlen, al, meth->add_arg);
  152|      0|            if (cb_retval < 0)
  153|      0|                return 0;       /* error */
  154|      0|            if (cb_retval == 0)
  155|      0|                continue;       /* skip this extension */
  156|      0|        }
  157|      0|        if (4 > limit - ret || outlen > (size_t)(limit - ret - 4))
  158|      0|            return 0;
  159|      0|        s2n(meth->ext_type, ret);
  160|      0|        s2n(outlen, ret);
  161|      0|        if (outlen) {
  162|      0|            memcpy(ret, out, outlen);
  163|      0|            ret += outlen;
  164|      0|        }
  165|       |        /*
  166|       |         * We can't send duplicates: code logic should prevent this.
  167|       |         */
  168|      0|        OPENSSL_assert(!(meth->ext_flags & SSL_EXT_FLAG_SENT));
  169|       |        /*
  170|       |         * Indicate extension has been sent: this is both a sanity check to
  171|       |         * ensure we don't send duplicate extensions and indicates that it is
  172|       |         * not an error if the extension is present in ServerHello.
  173|       |         */
  174|      0|        meth->ext_flags |= SSL_EXT_FLAG_SENT;
  175|      0|        if (meth->free_cb)
  176|      0|            meth->free_cb(s, meth->ext_type, out, meth->add_arg);
  177|      0|    }
  178|     49|    *pret = ret;
  179|     49|    return 1;
  180|     49|}
custom_exts_copy:
  203|     98|{
  204|     98|    if (src->meths_count) {
  205|      0|        dst->meths =
  206|      0|            BUF_memdup(src->meths,
  207|      0|                       sizeof(custom_ext_method) * src->meths_count);
  208|      0|        if (dst->meths == NULL)
  209|      0|            return 0;
  210|      0|        dst->meths_count = src->meths_count;
  211|      0|    }
  212|     98|    return 1;
  213|     98|}
custom_exts_free:
  216|    196|{
  217|    196|    if (exts->meths)
  218|      0|        OPENSSL_free(exts->meths);
  219|    196|}

tls1_new:
  206|     49|{
  207|     49|    if (!ssl3_new(s))
  208|      0|        return (0);
  209|     49|    s->method->ssl_clear(s);
  210|     49|    return (1);
  211|     49|}
tls1_free:
  214|     49|{
  215|     49|#ifndef OPENSSL_NO_TLSEXT
  216|     49|    if (s->tlsext_session_ticket) {
  217|      0|        OPENSSL_free(s->tlsext_session_ticket);
  218|      0|    }
  219|     49|#endif                          /* OPENSSL_NO_TLSEXT */
  220|     49|    ssl3_free(s);
  221|     49|}
tls1_clear:
  224|    196|{
  225|    196|    ssl3_clear(s);
  226|    196|    s->version = s->method->version;
  227|    196|}
tls12_get_psigalgs:
 1039|     98|{
 1040|       |    /*
 1041|       |     * If Suite B mode use Suite B sigalgs only, ignore any other
 1042|       |     * preferences.
 1043|       |     */
 1044|     98|# ifndef OPENSSL_NO_EC
 1045|     98|    switch (tls1_suiteb(s)) {
 1046|      0|    case SSL_CERT_FLAG_SUITEB_128_LOS:
 1047|      0|        *psigs = suiteb_sigalgs;
 1048|      0|        return sizeof(suiteb_sigalgs);
 1049|       |
 1050|      0|    case SSL_CERT_FLAG_SUITEB_128_LOS_ONLY:
 1051|      0|        *psigs = suiteb_sigalgs;
 1052|      0|        return 2;
 1053|       |
 1054|      0|    case SSL_CERT_FLAG_SUITEB_192_LOS:
 1055|      0|        *psigs = suiteb_sigalgs + 2;
 1056|      0|        return 2;
 1057|     98|    }
 1058|     98|# endif
 1059|       |    /* If server use client authentication sigalgs if not NULL */
 1060|     98|    if (s->server == sent && s->cert->client_sigalgs) {
 1061|      0|        *psigs = s->cert->client_sigalgs;
 1062|      0|        return s->cert->client_sigalgslen;
 1063|     98|    } else if (s->cert->conf_sigalgs) {
 1064|      0|        *psigs = s->cert->conf_sigalgs;
 1065|      0|        return s->cert->conf_sigalgslen;
 1066|     98|    } else {
 1067|     98|        *psigs = tls12_sigalgs;
 1068|     98|        return sizeof(tls12_sigalgs);
 1069|     98|    }
 1070|     98|}
ssl_set_client_disabled:
 1156|     49|{
 1157|     49|    CERT *c = s->cert;
 1158|     49|    const unsigned char *sigalgs;
 1159|     49|    size_t i, sigalgslen;
 1160|     49|    int have_rsa = 0, have_dsa = 0, have_ecdsa = 0;
 1161|     49|    c->mask_a = 0;
 1162|     49|    c->mask_k = 0;
 1163|       |    /* Don't allow TLS 1.2 only ciphers if we don't suppport them */
 1164|     49|    if (!SSL_CLIENT_USE_TLS1_2_CIPHERS(s))
 1165|      0|        c->mask_ssl = SSL_TLSV1_2;
 1166|     49|    else
 1167|     49|        c->mask_ssl = 0;
 1168|       |    /*
 1169|       |     * Now go through all signature algorithms seeing if we support any for
 1170|       |     * RSA, DSA, ECDSA. Do this for all versions not just TLS 1.2.
 1171|       |     */
 1172|     49|    sigalgslen = tls12_get_psigalgs(s, 1, &sigalgs);
 1173|    784|    for (i = 0; i < sigalgslen; i += 2, sigalgs += 2) {
 1174|    735|        switch (sigalgs[1]) {
 1175|      0|# ifndef OPENSSL_NO_RSA
 1176|    245|        case TLSEXT_signature_rsa:
 1177|    245|            have_rsa = 1;
 1178|    245|            break;
 1179|      0|# endif
 1180|      0|# ifndef OPENSSL_NO_DSA
 1181|    245|        case TLSEXT_signature_dsa:
 1182|    245|            have_dsa = 1;
 1183|    245|            break;
 1184|      0|# endif
 1185|      0|# ifndef OPENSSL_NO_ECDSA
 1186|    245|        case TLSEXT_signature_ecdsa:
 1187|    245|            have_ecdsa = 1;
 1188|    245|            break;
 1189|    735|# endif
 1190|    735|        }
 1191|    735|    }
 1192|       |    /*
 1193|       |     * Disable auth and static DH if we don't include any appropriate
 1194|       |     * signature algorithms.
 1195|       |     */
 1196|     49|    if (!have_rsa) {
 1197|      0|        c->mask_a |= SSL_aRSA;
 1198|      0|        c->mask_k |= SSL_kDHr | SSL_kECDHr;
 1199|      0|    }
 1200|     49|    if (!have_dsa) {
 1201|      0|        c->mask_a |= SSL_aDSS;
 1202|      0|        c->mask_k |= SSL_kDHd;
 1203|      0|    }
 1204|     49|    if (!have_ecdsa) {
 1205|      0|        c->mask_a |= SSL_aECDSA;
 1206|      0|        c->mask_k |= SSL_kECDHe;
 1207|      0|    }
 1208|       |# ifndef OPENSSL_NO_KRB5
 1209|       |    if (!kssl_tgt_is_available(s->kssl_ctx)) {
 1210|       |        c->mask_a |= SSL_aKRB5;
 1211|       |        c->mask_k |= SSL_kKRB5;
 1212|       |    }
 1213|       |# endif
 1214|     49|# ifndef OPENSSL_NO_PSK
 1215|       |    /* with PSK there must be client callback set */
 1216|     49|    if (!s->psk_client_callback) {
 1217|     49|        c->mask_a |= SSL_aPSK;
 1218|     49|        c->mask_k |= SSL_kPSK;
 1219|     49|    }
 1220|     49|# endif                         /* OPENSSL_NO_PSK */
 1221|     49|# ifndef OPENSSL_NO_SRP
 1222|     49|    if (!(s->srp_ctx.srp_Mask & SSL_kSRP)) {
 1223|     49|        c->mask_a |= SSL_aSRP;
 1224|     49|        c->mask_k |= SSL_kSRP;
 1225|     49|    }
 1226|     49|# endif
 1227|     49|    c->valid = 1;
 1228|     49|}
ssl_add_clienthello_tlsext:
 1232|     49|{
 1233|     49|    int extdatalen = 0;
 1234|     49|    unsigned char *orig = buf;
 1235|     49|    unsigned char *ret = buf;
 1236|     49|# ifndef OPENSSL_NO_EC
 1237|       |    /* See if we support any ECC ciphersuites */
 1238|     49|    int using_ecc = 0;
 1239|     49|    if (s->version >= TLS1_VERSION || SSL_IS_DTLS(s)) {
 1240|     49|        int i;
 1241|     49|        unsigned long alg_k, alg_a;
 1242|     49|        STACK_OF(SSL_CIPHER) *cipher_stack = SSL_get_ciphers(s);
 1243|       |
 1244|     49|        for (i = 0; i < sk_SSL_CIPHER_num(cipher_stack); i++) {
 1245|     49|            SSL_CIPHER *c = sk_SSL_CIPHER_value(cipher_stack, i);
 1246|       |
 1247|     49|            alg_k = c->algorithm_mkey;
 1248|     49|            alg_a = c->algorithm_auth;
 1249|     49|            if ((alg_k & (SSL_kEECDH | SSL_kECDHr | SSL_kECDHe)
 1250|     49|                 || (alg_a & SSL_aECDSA))) {
 1251|     49|                using_ecc = 1;
 1252|     49|                break;
 1253|     49|            }
 1254|     49|        }
 1255|     49|    }
 1256|     49|# endif
 1257|       |
 1258|       |    /* don't add extensions for SSLv3 unless doing secure renegotiation */
 1259|     49|    if (s->client_version == SSL3_VERSION && !s->s3->send_connection_binding)
 1260|      0|        return orig;
 1261|       |
 1262|     49|    ret += 2;
 1263|       |
 1264|     49|    if (ret >= limit)
 1265|      0|        return NULL;            /* this really never occurs, but ... */
 1266|       |
 1267|     49|    if (s->tlsext_hostname != NULL) {
 1268|       |        /* Add TLS extension servername to the Client Hello message */
 1269|     47|        size_t size_str;
 1270|       |
 1271|       |        /*-
 1272|       |         * check for enough space.
 1273|       |         * 4 for the servername type and entension length
 1274|       |         * 2 for servernamelist length
 1275|       |         * 1 for the hostname type
 1276|       |         * 2 for hostname length
 1277|       |         * + hostname length
 1278|       |         */
 1279|     47|        size_str = strlen(s->tlsext_hostname);
 1280|     47|        if (CHECKLEN(ret, 9 + size_str, limit))
 1281|      0|            return NULL;
 1282|       |
 1283|       |        /* extension type and length */
 1284|     47|        s2n(TLSEXT_TYPE_server_name, ret);
 1285|     47|        s2n(size_str + 5, ret);
 1286|       |
 1287|       |        /* length of servername list */
 1288|     47|        s2n(size_str + 3, ret);
 1289|       |
 1290|       |        /* hostname type, length and hostname */
 1291|     47|        *(ret++) = (unsigned char)TLSEXT_NAMETYPE_host_name;
 1292|     47|        s2n(size_str, ret);
 1293|     47|        memcpy(ret, s->tlsext_hostname, size_str);
 1294|     47|        ret += size_str;
 1295|     47|    }
 1296|       |
 1297|       |    /* Add RI if renegotiating */
 1298|     49|    if (s->renegotiate) {
 1299|      0|        int el;
 1300|       |
 1301|      0|        if (!ssl_add_clienthello_renegotiate_ext(s, 0, &el, 0)) {
 1302|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1303|      0|            return NULL;
 1304|      0|        }
 1305|       |
 1306|      0|        if ((limit - ret - 4 - el) < 0)
 1307|      0|            return NULL;
 1308|       |
 1309|      0|        s2n(TLSEXT_TYPE_renegotiate, ret);
 1310|      0|        s2n(el, ret);
 1311|       |
 1312|      0|        if (!ssl_add_clienthello_renegotiate_ext(s, ret, &el, el)) {
 1313|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1314|      0|            return NULL;
 1315|      0|        }
 1316|       |
 1317|      0|        ret += el;
 1318|      0|    }
 1319|     49|# ifndef OPENSSL_NO_SRP
 1320|       |    /* Add SRP username if there is one */
 1321|     49|    if (s->srp_ctx.login != NULL) { /* Add TLS extension SRP username to the
 1322|       |                                     * Client Hello message */
 1323|       |
 1324|      0|        size_t login_len = strlen(s->srp_ctx.login);
 1325|      0|        if (login_len > 255 || login_len == 0) {
 1326|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1327|      0|            return NULL;
 1328|      0|        }
 1329|       |
 1330|       |        /*-
 1331|       |         * check for enough space.
 1332|       |         * 4 for the srp type type and entension length
 1333|       |         * 1 for the srp user identity
 1334|       |         * + srp user identity length
 1335|       |         */
 1336|      0|        if (CHECKLEN(ret, 5 + login_len, limit))
 1337|      0|            return NULL;
 1338|       |
 1339|       |        /* fill in the extension */
 1340|      0|        s2n(TLSEXT_TYPE_srp, ret);
 1341|      0|        s2n(login_len + 1, ret);
 1342|      0|        (*ret++) = (unsigned char)login_len;
 1343|      0|        memcpy(ret, s->srp_ctx.login, login_len);
 1344|      0|        ret += login_len;
 1345|      0|    }
 1346|     49|# endif
 1347|       |
 1348|     49|# ifndef OPENSSL_NO_EC
 1349|     49|    if (using_ecc) {
 1350|       |        /*
 1351|       |         * Add TLS extension ECPointFormats to the ClientHello message
 1352|       |         */
 1353|     49|        const unsigned char *pcurves, *pformats;
 1354|     49|        size_t num_curves, num_formats, curves_list_len;
 1355|       |
 1356|     49|        tls1_get_formatlist(s, &pformats, &num_formats);
 1357|       |
 1358|     49|        if (num_formats > 255) {
 1359|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1360|      0|            return NULL;
 1361|      0|        }
 1362|       |        /*-
 1363|       |         * check for enough space.
 1364|       |         * 4 bytes for the ec point formats type and extension length
 1365|       |         * 1 byte for the length of the formats
 1366|       |         * + formats length
 1367|       |         */
 1368|     49|        if (CHECKLEN(ret, 5 + num_formats, limit))
 1369|      0|            return NULL;
 1370|       |
 1371|     49|        s2n(TLSEXT_TYPE_ec_point_formats, ret);
 1372|       |        /* The point format list has 1-byte length. */
 1373|     49|        s2n(num_formats + 1, ret);
 1374|     49|        *(ret++) = (unsigned char)num_formats;
 1375|     49|        memcpy(ret, pformats, num_formats);
 1376|     49|        ret += num_formats;
 1377|       |
 1378|       |        /*
 1379|       |         * Add TLS extension EllipticCurves to the ClientHello message
 1380|       |         */
 1381|     49|        pcurves = s->tlsext_ellipticcurvelist;
 1382|     49|        if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves))
 1383|      0|            return NULL;
 1384|       |
 1385|     49|        if (num_curves > 65532 / 2) {
 1386|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1387|      0|            return NULL;
 1388|      0|        }
 1389|     49|        curves_list_len = 2 * num_curves;
 1390|       |        /*-
 1391|       |         * check for enough space.
 1392|       |         * 4 bytes for the ec curves type and extension length
 1393|       |         * 2 bytes for the curve list length
 1394|       |         * + curve list length
 1395|       |         */
 1396|     49|        if (CHECKLEN(ret, 6 + curves_list_len, limit))
 1397|      0|            return NULL;
 1398|       |
 1399|     49|        s2n(TLSEXT_TYPE_elliptic_curves, ret);
 1400|     49|        s2n(curves_list_len + 2, ret);
 1401|     49|        s2n(curves_list_len, ret);
 1402|     49|        memcpy(ret, pcurves, curves_list_len);
 1403|     49|        ret += curves_list_len;
 1404|     49|    }
 1405|     49|# endif                         /* OPENSSL_NO_EC */
 1406|       |
 1407|     49|    if (!(SSL_get_options(s) & SSL_OP_NO_TICKET)) {
 1408|      0|        size_t ticklen;
 1409|      0|        if (!s->new_session && s->session && s->session->tlsext_tick)
 1410|      0|            ticklen = s->session->tlsext_ticklen;
 1411|      0|        else if (s->session && s->tlsext_session_ticket &&
 1412|      0|                 s->tlsext_session_ticket->data) {
 1413|      0|            ticklen = s->tlsext_session_ticket->length;
 1414|      0|            s->session->tlsext_tick = OPENSSL_malloc(ticklen);
 1415|      0|            if (!s->session->tlsext_tick)
 1416|      0|                return NULL;
 1417|      0|            memcpy(s->session->tlsext_tick,
 1418|      0|                   s->tlsext_session_ticket->data, ticklen);
 1419|      0|            s->session->tlsext_ticklen = ticklen;
 1420|      0|        } else
 1421|      0|            ticklen = 0;
 1422|      0|        if (ticklen == 0 && s->tlsext_session_ticket &&
 1423|      0|            s->tlsext_session_ticket->data == NULL)
 1424|      0|            goto skip_ext;
 1425|       |        /*
 1426|       |         * Check for enough room 2 for extension type, 2 for len rest for
 1427|       |         * ticket
 1428|       |         */
 1429|      0|        if (CHECKLEN(ret, 4 + ticklen, limit))
 1430|      0|            return NULL;
 1431|      0|        s2n(TLSEXT_TYPE_session_ticket, ret);
 1432|      0|        s2n(ticklen, ret);
 1433|      0|        if (ticklen > 0) {
 1434|      0|            memcpy(ret, s->session->tlsext_tick, ticklen);
 1435|      0|            ret += ticklen;
 1436|      0|        }
 1437|      0|    }
 1438|     49| skip_ext:
 1439|       |
 1440|     49|    if (SSL_CLIENT_USE_SIGALGS(s)) {
 1441|     49|        size_t salglen;
 1442|     49|        const unsigned char *salg;
 1443|     49|        salglen = tls12_get_psigalgs(s, 1, &salg);
 1444|       |
 1445|       |        /*-
 1446|       |         * check for enough space.
 1447|       |         * 4 bytes for the sigalgs type and extension length
 1448|       |         * 2 bytes for the sigalg list length
 1449|       |         * + sigalg list length
 1450|       |         */
 1451|     49|        if (CHECKLEN(ret, salglen + 6, limit))
 1452|      0|            return NULL;
 1453|     49|        s2n(TLSEXT_TYPE_signature_algorithms, ret);
 1454|     49|        s2n(salglen + 2, ret);
 1455|     49|        s2n(salglen, ret);
 1456|     49|        memcpy(ret, salg, salglen);
 1457|     49|        ret += salglen;
 1458|     49|    }
 1459|       |# ifdef TLSEXT_TYPE_opaque_prf_input
 1460|       |    if (s->s3->client_opaque_prf_input != NULL) {
 1461|       |        size_t col = s->s3->client_opaque_prf_input_len;
 1462|       |
 1463|       |        if ((long)(limit - ret - 6 - col < 0))
 1464|       |            return NULL;
 1465|       |        if (col > 0xFFFD)       /* can't happen */
 1466|       |            return NULL;
 1467|       |
 1468|       |        s2n(TLSEXT_TYPE_opaque_prf_input, ret);
 1469|       |        s2n(col + 2, ret);
 1470|       |        s2n(col, ret);
 1471|       |        memcpy(ret, s->s3->client_opaque_prf_input, col);
 1472|       |        ret += col;
 1473|       |    }
 1474|       |# endif
 1475|       |
 1476|     49|    if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {
 1477|      0|        int i;
 1478|      0|        size_t extlen, idlen;
 1479|      0|        int lentmp;
 1480|      0|        OCSP_RESPID *id;
 1481|       |
 1482|      0|        idlen = 0;
 1483|      0|        for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {
 1484|      0|            id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);
 1485|      0|            lentmp = i2d_OCSP_RESPID(id, NULL);
 1486|      0|            if (lentmp <= 0)
 1487|      0|                return NULL;
 1488|      0|            idlen += (size_t)lentmp + 2;
 1489|      0|        }
 1490|       |
 1491|      0|        if (s->tlsext_ocsp_exts) {
 1492|      0|            lentmp = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);
 1493|      0|            if (lentmp < 0)
 1494|      0|                return NULL;
 1495|      0|            extlen = (size_t)lentmp;
 1496|      0|        } else
 1497|      0|            extlen = 0;
 1498|       |
 1499|      0|        if (extlen + idlen > 0xFFF0)
 1500|      0|            return NULL;
 1501|       |        /*
 1502|       |         * 2 bytes for status request type
 1503|       |         * 2 bytes for status request len
 1504|       |         * 1 byte for OCSP request type
 1505|       |         * 2 bytes for length of ids
 1506|       |         * 2 bytes for length of extensions
 1507|       |         * + length of ids
 1508|       |         * + length of extensions
 1509|       |         */
 1510|      0|        if (CHECKLEN(ret, 9 + idlen + extlen, limit))
 1511|      0|            return NULL;
 1512|       |
 1513|      0|        s2n(TLSEXT_TYPE_status_request, ret);
 1514|      0|        s2n(extlen + idlen + 5, ret);
 1515|      0|        *(ret++) = TLSEXT_STATUSTYPE_ocsp;
 1516|      0|        s2n(idlen, ret);
 1517|      0|        for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {
 1518|       |            /* save position of id len */
 1519|      0|            unsigned char *q = ret;
 1520|      0|            id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);
 1521|       |            /* skip over id len */
 1522|      0|            ret += 2;
 1523|      0|            lentmp = i2d_OCSP_RESPID(id, &ret);
 1524|       |            /* write id len */
 1525|      0|            s2n(lentmp, q);
 1526|      0|        }
 1527|      0|        s2n(extlen, ret);
 1528|      0|        if (extlen > 0)
 1529|      0|            i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, &ret);
 1530|      0|    }
 1531|     49|# ifndef OPENSSL_NO_HEARTBEATS
 1532|       |    /* Add Heartbeat extension */
 1533|       |
 1534|       |    /*-
 1535|       |     * check for enough space.
 1536|       |     * 4 bytes for the heartbeat ext type and extension length
 1537|       |     * 1 byte for the mode
 1538|       |     */
 1539|     49|    if (CHECKLEN(ret, 5, limit))
 1540|      0|        return NULL;
 1541|       |
 1542|     49|    s2n(TLSEXT_TYPE_heartbeat, ret);
 1543|     49|    s2n(1, ret);
 1544|       |    /*-
 1545|       |     * Set mode:
 1546|       |     * 1: peer may send requests
 1547|       |     * 2: peer not allowed to send requests
 1548|       |     */
 1549|     49|    if (s->tlsext_heartbeat & SSL_TLSEXT_HB_DONT_RECV_REQUESTS)
 1550|      0|        *(ret++) = SSL_TLSEXT_HB_DONT_SEND_REQUESTS;
 1551|     49|    else
 1552|     49|        *(ret++) = SSL_TLSEXT_HB_ENABLED;
 1553|     49|# endif
 1554|       |
 1555|     49|# ifndef OPENSSL_NO_NEXTPROTONEG
 1556|     49|    if (s->ctx->next_proto_select_cb && !s->s3->tmp.finish_md_len) {
 1557|       |        /*
 1558|       |         * The client advertises an emtpy extension to indicate its support
 1559|       |         * for Next Protocol Negotiation
 1560|       |         */
 1561|       |
 1562|       |        /*-
 1563|       |         * check for enough space.
 1564|       |         * 4 bytes for the NPN ext type and extension length
 1565|       |         */
 1566|      0|        if (CHECKLEN(ret, 4, limit))
 1567|      0|            return NULL;
 1568|      0|        s2n(TLSEXT_TYPE_next_proto_neg, ret);
 1569|      0|        s2n(0, ret);
 1570|      0|    }
 1571|     49|# endif
 1572|       |
 1573|     49|    if (s->alpn_client_proto_list && !s->s3->tmp.finish_md_len) {
 1574|       |        /*-
 1575|       |         * check for enough space.
 1576|       |         * 4 bytes for the ALPN type and extension length
 1577|       |         * 2 bytes for the ALPN protocol list length
 1578|       |         * + ALPN protocol list length
 1579|       |         */
 1580|      0|        if (CHECKLEN(ret, 6 + s->alpn_client_proto_list_len, limit))
 1581|      0|            return NULL;
 1582|      0|        s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret);
 1583|      0|        s2n(2 + s->alpn_client_proto_list_len, ret);
 1584|      0|        s2n(s->alpn_client_proto_list_len, ret);
 1585|      0|        memcpy(ret, s->alpn_client_proto_list, s->alpn_client_proto_list_len);
 1586|      0|        ret += s->alpn_client_proto_list_len;
 1587|      0|        s->cert->alpn_sent = 1;
 1588|      0|    }
 1589|     49|# ifndef OPENSSL_NO_SRTP
 1590|     49|    if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)) {
 1591|      0|        int el;
 1592|       |
 1593|      0|        ssl_add_clienthello_use_srtp_ext(s, 0, &el, 0);
 1594|       |
 1595|       |        /*-
 1596|       |         * check for enough space.
 1597|       |         * 4 bytes for the SRTP type and extension length
 1598|       |         * + SRTP profiles length
 1599|       |         */
 1600|      0|        if (CHECKLEN(ret, 4 + el, limit))
 1601|      0|            return NULL;
 1602|       |
 1603|      0|        s2n(TLSEXT_TYPE_use_srtp, ret);
 1604|      0|        s2n(el, ret);
 1605|       |
 1606|      0|        if (ssl_add_clienthello_use_srtp_ext(s, ret, &el, el)) {
 1607|      0|            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);
 1608|      0|            return NULL;
 1609|      0|        }
 1610|      0|        ret += el;
 1611|      0|    }
 1612|     49|# endif
 1613|     49|    custom_ext_init(&s->cert->cli_ext);
 1614|       |    /* Add custom TLS Extensions to ClientHello */
 1615|     49|    if (!custom_ext_add(s, 0, &ret, limit, al))
 1616|      0|        return NULL;
 1617|       |
 1618|       |    /*
 1619|       |     * Add padding to workaround bugs in F5 terminators. See
 1620|       |     * https://tools.ietf.org/html/draft-agl-tls-padding-03 NB: because this
 1621|       |     * code works out the length of all existing extensions it MUST always
 1622|       |     * appear last.
 1623|       |     */
 1624|     49|    if (s->options & SSL_OP_TLSEXT_PADDING) {
 1625|     49|        int hlen = ret - (unsigned char *)s->init_buf->data;
 1626|       |        /*
 1627|       |         * The code in s23_clnt.c to build ClientHello messages includes the
 1628|       |         * 5-byte record header in the buffer, while the code in s3_clnt.c
 1629|       |         * does not.
 1630|       |         */
 1631|     49|        if (s->state == SSL23_ST_CW_CLNT_HELLO_A)
 1632|     49|            hlen -= 5;
 1633|     49|        if (hlen > 0xff && hlen < 0x200) {
 1634|     48|            hlen = 0x200 - hlen;
 1635|     48|            if (hlen >= 4)
 1636|     47|                hlen -= 4;
 1637|      1|            else
 1638|      1|                hlen = 0;
 1639|       |
 1640|       |            /*-
 1641|       |             * check for enough space. Strictly speaking we know we've already
 1642|       |             * got enough space because to get here the message size is < 0x200,
 1643|       |             * but we know that we've allocated far more than that in the buffer
 1644|       |             * - but for consistency and robustness we're going to check anyway.
 1645|       |             *
 1646|       |             * 4 bytes for the padding type and extension length
 1647|       |             * + padding length
 1648|       |             */
 1649|     48|            if (CHECKLEN(ret, 4 + hlen, limit))
 1650|      0|                return NULL;
 1651|     48|            s2n(TLSEXT_TYPE_padding, ret);
 1652|     48|            s2n(hlen, ret);
 1653|     48|            memset(ret, 0, hlen);
 1654|     48|            ret += hlen;
 1655|     48|        }
 1656|     49|    }
 1657|       |
 1658|     49|    if ((extdatalen = ret - orig - 2) == 0)
 1659|      0|        return orig;
 1660|       |
 1661|     49|    s2n(extdatalen, orig);
 1662|     49|    return ret;
 1663|     49|}
ssl_prepare_clienthello_tlsext:
 2966|     49|{
 2967|       |
 2968|       |# ifdef TLSEXT_TYPE_opaque_prf_input
 2969|       |    {
 2970|       |        int r = 1;
 2971|       |
 2972|       |        if (s->ctx->tlsext_opaque_prf_input_callback != 0) {
 2973|       |            r = s->ctx->tlsext_opaque_prf_input_callback(s, NULL, 0,
 2974|       |                                                         s->
 2975|       |                                                         ctx->tlsext_opaque_prf_input_callback_arg);
 2976|       |            if (!r)
 2977|       |                return -1;
 2978|       |        }
 2979|       |
 2980|       |        if (s->tlsext_opaque_prf_input != NULL) {
 2981|       |            if (s->s3->client_opaque_prf_input != NULL) {
 2982|       |                /* shouldn't really happen */
 2983|       |                OPENSSL_free(s->s3->client_opaque_prf_input);
 2984|       |            }
 2985|       |
 2986|       |            if (s->tlsext_opaque_prf_input_len == 0) {
 2987|       |                /* dummy byte just to get non-NULL */
 2988|       |                s->s3->client_opaque_prf_input = OPENSSL_malloc(1);
 2989|       |            } else {
 2990|       |                s->s3->client_opaque_prf_input =
 2991|       |                    BUF_memdup(s->tlsext_opaque_prf_input,
 2992|       |                               s->tlsext_opaque_prf_input_len);
 2993|       |            }
 2994|       |            if (s->s3->client_opaque_prf_input == NULL) {
 2995|       |                SSLerr(SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT,
 2996|       |                       ERR_R_MALLOC_FAILURE);
 2997|       |                return -1;
 2998|       |            }
 2999|       |            s->s3->client_opaque_prf_input_len =
 3000|       |                s->tlsext_opaque_prf_input_len;
 3001|       |        }
 3002|       |
 3003|       |        if (r == 2)
 3004|       |            /*
 3005|       |             * at callback's request, insist on receiving an appropriate
 3006|       |             * server opaque PRF input
 3007|       |             */
 3008|       |            s->s3->server_opaque_prf_input_len =
 3009|       |                s->tlsext_opaque_prf_input_len;
 3010|       |    }
 3011|       |# endif
 3012|       |
 3013|     49|    s->cert->alpn_sent = 0;
 3014|     49|    return 1;
 3015|     49|}
t1_lib.c:tls1_get_curvelist:
  469|     49|{
  470|     49|    size_t pcurveslen = 0;
  471|     49|    if (sess) {
  472|      0|        *pcurves = s->session->tlsext_ellipticcurvelist;
  473|      0|        pcurveslen = s->session->tlsext_ellipticcurvelist_length;
  474|     49|    } else {
  475|       |        /* For Suite B mode only include P-256, P-384 */
  476|     49|        switch (tls1_suiteb(s)) {
  477|      0|        case SSL_CERT_FLAG_SUITEB_128_LOS:
  478|      0|            *pcurves = suiteb_curves;
  479|      0|            pcurveslen = sizeof(suiteb_curves);
  480|      0|            break;
  481|       |
  482|      0|        case SSL_CERT_FLAG_SUITEB_128_LOS_ONLY:
  483|      0|            *pcurves = suiteb_curves;
  484|      0|            pcurveslen = 2;
  485|      0|            break;
  486|       |
  487|      0|        case SSL_CERT_FLAG_SUITEB_192_LOS:
  488|      0|            *pcurves = suiteb_curves + 2;
  489|      0|            pcurveslen = 2;
  490|      0|            break;
  491|     49|        default:
  492|     49|            *pcurves = s->tlsext_ellipticcurvelist;
  493|     49|            pcurveslen = s->tlsext_ellipticcurvelist_length;
  494|     49|        }
  495|     49|        if (!*pcurves) {
  496|       |# ifdef OPENSSL_FIPS
  497|       |            if (FIPS_mode()) {
  498|       |                *pcurves = fips_curves_default;
  499|       |                pcurveslen = sizeof(fips_curves_default);
  500|       |            } else
  501|       |# endif
  502|     49|            {
  503|     49|                if (!s->server || s->cert->ecdh_tmp_auto) {
  504|     49|                    *pcurves = eccurves_auto;
  505|     49|                    pcurveslen = sizeof(eccurves_auto);
  506|     49|                } else {
  507|      0|                    *pcurves = eccurves_all;
  508|      0|                    pcurveslen = sizeof(eccurves_all);
  509|      0|                }
  510|     49|            }
  511|     49|        }
  512|     49|    }
  513|       |    /* We do not allow odd length arrays to enter the system. */
  514|     49|    if (pcurveslen & 1) {
  515|      0|        SSLerr(SSL_F_TLS1_GET_CURVELIST, ERR_R_INTERNAL_ERROR);
  516|      0|        *num_curves = 0;
  517|      0|        return 0;
  518|     49|    } else {
  519|     49|        *num_curves = pcurveslen / 2;
  520|     49|        return 1;
  521|     49|    }
  522|     49|}
t1_lib.c:tls1_get_formatlist:
  834|     49|{
  835|       |    /*
  836|       |     * If we have a custom point format list use it otherwise use default
  837|       |     */
  838|     49|    if (s->tlsext_ecpointformatlist) {
  839|      0|        *pformats = s->tlsext_ecpointformatlist;
  840|      0|        *num_formats = s->tlsext_ecpointformatlist_length;
  841|     49|    } else {
  842|     49|        *pformats = ecformats_default;
  843|       |        /* For Suite B we don't support char2 fields */
  844|     49|        if (tls1_suiteb(s))
  845|      0|            *num_formats = sizeof(ecformats_default) - 1;
  846|     49|        else
  847|     49|            *num_formats = sizeof(ecformats_default);
  848|     49|    }
  849|     49|}

SSL_CTX_SRP_CTX_free:
   68|     49|{
   69|     49|    if (ctx == NULL)
   70|      0|        return 0;
   71|     49|    OPENSSL_free(ctx->srp_ctx.login);
   72|     49|    BN_free(ctx->srp_ctx.N);
   73|     49|    BN_free(ctx->srp_ctx.g);
   74|     49|    BN_free(ctx->srp_ctx.s);
   75|     49|    BN_free(ctx->srp_ctx.B);
   76|     49|    BN_free(ctx->srp_ctx.A);
   77|     49|    BN_free(ctx->srp_ctx.a);
   78|     49|    BN_free(ctx->srp_ctx.b);
   79|     49|    BN_free(ctx->srp_ctx.v);
   80|     49|    ctx->srp_ctx.TLS_ext_srp_username_callback = NULL;
   81|     49|    ctx->srp_ctx.SRP_cb_arg = NULL;
   82|     49|    ctx->srp_ctx.SRP_verify_param_callback = NULL;
   83|     49|    ctx->srp_ctx.SRP_give_srp_client_pwd_callback = NULL;
   84|     49|    ctx->srp_ctx.N = NULL;
   85|     49|    ctx->srp_ctx.g = NULL;
   86|     49|    ctx->srp_ctx.s = NULL;
   87|     49|    ctx->srp_ctx.B = NULL;
   88|     49|    ctx->srp_ctx.A = NULL;
   89|     49|    ctx->srp_ctx.a = NULL;
   90|     49|    ctx->srp_ctx.b = NULL;
   91|     49|    ctx->srp_ctx.v = NULL;
   92|     49|    ctx->srp_ctx.login = NULL;
   93|     49|    ctx->srp_ctx.info = NULL;
   94|     49|    ctx->srp_ctx.strength = SRP_MINIMAL_N;
   95|     49|    ctx->srp_ctx.srp_Mask = 0;
   96|     49|    return (1);
   97|     49|}
SSL_SRP_CTX_free:
  100|     49|{
  101|     49|    if (s == NULL)
  102|      0|        return 0;
  103|     49|    OPENSSL_free(s->srp_ctx.login);
  104|     49|    BN_free(s->srp_ctx.N);
  105|     49|    BN_free(s->srp_ctx.g);
  106|     49|    BN_free(s->srp_ctx.s);
  107|     49|    BN_free(s->srp_ctx.B);
  108|     49|    BN_free(s->srp_ctx.A);
  109|     49|    BN_free(s->srp_ctx.a);
  110|     49|    BN_free(s->srp_ctx.b);
  111|     49|    BN_free(s->srp_ctx.v);
  112|     49|    s->srp_ctx.TLS_ext_srp_username_callback = NULL;
  113|     49|    s->srp_ctx.SRP_cb_arg = NULL;
  114|     49|    s->srp_ctx.SRP_verify_param_callback = NULL;
  115|     49|    s->srp_ctx.SRP_give_srp_client_pwd_callback = NULL;
  116|     49|    s->srp_ctx.N = NULL;
  117|     49|    s->srp_ctx.g = NULL;
  118|     49|    s->srp_ctx.s = NULL;
  119|     49|    s->srp_ctx.B = NULL;
  120|     49|    s->srp_ctx.A = NULL;
  121|     49|    s->srp_ctx.a = NULL;
  122|     49|    s->srp_ctx.b = NULL;
  123|     49|    s->srp_ctx.v = NULL;
  124|     49|    s->srp_ctx.login = NULL;
  125|     49|    s->srp_ctx.info = NULL;
  126|     49|    s->srp_ctx.strength = SRP_MINIMAL_N;
  127|     49|    s->srp_ctx.srp_Mask = 0;
  128|     49|    return (1);
  129|     49|}
SSL_SRP_CTX_init:
  132|     49|{
  133|     49|    SSL_CTX *ctx;
  134|       |
  135|     49|    if ((s == NULL) || ((ctx = s->ctx) == NULL))
  136|      0|        return 0;
  137|     49|    s->srp_ctx.SRP_cb_arg = ctx->srp_ctx.SRP_cb_arg;
  138|       |    /* set client Hello login callback */
  139|     49|    s->srp_ctx.TLS_ext_srp_username_callback =
  140|     49|        ctx->srp_ctx.TLS_ext_srp_username_callback;
  141|       |    /* set SRP N/g param callback for verification */
  142|     49|    s->srp_ctx.SRP_verify_param_callback =
  143|     49|        ctx->srp_ctx.SRP_verify_param_callback;
  144|       |    /* set SRP client passwd callback */
  145|     49|    s->srp_ctx.SRP_give_srp_client_pwd_callback =
  146|     49|        ctx->srp_ctx.SRP_give_srp_client_pwd_callback;
  147|       |
  148|     49|    s->srp_ctx.N = NULL;
  149|     49|    s->srp_ctx.g = NULL;
  150|     49|    s->srp_ctx.s = NULL;
  151|     49|    s->srp_ctx.B = NULL;
  152|     49|    s->srp_ctx.A = NULL;
  153|     49|    s->srp_ctx.a = NULL;
  154|     49|    s->srp_ctx.b = NULL;
  155|     49|    s->srp_ctx.v = NULL;
  156|     49|    s->srp_ctx.login = NULL;
  157|     49|    s->srp_ctx.info = ctx->srp_ctx.info;
  158|     49|    s->srp_ctx.strength = ctx->srp_ctx.strength;
  159|       |
  160|     49|    if (((ctx->srp_ctx.N != NULL) &&
  161|     49|         ((s->srp_ctx.N = BN_dup(ctx->srp_ctx.N)) == NULL)) ||
  162|     49|        ((ctx->srp_ctx.g != NULL) &&
  163|     49|         ((s->srp_ctx.g = BN_dup(ctx->srp_ctx.g)) == NULL)) ||
  164|     49|        ((ctx->srp_ctx.s != NULL) &&
  165|     49|         ((s->srp_ctx.s = BN_dup(ctx->srp_ctx.s)) == NULL)) ||
  166|     49|        ((ctx->srp_ctx.B != NULL) &&
  167|     49|         ((s->srp_ctx.B = BN_dup(ctx->srp_ctx.B)) == NULL)) ||
  168|     49|        ((ctx->srp_ctx.A != NULL) &&
  169|     49|         ((s->srp_ctx.A = BN_dup(ctx->srp_ctx.A)) == NULL)) ||
  170|     49|        ((ctx->srp_ctx.a != NULL) &&
  171|     49|         ((s->srp_ctx.a = BN_dup(ctx->srp_ctx.a)) == NULL)) ||
  172|     49|        ((ctx->srp_ctx.v != NULL) &&
  173|     49|         ((s->srp_ctx.v = BN_dup(ctx->srp_ctx.v)) == NULL)) ||
  174|     49|        ((ctx->srp_ctx.b != NULL) &&
  175|     49|         ((s->srp_ctx.b = BN_dup(ctx->srp_ctx.b)) == NULL))) {
  176|      0|        SSLerr(SSL_F_SSL_SRP_CTX_INIT, ERR_R_BN_LIB);
  177|      0|        goto err;
  178|      0|    }
  179|     49|    if ((ctx->srp_ctx.login != NULL) &&
  180|     49|        ((s->srp_ctx.login = BUF_strdup(ctx->srp_ctx.login)) == NULL)) {
  181|      0|        SSLerr(SSL_F_SSL_SRP_CTX_INIT, ERR_R_INTERNAL_ERROR);
  182|      0|        goto err;
  183|      0|    }
  184|     49|    s->srp_ctx.srp_Mask = ctx->srp_ctx.srp_Mask;
  185|       |
  186|     49|    return (1);
  187|      0| err:
  188|      0|    OPENSSL_free(s->srp_ctx.login);
  189|      0|    BN_free(s->srp_ctx.N);
  190|      0|    BN_free(s->srp_ctx.g);
  191|      0|    BN_free(s->srp_ctx.s);
  192|      0|    BN_free(s->srp_ctx.B);
  193|      0|    BN_free(s->srp_ctx.A);
  194|      0|    BN_free(s->srp_ctx.a);
  195|      0|    BN_free(s->srp_ctx.b);
  196|      0|    BN_free(s->srp_ctx.v);
  197|      0|    return (0);
  198|     49|}
SSL_CTX_SRP_CTX_init:
  201|     49|{
  202|     49|    if (ctx == NULL)
  203|      0|        return 0;
  204|       |
  205|     49|    ctx->srp_ctx.SRP_cb_arg = NULL;
  206|       |    /* set client Hello login callback */
  207|     49|    ctx->srp_ctx.TLS_ext_srp_username_callback = NULL;
  208|       |    /* set SRP N/g param callback for verification */
  209|     49|    ctx->srp_ctx.SRP_verify_param_callback = NULL;
  210|       |    /* set SRP client passwd callback */
  211|     49|    ctx->srp_ctx.SRP_give_srp_client_pwd_callback = NULL;
  212|       |
  213|     49|    ctx->srp_ctx.N = NULL;
  214|     49|    ctx->srp_ctx.g = NULL;
  215|     49|    ctx->srp_ctx.s = NULL;
  216|     49|    ctx->srp_ctx.B = NULL;
  217|     49|    ctx->srp_ctx.A = NULL;
  218|     49|    ctx->srp_ctx.a = NULL;
  219|     49|    ctx->srp_ctx.b = NULL;
  220|     49|    ctx->srp_ctx.v = NULL;
  221|     49|    ctx->srp_ctx.login = NULL;
  222|     49|    ctx->srp_ctx.srp_Mask = 0;
  223|     49|    ctx->srp_ctx.info = NULL;
  224|     49|    ctx->srp_ctx.strength = SRP_MINIMAL_N;
  225|       |
  226|     49|    return (1);
  227|     49|}

