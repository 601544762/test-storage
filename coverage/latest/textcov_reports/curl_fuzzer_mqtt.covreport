easy.c:sigpipe_ignore:
   44|    574|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|    574|  ig->no_signal = data->set.no_signal;
   48|    574|  if(!data->set.no_signal) {
   49|    574|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|    574|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|    574|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|    574|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|    574|    action.sa_handler = SIG_IGN;
   56|    574|    sigaction(SIGPIPE, &action, NULL);
   57|    574|  }
   58|    574|}
easy.c:sigpipe_restore:
   66|    574|{
   67|    574|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|    574|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|    574|}
multi.c:sigpipe_ignore:
   44|  15.8M|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  15.8M|  ig->no_signal = data->set.no_signal;
   48|  15.8M|  if(!data->set.no_signal) {
   49|  15.8M|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  15.8M|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  15.8M|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  15.8M|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  15.8M|    action.sa_handler = SIG_IGN;
   56|  15.8M|    sigaction(SIGPIPE, &action, NULL);
   57|  15.8M|  }
   58|  15.8M|}
multi.c:sigpipe_restore:
   66|  15.8M|{
   67|  15.8M|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  15.8M|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  15.8M|}
conncache.c:sigpipe_ignore:
   44|    472|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|    472|  ig->no_signal = data->set.no_signal;
   48|    472|  if(!data->set.no_signal) {
   49|    472|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|    472|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|    472|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|    472|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|    472|    action.sa_handler = SIG_IGN;
   56|    472|    sigaction(SIGPIPE, &action, NULL);
   57|    472|  }
   58|    472|}
conncache.c:sigpipe_restore:
   66|    472|{
   67|    472|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|    472|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|    472|}

Curl_altsvc_cleanup:
  306|  1.04k|{
  307|  1.04k|  struct Curl_llist_element *e;
  308|  1.04k|  struct Curl_llist_element *n;
  309|  1.04k|  if(*altsvcp) {
  310|      0|    struct altsvcinfo *altsvc = *altsvcp;
  311|      0|    for(e = altsvc->list.head; e; e = n) {
  312|      0|      struct altsvc *as = e->ptr;
  313|      0|      n = e->next;
  314|      0|      altsvc_free(as);
  315|      0|    }
  316|      0|    free(altsvc->filename);
  317|      0|    free(altsvc);
  318|      0|    *altsvcp = NULL; /* clear the pointer */
  319|      0|  }
  320|  1.04k|}
Curl_altsvc_save:
  327|  1.04k|{
  328|  1.04k|  struct Curl_llist_element *e;
  329|  1.04k|  struct Curl_llist_element *n;
  330|  1.04k|  CURLcode result = CURLE_OK;
  331|  1.04k|  FILE *out;
  332|  1.04k|  char *tempstore;
  333|  1.04k|  unsigned char randsuffix[9];
  334|       |
  335|  1.04k|  if(!altsvc)
  336|       |    /* no cache activated */
  337|  1.04k|    return CURLE_OK;
  338|       |
  339|       |  /* if not new name is given, use the one we stored from the load */
  340|      0|  if(!file && altsvc->filename)
  341|      0|    file = altsvc->filename;
  342|       |
  343|      0|  if((altsvc->flags & CURLALTSVC_READONLYFILE) || !file || !file[0])
  344|       |    /* marked as read-only, no file or zero length file name */
  345|      0|    return CURLE_OK;
  346|       |
  347|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  348|      0|    return CURLE_FAILED_INIT;
  349|       |
  350|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  351|      0|  if(!tempstore)
  352|      0|    return CURLE_OUT_OF_MEMORY;
  353|       |
  354|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  355|      0|  if(!out)
  356|      0|    result = CURLE_WRITE_ERROR;
  357|      0|  else {
  358|      0|    fputs("# Your alt-svc cache. https://curl.se/docs/alt-svc.html\n"
  359|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  360|      0|          out);
  361|      0|    for(e = altsvc->list.head; e; e = n) {
  362|      0|      struct altsvc *as = e->ptr;
  363|      0|      n = e->next;
  364|      0|      result = altsvc_out(as, out);
  365|      0|      if(result)
  366|      0|        break;
  367|      0|    }
  368|      0|    fclose(out);
  369|      0|    if(!result && Curl_rename(tempstore, file))
  370|      0|      result = CURLE_WRITE_ERROR;
  371|       |
  372|      0|    if(result)
  373|      0|      unlink(tempstore);
  374|      0|  }
  375|      0|  free(tempstore);
  376|      0|  return result;
  377|      0|}

Curl_resolver_global_init:
   92|      1|{
   93|      1|  return CURLE_OK;
   94|      1|}
Curl_resolver_init:
  112|  1.04k|{
  113|  1.04k|  (void)easy;
  114|  1.04k|  *resolver = calloc(1, sizeof(struct resdata));
  115|  1.04k|  if(!*resolver)
  116|      0|    return CURLE_OUT_OF_MEMORY;
  117|  1.04k|  return CURLE_OK;
  118|  1.04k|}
Curl_resolver_cleanup:
  127|  1.04k|{
  128|  1.04k|  free(resolver);
  129|  1.04k|}
Curl_resolver_cancel:
  148|    691|{
  149|    691|  destroy_async_data(&data->state.async);
  150|    691|}
Curl_resolver_kill:
  531|    285|{
  532|    285|  struct thread_data *td = data->state.async.tdata;
  533|       |
  534|       |  /* If we're still resolving, we must wait for the threads to fully clean up,
  535|       |     unfortunately.  Otherwise, we can simply cancel to clean up any resolver
  536|       |     data. */
  537|    285|  if(td && td->thread_hnd != curl_thread_t_null)
  538|      0|    (void)thread_wait_resolv(data, NULL, FALSE);
  539|    285|  else
  540|    285|    Curl_resolver_cancel(data);
  541|    285|}
asyn-thread.c:destroy_async_data:
  380|    691|{
  381|    691|  if(async->tdata) {
  382|      0|    struct thread_data *td = async->tdata;
  383|      0|    int done;
  384|      0|#ifndef CURL_DISABLE_SOCKETPAIR
  385|      0|    curl_socket_t sock_rd = td->tsd.sock_pair[0];
  386|      0|    struct Curl_easy *data = td->tsd.data;
  387|      0|#endif
  388|       |
  389|       |    /*
  390|       |     * if the thread is still blocking in the resolve syscall, detach it and
  391|       |     * let the thread do the cleanup...
  392|       |     */
  393|      0|    Curl_mutex_acquire(td->tsd.mtx);
  394|      0|    done = td->tsd.done;
  395|      0|    td->tsd.done = 1;
  396|      0|    Curl_mutex_release(td->tsd.mtx);
  397|       |
  398|      0|    if(!done) {
  399|      0|      Curl_thread_destroy(td->thread_hnd);
  400|      0|    }
  401|      0|    else {
  402|      0|      if(td->thread_hnd != curl_thread_t_null)
  403|      0|        Curl_thread_join(&td->thread_hnd);
  404|       |
  405|      0|      destroy_thread_sync_data(&td->tsd);
  406|       |
  407|      0|      free(async->tdata);
  408|      0|    }
  409|      0|#ifndef CURL_DISABLE_SOCKETPAIR
  410|       |    /*
  411|       |     * ensure CURLMOPT_SOCKETFUNCTION fires CURL_POLL_REMOVE
  412|       |     * before the FD is invalidated to avoid EBADF on EPOLL_CTL_DEL
  413|       |     */
  414|      0|    Curl_multi_closed(data, sock_rd);
  415|      0|    sclose(sock_rd);
  416|      0|#endif
  417|      0|  }
  418|    691|  async->tdata = NULL;
  419|       |
  420|    691|  free(async->hostname);
  421|    691|  async->hostname = NULL;
  422|    691|}

Curl_conncache_init:
  115|    472|{
  116|    472|  int rc;
  117|       |
  118|       |  /* allocate a new easy handle to use when closing cached connections */
  119|    472|  connc->closure_handle = curl_easy_init();
  120|    472|  if(!connc->closure_handle)
  121|      0|    return 1; /* bad */
  122|       |
  123|    472|  rc = Curl_hash_init(&connc->hash, size, Curl_hash_str,
  124|    472|                      Curl_str_key_compare, free_bundle_hash_entry);
  125|    472|  if(rc)
  126|      0|    Curl_close(&connc->closure_handle);
  127|    472|  else
  128|    472|    connc->closure_handle->state.conn_cache = connc;
  129|       |
  130|    472|  return rc;
  131|    472|}
Curl_conncache_destroy:
  134|    472|{
  135|    472|  if(connc)
  136|    472|    Curl_hash_destroy(&connc->hash);
  137|    472|}
Curl_conncache_find_bundle:
  189|    855|{
  190|    855|  struct connectbundle *bundle = NULL;
  191|    855|  CONNCACHE_LOCK(data);
  192|    855|  if(connc) {
  193|    855|    char key[HASHKEY_SIZE];
  194|    855|    hashkey(conn, key, sizeof(key), hostp);
  195|    855|    bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
  196|    855|  }
  197|       |
  198|    855|  return bundle;
  199|    855|}
Curl_conncache_add_conn:
  235|    285|{
  236|    285|  CURLcode result = CURLE_OK;
  237|    285|  struct connectbundle *bundle = NULL;
  238|    285|  struct connectdata *conn = data->conn;
  239|    285|  struct conncache *connc = data->state.conn_cache;
  240|    285|  DEBUGASSERT(conn);
  241|       |
  242|       |  /* *find_bundle() locks the connection cache */
  243|    285|  bundle = Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
  244|    285|                                      NULL);
  245|    285|  if(!bundle) {
  246|    285|    int rc;
  247|    285|    char key[HASHKEY_SIZE];
  248|       |
  249|    285|    result = bundle_create(&bundle);
  250|    285|    if(result) {
  251|      0|      goto unlock;
  252|      0|    }
  253|       |
  254|    285|    hashkey(conn, key, sizeof(key), NULL);
  255|    285|    rc = conncache_add_bundle(data->state.conn_cache, key, bundle);
  256|       |
  257|    285|    if(!rc) {
  258|      0|      bundle_destroy(bundle);
  259|      0|      result = CURLE_OUT_OF_MEMORY;
  260|      0|      goto unlock;
  261|      0|    }
  262|    285|  }
  263|       |
  264|    285|  bundle_add_conn(bundle, conn);
  265|    285|  conn->connection_id = connc->next_connection_id++;
  266|    285|  connc->num_conn++;
  267|       |
  268|    285|  DEBUGF(infof(data, "Added connection %ld. "
  269|    285|               "The cache now contains %zu members",
  270|    285|               conn->connection_id, connc->num_conn));
  271|       |
  272|    285|  unlock:
  273|    285|  CONNCACHE_UNLOCK(data);
  274|       |
  275|    285|  return result;
  276|    285|}
Curl_conncache_remove_conn:
  287|    406|{
  288|    406|  struct connectbundle *bundle = conn->bundle;
  289|    406|  struct conncache *connc = data->state.conn_cache;
  290|       |
  291|       |  /* The bundle pointer can be NULL, since this function can be called
  292|       |     due to a failed connection attempt, before being added to a bundle */
  293|    406|  if(bundle) {
  294|    285|    if(lock) {
  295|      0|      CONNCACHE_LOCK(data);
  296|      0|    }
  297|    285|    bundle_remove_conn(bundle, conn);
  298|    285|    if(bundle->num_connections == 0)
  299|    285|      conncache_remove_bundle(connc, bundle);
  300|    285|    conn->bundle = NULL; /* removed from it */
  301|    285|    if(connc) {
  302|    285|      connc->num_conn--;
  303|    285|      DEBUGF(infof(data, "The cache now contains %zu members",
  304|    285|                   connc->num_conn));
  305|    285|    }
  306|    285|    if(lock) {
  307|      0|      CONNCACHE_UNLOCK(data);
  308|      0|    }
  309|    285|  }
  310|    406|}
Curl_conncache_foreach:
  329|    285|{
  330|    285|  struct Curl_hash_iterator iter;
  331|    285|  struct Curl_llist_element *curr;
  332|    285|  struct Curl_hash_element *he;
  333|       |
  334|    285|  if(!connc)
  335|      0|    return FALSE;
  336|       |
  337|    285|  CONNCACHE_LOCK(data);
  338|    285|  Curl_hash_start_iterate(&connc->hash, &iter);
  339|       |
  340|    285|  he = Curl_hash_next_element(&iter);
  341|    285|  while(he) {
  342|      0|    struct connectbundle *bundle;
  343|       |
  344|      0|    bundle = he->ptr;
  345|      0|    he = Curl_hash_next_element(&iter);
  346|       |
  347|      0|    curr = bundle->conn_list.head;
  348|      0|    while(curr) {
  349|       |      /* Yes, we need to update curr before calling func(), because func()
  350|       |         might decide to remove the connection */
  351|      0|      struct connectdata *conn = curr->ptr;
  352|      0|      curr = curr->next;
  353|       |
  354|      0|      if(1 == func(data, conn, param)) {
  355|      0|        CONNCACHE_UNLOCK(data);
  356|      0|        return TRUE;
  357|      0|      }
  358|      0|    }
  359|      0|  }
  360|    285|  CONNCACHE_UNLOCK(data);
  361|    285|  return FALSE;
  362|    285|}
Curl_conncache_close_all_connections:
  540|    472|{
  541|    472|  struct connectdata *conn;
  542|    472|  char buffer[READBUFFER_MIN + 1];
  543|    472|  if(!connc->closure_handle)
  544|      0|    return;
  545|    472|  connc->closure_handle->state.buffer = buffer;
  546|    472|  connc->closure_handle->set.buffer_size = READBUFFER_MIN;
  547|       |
  548|    472|  conn = conncache_find_first_connection(connc);
  549|    472|  while(conn) {
  550|      0|    SIGPIPE_VARIABLE(pipe_st);
  551|      0|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  552|       |    /* This will remove the connection from the cache */
  553|      0|    connclose(conn, "kill all");
  554|      0|    Curl_conncache_remove_conn(connc->closure_handle, conn, TRUE);
  555|      0|    (void)Curl_disconnect(connc->closure_handle, conn, FALSE);
  556|      0|    sigpipe_restore(&pipe_st);
  557|       |
  558|      0|    conn = conncache_find_first_connection(connc);
  559|      0|  }
  560|       |
  561|    472|  connc->closure_handle->state.buffer = NULL;
  562|    472|  if(connc->closure_handle) {
  563|    472|    SIGPIPE_VARIABLE(pipe_st);
  564|    472|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  565|       |
  566|    472|    Curl_hostcache_clean(connc->closure_handle,
  567|    472|                         connc->closure_handle->dns.hostcache);
  568|    472|    Curl_close(&connc->closure_handle);
  569|    472|    sigpipe_restore(&pipe_st);
  570|    472|  }
  571|    472|}
conncache.c:free_bundle_hash_entry:
  108|    285|{
  109|    285|  struct connectbundle *b = (struct connectbundle *) freethis;
  110|       |
  111|    285|  bundle_destroy(b);
  112|    285|}
conncache.c:hashkey:
  143|  1.14k|{
  144|  1.14k|  const char *hostname;
  145|  1.14k|  long port = conn->remote_port;
  146|       |
  147|  1.14k|#ifndef CURL_DISABLE_PROXY
  148|  1.14k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
  149|      0|    hostname = conn->http_proxy.host.name;
  150|      0|    port = conn->port;
  151|      0|  }
  152|  1.14k|  else
  153|  1.14k|#endif
  154|  1.14k|    if(conn->bits.conn_to_host)
  155|  1.14k|      hostname = conn->conn_to_host.name;
  156|      0|  else
  157|      0|    hostname = conn->host.name;
  158|       |
  159|  1.14k|  if(hostp)
  160|       |    /* report back which name we used */
  161|    570|    *hostp = hostname;
  162|       |
  163|       |  /* put the number first so that the hostname gets cut off if too long */
  164|  1.14k|  msnprintf(buf, len, "%ld%s", port, hostname);
  165|  1.14k|  Curl_strntolower(buf, buf, len);
  166|  1.14k|}
conncache.c:bundle_create:
   54|    285|{
   55|    285|  DEBUGASSERT(*bundlep == NULL);
   56|    285|  *bundlep = malloc(sizeof(struct connectbundle));
   57|    285|  if(!*bundlep)
   58|      0|    return CURLE_OUT_OF_MEMORY;
   59|       |
   60|    285|  (*bundlep)->num_connections = 0;
   61|    285|  (*bundlep)->multiuse = BUNDLE_UNKNOWN;
   62|       |
   63|    285|  Curl_llist_init(&(*bundlep)->conn_list, (Curl_llist_dtor) conn_llist_dtor);
   64|    285|  return CURLE_OK;
   65|    285|}
conncache.c:conn_llist_dtor:
   47|    285|{
   48|    285|  struct connectdata *conn = element;
   49|    285|  (void)user;
   50|    285|  conn->bundle = NULL;
   51|    285|}
conncache.c:conncache_add_bundle:
  204|    285|{
  205|    285|  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
  206|       |
  207|    285|  return p?TRUE:FALSE;
  208|    285|}
conncache.c:bundle_destroy:
   68|    285|{
   69|    285|  if(!bundle)
   70|      0|    return;
   71|       |
   72|    285|  Curl_llist_destroy(&bundle->conn_list, NULL);
   73|       |
   74|    285|  free(bundle);
   75|    285|}
conncache.c:bundle_add_conn:
   80|    285|{
   81|    285|  Curl_llist_insert_next(&bundle->conn_list, bundle->conn_list.tail, conn,
   82|    285|                         &conn->bundle_node);
   83|    285|  conn->bundle = bundle;
   84|    285|  bundle->num_connections++;
   85|    285|}
conncache.c:bundle_remove_conn:
   90|    285|{
   91|    285|  struct Curl_llist_element *curr;
   92|       |
   93|    285|  curr = bundle->conn_list.head;
   94|    285|  while(curr) {
   95|    285|    if(curr->ptr == conn) {
   96|    285|      Curl_llist_remove(&bundle->conn_list, curr, NULL);
   97|    285|      bundle->num_connections--;
   98|    285|      conn->bundle = NULL;
   99|    285|      return 1; /* we removed a handle */
  100|    285|    }
  101|      0|    curr = curr->next;
  102|      0|  }
  103|      0|  DEBUGASSERT(0);
  104|      0|  return 0;
  105|      0|}
conncache.c:conncache_remove_bundle:
  212|    285|{
  213|    285|  struct Curl_hash_iterator iter;
  214|    285|  struct Curl_hash_element *he;
  215|       |
  216|    285|  if(!connc)
  217|      0|    return;
  218|       |
  219|    285|  Curl_hash_start_iterate(&connc->hash, &iter);
  220|       |
  221|    285|  he = Curl_hash_next_element(&iter);
  222|    285|  while(he) {
  223|    285|    if(he->ptr == bundle) {
  224|       |      /* The bundle is destroyed by the hash destructor function,
  225|       |         free_bundle_hash_entry() */
  226|    285|      Curl_hash_delete(&connc->hash, he->key, he->key_len);
  227|    285|      return;
  228|    285|    }
  229|       |
  230|      0|    he = Curl_hash_next_element(&iter);
  231|      0|  }
  232|    285|}
conncache.c:conncache_find_first_connection:
  372|    472|{
  373|    472|  struct Curl_hash_iterator iter;
  374|    472|  struct Curl_hash_element *he;
  375|    472|  struct connectbundle *bundle;
  376|       |
  377|    472|  Curl_hash_start_iterate(&connc->hash, &iter);
  378|       |
  379|    472|  he = Curl_hash_next_element(&iter);
  380|    472|  while(he) {
  381|      0|    struct Curl_llist_element *curr;
  382|      0|    bundle = he->ptr;
  383|       |
  384|      0|    curr = bundle->conn_list.head;
  385|      0|    if(curr) {
  386|      0|      return curr->ptr;
  387|      0|    }
  388|       |
  389|      0|    he = Curl_hash_next_element(&iter);
  390|      0|  }
  391|       |
  392|    472|  return NULL;
  393|    472|}

Curl_timeleft:
  187|  15.8M|{
  188|  15.8M|  unsigned int timeout_set = 0;
  189|  15.8M|  timediff_t connect_timeout_ms = 0;
  190|  15.8M|  timediff_t maxtime_timeout_ms = 0;
  191|  15.8M|  timediff_t timeout_ms = 0;
  192|  15.8M|  struct curltime now;
  193|       |
  194|       |  /* The duration of a connect and the total transfer are calculated from two
  195|       |     different time-stamps. It can end up with the total timeout being reached
  196|       |     before the connect timeout expires and we must acknowledge whichever
  197|       |     timeout that is reached first. The total timeout is set per entire
  198|       |     operation, while the connect timeout is set per connect. */
  199|       |
  200|  15.8M|  if(data->set.timeout > 0) {
  201|  15.8M|    timeout_set = TIMEOUT_MAXTIME;
  202|  15.8M|    maxtime_timeout_ms = data->set.timeout;
  203|  15.8M|  }
  204|  15.8M|  if(duringconnect) {
  205|    570|    timeout_set |= TIMEOUT_CONNECT;
  206|    570|    connect_timeout_ms = (data->set.connecttimeout > 0) ?
  207|    570|      data->set.connecttimeout : DEFAULT_CONNECT_TIMEOUT;
  208|    570|  }
  209|  15.8M|  if(!timeout_set)
  210|       |    /* no timeout  */
  211|      0|    return 0;
  212|       |
  213|  15.8M|  if(!nowp) {
  214|    570|    now = Curl_now();
  215|    570|    nowp = &now;
  216|    570|  }
  217|       |
  218|  15.8M|  if(timeout_set & TIMEOUT_MAXTIME) {
  219|  15.8M|    maxtime_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startop);
  220|  15.8M|    timeout_ms = maxtime_timeout_ms;
  221|  15.8M|  }
  222|       |
  223|  15.8M|  if(timeout_set & TIMEOUT_CONNECT) {
  224|    570|    connect_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startsingle);
  225|       |
  226|    570|    if(!(timeout_set & TIMEOUT_MAXTIME) ||
  227|    570|       (connect_timeout_ms < maxtime_timeout_ms))
  228|      0|      timeout_ms = connect_timeout_ms;
  229|    570|  }
  230|       |
  231|  15.8M|  if(!timeout_ms)
  232|       |    /* avoid returning 0 as that means no timeout! */
  233|    264|    return -1;
  234|       |
  235|  15.8M|  return timeout_ms;
  236|  15.8M|}
Curl_persistconninfo:
  611|    285|{
  612|    285|  memcpy(data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
  613|    285|  if(local_ip && local_ip[0])
  614|      0|    memcpy(data->info.conn_local_ip, local_ip, MAX_IPADR_LEN);
  615|    285|  else
  616|    285|    data->info.conn_local_ip[0] = 0;
  617|    285|  data->info.conn_scheme = conn->handler->scheme;
  618|    285|  data->info.conn_protocol = conn->handler->protocol;
  619|    285|  data->info.conn_primary_port = conn->port;
  620|    285|  data->info.conn_local_port = local_port;
  621|    285|}
Curl_addr2string:
  627|    855|{
  628|    855|  struct sockaddr_in *si = NULL;
  629|    855|#ifdef ENABLE_IPV6
  630|    855|  struct sockaddr_in6 *si6 = NULL;
  631|    855|#endif
  632|    855|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  633|    855|  struct sockaddr_un *su = NULL;
  634|       |#else
  635|       |  (void)salen;
  636|       |#endif
  637|       |
  638|    855|  switch(sa->sa_family) {
  639|    285|    case AF_INET:
  640|    285|      si = (struct sockaddr_in *)(void *) sa;
  641|    285|      if(Curl_inet_ntop(sa->sa_family, &si->sin_addr,
  642|    285|                        addr, MAX_IPADR_LEN)) {
  643|    285|        unsigned short us_port = ntohs(si->sin_port);
  644|    285|        *port = us_port;
  645|    285|        return TRUE;
  646|    285|      }
  647|      0|      break;
  648|      0|#ifdef ENABLE_IPV6
  649|      0|    case AF_INET6:
  650|      0|      si6 = (struct sockaddr_in6 *)(void *) sa;
  651|      0|      if(Curl_inet_ntop(sa->sa_family, &si6->sin6_addr,
  652|      0|                        addr, MAX_IPADR_LEN)) {
  653|      0|        unsigned short us_port = ntohs(si6->sin6_port);
  654|      0|        *port = us_port;
  655|      0|        return TRUE;
  656|      0|      }
  657|      0|      break;
  658|      0|#endif
  659|      0|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  660|    570|    case AF_UNIX:
  661|    570|      if(salen > (curl_socklen_t)sizeof(CURL_SA_FAMILY_T)) {
  662|      0|        su = (struct sockaddr_un*)sa;
  663|      0|        msnprintf(addr, MAX_IPADR_LEN, "%s", su->sun_path);
  664|      0|      }
  665|    570|      else
  666|    570|        addr[0] = 0; /* socket with no name */
  667|    570|      *port = 0;
  668|    570|      return TRUE;
  669|      0|#endif
  670|      0|    default:
  671|      0|      break;
  672|    855|  }
  673|       |
  674|      0|  addr[0] = '\0';
  675|      0|  *port = 0;
  676|      0|  errno = EAFNOSUPPORT;
  677|      0|  return FALSE;
  678|    855|}
Curl_conninfo_remote:
  684|    285|{
  685|    285|#ifdef HAVE_GETPEERNAME
  686|    285|  char buffer[STRERROR_LEN];
  687|    285|  struct Curl_sockaddr_storage ssrem;
  688|    285|  curl_socklen_t plen;
  689|    285|  int port;
  690|    285|  plen = sizeof(struct Curl_sockaddr_storage);
  691|    285|  memset(&ssrem, 0, sizeof(ssrem));
  692|    285|  if(getpeername(sockfd, (struct sockaddr*) &ssrem, &plen)) {
  693|      0|    int error = SOCKERRNO;
  694|      0|    failf(data, "getpeername() failed with errno %d: %s",
  695|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  696|      0|    return;
  697|      0|  }
  698|    285|  if(!Curl_addr2string((struct sockaddr*)&ssrem, plen,
  699|    285|                       conn->primary_ip, &port)) {
  700|      0|    failf(data, "ssrem inet_ntop() failed with errno %d: %s",
  701|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  702|      0|    return;
  703|      0|  }
  704|       |#else
  705|       |  (void)data;
  706|       |  (void)conn;
  707|       |  (void)sockfd;
  708|       |#endif
  709|    285|}
Curl_conninfo_local:
  715|    285|{
  716|    285|#ifdef HAVE_GETSOCKNAME
  717|    285|  char buffer[STRERROR_LEN];
  718|    285|  struct Curl_sockaddr_storage ssloc;
  719|    285|  curl_socklen_t slen;
  720|    285|  slen = sizeof(struct Curl_sockaddr_storage);
  721|    285|  memset(&ssloc, 0, sizeof(ssloc));
  722|    285|  if(getsockname(sockfd, (struct sockaddr*) &ssloc, &slen)) {
  723|      0|    int error = SOCKERRNO;
  724|      0|    failf(data, "getsockname() failed with errno %d: %s",
  725|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  726|      0|    return;
  727|      0|  }
  728|    285|  if(!Curl_addr2string((struct sockaddr*)&ssloc, slen,
  729|    285|                       local_ip, local_port)) {
  730|      0|    failf(data, "ssloc inet_ntop() failed with errno %d: %s",
  731|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  732|      0|    return;
  733|      0|  }
  734|       |#else
  735|       |  (void)data;
  736|       |  (void)sockfd;
  737|       |  (void)local_ip;
  738|       |  (void)local_port;
  739|       |#endif
  740|    285|}
Curl_updateconninfo:
  746|    285|{
  747|       |  /* 'local_ip' and 'local_port' get filled with local's numerical
  748|       |     ip address and port number whenever an outgoing connection is
  749|       |     **established** from the primary socket to a remote address. */
  750|    285|  char local_ip[MAX_IPADR_LEN] = "";
  751|    285|  int local_port = -1;
  752|       |
  753|    285|  if(conn->transport == TRNSPRT_TCP) {
  754|    285|    if(!conn->bits.reuse && !conn->bits.tcp_fastopen)
  755|    285|      Curl_conninfo_remote(data, conn, sockfd);
  756|    285|    Curl_conninfo_local(data, sockfd, local_ip, &local_port);
  757|    285|  } /* end of TCP-only section */
  758|       |
  759|       |  /* persist connection info in session handle */
  760|    285|  Curl_persistconninfo(data, conn, local_ip, local_port);
  761|    285|}
Curl_is_connected:
  852|    285|{
  853|    285|  CURLcode result = CURLE_OK;
  854|    285|  timediff_t allow;
  855|    285|  int error = 0;
  856|    285|  struct curltime now;
  857|    285|  int rc = 0;
  858|    285|  unsigned int i;
  859|       |
  860|    285|  DEBUGASSERT(sockindex >= FIRSTSOCKET && sockindex <= SECONDARYSOCKET);
  861|       |
  862|    285|  *connected = FALSE; /* a very negative world view is best */
  863|       |
  864|    285|  if(conn->bits.tcpconnect[sockindex]) {
  865|       |    /* we are connected already! */
  866|      0|    *connected = TRUE;
  867|      0|    return CURLE_OK;
  868|      0|  }
  869|       |
  870|    285|  now = Curl_now();
  871|       |
  872|    285|  if(SOCKS_STATE(conn->cnnct.state)) {
  873|       |    /* still doing SOCKS */
  874|      0|    result = connect_SOCKS(data, sockindex, connected);
  875|      0|    if(!result && *connected)
  876|      0|      post_SOCKS(data, conn, sockindex, connected);
  877|      0|    return result;
  878|      0|  }
  879|       |
  880|    285|  for(i = 0; i<2; i++) {
  881|    285|    const int other = i ^ 1;
  882|    285|    if(conn->tempsock[i] == CURL_SOCKET_BAD)
  883|      0|      continue;
  884|    285|    error = 0;
  885|       |#ifdef ENABLE_QUIC
  886|       |    if(conn->transport == TRNSPRT_QUIC) {
  887|       |      result = Curl_quic_is_connected(data, conn, i, connected);
  888|       |      if(!result && *connected) {
  889|       |        /* use this socket from now on */
  890|       |        conn->sock[sockindex] = conn->tempsock[i];
  891|       |        conn->ip_addr = conn->tempaddr[i];
  892|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  893|       |        post_SOCKS(data, conn, sockindex, connected);
  894|       |        connkeep(conn, "HTTP/3 default");
  895|       |        return CURLE_OK;
  896|       |      }
  897|       |      if(result) {
  898|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  899|       |        error = SOCKERRNO;
  900|       |      }
  901|       |    }
  902|       |    else
  903|       |#endif
  904|    285|    {
  905|       |#ifdef mpeix
  906|       |      /* Call this function once now, and ignore the results. We do this to
  907|       |         "clear" the error state on the socket so that we can later read it
  908|       |         reliably. This is reported necessary on the MPE/iX operating
  909|       |         system. */
  910|       |      (void)verifyconnect(conn->tempsock[i], NULL);
  911|       |#endif
  912|       |
  913|       |      /* check socket for connect */
  914|    285|      rc = SOCKET_WRITABLE(conn->tempsock[i], 0);
  915|    285|    }
  916|       |
  917|    285|    if(rc == 0) { /* no connection yet */
  918|      0|      if(Curl_timediff(now, conn->connecttime) >=
  919|      0|         conn->timeoutms_per_addr[i]) {
  920|      0|        infof(data, "After %" CURL_FORMAT_TIMEDIFF_T
  921|      0|              "ms connect time, move on!", conn->timeoutms_per_addr[i]);
  922|      0|        error = ETIMEDOUT;
  923|      0|      }
  924|       |
  925|       |      /* should we try another protocol family? */
  926|      0|      if(i == 0 && !conn->bits.parallel_connect &&
  927|      0|         (Curl_timediff(now, conn->connecttime) >=
  928|      0|          data->set.happy_eyeballs_timeout)) {
  929|      0|        conn->bits.parallel_connect = TRUE; /* starting now */
  930|      0|        trynextip(data, conn, sockindex, 1);
  931|      0|      }
  932|      0|    }
  933|    285|    else if(rc == CURL_CSELECT_OUT || conn->bits.tcp_fastopen) {
  934|    285|      if(verifyconnect(conn->tempsock[i], &error)) {
  935|       |        /* we are connected with TCP, awesome! */
  936|       |
  937|       |        /* use this socket from now on */
  938|    285|        conn->sock[sockindex] = conn->tempsock[i];
  939|    285|        conn->ip_addr = conn->tempaddr[i];
  940|    285|        conn->tempsock[i] = CURL_SOCKET_BAD;
  941|    285|#ifdef ENABLE_IPV6
  942|    285|        conn->bits.ipv6 = (conn->ip_addr->ai_family == AF_INET6)?TRUE:FALSE;
  943|    285|#endif
  944|       |
  945|       |        /* close the other socket, if open */
  946|    285|        if(conn->tempsock[other] != CURL_SOCKET_BAD) {
  947|      0|          Curl_closesocket(data, conn, conn->tempsock[other]);
  948|      0|          conn->tempsock[other] = CURL_SOCKET_BAD;
  949|      0|        }
  950|       |
  951|       |        /* see if we need to kick off any SOCKS proxy magic once we
  952|       |           connected */
  953|    285|        result = connect_SOCKS(data, sockindex, connected);
  954|    285|        if(result || !*connected)
  955|      0|          return result;
  956|       |
  957|    285|        post_SOCKS(data, conn, sockindex, connected);
  958|       |
  959|    285|        return CURLE_OK;
  960|    285|      }
  961|    285|    }
  962|      0|    else if(rc & CURL_CSELECT_ERR) {
  963|      0|      (void)verifyconnect(conn->tempsock[i], &error);
  964|      0|    }
  965|       |
  966|       |    /*
  967|       |     * The connection failed here, we should attempt to connect to the "next
  968|       |     * address" for the given host. But first remember the latest error.
  969|       |     */
  970|      0|    if(error) {
  971|      0|      data->state.os_errno = error;
  972|      0|      SET_SOCKERRNO(error);
  973|      0|      if(conn->tempaddr[i]) {
  974|      0|        CURLcode status;
  975|      0|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  976|      0|        char ipaddress[MAX_IPADR_LEN];
  977|      0|        char buffer[STRERROR_LEN];
  978|      0|        Curl_printable_address(conn->tempaddr[i], ipaddress,
  979|      0|                               sizeof(ipaddress));
  980|      0|        infof(data, "connect to %s port %u failed: %s",
  981|      0|              ipaddress, conn->port,
  982|      0|              Curl_strerror(error, buffer, sizeof(buffer)));
  983|      0|#endif
  984|       |
  985|      0|        allow = Curl_timeleft(data, &now, TRUE);
  986|      0|        conn->timeoutms_per_addr[i] = conn->tempaddr[i]->ai_next == NULL ?
  987|      0|          allow : allow / 2;
  988|      0|        ainext(conn, i, TRUE);
  989|      0|        status = trynextip(data, conn, sockindex, i);
  990|      0|        if((status != CURLE_COULDNT_CONNECT) ||
  991|      0|           conn->tempsock[other] == CURL_SOCKET_BAD)
  992|       |          /* the last attempt failed and no other sockets remain open */
  993|      0|          result = status;
  994|      0|      }
  995|      0|    }
  996|      0|  }
  997|       |
  998|       |  /*
  999|       |   * Now that we've checked whether we are connected, check whether we've
 1000|       |   * already timed out.
 1001|       |   *
 1002|       |   * First figure out how long time we have left to connect */
 1003|       |
 1004|      0|  allow = Curl_timeleft(data, &now, TRUE);
 1005|       |
 1006|      0|  if(allow < 0) {
 1007|       |    /* time-out, bail out, go home */
 1008|      0|    failf(data, "Connection timeout after %ld ms",
 1009|      0|          Curl_timediff(now, data->progress.t_startsingle));
 1010|      0|    return CURLE_OPERATION_TIMEDOUT;
 1011|      0|  }
 1012|       |
 1013|      0|  if(result &&
 1014|      0|     (conn->tempsock[0] == CURL_SOCKET_BAD) &&
 1015|      0|     (conn->tempsock[1] == CURL_SOCKET_BAD)) {
 1016|       |    /* no more addresses to try */
 1017|      0|    const char *hostname;
 1018|      0|    char buffer[STRERROR_LEN];
 1019|       |
 1020|       |    /* if the first address family runs out of addresses to try before the
 1021|       |       happy eyeball timeout, go ahead and try the next family now */
 1022|      0|    result = trynextip(data, conn, sockindex, 1);
 1023|      0|    if(!result)
 1024|      0|      return result;
 1025|       |
 1026|      0|#ifndef CURL_DISABLE_PROXY
 1027|      0|    if(conn->bits.socksproxy)
 1028|      0|      hostname = conn->socks_proxy.host.name;
 1029|      0|    else if(conn->bits.httpproxy)
 1030|      0|      hostname = conn->http_proxy.host.name;
 1031|      0|    else
 1032|      0|#endif
 1033|      0|      if(conn->bits.conn_to_host)
 1034|      0|        hostname = conn->conn_to_host.name;
 1035|      0|    else
 1036|      0|      hostname = conn->host.name;
 1037|       |
 1038|      0|    failf(data, "Failed to connect to %s port %u after "
 1039|      0|                "%" CURL_FORMAT_TIMEDIFF_T " ms: %s",
 1040|      0|        hostname, conn->port,
 1041|      0|        Curl_timediff(now, data->progress.t_startsingle),
 1042|      0|        Curl_strerror(error, buffer, sizeof(buffer)));
 1043|       |
 1044|      0|    Curl_quic_disconnect(data, conn, 0);
 1045|      0|    Curl_quic_disconnect(data, conn, 1);
 1046|       |
 1047|       |#ifdef WSAETIMEDOUT
 1048|       |    if(WSAETIMEDOUT == data->state.os_errno)
 1049|       |      result = CURLE_OPERATION_TIMEDOUT;
 1050|       |#elif defined(ETIMEDOUT)
 1051|      0|    if(ETIMEDOUT == data->state.os_errno)
 1052|      0|      result = CURLE_OPERATION_TIMEDOUT;
 1053|      0|#endif
 1054|      0|  }
 1055|      0|  else
 1056|      0|    result = CURLE_OK; /* still trying */
 1057|       |
 1058|      0|  return result;
 1059|      0|}
Curl_connecthost:
 1357|    285|{
 1358|    285|  CURLcode result = CURLE_COULDNT_CONNECT;
 1359|    285|  int i;
 1360|    285|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 1361|       |
 1362|    285|  if(timeout_ms < 0) {
 1363|       |    /* a precaution, no need to continue if time already is up */
 1364|      0|    failf(data, "Connection time-out");
 1365|      0|    return CURLE_OPERATION_TIMEDOUT;
 1366|      0|  }
 1367|       |
 1368|    285|  conn->num_addr = Curl_num_addresses(remotehost->addr);
 1369|    285|  conn->tempaddr[0] = conn->tempaddr[1] = remotehost->addr;
 1370|    285|  conn->tempsock[0] = conn->tempsock[1] = CURL_SOCKET_BAD;
 1371|       |
 1372|       |  /* Max time for the next connection attempt */
 1373|    285|  conn->timeoutms_per_addr[0] =
 1374|    285|    conn->tempaddr[0]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1375|    285|  conn->timeoutms_per_addr[1] =
 1376|    285|    conn->tempaddr[1]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1377|       |
 1378|    285|  if(conn->ip_version == CURL_IPRESOLVE_WHATEVER) {
 1379|       |    /* any IP version is allowed */
 1380|    285|    conn->tempfamily[0] = conn->tempaddr[0]?
 1381|    285|      conn->tempaddr[0]->ai_family:0;
 1382|    285|#ifdef ENABLE_IPV6
 1383|    285|    conn->tempfamily[1] = conn->tempfamily[0] == AF_INET6 ?
 1384|      0|      AF_INET : AF_INET6;
 1385|       |#else
 1386|       |    conn->tempfamily[1] = AF_UNSPEC;
 1387|       |#endif
 1388|    285|  }
 1389|      0|  else {
 1390|       |    /* only one IP version is allowed */
 1391|      0|    conn->tempfamily[0] = (conn->ip_version == CURL_IPRESOLVE_V4) ?
 1392|      0|      AF_INET :
 1393|      0|#ifdef ENABLE_IPV6
 1394|      0|      AF_INET6;
 1395|       |#else
 1396|       |      AF_UNSPEC;
 1397|       |#endif
 1398|      0|    conn->tempfamily[1] = AF_UNSPEC;
 1399|       |
 1400|      0|    ainext(conn, 0, FALSE); /* find first address of the right type */
 1401|      0|  }
 1402|       |
 1403|    285|  ainext(conn, 1, FALSE); /* assigns conn->tempaddr[1] accordingly */
 1404|       |
 1405|    285|  DEBUGF(infof(data, "family0 == %s, family1 == %s",
 1406|    285|               conn->tempfamily[0] == AF_INET ? "v4" : "v6",
 1407|    285|               conn->tempfamily[1] == AF_INET ? "v4" : "v6"));
 1408|       |
 1409|       |  /* get through the list in family order in case of quick failures */
 1410|    570|  for(i = 0; (i < 2) && result; i++) {
 1411|    285|    while(conn->tempaddr[i]) {
 1412|    285|      result = singleipconnect(data, conn, conn->tempaddr[i], i);
 1413|    285|      if(!result)
 1414|    285|        break;
 1415|      0|      ainext(conn, i, TRUE);
 1416|      0|    }
 1417|    285|  }
 1418|    285|  if(result)
 1419|      0|    return result;
 1420|       |
 1421|    285|  Curl_expire(data, data->set.happy_eyeballs_timeout,
 1422|    285|              EXPIRE_HAPPY_EYEBALLS);
 1423|       |
 1424|    285|  return CURLE_OK;
 1425|    285|}
Curl_closesocket:
 1518|    285|{
 1519|    285|  if(conn && conn->fclosesocket) {
 1520|      0|    if((sock == conn->sock[SECONDARYSOCKET]) && conn->bits.sock_accepted)
 1521|       |      /* if this socket matches the second socket, and that was created with
 1522|       |         accept, then we MUST NOT call the callback but clear the accepted
 1523|       |         status */
 1524|      0|      conn->bits.sock_accepted = FALSE;
 1525|      0|    else {
 1526|      0|      int rc;
 1527|      0|      Curl_multi_closed(data, sock);
 1528|      0|      Curl_set_in_callback(data, true);
 1529|      0|      rc = conn->fclosesocket(conn->closesocket_client, sock);
 1530|      0|      Curl_set_in_callback(data, false);
 1531|      0|      return rc;
 1532|      0|    }
 1533|      0|  }
 1534|       |
 1535|    285|  if(conn)
 1536|       |    /* tell the multi-socket code about this */
 1537|    285|    Curl_multi_closed(data, sock);
 1538|       |
 1539|    285|  sclose(sock);
 1540|       |
 1541|    285|  return 0;
 1542|    285|}
Curl_socket:
 1557|    285|{
 1558|    285|  struct connectdata *conn = data->conn;
 1559|    285|  struct Curl_sockaddr_ex dummy;
 1560|       |
 1561|    285|  if(!addr)
 1562|       |    /* if the caller doesn't want info back, use a local temp copy */
 1563|      0|    addr = &dummy;
 1564|       |
 1565|       |  /*
 1566|       |   * The Curl_sockaddr_ex structure is basically libcurl's external API
 1567|       |   * curl_sockaddr structure with enough space available to directly hold
 1568|       |   * any protocol-specific address structures. The variable declared here
 1569|       |   * will be used to pass / receive data to/from the fopensocket callback
 1570|       |   * if this has been set, before that, it is initialized from parameters.
 1571|       |   */
 1572|       |
 1573|    285|  addr->family = ai->ai_family;
 1574|    285|  addr->socktype = (conn->transport == TRNSPRT_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 1575|    285|  addr->protocol = conn->transport != TRNSPRT_TCP ? IPPROTO_UDP :
 1576|    285|    ai->ai_protocol;
 1577|    285|  addr->addrlen = ai->ai_addrlen;
 1578|       |
 1579|    285|  if(addr->addrlen > sizeof(struct Curl_sockaddr_storage))
 1580|      0|     addr->addrlen = sizeof(struct Curl_sockaddr_storage);
 1581|    285|  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
 1582|       |
 1583|    285|  if(data->set.fopensocket) {
 1584|       |   /*
 1585|       |    * If the opensocket callback is set, all the destination address
 1586|       |    * information is passed to the callback. Depending on this information the
 1587|       |    * callback may opt to abort the connection, this is indicated returning
 1588|       |    * CURL_SOCKET_BAD; otherwise it will return a not-connected socket. When
 1589|       |    * the callback returns a valid socket the destination address information
 1590|       |    * might have been changed and this 'new' address will actually be used
 1591|       |    * here to connect.
 1592|       |    */
 1593|    285|    Curl_set_in_callback(data, true);
 1594|    285|    *sockfd = data->set.fopensocket(data->set.opensocket_client,
 1595|    285|                                    CURLSOCKTYPE_IPCXN,
 1596|    285|                                    (struct curl_sockaddr *)addr);
 1597|    285|    Curl_set_in_callback(data, false);
 1598|    285|  }
 1599|      0|  else
 1600|       |    /* opensocket callback not set, so simply create the socket now */
 1601|      0|    *sockfd = socket(addr->family, addr->socktype, addr->protocol);
 1602|       |
 1603|    285|  if(*sockfd == CURL_SOCKET_BAD)
 1604|       |    /* no socket, no connection */
 1605|      0|    return CURLE_COULDNT_CONNECT;
 1606|       |
 1607|    285|  if(conn->transport == TRNSPRT_QUIC) {
 1608|       |    /* QUIC sockets need to be nonblocking */
 1609|      0|    (void)curlx_nonblock(*sockfd, TRUE);
 1610|      0|  }
 1611|       |
 1612|    285|#if defined(ENABLE_IPV6) && defined(HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID)
 1613|    285|  if(conn->scope_id && (addr->family == AF_INET6)) {
 1614|      0|    struct sockaddr_in6 * const sa6 = (void *)&addr->sa_addr;
 1615|      0|    sa6->sin6_scope_id = conn->scope_id;
 1616|      0|  }
 1617|    285|#endif
 1618|       |
 1619|    285|#if defined(__linux__) && defined(IP_RECVERR)
 1620|    285|  if(addr->socktype == SOCK_DGRAM) {
 1621|      0|    int one = 1;
 1622|      0|    switch(addr->family) {
 1623|      0|    case AF_INET:
 1624|      0|      (void)setsockopt(*sockfd, SOL_IP, IP_RECVERR, &one, sizeof(one));
 1625|      0|      break;
 1626|      0|    case AF_INET6:
 1627|      0|      (void)setsockopt(*sockfd, SOL_IPV6, IPV6_RECVERR, &one, sizeof(one));
 1628|      0|      break;
 1629|      0|    }
 1630|      0|  }
 1631|    285|#endif
 1632|       |
 1633|    285|  return CURLE_OK;
 1634|    285|}
Curl_conncontrol:
 1645|    955|{
 1646|       |  /* close if a connection, or a stream that isn't multiplexed. */
 1647|       |  /* This function will be called both before and after this connection is
 1648|       |     associated with a transfer. */
 1649|    955|  bool closeit;
 1650|    955|  DEBUGASSERT(conn);
 1651|    955|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1652|    955|  (void)reason; /* useful for debugging */
 1653|    955|#endif
 1654|    955|  closeit = (ctrl == CONNCTRL_CONNECTION) ||
 1655|    955|    ((ctrl == CONNCTRL_STREAM) && !(conn->handler->flags & PROTOPT_STREAM));
 1656|    955|  if((ctrl == CONNCTRL_STREAM) &&
 1657|    955|     (conn->handler->flags & PROTOPT_STREAM))
 1658|      0|    ;
 1659|    955|  else if((bit)closeit != conn->bits.close) {
 1660|    406|    conn->bits.close = closeit; /* the only place in the source code that
 1661|       |                                   should assign this bit */
 1662|    406|  }
 1663|    955|}
connect.c:connect_SOCKS:
  772|    285|{
  773|    285|  CURLcode result = CURLE_OK;
  774|    285|#ifndef CURL_DISABLE_PROXY
  775|    285|  CURLproxycode pxresult = CURLPX_OK;
  776|    285|  struct connectdata *conn = data->conn;
  777|    285|  if(conn->bits.socksproxy) {
  778|       |    /* for the secondary socket (FTP), use the "connect to host"
  779|       |     * but ignore the "connect to port" (use the secondary port)
  780|       |     */
  781|      0|    const char * const host =
  782|      0|      conn->bits.httpproxy ?
  783|      0|      conn->http_proxy.host.name :
  784|      0|      conn->bits.conn_to_host ?
  785|      0|      conn->conn_to_host.name :
  786|      0|      sockindex == SECONDARYSOCKET ?
  787|      0|      conn->secondaryhostname : conn->host.name;
  788|      0|    const int port =
  789|      0|      conn->bits.httpproxy ? (int)conn->http_proxy.port :
  790|      0|      sockindex == SECONDARYSOCKET ? conn->secondary_port :
  791|      0|      conn->bits.conn_to_port ? conn->conn_to_port :
  792|      0|      conn->remote_port;
  793|      0|    switch(conn->socks_proxy.proxytype) {
  794|      0|    case CURLPROXY_SOCKS5:
  795|      0|    case CURLPROXY_SOCKS5_HOSTNAME:
  796|      0|      pxresult = Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd,
  797|      0|                             host, port, sockindex, data, done);
  798|      0|      break;
  799|       |
  800|      0|    case CURLPROXY_SOCKS4:
  801|      0|    case CURLPROXY_SOCKS4A:
  802|      0|      pxresult = Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex,
  803|      0|                             data, done);
  804|      0|      break;
  805|       |
  806|      0|    default:
  807|      0|      failf(data, "unknown proxytype option given");
  808|      0|      result = CURLE_COULDNT_CONNECT;
  809|      0|    } /* switch proxytype */
  810|      0|    if(pxresult) {
  811|      0|      result = CURLE_PROXY;
  812|      0|      data->info.pxcode = pxresult;
  813|      0|    }
  814|      0|  }
  815|    285|  else
  816|       |#else
  817|       |    (void)data;
  818|       |    (void)sockindex;
  819|       |#endif /* CURL_DISABLE_PROXY */
  820|    285|    *done = TRUE; /* no SOCKS proxy, so consider us connected */
  821|       |
  822|    285|  return result;
  823|    285|}
connect.c:post_SOCKS:
  833|    285|{
  834|    285|  conn->bits.tcpconnect[sockindex] = TRUE;
  835|       |
  836|    285|  *connected = TRUE;
  837|    285|  if(sockindex == FIRSTSOCKET)
  838|    285|    Curl_pgrsTime(data, TIMER_CONNECT); /* connect done */
  839|    285|  Curl_updateconninfo(data, conn, conn->sock[sockindex]);
  840|    285|  Curl_verboseconnect(data, conn);
  841|    285|  data->info.numconnects++; /* to track the number of connections made */
  842|    285|}
connect.c:verifyconnect:
  494|    285|{
  495|    285|  bool rc = TRUE;
  496|    285|#ifdef SO_ERROR
  497|    285|  int err = 0;
  498|    285|  curl_socklen_t errSize = sizeof(err);
  499|       |
  500|       |#ifdef WIN32
  501|       |  /*
  502|       |   * In October 2003 we effectively nullified this function on Windows due to
  503|       |   * problems with it using all CPU in multi-threaded cases.
  504|       |   *
  505|       |   * In May 2004, we bring it back to offer more info back on connect failures.
  506|       |   * Gisle Vanem could reproduce the former problems with this function, but
  507|       |   * could avoid them by adding this SleepEx() call below:
  508|       |   *
  509|       |   *    "I don't have Rational Quantify, but the hint from his post was
  510|       |   *    ntdll::NtRemoveIoCompletion(). So I'd assume the SleepEx (or maybe
  511|       |   *    just Sleep(0) would be enough?) would release whatever
  512|       |   *    mutex/critical-section the ntdll call is waiting on.
  513|       |   *
  514|       |   *    Someone got to verify this on Win-NT 4.0, 2000."
  515|       |   */
  516|       |
  517|       |#ifdef _WIN32_WCE
  518|       |  Sleep(0);
  519|       |#else
  520|       |  SleepEx(0, FALSE);
  521|       |#endif
  522|       |
  523|       |#endif
  524|       |
  525|    285|  if(0 != getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void *)&err, &errSize))
  526|      0|    err = SOCKERRNO;
  527|       |#ifdef _WIN32_WCE
  528|       |  /* Old WinCE versions don't support SO_ERROR */
  529|       |  if(WSAENOPROTOOPT == err) {
  530|       |    SET_SOCKERRNO(0);
  531|       |    err = 0;
  532|       |  }
  533|       |#endif
  534|       |#if defined(EBADIOCTL) && defined(__minix)
  535|       |  /* Minix 3.1.x doesn't support getsockopt on UDP sockets */
  536|       |  if(EBADIOCTL == err) {
  537|       |    SET_SOCKERRNO(0);
  538|       |    err = 0;
  539|       |  }
  540|       |#endif
  541|    285|  if((0 == err) || (EISCONN == err))
  542|       |    /* we are connected, awesome! */
  543|    285|    rc = TRUE;
  544|      0|  else
  545|       |    /* This wasn't a successful connect */
  546|      0|    rc = FALSE;
  547|    285|  if(error)
  548|    285|    *error = err;
  549|       |#else
  550|       |  (void)sockfd;
  551|       |  if(error)
  552|       |    *error = SOCKERRNO;
  553|       |#endif
  554|    285|  return rc;
  555|    285|}
connect.c:ainext:
  562|    285|{
  563|    285|  struct Curl_addrinfo *ai = conn->tempaddr[tempindex];
  564|    285|  if(ai && next)
  565|      0|    ai = ai->ai_next;
  566|    570|  while(ai && (ai->ai_family != conn->tempfamily[tempindex]))
  567|    285|    ai = ai->ai_next;
  568|    285|  conn->tempaddr[tempindex] = ai;
  569|    285|  return ai;
  570|    285|}
connect.c:singleipconnect:
 1161|    285|{
 1162|    285|  struct Curl_sockaddr_ex addr;
 1163|    285|  int rc = -1;
 1164|    285|  int error = 0;
 1165|    285|  bool isconnected = FALSE;
 1166|    285|  curl_socket_t sockfd;
 1167|    285|  CURLcode result;
 1168|    285|  char ipaddress[MAX_IPADR_LEN];
 1169|    285|  int port;
 1170|    285|  bool is_tcp;
 1171|    285|#ifdef TCP_FASTOPEN_CONNECT
 1172|    285|  int optval = 1;
 1173|    285|#endif
 1174|    285|  char buffer[STRERROR_LEN];
 1175|    285|  curl_socket_t *sockp = &conn->tempsock[tempindex];
 1176|    285|  *sockp = CURL_SOCKET_BAD;
 1177|       |
 1178|    285|  result = Curl_socket(data, ai, &addr, &sockfd);
 1179|    285|  if(result)
 1180|      0|    return result;
 1181|       |
 1182|       |  /* store remote address and port used in this connection attempt */
 1183|    285|  if(!Curl_addr2string((struct sockaddr*)&addr.sa_addr, addr.addrlen,
 1184|    285|                       ipaddress, &port)) {
 1185|       |    /* malformed address or bug in inet_ntop, try next address */
 1186|      0|    failf(data, "sa_addr inet_ntop() failed with errno %d: %s",
 1187|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
 1188|      0|    Curl_closesocket(data, conn, sockfd);
 1189|      0|    return CURLE_OK;
 1190|      0|  }
 1191|    285|  infof(data, "  Trying %s:%d...", ipaddress, port);
 1192|       |
 1193|    285|#ifdef ENABLE_IPV6
 1194|    285|  is_tcp = (addr.family == AF_INET || addr.family == AF_INET6) &&
 1195|    285|    addr.socktype == SOCK_STREAM;
 1196|       |#else
 1197|       |  is_tcp = (addr.family == AF_INET) && addr.socktype == SOCK_STREAM;
 1198|       |#endif
 1199|    285|  if(is_tcp && data->set.tcp_nodelay)
 1200|    285|    tcpnodelay(data, sockfd);
 1201|       |
 1202|    285|  nosigpipe(data, sockfd);
 1203|       |
 1204|    285|  Curl_sndbufset(sockfd);
 1205|       |
 1206|    285|  if(is_tcp && data->set.tcp_keepalive)
 1207|      0|    tcpkeepalive(data, sockfd);
 1208|       |
 1209|    285|  if(data->set.fsockopt) {
 1210|       |    /* activate callback for setting socket options */
 1211|    285|    Curl_set_in_callback(data, true);
 1212|    285|    error = data->set.fsockopt(data->set.sockopt_client,
 1213|    285|                               sockfd,
 1214|    285|                               CURLSOCKTYPE_IPCXN);
 1215|    285|    Curl_set_in_callback(data, false);
 1216|       |
 1217|    285|    if(error == CURL_SOCKOPT_ALREADY_CONNECTED)
 1218|    285|      isconnected = TRUE;
 1219|      0|    else if(error) {
 1220|      0|      Curl_closesocket(data, conn, sockfd); /* close the socket and bail out */
 1221|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1222|      0|    }
 1223|    285|  }
 1224|       |
 1225|       |  /* possibly bind the local end to an IP, interface or port */
 1226|    285|  if(addr.family == AF_INET
 1227|    285|#ifdef ENABLE_IPV6
 1228|    285|     || addr.family == AF_INET6
 1229|    285|#endif
 1230|    285|    ) {
 1231|    285|    result = bindlocal(data, sockfd, addr.family,
 1232|    285|                       Curl_ipv6_scope((struct sockaddr*)&addr.sa_addr));
 1233|    285|    if(result) {
 1234|      0|      Curl_closesocket(data, conn, sockfd); /* close socket and bail out */
 1235|      0|      if(result == CURLE_UNSUPPORTED_PROTOCOL) {
 1236|       |        /* The address family is not supported on this interface.
 1237|       |           We can continue trying addresses */
 1238|      0|        return CURLE_COULDNT_CONNECT;
 1239|      0|      }
 1240|      0|      return result;
 1241|      0|    }
 1242|    285|  }
 1243|       |
 1244|       |  /* set socket non-blocking */
 1245|    285|  (void)curlx_nonblock(sockfd, TRUE);
 1246|       |
 1247|    285|  conn->connecttime = Curl_now();
 1248|    285|  if(conn->num_addr > 1) {
 1249|      0|    Curl_expire(data, conn->timeoutms_per_addr[0], EXPIRE_DNS_PER_NAME);
 1250|      0|    Curl_expire(data, conn->timeoutms_per_addr[1], EXPIRE_DNS_PER_NAME2);
 1251|      0|  }
 1252|       |
 1253|       |  /* Connect TCP and QUIC sockets */
 1254|    285|  if(!isconnected && (conn->transport != TRNSPRT_UDP)) {
 1255|      0|    if(conn->bits.tcp_fastopen) {
 1256|       |#if defined(CONNECT_DATA_IDEMPOTENT) /* Darwin */
 1257|       |#  if defined(HAVE_BUILTIN_AVAILABLE)
 1258|       |      /* while connectx function is available since macOS 10.11 / iOS 9,
 1259|       |         it did not have the interface declared correctly until
 1260|       |         Xcode 9 / macOS SDK 10.13 */
 1261|       |      if(__builtin_available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *)) {
 1262|       |        sa_endpoints_t endpoints;
 1263|       |        endpoints.sae_srcif = 0;
 1264|       |        endpoints.sae_srcaddr = NULL;
 1265|       |        endpoints.sae_srcaddrlen = 0;
 1266|       |        endpoints.sae_dstaddr = &addr.sa_addr;
 1267|       |        endpoints.sae_dstaddrlen = addr.addrlen;
 1268|       |
 1269|       |        rc = connectx(sockfd, &endpoints, SAE_ASSOCID_ANY,
 1270|       |                      CONNECT_RESUME_ON_READ_WRITE | CONNECT_DATA_IDEMPOTENT,
 1271|       |                      NULL, 0, NULL, NULL);
 1272|       |      }
 1273|       |      else {
 1274|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1275|       |      }
 1276|       |#  else
 1277|       |      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1278|       |#  endif /* HAVE_BUILTIN_AVAILABLE */
 1279|       |#elif defined(TCP_FASTOPEN_CONNECT) /* Linux >= 4.11 */
 1280|      0|      if(setsockopt(sockfd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT,
 1281|      0|                    (void *)&optval, sizeof(optval)) < 0)
 1282|      0|        infof(data, "Failed to enable TCP Fast Open on fd %d", sockfd);
 1283|       |
 1284|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1285|       |#elif defined(MSG_FASTOPEN) /* old Linux */
 1286|       |      if(conn->given->flags & PROTOPT_SSL)
 1287|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1288|       |      else
 1289|       |        rc = 0; /* Do nothing */
 1290|       |#endif
 1291|      0|    }
 1292|      0|    else {
 1293|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1294|      0|    }
 1295|       |
 1296|      0|    if(-1 == rc)
 1297|      0|      error = SOCKERRNO;
 1298|       |#ifdef ENABLE_QUIC
 1299|       |    else if(conn->transport == TRNSPRT_QUIC) {
 1300|       |      /* pass in 'sockfd' separately since it hasn't been put into the
 1301|       |         tempsock array at this point */
 1302|       |      result = Curl_quic_connect(data, conn, sockfd, tempindex,
 1303|       |                                 &addr.sa_addr, addr.addrlen);
 1304|       |      if(result)
 1305|       |        error = SOCKERRNO;
 1306|       |    }
 1307|       |#endif
 1308|      0|  }
 1309|    285|  else {
 1310|    285|    *sockp = sockfd;
 1311|    285|    return CURLE_OK;
 1312|    285|  }
 1313|       |
 1314|      0|  if(-1 == rc) {
 1315|      0|    switch(error) {
 1316|      0|    case EINPROGRESS:
 1317|      0|    case EWOULDBLOCK:
 1318|      0|#if defined(EAGAIN)
 1319|       |#if (EAGAIN) != (EWOULDBLOCK)
 1320|       |      /* On some platforms EAGAIN and EWOULDBLOCK are the
 1321|       |       * same value, and on others they are different, hence
 1322|       |       * the odd #if
 1323|       |       */
 1324|       |    case EAGAIN:
 1325|       |#endif
 1326|      0|#endif
 1327|      0|      result = CURLE_OK;
 1328|      0|      break;
 1329|       |
 1330|      0|    default:
 1331|       |      /* unknown error, fallthrough and try another address! */
 1332|      0|      infof(data, "Immediate connect fail for %s: %s",
 1333|      0|            ipaddress, Curl_strerror(error, buffer, sizeof(buffer)));
 1334|      0|      data->state.os_errno = error;
 1335|       |
 1336|       |      /* connect failed */
 1337|      0|      Curl_closesocket(data, conn, sockfd);
 1338|      0|      result = CURLE_COULDNT_CONNECT;
 1339|      0|    }
 1340|      0|  }
 1341|       |
 1342|      0|  if(!result)
 1343|      0|    *sockp = sockfd;
 1344|       |
 1345|      0|  return result;
 1346|      0|}
connect.c:tcpnodelay:
 1062|    285|{
 1063|    285|#if defined(TCP_NODELAY)
 1064|    285|  curl_socklen_t onoff = (curl_socklen_t) 1;
 1065|    285|  int level = IPPROTO_TCP;
 1066|    285|#if !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1067|    285|  char buffer[STRERROR_LEN];
 1068|       |#else
 1069|       |  (void) data;
 1070|       |#endif
 1071|       |
 1072|    285|  if(setsockopt(sockfd, level, TCP_NODELAY, (void *)&onoff,
 1073|    285|                sizeof(onoff)) < 0)
 1074|    285|    infof(data, "Could not set TCP_NODELAY: %s",
 1075|    285|          Curl_strerror(SOCKERRNO, buffer, sizeof(buffer)));
 1076|       |#else
 1077|       |  (void)data;
 1078|       |  (void)sockfd;
 1079|       |#endif
 1080|    285|}
connect.c:bindlocal:
  240|    285|{
  241|    285|  struct connectdata *conn = data->conn;
  242|    285|  struct Curl_sockaddr_storage sa;
  243|    285|  struct sockaddr *sock = (struct sockaddr *)&sa;  /* bind to this address */
  244|    285|  curl_socklen_t sizeof_sa = 0; /* size of the data sock points to */
  245|    285|  struct sockaddr_in *si4 = (struct sockaddr_in *)&sa;
  246|    285|#ifdef ENABLE_IPV6
  247|    285|  struct sockaddr_in6 *si6 = (struct sockaddr_in6 *)&sa;
  248|    285|#endif
  249|       |
  250|    285|  struct Curl_dns_entry *h = NULL;
  251|    285|  unsigned short port = data->set.localport; /* use this port number, 0 for
  252|       |                                                "random" */
  253|       |  /* how many port numbers to try to bind to, increasing one at a time */
  254|    285|  int portnum = data->set.localportrange;
  255|    285|  const char *dev = data->set.str[STRING_DEVICE];
  256|    285|  int error;
  257|    285|#ifdef IP_BIND_ADDRESS_NO_PORT
  258|    285|  int on = 1;
  259|    285|#endif
  260|       |
  261|       |  /*************************************************************
  262|       |   * Select device to bind socket to
  263|       |   *************************************************************/
  264|    285|  if(!dev && !port)
  265|       |    /* no local kind of binding was requested */
  266|    285|    return CURLE_OK;
  267|       |
  268|      0|  memset(&sa, 0, sizeof(struct Curl_sockaddr_storage));
  269|       |
  270|      0|  if(dev && (strlen(dev)<255) ) {
  271|      0|    char myhost[256] = "";
  272|      0|    int done = 0; /* -1 for error, 1 for address found */
  273|      0|    bool is_interface = FALSE;
  274|      0|    bool is_host = FALSE;
  275|      0|    static const char *if_prefix = "if!";
  276|      0|    static const char *host_prefix = "host!";
  277|       |
  278|      0|    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
  279|      0|      dev += strlen(if_prefix);
  280|      0|      is_interface = TRUE;
  281|      0|    }
  282|      0|    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
  283|      0|      dev += strlen(host_prefix);
  284|      0|      is_host = TRUE;
  285|      0|    }
  286|       |
  287|       |    /* interface */
  288|      0|    if(!is_host) {
  289|      0|#ifdef SO_BINDTODEVICE
  290|       |      /* I am not sure any other OSs than Linux that provide this feature,
  291|       |       * and at the least I cannot test. --Ben
  292|       |       *
  293|       |       * This feature allows one to tightly bind the local socket to a
  294|       |       * particular interface.  This will force even requests to other
  295|       |       * local interfaces to go out the external interface.
  296|       |       *
  297|       |       *
  298|       |       * Only bind to the interface when specified as interface, not just
  299|       |       * as a hostname or ip address.
  300|       |       *
  301|       |       * interface might be a VRF, eg: vrf-blue, which means it cannot be
  302|       |       * converted to an IP address and would fail Curl_if2ip. Simply try
  303|       |       * to use it straight away.
  304|       |       */
  305|      0|      if(setsockopt(sockfd, SOL_SOCKET, SO_BINDTODEVICE,
  306|      0|                    dev, (curl_socklen_t)strlen(dev) + 1) == 0) {
  307|       |        /* This is typically "errno 1, error: Operation not permitted" if
  308|       |         * you're not running as root or another suitable privileged
  309|       |         * user.
  310|       |         * If it succeeds it means the parameter was a valid interface and
  311|       |         * not an IP address. Return immediately.
  312|       |         */
  313|      0|        return CURLE_OK;
  314|      0|      }
  315|      0|#endif
  316|       |
  317|      0|      switch(Curl_if2ip(af, scope, conn->scope_id, dev,
  318|      0|                        myhost, sizeof(myhost))) {
  319|      0|        case IF2IP_NOT_FOUND:
  320|      0|          if(is_interface) {
  321|       |            /* Do not fall back to treating it as a host name */
  322|      0|            failf(data, "Couldn't bind to interface '%s'", dev);
  323|      0|            return CURLE_INTERFACE_FAILED;
  324|      0|          }
  325|      0|          break;
  326|      0|        case IF2IP_AF_NOT_SUPPORTED:
  327|       |          /* Signal the caller to try another address family if available */
  328|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  329|      0|        case IF2IP_FOUND:
  330|      0|          is_interface = TRUE;
  331|       |          /*
  332|       |           * We now have the numerical IP address in the 'myhost' buffer
  333|       |           */
  334|      0|          infof(data, "Local Interface %s is ip %s using address family %i",
  335|      0|                dev, myhost, af);
  336|      0|          done = 1;
  337|      0|          break;
  338|      0|      }
  339|      0|    }
  340|      0|    if(!is_interface) {
  341|       |      /*
  342|       |       * This was not an interface, resolve the name as a host name
  343|       |       * or IP number
  344|       |       *
  345|       |       * Temporarily force name resolution to use only the address type
  346|       |       * of the connection. The resolve functions should really be changed
  347|       |       * to take a type parameter instead.
  348|       |       */
  349|      0|      unsigned char ipver = conn->ip_version;
  350|      0|      int rc;
  351|       |
  352|      0|      if(af == AF_INET)
  353|      0|        conn->ip_version = CURL_IPRESOLVE_V4;
  354|      0|#ifdef ENABLE_IPV6
  355|      0|      else if(af == AF_INET6)
  356|      0|        conn->ip_version = CURL_IPRESOLVE_V6;
  357|      0|#endif
  358|       |
  359|      0|      rc = Curl_resolv(data, dev, 0, FALSE, &h);
  360|      0|      if(rc == CURLRESOLV_PENDING)
  361|      0|        (void)Curl_resolver_wait_resolv(data, &h);
  362|      0|      conn->ip_version = ipver;
  363|       |
  364|      0|      if(h) {
  365|       |        /* convert the resolved address, sizeof myhost >= INET_ADDRSTRLEN */
  366|      0|        Curl_printable_address(h->addr, myhost, sizeof(myhost));
  367|      0|        infof(data, "Name '%s' family %i resolved to '%s' family %i",
  368|      0|              dev, af, myhost, h->addr->ai_family);
  369|      0|        Curl_resolv_unlock(data, h);
  370|      0|        if(af != h->addr->ai_family) {
  371|       |          /* bad IP version combo, signal the caller to try another address
  372|       |             family if available */
  373|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  374|      0|        }
  375|      0|        done = 1;
  376|      0|      }
  377|      0|      else {
  378|       |        /*
  379|       |         * provided dev was no interface (or interfaces are not supported
  380|       |         * e.g. solaris) no ip address and no domain we fail here
  381|       |         */
  382|      0|        done = -1;
  383|      0|      }
  384|      0|    }
  385|       |
  386|      0|    if(done > 0) {
  387|      0|#ifdef ENABLE_IPV6
  388|       |      /* IPv6 address */
  389|      0|      if(af == AF_INET6) {
  390|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  391|      0|        char *scope_ptr = strchr(myhost, '%');
  392|      0|        if(scope_ptr)
  393|      0|          *(scope_ptr++) = 0;
  394|      0|#endif
  395|      0|        if(Curl_inet_pton(AF_INET6, myhost, &si6->sin6_addr) > 0) {
  396|      0|          si6->sin6_family = AF_INET6;
  397|      0|          si6->sin6_port = htons(port);
  398|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  399|      0|          if(scope_ptr)
  400|       |            /* The "myhost" string either comes from Curl_if2ip or from
  401|       |               Curl_printable_address. The latter returns only numeric scope
  402|       |               IDs and the former returns none at all.  So the scope ID, if
  403|       |               present, is known to be numeric */
  404|      0|            si6->sin6_scope_id = atoi(scope_ptr);
  405|      0|#endif
  406|      0|        }
  407|      0|        sizeof_sa = sizeof(struct sockaddr_in6);
  408|      0|      }
  409|      0|      else
  410|      0|#endif
  411|       |      /* IPv4 address */
  412|      0|      if((af == AF_INET) &&
  413|      0|         (Curl_inet_pton(AF_INET, myhost, &si4->sin_addr) > 0)) {
  414|      0|        si4->sin_family = AF_INET;
  415|      0|        si4->sin_port = htons(port);
  416|      0|        sizeof_sa = sizeof(struct sockaddr_in);
  417|      0|      }
  418|      0|    }
  419|       |
  420|      0|    if(done < 1) {
  421|       |      /* errorbuf is set false so failf will overwrite any message already in
  422|       |         the error buffer, so the user receives this error message instead of a
  423|       |         generic resolve error. */
  424|      0|      data->state.errorbuf = FALSE;
  425|      0|      failf(data, "Couldn't bind to '%s'", dev);
  426|      0|      return CURLE_INTERFACE_FAILED;
  427|      0|    }
  428|      0|  }
  429|      0|  else {
  430|       |    /* no device was given, prepare sa to match af's needs */
  431|      0|#ifdef ENABLE_IPV6
  432|      0|    if(af == AF_INET6) {
  433|      0|      si6->sin6_family = AF_INET6;
  434|      0|      si6->sin6_port = htons(port);
  435|      0|      sizeof_sa = sizeof(struct sockaddr_in6);
  436|      0|    }
  437|      0|    else
  438|      0|#endif
  439|      0|    if(af == AF_INET) {
  440|      0|      si4->sin_family = AF_INET;
  441|      0|      si4->sin_port = htons(port);
  442|      0|      sizeof_sa = sizeof(struct sockaddr_in);
  443|      0|    }
  444|      0|  }
  445|      0|#ifdef IP_BIND_ADDRESS_NO_PORT
  446|      0|  (void)setsockopt(sockfd, SOL_IP, IP_BIND_ADDRESS_NO_PORT, &on, sizeof(on));
  447|      0|#endif
  448|      0|  for(;;) {
  449|      0|    if(bind(sockfd, sock, sizeof_sa) >= 0) {
  450|       |      /* we succeeded to bind */
  451|      0|      struct Curl_sockaddr_storage add;
  452|      0|      curl_socklen_t size = sizeof(add);
  453|      0|      memset(&add, 0, sizeof(struct Curl_sockaddr_storage));
  454|      0|      if(getsockname(sockfd, (struct sockaddr *) &add, &size) < 0) {
  455|      0|        char buffer[STRERROR_LEN];
  456|      0|        data->state.os_errno = error = SOCKERRNO;
  457|      0|        failf(data, "getsockname() failed with errno %d: %s",
  458|      0|              error, Curl_strerror(error, buffer, sizeof(buffer)));
  459|      0|        return CURLE_INTERFACE_FAILED;
  460|      0|      }
  461|      0|      infof(data, "Local port: %hu", port);
  462|      0|      conn->bits.bound = TRUE;
  463|      0|      return CURLE_OK;
  464|      0|    }
  465|       |
  466|      0|    if(--portnum > 0) {
  467|      0|      infof(data, "Bind to local port %hu failed, trying next", port);
  468|      0|      port++; /* try next port */
  469|       |      /* We re-use/clobber the port variable here below */
  470|      0|      if(sock->sa_family == AF_INET)
  471|      0|        si4->sin_port = ntohs(port);
  472|      0|#ifdef ENABLE_IPV6
  473|      0|      else
  474|      0|        si6->sin6_port = ntohs(port);
  475|      0|#endif
  476|      0|    }
  477|      0|    else
  478|      0|      break;
  479|      0|  }
  480|      0|  {
  481|      0|    char buffer[STRERROR_LEN];
  482|      0|    data->state.os_errno = error = SOCKERRNO;
  483|      0|    failf(data, "bind failed with errno %d: %s",
  484|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  485|      0|  }
  486|       |
  487|      0|  return CURLE_INTERFACE_FAILED;
  488|      0|}

Curl_all_content_encodings:
  853|      9|{
  854|      9|  size_t len = 0;
  855|      9|  const struct content_encoding * const *cep;
  856|      9|  const struct content_encoding *ce;
  857|      9|  char *ace;
  858|       |
  859|     36|  for(cep = encodings; *cep; cep++) {
  860|     27|    ce = *cep;
  861|     27|    if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT))
  862|     18|      len += strlen(ce->name) + 2;
  863|     27|  }
  864|       |
  865|      9|  if(!len)
  866|      0|    return strdup(CONTENT_ENCODING_DEFAULT);
  867|       |
  868|      9|  ace = malloc(len);
  869|      9|  if(ace) {
  870|      9|    char *p = ace;
  871|     36|    for(cep = encodings; *cep; cep++) {
  872|     27|      ce = *cep;
  873|     27|      if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT)) {
  874|     18|        strcpy(p, ce->name);
  875|     18|        p += strlen(p);
  876|     18|        *p++ = ',';
  877|     18|        *p++ = ' ';
  878|     18|      }
  879|     27|    }
  880|      9|    p[-2] = '\0';
  881|      9|  }
  882|       |
  883|      9|  return ace;
  884|      9|}

Curl_cookie_init:
 1161|    472|{
 1162|    472|  struct CookieInfo *c;
 1163|    472|  FILE *fp = NULL;
 1164|    472|  bool fromfile = TRUE;
 1165|    472|  char *line = NULL;
 1166|       |
 1167|    472|  if(NULL == inc) {
 1168|       |    /* we didn't get a struct, create one */
 1169|    472|    c = calloc(1, sizeof(struct CookieInfo));
 1170|    472|    if(!c)
 1171|      0|      return NULL; /* failed to get memory */
 1172|    472|    c->filename = strdup(file?file:"none"); /* copy the name just in case */
 1173|    472|    if(!c->filename)
 1174|      0|      goto fail; /* failed to get memory */
 1175|       |    /*
 1176|       |     * Initialize the next_expiration time to signal that we don't have enough
 1177|       |     * information yet.
 1178|       |     */
 1179|    472|    c->next_expiration = CURL_OFF_T_MAX;
 1180|    472|  }
 1181|      0|  else {
 1182|       |    /* we got an already existing one, use that */
 1183|      0|    c = inc;
 1184|      0|  }
 1185|    472|  c->running = FALSE; /* this is not running, this is init */
 1186|       |
 1187|    472|  if(file && !strcmp(file, "-")) {
 1188|      0|    fp = stdin;
 1189|      0|    fromfile = FALSE;
 1190|      0|  }
 1191|    472|  else if(file && !*file) {
 1192|       |    /* points to a "" string */
 1193|      0|    fp = NULL;
 1194|      0|  }
 1195|    472|  else
 1196|    472|    fp = file?fopen(file, FOPEN_READTEXT):NULL;
 1197|       |
 1198|    472|  c->newsession = newsession; /* new session? */
 1199|       |
 1200|    472|  if(fp) {
 1201|      0|    char *lineptr;
 1202|      0|    bool headerline;
 1203|       |
 1204|      0|    line = malloc(MAX_COOKIE_LINE);
 1205|      0|    if(!line)
 1206|      0|      goto fail;
 1207|      0|    while(Curl_get_line(line, MAX_COOKIE_LINE, fp)) {
 1208|      0|      if(checkprefix("Set-Cookie:", line)) {
 1209|       |        /* This is a cookie line, get it! */
 1210|      0|        lineptr = &line[11];
 1211|      0|        headerline = TRUE;
 1212|      0|      }
 1213|      0|      else {
 1214|      0|        lineptr = line;
 1215|      0|        headerline = FALSE;
 1216|      0|      }
 1217|      0|      while(*lineptr && ISBLANK(*lineptr))
 1218|      0|        lineptr++;
 1219|       |
 1220|      0|      Curl_cookie_add(data, c, headerline, TRUE, lineptr, NULL, NULL, TRUE);
 1221|      0|    }
 1222|      0|    free(line); /* free the line buffer */
 1223|       |
 1224|       |    /*
 1225|       |     * Remove expired cookies from the hash. We must make sure to run this
 1226|       |     * after reading the file, and not on every cookie.
 1227|       |     */
 1228|      0|    remove_expired(c);
 1229|       |
 1230|      0|    if(fromfile)
 1231|      0|      fclose(fp);
 1232|      0|  }
 1233|       |
 1234|    472|  c->running = TRUE;          /* now, we're running */
 1235|    472|  if(data)
 1236|    472|    data->state.cookie_engine = TRUE;
 1237|       |
 1238|    472|  return c;
 1239|       |
 1240|      0|fail:
 1241|      0|  free(line);
 1242|       |  /*
 1243|       |   * Only clean up if we allocated it here, as the original could still be in
 1244|       |   * use by a share handle.
 1245|       |   */
 1246|      0|  if(!inc)
 1247|      0|    Curl_cookie_cleanup(c);
 1248|      0|  if(fromfile && fp)
 1249|      0|    fclose(fp);
 1250|      0|  return NULL; /* out of memory */
 1251|    472|}
Curl_cookie_freelist:
 1476|   120k|{
 1477|   120k|  struct Cookie *next;
 1478|   120k|  while(co) {
 1479|      0|    next = co->next;
 1480|      0|    freecookie(co);
 1481|      0|    co = next;
 1482|      0|  }
 1483|   120k|}
Curl_cookie_cleanup:
 1532|  1.04k|{
 1533|  1.04k|  if(c) {
 1534|    472|    unsigned int i;
 1535|    472|    free(c->filename);
 1536|   121k|    for(i = 0; i < COOKIE_HASH_SIZE; i++)
 1537|   120k|      Curl_cookie_freelist(c->cookies[i]);
 1538|    472|    free(c); /* free the base struct as well */
 1539|    472|  }
 1540|  1.04k|}
Curl_flush_cookies:
 1730|  1.04k|{
 1731|  1.04k|  CURLcode res;
 1732|       |
 1733|  1.04k|  if(data->set.str[STRING_COOKIEJAR]) {
 1734|    472|    if(data->state.cookielist) {
 1735|       |      /* If there is a list of cookie files to read, do it first so that
 1736|       |         we have all the told files read before we write the new jar.
 1737|       |         Curl_cookie_loadfiles() LOCKS and UNLOCKS the share itself! */
 1738|      0|      Curl_cookie_loadfiles(data);
 1739|      0|    }
 1740|       |
 1741|    472|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1742|       |
 1743|       |    /* if we have a destination file for all the cookies to get dumped to */
 1744|    472|    res = cookie_output(data, data->cookies, data->set.str[STRING_COOKIEJAR]);
 1745|    472|    if(res)
 1746|      0|      infof(data, "WARNING: failed to save cookies in %s: %s",
 1747|      0|            data->set.str[STRING_COOKIEJAR], curl_easy_strerror(res));
 1748|    472|  }
 1749|    574|  else {
 1750|    574|    if(cleanup && data->state.cookielist) {
 1751|       |      /* since nothing is written, we can just free the list of cookie file
 1752|       |         names */
 1753|      0|      curl_slist_free_all(data->state.cookielist); /* clean up list */
 1754|      0|      data->state.cookielist = NULL;
 1755|      0|    }
 1756|    574|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1757|    574|  }
 1758|       |
 1759|  1.04k|  if(cleanup && (!data->share || (data->cookies != data->share->cookies))) {
 1760|  1.04k|    Curl_cookie_cleanup(data->cookies);
 1761|  1.04k|    data->cookies = NULL;
 1762|  1.04k|  }
 1763|  1.04k|  Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 1764|  1.04k|}
cookie.c:remove_expired:
  379|    472|{
  380|    472|  struct Cookie *co, *nx;
  381|    472|  curl_off_t now = (curl_off_t)time(NULL);
  382|    472|  unsigned int i;
  383|       |
  384|       |  /*
  385|       |   * If the earliest expiration timestamp in the jar is in the future we can
  386|       |   * skip scanning the whole jar and instead exit early as there won't be any
  387|       |   * cookies to evict.  If we need to evict however, reset the next_expiration
  388|       |   * counter in order to track the next one. In case the recorded first
  389|       |   * expiration is the max offset, then perform the safe fallback of checking
  390|       |   * all cookies.
  391|       |   */
  392|    472|  if(now < cookies->next_expiration &&
  393|    472|      cookies->next_expiration != CURL_OFF_T_MAX)
  394|      0|    return;
  395|    472|  else
  396|    472|    cookies->next_expiration = CURL_OFF_T_MAX;
  397|       |
  398|   121k|  for(i = 0; i < COOKIE_HASH_SIZE; i++) {
  399|   120k|    struct Cookie *pv = NULL;
  400|   120k|    co = cookies->cookies[i];
  401|   120k|    while(co) {
  402|      0|      nx = co->next;
  403|      0|      if(co->expires && co->expires < now) {
  404|      0|        if(!pv) {
  405|      0|          cookies->cookies[i] = co->next;
  406|      0|        }
  407|      0|        else {
  408|      0|          pv->next = co->next;
  409|      0|        }
  410|      0|        cookies->numcookies--;
  411|      0|        freecookie(co);
  412|      0|      }
  413|      0|      else {
  414|       |        /*
  415|       |         * If this cookie has an expiration timestamp earlier than what we've
  416|       |         * seen so far then record it for the next round of expirations.
  417|       |         */
  418|      0|        if(co->expires && co->expires < cookies->next_expiration)
  419|      0|          cookies->next_expiration = co->expires;
  420|      0|        pv = co;
  421|      0|      }
  422|      0|      co = nx;
  423|      0|    }
  424|   120k|  }
  425|    472|}
cookie.c:cookie_output:
 1585|    472|{
 1586|    472|  struct Cookie *co;
 1587|    472|  FILE *out = NULL;
 1588|    472|  bool use_stdout = FALSE;
 1589|    472|  char *tempstore = NULL;
 1590|    472|  CURLcode error = CURLE_OK;
 1591|       |
 1592|    472|  if(!c)
 1593|       |    /* no cookie engine alive */
 1594|      0|    return CURLE_OK;
 1595|       |
 1596|       |  /* at first, remove expired cookies */
 1597|    472|  remove_expired(c);
 1598|       |
 1599|    472|  if(!strcmp("-", filename)) {
 1600|       |    /* use stdout */
 1601|      0|    out = stdout;
 1602|      0|    use_stdout = TRUE;
 1603|      0|  }
 1604|    472|  else {
 1605|    472|    unsigned char randsuffix[9];
 1606|       |
 1607|    472|    if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
 1608|      0|      return 2;
 1609|       |
 1610|    472|    tempstore = aprintf("%s.%s.tmp", filename, randsuffix);
 1611|    472|    if(!tempstore)
 1612|      0|      return CURLE_OUT_OF_MEMORY;
 1613|       |
 1614|    472|    out = fopen(tempstore, FOPEN_WRITETEXT);
 1615|    472|    if(!out) {
 1616|      0|      error = CURLE_WRITE_ERROR;
 1617|      0|      goto error;
 1618|      0|    }
 1619|    472|  }
 1620|       |
 1621|    472|  fputs("# Netscape HTTP Cookie File\n"
 1622|    472|        "# https://curl.se/docs/http-cookies.html\n"
 1623|    472|        "# This file was generated by libcurl! Edit at your own risk.\n\n",
 1624|    472|        out);
 1625|       |
 1626|    472|  if(c->numcookies) {
 1627|      0|    unsigned int i;
 1628|      0|    size_t nvalid = 0;
 1629|      0|    struct Cookie **array;
 1630|       |
 1631|      0|    array = calloc(1, sizeof(struct Cookie *) * c->numcookies);
 1632|      0|    if(!array) {
 1633|      0|      error = CURLE_OUT_OF_MEMORY;
 1634|      0|      goto error;
 1635|      0|    }
 1636|       |
 1637|       |    /* only sort the cookies with a domain property */
 1638|      0|    for(i = 0; i < COOKIE_HASH_SIZE; i++) {
 1639|      0|      for(co = c->cookies[i]; co; co = co->next) {
 1640|      0|        if(!co->domain)
 1641|      0|          continue;
 1642|      0|        array[nvalid++] = co;
 1643|      0|      }
 1644|      0|    }
 1645|       |
 1646|      0|    qsort(array, nvalid, sizeof(struct Cookie *), cookie_sort_ct);
 1647|       |
 1648|      0|    for(i = 0; i < nvalid; i++) {
 1649|      0|      char *format_ptr = get_netscape_format(array[i]);
 1650|      0|      if(!format_ptr) {
 1651|      0|        free(array);
 1652|      0|        error = CURLE_OUT_OF_MEMORY;
 1653|      0|        goto error;
 1654|      0|      }
 1655|      0|      fprintf(out, "%s\n", format_ptr);
 1656|      0|      free(format_ptr);
 1657|      0|    }
 1658|       |
 1659|      0|    free(array);
 1660|      0|  }
 1661|       |
 1662|    472|  if(!use_stdout) {
 1663|    472|    fclose(out);
 1664|    472|    out = NULL;
 1665|    472|    if(Curl_rename(tempstore, filename)) {
 1666|      0|      unlink(tempstore);
 1667|      0|      error = CURLE_WRITE_ERROR;
 1668|      0|      goto error;
 1669|      0|    }
 1670|    472|  }
 1671|       |
 1672|       |  /*
 1673|       |   * If we reach here we have successfully written a cookie file so theree is
 1674|       |   * no need to inspect the error, any error case should have jumped into the
 1675|       |   * error block below.
 1676|       |   */
 1677|    472|  free(tempstore);
 1678|    472|  return CURLE_OK;
 1679|       |
 1680|      0|error:
 1681|      0|  if(out && !use_stdout)
 1682|      0|    fclose(out);
 1683|      0|  free(tempstore);
 1684|      0|  return error;
 1685|    472|}

Curl_freeaddrinfo:
   82|    285|{
   83|    285|  struct Curl_addrinfo *vqualifier canext;
   84|    285|  struct Curl_addrinfo *ca;
   85|       |
   86|    570|  for(ca = cahead; ca; ca = canext) {
   87|    285|    canext = ca->ai_next;
   88|    285|    free(ca);
   89|    285|  }
   90|    285|}
Curl_he2ai:
  260|    285|{
  261|    285|  struct Curl_addrinfo *ai;
  262|    285|  struct Curl_addrinfo *prevai = NULL;
  263|    285|  struct Curl_addrinfo *firstai = NULL;
  264|    285|  struct sockaddr_in *addr;
  265|    285|#ifdef ENABLE_IPV6
  266|    285|  struct sockaddr_in6 *addr6;
  267|    285|#endif
  268|    285|  CURLcode result = CURLE_OK;
  269|    285|  int i;
  270|    285|  char *curr;
  271|       |
  272|    285|  if(!he)
  273|       |    /* no input == no output! */
  274|      0|    return NULL;
  275|       |
  276|    285|  DEBUGASSERT((he->h_name != NULL) && (he->h_addr_list != NULL));
  277|       |
  278|    570|  for(i = 0; (curr = he->h_addr_list[i]) != NULL; i++) {
  279|    285|    size_t ss_size;
  280|    285|    size_t namelen = strlen(he->h_name) + 1; /* include zero termination */
  281|    285|#ifdef ENABLE_IPV6
  282|    285|    if(he->h_addrtype == AF_INET6)
  283|      0|      ss_size = sizeof(struct sockaddr_in6);
  284|    285|    else
  285|    285|#endif
  286|    285|      ss_size = sizeof(struct sockaddr_in);
  287|       |
  288|       |    /* allocate memory to hold the struct, the address and the name */
  289|    285|    ai = calloc(1, sizeof(struct Curl_addrinfo) + ss_size + namelen);
  290|    285|    if(!ai) {
  291|      0|      result = CURLE_OUT_OF_MEMORY;
  292|      0|      break;
  293|      0|    }
  294|       |    /* put the address after the struct */
  295|    285|    ai->ai_addr = (void *)((char *)ai + sizeof(struct Curl_addrinfo));
  296|       |    /* then put the name after the address */
  297|    285|    ai->ai_canonname = (char *)ai->ai_addr + ss_size;
  298|    285|    memcpy(ai->ai_canonname, he->h_name, namelen);
  299|       |
  300|    285|    if(!firstai)
  301|       |      /* store the pointer we want to return from this function */
  302|    285|      firstai = ai;
  303|       |
  304|    285|    if(prevai)
  305|       |      /* make the previous entry point to this */
  306|      0|      prevai->ai_next = ai;
  307|       |
  308|    285|    ai->ai_family = he->h_addrtype;
  309|       |
  310|       |    /* we return all names as STREAM, so when using this address for TFTP
  311|       |       the type must be ignored and conn->socktype be used instead! */
  312|    285|    ai->ai_socktype = SOCK_STREAM;
  313|       |
  314|    285|    ai->ai_addrlen = (curl_socklen_t)ss_size;
  315|       |
  316|       |    /* leave the rest of the struct filled with zero */
  317|       |
  318|    285|    switch(ai->ai_family) {
  319|    285|    case AF_INET:
  320|    285|      addr = (void *)ai->ai_addr; /* storage area for this info */
  321|       |
  322|    285|      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
  323|    285|      addr->sin_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  324|    285|      addr->sin_port = htons((unsigned short)port);
  325|    285|      break;
  326|       |
  327|      0|#ifdef ENABLE_IPV6
  328|      0|    case AF_INET6:
  329|      0|      addr6 = (void *)ai->ai_addr; /* storage area for this info */
  330|       |
  331|      0|      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
  332|      0|      addr6->sin6_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  333|      0|      addr6->sin6_port = htons((unsigned short)port);
  334|      0|      break;
  335|    285|#endif
  336|    285|    }
  337|       |
  338|    285|    prevai = ai;
  339|    285|  }
  340|       |
  341|    285|  if(result) {
  342|      0|    Curl_freeaddrinfo(firstai);
  343|      0|    firstai = NULL;
  344|      0|  }
  345|       |
  346|    285|  return firstai;
  347|    285|}
Curl_ip2addr:
  373|    285|{
  374|    285|  struct Curl_addrinfo *ai;
  375|       |
  376|       |#if defined(__VMS) && \
  377|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  378|       |#pragma pointer_size save
  379|       |#pragma pointer_size short
  380|       |#pragma message disable PTRMISMATCH
  381|       |#endif
  382|       |
  383|    285|  struct hostent  *h;
  384|    285|  struct namebuff *buf;
  385|    285|  char  *addrentry;
  386|    285|  char  *hoststr;
  387|    285|  size_t addrsize;
  388|       |
  389|    285|  DEBUGASSERT(inaddr && hostname);
  390|       |
  391|    285|  buf = malloc(sizeof(struct namebuff));
  392|    285|  if(!buf)
  393|      0|    return NULL;
  394|       |
  395|    285|  hoststr = strdup(hostname);
  396|    285|  if(!hoststr) {
  397|      0|    free(buf);
  398|      0|    return NULL;
  399|      0|  }
  400|       |
  401|    285|  switch(af) {
  402|    285|  case AF_INET:
  403|    285|    addrsize = sizeof(struct in_addr);
  404|    285|    addrentry = (void *)&buf->addrentry.ina4;
  405|    285|    memcpy(addrentry, inaddr, sizeof(struct in_addr));
  406|    285|    break;
  407|      0|#ifdef ENABLE_IPV6
  408|      0|  case AF_INET6:
  409|      0|    addrsize = sizeof(struct in6_addr);
  410|      0|    addrentry = (void *)&buf->addrentry.ina6;
  411|      0|    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
  412|      0|    break;
  413|      0|#endif
  414|      0|  default:
  415|      0|    free(hoststr);
  416|      0|    free(buf);
  417|      0|    return NULL;
  418|    285|  }
  419|       |
  420|    285|  h = &buf->hostentry;
  421|    285|  h->h_name = hoststr;
  422|    285|  h->h_aliases = NULL;
  423|    285|  h->h_addrtype = (short)af;
  424|    285|  h->h_length = (short)addrsize;
  425|    285|  h->h_addr_list = &buf->h_addr_list[0];
  426|    285|  h->h_addr_list[0] = addrentry;
  427|    285|  h->h_addr_list[1] = NULL; /* terminate list of entries */
  428|       |
  429|       |#if defined(__VMS) && \
  430|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  431|       |#pragma pointer_size restore
  432|       |#pragma message enable PTRMISMATCH
  433|       |#endif
  434|       |
  435|    285|  ai = Curl_he2ai(h, port);
  436|       |
  437|    285|  free(hoststr);
  438|    285|  free(buf);
  439|       |
  440|    285|  return ai;
  441|    285|}

Curl_isdigit:
   71|  34.7k|{
   72|  34.7k|  if((c < 0) || (c >= 0x80))
   73|      4|    return FALSE;
   74|  34.7k|  return (ascii[c] & _N);
   75|  34.7k|}
Curl_isalnum:
   78|  3.31k|{
   79|  3.31k|  if((c < 0) || (c >= 0x80))
   80|     30|    return FALSE;
   81|  3.28k|  return (ascii[c] & (_N|_U|_L));
   82|  3.31k|}
Curl_isxdigit:
   85|     40|{
   86|     40|  if((c < 0) || (c >= 0x80))
   87|      6|    return FALSE;
   88|     34|  return (ascii[c] & (_N|_X));
   89|     40|}

Curl_http_auth_cleanup_ntlm_wb:
  493|    406|{
  494|    406|  ntlm_wb_cleanup(&conn->ntlm);
  495|    406|  ntlm_wb_cleanup(&conn->proxyntlm);
  496|    406|}
curl_ntlm_wb.c:ntlm_wb_cleanup:
   80|    812|{
   81|    812|  if(ntlm->ntlm_auth_hlpr_socket != CURL_SOCKET_BAD) {
   82|      0|    sclose(ntlm->ntlm_auth_hlpr_socket);
   83|      0|    ntlm->ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
   84|      0|  }
   85|       |
   86|    812|  if(ntlm->ntlm_auth_hlpr_pid) {
   87|      0|    int i;
   88|      0|    for(i = 0; i < 4; i++) {
   89|      0|      pid_t ret = waitpid(ntlm->ntlm_auth_hlpr_pid, NULL, WNOHANG);
   90|      0|      if(ret == ntlm->ntlm_auth_hlpr_pid || errno == ECHILD)
   91|      0|        break;
   92|      0|      switch(i) {
   93|      0|      case 0:
   94|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGTERM);
   95|      0|        break;
   96|      0|      case 1:
   97|       |        /* Give the process another moment to shut down cleanly before
   98|       |           bringing down the axe */
   99|      0|        Curl_wait_ms(1);
  100|      0|        break;
  101|      0|      case 2:
  102|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGKILL);
  103|      0|        break;
  104|      0|      case 3:
  105|      0|        break;
  106|      0|      }
  107|      0|    }
  108|      0|    ntlm->ntlm_auth_hlpr_pid = 0;
  109|      0|  }
  110|       |
  111|    812|  Curl_safefree(ntlm->challenge);
  112|    812|  Curl_safefree(ntlm->response);
  113|    812|}

Curl_dedotdotify:
   54|    191|{
   55|    191|  size_t inlen = strlen(input);
   56|    191|  char *clone;
   57|    191|  size_t clen = inlen; /* the length of the cloned input */
   58|    191|  char *out = malloc(inlen + 1);
   59|    191|  char *outptr;
   60|    191|  char *orgclone;
   61|    191|  char *queryp;
   62|    191|  if(!out)
   63|      0|    return NULL; /* out of memory */
   64|       |
   65|    191|  *out = 0; /* null-terminates, for inputs like "./" */
   66|       |
   67|       |  /* get a cloned copy of the input */
   68|    191|  clone = strdup(input);
   69|    191|  if(!clone) {
   70|      0|    free(out);
   71|      0|    return NULL;
   72|      0|  }
   73|    191|  orgclone = clone;
   74|    191|  outptr = out;
   75|       |
   76|    191|  if(!*clone) {
   77|       |    /* zero length string, return that */
   78|      0|    free(out);
   79|      0|    return clone;
   80|      0|  }
   81|       |
   82|       |  /*
   83|       |   * To handle query-parts properly, we must find it and remove it during the
   84|       |   * dotdot-operation and then append it again at the end to the output
   85|       |   * string.
   86|       |   */
   87|    191|  queryp = strchr(clone, '?');
   88|    191|  if(queryp)
   89|      0|    *queryp = 0;
   90|       |
   91|    522|  do {
   92|       |
   93|       |    /*  A.  If the input buffer begins with a prefix of "../" or "./", then
   94|       |        remove that prefix from the input buffer; otherwise, */
   95|       |
   96|    522|    if(!strncmp("./", clone, 2)) {
   97|      0|      clone += 2;
   98|      0|      clen -= 2;
   99|      0|    }
  100|    522|    else if(!strncmp("../", clone, 3)) {
  101|      0|      clone += 3;
  102|      0|      clen -= 3;
  103|      0|    }
  104|       |
  105|       |    /*  B.  if the input buffer begins with a prefix of "/./" or "/.", where
  106|       |        "."  is a complete path segment, then replace that prefix with "/" in
  107|       |        the input buffer; otherwise, */
  108|    522|    else if(!strncmp("/./", clone, 3)) {
  109|     35|      clone += 2;
  110|     35|      clen -= 2;
  111|     35|    }
  112|    487|    else if(!strcmp("/.", clone)) {
  113|      2|      clone[1]='/';
  114|      2|      clone++;
  115|      2|      clen -= 1;
  116|      2|    }
  117|       |
  118|       |    /*  C.  if the input buffer begins with a prefix of "/../" or "/..", where
  119|       |        ".." is a complete path segment, then replace that prefix with "/" in
  120|       |        the input buffer and remove the last segment and its preceding "/" (if
  121|       |        any) from the output buffer; otherwise, */
  122|       |
  123|    485|    else if(!strncmp("/../", clone, 4)) {
  124|     43|      clone += 3;
  125|     43|      clen -= 3;
  126|       |      /* remove the last segment from the output buffer */
  127|    426|      while(outptr > out) {
  128|    421|        outptr--;
  129|    421|        if(*outptr == '/')
  130|     38|          break;
  131|    421|      }
  132|     43|      *outptr = 0; /* null-terminate where it stops */
  133|     43|    }
  134|    442|    else if(!strcmp("/..", clone)) {
  135|     13|      clone[2]='/';
  136|     13|      clone += 2;
  137|     13|      clen -= 2;
  138|       |      /* remove the last segment from the output buffer */
  139|    141|      while(outptr > out) {
  140|    139|        outptr--;
  141|    139|        if(*outptr == '/')
  142|     11|          break;
  143|    139|      }
  144|     13|      *outptr = 0; /* null-terminate where it stops */
  145|     13|    }
  146|       |
  147|       |    /*  D.  if the input buffer consists only of "." or "..", then remove
  148|       |        that from the input buffer; otherwise, */
  149|       |
  150|    429|    else if(!strcmp(".", clone) || !strcmp("..", clone)) {
  151|      0|      *clone = 0;
  152|      0|      *out = 0;
  153|      0|    }
  154|       |
  155|    429|    else {
  156|       |      /*  E.  move the first path segment in the input buffer to the end of
  157|       |          the output buffer, including the initial "/" character (if any) and
  158|       |          any subsequent characters up to, but not including, the next "/"
  159|       |          character or the end of the input buffer. */
  160|       |
  161|  3.31k|      do {
  162|  3.31k|        *outptr++ = *clone++;
  163|  3.31k|        clen--;
  164|  3.31k|      } while(*clone && (*clone != '/'));
  165|    429|      *outptr = 0;
  166|    429|    }
  167|       |
  168|    522|  } while(*clone);
  169|       |
  170|    191|  if(queryp) {
  171|      0|    size_t qlen;
  172|       |    /* There was a query part, append that to the output. The 'clone' string
  173|       |       may now have been altered so we copy from the original input string
  174|       |       from the correct index. */
  175|      0|    size_t oindex = queryp - orgclone;
  176|      0|    qlen = strlen(&input[oindex]);
  177|      0|    memcpy(outptr, &input[oindex], qlen + 1); /* include the end zero byte */
  178|      0|  }
  179|       |
  180|    191|  free(orgclone);
  181|    191|  return out;
  182|    191|}

Curl_dyn_init:
   39|  1.86k|{
   40|  1.86k|  DEBUGASSERT(s);
   41|  1.86k|  DEBUGASSERT(toobig);
   42|  1.86k|  s->bufr = NULL;
   43|  1.86k|  s->leng = 0;
   44|  1.86k|  s->allc = 0;
   45|  1.86k|  s->toobig = toobig;
   46|  1.86k|#ifdef DEBUGBUILD
   47|  1.86k|  s->init = DYNINIT;
   48|  1.86k|#endif
   49|  1.86k|}
Curl_dyn_free:
   56|  1.45k|{
   57|  1.45k|  DEBUGASSERT(s);
   58|  1.45k|  Curl_safefree(s->bufr);
   59|  1.45k|  s->leng = s->allc = 0;
   60|  1.45k|}
Curl_dyn_addn:
  160|  22.3k|{
  161|  22.3k|  DEBUGASSERT(s);
  162|  22.3k|  DEBUGASSERT(s->init == DYNINIT);
  163|  22.3k|  DEBUGASSERT(!s->leng || s->bufr);
  164|  22.3k|  return dyn_nappend(s, mem, len);
  165|  22.3k|}
Curl_dyn_ptr:
  228|    822|{
  229|    822|  DEBUGASSERT(s);
  230|    822|  DEBUGASSERT(s->init == DYNINIT);
  231|    822|  DEBUGASSERT(!s->leng || s->bufr);
  232|    822|  return s->bufr;
  233|    822|}
Curl_dyn_len:
  250|    822|{
  251|    822|  DEBUGASSERT(s);
  252|    822|  DEBUGASSERT(s->init == DYNINIT);
  253|    822|  DEBUGASSERT(!s->leng || s->bufr);
  254|    822|  return s->leng;
  255|    822|}
dynbuf.c:dyn_nappend:
   67|  22.3k|{
   68|  22.3k|  size_t indx = s->leng;
   69|  22.3k|  size_t a = s->allc;
   70|  22.3k|  size_t fit = len + indx + 1; /* new string + old string + zero byte */
   71|       |
   72|       |  /* try to detect if there's rubbish in the struct */
   73|  22.3k|  DEBUGASSERT(s->init == DYNINIT);
   74|  22.3k|  DEBUGASSERT(s->toobig);
   75|  22.3k|  DEBUGASSERT(indx < s->toobig);
   76|  22.3k|  DEBUGASSERT(!s->leng || s->bufr);
   77|       |
   78|  22.3k|  if(fit > s->toobig) {
   79|      0|    Curl_dyn_free(s);
   80|      0|    return CURLE_OUT_OF_MEMORY;
   81|      0|  }
   82|  22.3k|  else if(!a) {
   83|    822|    DEBUGASSERT(!indx);
   84|       |    /* first invoke */
   85|    822|    if(fit < MIN_FIRST_ALLOC)
   86|    822|      a = MIN_FIRST_ALLOC;
   87|      0|    else
   88|      0|      a = fit;
   89|    822|  }
   90|  21.5k|  else {
   91|  21.6k|    while(a < fit)
   92|    152|      a *= 2;
   93|  21.5k|  }
   94|       |
   95|  22.3k|  if(a != s->allc) {
   96|       |    /* this logic is not using Curl_saferealloc() to make the tool not have to
   97|       |       include that as well when it uses this code */
   98|    974|    void *p = realloc(s->bufr, a);
   99|    974|    if(!p) {
  100|      0|      Curl_safefree(s->bufr);
  101|      0|      s->leng = s->allc = 0;
  102|      0|      return CURLE_OUT_OF_MEMORY;
  103|      0|    }
  104|    974|    s->bufr = p;
  105|    974|    s->allc = a;
  106|    974|  }
  107|       |
  108|  22.3k|  if(len)
  109|  22.3k|    memcpy(&s->bufr[indx], mem, len);
  110|  22.3k|  s->leng = indx + len;
  111|  22.3k|  s->bufr[s->leng] = 0;
  112|  22.3k|  return CURLE_OK;
  113|  22.3k|}

curl_global_init:
  216|      1|{
  217|      1|  return global_init(flags, TRUE);
  218|      1|}
curl_easy_init:
  290|  1.04k|{
  291|  1.04k|  CURLcode result;
  292|  1.04k|  struct Curl_easy *data;
  293|       |
  294|       |  /* Make sure we inited the global SSL stuff */
  295|  1.04k|  if(!initialized) {
  296|      1|    result = curl_global_init(CURL_GLOBAL_DEFAULT);
  297|      1|    if(result) {
  298|       |      /* something in the global init failed, return nothing */
  299|      0|      DEBUGF(fprintf(stderr, "Error: curl_global_init failed\n"));
  300|      0|      return NULL;
  301|      0|    }
  302|      1|  }
  303|       |
  304|       |  /* We use curl_open() with undefined URL so far */
  305|  1.04k|  result = Curl_open(&data);
  306|  1.04k|  if(result) {
  307|      0|    DEBUGF(fprintf(stderr, "Error: Curl_open failed\n"));
  308|      0|    return NULL;
  309|      0|  }
  310|       |
  311|  1.04k|  return data;
  312|  1.04k|}
curl_easy_cleanup:
  735|    574|{
  736|    574|  SIGPIPE_VARIABLE(pipe_st);
  737|       |
  738|    574|  if(!data)
  739|      0|    return;
  740|       |
  741|    574|  sigpipe_ignore(data, &pipe_st);
  742|    574|  Curl_close(&data);
  743|    574|  sigpipe_restore(&pipe_st);
  744|    574|}
easy.c:global_init:
  136|      1|{
  137|      1|  if(initialized++)
  138|      0|    return CURLE_OK;
  139|       |
  140|      1|  if(memoryfuncs) {
  141|       |    /* Setup the default memory functions here (again) */
  142|      1|    Curl_cmalloc = (curl_malloc_callback)malloc;
  143|      1|    Curl_cfree = (curl_free_callback)free;
  144|      1|    Curl_crealloc = (curl_realloc_callback)realloc;
  145|      1|    Curl_cstrdup = (curl_strdup_callback)system_strdup;
  146|      1|    Curl_ccalloc = (curl_calloc_callback)calloc;
  147|       |#if defined(WIN32) && defined(UNICODE)
  148|       |    Curl_cwcsdup = (curl_wcsdup_callback)_wcsdup;
  149|       |#endif
  150|      1|  }
  151|       |
  152|      1|  if(!Curl_ssl_init()) {
  153|      0|    DEBUGF(fprintf(stderr, "Error: Curl_ssl_init failed\n"));
  154|      0|    goto fail;
  155|      0|  }
  156|       |
  157|       |#ifdef WIN32
  158|       |  if(Curl_win32_init(flags)) {
  159|       |    DEBUGF(fprintf(stderr, "Error: win32_init failed\n"));
  160|       |    goto fail;
  161|       |  }
  162|       |#endif
  163|       |
  164|       |#ifdef __AMIGA__
  165|       |  if(!Curl_amiga_init()) {
  166|       |    DEBUGF(fprintf(stderr, "Error: Curl_amiga_init failed\n"));
  167|       |    goto fail;
  168|       |  }
  169|       |#endif
  170|       |
  171|       |#ifdef NETWARE
  172|       |  if(netware_init()) {
  173|       |    DEBUGF(fprintf(stderr, "Warning: LONG namespace not available\n"));
  174|       |  }
  175|       |#endif
  176|       |
  177|      1|  if(Curl_resolver_global_init()) {
  178|      0|    DEBUGF(fprintf(stderr, "Error: resolver_global_init failed\n"));
  179|      0|    goto fail;
  180|      0|  }
  181|       |
  182|       |#if defined(USE_SSH)
  183|       |  if(Curl_ssh_init()) {
  184|       |    goto fail;
  185|       |  }
  186|       |#endif
  187|       |
  188|       |#ifdef USE_WOLFSSH
  189|       |  if(WS_SUCCESS != wolfSSH_Init()) {
  190|       |    DEBUGF(fprintf(stderr, "Error: wolfSSH_Init failed\n"));
  191|       |    return CURLE_FAILED_INIT;
  192|       |  }
  193|       |#endif
  194|       |
  195|      1|  init_flags = flags;
  196|       |
  197|      1|#ifdef DEBUGBUILD
  198|      1|  if(getenv("CURL_GLOBAL_INIT"))
  199|       |    /* alloc data that will leak if *cleanup() is not called! */
  200|      0|    leakpointer = malloc(1);
  201|      1|#endif
  202|       |
  203|      1|  return CURLE_OK;
  204|       |
  205|      0|  fail:
  206|      0|  initialized--; /* undo the increase */
  207|      0|  return CURLE_FAILED_INIT;
  208|      1|}

Curl_isunreserved:
   45|  3.58k|{
   46|  3.58k|  switch(in) {
   47|    455|    case '0': case '1': case '2': case '3': case '4':
   48|    559|    case '5': case '6': case '7': case '8': case '9':
   49|    595|    case 'a': case 'b': case 'c': case 'd': case 'e':
   50|    627|    case 'f': case 'g': case 'h': case 'i': case 'j':
   51|    662|    case 'k': case 'l': case 'm': case 'n': case 'o':
   52|    757|    case 'p': case 'q': case 'r': case 's': case 't':
   53|    788|    case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
   54|    801|    case 'A': case 'B': case 'C': case 'D': case 'E':
   55|    809|    case 'F': case 'G': case 'H': case 'I': case 'J':
   56|    839|    case 'K': case 'L': case 'M': case 'N': case 'O':
   57|    854|    case 'P': case 'Q': case 'R': case 'S': case 'T':
   58|    864|    case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
   59|  1.07k|    case '-': case '.': case '_': case '~':
   60|  1.07k|      return TRUE;
   61|  2.50k|    default:
   62|  2.50k|      break;
   63|  3.58k|  }
   64|  2.50k|  return FALSE;
   65|  3.58k|}
Curl_urldecode:
  146|    209|{
  147|    209|  size_t alloc;
  148|    209|  char *ns;
  149|    209|  size_t strindex = 0;
  150|    209|  unsigned long hex;
  151|    209|  CURLcode result = CURLE_OK;
  152|       |
  153|    209|  DEBUGASSERT(string);
  154|    209|  DEBUGASSERT(ctrl >= REJECT_NADA); /* crash on TRUE/FALSE */
  155|       |
  156|    209|  alloc = (length?length:strlen(string)) + 1;
  157|    209|  ns = malloc(alloc);
  158|       |
  159|    209|  if(!ns)
  160|      0|    return CURLE_OUT_OF_MEMORY;
  161|       |
  162|  4.31k|  while(--alloc > 0) {
  163|  4.11k|    unsigned char in = *string;
  164|  4.11k|    if(('%' == in) && (alloc > 2) &&
  165|  4.11k|       ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
  166|       |      /* this is two hexadecimal digits following a '%' */
  167|      7|      char hexstr[3];
  168|      7|      char *ptr;
  169|      7|      hexstr[0] = string[1];
  170|      7|      hexstr[1] = string[2];
  171|      7|      hexstr[2] = 0;
  172|       |
  173|      7|      hex = strtoul(hexstr, &ptr, 16);
  174|       |
  175|      7|      in = curlx_ultouc(hex); /* this long is never bigger than 255 anyway */
  176|       |
  177|      7|      if(data) {
  178|      0|        result = Curl_convert_from_network(data, (char *)&in, 1);
  179|      0|        if(result) {
  180|       |          /* Curl_convert_from_network calls failf if unsuccessful */
  181|      0|          free(ns);
  182|      0|          return result;
  183|      0|        }
  184|      0|      }
  185|       |
  186|      7|      string += 2;
  187|      7|      alloc -= 2;
  188|      7|    }
  189|       |
  190|  4.11k|    if(((ctrl == REJECT_CTRL) && (in < 0x20)) ||
  191|  4.11k|       ((ctrl == REJECT_ZERO) && (in == 0))) {
  192|      4|      free(ns);
  193|      4|      return CURLE_URL_MALFORMAT;
  194|      4|    }
  195|       |
  196|  4.10k|    ns[strindex++] = in;
  197|  4.10k|    string++;
  198|  4.10k|  }
  199|    205|  ns[strindex] = 0; /* terminate it */
  200|       |
  201|    205|  if(olen)
  202|       |    /* store output size */
  203|     45|    *olen = strindex;
  204|       |
  205|       |  /* store output string */
  206|    205|  *ostring = ns;
  207|       |
  208|    205|  return CURLE_OK;
  209|    209|}

curl_getenv:
   75|  1.71k|{
   76|  1.71k|  return GetEnv(v);
   77|  1.71k|}
getenv.c:GetEnv:
   31|  1.71k|{
   32|       |#if defined(_WIN32_WCE) || defined(CURL_WINDOWS_APP)
   33|       |  (void)variable;
   34|       |  return NULL;
   35|       |#elif defined(WIN32)
   36|       |  /* This uses Windows API instead of C runtime getenv() to get the environment
   37|       |     variable since some changes aren't always visible to the latter. #4774 */
   38|       |  char *buf = NULL;
   39|       |  char *tmp;
   40|       |  DWORD bufsize;
   41|       |  DWORD rc = 1;
   42|       |  const DWORD max = 32768; /* max env var size from MSCRT source */
   43|       |
   44|       |  for(;;) {
   45|       |    tmp = realloc(buf, rc);
   46|       |    if(!tmp) {
   47|       |      free(buf);
   48|       |      return NULL;
   49|       |    }
   50|       |
   51|       |    buf = tmp;
   52|       |    bufsize = rc;
   53|       |
   54|       |    /* It's possible for rc to be 0 if the variable was found but empty.
   55|       |       Since getenv doesn't make that distinction we ignore it as well. */
   56|       |    rc = GetEnvironmentVariableA(variable, buf, bufsize);
   57|       |    if(!rc || rc == bufsize || rc > max) {
   58|       |      free(buf);
   59|       |      return NULL;
   60|       |    }
   61|       |
   62|       |    /* if rc < bufsize then rc is bytes written not including null */
   63|       |    if(rc < bufsize)
   64|       |      return buf;
   65|       |
   66|       |    /* else rc is bytes needed, try again */
   67|       |  }
   68|       |#else
   69|  1.71k|  char *env = getenv(variable);
   70|  1.71k|  return (env && env[0])?strdup(env):NULL;
   71|  1.71k|#endif
   72|  1.71k|}

Curl_initinfo:
   46|  1.45k|{
   47|  1.45k|  struct Progress *pro = &data->progress;
   48|  1.45k|  struct PureInfo *info = &data->info;
   49|       |
   50|  1.45k|  pro->t_nslookup = 0;
   51|  1.45k|  pro->t_connect = 0;
   52|  1.45k|  pro->t_appconnect = 0;
   53|  1.45k|  pro->t_pretransfer = 0;
   54|  1.45k|  pro->t_starttransfer = 0;
   55|  1.45k|  pro->timespent = 0;
   56|  1.45k|  pro->t_redirect = 0;
   57|  1.45k|  pro->is_t_startransfer_set = false;
   58|       |
   59|  1.45k|  info->httpcode = 0;
   60|  1.45k|  info->httpproxycode = 0;
   61|  1.45k|  info->httpversion = 0;
   62|  1.45k|  info->filetime = -1; /* -1 is an illegal time and thus means unknown */
   63|  1.45k|  info->timecond = FALSE;
   64|       |
   65|  1.45k|  info->header_size = 0;
   66|  1.45k|  info->request_size = 0;
   67|  1.45k|  info->proxyauthavail = 0;
   68|  1.45k|  info->httpauthavail = 0;
   69|  1.45k|  info->numconnects = 0;
   70|       |
   71|  1.45k|  free(info->contenttype);
   72|  1.45k|  info->contenttype = NULL;
   73|       |
   74|  1.45k|  free(info->wouldredirect);
   75|  1.45k|  info->wouldredirect = NULL;
   76|       |
   77|  1.45k|  info->conn_primary_ip[0] = '\0';
   78|  1.45k|  info->conn_local_ip[0] = '\0';
   79|  1.45k|  info->conn_primary_port = 0;
   80|  1.45k|  info->conn_local_port = 0;
   81|  1.45k|  info->retry_after = 0;
   82|       |
   83|  1.45k|  info->conn_scheme = 0;
   84|  1.45k|  info->conn_protocol = 0;
   85|       |
   86|  1.45k|#ifdef USE_SSL
   87|  1.45k|  Curl_ssl_free_certinfo(data);
   88|  1.45k|#endif
   89|  1.45k|  return CURLE_OK;
   90|  1.45k|}

Curl_hash_init:
   62|  1.41k|{
   63|  1.41k|  if(!slots || !hfunc || !comparator ||!dtor) {
   64|      0|    return 1; /* failure */
   65|      0|  }
   66|       |
   67|  1.41k|  h->hash_func = hfunc;
   68|  1.41k|  h->comp_func = comparator;
   69|  1.41k|  h->dtor = dtor;
   70|  1.41k|  h->size = 0;
   71|  1.41k|  h->slots = slots;
   72|       |
   73|  1.41k|  h->table = malloc(slots * sizeof(struct Curl_llist));
   74|  1.41k|  if(h->table) {
   75|  1.41k|    int i;
   76|   480k|    for(i = 0; i < slots; ++i)
   77|   479k|      Curl_llist_init(&h->table[i], (Curl_llist_dtor) hash_element_dtor);
   78|  1.41k|    return 0; /* fine */
   79|  1.41k|  }
   80|      0|  h->slots = 0;
   81|      0|  return 1; /* failure */
   82|  1.41k|}
Curl_hash_add:
  110|    570|{
  111|    570|  struct Curl_hash_element  *he;
  112|    570|  struct Curl_llist_element *le;
  113|    570|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  114|       |
  115|    570|  for(le = l->head; le; le = le->next) {
  116|      0|    he = (struct Curl_hash_element *) le->ptr;
  117|      0|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  118|      0|      Curl_llist_remove(l, le, (void *)h);
  119|      0|      --h->size;
  120|      0|      break;
  121|      0|    }
  122|      0|  }
  123|       |
  124|    570|  he = mk_hash_element(key, key_len, p);
  125|    570|  if(he) {
  126|    570|    Curl_llist_insert_next(l, l->tail, he, &he->list);
  127|    570|    ++h->size;
  128|    570|    return p; /* return the new entry */
  129|    570|  }
  130|       |
  131|      0|  return NULL; /* failure */
  132|    570|}
Curl_hash_delete:
  140|    285|{
  141|    285|  struct Curl_llist_element *le;
  142|    285|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  143|       |
  144|    285|  for(le = l->head; le; le = le->next) {
  145|    285|    struct Curl_hash_element *he = le->ptr;
  146|    285|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  147|    285|      Curl_llist_remove(l, le, (void *) h);
  148|    285|      --h->size;
  149|    285|      return 0;
  150|    285|    }
  151|    285|  }
  152|      0|  return 1;
  153|    285|}
Curl_hash_pick:
  161|  1.42k|{
  162|  1.42k|  struct Curl_llist_element *le;
  163|  1.42k|  struct Curl_llist *l;
  164|       |
  165|  1.42k|  if(h) {
  166|  1.42k|    l = FETCH_LIST(h, key, key_len);
  167|  1.42k|    for(le = l->head; le; le = le->next) {
  168|      0|      struct Curl_hash_element *he = le->ptr;
  169|      0|      if(h->comp_func(he->key, he->key_len, key, key_len)) {
  170|      0|        return he->ptr;
  171|      0|      }
  172|      0|    }
  173|  1.42k|  }
  174|       |
  175|  1.42k|  return NULL;
  176|  1.42k|}
Curl_hash_destroy:
  206|  1.41k|{
  207|  1.41k|  int i;
  208|       |
  209|   480k|  for(i = 0; i < h->slots; ++i) {
  210|   479k|    Curl_llist_destroy(&h->table[i], (void *) h);
  211|   479k|  }
  212|       |
  213|  1.41k|  Curl_safefree(h->table);
  214|  1.41k|  h->size = 0;
  215|  1.41k|  h->slots = 0;
  216|  1.41k|}
Curl_hash_clean:
  224|    472|{
  225|    472|  Curl_hash_clean_with_criterium(h, NULL, NULL);
  226|    472|}
Curl_hash_clean_with_criterium:
  232|    757|{
  233|    757|  struct Curl_llist_element *le;
  234|    757|  struct Curl_llist_element *lnext;
  235|    757|  struct Curl_llist *list;
  236|    757|  int i;
  237|       |
  238|    757|  if(!h)
  239|    472|    return;
  240|       |
  241|  2.28k|  for(i = 0; i < h->slots; ++i) {
  242|  1.99k|    list = &h->table[i];
  243|  1.99k|    le = list->head; /* get first list entry */
  244|  2.28k|    while(le) {
  245|    285|      struct Curl_hash_element *he = le->ptr;
  246|    285|      lnext = le->next;
  247|       |      /* ask the callback function if we shall remove this entry or not */
  248|    285|      if(!comp || comp(user, he->ptr)) {
  249|      0|        Curl_llist_remove(list, le, (void *) h);
  250|      0|        --h->size; /* one less entry in the hash now */
  251|      0|      }
  252|    285|      le = lnext;
  253|    285|    }
  254|  1.99k|  }
  255|    285|}
Curl_hash_str:
  258|  1.99k|{
  259|  1.99k|  const char *key_str = (const char *) key;
  260|  1.99k|  const char *end = key_str + key_length;
  261|  1.99k|  size_t h = 5381;
  262|       |
  263|  33.0k|  while(key_str < end) {
  264|  31.0k|    h += h << 5;
  265|  31.0k|    h ^= *key_str++;
  266|  31.0k|  }
  267|       |
  268|  1.99k|  return (h % slots_num);
  269|  1.99k|}
Curl_str_key_compare:
  273|    285|{
  274|    285|  if((key1_len == key2_len) && !memcmp(k1, k2, key1_len))
  275|    285|    return 1;
  276|       |
  277|      0|  return 0;
  278|    285|}
Curl_hash_start_iterate:
  282|  1.04k|{
  283|  1.04k|  iter->hash = hash;
  284|  1.04k|  iter->slot_index = 0;
  285|  1.04k|  iter->current_element = NULL;
  286|  1.04k|}
Curl_hash_next_element:
  290|  1.04k|{
  291|  1.04k|  struct Curl_hash *h = iter->hash;
  292|       |
  293|       |  /* Get the next element in the current list, if any */
  294|  1.04k|  if(iter->current_element)
  295|      0|    iter->current_element = iter->current_element->next;
  296|       |
  297|       |  /* If we have reached the end of the list, find the next one */
  298|  1.04k|  if(!iter->current_element) {
  299|  1.04k|    int i;
  300|  97.4k|    for(i = iter->slot_index; i < h->slots; i++) {
  301|  96.7k|      if(h->table[i].head) {
  302|    285|        iter->current_element = h->table[i].head;
  303|    285|        iter->slot_index = i + 1;
  304|    285|        break;
  305|    285|      }
  306|  96.7k|    }
  307|  1.04k|  }
  308|       |
  309|  1.04k|  if(iter->current_element) {
  310|    285|    struct Curl_hash_element *he = iter->current_element->ptr;
  311|    285|    return he;
  312|    285|  }
  313|    757|  iter->current_element = NULL;
  314|    757|  return NULL;
  315|  1.04k|}
hash.c:hash_element_dtor:
   36|    570|{
   37|    570|  struct Curl_hash *h = (struct Curl_hash *) user;
   38|    570|  struct Curl_hash_element *e = (struct Curl_hash_element *) element;
   39|       |
   40|    570|  if(e->ptr) {
   41|    570|    h->dtor(e->ptr);
   42|    570|    e->ptr = NULL;
   43|    570|  }
   44|       |
   45|    570|  e->key_len = 0;
   46|       |
   47|    570|  free(e);
   48|    570|}
hash.c:mk_hash_element:
   86|    570|{
   87|       |  /* allocate the struct plus memory after it to store the key */
   88|    570|  struct Curl_hash_element *he = malloc(sizeof(struct Curl_hash_element) +
   89|    570|                                        key_len);
   90|    570|  if(he) {
   91|       |    /* copy the key */
   92|    570|    memcpy(he->key, key, key_len);
   93|    570|    he->key_len = key_len;
   94|    570|    he->ptr = (void *) p;
   95|    570|  }
   96|    570|  return he;
   97|    570|}

Curl_num_addresses:
  128|    285|{
  129|    285|  int i = 0;
  130|    570|  while(addr) {
  131|    285|    addr = addr->ai_next;
  132|    285|    i++;
  133|    285|  }
  134|    285|  return i;
  135|    285|}
Curl_hostcache_prune:
  230|    285|{
  231|    285|  time_t now;
  232|       |
  233|    285|  if((data->set.dns_cache_timeout == -1) || !data->dns.hostcache)
  234|       |    /* cache forever means never prune, and NULL hostcache means
  235|       |       we can't do it */
  236|      0|    return;
  237|       |
  238|    285|  if(data->share)
  239|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  240|       |
  241|    285|  time(&now);
  242|       |
  243|       |  /* Remove outdated and unused entries from the hostcache */
  244|    285|  hostcache_prune(data->dns.hostcache,
  245|    285|                  data->set.dns_cache_timeout,
  246|    285|                  now);
  247|       |
  248|    285|  if(data->share)
  249|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  250|    285|}
Curl_cache_addr:
  419|    285|{
  420|    285|  char entry_id[MAX_HOSTCACHE_LEN];
  421|    285|  size_t entry_len;
  422|    285|  struct Curl_dns_entry *dns;
  423|    285|  struct Curl_dns_entry *dns2;
  424|       |
  425|    285|#ifndef CURL_DISABLE_SHUFFLE_DNS
  426|       |  /* shuffle addresses if requested */
  427|    285|  if(data->set.dns_shuffle_addresses) {
  428|      0|    CURLcode result = Curl_shuffle_addr(data, &addr);
  429|      0|    if(result)
  430|      0|      return NULL;
  431|      0|  }
  432|    285|#endif
  433|       |
  434|       |  /* Create a new cache entry */
  435|    285|  dns = calloc(1, sizeof(struct Curl_dns_entry));
  436|    285|  if(!dns) {
  437|      0|    return NULL;
  438|      0|  }
  439|       |
  440|       |  /* Create an entry id, based upon the hostname and port */
  441|    285|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  442|    285|  entry_len = strlen(entry_id);
  443|       |
  444|    285|  dns->inuse = 1;   /* the cache has the first reference */
  445|    285|  dns->addr = addr; /* this is the address(es) */
  446|    285|  time(&dns->timestamp);
  447|    285|  if(dns->timestamp == 0)
  448|      0|    dns->timestamp = 1;   /* zero indicates permanent CURLOPT_RESOLVE entry */
  449|       |
  450|       |  /* Store the resolved data in our DNS cache. */
  451|    285|  dns2 = Curl_hash_add(data->dns.hostcache, entry_id, entry_len + 1,
  452|    285|                       (void *)dns);
  453|    285|  if(!dns2) {
  454|      0|    free(dns);
  455|      0|    return NULL;
  456|      0|  }
  457|       |
  458|    285|  dns = dns2;
  459|    285|  dns->inuse++;         /* mark entry as in-use */
  460|    285|  return dns;
  461|    285|}
Curl_ipv6works:
  540|    472|{
  541|    472|  if(data) {
  542|       |    /* the nature of most system is that IPv6 status doesn't come and go
  543|       |       during a program's lifetime so we only probe the first time and then we
  544|       |       have the info kept for fast re-use */
  545|      0|    DEBUGASSERT(data);
  546|      0|    DEBUGASSERT(data->multi);
  547|      0|    return data->multi->ipv6_works;
  548|      0|  }
  549|    472|  else {
  550|    472|    int ipv6_works = -1;
  551|       |    /* probe to see if we have a working IPv6 stack */
  552|    472|    curl_socket_t s = socket(PF_INET6, SOCK_DGRAM, 0);
  553|    472|    if(s == CURL_SOCKET_BAD)
  554|       |      /* an IPv6 address was requested but we can't get/use one */
  555|      0|      ipv6_works = 0;
  556|    472|    else {
  557|    472|      ipv6_works = 1;
  558|    472|      sclose(s);
  559|    472|    }
  560|    472|    return (ipv6_works>0)?TRUE:FALSE;
  561|    472|  }
  562|    472|}
Curl_resolv:
  606|    285|{
  607|    285|  struct Curl_dns_entry *dns = NULL;
  608|    285|  CURLcode result;
  609|    285|  enum resolve_t rc = CURLRESOLV_ERROR; /* default to failure */
  610|    285|  struct connectdata *conn = data->conn;
  611|    285|  *entry = NULL;
  612|    285|  conn->bits.doh = FALSE; /* default is not */
  613|       |
  614|    285|  if(data->share)
  615|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  616|       |
  617|    285|  dns = fetch_addr(data, hostname, port);
  618|       |
  619|    285|  if(dns) {
  620|      0|    infof(data, "Hostname %s was found in DNS cache", hostname);
  621|      0|    dns->inuse++; /* we use it! */
  622|      0|    rc = CURLRESOLV_RESOLVED;
  623|      0|  }
  624|       |
  625|    285|  if(data->share)
  626|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  627|       |
  628|    285|  if(!dns) {
  629|       |    /* The entry was not in the cache. Resolve it to IP address */
  630|       |
  631|    285|    struct Curl_addrinfo *addr = NULL;
  632|    285|    int respwait = 0;
  633|    285|    struct in_addr in;
  634|    285|#ifndef USE_RESOLVE_ON_IPS
  635|    285|    const
  636|    285|#endif
  637|    285|      bool ipnum = FALSE;
  638|       |
  639|       |    /* notify the resolver start callback */
  640|    285|    if(data->set.resolver_start) {
  641|      0|      int st;
  642|      0|      Curl_set_in_callback(data, true);
  643|      0|      st = data->set.resolver_start(
  644|      0|#ifdef USE_CURL_ASYNC
  645|      0|        data->state.async.resolver,
  646|       |#else
  647|       |        NULL,
  648|       |#endif
  649|      0|        NULL,
  650|      0|        data->set.resolver_start_client);
  651|      0|      Curl_set_in_callback(data, false);
  652|      0|      if(st)
  653|      0|        return CURLRESOLV_ERROR;
  654|      0|    }
  655|       |
  656|       |#if defined(ENABLE_IPV6) && defined(CURL_OSX_CALL_COPYPROXIES)
  657|       |    {
  658|       |      /*
  659|       |       * The automagic conversion from IPv4 literals to IPv6 literals only
  660|       |       * works if the SCDynamicStoreCopyProxies system function gets called
  661|       |       * first. As Curl currently doesn't support system-wide HTTP proxies, we
  662|       |       * therefore don't use any value this function might return.
  663|       |       *
  664|       |       * This function is only available on a macOS and is not needed for
  665|       |       * IPv4-only builds, hence the conditions above.
  666|       |       */
  667|       |      CFDictionaryRef dict = SCDynamicStoreCopyProxies(NULL);
  668|       |      if(dict)
  669|       |        CFRelease(dict);
  670|       |    }
  671|       |#endif
  672|       |
  673|    285|#ifndef USE_RESOLVE_ON_IPS
  674|       |    /* First check if this is an IPv4 address string */
  675|    285|    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  676|       |      /* This is a dotted IP address 123.123.123.123-style */
  677|    285|      addr = Curl_ip2addr(AF_INET, &in, hostname, port);
  678|    285|#ifdef ENABLE_IPV6
  679|    285|    if(!addr) {
  680|      0|      struct in6_addr in6;
  681|       |      /* check if this is an IPv6 address string */
  682|      0|      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  683|       |        /* This is an IPv6 address literal */
  684|      0|        addr = Curl_ip2addr(AF_INET6, &in6, hostname, port);
  685|      0|    }
  686|    285|#endif /* ENABLE_IPV6 */
  687|       |
  688|       |#else /* if USE_RESOLVE_ON_IPS */
  689|       |    /* First check if this is an IPv4 address string */
  690|       |    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  691|       |      /* This is a dotted IP address 123.123.123.123-style */
  692|       |      ipnum = TRUE;
  693|       |#ifdef ENABLE_IPV6
  694|       |    else {
  695|       |      struct in6_addr in6;
  696|       |      /* check if this is an IPv6 address string */
  697|       |      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  698|       |        /* This is an IPv6 address literal */
  699|       |        ipnum = TRUE;
  700|       |    }
  701|       |#endif /* ENABLE_IPV6 */
  702|       |
  703|       |#endif /* !USE_RESOLVE_ON_IPS */
  704|       |
  705|    285|    if(!addr) {
  706|      0|      if(conn->ip_version == CURL_IPRESOLVE_V6 && !Curl_ipv6works(data))
  707|      0|        return CURLRESOLV_ERROR;
  708|       |
  709|      0|      if(strcasecompare(hostname, "localhost"))
  710|      0|        addr = get_localhost(port);
  711|      0|      else if(allowDOH && data->set.doh && !ipnum)
  712|      0|        addr = Curl_doh(data, hostname, port, &respwait);
  713|      0|      else {
  714|       |        /* Check what IP specifics the app has requested and if we can provide
  715|       |         * it. If not, bail out. */
  716|      0|        if(!Curl_ipvalid(data, conn))
  717|      0|          return CURLRESOLV_ERROR;
  718|       |        /* If Curl_getaddrinfo() returns NULL, 'respwait' might be set to a
  719|       |           non-zero value indicating that we need to wait for the response to
  720|       |           the resolve call */
  721|      0|        addr = Curl_getaddrinfo(data, hostname, port, &respwait);
  722|      0|      }
  723|      0|    }
  724|    285|    if(!addr) {
  725|      0|      if(respwait) {
  726|       |        /* the response to our resolve call will come asynchronously at
  727|       |           a later time, good or bad */
  728|       |        /* First, check that we haven't received the info by now */
  729|      0|        result = Curl_resolv_check(data, &dns);
  730|      0|        if(result) /* error detected */
  731|      0|          return CURLRESOLV_ERROR;
  732|      0|        if(dns)
  733|      0|          rc = CURLRESOLV_RESOLVED; /* pointer provided */
  734|      0|        else
  735|      0|          rc = CURLRESOLV_PENDING; /* no info yet */
  736|      0|      }
  737|      0|    }
  738|    285|    else {
  739|    285|      if(data->share)
  740|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  741|       |
  742|       |      /* we got a response, store it in the cache */
  743|    285|      dns = Curl_cache_addr(data, addr, hostname, port);
  744|       |
  745|    285|      if(data->share)
  746|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  747|       |
  748|    285|      if(!dns)
  749|       |        /* returned failure, bail out nicely */
  750|      0|        Curl_freeaddrinfo(addr);
  751|    285|      else
  752|    285|        rc = CURLRESOLV_RESOLVED;
  753|    285|    }
  754|    285|  }
  755|       |
  756|    285|  *entry = dns;
  757|       |
  758|    285|  return rc;
  759|    285|}
Curl_resolv_timeout:
  803|    285|{
  804|       |#ifdef USE_ALARM_TIMEOUT
  805|       |#ifdef HAVE_SIGACTION
  806|       |  struct sigaction keep_sigact;   /* store the old struct here */
  807|       |  volatile bool keep_copysig = FALSE; /* whether old sigact has been saved */
  808|       |  struct sigaction sigact;
  809|       |#else
  810|       |#ifdef HAVE_SIGNAL
  811|       |  void (*keep_sigact)(int);       /* store the old handler here */
  812|       |#endif /* HAVE_SIGNAL */
  813|       |#endif /* HAVE_SIGACTION */
  814|       |  volatile long timeout;
  815|       |  volatile unsigned int prev_alarm = 0;
  816|       |#endif /* USE_ALARM_TIMEOUT */
  817|    285|  enum resolve_t rc;
  818|       |
  819|    285|  *entry = NULL;
  820|       |
  821|    285|  if(timeoutms < 0)
  822|       |    /* got an already expired timeout */
  823|      0|    return CURLRESOLV_TIMEDOUT;
  824|       |
  825|       |#ifdef USE_ALARM_TIMEOUT
  826|       |  if(data->set.no_signal)
  827|       |    /* Ignore the timeout when signals are disabled */
  828|       |    timeout = 0;
  829|       |  else
  830|       |    timeout = (timeoutms > LONG_MAX) ? LONG_MAX : (long)timeoutms;
  831|       |
  832|       |  if(!timeout)
  833|       |    /* USE_ALARM_TIMEOUT defined, but no timeout actually requested */
  834|       |    return Curl_resolv(data, hostname, port, TRUE, entry);
  835|       |
  836|       |  if(timeout < 1000) {
  837|       |    /* The alarm() function only provides integer second resolution, so if
  838|       |       we want to wait less than one second we must bail out already now. */
  839|       |    failf(data,
  840|       |        "remaining timeout of %ld too small to resolve via SIGALRM method",
  841|       |        timeout);
  842|       |    return CURLRESOLV_TIMEDOUT;
  843|       |  }
  844|       |  /* This allows us to time-out from the name resolver, as the timeout
  845|       |     will generate a signal and we will siglongjmp() from that here.
  846|       |     This technique has problems (see alarmfunc).
  847|       |     This should be the last thing we do before calling Curl_resolv(),
  848|       |     as otherwise we'd have to worry about variables that get modified
  849|       |     before we invoke Curl_resolv() (and thus use "volatile"). */
  850|       |  if(sigsetjmp(curl_jmpenv, 1)) {
  851|       |    /* this is coming from a siglongjmp() after an alarm signal */
  852|       |    failf(data, "name lookup timed out");
  853|       |    rc = CURLRESOLV_ERROR;
  854|       |    goto clean_up;
  855|       |  }
  856|       |  else {
  857|       |    /*************************************************************
  858|       |     * Set signal handler to catch SIGALRM
  859|       |     * Store the old value to be able to set it back later!
  860|       |     *************************************************************/
  861|       |#ifdef HAVE_SIGACTION
  862|       |    sigaction(SIGALRM, NULL, &sigact);
  863|       |    keep_sigact = sigact;
  864|       |    keep_copysig = TRUE; /* yes, we have a copy */
  865|       |    sigact.sa_handler = alarmfunc;
  866|       |#ifdef SA_RESTART
  867|       |    /* HPUX doesn't have SA_RESTART but defaults to that behavior! */
  868|       |    sigact.sa_flags &= ~SA_RESTART;
  869|       |#endif
  870|       |    /* now set the new struct */
  871|       |    sigaction(SIGALRM, &sigact, NULL);
  872|       |#else /* HAVE_SIGACTION */
  873|       |    /* no sigaction(), revert to the much lamer signal() */
  874|       |#ifdef HAVE_SIGNAL
  875|       |    keep_sigact = signal(SIGALRM, alarmfunc);
  876|       |#endif
  877|       |#endif /* HAVE_SIGACTION */
  878|       |
  879|       |    /* alarm() makes a signal get sent when the timeout fires off, and that
  880|       |       will abort system calls */
  881|       |    prev_alarm = alarm(curlx_sltoui(timeout/1000L));
  882|       |  }
  883|       |
  884|       |#else
  885|       |#ifndef CURLRES_ASYNCH
  886|       |  if(timeoutms)
  887|       |    infof(data, "timeout on name lookup is not supported");
  888|       |#else
  889|    285|  (void)timeoutms; /* timeoutms not used with an async resolver */
  890|    285|#endif
  891|    285|#endif /* USE_ALARM_TIMEOUT */
  892|       |
  893|       |  /* Perform the actual name resolution. This might be interrupted by an
  894|       |   * alarm if it takes too long.
  895|       |   */
  896|    285|  rc = Curl_resolv(data, hostname, port, TRUE, entry);
  897|       |
  898|       |#ifdef USE_ALARM_TIMEOUT
  899|       |clean_up:
  900|       |
  901|       |  if(!prev_alarm)
  902|       |    /* deactivate a possibly active alarm before uninstalling the handler */
  903|       |    alarm(0);
  904|       |
  905|       |#ifdef HAVE_SIGACTION
  906|       |  if(keep_copysig) {
  907|       |    /* we got a struct as it looked before, now put that one back nice
  908|       |       and clean */
  909|       |    sigaction(SIGALRM, &keep_sigact, NULL); /* put it back */
  910|       |  }
  911|       |#else
  912|       |#ifdef HAVE_SIGNAL
  913|       |  /* restore the previous SIGALRM handler */
  914|       |  signal(SIGALRM, keep_sigact);
  915|       |#endif
  916|       |#endif /* HAVE_SIGACTION */
  917|       |
  918|       |  /* switch back the alarm() to either zero or to what it was before minus
  919|       |     the time we spent until now! */
  920|       |  if(prev_alarm) {
  921|       |    /* there was an alarm() set before us, now put it back */
  922|       |    timediff_t elapsed_secs = Curl_timediff(Curl_now(),
  923|       |                                            data->conn->created) / 1000;
  924|       |
  925|       |    /* the alarm period is counted in even number of seconds */
  926|       |    unsigned long alarm_set = (unsigned long)(prev_alarm - elapsed_secs);
  927|       |
  928|       |    if(!alarm_set ||
  929|       |       ((alarm_set >= 0x80000000) && (prev_alarm < 0x80000000)) ) {
  930|       |      /* if the alarm time-left reached zero or turned "negative" (counted
  931|       |         with unsigned values), we should fire off a SIGALRM here, but we
  932|       |         won't, and zero would be to switch it off so we never set it to
  933|       |         less than 1! */
  934|       |      alarm(1);
  935|       |      rc = CURLRESOLV_TIMEDOUT;
  936|       |      failf(data, "Previous alarm fired off!");
  937|       |    }
  938|       |    else
  939|       |      alarm((unsigned int)alarm_set);
  940|       |  }
  941|       |#endif /* USE_ALARM_TIMEOUT */
  942|       |
  943|    285|  return rc;
  944|    285|}
Curl_resolv_unlock:
  954|    285|{
  955|    285|  if(data && data->share)
  956|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  957|       |
  958|    285|  freednsentry(dns);
  959|       |
  960|    285|  if(data && data->share)
  961|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  962|    285|}
Curl_mk_dnscache:
  983|    472|{
  984|    472|  return Curl_hash_init(hash, 7, Curl_hash_str, Curl_str_key_compare,
  985|    472|                        freednsentry);
  986|    472|}
Curl_hostcache_clean:
  997|    472|{
  998|    472|  if(data && data->share)
  999|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 1000|       |
 1001|    472|  Curl_hash_clean(hash);
 1002|       |
 1003|    472|  if(data && data->share)
 1004|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 1005|    472|}
hostip.c:hostcache_prune:
  214|    285|{
  215|    285|  struct hostcache_prune_data user;
  216|       |
  217|    285|  user.cache_timeout = cache_timeout;
  218|    285|  user.now = now;
  219|       |
  220|    285|  Curl_hash_clean_with_criterium(hostcache,
  221|    285|                                 (void *) &user,
  222|    285|                                 hostcache_timestamp_remove);
  223|    285|}
hostip.c:hostcache_timestamp_remove:
  200|    285|{
  201|    285|  struct hostcache_prune_data *data =
  202|    285|    (struct hostcache_prune_data *) datap;
  203|    285|  struct Curl_dns_entry *c = (struct Curl_dns_entry *) hc;
  204|       |
  205|    285|  return (0 != c->timestamp)
  206|    285|    && (data->now - c->timestamp >= data->cache_timeout);
  207|    285|}
hostip.c:fetch_addr:
  263|    285|{
  264|    285|  struct Curl_dns_entry *dns = NULL;
  265|    285|  size_t entry_len;
  266|    285|  char entry_id[MAX_HOSTCACHE_LEN];
  267|       |
  268|       |  /* Create an entry id, based upon the hostname and port */
  269|    285|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  270|    285|  entry_len = strlen(entry_id);
  271|       |
  272|       |  /* See if its already in our dns cache */
  273|    285|  dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  274|       |
  275|       |  /* No entry found in cache, check if we might have a wildcard entry */
  276|    285|  if(!dns && data->state.wildcard_resolve) {
  277|      0|    create_hostcache_id("*", port, entry_id, sizeof(entry_id));
  278|      0|    entry_len = strlen(entry_id);
  279|       |
  280|       |    /* See if it's already in our dns cache */
  281|      0|    dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  282|      0|  }
  283|       |
  284|    285|  if(dns && (data->set.dns_cache_timeout != -1)) {
  285|       |    /* See whether the returned entry is stale. Done before we release lock */
  286|      0|    struct hostcache_prune_data user;
  287|       |
  288|      0|    time(&user.now);
  289|      0|    user.cache_timeout = data->set.dns_cache_timeout;
  290|       |
  291|      0|    if(hostcache_timestamp_remove(&user, dns)) {
  292|      0|      infof(data, "Hostname in DNS cache was stale, zapped");
  293|      0|      dns = NULL; /* the memory deallocation is being handled by the hash */
  294|      0|      Curl_hash_delete(data->dns.hostcache, entry_id, entry_len + 1);
  295|      0|    }
  296|      0|  }
  297|       |
  298|    285|  return dns;
  299|    285|}
hostip.c:create_hostcache_id:
  176|    570|{
  177|    570|  size_t len = strlen(name);
  178|    570|  if(len > (buflen - 7))
  179|      0|    len = buflen - 7;
  180|       |  /* store and lower case the name */
  181|  6.84k|  while(len--)
  182|  6.27k|    *ptr++ = (char)TOLOWER(*name++);
  183|    570|  msnprintf(ptr, 7, ":%u", port);
  184|    570|}
hostip.c:freednsentry:
  968|    570|{
  969|    570|  struct Curl_dns_entry *dns = (struct Curl_dns_entry *) freethis;
  970|    570|  DEBUGASSERT(dns && (dns->inuse>0));
  971|       |
  972|    570|  dns->inuse--;
  973|    570|  if(dns->inuse == 0) {
  974|    285|    Curl_freeaddrinfo(dns->addr);
  975|    285|    free(dns);
  976|    285|  }
  977|    570|}

Curl_hsts_cleanup:
   90|  1.04k|{
   91|  1.04k|  struct hsts *h = *hp;
   92|  1.04k|  if(h) {
   93|      0|    struct Curl_llist_element *e;
   94|      0|    struct Curl_llist_element *n;
   95|      0|    for(e = h->list.head; e; e = n) {
   96|      0|      struct stsentry *sts = e->ptr;
   97|      0|      n = e->next;
   98|      0|      hsts_free(sts);
   99|      0|    }
  100|      0|    free(h->filename);
  101|      0|    free(h);
  102|      0|    *hp = NULL;
  103|      0|  }
  104|  1.04k|}
Curl_hsts_save:
  332|  1.04k|{
  333|  1.04k|  struct Curl_llist_element *e;
  334|  1.04k|  struct Curl_llist_element *n;
  335|  1.04k|  CURLcode result = CURLE_OK;
  336|  1.04k|  FILE *out;
  337|  1.04k|  char *tempstore;
  338|  1.04k|  unsigned char randsuffix[9];
  339|       |
  340|  1.04k|  if(!h)
  341|       |    /* no cache activated */
  342|  1.04k|    return CURLE_OK;
  343|       |
  344|       |  /* if no new name is given, use the one we stored from the load */
  345|      0|  if(!file && h->filename)
  346|      0|    file = h->filename;
  347|       |
  348|      0|  if((h->flags & CURLHSTS_READONLYFILE) || !file || !file[0])
  349|       |    /* marked as read-only, no file or zero length file name */
  350|      0|    goto skipsave;
  351|       |
  352|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  353|      0|    return CURLE_FAILED_INIT;
  354|       |
  355|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  356|      0|  if(!tempstore)
  357|      0|    return CURLE_OUT_OF_MEMORY;
  358|       |
  359|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  360|      0|  if(!out)
  361|      0|    result = CURLE_WRITE_ERROR;
  362|      0|  else {
  363|      0|    fputs("# Your HSTS cache. https://curl.se/docs/hsts.html\n"
  364|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  365|      0|          out);
  366|      0|    for(e = h->list.head; e; e = n) {
  367|      0|      struct stsentry *sts = e->ptr;
  368|      0|      n = e->next;
  369|      0|      result = hsts_out(sts, out);
  370|      0|      if(result)
  371|      0|        break;
  372|      0|    }
  373|      0|    fclose(out);
  374|      0|    if(!result && Curl_rename(tempstore, file))
  375|      0|      result = CURLE_WRITE_ERROR;
  376|       |
  377|      0|    if(result)
  378|      0|      unlink(tempstore);
  379|      0|  }
  380|      0|  free(tempstore);
  381|      0|  skipsave:
  382|      0|  if(data->set.hsts_write) {
  383|       |    /* if there's a write callback */
  384|      0|    struct curl_index i; /* count */
  385|      0|    i.total = h->list.size;
  386|      0|    i.index = 0;
  387|      0|    for(e = h->list.head; e; e = n) {
  388|      0|      struct stsentry *sts = e->ptr;
  389|      0|      bool stop;
  390|      0|      n = e->next;
  391|      0|      result = hsts_push(data, &i, sts, &stop);
  392|      0|      if(result || stop)
  393|      0|        break;
  394|      0|      i.index++;
  395|      0|    }
  396|      0|  }
  397|      0|  return result;
  398|      0|}
Curl_hsts_loadcb:
  538|    406|{
  539|    406|  if(h)
  540|      0|    return hsts_pull(data, h);
  541|    406|  return CURLE_OK;
  542|    406|}

Curl_http2_init_state:
   83|    406|{
   84|    406|  state->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   85|    406|}
Curl_http2_init_userset:
   92|  1.04k|{
   93|  1.04k|  set->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   94|  1.04k|}
Curl_http2_cleanup_dependencies:
 2482|  1.04k|{
 2483|  1.04k|  while(data->set.stream_dependents) {
 2484|      0|    struct Curl_easy *tmp = data->set.stream_dependents->data;
 2485|      0|    Curl_http2_remove_child(data, tmp);
 2486|      0|    if(data->set.stream_depends_on)
 2487|      0|      Curl_http2_add_child(data->set.stream_depends_on, tmp, FALSE);
 2488|      0|  }
 2489|       |
 2490|  1.04k|  if(data->set.stream_depends_on)
 2491|      0|    Curl_http2_remove_child(data->set.stream_depends_on, data);
 2492|  1.04k|}

Curl_http_auth_cleanup_digest:
  178|  1.04k|{
  179|  1.04k|  Curl_auth_digest_cleanup(&data->state.digest);
  180|  1.04k|  Curl_auth_digest_cleanup(&data->state.proxydigest);
  181|  1.04k|}

Curl_http_auth_cleanup_ntlm:
  266|    406|{
  267|    406|  Curl_auth_cleanup_ntlm(&conn->ntlm);
  268|    406|  Curl_auth_cleanup_ntlm(&conn->proxyntlm);
  269|       |
  270|    406|#if defined(NTLM_WB_ENABLED)
  271|    406|  Curl_http_auth_cleanup_ntlm_wb(conn);
  272|    406|#endif
  273|    406|}

Curl_proxy_connect:
   80|    285|{
   81|    285|  struct connectdata *conn = data->conn;
   82|    285|  if(conn->http_proxy.proxytype == CURLPROXY_HTTPS) {
   83|      0|    const CURLcode result = https_proxy_connect(data, sockindex);
   84|      0|    if(result)
   85|      0|      return result;
   86|      0|    if(!conn->bits.proxy_ssl_connected[sockindex])
   87|      0|      return result; /* wait for HTTPS proxy SSL initialization to complete */
   88|      0|  }
   89|       |
   90|    285|  if(conn->bits.tunnel_proxy && conn->bits.httpproxy) {
   91|      0|#ifndef CURL_DISABLE_PROXY
   92|       |    /* for [protocol] tunneled through HTTP proxy */
   93|      0|    const char *hostname;
   94|      0|    int remote_port;
   95|      0|    CURLcode result;
   96|       |
   97|       |    /* We want "seamless" operations through HTTP proxy tunnel */
   98|       |
   99|       |    /* for the secondary socket (FTP), use the "connect to host"
  100|       |     * but ignore the "connect to port" (use the secondary port)
  101|       |     */
  102|       |
  103|      0|    if(conn->bits.conn_to_host)
  104|      0|      hostname = conn->conn_to_host.name;
  105|      0|    else if(sockindex == SECONDARYSOCKET)
  106|      0|      hostname = conn->secondaryhostname;
  107|      0|    else
  108|      0|      hostname = conn->host.name;
  109|       |
  110|      0|    if(sockindex == SECONDARYSOCKET)
  111|      0|      remote_port = conn->secondary_port;
  112|      0|    else if(conn->bits.conn_to_port)
  113|      0|      remote_port = conn->conn_to_port;
  114|      0|    else
  115|      0|      remote_port = conn->remote_port;
  116|       |
  117|      0|    result = Curl_proxyCONNECT(data, sockindex, hostname, remote_port);
  118|      0|    if(CURLE_OK != result)
  119|      0|      return result;
  120|      0|    Curl_safefree(data->state.aptr.proxyuserpwd);
  121|       |#else
  122|       |    return CURLE_NOT_BUILT_IN;
  123|       |#endif
  124|      0|  }
  125|       |  /* no HTTP tunnel proxy, just return */
  126|    285|  return CURLE_OK;
  127|    285|}
Curl_connect_ongoing:
  136|    570|{
  137|    570|  return conn->connect_state &&
  138|    570|    (conn->connect_state->tunnel_state <= TUNNEL_COMPLETE);
  139|    570|}
Curl_connect_free:
 1021|    285|{
 1022|    285|  struct connectdata *conn = data->conn;
 1023|    285|  struct http_connect_state *s = conn->connect_state;
 1024|    285|  if(s) {
 1025|      0|    free(s);
 1026|      0|    conn->connect_state = NULL;
 1027|      0|  }
 1028|    285|}

Curl_ipv6_scope:
   65|    285|{
   66|       |#ifndef ENABLE_IPV6
   67|       |  (void) sa;
   68|       |#else
   69|    285|  if(sa->sa_family == AF_INET6) {
   70|      0|    const struct sockaddr_in6 * sa6 = (const struct sockaddr_in6 *)(void *) sa;
   71|      0|    const unsigned char *b = sa6->sin6_addr.s6_addr;
   72|      0|    unsigned short w = (unsigned short) ((b[0] << 8) | b[1]);
   73|       |
   74|      0|    if((b[0] & 0xFE) == 0xFC) /* Handle ULAs */
   75|      0|      return IPV6_SCOPE_UNIQUELOCAL;
   76|      0|    switch(w & 0xFFC0) {
   77|      0|    case 0xFE80:
   78|      0|      return IPV6_SCOPE_LINKLOCAL;
   79|      0|    case 0xFEC0:
   80|      0|      return IPV6_SCOPE_SITELOCAL;
   81|      0|    case 0x0000:
   82|      0|      w = b[1] | b[2] | b[3] | b[4] | b[5] | b[6] | b[7] | b[8] | b[9] |
   83|      0|          b[10] | b[11] | b[12] | b[13] | b[14];
   84|      0|      if(w || b[15] != 0x01)
   85|      0|        break;
   86|      0|      return IPV6_SCOPE_NODELOCAL;
   87|      0|    default:
   88|      0|      break;
   89|      0|    }
   90|      0|  }
   91|    285|#endif
   92|       |
   93|    285|  return IPV6_SCOPE_GLOBAL;
   94|    285|}

Curl_llist_init:
   38|   481k|{
   39|   481k|  l->size = 0;
   40|   481k|  l->dtor = dtor;
   41|   481k|  l->head = NULL;
   42|   481k|  l->tail = NULL;
   43|   481k|}
Curl_llist_insert_next:
   60|  3.18k|{
   61|  3.18k|  ne->ptr = (void *) p;
   62|  3.18k|  if(list->size == 0) {
   63|  2.49k|    list->head = ne;
   64|  2.49k|    list->head->prev = NULL;
   65|  2.49k|    list->head->next = NULL;
   66|  2.49k|    list->tail = ne;
   67|  2.49k|  }
   68|    691|  else {
   69|       |    /* if 'e' is NULL here, we insert the new element first in the list */
   70|    691|    ne->next = e?e->next:list->head;
   71|    691|    ne->prev = e;
   72|    691|    if(!e) {
   73|      0|      list->head->prev = ne;
   74|      0|      list->head = ne;
   75|      0|    }
   76|    691|    else if(e->next) {
   77|      0|      e->next->prev = ne;
   78|      0|    }
   79|    691|    else {
   80|    691|      list->tail = ne;
   81|    691|    }
   82|    691|    if(e)
   83|    691|      e->next = ne;
   84|    691|  }
   85|       |
   86|  3.18k|  ++list->size;
   87|  3.18k|}
Curl_llist_remove:
   95|  3.18k|{
   96|  3.18k|  void *ptr;
   97|  3.18k|  if(!e || list->size == 0)
   98|      0|    return;
   99|       |
  100|  3.18k|  if(e == list->head) {
  101|  2.77k|    list->head = e->next;
  102|       |
  103|  2.77k|    if(!list->head)
  104|  2.49k|      list->tail = NULL;
  105|    285|    else
  106|    285|      e->next->prev = NULL;
  107|  2.77k|  }
  108|    406|  else {
  109|    406|    if(e->prev)
  110|    406|      e->prev->next = e->next;
  111|       |
  112|    406|    if(!e->next)
  113|    406|      list->tail = e->prev;
  114|      0|    else
  115|      0|      e->next->prev = e->prev;
  116|    406|  }
  117|       |
  118|  3.18k|  ptr = e->ptr;
  119|       |
  120|  3.18k|  e->ptr  = NULL;
  121|  3.18k|  e->prev = NULL;
  122|  3.18k|  e->next = NULL;
  123|       |
  124|  3.18k|  --list->size;
  125|       |
  126|       |  /* call the dtor() last for when it actually frees the 'e' memory itself */
  127|  3.18k|  if(list->dtor)
  128|    855|    list->dtor(user, ptr);
  129|  3.18k|}
Curl_llist_destroy:
  133|   483k|{
  134|   483k|  if(list) {
  135|   484k|    while(list->size > 0)
  136|    285|      Curl_llist_remove(list, list->tail, user);
  137|   483k|  }
  138|   483k|}
Curl_llist_count:
  142|  1.16k|{
  143|  1.16k|  return list->size;
  144|  1.16k|}

curl_dbg_malloc:
  131|  14.3k|{
  132|  14.3k|  struct memdebug *mem;
  133|  14.3k|  size_t size;
  134|       |
  135|  14.3k|  DEBUGASSERT(wantedsize != 0);
  136|       |
  137|  14.3k|  if(countcheck("malloc", line, source))
  138|      0|    return NULL;
  139|       |
  140|       |  /* alloc at least 64 bytes */
  141|  14.3k|  size = sizeof(struct memdebug) + wantedsize;
  142|       |
  143|  14.3k|  mem = (Curl_cmalloc)(size);
  144|  14.3k|  if(mem) {
  145|  14.3k|    mem->size = wantedsize;
  146|  14.3k|  }
  147|       |
  148|  14.3k|  if(source)
  149|  4.99k|    curl_dbg_log("MEM %s:%d malloc(%zu) = %p\n",
  150|  4.99k|                 source, line, wantedsize,
  151|  4.99k|                 mem ? (void *)mem->mem : (void *)0);
  152|       |
  153|  14.3k|  return (mem ? mem->mem : NULL);
  154|  14.3k|}
curl_dbg_calloc:
  158|  5.92k|{
  159|  5.92k|  struct memdebug *mem;
  160|  5.92k|  size_t size, user_size;
  161|       |
  162|  5.92k|  DEBUGASSERT(wanted_elements != 0);
  163|  5.92k|  DEBUGASSERT(wanted_size != 0);
  164|       |
  165|  5.92k|  if(countcheck("calloc", line, source))
  166|      0|    return NULL;
  167|       |
  168|       |  /* alloc at least 64 bytes */
  169|  5.92k|  user_size = wanted_size * wanted_elements;
  170|  5.92k|  size = sizeof(struct memdebug) + user_size;
  171|       |
  172|  5.92k|  mem = (Curl_ccalloc)(1, size);
  173|  5.92k|  if(mem)
  174|  5.92k|    mem->size = user_size;
  175|       |
  176|  5.92k|  if(source)
  177|  5.92k|    curl_dbg_log("MEM %s:%d calloc(%zu,%zu) = %p\n",
  178|  5.92k|                 source, line, wanted_elements, wanted_size,
  179|  5.92k|                 mem ? (void *)mem->mem : (void *)0);
  180|       |
  181|  5.92k|  return (mem ? mem->mem : NULL);
  182|  5.92k|}
curl_dbg_strdup:
  185|  9.38k|{
  186|  9.38k|  char *mem;
  187|  9.38k|  size_t len;
  188|       |
  189|  9.38k|  DEBUGASSERT(str != NULL);
  190|       |
  191|  9.38k|  if(countcheck("strdup", line, source))
  192|      0|    return NULL;
  193|       |
  194|  9.38k|  len = strlen(str) + 1;
  195|       |
  196|  9.38k|  mem = curl_dbg_malloc(len, 0, NULL); /* NULL prevents logging */
  197|  9.38k|  if(mem)
  198|  9.38k|    memcpy(mem, str, len);
  199|       |
  200|  9.38k|  if(source)
  201|  9.38k|    curl_dbg_log("MEM %s:%d strdup(%p) (%zu) = %p\n",
  202|  9.38k|                 source, line, (const void *)str, len, (const void *)mem);
  203|       |
  204|  9.38k|  return mem;
  205|  9.38k|}
curl_dbg_realloc:
  237|    974|{
  238|    974|  struct memdebug *mem = NULL;
  239|       |
  240|    974|  size_t size = sizeof(struct memdebug) + wantedsize;
  241|       |
  242|    974|  DEBUGASSERT(wantedsize != 0);
  243|       |
  244|    974|  if(countcheck("realloc", line, source))
  245|      0|    return NULL;
  246|       |
  247|       |#ifdef __INTEL_COMPILER
  248|       |#  pragma warning(push)
  249|       |#  pragma warning(disable:1684)
  250|       |   /* 1684: conversion from pointer to same-sized integral type */
  251|       |#endif
  252|       |
  253|    974|  if(ptr)
  254|    152|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  255|       |
  256|       |#ifdef __INTEL_COMPILER
  257|       |#  pragma warning(pop)
  258|       |#endif
  259|       |
  260|    974|  mem = (Curl_crealloc)(mem, size);
  261|    974|  if(source)
  262|    974|    curl_dbg_log("MEM %s:%d realloc(%p, %zu) = %p\n",
  263|    974|                source, line, (void *)ptr, wantedsize,
  264|    974|                mem ? (void *)mem->mem : (void *)0);
  265|       |
  266|    974|  if(mem) {
  267|    974|    mem->size = wantedsize;
  268|    974|    return mem->mem;
  269|    974|  }
  270|       |
  271|      0|  return NULL;
  272|    974|}
curl_dbg_free:
  275|   206k|{
  276|   206k|  if(ptr) {
  277|  21.1k|    struct memdebug *mem;
  278|       |
  279|       |#ifdef __INTEL_COMPILER
  280|       |#  pragma warning(push)
  281|       |#  pragma warning(disable:1684)
  282|       |   /* 1684: conversion from pointer to same-sized integral type */
  283|       |#endif
  284|       |
  285|  21.1k|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  286|       |
  287|       |#ifdef __INTEL_COMPILER
  288|       |#  pragma warning(pop)
  289|       |#endif
  290|       |
  291|       |    /* free for real */
  292|  21.1k|    (Curl_cfree)(mem);
  293|  21.1k|  }
  294|       |
  295|   206k|  if(source && ptr)
  296|  21.1k|    curl_dbg_log("MEM %s:%d free(%p)\n", source, line, (void *)ptr);
  297|   206k|}
curl_dbg_socket:
  301|    472|{
  302|    472|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  303|    472|    "FD %s:%d socket() = %d\n" :
  304|    472|    (sizeof(curl_socket_t) == sizeof(long)) ?
  305|      0|    "FD %s:%d socket() = %ld\n" :
  306|      0|    "FD %s:%d socket() = %zd\n";
  307|       |
  308|    472|  curl_socket_t sockfd;
  309|       |
  310|    472|  if(countcheck("socket", line, source))
  311|      0|    return CURL_SOCKET_BAD;
  312|       |
  313|    472|  sockfd = socket(domain, type, protocol);
  314|       |
  315|    472|  if(source && (sockfd != CURL_SOCKET_BAD))
  316|    472|    curl_dbg_log(fmt, source, line, sockfd);
  317|       |
  318|    472|  return sockfd;
  319|    472|}
curl_dbg_send:
  325|    295|{
  326|    295|  SEND_TYPE_RETV rc;
  327|    295|  if(countcheck("send", line, source))
  328|      0|    return -1;
  329|    295|  rc = send(sockfd, buf, len, flags);
  330|    295|  if(source)
  331|    295|    curl_dbg_log("SEND %s:%d send(%lu) = %ld\n",
  332|    295|                source, line, (unsigned long)len, (long)rc);
  333|    295|  return rc;
  334|    295|}
curl_dbg_recv:
  339|  15.8M|{
  340|  15.8M|  RECV_TYPE_RETV rc;
  341|  15.8M|  if(countcheck("recv", line, source))
  342|      0|    return -1;
  343|  15.8M|  rc = recv(sockfd, buf, len, flags);
  344|  15.8M|  if(source)
  345|  15.8M|    curl_dbg_log("RECV %s:%d recv(%lu) = %ld\n",
  346|  15.8M|                source, line, (unsigned long)len, (long)rc);
  347|  15.8M|  return rc;
  348|  15.8M|}
curl_dbg_socketpair:
  354|    472|{
  355|    472|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  356|    472|    "FD %s:%d socketpair() = %d %d\n" :
  357|    472|    (sizeof(curl_socket_t) == sizeof(long)) ?
  358|      0|    "FD %s:%d socketpair() = %ld %ld\n" :
  359|      0|    "FD %s:%d socketpair() = %zd %zd\n";
  360|       |
  361|    472|  int res = socketpair(domain, type, protocol, socket_vector);
  362|       |
  363|    472|  if(source && (0 == res))
  364|    472|    curl_dbg_log(fmt, source, line, socket_vector[0], socket_vector[1]);
  365|       |
  366|    472|  return res;
  367|    472|}
curl_dbg_mark_sclose:
  392|  1.70k|{
  393|  1.70k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  394|  1.70k|    "FD %s:%d sclose(%d)\n":
  395|  1.70k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  396|      0|    "FD %s:%d sclose(%ld)\n":
  397|      0|    "FD %s:%d sclose(%zd)\n";
  398|       |
  399|  1.70k|  if(source)
  400|  1.70k|    curl_dbg_log(fmt, source, line, sockfd);
  401|  1.70k|}
curl_dbg_sclose:
  405|  1.70k|{
  406|  1.70k|  int res = sclose(sockfd);
  407|  1.70k|  curl_dbg_mark_sclose(sockfd, line, source);
  408|  1.70k|  return res;
  409|  1.70k|}
curl_dbg_fopen:
  413|    472|{
  414|    472|  FILE *res = fopen(file, mode);
  415|       |
  416|    472|  if(source)
  417|    472|    curl_dbg_log("FILE %s:%d fopen(\"%s\",\"%s\") = %p\n",
  418|    472|                source, line, file, mode, (void *)res);
  419|       |
  420|    472|  return res;
  421|    472|}
curl_dbg_fclose:
  434|    472|{
  435|    472|  int res;
  436|       |
  437|    472|  DEBUGASSERT(file != NULL);
  438|       |
  439|    472|  if(source)
  440|    472|    curl_dbg_log("FILE %s:%d fclose(%p)\n",
  441|    472|                 source, line, (void *)file);
  442|       |
  443|    472|  res = fclose(file);
  444|       |
  445|    472|  return res;
  446|    472|}
curl_dbg_log:
  452|  15.9M|{
  453|  15.9M|  char *buf;
  454|  15.9M|  int nchars;
  455|  15.9M|  va_list ap;
  456|       |
  457|  15.9M|  if(!curl_dbg_logfile)
  458|  15.9M|    return;
  459|       |
  460|      0|  buf = (Curl_cmalloc)(LOGLINE_BUFSIZE);
  461|      0|  if(!buf)
  462|      0|    return;
  463|       |
  464|      0|  va_start(ap, format);
  465|      0|  nchars = mvsnprintf(buf, LOGLINE_BUFSIZE, format, ap);
  466|      0|  va_end(ap);
  467|       |
  468|      0|  if(nchars > LOGLINE_BUFSIZE - 1)
  469|      0|    nchars = LOGLINE_BUFSIZE - 1;
  470|       |
  471|      0|  if(nchars > 0)
  472|      0|    fwrite(buf, 1, (size_t)nchars, curl_dbg_logfile);
  473|       |
  474|      0|  (Curl_cfree)(buf);
  475|      0|}
memdebug.c:countcheck:
  106|  15.9M|{
  107|       |  /* if source is NULL, then the call is made internally and this check
  108|       |     should not be made */
  109|  15.9M|  if(memlimit && source) {
  110|      0|    if(!memsize) {
  111|       |      /* log to file */
  112|      0|      curl_dbg_log("LIMIT %s:%d %s reached memlimit\n",
  113|      0|                   source, line, func);
  114|       |      /* log to stderr also */
  115|      0|      fprintf(stderr, "LIMIT %s:%d %s reached memlimit\n",
  116|      0|              source, line, func);
  117|      0|      fflush(curl_dbg_logfile); /* because it might crash now */
  118|      0|      errno = ENOMEM;
  119|      0|      return TRUE; /* RETURN ERROR! */
  120|      0|    }
  121|      0|    else
  122|      0|      memsize--; /* countdown */
  123|       |
  124|       |
  125|      0|  }
  126|       |
  127|  15.9M|  return FALSE; /* allow this */
  128|  15.9M|}

Curl_mime_cleanpart:
 1200|  1.08k|{
 1201|  1.08k|  cleanup_part_content(part);
 1202|  1.08k|  curl_slist_free_all(part->curlheaders);
 1203|  1.08k|  if(part->flags & MIME_USERHEADERS_OWNER)
 1204|      0|    curl_slist_free_all(part->userheaders);
 1205|  1.08k|  Curl_safefree(part->mimetype);
 1206|  1.08k|  Curl_safefree(part->name);
 1207|  1.08k|  Curl_safefree(part->filename);
 1208|  1.08k|  Curl_mime_initpart(part, part->easy);
 1209|  1.08k|}
curl_mime_free:
 1213|     30|{
 1214|     30|  curl_mimepart *part;
 1215|       |
 1216|     30|  if(mime) {
 1217|     30|    mime_subparts_unbind(mime);  /* Be sure it's not referenced anymore. */
 1218|     69|    while(mime->firstpart) {
 1219|     39|      part = mime->firstpart;
 1220|     39|      mime->firstpart = part->nextpart;
 1221|     39|      Curl_mime_cleanpart(part);
 1222|     39|      free(part);
 1223|     39|    }
 1224|     30|    free(mime);
 1225|     30|  }
 1226|     30|}
curl_mime_init:
 1309|     30|{
 1310|     30|  curl_mime *mime;
 1311|       |
 1312|     30|  mime = (curl_mime *) malloc(sizeof(*mime));
 1313|       |
 1314|     30|  if(mime) {
 1315|     30|    mime->easy = easy;
 1316|     30|    mime->parent = NULL;
 1317|     30|    mime->firstpart = NULL;
 1318|     30|    mime->lastpart = NULL;
 1319|       |
 1320|     30|    memset(mime->boundary, '-', 24);
 1321|     30|    if(Curl_rand_hex(easy, (unsigned char *) &mime->boundary[24],
 1322|     30|                     MIME_RAND_BOUNDARY_CHARS + 1)) {
 1323|       |      /* failed to get random separator, bail out */
 1324|      0|      free(mime);
 1325|      0|      return NULL;
 1326|      0|    }
 1327|     30|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1328|     30|  }
 1329|       |
 1330|     30|  return mime;
 1331|     30|}
Curl_mime_initpart:
 1335|  2.17k|{
 1336|  2.17k|  memset((char *) part, 0, sizeof(*part));
 1337|  2.17k|  part->easy = easy;
 1338|  2.17k|  part->lastreadstatus = 1; /* Successful read status. */
 1339|  2.17k|  mimesetstate(&part->state, MIMESTATE_BEGIN, NULL);
 1340|  2.17k|}
curl_mime_addpart:
 1344|     39|{
 1345|     39|  curl_mimepart *part;
 1346|       |
 1347|     39|  if(!mime)
 1348|      0|    return NULL;
 1349|       |
 1350|     39|  part = (curl_mimepart *) malloc(sizeof(*part));
 1351|       |
 1352|     39|  if(part) {
 1353|     39|    Curl_mime_initpart(part, mime->easy);
 1354|     39|    part->parent = mime;
 1355|       |
 1356|     39|    if(mime->lastpart)
 1357|      9|      mime->lastpart->nextpart = part;
 1358|     30|    else
 1359|     30|      mime->firstpart = part;
 1360|       |
 1361|     39|    mime->lastpart = part;
 1362|     39|  }
 1363|       |
 1364|     39|  return part;
 1365|     39|}
Curl_mime_set_subparts:
 1570|     12|{
 1571|     12|  curl_mime *root;
 1572|       |
 1573|     12|  if(!part)
 1574|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1575|       |
 1576|       |  /* Accept setting twice the same subparts. */
 1577|     12|  if(part->kind == MIMEKIND_MULTIPART && part->arg == subparts)
 1578|      0|    return CURLE_OK;
 1579|       |
 1580|     12|  cleanup_part_content(part);
 1581|       |
 1582|     12|  if(subparts) {
 1583|       |    /* Must belong to the same data handle. */
 1584|     12|    if(part->easy && subparts->easy && part->easy != subparts->easy)
 1585|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1586|       |
 1587|       |    /* Should not have been attached already. */
 1588|     12|    if(subparts->parent)
 1589|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1590|       |
 1591|       |    /* Should not be the part's root. */
 1592|     12|    root = part->parent;
 1593|     12|    if(root) {
 1594|      0|      while(root->parent && root->parent->parent)
 1595|      0|        root = root->parent->parent;
 1596|      0|      if(subparts == root) {
 1597|      0|        if(part->easy)
 1598|      0|          failf(part->easy, "Can't add itself as a subpart!");
 1599|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
 1600|      0|      }
 1601|      0|    }
 1602|       |
 1603|     12|    subparts->parent = part;
 1604|       |    /* Subparts are processed internally: no read callback. */
 1605|     12|    part->seekfunc = mime_subparts_seek;
 1606|     12|    part->freefunc = take_ownership? mime_subparts_free: mime_subparts_unbind;
 1607|     12|    part->arg = subparts;
 1608|     12|    part->datasize = -1;
 1609|     12|    part->kind = MIMEKIND_MULTIPART;
 1610|     12|  }
 1611|       |
 1612|     12|  return CURLE_OK;
 1613|     12|}
mime.c:cleanup_part_content:
 1157|  1.10k|{
 1158|  1.10k|  if(part->freefunc)
 1159|      0|    part->freefunc(part->arg);
 1160|       |
 1161|  1.10k|  part->readfunc = NULL;
 1162|  1.10k|  part->seekfunc = NULL;
 1163|  1.10k|  part->freefunc = NULL;
 1164|  1.10k|  part->arg = (void *) part;          /* Defaults to part itself. */
 1165|  1.10k|  part->data = NULL;
 1166|  1.10k|  part->fp = NULL;
 1167|  1.10k|  part->datasize = (curl_off_t) 0;    /* No size yet. */
 1168|  1.10k|  cleanup_encoder_state(&part->encstate);
 1169|  1.10k|  part->kind = MIMEKIND_NONE;
 1170|  1.10k|  part->flags &= ~MIME_FAST_READ;
 1171|  1.10k|  part->lastreadstatus = 1; /* Successful read status. */
 1172|  1.10k|  part->state.state = MIMESTATE_BEGIN;
 1173|  1.10k|}
mime.c:cleanup_encoder_state:
  347|  1.10k|{
  348|  1.10k|  p->pos = 0;
  349|  1.10k|  p->bufbeg = 0;
  350|  1.10k|  p->bufend = 0;
  351|  1.10k|}
mime.c:mime_subparts_unbind:
 1188|     30|{
 1189|     30|  curl_mime *mime = (curl_mime *) ptr;
 1190|       |
 1191|     30|  if(mime && mime->parent) {
 1192|     12|    mime->parent->freefunc = NULL;  /* Be sure we won't be called again. */
 1193|     12|    cleanup_part_content(mime->parent);  /* Avoid dangling pointer in part. */
 1194|     12|    mime->parent = NULL;
 1195|     12|  }
 1196|     30|}
mime.c:mimesetstate:
  274|  2.20k|{
  275|  2.20k|  state->state = tok;
  276|  2.20k|  state->ptr = ptr;
  277|  2.20k|  state->offset = 0;
  278|  2.20k|}

curl_mvsnprintf:
 1009|  4.55k|{
 1010|  4.55k|  int retcode;
 1011|  4.55k|  struct nsprintf info;
 1012|       |
 1013|  4.55k|  info.buffer = buffer;
 1014|  4.55k|  info.length = 0;
 1015|  4.55k|  info.max = maxlength;
 1016|       |
 1017|  4.55k|  retcode = dprintf_formatf(&info, addbyter, format, ap_save);
 1018|  4.55k|  if((retcode != -1) && info.max) {
 1019|       |    /* we terminate this with a zero byte */
 1020|  4.55k|    if(info.max == info.length) {
 1021|       |      /* we're at maximum, scrap the last letter */
 1022|      0|      info.buffer[-1] = 0;
 1023|      0|      retcode--; /* don't count the nul byte */
 1024|      0|    }
 1025|  4.55k|    else
 1026|  4.55k|      info.buffer[0] = 0;
 1027|  4.55k|  }
 1028|  4.55k|  return retcode;
 1029|  4.55k|}
curl_msnprintf:
 1032|  4.55k|{
 1033|  4.55k|  int retcode;
 1034|  4.55k|  va_list ap_save; /* argument pointer */
 1035|  4.55k|  va_start(ap_save, format);
 1036|  4.55k|  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
 1037|  4.55k|  va_end(ap_save);
 1038|  4.55k|  return retcode;
 1039|  4.55k|}
curl_mvaprintf:
 1074|    822|{
 1075|    822|  int retcode;
 1076|    822|  struct asprintf info;
 1077|    822|  struct dynbuf dyn;
 1078|    822|  info.b = &dyn;
 1079|    822|  Curl_dyn_init(info.b, DYN_APRINTF);
 1080|    822|  info.fail = 0;
 1081|       |
 1082|    822|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1083|    822|  if((-1 == retcode) || info.fail) {
 1084|      0|    Curl_dyn_free(info.b);
 1085|      0|    return NULL;
 1086|      0|  }
 1087|    822|  if(Curl_dyn_len(info.b))
 1088|    822|    return Curl_dyn_ptr(info.b);
 1089|      0|  return strdup("");
 1090|    822|}
curl_maprintf:
 1093|    822|{
 1094|    822|  va_list ap_save;
 1095|    822|  char *s;
 1096|    822|  va_start(ap_save, format);
 1097|    822|  s = curl_mvaprintf(format, ap_save);
 1098|    822|  va_end(ap_save);
 1099|    822|  return s;
 1100|    822|}
mprintf.c:dprintf_formatf:
  570|  5.37k|{
  571|       |  /* Base-36 digits for numbers.  */
  572|  5.37k|  const char *digits = lower_digits;
  573|       |
  574|       |  /* Pointer into the format string.  */
  575|  5.37k|  char *f;
  576|       |
  577|       |  /* Number of characters written.  */
  578|  5.37k|  int done = 0;
  579|       |
  580|  5.37k|  long param; /* current parameter to read */
  581|  5.37k|  long param_num = 0; /* parameter counter */
  582|       |
  583|  5.37k|  struct va_stack vto[MAX_PARAMETERS];
  584|  5.37k|  char *endpos[MAX_PARAMETERS];
  585|  5.37k|  char **end;
  586|  5.37k|  char work[BUFFSIZE];
  587|  5.37k|  struct va_stack *p;
  588|       |
  589|       |  /* 'workend' points to the final buffer byte position, but with an extra
  590|       |     byte as margin to avoid the (false?) warning Coverity gives us
  591|       |     otherwise */
  592|  5.37k|  char *workend = &work[sizeof(work) - 2];
  593|       |
  594|       |  /* Do the actual %-code parsing */
  595|  5.37k|  if(dprintf_Pass1(format, vto, endpos, ap_save))
  596|      0|    return -1;
  597|       |
  598|  5.37k|  end = &endpos[0]; /* the initial end-position from the list dprintf_Pass1()
  599|       |                       created for us */
  600|       |
  601|  5.37k|  f = (char *)format;
  602|  22.2k|  while(*f != '\0') {
  603|       |    /* Format spec modifiers.  */
  604|  16.8k|    int is_alt;
  605|       |
  606|       |    /* Width of a field.  */
  607|  16.8k|    long width;
  608|       |
  609|       |    /* Precision of a field.  */
  610|  16.8k|    long prec;
  611|       |
  612|       |    /* Decimal integer is negative.  */
  613|  16.8k|    int is_neg;
  614|       |
  615|       |    /* Base of a number to be written.  */
  616|  16.8k|    unsigned long base;
  617|       |
  618|       |    /* Integral values to be written.  */
  619|  16.8k|    mp_uintmax_t num;
  620|       |
  621|       |    /* Used to convert negative in positive.  */
  622|  16.8k|    mp_intmax_t signed_num;
  623|       |
  624|  16.8k|    char *w;
  625|       |
  626|  16.8k|    if(*f != '%') {
  627|       |      /* This isn't a format spec, so write everything out until the next one
  628|       |         OR end of string is reached.  */
  629|  4.11k|      do {
  630|  4.11k|        OUTCHAR(*f);
  631|  4.11k|      } while(*++f && ('%' != *f));
  632|  1.99k|      continue;
  633|  1.99k|    }
  634|       |
  635|  14.8k|    ++f;
  636|       |
  637|       |    /* Check for "%%".  Note that although the ANSI standard lists
  638|       |       '%' as a conversion specifier, it says "The complete format
  639|       |       specification shall be `%%'," so we can avoid all the width
  640|       |       and precision processing.  */
  641|  14.8k|    if(*f == '%') {
  642|  2.50k|      ++f;
  643|  2.50k|      OUTCHAR('%');
  644|  2.50k|      continue;
  645|  2.50k|    }
  646|       |
  647|       |    /* If this is a positional parameter, the position must follow immediately
  648|       |       after the %, thus create a %<num>$ sequence */
  649|  12.3k|    param = dprintf_DollarString(f, &f);
  650|       |
  651|  12.3k|    if(!param)
  652|  12.3k|      param = param_num;
  653|      0|    else
  654|      0|      --param;
  655|       |
  656|  12.3k|    param_num++; /* increase this always to allow "%2$s %1$s %s" and then the
  657|       |                    third %s will pick the 3rd argument */
  658|       |
  659|  12.3k|    p = &vto[param];
  660|       |
  661|       |    /* pick up the specified width */
  662|  12.3k|    if(p->flags & FLAGS_WIDTHPARAM) {
  663|      0|      width = (long)vto[p->width].data.num.as_signed;
  664|      0|      param_num++; /* since the width is extracted from a parameter, we
  665|       |                      must skip that to get to the next one properly */
  666|      0|      if(width < 0) {
  667|       |        /* "A negative field width is taken as a '-' flag followed by a
  668|       |           positive field width." */
  669|      0|        width = -width;
  670|      0|        p->flags |= FLAGS_LEFT;
  671|      0|        p->flags &= ~FLAGS_PAD_NIL;
  672|      0|      }
  673|      0|    }
  674|  12.3k|    else
  675|  12.3k|      width = p->width;
  676|       |
  677|       |    /* pick up the specified precision */
  678|  12.3k|    if(p->flags & FLAGS_PRECPARAM) {
  679|      0|      prec = (long)vto[p->precision].data.num.as_signed;
  680|      0|      param_num++; /* since the precision is extracted from a parameter, we
  681|       |                      must skip that to get to the next one properly */
  682|      0|      if(prec < 0)
  683|       |        /* "A negative precision is taken as if the precision were
  684|       |           omitted." */
  685|      0|        prec = -1;
  686|      0|    }
  687|  12.3k|    else if(p->flags & FLAGS_PREC)
  688|      0|      prec = p->precision;
  689|  12.3k|    else
  690|  12.3k|      prec = -1;
  691|       |
  692|  12.3k|    is_alt = (p->flags & FLAGS_ALT) ? 1 : 0;
  693|       |
  694|  12.3k|    switch(p->type) {
  695|  4.68k|    case FORMAT_INT:
  696|  4.68k|      num = p->data.num.as_unsigned;
  697|  4.68k|      if(p->flags & FLAGS_CHAR) {
  698|       |        /* Character.  */
  699|      0|        if(!(p->flags & FLAGS_LEFT))
  700|      0|          while(--width > 0)
  701|      0|            OUTCHAR(' ');
  702|      0|        OUTCHAR((char) num);
  703|      0|        if(p->flags & FLAGS_LEFT)
  704|      0|          while(--width > 0)
  705|      0|            OUTCHAR(' ');
  706|      0|        break;
  707|      0|      }
  708|  4.68k|      if(p->flags & FLAGS_OCTAL) {
  709|       |        /* Octal unsigned integer.  */
  710|      0|        base = 8;
  711|      0|        goto unsigned_number;
  712|      0|      }
  713|  4.68k|      else if(p->flags & FLAGS_HEX) {
  714|       |        /* Hexadecimal unsigned integer.  */
  715|       |
  716|  2.50k|        digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  717|  2.50k|        base = 16;
  718|  2.50k|        goto unsigned_number;
  719|  2.50k|      }
  720|  2.18k|      else if(p->flags & FLAGS_UNSIGNED) {
  721|       |        /* Decimal unsigned integer.  */
  722|  1.03k|        base = 10;
  723|  1.03k|        goto unsigned_number;
  724|  1.03k|      }
  725|       |
  726|       |      /* Decimal integer.  */
  727|  1.14k|      base = 10;
  728|       |
  729|  1.14k|      is_neg = (p->data.num.as_signed < (mp_intmax_t)0) ? 1 : 0;
  730|  1.14k|      if(is_neg) {
  731|       |        /* signed_num might fail to hold absolute negative minimum by 1 */
  732|      0|        signed_num = p->data.num.as_signed + (mp_intmax_t)1;
  733|      0|        signed_num = -signed_num;
  734|      0|        num = (mp_uintmax_t)signed_num;
  735|      0|        num += (mp_uintmax_t)1;
  736|      0|      }
  737|       |
  738|  1.14k|      goto number;
  739|       |
  740|  3.54k|      unsigned_number:
  741|       |      /* Unsigned number of base BASE.  */
  742|  3.54k|      is_neg = 0;
  743|       |
  744|  4.68k|      number:
  745|       |      /* Number of base BASE.  */
  746|       |
  747|       |      /* Supply a default precision if none was given.  */
  748|  4.68k|      if(prec == -1)
  749|  4.68k|        prec = 1;
  750|       |
  751|       |      /* Put the number in WORK.  */
  752|  4.68k|      w = workend;
  753|  17.8k|      while(num > 0) {
  754|  13.1k|        *w-- = digits[num % base];
  755|  13.1k|        num /= base;
  756|  13.1k|      }
  757|  4.68k|      width -= (long)(workend - w);
  758|  4.68k|      prec -= (long)(workend - w);
  759|       |
  760|  4.68k|      if(is_alt && base == 8 && prec <= 0) {
  761|      0|        *w-- = '0';
  762|      0|        --width;
  763|      0|      }
  764|       |
  765|  4.68k|      if(prec > 0) {
  766|    106|        width -= prec;
  767|    212|        while(prec-- > 0 && w >= work)
  768|    106|          *w-- = '0';
  769|    106|      }
  770|       |
  771|  4.68k|      if(is_alt && base == 16)
  772|      0|        width -= 2;
  773|       |
  774|  4.68k|      if(is_neg || (p->flags & FLAGS_SHOWSIGN) || (p->flags & FLAGS_SPACE))
  775|      0|        --width;
  776|       |
  777|  4.68k|      if(!(p->flags & FLAGS_LEFT) && !(p->flags & FLAGS_PAD_NIL))
  778|  2.18k|        while(width-- > 0)
  779|      0|          OUTCHAR(' ');
  780|       |
  781|  4.68k|      if(is_neg)
  782|      0|        OUTCHAR('-');
  783|  4.68k|      else if(p->flags & FLAGS_SHOWSIGN)
  784|      0|        OUTCHAR('+');
  785|  4.68k|      else if(p->flags & FLAGS_SPACE)
  786|      0|        OUTCHAR(' ');
  787|       |
  788|  4.68k|      if(is_alt && base == 16) {
  789|      0|        OUTCHAR('0');
  790|      0|        if(p->flags & FLAGS_UPPER)
  791|      0|          OUTCHAR('X');
  792|      0|        else
  793|      0|          OUTCHAR('x');
  794|      0|      }
  795|       |
  796|  4.68k|      if(!(p->flags & FLAGS_LEFT) && (p->flags & FLAGS_PAD_NIL))
  797|  2.50k|        while(width-- > 0)
  798|      0|          OUTCHAR('0');
  799|       |
  800|       |      /* Write the number.  */
  801|  17.9k|      while(++w <= workend) {
  802|  13.2k|        OUTCHAR(*w);
  803|  13.2k|      }
  804|       |
  805|  4.68k|      if(p->flags & FLAGS_LEFT)
  806|      0|        while(width-- > 0)
  807|      0|          OUTCHAR(' ');
  808|  4.68k|      break;
  809|       |
  810|  7.68k|    case FORMAT_STRING:
  811|       |            /* String.  */
  812|  7.68k|      {
  813|  7.68k|        static const char null[] = "(nil)";
  814|  7.68k|        const char *str;
  815|  7.68k|        size_t len;
  816|       |
  817|  7.68k|        str = (char *) p->data.str;
  818|  7.68k|        if(!str) {
  819|       |          /* Write null[] if there's space.  */
  820|      0|          if(prec == -1 || prec >= (long) sizeof(null) - 1) {
  821|      0|            str = null;
  822|      0|            len = sizeof(null) - 1;
  823|       |            /* Disable quotes around (nil) */
  824|      0|            p->flags &= (~FLAGS_ALT);
  825|      0|          }
  826|      0|          else {
  827|      0|            str = "";
  828|      0|            len = 0;
  829|      0|          }
  830|      0|        }
  831|  7.68k|        else if(prec != -1)
  832|      0|          len = (size_t)prec;
  833|  7.68k|        else
  834|  7.68k|          len = strlen(str);
  835|       |
  836|  7.68k|        width -= (len > LONG_MAX) ? LONG_MAX : (long)len;
  837|       |
  838|  7.68k|        if(p->flags & FLAGS_ALT)
  839|      0|          OUTCHAR('"');
  840|       |
  841|  7.68k|        if(!(p->flags&FLAGS_LEFT))
  842|  7.68k|          while(width-- > 0)
  843|      0|            OUTCHAR(' ');
  844|       |
  845|  39.1k|        for(; len && *str; len--)
  846|  31.4k|          OUTCHAR(*str++);
  847|  7.68k|        if(p->flags&FLAGS_LEFT)
  848|      0|          while(width-- > 0)
  849|      0|            OUTCHAR(' ');
  850|       |
  851|  7.68k|        if(p->flags & FLAGS_ALT)
  852|      0|          OUTCHAR('"');
  853|  7.68k|      }
  854|  7.68k|      break;
  855|       |
  856|  7.68k|    case FORMAT_PTR:
  857|       |      /* Generic pointer.  */
  858|      0|      {
  859|      0|        void *ptr;
  860|      0|        ptr = (void *) p->data.ptr;
  861|      0|        if(ptr != NULL) {
  862|       |          /* If the pointer is not NULL, write it as a %#x spec.  */
  863|      0|          base = 16;
  864|      0|          digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  865|      0|          is_alt = 1;
  866|      0|          num = (size_t) ptr;
  867|      0|          is_neg = 0;
  868|      0|          goto number;
  869|      0|        }
  870|      0|        else {
  871|       |          /* Write "(nil)" for a nil pointer.  */
  872|      0|          static const char strnil[] = "(nil)";
  873|      0|          const char *point;
  874|       |
  875|      0|          width -= (long)(sizeof(strnil) - 1);
  876|      0|          if(p->flags & FLAGS_LEFT)
  877|      0|            while(width-- > 0)
  878|      0|              OUTCHAR(' ');
  879|      0|          for(point = strnil; *point != '\0'; ++point)
  880|      0|            OUTCHAR(*point);
  881|      0|          if(!(p->flags & FLAGS_LEFT))
  882|      0|            while(width-- > 0)
  883|      0|              OUTCHAR(' ');
  884|      0|        }
  885|      0|      }
  886|      0|      break;
  887|       |
  888|      0|    case FORMAT_DOUBLE:
  889|      0|      {
  890|      0|        char formatbuf[32]="%";
  891|      0|        char *fptr = &formatbuf[1];
  892|      0|        size_t left = sizeof(formatbuf)-strlen(formatbuf);
  893|      0|        int len;
  894|       |
  895|      0|        width = -1;
  896|      0|        if(p->flags & FLAGS_WIDTH)
  897|      0|          width = p->width;
  898|      0|        else if(p->flags & FLAGS_WIDTHPARAM)
  899|      0|          width = (long)vto[p->width].data.num.as_signed;
  900|       |
  901|      0|        prec = -1;
  902|      0|        if(p->flags & FLAGS_PREC)
  903|      0|          prec = p->precision;
  904|      0|        else if(p->flags & FLAGS_PRECPARAM)
  905|      0|          prec = (long)vto[p->precision].data.num.as_signed;
  906|       |
  907|      0|        if(p->flags & FLAGS_LEFT)
  908|      0|          *fptr++ = '-';
  909|      0|        if(p->flags & FLAGS_SHOWSIGN)
  910|      0|          *fptr++ = '+';
  911|      0|        if(p->flags & FLAGS_SPACE)
  912|      0|          *fptr++ = ' ';
  913|      0|        if(p->flags & FLAGS_ALT)
  914|      0|          *fptr++ = '#';
  915|       |
  916|      0|        *fptr = 0;
  917|       |
  918|      0|        if(width >= 0) {
  919|      0|          if(width >= (long)sizeof(work))
  920|      0|            width = sizeof(work)-1;
  921|       |          /* RECURSIVE USAGE */
  922|      0|          len = curl_msnprintf(fptr, left, "%ld", width);
  923|      0|          fptr += len;
  924|      0|          left -= len;
  925|      0|        }
  926|      0|        if(prec >= 0) {
  927|       |          /* for each digit in the integer part, we can have one less
  928|       |             precision */
  929|      0|          size_t maxprec = sizeof(work) - 2;
  930|      0|          double val = p->data.dnum;
  931|      0|          if(width > 0 && prec <= width)
  932|      0|            maxprec -= width;
  933|      0|          while(val >= 10.0) {
  934|      0|            val /= 10;
  935|      0|            maxprec--;
  936|      0|          }
  937|       |
  938|      0|          if(prec > (long)maxprec)
  939|      0|            prec = (long)maxprec-1;
  940|      0|          if(prec < 0)
  941|      0|            prec = 0;
  942|       |          /* RECURSIVE USAGE */
  943|      0|          len = curl_msnprintf(fptr, left, ".%ld", prec);
  944|      0|          fptr += len;
  945|      0|        }
  946|      0|        if(p->flags & FLAGS_LONG)
  947|      0|          *fptr++ = 'l';
  948|       |
  949|      0|        if(p->flags & FLAGS_FLOATE)
  950|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'E':'e');
  951|      0|        else if(p->flags & FLAGS_FLOATG)
  952|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'G' : 'g');
  953|      0|        else
  954|      0|          *fptr++ = 'f';
  955|       |
  956|      0|        *fptr = 0; /* and a final zero termination */
  957|       |
  958|       |        /* NOTE NOTE NOTE!! Not all sprintf implementations return number of
  959|       |           output characters */
  960|      0|        (sprintf)(work, formatbuf, p->data.dnum);
  961|      0|        DEBUGASSERT(strlen(work) <= sizeof(work));
  962|      0|        for(fptr = work; *fptr; fptr++)
  963|      0|          OUTCHAR(*fptr);
  964|      0|      }
  965|      0|      break;
  966|       |
  967|      0|    case FORMAT_INTPTR:
  968|       |      /* Answer the count of characters written.  */
  969|      0|#ifdef HAVE_LONG_LONG_TYPE
  970|      0|      if(p->flags & FLAGS_LONGLONG)
  971|      0|        *(LONG_LONG_TYPE *) p->data.ptr = (LONG_LONG_TYPE)done;
  972|      0|      else
  973|      0|#endif
  974|      0|        if(p->flags & FLAGS_LONG)
  975|      0|          *(long *) p->data.ptr = (long)done;
  976|      0|      else if(!(p->flags & FLAGS_SHORT))
  977|      0|        *(int *) p->data.ptr = (int)done;
  978|      0|      else
  979|      0|        *(short *) p->data.ptr = (short)done;
  980|      0|      break;
  981|       |
  982|      0|    default:
  983|      0|      break;
  984|  12.3k|    }
  985|  12.3k|    f = *end++; /* goto end of %-code */
  986|       |
  987|  12.3k|  }
  988|  5.37k|  return done;
  989|  5.37k|}
mprintf.c:dprintf_Pass1:
  230|  5.37k|{
  231|  5.37k|  char *fmt = (char *)format;
  232|  5.37k|  int param_num = 0;
  233|  5.37k|  long this_param;
  234|  5.37k|  long width;
  235|  5.37k|  long precision;
  236|  5.37k|  int flags;
  237|  5.37k|  long max_param = 0;
  238|  5.37k|  long i;
  239|       |
  240|  36.7k|  while(*fmt) {
  241|  31.3k|    if(*fmt++ == '%') {
  242|  14.8k|      if(*fmt == '%') {
  243|  2.50k|        fmt++;
  244|  2.50k|        continue; /* while */
  245|  2.50k|      }
  246|       |
  247|  12.3k|      flags = FLAGS_NEW;
  248|       |
  249|       |      /* Handle the positional case (N$) */
  250|       |
  251|  12.3k|      param_num++;
  252|       |
  253|  12.3k|      this_param = dprintf_DollarString(fmt, &fmt);
  254|  12.3k|      if(0 == this_param)
  255|       |        /* we got no positional, get the next counter */
  256|  12.3k|        this_param = param_num;
  257|       |
  258|  12.3k|      if(this_param > max_param)
  259|  12.3k|        max_param = this_param;
  260|       |
  261|       |      /*
  262|       |       * The parameter with number 'i' should be used. Next, we need
  263|       |       * to get SIZE and TYPE of the parameter. Add the information
  264|       |       * to our array.
  265|       |       */
  266|       |
  267|  12.3k|      width = 0;
  268|  12.3k|      precision = 0;
  269|       |
  270|       |      /* Handle the flags */
  271|       |
  272|  16.0k|      while(dprintf_IsQualifierNoDollar(fmt)) {
  273|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  274|       |        if(!strncmp(fmt, "I32", 3)) {
  275|       |          flags |= FLAGS_LONG;
  276|       |          fmt += 3;
  277|       |        }
  278|       |        else if(!strncmp(fmt, "I64", 3)) {
  279|       |          flags |= FLAGS_LONGLONG;
  280|       |          fmt += 3;
  281|       |        }
  282|       |        else
  283|       |#endif
  284|       |
  285|  3.65k|        switch(*fmt++) {
  286|      0|        case ' ':
  287|      0|          flags |= FLAGS_SPACE;
  288|      0|          break;
  289|      0|        case '+':
  290|      0|          flags |= FLAGS_SHOWSIGN;
  291|      0|          break;
  292|      0|        case '-':
  293|      0|          flags |= FLAGS_LEFT;
  294|      0|          flags &= ~FLAGS_PAD_NIL;
  295|      0|          break;
  296|      0|        case '#':
  297|      0|          flags |= FLAGS_ALT;
  298|      0|          break;
  299|      0|        case '.':
  300|      0|          if('*' == *fmt) {
  301|       |            /* The precision is picked from a specified parameter */
  302|       |
  303|      0|            flags |= FLAGS_PRECPARAM;
  304|      0|            fmt++;
  305|      0|            param_num++;
  306|       |
  307|      0|            i = dprintf_DollarString(fmt, &fmt);
  308|      0|            if(i)
  309|      0|              precision = i;
  310|      0|            else
  311|      0|              precision = param_num;
  312|       |
  313|      0|            if(precision > max_param)
  314|      0|              max_param = precision;
  315|      0|          }
  316|      0|          else {
  317|      0|            flags |= FLAGS_PREC;
  318|      0|            precision = strtol(fmt, &fmt, 10);
  319|      0|          }
  320|      0|          break;
  321|      0|        case 'h':
  322|      0|          flags |= FLAGS_SHORT;
  323|      0|          break;
  324|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  325|       |        case 'I':
  326|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  327|       |          flags |= FLAGS_LONGLONG;
  328|       |#else
  329|       |          flags |= FLAGS_LONG;
  330|       |#endif
  331|       |          break;
  332|       |#endif
  333|  1.14k|        case 'l':
  334|  1.14k|          if(flags & FLAGS_LONG)
  335|      0|            flags |= FLAGS_LONGLONG;
  336|  1.14k|          else
  337|  1.14k|            flags |= FLAGS_LONG;
  338|  1.14k|          break;
  339|      0|        case 'L':
  340|      0|          flags |= FLAGS_LONGDOUBLE;
  341|      0|          break;
  342|      0|        case 'q':
  343|      0|          flags |= FLAGS_LONGLONG;
  344|      0|          break;
  345|      0|        case 'z':
  346|       |          /* the code below generates a warning if -Wunreachable-code is
  347|       |             used */
  348|       |#if (SIZEOF_SIZE_T > SIZEOF_LONG)
  349|       |          flags |= FLAGS_LONGLONG;
  350|       |#else
  351|      0|          flags |= FLAGS_LONG;
  352|      0|#endif
  353|      0|          break;
  354|      0|        case 'O':
  355|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  356|       |          flags |= FLAGS_LONGLONG;
  357|       |#else
  358|      0|          flags |= FLAGS_LONG;
  359|      0|#endif
  360|      0|          break;
  361|  2.50k|        case '0':
  362|  2.50k|          if(!(flags & FLAGS_LEFT))
  363|  2.50k|            flags |= FLAGS_PAD_NIL;
  364|       |          /* FALLTHROUGH */
  365|  2.50k|        case '1': case '2': case '3': case '4':
  366|  2.50k|        case '5': case '6': case '7': case '8': case '9':
  367|  2.50k|          flags |= FLAGS_WIDTH;
  368|  2.50k|          width = strtol(fmt-1, &fmt, 10);
  369|  2.50k|          break;
  370|      0|        case '*':  /* Special case */
  371|      0|          flags |= FLAGS_WIDTHPARAM;
  372|      0|          param_num++;
  373|       |
  374|      0|          i = dprintf_DollarString(fmt, &fmt);
  375|      0|          if(i)
  376|      0|            width = i;
  377|      0|          else
  378|      0|            width = param_num;
  379|      0|          if(width > max_param)
  380|      0|            max_param = width;
  381|      0|          break;
  382|      0|        case '\0':
  383|      0|          fmt--;
  384|      0|        default:
  385|      0|          break;
  386|  3.65k|        }
  387|  3.65k|      } /* switch */
  388|       |
  389|       |      /* Handle the specifier */
  390|       |
  391|  12.3k|      i = this_param - 1;
  392|       |
  393|  12.3k|      if((i < 0) || (i >= MAX_PARAMETERS))
  394|       |        /* out of allowed range */
  395|      0|        return 1;
  396|       |
  397|  12.3k|      switch (*fmt) {
  398|      0|      case 'S':
  399|      0|        flags |= FLAGS_ALT;
  400|       |        /* FALLTHROUGH */
  401|  7.68k|      case 's':
  402|  7.68k|        vto[i].type = FORMAT_STRING;
  403|  7.68k|        break;
  404|      0|      case 'n':
  405|      0|        vto[i].type = FORMAT_INTPTR;
  406|      0|        break;
  407|      0|      case 'p':
  408|      0|        vto[i].type = FORMAT_PTR;
  409|      0|        break;
  410|  1.14k|      case 'd': case 'i':
  411|  1.14k|        vto[i].type = FORMAT_INT;
  412|  1.14k|        break;
  413|  1.03k|      case 'u':
  414|  1.03k|        vto[i].type = FORMAT_INT;
  415|  1.03k|        flags |= FLAGS_UNSIGNED;
  416|  1.03k|        break;
  417|      0|      case 'o':
  418|      0|        vto[i].type = FORMAT_INT;
  419|      0|        flags |= FLAGS_OCTAL;
  420|      0|        break;
  421|  2.50k|      case 'x':
  422|  2.50k|        vto[i].type = FORMAT_INT;
  423|  2.50k|        flags |= FLAGS_HEX|FLAGS_UNSIGNED;
  424|  2.50k|        break;
  425|      0|      case 'X':
  426|      0|        vto[i].type = FORMAT_INT;
  427|      0|        flags |= FLAGS_HEX|FLAGS_UPPER|FLAGS_UNSIGNED;
  428|      0|        break;
  429|      0|      case 'c':
  430|      0|        vto[i].type = FORMAT_INT;
  431|      0|        flags |= FLAGS_CHAR;
  432|      0|        break;
  433|      0|      case 'f':
  434|      0|        vto[i].type = FORMAT_DOUBLE;
  435|      0|        break;
  436|      0|      case 'e':
  437|      0|        vto[i].type = FORMAT_DOUBLE;
  438|      0|        flags |= FLAGS_FLOATE;
  439|      0|        break;
  440|      0|      case 'E':
  441|      0|        vto[i].type = FORMAT_DOUBLE;
  442|      0|        flags |= FLAGS_FLOATE|FLAGS_UPPER;
  443|      0|        break;
  444|      0|      case 'g':
  445|      0|        vto[i].type = FORMAT_DOUBLE;
  446|      0|        flags |= FLAGS_FLOATG;
  447|      0|        break;
  448|      0|      case 'G':
  449|      0|        vto[i].type = FORMAT_DOUBLE;
  450|      0|        flags |= FLAGS_FLOATG|FLAGS_UPPER;
  451|      0|        break;
  452|      0|      default:
  453|      0|        vto[i].type = FORMAT_UNKNOWN;
  454|      0|        break;
  455|  12.3k|      } /* switch */
  456|       |
  457|  12.3k|      vto[i].flags = flags;
  458|  12.3k|      vto[i].width = width;
  459|  12.3k|      vto[i].precision = precision;
  460|       |
  461|  12.3k|      if(flags & FLAGS_WIDTHPARAM) {
  462|       |        /* we have the width specified from a parameter, so we make that
  463|       |           parameter's info setup properly */
  464|      0|        long k = width - 1;
  465|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  466|       |          /* out of allowed range */
  467|      0|          return 1;
  468|      0|        vto[i].width = k;
  469|      0|        vto[k].type = FORMAT_WIDTH;
  470|      0|        vto[k].flags = FLAGS_NEW;
  471|       |        /* can't use width or precision of width! */
  472|      0|        vto[k].width = 0;
  473|      0|        vto[k].precision = 0;
  474|      0|      }
  475|  12.3k|      if(flags & FLAGS_PRECPARAM) {
  476|       |        /* we have the precision specified from a parameter, so we make that
  477|       |           parameter's info setup properly */
  478|      0|        long k = precision - 1;
  479|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  480|       |          /* out of allowed range */
  481|      0|          return 1;
  482|      0|        vto[i].precision = k;
  483|      0|        vto[k].type = FORMAT_WIDTH;
  484|      0|        vto[k].flags = FLAGS_NEW;
  485|       |        /* can't use width or precision of width! */
  486|      0|        vto[k].width = 0;
  487|      0|        vto[k].precision = 0;
  488|      0|      }
  489|  12.3k|      *endpos++ = fmt + ((*fmt == '\0') ? 0 : 1); /* end of this sequence */
  490|  12.3k|    }
  491|  31.3k|  }
  492|       |
  493|       |  /* Read the arg list parameters into our data list */
  494|  17.7k|  for(i = 0; i<max_param; i++) {
  495|       |    /* Width/precision arguments must be read before the main argument
  496|       |       they are attached to */
  497|  12.3k|    if(vto[i].flags & FLAGS_WIDTHPARAM) {
  498|      0|      vto[vto[i].width].data.num.as_signed =
  499|      0|        (mp_intmax_t)va_arg(arglist, int);
  500|      0|    }
  501|  12.3k|    if(vto[i].flags & FLAGS_PRECPARAM) {
  502|      0|      vto[vto[i].precision].data.num.as_signed =
  503|      0|        (mp_intmax_t)va_arg(arglist, int);
  504|      0|    }
  505|       |
  506|  12.3k|    switch(vto[i].type) {
  507|  7.68k|    case FORMAT_STRING:
  508|  7.68k|      vto[i].data.str = va_arg(arglist, char *);
  509|  7.68k|      break;
  510|       |
  511|      0|    case FORMAT_INTPTR:
  512|      0|    case FORMAT_UNKNOWN:
  513|      0|    case FORMAT_PTR:
  514|      0|      vto[i].data.ptr = va_arg(arglist, void *);
  515|      0|      break;
  516|       |
  517|  4.68k|    case FORMAT_INT:
  518|  4.68k|#ifdef HAVE_LONG_LONG_TYPE
  519|  4.68k|      if((vto[i].flags & FLAGS_LONGLONG) && (vto[i].flags & FLAGS_UNSIGNED))
  520|      0|        vto[i].data.num.as_unsigned =
  521|      0|          (mp_uintmax_t)va_arg(arglist, mp_uintmax_t);
  522|  4.68k|      else if(vto[i].flags & FLAGS_LONGLONG)
  523|      0|        vto[i].data.num.as_signed =
  524|      0|          (mp_intmax_t)va_arg(arglist, mp_intmax_t);
  525|  4.68k|      else
  526|  4.68k|#endif
  527|  4.68k|      {
  528|  4.68k|        if((vto[i].flags & FLAGS_LONG) && (vto[i].flags & FLAGS_UNSIGNED))
  529|      0|          vto[i].data.num.as_unsigned =
  530|      0|            (mp_uintmax_t)va_arg(arglist, unsigned long);
  531|  4.68k|        else if(vto[i].flags & FLAGS_LONG)
  532|  1.14k|          vto[i].data.num.as_signed =
  533|  1.14k|            (mp_intmax_t)va_arg(arglist, long);
  534|  3.54k|        else if(vto[i].flags & FLAGS_UNSIGNED)
  535|  3.54k|          vto[i].data.num.as_unsigned =
  536|  3.54k|            (mp_uintmax_t)va_arg(arglist, unsigned int);
  537|      0|        else
  538|      0|          vto[i].data.num.as_signed =
  539|      0|            (mp_intmax_t)va_arg(arglist, int);
  540|  4.68k|      }
  541|  4.68k|      break;
  542|       |
  543|      0|    case FORMAT_DOUBLE:
  544|      0|      vto[i].data.dnum = va_arg(arglist, double);
  545|      0|      break;
  546|       |
  547|      0|    case FORMAT_WIDTH:
  548|       |      /* Argument has been read. Silently convert it into an integer
  549|       |       * for later use
  550|       |       */
  551|      0|      vto[i].type = FORMAT_INT;
  552|      0|      break;
  553|       |
  554|      0|    default:
  555|      0|      break;
  556|  12.3k|    }
  557|  12.3k|  }
  558|       |
  559|  5.37k|  return 0;
  560|       |
  561|  5.37k|}
mprintf.c:dprintf_IsQualifierNoDollar:
  195|  16.0k|{
  196|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  197|       |  if(!strncmp(fmt, "I32", 3) || !strncmp(fmt, "I64", 3)) {
  198|       |    return TRUE;
  199|       |  }
  200|       |#endif
  201|       |
  202|  16.0k|  switch(*fmt) {
  203|      0|  case '-': case '+': case ' ': case '#': case '.':
  204|  2.50k|  case '0': case '1': case '2': case '3': case '4':
  205|  2.50k|  case '5': case '6': case '7': case '8': case '9':
  206|  3.65k|  case 'h': case 'l': case 'L': case 'z': case 'q':
  207|  3.65k|  case '*': case 'O':
  208|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  209|       |  case 'I':
  210|       |#endif
  211|  3.65k|    return TRUE;
  212|       |
  213|  12.3k|  default:
  214|  12.3k|    return FALSE;
  215|  16.0k|  }
  216|  16.0k|}
mprintf.c:dprintf_DollarString:
  178|  24.7k|{
  179|  24.7k|  int number = 0;
  180|  34.7k|  while(ISDIGIT(*input)) {
  181|  10.0k|    if(number < MAX_PARAMETERS) {
  182|  10.0k|      number *= 10;
  183|  10.0k|      number += *input - '0';
  184|  10.0k|    }
  185|  10.0k|    input++;
  186|  10.0k|  }
  187|  24.7k|  if(number <= MAX_PARAMETERS && ('$' == *input)) {
  188|      0|    *end = ++input;
  189|      0|    return number;
  190|      0|  }
  191|  24.7k|  return 0;
  192|  24.7k|}
mprintf.c:addbyter:
  993|  28.9k|{
  994|  28.9k|  struct nsprintf *infop = (struct nsprintf *)data;
  995|  28.9k|  unsigned char outc = (unsigned char)output;
  996|       |
  997|  28.9k|  if(infop->length < infop->max) {
  998|       |    /* only do this if we haven't reached max length yet */
  999|  28.9k|    infop->buffer[0] = outc; /* store */
 1000|  28.9k|    infop->buffer++; /* increase pointer */
 1001|  28.9k|    infop->length++; /* we are now one byte larger */
 1002|  28.9k|    return outc;     /* fputc() returns like this on success */
 1003|  28.9k|  }
 1004|      0|  return -1;
 1005|  28.9k|}
mprintf.c:alloc_addbyter:
 1043|  22.3k|{
 1044|  22.3k|  struct asprintf *infop = (struct asprintf *)data;
 1045|  22.3k|  unsigned char outc = (unsigned char)output;
 1046|       |
 1047|  22.3k|  if(Curl_dyn_addn(infop->b, &outc, 1)) {
 1048|      0|    infop->fail = 1;
 1049|      0|    return -1; /* fail */
 1050|      0|  }
 1051|  22.3k|  return outc; /* fputc() returns like this on success */
 1052|  22.3k|}

mqtt.c:mqtt_setup_conn:
   98|    285|{
   99|       |  /* allocate the HTTP-specific struct for the Curl_easy, only to survive
  100|       |     during this request */
  101|    285|  struct MQTT *mq;
  102|    285|  (void)conn;
  103|    285|  DEBUGASSERT(data->req.p.mqtt == NULL);
  104|       |
  105|    285|  mq = calloc(1, sizeof(struct MQTT));
  106|    285|  if(!mq)
  107|      0|    return CURLE_OUT_OF_MEMORY;
  108|    285|  data->req.p.mqtt = mq;
  109|    285|  return CURLE_OK;
  110|    285|}
mqtt.c:mqtt_getsock:
  144|  15.8M|{
  145|  15.8M|  (void)data;
  146|  15.8M|  sock[0] = conn->sock[FIRSTSOCKET];
  147|  15.8M|  return GETSOCK_READSOCK(FIRSTSOCKET);
  148|  15.8M|}
mqtt.c:mqtt_do:
  682|    285|{
  683|    285|  CURLcode result = CURLE_OK;
  684|    285|  *done = FALSE; /* unconditionally */
  685|       |
  686|    285|  result = mqtt_connect(data);
  687|    285|  if(result) {
  688|      0|    failf(data, "Error %d sending MQTT CONN request", result);
  689|      0|    return result;
  690|      0|  }
  691|    285|  mqstate(data, MQTT_FIRST, MQTT_CONNACK);
  692|    285|  return CURLE_OK;
  693|    285|}
mqtt.c:mqtt_connect:
  246|    285|{
  247|    285|  CURLcode result = CURLE_OK;
  248|    285|  int pos = 0;
  249|    285|  int rc = 0;
  250|       |  /*remain length*/
  251|    285|  int remain_pos = 0;
  252|    285|  char remain[4] = {0};
  253|    285|  size_t packetlen = 0;
  254|    285|  size_t payloadlen = 0;
  255|    285|  size_t start_user = 0;
  256|    285|  size_t start_pwd = 0;
  257|    285|  char client_id[MQTT_CLIENTID_LEN + 1] = "curl";
  258|    285|  const size_t clen = strlen("curl");
  259|    285|  char *packet = NULL;
  260|       |
  261|       |  /* extracting username from request */
  262|    285|  const char *username = data->state.aptr.user ?
  263|    157|    data->state.aptr.user : "";
  264|    285|  const size_t ulen = strlen(username);
  265|       |  /* extracting password from request */
  266|    285|  const char *passwd = data->state.aptr.passwd ?
  267|    275|    data->state.aptr.passwd : "";
  268|    285|  const size_t plen = strlen(passwd);
  269|       |
  270|    285|  payloadlen = ulen + plen + MQTT_CLIENTID_LEN + 2;
  271|       |  /* The plus 2 are for the MSB and LSB describing the length of the string to
  272|       |   * be added on the payload. Refer to spec 1.5.2 and 1.5.4 */
  273|    285|  if(ulen)
  274|    156|    payloadlen += 2;
  275|    285|  if(plen)
  276|     10|    payloadlen += 2;
  277|       |
  278|       |  /* getting how much occupy the remain length */
  279|    285|  remain_pos = mqtt_encode_len(remain, payloadlen + 10);
  280|       |
  281|       |  /* 10 length of variable header and 1 the first byte of the fixed header */
  282|    285|  packetlen = payloadlen + 10 + remain_pos + 1;
  283|       |
  284|       |  /* allocating packet */
  285|    285|  if(packetlen > 268435455)
  286|      0|    return CURLE_WEIRD_SERVER_REPLY;
  287|    285|  packet = malloc(packetlen);
  288|    285|  if(!packet)
  289|      0|    return CURLE_OUT_OF_MEMORY;
  290|    285|  memset(packet, 0, packetlen);
  291|       |
  292|       |  /* set initial values for CONN pack */
  293|    285|  pos = init_connpack(packet, remain, remain_pos);
  294|       |
  295|    285|  result = Curl_rand_hex(data, (unsigned char *)&client_id[clen],
  296|    285|                         MQTT_CLIENTID_LEN - clen + 1);
  297|       |  /* add client id */
  298|    285|  rc = add_client_id(client_id, strlen(client_id), packet, pos + 1);
  299|    285|  if(rc) {
  300|      0|    failf(data, "Client ID length mismatched: [%lu]", strlen(client_id));
  301|      0|    result = CURLE_WEIRD_SERVER_REPLY;
  302|      0|    goto end;
  303|      0|  }
  304|    285|  infof(data, "Using client id '%s'", client_id);
  305|       |
  306|       |  /* position where starts the user payload */
  307|    285|  start_user = pos + 3 + MQTT_CLIENTID_LEN;
  308|       |  /* position where starts the password payload */
  309|    285|  start_pwd = start_user + ulen;
  310|       |  /* if user name was provided, add it to the packet */
  311|    285|  if(ulen) {
  312|    156|    start_pwd += 2;
  313|       |
  314|    156|    rc = add_user(username, ulen,
  315|    156|                  (unsigned char *)packet, start_user, remain_pos);
  316|    156|    if(rc) {
  317|      0|      failf(data, "Username is too large: [%lu]", ulen);
  318|      0|      result = CURLE_WEIRD_SERVER_REPLY;
  319|      0|      goto end;
  320|      0|    }
  321|    156|  }
  322|       |
  323|       |  /* if passwd was provided, add it to the packet */
  324|    285|  if(plen) {
  325|     10|    rc = add_passwd(passwd, plen, packet, start_pwd, remain_pos);
  326|     10|    if(rc) {
  327|      0|      failf(data, "Password is too large: [%lu]", plen);
  328|      0|      result = CURLE_WEIRD_SERVER_REPLY;
  329|      0|      goto end;
  330|      0|    }
  331|     10|  }
  332|       |
  333|    285|  if(!result)
  334|    285|    result = mqtt_send(data, packet, packetlen);
  335|       |
  336|    285|end:
  337|    285|  if(packet)
  338|    285|    free(packet);
  339|    285|  Curl_safefree(data->state.aptr.user);
  340|    285|  Curl_safefree(data->state.aptr.passwd);
  341|    285|  return result;
  342|    285|}
mqtt.c:mqtt_encode_len:
  151|    295|{
  152|    295|  unsigned char encoded;
  153|    295|  int i;
  154|       |
  155|    590|  for(i = 0; (len > 0) && (i<4); i++) {
  156|    295|    encoded = len % 0x80;
  157|    295|    len /= 0x80;
  158|    295|    if(len)
  159|      0|      encoded |= 0x80;
  160|    295|    buf[i] = encoded;
  161|    295|  }
  162|       |
  163|    295|  return i;
  164|    295|}
mqtt.c:init_connpack:
  217|    285|{
  218|       |  /* Fixed header starts */
  219|       |  /* packet type */
  220|    285|  packet[0] = MQTT_MSG_CONNECT;
  221|       |  /* remaining length field */
  222|    285|  memcpy(&packet[1], remain, remain_pos);
  223|       |  /* Fixed header ends */
  224|       |
  225|       |  /* Variable header starts */
  226|       |  /* protocol length */
  227|    285|  packet[remain_pos + 1] = 0x00;
  228|    285|  packet[remain_pos + 2] = 0x04;
  229|       |  /* protocol name */
  230|    285|  packet[remain_pos + 3] = 'M';
  231|    285|  packet[remain_pos + 4] = 'Q';
  232|    285|  packet[remain_pos + 5] = 'T';
  233|    285|  packet[remain_pos + 6] = 'T';
  234|       |  /* protocol level */
  235|    285|  packet[remain_pos + 7] = 0x04;
  236|       |  /* CONNECT flag: CleanSession */
  237|    285|  packet[remain_pos + 8] = 0x02;
  238|       |  /* keep-alive 0 = disabled */
  239|    285|  packet[remain_pos + 9] = 0x00;
  240|    285|  packet[remain_pos + 10] = 0x3c;
  241|       |  /*end of variable header*/
  242|    285|  return remain_pos + 10;
  243|    285|}
mqtt.c:add_client_id:
  206|    285|{
  207|    285|  if(client_id_len != MQTT_CLIENTID_LEN)
  208|      0|    return 1;
  209|    285|  pkt[start] = 0x00;
  210|    285|  pkt[start + 1] = MQTT_CLIENTID_LEN;
  211|    285|  memcpy(&pkt[start + 2], client_id, MQTT_CLIENTID_LEN);
  212|    285|  return 0;
  213|    285|}
mqtt.c:add_user:
  188|    156|{
  189|       |  /* magic number that need to be set properly */
  190|    156|  const size_t conn_flags_pos = remain_pos + 8;
  191|    156|  if(ulen > 0xffff)
  192|      0|    return 1;
  193|       |
  194|       |  /* set username flag */
  195|    156|  pkt[conn_flags_pos] |= 0x80;
  196|       |  /* length of username provided */
  197|    156|  pkt[start] = (unsigned char)((ulen >> 8) & 0xFF);
  198|    156|  pkt[start + 1] = (unsigned char)(ulen & 0xFF);
  199|    156|  memcpy(&pkt[start + 2], username, ulen);
  200|    156|  return 0;
  201|    156|}
mqtt.c:add_passwd:
  169|     10|{
  170|       |  /* magic number that need to be set properly */
  171|     10|  const size_t conn_flags_pos = remain_pos + 8;
  172|     10|  if(plen > 0xffff)
  173|      0|    return 1;
  174|       |
  175|       |  /* set password flag */
  176|     10|  pkt[conn_flags_pos] |= 0x40;
  177|       |
  178|       |  /* length of password provided */
  179|     10|  pkt[start] = (char)((plen >> 8) & 0xFF);
  180|     10|  pkt[start + 1] = (char)(plen & 0xFF);
  181|     10|  memcpy(&pkt[start + 2], passwd, plen);
  182|     10|  return 0;
  183|     10|}
mqtt.c:mqtt_send:
  114|    295|{
  115|    295|  CURLcode result = CURLE_OK;
  116|    295|  struct connectdata *conn = data->conn;
  117|    295|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  118|    295|  struct MQTT *mq = data->req.p.mqtt;
  119|    295|  ssize_t n;
  120|    295|  result = Curl_write(data, sockfd, buf, len, &n);
  121|    295|  if(!result)
  122|    295|    Curl_debug(data, CURLINFO_HEADER_OUT, buf, (size_t)n);
  123|    295|  if(len != (size_t)n) {
  124|      0|    size_t nsend = len - n;
  125|      0|    char *sendleftovers = Curl_memdup(&buf[n], nsend);
  126|      0|    if(!sendleftovers)
  127|      0|      return CURLE_OUT_OF_MEMORY;
  128|      0|    mq->sendleftovers = sendleftovers;
  129|      0|    mq->nsend = nsend;
  130|      0|  }
  131|    295|  else {
  132|    295|    mq->sendleftovers = NULL;
  133|    295|    mq->nsend = 0;
  134|    295|  }
  135|    295|  return result;
  136|    295|}
mqtt.c:mqstate:
  563|    447|{
  564|    447|  struct connectdata *conn = data->conn;
  565|    447|  struct mqtt_conn *mqtt = &conn->proto.mqtt;
  566|    447|#ifdef CURLDEBUG
  567|    447|  infof(data, "%s (from %s) (next is %s)",
  568|    447|        statenames[state],
  569|    447|        statenames[mqtt->state],
  570|    447|        (state == MQTT_FIRST)? statenames[nextstate] : "");
  571|    447|#endif
  572|    447|  mqtt->state = state;
  573|    447|  if(state == MQTT_FIRST)
  574|    340|    mqtt->nextstate = nextstate;
  575|    447|}
mqtt.c:mqtt_doing:
  696|  15.8M|{
  697|  15.8M|  CURLcode result = CURLE_OK;
  698|  15.8M|  struct connectdata *conn = data->conn;
  699|  15.8M|  struct mqtt_conn *mqtt = &conn->proto.mqtt;
  700|  15.8M|  struct MQTT *mq = data->req.p.mqtt;
  701|  15.8M|  ssize_t nread;
  702|  15.8M|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  703|  15.8M|  unsigned char *pkt = (unsigned char *)data->state.buffer;
  704|  15.8M|  unsigned char byte;
  705|       |
  706|  15.8M|  *done = FALSE;
  707|       |
  708|  15.8M|  if(mq->nsend) {
  709|       |    /* send the remainder of an outgoing packet */
  710|      0|    char *ptr = mq->sendleftovers;
  711|      0|    result = mqtt_send(data, mq->sendleftovers, mq->nsend);
  712|      0|    free(ptr);
  713|      0|    if(result)
  714|      0|      return result;
  715|      0|  }
  716|       |
  717|  15.8M|  infof(data, "mqtt_doing: state [%d]", (int) mqtt->state);
  718|  15.8M|  switch(mqtt->state) {
  719|  15.8M|  case MQTT_FIRST:
  720|       |    /* Read the initial byte only */
  721|  15.8M|    result = Curl_read(data, sockfd, (char *)&mq->firstbyte, 1, &nread);
  722|  15.8M|    if(!nread)
  723|  15.8M|      break;
  724|     76|    Curl_debug(data, CURLINFO_HEADER_IN, (char *)&mq->firstbyte, 1);
  725|       |    /* remember the first byte */
  726|     76|    mq->npacket = 0;
  727|     76|    mqstate(data, MQTT_REMAINING_LENGTH, MQTT_NOSTATE);
  728|       |    /* FALLTHROUGH */
  729|     76|  case MQTT_REMAINING_LENGTH:
  730|     90|    do {
  731|     90|      result = Curl_read(data, sockfd, (char *)&byte, 1, &nread);
  732|     90|      if(!nread)
  733|     13|        break;
  734|     77|      Curl_debug(data, CURLINFO_HEADER_IN, (char *)&byte, 1);
  735|     77|      pkt[mq->npacket++] = byte;
  736|     77|    } while((byte & 0x80) && (mq->npacket < 4));
  737|     76|    if(nread && (byte & 0x80))
  738|       |      /* MQTT supports up to 127 * 128^0 + 127 * 128^1 + 127 * 128^2 +
  739|       |         127 * 128^3 bytes. server tried to send more */
  740|      1|      result = CURLE_WEIRD_SERVER_REPLY;
  741|     76|    if(result)
  742|      1|      break;
  743|     75|    mq->remaining_length = mqtt_decode_len(&pkt[0], mq->npacket, NULL);
  744|     75|    mq->npacket = 0;
  745|     75|    if(mq->remaining_length) {
  746|     40|      mqstate(data, mqtt->nextstate, MQTT_NOSTATE);
  747|     40|      break;
  748|     40|    }
  749|     35|    mqstate(data, MQTT_FIRST, MQTT_FIRST);
  750|       |
  751|     35|    if(mq->firstbyte == MQTT_MSG_DISCONNECT) {
  752|      0|      infof(data, "Got DISCONNECT");
  753|      0|      *done = TRUE;
  754|      0|    }
  755|     35|    break;
  756|     22|  case MQTT_CONNACK:
  757|     22|    result = mqtt_verify_connack(data);
  758|     22|    if(result)
  759|     11|      break;
  760|       |
  761|     11|    if(data->state.httpreq == HTTPREQ_POST) {
  762|      0|      result = mqtt_publish(data);
  763|      0|      if(!result) {
  764|      0|        result = mqtt_disconnect(data);
  765|      0|        *done = TRUE;
  766|      0|      }
  767|      0|      mqtt->nextstate = MQTT_FIRST;
  768|      0|    }
  769|     11|    else {
  770|     11|      result = mqtt_subscribe(data);
  771|     11|      if(!result) {
  772|     10|        mqstate(data, MQTT_FIRST, MQTT_SUBACK);
  773|     10|      }
  774|     11|    }
  775|     11|    break;
  776|       |
  777|      4|  case MQTT_SUBACK:
  778|      4|  case MQTT_PUBWAIT:
  779|      5|  case MQTT_PUB_REMAIN:
  780|      5|    result = mqtt_read_publish(data, done);
  781|      5|    break;
  782|       |
  783|      4|  default:
  784|      4|    failf(data, "State not handled yet");
  785|      4|    *done = TRUE;
  786|      4|    break;
  787|  15.8M|  }
  788|       |
  789|  15.8M|  if(result == CURLE_AGAIN)
  790|      0|    result = CURLE_OK;
  791|  15.8M|  return result;
  792|  15.8M|}
mqtt.c:mqtt_decode_len:
  527|     75|{
  528|     75|  size_t len = 0;
  529|     75|  size_t mult = 1;
  530|     75|  size_t i;
  531|     75|  unsigned char encoded = 128;
  532|       |
  533|    148|  for(i = 0; (i < buflen) && (encoded & 128); i++) {
  534|     73|    encoded = buf[i];
  535|     73|    len += (encoded & 127) * mult;
  536|     73|    mult *= 128;
  537|     73|  }
  538|       |
  539|     75|  if(lenbytes)
  540|      0|    *lenbytes = i;
  541|       |
  542|     75|  return len;
  543|     75|}
mqtt.c:mqtt_verify_connack:
  352|     22|{
  353|     22|  CURLcode result;
  354|     22|  struct connectdata *conn = data->conn;
  355|     22|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  356|     22|  unsigned char readbuf[MQTT_CONNACK_LEN];
  357|     22|  ssize_t nread;
  358|       |
  359|     22|  result = Curl_read(data, sockfd, (char *)readbuf, MQTT_CONNACK_LEN, &nread);
  360|     22|  if(result)
  361|      0|    goto fail;
  362|       |
  363|     22|  Curl_debug(data, CURLINFO_HEADER_IN, (char *)readbuf, (size_t)nread);
  364|       |
  365|       |  /* fixme */
  366|     22|  if(nread < MQTT_CONNACK_LEN) {
  367|      2|    result = CURLE_WEIRD_SERVER_REPLY;
  368|      2|    goto fail;
  369|      2|  }
  370|       |
  371|       |  /* verify CONNACK */
  372|     20|  if(readbuf[0] != 0x00 || readbuf[1] != 0x00) {
  373|      9|    failf(data, "Expected %02x%02x but got %02x%02x",
  374|      9|          0x00, 0x00, readbuf[0], readbuf[1]);
  375|      9|    result = CURLE_WEIRD_SERVER_REPLY;
  376|      9|  }
  377|       |
  378|     22|fail:
  379|     22|  return result;
  380|     20|}
mqtt.c:mqtt_get_topic:
  384|     11|{
  385|     11|  char *path = data->state.up.path;
  386|     11|  if(strlen(path) > 1)
  387|     10|    return Curl_urldecode(data, path + 1, 0, topic, topiclen,
  388|     10|                          REJECT_NADA);
  389|      1|  failf(data, "No MQTT topic found. Forgot to URL encode it?");
  390|      1|  return CURLE_URL_MALFORMAT;
  391|     11|}
mqtt.c:mqtt_subscribe:
  394|     11|{
  395|     11|  CURLcode result = CURLE_OK;
  396|     11|  char *topic = NULL;
  397|     11|  size_t topiclen;
  398|     11|  unsigned char *packet = NULL;
  399|     11|  size_t packetlen;
  400|     11|  char encodedsize[4];
  401|     11|  size_t n;
  402|     11|  struct connectdata *conn = data->conn;
  403|       |
  404|     11|  result = mqtt_get_topic(data, &topic, &topiclen);
  405|     11|  if(result)
  406|      1|    goto fail;
  407|       |
  408|     10|  conn->proto.mqtt.packetid++;
  409|       |
  410|     10|  packetlen = topiclen + 5; /* packetid + topic (has a two byte length field)
  411|       |                               + 2 bytes topic length + QoS byte */
  412|     10|  n = mqtt_encode_len((char *)encodedsize, packetlen);
  413|     10|  packetlen += n + 1; /* add one for the control packet type byte */
  414|       |
  415|     10|  packet = malloc(packetlen);
  416|     10|  if(!packet) {
  417|      0|    result = CURLE_OUT_OF_MEMORY;
  418|      0|    goto fail;
  419|      0|  }
  420|       |
  421|     10|  packet[0] = MQTT_MSG_SUBSCRIBE;
  422|     10|  memcpy(&packet[1], encodedsize, n);
  423|     10|  packet[1 + n] = (conn->proto.mqtt.packetid >> 8) & 0xff;
  424|     10|  packet[2 + n] = conn->proto.mqtt.packetid & 0xff;
  425|     10|  packet[3 + n] = (topiclen >> 8) & 0xff;
  426|     10|  packet[4 + n ] = topiclen & 0xff;
  427|     10|  memcpy(&packet[5 + n], topic, topiclen);
  428|     10|  packet[5 + n + topiclen] = 0; /* QoS zero */
  429|       |
  430|     10|  result = mqtt_send(data, (char *)packet, packetlen);
  431|       |
  432|     11|fail:
  433|     11|  free(topic);
  434|     11|  free(packet);
  435|     11|  return result;
  436|     10|}
mqtt.c:mqtt_read_publish:
  582|      5|{
  583|      5|  CURLcode result = CURLE_OK;
  584|      5|  struct connectdata *conn = data->conn;
  585|      5|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  586|      5|  ssize_t nread;
  587|      5|  unsigned char *pkt = (unsigned char *)data->state.buffer;
  588|      5|  size_t remlen;
  589|      5|  struct mqtt_conn *mqtt = &conn->proto.mqtt;
  590|      5|  struct MQTT *mq = data->req.p.mqtt;
  591|      5|  unsigned char packet;
  592|       |
  593|      5|  switch(mqtt->state) {
  594|      0|  MQTT_SUBACK_COMING:
  595|      0|  case MQTT_SUBACK_COMING:
  596|      0|    result = mqtt_verify_suback(data);
  597|      0|    if(result)
  598|      0|      break;
  599|       |
  600|      0|    mqstate(data, MQTT_FIRST, MQTT_PUBWAIT);
  601|      0|    break;
  602|       |
  603|      4|  case MQTT_SUBACK:
  604|      4|  case MQTT_PUBWAIT:
  605|       |    /* we are expecting PUBLISH or SUBACK */
  606|      4|    packet = mq->firstbyte & 0xf0;
  607|      4|    if(packet == MQTT_MSG_PUBLISH)
  608|      1|      mqstate(data, MQTT_PUB_REMAIN, MQTT_NOSTATE);
  609|      3|    else if(packet == MQTT_MSG_SUBACK) {
  610|      0|      mqstate(data, MQTT_SUBACK_COMING, MQTT_NOSTATE);
  611|      0|      goto MQTT_SUBACK_COMING;
  612|      0|    }
  613|      3|    else if(packet == MQTT_MSG_DISCONNECT) {
  614|      0|      infof(data, "Got DISCONNECT");
  615|      0|      *done = TRUE;
  616|      0|      goto end;
  617|      0|    }
  618|      3|    else {
  619|      3|      result = CURLE_WEIRD_SERVER_REPLY;
  620|      3|      goto end;
  621|      3|    }
  622|       |
  623|       |    /* -- switched state -- */
  624|      1|    remlen = mq->remaining_length;
  625|      1|    infof(data, "Remaining length: %zd bytes", remlen);
  626|      1|    if(data->set.max_filesize &&
  627|      1|       (curl_off_t)remlen > data->set.max_filesize) {
  628|      0|      failf(data, "Maximum file size exceeded");
  629|      0|      result = CURLE_FILESIZE_EXCEEDED;
  630|      0|      goto end;
  631|      0|    }
  632|      1|    Curl_pgrsSetDownloadSize(data, remlen);
  633|      1|    data->req.bytecount = 0;
  634|      1|    data->req.size = remlen;
  635|      1|    mq->npacket = remlen; /* get this many bytes */
  636|       |    /* FALLTHROUGH */
  637|      2|  case MQTT_PUB_REMAIN: {
  638|       |    /* read rest of packet, but no more. Cap to buffer size */
  639|      2|    struct SingleRequest *k = &data->req;
  640|      2|    size_t rest = mq->npacket;
  641|      2|    if(rest > (size_t)data->set.buffer_size)
  642|      0|      rest = (size_t)data->set.buffer_size;
  643|      2|    result = Curl_read(data, sockfd, (char *)pkt, rest, &nread);
  644|      2|    if(result) {
  645|      0|      if(CURLE_AGAIN == result) {
  646|      0|        infof(data, "EEEE AAAAGAIN");
  647|      0|      }
  648|      0|      goto end;
  649|      0|    }
  650|      2|    if(!nread) {
  651|      1|      infof(data, "server disconnected");
  652|      1|      result = CURLE_PARTIAL_FILE;
  653|      1|      goto end;
  654|      1|    }
  655|      1|    Curl_debug(data, CURLINFO_DATA_IN, (char *)pkt, (size_t)nread);
  656|       |
  657|      1|    mq->npacket -= nread;
  658|      1|    k->bytecount += nread;
  659|      1|    Curl_pgrsSetDownloadCounter(data, k->bytecount);
  660|       |
  661|       |    /* if QoS is set, message contains packet id */
  662|       |
  663|      1|    result = Curl_client_write(data, CLIENTWRITE_BODY, (char *)pkt, nread);
  664|      1|    if(result)
  665|      0|      goto end;
  666|       |
  667|      1|    if(!mq->npacket)
  668|       |      /* no more PUBLISH payload, back to subscribe wait state */
  669|      0|      mqstate(data, MQTT_FIRST, MQTT_PUBWAIT);
  670|      1|    break;
  671|      1|  }
  672|      0|  default:
  673|      0|    DEBUGASSERT(NULL); /* illegal state */
  674|      0|    result = CURLE_WEIRD_SERVER_REPLY;
  675|      0|    goto end;
  676|      5|  }
  677|      5|  end:
  678|      5|  return result;
  679|      5|}

Curl_multi_handle:
  357|    472|{
  358|    472|  struct Curl_multi *multi = calloc(1, sizeof(struct Curl_multi));
  359|       |
  360|    472|  if(!multi)
  361|      0|    return NULL;
  362|       |
  363|    472|  multi->magic = CURL_MULTI_HANDLE;
  364|       |
  365|    472|  if(Curl_mk_dnscache(&multi->hostcache))
  366|      0|    goto error;
  367|       |
  368|    472|  if(sh_init(&multi->sockhash, hashsize))
  369|      0|    goto error;
  370|       |
  371|    472|  if(Curl_conncache_init(&multi->conn_cache, chashsize))
  372|      0|    goto error;
  373|       |
  374|    472|  Curl_llist_init(&multi->msglist, NULL);
  375|    472|  Curl_llist_init(&multi->pending, NULL);
  376|       |
  377|    472|  multi->multiplexing = TRUE;
  378|       |
  379|       |  /* -1 means it not set by user, use the default value */
  380|    472|  multi->maxconnects = -1;
  381|    472|  multi->max_concurrent_streams = 100;
  382|    472|  multi->ipv6_works = Curl_ipv6works(NULL);
  383|       |
  384|       |#ifdef USE_WINSOCK
  385|       |  multi->wsa_event = WSACreateEvent();
  386|       |  if(multi->wsa_event == WSA_INVALID_EVENT)
  387|       |    goto error;
  388|       |#else
  389|    472|#ifdef ENABLE_WAKEUP
  390|    472|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, multi->wakeup_pair) < 0) {
  391|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  392|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  393|      0|  }
  394|    472|  else if(curlx_nonblock(multi->wakeup_pair[0], TRUE) < 0 ||
  395|    472|          curlx_nonblock(multi->wakeup_pair[1], TRUE) < 0) {
  396|      0|    sclose(multi->wakeup_pair[0]);
  397|      0|    sclose(multi->wakeup_pair[1]);
  398|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  399|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  400|      0|  }
  401|    472|#endif
  402|    472|#endif
  403|       |
  404|    472|  return multi;
  405|       |
  406|      0|  error:
  407|       |
  408|      0|  Curl_hash_destroy(&multi->sockhash);
  409|      0|  Curl_hash_destroy(&multi->hostcache);
  410|      0|  Curl_conncache_destroy(&multi->conn_cache);
  411|      0|  Curl_llist_destroy(&multi->msglist, NULL);
  412|      0|  Curl_llist_destroy(&multi->pending, NULL);
  413|       |
  414|      0|  free(multi);
  415|      0|  return NULL;
  416|    472|}
curl_multi_init:
  419|    472|{
  420|    472|  return Curl_multi_handle(CURL_SOCKET_HASH_TABLE_SIZE,
  421|    472|                           CURL_CONNECTION_HASH_SIZE);
  422|    472|}
curl_multi_add_handle:
  426|    472|{
  427|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  428|    472|  if(!GOOD_MULTI_HANDLE(multi))
  429|      0|    return CURLM_BAD_HANDLE;
  430|       |
  431|       |  /* Verify that we got a somewhat good easy handle too */
  432|    472|  if(!GOOD_EASY_HANDLE(data))
  433|      0|    return CURLM_BAD_EASY_HANDLE;
  434|       |
  435|       |  /* Prevent users from adding same easy handle more than once and prevent
  436|       |     adding to more than one multi stack */
  437|    472|  if(data->multi)
  438|      0|    return CURLM_ADDED_ALREADY;
  439|       |
  440|    472|  if(multi->in_callback)
  441|      0|    return CURLM_RECURSIVE_API_CALL;
  442|       |
  443|       |  /* Initialize timeout list for this handle */
  444|    472|  Curl_llist_init(&data->state.timeoutlist, NULL);
  445|       |
  446|       |  /*
  447|       |   * No failure allowed in this function beyond this point. And no
  448|       |   * modification of easy nor multi handle allowed before this except for
  449|       |   * potential multi's connection cache growing which won't be undone in this
  450|       |   * function no matter what.
  451|       |   */
  452|    472|  if(data->set.errorbuffer)
  453|      0|    data->set.errorbuffer[0] = 0;
  454|       |
  455|       |  /* set the easy handle */
  456|    472|  multistate(data, MSTATE_INIT);
  457|       |
  458|       |  /* for multi interface connections, we share DNS cache automatically if the
  459|       |     easy handle's one is currently not set. */
  460|    472|  if(!data->dns.hostcache ||
  461|    472|     (data->dns.hostcachetype == HCACHE_NONE)) {
  462|    472|    data->dns.hostcache = &multi->hostcache;
  463|    472|    data->dns.hostcachetype = HCACHE_MULTI;
  464|    472|  }
  465|       |
  466|       |  /* Point to the shared or multi handle connection cache */
  467|    472|  if(data->share && (data->share->specifier & (1<< CURL_LOCK_DATA_CONNECT)))
  468|      0|    data->state.conn_cache = &data->share->conn_cache;
  469|    472|  else
  470|    472|    data->state.conn_cache = &multi->conn_cache;
  471|    472|  data->state.lastconnect_id = -1;
  472|       |
  473|       |#ifdef USE_LIBPSL
  474|       |  /* Do the same for PSL. */
  475|       |  if(data->share && (data->share->specifier & (1 << CURL_LOCK_DATA_PSL)))
  476|       |    data->psl = &data->share->psl;
  477|       |  else
  478|       |    data->psl = &multi->psl;
  479|       |#endif
  480|       |
  481|       |  /* We add the new entry last in the list. */
  482|    472|  data->next = NULL; /* end of the line */
  483|    472|  if(multi->easyp) {
  484|      0|    struct Curl_easy *last = multi->easylp;
  485|      0|    last->next = data;
  486|      0|    data->prev = last;
  487|      0|    multi->easylp = data; /* the new last node */
  488|      0|  }
  489|    472|  else {
  490|       |    /* first node, make prev NULL! */
  491|    472|    data->prev = NULL;
  492|    472|    multi->easylp = multi->easyp = data; /* both first and last */
  493|    472|  }
  494|       |
  495|       |  /* make the Curl_easy refer back to this multi handle */
  496|    472|  data->multi = multi;
  497|       |
  498|       |  /* Set the timeout for this handle to expire really soon so that it will
  499|       |     be taken care of even when this handle is added in the midst of operation
  500|       |     when only the curl_multi_socket() API is used. During that flow, only
  501|       |     sockets that time-out or have actions will be dealt with. Since this
  502|       |     handle has no action yet, we make sure it times out to get things to
  503|       |     happen. */
  504|    472|  Curl_expire(data, 0, EXPIRE_RUN_NOW);
  505|       |
  506|       |  /* increase the node-counter */
  507|    472|  multi->num_easy++;
  508|       |
  509|       |  /* increase the alive-counter */
  510|    472|  multi->num_alive++;
  511|       |
  512|       |  /* A somewhat crude work-around for a little glitch in Curl_update_timer()
  513|       |     that happens if the lastcall time is set to the same time when the handle
  514|       |     is removed as when the next handle is added, as then the check in
  515|       |     Curl_update_timer() that prevents calling the application multiple times
  516|       |     with the same timer info will not trigger and then the new handle's
  517|       |     timeout will not be notified to the app.
  518|       |
  519|       |     The work-around is thus simply to clear the 'lastcall' variable to force
  520|       |     Curl_update_timer() to always trigger a callback to the app when a new
  521|       |     easy handle is added */
  522|    472|  memset(&multi->timer_lastcall, 0, sizeof(multi->timer_lastcall));
  523|       |
  524|    472|  CONNCACHE_LOCK(data);
  525|       |  /* The closure handle only ever has default timeouts set. To improve the
  526|       |     state somewhat we clone the timeouts from each added handle so that the
  527|       |     closure handle always has the same timeouts as the most recently added
  528|       |     easy handle. */
  529|    472|  data->state.conn_cache->closure_handle->set.timeout = data->set.timeout;
  530|    472|  data->state.conn_cache->closure_handle->set.server_response_timeout =
  531|    472|    data->set.server_response_timeout;
  532|    472|  data->state.conn_cache->closure_handle->set.no_signal =
  533|    472|    data->set.no_signal;
  534|    472|  CONNCACHE_UNLOCK(data);
  535|       |
  536|    472|  Curl_update_timer(multi);
  537|    472|  return CURLM_OK;
  538|    472|}
curl_multi_remove_handle:
  718|    472|{
  719|    472|  struct Curl_easy *easy = data;
  720|    472|  bool premature;
  721|    472|  struct Curl_llist_element *e;
  722|       |
  723|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  724|    472|  if(!GOOD_MULTI_HANDLE(multi))
  725|      0|    return CURLM_BAD_HANDLE;
  726|       |
  727|       |  /* Verify that we got a somewhat good easy handle too */
  728|    472|  if(!GOOD_EASY_HANDLE(data))
  729|      0|    return CURLM_BAD_EASY_HANDLE;
  730|       |
  731|       |  /* Prevent users from trying to remove same easy handle more than once */
  732|    472|  if(!data->multi)
  733|      0|    return CURLM_OK; /* it is already removed so let's say it is fine! */
  734|       |
  735|       |  /* Prevent users from trying to remove an easy handle from the wrong multi */
  736|    472|  if(data->multi != multi)
  737|      0|    return CURLM_BAD_EASY_HANDLE;
  738|       |
  739|    472|  if(multi->in_callback)
  740|      0|    return CURLM_RECURSIVE_API_CALL;
  741|       |
  742|    472|  premature = (data->mstate < MSTATE_COMPLETED) ? TRUE : FALSE;
  743|       |
  744|       |  /* If the 'state' is not INIT or COMPLETED, we might need to do something
  745|       |     nice to put the easy_handle in a good known state when this returns. */
  746|    472|  if(premature) {
  747|       |    /* this handle is "alive" so we need to count down the total number of
  748|       |       alive connections when this is removed */
  749|      0|    multi->num_alive--;
  750|      0|  }
  751|       |
  752|    472|  if(data->conn &&
  753|    472|     data->mstate > MSTATE_DO &&
  754|    472|     data->mstate < MSTATE_COMPLETED) {
  755|       |    /* Set connection owner so that the DONE function closes it.  We can
  756|       |       safely do this here since connection is killed. */
  757|      0|    streamclose(data->conn, "Removed with partial response");
  758|      0|  }
  759|       |
  760|    472|  if(data->conn) {
  761|       |    /* multi_done() clears the association between the easy handle and the
  762|       |       connection.
  763|       |
  764|       |       Note that this ignores the return code simply because there's
  765|       |       nothing really useful to do with it anyway! */
  766|      0|    (void)multi_done(data, data->result, premature);
  767|      0|  }
  768|       |
  769|       |  /* The timer must be shut down before data->multi is set to NULL, else the
  770|       |     timenode will remain in the splay tree after curl_easy_cleanup is
  771|       |     called. Do it after multi_done() in case that sets another time! */
  772|    472|  Curl_expire_clear(data);
  773|       |
  774|    472|  if(data->connect_queue.ptr)
  775|       |    /* the handle was in the pending list waiting for an available connection,
  776|       |       so go ahead and remove it */
  777|      0|    Curl_llist_remove(&multi->pending, &data->connect_queue, NULL);
  778|       |
  779|    472|  if(data->dns.hostcachetype == HCACHE_MULTI) {
  780|       |    /* stop using the multi handle's DNS cache, *after* the possible
  781|       |       multi_done() call above */
  782|    472|    data->dns.hostcache = NULL;
  783|    472|    data->dns.hostcachetype = HCACHE_NONE;
  784|    472|  }
  785|       |
  786|    472|  Curl_wildcard_dtor(&data->wildcard);
  787|       |
  788|       |  /* destroy the timeout list that is held in the easy handle, do this *after*
  789|       |     multi_done() as that may actually call Curl_expire that uses this */
  790|    472|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  791|       |
  792|       |  /* change state without using multistate(), only to make singlesocket() do
  793|       |     what we want */
  794|    472|  data->mstate = MSTATE_COMPLETED;
  795|    472|  singlesocket(multi, easy); /* to let the application know what sockets that
  796|       |                                vanish with this handle */
  797|       |
  798|       |  /* Remove the association between the connection and the handle */
  799|    472|  Curl_detach_connnection(data);
  800|       |
  801|    472|  if(data->state.lastconnect_id != -1) {
  802|       |    /* Mark any connect-only connection for closure */
  803|      0|    Curl_conncache_foreach(data, data->state.conn_cache,
  804|      0|                           NULL, close_connect_only);
  805|      0|  }
  806|       |
  807|       |#ifdef USE_LIBPSL
  808|       |  /* Remove the PSL association. */
  809|       |  if(data->psl == &multi->psl)
  810|       |    data->psl = NULL;
  811|       |#endif
  812|       |
  813|       |  /* as this was using a shared connection cache we clear the pointer to that
  814|       |     since we're not part of that multi handle anymore */
  815|    472|  data->state.conn_cache = NULL;
  816|       |
  817|    472|  data->multi = NULL; /* clear the association to this multi handle */
  818|       |
  819|       |  /* make sure there's no pending message in the queue sent from this easy
  820|       |     handle */
  821|       |
  822|    472|  for(e = multi->msglist.head; e; e = e->next) {
  823|    472|    struct Curl_message *msg = e->ptr;
  824|       |
  825|    472|    if(msg->extmsg.easy_handle == easy) {
  826|    472|      Curl_llist_remove(&multi->msglist, e, NULL);
  827|       |      /* there can only be one from this specific handle */
  828|    472|      break;
  829|    472|    }
  830|    472|  }
  831|       |
  832|       |  /* Remove from the pending list if it is there. Otherwise this will
  833|       |     remain on the pending list forever due to the state change. */
  834|    472|  for(e = multi->pending.head; e; e = e->next) {
  835|      0|    struct Curl_easy *curr_data = e->ptr;
  836|       |
  837|      0|    if(curr_data == data) {
  838|      0|      Curl_llist_remove(&multi->pending, e, NULL);
  839|      0|      break;
  840|      0|    }
  841|      0|  }
  842|       |
  843|       |  /* make the previous node point to our next */
  844|    472|  if(data->prev)
  845|      0|    data->prev->next = data->next;
  846|    472|  else
  847|    472|    multi->easyp = data->next; /* point to first node */
  848|       |
  849|       |  /* make our next point to our previous node */
  850|    472|  if(data->next)
  851|      0|    data->next->prev = data->prev;
  852|    472|  else
  853|    472|    multi->easylp = data->prev; /* point to last node */
  854|       |
  855|       |  /* NOTE NOTE NOTE
  856|       |     We do not touch the easy handle here! */
  857|    472|  multi->num_easy--; /* one less to care about now */
  858|       |
  859|    472|  process_pending_handles(multi);
  860|       |
  861|    472|  Curl_update_timer(multi);
  862|    472|  return CURLM_OK;
  863|    472|}
Curl_detach_connnection:
  878|  2.80k|{
  879|  2.80k|  struct connectdata *conn = data->conn;
  880|  2.80k|  if(conn) {
  881|    691|    Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);
  882|    691|    Curl_ssl_detach_conn(data, conn);
  883|    691|  }
  884|  2.80k|  data->conn = NULL;
  885|  2.80k|}
Curl_attach_connnection:
  894|    691|{
  895|    691|  DEBUGASSERT(!data->conn);
  896|    691|  DEBUGASSERT(conn);
  897|    691|  data->conn = conn;
  898|    691|  Curl_llist_insert_next(&conn->easyq, conn->easyq.tail, data,
  899|    691|                         &data->conn_queue);
  900|    691|  if(conn->handler->attach)
  901|      0|    conn->handler->attach(data, conn);
  902|    691|  Curl_ssl_associate_conn(data, conn);
  903|    691|}
curl_multi_fdset:
 1027|  15.8M|{
 1028|       |  /* Scan through all the easy handles to get the file descriptors set.
 1029|       |     Some easy handles may not have connected to the remote host yet,
 1030|       |     and then we must make sure that is done. */
 1031|  15.8M|  struct Curl_easy *data;
 1032|  15.8M|  int this_max_fd = -1;
 1033|  15.8M|  curl_socket_t sockbunch[MAX_SOCKSPEREASYHANDLE];
 1034|  15.8M|  int i;
 1035|  15.8M|  (void)exc_fd_set; /* not used */
 1036|       |
 1037|  15.8M|  if(!GOOD_MULTI_HANDLE(multi))
 1038|      0|    return CURLM_BAD_HANDLE;
 1039|       |
 1040|  15.8M|  if(multi->in_callback)
 1041|      0|    return CURLM_RECURSIVE_API_CALL;
 1042|       |
 1043|  15.8M|  data = multi->easyp;
 1044|  31.7M|  while(data) {
 1045|  15.8M|    int bitmap;
 1046|       |#ifdef __clang_analyzer_
 1047|       |    /* to prevent "The left operand of '>=' is a garbage value" warnings */
 1048|       |    memset(sockbunch, 0, sizeof(sockbunch));
 1049|       |#endif
 1050|  15.8M|    bitmap = multi_getsock(data, sockbunch);
 1051|       |
 1052|  31.7M|    for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++) {
 1053|  31.7M|      curl_socket_t s = CURL_SOCKET_BAD;
 1054|       |
 1055|  31.7M|      if((bitmap & GETSOCK_READSOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1056|  15.8M|        if(!FDSET_SOCK(sockbunch[i]))
 1057|       |          /* pretend it doesn't exist */
 1058|      0|          continue;
 1059|  15.8M|        FD_SET(sockbunch[i], read_fd_set);
 1060|  15.8M|        s = sockbunch[i];
 1061|  15.8M|      }
 1062|  31.7M|      if((bitmap & GETSOCK_WRITESOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1063|      0|        if(!FDSET_SOCK(sockbunch[i]))
 1064|       |          /* pretend it doesn't exist */
 1065|      0|          continue;
 1066|      0|        FD_SET(sockbunch[i], write_fd_set);
 1067|      0|        s = sockbunch[i];
 1068|      0|      }
 1069|  31.7M|      if(s == CURL_SOCKET_BAD)
 1070|       |        /* this socket is unused, break out of loop */
 1071|  15.8M|        break;
 1072|  15.8M|      if((int)s > this_max_fd)
 1073|  15.8M|        this_max_fd = (int)s;
 1074|  15.8M|    }
 1075|       |
 1076|  15.8M|    data = data->next; /* check next handle */
 1077|  15.8M|  }
 1078|       |
 1079|  15.8M|  *max_fd = this_max_fd;
 1080|       |
 1081|  15.8M|  return CURLM_OK;
 1082|  15.8M|}
Curl_preconnect:
 1716|    691|{
 1717|    691|  if(!data->state.buffer) {
 1718|    406|    data->state.buffer = malloc(data->set.buffer_size + 1);
 1719|    406|    if(!data->state.buffer)
 1720|      0|      return CURLE_OUT_OF_MEMORY;
 1721|    406|  }
 1722|    691|  return CURLE_OK;
 1723|    691|}
curl_multi_perform:
 2572|  15.8M|{
 2573|  15.8M|  struct Curl_easy *data;
 2574|  15.8M|  CURLMcode returncode = CURLM_OK;
 2575|  15.8M|  struct Curl_tree *t;
 2576|  15.8M|  struct curltime now = Curl_now();
 2577|       |
 2578|  15.8M|  if(!GOOD_MULTI_HANDLE(multi))
 2579|      0|    return CURLM_BAD_HANDLE;
 2580|       |
 2581|  15.8M|  if(multi->in_callback)
 2582|      0|    return CURLM_RECURSIVE_API_CALL;
 2583|       |
 2584|  15.8M|  data = multi->easyp;
 2585|  31.7M|  while(data) {
 2586|  15.8M|    CURLMcode result;
 2587|  15.8M|    SIGPIPE_VARIABLE(pipe_st);
 2588|       |
 2589|  15.8M|    sigpipe_ignore(data, &pipe_st);
 2590|  15.8M|    result = multi_runsingle(multi, &now, data);
 2591|  15.8M|    sigpipe_restore(&pipe_st);
 2592|       |
 2593|  15.8M|    if(result)
 2594|      0|      returncode = result;
 2595|       |
 2596|  15.8M|    data = data->next; /* operate on next handle */
 2597|  15.8M|  }
 2598|       |
 2599|       |  /*
 2600|       |   * Simply remove all expired timers from the splay since handles are dealt
 2601|       |   * with unconditionally by this function and curl_multi_timeout() requires
 2602|       |   * that already passed/handled expire times are removed from the splay.
 2603|       |   *
 2604|       |   * It is important that the 'now' value is set at the entry of this function
 2605|       |   * and not for the current time as it may have ticked a little while since
 2606|       |   * then and then we risk this loop to remove timers that actually have not
 2607|       |   * been handled!
 2608|       |   */
 2609|  15.8M|  do {
 2610|  15.8M|    multi->timetree = Curl_splaygetbest(now, multi->timetree, &t);
 2611|  15.8M|    if(t)
 2612|       |      /* the removed may have another timeout in queue */
 2613|    285|      (void)add_next_timeout(now, multi, t->payload);
 2614|       |
 2615|  15.8M|  } while(t);
 2616|       |
 2617|  15.8M|  *running_handles = multi->num_alive;
 2618|       |
 2619|  15.8M|  if(CURLM_OK >= returncode)
 2620|  15.8M|    Curl_update_timer(multi);
 2621|       |
 2622|  15.8M|  return returncode;
 2623|  15.8M|}
curl_multi_cleanup:
 2626|    472|{
 2627|    472|  struct Curl_easy *data;
 2628|    472|  struct Curl_easy *nextdata;
 2629|       |
 2630|    472|  if(GOOD_MULTI_HANDLE(multi)) {
 2631|    472|    if(multi->in_callback)
 2632|      0|      return CURLM_RECURSIVE_API_CALL;
 2633|       |
 2634|    472|    multi->magic = 0; /* not good anymore */
 2635|       |
 2636|       |    /* First remove all remaining easy handles */
 2637|    472|    data = multi->easyp;
 2638|    472|    while(data) {
 2639|      0|      nextdata = data->next;
 2640|      0|      if(!data->state.done && data->conn)
 2641|       |        /* if DONE was never called for this handle */
 2642|      0|        (void)multi_done(data, CURLE_OK, TRUE);
 2643|      0|      if(data->dns.hostcachetype == HCACHE_MULTI) {
 2644|       |        /* clear out the usage of the shared DNS cache */
 2645|      0|        Curl_hostcache_clean(data, data->dns.hostcache);
 2646|      0|        data->dns.hostcache = NULL;
 2647|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2648|      0|      }
 2649|       |
 2650|       |      /* Clear the pointer to the connection cache */
 2651|      0|      data->state.conn_cache = NULL;
 2652|      0|      data->multi = NULL; /* clear the association */
 2653|       |
 2654|       |#ifdef USE_LIBPSL
 2655|       |      if(data->psl == &multi->psl)
 2656|       |        data->psl = NULL;
 2657|       |#endif
 2658|       |
 2659|      0|      data = nextdata;
 2660|      0|    }
 2661|       |
 2662|       |    /* Close all the connections in the connection cache */
 2663|    472|    Curl_conncache_close_all_connections(&multi->conn_cache);
 2664|       |
 2665|    472|    Curl_hash_destroy(&multi->sockhash);
 2666|    472|    Curl_conncache_destroy(&multi->conn_cache);
 2667|    472|    Curl_llist_destroy(&multi->msglist, NULL);
 2668|    472|    Curl_llist_destroy(&multi->pending, NULL);
 2669|       |
 2670|    472|    Curl_hash_destroy(&multi->hostcache);
 2671|    472|    Curl_psl_destroy(&multi->psl);
 2672|       |
 2673|       |#ifdef USE_WINSOCK
 2674|       |    WSACloseEvent(multi->wsa_event);
 2675|       |#else
 2676|    472|#ifdef ENABLE_WAKEUP
 2677|    472|    sclose(multi->wakeup_pair[0]);
 2678|    472|    sclose(multi->wakeup_pair[1]);
 2679|    472|#endif
 2680|    472|#endif
 2681|    472|    free(multi);
 2682|       |
 2683|    472|    return CURLM_OK;
 2684|    472|  }
 2685|      0|  return CURLM_BAD_HANDLE;
 2686|    472|}
Curl_multi_closed:
 2899|    285|{
 2900|    285|  if(data) {
 2901|       |    /* if there's still an easy handle associated with this connection */
 2902|    285|    struct Curl_multi *multi = data->multi;
 2903|    285|    if(multi) {
 2904|       |      /* this is set if this connection is part of a handle that is added to
 2905|       |         a multi handle, and only then this is necessary */
 2906|    285|      struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);
 2907|       |
 2908|    285|      if(entry) {
 2909|      0|        if(multi->socket_cb)
 2910|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2911|      0|                           multi->socket_userp,
 2912|      0|                           entry->socketp);
 2913|       |
 2914|       |        /* now remove it from the socket hash */
 2915|      0|        sh_delentry(entry, &multi->sockhash, s);
 2916|      0|      }
 2917|    285|    }
 2918|    285|  }
 2919|    285|}
Curl_update_timer:
 3259|  15.8M|{
 3260|  15.8M|  long timeout_ms;
 3261|       |
 3262|  15.8M|  if(!multi->timer_cb)
 3263|  15.8M|    return;
 3264|      0|  if(multi_timeout(multi, &timeout_ms)) {
 3265|      0|    return;
 3266|      0|  }
 3267|      0|  if(timeout_ms < 0) {
 3268|      0|    static const struct curltime none = {0, 0};
 3269|      0|    if(Curl_splaycomparekeys(none, multi->timer_lastcall)) {
 3270|      0|      multi->timer_lastcall = none;
 3271|       |      /* there's no timeout now but there was one previously, tell the app to
 3272|       |         disable it */
 3273|      0|      multi->timer_cb(multi, -1, multi->timer_userp);
 3274|      0|      return;
 3275|      0|    }
 3276|      0|    return;
 3277|      0|  }
 3278|       |
 3279|       |  /* When multi_timeout() is done, multi->timetree points to the node with the
 3280|       |   * timeout we got the (relative) time-out time for. We can thus easily check
 3281|       |   * if this is the same (fixed) time as we got in a previous call and then
 3282|       |   * avoid calling the callback again. */
 3283|      0|  if(Curl_splaycomparekeys(multi->timetree->key, multi->timer_lastcall) == 0)
 3284|      0|    return;
 3285|       |
 3286|      0|  multi->timer_lastcall = multi->timetree->key;
 3287|       |
 3288|      0|  multi->timer_cb(multi, timeout_ms, multi->timer_userp);
 3289|      0|}
Curl_expire:
 3366|  1.16k|{
 3367|  1.16k|  struct Curl_multi *multi = data->multi;
 3368|  1.16k|  struct curltime *nowp = &data->state.expiretime;
 3369|  1.16k|  struct curltime set;
 3370|       |
 3371|       |  /* this is only interesting while there is still an associated multi struct
 3372|       |     remaining! */
 3373|  1.16k|  if(!multi)
 3374|      0|    return;
 3375|       |
 3376|  1.16k|  DEBUGASSERT(id < EXPIRE_LAST);
 3377|       |
 3378|  1.16k|  set = Curl_now();
 3379|  1.16k|  set.tv_sec += (time_t)(milli/1000); /* might be a 64 to 32 bit conversion */
 3380|  1.16k|  set.tv_usec += (unsigned int)(milli%1000)*1000;
 3381|       |
 3382|  1.16k|  if(set.tv_usec >= 1000000) {
 3383|    138|    set.tv_sec++;
 3384|    138|    set.tv_usec -= 1000000;
 3385|    138|  }
 3386|       |
 3387|       |  /* Remove any timer with the same id just in case. */
 3388|  1.16k|  multi_deltimeout(data, id);
 3389|       |
 3390|       |  /* Add it to the timer list.  It must stay in the list until it has expired
 3391|       |     in case we need to recompute the minimum timer later. */
 3392|  1.16k|  multi_addtimeout(data, &set, id);
 3393|       |
 3394|  1.16k|  if(nowp->tv_sec || nowp->tv_usec) {
 3395|       |    /* This means that the struct is added as a node in the splay tree.
 3396|       |       Compare if the new time is earlier, and only remove-old/add-new if it
 3397|       |       is. */
 3398|    691|    timediff_t diff = Curl_timediff(set, *nowp);
 3399|    691|    int rc;
 3400|       |
 3401|    691|    if(diff > 0) {
 3402|       |      /* The current splay tree entry is sooner than this new expiry time.
 3403|       |         We don't need to update our splay tree entry. */
 3404|    691|      return;
 3405|    691|    }
 3406|       |
 3407|       |    /* Since this is an updated time, we must remove the previous entry from
 3408|       |       the splay tree first and then re-add the new value */
 3409|      0|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3410|      0|                          &multi->timetree);
 3411|      0|    if(rc)
 3412|      0|      infof(data, "Internal error removing splay node = %d", rc);
 3413|      0|  }
 3414|       |
 3415|       |  /* Indicate that we are in the splay tree and insert the new timer expiry
 3416|       |     value since it is our local minimum. */
 3417|    472|  *nowp = set;
 3418|    472|  data->state.timenode.payload = data;
 3419|    472|  multi->timetree = Curl_splayinsert(*nowp, multi->timetree,
 3420|    472|                                     &data->state.timenode);
 3421|    472|}
Curl_expire_clear:
 3441|  1.99k|{
 3442|  1.99k|  struct Curl_multi *multi = data->multi;
 3443|  1.99k|  struct curltime *nowp = &data->state.expiretime;
 3444|       |
 3445|       |  /* this is only interesting while there is still an associated multi struct
 3446|       |     remaining! */
 3447|  1.99k|  if(!multi)
 3448|  1.04k|    return;
 3449|       |
 3450|    944|  if(nowp->tv_sec || nowp->tv_usec) {
 3451|       |    /* Since this is an cleared time, we must remove the previous entry from
 3452|       |       the splay tree */
 3453|    472|    struct Curl_llist *list = &data->state.timeoutlist;
 3454|    472|    int rc;
 3455|       |
 3456|    472|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3457|    472|                          &multi->timetree);
 3458|    472|    if(rc)
 3459|      0|      infof(data, "Internal error clearing splay node = %d", rc);
 3460|       |
 3461|       |    /* flush the timeout list too */
 3462|  1.35k|    while(list->size > 0) {
 3463|    878|      Curl_llist_remove(list, list->tail, NULL);
 3464|    878|    }
 3465|       |
 3466|    472|#ifdef DEBUGBUILD
 3467|    472|    infof(data, "Expire cleared (transfer %p)", data);
 3468|    472|#endif
 3469|    472|    nowp->tv_sec = 0;
 3470|    472|    nowp->tv_usec = 0;
 3471|    472|  }
 3472|    944|}
Curl_multi_max_host_connections:
 3496|    406|{
 3497|    406|  return multi ? multi->max_host_connections : 0;
 3498|    406|}
Curl_multi_max_total_connections:
 3501|    406|{
 3502|    406|  return multi ? multi->max_total_connections : 0;
 3503|    406|}
Curl_set_in_callback:
 3545|  1.14k|{
 3546|       |  /* might get called when there is no data pointer! */
 3547|  1.14k|  if(data) {
 3548|  1.14k|    if(data->multi_easy)
 3549|      0|      data->multi_easy->in_callback = value;
 3550|  1.14k|    else if(data->multi)
 3551|  1.14k|      data->multi->in_callback = value;
 3552|  1.14k|  }
 3553|  1.14k|}
multi.c:sh_init:
  336|    472|{
  337|    472|  return Curl_hash_init(hash, hashsize, hash_fd, fd_key_compare,
  338|    472|                        sh_freeentry);
  339|    472|}
multi.c:hash_fd:
  310|    285|{
  311|    285|  curl_socket_t fd = *((curl_socket_t *) key);
  312|    285|  (void) key_length;
  313|       |
  314|    285|  return (fd % slots_num);
  315|    285|}
multi.c:mstate:
  131|  2.97k|{
  132|  2.97k|  CURLMstate oldstate = data->mstate;
  133|  2.97k|  static const init_multistate_func finit[MSTATE_LAST] = {
  134|  2.97k|    NULL,              /* INIT */
  135|  2.97k|    NULL,              /* PENDING */
  136|  2.97k|    Curl_init_CONNECT, /* CONNECT */
  137|  2.97k|    NULL,              /* RESOLVING */
  138|  2.97k|    NULL,              /* CONNECTING */
  139|  2.97k|    NULL,              /* TUNNELING */
  140|  2.97k|    NULL,              /* PROTOCONNECT */
  141|  2.97k|    NULL,              /* PROTOCONNECTING */
  142|  2.97k|    Curl_connect_free, /* DO */
  143|  2.97k|    NULL,              /* DOING */
  144|  2.97k|    NULL,              /* DOING_MORE */
  145|  2.97k|    before_perform,    /* DID */
  146|  2.97k|    NULL,              /* PERFORMING */
  147|  2.97k|    NULL,              /* RATELIMITING */
  148|  2.97k|    NULL,              /* DONE */
  149|  2.97k|    init_completed,    /* COMPLETED */
  150|       |    NULL               /* MSGSENT */
  151|  2.97k|  };
  152|       |
  153|       |#if defined(DEBUGBUILD) && defined(CURL_DISABLE_VERBOSE_STRINGS)
  154|       |  (void) lineno;
  155|       |#endif
  156|       |
  157|  2.97k|  if(oldstate == state)
  158|       |    /* don't bother when the new state is the same as the old state */
  159|    472|    return;
  160|       |
  161|  2.50k|  data->mstate = state;
  162|       |
  163|  2.50k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  164|  2.50k|  if(data->mstate >= MSTATE_PENDING &&
  165|  2.50k|     data->mstate < MSTATE_COMPLETED) {
  166|  1.55k|    long connection_id = -5000;
  167|       |
  168|  1.55k|    if(data->conn)
  169|  1.15k|      connection_id = data->conn->connection_id;
  170|       |
  171|  1.55k|    infof(data,
  172|  1.55k|          "STATE: %s => %s handle %p; line %d (connection #%ld)",
  173|  1.55k|          statename[oldstate], statename[data->mstate],
  174|  1.55k|          (void *)data, lineno, connection_id);
  175|  1.55k|  }
  176|  2.50k|#endif
  177|       |
  178|  2.50k|  if(state == MSTATE_COMPLETED) {
  179|       |    /* changing to COMPLETED means there's one less easy handle 'alive' */
  180|    472|    DEBUGASSERT(data->multi->num_alive > 0);
  181|    472|    data->multi->num_alive--;
  182|    472|  }
  183|       |
  184|       |  /* if this state has an init-function, run it */
  185|  2.50k|  if(finit[state])
  186|  1.16k|    finit[state](data);
  187|  2.50k|}
multi.c:before_perform:
  110|      4|{
  111|      4|  data->req.chunk = FALSE;
  112|      4|  Curl_pgrsTime(data, TIMER_PRETRANSFER);
  113|      4|}
multi.c:init_completed:
  116|    472|{
  117|       |  /* this is a completed transfer */
  118|       |
  119|       |  /* Important: reset the conn pointer so that we don't point to memory
  120|       |     that could be freed anytime */
  121|    472|  Curl_detach_connnection(data);
  122|    472|  Curl_expire_clear(data); /* stop all timers */
  123|    472|}
multi.c:multi_done:
  560|    285|{
  561|    285|  CURLcode result;
  562|    285|  struct connectdata *conn = data->conn;
  563|    285|  unsigned int i;
  564|       |
  565|    285|  DEBUGF(infof(data, "multi_done"));
  566|       |
  567|    285|  if(data->state.done)
  568|       |    /* Stop if multi_done() has already been called */
  569|      0|    return CURLE_OK;
  570|       |
  571|       |  /* Stop the resolver and free its own resources (but not dns_entry yet). */
  572|    285|  Curl_resolver_kill(data);
  573|       |
  574|       |  /* Cleanup possible redirect junk */
  575|    285|  Curl_safefree(data->req.newurl);
  576|    285|  Curl_safefree(data->req.location);
  577|       |
  578|    285|  switch(status) {
  579|      0|  case CURLE_ABORTED_BY_CALLBACK:
  580|      0|  case CURLE_READ_ERROR:
  581|      0|  case CURLE_WRITE_ERROR:
  582|       |    /* When we're aborted due to a callback return code it basically have to
  583|       |       be counted as premature as there is trouble ahead if we don't. We have
  584|       |       many callbacks and protocols work differently, we could potentially do
  585|       |       this more fine-grained in the future. */
  586|      0|    premature = TRUE;
  587|    285|  default:
  588|    285|    break;
  589|    285|  }
  590|       |
  591|       |  /* this calls the protocol-specific function pointer previously set */
  592|    285|  if(conn->handler->done)
  593|      0|    result = conn->handler->done(data, status, premature);
  594|    285|  else
  595|    285|    result = status;
  596|       |
  597|    285|  if(CURLE_ABORTED_BY_CALLBACK != result) {
  598|       |    /* avoid this if we already aborted by callback to avoid this calling
  599|       |       another callback */
  600|    285|    CURLcode rc = Curl_pgrsDone(data);
  601|    285|    if(!result && rc)
  602|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  603|    285|  }
  604|       |
  605|    285|  process_pending_handles(data->multi); /* connection / multiplex */
  606|       |
  607|    285|  CONNCACHE_LOCK(data);
  608|    285|  Curl_detach_connnection(data);
  609|    285|  if(CONN_INUSE(conn)) {
  610|       |    /* Stop if still used. */
  611|      0|    CONNCACHE_UNLOCK(data);
  612|      0|    DEBUGF(infof(data, "Connection still in use %zu, "
  613|      0|                 "no more multi_done now!",
  614|      0|                 conn->easyq.size));
  615|      0|    return CURLE_OK;
  616|      0|  }
  617|       |
  618|    285|  data->state.done = TRUE; /* called just now! */
  619|       |
  620|    285|  if(conn->dns_entry) {
  621|    285|    Curl_resolv_unlock(data, conn->dns_entry); /* done with this */
  622|    285|    conn->dns_entry = NULL;
  623|    285|  }
  624|    285|  Curl_hostcache_prune(data);
  625|    285|  Curl_safefree(data->state.ulbuf);
  626|       |
  627|       |  /* if the transfer was completed in a paused state there can be buffered
  628|       |     data left to free */
  629|    285|  for(i = 0; i < data->state.tempcount; i++) {
  630|      0|    Curl_dyn_free(&data->state.tempwrite[i].b);
  631|      0|  }
  632|    285|  data->state.tempcount = 0;
  633|       |
  634|       |  /* if data->set.reuse_forbid is TRUE, it means the libcurl client has
  635|       |     forced us to close this connection. This is ignored for requests taking
  636|       |     place in a NTLM/NEGOTIATE authentication handshake
  637|       |
  638|       |     if conn->bits.close is TRUE, it means that the connection should be
  639|       |     closed in spite of all our efforts to be nice, due to protocol
  640|       |     restrictions in our or the server's end
  641|       |
  642|       |     if premature is TRUE, it means this connection was said to be DONE before
  643|       |     the entire request operation is complete and thus we can't know in what
  644|       |     state it is for re-using, so we're forced to close it. In a perfect world
  645|       |     we can add code that keep track of if we really must close it here or not,
  646|       |     but currently we have no such detail knowledge.
  647|       |  */
  648|       |
  649|    285|  if((data->set.reuse_forbid
  650|    285|#if defined(USE_NTLM)
  651|    285|      && !(conn->http_ntlm_state == NTLMSTATE_TYPE2 ||
  652|      0|           conn->proxy_ntlm_state == NTLMSTATE_TYPE2)
  653|    285|#endif
  654|       |#if defined(USE_SPNEGO)
  655|       |      && !(conn->http_negotiate_state == GSS_AUTHRECV ||
  656|       |           conn->proxy_negotiate_state == GSS_AUTHRECV)
  657|       |#endif
  658|    285|     ) || conn->bits.close
  659|    285|       || (premature && !(conn->handler->flags & PROTOPT_STREAM))) {
  660|    285|    CURLcode res2;
  661|    285|    connclose(conn, "disconnecting");
  662|    285|    Curl_conncache_remove_conn(data, conn, FALSE);
  663|    285|    CONNCACHE_UNLOCK(data);
  664|    285|    res2 = Curl_disconnect(data, conn, premature);
  665|       |
  666|       |    /* If we had an error already, make sure we return that one. But
  667|       |       if we got a new error, return that. */
  668|    285|    if(!result && res2)
  669|      0|      result = res2;
  670|    285|  }
  671|      0|  else {
  672|      0|    char buffer[256];
  673|      0|    const char *host =
  674|      0|#ifndef CURL_DISABLE_PROXY
  675|      0|      conn->bits.socksproxy ?
  676|      0|      conn->socks_proxy.host.dispname :
  677|      0|      conn->bits.httpproxy ? conn->http_proxy.host.dispname :
  678|      0|#endif
  679|      0|      conn->bits.conn_to_host ? conn->conn_to_host.dispname :
  680|      0|      conn->host.dispname;
  681|       |    /* create string before returning the connection */
  682|      0|    msnprintf(buffer, sizeof(buffer),
  683|      0|              "Connection #%ld to host %s left intact",
  684|      0|              conn->connection_id, host);
  685|       |    /* the connection is no longer in use by this transfer */
  686|      0|    CONNCACHE_UNLOCK(data);
  687|      0|    if(Curl_conncache_return_conn(data, conn)) {
  688|       |      /* remember the most recently used connection */
  689|      0|      data->state.lastconnect_id = conn->connection_id;
  690|      0|      infof(data, "%s", buffer);
  691|      0|    }
  692|      0|    else
  693|      0|      data->state.lastconnect_id = -1;
  694|      0|  }
  695|       |
  696|    285|  Curl_safefree(data->state.buffer);
  697|    285|  Curl_free_request_state(data);
  698|    285|  return result;
  699|    285|}
multi.c:multi_getsock:
  984|  15.8M|{
  985|  15.8M|  struct connectdata *conn = data->conn;
  986|       |  /* The no connection case can happen when this is called from
  987|       |     curl_multi_remove_handle() => singlesocket() => multi_getsock().
  988|       |  */
  989|  15.8M|  if(!conn)
  990|    472|    return 0;
  991|       |
  992|  15.8M|  switch(data->mstate) {
  993|      0|  default:
  994|      0|    return 0;
  995|       |
  996|      0|  case MSTATE_RESOLVING:
  997|      0|    return Curl_resolv_getsock(data, socks);
  998|       |
  999|      0|  case MSTATE_PROTOCONNECTING:
 1000|      0|  case MSTATE_PROTOCONNECT:
 1001|      0|    return protocol_getsock(data, conn, socks);
 1002|       |
 1003|      0|  case MSTATE_DO:
 1004|  15.8M|  case MSTATE_DOING:
 1005|  15.8M|    return doing_getsock(data, conn, socks);
 1006|       |
 1007|      0|  case MSTATE_TUNNELING:
 1008|      0|    return waitproxyconnect_getsock(conn, socks);
 1009|       |
 1010|      0|  case MSTATE_CONNECTING:
 1011|      0|    return waitconnect_getsock(conn, socks);
 1012|       |
 1013|      0|  case MSTATE_DOING_MORE:
 1014|      0|    return domore_getsock(data, conn, socks);
 1015|       |
 1016|      0|  case MSTATE_DID: /* since is set after DO is completed, we switch to
 1017|       |                        waiting for the same as the PERFORMING state */
 1018|      0|  case MSTATE_PERFORMING:
 1019|      0|    return Curl_single_getsock(data, conn, socks);
 1020|  15.8M|  }
 1021|       |
 1022|  15.8M|}
multi.c:doing_getsock:
  961|  15.8M|{
  962|  15.8M|  if(conn && conn->handler->doing_getsock)
  963|  15.8M|    return conn->handler->doing_getsock(data, conn, socks);
  964|      0|  return GETSOCK_BLANK;
  965|  15.8M|}
multi.c:multi_runsingle:
 1729|  15.8M|{
 1730|  15.8M|  struct Curl_message *msg = NULL;
 1731|  15.8M|  bool connected;
 1732|  15.8M|  bool async;
 1733|  15.8M|  bool protocol_connected = FALSE;
 1734|  15.8M|  bool dophase_done = FALSE;
 1735|  15.8M|  bool done = FALSE;
 1736|  15.8M|  CURLMcode rc;
 1737|  15.8M|  CURLcode result = CURLE_OK;
 1738|  15.8M|  timediff_t recv_timeout_ms;
 1739|  15.8M|  timediff_t send_timeout_ms;
 1740|  15.8M|  int control;
 1741|       |
 1742|  15.8M|  if(!GOOD_EASY_HANDLE(data))
 1743|      0|    return CURLM_BAD_EASY_HANDLE;
 1744|       |
 1745|  15.8M|  do {
 1746|       |    /* A "stream" here is a logical stream if the protocol can handle that
 1747|       |       (HTTP/2), or the full connection for older protocols */
 1748|  15.8M|    bool stream_error = FALSE;
 1749|  15.8M|    rc = CURLM_OK;
 1750|       |
 1751|  15.8M|    if(multi_ischanged(multi, TRUE)) {
 1752|      0|      DEBUGF(infof(data, "multi changed, check CONNECT_PEND queue!"));
 1753|      0|      process_pending_handles(multi); /* multiplexed */
 1754|      0|    }
 1755|       |
 1756|  15.8M|    if(data->mstate > MSTATE_CONNECT &&
 1757|  15.8M|       data->mstate < MSTATE_COMPLETED) {
 1758|       |      /* Make sure we set the connection's current owner */
 1759|  15.8M|      DEBUGASSERT(data->conn);
 1760|  15.8M|      if(!data->conn)
 1761|      0|        return CURLM_INTERNAL_ERROR;
 1762|  15.8M|    }
 1763|       |
 1764|  15.8M|    if(data->conn &&
 1765|  15.8M|       (data->mstate >= MSTATE_CONNECT) &&
 1766|  15.8M|       (data->mstate < MSTATE_COMPLETED)) {
 1767|       |      /* Check for overall operation timeout here but defer handling the
 1768|       |       * connection timeout to later, to allow for a connection to be set up
 1769|       |       * in the window since we last checked timeout. This prevents us
 1770|       |       * tearing down a completed connection in the case where we were slow
 1771|       |       * to check the timeout (e.g. process descheduled during this loop).
 1772|       |       * We set connect_timeout=FALSE to do this. */
 1773|       |
 1774|       |      /* we need to wait for the connect state as only then is the start time
 1775|       |         stored, but we must not check already completed handles */
 1776|  15.8M|      if(multi_handle_timeout(data, nowp, &stream_error, &result, FALSE)) {
 1777|       |        /* Skip the statemachine and go directly to error handling section. */
 1778|    264|        goto statemachine_end;
 1779|    264|      }
 1780|  15.8M|    }
 1781|       |
 1782|  15.8M|    switch(data->mstate) {
 1783|    472|    case MSTATE_INIT:
 1784|       |      /* init this transfer. */
 1785|    472|      result = Curl_pretransfer(data);
 1786|       |
 1787|    472|      if(!result) {
 1788|       |        /* after init, go CONNECT */
 1789|    406|        multistate(data, MSTATE_CONNECT);
 1790|    406|        *nowp = Curl_pgrsTime(data, TIMER_STARTOP);
 1791|    406|        rc = CURLM_CALL_MULTI_PERFORM;
 1792|    406|      }
 1793|    472|      break;
 1794|       |
 1795|      0|    case MSTATE_PENDING:
 1796|       |      /* We will stay here until there is a connection available. Then
 1797|       |         we try again in the MSTATE_CONNECT state. */
 1798|      0|      break;
 1799|       |
 1800|    406|    case MSTATE_CONNECT:
 1801|       |      /* Connect. We want to get a connection identifier filled in. */
 1802|       |      /* init this transfer. */
 1803|    406|      result = Curl_preconnect(data);
 1804|    406|      if(result)
 1805|      0|        break;
 1806|       |
 1807|    406|      *nowp = Curl_pgrsTime(data, TIMER_STARTSINGLE);
 1808|    406|      if(data->set.timeout)
 1809|    406|        Curl_expire(data, data->set.timeout, EXPIRE_TIMEOUT);
 1810|       |
 1811|    406|      if(data->set.connecttimeout)
 1812|      0|        Curl_expire(data, data->set.connecttimeout, EXPIRE_CONNECTTIMEOUT);
 1813|       |
 1814|    406|      result = Curl_connect(data, &async, &protocol_connected);
 1815|    406|      if(CURLE_NO_CONNECTION_AVAILABLE == result) {
 1816|       |        /* There was no connection available. We will go to the pending
 1817|       |           state and wait for an available connection. */
 1818|      0|        multistate(data, MSTATE_PENDING);
 1819|       |
 1820|       |        /* add this handle to the list of connect-pending handles */
 1821|      0|        Curl_llist_insert_next(&multi->pending, multi->pending.tail, data,
 1822|      0|                               &data->connect_queue);
 1823|      0|        result = CURLE_OK;
 1824|      0|        break;
 1825|      0|      }
 1826|    406|      else if(data->state.previouslypending) {
 1827|       |        /* this transfer comes from the pending queue so try move another */
 1828|      0|        infof(data, "Transfer was pending, now try another");
 1829|      0|        process_pending_handles(data->multi);
 1830|      0|      }
 1831|       |
 1832|    406|      if(!result) {
 1833|    285|        if(async)
 1834|       |          /* We're now waiting for an asynchronous name lookup */
 1835|      0|          multistate(data, MSTATE_RESOLVING);
 1836|    285|        else {
 1837|       |          /* after the connect has been sent off, go WAITCONNECT unless the
 1838|       |             protocol connect is already done and we can go directly to
 1839|       |             WAITDO or DO! */
 1840|    285|          rc = CURLM_CALL_MULTI_PERFORM;
 1841|       |
 1842|    285|          if(protocol_connected)
 1843|      0|            multistate(data, MSTATE_DO);
 1844|    285|          else {
 1845|    285|#ifndef CURL_DISABLE_HTTP
 1846|    285|            if(Curl_connect_ongoing(data->conn))
 1847|      0|              multistate(data, MSTATE_TUNNELING);
 1848|    285|            else
 1849|    285|#endif
 1850|    285|              multistate(data, MSTATE_CONNECTING);
 1851|    285|          }
 1852|    285|        }
 1853|    285|      }
 1854|    406|      break;
 1855|       |
 1856|      0|    case MSTATE_RESOLVING:
 1857|       |      /* awaiting an asynch name resolve to complete */
 1858|      0|    {
 1859|      0|      struct Curl_dns_entry *dns = NULL;
 1860|      0|      struct connectdata *conn = data->conn;
 1861|      0|      const char *hostname;
 1862|       |
 1863|      0|      DEBUGASSERT(conn);
 1864|      0|#ifndef CURL_DISABLE_PROXY
 1865|      0|      if(conn->bits.httpproxy)
 1866|      0|        hostname = conn->http_proxy.host.name;
 1867|      0|      else
 1868|      0|#endif
 1869|      0|        if(conn->bits.conn_to_host)
 1870|      0|        hostname = conn->conn_to_host.name;
 1871|      0|      else
 1872|      0|        hostname = conn->host.name;
 1873|       |
 1874|       |      /* check if we have the name resolved by now */
 1875|      0|      dns = Curl_fetch_addr(data, hostname, (int)conn->port);
 1876|       |
 1877|      0|      if(dns) {
 1878|      0|#ifdef CURLRES_ASYNCH
 1879|      0|        data->state.async.dns = dns;
 1880|      0|        data->state.async.done = TRUE;
 1881|      0|#endif
 1882|      0|        result = CURLE_OK;
 1883|      0|        infof(data, "Hostname '%s' was found in DNS cache", hostname);
 1884|      0|      }
 1885|       |
 1886|      0|      if(!dns)
 1887|      0|        result = Curl_resolv_check(data, &dns);
 1888|       |
 1889|       |      /* Update sockets here, because the socket(s) may have been
 1890|       |         closed and the application thus needs to be told, even if it
 1891|       |         is likely that the same socket(s) will again be used further
 1892|       |         down.  If the name has not yet been resolved, it is likely
 1893|       |         that new sockets have been opened in an attempt to contact
 1894|       |         another resolver. */
 1895|      0|      singlesocket(multi, data);
 1896|       |
 1897|      0|      if(dns) {
 1898|       |        /* Perform the next step in the connection phase, and then move on
 1899|       |           to the WAITCONNECT state */
 1900|      0|        result = Curl_once_resolved(data, &protocol_connected);
 1901|       |
 1902|      0|        if(result)
 1903|       |          /* if Curl_once_resolved() returns failure, the connection struct
 1904|       |             is already freed and gone */
 1905|      0|          data->conn = NULL; /* no more connection */
 1906|      0|        else {
 1907|       |          /* call again please so that we get the next socket setup */
 1908|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 1909|      0|          if(protocol_connected)
 1910|      0|            multistate(data, MSTATE_DO);
 1911|      0|          else {
 1912|      0|#ifndef CURL_DISABLE_HTTP
 1913|      0|            if(Curl_connect_ongoing(data->conn))
 1914|      0|              multistate(data, MSTATE_TUNNELING);
 1915|      0|            else
 1916|      0|#endif
 1917|      0|              multistate(data, MSTATE_CONNECTING);
 1918|      0|          }
 1919|      0|        }
 1920|      0|      }
 1921|       |
 1922|      0|      if(result) {
 1923|       |        /* failure detected */
 1924|      0|        stream_error = TRUE;
 1925|      0|        break;
 1926|      0|      }
 1927|      0|    }
 1928|      0|    break;
 1929|       |
 1930|      0|#ifndef CURL_DISABLE_HTTP
 1931|      0|    case MSTATE_TUNNELING:
 1932|       |      /* this is HTTP-specific, but sending CONNECT to a proxy is HTTP... */
 1933|      0|      DEBUGASSERT(data->conn);
 1934|      0|      result = Curl_http_connect(data, &protocol_connected);
 1935|      0|#ifndef CURL_DISABLE_PROXY
 1936|      0|      if(data->conn->bits.proxy_connect_closed) {
 1937|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 1938|       |        /* connect back to proxy again */
 1939|      0|        result = CURLE_OK;
 1940|      0|        multi_done(data, CURLE_OK, FALSE);
 1941|      0|        multistate(data, MSTATE_CONNECT);
 1942|      0|      }
 1943|      0|      else
 1944|      0|#endif
 1945|      0|        if(!result) {
 1946|      0|          if(
 1947|      0|#ifndef CURL_DISABLE_PROXY
 1948|      0|            (data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||
 1949|      0|             data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&
 1950|      0|#endif
 1951|      0|            Curl_connect_complete(data->conn)) {
 1952|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 1953|       |            /* initiate protocol connect phase */
 1954|      0|            multistate(data, MSTATE_PROTOCONNECT);
 1955|      0|          }
 1956|      0|        }
 1957|      0|      else
 1958|      0|        stream_error = TRUE;
 1959|      0|      break;
 1960|      0|#endif
 1961|       |
 1962|    285|    case MSTATE_CONNECTING:
 1963|       |      /* awaiting a completion of an asynch TCP connect */
 1964|    285|      DEBUGASSERT(data->conn);
 1965|    285|      result = Curl_is_connected(data, data->conn, FIRSTSOCKET, &connected);
 1966|    285|      if(connected && !result) {
 1967|    285|#ifndef CURL_DISABLE_HTTP
 1968|    285|        if(
 1969|    285|#ifndef CURL_DISABLE_PROXY
 1970|    285|          (data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&
 1971|    285|           !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||
 1972|    285|#endif
 1973|    285|          Curl_connect_ongoing(data->conn)) {
 1974|      0|          multistate(data, MSTATE_TUNNELING);
 1975|      0|          break;
 1976|      0|        }
 1977|    285|#endif
 1978|    285|        rc = CURLM_CALL_MULTI_PERFORM;
 1979|    285|#ifndef CURL_DISABLE_PROXY
 1980|    285|        multistate(data,
 1981|    285|                   data->conn->bits.tunnel_proxy?
 1982|    285|                   MSTATE_TUNNELING : MSTATE_PROTOCONNECT);
 1983|       |#else
 1984|       |        multistate(data, MSTATE_PROTOCONNECT);
 1985|       |#endif
 1986|    285|      }
 1987|      0|      else if(result) {
 1988|       |        /* failure detected */
 1989|      0|        Curl_posttransfer(data);
 1990|      0|        multi_done(data, result, TRUE);
 1991|      0|        stream_error = TRUE;
 1992|      0|        break;
 1993|      0|      }
 1994|    285|      break;
 1995|       |
 1996|    285|    case MSTATE_PROTOCONNECT:
 1997|    285|      result = protocol_connect(data, &protocol_connected);
 1998|    285|      if(!result && !protocol_connected)
 1999|       |        /* switch to waiting state */
 2000|      0|        multistate(data, MSTATE_PROTOCONNECTING);
 2001|    285|      else if(!result) {
 2002|       |        /* protocol connect has completed, go WAITDO or DO */
 2003|    285|        multistate(data, MSTATE_DO);
 2004|    285|        rc = CURLM_CALL_MULTI_PERFORM;
 2005|    285|      }
 2006|      0|      else {
 2007|       |        /* failure detected */
 2008|      0|        Curl_posttransfer(data);
 2009|      0|        multi_done(data, result, TRUE);
 2010|      0|        stream_error = TRUE;
 2011|      0|      }
 2012|    285|      break;
 2013|       |
 2014|      0|    case MSTATE_PROTOCONNECTING:
 2015|       |      /* protocol-specific connect phase */
 2016|      0|      result = protocol_connecting(data, &protocol_connected);
 2017|      0|      if(!result && protocol_connected) {
 2018|       |        /* after the connect has completed, go WAITDO or DO */
 2019|      0|        multistate(data, MSTATE_DO);
 2020|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2021|      0|      }
 2022|      0|      else if(result) {
 2023|       |        /* failure detected */
 2024|      0|        Curl_posttransfer(data);
 2025|      0|        multi_done(data, result, TRUE);
 2026|      0|        stream_error = TRUE;
 2027|      0|      }
 2028|      0|      break;
 2029|       |
 2030|    285|    case MSTATE_DO:
 2031|    285|      if(data->set.fprereq) {
 2032|      0|        int prereq_rc;
 2033|       |
 2034|       |        /* call the prerequest callback function */
 2035|      0|        Curl_set_in_callback(data, true);
 2036|      0|        prereq_rc = data->set.fprereq(data->set.prereq_userp,
 2037|      0|                                      data->info.conn_primary_ip,
 2038|      0|                                      data->info.conn_local_ip,
 2039|      0|                                      data->info.conn_primary_port,
 2040|      0|                                      data->info.conn_local_port);
 2041|      0|        Curl_set_in_callback(data, false);
 2042|      0|        if(prereq_rc != CURL_PREREQFUNC_OK) {
 2043|      0|          failf(data, "operation aborted by pre-request callback");
 2044|       |          /* failure in pre-request callback - don't do any other processing */
 2045|      0|          result = CURLE_ABORTED_BY_CALLBACK;
 2046|      0|          Curl_posttransfer(data);
 2047|      0|          multi_done(data, result, FALSE);
 2048|      0|          stream_error = TRUE;
 2049|      0|          break;
 2050|      0|        }
 2051|      0|      }
 2052|       |
 2053|    285|      if(data->set.connect_only) {
 2054|       |        /* keep connection open for application to use the socket */
 2055|      0|        connkeep(data->conn, "CONNECT_ONLY");
 2056|      0|        multistate(data, MSTATE_DONE);
 2057|      0|        result = CURLE_OK;
 2058|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2059|      0|      }
 2060|    285|      else {
 2061|       |        /* Perform the protocol's DO action */
 2062|    285|        result = multi_do(data, &dophase_done);
 2063|       |
 2064|       |        /* When multi_do() returns failure, data->conn might be NULL! */
 2065|       |
 2066|    285|        if(!result) {
 2067|    285|          if(!dophase_done) {
 2068|    285|#ifndef CURL_DISABLE_FTP
 2069|       |            /* some steps needed for wildcard matching */
 2070|    285|            if(data->state.wildcardmatch) {
 2071|      0|              struct WildcardData *wc = &data->wildcard;
 2072|      0|              if(wc->state == CURLWC_DONE || wc->state == CURLWC_SKIP) {
 2073|       |                /* skip some states if it is important */
 2074|      0|                multi_done(data, CURLE_OK, FALSE);
 2075|       |
 2076|       |                /* if there's no connection left, skip the DONE state */
 2077|      0|                multistate(data, data->conn ?
 2078|      0|                           MSTATE_DONE : MSTATE_COMPLETED);
 2079|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2080|      0|                break;
 2081|      0|              }
 2082|      0|            }
 2083|    285|#endif
 2084|       |            /* DO was not completed in one function call, we must continue
 2085|       |               DOING... */
 2086|    285|            multistate(data, MSTATE_DOING);
 2087|    285|            rc = CURLM_OK;
 2088|    285|          }
 2089|       |
 2090|       |          /* after DO, go DO_DONE... or DO_MORE */
 2091|      0|          else if(data->conn->bits.do_more) {
 2092|       |            /* we're supposed to do more, but we need to sit down, relax
 2093|       |               and wait a little while first */
 2094|      0|            multistate(data, MSTATE_DOING_MORE);
 2095|      0|            rc = CURLM_OK;
 2096|      0|          }
 2097|      0|          else {
 2098|       |            /* we're done with the DO, now DID */
 2099|      0|            multistate(data, MSTATE_DID);
 2100|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 2101|      0|          }
 2102|    285|        }
 2103|      0|        else if((CURLE_SEND_ERROR == result) &&
 2104|      0|                data->conn->bits.reuse) {
 2105|       |          /*
 2106|       |           * In this situation, a connection that we were trying to use
 2107|       |           * may have unexpectedly died.  If possible, send the connection
 2108|       |           * back to the CONNECT phase so we can try again.
 2109|       |           */
 2110|      0|          char *newurl = NULL;
 2111|      0|          followtype follow = FOLLOW_NONE;
 2112|      0|          CURLcode drc;
 2113|       |
 2114|      0|          drc = Curl_retry_request(data, &newurl);
 2115|      0|          if(drc) {
 2116|       |            /* a failure here pretty much implies an out of memory */
 2117|      0|            result = drc;
 2118|      0|            stream_error = TRUE;
 2119|      0|          }
 2120|       |
 2121|      0|          Curl_posttransfer(data);
 2122|      0|          drc = multi_done(data, result, FALSE);
 2123|       |
 2124|       |          /* When set to retry the connection, we must to go back to
 2125|       |           * the CONNECT state */
 2126|      0|          if(newurl) {
 2127|      0|            if(!drc || (drc == CURLE_SEND_ERROR)) {
 2128|      0|              follow = FOLLOW_RETRY;
 2129|      0|              drc = Curl_follow(data, newurl, follow);
 2130|      0|              if(!drc) {
 2131|      0|                multistate(data, MSTATE_CONNECT);
 2132|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2133|      0|                result = CURLE_OK;
 2134|      0|              }
 2135|      0|              else {
 2136|       |                /* Follow failed */
 2137|      0|                result = drc;
 2138|      0|              }
 2139|      0|            }
 2140|      0|            else {
 2141|       |              /* done didn't return OK or SEND_ERROR */
 2142|      0|              result = drc;
 2143|      0|            }
 2144|      0|          }
 2145|      0|          else {
 2146|       |            /* Have error handler disconnect conn if we can't retry */
 2147|      0|            stream_error = TRUE;
 2148|      0|          }
 2149|      0|          free(newurl);
 2150|      0|        }
 2151|      0|        else {
 2152|       |          /* failure detected */
 2153|      0|          Curl_posttransfer(data);
 2154|      0|          if(data->conn)
 2155|      0|            multi_done(data, result, FALSE);
 2156|      0|          stream_error = TRUE;
 2157|      0|        }
 2158|    285|      }
 2159|    285|      break;
 2160|       |
 2161|  15.8M|    case MSTATE_DOING:
 2162|       |      /* we continue DOING until the DO phase is complete */
 2163|  15.8M|      DEBUGASSERT(data->conn);
 2164|  15.8M|      result = protocol_doing(data, &dophase_done);
 2165|  15.8M|      if(!result) {
 2166|  15.8M|        if(dophase_done) {
 2167|       |          /* after DO, go DO_DONE or DO_MORE */
 2168|      4|          multistate(data, data->conn->bits.do_more?
 2169|      4|                     MSTATE_DOING_MORE : MSTATE_DID);
 2170|      4|          rc = CURLM_CALL_MULTI_PERFORM;
 2171|      4|        } /* dophase_done */
 2172|  15.8M|      }
 2173|     17|      else {
 2174|       |        /* failure detected */
 2175|     17|        Curl_posttransfer(data);
 2176|     17|        multi_done(data, result, FALSE);
 2177|     17|        stream_error = TRUE;
 2178|     17|      }
 2179|  15.8M|      break;
 2180|       |
 2181|      0|    case MSTATE_DOING_MORE:
 2182|       |      /*
 2183|       |       * When we are connected, DOING MORE and then go DID
 2184|       |       */
 2185|      0|      DEBUGASSERT(data->conn);
 2186|      0|      result = multi_do_more(data, &control);
 2187|       |
 2188|      0|      if(!result) {
 2189|      0|        if(control) {
 2190|       |          /* if positive, advance to DO_DONE
 2191|       |             if negative, go back to DOING */
 2192|      0|          multistate(data, control == 1?
 2193|      0|                     MSTATE_DID : MSTATE_DOING);
 2194|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 2195|      0|        }
 2196|      0|        else
 2197|       |          /* stay in DO_MORE */
 2198|      0|          rc = CURLM_OK;
 2199|      0|      }
 2200|      0|      else {
 2201|       |        /* failure detected */
 2202|      0|        Curl_posttransfer(data);
 2203|      0|        multi_done(data, result, FALSE);
 2204|      0|        stream_error = TRUE;
 2205|      0|      }
 2206|      0|      break;
 2207|       |
 2208|      4|    case MSTATE_DID:
 2209|      4|      DEBUGASSERT(data->conn);
 2210|      4|      if(data->conn->bits.multiplex)
 2211|       |        /* Check if we can move pending requests to send pipe */
 2212|      0|        process_pending_handles(multi); /*  multiplexed */
 2213|       |
 2214|       |      /* Only perform the transfer if there's a good socket to work with.
 2215|       |         Having both BAD is a signal to skip immediately to DONE */
 2216|      4|      if((data->conn->sockfd != CURL_SOCKET_BAD) ||
 2217|      4|         (data->conn->writesockfd != CURL_SOCKET_BAD))
 2218|      4|        multistate(data, MSTATE_PERFORMING);
 2219|      0|      else {
 2220|      0|#ifndef CURL_DISABLE_FTP
 2221|      0|        if(data->state.wildcardmatch &&
 2222|      0|           ((data->conn->handler->flags & PROTOPT_WILDCARD) == 0)) {
 2223|      0|          data->wildcard.state = CURLWC_DONE;
 2224|      0|        }
 2225|      0|#endif
 2226|      0|        multistate(data, MSTATE_DONE);
 2227|      0|      }
 2228|      4|      rc = CURLM_CALL_MULTI_PERFORM;
 2229|      4|      break;
 2230|       |
 2231|      0|    case MSTATE_RATELIMITING: /* limit-rate exceeded in either direction */
 2232|      0|      DEBUGASSERT(data->conn);
 2233|       |      /* if both rates are within spec, resume transfer */
 2234|      0|      if(Curl_pgrsUpdate(data))
 2235|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2236|      0|      else
 2237|      0|        result = Curl_speedcheck(data, *nowp);
 2238|       |
 2239|      0|      if(result) {
 2240|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2241|      0|           result != CURLE_HTTP2_STREAM)
 2242|      0|          streamclose(data->conn, "Transfer returned error");
 2243|       |
 2244|      0|        Curl_posttransfer(data);
 2245|      0|        multi_done(data, result, TRUE);
 2246|      0|      }
 2247|      0|      else {
 2248|      0|        send_timeout_ms = 0;
 2249|      0|        if(data->set.max_send_speed)
 2250|      0|          send_timeout_ms =
 2251|      0|            Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2252|      0|                                   data->progress.ul_limit_size,
 2253|      0|                                   data->set.max_send_speed,
 2254|      0|                                   data->progress.ul_limit_start,
 2255|      0|                                   *nowp);
 2256|       |
 2257|      0|        recv_timeout_ms = 0;
 2258|      0|        if(data->set.max_recv_speed)
 2259|      0|          recv_timeout_ms =
 2260|      0|            Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2261|      0|                                   data->progress.dl_limit_size,
 2262|      0|                                   data->set.max_recv_speed,
 2263|      0|                                   data->progress.dl_limit_start,
 2264|      0|                                   *nowp);
 2265|       |
 2266|      0|        if(!send_timeout_ms && !recv_timeout_ms) {
 2267|      0|          multistate(data, MSTATE_PERFORMING);
 2268|      0|          Curl_ratelimit(data, *nowp);
 2269|      0|        }
 2270|      0|        else if(send_timeout_ms >= recv_timeout_ms)
 2271|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2272|      0|        else
 2273|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2274|      0|      }
 2275|      0|      break;
 2276|       |
 2277|      4|    case MSTATE_PERFORMING:
 2278|      4|    {
 2279|      4|      char *newurl = NULL;
 2280|      4|      bool retry = FALSE;
 2281|      4|      bool comeback = FALSE;
 2282|      4|      DEBUGASSERT(data->state.buffer);
 2283|       |      /* check if over send speed */
 2284|      4|      send_timeout_ms = 0;
 2285|      4|      if(data->set.max_send_speed)
 2286|      0|        send_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2287|      0|                                                 data->progress.ul_limit_size,
 2288|      0|                                                 data->set.max_send_speed,
 2289|      0|                                                 data->progress.ul_limit_start,
 2290|      0|                                                 *nowp);
 2291|       |
 2292|       |      /* check if over recv speed */
 2293|      4|      recv_timeout_ms = 0;
 2294|      4|      if(data->set.max_recv_speed)
 2295|      0|        recv_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2296|      0|                                                 data->progress.dl_limit_size,
 2297|      0|                                                 data->set.max_recv_speed,
 2298|      0|                                                 data->progress.dl_limit_start,
 2299|      0|                                                 *nowp);
 2300|       |
 2301|      4|      if(send_timeout_ms || recv_timeout_ms) {
 2302|      0|        Curl_ratelimit(data, *nowp);
 2303|      0|        multistate(data, MSTATE_RATELIMITING);
 2304|      0|        if(send_timeout_ms >= recv_timeout_ms)
 2305|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2306|      0|        else
 2307|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2308|      0|        break;
 2309|      0|      }
 2310|       |
 2311|       |      /* read/write data if it is ready to do so */
 2312|      4|      result = Curl_readwrite(data->conn, data, &done, &comeback);
 2313|       |
 2314|      4|      if(done || (result == CURLE_RECV_ERROR)) {
 2315|       |        /* If CURLE_RECV_ERROR happens early enough, we assume it was a race
 2316|       |         * condition and the server closed the re-used connection exactly when
 2317|       |         * we wanted to use it, so figure out if that is indeed the case.
 2318|       |         */
 2319|      4|        CURLcode ret = Curl_retry_request(data, &newurl);
 2320|      4|        if(!ret)
 2321|      4|          retry = (newurl)?TRUE:FALSE;
 2322|      0|        else if(!result)
 2323|      0|          result = ret;
 2324|       |
 2325|      4|        if(retry) {
 2326|       |          /* if we are to retry, set the result to OK and consider the
 2327|       |             request as done */
 2328|      0|          result = CURLE_OK;
 2329|      0|          done = TRUE;
 2330|      0|        }
 2331|      4|      }
 2332|      0|      else if((CURLE_HTTP2_STREAM == result) &&
 2333|      0|              Curl_h2_http_1_1_error(data)) {
 2334|      0|        CURLcode ret = Curl_retry_request(data, &newurl);
 2335|       |
 2336|      0|        if(!ret) {
 2337|      0|          infof(data, "Downgrades to HTTP/1.1!");
 2338|      0|          streamclose(data->conn, "Disconnect HTTP/2 for HTTP/1");
 2339|      0|          data->state.httpwant = CURL_HTTP_VERSION_1_1;
 2340|       |          /* clear the error message bit too as we ignore the one we got */
 2341|      0|          data->state.errorbuf = FALSE;
 2342|      0|          if(!newurl)
 2343|       |            /* typically for HTTP_1_1_REQUIRED error on first flight */
 2344|      0|            newurl = strdup(data->state.url);
 2345|       |          /* if we are to retry, set the result to OK and consider the request
 2346|       |             as done */
 2347|      0|          retry = TRUE;
 2348|      0|          result = CURLE_OK;
 2349|      0|          done = TRUE;
 2350|      0|        }
 2351|      0|        else
 2352|      0|          result = ret;
 2353|      0|      }
 2354|       |
 2355|      4|      if(result) {
 2356|       |        /*
 2357|       |         * The transfer phase returned error, we mark the connection to get
 2358|       |         * closed to prevent being re-used. This is because we can't possibly
 2359|       |         * know if the connection is in a good shape or not now.  Unless it is
 2360|       |         * a protocol which uses two "channels" like FTP, as then the error
 2361|       |         * happened in the data connection.
 2362|       |         */
 2363|       |
 2364|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2365|      0|           result != CURLE_HTTP2_STREAM)
 2366|      0|          streamclose(data->conn, "Transfer returned error");
 2367|       |
 2368|      0|        Curl_posttransfer(data);
 2369|      0|        multi_done(data, result, TRUE);
 2370|      0|      }
 2371|      4|      else if(done) {
 2372|       |
 2373|       |        /* call this even if the readwrite function returned error */
 2374|      4|        Curl_posttransfer(data);
 2375|       |
 2376|       |        /* When we follow redirects or is set to retry the connection, we must
 2377|       |           to go back to the CONNECT state */
 2378|      4|        if(data->req.newurl || retry) {
 2379|      0|          followtype follow = FOLLOW_NONE;
 2380|      0|          if(!retry) {
 2381|       |            /* if the URL is a follow-location and not just a retried request
 2382|       |               then figure out the URL here */
 2383|      0|            free(newurl);
 2384|      0|            newurl = data->req.newurl;
 2385|      0|            data->req.newurl = NULL;
 2386|      0|            follow = FOLLOW_REDIR;
 2387|      0|          }
 2388|      0|          else
 2389|      0|            follow = FOLLOW_RETRY;
 2390|      0|          (void)multi_done(data, CURLE_OK, FALSE);
 2391|       |          /* multi_done() might return CURLE_GOT_NOTHING */
 2392|      0|          result = Curl_follow(data, newurl, follow);
 2393|      0|          if(!result) {
 2394|      0|            multistate(data, MSTATE_CONNECT);
 2395|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 2396|      0|          }
 2397|      0|          free(newurl);
 2398|      0|        }
 2399|      4|        else {
 2400|       |          /* after the transfer is done, go DONE */
 2401|       |
 2402|       |          /* but first check to see if we got a location info even though we're
 2403|       |             not following redirects */
 2404|      4|          if(data->req.location) {
 2405|      0|            free(newurl);
 2406|      0|            newurl = data->req.location;
 2407|      0|            data->req.location = NULL;
 2408|      0|            result = Curl_follow(data, newurl, FOLLOW_FAKE);
 2409|      0|            free(newurl);
 2410|      0|            if(result) {
 2411|      0|              stream_error = TRUE;
 2412|      0|              result = multi_done(data, result, TRUE);
 2413|      0|            }
 2414|      0|          }
 2415|       |
 2416|      4|          if(!result) {
 2417|      4|            multistate(data, MSTATE_DONE);
 2418|      4|            rc = CURLM_CALL_MULTI_PERFORM;
 2419|      4|          }
 2420|      4|        }
 2421|      4|      }
 2422|      0|      else if(comeback) {
 2423|       |        /* This avoids CURLM_CALL_MULTI_PERFORM so that a very fast transfer
 2424|       |           won't get stuck on this transfer at the expense of other concurrent
 2425|       |           transfers */
 2426|      0|        Curl_expire(data, 0, EXPIRE_RUN_NOW);
 2427|      0|        rc = CURLM_OK;
 2428|      0|      }
 2429|      4|      break;
 2430|      4|    }
 2431|       |
 2432|      4|    case MSTATE_DONE:
 2433|       |      /* this state is highly transient, so run another loop after this */
 2434|      4|      rc = CURLM_CALL_MULTI_PERFORM;
 2435|       |
 2436|      4|      if(data->conn) {
 2437|      4|        CURLcode res;
 2438|       |
 2439|      4|        if(data->conn->bits.multiplex)
 2440|       |          /* Check if we can move pending requests to connection */
 2441|      0|          process_pending_handles(multi); /* multiplexing */
 2442|       |
 2443|       |        /* post-transfer command */
 2444|      4|        res = multi_done(data, result, FALSE);
 2445|       |
 2446|       |        /* allow a previously set error code take precedence */
 2447|      4|        if(!result)
 2448|      4|          result = res;
 2449|      4|      }
 2450|       |
 2451|      4|#ifndef CURL_DISABLE_FTP
 2452|      4|      if(data->state.wildcardmatch) {
 2453|      0|        if(data->wildcard.state != CURLWC_DONE) {
 2454|       |          /* if a wildcard is set and we are not ending -> lets start again
 2455|       |             with MSTATE_INIT */
 2456|      0|          multistate(data, MSTATE_INIT);
 2457|      0|          break;
 2458|      0|        }
 2459|      0|      }
 2460|      4|#endif
 2461|       |      /* after we have DONE what we're supposed to do, go COMPLETED, and
 2462|       |         it doesn't matter what the multi_done() returned! */
 2463|      4|      multistate(data, MSTATE_COMPLETED);
 2464|      4|      break;
 2465|       |
 2466|      0|    case MSTATE_COMPLETED:
 2467|      0|      break;
 2468|       |
 2469|      0|    case MSTATE_MSGSENT:
 2470|      0|      data->result = result;
 2471|      0|      return CURLM_OK; /* do nothing */
 2472|       |
 2473|      0|    default:
 2474|      0|      return CURLM_INTERNAL_ERROR;
 2475|  15.8M|    }
 2476|       |
 2477|  15.8M|    if(data->conn &&
 2478|  15.8M|       data->mstate >= MSTATE_CONNECT &&
 2479|  15.8M|       data->mstate < MSTATE_DO &&
 2480|  15.8M|       rc != CURLM_CALL_MULTI_PERFORM &&
 2481|  15.8M|       !multi_ischanged(multi, false)) {
 2482|       |      /* We now handle stream timeouts if and only if this will be the last
 2483|       |       * loop iteration. We only check this on the last iteration to ensure
 2484|       |       * that if we know we have additional work to do immediately
 2485|       |       * (i.e. CURLM_CALL_MULTI_PERFORM == TRUE) then we should do that before
 2486|       |       * declaring the connection timed out as we may almost have a completed
 2487|       |       * connection. */
 2488|      0|      multi_handle_timeout(data, nowp, &stream_error, &result, TRUE);
 2489|      0|    }
 2490|       |
 2491|  15.8M|    statemachine_end:
 2492|       |
 2493|  15.8M|    if(data->mstate < MSTATE_COMPLETED) {
 2494|  15.8M|      if(result) {
 2495|       |        /*
 2496|       |         * If an error was returned, and we aren't in completed state now,
 2497|       |         * then we go to completed and consider this transfer aborted.
 2498|       |         */
 2499|       |
 2500|       |        /* NOTE: no attempt to disconnect connections must be made
 2501|       |           in the case blocks above - cleanup happens only here */
 2502|       |
 2503|       |        /* Check if we can move pending requests to send pipe */
 2504|    468|        process_pending_handles(multi); /* connection */
 2505|       |
 2506|    468|        if(data->conn) {
 2507|      0|          if(stream_error) {
 2508|       |            /* Don't attempt to send data over a connection that timed out */
 2509|      0|            bool dead_connection = result == CURLE_OPERATION_TIMEDOUT;
 2510|      0|            struct connectdata *conn = data->conn;
 2511|       |
 2512|       |            /* This is where we make sure that the conn pointer is reset.
 2513|       |               We don't have to do this in every case block above where a
 2514|       |               failure is detected */
 2515|      0|            Curl_detach_connnection(data);
 2516|       |
 2517|       |            /* remove connection from cache */
 2518|      0|            Curl_conncache_remove_conn(data, conn, TRUE);
 2519|       |
 2520|       |            /* disconnect properly */
 2521|      0|            Curl_disconnect(data, conn, dead_connection);
 2522|      0|          }
 2523|      0|        }
 2524|    468|        else if(data->mstate == MSTATE_CONNECT) {
 2525|       |          /* Curl_connect() failed */
 2526|    121|          (void)Curl_posttransfer(data);
 2527|    121|        }
 2528|       |
 2529|    468|        multistate(data, MSTATE_COMPLETED);
 2530|    468|        rc = CURLM_CALL_MULTI_PERFORM;
 2531|    468|      }
 2532|       |      /* if there's still a connection to use, call the progress function */
 2533|  15.8M|      else if(data->conn && Curl_pgrsUpdate(data)) {
 2534|       |        /* aborted due to progress callback return code must close the
 2535|       |           connection */
 2536|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2537|      0|        streamclose(data->conn, "Aborted by callback");
 2538|       |
 2539|       |        /* if not yet in DONE state, go there, otherwise COMPLETED */
 2540|      0|        multistate(data, (data->mstate < MSTATE_DONE)?
 2541|      0|                   MSTATE_DONE: MSTATE_COMPLETED);
 2542|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2543|      0|      }
 2544|  15.8M|    }
 2545|       |
 2546|  15.8M|    if(MSTATE_COMPLETED == data->mstate) {
 2547|    472|      if(data->set.fmultidone) {
 2548|       |        /* signal via callback instead */
 2549|      0|        data->set.fmultidone(data, result);
 2550|      0|      }
 2551|    472|      else {
 2552|       |        /* now fill in the Curl_message with this info */
 2553|    472|        msg = &data->msg;
 2554|       |
 2555|    472|        msg->extmsg.msg = CURLMSG_DONE;
 2556|    472|        msg->extmsg.easy_handle = data;
 2557|    472|        msg->extmsg.data.result = result;
 2558|       |
 2559|    472|        rc = multi_addmsg(multi, msg);
 2560|    472|        DEBUGASSERT(!data->conn);
 2561|    472|      }
 2562|    472|      multistate(data, MSTATE_MSGSENT);
 2563|    472|    }
 2564|  15.8M|  } while((rc == CURLM_CALL_MULTI_PERFORM) || multi_ischanged(multi, FALSE));
 2565|       |
 2566|  15.8M|  data->result = result;
 2567|  15.8M|  return rc;
 2568|  15.8M|}
multi.c:multi_ischanged:
 1486|  31.7M|{
 1487|  31.7M|  bool retval = multi->recheckstate;
 1488|  31.7M|  if(clear)
 1489|  15.8M|    multi->recheckstate = FALSE;
 1490|  31.7M|  return retval;
 1491|  31.7M|}
multi.c:multi_handle_timeout:
 1563|  15.8M|{
 1564|  15.8M|  timediff_t timeout_ms;
 1565|  15.8M|  timeout_ms = Curl_timeleft(data, now, connect_timeout);
 1566|       |
 1567|  15.8M|  if(timeout_ms < 0) {
 1568|       |    /* Handle timed out */
 1569|    264|    if(data->mstate == MSTATE_RESOLVING)
 1570|      0|      failf(data, "Resolving timed out after %" CURL_FORMAT_TIMEDIFF_T
 1571|      0|            " milliseconds",
 1572|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1573|    264|    else if(data->mstate == MSTATE_CONNECTING)
 1574|      0|      failf(data, "Connection timed out after %" CURL_FORMAT_TIMEDIFF_T
 1575|      0|            " milliseconds",
 1576|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1577|    264|    else {
 1578|    264|      struct SingleRequest *k = &data->req;
 1579|    264|      if(k->size != -1) {
 1580|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1581|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1582|      0|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1583|      0|              Curl_timediff(*now, data->progress.t_startsingle),
 1584|      0|              k->bytecount, k->size);
 1585|      0|      }
 1586|    264|      else {
 1587|    264|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1588|    264|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T
 1589|    264|              " bytes received",
 1590|    264|              Curl_timediff(*now, data->progress.t_startsingle),
 1591|    264|              k->bytecount);
 1592|    264|      }
 1593|    264|    }
 1594|       |
 1595|       |    /* Force connection closed if the connection has indeed been used */
 1596|    264|    if(data->mstate > MSTATE_DO) {
 1597|    264|      streamclose(data->conn, "Disconnected with pending data");
 1598|    264|      *stream_error = TRUE;
 1599|    264|    }
 1600|    264|    *result = CURLE_OPERATION_TIMEDOUT;
 1601|    264|    (void)multi_done(data, *result, TRUE);
 1602|    264|  }
 1603|       |
 1604|  15.8M|  return (timeout_ms < 0);
 1605|  15.8M|}
multi.c:protocol_connect:
 1655|    285|{
 1656|    285|  CURLcode result = CURLE_OK;
 1657|    285|  struct connectdata *conn = data->conn;
 1658|    285|  DEBUGASSERT(conn);
 1659|    285|  DEBUGASSERT(protocol_done);
 1660|       |
 1661|    285|  *protocol_done = FALSE;
 1662|       |
 1663|    285|  if(conn->bits.tcpconnect[FIRSTSOCKET] && conn->bits.protoconnstart) {
 1664|       |    /* We already are connected, get back. This may happen when the connect
 1665|       |       worked fine in the first call, like when we connect to a local server
 1666|       |       or proxy. Note that we don't know if the protocol is actually done.
 1667|       |
 1668|       |       Unless this protocol doesn't have any protocol-connect callback, as
 1669|       |       then we know we're done. */
 1670|      0|    if(!conn->handler->connecting)
 1671|      0|      *protocol_done = TRUE;
 1672|       |
 1673|      0|    return CURLE_OK;
 1674|      0|  }
 1675|       |
 1676|    285|  if(!conn->bits.protoconnstart) {
 1677|    285|#ifndef CURL_DISABLE_PROXY
 1678|    285|    result = Curl_proxy_connect(data, FIRSTSOCKET);
 1679|    285|    if(result)
 1680|      0|      return result;
 1681|       |
 1682|    285|    if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1683|       |      /* wait for HTTPS proxy SSL initialization to complete */
 1684|      0|      return CURLE_OK;
 1685|       |
 1686|    285|    if(conn->bits.tunnel_proxy && conn->bits.httpproxy &&
 1687|    285|       Curl_connect_ongoing(conn))
 1688|       |      /* when using an HTTP tunnel proxy, await complete tunnel establishment
 1689|       |         before proceeding further. Return CURLE_OK so we'll be called again */
 1690|      0|      return CURLE_OK;
 1691|    285|#endif
 1692|    285|    if(conn->handler->connect_it) {
 1693|       |      /* is there a protocol-specific connect() procedure? */
 1694|       |
 1695|       |      /* Call the protocol-specific connect function */
 1696|      0|      result = conn->handler->connect_it(data, protocol_done);
 1697|      0|    }
 1698|    285|    else
 1699|    285|      *protocol_done = TRUE;
 1700|       |
 1701|       |    /* it has started, possibly even completed but that knowledge isn't stored
 1702|       |       in this bit! */
 1703|    285|    if(!result)
 1704|    285|      conn->bits.protoconnstart = TRUE;
 1705|    285|  }
 1706|       |
 1707|    285|  return result; /* pass back status */
 1708|    285|}
multi.c:multi_do:
 1519|    285|{
 1520|    285|  CURLcode result = CURLE_OK;
 1521|    285|  struct connectdata *conn = data->conn;
 1522|       |
 1523|    285|  DEBUGASSERT(conn);
 1524|    285|  DEBUGASSERT(conn->handler);
 1525|       |
 1526|    285|  if(conn->handler->do_it)
 1527|       |    /* generic protocol-specific function pointer set in curl_connect() */
 1528|    285|    result = conn->handler->do_it(data, done);
 1529|       |
 1530|    285|  return result;
 1531|    285|}
multi.c:protocol_doing:
 1634|  15.8M|{
 1635|  15.8M|  CURLcode result = CURLE_OK;
 1636|  15.8M|  struct connectdata *conn = data->conn;
 1637|       |
 1638|  15.8M|  if(conn && conn->handler->doing) {
 1639|  15.8M|    *done = FALSE;
 1640|  15.8M|    result = conn->handler->doing(data, done);
 1641|  15.8M|  }
 1642|      0|  else
 1643|      0|    *done = TRUE;
 1644|       |
 1645|  15.8M|  return result;
 1646|  15.8M|}
multi.c:multi_addmsg:
  349|    472|{
  350|    472|  Curl_llist_insert_next(&multi->msglist, multi->msglist.tail, msg,
  351|    472|                         &msg->list);
  352|    472|  return CURLM_OK;
  353|    472|}
multi.c:singlesocket:
 2732|    472|{
 2733|    472|  curl_socket_t socks[MAX_SOCKSPEREASYHANDLE];
 2734|    472|  int i;
 2735|    472|  struct Curl_sh_entry *entry;
 2736|    472|  curl_socket_t s;
 2737|    472|  int num;
 2738|    472|  unsigned int curraction;
 2739|    472|  unsigned char actions[MAX_SOCKSPEREASYHANDLE];
 2740|       |
 2741|  2.83k|  for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++)
 2742|  2.36k|    socks[i] = CURL_SOCKET_BAD;
 2743|       |
 2744|       |  /* Fill in the 'current' struct with the state as it is now: what sockets to
 2745|       |     supervise and for what actions */
 2746|    472|  curraction = multi_getsock(data, socks);
 2747|       |
 2748|       |  /* We have 0 .. N sockets already and we get to know about the 0 .. M
 2749|       |     sockets we should have from now on. Detect the differences, remove no
 2750|       |     longer supervised ones and add new ones */
 2751|       |
 2752|       |  /* walk over the sockets we got right now */
 2753|    472|  for(i = 0; (i< MAX_SOCKSPEREASYHANDLE) &&
 2754|    472|        (curraction & (GETSOCK_READSOCK(i) | GETSOCK_WRITESOCK(i)));
 2755|    472|      i++) {
 2756|      0|    unsigned char action = CURL_POLL_NONE;
 2757|      0|    unsigned char prevaction = 0;
 2758|      0|    int comboaction;
 2759|      0|    bool sincebefore = FALSE;
 2760|       |
 2761|      0|    s = socks[i];
 2762|       |
 2763|       |    /* get it from the hash */
 2764|      0|    entry = sh_getentry(&multi->sockhash, s);
 2765|       |
 2766|      0|    if(curraction & GETSOCK_READSOCK(i))
 2767|      0|      action |= CURL_POLL_IN;
 2768|      0|    if(curraction & GETSOCK_WRITESOCK(i))
 2769|      0|      action |= CURL_POLL_OUT;
 2770|       |
 2771|      0|    actions[i] = action;
 2772|      0|    if(entry) {
 2773|       |      /* check if new for this transfer */
 2774|      0|      int j;
 2775|      0|      for(j = 0; j< data->numsocks; j++) {
 2776|      0|        if(s == data->sockets[j]) {
 2777|      0|          prevaction = data->actions[j];
 2778|      0|          sincebefore = TRUE;
 2779|      0|          break;
 2780|      0|        }
 2781|      0|      }
 2782|      0|    }
 2783|      0|    else {
 2784|       |      /* this is a socket we didn't have before, add it to the hash! */
 2785|      0|      entry = sh_addentry(&multi->sockhash, s);
 2786|      0|      if(!entry)
 2787|       |        /* fatal */
 2788|      0|        return CURLM_OUT_OF_MEMORY;
 2789|      0|    }
 2790|      0|    if(sincebefore && (prevaction != action)) {
 2791|       |      /* Socket was used already, but different action now */
 2792|      0|      if(prevaction & CURL_POLL_IN)
 2793|      0|        entry->readers--;
 2794|      0|      if(prevaction & CURL_POLL_OUT)
 2795|      0|        entry->writers--;
 2796|      0|      if(action & CURL_POLL_IN)
 2797|      0|        entry->readers++;
 2798|      0|      if(action & CURL_POLL_OUT)
 2799|      0|        entry->writers++;
 2800|      0|    }
 2801|      0|    else if(!sincebefore) {
 2802|       |      /* a new user */
 2803|      0|      entry->users++;
 2804|      0|      if(action & CURL_POLL_IN)
 2805|      0|        entry->readers++;
 2806|      0|      if(action & CURL_POLL_OUT)
 2807|      0|        entry->writers++;
 2808|       |
 2809|       |      /* add 'data' to the transfer hash on this socket! */
 2810|      0|      if(!Curl_hash_add(&entry->transfers, (char *)&data, /* hash key */
 2811|      0|                        sizeof(struct Curl_easy *), data))
 2812|      0|        return CURLM_OUT_OF_MEMORY;
 2813|      0|    }
 2814|       |
 2815|      0|    comboaction = (entry->writers? CURL_POLL_OUT : 0) |
 2816|      0|                   (entry->readers ? CURL_POLL_IN : 0);
 2817|       |
 2818|       |    /* socket existed before and has the same action set as before */
 2819|      0|    if(sincebefore && ((int)entry->action == comboaction))
 2820|       |      /* same, continue */
 2821|      0|      continue;
 2822|       |
 2823|      0|    if(multi->socket_cb)
 2824|      0|      multi->socket_cb(data, s, comboaction, multi->socket_userp,
 2825|      0|                       entry->socketp);
 2826|       |
 2827|      0|    entry->action = comboaction; /* store the current action state */
 2828|      0|  }
 2829|       |
 2830|    472|  num = i; /* number of sockets */
 2831|       |
 2832|       |  /* when we've walked over all the sockets we should have right now, we must
 2833|       |     make sure to detect sockets that are removed */
 2834|    472|  for(i = 0; i< data->numsocks; i++) {
 2835|      0|    int j;
 2836|      0|    bool stillused = FALSE;
 2837|      0|    s = data->sockets[i];
 2838|      0|    for(j = 0; j < num; j++) {
 2839|      0|      if(s == socks[j]) {
 2840|       |        /* this is still supervised */
 2841|      0|        stillused = TRUE;
 2842|      0|        break;
 2843|      0|      }
 2844|      0|    }
 2845|      0|    if(stillused)
 2846|      0|      continue;
 2847|       |
 2848|      0|    entry = sh_getentry(&multi->sockhash, s);
 2849|       |    /* if this is NULL here, the socket has been closed and notified so
 2850|       |       already by Curl_multi_closed() */
 2851|      0|    if(entry) {
 2852|      0|      unsigned char oldactions = data->actions[i];
 2853|       |      /* this socket has been removed. Decrease user count */
 2854|      0|      entry->users--;
 2855|      0|      if(oldactions & CURL_POLL_OUT)
 2856|      0|        entry->writers--;
 2857|      0|      if(oldactions & CURL_POLL_IN)
 2858|      0|        entry->readers--;
 2859|      0|      if(!entry->users) {
 2860|      0|        if(multi->socket_cb)
 2861|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2862|      0|                           multi->socket_userp,
 2863|      0|                           entry->socketp);
 2864|      0|        sh_delentry(entry, &multi->sockhash, s);
 2865|      0|      }
 2866|      0|      else {
 2867|       |        /* still users, but remove this handle as a user of this socket */
 2868|      0|        if(Curl_hash_delete(&entry->transfers, (char *)&data,
 2869|      0|                            sizeof(struct Curl_easy *))) {
 2870|      0|          DEBUGASSERT(NULL);
 2871|      0|        }
 2872|      0|      }
 2873|      0|    }
 2874|      0|  } /* for loop over numsocks */
 2875|       |
 2876|    472|  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
 2877|    472|  memcpy(data->actions, actions, num*sizeof(char));
 2878|    472|  data->numsocks = num;
 2879|    472|  return CURLM_OK;
 2880|    472|}
multi.c:sh_getentry:
  216|    285|{
  217|    285|  if(s != CURL_SOCKET_BAD) {
  218|       |    /* only look for proper sockets */
  219|    285|    return Curl_hash_pick(sh, (char *)&s, sizeof(curl_socket_t));
  220|    285|  }
  221|      0|  return NULL;
  222|    285|}
multi.c:add_next_timeout:
 2936|    285|{
 2937|    285|  struct curltime *tv = &d->state.expiretime;
 2938|    285|  struct Curl_llist *list = &d->state.timeoutlist;
 2939|    285|  struct Curl_llist_element *e;
 2940|    285|  struct time_node *node = NULL;
 2941|       |
 2942|       |  /* move over the timeout list for this specific handle and remove all
 2943|       |     timeouts that are now passed tense and store the next pending
 2944|       |     timeout in *tv */
 2945|    570|  for(e = list->head; e;) {
 2946|    570|    struct Curl_llist_element *n = e->next;
 2947|    570|    timediff_t diff;
 2948|    570|    node = (struct time_node *)e->ptr;
 2949|    570|    diff = Curl_timediff(node->time, now);
 2950|    570|    if(diff <= 0)
 2951|       |      /* remove outdated entry */
 2952|    285|      Curl_llist_remove(list, e, NULL);
 2953|    285|    else
 2954|       |      /* the list is sorted so get out on the first mismatch */
 2955|    285|      break;
 2956|    285|    e = n;
 2957|    285|  }
 2958|    285|  e = list->head;
 2959|    285|  if(!e) {
 2960|       |    /* clear the expire times within the handles that we remove from the
 2961|       |       splay tree */
 2962|      0|    tv->tv_sec = 0;
 2963|      0|    tv->tv_usec = 0;
 2964|      0|  }
 2965|    285|  else {
 2966|       |    /* copy the first entry to 'tv' */
 2967|    285|    memcpy(tv, &node->time, sizeof(*tv));
 2968|       |
 2969|       |    /* Insert this node again into the splay.  Keep the timer in the list in
 2970|       |       case we need to recompute future timers. */
 2971|    285|    multi->timetree = Curl_splayinsert(*tv, multi->timetree,
 2972|    285|                                       &d->state.timenode);
 2973|    285|  }
 2974|    285|  return CURLM_OK;
 2975|    285|}
multi.c:multi_deltimeout:
 3298|  1.16k|{
 3299|  1.16k|  struct Curl_llist_element *e;
 3300|  1.16k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3301|       |  /* find and remove the specific node from the list */
 3302|  2.13k|  for(e = timeoutlist->head; e; e = e->next) {
 3303|    976|    struct time_node *n = (struct time_node *)e->ptr;
 3304|    976|    if(n->eid == eid) {
 3305|      0|      Curl_llist_remove(timeoutlist, e, NULL);
 3306|      0|      return;
 3307|      0|    }
 3308|    976|  }
 3309|  1.16k|}
multi.c:multi_addtimeout:
 3322|  1.16k|{
 3323|  1.16k|  struct Curl_llist_element *e;
 3324|  1.16k|  struct time_node *node;
 3325|  1.16k|  struct Curl_llist_element *prev = NULL;
 3326|  1.16k|  size_t n;
 3327|  1.16k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3328|       |
 3329|  1.16k|  node = &data->state.expires[eid];
 3330|       |
 3331|       |  /* copy the timestamp and id */
 3332|  1.16k|  memcpy(&node->time, stamp, sizeof(*stamp));
 3333|  1.16k|  node->eid = eid; /* also marks it as in use */
 3334|       |
 3335|  1.16k|  n = Curl_llist_count(timeoutlist);
 3336|  1.16k|  if(n) {
 3337|       |    /* find the correct spot in the list */
 3338|  1.66k|    for(e = timeoutlist->head; e; e = e->next) {
 3339|    976|      struct time_node *check = (struct time_node *)e->ptr;
 3340|    976|      timediff_t diff = Curl_timediff(check->time, node->time);
 3341|    976|      if(diff > 0)
 3342|      0|        break;
 3343|    976|      prev = e;
 3344|    976|    }
 3345|       |
 3346|    691|  }
 3347|       |  /* else
 3348|       |     this is the first timeout on the list */
 3349|       |
 3350|  1.16k|  Curl_llist_insert_next(timeoutlist, prev, node, &node->list);
 3351|  1.16k|  return CURLM_OK;
 3352|  1.16k|}
multi.c:process_pending_handles:
 3524|  1.22k|{
 3525|  1.22k|  struct Curl_llist_element *e = multi->pending.head;
 3526|  1.22k|  if(e) {
 3527|      0|    struct Curl_easy *data = e->ptr;
 3528|       |
 3529|      0|    DEBUGASSERT(data->mstate == MSTATE_PENDING);
 3530|       |
 3531|      0|    multistate(data, MSTATE_CONNECT);
 3532|       |
 3533|       |    /* Remove this node from the list */
 3534|      0|    Curl_llist_remove(&multi->pending, e, NULL);
 3535|       |
 3536|       |    /* Make sure that the handle will be processed soonish. */
 3537|      0|    Curl_expire(data, 0, EXPIRE_RUN_NOW);
 3538|       |
 3539|       |    /* mark this as having been in the pending queue */
 3540|      0|    data->state.previouslypending = TRUE;
 3541|      0|  }
 3542|  1.22k|}

curlx_nonblock:
   49|  1.22k|{
   50|  1.22k|#if defined(HAVE_FCNTL_O_NONBLOCK)
   51|       |  /* most recent unix versions */
   52|  1.22k|  int flags;
   53|  1.22k|  flags = sfcntl(sockfd, F_GETFL, 0);
   54|  1.22k|  if(nonblock)
   55|  1.22k|    return sfcntl(sockfd, F_SETFL, flags | O_NONBLOCK);
   56|      0|  return sfcntl(sockfd, F_SETFL, flags & (~O_NONBLOCK));
   57|       |
   58|       |#elif defined(HAVE_IOCTL_FIONBIO)
   59|       |
   60|       |  /* older unix versions */
   61|       |  int flags = nonblock ? 1 : 0;
   62|       |  return ioctl(sockfd, FIONBIO, &flags);
   63|       |
   64|       |#elif defined(HAVE_IOCTLSOCKET_FIONBIO)
   65|       |
   66|       |  /* Windows */
   67|       |  unsigned long flags = nonblock ? 1UL : 0UL;
   68|       |  return ioctlsocket(sockfd, FIONBIO, &flags);
   69|       |
   70|       |#elif defined(HAVE_IOCTLSOCKET_CAMEL_FIONBIO)
   71|       |
   72|       |  /* Amiga */
   73|       |  long flags = nonblock ? 1L : 0L;
   74|       |  return IoctlSocket(sockfd, FIONBIO, (char *)&flags);
   75|       |
   76|       |#elif defined(HAVE_SETSOCKOPT_SO_NONBLOCK)
   77|       |
   78|       |  /* BeOS */
   79|       |  long b = nonblock ? 1L : 0L;
   80|       |  return setsockopt(sockfd, SOL_SOCKET, SO_NONBLOCK, &b, sizeof(b));
   81|       |
   82|       |#else
   83|       |#  error "no non-blocking method was found/used/set"
   84|       |#endif
   85|  1.22k|}

Curl_pgrsDone:
  141|    285|{
  142|    285|  int rc;
  143|    285|  data->progress.lastshow = 0;
  144|    285|  rc = Curl_pgrsUpdate(data); /* the final (forced) update */
  145|    285|  if(rc)
  146|      0|    return rc;
  147|       |
  148|    285|  if(!(data->progress.flags & PGRS_HIDE) &&
  149|    285|     !data->progress.callback)
  150|       |    /* only output if we don't use a progress callback and we're not
  151|       |     * hidden */
  152|      0|    fprintf(data->set.err, "\n");
  153|       |
  154|    285|  data->progress.speeder_c = 0; /* reset the progress meter display */
  155|    285|  return 0;
  156|    285|}
Curl_pgrsResetTransferSizes:
  160|    406|{
  161|    406|  Curl_pgrsSetDownloadSize(data, -1);
  162|    406|  Curl_pgrsSetUploadSize(data, -1);
  163|    406|}
Curl_pgrsTime:
  173|  1.38k|{
  174|  1.38k|  struct curltime now = Curl_now();
  175|  1.38k|  timediff_t *delta = NULL;
  176|       |
  177|  1.38k|  switch(timer) {
  178|      0|  default:
  179|      0|  case TIMER_NONE:
  180|       |    /* mistake filter */
  181|      0|    break;
  182|    406|  case TIMER_STARTOP:
  183|       |    /* This is set at the start of a transfer */
  184|    406|    data->progress.t_startop = now;
  185|    406|    break;
  186|    406|  case TIMER_STARTSINGLE:
  187|       |    /* This is set at the start of each single fetch */
  188|    406|    data->progress.t_startsingle = now;
  189|    406|    data->progress.is_t_startransfer_set = false;
  190|    406|    break;
  191|      0|  case TIMER_STARTACCEPT:
  192|      0|    data->progress.t_acceptdata = now;
  193|      0|    break;
  194|    285|  case TIMER_NAMELOOKUP:
  195|    285|    delta = &data->progress.t_nslookup;
  196|    285|    break;
  197|    285|  case TIMER_CONNECT:
  198|    285|    delta = &data->progress.t_connect;
  199|    285|    break;
  200|      0|  case TIMER_APPCONNECT:
  201|      0|    delta = &data->progress.t_appconnect;
  202|      0|    break;
  203|      4|  case TIMER_PRETRANSFER:
  204|      4|    delta = &data->progress.t_pretransfer;
  205|      4|    break;
  206|      0|  case TIMER_STARTTRANSFER:
  207|      0|    delta = &data->progress.t_starttransfer;
  208|       |    /* prevent updating t_starttransfer unless:
  209|       |     *   1) this is the first time we're setting t_starttransfer
  210|       |     *   2) a redirect has occurred since the last time t_starttransfer was set
  211|       |     * This prevents repeated invocations of the function from incorrectly
  212|       |     * changing the t_starttransfer time.
  213|       |     */
  214|      0|    if(data->progress.is_t_startransfer_set) {
  215|      0|      return now;
  216|      0|    }
  217|      0|    else {
  218|      0|      data->progress.is_t_startransfer_set = true;
  219|      0|      break;
  220|      0|    }
  221|      0|  case TIMER_POSTRANSFER:
  222|       |    /* this is the normal end-of-transfer thing */
  223|      0|    break;
  224|      0|  case TIMER_REDIRECT:
  225|      0|    data->progress.t_redirect = Curl_timediff_us(now, data->progress.start);
  226|      0|    break;
  227|  1.38k|  }
  228|  1.38k|  if(delta) {
  229|    574|    timediff_t us = Curl_timediff_us(now, data->progress.t_startsingle);
  230|    574|    if(us < 1)
  231|      0|      us = 1; /* make sure at least one microsecond passed */
  232|    574|    *delta += us;
  233|    574|  }
  234|  1.38k|  return now;
  235|  1.38k|}
Curl_pgrsStartNow:
  238|    406|{
  239|    406|  data->progress.speeder_c = 0; /* reset the progress meter display */
  240|    406|  data->progress.start = Curl_now();
  241|    406|  data->progress.is_t_startransfer_set = false;
  242|    406|  data->progress.ul_limit_start = data->progress.start;
  243|    406|  data->progress.dl_limit_start = data->progress.start;
  244|    406|  data->progress.ul_limit_size = 0;
  245|    406|  data->progress.dl_limit_size = 0;
  246|    406|  data->progress.downloaded = 0;
  247|    406|  data->progress.uploaded = 0;
  248|       |  /* clear all bits except HIDE and HEADERS_OUT */
  249|    406|  data->progress.flags &= PGRS_HIDE|PGRS_HEADERS_OUT;
  250|    406|  Curl_ratelimit(data, data->progress.start);
  251|    406|}
Curl_pgrsSetDownloadCounter:
  316|    286|{
  317|    286|  data->progress.downloaded = size;
  318|    286|}
Curl_ratelimit:
  324|    406|{
  325|       |  /* don't set a new stamp unless the time since last update is long enough */
  326|    406|  if(data->set.max_recv_speed) {
  327|      0|    if(Curl_timediff(now, data->progress.dl_limit_start) >=
  328|      0|       MIN_RATE_LIMIT_PERIOD) {
  329|      0|      data->progress.dl_limit_start = now;
  330|      0|      data->progress.dl_limit_size = data->progress.downloaded;
  331|      0|    }
  332|      0|  }
  333|    406|  if(data->set.max_send_speed) {
  334|      0|    if(Curl_timediff(now, data->progress.ul_limit_start) >=
  335|      0|       MIN_RATE_LIMIT_PERIOD) {
  336|      0|      data->progress.ul_limit_start = now;
  337|      0|      data->progress.ul_limit_size = data->progress.uploaded;
  338|      0|    }
  339|      0|  }
  340|    406|}
Curl_pgrsSetUploadCounter:
  346|    285|{
  347|    285|  data->progress.uploaded = size;
  348|    285|}
Curl_pgrsSetDownloadSize:
  351|    407|{
  352|    407|  if(size >= 0) {
  353|      1|    data->progress.size_dl = size;
  354|      1|    data->progress.flags |= PGRS_DL_SIZE_KNOWN;
  355|      1|  }
  356|    406|  else {
  357|    406|    data->progress.size_dl = 0;
  358|    406|    data->progress.flags &= ~PGRS_DL_SIZE_KNOWN;
  359|    406|  }
  360|    407|}
Curl_pgrsSetUploadSize:
  363|    406|{
  364|    406|  if(size >= 0) {
  365|      0|    data->progress.size_ul = size;
  366|      0|    data->progress.flags |= PGRS_UL_SIZE_KNOWN;
  367|      0|  }
  368|    406|  else {
  369|    406|    data->progress.size_ul = 0;
  370|    406|    data->progress.flags &= ~PGRS_UL_SIZE_KNOWN;
  371|    406|  }
  372|    406|}
Curl_pgrsUpdate:
  577|  15.8M|{
  578|  15.8M|  struct curltime now = Curl_now(); /* what time is it */
  579|  15.8M|  bool showprogress = progress_calc(data, now);
  580|  15.8M|  if(!(data->progress.flags & PGRS_HIDE)) {
  581|      0|    if(data->set.fxferinfo) {
  582|      0|      int result;
  583|       |      /* There's a callback set, call that */
  584|      0|      Curl_set_in_callback(data, true);
  585|      0|      result = data->set.fxferinfo(data->set.progress_client,
  586|      0|                                   data->progress.size_dl,
  587|      0|                                   data->progress.downloaded,
  588|      0|                                   data->progress.size_ul,
  589|      0|                                   data->progress.uploaded);
  590|      0|      Curl_set_in_callback(data, false);
  591|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  592|      0|        if(result)
  593|      0|          failf(data, "Callback aborted");
  594|      0|        return result;
  595|      0|      }
  596|      0|    }
  597|      0|    else if(data->set.fprogress) {
  598|      0|      int result;
  599|       |      /* The older deprecated callback is set, call that */
  600|      0|      Curl_set_in_callback(data, true);
  601|      0|      result = data->set.fprogress(data->set.progress_client,
  602|      0|                                   (double)data->progress.size_dl,
  603|      0|                                   (double)data->progress.downloaded,
  604|      0|                                   (double)data->progress.size_ul,
  605|      0|                                   (double)data->progress.uploaded);
  606|      0|      Curl_set_in_callback(data, false);
  607|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  608|      0|        if(result)
  609|      0|          failf(data, "Callback aborted");
  610|      0|        return result;
  611|      0|      }
  612|      0|    }
  613|       |
  614|      0|    if(showprogress)
  615|      0|      progress_meter(data);
  616|      0|  }
  617|       |
  618|  15.8M|  return 0;
  619|  15.8M|}
progress.c:progress_calc:
  390|  15.8M|{
  391|  15.8M|  bool timetoshow = FALSE;
  392|  15.8M|  struct Progress * const p = &data->progress;
  393|       |
  394|       |  /* The time spent so far (from the start) in microseconds */
  395|  15.8M|  p->timespent = Curl_timediff_us(now, p->start);
  396|  15.8M|  p->dlspeed = trspeed(p->downloaded, p->timespent);
  397|  15.8M|  p->ulspeed = trspeed(p->uploaded, p->timespent);
  398|       |
  399|       |  /* Calculations done at most once a second, unless end is reached */
  400|  15.8M|  if(p->lastshow != now.tv_sec) {
  401|    623|    int countindex; /* amount of seconds stored in the speeder array */
  402|    623|    int nowindex = p->speeder_c% CURR_TIME;
  403|    623|    p->lastshow = now.tv_sec;
  404|    623|    timetoshow = TRUE;
  405|       |
  406|       |    /* Let's do the "current speed" thing, with the dl + ul speeds
  407|       |       combined. Store the speed at entry 'nowindex'. */
  408|    623|    p->speeder[ nowindex ] = p->downloaded + p->uploaded;
  409|       |
  410|       |    /* remember the exact time for this moment */
  411|    623|    p->speeder_time [ nowindex ] = now;
  412|       |
  413|       |    /* advance our speeder_c counter, which is increased every time we get
  414|       |       here and we expect it to never wrap as 2^32 is a lot of seconds! */
  415|    623|    p->speeder_c++;
  416|       |
  417|       |    /* figure out how many index entries of data we have stored in our speeder
  418|       |       array. With N_ENTRIES filled in, we have about N_ENTRIES-1 seconds of
  419|       |       transfer. Imagine, after one second we have filled in two entries,
  420|       |       after two seconds we've filled in three entries etc. */
  421|    623|    countindex = ((p->speeder_c >= CURR_TIME)? CURR_TIME:p->speeder_c) - 1;
  422|       |
  423|       |    /* first of all, we don't do this if there's no counted seconds yet */
  424|    623|    if(countindex) {
  425|    338|      int checkindex;
  426|    338|      timediff_t span_ms;
  427|    338|      curl_off_t amount;
  428|       |
  429|       |      /* Get the index position to compare with the 'nowindex' position.
  430|       |         Get the oldest entry possible. While we have less than CURR_TIME
  431|       |         entries, the first entry will remain the oldest. */
  432|    338|      checkindex = (p->speeder_c >= CURR_TIME)? p->speeder_c%CURR_TIME:0;
  433|       |
  434|       |      /* Figure out the exact time for the time span */
  435|    338|      span_ms = Curl_timediff(now, p->speeder_time[checkindex]);
  436|    338|      if(0 == span_ms)
  437|     21|        span_ms = 1; /* at least one millisecond MUST have passed */
  438|       |
  439|       |      /* Calculate the average speed the last 'span_ms' milliseconds */
  440|    338|      amount = p->speeder[nowindex]- p->speeder[checkindex];
  441|       |
  442|    338|      if(amount > CURL_OFF_T_C(4294967) /* 0xffffffff/1000 */)
  443|       |        /* the 'amount' value is bigger than would fit in 32 bits if
  444|       |           multiplied with 1000, so we use the double math for this */
  445|      0|        p->current_speed = (curl_off_t)
  446|      0|          ((double)amount/((double)span_ms/1000.0));
  447|    338|      else
  448|       |        /* the 'amount' value is small enough to fit within 32 bits even
  449|       |           when multiplied with 1000 */
  450|    338|        p->current_speed = amount*CURL_OFF_T_C(1000)/span_ms;
  451|    338|    }
  452|    285|    else
  453|       |      /* the first second we use the average */
  454|    285|      p->current_speed = p->ulspeed + p->dlspeed;
  455|       |
  456|    623|  } /* Calculations end */
  457|  15.8M|  return timetoshow;
  458|  15.8M|}
progress.c:trspeed:
  377|  31.7M|{
  378|  31.7M|  if(us < 1)
  379|      0|    return size * 1000000;
  380|  31.7M|  else if(size < CURL_OFF_T_MAX/1000000)
  381|  31.7M|    return (size * 1000000) / us;
  382|      0|  else if(us >= 1000000)
  383|      0|    return size / (us / 1000000);
  384|      0|  else
  385|      0|    return CURL_OFF_T_MAX;
  386|  31.7M|}

Curl_rand:
  120|    787|{
  121|    787|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  122|       |
  123|    787|  DEBUGASSERT(num > 0);
  124|       |
  125|  1.60k|  while(num) {
  126|    817|    unsigned int r;
  127|    817|    size_t left = num < sizeof(unsigned int) ? num : sizeof(unsigned int);
  128|       |
  129|    817|    result = randit(data, &r);
  130|    817|    if(result)
  131|      0|      return result;
  132|       |
  133|  4.08k|    while(left) {
  134|  3.26k|      *rnd++ = (unsigned char)(r & 0xFF);
  135|  3.26k|      r >>= 8;
  136|  3.26k|      --num;
  137|  3.26k|      --left;
  138|  3.26k|    }
  139|    817|  }
  140|       |
  141|    787|  return result;
  142|    787|}
Curl_rand_hex:
  152|    787|{
  153|    787|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  154|    787|  const char *hex = "0123456789abcdef";
  155|    787|  unsigned char buffer[128];
  156|    787|  unsigned char *bufp = buffer;
  157|    787|  DEBUGASSERT(num > 1);
  158|       |
  159|       |#ifdef __clang_analyzer__
  160|       |  /* This silences a scan-build warning about accessing this buffer with
  161|       |     uninitialized memory. */
  162|       |  memset(buffer, 0, sizeof(buffer));
  163|       |#endif
  164|       |
  165|    787|  if((num/2 >= sizeof(buffer)) || !(num&1))
  166|       |    /* make sure it fits in the local buffer and that it is an odd number! */
  167|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  168|       |
  169|    787|  num--; /* save one for zero termination */
  170|       |
  171|    787|  result = Curl_rand(data, buffer, num/2);
  172|    787|  if(result)
  173|      0|    return result;
  174|       |
  175|  4.05k|  while(num) {
  176|       |    /* clang-tidy warns on this line without this comment: */
  177|       |    /* NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult) */
  178|  3.26k|    *rnd++ = hex[(*bufp & 0xF0)>>4];
  179|  3.26k|    *rnd++ = hex[*bufp & 0x0F];
  180|  3.26k|    bufp++;
  181|  3.26k|    num -= 2;
  182|  3.26k|  }
  183|    787|  *rnd = 0;
  184|       |
  185|    787|  return result;
  186|    787|}
rand.c:randit:
   40|    817|{
   41|    817|  unsigned int r;
   42|    817|  CURLcode result = CURLE_OK;
   43|    817|  static unsigned int randseed;
   44|    817|  static bool seeded = FALSE;
   45|       |
   46|    817|#ifdef CURLDEBUG
   47|    817|  char *force_entropy = getenv("CURL_ENTROPY");
   48|    817|  if(force_entropy) {
   49|      0|    if(!seeded) {
   50|      0|      unsigned int seed = 0;
   51|      0|      size_t elen = strlen(force_entropy);
   52|      0|      size_t clen = sizeof(seed);
   53|      0|      size_t min = elen < clen ? elen : clen;
   54|      0|      memcpy((char *)&seed, force_entropy, min);
   55|      0|      randseed = ntohl(seed);
   56|      0|      seeded = TRUE;
   57|      0|    }
   58|      0|    else
   59|      0|      randseed++;
   60|      0|    *rnd = randseed;
   61|      0|    return CURLE_OK;
   62|      0|  }
   63|    817|#endif
   64|       |
   65|       |  /* data may be NULL! */
   66|    817|  result = Curl_ssl_random(data, (unsigned char *)rnd, sizeof(*rnd));
   67|    817|  if(result != CURLE_NOT_BUILT_IN)
   68|       |    /* only if there is no random function in the TLS backend do the non crypto
   69|       |       version, otherwise return result */
   70|    817|    return result;
   71|       |
   72|       |  /* ---- non-cryptographic version following ---- */
   73|       |
   74|      0|#ifdef RANDOM_FILE
   75|      0|  if(!seeded) {
   76|       |    /* if there's a random file to read a seed from, use it */
   77|      0|    int fd = open(RANDOM_FILE, O_RDONLY);
   78|      0|    if(fd > -1) {
   79|       |      /* read random data into the randseed variable */
   80|      0|      ssize_t nread = read(fd, &randseed, sizeof(randseed));
   81|      0|      if(nread == sizeof(randseed))
   82|      0|        seeded = TRUE;
   83|      0|      close(fd);
   84|      0|    }
   85|      0|  }
   86|      0|#endif
   87|       |
   88|      0|  if(!seeded) {
   89|      0|    struct curltime now = Curl_now();
   90|      0|    infof(data, "WARNING: Using weak random seed");
   91|      0|    randseed += (unsigned int)now.tv_usec + (unsigned int)now.tv_sec;
   92|      0|    randseed = randseed * 1103515245 + 12345;
   93|      0|    randseed = randseed * 1103515245 + 12345;
   94|      0|    randseed = randseed * 1103515245 + 12345;
   95|      0|    seeded = TRUE;
   96|      0|  }
   97|       |
   98|       |  /* Return an unsigned 32-bit pseudo-random number. */
   99|      0|  r = randseed = randseed * 1103515245 + 12345;
  100|      0|  *rnd = (r << 16) | ((r >> 16) & 0xFFFF);
  101|      0|  return CURLE_OK;
  102|    817|}

Curl_rename:
   40|    472|{
   41|       |#ifdef WIN32
   42|       |  /* rename() on Windows doesn't overwrite, so we can't use it here.
   43|       |     MoveFileEx() will overwrite and is usually atomic, however it fails
   44|       |     when there are open handles to the file. */
   45|       |  const int max_wait_ms = 1000;
   46|       |  struct curltime start = Curl_now();
   47|       |  TCHAR *tchar_oldpath = curlx_convert_UTF8_to_tchar((char *)oldpath);
   48|       |  TCHAR *tchar_newpath = curlx_convert_UTF8_to_tchar((char *)newpath);
   49|       |  for(;;) {
   50|       |    timediff_t diff;
   51|       |    if(MoveFileEx(tchar_oldpath, tchar_newpath, MOVEFILE_REPLACE_EXISTING)) {
   52|       |      curlx_unicodefree(tchar_oldpath);
   53|       |      curlx_unicodefree(tchar_newpath);
   54|       |      break;
   55|       |    }
   56|       |    diff = Curl_timediff(Curl_now(), start);
   57|       |    if(diff < 0 || diff > max_wait_ms) {
   58|       |      curlx_unicodefree(tchar_oldpath);
   59|       |      curlx_unicodefree(tchar_newpath);
   60|       |      return 1;
   61|       |    }
   62|       |    Sleep(1);
   63|       |  }
   64|       |#else
   65|    472|  if(rename(oldpath, newpath))
   66|      0|    return 1;
   67|    472|#endif
   68|    472|  return 0;
   69|    472|}

Curl_wait_ms:
   75|      4|{
   76|      4|  int r = 0;
   77|       |
   78|      4|  if(!timeout_ms)
   79|      4|    return 0;
   80|      0|  if(timeout_ms < 0) {
   81|      0|    SET_SOCKERRNO(EINVAL);
   82|      0|    return -1;
   83|      0|  }
   84|       |#if defined(MSDOS)
   85|       |  delay(timeout_ms);
   86|       |#elif defined(WIN32)
   87|       |  /* prevent overflow, timeout_ms is typecast to ULONG/DWORD. */
   88|       |#if TIMEDIFF_T_MAX >= ULONG_MAX
   89|       |  if(timeout_ms >= ULONG_MAX)
   90|       |    timeout_ms = ULONG_MAX-1;
   91|       |    /* don't use ULONG_MAX, because that is equal to INFINITE */
   92|       |#endif
   93|       |  Sleep((ULONG)timeout_ms);
   94|       |#else
   95|      0|#if defined(HAVE_POLL_FINE)
   96|       |  /* prevent overflow, timeout_ms is typecast to int. */
   97|      0|#if TIMEDIFF_T_MAX > INT_MAX
   98|      0|  if(timeout_ms > INT_MAX)
   99|      0|    timeout_ms = INT_MAX;
  100|      0|#endif
  101|      0|  r = poll(NULL, 0, (int)timeout_ms);
  102|       |#else
  103|       |  {
  104|       |    struct timeval pending_tv;
  105|       |    timediff_t tv_sec = timeout_ms / 1000;
  106|       |    timediff_t tv_usec = (timeout_ms % 1000) * 1000; /* max=999999 */
  107|       |#ifdef HAVE_SUSECONDS_T
  108|       |#if TIMEDIFF_T_MAX > TIME_T_MAX
  109|       |    /* tv_sec overflow check in case time_t is signed */
  110|       |    if(tv_sec > TIME_T_MAX)
  111|       |      tv_sec = TIME_T_MAX;
  112|       |#endif
  113|       |    pending_tv.tv_sec = (time_t)tv_sec;
  114|       |    pending_tv.tv_usec = (suseconds_t)tv_usec;
  115|       |#else
  116|       |#if TIMEDIFF_T_MAX > INT_MAX
  117|       |    /* tv_sec overflow check in case time_t is signed */
  118|       |    if(tv_sec > INT_MAX)
  119|       |      tv_sec = INT_MAX;
  120|       |#endif
  121|       |    pending_tv.tv_sec = (int)tv_sec;
  122|       |    pending_tv.tv_usec = (int)tv_usec;
  123|       |#endif
  124|       |    r = select(0, NULL, NULL, NULL, &pending_tv);
  125|       |  }
  126|       |#endif /* HAVE_POLL_FINE */
  127|      0|#endif /* USE_WINSOCK */
  128|      0|  if(r)
  129|      0|    r = -1;
  130|      0|  return r;
  131|      0|}
Curl_socket_check:
  250|    289|{
  251|    289|  struct pollfd pfd[3];
  252|    289|  int num;
  253|    289|  int r;
  254|       |
  255|    289|  if((readfd0 == CURL_SOCKET_BAD) && (readfd1 == CURL_SOCKET_BAD) &&
  256|    289|     (writefd == CURL_SOCKET_BAD)) {
  257|       |    /* no sockets, just wait */
  258|      4|    return Curl_wait_ms(timeout_ms);
  259|      4|  }
  260|       |
  261|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  262|       |     time in this function does not need to be measured. This happens
  263|       |     when function is called with a zero timeout or a negative timeout
  264|       |     value indicating a blocking call should be performed. */
  265|       |
  266|    285|  num = 0;
  267|    285|  if(readfd0 != CURL_SOCKET_BAD) {
  268|      0|    pfd[num].fd = readfd0;
  269|      0|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  270|      0|    pfd[num].revents = 0;
  271|      0|    num++;
  272|      0|  }
  273|    285|  if(readfd1 != CURL_SOCKET_BAD) {
  274|      0|    pfd[num].fd = readfd1;
  275|      0|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  276|      0|    pfd[num].revents = 0;
  277|      0|    num++;
  278|      0|  }
  279|    285|  if(writefd != CURL_SOCKET_BAD) {
  280|    285|    pfd[num].fd = writefd;
  281|    285|    pfd[num].events = POLLWRNORM|POLLOUT|POLLPRI;
  282|    285|    pfd[num].revents = 0;
  283|    285|    num++;
  284|    285|  }
  285|       |
  286|    285|  r = Curl_poll(pfd, num, timeout_ms);
  287|    285|  if(r <= 0)
  288|      0|    return r;
  289|       |
  290|    285|  r = 0;
  291|    285|  num = 0;
  292|    285|  if(readfd0 != CURL_SOCKET_BAD) {
  293|      0|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  294|      0|      r |= CURL_CSELECT_IN;
  295|      0|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  296|      0|      r |= CURL_CSELECT_ERR;
  297|      0|    num++;
  298|      0|  }
  299|    285|  if(readfd1 != CURL_SOCKET_BAD) {
  300|      0|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  301|      0|      r |= CURL_CSELECT_IN2;
  302|      0|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  303|      0|      r |= CURL_CSELECT_ERR;
  304|      0|    num++;
  305|      0|  }
  306|    285|  if(writefd != CURL_SOCKET_BAD) {
  307|    285|    if(pfd[num].revents & (POLLWRNORM|POLLOUT))
  308|    285|      r |= CURL_CSELECT_OUT;
  309|    285|    if(pfd[num].revents & (POLLERR|POLLHUP|POLLPRI|POLLNVAL))
  310|      0|      r |= CURL_CSELECT_ERR;
  311|    285|  }
  312|       |
  313|    285|  return r;
  314|    285|}
Curl_poll:
  330|    285|{
  331|    285|#ifdef HAVE_POLL_FINE
  332|    285|  int pending_ms;
  333|       |#else
  334|       |  fd_set fds_read;
  335|       |  fd_set fds_write;
  336|       |  fd_set fds_err;
  337|       |  curl_socket_t maxfd;
  338|       |#endif
  339|    285|  bool fds_none = TRUE;
  340|    285|  unsigned int i;
  341|    285|  int r;
  342|       |
  343|    285|  if(ufds) {
  344|    285|    for(i = 0; i < nfds; i++) {
  345|    285|      if(ufds[i].fd != CURL_SOCKET_BAD) {
  346|    285|        fds_none = FALSE;
  347|    285|        break;
  348|    285|      }
  349|    285|    }
  350|    285|  }
  351|    285|  if(fds_none) {
  352|       |    /* no sockets, just wait */
  353|      0|    return Curl_wait_ms(timeout_ms);
  354|      0|  }
  355|       |
  356|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  357|       |     time in this function does not need to be measured. This happens
  358|       |     when function is called with a zero timeout or a negative timeout
  359|       |     value indicating a blocking call should be performed. */
  360|       |
  361|    285|#ifdef HAVE_POLL_FINE
  362|       |
  363|       |  /* prevent overflow, timeout_ms is typecast to int. */
  364|    285|#if TIMEDIFF_T_MAX > INT_MAX
  365|    285|  if(timeout_ms > INT_MAX)
  366|      0|    timeout_ms = INT_MAX;
  367|    285|#endif
  368|    285|  if(timeout_ms > 0)
  369|      0|    pending_ms = (int)timeout_ms;
  370|    285|  else if(timeout_ms < 0)
  371|      0|    pending_ms = -1;
  372|    285|  else
  373|    285|    pending_ms = 0;
  374|    285|  r = poll(ufds, nfds, pending_ms);
  375|    285|  if(r <= 0)
  376|      0|    return r;
  377|       |
  378|    570|  for(i = 0; i < nfds; i++) {
  379|    285|    if(ufds[i].fd == CURL_SOCKET_BAD)
  380|      0|      continue;
  381|    285|    if(ufds[i].revents & POLLHUP)
  382|      0|      ufds[i].revents |= POLLIN;
  383|    285|    if(ufds[i].revents & POLLERR)
  384|      0|      ufds[i].revents |= POLLIN|POLLOUT;
  385|    285|  }
  386|       |
  387|       |#else  /* HAVE_POLL_FINE */
  388|       |
  389|       |  FD_ZERO(&fds_read);
  390|       |  FD_ZERO(&fds_write);
  391|       |  FD_ZERO(&fds_err);
  392|       |  maxfd = (curl_socket_t)-1;
  393|       |
  394|       |  for(i = 0; i < nfds; i++) {
  395|       |    ufds[i].revents = 0;
  396|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  397|       |      continue;
  398|       |    VERIFY_SOCK(ufds[i].fd);
  399|       |    if(ufds[i].events & (POLLIN|POLLOUT|POLLPRI|
  400|       |                         POLLRDNORM|POLLWRNORM|POLLRDBAND)) {
  401|       |      if(ufds[i].fd > maxfd)
  402|       |        maxfd = ufds[i].fd;
  403|       |      if(ufds[i].events & (POLLRDNORM|POLLIN))
  404|       |        FD_SET(ufds[i].fd, &fds_read);
  405|       |      if(ufds[i].events & (POLLWRNORM|POLLOUT))
  406|       |        FD_SET(ufds[i].fd, &fds_write);
  407|       |      if(ufds[i].events & (POLLRDBAND|POLLPRI))
  408|       |        FD_SET(ufds[i].fd, &fds_err);
  409|       |    }
  410|       |  }
  411|       |
  412|       |  /*
  413|       |     Note also that WinSock ignores the first argument, so we don't worry
  414|       |     about the fact that maxfd is computed incorrectly with WinSock (since
  415|       |     curl_socket_t is unsigned in such cases and thus -1 is the largest
  416|       |     value).
  417|       |  */
  418|       |  r = our_select(maxfd, &fds_read, &fds_write, &fds_err, timeout_ms);
  419|       |  if(r <= 0)
  420|       |    return r;
  421|       |
  422|       |  r = 0;
  423|       |  for(i = 0; i < nfds; i++) {
  424|       |    ufds[i].revents = 0;
  425|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  426|       |      continue;
  427|       |    if(FD_ISSET(ufds[i].fd, &fds_read)) {
  428|       |      if(ufds[i].events & POLLRDNORM)
  429|       |        ufds[i].revents |= POLLRDNORM;
  430|       |      if(ufds[i].events & POLLIN)
  431|       |        ufds[i].revents |= POLLIN;
  432|       |    }
  433|       |    if(FD_ISSET(ufds[i].fd, &fds_write)) {
  434|       |      if(ufds[i].events & POLLWRNORM)
  435|       |        ufds[i].revents |= POLLWRNORM;
  436|       |      if(ufds[i].events & POLLOUT)
  437|       |        ufds[i].revents |= POLLOUT;
  438|       |    }
  439|       |    if(FD_ISSET(ufds[i].fd, &fds_err)) {
  440|       |      if(ufds[i].events & POLLRDBAND)
  441|       |        ufds[i].revents |= POLLRDBAND;
  442|       |      if(ufds[i].events & POLLPRI)
  443|       |        ufds[i].revents |= POLLPRI;
  444|       |    }
  445|       |    if(ufds[i].revents)
  446|       |      r++;
  447|       |  }
  448|       |
  449|       |#endif  /* HAVE_POLL_FINE */
  450|       |
  451|    285|  return r;
  452|    285|}

Curl_infof:
  242|  15.8M|{
  243|  15.8M|  DEBUGASSERT(!strchr(fmt, '\n'));
  244|  15.8M|  if(data && data->set.verbose) {
  245|      0|    va_list ap;
  246|      0|    size_t len;
  247|      0|    char buffer[MAXINFO + 2];
  248|      0|    va_start(ap, fmt);
  249|      0|    len = mvsnprintf(buffer, MAXINFO, fmt, ap);
  250|      0|    va_end(ap);
  251|      0|    buffer[len++] = '\n';
  252|      0|    buffer[len] = '\0';
  253|      0|    Curl_debug(data, CURLINFO_TEXT, buffer, len);
  254|      0|  }
  255|  15.8M|}
Curl_failf:
  262|    408|{
  263|    408|  DEBUGASSERT(!strchr(fmt, '\n'));
  264|    408|  if(data->set.verbose || data->set.errorbuffer) {
  265|      0|    va_list ap;
  266|      0|    size_t len;
  267|      0|    char error[CURL_ERROR_SIZE + 2];
  268|      0|    va_start(ap, fmt);
  269|      0|    len = mvsnprintf(error, CURL_ERROR_SIZE, fmt, ap);
  270|       |
  271|      0|    if(data->set.errorbuffer && !data->state.errorbuf) {
  272|      0|      strcpy(data->set.errorbuffer, error);
  273|      0|      data->state.errorbuf = TRUE; /* wrote error string */
  274|      0|    }
  275|      0|    error[len++] = '\n';
  276|      0|    error[len] = '\0';
  277|      0|    Curl_debug(data, CURLINFO_TEXT, error, len);
  278|      0|    va_end(ap);
  279|      0|  }
  280|    408|}
Curl_write:
  294|    295|{
  295|    295|  ssize_t bytes_written;
  296|    295|  CURLcode result = CURLE_OK;
  297|    295|  struct connectdata *conn;
  298|    295|  int num;
  299|    295|  DEBUGASSERT(data);
  300|    295|  DEBUGASSERT(data->conn);
  301|    295|  conn = data->conn;
  302|    295|  num = (sockfd == conn->sock[SECONDARYSOCKET]);
  303|       |
  304|    295|#ifdef CURLDEBUG
  305|    295|  {
  306|       |    /* Allow debug builds to override this logic to force short sends
  307|       |    */
  308|    295|    char *p = getenv("CURL_SMALLSENDS");
  309|    295|    if(p) {
  310|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
  311|      0|      if(altsize)
  312|      0|        len = CURLMIN(len, altsize);
  313|      0|    }
  314|    295|  }
  315|    295|#endif
  316|    295|  bytes_written = conn->send[num](data, num, mem, len, &result);
  317|       |
  318|    295|  *written = bytes_written;
  319|    295|  if(bytes_written >= 0)
  320|       |    /* we completely ignore the curlcode value when subzero is not returned */
  321|    295|    return CURLE_OK;
  322|       |
  323|       |  /* handle CURLE_AGAIN or a send failure */
  324|      0|  switch(result) {
  325|      0|  case CURLE_AGAIN:
  326|      0|    *written = 0;
  327|      0|    return CURLE_OK;
  328|       |
  329|      0|  case CURLE_OK:
  330|       |    /* general send failure */
  331|      0|    return CURLE_SEND_ERROR;
  332|       |
  333|      0|  default:
  334|       |    /* we got a specific curlcode, forward it */
  335|      0|    return result;
  336|      0|  }
  337|      0|}
Curl_send_plain:
  341|    295|{
  342|    295|  struct connectdata *conn;
  343|    295|  curl_socket_t sockfd;
  344|    295|  ssize_t bytes_written;
  345|       |
  346|    295|  DEBUGASSERT(data);
  347|    295|  DEBUGASSERT(data->conn);
  348|    295|  conn = data->conn;
  349|    295|  sockfd = conn->sock[num];
  350|       |  /* WinSock will destroy unread received data if send() is
  351|       |     failed.
  352|       |     To avoid lossage of received data, recv() must be
  353|       |     performed before every send() if any incoming data is
  354|       |     available. */
  355|    295|  if(pre_receive_plain(data, conn, num)) {
  356|      0|    *code = CURLE_OUT_OF_MEMORY;
  357|      0|    return -1;
  358|      0|  }
  359|       |
  360|       |#if defined(MSG_FASTOPEN) && !defined(TCP_FASTOPEN_CONNECT) /* Linux */
  361|       |  if(conn->bits.tcp_fastopen) {
  362|       |    bytes_written = sendto(sockfd, mem, len, MSG_FASTOPEN,
  363|       |                           conn->ip_addr->ai_addr, conn->ip_addr->ai_addrlen);
  364|       |    conn->bits.tcp_fastopen = FALSE;
  365|       |  }
  366|       |  else
  367|       |#endif
  368|    295|    bytes_written = swrite(sockfd, mem, len);
  369|       |
  370|    295|  *code = CURLE_OK;
  371|    295|  if(-1 == bytes_written) {
  372|      0|    int err = SOCKERRNO;
  373|       |
  374|      0|    if(
  375|       |#ifdef WSAEWOULDBLOCK
  376|       |      /* This is how Windows does it */
  377|       |      (WSAEWOULDBLOCK == err)
  378|       |#else
  379|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  380|       |         due to its inability to send off data without blocking. We therefore
  381|       |         treat both error codes the same here */
  382|      0|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err) ||
  383|      0|      (EINPROGRESS == err)
  384|      0|#endif
  385|      0|      ) {
  386|       |      /* this is just a case of EWOULDBLOCK */
  387|      0|      bytes_written = 0;
  388|      0|      *code = CURLE_AGAIN;
  389|      0|    }
  390|      0|    else {
  391|      0|      char buffer[STRERROR_LEN];
  392|      0|      failf(data, "Send failure: %s",
  393|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  394|      0|      data->state.os_errno = err;
  395|      0|      *code = CURLE_SEND_ERROR;
  396|      0|    }
  397|      0|  }
  398|    295|  return bytes_written;
  399|    295|}
Curl_recv_plain:
  425|  15.8M|{
  426|  15.8M|  struct connectdata *conn;
  427|  15.8M|  curl_socket_t sockfd;
  428|  15.8M|  ssize_t nread;
  429|  15.8M|  DEBUGASSERT(data);
  430|  15.8M|  DEBUGASSERT(data->conn);
  431|  15.8M|  conn = data->conn;
  432|  15.8M|  sockfd = conn->sock[num];
  433|       |  /* Check and return data that already received and storied in internal
  434|       |     intermediate buffer */
  435|  15.8M|  nread = get_pre_recved(conn, num, buf, len);
  436|  15.8M|  if(nread > 0) {
  437|      0|    *code = CURLE_OK;
  438|      0|    return nread;
  439|      0|  }
  440|       |
  441|  15.8M|  nread = sread(sockfd, buf, len);
  442|       |
  443|  15.8M|  *code = CURLE_OK;
  444|  15.8M|  if(-1 == nread) {
  445|      0|    int err = SOCKERRNO;
  446|       |
  447|      0|    if(
  448|       |#ifdef WSAEWOULDBLOCK
  449|       |      /* This is how Windows does it */
  450|       |      (WSAEWOULDBLOCK == err)
  451|       |#else
  452|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  453|       |         due to its inability to send off data without blocking. We therefore
  454|       |         treat both error codes the same here */
  455|      0|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err)
  456|      0|#endif
  457|      0|      ) {
  458|       |      /* this is just a case of EWOULDBLOCK */
  459|      0|      *code = CURLE_AGAIN;
  460|      0|    }
  461|      0|    else {
  462|      0|      char buffer[STRERROR_LEN];
  463|      0|      failf(data, "Recv failure: %s",
  464|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  465|      0|      data->state.os_errno = err;
  466|      0|      *code = CURLE_RECV_ERROR;
  467|      0|    }
  468|      0|  }
  469|  15.8M|  return nread;
  470|  15.8M|}
Curl_client_write:
  621|      1|{
  622|      1|  struct connectdata *conn = data->conn;
  623|       |
  624|      1|  DEBUGASSERT(!(type & ~CLIENTWRITE_BOTH));
  625|       |
  626|      1|  if(!len)
  627|      0|    return CURLE_OK;
  628|       |
  629|       |  /* FTP data may need conversion. */
  630|      1|  if((type & CLIENTWRITE_BODY) &&
  631|      1|    (conn->handler->protocol & PROTO_FAMILY_FTP) &&
  632|      1|    conn->proto.ftpc.transfertype == 'A') {
  633|       |    /* convert from the network encoding */
  634|      0|    CURLcode result = Curl_convert_from_network(data, ptr, len);
  635|       |    /* Curl_convert_from_network calls failf if unsuccessful */
  636|      0|    if(result)
  637|      0|      return result;
  638|       |
  639|      0|#ifdef CURL_DO_LINEEND_CONV
  640|       |    /* convert end-of-line markers */
  641|      0|    len = convert_lineends(data, ptr, len);
  642|      0|#endif /* CURL_DO_LINEEND_CONV */
  643|      0|    }
  644|       |
  645|      1|  return chop_write(data, type, ptr, len);
  646|      1|}
Curl_read:
  685|  15.8M|{
  686|  15.8M|  CURLcode result = CURLE_RECV_ERROR;
  687|  15.8M|  ssize_t nread = 0;
  688|  15.8M|  size_t bytesfromsocket = 0;
  689|  15.8M|  char *buffertofill = NULL;
  690|  15.8M|  struct connectdata *conn = data->conn;
  691|       |
  692|       |  /* Set 'num' to 0 or 1, depending on which socket that has been sent here.
  693|       |     If it is the second socket, we set num to 1. Otherwise to 0. This lets
  694|       |     us use the correct ssl handle. */
  695|  15.8M|  int num = (sockfd == conn->sock[SECONDARYSOCKET]);
  696|       |
  697|  15.8M|  *n = 0; /* reset amount to zero */
  698|       |
  699|  15.8M|  bytesfromsocket = CURLMIN(sizerequested, (size_t)data->set.buffer_size);
  700|  15.8M|  buffertofill = buf;
  701|       |
  702|  15.8M|  nread = conn->recv[num](data, num, buffertofill, bytesfromsocket, &result);
  703|  15.8M|  if(nread < 0)
  704|      0|    return result;
  705|       |
  706|  15.8M|  *n += nread;
  707|       |
  708|  15.8M|  return CURLE_OK;
  709|  15.8M|}
Curl_debug:
  714|    471|{
  715|    471|  int rc = 0;
  716|    471|  if(data->set.verbose) {
  717|      0|    static const char s_infotype[CURLINFO_END][3] = {
  718|      0|      "* ", "< ", "> ", "{ ", "} ", "{ ", "} " };
  719|       |
  720|       |#ifdef CURL_DOES_CONVERSIONS
  721|       |    char *buf = NULL;
  722|       |    size_t conv_size = 0;
  723|       |
  724|       |    switch(type) {
  725|       |    case CURLINFO_HEADER_OUT:
  726|       |      buf = Curl_memdup(ptr, size);
  727|       |      if(!buf)
  728|       |        return 1;
  729|       |      conv_size = size;
  730|       |
  731|       |      /* Special processing is needed for this block if it
  732|       |       * contains both headers and data (separated by CRLFCRLF).
  733|       |       * We want to convert just the headers, leaving the data as-is.
  734|       |       */
  735|       |      if(size > 4) {
  736|       |        size_t i;
  737|       |        for(i = 0; i < size-4; i++) {
  738|       |          if(memcmp(&buf[i], "\x0d\x0a\x0d\x0a", 4) == 0) {
  739|       |            /* convert everything through this CRLFCRLF but no further */
  740|       |            conv_size = i + 4;
  741|       |            break;
  742|       |          }
  743|       |        }
  744|       |      }
  745|       |
  746|       |      Curl_convert_from_network(data, buf, conv_size);
  747|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  748|       |      /* we might as well continue even if it fails...   */
  749|       |      ptr = buf; /* switch pointer to use my buffer instead */
  750|       |      break;
  751|       |    default:
  752|       |      /* leave everything else as-is */
  753|       |      break;
  754|       |    }
  755|       |#endif /* CURL_DOES_CONVERSIONS */
  756|       |
  757|      0|    if(data->set.fdebug) {
  758|      0|      Curl_set_in_callback(data, true);
  759|      0|      rc = (*data->set.fdebug)(data, type, ptr, size, data->set.debugdata);
  760|      0|      Curl_set_in_callback(data, false);
  761|      0|    }
  762|      0|    else {
  763|      0|      switch(type) {
  764|      0|      case CURLINFO_TEXT:
  765|      0|      case CURLINFO_HEADER_OUT:
  766|      0|      case CURLINFO_HEADER_IN:
  767|      0|        fwrite(s_infotype[type], 2, 1, data->set.err);
  768|      0|        fwrite(ptr, size, 1, data->set.err);
  769|       |#ifdef CURL_DOES_CONVERSIONS
  770|       |        if(size != conv_size) {
  771|       |          /* we had untranslated data so we need an explicit newline */
  772|       |          fwrite("\n", 1, 1, data->set.err);
  773|       |        }
  774|       |#endif
  775|      0|        break;
  776|      0|      default: /* nada */
  777|      0|        break;
  778|      0|      }
  779|      0|    }
  780|       |#ifdef CURL_DOES_CONVERSIONS
  781|       |    free(buf);
  782|       |#endif
  783|      0|  }
  784|    471|  return rc;
  785|    471|}
sendf.c:chop_write:
  526|      1|{
  527|      1|  struct connectdata *conn = data->conn;
  528|      1|  curl_write_callback writeheader = NULL;
  529|      1|  curl_write_callback writebody = NULL;
  530|      1|  char *ptr = optr;
  531|      1|  size_t len = olen;
  532|       |
  533|      1|  if(!len)
  534|      0|    return CURLE_OK;
  535|       |
  536|       |  /* If reading is paused, append this data to the already held data for this
  537|       |     type. */
  538|      1|  if(data->req.keepon & KEEP_RECV_PAUSE)
  539|      0|    return pausewrite(data, type, ptr, len);
  540|       |
  541|       |  /* Determine the callback(s) to use. */
  542|      1|  if(type & CLIENTWRITE_BODY)
  543|      1|    writebody = data->set.fwrite_func;
  544|      1|  if((type & CLIENTWRITE_HEADER) &&
  545|      1|     (data->set.fwrite_header || data->set.writeheader)) {
  546|       |    /*
  547|       |     * Write headers to the same callback or to the especially setup
  548|       |     * header callback function (added after version 7.7.1).
  549|       |     */
  550|      0|    writeheader =
  551|      0|      data->set.fwrite_header? data->set.fwrite_header: data->set.fwrite_func;
  552|      0|  }
  553|       |
  554|       |  /* Chop data, write chunks. */
  555|      2|  while(len) {
  556|      1|    size_t chunklen = len <= CURL_MAX_WRITE_SIZE? len: CURL_MAX_WRITE_SIZE;
  557|       |
  558|      1|    if(writebody) {
  559|      1|      size_t wrote;
  560|      1|      Curl_set_in_callback(data, true);
  561|      1|      wrote = writebody(ptr, 1, chunklen, data->set.out);
  562|      1|      Curl_set_in_callback(data, false);
  563|       |
  564|      1|      if(CURL_WRITEFUNC_PAUSE == wrote) {
  565|      0|        if(conn->handler->flags & PROTOPT_NONETWORK) {
  566|       |          /* Protocols that work without network cannot be paused. This is
  567|       |             actually only FILE:// just now, and it can't pause since the
  568|       |             transfer isn't done using the "normal" procedure. */
  569|      0|          failf(data, "Write callback asked for PAUSE when not supported!");
  570|      0|          return CURLE_WRITE_ERROR;
  571|      0|        }
  572|      0|        return pausewrite(data, type, ptr, len);
  573|      0|      }
  574|      1|      if(wrote != chunklen) {
  575|      0|        failf(data, "Failure writing output to destination");
  576|      0|        return CURLE_WRITE_ERROR;
  577|      0|      }
  578|      1|    }
  579|       |
  580|      1|    ptr += chunklen;
  581|      1|    len -= chunklen;
  582|      1|  }
  583|       |
  584|      1|  if(writeheader) {
  585|      0|    size_t wrote;
  586|      0|    ptr = optr;
  587|      0|    len = olen;
  588|      0|    Curl_set_in_callback(data, true);
  589|      0|    wrote = writeheader(ptr, 1, len, data->set.writeheader);
  590|      0|    Curl_set_in_callback(data, false);
  591|       |
  592|      0|    if(CURL_WRITEFUNC_PAUSE == wrote)
  593|       |      /* here we pass in the HEADER bit only since if this was body as well
  594|       |         then it was passed already and clearly that didn't trigger the
  595|       |         pause, so this is saved for later with the HEADER bit only */
  596|      0|      return pausewrite(data, CLIENTWRITE_HEADER, ptr, len);
  597|       |
  598|      0|    if(wrote != len) {
  599|      0|      failf(data, "Failed writing header");
  600|      0|      return CURLE_WRITE_ERROR;
  601|      0|    }
  602|      0|  }
  603|       |
  604|      1|  return CURLE_OK;
  605|      1|}

Curl_setstropt:
   58|  5.00k|{
   59|       |  /* Release the previous storage at `charp' and replace by a dynamic storage
   60|       |     copy of `s'. Return CURLE_OK or CURLE_OUT_OF_MEMORY. */
   61|       |
   62|  5.00k|  Curl_safefree(*charp);
   63|       |
   64|  5.00k|  if(s) {
   65|  3.37k|    char *str = strdup(s);
   66|       |
   67|  3.37k|    if(str) {
   68|  3.37k|      size_t len = strlen(str);
   69|  3.37k|      if(len > CURL_MAX_INPUT_LENGTH) {
   70|      0|        free(str);
   71|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
   72|      0|      }
   73|  3.37k|    }
   74|  3.37k|    if(!str)
   75|      0|      return CURLE_OUT_OF_MEMORY;
   76|       |
   77|  3.37k|    *charp = str;
   78|  3.37k|  }
   79|       |
   80|  5.00k|  return CURLE_OK;
   81|  5.00k|}
Curl_vsetopt:
  161|  6.20k|{
  162|  6.20k|  char *argptr;
  163|  6.20k|  CURLcode result = CURLE_OK;
  164|  6.20k|  long arg;
  165|  6.20k|  unsigned long uarg;
  166|  6.20k|  curl_off_t bigsize;
  167|       |
  168|  6.20k|  switch(option) {
  169|      0|  case CURLOPT_DNS_CACHE_TIMEOUT:
  170|      0|    arg = va_arg(param, long);
  171|      0|    if(arg < -1)
  172|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  173|      0|    data->set.dns_cache_timeout = arg;
  174|      0|    break;
  175|      0|  case CURLOPT_DNS_USE_GLOBAL_CACHE:
  176|       |    /* deprecated */
  177|      0|    break;
  178|      0|  case CURLOPT_SSL_CIPHER_LIST:
  179|       |    /* set a list of cipher we want to use in the SSL connection */
  180|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST],
  181|      0|                            va_arg(param, char *));
  182|      0|    break;
  183|      0|#ifndef CURL_DISABLE_PROXY
  184|      0|  case CURLOPT_PROXY_SSL_CIPHER_LIST:
  185|       |    /* set a list of cipher we want to use in the SSL connection for proxy */
  186|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST_PROXY],
  187|      0|                            va_arg(param, char *));
  188|      0|    break;
  189|      0|#endif
  190|      0|  case CURLOPT_TLS13_CIPHERS:
  191|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  192|       |      /* set preferred list of TLS 1.3 cipher suites */
  193|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST],
  194|      0|                              va_arg(param, char *));
  195|      0|    }
  196|      0|    else
  197|      0|      return CURLE_NOT_BUILT_IN;
  198|      0|    break;
  199|      0|#ifndef CURL_DISABLE_PROXY
  200|      0|  case CURLOPT_PROXY_TLS13_CIPHERS:
  201|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  202|       |      /* set preferred list of TLS 1.3 cipher suites for proxy */
  203|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST_PROXY],
  204|      0|                              va_arg(param, char *));
  205|      0|    }
  206|      0|    else
  207|      0|      return CURLE_NOT_BUILT_IN;
  208|      0|    break;
  209|      0|#endif
  210|      0|  case CURLOPT_RANDOM_FILE:
  211|       |    /*
  212|       |     * This is the path name to a file that contains random data to seed
  213|       |     * the random SSL stuff with. The file is only used for reading.
  214|       |     */
  215|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_RANDOM_FILE],
  216|      0|                            va_arg(param, char *));
  217|      0|    break;
  218|      0|  case CURLOPT_EGDSOCKET:
  219|       |    /*
  220|       |     * The Entropy Gathering Daemon socket pathname
  221|       |     */
  222|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EGDSOCKET],
  223|      0|                            va_arg(param, char *));
  224|      0|    break;
  225|      0|  case CURLOPT_MAXCONNECTS:
  226|       |    /*
  227|       |     * Set the absolute number of maximum simultaneous alive connection that
  228|       |     * libcurl is allowed to have.
  229|       |     */
  230|      0|    arg = va_arg(param, long);
  231|      0|    if(arg < 0)
  232|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  233|      0|    data->set.maxconnects = arg;
  234|      0|    break;
  235|      0|  case CURLOPT_FORBID_REUSE:
  236|       |    /*
  237|       |     * When this transfer is done, it must not be left to be reused by a
  238|       |     * subsequent transfer but shall be closed immediately.
  239|       |     */
  240|      0|    data->set.reuse_forbid = (0 != va_arg(param, long)) ? TRUE : FALSE;
  241|      0|    break;
  242|      0|  case CURLOPT_FRESH_CONNECT:
  243|       |    /*
  244|       |     * This transfer shall not use a previously cached connection but
  245|       |     * should be made with a fresh new connect!
  246|       |     */
  247|      0|    data->set.reuse_fresh = (0 != va_arg(param, long)) ? TRUE : FALSE;
  248|      0|    break;
  249|      0|  case CURLOPT_VERBOSE:
  250|       |    /*
  251|       |     * Verbose means infof() calls that give a lot of information about
  252|       |     * the connection and transfer procedures as well as internal choices.
  253|       |     */
  254|      0|    data->set.verbose = (0 != va_arg(param, long)) ? TRUE : FALSE;
  255|      0|    break;
  256|      0|  case CURLOPT_HEADER:
  257|       |    /*
  258|       |     * Set to include the header in the general data output stream.
  259|       |     */
  260|      0|    data->set.include_header = (0 != va_arg(param, long)) ? TRUE : FALSE;
  261|      0|    break;
  262|      0|  case CURLOPT_NOPROGRESS:
  263|       |    /*
  264|       |     * Shut off the internal supported progress meter
  265|       |     */
  266|      0|    data->set.hide_progress = (0 != va_arg(param, long)) ? TRUE : FALSE;
  267|      0|    if(data->set.hide_progress)
  268|      0|      data->progress.flags |= PGRS_HIDE;
  269|      0|    else
  270|      0|      data->progress.flags &= ~PGRS_HIDE;
  271|      0|    break;
  272|      0|  case CURLOPT_NOBODY:
  273|       |    /*
  274|       |     * Do not include the body part in the output data stream.
  275|       |     */
  276|      0|    data->set.opt_no_body = (0 != va_arg(param, long)) ? TRUE : FALSE;
  277|      0|#ifndef CURL_DISABLE_HTTP
  278|      0|    if(data->set.opt_no_body)
  279|       |      /* in HTTP lingo, no body means using the HEAD request... */
  280|      0|      data->set.method = HTTPREQ_HEAD;
  281|      0|    else if(data->set.method == HTTPREQ_HEAD)
  282|      0|      data->set.method = HTTPREQ_GET;
  283|      0|#endif
  284|      0|    break;
  285|      0|  case CURLOPT_FAILONERROR:
  286|       |    /*
  287|       |     * Don't output the >=400 error code HTML-page, but instead only
  288|       |     * return error.
  289|       |     */
  290|      0|    data->set.http_fail_on_error = (0 != va_arg(param, long)) ? TRUE : FALSE;
  291|      0|    break;
  292|      0|  case CURLOPT_KEEP_SENDING_ON_ERROR:
  293|      0|    data->set.http_keep_sending_on_error = (0 != va_arg(param, long)) ?
  294|      0|      TRUE : FALSE;
  295|      0|    break;
  296|     12|  case CURLOPT_UPLOAD:
  297|     12|  case CURLOPT_PUT:
  298|       |    /*
  299|       |     * We want to sent data to the remote host. If this is HTTP, that equals
  300|       |     * using the PUT request.
  301|       |     */
  302|     12|    data->set.upload = (0 != va_arg(param, long)) ? TRUE : FALSE;
  303|     12|    if(data->set.upload) {
  304|       |      /* If this is HTTP, PUT is what's needed to "upload" */
  305|     12|      data->set.method = HTTPREQ_PUT;
  306|     12|      data->set.opt_no_body = FALSE; /* this is implied */
  307|     12|    }
  308|      0|    else
  309|       |      /* In HTTP, the opposite of upload is GET (unless NOBODY is true as
  310|       |         then this can be changed to HEAD later on) */
  311|      0|      data->set.method = HTTPREQ_GET;
  312|     12|    break;
  313|      0|  case CURLOPT_REQUEST_TARGET:
  314|      0|    result = Curl_setstropt(&data->set.str[STRING_TARGET],
  315|      0|                            va_arg(param, char *));
  316|      0|    break;
  317|      0|  case CURLOPT_FILETIME:
  318|       |    /*
  319|       |     * Try to get the file time of the remote document. The time will
  320|       |     * later (possibly) become available using curl_easy_getinfo().
  321|       |     */
  322|      0|    data->set.get_filetime = (0 != va_arg(param, long)) ? TRUE : FALSE;
  323|      0|    break;
  324|    472|  case CURLOPT_SERVER_RESPONSE_TIMEOUT:
  325|       |    /*
  326|       |     * Option that specifies how quickly an server response must be obtained
  327|       |     * before it is considered failure. For pingpong protocols.
  328|       |     */
  329|    472|    arg = va_arg(param, long);
  330|    472|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
  331|    472|      data->set.server_response_timeout = arg * 1000;
  332|      0|    else
  333|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  334|    472|    break;
  335|    472|#ifndef CURL_DISABLE_TFTP
  336|    472|  case CURLOPT_TFTP_NO_OPTIONS:
  337|       |    /*
  338|       |     * Option that prevents libcurl from sending TFTP option requests to the
  339|       |     * server.
  340|       |     */
  341|      0|    data->set.tftp_no_options = va_arg(param, long) != 0;
  342|      0|    break;
  343|      0|  case CURLOPT_TFTP_BLKSIZE:
  344|       |    /*
  345|       |     * TFTP option that specifies the block size to use for data transmission.
  346|       |     */
  347|      0|    arg = va_arg(param, long);
  348|      0|    if(arg < 0)
  349|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  350|      0|    data->set.tftp_blksize = arg;
  351|      0|    break;
  352|      0|#endif
  353|      0|#ifndef CURL_DISABLE_NETRC
  354|      0|  case CURLOPT_NETRC:
  355|       |    /*
  356|       |     * Parse the $HOME/.netrc file
  357|       |     */
  358|      0|    arg = va_arg(param, long);
  359|      0|    if((arg < CURL_NETRC_IGNORED) || (arg >= CURL_NETRC_LAST))
  360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  361|      0|    data->set.use_netrc = (enum CURL_NETRC_OPTION)arg;
  362|      0|    break;
  363|      0|  case CURLOPT_NETRC_FILE:
  364|       |    /*
  365|       |     * Use this file instead of the $HOME/.netrc file
  366|       |     */
  367|      0|    result = Curl_setstropt(&data->set.str[STRING_NETRC_FILE],
  368|      0|                            va_arg(param, char *));
  369|      0|    break;
  370|      0|#endif
  371|      0|  case CURLOPT_TRANSFERTEXT:
  372|       |    /*
  373|       |     * This option was previously named 'FTPASCII'. Renamed to work with
  374|       |     * more protocols than merely FTP.
  375|       |     *
  376|       |     * Transfer using ASCII (instead of BINARY).
  377|       |     */
  378|      0|    data->set.prefer_ascii = (0 != va_arg(param, long)) ? TRUE : FALSE;
  379|      0|    break;
  380|      0|  case CURLOPT_TIMECONDITION:
  381|       |    /*
  382|       |     * Set HTTP time condition. This must be one of the defines in the
  383|       |     * curl/curl.h header file.
  384|       |     */
  385|      0|    arg = va_arg(param, long);
  386|      0|    if((arg < CURL_TIMECOND_NONE) || (arg >= CURL_TIMECOND_LAST))
  387|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  388|      0|    data->set.timecondition = (curl_TimeCond)arg;
  389|      0|    break;
  390|      0|  case CURLOPT_TIMEVALUE:
  391|       |    /*
  392|       |     * This is the value to compare with the remote document with the
  393|       |     * method set with CURLOPT_TIMECONDITION
  394|       |     */
  395|      0|    data->set.timevalue = (time_t)va_arg(param, long);
  396|      0|    break;
  397|       |
  398|      0|  case CURLOPT_TIMEVALUE_LARGE:
  399|       |    /*
  400|       |     * This is the value to compare with the remote document with the
  401|       |     * method set with CURLOPT_TIMECONDITION
  402|       |     */
  403|      0|    data->set.timevalue = (time_t)va_arg(param, curl_off_t);
  404|      0|    break;
  405|       |
  406|      0|  case CURLOPT_SSLVERSION:
  407|      0|#ifndef CURL_DISABLE_PROXY
  408|      0|  case CURLOPT_PROXY_SSLVERSION:
  409|      0|#endif
  410|       |    /*
  411|       |     * Set explicit SSL version to try to connect with, as some SSL
  412|       |     * implementations are lame.
  413|       |     */
  414|      0|#ifdef USE_SSL
  415|      0|    {
  416|      0|      long version, version_max;
  417|      0|      struct ssl_primary_config *primary = &data->set.ssl.primary;
  418|      0|#ifndef CURL_DISABLE_PROXY
  419|      0|      if(option != CURLOPT_SSLVERSION)
  420|      0|        primary = &data->set.proxy_ssl.primary;
  421|      0|#endif
  422|       |
  423|      0|      arg = va_arg(param, long);
  424|       |
  425|      0|      version = C_SSLVERSION_VALUE(arg);
  426|      0|      version_max = C_SSLVERSION_MAX_VALUE(arg);
  427|       |
  428|      0|      if(version < CURL_SSLVERSION_DEFAULT ||
  429|      0|         version == CURL_SSLVERSION_SSLv2 ||
  430|      0|         version == CURL_SSLVERSION_SSLv3 ||
  431|      0|         version >= CURL_SSLVERSION_LAST ||
  432|      0|         version_max < CURL_SSLVERSION_MAX_NONE ||
  433|      0|         version_max >= CURL_SSLVERSION_MAX_LAST)
  434|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  435|       |
  436|      0|      primary->version = version;
  437|      0|      primary->version_max = version_max;
  438|      0|    }
  439|       |#else
  440|       |    result = CURLE_NOT_BUILT_IN;
  441|       |#endif
  442|      0|    break;
  443|       |
  444|       |    /* MQTT "borrows" some of the HTTP options */
  445|      0|#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MQTT)
  446|      0|  case CURLOPT_COPYPOSTFIELDS:
  447|       |    /*
  448|       |     * A string with POST data. Makes curl HTTP POST. Even if it is NULL.
  449|       |     * If needed, CURLOPT_POSTFIELDSIZE must have been set prior to
  450|       |     *  CURLOPT_COPYPOSTFIELDS and not altered later.
  451|       |     */
  452|      0|    argptr = va_arg(param, char *);
  453|       |
  454|      0|    if(!argptr || data->set.postfieldsize == -1)
  455|      0|      result = Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], argptr);
  456|      0|    else {
  457|       |      /*
  458|       |       *  Check that requested length does not overflow the size_t type.
  459|       |       */
  460|       |
  461|      0|      if((data->set.postfieldsize < 0) ||
  462|      0|         ((sizeof(curl_off_t) != sizeof(size_t)) &&
  463|      0|          (data->set.postfieldsize > (curl_off_t)((size_t)-1))))
  464|      0|        result = CURLE_OUT_OF_MEMORY;
  465|      0|      else {
  466|      0|        char *p;
  467|       |
  468|      0|        (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  469|       |
  470|       |        /* Allocate even when size == 0. This satisfies the need of possible
  471|       |           later address compare to detect the COPYPOSTFIELDS mode, and
  472|       |           to mark that postfields is used rather than read function or
  473|       |           form data.
  474|       |        */
  475|      0|        p = malloc((size_t)(data->set.postfieldsize?
  476|      0|                            data->set.postfieldsize:1));
  477|       |
  478|      0|        if(!p)
  479|      0|          result = CURLE_OUT_OF_MEMORY;
  480|      0|        else {
  481|      0|          if(data->set.postfieldsize)
  482|      0|            memcpy(p, argptr, (size_t)data->set.postfieldsize);
  483|       |
  484|      0|          data->set.str[STRING_COPYPOSTFIELDS] = p;
  485|      0|        }
  486|      0|      }
  487|      0|    }
  488|       |
  489|      0|    data->set.postfields = data->set.str[STRING_COPYPOSTFIELDS];
  490|      0|    data->set.method = HTTPREQ_POST;
  491|      0|    break;
  492|       |
  493|      6|  case CURLOPT_POSTFIELDS:
  494|       |    /*
  495|       |     * Like above, but use static data instead of copying it.
  496|       |     */
  497|      6|    data->set.postfields = va_arg(param, void *);
  498|       |    /* Release old copied data. */
  499|      6|    (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  500|      6|    data->set.method = HTTPREQ_POST;
  501|      6|    break;
  502|       |
  503|      0|  case CURLOPT_POSTFIELDSIZE:
  504|       |    /*
  505|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  506|       |     * figure it out. Enables binary posts.
  507|       |     */
  508|      0|    bigsize = va_arg(param, long);
  509|      0|    if(bigsize < -1)
  510|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  511|       |
  512|      0|    if(data->set.postfieldsize < bigsize &&
  513|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  514|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  515|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  516|      0|      data->set.postfields = NULL;
  517|      0|    }
  518|       |
  519|      0|    data->set.postfieldsize = bigsize;
  520|      0|    break;
  521|       |
  522|      0|  case CURLOPT_POSTFIELDSIZE_LARGE:
  523|       |    /*
  524|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  525|       |     * figure it out. Enables binary posts.
  526|       |     */
  527|      0|    bigsize = va_arg(param, curl_off_t);
  528|      0|    if(bigsize < -1)
  529|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  530|       |
  531|      0|    if(data->set.postfieldsize < bigsize &&
  532|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  533|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  534|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  535|      0|      data->set.postfields = NULL;
  536|      0|    }
  537|       |
  538|      0|    data->set.postfieldsize = bigsize;
  539|      0|    break;
  540|      0|#endif
  541|      0|#ifndef CURL_DISABLE_HTTP
  542|      0|  case CURLOPT_AUTOREFERER:
  543|       |    /*
  544|       |     * Switch on automatic referer that gets set if curl follows locations.
  545|       |     */
  546|      0|    data->set.http_auto_referer = (0 != va_arg(param, long)) ? TRUE : FALSE;
  547|      0|    break;
  548|       |
  549|     11|  case CURLOPT_ACCEPT_ENCODING:
  550|       |    /*
  551|       |     * String to use at the value of Accept-Encoding header.
  552|       |     *
  553|       |     * If the encoding is set to "" we use an Accept-Encoding header that
  554|       |     * encompasses all the encodings we support.
  555|       |     * If the encoding is set to NULL we don't send an Accept-Encoding header
  556|       |     * and ignore an received Content-Encoding header.
  557|       |     *
  558|       |     */
  559|     11|    argptr = va_arg(param, char *);
  560|     11|    if(argptr && !*argptr) {
  561|      9|      argptr = Curl_all_content_encodings();
  562|      9|      if(!argptr)
  563|      0|        result = CURLE_OUT_OF_MEMORY;
  564|      9|      else {
  565|      9|        result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  566|      9|        free(argptr);
  567|      9|      }
  568|      9|    }
  569|      2|    else
  570|      2|      result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  571|     11|    break;
  572|       |
  573|      0|  case CURLOPT_TRANSFER_ENCODING:
  574|      0|    data->set.http_transfer_encoding = (0 != va_arg(param, long)) ?
  575|      0|      TRUE : FALSE;
  576|      0|    break;
  577|       |
  578|      0|  case CURLOPT_FOLLOWLOCATION:
  579|       |    /*
  580|       |     * Follow Location: header hints on a HTTP-server.
  581|       |     */
  582|      0|    data->set.http_follow_location = (0 != va_arg(param, long)) ? TRUE : FALSE;
  583|      0|    break;
  584|       |
  585|      0|  case CURLOPT_UNRESTRICTED_AUTH:
  586|       |    /*
  587|       |     * Send authentication (user+password) when following locations, even when
  588|       |     * hostname changed.
  589|       |     */
  590|      0|    data->set.allow_auth_to_other_hosts =
  591|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
  592|      0|    break;
  593|       |
  594|      0|  case CURLOPT_MAXREDIRS:
  595|       |    /*
  596|       |     * The maximum amount of hops you allow curl to follow Location:
  597|       |     * headers. This should mostly be used to detect never-ending loops.
  598|       |     */
  599|      0|    arg = va_arg(param, long);
  600|      0|    if(arg < -1)
  601|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  602|      0|    data->set.maxredirs = arg;
  603|      0|    break;
  604|       |
  605|      0|  case CURLOPT_POSTREDIR:
  606|       |    /*
  607|       |     * Set the behavior of POST when redirecting
  608|       |     * CURL_REDIR_GET_ALL - POST is changed to GET after 301 and 302
  609|       |     * CURL_REDIR_POST_301 - POST is kept as POST after 301
  610|       |     * CURL_REDIR_POST_302 - POST is kept as POST after 302
  611|       |     * CURL_REDIR_POST_303 - POST is kept as POST after 303
  612|       |     * CURL_REDIR_POST_ALL - POST is kept as POST after 301, 302 and 303
  613|       |     * other - POST is kept as POST after 301 and 302
  614|       |     */
  615|      0|    arg = va_arg(param, long);
  616|      0|    if(arg < CURL_REDIR_GET_ALL)
  617|       |      /* no return error on too high numbers since the bitmask could be
  618|       |         extended in a future */
  619|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  620|      0|    data->set.keep_post = arg & CURL_REDIR_POST_ALL;
  621|      0|    break;
  622|       |
  623|      0|  case CURLOPT_POST:
  624|       |    /* Does this option serve a purpose anymore? Yes it does, when
  625|       |       CURLOPT_POSTFIELDS isn't used and the POST data is read off the
  626|       |       callback! */
  627|      0|    if(va_arg(param, long)) {
  628|      0|      data->set.method = HTTPREQ_POST;
  629|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  630|      0|    }
  631|      0|    else
  632|      0|      data->set.method = HTTPREQ_GET;
  633|      0|    break;
  634|       |
  635|      0|  case CURLOPT_HTTPPOST:
  636|       |    /*
  637|       |     * Set to make us do HTTP POST
  638|       |     */
  639|      0|    data->set.httppost = va_arg(param, struct curl_httppost *);
  640|      0|    data->set.method = HTTPREQ_POST_FORM;
  641|      0|    data->set.opt_no_body = FALSE; /* this is implied */
  642|      0|    break;
  643|       |
  644|      0|  case CURLOPT_AWS_SIGV4:
  645|       |    /*
  646|       |     * String that is merged to some authentication
  647|       |     * parameters are used by the algorithm.
  648|       |     */
  649|      0|    result = Curl_setstropt(&data->set.str[STRING_AWS_SIGV4],
  650|      0|                            va_arg(param, char *));
  651|       |    /*
  652|       |     * Basic been set by default it need to be unset here
  653|       |     */
  654|      0|    if(data->set.str[STRING_AWS_SIGV4])
  655|      0|      data->set.httpauth = CURLAUTH_AWS_SIGV4;
  656|      0|    break;
  657|       |
  658|     12|  case CURLOPT_MIMEPOST:
  659|       |    /*
  660|       |     * Set to make us do MIME/form POST
  661|       |     */
  662|     12|    result = Curl_mime_set_subparts(&data->set.mimepost,
  663|     12|                                    va_arg(param, curl_mime *), FALSE);
  664|     12|    if(!result) {
  665|     12|      data->set.method = HTTPREQ_POST_MIME;
  666|     12|      data->set.opt_no_body = FALSE; /* this is implied */
  667|     12|    }
  668|     12|    break;
  669|       |
  670|      0|  case CURLOPT_REFERER:
  671|       |    /*
  672|       |     * String to set in the HTTP Referer: field.
  673|       |     */
  674|      0|    if(data->state.referer_alloc) {
  675|      0|      Curl_safefree(data->state.referer);
  676|      0|      data->state.referer_alloc = FALSE;
  677|      0|    }
  678|      0|    result = Curl_setstropt(&data->set.str[STRING_SET_REFERER],
  679|      0|                            va_arg(param, char *));
  680|      0|    data->state.referer = data->set.str[STRING_SET_REFERER];
  681|      0|    break;
  682|       |
  683|      0|  case CURLOPT_USERAGENT:
  684|       |    /*
  685|       |     * String to use in the HTTP User-Agent field
  686|       |     */
  687|      0|    result = Curl_setstropt(&data->set.str[STRING_USERAGENT],
  688|      0|                            va_arg(param, char *));
  689|      0|    break;
  690|       |
  691|      6|  case CURLOPT_HTTPHEADER:
  692|       |    /*
  693|       |     * Set a list with HTTP headers to use (or replace internals with)
  694|       |     */
  695|      6|    data->set.headers = va_arg(param, struct curl_slist *);
  696|      6|    break;
  697|       |
  698|      0|#ifndef CURL_DISABLE_PROXY
  699|      0|  case CURLOPT_PROXYHEADER:
  700|       |    /*
  701|       |     * Set a list with proxy headers to use (or replace internals with)
  702|       |     *
  703|       |     * Since CURLOPT_HTTPHEADER was the only way to set HTTP headers for a
  704|       |     * long time we remain doing it this way until CURLOPT_PROXYHEADER is
  705|       |     * used. As soon as this option has been used, if set to anything but
  706|       |     * NULL, custom headers for proxies are only picked from this list.
  707|       |     *
  708|       |     * Set this option to NULL to restore the previous behavior.
  709|       |     */
  710|      0|    data->set.proxyheaders = va_arg(param, struct curl_slist *);
  711|      0|    break;
  712|      0|#endif
  713|      0|  case CURLOPT_HEADEROPT:
  714|       |    /*
  715|       |     * Set header option.
  716|       |     */
  717|      0|    arg = va_arg(param, long);
  718|      0|    data->set.sep_headers = (bool)((arg & CURLHEADER_SEPARATE)? TRUE: FALSE);
  719|      0|    break;
  720|       |
  721|      0|  case CURLOPT_HTTP200ALIASES:
  722|       |    /*
  723|       |     * Set a list of aliases for HTTP 200 in response header
  724|       |     */
  725|      0|    data->set.http200aliases = va_arg(param, struct curl_slist *);
  726|      0|    break;
  727|       |
  728|      0|#if !defined(CURL_DISABLE_COOKIES)
  729|      4|  case CURLOPT_COOKIE:
  730|       |    /*
  731|       |     * Cookie string to send to the remote server in the request.
  732|       |     */
  733|      4|    result = Curl_setstropt(&data->set.str[STRING_COOKIE],
  734|      4|                            va_arg(param, char *));
  735|      4|    break;
  736|       |
  737|      0|  case CURLOPT_COOKIEFILE:
  738|       |    /*
  739|       |     * Set cookie file to read and parse. Can be used multiple times.
  740|       |     */
  741|      0|    argptr = (char *)va_arg(param, void *);
  742|      0|    if(argptr) {
  743|      0|      struct curl_slist *cl;
  744|       |      /* general protection against mistakes and abuse */
  745|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  746|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  747|       |      /* append the cookie file name to the list of file names, and deal with
  748|       |         them later */
  749|      0|      cl = curl_slist_append(data->state.cookielist, argptr);
  750|      0|      if(!cl) {
  751|      0|        curl_slist_free_all(data->state.cookielist);
  752|      0|        data->state.cookielist = NULL;
  753|      0|        return CURLE_OUT_OF_MEMORY;
  754|      0|      }
  755|      0|      data->state.cookielist = cl; /* store the list for later use */
  756|      0|    }
  757|      0|    else {
  758|       |      /* clear the list of cookie files */
  759|      0|      curl_slist_free_all(data->state.cookielist);
  760|      0|      data->state.cookielist = NULL;
  761|       |
  762|      0|      if(!data->share || !data->share->cookies) {
  763|       |        /* throw away all existing cookies if this isn't a shared cookie
  764|       |           container */
  765|      0|        Curl_cookie_clearall(data->cookies);
  766|      0|        Curl_cookie_cleanup(data->cookies);
  767|      0|      }
  768|       |      /* disable the cookie engine */
  769|      0|      data->cookies = NULL;
  770|      0|    }
  771|      0|    break;
  772|       |
  773|    472|  case CURLOPT_COOKIEJAR:
  774|       |    /*
  775|       |     * Set cookie file name to dump all cookies to when we're done.
  776|       |     */
  777|    472|  {
  778|    472|    struct CookieInfo *newcookies;
  779|    472|    result = Curl_setstropt(&data->set.str[STRING_COOKIEJAR],
  780|    472|                            va_arg(param, char *));
  781|       |
  782|       |    /*
  783|       |     * Activate the cookie parser. This may or may not already
  784|       |     * have been made.
  785|       |     */
  786|    472|    newcookies = Curl_cookie_init(data, NULL, data->cookies,
  787|    472|                                  data->set.cookiesession);
  788|    472|    if(!newcookies)
  789|      0|      result = CURLE_OUT_OF_MEMORY;
  790|    472|    data->cookies = newcookies;
  791|    472|  }
  792|    472|  break;
  793|       |
  794|      0|  case CURLOPT_COOKIESESSION:
  795|       |    /*
  796|       |     * Set this option to TRUE to start a new "cookie session". It will
  797|       |     * prevent the forthcoming read-cookies-from-file actions to accept
  798|       |     * cookies that are marked as being session cookies, as they belong to a
  799|       |     * previous session.
  800|       |     *
  801|       |     * In the original Netscape cookie spec, "session cookies" are cookies
  802|       |     * with no expire date set. RFC2109 describes the same action if no
  803|       |     * 'Max-Age' is set and RFC2965 includes the RFC2109 description and adds
  804|       |     * a 'Discard' action that can enforce the discard even for cookies that
  805|       |     * have a Max-Age.
  806|       |     *
  807|       |     * We run mostly with the original cookie spec, as hardly anyone implements
  808|       |     * anything else.
  809|       |     */
  810|      0|    data->set.cookiesession = (0 != va_arg(param, long)) ? TRUE : FALSE;
  811|      0|    break;
  812|       |
  813|      0|  case CURLOPT_COOKIELIST:
  814|      0|    argptr = va_arg(param, char *);
  815|       |
  816|      0|    if(!argptr)
  817|      0|      break;
  818|       |
  819|      0|    if(strcasecompare(argptr, "ALL")) {
  820|       |      /* clear all cookies */
  821|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  822|      0|      Curl_cookie_clearall(data->cookies);
  823|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  824|      0|    }
  825|      0|    else if(strcasecompare(argptr, "SESS")) {
  826|       |      /* clear session cookies */
  827|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  828|      0|      Curl_cookie_clearsess(data->cookies);
  829|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  830|      0|    }
  831|      0|    else if(strcasecompare(argptr, "FLUSH")) {
  832|       |      /* flush cookies to file, takes care of the locking */
  833|      0|      Curl_flush_cookies(data, FALSE);
  834|      0|    }
  835|      0|    else if(strcasecompare(argptr, "RELOAD")) {
  836|       |      /* reload cookies from file */
  837|      0|      Curl_cookie_loadfiles(data);
  838|      0|      break;
  839|      0|    }
  840|      0|    else {
  841|      0|      if(!data->cookies)
  842|       |        /* if cookie engine was not running, activate it */
  843|      0|        data->cookies = Curl_cookie_init(data, NULL, NULL, TRUE);
  844|       |
  845|       |      /* general protection against mistakes and abuse */
  846|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  847|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  848|      0|      argptr = strdup(argptr);
  849|      0|      if(!argptr || !data->cookies) {
  850|      0|        result = CURLE_OUT_OF_MEMORY;
  851|      0|        free(argptr);
  852|      0|      }
  853|      0|      else {
  854|      0|        Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  855|       |
  856|      0|        if(checkprefix("Set-Cookie:", argptr))
  857|       |          /* HTTP Header format line */
  858|      0|          Curl_cookie_add(data, data->cookies, TRUE, FALSE, argptr + 11, NULL,
  859|      0|                          NULL, TRUE);
  860|       |
  861|      0|        else
  862|       |          /* Netscape format line */
  863|      0|          Curl_cookie_add(data, data->cookies, FALSE, FALSE, argptr, NULL,
  864|      0|                          NULL, TRUE);
  865|       |
  866|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  867|      0|        free(argptr);
  868|      0|      }
  869|      0|    }
  870|       |
  871|      0|    break;
  872|      0|#endif /* !CURL_DISABLE_COOKIES */
  873|       |
  874|      0|  case CURLOPT_HTTPGET:
  875|       |    /*
  876|       |     * Set to force us do HTTP GET
  877|       |     */
  878|      0|    if(va_arg(param, long)) {
  879|      0|      data->set.method = HTTPREQ_GET;
  880|      0|      data->set.upload = FALSE; /* switch off upload */
  881|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  882|      0|    }
  883|      0|    break;
  884|       |
  885|      0|  case CURLOPT_HTTP_VERSION:
  886|       |    /*
  887|       |     * This sets a requested HTTP version to be used. The value is one of
  888|       |     * the listed enums in curl/curl.h.
  889|       |     */
  890|      0|    arg = va_arg(param, long);
  891|      0|    if(arg < CURL_HTTP_VERSION_NONE)
  892|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  893|       |#ifdef ENABLE_QUIC
  894|       |    if(arg == CURL_HTTP_VERSION_3)
  895|       |      ;
  896|       |    else
  897|       |#endif
  898|       |#if !defined(USE_NGHTTP2) && !defined(USE_HYPER)
  899|       |    if(arg >= CURL_HTTP_VERSION_2)
  900|       |      return CURLE_UNSUPPORTED_PROTOCOL;
  901|       |#else
  902|      0|    if(arg >= CURL_HTTP_VERSION_LAST)
  903|      0|      return CURLE_UNSUPPORTED_PROTOCOL;
  904|      0|    if(arg == CURL_HTTP_VERSION_NONE)
  905|      0|      arg = CURL_HTTP_VERSION_2TLS;
  906|      0|#endif
  907|      0|    data->set.httpwant = (unsigned char)arg;
  908|      0|    break;
  909|       |
  910|      0|  case CURLOPT_EXPECT_100_TIMEOUT_MS:
  911|       |    /*
  912|       |     * Time to wait for a response to a HTTP request containing an
  913|       |     * Expect: 100-continue header before sending the data anyway.
  914|       |     */
  915|      0|    arg = va_arg(param, long);
  916|      0|    if(arg < 0)
  917|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  918|      0|    data->set.expect_100_timeout = arg;
  919|      0|    break;
  920|       |
  921|      0|  case CURLOPT_HTTP09_ALLOWED:
  922|      0|    arg = va_arg(param, unsigned long);
  923|      0|    if(arg > 1L)
  924|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  925|       |#ifdef USE_HYPER
  926|       |    /* Hyper does not support HTTP/0.9 */
  927|       |    if(arg)
  928|       |      return CURLE_BAD_FUNCTION_ARGUMENT;
  929|       |#else
  930|      0|    data->set.http09_allowed = arg ? TRUE : FALSE;
  931|      0|#endif
  932|      0|    break;
  933|      0|#endif   /* CURL_DISABLE_HTTP */
  934|       |
  935|      0|  case CURLOPT_HTTPAUTH:
  936|       |    /*
  937|       |     * Set HTTP Authentication type BITMASK.
  938|       |     */
  939|      0|  {
  940|      0|    int bitcheck;
  941|      0|    bool authbits;
  942|      0|    unsigned long auth = va_arg(param, unsigned long);
  943|       |
  944|      0|    if(auth == CURLAUTH_NONE) {
  945|      0|      data->set.httpauth = auth;
  946|      0|      break;
  947|      0|    }
  948|       |
  949|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
  950|       |       rest we need to handle it as normal DIGEST */
  951|      0|    data->state.authhost.iestyle =
  952|      0|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
  953|       |
  954|      0|    if(auth & CURLAUTH_DIGEST_IE) {
  955|      0|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
  956|      0|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
  957|      0|    }
  958|       |
  959|       |    /* switch off bits we can't support */
  960|       |#ifndef USE_NTLM
  961|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
  962|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  963|       |#elif !defined(NTLM_WB_ENABLED)
  964|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  965|       |#endif
  966|      0|#ifndef USE_SPNEGO
  967|      0|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
  968|       |                                    GSS-API or SSPI */
  969|      0|#endif
  970|       |
  971|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
  972|      0|    bitcheck = 0;
  973|      0|    authbits = FALSE;
  974|      0|    while(bitcheck < 31) {
  975|      0|      if(auth & (1UL << bitcheck++)) {
  976|      0|        authbits = TRUE;
  977|      0|        break;
  978|      0|      }
  979|      0|    }
  980|      0|    if(!authbits)
  981|      0|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
  982|       |
  983|      0|    data->set.httpauth = auth;
  984|      0|  }
  985|      0|  break;
  986|       |
  987|      2|  case CURLOPT_CUSTOMREQUEST:
  988|       |    /*
  989|       |     * Set a custom string to use as request
  990|       |     */
  991|      2|    result = Curl_setstropt(&data->set.str[STRING_CUSTOMREQUEST],
  992|      2|                            va_arg(param, char *));
  993|       |
  994|       |    /* we don't set
  995|       |       data->set.method = HTTPREQ_CUSTOM;
  996|       |       here, we continue as if we were using the already set type
  997|       |       and this just changes the actual request keyword */
  998|      2|    break;
  999|       |
 1000|      0|#ifndef CURL_DISABLE_PROXY
 1001|      0|  case CURLOPT_HTTPPROXYTUNNEL:
 1002|       |    /*
 1003|       |     * Tunnel operations through the proxy instead of normal proxy use
 1004|       |     */
 1005|      0|    data->set.tunnel_thru_httpproxy = (0 != va_arg(param, long)) ?
 1006|      0|      TRUE : FALSE;
 1007|      0|    break;
 1008|       |
 1009|      0|  case CURLOPT_PROXYPORT:
 1010|       |    /*
 1011|       |     * Explicitly set HTTP proxy port number.
 1012|       |     */
 1013|      0|    arg = va_arg(param, long);
 1014|      0|    if((arg < 0) || (arg > 65535))
 1015|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1016|      0|    data->set.proxyport = arg;
 1017|      0|    break;
 1018|       |
 1019|      0|  case CURLOPT_PROXYAUTH:
 1020|       |    /*
 1021|       |     * Set HTTP Authentication type BITMASK.
 1022|       |     */
 1023|      0|  {
 1024|      0|    int bitcheck;
 1025|      0|    bool authbits;
 1026|      0|    unsigned long auth = va_arg(param, unsigned long);
 1027|       |
 1028|      0|    if(auth == CURLAUTH_NONE) {
 1029|      0|      data->set.proxyauth = auth;
 1030|      0|      break;
 1031|      0|    }
 1032|       |
 1033|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
 1034|       |       rest we need to handle it as normal DIGEST */
 1035|      0|    data->state.authproxy.iestyle =
 1036|      0|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
 1037|       |
 1038|      0|    if(auth & CURLAUTH_DIGEST_IE) {
 1039|      0|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
 1040|      0|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
 1041|      0|    }
 1042|       |    /* switch off bits we can't support */
 1043|       |#ifndef USE_NTLM
 1044|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
 1045|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1046|       |#elif !defined(NTLM_WB_ENABLED)
 1047|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1048|       |#endif
 1049|      0|#ifndef USE_SPNEGO
 1050|      0|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
 1051|       |                                    GSS-API or SSPI */
 1052|      0|#endif
 1053|       |
 1054|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
 1055|      0|    bitcheck = 0;
 1056|      0|    authbits = FALSE;
 1057|      0|    while(bitcheck < 31) {
 1058|      0|      if(auth & (1UL << bitcheck++)) {
 1059|      0|        authbits = TRUE;
 1060|      0|        break;
 1061|      0|      }
 1062|      0|    }
 1063|      0|    if(!authbits)
 1064|      0|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
 1065|       |
 1066|      0|    data->set.proxyauth = auth;
 1067|      0|  }
 1068|      0|  break;
 1069|       |
 1070|      0|  case CURLOPT_PROXY:
 1071|       |    /*
 1072|       |     * Set proxy server:port to use as proxy.
 1073|       |     *
 1074|       |     * If the proxy is set to "" (and CURLOPT_SOCKS_PROXY is set to "" or NULL)
 1075|       |     * we explicitly say that we don't want to use a proxy
 1076|       |     * (even though there might be environment variables saying so).
 1077|       |     *
 1078|       |     * Setting it to NULL, means no proxy but allows the environment variables
 1079|       |     * to decide for us (if CURLOPT_SOCKS_PROXY setting it to NULL).
 1080|       |     */
 1081|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY],
 1082|      0|                            va_arg(param, char *));
 1083|      0|    break;
 1084|       |
 1085|      0|  case CURLOPT_PRE_PROXY:
 1086|       |    /*
 1087|       |     * Set proxy server:port to use as SOCKS proxy.
 1088|       |     *
 1089|       |     * If the proxy is set to "" or NULL we explicitly say that we don't want
 1090|       |     * to use the socks proxy.
 1091|       |     */
 1092|      0|    result = Curl_setstropt(&data->set.str[STRING_PRE_PROXY],
 1093|      0|                            va_arg(param, char *));
 1094|      0|    break;
 1095|       |
 1096|      0|  case CURLOPT_PROXYTYPE:
 1097|       |    /*
 1098|       |     * Set proxy type. HTTP/HTTP_1_0/SOCKS4/SOCKS4a/SOCKS5/SOCKS5_HOSTNAME
 1099|       |     */
 1100|      0|    arg = va_arg(param, long);
 1101|      0|    if((arg < CURLPROXY_HTTP) || (arg > CURLPROXY_SOCKS5_HOSTNAME))
 1102|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1103|      0|    data->set.proxytype = (curl_proxytype)arg;
 1104|      0|    break;
 1105|       |
 1106|      0|  case CURLOPT_PROXY_TRANSFER_MODE:
 1107|       |    /*
 1108|       |     * set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy
 1109|       |     */
 1110|      0|    switch(va_arg(param, long)) {
 1111|      0|    case 0:
 1112|      0|      data->set.proxy_transfer_mode = FALSE;
 1113|      0|      break;
 1114|      0|    case 1:
 1115|      0|      data->set.proxy_transfer_mode = TRUE;
 1116|      0|      break;
 1117|      0|    default:
 1118|       |      /* reserve other values for future use */
 1119|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1120|      0|      break;
 1121|      0|    }
 1122|      0|    break;
 1123|      0|#endif   /* CURL_DISABLE_PROXY */
 1124|       |
 1125|      0|  case CURLOPT_SOCKS5_AUTH:
 1126|      0|    data->set.socks5auth = va_arg(param, unsigned long);
 1127|      0|    if(data->set.socks5auth & ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))
 1128|      0|      result = CURLE_NOT_BUILT_IN;
 1129|      0|    break;
 1130|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
 1131|       |  case CURLOPT_SOCKS5_GSSAPI_NEC:
 1132|       |    /*
 1133|       |     * Set flag for NEC SOCK5 support
 1134|       |     */
 1135|       |    data->set.socks5_gssapi_nec = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1136|       |    break;
 1137|       |#endif
 1138|      0|#ifndef CURL_DISABLE_PROXY
 1139|      0|  case CURLOPT_SOCKS5_GSSAPI_SERVICE:
 1140|      0|  case CURLOPT_PROXY_SERVICE_NAME:
 1141|       |    /*
 1142|       |     * Set proxy authentication service name for Kerberos 5 and SPNEGO
 1143|       |     */
 1144|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY_SERVICE_NAME],
 1145|      0|                            va_arg(param, char *));
 1146|      0|    break;
 1147|      0|#endif
 1148|      0|  case CURLOPT_SERVICE_NAME:
 1149|       |    /*
 1150|       |     * Set authentication service name for DIGEST-MD5, Kerberos 5 and SPNEGO
 1151|       |     */
 1152|      0|    result = Curl_setstropt(&data->set.str[STRING_SERVICE_NAME],
 1153|      0|                            va_arg(param, char *));
 1154|      0|    break;
 1155|       |
 1156|      0|  case CURLOPT_HEADERDATA:
 1157|       |    /*
 1158|       |     * Custom pointer to pass the header write callback function
 1159|       |     */
 1160|      0|    data->set.writeheader = (void *)va_arg(param, void *);
 1161|      0|    break;
 1162|      0|  case CURLOPT_ERRORBUFFER:
 1163|       |    /*
 1164|       |     * Error buffer provided by the caller to get the human readable
 1165|       |     * error string in.
 1166|       |     */
 1167|      0|    data->set.errorbuffer = va_arg(param, char *);
 1168|      0|    break;
 1169|    472|  case CURLOPT_WRITEDATA:
 1170|       |    /*
 1171|       |     * FILE pointer to write to. Or possibly
 1172|       |     * used as argument to the write callback.
 1173|       |     */
 1174|    472|    data->set.out = va_arg(param, void *);
 1175|    472|    break;
 1176|       |
 1177|      0|  case CURLOPT_DIRLISTONLY:
 1178|       |    /*
 1179|       |     * An option that changes the command to one that asks for a list only, no
 1180|       |     * file info details. Used for FTP, POP3 and SFTP.
 1181|       |     */
 1182|      0|    data->set.list_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1183|      0|    break;
 1184|       |
 1185|      0|  case CURLOPT_APPEND:
 1186|       |    /*
 1187|       |     * We want to upload and append to an existing file. Used for FTP and
 1188|       |     * SFTP.
 1189|       |     */
 1190|      0|    data->set.remote_append = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1191|      0|    break;
 1192|       |
 1193|      0|#ifndef CURL_DISABLE_FTP
 1194|      0|  case CURLOPT_FTP_FILEMETHOD:
 1195|       |    /*
 1196|       |     * How do access files over FTP.
 1197|       |     */
 1198|      0|    arg = va_arg(param, long);
 1199|      0|    if((arg < CURLFTPMETHOD_DEFAULT) || (arg >= CURLFTPMETHOD_LAST))
 1200|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1201|      0|    data->set.ftp_filemethod = (curl_ftpfile)arg;
 1202|      0|    break;
 1203|      0|  case CURLOPT_FTPPORT:
 1204|       |    /*
 1205|       |     * Use FTP PORT, this also specifies which IP address to use
 1206|       |     */
 1207|      0|    result = Curl_setstropt(&data->set.str[STRING_FTPPORT],
 1208|      0|                            va_arg(param, char *));
 1209|      0|    data->set.ftp_use_port = (data->set.str[STRING_FTPPORT]) ? TRUE : FALSE;
 1210|      0|    break;
 1211|       |
 1212|      0|  case CURLOPT_FTP_USE_EPRT:
 1213|      0|    data->set.ftp_use_eprt = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1214|      0|    break;
 1215|       |
 1216|      0|  case CURLOPT_FTP_USE_EPSV:
 1217|      0|    data->set.ftp_use_epsv = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1218|      0|    break;
 1219|       |
 1220|      0|  case CURLOPT_FTP_USE_PRET:
 1221|      0|    data->set.ftp_use_pret = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1222|      0|    break;
 1223|       |
 1224|      0|  case CURLOPT_FTP_SSL_CCC:
 1225|      0|    arg = va_arg(param, long);
 1226|      0|    if((arg < CURLFTPSSL_CCC_NONE) || (arg >= CURLFTPSSL_CCC_LAST))
 1227|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1228|      0|    data->set.ftp_ccc = (curl_ftpccc)arg;
 1229|      0|    break;
 1230|       |
 1231|      0|  case CURLOPT_FTP_SKIP_PASV_IP:
 1232|       |    /*
 1233|       |     * Enable or disable FTP_SKIP_PASV_IP, which will disable/enable the
 1234|       |     * bypass of the IP address in PASV responses.
 1235|       |     */
 1236|      0|    data->set.ftp_skip_ip = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1237|      0|    break;
 1238|       |
 1239|      0|  case CURLOPT_FTP_ACCOUNT:
 1240|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ACCOUNT],
 1241|      0|                            va_arg(param, char *));
 1242|      0|    break;
 1243|       |
 1244|      0|  case CURLOPT_FTP_ALTERNATIVE_TO_USER:
 1245|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ALTERNATIVE_TO_USER],
 1246|      0|                            va_arg(param, char *));
 1247|      0|    break;
 1248|       |
 1249|      0|  case CURLOPT_FTPSSLAUTH:
 1250|       |    /*
 1251|       |     * Set a specific auth for FTP-SSL transfers.
 1252|       |     */
 1253|      0|    arg = va_arg(param, long);
 1254|      0|    if((arg < CURLFTPAUTH_DEFAULT) || (arg >= CURLFTPAUTH_LAST))
 1255|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1256|      0|    data->set.ftpsslauth = (curl_ftpauth)arg;
 1257|      0|    break;
 1258|      0|  case CURLOPT_KRBLEVEL:
 1259|       |    /*
 1260|       |     * A string that defines the kerberos security level.
 1261|       |     */
 1262|      0|    result = Curl_setstropt(&data->set.str[STRING_KRB_LEVEL],
 1263|      0|                            va_arg(param, char *));
 1264|      0|    data->set.krb = (data->set.str[STRING_KRB_LEVEL]) ? TRUE : FALSE;
 1265|      0|    break;
 1266|      0|#endif
 1267|      0|  case CURLOPT_FTP_CREATE_MISSING_DIRS:
 1268|       |    /*
 1269|       |     * An FTP/SFTP option that modifies an upload to create missing
 1270|       |     * directories on the server.
 1271|       |     */
 1272|      0|    arg = va_arg(param, long);
 1273|       |    /* reserve other values for future use */
 1274|      0|    if((arg < CURLFTP_CREATE_DIR_NONE) ||
 1275|      0|       (arg > CURLFTP_CREATE_DIR_RETRY))
 1276|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1277|      0|    else
 1278|      0|      data->set.ftp_create_missing_dirs = (int)arg;
 1279|      0|    break;
 1280|    472|  case CURLOPT_READDATA:
 1281|       |    /*
 1282|       |     * FILE pointer to read the file to be uploaded from. Or possibly
 1283|       |     * used as argument to the read callback.
 1284|       |     */
 1285|    472|    data->set.in_set = va_arg(param, void *);
 1286|    472|    break;
 1287|      0|  case CURLOPT_INFILESIZE:
 1288|       |    /*
 1289|       |     * If known, this should inform curl about the file size of the
 1290|       |     * to-be-uploaded file.
 1291|       |     */
 1292|      0|    arg = va_arg(param, long);
 1293|      0|    if(arg < -1)
 1294|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1295|      0|    data->set.filesize = arg;
 1296|      0|    break;
 1297|     12|  case CURLOPT_INFILESIZE_LARGE:
 1298|       |    /*
 1299|       |     * If known, this should inform curl about the file size of the
 1300|       |     * to-be-uploaded file.
 1301|       |     */
 1302|     12|    bigsize = va_arg(param, curl_off_t);
 1303|     12|    if(bigsize < -1)
 1304|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1305|     12|    data->set.filesize = bigsize;
 1306|     12|    break;
 1307|      0|  case CURLOPT_LOW_SPEED_LIMIT:
 1308|       |    /*
 1309|       |     * The low speed limit that if transfers are below this for
 1310|       |     * CURLOPT_LOW_SPEED_TIME, the transfer is aborted.
 1311|       |     */
 1312|      0|    arg = va_arg(param, long);
 1313|      0|    if(arg < 0)
 1314|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1315|      0|    data->set.low_speed_limit = arg;
 1316|      0|    break;
 1317|      0|  case CURLOPT_MAX_SEND_SPEED_LARGE:
 1318|       |    /*
 1319|       |     * When transfer uploads are faster then CURLOPT_MAX_SEND_SPEED_LARGE
 1320|       |     * bytes per second the transfer is throttled..
 1321|       |     */
 1322|      0|    bigsize = va_arg(param, curl_off_t);
 1323|      0|    if(bigsize < 0)
 1324|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1325|      0|    data->set.max_send_speed = bigsize;
 1326|      0|    break;
 1327|      0|  case CURLOPT_MAX_RECV_SPEED_LARGE:
 1328|       |    /*
 1329|       |     * When receiving data faster than CURLOPT_MAX_RECV_SPEED_LARGE bytes per
 1330|       |     * second the transfer is throttled..
 1331|       |     */
 1332|      0|    bigsize = va_arg(param, curl_off_t);
 1333|      0|    if(bigsize < 0)
 1334|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1335|      0|    data->set.max_recv_speed = bigsize;
 1336|      0|    break;
 1337|      0|  case CURLOPT_LOW_SPEED_TIME:
 1338|       |    /*
 1339|       |     * The low speed time that if transfers are below the set
 1340|       |     * CURLOPT_LOW_SPEED_LIMIT during this time, the transfer is aborted.
 1341|       |     */
 1342|      0|    arg = va_arg(param, long);
 1343|      0|    if(arg < 0)
 1344|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1345|      0|    data->set.low_speed_time = arg;
 1346|      0|    break;
 1347|      0|  case CURLOPT_CURLU:
 1348|       |    /*
 1349|       |     * pass CURLU to set URL
 1350|       |     */
 1351|      0|    data->set.uh = va_arg(param, CURLU *);
 1352|      0|    break;
 1353|    430|  case CURLOPT_URL:
 1354|       |    /*
 1355|       |     * The URL to fetch.
 1356|       |     */
 1357|    430|    if(data->state.url_alloc) {
 1358|       |      /* the already set URL is allocated, free it first! */
 1359|      0|      Curl_safefree(data->state.url);
 1360|      0|      data->state.url_alloc = FALSE;
 1361|      0|    }
 1362|    430|    result = Curl_setstropt(&data->set.str[STRING_SET_URL],
 1363|    430|                            va_arg(param, char *));
 1364|    430|    data->state.url = data->set.str[STRING_SET_URL];
 1365|    430|    break;
 1366|      0|  case CURLOPT_PORT:
 1367|       |    /*
 1368|       |     * The port number to use when getting the URL
 1369|       |     */
 1370|      0|    arg = va_arg(param, long);
 1371|      0|    if((arg < 0) || (arg > 65535))
 1372|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1373|      0|    data->set.use_port = arg;
 1374|      0|    break;
 1375|      0|  case CURLOPT_TIMEOUT:
 1376|       |    /*
 1377|       |     * The maximum time you allow curl to use for a single transfer
 1378|       |     * operation.
 1379|       |     */
 1380|      0|    arg = va_arg(param, long);
 1381|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1382|      0|      data->set.timeout = arg * 1000;
 1383|      0|    else
 1384|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1385|      0|    break;
 1386|       |
 1387|    472|  case CURLOPT_TIMEOUT_MS:
 1388|    472|    arg = va_arg(param, long);
 1389|    472|    if(arg < 0)
 1390|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1391|    472|    data->set.timeout = arg;
 1392|    472|    break;
 1393|       |
 1394|      0|  case CURLOPT_CONNECTTIMEOUT:
 1395|       |    /*
 1396|       |     * The maximum time you allow curl to use to connect.
 1397|       |     */
 1398|      0|    arg = va_arg(param, long);
 1399|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1400|      0|      data->set.connecttimeout = arg * 1000;
 1401|      0|    else
 1402|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1403|      0|    break;
 1404|       |
 1405|      0|  case CURLOPT_CONNECTTIMEOUT_MS:
 1406|      0|    arg = va_arg(param, long);
 1407|      0|    if(arg < 0)
 1408|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|      0|    data->set.connecttimeout = arg;
 1410|      0|    break;
 1411|       |
 1412|      0|  case CURLOPT_ACCEPTTIMEOUT_MS:
 1413|       |    /*
 1414|       |     * The maximum time you allow curl to wait for server connect
 1415|       |     */
 1416|      0|    arg = va_arg(param, long);
 1417|      0|    if(arg < 0)
 1418|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1419|      0|    data->set.accepttimeout = arg;
 1420|      0|    break;
 1421|       |
 1422|      0|  case CURLOPT_USERPWD:
 1423|       |    /*
 1424|       |     * user:password to use in the operation
 1425|       |     */
 1426|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1427|      0|                               &data->set.str[STRING_USERNAME],
 1428|      0|                               &data->set.str[STRING_PASSWORD]);
 1429|      0|    break;
 1430|       |
 1431|      9|  case CURLOPT_USERNAME:
 1432|       |    /*
 1433|       |     * authentication user name to use in the operation
 1434|       |     */
 1435|      9|    result = Curl_setstropt(&data->set.str[STRING_USERNAME],
 1436|      9|                            va_arg(param, char *));
 1437|      9|    break;
 1438|      7|  case CURLOPT_PASSWORD:
 1439|       |    /*
 1440|       |     * authentication password to use in the operation
 1441|       |     */
 1442|      7|    result = Curl_setstropt(&data->set.str[STRING_PASSWORD],
 1443|      7|                            va_arg(param, char *));
 1444|      7|    break;
 1445|       |
 1446|      0|  case CURLOPT_LOGIN_OPTIONS:
 1447|       |    /*
 1448|       |     * authentication options to use in the operation
 1449|       |     */
 1450|      0|    result = Curl_setstropt(&data->set.str[STRING_OPTIONS],
 1451|      0|                            va_arg(param, char *));
 1452|      0|    break;
 1453|       |
 1454|      0|  case CURLOPT_XOAUTH2_BEARER:
 1455|       |    /*
 1456|       |     * OAuth 2.0 bearer token to use in the operation
 1457|       |     */
 1458|      0|    result = Curl_setstropt(&data->set.str[STRING_BEARER],
 1459|      0|                            va_arg(param, char *));
 1460|      0|    break;
 1461|       |
 1462|      0|  case CURLOPT_POSTQUOTE:
 1463|       |    /*
 1464|       |     * List of RAW FTP commands to use after a transfer
 1465|       |     */
 1466|      0|    data->set.postquote = va_arg(param, struct curl_slist *);
 1467|      0|    break;
 1468|      0|  case CURLOPT_PREQUOTE:
 1469|       |    /*
 1470|       |     * List of RAW FTP commands to use prior to RETR (Wesley Laxton)
 1471|       |     */
 1472|      0|    data->set.prequote = va_arg(param, struct curl_slist *);
 1473|      0|    break;
 1474|      0|  case CURLOPT_QUOTE:
 1475|       |    /*
 1476|       |     * List of RAW FTP commands to use before a transfer
 1477|       |     */
 1478|      0|    data->set.quote = va_arg(param, struct curl_slist *);
 1479|      0|    break;
 1480|      0|  case CURLOPT_RESOLVE:
 1481|       |    /*
 1482|       |     * List of HOST:PORT:[addresses] strings to populate the DNS cache with
 1483|       |     * Entries added this way will remain in the cache until explicitly
 1484|       |     * removed or the handle is cleaned up.
 1485|       |     *
 1486|       |     * Prefix the HOST with plus sign (+) to have the entry expire just like
 1487|       |     * automatically added entries.
 1488|       |     *
 1489|       |     * Prefix the HOST with dash (-) to _remove_ the entry from the cache.
 1490|       |     *
 1491|       |     * This API can remove any entry from the DNS cache, but only entries
 1492|       |     * that aren't actually in use right now will be pruned immediately.
 1493|       |     */
 1494|      0|    data->set.resolve = va_arg(param, struct curl_slist *);
 1495|      0|    data->state.resolve = data->set.resolve;
 1496|      0|    break;
 1497|      0|  case CURLOPT_PROGRESSFUNCTION:
 1498|       |    /*
 1499|       |     * Progress callback function
 1500|       |     */
 1501|      0|    data->set.fprogress = va_arg(param, curl_progress_callback);
 1502|      0|    if(data->set.fprogress)
 1503|      0|      data->progress.callback = TRUE; /* no longer internal */
 1504|      0|    else
 1505|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1506|      0|    break;
 1507|       |
 1508|      0|  case CURLOPT_XFERINFOFUNCTION:
 1509|       |    /*
 1510|       |     * Transfer info callback function
 1511|       |     */
 1512|      0|    data->set.fxferinfo = va_arg(param, curl_xferinfo_callback);
 1513|      0|    if(data->set.fxferinfo)
 1514|      0|      data->progress.callback = TRUE; /* no longer internal */
 1515|      0|    else
 1516|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1517|       |
 1518|      0|    break;
 1519|       |
 1520|      0|  case CURLOPT_PROGRESSDATA:
 1521|       |    /*
 1522|       |     * Custom client data to pass to the progress callback
 1523|       |     */
 1524|      0|    data->set.progress_client = va_arg(param, void *);
 1525|      0|    break;
 1526|       |
 1527|      0|#ifndef CURL_DISABLE_PROXY
 1528|      0|  case CURLOPT_PROXYUSERPWD:
 1529|       |    /*
 1530|       |     * user:password needed to use the proxy
 1531|       |     */
 1532|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1533|      0|                               &data->set.str[STRING_PROXYUSERNAME],
 1534|      0|                               &data->set.str[STRING_PROXYPASSWORD]);
 1535|      0|    break;
 1536|      0|  case CURLOPT_PROXYUSERNAME:
 1537|       |    /*
 1538|       |     * authentication user name to use in the operation
 1539|       |     */
 1540|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYUSERNAME],
 1541|      0|                            va_arg(param, char *));
 1542|      0|    break;
 1543|      0|  case CURLOPT_PROXYPASSWORD:
 1544|       |    /*
 1545|       |     * authentication password to use in the operation
 1546|       |     */
 1547|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYPASSWORD],
 1548|      0|                            va_arg(param, char *));
 1549|      0|    break;
 1550|      0|  case CURLOPT_NOPROXY:
 1551|       |    /*
 1552|       |     * proxy exception list
 1553|       |     */
 1554|      0|    result = Curl_setstropt(&data->set.str[STRING_NOPROXY],
 1555|      0|                            va_arg(param, char *));
 1556|      0|    break;
 1557|      0|#endif
 1558|       |
 1559|      3|  case CURLOPT_RANGE:
 1560|       |    /*
 1561|       |     * What range of the file you want to transfer
 1562|       |     */
 1563|      3|    result = Curl_setstropt(&data->set.str[STRING_SET_RANGE],
 1564|      3|                            va_arg(param, char *));
 1565|      3|    break;
 1566|      0|  case CURLOPT_RESUME_FROM:
 1567|       |    /*
 1568|       |     * Resume transfer at the given file position
 1569|       |     */
 1570|      0|    arg = va_arg(param, long);
 1571|      0|    if(arg < -1)
 1572|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1573|      0|    data->set.set_resume_from = arg;
 1574|      0|    break;
 1575|      0|  case CURLOPT_RESUME_FROM_LARGE:
 1576|       |    /*
 1577|       |     * Resume transfer at the given file position
 1578|       |     */
 1579|      0|    bigsize = va_arg(param, curl_off_t);
 1580|      0|    if(bigsize < -1)
 1581|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1582|      0|    data->set.set_resume_from = bigsize;
 1583|      0|    break;
 1584|      0|  case CURLOPT_DEBUGFUNCTION:
 1585|       |    /*
 1586|       |     * stderr write callback.
 1587|       |     */
 1588|      0|    data->set.fdebug = va_arg(param, curl_debug_callback);
 1589|       |    /*
 1590|       |     * if the callback provided is NULL, it'll use the default callback
 1591|       |     */
 1592|      0|    break;
 1593|      0|  case CURLOPT_DEBUGDATA:
 1594|       |    /*
 1595|       |     * Set to a void * that should receive all error writes. This
 1596|       |     * defaults to CURLOPT_STDERR for normal operations.
 1597|       |     */
 1598|      0|    data->set.debugdata = va_arg(param, void *);
 1599|      0|    break;
 1600|      0|  case CURLOPT_STDERR:
 1601|       |    /*
 1602|       |     * Set to a FILE * that should receive all error writes. This
 1603|       |     * defaults to stderr for normal operations.
 1604|       |     */
 1605|      0|    data->set.err = va_arg(param, FILE *);
 1606|      0|    if(!data->set.err)
 1607|      0|      data->set.err = stderr;
 1608|      0|    break;
 1609|      0|  case CURLOPT_HEADERFUNCTION:
 1610|       |    /*
 1611|       |     * Set header write callback
 1612|       |     */
 1613|      0|    data->set.fwrite_header = va_arg(param, curl_write_callback);
 1614|      0|    break;
 1615|    472|  case CURLOPT_WRITEFUNCTION:
 1616|       |    /*
 1617|       |     * Set data write callback
 1618|       |     */
 1619|    472|    data->set.fwrite_func = va_arg(param, curl_write_callback);
 1620|    472|    if(!data->set.fwrite_func) {
 1621|      0|      data->set.is_fwrite_set = 0;
 1622|       |      /* When set to NULL, reset to our internal default function */
 1623|      0|      data->set.fwrite_func = (curl_write_callback)fwrite;
 1624|      0|    }
 1625|    472|    else
 1626|    472|      data->set.is_fwrite_set = 1;
 1627|    472|    break;
 1628|    472|  case CURLOPT_READFUNCTION:
 1629|       |    /*
 1630|       |     * Read data callback
 1631|       |     */
 1632|    472|    data->set.fread_func_set = va_arg(param, curl_read_callback);
 1633|    472|    if(!data->set.fread_func_set) {
 1634|      0|      data->set.is_fread_set = 0;
 1635|       |      /* When set to NULL, reset to our internal default function */
 1636|      0|      data->set.fread_func_set = (curl_read_callback)fread;
 1637|      0|    }
 1638|    472|    else
 1639|    472|      data->set.is_fread_set = 1;
 1640|    472|    break;
 1641|      0|  case CURLOPT_SEEKFUNCTION:
 1642|       |    /*
 1643|       |     * Seek callback. Might be NULL.
 1644|       |     */
 1645|      0|    data->set.seek_func = va_arg(param, curl_seek_callback);
 1646|      0|    break;
 1647|      0|  case CURLOPT_SEEKDATA:
 1648|       |    /*
 1649|       |     * Seek control callback. Might be NULL.
 1650|       |     */
 1651|      0|    data->set.seek_client = va_arg(param, void *);
 1652|      0|    break;
 1653|      0|  case CURLOPT_CONV_FROM_NETWORK_FUNCTION:
 1654|       |    /*
 1655|       |     * "Convert from network encoding" callback
 1656|       |     */
 1657|      0|    data->set.convfromnetwork = va_arg(param, curl_conv_callback);
 1658|      0|    break;
 1659|      0|  case CURLOPT_CONV_TO_NETWORK_FUNCTION:
 1660|       |    /*
 1661|       |     * "Convert to network encoding" callback
 1662|       |     */
 1663|      0|    data->set.convtonetwork = va_arg(param, curl_conv_callback);
 1664|      0|    break;
 1665|      0|  case CURLOPT_CONV_FROM_UTF8_FUNCTION:
 1666|       |    /*
 1667|       |     * "Convert from UTF-8 encoding" callback
 1668|       |     */
 1669|      0|    data->set.convfromutf8 = va_arg(param, curl_conv_callback);
 1670|      0|    break;
 1671|      0|  case CURLOPT_IOCTLFUNCTION:
 1672|       |    /*
 1673|       |     * I/O control callback. Might be NULL.
 1674|       |     */
 1675|      0|    data->set.ioctl_func = va_arg(param, curl_ioctl_callback);
 1676|      0|    break;
 1677|      0|  case CURLOPT_IOCTLDATA:
 1678|       |    /*
 1679|       |     * I/O control data pointer. Might be NULL.
 1680|       |     */
 1681|      0|    data->set.ioctl_client = va_arg(param, void *);
 1682|      0|    break;
 1683|      0|  case CURLOPT_SSLCERT:
 1684|       |    /*
 1685|       |     * String that holds file name of the SSL certificate to use
 1686|       |     */
 1687|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT],
 1688|      0|                            va_arg(param, char *));
 1689|      0|    break;
 1690|      0|  case CURLOPT_SSLCERT_BLOB:
 1691|       |    /*
 1692|       |     * Blob that holds file content of the SSL certificate to use
 1693|       |     */
 1694|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT],
 1695|      0|                             va_arg(param, struct curl_blob *));
 1696|      0|    break;
 1697|      0|#ifndef CURL_DISABLE_PROXY
 1698|      0|  case CURLOPT_PROXY_SSLCERT:
 1699|       |    /*
 1700|       |     * String that holds file name of the SSL certificate to use for proxy
 1701|       |     */
 1702|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_PROXY],
 1703|      0|                            va_arg(param, char *));
 1704|      0|    break;
 1705|      0|  case CURLOPT_PROXY_SSLCERT_BLOB:
 1706|       |    /*
 1707|       |     * Blob that holds file content of the SSL certificate to use for proxy
 1708|       |     */
 1709|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT_PROXY],
 1710|      0|                             va_arg(param, struct curl_blob *));
 1711|      0|    break;
 1712|      0|#endif
 1713|      0|  case CURLOPT_SSLCERTTYPE:
 1714|       |    /*
 1715|       |     * String that holds file type of the SSL certificate to use
 1716|       |     */
 1717|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE],
 1718|      0|                            va_arg(param, char *));
 1719|      0|    break;
 1720|      0|#ifndef CURL_DISABLE_PROXY
 1721|      0|  case CURLOPT_PROXY_SSLCERTTYPE:
 1722|       |    /*
 1723|       |     * String that holds file type of the SSL certificate to use for proxy
 1724|       |     */
 1725|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE_PROXY],
 1726|      0|                            va_arg(param, char *));
 1727|      0|    break;
 1728|      0|#endif
 1729|      0|  case CURLOPT_SSLKEY:
 1730|       |    /*
 1731|       |     * String that holds file name of the SSL key to use
 1732|       |     */
 1733|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY],
 1734|      0|                            va_arg(param, char *));
 1735|      0|    break;
 1736|      0|  case CURLOPT_SSLKEY_BLOB:
 1737|       |    /*
 1738|       |     * Blob that holds file content of the SSL key to use
 1739|       |     */
 1740|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY],
 1741|      0|                             va_arg(param, struct curl_blob *));
 1742|      0|    break;
 1743|      0|#ifndef CURL_DISABLE_PROXY
 1744|      0|  case CURLOPT_PROXY_SSLKEY:
 1745|       |    /*
 1746|       |     * String that holds file name of the SSL key to use for proxy
 1747|       |     */
 1748|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PROXY],
 1749|      0|                            va_arg(param, char *));
 1750|      0|    break;
 1751|      0|  case CURLOPT_PROXY_SSLKEY_BLOB:
 1752|       |    /*
 1753|       |     * Blob that holds file content of the SSL key to use for proxy
 1754|       |     */
 1755|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY_PROXY],
 1756|      0|                             va_arg(param, struct curl_blob *));
 1757|      0|    break;
 1758|      0|#endif
 1759|      0|  case CURLOPT_SSLKEYTYPE:
 1760|       |    /*
 1761|       |     * String that holds file type of the SSL key to use
 1762|       |     */
 1763|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE],
 1764|      0|                            va_arg(param, char *));
 1765|      0|    break;
 1766|      0|#ifndef CURL_DISABLE_PROXY
 1767|      0|  case CURLOPT_PROXY_SSLKEYTYPE:
 1768|       |    /*
 1769|       |     * String that holds file type of the SSL key to use for proxy
 1770|       |     */
 1771|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE_PROXY],
 1772|      0|                            va_arg(param, char *));
 1773|      0|    break;
 1774|      0|#endif
 1775|      0|  case CURLOPT_KEYPASSWD:
 1776|       |    /*
 1777|       |     * String that holds the SSL or SSH private key password.
 1778|       |     */
 1779|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD],
 1780|      0|                            va_arg(param, char *));
 1781|      0|    break;
 1782|      0|#ifndef CURL_DISABLE_PROXY
 1783|      0|  case CURLOPT_PROXY_KEYPASSWD:
 1784|       |    /*
 1785|       |     * String that holds the SSL private key password for proxy.
 1786|       |     */
 1787|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD_PROXY],
 1788|      0|                            va_arg(param, char *));
 1789|      0|    break;
 1790|      0|#endif
 1791|      0|  case CURLOPT_SSLENGINE:
 1792|       |    /*
 1793|       |     * String that holds the SSL crypto engine.
 1794|       |     */
 1795|      0|    argptr = va_arg(param, char *);
 1796|      0|    if(argptr && argptr[0]) {
 1797|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], argptr);
 1798|      0|      if(!result) {
 1799|      0|        result = Curl_ssl_set_engine(data, argptr);
 1800|      0|      }
 1801|      0|    }
 1802|      0|    break;
 1803|       |
 1804|      0|  case CURLOPT_SSLENGINE_DEFAULT:
 1805|       |    /*
 1806|       |     * flag to set engine as default.
 1807|       |     */
 1808|      0|    Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], NULL);
 1809|      0|    result = Curl_ssl_set_engine_default(data);
 1810|      0|    break;
 1811|      0|  case CURLOPT_CRLF:
 1812|       |    /*
 1813|       |     * Kludgy option to enable CRLF conversions. Subject for removal.
 1814|       |     */
 1815|      0|    data->set.crlf = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1816|      0|    break;
 1817|      0|#ifndef CURL_DISABLE_PROXY
 1818|      0|  case CURLOPT_HAPROXYPROTOCOL:
 1819|       |    /*
 1820|       |     * Set to send the HAProxy Proxy Protocol header
 1821|       |     */
 1822|      0|    data->set.haproxyprotocol = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1823|      0|    break;
 1824|      0|#endif
 1825|      0|  case CURLOPT_INTERFACE:
 1826|       |    /*
 1827|       |     * Set what interface or address/hostname to bind the socket to when
 1828|       |     * performing an operation and thus what from-IP your connection will use.
 1829|       |     */
 1830|      0|    result = Curl_setstropt(&data->set.str[STRING_DEVICE],
 1831|      0|                            va_arg(param, char *));
 1832|      0|    break;
 1833|      0|  case CURLOPT_LOCALPORT:
 1834|       |    /*
 1835|       |     * Set what local port to bind the socket to when performing an operation.
 1836|       |     */
 1837|      0|    arg = va_arg(param, long);
 1838|      0|    if((arg < 0) || (arg > 65535))
 1839|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1840|      0|    data->set.localport = curlx_sltous(arg);
 1841|      0|    break;
 1842|      0|  case CURLOPT_LOCALPORTRANGE:
 1843|       |    /*
 1844|       |     * Set number of local ports to try, starting with CURLOPT_LOCALPORT.
 1845|       |     */
 1846|      0|    arg = va_arg(param, long);
 1847|      0|    if((arg < 0) || (arg > 65535))
 1848|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1849|      0|    data->set.localportrange = curlx_sltosi(arg);
 1850|      0|    break;
 1851|      0|  case CURLOPT_GSSAPI_DELEGATION:
 1852|       |    /*
 1853|       |     * GSS-API credential delegation bitmask
 1854|       |     */
 1855|      0|    arg = va_arg(param, long);
 1856|      0|    if(arg < CURLGSSAPI_DELEGATION_NONE)
 1857|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1858|      0|    data->set.gssapi_delegation = arg;
 1859|      0|    break;
 1860|      0|  case CURLOPT_SSL_VERIFYPEER:
 1861|       |    /*
 1862|       |     * Enable peer SSL verifying.
 1863|       |     */
 1864|      0|    data->set.ssl.primary.verifypeer = (0 != va_arg(param, long)) ?
 1865|      0|      TRUE : FALSE;
 1866|       |
 1867|       |    /* Update the current connection ssl_config. */
 1868|      0|    if(data->conn) {
 1869|      0|      data->conn->ssl_config.verifypeer =
 1870|      0|        data->set.ssl.primary.verifypeer;
 1871|      0|    }
 1872|      0|    break;
 1873|      0|  case CURLOPT_DOH_SSL_VERIFYPEER:
 1874|       |    /*
 1875|       |     * Enable peer SSL verifying for DoH.
 1876|       |     */
 1877|      0|    data->set.doh_verifypeer = (0 != va_arg(param, long)) ?
 1878|      0|      TRUE : FALSE;
 1879|      0|    break;
 1880|      0|#ifndef CURL_DISABLE_PROXY
 1881|      0|  case CURLOPT_PROXY_SSL_VERIFYPEER:
 1882|       |    /*
 1883|       |     * Enable peer SSL verifying for proxy.
 1884|       |     */
 1885|      0|    data->set.proxy_ssl.primary.verifypeer =
 1886|      0|      (0 != va_arg(param, long))?TRUE:FALSE;
 1887|       |
 1888|       |    /* Update the current connection proxy_ssl_config. */
 1889|      0|    if(data->conn) {
 1890|      0|      data->conn->proxy_ssl_config.verifypeer =
 1891|      0|        data->set.proxy_ssl.primary.verifypeer;
 1892|      0|    }
 1893|      0|    break;
 1894|      0|#endif
 1895|      0|  case CURLOPT_SSL_VERIFYHOST:
 1896|       |    /*
 1897|       |     * Enable verification of the host name in the peer certificate
 1898|       |     */
 1899|      0|    arg = va_arg(param, long);
 1900|       |
 1901|       |    /* Obviously people are not reading documentation and too many thought
 1902|       |       this argument took a boolean when it wasn't and misused it.
 1903|       |       Treat 1 and 2 the same */
 1904|      0|    data->set.ssl.primary.verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1905|       |
 1906|       |    /* Update the current connection ssl_config. */
 1907|      0|    if(data->conn) {
 1908|      0|      data->conn->ssl_config.verifyhost =
 1909|      0|        data->set.ssl.primary.verifyhost;
 1910|      0|    }
 1911|      0|    break;
 1912|      0|  case CURLOPT_DOH_SSL_VERIFYHOST:
 1913|       |    /*
 1914|       |     * Enable verification of the host name in the peer certificate for DoH
 1915|       |     */
 1916|      0|    arg = va_arg(param, long);
 1917|       |
 1918|       |    /* Treat both 1 and 2 as TRUE */
 1919|      0|    data->set.doh_verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1920|      0|    break;
 1921|      0|#ifndef CURL_DISABLE_PROXY
 1922|      0|  case CURLOPT_PROXY_SSL_VERIFYHOST:
 1923|       |    /*
 1924|       |     * Enable verification of the host name in the peer certificate for proxy
 1925|       |     */
 1926|      0|    arg = va_arg(param, long);
 1927|       |
 1928|       |    /* Treat both 1 and 2 as TRUE */
 1929|      0|    data->set.proxy_ssl.primary.verifyhost = (bool)((arg & 3)?TRUE:FALSE);
 1930|       |
 1931|       |    /* Update the current connection proxy_ssl_config. */
 1932|      0|    if(data->conn) {
 1933|      0|      data->conn->proxy_ssl_config.verifyhost =
 1934|      0|        data->set.proxy_ssl.primary.verifyhost;
 1935|      0|    }
 1936|      0|    break;
 1937|      0|#endif
 1938|      0|  case CURLOPT_SSL_VERIFYSTATUS:
 1939|       |    /*
 1940|       |     * Enable certificate status verifying.
 1941|       |     */
 1942|      0|    if(!Curl_ssl_cert_status_request()) {
 1943|      0|      result = CURLE_NOT_BUILT_IN;
 1944|      0|      break;
 1945|      0|    }
 1946|       |
 1947|      0|    data->set.ssl.primary.verifystatus = (0 != va_arg(param, long)) ?
 1948|      0|      TRUE : FALSE;
 1949|       |
 1950|       |    /* Update the current connection ssl_config. */
 1951|      0|    if(data->conn) {
 1952|      0|      data->conn->ssl_config.verifystatus =
 1953|      0|        data->set.ssl.primary.verifystatus;
 1954|      0|    }
 1955|      0|    break;
 1956|      0|  case CURLOPT_DOH_SSL_VERIFYSTATUS:
 1957|       |    /*
 1958|       |     * Enable certificate status verifying for DoH.
 1959|       |     */
 1960|      0|    if(!Curl_ssl_cert_status_request()) {
 1961|      0|      result = CURLE_NOT_BUILT_IN;
 1962|      0|      break;
 1963|      0|    }
 1964|       |
 1965|      0|    data->set.doh_verifystatus = (0 != va_arg(param, long)) ?
 1966|      0|      TRUE : FALSE;
 1967|      0|    break;
 1968|      0|  case CURLOPT_SSL_CTX_FUNCTION:
 1969|       |    /*
 1970|       |     * Set a SSL_CTX callback
 1971|       |     */
 1972|      0|#ifdef USE_SSL
 1973|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1974|      0|      data->set.ssl.fsslctx = va_arg(param, curl_ssl_ctx_callback);
 1975|      0|    else
 1976|      0|#endif
 1977|      0|      result = CURLE_NOT_BUILT_IN;
 1978|      0|    break;
 1979|      0|  case CURLOPT_SSL_CTX_DATA:
 1980|       |    /*
 1981|       |     * Set a SSL_CTX callback parameter pointer
 1982|       |     */
 1983|      0|#ifdef USE_SSL
 1984|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1985|      0|      data->set.ssl.fsslctxp = va_arg(param, void *);
 1986|      0|    else
 1987|      0|#endif
 1988|      0|      result = CURLE_NOT_BUILT_IN;
 1989|      0|    break;
 1990|      0|  case CURLOPT_SSL_FALSESTART:
 1991|       |    /*
 1992|       |     * Enable TLS false start.
 1993|       |     */
 1994|      0|    if(!Curl_ssl_false_start()) {
 1995|      0|      result = CURLE_NOT_BUILT_IN;
 1996|      0|      break;
 1997|      0|    }
 1998|       |
 1999|      0|    data->set.ssl.falsestart = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2000|      0|    break;
 2001|      0|  case CURLOPT_CERTINFO:
 2002|      0|#ifdef USE_SSL
 2003|      0|    if(Curl_ssl->supports & SSLSUPP_CERTINFO)
 2004|      0|      data->set.ssl.certinfo = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2005|      0|    else
 2006|      0|#endif
 2007|      0|      result = CURLE_NOT_BUILT_IN;
 2008|      0|        break;
 2009|      0|  case CURLOPT_PINNEDPUBLICKEY:
 2010|       |    /*
 2011|       |     * Set pinned public key for SSL connection.
 2012|       |     * Specify file name of the public key in DER format.
 2013|       |     */
 2014|      0|#ifdef USE_SSL
 2015|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2016|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY],
 2017|      0|                              va_arg(param, char *));
 2018|      0|    else
 2019|      0|#endif
 2020|      0|      result = CURLE_NOT_BUILT_IN;
 2021|      0|    break;
 2022|      0|#ifndef CURL_DISABLE_PROXY
 2023|      0|  case CURLOPT_PROXY_PINNEDPUBLICKEY:
 2024|       |    /*
 2025|       |     * Set pinned public key for SSL connection.
 2026|       |     * Specify file name of the public key in DER format.
 2027|       |     */
 2028|      0|#ifdef USE_SSL
 2029|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2030|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY],
 2031|      0|                              va_arg(param, char *));
 2032|      0|    else
 2033|      0|#endif
 2034|      0|      result = CURLE_NOT_BUILT_IN;
 2035|      0|    break;
 2036|      0|#endif
 2037|      0|  case CURLOPT_CAINFO:
 2038|       |    /*
 2039|       |     * Set CA info for SSL connection. Specify file name of the CA certificate
 2040|       |     */
 2041|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE],
 2042|      0|                            va_arg(param, char *));
 2043|      0|    break;
 2044|      0|  case CURLOPT_CAINFO_BLOB:
 2045|       |    /*
 2046|       |     * Blob that holds CA info for SSL connection.
 2047|       |     * Specify entire PEM of the CA certificate
 2048|       |     */
 2049|      0|#ifdef USE_SSL
 2050|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2051|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO],
 2052|      0|                               va_arg(param, struct curl_blob *));
 2053|      0|    else
 2054|      0|#endif
 2055|      0|      return CURLE_NOT_BUILT_IN;
 2056|       |
 2057|      0|    break;
 2058|      0|#ifndef CURL_DISABLE_PROXY
 2059|      0|  case CURLOPT_PROXY_CAINFO:
 2060|       |    /*
 2061|       |     * Set CA info SSL connection for proxy. Specify file name of the
 2062|       |     * CA certificate
 2063|       |     */
 2064|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE_PROXY],
 2065|      0|                            va_arg(param, char *));
 2066|      0|    break;
 2067|      0|  case CURLOPT_PROXY_CAINFO_BLOB:
 2068|       |    /*
 2069|       |     * Blob that holds CA info for SSL connection proxy.
 2070|       |     * Specify entire PEM of the CA certificate
 2071|       |     */
 2072|      0|#ifdef USE_SSL
 2073|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2074|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO_PROXY],
 2075|      0|                               va_arg(param, struct curl_blob *));
 2076|      0|    else
 2077|      0|#endif
 2078|      0|      return CURLE_NOT_BUILT_IN;
 2079|      0|    break;
 2080|      0|#endif
 2081|      0|  case CURLOPT_CAPATH:
 2082|       |    /*
 2083|       |     * Set CA path info for SSL connection. Specify directory name of the CA
 2084|       |     * certificates which have been prepared using openssl c_rehash utility.
 2085|       |     */
 2086|      0|#ifdef USE_SSL
 2087|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2088|       |      /* This does not work on windows. */
 2089|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH],
 2090|      0|                              va_arg(param, char *));
 2091|      0|    else
 2092|      0|#endif
 2093|      0|      result = CURLE_NOT_BUILT_IN;
 2094|      0|    break;
 2095|      0|#ifndef CURL_DISABLE_PROXY
 2096|      0|  case CURLOPT_PROXY_CAPATH:
 2097|       |    /*
 2098|       |     * Set CA path info for SSL connection proxy. Specify directory name of the
 2099|       |     * CA certificates which have been prepared using openssl c_rehash utility.
 2100|       |     */
 2101|      0|#ifdef USE_SSL
 2102|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2103|       |      /* This does not work on windows. */
 2104|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH_PROXY],
 2105|      0|                              va_arg(param, char *));
 2106|      0|    else
 2107|      0|#endif
 2108|      0|      result = CURLE_NOT_BUILT_IN;
 2109|      0|    break;
 2110|      0|#endif
 2111|      0|  case CURLOPT_CRLFILE:
 2112|       |    /*
 2113|       |     * Set CRL file info for SSL connection. Specify file name of the CRL
 2114|       |     * to check certificates revocation
 2115|       |     */
 2116|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE],
 2117|      0|                            va_arg(param, char *));
 2118|      0|    break;
 2119|      0|#ifndef CURL_DISABLE_PROXY
 2120|      0|  case CURLOPT_PROXY_CRLFILE:
 2121|       |    /*
 2122|       |     * Set CRL file info for SSL connection for proxy. Specify file name of the
 2123|       |     * CRL to check certificates revocation
 2124|       |     */
 2125|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE_PROXY],
 2126|      0|                            va_arg(param, char *));
 2127|      0|    break;
 2128|      0|#endif
 2129|      0|  case CURLOPT_ISSUERCERT:
 2130|       |    /*
 2131|       |     * Set Issuer certificate file
 2132|       |     * to check certificates issuer
 2133|       |     */
 2134|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT],
 2135|      0|                            va_arg(param, char *));
 2136|      0|    break;
 2137|      0|  case CURLOPT_ISSUERCERT_BLOB:
 2138|       |    /*
 2139|       |     * Blob that holds Issuer certificate to check certificates issuer
 2140|       |     */
 2141|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT],
 2142|      0|                             va_arg(param, struct curl_blob *));
 2143|      0|    break;
 2144|      0|#ifndef CURL_DISABLE_PROXY
 2145|      0|  case CURLOPT_PROXY_ISSUERCERT:
 2146|       |    /*
 2147|       |     * Set Issuer certificate file
 2148|       |     * to check certificates issuer
 2149|       |     */
 2150|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT_PROXY],
 2151|      0|                            va_arg(param, char *));
 2152|      0|    break;
 2153|      0|  case CURLOPT_PROXY_ISSUERCERT_BLOB:
 2154|       |    /*
 2155|       |     * Blob that holds Issuer certificate to check certificates issuer
 2156|       |     */
 2157|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY],
 2158|      0|                             va_arg(param, struct curl_blob *));
 2159|      0|    break;
 2160|      0|#endif
 2161|      0|#ifndef CURL_DISABLE_TELNET
 2162|      0|  case CURLOPT_TELNETOPTIONS:
 2163|       |    /*
 2164|       |     * Set a linked list of telnet options
 2165|       |     */
 2166|      0|    data->set.telnet_options = va_arg(param, struct curl_slist *);
 2167|      0|    break;
 2168|      0|#endif
 2169|      0|  case CURLOPT_BUFFERSIZE:
 2170|       |    /*
 2171|       |     * The application kindly asks for a differently sized receive buffer.
 2172|       |     * If it seems reasonable, we'll use it.
 2173|       |     */
 2174|      0|    if(data->state.buffer)
 2175|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2176|       |
 2177|      0|    arg = va_arg(param, long);
 2178|       |
 2179|      0|    if(arg > READBUFFER_MAX)
 2180|      0|      arg = READBUFFER_MAX;
 2181|      0|    else if(arg < 1)
 2182|      0|      arg = READBUFFER_SIZE;
 2183|      0|    else if(arg < READBUFFER_MIN)
 2184|      0|      arg = READBUFFER_MIN;
 2185|       |
 2186|      0|    data->set.buffer_size = arg;
 2187|      0|    break;
 2188|       |
 2189|      0|  case CURLOPT_UPLOAD_BUFFERSIZE:
 2190|       |    /*
 2191|       |     * The application kindly asks for a differently sized upload buffer.
 2192|       |     * Cap it to sensible.
 2193|       |     */
 2194|      0|    arg = va_arg(param, long);
 2195|       |
 2196|      0|    if(arg > UPLOADBUFFER_MAX)
 2197|      0|      arg = UPLOADBUFFER_MAX;
 2198|      0|    else if(arg < UPLOADBUFFER_MIN)
 2199|      0|      arg = UPLOADBUFFER_MIN;
 2200|       |
 2201|      0|    data->set.upload_buffer_size = (unsigned int)arg;
 2202|      0|    Curl_safefree(data->state.ulbuf); /* force a realloc next opportunity */
 2203|      0|    break;
 2204|       |
 2205|      0|  case CURLOPT_NOSIGNAL:
 2206|       |    /*
 2207|       |     * The application asks not to set any signal() or alarm() handlers,
 2208|       |     * even when using a timeout.
 2209|       |     */
 2210|      0|    data->set.no_signal = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2211|      0|    break;
 2212|       |
 2213|      0|  case CURLOPT_SHARE:
 2214|      0|  {
 2215|      0|    struct Curl_share *set;
 2216|      0|    set = va_arg(param, struct Curl_share *);
 2217|       |
 2218|       |    /* disconnect from old share, if any */
 2219|      0|    if(data->share) {
 2220|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2221|       |
 2222|      0|      if(data->dns.hostcachetype == HCACHE_SHARED) {
 2223|      0|        data->dns.hostcache = NULL;
 2224|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2225|      0|      }
 2226|       |
 2227|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2228|      0|      if(data->share->cookies == data->cookies)
 2229|      0|        data->cookies = NULL;
 2230|      0|#endif
 2231|       |
 2232|      0|      if(data->share->sslsession == data->state.session)
 2233|      0|        data->state.session = NULL;
 2234|       |
 2235|       |#ifdef USE_LIBPSL
 2236|       |      if(data->psl == &data->share->psl)
 2237|       |        data->psl = data->multi? &data->multi->psl: NULL;
 2238|       |#endif
 2239|       |
 2240|      0|      data->share->dirty--;
 2241|       |
 2242|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2243|      0|      data->share = NULL;
 2244|      0|    }
 2245|       |
 2246|      0|    if(GOOD_SHARE_HANDLE(set))
 2247|       |      /* use new share if it set */
 2248|      0|      data->share = set;
 2249|      0|    if(data->share) {
 2250|       |
 2251|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2252|       |
 2253|      0|      data->share->dirty++;
 2254|       |
 2255|      0|      if(data->share->specifier & (1<< CURL_LOCK_DATA_DNS)) {
 2256|       |        /* use shared host cache */
 2257|      0|        data->dns.hostcache = &data->share->hostcache;
 2258|      0|        data->dns.hostcachetype = HCACHE_SHARED;
 2259|      0|      }
 2260|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2261|      0|      if(data->share->cookies) {
 2262|       |        /* use shared cookie list, first free own one if any */
 2263|      0|        Curl_cookie_cleanup(data->cookies);
 2264|       |        /* enable cookies since we now use a share that uses cookies! */
 2265|      0|        data->cookies = data->share->cookies;
 2266|      0|      }
 2267|      0|#endif   /* CURL_DISABLE_HTTP */
 2268|      0|      if(data->share->sslsession) {
 2269|      0|        data->set.general_ssl.max_ssl_sessions = data->share->max_ssl_sessions;
 2270|      0|        data->state.session = data->share->sslsession;
 2271|      0|      }
 2272|       |#ifdef USE_LIBPSL
 2273|       |      if(data->share->specifier & (1 << CURL_LOCK_DATA_PSL))
 2274|       |        data->psl = &data->share->psl;
 2275|       |#endif
 2276|       |
 2277|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2278|      0|    }
 2279|       |    /* check for host cache not needed,
 2280|       |     * it will be done by curl_easy_perform */
 2281|      0|  }
 2282|      0|  break;
 2283|       |
 2284|      0|  case CURLOPT_PRIVATE:
 2285|       |    /*
 2286|       |     * Set private data pointer.
 2287|       |     */
 2288|      0|    data->set.private_data = va_arg(param, void *);
 2289|      0|    break;
 2290|       |
 2291|      0|  case CURLOPT_MAXFILESIZE:
 2292|       |    /*
 2293|       |     * Set the maximum size of a file to download.
 2294|       |     */
 2295|      0|    arg = va_arg(param, long);
 2296|      0|    if(arg < 0)
 2297|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2298|      0|    data->set.max_filesize = arg;
 2299|      0|    break;
 2300|       |
 2301|      0|#ifdef USE_SSL
 2302|      0|  case CURLOPT_USE_SSL:
 2303|       |    /*
 2304|       |     * Make transfers attempt to use SSL/TLS.
 2305|       |     */
 2306|      0|    arg = va_arg(param, long);
 2307|      0|    if((arg < CURLUSESSL_NONE) || (arg >= CURLUSESSL_LAST))
 2308|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2309|      0|    data->set.use_ssl = (curl_usessl)arg;
 2310|      0|    break;
 2311|       |
 2312|      0|  case CURLOPT_SSL_OPTIONS:
 2313|      0|    arg = va_arg(param, long);
 2314|      0|    data->set.ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2315|      0|    data->set.ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2316|      0|    data->set.ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2317|      0|    data->set.ssl.revoke_best_effort = !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2318|      0|    data->set.ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2319|      0|    data->set.ssl.auto_client_cert = !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2320|       |    /* If a setting is added here it should also be added in dohprobe()
 2321|       |       which sets its own CURLOPT_SSL_OPTIONS based on these settings. */
 2322|      0|    break;
 2323|       |
 2324|      0|#ifndef CURL_DISABLE_PROXY
 2325|      0|  case CURLOPT_PROXY_SSL_OPTIONS:
 2326|      0|    arg = va_arg(param, long);
 2327|      0|    data->set.proxy_ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2328|      0|    data->set.proxy_ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2329|      0|    data->set.proxy_ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2330|      0|    data->set.proxy_ssl.revoke_best_effort =
 2331|      0|      !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2332|      0|    data->set.proxy_ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2333|      0|    data->set.proxy_ssl.auto_client_cert =
 2334|      0|      !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2335|      0|    break;
 2336|      0|#endif
 2337|       |
 2338|      0|  case CURLOPT_SSL_EC_CURVES:
 2339|       |    /*
 2340|       |     * Set accepted curves in SSL connection setup.
 2341|       |     * Specify colon-delimited list of curve algorithm names.
 2342|       |     */
 2343|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EC_CURVES],
 2344|      0|                            va_arg(param, char *));
 2345|      0|    break;
 2346|      0|#endif
 2347|      0|  case CURLOPT_IPRESOLVE:
 2348|      0|    arg = va_arg(param, long);
 2349|      0|    if((arg < CURL_IPRESOLVE_WHATEVER) || (arg > CURL_IPRESOLVE_V6))
 2350|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2351|      0|    data->set.ipver = (unsigned char) arg;
 2352|      0|    break;
 2353|       |
 2354|      0|  case CURLOPT_MAXFILESIZE_LARGE:
 2355|       |    /*
 2356|       |     * Set the maximum size of a file to download.
 2357|       |     */
 2358|      0|    bigsize = va_arg(param, curl_off_t);
 2359|      0|    if(bigsize < 0)
 2360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2361|      0|    data->set.max_filesize = bigsize;
 2362|      0|    break;
 2363|       |
 2364|      0|  case CURLOPT_TCP_NODELAY:
 2365|       |    /*
 2366|       |     * Enable or disable TCP_NODELAY, which will disable/enable the Nagle
 2367|       |     * algorithm
 2368|       |     */
 2369|      0|    data->set.tcp_nodelay = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2370|      0|    break;
 2371|       |
 2372|      0|  case CURLOPT_IGNORE_CONTENT_LENGTH:
 2373|      0|    data->set.ignorecl = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2374|      0|    break;
 2375|       |
 2376|      0|  case CURLOPT_CONNECT_ONLY:
 2377|       |    /*
 2378|       |     * No data transfer, set up connection and let application use the socket
 2379|       |     */
 2380|      0|    data->set.connect_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2381|      0|    break;
 2382|       |
 2383|    472|  case CURLOPT_SOCKOPTFUNCTION:
 2384|       |    /*
 2385|       |     * socket callback function: called after socket() but before connect()
 2386|       |     */
 2387|    472|    data->set.fsockopt = va_arg(param, curl_sockopt_callback);
 2388|    472|    break;
 2389|       |
 2390|      0|  case CURLOPT_SOCKOPTDATA:
 2391|       |    /*
 2392|       |     * socket callback data pointer. Might be NULL.
 2393|       |     */
 2394|      0|    data->set.sockopt_client = va_arg(param, void *);
 2395|      0|    break;
 2396|       |
 2397|    472|  case CURLOPT_OPENSOCKETFUNCTION:
 2398|       |    /*
 2399|       |     * open/create socket callback function: called instead of socket(),
 2400|       |     * before connect()
 2401|       |     */
 2402|    472|    data->set.fopensocket = va_arg(param, curl_opensocket_callback);
 2403|    472|    break;
 2404|       |
 2405|    472|  case CURLOPT_OPENSOCKETDATA:
 2406|       |    /*
 2407|       |     * socket callback data pointer. Might be NULL.
 2408|       |     */
 2409|    472|    data->set.opensocket_client = va_arg(param, void *);
 2410|    472|    break;
 2411|       |
 2412|      0|  case CURLOPT_CLOSESOCKETFUNCTION:
 2413|       |    /*
 2414|       |     * close socket callback function: called instead of close()
 2415|       |     * when shutting down a connection
 2416|       |     */
 2417|      0|    data->set.fclosesocket = va_arg(param, curl_closesocket_callback);
 2418|      0|    break;
 2419|       |
 2420|      0|  case CURLOPT_RESOLVER_START_FUNCTION:
 2421|       |    /*
 2422|       |     * resolver start callback function: called before a new resolver request
 2423|       |     * is started
 2424|       |     */
 2425|      0|    data->set.resolver_start = va_arg(param, curl_resolver_start_callback);
 2426|      0|    break;
 2427|       |
 2428|      0|  case CURLOPT_RESOLVER_START_DATA:
 2429|       |    /*
 2430|       |     * resolver start callback data pointer. Might be NULL.
 2431|       |     */
 2432|      0|    data->set.resolver_start_client = va_arg(param, void *);
 2433|      0|    break;
 2434|       |
 2435|      0|  case CURLOPT_CLOSESOCKETDATA:
 2436|       |    /*
 2437|       |     * socket callback data pointer. Might be NULL.
 2438|       |     */
 2439|      0|    data->set.closesocket_client = va_arg(param, void *);
 2440|      0|    break;
 2441|       |
 2442|      0|  case CURLOPT_SSL_SESSIONID_CACHE:
 2443|      0|    data->set.ssl.primary.sessionid = (0 != va_arg(param, long)) ?
 2444|      0|      TRUE : FALSE;
 2445|      0|#ifndef CURL_DISABLE_PROXY
 2446|      0|    data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;
 2447|      0|#endif
 2448|      0|    break;
 2449|       |
 2450|       |#ifdef USE_SSH
 2451|       |    /* we only include SSH options if explicitly built to support SSH */
 2452|       |  case CURLOPT_SSH_AUTH_TYPES:
 2453|       |    data->set.ssh_auth_types = va_arg(param, long);
 2454|       |    break;
 2455|       |
 2456|       |  case CURLOPT_SSH_PUBLIC_KEYFILE:
 2457|       |    /*
 2458|       |     * Use this file instead of the $HOME/.ssh/id_dsa.pub file
 2459|       |     */
 2460|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PUBLIC_KEY],
 2461|       |                            va_arg(param, char *));
 2462|       |    break;
 2463|       |
 2464|       |  case CURLOPT_SSH_PRIVATE_KEYFILE:
 2465|       |    /*
 2466|       |     * Use this file instead of the $HOME/.ssh/id_dsa file
 2467|       |     */
 2468|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PRIVATE_KEY],
 2469|       |                            va_arg(param, char *));
 2470|       |    break;
 2471|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
 2472|       |    /*
 2473|       |     * Option to allow for the MD5 of the host public key to be checked
 2474|       |     * for validation purposes.
 2475|       |     */
 2476|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5],
 2477|       |                            va_arg(param, char *));
 2478|       |    break;
 2479|       |
 2480|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256:
 2481|       |    /*
 2482|       |     * Option to allow for the SHA256 of the host public key to be checked
 2483|       |     * for validation purposes.
 2484|       |     */
 2485|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_SHA256],
 2486|       |                            va_arg(param, char *));
 2487|       |    break;
 2488|       |
 2489|       |  case CURLOPT_SSH_KNOWNHOSTS:
 2490|       |    /*
 2491|       |     * Store the file name to read known hosts from.
 2492|       |     */
 2493|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_KNOWNHOSTS],
 2494|       |                            va_arg(param, char *));
 2495|       |    break;
 2496|       |
 2497|       |  case CURLOPT_SSH_KEYFUNCTION:
 2498|       |    /* setting to NULL is fine since the ssh.c functions themselves will
 2499|       |       then revert to use the internal default */
 2500|       |    data->set.ssh_keyfunc = va_arg(param, curl_sshkeycallback);
 2501|       |    break;
 2502|       |
 2503|       |  case CURLOPT_SSH_KEYDATA:
 2504|       |    /*
 2505|       |     * Custom client data to pass to the SSH keyfunc callback
 2506|       |     */
 2507|       |    data->set.ssh_keyfunc_userp = va_arg(param, void *);
 2508|       |    break;
 2509|       |
 2510|       |  case CURLOPT_SSH_COMPRESSION:
 2511|       |    data->set.ssh_compression = (0 != va_arg(param, long))?TRUE:FALSE;
 2512|       |    break;
 2513|       |#endif /* USE_SSH */
 2514|       |
 2515|      0|  case CURLOPT_HTTP_TRANSFER_DECODING:
 2516|       |    /*
 2517|       |     * disable libcurl transfer encoding is used
 2518|       |     */
 2519|      0|#ifndef USE_HYPER
 2520|      0|    data->set.http_te_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2521|      0|    break;
 2522|       |#else
 2523|       |    return CURLE_NOT_BUILT_IN; /* hyper doesn't support */
 2524|       |#endif
 2525|       |
 2526|      0|  case CURLOPT_HTTP_CONTENT_DECODING:
 2527|       |    /*
 2528|       |     * raw data passed to the application when content encoding is used
 2529|       |     */
 2530|      0|    data->set.http_ce_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2531|      0|    break;
 2532|       |
 2533|      0|#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)
 2534|      0|  case CURLOPT_NEW_FILE_PERMS:
 2535|       |    /*
 2536|       |     * Uses these permissions instead of 0644
 2537|       |     */
 2538|      0|    arg = va_arg(param, long);
 2539|      0|    if((arg < 0) || (arg > 0777))
 2540|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2541|      0|    data->set.new_file_perms = arg;
 2542|      0|    break;
 2543|       |
 2544|      0|  case CURLOPT_NEW_DIRECTORY_PERMS:
 2545|       |    /*
 2546|       |     * Uses these permissions instead of 0755
 2547|       |     */
 2548|      0|    arg = va_arg(param, long);
 2549|      0|    if((arg < 0) || (arg > 0777))
 2550|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2551|      0|    data->set.new_directory_perms = arg;
 2552|      0|    break;
 2553|      0|#endif
 2554|       |
 2555|      0|  case CURLOPT_ADDRESS_SCOPE:
 2556|       |    /*
 2557|       |     * Use this scope id when using IPv6
 2558|       |     * We always get longs when passed plain numericals so we should check
 2559|       |     * that the value fits into an unsigned 32 bit integer.
 2560|       |     */
 2561|      0|    uarg = va_arg(param, unsigned long);
 2562|      0|#if SIZEOF_LONG > 4
 2563|      0|    if(uarg > UINT_MAX)
 2564|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2565|      0|#endif
 2566|      0|    data->set.scope_id = (unsigned int)uarg;
 2567|      0|    break;
 2568|       |
 2569|    472|  case CURLOPT_PROTOCOLS:
 2570|       |    /* set the bitmask for the protocols that are allowed to be used for the
 2571|       |       transfer, which thus helps the app which takes URLs from users or other
 2572|       |       external inputs and want to restrict what protocol(s) to deal
 2573|       |       with. Defaults to CURLPROTO_ALL. */
 2574|    472|    data->set.allowed_protocols = va_arg(param, long);
 2575|    472|    break;
 2576|       |
 2577|      0|  case CURLOPT_REDIR_PROTOCOLS:
 2578|       |    /* set the bitmask for the protocols that libcurl is allowed to follow to,
 2579|       |       as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
 2580|       |       to be set in both bitmasks to be allowed to get redirected to. */
 2581|      0|    data->set.redir_protocols = va_arg(param, long);
 2582|      0|    break;
 2583|       |
 2584|      0|  case CURLOPT_DEFAULT_PROTOCOL:
 2585|       |    /* Set the protocol to use when the URL doesn't include any protocol */
 2586|      0|    result = Curl_setstropt(&data->set.str[STRING_DEFAULT_PROTOCOL],
 2587|      0|                            va_arg(param, char *));
 2588|      0|    break;
 2589|      0|#ifndef CURL_DISABLE_SMTP
 2590|      4|  case CURLOPT_MAIL_FROM:
 2591|       |    /* Set the SMTP mail originator */
 2592|      4|    result = Curl_setstropt(&data->set.str[STRING_MAIL_FROM],
 2593|      4|                            va_arg(param, char *));
 2594|      4|    break;
 2595|       |
 2596|      3|  case CURLOPT_MAIL_AUTH:
 2597|       |    /* Set the SMTP auth originator */
 2598|      3|    result = Curl_setstropt(&data->set.str[STRING_MAIL_AUTH],
 2599|      3|                            va_arg(param, char *));
 2600|      3|    break;
 2601|       |
 2602|      2|  case CURLOPT_MAIL_RCPT:
 2603|       |    /* Set the list of mail recipients */
 2604|      2|    data->set.mail_rcpt = va_arg(param, struct curl_slist *);
 2605|      2|    break;
 2606|      0|  case CURLOPT_MAIL_RCPT_ALLLOWFAILS:
 2607|       |    /* allow RCPT TO command to fail for some recipients */
 2608|      0|    data->set.mail_rcpt_allowfails = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2609|      0|    break;
 2610|      0|#endif
 2611|       |
 2612|      0|  case CURLOPT_SASL_AUTHZID:
 2613|       |    /* Authorisation identity (identity to act as) */
 2614|      0|    result = Curl_setstropt(&data->set.str[STRING_SASL_AUTHZID],
 2615|      0|                            va_arg(param, char *));
 2616|      0|    break;
 2617|       |
 2618|      0|  case CURLOPT_SASL_IR:
 2619|       |    /* Enable/disable SASL initial response */
 2620|      0|    data->set.sasl_ir = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2621|      0|    break;
 2622|      0|#ifndef CURL_DISABLE_RTSP
 2623|      0|  case CURLOPT_RTSP_REQUEST:
 2624|      0|  {
 2625|       |    /*
 2626|       |     * Set the RTSP request method (OPTIONS, SETUP, PLAY, etc...)
 2627|       |     * Would this be better if the RTSPREQ_* were just moved into here?
 2628|       |     */
 2629|      0|    long in_rtspreq = va_arg(param, long);
 2630|      0|    Curl_RtspReq rtspreq = RTSPREQ_NONE;
 2631|      0|    switch(in_rtspreq) {
 2632|      0|    case CURL_RTSPREQ_OPTIONS:
 2633|      0|      rtspreq = RTSPREQ_OPTIONS;
 2634|      0|      break;
 2635|       |
 2636|      0|    case CURL_RTSPREQ_DESCRIBE:
 2637|      0|      rtspreq = RTSPREQ_DESCRIBE;
 2638|      0|      break;
 2639|       |
 2640|      0|    case CURL_RTSPREQ_ANNOUNCE:
 2641|      0|      rtspreq = RTSPREQ_ANNOUNCE;
 2642|      0|      break;
 2643|       |
 2644|      0|    case CURL_RTSPREQ_SETUP:
 2645|      0|      rtspreq = RTSPREQ_SETUP;
 2646|      0|      break;
 2647|       |
 2648|      0|    case CURL_RTSPREQ_PLAY:
 2649|      0|      rtspreq = RTSPREQ_PLAY;
 2650|      0|      break;
 2651|       |
 2652|      0|    case CURL_RTSPREQ_PAUSE:
 2653|      0|      rtspreq = RTSPREQ_PAUSE;
 2654|      0|      break;
 2655|       |
 2656|      0|    case CURL_RTSPREQ_TEARDOWN:
 2657|      0|      rtspreq = RTSPREQ_TEARDOWN;
 2658|      0|      break;
 2659|       |
 2660|      0|    case CURL_RTSPREQ_GET_PARAMETER:
 2661|      0|      rtspreq = RTSPREQ_GET_PARAMETER;
 2662|      0|      break;
 2663|       |
 2664|      0|    case CURL_RTSPREQ_SET_PARAMETER:
 2665|      0|      rtspreq = RTSPREQ_SET_PARAMETER;
 2666|      0|      break;
 2667|       |
 2668|      0|    case CURL_RTSPREQ_RECORD:
 2669|      0|      rtspreq = RTSPREQ_RECORD;
 2670|      0|      break;
 2671|       |
 2672|      0|    case CURL_RTSPREQ_RECEIVE:
 2673|      0|      rtspreq = RTSPREQ_RECEIVE;
 2674|      0|      break;
 2675|      0|    default:
 2676|      0|      rtspreq = RTSPREQ_NONE;
 2677|      0|    }
 2678|       |
 2679|      0|    data->set.rtspreq = rtspreq;
 2680|      0|    break;
 2681|      0|  }
 2682|       |
 2683|       |
 2684|      3|  case CURLOPT_RTSP_SESSION_ID:
 2685|       |    /*
 2686|       |     * Set the RTSP Session ID manually. Useful if the application is
 2687|       |     * resuming a previously established RTSP session
 2688|       |     */
 2689|      3|    result = Curl_setstropt(&data->set.str[STRING_RTSP_SESSION_ID],
 2690|      3|                            va_arg(param, char *));
 2691|      3|    break;
 2692|       |
 2693|      2|  case CURLOPT_RTSP_STREAM_URI:
 2694|       |    /*
 2695|       |     * Set the Stream URI for the RTSP request. Unless the request is
 2696|       |     * for generic server options, the application will need to set this.
 2697|       |     */
 2698|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_STREAM_URI],
 2699|      2|                            va_arg(param, char *));
 2700|      2|    break;
 2701|       |
 2702|      6|  case CURLOPT_RTSP_TRANSPORT:
 2703|       |    /*
 2704|       |     * The content of the Transport: header for the RTSP request
 2705|       |     */
 2706|      6|    result = Curl_setstropt(&data->set.str[STRING_RTSP_TRANSPORT],
 2707|      6|                            va_arg(param, char *));
 2708|      6|    break;
 2709|       |
 2710|      0|  case CURLOPT_RTSP_CLIENT_CSEQ:
 2711|       |    /*
 2712|       |     * Set the CSEQ number to issue for the next RTSP request. Useful if the
 2713|       |     * application is resuming a previously broken connection. The CSEQ
 2714|       |     * will increment from this new number henceforth.
 2715|       |     */
 2716|      0|    data->state.rtsp_next_client_CSeq = va_arg(param, long);
 2717|      0|    break;
 2718|       |
 2719|      0|  case CURLOPT_RTSP_SERVER_CSEQ:
 2720|       |    /* Same as the above, but for server-initiated requests */
 2721|      0|    data->state.rtsp_next_server_CSeq = va_arg(param, long);
 2722|      0|    break;
 2723|       |
 2724|      0|  case CURLOPT_INTERLEAVEDATA:
 2725|      0|    data->set.rtp_out = va_arg(param, void *);
 2726|      0|    break;
 2727|      0|  case CURLOPT_INTERLEAVEFUNCTION:
 2728|       |    /* Set the user defined RTP write function */
 2729|      0|    data->set.fwrite_rtp = va_arg(param, curl_write_callback);
 2730|      0|    break;
 2731|      0|#endif
 2732|      0|#ifndef CURL_DISABLE_FTP
 2733|      0|  case CURLOPT_WILDCARDMATCH:
 2734|      0|    data->set.wildcard_enabled = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2735|      0|    break;
 2736|      0|  case CURLOPT_CHUNK_BGN_FUNCTION:
 2737|      0|    data->set.chunk_bgn = va_arg(param, curl_chunk_bgn_callback);
 2738|      0|    break;
 2739|      0|  case CURLOPT_CHUNK_END_FUNCTION:
 2740|      0|    data->set.chunk_end = va_arg(param, curl_chunk_end_callback);
 2741|      0|    break;
 2742|      0|  case CURLOPT_FNMATCH_FUNCTION:
 2743|      0|    data->set.fnmatch = va_arg(param, curl_fnmatch_callback);
 2744|      0|    break;
 2745|      0|  case CURLOPT_CHUNK_DATA:
 2746|      0|    data->wildcard.customptr = va_arg(param, void *);
 2747|      0|    break;
 2748|      0|  case CURLOPT_FNMATCH_DATA:
 2749|      0|    data->set.fnmatch_data = va_arg(param, void *);
 2750|      0|    break;
 2751|      0|#endif
 2752|      0|#ifdef USE_TLS_SRP
 2753|      0|  case CURLOPT_TLSAUTH_USERNAME:
 2754|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME],
 2755|      0|                            va_arg(param, char *));
 2756|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2757|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2758|      0|    break;
 2759|      0|  case CURLOPT_PROXY_TLSAUTH_USERNAME:
 2760|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],
 2761|      0|                            va_arg(param, char *));
 2762|      0|#ifndef CURL_DISABLE_PROXY
 2763|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2764|      0|       !data->set.proxy_ssl.authtype)
 2765|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2766|      0|#endif
 2767|      0|    break;
 2768|      0|  case CURLOPT_TLSAUTH_PASSWORD:
 2769|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD],
 2770|      0|                            va_arg(param, char *));
 2771|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2772|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2773|      0|    break;
 2774|      0|  case CURLOPT_PROXY_TLSAUTH_PASSWORD:
 2775|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],
 2776|      0|                            va_arg(param, char *));
 2777|      0|#ifndef CURL_DISABLE_PROXY
 2778|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2779|      0|       !data->set.proxy_ssl.authtype)
 2780|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2781|      0|#endif
 2782|      0|    break;
 2783|      0|  case CURLOPT_TLSAUTH_TYPE:
 2784|      0|    argptr = va_arg(param, char *);
 2785|      0|    if(!argptr ||
 2786|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2787|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP;
 2788|      0|    else
 2789|      0|      data->set.ssl.authtype = CURL_TLSAUTH_NONE;
 2790|      0|    break;
 2791|      0|#ifndef CURL_DISABLE_PROXY
 2792|      0|  case CURLOPT_PROXY_TLSAUTH_TYPE:
 2793|      0|    argptr = va_arg(param, char *);
 2794|      0|    if(!argptr ||
 2795|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2796|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP;
 2797|      0|    else
 2798|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_NONE;
 2799|      0|    break;
 2800|      0|#endif
 2801|      0|#endif
 2802|       |#ifdef USE_ARES
 2803|       |  case CURLOPT_DNS_SERVERS:
 2804|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],
 2805|       |                            va_arg(param, char *));
 2806|       |    if(result)
 2807|       |      return result;
 2808|       |    result = Curl_set_dns_servers(data, data->set.str[STRING_DNS_SERVERS]);
 2809|       |    break;
 2810|       |  case CURLOPT_DNS_INTERFACE:
 2811|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_INTERFACE],
 2812|       |                            va_arg(param, char *));
 2813|       |    if(result)
 2814|       |      return result;
 2815|       |    result = Curl_set_dns_interface(data, data->set.str[STRING_DNS_INTERFACE]);
 2816|       |    break;
 2817|       |  case CURLOPT_DNS_LOCAL_IP4:
 2818|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP4],
 2819|       |                            va_arg(param, char *));
 2820|       |    if(result)
 2821|       |      return result;
 2822|       |    result = Curl_set_dns_local_ip4(data, data->set.str[STRING_DNS_LOCAL_IP4]);
 2823|       |    break;
 2824|       |  case CURLOPT_DNS_LOCAL_IP6:
 2825|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP6],
 2826|       |                            va_arg(param, char *));
 2827|       |    if(result)
 2828|       |      return result;
 2829|       |    result = Curl_set_dns_local_ip6(data, data->set.str[STRING_DNS_LOCAL_IP6]);
 2830|       |    break;
 2831|       |#endif
 2832|      0|  case CURLOPT_TCP_KEEPALIVE:
 2833|      0|    data->set.tcp_keepalive = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2834|      0|    break;
 2835|      0|  case CURLOPT_TCP_KEEPIDLE:
 2836|      0|    arg = va_arg(param, long);
 2837|      0|    if(arg < 0)
 2838|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2839|      0|    data->set.tcp_keepidle = arg;
 2840|      0|    break;
 2841|      0|  case CURLOPT_TCP_KEEPINTVL:
 2842|      0|    arg = va_arg(param, long);
 2843|      0|    if(arg < 0)
 2844|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2845|      0|    data->set.tcp_keepintvl = arg;
 2846|      0|    break;
 2847|      0|  case CURLOPT_TCP_FASTOPEN:
 2848|      0|#if defined(CONNECT_DATA_IDEMPOTENT) || defined(MSG_FASTOPEN) || \
 2849|      0|   defined(TCP_FASTOPEN_CONNECT)
 2850|      0|    data->set.tcp_fastopen = (0 != va_arg(param, long))?TRUE:FALSE;
 2851|       |#else
 2852|       |    result = CURLE_NOT_BUILT_IN;
 2853|       |#endif
 2854|      0|    break;
 2855|      0|  case CURLOPT_SSL_ENABLE_NPN:
 2856|      0|    data->set.ssl_enable_npn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2857|      0|    break;
 2858|      0|  case CURLOPT_SSL_ENABLE_ALPN:
 2859|      0|    data->set.ssl_enable_alpn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2860|      0|    break;
 2861|      0|#ifdef USE_UNIX_SOCKETS
 2862|      0|  case CURLOPT_UNIX_SOCKET_PATH:
 2863|      0|    data->set.abstract_unix_socket = FALSE;
 2864|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2865|      0|                            va_arg(param, char *));
 2866|      0|    break;
 2867|      0|  case CURLOPT_ABSTRACT_UNIX_SOCKET:
 2868|      0|    data->set.abstract_unix_socket = TRUE;
 2869|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2870|      0|                            va_arg(param, char *));
 2871|      0|    break;
 2872|      0|#endif
 2873|       |
 2874|      0|  case CURLOPT_PATH_AS_IS:
 2875|      0|    data->set.path_as_is = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2876|      0|    break;
 2877|      0|  case CURLOPT_PIPEWAIT:
 2878|      0|    data->set.pipewait = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2879|      0|    break;
 2880|      0|  case CURLOPT_STREAM_WEIGHT:
 2881|       |#ifndef USE_NGHTTP2
 2882|       |    return CURLE_NOT_BUILT_IN;
 2883|       |#else
 2884|      0|    arg = va_arg(param, long);
 2885|      0|    if((arg >= 1) && (arg <= 256))
 2886|      0|      data->set.stream_weight = (int)arg;
 2887|      0|    break;
 2888|      0|#endif
 2889|      0|  case CURLOPT_STREAM_DEPENDS:
 2890|      0|  case CURLOPT_STREAM_DEPENDS_E:
 2891|      0|  {
 2892|       |#ifndef USE_NGHTTP2
 2893|       |    return CURLE_NOT_BUILT_IN;
 2894|       |#else
 2895|      0|    struct Curl_easy *dep = va_arg(param, struct Curl_easy *);
 2896|      0|    if(!dep || GOOD_EASY_HANDLE(dep)) {
 2897|      0|      if(data->set.stream_depends_on) {
 2898|      0|        Curl_http2_remove_child(data->set.stream_depends_on, data);
 2899|      0|      }
 2900|      0|      Curl_http2_add_child(dep, data, (option == CURLOPT_STREAM_DEPENDS_E));
 2901|      0|    }
 2902|      0|    break;
 2903|      0|#endif
 2904|      0|  }
 2905|    472|  case CURLOPT_CONNECT_TO:
 2906|    472|    data->set.connect_to = va_arg(param, struct curl_slist *);
 2907|    472|    break;
 2908|      0|  case CURLOPT_SUPPRESS_CONNECT_HEADERS:
 2909|      0|    data->set.suppress_connect_headers = (0 != va_arg(param, long))?TRUE:FALSE;
 2910|      0|    break;
 2911|      0|  case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
 2912|      0|    arg = va_arg(param, long);
 2913|      0|    if(arg < 0)
 2914|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2915|      0|    data->set.happy_eyeballs_timeout = arg;
 2916|      0|    break;
 2917|      0|#ifndef CURL_DISABLE_SHUFFLE_DNS
 2918|      0|  case CURLOPT_DNS_SHUFFLE_ADDRESSES:
 2919|      0|    data->set.dns_shuffle_addresses = (0 != va_arg(param, long)) ? TRUE:FALSE;
 2920|      0|    break;
 2921|      0|#endif
 2922|      0|  case CURLOPT_DISALLOW_USERNAME_IN_URL:
 2923|      0|    data->set.disallow_username_in_url =
 2924|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
 2925|      0|    break;
 2926|      0|#ifndef CURL_DISABLE_DOH
 2927|      4|  case CURLOPT_DOH_URL:
 2928|      4|    result = Curl_setstropt(&data->set.str[STRING_DOH],
 2929|      4|                            va_arg(param, char *));
 2930|      4|    data->set.doh = data->set.str[STRING_DOH]?TRUE:FALSE;
 2931|      4|    break;
 2932|      0|#endif
 2933|      0|  case CURLOPT_UPKEEP_INTERVAL_MS:
 2934|      0|    arg = va_arg(param, long);
 2935|      0|    if(arg < 0)
 2936|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2937|      0|    data->set.upkeep_interval_ms = arg;
 2938|      0|    break;
 2939|      0|  case CURLOPT_MAXAGE_CONN:
 2940|      0|    arg = va_arg(param, long);
 2941|      0|    if(arg < 0)
 2942|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2943|      0|    data->set.maxage_conn = arg;
 2944|      0|    break;
 2945|      0|  case CURLOPT_MAXLIFETIME_CONN:
 2946|      0|    arg = va_arg(param, long);
 2947|      0|    if(arg < 0)
 2948|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2949|      0|    data->set.maxlifetime_conn = arg;
 2950|      0|    break;
 2951|      0|  case CURLOPT_TRAILERFUNCTION:
 2952|      0|#ifndef CURL_DISABLE_HTTP
 2953|      0|    data->set.trailer_callback = va_arg(param, curl_trailer_callback);
 2954|      0|#endif
 2955|      0|    break;
 2956|      0|  case CURLOPT_TRAILERDATA:
 2957|      0|#ifndef CURL_DISABLE_HTTP
 2958|      0|    data->set.trailer_data = va_arg(param, void *);
 2959|      0|#endif
 2960|      0|    break;
 2961|      0|#ifndef CURL_DISABLE_HSTS
 2962|      0|  case CURLOPT_HSTSREADFUNCTION:
 2963|      0|    data->set.hsts_read = va_arg(param, curl_hstsread_callback);
 2964|      0|    break;
 2965|      0|  case CURLOPT_HSTSREADDATA:
 2966|      0|    data->set.hsts_read_userp = va_arg(param, void *);
 2967|      0|    break;
 2968|      0|  case CURLOPT_HSTSWRITEFUNCTION:
 2969|      0|    data->set.hsts_write = va_arg(param, curl_hstswrite_callback);
 2970|      0|    break;
 2971|      0|  case CURLOPT_HSTSWRITEDATA:
 2972|      0|    data->set.hsts_write_userp = va_arg(param, void *);
 2973|      0|    break;
 2974|      0|  case CURLOPT_HSTS:
 2975|      0|    if(!data->hsts) {
 2976|      0|      data->hsts = Curl_hsts_init();
 2977|      0|      if(!data->hsts)
 2978|      0|        return CURLE_OUT_OF_MEMORY;
 2979|      0|    }
 2980|      0|    argptr = va_arg(param, char *);
 2981|      0|    result = Curl_setstropt(&data->set.str[STRING_HSTS], argptr);
 2982|      0|    if(result)
 2983|      0|      return result;
 2984|      0|    if(argptr)
 2985|      0|      (void)Curl_hsts_loadfile(data, data->hsts, argptr);
 2986|      0|    break;
 2987|      0|  case CURLOPT_HSTS_CTRL:
 2988|      0|    arg = va_arg(param, long);
 2989|      0|    if(arg & CURLHSTS_ENABLE) {
 2990|      0|      if(!data->hsts) {
 2991|      0|        data->hsts = Curl_hsts_init();
 2992|      0|        if(!data->hsts)
 2993|      0|          return CURLE_OUT_OF_MEMORY;
 2994|      0|      }
 2995|      0|    }
 2996|      0|    else
 2997|      0|      Curl_hsts_cleanup(&data->hsts);
 2998|      0|    break;
 2999|      0|#endif
 3000|      0|#ifndef CURL_DISABLE_ALTSVC
 3001|      0|  case CURLOPT_ALTSVC:
 3002|      0|    if(!data->asi) {
 3003|      0|      data->asi = Curl_altsvc_init();
 3004|      0|      if(!data->asi)
 3005|      0|        return CURLE_OUT_OF_MEMORY;
 3006|      0|    }
 3007|      0|    argptr = va_arg(param, char *);
 3008|      0|    result = Curl_setstropt(&data->set.str[STRING_ALTSVC], argptr);
 3009|      0|    if(result)
 3010|      0|      return result;
 3011|      0|    if(argptr)
 3012|      0|      (void)Curl_altsvc_load(data->asi, argptr);
 3013|      0|    break;
 3014|      0|  case CURLOPT_ALTSVC_CTRL:
 3015|      0|    if(!data->asi) {
 3016|      0|      data->asi = Curl_altsvc_init();
 3017|      0|      if(!data->asi)
 3018|      0|        return CURLE_OUT_OF_MEMORY;
 3019|      0|    }
 3020|      0|    arg = va_arg(param, long);
 3021|      0|    result = Curl_altsvc_ctrl(data->asi, arg);
 3022|      0|    if(result)
 3023|      0|      return result;
 3024|      0|    break;
 3025|      0|#endif
 3026|      0|  case CURLOPT_PREREQFUNCTION:
 3027|      0|    data->set.fprereq = va_arg(param, curl_prereq_callback);
 3028|      0|    break;
 3029|      0|  case CURLOPT_PREREQDATA:
 3030|      0|    data->set.prereq_userp = va_arg(param, void *);
 3031|      0|    break;
 3032|      0|  default:
 3033|       |    /* unknown tag and its companion, just ignore: */
 3034|      0|    result = CURLE_UNKNOWN_OPTION;
 3035|      0|    break;
 3036|  6.20k|  }
 3037|       |
 3038|  6.20k|  return result;
 3039|  6.20k|}
curl_easy_setopt:
 3051|  6.20k|{
 3052|  6.20k|  va_list arg;
 3053|  6.20k|  CURLcode result;
 3054|       |
 3055|  6.20k|  if(!data)
 3056|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 3057|       |
 3058|  6.20k|  va_start(arg, tag);
 3059|       |
 3060|  6.20k|  result = Curl_vsetopt(data, tag, arg);
 3061|       |
 3062|  6.20k|  va_end(arg);
 3063|  6.20k|  return result;
 3064|  6.20k|}

Curl_share_lock:
  235|  1.04k|{
  236|  1.04k|  struct Curl_share *share = data->share;
  237|       |
  238|  1.04k|  if(!share)
  239|  1.04k|    return CURLSHE_INVALID;
  240|       |
  241|      0|  if(share->specifier & (1<<type)) {
  242|      0|    if(share->lockfunc) /* only call this if set! */
  243|      0|      share->lockfunc(data, type, accesstype, share->clientdata);
  244|      0|  }
  245|       |  /* else if we don't share this, pretend successful lock */
  246|       |
  247|      0|  return CURLSHE_OK;
  248|  1.04k|}
Curl_share_unlock:
  252|  1.04k|{
  253|  1.04k|  struct Curl_share *share = data->share;
  254|       |
  255|  1.04k|  if(!share)
  256|  1.04k|    return CURLSHE_INVALID;
  257|       |
  258|      0|  if(share->specifier & (1<<type)) {
  259|      0|    if(share->unlockfunc) /* only call this if set! */
  260|      0|      share->unlockfunc (data, type, share->clientdata);
  261|      0|  }
  262|       |
  263|      0|  return CURLSHE_OK;
  264|  1.04k|}

Curl_slist_append_nodup:
   60|    486|{
   61|    486|  struct curl_slist     *last;
   62|    486|  struct curl_slist     *new_item;
   63|       |
   64|    486|  DEBUGASSERT(data);
   65|       |
   66|    486|  new_item = malloc(sizeof(struct curl_slist));
   67|    486|  if(!new_item)
   68|      0|    return NULL;
   69|       |
   70|    486|  new_item->next = NULL;
   71|    486|  new_item->data = data;
   72|       |
   73|       |  /* if this is the first item, then new_item *is* the list */
   74|    486|  if(!list)
   75|    484|    return new_item;
   76|       |
   77|      2|  last = slist_get_last(list);
   78|      2|  last->next = new_item;
   79|      2|  return list;
   80|    486|}
curl_slist_append:
   91|    486|{
   92|    486|  char *dupdata = strdup(data);
   93|       |
   94|    486|  if(!dupdata)
   95|      0|    return NULL;
   96|       |
   97|    486|  list = Curl_slist_append_nodup(list, dupdata);
   98|    486|  if(!list)
   99|      0|    free(dupdata);
  100|       |
  101|    486|  return list;
  102|    486|}
curl_slist_free_all:
  130|  1.56k|{
  131|  1.56k|  struct curl_slist     *next;
  132|  1.56k|  struct curl_slist     *item;
  133|       |
  134|  1.56k|  if(!list)
  135|  1.08k|    return;
  136|       |
  137|    484|  item = list;
  138|    486|  do {
  139|    486|    next = item->next;
  140|    486|    Curl_safefree(item->data);
  141|    486|    free(item);
  142|    486|    item = next;
  143|    486|  } while(next);
  144|    484|}
slist.c:slist_get_last:
   35|      2|{
   36|      2|  struct curl_slist     *item;
   37|       |
   38|       |  /* if caller passed us a NULL, return now */
   39|      2|  if(!list)
   40|      0|    return NULL;
   41|       |
   42|       |  /* loop through to find the last item */
   43|      2|  item = list;
   44|      2|  while(item->next) {
   45|      0|    item = item->next;
   46|      0|  }
   47|      2|  return item;
   48|      2|}

Curl_speedinit:
   32|    285|{
   33|    285|  memset(&data->state.keeps_speed, 0, sizeof(struct curltime));
   34|    285|}
Curl_speedcheck:
   41|      4|{
   42|      4|  if(data->req.keepon & KEEP_RECV_PAUSE)
   43|       |    /* A paused transfer is not qualified for speed checks */
   44|      0|    return CURLE_OK;
   45|       |
   46|      4|  if((data->progress.current_speed >= 0) && data->set.low_speed_time) {
   47|      0|    if(data->progress.current_speed < data->set.low_speed_limit) {
   48|      0|      if(!data->state.keeps_speed.tv_sec)
   49|       |        /* under the limit at this very moment */
   50|      0|        data->state.keeps_speed = now;
   51|      0|      else {
   52|       |        /* how long has it been under the limit */
   53|      0|        timediff_t howlong = Curl_timediff(now, data->state.keeps_speed);
   54|       |
   55|      0|        if(howlong >= data->set.low_speed_time * 1000) {
   56|       |          /* too long */
   57|      0|          failf(data,
   58|      0|                "Operation too slow. "
   59|      0|                "Less than %ld bytes/sec transferred the last %ld seconds",
   60|      0|                data->set.low_speed_limit,
   61|      0|                data->set.low_speed_time);
   62|      0|          return CURLE_OPERATION_TIMEDOUT;
   63|      0|        }
   64|      0|      }
   65|      0|    }
   66|      0|    else
   67|       |      /* faster right now */
   68|      0|      data->state.keeps_speed.tv_sec = 0;
   69|      0|  }
   70|       |
   71|      4|  if(data->set.low_speed_limit)
   72|       |    /* if low speed limit is enabled, set the expire timer to make this
   73|       |       connection's speed get checked again in a second */
   74|      0|    Curl_expire(data, 1000, EXPIRE_SPEEDCHECK);
   75|       |
   76|      4|  return CURLE_OK;
   77|      4|}

Curl_splay:
   42|  15.8M|{
   43|  15.8M|  struct Curl_tree N, *l, *r, *y;
   44|       |
   45|  15.8M|  if(!t)
   46|      0|    return t;
   47|  15.8M|  N.smaller = N.larger = NULL;
   48|  15.8M|  l = r = &N;
   49|       |
   50|  15.8M|  for(;;) {
   51|  15.8M|    long comp = compare(i, t->key);
   52|  15.8M|    if(comp < 0) {
   53|  15.8M|      if(!t->smaller)
   54|  15.8M|        break;
   55|      0|      if(compare(i, t->smaller->key) < 0) {
   56|      0|        y = t->smaller;                           /* rotate smaller */
   57|      0|        t->smaller = y->larger;
   58|      0|        y->larger = t;
   59|      0|        t = y;
   60|      0|        if(!t->smaller)
   61|      0|          break;
   62|      0|      }
   63|      0|      r->smaller = t;                               /* link smaller */
   64|      0|      r = t;
   65|      0|      t = t->smaller;
   66|      0|    }
   67|    472|    else if(comp > 0) {
   68|      0|      if(!t->larger)
   69|      0|        break;
   70|      0|      if(compare(i, t->larger->key) > 0) {
   71|      0|        y = t->larger;                          /* rotate larger */
   72|      0|        t->larger = y->smaller;
   73|      0|        y->smaller = t;
   74|      0|        t = y;
   75|      0|        if(!t->larger)
   76|      0|          break;
   77|      0|      }
   78|      0|      l->larger = t;                              /* link larger */
   79|      0|      l = t;
   80|      0|      t = t->larger;
   81|      0|    }
   82|    472|    else
   83|    472|      break;
   84|  15.8M|  }
   85|       |
   86|  15.8M|  l->larger = t->smaller;                                /* assemble */
   87|  15.8M|  r->smaller = t->larger;
   88|  15.8M|  t->smaller = N.larger;
   89|  15.8M|  t->larger = N.smaller;
   90|       |
   91|  15.8M|  return t;
   92|  15.8M|}
Curl_splayinsert:
  102|    757|{
  103|    757|  static const struct curltime KEY_NOTUSED = {
  104|    757|    (time_t)-1, (unsigned int)-1
  105|    757|  }; /* will *NEVER* appear */
  106|       |
  107|    757|  if(!node)
  108|      0|    return t;
  109|       |
  110|    757|  if(t != NULL) {
  111|      0|    t = Curl_splay(i, t);
  112|      0|    if(compare(i, t->key) == 0) {
  113|       |      /* There already exists a node in the tree with the very same key. Build
  114|       |         a doubly-linked circular list of nodes. We add the new 'node' struct
  115|       |         to the end of this list. */
  116|       |
  117|      0|      node->key = KEY_NOTUSED; /* we set the key in the sub node to NOTUSED
  118|       |                                  to quickly identify this node as a subnode */
  119|      0|      node->samen = t;
  120|      0|      node->samep = t->samep;
  121|      0|      t->samep->samen = node;
  122|      0|      t->samep = node;
  123|       |
  124|      0|      return t; /* the root node always stays the same */
  125|      0|    }
  126|      0|  }
  127|       |
  128|    757|  if(!t) {
  129|    757|    node->smaller = node->larger = NULL;
  130|    757|  }
  131|      0|  else if(compare(i, t->key) < 0) {
  132|      0|    node->smaller = t->smaller;
  133|      0|    node->larger = t;
  134|      0|    t->smaller = NULL;
  135|       |
  136|      0|  }
  137|      0|  else {
  138|      0|    node->larger = t->larger;
  139|      0|    node->smaller = t;
  140|      0|    t->larger = NULL;
  141|      0|  }
  142|    757|  node->key = i;
  143|       |
  144|       |  /* no identical nodes (yet), we are the only one in the list of nodes */
  145|    757|  node->samen = node;
  146|    757|  node->samep = node;
  147|    757|  return node;
  148|    757|}
Curl_splaygetbest:
  156|  15.8M|{
  157|  15.8M|  static const struct curltime tv_zero = {0, 0};
  158|  15.8M|  struct Curl_tree *x;
  159|       |
  160|  15.8M|  if(!t) {
  161|    472|    *removed = NULL; /* none removed since there was no root */
  162|    472|    return NULL;
  163|    472|  }
  164|       |
  165|       |  /* find smallest */
  166|  15.8M|  t = Curl_splay(tv_zero, t);
  167|  15.8M|  if(compare(i, t->key) < 0) {
  168|       |    /* even the smallest is too big */
  169|  15.8M|    *removed = NULL;
  170|  15.8M|    return t;
  171|  15.8M|  }
  172|       |
  173|       |  /* FIRST! Check if there is a list with identical keys */
  174|    285|  x = t->samen;
  175|    285|  if(x != t) {
  176|       |    /* there is, pick one from the list */
  177|       |
  178|       |    /* 'x' is the new root node */
  179|       |
  180|      0|    x->key = t->key;
  181|      0|    x->larger = t->larger;
  182|      0|    x->smaller = t->smaller;
  183|      0|    x->samep = t->samep;
  184|      0|    t->samep->samen = x;
  185|       |
  186|      0|    *removed = t;
  187|      0|    return x; /* new root */
  188|      0|  }
  189|       |
  190|       |  /* we splayed the tree to the smallest element, there is no smaller */
  191|    285|  x = t->larger;
  192|    285|  *removed = t;
  193|       |
  194|    285|  return x;
  195|    285|}
Curl_splayremove:
  212|    472|{
  213|    472|  static const struct curltime KEY_NOTUSED = {
  214|    472|    (time_t)-1, (unsigned int)-1
  215|    472|  }; /* will *NEVER* appear */
  216|    472|  struct Curl_tree *x;
  217|       |
  218|    472|  if(!t || !removenode)
  219|      0|    return 1;
  220|       |
  221|    472|  if(compare(KEY_NOTUSED, removenode->key) == 0) {
  222|       |    /* Key set to NOTUSED means it is a subnode within a 'same' linked list
  223|       |       and thus we can unlink it easily. */
  224|      0|    if(removenode->samen == removenode)
  225|       |      /* A non-subnode should never be set to KEY_NOTUSED */
  226|      0|      return 3;
  227|       |
  228|      0|    removenode->samep->samen = removenode->samen;
  229|      0|    removenode->samen->samep = removenode->samep;
  230|       |
  231|       |    /* Ensures that double-remove gets caught. */
  232|      0|    removenode->samen = removenode;
  233|       |
  234|      0|    *newroot = t; /* return the same root */
  235|      0|    return 0;
  236|      0|  }
  237|       |
  238|    472|  t = Curl_splay(removenode->key, t);
  239|       |
  240|       |  /* First make sure that we got the same root node as the one we want
  241|       |     to remove, as otherwise we might be trying to remove a node that
  242|       |     isn't actually in the tree.
  243|       |
  244|       |     We cannot just compare the keys here as a double remove in quick
  245|       |     succession of a node with key != KEY_NOTUSED && same != NULL
  246|       |     could return the same key but a different node. */
  247|    472|  if(t != removenode)
  248|      0|    return 2;
  249|       |
  250|       |  /* Check if there is a list with identical sizes, as then we're trying to
  251|       |     remove the root node of a list of nodes with identical keys. */
  252|    472|  x = t->samen;
  253|    472|  if(x != t) {
  254|       |    /* 'x' is the new root node, we just make it use the root node's
  255|       |       smaller/larger links */
  256|       |
  257|      0|    x->key = t->key;
  258|      0|    x->larger = t->larger;
  259|      0|    x->smaller = t->smaller;
  260|      0|    x->samep = t->samep;
  261|      0|    t->samep->samen = x;
  262|      0|  }
  263|    472|  else {
  264|       |    /* Remove the root node */
  265|    472|    if(!t->smaller)
  266|    472|      x = t->larger;
  267|      0|    else {
  268|      0|      x = Curl_splay(removenode->key, t->smaller);
  269|      0|      x->larger = t->larger;
  270|      0|    }
  271|    472|  }
  272|       |
  273|    472|  *newroot = x; /* store new root pointer */
  274|       |
  275|    472|  return 0;
  276|    472|}

Curl_raw_toupper:
   34|   115k|{
   35|   115k|#if !defined(CURL_DOES_CONVERSIONS)
   36|   115k|  if(in >= 'a' && in <= 'z')
   37|  58.6k|    return (char)('A' + in - 'a');
   38|       |#else
   39|       |  switch(in) {
   40|       |  case 'a':
   41|       |    return 'A';
   42|       |  case 'b':
   43|       |    return 'B';
   44|       |  case 'c':
   45|       |    return 'C';
   46|       |  case 'd':
   47|       |    return 'D';
   48|       |  case 'e':
   49|       |    return 'E';
   50|       |  case 'f':
   51|       |    return 'F';
   52|       |  case 'g':
   53|       |    return 'G';
   54|       |  case 'h':
   55|       |    return 'H';
   56|       |  case 'i':
   57|       |    return 'I';
   58|       |  case 'j':
   59|       |    return 'J';
   60|       |  case 'k':
   61|       |    return 'K';
   62|       |  case 'l':
   63|       |    return 'L';
   64|       |  case 'm':
   65|       |    return 'M';
   66|       |  case 'n':
   67|       |    return 'N';
   68|       |  case 'o':
   69|       |    return 'O';
   70|       |  case 'p':
   71|       |    return 'P';
   72|       |  case 'q':
   73|       |    return 'Q';
   74|       |  case 'r':
   75|       |    return 'R';
   76|       |  case 's':
   77|       |    return 'S';
   78|       |  case 't':
   79|       |    return 'T';
   80|       |  case 'u':
   81|       |    return 'U';
   82|       |  case 'v':
   83|       |    return 'V';
   84|       |  case 'w':
   85|       |    return 'W';
   86|       |  case 'x':
   87|       |    return 'X';
   88|       |  case 'y':
   89|       |    return 'Y';
   90|       |  case 'z':
   91|       |    return 'Z';
   92|       |  }
   93|       |#endif
   94|       |
   95|  56.9k|  return in;
   96|   115k|}
Curl_strcasecompare:
  181|  25.6k|{
  182|  31.8k|  while(*first && *second) {
  183|  30.1k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second))
  184|       |      /* get out of the loop as soon as they don't match */
  185|  23.8k|      break;
  186|  6.28k|    first++;
  187|  6.28k|    second++;
  188|  6.28k|  }
  189|       |  /* we do the comparison here (possibly again), just to make sure that if the
  190|       |     loop above is skipped because one of the strings reached zero, we must not
  191|       |     return this as a successful match */
  192|  25.6k|  return (Curl_raw_toupper(*first) == Curl_raw_toupper(*second));
  193|  25.6k|}
Curl_strncasecompare:
  209|    234|{
  210|    237|  while(*first && *second && max) {
  211|    236|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second)) {
  212|    233|      break;
  213|    233|    }
  214|      3|    max--;
  215|      3|    first++;
  216|      3|    second++;
  217|      3|  }
  218|    234|  if(0 == max)
  219|      0|    return 1; /* they are equal this far */
  220|       |
  221|    234|  return Curl_raw_toupper(*first) == Curl_raw_toupper(*second);
  222|    234|}
Curl_strntoupper:
  230|    285|{
  231|    285|  if(n < 1)
  232|      0|    return;
  233|       |
  234|  3.13k|  do {
  235|  3.13k|    *dest++ = Curl_raw_toupper(*src);
  236|  3.13k|  } while(*src++ && --n);
  237|    285|}
Curl_strntolower:
  245|  1.14k|{
  246|  1.14k|  if(n < 1)
  247|      0|    return;
  248|       |
  249|  18.2k|  do {
  250|  18.2k|    *dest++ = raw_tolower(*src);
  251|  18.2k|  } while(*src++ && --n);
  252|  1.14k|}
curl_strnequal:
  261|    234|{
  262|    234|  return Curl_strncasecompare(first, second, max);
  263|    234|}
strcase.c:raw_tolower:
  102|  18.2k|{
  103|  18.2k|#if !defined(CURL_DOES_CONVERSIONS)
  104|  18.2k|  if(in >= 'A' && in <= 'Z')
  105|      0|    return (char)('a' + in - 'A');
  106|       |#else
  107|       |  switch(in) {
  108|       |  case 'A':
  109|       |    return 'a';
  110|       |  case 'B':
  111|       |    return 'b';
  112|       |  case 'C':
  113|       |    return 'c';
  114|       |  case 'D':
  115|       |    return 'd';
  116|       |  case 'E':
  117|       |    return 'e';
  118|       |  case 'F':
  119|       |    return 'f';
  120|       |  case 'G':
  121|       |    return 'g';
  122|       |  case 'H':
  123|       |    return 'h';
  124|       |  case 'I':
  125|       |    return 'i';
  126|       |  case 'J':
  127|       |    return 'j';
  128|       |  case 'K':
  129|       |    return 'k';
  130|       |  case 'L':
  131|       |    return 'l';
  132|       |  case 'M':
  133|       |    return 'm';
  134|       |  case 'N':
  135|       |    return 'n';
  136|       |  case 'O':
  137|       |    return 'o';
  138|       |  case 'P':
  139|       |    return 'p';
  140|       |  case 'Q':
  141|       |    return 'q';
  142|       |  case 'R':
  143|       |    return 'r';
  144|       |  case 'S':
  145|       |    return 's';
  146|       |  case 'T':
  147|       |    return 't';
  148|       |  case 'U':
  149|       |    return 'u';
  150|       |  case 'V':
  151|       |    return 'v';
  152|       |  case 'W':
  153|       |    return 'w';
  154|       |  case 'X':
  155|       |    return 'x';
  156|       |  case 'Y':
  157|       |    return 'y';
  158|       |  case 'Z':
  159|       |    return 'z';
  160|       |  }
  161|       |#endif
  162|       |
  163|  18.2k|  return in;
  164|  18.2k|}

curl_url_strerror:
  458|     56|{
  459|     56|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  460|     56|  switch(error) {
  461|      0|  case CURLUE_OK:
  462|      0|    return "No error";
  463|       |
  464|      0|  case CURLUE_BAD_HANDLE:
  465|      0|    return "An invalid CURLU pointer was passed as argument";
  466|       |
  467|      0|  case CURLUE_BAD_PARTPOINTER:
  468|      0|    return "An invalid 'part' argument was passed as argument";
  469|       |
  470|     38|  case CURLUE_MALFORMED_INPUT:
  471|     38|    return "A malformed input was passed to a URL API function";
  472|       |
  473|     14|  case CURLUE_BAD_PORT_NUMBER:
  474|     14|    return "The port number was not a decimal number between 0 and 65535";
  475|       |
  476|      0|  case CURLUE_UNSUPPORTED_SCHEME:
  477|      0|    return "This libcurl build doesn't support the given URL scheme";
  478|       |
  479|      0|  case CURLUE_URLDECODE:
  480|      0|    return "URL decode error, most likely because of rubbish in the input";
  481|       |
  482|      0|  case CURLUE_OUT_OF_MEMORY:
  483|      0|    return "A memory function failed";
  484|       |
  485|      0|  case CURLUE_USER_NOT_ALLOWED:
  486|      0|    return "Credentials was passed in the URL when prohibited";
  487|       |
  488|      0|  case CURLUE_UNKNOWN_PART:
  489|      0|    return "An unknown part ID was passed to a URL API function";
  490|       |
  491|      0|  case CURLUE_NO_SCHEME:
  492|      0|    return "There is no scheme part in the URL";
  493|       |
  494|      0|  case CURLUE_NO_USER:
  495|      0|    return "There is no user part in the URL";
  496|       |
  497|      0|  case CURLUE_NO_PASSWORD:
  498|      0|    return "There is no password part in the URL";
  499|       |
  500|      0|  case CURLUE_NO_OPTIONS:
  501|      0|    return "There is no options part in the URL";
  502|       |
  503|      4|  case CURLUE_NO_HOST:
  504|      4|    return "There is no host part in the URL";
  505|       |
  506|      0|  case CURLUE_NO_PORT:
  507|      0|    return "There is no port part in the URL";
  508|       |
  509|      0|  case CURLUE_NO_QUERY:
  510|      0|    return "There is no query part in the URL";
  511|       |
  512|      0|  case CURLUE_NO_FRAGMENT:
  513|      0|    return "There is no fragment part in the URL";
  514|       |
  515|      0|  case CURLUE_LAST:
  516|      0|    break;
  517|     56|  }
  518|       |
  519|      0|  return "CURLUcode unknown";
  520|       |#else
  521|       |  if(error == CURLUE_OK)
  522|       |    return "No error";
  523|       |  else
  524|       |    return "Error";
  525|       |#endif
  526|     56|}
Curl_strerror:
  788|    285|{
  789|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  790|       |  DWORD old_win_err = GetLastError();
  791|       |#endif
  792|    285|  int old_errno = errno;
  793|    285|  char *p;
  794|    285|  size_t max;
  795|       |
  796|    285|  if(!buflen)
  797|      0|    return NULL;
  798|       |
  799|    285|#ifndef WIN32
  800|    285|  DEBUGASSERT(err >= 0);
  801|    285|#endif
  802|       |
  803|    285|  max = buflen - 1;
  804|    285|  *buf = '\0';
  805|       |
  806|       |#if defined(WIN32) || defined(_WIN32_WCE)
  807|       |#if defined(WIN32)
  808|       |  /* 'sys_nerr' is the maximum errno number, it is not widely portable */
  809|       |  if(err >= 0 && err < sys_nerr)
  810|       |    strncpy(buf, sys_errlist[err], max);
  811|       |  else
  812|       |#endif
  813|       |  {
  814|       |    if(
  815|       |#ifdef USE_WINSOCK
  816|       |       !get_winsock_error(err, buf, max) &&
  817|       |#endif
  818|       |       !get_winapi_error((DWORD)err, buf, max))
  819|       |      msnprintf(buf, max, "Unknown error %d (%#x)", err, err);
  820|       |  }
  821|       |#else /* not Windows coming up */
  822|       |
  823|    285|#if defined(HAVE_STRERROR_R) && defined(HAVE_POSIX_STRERROR_R)
  824|       | /*
  825|       |  * The POSIX-style strerror_r() may set errno to ERANGE if insufficient
  826|       |  * storage is supplied via 'strerrbuf' and 'buflen' to hold the generated
  827|       |  * message string, or EINVAL if 'errnum' is not a valid error number.
  828|       |  */
  829|    285|  if(0 != strerror_r(err, buf, max)) {
  830|      0|    if('\0' == buf[0])
  831|      0|      msnprintf(buf, max, "Unknown error %d", err);
  832|      0|  }
  833|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_GLIBC_STRERROR_R)
  834|       | /*
  835|       |  * The glibc-style strerror_r() only *might* use the buffer we pass to
  836|       |  * the function, but it always returns the error message as a pointer,
  837|       |  * so we must copy that string unconditionally (if non-NULL).
  838|       |  */
  839|       |  {
  840|       |    char buffer[256];
  841|       |    char *msg = strerror_r(err, buffer, sizeof(buffer));
  842|       |    if(msg)
  843|       |      strncpy(buf, msg, max);
  844|       |    else
  845|       |      msnprintf(buf, max, "Unknown error %d", err);
  846|       |  }
  847|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_VXWORKS_STRERROR_R)
  848|       | /*
  849|       |  * The vxworks-style strerror_r() does use the buffer we pass to the function.
  850|       |  * The buffer size should be at least NAME_MAX (256)
  851|       |  */
  852|       |  {
  853|       |    char buffer[256];
  854|       |    if(OK == strerror_r(err, buffer))
  855|       |      strncpy(buf, buffer, max);
  856|       |    else
  857|       |      msnprintf(buf, max, "Unknown error %d", err);
  858|       |  }
  859|       |#else
  860|       |  {
  861|       |    /* !checksrc! disable STRERROR 1 */
  862|       |    const char *msg = strerror(err);
  863|       |    if(msg)
  864|       |      strncpy(buf, msg, max);
  865|       |    else
  866|       |      msnprintf(buf, max, "Unknown error %d", err);
  867|       |  }
  868|       |#endif
  869|       |
  870|    285|#endif /* end of not Windows */
  871|       |
  872|    285|  buf[max] = '\0'; /* make sure the string is null-terminated */
  873|       |
  874|       |  /* strip trailing '\r\n' or '\n'. */
  875|    285|  p = strrchr(buf, '\n');
  876|    285|  if(p && (p - buf) >= 2)
  877|      0|    *p = '\0';
  878|    285|  p = strrchr(buf, '\r');
  879|    285|  if(p && (p - buf) >= 1)
  880|      0|    *p = '\0';
  881|       |
  882|    285|  if(errno != old_errno)
  883|      0|    errno = old_errno;
  884|       |
  885|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  886|       |  if(old_win_err != GetLastError())
  887|       |    SetLastError(old_win_err);
  888|       |#endif
  889|       |
  890|    285|  return buf;
  891|    285|}

Curl_now:
   62|  31.7M|{
   63|       |  /*
   64|       |  ** clock_gettime() is granted to be increased monotonically when the
   65|       |  ** monotonic clock is queried. Time starting point is unspecified, it
   66|       |  ** could be the system start-up time, the Epoch, or something else,
   67|       |  ** in any case the time starting point does not change once that the
   68|       |  ** system has started up.
   69|       |  */
   70|  31.7M|#ifdef HAVE_GETTIMEOFDAY
   71|  31.7M|  struct timeval now;
   72|  31.7M|#endif
   73|  31.7M|  struct curltime cnow;
   74|  31.7M|  struct timespec tsnow;
   75|       |
   76|       |  /*
   77|       |  ** clock_gettime() may be defined by Apple's SDK as weak symbol thus
   78|       |  ** code compiles but fails during run-time if clock_gettime() is
   79|       |  ** called on unsupported OS version.
   80|       |  */
   81|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   82|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   83|       |  bool have_clock_gettime = FALSE;
   84|       |  if(__builtin_available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *))
   85|       |    have_clock_gettime = TRUE;
   86|       |#endif
   87|       |
   88|  31.7M|  if(
   89|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   90|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   91|       |    have_clock_gettime &&
   92|       |#endif
   93|  31.7M|    (0 == clock_gettime(CLOCK_MONOTONIC, &tsnow))) {
   94|  31.7M|    cnow.tv_sec = tsnow.tv_sec;
   95|  31.7M|    cnow.tv_usec = (unsigned int)(tsnow.tv_nsec / 1000);
   96|  31.7M|  }
   97|       |  /*
   98|       |  ** Even when the configure process has truly detected monotonic clock
   99|       |  ** availability, it might happen that it is not actually available at
  100|       |  ** run-time. When this occurs simply fallback to other time source.
  101|       |  */
  102|      0|#ifdef HAVE_GETTIMEOFDAY
  103|      0|  else {
  104|      0|    (void)gettimeofday(&now, NULL);
  105|      0|    cnow.tv_sec = now.tv_sec;
  106|      0|    cnow.tv_usec = (unsigned int)now.tv_usec;
  107|      0|  }
  108|       |#else
  109|       |  else {
  110|       |    cnow.tv_sec = time(NULL);
  111|       |    cnow.tv_usec = 0;
  112|       |  }
  113|       |#endif
  114|  31.7M|  return cnow;
  115|  31.7M|}
Curl_timediff:
  187|  15.8M|{
  188|  15.8M|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  189|  15.8M|  if(diff >= (TIMEDIFF_T_MAX/1000))
  190|      0|    return TIMEDIFF_T_MAX;
  191|  15.8M|  else if(diff <= (TIMEDIFF_T_MIN/1000))
  192|      0|    return TIMEDIFF_T_MIN;
  193|  15.8M|  return diff * 1000 + (newer.tv_usec-older.tv_usec)/1000;
  194|  15.8M|}
Curl_timediff_us:
  201|  15.8M|{
  202|  15.8M|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  203|  15.8M|  if(diff >= (TIMEDIFF_T_MAX/1000000))
  204|      0|    return TIMEDIFF_T_MAX;
  205|  15.8M|  else if(diff <= (TIMEDIFF_T_MIN/1000000))
  206|      0|    return TIMEDIFF_T_MIN;
  207|  15.8M|  return diff * 1000000 + newer.tv_usec-older.tv_usec;
  208|  15.8M|}

Curl_readwrite:
 1176|      4|{
 1177|      4|  struct SingleRequest *k = &data->req;
 1178|      4|  CURLcode result;
 1179|      4|  int didwhat = 0;
 1180|       |
 1181|      4|  curl_socket_t fd_read;
 1182|      4|  curl_socket_t fd_write;
 1183|      4|  int select_res = conn->cselect_bits;
 1184|       |
 1185|      4|  conn->cselect_bits = 0;
 1186|       |
 1187|       |  /* only use the proper socket if the *_HOLD bit is not set simultaneously as
 1188|       |     then we are in rate limiting state in that transfer direction */
 1189|       |
 1190|      4|  if((k->keepon & KEEP_RECVBITS) == KEEP_RECV)
 1191|      0|    fd_read = conn->sockfd;
 1192|      4|  else
 1193|      4|    fd_read = CURL_SOCKET_BAD;
 1194|       |
 1195|      4|  if((k->keepon & KEEP_SENDBITS) == KEEP_SEND)
 1196|      0|    fd_write = conn->writesockfd;
 1197|      4|  else
 1198|      4|    fd_write = CURL_SOCKET_BAD;
 1199|       |
 1200|      4|  if(data->state.drain) {
 1201|      0|    select_res |= CURL_CSELECT_IN;
 1202|      0|    DEBUGF(infof(data, "Curl_readwrite: forcibly told to drain data"));
 1203|      0|  }
 1204|       |
 1205|      4|  if(!select_res) /* Call for select()/poll() only, if read/write/error
 1206|       |                     status is not known. */
 1207|      4|    select_res = Curl_socket_check(fd_read, CURL_SOCKET_BAD, fd_write, 0);
 1208|       |
 1209|      4|  if(select_res == CURL_CSELECT_ERR) {
 1210|      0|    failf(data, "select/poll returned error");
 1211|      0|    return CURLE_SEND_ERROR;
 1212|      0|  }
 1213|       |
 1214|       |#ifdef USE_HYPER
 1215|       |  if(conn->datastream) {
 1216|       |    result = conn->datastream(data, conn, &didwhat, done, select_res);
 1217|       |    if(result || *done)
 1218|       |      return result;
 1219|       |  }
 1220|       |  else {
 1221|       |#endif
 1222|       |  /* We go ahead and do a read if we have a readable socket or if
 1223|       |     the stream was rewound (in which case we have data in a
 1224|       |     buffer) */
 1225|      4|  if((k->keepon & KEEP_RECV) && (select_res & CURL_CSELECT_IN)) {
 1226|      0|    result = readwrite_data(data, conn, k, &didwhat, done, comeback);
 1227|      0|    if(result || *done)
 1228|      0|      return result;
 1229|      0|  }
 1230|       |
 1231|       |  /* If we still have writing to do, we check if we have a writable socket. */
 1232|      4|  if((k->keepon & KEEP_SEND) && (select_res & CURL_CSELECT_OUT)) {
 1233|       |    /* write */
 1234|       |
 1235|      0|    result = readwrite_upload(data, conn, &didwhat);
 1236|      0|    if(result)
 1237|      0|      return result;
 1238|      0|  }
 1239|       |#ifdef USE_HYPER
 1240|       |  }
 1241|       |#endif
 1242|       |
 1243|      4|  k->now = Curl_now();
 1244|      4|  if(!didwhat) {
 1245|       |    /* no read no write, this is a timeout? */
 1246|      4|    if(k->exp100 == EXP100_AWAITING_CONTINUE) {
 1247|       |      /* This should allow some time for the header to arrive, but only a
 1248|       |         very short time as otherwise it'll be too much wasted time too
 1249|       |         often. */
 1250|       |
 1251|       |      /* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":
 1252|       |
 1253|       |         Therefore, when a client sends this header field to an origin server
 1254|       |         (possibly via a proxy) from which it has never seen a 100 (Continue)
 1255|       |         status, the client SHOULD NOT wait for an indefinite period before
 1256|       |         sending the request body.
 1257|       |
 1258|       |      */
 1259|       |
 1260|      0|      timediff_t ms = Curl_timediff(k->now, k->start100);
 1261|      0|      if(ms >= data->set.expect_100_timeout) {
 1262|       |        /* we've waited long enough, continue anyway */
 1263|      0|        k->exp100 = EXP100_SEND_DATA;
 1264|      0|        k->keepon |= KEEP_SEND;
 1265|      0|        Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 1266|      0|        infof(data, "Done waiting for 100-continue");
 1267|      0|      }
 1268|      0|    }
 1269|      4|  }
 1270|       |
 1271|      4|  if(Curl_pgrsUpdate(data))
 1272|      0|    result = CURLE_ABORTED_BY_CALLBACK;
 1273|      4|  else
 1274|      4|    result = Curl_speedcheck(data, k->now);
 1275|      4|  if(result)
 1276|      0|    return result;
 1277|       |
 1278|      4|  if(k->keepon) {
 1279|      0|    if(0 > Curl_timeleft(data, &k->now, FALSE)) {
 1280|      0|      if(k->size != -1) {
 1281|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1282|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1283|      0|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1284|      0|              Curl_timediff(k->now, data->progress.t_startsingle),
 1285|      0|              k->bytecount, k->size);
 1286|      0|      }
 1287|      0|      else {
 1288|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1289|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " bytes received",
 1290|      0|              Curl_timediff(k->now, data->progress.t_startsingle),
 1291|      0|              k->bytecount);
 1292|      0|      }
 1293|      0|      return CURLE_OPERATION_TIMEDOUT;
 1294|      0|    }
 1295|      0|  }
 1296|      4|  else {
 1297|       |    /*
 1298|       |     * The transfer has been performed. Just make some general checks before
 1299|       |     * returning.
 1300|       |     */
 1301|       |
 1302|      4|    if(!(data->set.opt_no_body) && (k->size != -1) &&
 1303|      4|       (k->bytecount != k->size) &&
 1304|      4|#ifdef CURL_DO_LINEEND_CONV
 1305|       |       /* Most FTP servers don't adjust their file SIZE response for CRLFs,
 1306|       |          so we'll check to see if the discrepancy can be explained
 1307|       |          by the number of CRLFs we've changed to LFs.
 1308|       |       */
 1309|      4|       (k->bytecount != (k->size + data->state.crlf_conversions)) &&
 1310|      4|#endif /* CURL_DO_LINEEND_CONV */
 1311|      4|       !k->newurl) {
 1312|      0|      failf(data, "transfer closed with %" CURL_FORMAT_CURL_OFF_T
 1313|      0|            " bytes remaining to read", k->size - k->bytecount);
 1314|      0|      return CURLE_PARTIAL_FILE;
 1315|      0|    }
 1316|      4|    if(!(data->set.opt_no_body) && k->chunk &&
 1317|      4|       (conn->chunk.state != CHUNK_STOP)) {
 1318|       |      /*
 1319|       |       * In chunked mode, return an error if the connection is closed prior to
 1320|       |       * the empty (terminating) chunk is read.
 1321|       |       *
 1322|       |       * The condition above used to check for
 1323|       |       * conn->proto.http->chunk.datasize != 0 which is true after reading
 1324|       |       * *any* chunk, not just the empty chunk.
 1325|       |       *
 1326|       |       */
 1327|      0|      failf(data, "transfer closed with outstanding read data remaining");
 1328|      0|      return CURLE_PARTIAL_FILE;
 1329|      0|    }
 1330|      4|    if(Curl_pgrsUpdate(data))
 1331|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1332|      4|  }
 1333|       |
 1334|       |  /* Now update the "done" boolean we return */
 1335|      4|  *done = (0 == (k->keepon&(KEEP_RECV|KEEP_SEND|
 1336|      4|                            KEEP_RECV_PAUSE|KEEP_SEND_PAUSE))) ? TRUE : FALSE;
 1337|       |
 1338|      4|  return CURLE_OK;
 1339|      4|}
Curl_init_CONNECT:
 1391|    406|{
 1392|    406|  data->state.fread_func = data->set.fread_func_set;
 1393|    406|  data->state.in = data->set.in_set;
 1394|    406|}
Curl_pretransfer:
 1402|    472|{
 1403|    472|  CURLcode result;
 1404|       |
 1405|    472|  if(!data->state.url && !data->set.uh) {
 1406|       |    /* we can't do anything without URL */
 1407|     66|    failf(data, "No URL set!");
 1408|     66|    return CURLE_URL_MALFORMAT;
 1409|     66|  }
 1410|       |
 1411|       |  /* since the URL may have been redirected in a previous use of this handle */
 1412|    406|  if(data->state.url_alloc) {
 1413|       |    /* the already set URL is allocated, free it first! */
 1414|      0|    Curl_safefree(data->state.url);
 1415|      0|    data->state.url_alloc = FALSE;
 1416|      0|  }
 1417|       |
 1418|    406|  if(!data->state.url && data->set.uh) {
 1419|      0|    CURLUcode uc;
 1420|      0|    free(data->set.str[STRING_SET_URL]);
 1421|      0|    uc = curl_url_get(data->set.uh,
 1422|      0|                      CURLUPART_URL, &data->set.str[STRING_SET_URL], 0);
 1423|      0|    if(uc) {
 1424|      0|      failf(data, "No URL set!");
 1425|      0|      return CURLE_URL_MALFORMAT;
 1426|      0|    }
 1427|      0|  }
 1428|       |
 1429|    406|  data->state.prefer_ascii = data->set.prefer_ascii;
 1430|    406|  data->state.list_only = data->set.list_only;
 1431|    406|  data->state.httpreq = data->set.method;
 1432|    406|  data->state.url = data->set.str[STRING_SET_URL];
 1433|       |
 1434|       |  /* Init the SSL session ID cache here. We do it here since we want to do it
 1435|       |     after the *_setopt() calls (that could specify the size of the cache) but
 1436|       |     before any transfer takes place. */
 1437|    406|  result = Curl_ssl_initsessions(data, data->set.general_ssl.max_ssl_sessions);
 1438|    406|  if(result)
 1439|      0|    return result;
 1440|       |
 1441|    406|  data->state.wildcardmatch = data->set.wildcard_enabled;
 1442|    406|  data->state.followlocation = 0; /* reset the location-follow counter */
 1443|    406|  data->state.this_is_a_follow = FALSE; /* reset this */
 1444|    406|  data->state.errorbuf = FALSE; /* no error has occurred */
 1445|    406|  data->state.httpwant = data->set.httpwant;
 1446|    406|  data->state.httpversion = 0;
 1447|    406|  data->state.authproblem = FALSE;
 1448|    406|  data->state.authhost.want = data->set.httpauth;
 1449|    406|  data->state.authproxy.want = data->set.proxyauth;
 1450|    406|  Curl_safefree(data->info.wouldredirect);
 1451|       |
 1452|    406|  if(data->state.httpreq == HTTPREQ_PUT)
 1453|      1|    data->state.infilesize = data->set.filesize;
 1454|    405|  else if((data->state.httpreq != HTTPREQ_GET) &&
 1455|    405|          (data->state.httpreq != HTTPREQ_HEAD)) {
 1456|      5|    data->state.infilesize = data->set.postfieldsize;
 1457|      5|    if(data->set.postfields && (data->state.infilesize == -1))
 1458|      2|      data->state.infilesize = (curl_off_t)strlen(data->set.postfields);
 1459|      5|  }
 1460|    400|  else
 1461|    400|    data->state.infilesize = 0;
 1462|       |
 1463|       |  /* If there is a list of cookie files to read, do it now! */
 1464|    406|  if(data->state.cookielist)
 1465|      0|    Curl_cookie_loadfiles(data);
 1466|       |
 1467|       |  /* If there is a list of host pairs to deal with */
 1468|    406|  if(data->state.resolve)
 1469|      0|    result = Curl_loadhostpairs(data);
 1470|       |
 1471|    406|  if(!result) {
 1472|       |    /* Allow data->set.use_port to set which port to use. This needs to be
 1473|       |     * disabled for example when we follow Location: headers to URLs using
 1474|       |     * different ports! */
 1475|    406|    data->state.allow_port = TRUE;
 1476|       |
 1477|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1478|       |    /*************************************************************
 1479|       |     * Tell signal handler to ignore SIGPIPE
 1480|       |     *************************************************************/
 1481|       |    if(!data->set.no_signal)
 1482|       |      data->state.prev_signal = signal(SIGPIPE, SIG_IGN);
 1483|       |#endif
 1484|       |
 1485|    406|    Curl_initinfo(data); /* reset session-specific information "variables" */
 1486|    406|    Curl_pgrsResetTransferSizes(data);
 1487|    406|    Curl_pgrsStartNow(data);
 1488|       |
 1489|       |    /* In case the handle is re-used and an authentication method was picked
 1490|       |       in the session we need to make sure we only use the one(s) we now
 1491|       |       consider to be fine */
 1492|    406|    data->state.authhost.picked &= data->state.authhost.want;
 1493|    406|    data->state.authproxy.picked &= data->state.authproxy.want;
 1494|       |
 1495|    406|#ifndef CURL_DISABLE_FTP
 1496|    406|    if(data->state.wildcardmatch) {
 1497|      0|      struct WildcardData *wc = &data->wildcard;
 1498|      0|      if(wc->state < CURLWC_INIT) {
 1499|      0|        result = Curl_wildcard_init(wc); /* init wildcard structures */
 1500|      0|        if(result)
 1501|      0|          return CURLE_OUT_OF_MEMORY;
 1502|      0|      }
 1503|      0|    }
 1504|    406|#endif
 1505|    406|    Curl_http2_init_state(&data->state);
 1506|    406|    result = Curl_hsts_loadcb(data, data->hsts);
 1507|    406|  }
 1508|       |
 1509|       |  /*
 1510|       |   * Set user-agent. Used for HTTP, but since we can attempt to tunnel
 1511|       |   * basically anything through a http proxy we can't limit this based on
 1512|       |   * protocol.
 1513|       |   */
 1514|    406|  if(data->set.str[STRING_USERAGENT]) {
 1515|      0|    Curl_safefree(data->state.aptr.uagent);
 1516|      0|    data->state.aptr.uagent =
 1517|      0|      aprintf("User-Agent: %s\r\n", data->set.str[STRING_USERAGENT]);
 1518|      0|    if(!data->state.aptr.uagent)
 1519|      0|      return CURLE_OUT_OF_MEMORY;
 1520|      0|  }
 1521|       |
 1522|    406|  if(!result)
 1523|    406|    result = Curl_setstropt(&data->state.aptr.user,
 1524|    406|                            data->set.str[STRING_USERNAME]);
 1525|    406|  if(!result)
 1526|    406|    result = Curl_setstropt(&data->state.aptr.passwd,
 1527|    406|                            data->set.str[STRING_PASSWORD]);
 1528|    406|  if(!result)
 1529|    406|    result = Curl_setstropt(&data->state.aptr.proxyuser,
 1530|    406|                            data->set.str[STRING_PROXYUSERNAME]);
 1531|    406|  if(!result)
 1532|    406|    result = Curl_setstropt(&data->state.aptr.proxypasswd,
 1533|    406|                            data->set.str[STRING_PROXYPASSWORD]);
 1534|       |
 1535|    406|  data->req.headerbytecount = 0;
 1536|    406|  return result;
 1537|    406|}
Curl_posttransfer:
 1543|    142|{
 1544|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1545|       |  /* restore the signal handler for SIGPIPE before we get back */
 1546|       |  if(!data->set.no_signal)
 1547|       |    signal(SIGPIPE, data->state.prev_signal);
 1548|       |#else
 1549|    142|  (void)data; /* unused parameter */
 1550|    142|#endif
 1551|       |
 1552|    142|  return CURLE_OK;
 1553|    142|}
Curl_retry_request:
 1798|      4|{
 1799|      4|  struct connectdata *conn = data->conn;
 1800|      4|  bool retry = FALSE;
 1801|      4|  *url = NULL;
 1802|       |
 1803|       |  /* if we're talking upload, we can't do the checks below, unless the protocol
 1804|       |     is HTTP as when uploading over HTTP we will still get a response */
 1805|      4|  if(data->set.upload &&
 1806|      4|     !(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)))
 1807|      0|    return CURLE_OK;
 1808|       |
 1809|      4|  if((data->req.bytecount + data->req.headerbytecount == 0) &&
 1810|      4|      conn->bits.reuse &&
 1811|      4|      (!data->set.opt_no_body
 1812|      0|        || (conn->handler->protocol & PROTO_FAMILY_HTTP)) &&
 1813|      4|      (data->set.rtspreq != RTSPREQ_RECEIVE))
 1814|       |    /* We got no data, we attempted to re-use a connection. For HTTP this
 1815|       |       can be a retry so we try again regardless if we expected a body.
 1816|       |       For other protocols we only try again only if we expected a body.
 1817|       |
 1818|       |       This might happen if the connection was left alive when we were
 1819|       |       done using it before, but that was closed when we wanted to read from
 1820|       |       it again. Bad luck. Retry the same request on a fresh connect! */
 1821|      0|    retry = TRUE;
 1822|      4|  else if(data->state.refused_stream &&
 1823|      4|          (data->req.bytecount + data->req.headerbytecount == 0) ) {
 1824|       |    /* This was sent on a refused stream, safe to rerun. A refused stream
 1825|       |       error can typically only happen on HTTP/2 level if the stream is safe
 1826|       |       to issue again, but the nghttp2 API can deliver the message to other
 1827|       |       streams as well, which is why this adds the check the data counters
 1828|       |       too. */
 1829|      0|    infof(data, "REFUSED_STREAM, retrying a fresh connect");
 1830|      0|    data->state.refused_stream = FALSE; /* clear again */
 1831|      0|    retry = TRUE;
 1832|      0|  }
 1833|      4|  if(retry) {
 1834|      0|#define CONN_MAX_RETRIES 5
 1835|      0|    if(data->state.retrycount++ >= CONN_MAX_RETRIES) {
 1836|      0|      failf(data, "Connection died, tried %d times before giving up",
 1837|      0|            CONN_MAX_RETRIES);
 1838|      0|      data->state.retrycount = 0;
 1839|      0|      return CURLE_SEND_ERROR;
 1840|      0|    }
 1841|      0|    infof(data, "Connection died, retrying a fresh connect (retry count: %d)",
 1842|      0|          data->state.retrycount);
 1843|      0|    *url = strdup(data->state.url);
 1844|      0|    if(!*url)
 1845|      0|      return CURLE_OUT_OF_MEMORY;
 1846|       |
 1847|      0|    connclose(conn, "retry"); /* close this connection */
 1848|      0|    conn->bits.retry = TRUE; /* mark this as a connection we're about
 1849|       |                                to retry. Marking it this way should
 1850|       |                                prevent i.e HTTP transfers to return
 1851|       |                                error just because nothing has been
 1852|       |                                transferred! */
 1853|       |
 1854|       |
 1855|      0|    if(conn->handler->protocol&PROTO_FAMILY_HTTP) {
 1856|      0|      if(data->req.writebytecount) {
 1857|      0|        CURLcode result = Curl_readrewind(data);
 1858|      0|        if(result) {
 1859|      0|          Curl_safefree(*url);
 1860|      0|          return result;
 1861|      0|        }
 1862|      0|      }
 1863|      0|    }
 1864|      0|  }
 1865|      4|  return CURLE_OK;
 1866|      4|}

Curl_freeset:
  310|  1.04k|{
  311|       |  /* Free all dynamic strings stored in the data->set substructure. */
  312|  1.04k|  enum dupstring i;
  313|  1.04k|  enum dupblob j;
  314|       |
  315|  85.7k|  for(i = (enum dupstring)0; i < STRING_LAST; i++) {
  316|  84.7k|    Curl_safefree(data->set.str[i]);
  317|  84.7k|  }
  318|       |
  319|  9.41k|  for(j = (enum dupblob)0; j < BLOB_LAST; j++) {
  320|  8.36k|    Curl_safefree(data->set.blobs[j]);
  321|  8.36k|  }
  322|       |
  323|  1.04k|  if(data->state.referer_alloc) {
  324|      0|    Curl_safefree(data->state.referer);
  325|      0|    data->state.referer_alloc = FALSE;
  326|      0|  }
  327|  1.04k|  data->state.referer = NULL;
  328|  1.04k|  if(data->state.url_alloc) {
  329|    350|    Curl_safefree(data->state.url);
  330|    350|    data->state.url_alloc = FALSE;
  331|    350|  }
  332|  1.04k|  data->state.url = NULL;
  333|       |
  334|  1.04k|  Curl_mime_cleanpart(&data->set.mimepost);
  335|  1.04k|}
Curl_close:
  363|  1.04k|{
  364|  1.04k|  struct Curl_multi *m;
  365|  1.04k|  struct Curl_easy *data;
  366|       |
  367|  1.04k|  if(!datap || !*datap)
  368|      0|    return CURLE_OK;
  369|       |
  370|  1.04k|  data = *datap;
  371|  1.04k|  *datap = NULL;
  372|       |
  373|  1.04k|  Curl_expire_clear(data); /* shut off timers */
  374|       |
  375|       |  /* Detach connection if any is left. This should not be normal, but can be
  376|       |     the case for example with CONNECT_ONLY + recv/send (test 556) */
  377|  1.04k|  Curl_detach_connnection(data);
  378|  1.04k|  m = data->multi;
  379|  1.04k|  if(m)
  380|       |    /* This handle is still part of a multi handle, take care of this first
  381|       |       and detach this handle from there. */
  382|      0|    curl_multi_remove_handle(data->multi, data);
  383|       |
  384|  1.04k|  if(data->multi_easy) {
  385|       |    /* when curl_easy_perform() is used, it creates its own multi handle to
  386|       |       use and this is the one */
  387|      0|    curl_multi_cleanup(data->multi_easy);
  388|      0|    data->multi_easy = NULL;
  389|      0|  }
  390|       |
  391|       |  /* Destroy the timeout list that is held in the easy handle. It is
  392|       |     /normally/ done by curl_multi_remove_handle() but this is "just in
  393|       |     case" */
  394|  1.04k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  395|       |
  396|  1.04k|  data->magic = 0; /* force a clear AFTER the possibly enforced removal from
  397|       |                      the multi handle, since that function uses the magic
  398|       |                      field! */
  399|       |
  400|  1.04k|  if(data->state.rangestringalloc)
  401|      0|    free(data->state.range);
  402|       |
  403|       |  /* freed here just in case DONE wasn't called */
  404|  1.04k|  Curl_free_request_state(data);
  405|       |
  406|       |  /* Close down all open SSL info and sessions */
  407|  1.04k|  Curl_ssl_close_all(data);
  408|  1.04k|  Curl_safefree(data->state.first_host);
  409|  1.04k|  Curl_safefree(data->state.scratch);
  410|  1.04k|  Curl_ssl_free_certinfo(data);
  411|       |
  412|       |  /* Cleanup possible redirect junk */
  413|  1.04k|  free(data->req.newurl);
  414|  1.04k|  data->req.newurl = NULL;
  415|       |
  416|  1.04k|  if(data->state.referer_alloc) {
  417|      0|    Curl_safefree(data->state.referer);
  418|      0|    data->state.referer_alloc = FALSE;
  419|      0|  }
  420|  1.04k|  data->state.referer = NULL;
  421|       |
  422|  1.04k|  up_free(data);
  423|  1.04k|  Curl_safefree(data->state.buffer);
  424|  1.04k|  Curl_dyn_free(&data->state.headerb);
  425|  1.04k|  Curl_safefree(data->state.ulbuf);
  426|  1.04k|  Curl_flush_cookies(data, TRUE);
  427|  1.04k|  Curl_altsvc_save(data, data->asi, data->set.str[STRING_ALTSVC]);
  428|  1.04k|  Curl_altsvc_cleanup(&data->asi);
  429|  1.04k|  Curl_hsts_save(data, data->hsts, data->set.str[STRING_HSTS]);
  430|  1.04k|  Curl_hsts_cleanup(&data->hsts);
  431|  1.04k|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_CRYPTO_AUTH)
  432|  1.04k|  Curl_http_auth_cleanup_digest(data);
  433|  1.04k|#endif
  434|  1.04k|  Curl_safefree(data->info.contenttype);
  435|  1.04k|  Curl_safefree(data->info.wouldredirect);
  436|       |
  437|       |  /* this destroys the channel and we cannot use it anymore after this */
  438|  1.04k|  Curl_resolver_cleanup(data->state.async.resolver);
  439|       |
  440|  1.04k|  Curl_http2_cleanup_dependencies(data);
  441|  1.04k|  Curl_convert_close(data);
  442|       |
  443|       |  /* No longer a dirty share, if it exists */
  444|  1.04k|  if(data->share) {
  445|      0|    Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
  446|      0|    data->share->dirty--;
  447|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
  448|      0|  }
  449|       |
  450|  1.04k|  Curl_safefree(data->state.aptr.proxyuserpwd);
  451|  1.04k|  Curl_safefree(data->state.aptr.uagent);
  452|  1.04k|  Curl_safefree(data->state.aptr.userpwd);
  453|  1.04k|  Curl_safefree(data->state.aptr.accept_encoding);
  454|  1.04k|  Curl_safefree(data->state.aptr.te);
  455|  1.04k|  Curl_safefree(data->state.aptr.rangeline);
  456|  1.04k|  Curl_safefree(data->state.aptr.ref);
  457|  1.04k|  Curl_safefree(data->state.aptr.host);
  458|  1.04k|  Curl_safefree(data->state.aptr.cookiehost);
  459|  1.04k|  Curl_safefree(data->state.aptr.rtsp_transport);
  460|  1.04k|  Curl_safefree(data->state.aptr.user);
  461|  1.04k|  Curl_safefree(data->state.aptr.passwd);
  462|  1.04k|  Curl_safefree(data->state.aptr.proxyuser);
  463|  1.04k|  Curl_safefree(data->state.aptr.proxypasswd);
  464|       |
  465|  1.04k|#ifndef CURL_DISABLE_DOH
  466|  1.04k|  if(data->req.doh) {
  467|      0|    Curl_dyn_free(&data->req.doh->probe[0].serverdoh);
  468|      0|    Curl_dyn_free(&data->req.doh->probe[1].serverdoh);
  469|      0|    curl_slist_free_all(data->req.doh->headers);
  470|      0|    Curl_safefree(data->req.doh);
  471|      0|  }
  472|  1.04k|#endif
  473|       |
  474|       |  /* destruct wildcard structures if it is needed */
  475|  1.04k|  Curl_wildcard_dtor(&data->wildcard);
  476|  1.04k|  Curl_freeset(data);
  477|  1.04k|  free(data);
  478|  1.04k|  return CURLE_OK;
  479|  1.04k|}
Curl_init_userdefined:
  486|  1.04k|{
  487|  1.04k|  struct UserDefined *set = &data->set;
  488|  1.04k|  CURLcode result = CURLE_OK;
  489|       |
  490|  1.04k|  set->out = stdout; /* default output to stdout */
  491|  1.04k|  set->in_set = stdin;  /* default input from stdin */
  492|  1.04k|  set->err  = stderr;  /* default stderr to stderr */
  493|       |
  494|       |  /* use fwrite as default function to store output */
  495|  1.04k|  set->fwrite_func = (curl_write_callback)fwrite;
  496|       |
  497|       |  /* use fread as default function to read input */
  498|  1.04k|  set->fread_func_set = (curl_read_callback)fread;
  499|  1.04k|  set->is_fread_set = 0;
  500|  1.04k|  set->is_fwrite_set = 0;
  501|       |
  502|  1.04k|  set->seek_func = ZERO_NULL;
  503|  1.04k|  set->seek_client = ZERO_NULL;
  504|       |
  505|       |  /* conversion callbacks for non-ASCII hosts */
  506|  1.04k|  set->convfromnetwork = ZERO_NULL;
  507|  1.04k|  set->convtonetwork   = ZERO_NULL;
  508|  1.04k|  set->convfromutf8    = ZERO_NULL;
  509|       |
  510|  1.04k|  set->filesize = -1;        /* we don't know the size */
  511|  1.04k|  set->postfieldsize = -1;   /* unknown size */
  512|  1.04k|  set->maxredirs = -1;       /* allow any amount by default */
  513|       |
  514|  1.04k|  set->method = HTTPREQ_GET; /* Default HTTP request */
  515|  1.04k|  set->rtspreq = RTSPREQ_OPTIONS; /* Default RTSP request */
  516|  1.04k|#ifndef CURL_DISABLE_FTP
  517|  1.04k|  set->ftp_use_epsv = TRUE;   /* FTP defaults to EPSV operations */
  518|  1.04k|  set->ftp_use_eprt = TRUE;   /* FTP defaults to EPRT operations */
  519|  1.04k|  set->ftp_use_pret = FALSE;  /* mainly useful for drftpd servers */
  520|  1.04k|  set->ftp_filemethod = FTPFILE_MULTICWD;
  521|  1.04k|  set->ftp_skip_ip = TRUE;    /* skip PASV IP by default */
  522|  1.04k|#endif
  523|  1.04k|  set->dns_cache_timeout = 60; /* Timeout every 60 seconds by default */
  524|       |
  525|       |  /* Set the default size of the SSL session ID cache */
  526|  1.04k|  set->general_ssl.max_ssl_sessions = 5;
  527|       |
  528|  1.04k|  set->proxyport = 0;
  529|  1.04k|  set->proxytype = CURLPROXY_HTTP; /* defaults to HTTP proxy */
  530|  1.04k|  set->httpauth = CURLAUTH_BASIC;  /* defaults to basic */
  531|  1.04k|  set->proxyauth = CURLAUTH_BASIC; /* defaults to basic */
  532|       |
  533|       |  /* SOCKS5 proxy auth defaults to username/password + GSS-API */
  534|  1.04k|  set->socks5auth = CURLAUTH_BASIC | CURLAUTH_GSSAPI;
  535|       |
  536|       |  /* make libcurl quiet by default: */
  537|  1.04k|  set->hide_progress = TRUE;  /* CURLOPT_NOPROGRESS changes these */
  538|       |
  539|  1.04k|  Curl_mime_initpart(&set->mimepost, data);
  540|       |
  541|       |  /*
  542|       |   * libcurl 7.10 introduced SSL verification *by default*! This needs to be
  543|       |   * switched off unless wanted.
  544|       |   */
  545|  1.04k|  set->doh_verifyhost = TRUE;
  546|  1.04k|  set->doh_verifypeer = TRUE;
  547|  1.04k|  set->ssl.primary.verifypeer = TRUE;
  548|  1.04k|  set->ssl.primary.verifyhost = TRUE;
  549|  1.04k|#ifdef USE_TLS_SRP
  550|  1.04k|  set->ssl.authtype = CURL_TLSAUTH_NONE;
  551|  1.04k|#endif
  552|  1.04k|  set->ssh_auth_types = CURLSSH_AUTH_DEFAULT; /* defaults to any auth
  553|       |                                                      type */
  554|  1.04k|  set->ssl.primary.sessionid = TRUE; /* session ID caching enabled by
  555|       |                                        default */
  556|  1.04k|#ifndef CURL_DISABLE_PROXY
  557|  1.04k|  set->proxy_ssl = set->ssl;
  558|  1.04k|#endif
  559|       |
  560|  1.04k|  set->new_file_perms = 0644;    /* Default permissions */
  561|  1.04k|  set->new_directory_perms = 0755; /* Default permissions */
  562|       |
  563|       |  /* for the *protocols fields we don't use the CURLPROTO_ALL convenience
  564|       |     define since we internally only use the lower 16 bits for the passed
  565|       |     in bitmask to not conflict with the private bits */
  566|  1.04k|  set->allowed_protocols = CURLPROTO_ALL;
  567|  1.04k|  set->redir_protocols = CURLPROTO_HTTP | CURLPROTO_HTTPS | CURLPROTO_FTP |
  568|  1.04k|                         CURLPROTO_FTPS;
  569|       |
  570|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
  571|       |  /*
  572|       |   * disallow unprotected protection negotiation NEC reference implementation
  573|       |   * seem not to follow rfc1961 section 4.3/4.4
  574|       |   */
  575|       |  set->socks5_gssapi_nec = FALSE;
  576|       |#endif
  577|       |
  578|       |  /* Set the default CA cert bundle/path detected/specified at build time.
  579|       |   *
  580|       |   * If Schannel is the selected SSL backend then these locations are
  581|       |   * ignored. We allow setting CA location for schannel only when explicitly
  582|       |   * specified by the user via CURLOPT_CAINFO / --cacert.
  583|       |   */
  584|  1.04k|  if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL) {
  585|  1.04k|#if defined(CURL_CA_BUNDLE)
  586|  1.04k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
  587|  1.04k|    if(result)
  588|      0|      return result;
  589|       |
  590|  1.04k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
  591|  1.04k|                            CURL_CA_BUNDLE);
  592|  1.04k|    if(result)
  593|      0|      return result;
  594|  1.04k|#endif
  595|       |#if defined(CURL_CA_PATH)
  596|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
  597|       |    if(result)
  598|       |      return result;
  599|       |
  600|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
  601|       |    if(result)
  602|       |      return result;
  603|       |#endif
  604|  1.04k|  }
  605|       |
  606|  1.04k|  set->wildcard_enabled = FALSE;
  607|  1.04k|  set->chunk_bgn      = ZERO_NULL;
  608|  1.04k|  set->chunk_end      = ZERO_NULL;
  609|  1.04k|  set->tcp_keepalive = FALSE;
  610|  1.04k|  set->tcp_keepintvl = 60;
  611|  1.04k|  set->tcp_keepidle = 60;
  612|  1.04k|  set->tcp_fastopen = FALSE;
  613|  1.04k|  set->tcp_nodelay = TRUE;
  614|  1.04k|  set->ssl_enable_npn = TRUE;
  615|  1.04k|  set->ssl_enable_alpn = TRUE;
  616|  1.04k|  set->expect_100_timeout = 1000L; /* Wait for a second by default. */
  617|  1.04k|  set->sep_headers = TRUE; /* separated header lists by default */
  618|  1.04k|  set->buffer_size = READBUFFER_SIZE;
  619|  1.04k|  set->upload_buffer_size = UPLOADBUFFER_DEFAULT;
  620|  1.04k|  set->happy_eyeballs_timeout = CURL_HET_DEFAULT;
  621|  1.04k|  set->fnmatch = ZERO_NULL;
  622|  1.04k|  set->upkeep_interval_ms = CURL_UPKEEP_INTERVAL_DEFAULT;
  623|  1.04k|  set->maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */
  624|  1.04k|  set->maxage_conn = 118;
  625|  1.04k|  set->maxlifetime_conn = 0;
  626|  1.04k|  set->http09_allowed = FALSE;
  627|  1.04k|  set->httpwant =
  628|  1.04k|#ifdef USE_NGHTTP2
  629|  1.04k|    CURL_HTTP_VERSION_2TLS
  630|       |#else
  631|       |    CURL_HTTP_VERSION_1_1
  632|       |#endif
  633|  1.04k|    ;
  634|  1.04k|  Curl_http2_init_userset(set);
  635|  1.04k|  return result;
  636|  1.04k|}
Curl_open:
  647|  1.04k|{
  648|  1.04k|  CURLcode result;
  649|  1.04k|  struct Curl_easy *data;
  650|       |
  651|       |  /* Very simple start-up: alloc the struct, init it with zeroes and return */
  652|  1.04k|  data = calloc(1, sizeof(struct Curl_easy));
  653|  1.04k|  if(!data) {
  654|       |    /* this is a very serious error */
  655|      0|    DEBUGF(fprintf(stderr, "Error: calloc of Curl_easy failed\n"));
  656|      0|    return CURLE_OUT_OF_MEMORY;
  657|      0|  }
  658|       |
  659|  1.04k|  data->magic = CURLEASY_MAGIC_NUMBER;
  660|       |
  661|  1.04k|  result = Curl_resolver_init(data, &data->state.async.resolver);
  662|  1.04k|  if(result) {
  663|      0|    DEBUGF(fprintf(stderr, "Error: resolver_init failed\n"));
  664|      0|    free(data);
  665|      0|    return result;
  666|      0|  }
  667|       |
  668|  1.04k|  result = Curl_init_userdefined(data);
  669|  1.04k|  if(!result) {
  670|  1.04k|    Curl_dyn_init(&data->state.headerb, CURL_MAX_HTTP_HEADER);
  671|  1.04k|    Curl_convert_init(data);
  672|  1.04k|    Curl_initinfo(data);
  673|       |
  674|       |    /* most recent connection is not yet defined */
  675|  1.04k|    data->state.lastconnect_id = -1;
  676|       |
  677|  1.04k|    data->progress.flags |= PGRS_HIDE;
  678|  1.04k|    data->state.current_speed = -1; /* init to negative == impossible */
  679|  1.04k|  }
  680|       |
  681|  1.04k|  if(result) {
  682|      0|    Curl_resolver_cleanup(data->state.async.resolver);
  683|      0|    Curl_dyn_free(&data->state.headerb);
  684|      0|    Curl_freeset(data);
  685|      0|    free(data);
  686|      0|    data = NULL;
  687|      0|  }
  688|  1.04k|  else
  689|  1.04k|    *curl = data;
  690|       |
  691|  1.04k|  return result;
  692|  1.04k|}
Curl_disconnect:
  826|    406|{
  827|       |  /* there must be a connection to close */
  828|    406|  DEBUGASSERT(conn);
  829|       |
  830|       |  /* it must be removed from the connection cache */
  831|    406|  DEBUGASSERT(!conn->bundle);
  832|       |
  833|       |  /* there must be an associated transfer */
  834|    406|  DEBUGASSERT(data);
  835|       |
  836|       |  /* the transfer must be detached from the connection */
  837|    406|  DEBUGASSERT(!data->conn);
  838|       |
  839|       |  /*
  840|       |   * If this connection isn't marked to force-close, leave it open if there
  841|       |   * are other users of it
  842|       |   */
  843|    406|  if(CONN_INUSE(conn) && !dead_connection) {
  844|      0|    DEBUGF(infof(data, "Curl_disconnect when inuse: %zu", CONN_INUSE(conn)));
  845|      0|    return CURLE_OK;
  846|      0|  }
  847|       |
  848|    406|  if(conn->dns_entry != NULL) {
  849|      0|    Curl_resolv_unlock(data, conn->dns_entry);
  850|      0|    conn->dns_entry = NULL;
  851|      0|  }
  852|       |
  853|       |  /* Cleanup NTLM connection-related data */
  854|    406|  Curl_http_auth_cleanup_ntlm(conn);
  855|       |
  856|       |  /* Cleanup NEGOTIATE connection-related data */
  857|    406|  Curl_http_auth_cleanup_negotiate(conn);
  858|       |
  859|    406|  if(conn->bits.connect_only)
  860|       |    /* treat the connection as dead in CONNECT_ONLY situations */
  861|      0|    dead_connection = TRUE;
  862|       |
  863|       |  /* temporarily attach the connection to this transfer handle for the
  864|       |     disconnect and shutdown */
  865|    406|  Curl_attach_connnection(data, conn);
  866|       |
  867|    406|  if(conn->handler->disconnect)
  868|       |    /* This is set if protocol-specific cleanups should be made */
  869|      0|    conn->handler->disconnect(data, conn, dead_connection);
  870|       |
  871|    406|  conn_shutdown(data, conn);
  872|       |
  873|       |  /* detach it again */
  874|    406|  Curl_detach_connnection(data);
  875|       |
  876|    406|  conn_free(conn);
  877|    406|  return CURLE_OK;
  878|    406|}
Curl_verboseconnect:
 1538|    285|{
 1539|    285|  if(data->set.verbose)
 1540|      0|    infof(data, "Connected to %s (%s) port %u (#%ld)",
 1541|      0|#ifndef CURL_DISABLE_PROXY
 1542|      0|          conn->bits.socksproxy ? conn->socks_proxy.host.dispname :
 1543|      0|          conn->bits.httpproxy ? conn->http_proxy.host.dispname :
 1544|      0|#endif
 1545|      0|          conn->bits.conn_to_host ? conn->conn_to_host.dispname :
 1546|      0|          conn->host.dispname,
 1547|      0|          conn->primary_ip, conn->port, conn->connection_id);
 1548|    285|}
Curl_is_ASCII_name:
 1555|    570|{
 1556|       |  /* get an UNSIGNED local version of the pointer */
 1557|    570|  const unsigned char *ch = (const unsigned char *)hostname;
 1558|       |
 1559|    570|  if(!hostname) /* bad input, consider it ASCII! */
 1560|      0|    return TRUE;
 1561|       |
 1562|  4.63k|  while(*ch) {
 1563|  4.15k|    if(*ch++ & 0x80)
 1564|     87|      return FALSE;
 1565|  4.15k|  }
 1566|    483|  return TRUE;
 1567|    570|}
Curl_idnconvert_hostname:
 1588|    570|{
 1589|    570|#ifndef USE_LIBIDN2
 1590|    570|  (void)data;
 1591|    570|  (void)data;
 1592|       |#elif defined(CURL_DISABLE_VERBOSE_STRINGS)
 1593|       |  (void)data;
 1594|       |#endif
 1595|       |
 1596|       |  /* set the name we use to display the host name */
 1597|    570|  host->dispname = host->name;
 1598|       |
 1599|       |  /* Check name for non-ASCII and convert hostname to ACE form if we can */
 1600|    570|  if(!Curl_is_ASCII_name(host->name)) {
 1601|       |#ifdef USE_LIBIDN2
 1602|       |    if(idn2_check_version(IDN2_VERSION)) {
 1603|       |      char *ace_hostname = NULL;
 1604|       |#if IDN2_VERSION_NUMBER >= 0x00140000
 1605|       |      /* IDN2_NFC_INPUT: Normalize input string using normalization form C.
 1606|       |         IDN2_NONTRANSITIONAL: Perform Unicode TR46 non-transitional
 1607|       |         processing. */
 1608|       |      int flags = IDN2_NFC_INPUT | IDN2_NONTRANSITIONAL;
 1609|       |#else
 1610|       |      int flags = IDN2_NFC_INPUT;
 1611|       |#endif
 1612|       |      int rc = IDN2_LOOKUP(host->name, &ace_hostname, flags);
 1613|       |      if(rc != IDN2_OK)
 1614|       |        /* fallback to TR46 Transitional mode for better IDNA2003
 1615|       |           compatibility */
 1616|       |        rc = IDN2_LOOKUP(host->name, &ace_hostname,
 1617|       |                         IDN2_TRANSITIONAL);
 1618|       |      if(rc == IDN2_OK) {
 1619|       |        host->encalloc = (char *)ace_hostname;
 1620|       |        /* change the name pointer to point to the encoded hostname */
 1621|       |        host->name = host->encalloc;
 1622|       |      }
 1623|       |      else {
 1624|       |        failf(data, "Failed to convert %s to ACE; %s", host->name,
 1625|       |              idn2_strerror(rc));
 1626|       |        return CURLE_URL_MALFORMAT;
 1627|       |      }
 1628|       |    }
 1629|       |#elif defined(USE_WIN32_IDN)
 1630|       |    char *ace_hostname = NULL;
 1631|       |
 1632|       |    if(curl_win32_idn_to_ascii(host->name, &ace_hostname)) {
 1633|       |      host->encalloc = ace_hostname;
 1634|       |      /* change the name pointer to point to the encoded hostname */
 1635|       |      host->name = host->encalloc;
 1636|       |    }
 1637|       |    else {
 1638|       |      char buffer[STRERROR_LEN];
 1639|       |      failf(data, "Failed to convert %s to ACE; %s", host->name,
 1640|       |            Curl_winapi_strerror(GetLastError(), buffer, sizeof(buffer)));
 1641|       |      return CURLE_URL_MALFORMAT;
 1642|       |    }
 1643|       |#else
 1644|     87|    infof(data, "IDN support not present, can't parse Unicode domains");
 1645|     87|#endif
 1646|     87|  }
 1647|    570|  return CURLE_OK;
 1648|    570|}
Curl_free_idnconverted_hostname:
 1654|  1.62k|{
 1655|       |#if defined(USE_LIBIDN2)
 1656|       |  if(host->encalloc) {
 1657|       |    idn2_free(host->encalloc); /* must be freed with idn2_free() since this was
 1658|       |                                 allocated by libidn */
 1659|       |    host->encalloc = NULL;
 1660|       |  }
 1661|       |#elif defined(USE_WIN32_IDN)
 1662|       |  free(host->encalloc); /* must be freed with free() since this was
 1663|       |                           allocated by curl_win32_idn_to_ascii */
 1664|       |  host->encalloc = NULL;
 1665|       |#else
 1666|  1.62k|  (void)host;
 1667|  1.62k|#endif
 1668|  1.62k|}
Curl_builtin_scheme:
 1816|  1.48k|{
 1817|  1.48k|  const struct Curl_handler * const *pp;
 1818|  1.48k|  const struct Curl_handler *p;
 1819|       |  /* Scan protocol handler table and match against 'scheme'. The handler may
 1820|       |     be changed later when the protocol specific setup function is called. */
 1821|  24.3k|  for(pp = protocols; (p = *pp) != NULL; pp++)
 1822|  24.2k|    if(strcasecompare(p->scheme, scheme))
 1823|       |      /* Protocol found in table. Check if allowed */
 1824|  1.39k|      return p;
 1825|     89|  return NULL; /* not found */
 1826|  1.48k|}
Curl_uc_to_curlcode:
 1864|     56|{
 1865|     56|  switch(uc) {
 1866|     56|  default:
 1867|     56|    return CURLE_URL_MALFORMAT;
 1868|      0|  case CURLUE_UNSUPPORTED_SCHEME:
 1869|      0|    return CURLE_UNSUPPORTED_PROTOCOL;
 1870|      0|  case CURLUE_OUT_OF_MEMORY:
 1871|      0|    return CURLE_OUT_OF_MEMORY;
 1872|      0|  case CURLUE_USER_NOT_ALLOWED:
 1873|      0|    return CURLE_LOGIN_DENIED;
 1874|     56|  }
 1875|     56|}
Curl_free_request_state:
 2204|  1.73k|{
 2205|  1.73k|  Curl_safefree(data->req.p.http);
 2206|  1.73k|  Curl_safefree(data->req.newurl);
 2207|       |
 2208|  1.73k|#ifndef CURL_DISABLE_DOH
 2209|  1.73k|  if(data->req.doh) {
 2210|      0|    Curl_close(&data->req.doh->probe[0].easy);
 2211|      0|    Curl_close(&data->req.doh->probe[1].easy);
 2212|      0|  }
 2213|  1.73k|#endif
 2214|  1.73k|}
Curl_parse_login_details:
 2777|    169|{
 2778|    169|  CURLcode result = CURLE_OK;
 2779|    169|  char *ubuf = NULL;
 2780|    169|  char *pbuf = NULL;
 2781|    169|  char *obuf = NULL;
 2782|    169|  const char *psep = NULL;
 2783|    169|  const char *osep = NULL;
 2784|    169|  size_t ulen;
 2785|    169|  size_t plen;
 2786|    169|  size_t olen;
 2787|       |
 2788|       |  /* the input length check is because this is called directly from setopt
 2789|       |     and isn't going through the regular string length check */
 2790|    169|  size_t llen = strlen(login);
 2791|    169|  if(llen > CURL_MAX_INPUT_LENGTH)
 2792|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 2793|       |
 2794|       |  /* Attempt to find the password separator */
 2795|    169|  if(passwdp) {
 2796|    169|    psep = strchr(login, ':');
 2797|       |
 2798|       |    /* Within the constraint of the login string */
 2799|    169|    if(psep >= login + len)
 2800|      3|      psep = NULL;
 2801|    169|  }
 2802|       |
 2803|       |  /* Attempt to find the options separator */
 2804|    169|  if(optionsp) {
 2805|      0|    osep = strchr(login, ';');
 2806|       |
 2807|       |    /* Within the constraint of the login string */
 2808|      0|    if(osep >= login + len)
 2809|      0|      osep = NULL;
 2810|      0|  }
 2811|       |
 2812|       |  /* Calculate the portion lengths */
 2813|    169|  ulen = (psep ?
 2814|      8|          (size_t)(osep && psep > osep ? osep - login : psep - login) :
 2815|    169|          (osep ? (size_t)(osep - login) : len));
 2816|    169|  plen = (psep ?
 2817|      8|          (osep && osep > psep ? (size_t)(osep - psep) :
 2818|    161|                                 (size_t)(login + len - psep)) - 1 : 0);
 2819|    169|  olen = (osep ?
 2820|      0|          (psep && psep > osep ? (size_t)(psep - osep) :
 2821|    169|                                 (size_t)(login + len - osep)) - 1 : 0);
 2822|       |
 2823|       |  /* Allocate the user portion buffer */
 2824|    169|  if(userp && ulen) {
 2825|    162|    ubuf = malloc(ulen + 1);
 2826|    162|    if(!ubuf)
 2827|      0|      result = CURLE_OUT_OF_MEMORY;
 2828|    162|  }
 2829|       |
 2830|       |  /* Allocate the password portion buffer */
 2831|    169|  if(!result && passwdp && plen) {
 2832|      8|    pbuf = malloc(plen + 1);
 2833|      8|    if(!pbuf) {
 2834|      0|      free(ubuf);
 2835|      0|      result = CURLE_OUT_OF_MEMORY;
 2836|      0|    }
 2837|      8|  }
 2838|       |
 2839|       |  /* Allocate the options portion buffer */
 2840|    169|  if(!result && optionsp && olen) {
 2841|      0|    obuf = malloc(olen + 1);
 2842|      0|    if(!obuf) {
 2843|      0|      free(pbuf);
 2844|      0|      free(ubuf);
 2845|      0|      result = CURLE_OUT_OF_MEMORY;
 2846|      0|    }
 2847|      0|  }
 2848|       |
 2849|    169|  if(!result) {
 2850|       |    /* Store the user portion if necessary */
 2851|    169|    if(ubuf) {
 2852|    162|      memcpy(ubuf, login, ulen);
 2853|    162|      ubuf[ulen] = '\0';
 2854|    162|      Curl_safefree(*userp);
 2855|    162|      *userp = ubuf;
 2856|    162|    }
 2857|       |
 2858|       |    /* Store the password portion if necessary */
 2859|    169|    if(pbuf) {
 2860|      8|      memcpy(pbuf, psep + 1, plen);
 2861|      8|      pbuf[plen] = '\0';
 2862|      8|      Curl_safefree(*passwdp);
 2863|      8|      *passwdp = pbuf;
 2864|      8|    }
 2865|       |
 2866|       |    /* Store the options portion if necessary */
 2867|    169|    if(obuf) {
 2868|      0|      memcpy(obuf, osep + 1, olen);
 2869|      0|      obuf[olen] = '\0';
 2870|      0|      Curl_safefree(*optionsp);
 2871|      0|      *optionsp = obuf;
 2872|      0|    }
 2873|    169|  }
 2874|       |
 2875|    169|  return result;
 2876|    169|}
Curl_setup_conn:
 4055|    285|{
 4056|    285|  CURLcode result = CURLE_OK;
 4057|    285|  struct connectdata *conn = data->conn;
 4058|       |
 4059|    285|  Curl_pgrsTime(data, TIMER_NAMELOOKUP);
 4060|       |
 4061|    285|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 4062|       |    /* nothing to setup when not using a network */
 4063|      0|    *protocol_done = TRUE;
 4064|      0|    return result;
 4065|      0|  }
 4066|    285|  *protocol_done = FALSE; /* default to not done */
 4067|       |
 4068|    285|#ifndef CURL_DISABLE_PROXY
 4069|       |  /* set proxy_connect_closed to false unconditionally already here since it
 4070|       |     is used strictly to provide extra information to a parent function in the
 4071|       |     case of proxy CONNECT failures and we must make sure we don't have it
 4072|       |     lingering set from a previous invoke */
 4073|    285|  conn->bits.proxy_connect_closed = FALSE;
 4074|    285|#endif
 4075|       |
 4076|    285|#ifdef CURL_DO_LINEEND_CONV
 4077|    285|  data->state.crlf_conversions = 0; /* reset CRLF conversion counter */
 4078|    285|#endif /* CURL_DO_LINEEND_CONV */
 4079|       |
 4080|       |  /* set start time here for timeout purposes in the connect procedure, it
 4081|       |     is later set again for the progress meter purpose */
 4082|    285|  conn->now = Curl_now();
 4083|       |
 4084|    285|  if(CURL_SOCKET_BAD == conn->sock[FIRSTSOCKET]) {
 4085|    285|    conn->bits.tcpconnect[FIRSTSOCKET] = FALSE;
 4086|    285|    result = Curl_connecthost(data, conn, conn->dns_entry);
 4087|    285|    if(result)
 4088|      0|      return result;
 4089|    285|  }
 4090|      0|  else {
 4091|      0|    Curl_pgrsTime(data, TIMER_CONNECT);    /* we're connected already */
 4092|      0|    if(conn->ssl[FIRSTSOCKET].use ||
 4093|      0|       (conn->handler->protocol & PROTO_FAMILY_SSH))
 4094|      0|      Curl_pgrsTime(data, TIMER_APPCONNECT); /* we're connected already */
 4095|      0|    conn->bits.tcpconnect[FIRSTSOCKET] = TRUE;
 4096|      0|    *protocol_done = TRUE;
 4097|      0|    Curl_updateconninfo(data, conn, conn->sock[FIRSTSOCKET]);
 4098|      0|    Curl_verboseconnect(data, conn);
 4099|      0|  }
 4100|       |
 4101|    285|  conn->now = Curl_now(); /* time this *after* the connect is done, we set
 4102|       |                             this here perhaps a second time */
 4103|    285|  return result;
 4104|    285|}
Curl_connect:
 4109|    406|{
 4110|    406|  CURLcode result;
 4111|    406|  struct connectdata *conn;
 4112|       |
 4113|    406|  *asyncp = FALSE; /* assume synchronous resolves by default */
 4114|       |
 4115|       |  /* init the single-transfer specific data */
 4116|    406|  Curl_free_request_state(data);
 4117|    406|  memset(&data->req, 0, sizeof(struct SingleRequest));
 4118|    406|  data->req.size = data->req.maxdownload = -1;
 4119|       |
 4120|       |  /* call the stuff that needs to be called */
 4121|    406|  result = create_conn(data, &conn, asyncp);
 4122|       |
 4123|    406|  if(!result) {
 4124|    285|    if(CONN_INUSE(conn) > 1)
 4125|       |      /* multiplexed */
 4126|      0|      *protocol_done = TRUE;
 4127|    285|    else if(!*asyncp) {
 4128|       |      /* DNS resolution is done: that's either because this is a reused
 4129|       |         connection, in which case DNS was unnecessary, or because DNS
 4130|       |         really did finish already (synch resolver/fast async resolve) */
 4131|    285|      result = Curl_setup_conn(data, protocol_done);
 4132|    285|    }
 4133|    285|  }
 4134|       |
 4135|    406|  if(result == CURLE_NO_CONNECTION_AVAILABLE) {
 4136|      0|    return result;
 4137|      0|  }
 4138|    406|  else if(result && conn) {
 4139|       |    /* We're not allowed to return failure with memory left allocated in the
 4140|       |       connectdata struct, free those here */
 4141|    121|    Curl_detach_connnection(data);
 4142|    121|    Curl_conncache_remove_conn(data, conn, TRUE);
 4143|    121|    Curl_disconnect(data, conn, TRUE);
 4144|    121|  }
 4145|       |
 4146|    406|  return result;
 4147|    406|}
Curl_init_do:
 4160|    285|{
 4161|    285|  struct SingleRequest *k = &data->req;
 4162|       |
 4163|       |  /* if this is a pushed stream, we need this: */
 4164|    285|  CURLcode result = Curl_preconnect(data);
 4165|    285|  if(result)
 4166|      0|    return result;
 4167|       |
 4168|    285|  if(conn) {
 4169|    285|    conn->bits.do_more = FALSE; /* by default there's no curl_do_more() to
 4170|       |                                   use */
 4171|       |    /* if the protocol used doesn't support wildcards, switch it off */
 4172|    285|    if(data->state.wildcardmatch &&
 4173|    285|       !(conn->handler->flags & PROTOPT_WILDCARD))
 4174|      0|      data->state.wildcardmatch = FALSE;
 4175|    285|  }
 4176|       |
 4177|    285|  data->state.done = FALSE; /* *_done() is not called yet */
 4178|    285|  data->state.expect100header = FALSE;
 4179|       |
 4180|    285|  if(data->set.opt_no_body)
 4181|       |    /* in HTTP lingo, no body means using the HEAD request... */
 4182|      0|    data->state.httpreq = HTTPREQ_HEAD;
 4183|       |
 4184|    285|  k->start = Curl_now(); /* start time */
 4185|    285|  k->now = k->start;   /* current time is now */
 4186|    285|  k->header = TRUE; /* assume header */
 4187|    285|  k->bytecount = 0;
 4188|    285|  k->ignorebody = FALSE;
 4189|       |
 4190|    285|  Curl_speedinit(data);
 4191|    285|  Curl_pgrsSetUploadCounter(data, 0);
 4192|    285|  Curl_pgrsSetDownloadCounter(data, 0);
 4193|       |
 4194|    285|  return CURLE_OK;
 4195|    285|}
url.c:up_free:
  339|  1.45k|{
  340|  1.45k|  struct urlpieces *up = &data->state.up;
  341|  1.45k|  Curl_safefree(up->scheme);
  342|  1.45k|  Curl_safefree(up->hostname);
  343|  1.45k|  Curl_safefree(up->port);
  344|  1.45k|  Curl_safefree(up->user);
  345|  1.45k|  Curl_safefree(up->password);
  346|  1.45k|  Curl_safefree(up->options);
  347|  1.45k|  Curl_safefree(up->path);
  348|  1.45k|  Curl_safefree(up->query);
  349|  1.45k|  curl_url_cleanup(data->state.uh);
  350|  1.45k|  data->state.uh = NULL;
  351|  1.45k|}
url.c:conn_shutdown:
  734|    406|{
  735|    406|  DEBUGASSERT(conn);
  736|    406|  DEBUGASSERT(data);
  737|    406|  infof(data, "Closing connection %ld", conn->connection_id);
  738|       |
  739|    406|#ifndef USE_HYPER
  740|    406|  if(conn->connect_state && conn->connect_state->prot_save) {
  741|       |    /* If this was closed with a CONNECT in progress, cleanup this temporary
  742|       |       struct arrangement */
  743|      0|    data->req.p.http = NULL;
  744|      0|    Curl_safefree(conn->connect_state->prot_save);
  745|      0|  }
  746|    406|#endif
  747|       |
  748|       |  /* possible left-overs from the async name resolvers */
  749|    406|  Curl_resolver_cancel(data);
  750|       |
  751|       |  /* close the SSL stuff before we close any sockets since they will/may
  752|       |     write to the sockets */
  753|    406|  Curl_ssl_close(data, conn, FIRSTSOCKET);
  754|    406|  Curl_ssl_close(data, conn, SECONDARYSOCKET);
  755|       |
  756|       |  /* close possibly still open sockets */
  757|    406|  if(CURL_SOCKET_BAD != conn->sock[SECONDARYSOCKET])
  758|      0|    Curl_closesocket(data, conn, conn->sock[SECONDARYSOCKET]);
  759|    406|  if(CURL_SOCKET_BAD != conn->sock[FIRSTSOCKET])
  760|    285|    Curl_closesocket(data, conn, conn->sock[FIRSTSOCKET]);
  761|    406|  if(CURL_SOCKET_BAD != conn->tempsock[0])
  762|      0|    Curl_closesocket(data, conn, conn->tempsock[0]);
  763|    406|  if(CURL_SOCKET_BAD != conn->tempsock[1])
  764|      0|    Curl_closesocket(data, conn, conn->tempsock[1]);
  765|    406|}
url.c:conn_free:
  768|    406|{
  769|    406|  DEBUGASSERT(conn);
  770|       |
  771|    406|  Curl_free_idnconverted_hostname(&conn->host);
  772|    406|  Curl_free_idnconverted_hostname(&conn->conn_to_host);
  773|    406|#ifndef CURL_DISABLE_PROXY
  774|    406|  Curl_free_idnconverted_hostname(&conn->http_proxy.host);
  775|    406|  Curl_free_idnconverted_hostname(&conn->socks_proxy.host);
  776|    406|  Curl_safefree(conn->http_proxy.user);
  777|    406|  Curl_safefree(conn->socks_proxy.user);
  778|    406|  Curl_safefree(conn->http_proxy.passwd);
  779|    406|  Curl_safefree(conn->socks_proxy.passwd);
  780|    406|  Curl_safefree(conn->http_proxy.host.rawalloc); /* http proxy name buffer */
  781|    406|  Curl_safefree(conn->socks_proxy.host.rawalloc); /* socks proxy name buffer */
  782|    406|  Curl_free_primary_ssl_config(&conn->proxy_ssl_config);
  783|    406|#endif
  784|    406|  Curl_safefree(conn->user);
  785|    406|  Curl_safefree(conn->passwd);
  786|    406|  Curl_safefree(conn->sasl_authzid);
  787|    406|  Curl_safefree(conn->options);
  788|    406|  Curl_dyn_free(&conn->trailer);
  789|    406|  Curl_safefree(conn->host.rawalloc); /* host name buffer */
  790|    406|  Curl_safefree(conn->conn_to_host.rawalloc); /* host name buffer */
  791|    406|  Curl_safefree(conn->hostname_resolve);
  792|    406|  Curl_safefree(conn->secondaryhostname);
  793|    406|  Curl_safefree(conn->connect_state);
  794|       |
  795|    406|  conn_reset_all_postponed_data(conn);
  796|    406|  Curl_llist_destroy(&conn->easyq, NULL);
  797|    406|  Curl_safefree(conn->localdev);
  798|    406|  Curl_free_primary_ssl_config(&conn->ssl_config);
  799|       |
  800|    406|#ifdef USE_UNIX_SOCKETS
  801|    406|  Curl_safefree(conn->unix_domain_socket);
  802|    406|#endif
  803|       |
  804|    406|#ifdef USE_SSL
  805|    406|  Curl_safefree(conn->ssl_extra);
  806|    406|#endif
  807|    406|  free(conn); /* free all the connection oriented data */
  808|    406|}
url.c:create_conn:
 3571|    406|{
 3572|    406|  CURLcode result = CURLE_OK;
 3573|    406|  struct connectdata *conn;
 3574|    406|  struct connectdata *conn_temp = NULL;
 3575|    406|  bool reuse;
 3576|    406|  bool connections_available = TRUE;
 3577|    406|  bool force_reuse = FALSE;
 3578|    406|  bool waitpipe = FALSE;
 3579|    406|  size_t max_host_connections = Curl_multi_max_host_connections(data->multi);
 3580|    406|  size_t max_total_connections = Curl_multi_max_total_connections(data->multi);
 3581|       |
 3582|    406|  *async = FALSE;
 3583|    406|  *in_connect = NULL;
 3584|       |
 3585|       |  /*************************************************************
 3586|       |   * Check input data
 3587|       |   *************************************************************/
 3588|    406|  if(!data->state.url) {
 3589|      0|    result = CURLE_URL_MALFORMAT;
 3590|      0|    goto out;
 3591|      0|  }
 3592|       |
 3593|       |  /* First, split up the current URL in parts so that we can use the
 3594|       |     parts for checking against the already present connections. In order
 3595|       |     to not have to modify everything at once, we allocate a temporary
 3596|       |     connection data struct and fill in for comparison purposes. */
 3597|    406|  conn = allocate_conn(data);
 3598|       |
 3599|    406|  if(!conn) {
 3600|      0|    result = CURLE_OUT_OF_MEMORY;
 3601|      0|    goto out;
 3602|      0|  }
 3603|       |
 3604|       |  /* We must set the return variable as soon as possible, so that our
 3605|       |     parent can cleanup any possible allocs we may have done before
 3606|       |     any failure */
 3607|    406|  *in_connect = conn;
 3608|       |
 3609|    406|  result = parseurlandfillconn(data, conn);
 3610|    406|  if(result)
 3611|    121|    goto out;
 3612|       |
 3613|    285|  if(data->set.str[STRING_SASL_AUTHZID]) {
 3614|      0|    conn->sasl_authzid = strdup(data->set.str[STRING_SASL_AUTHZID]);
 3615|      0|    if(!conn->sasl_authzid) {
 3616|      0|      result = CURLE_OUT_OF_MEMORY;
 3617|      0|      goto out;
 3618|      0|    }
 3619|      0|  }
 3620|       |
 3621|    285|#ifdef USE_UNIX_SOCKETS
 3622|    285|  if(data->set.str[STRING_UNIX_SOCKET_PATH]) {
 3623|      0|    conn->unix_domain_socket = strdup(data->set.str[STRING_UNIX_SOCKET_PATH]);
 3624|      0|    if(!conn->unix_domain_socket) {
 3625|      0|      result = CURLE_OUT_OF_MEMORY;
 3626|      0|      goto out;
 3627|      0|    }
 3628|      0|    conn->bits.abstract_unix_socket = data->set.abstract_unix_socket;
 3629|      0|  }
 3630|    285|#endif
 3631|       |
 3632|       |  /* After the unix socket init but before the proxy vars are used, parse and
 3633|       |     initialize the proxy vars */
 3634|    285|#ifndef CURL_DISABLE_PROXY
 3635|    285|  result = create_conn_helper_init_proxy(data, conn);
 3636|    285|  if(result)
 3637|      0|    goto out;
 3638|       |
 3639|       |  /*************************************************************
 3640|       |   * If the protocol is using SSL and HTTP proxy is used, we set
 3641|       |   * the tunnel_proxy bit.
 3642|       |   *************************************************************/
 3643|    285|  if((conn->given->flags&PROTOPT_SSL) && conn->bits.httpproxy)
 3644|      0|    conn->bits.tunnel_proxy = TRUE;
 3645|    285|#endif
 3646|       |
 3647|       |  /*************************************************************
 3648|       |   * Figure out the remote port number and fix it in the URL
 3649|       |   *************************************************************/
 3650|    285|  result = parse_remote_port(data, conn);
 3651|    285|  if(result)
 3652|      0|    goto out;
 3653|       |
 3654|       |  /* Check for overridden login details and set them accordingly so that
 3655|       |     they are known when protocol->setup_connection is called! */
 3656|    285|  result = override_login(data, conn);
 3657|    285|  if(result)
 3658|      0|    goto out;
 3659|       |
 3660|    285|  result = set_login(conn); /* default credentials */
 3661|    285|  if(result)
 3662|      0|    goto out;
 3663|       |
 3664|       |  /*************************************************************
 3665|       |   * Process the "connect to" linked list of hostname/port mappings.
 3666|       |   * Do this after the remote port number has been fixed in the URL.
 3667|       |   *************************************************************/
 3668|    285|  result = parse_connect_to_slist(data, conn, data->set.connect_to);
 3669|    285|  if(result)
 3670|      0|    goto out;
 3671|       |
 3672|       |  /*************************************************************
 3673|       |   * IDN-convert the hostnames
 3674|       |   *************************************************************/
 3675|    285|  result = Curl_idnconvert_hostname(data, &conn->host);
 3676|    285|  if(result)
 3677|      0|    goto out;
 3678|    285|  if(conn->bits.conn_to_host) {
 3679|    285|    result = Curl_idnconvert_hostname(data, &conn->conn_to_host);
 3680|    285|    if(result)
 3681|      0|      goto out;
 3682|    285|  }
 3683|    285|#ifndef CURL_DISABLE_PROXY
 3684|    285|  if(conn->bits.httpproxy) {
 3685|      0|    result = Curl_idnconvert_hostname(data, &conn->http_proxy.host);
 3686|      0|    if(result)
 3687|      0|      goto out;
 3688|      0|  }
 3689|    285|  if(conn->bits.socksproxy) {
 3690|      0|    result = Curl_idnconvert_hostname(data, &conn->socks_proxy.host);
 3691|      0|    if(result)
 3692|      0|      goto out;
 3693|      0|  }
 3694|    285|#endif
 3695|       |
 3696|       |  /*************************************************************
 3697|       |   * Check whether the host and the "connect to host" are equal.
 3698|       |   * Do this after the hostnames have been IDN-converted.
 3699|       |   *************************************************************/
 3700|    285|  if(conn->bits.conn_to_host &&
 3701|    285|     strcasecompare(conn->conn_to_host.name, conn->host.name)) {
 3702|      0|    conn->bits.conn_to_host = FALSE;
 3703|      0|  }
 3704|       |
 3705|       |  /*************************************************************
 3706|       |   * Check whether the port and the "connect to port" are equal.
 3707|       |   * Do this after the remote port number has been fixed in the URL.
 3708|       |   *************************************************************/
 3709|    285|  if(conn->bits.conn_to_port && conn->conn_to_port == conn->remote_port) {
 3710|      0|    conn->bits.conn_to_port = FALSE;
 3711|      0|  }
 3712|       |
 3713|    285|#ifndef CURL_DISABLE_PROXY
 3714|       |  /*************************************************************
 3715|       |   * If the "connect to" feature is used with an HTTP proxy,
 3716|       |   * we set the tunnel_proxy bit.
 3717|       |   *************************************************************/
 3718|    285|  if((conn->bits.conn_to_host || conn->bits.conn_to_port) &&
 3719|    285|      conn->bits.httpproxy)
 3720|      0|    conn->bits.tunnel_proxy = TRUE;
 3721|    285|#endif
 3722|       |
 3723|       |  /*************************************************************
 3724|       |   * Setup internals depending on protocol. Needs to be done after
 3725|       |   * we figured out what/if proxy to use.
 3726|       |   *************************************************************/
 3727|    285|  result = setup_connection_internals(data, conn);
 3728|    285|  if(result)
 3729|      0|    goto out;
 3730|       |
 3731|    285|  conn->recv[FIRSTSOCKET] = Curl_recv_plain;
 3732|    285|  conn->send[FIRSTSOCKET] = Curl_send_plain;
 3733|    285|  conn->recv[SECONDARYSOCKET] = Curl_recv_plain;
 3734|    285|  conn->send[SECONDARYSOCKET] = Curl_send_plain;
 3735|       |
 3736|    285|  conn->bits.tcp_fastopen = data->set.tcp_fastopen;
 3737|       |
 3738|       |  /***********************************************************************
 3739|       |   * file: is a special case in that it doesn't need a network connection
 3740|       |   ***********************************************************************/
 3741|    285|#ifndef CURL_DISABLE_FILE
 3742|    285|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 3743|      0|    bool done;
 3744|       |    /* this is supposed to be the connect function so we better at least check
 3745|       |       that the file is present here! */
 3746|      0|    DEBUGASSERT(conn->handler->connect_it);
 3747|      0|    Curl_persistconninfo(data, conn, NULL, -1);
 3748|      0|    result = conn->handler->connect_it(data, &done);
 3749|       |
 3750|       |    /* Setup a "faked" transfer that'll do nothing */
 3751|      0|    if(!result) {
 3752|      0|      conn->bits.tcpconnect[FIRSTSOCKET] = TRUE; /* we are "connected */
 3753|       |
 3754|      0|      Curl_attach_connnection(data, conn);
 3755|      0|      result = Curl_conncache_add_conn(data);
 3756|      0|      if(result)
 3757|      0|        goto out;
 3758|       |
 3759|       |      /*
 3760|       |       * Setup whatever necessary for a resumed transfer
 3761|       |       */
 3762|      0|      result = setup_range(data);
 3763|      0|      if(result) {
 3764|      0|        DEBUGASSERT(conn->handler->done);
 3765|       |        /* we ignore the return code for the protocol-specific DONE */
 3766|      0|        (void)conn->handler->done(data, result, FALSE);
 3767|      0|        goto out;
 3768|      0|      }
 3769|      0|      Curl_setup_transfer(data, -1, -1, FALSE, -1);
 3770|      0|    }
 3771|       |
 3772|       |    /* since we skip do_init() */
 3773|      0|    Curl_init_do(data, conn);
 3774|       |
 3775|      0|    goto out;
 3776|      0|  }
 3777|    285|#endif
 3778|       |
 3779|       |  /* Get a cloned copy of the SSL config situation stored in the
 3780|       |     connection struct. But to get this going nicely, we must first make
 3781|       |     sure that the strings in the master copy are pointing to the correct
 3782|       |     strings in the session handle strings array!
 3783|       |
 3784|       |     Keep in mind that the pointers in the master copy are pointing to strings
 3785|       |     that will be freed as part of the Curl_easy struct, but all cloned
 3786|       |     copies will be separately allocated.
 3787|       |  */
 3788|    285|  data->set.ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH];
 3789|    285|  data->set.ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE];
 3790|    285|  data->set.ssl.primary.issuercert = data->set.str[STRING_SSL_ISSUERCERT];
 3791|    285|  data->set.ssl.primary.issuercert_blob = data->set.blobs[BLOB_SSL_ISSUERCERT];
 3792|    285|  data->set.ssl.primary.random_file = data->set.str[STRING_SSL_RANDOM_FILE];
 3793|    285|  data->set.ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3794|    285|  data->set.ssl.primary.cipher_list =
 3795|    285|    data->set.str[STRING_SSL_CIPHER_LIST];
 3796|    285|  data->set.ssl.primary.cipher_list13 =
 3797|    285|    data->set.str[STRING_SSL_CIPHER13_LIST];
 3798|    285|  data->set.ssl.primary.pinned_key =
 3799|    285|    data->set.str[STRING_SSL_PINNEDPUBLICKEY];
 3800|    285|  data->set.ssl.primary.cert_blob = data->set.blobs[BLOB_CERT];
 3801|    285|  data->set.ssl.primary.ca_info_blob = data->set.blobs[BLOB_CAINFO];
 3802|    285|  data->set.ssl.primary.curves = data->set.str[STRING_SSL_EC_CURVES];
 3803|       |
 3804|    285|#ifndef CURL_DISABLE_PROXY
 3805|    285|  data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];
 3806|    285|  data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];
 3807|    285|  data->set.proxy_ssl.primary.random_file =
 3808|    285|    data->set.str[STRING_SSL_RANDOM_FILE];
 3809|    285|  data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3810|    285|  data->set.proxy_ssl.primary.cipher_list =
 3811|    285|    data->set.str[STRING_SSL_CIPHER_LIST_PROXY];
 3812|    285|  data->set.proxy_ssl.primary.cipher_list13 =
 3813|    285|    data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];
 3814|    285|  data->set.proxy_ssl.primary.pinned_key =
 3815|    285|    data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY];
 3816|    285|  data->set.proxy_ssl.primary.cert_blob = data->set.blobs[BLOB_CERT_PROXY];
 3817|    285|  data->set.proxy_ssl.primary.ca_info_blob =
 3818|    285|    data->set.blobs[BLOB_CAINFO_PROXY];
 3819|    285|  data->set.proxy_ssl.primary.issuercert =
 3820|    285|    data->set.str[STRING_SSL_ISSUERCERT_PROXY];
 3821|    285|  data->set.proxy_ssl.primary.issuercert_blob =
 3822|    285|    data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY];
 3823|    285|  data->set.proxy_ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_PROXY];
 3824|    285|  data->set.proxy_ssl.cert_type = data->set.str[STRING_CERT_TYPE_PROXY];
 3825|    285|  data->set.proxy_ssl.key = data->set.str[STRING_KEY_PROXY];
 3826|    285|  data->set.proxy_ssl.key_type = data->set.str[STRING_KEY_TYPE_PROXY];
 3827|    285|  data->set.proxy_ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_PROXY];
 3828|    285|  data->set.proxy_ssl.primary.clientcert = data->set.str[STRING_CERT_PROXY];
 3829|    285|  data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];
 3830|    285|#endif
 3831|    285|  data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE];
 3832|    285|  data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE];
 3833|    285|  data->set.ssl.key = data->set.str[STRING_KEY];
 3834|    285|  data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE];
 3835|    285|  data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD];
 3836|    285|  data->set.ssl.primary.clientcert = data->set.str[STRING_CERT];
 3837|    285|#ifdef USE_TLS_SRP
 3838|    285|  data->set.ssl.username = data->set.str[STRING_TLSAUTH_USERNAME];
 3839|    285|  data->set.ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD];
 3840|    285|#ifndef CURL_DISABLE_PROXY
 3841|    285|  data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];
 3842|    285|  data->set.proxy_ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_PROXY];
 3843|    285|#endif
 3844|    285|#endif
 3845|    285|  data->set.ssl.key_blob = data->set.blobs[BLOB_KEY];
 3846|       |
 3847|    285|  if(!Curl_clone_primary_ssl_config(&data->set.ssl.primary,
 3848|    285|                                    &conn->ssl_config)) {
 3849|      0|    result = CURLE_OUT_OF_MEMORY;
 3850|      0|    goto out;
 3851|      0|  }
 3852|       |
 3853|    285|#ifndef CURL_DISABLE_PROXY
 3854|    285|  if(!Curl_clone_primary_ssl_config(&data->set.proxy_ssl.primary,
 3855|    285|                                    &conn->proxy_ssl_config)) {
 3856|      0|    result = CURLE_OUT_OF_MEMORY;
 3857|      0|    goto out;
 3858|      0|  }
 3859|    285|#endif
 3860|       |
 3861|    285|  prune_dead_connections(data);
 3862|       |
 3863|       |  /*************************************************************
 3864|       |   * Check the current list of connections to see if we can
 3865|       |   * re-use an already existing one or if we have to create a
 3866|       |   * new one.
 3867|       |   *************************************************************/
 3868|       |
 3869|    285|  DEBUGASSERT(conn->user);
 3870|    285|  DEBUGASSERT(conn->passwd);
 3871|       |
 3872|       |  /* reuse_fresh is TRUE if we are told to use a new connection by force, but
 3873|       |     we only acknowledge this option if this is not a re-used connection
 3874|       |     already (which happens due to follow-location or during a HTTP
 3875|       |     authentication phase). CONNECT_ONLY transfers also refuse reuse. */
 3876|    285|  if((data->set.reuse_fresh && !data->state.this_is_a_follow) ||
 3877|    285|     data->set.connect_only)
 3878|      0|    reuse = FALSE;
 3879|    285|  else
 3880|    285|    reuse = ConnectionExists(data, conn, &conn_temp, &force_reuse, &waitpipe);
 3881|       |
 3882|    285|  if(reuse) {
 3883|       |    /*
 3884|       |     * We already have a connection for this, we got the former connection in
 3885|       |     * the conn_temp variable and thus we need to cleanup the one we just
 3886|       |     * allocated before we can move along and use the previously existing one.
 3887|       |     */
 3888|      0|    reuse_conn(data, conn, conn_temp);
 3889|      0|#ifdef USE_SSL
 3890|      0|    free(conn->ssl_extra);
 3891|      0|#endif
 3892|      0|    free(conn);          /* we don't need this anymore */
 3893|      0|    conn = conn_temp;
 3894|      0|    *in_connect = conn;
 3895|       |
 3896|      0|#ifndef CURL_DISABLE_PROXY
 3897|      0|    infof(data, "Re-using existing connection! (#%ld) with %s %s",
 3898|      0|          conn->connection_id,
 3899|      0|          conn->bits.proxy?"proxy":"host",
 3900|      0|          conn->socks_proxy.host.name ? conn->socks_proxy.host.dispname :
 3901|      0|          conn->http_proxy.host.name ? conn->http_proxy.host.dispname :
 3902|      0|          conn->host.dispname);
 3903|       |#else
 3904|       |    infof(data, "Re-using existing connection! (#%ld) with host %s",
 3905|       |          conn->connection_id, conn->host.dispname);
 3906|       |#endif
 3907|      0|  }
 3908|    285|  else {
 3909|       |    /* We have decided that we want a new connection. However, we may not
 3910|       |       be able to do that if we have reached the limit of how many
 3911|       |       connections we are allowed to open. */
 3912|       |
 3913|    285|    if(conn->handler->flags & PROTOPT_ALPN_NPN) {
 3914|       |      /* The protocol wants it, so set the bits if enabled in the easy handle
 3915|       |         (default) */
 3916|      0|      if(data->set.ssl_enable_alpn)
 3917|      0|        conn->bits.tls_enable_alpn = TRUE;
 3918|      0|      if(data->set.ssl_enable_npn)
 3919|      0|        conn->bits.tls_enable_npn = TRUE;
 3920|      0|    }
 3921|       |
 3922|    285|    if(waitpipe)
 3923|       |      /* There is a connection that *might* become usable for multiplexing
 3924|       |         "soon", and we wait for that */
 3925|      0|      connections_available = FALSE;
 3926|    285|    else {
 3927|       |      /* this gets a lock on the conncache */
 3928|    285|      const char *bundlehost;
 3929|    285|      struct connectbundle *bundle =
 3930|    285|        Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
 3931|    285|                                   &bundlehost);
 3932|       |
 3933|    285|      if(max_host_connections > 0 && bundle &&
 3934|    285|         (bundle->num_connections >= max_host_connections)) {
 3935|      0|        struct connectdata *conn_candidate;
 3936|       |
 3937|       |        /* The bundle is full. Extract the oldest connection. */
 3938|      0|        conn_candidate = Curl_conncache_extract_bundle(data, bundle);
 3939|      0|        CONNCACHE_UNLOCK(data);
 3940|       |
 3941|      0|        if(conn_candidate)
 3942|      0|          (void)Curl_disconnect(data, conn_candidate, FALSE);
 3943|      0|        else {
 3944|      0|          infof(data, "No more connections allowed to host %s: %zu",
 3945|      0|                bundlehost, max_host_connections);
 3946|      0|          connections_available = FALSE;
 3947|      0|        }
 3948|      0|      }
 3949|    285|      else
 3950|    285|        CONNCACHE_UNLOCK(data);
 3951|       |
 3952|    285|    }
 3953|       |
 3954|    285|    if(connections_available &&
 3955|    285|       (max_total_connections > 0) &&
 3956|    285|       (Curl_conncache_size(data) >= max_total_connections)) {
 3957|      0|      struct connectdata *conn_candidate;
 3958|       |
 3959|       |      /* The cache is full. Let's see if we can kill a connection. */
 3960|      0|      conn_candidate = Curl_conncache_extract_oldest(data);
 3961|      0|      if(conn_candidate)
 3962|      0|        (void)Curl_disconnect(data, conn_candidate, FALSE);
 3963|      0|      else {
 3964|      0|        infof(data, "No connections available in cache");
 3965|      0|        connections_available = FALSE;
 3966|      0|      }
 3967|      0|    }
 3968|       |
 3969|    285|    if(!connections_available) {
 3970|      0|      infof(data, "No connections available.");
 3971|       |
 3972|      0|      conn_free(conn);
 3973|      0|      *in_connect = NULL;
 3974|       |
 3975|      0|      result = CURLE_NO_CONNECTION_AVAILABLE;
 3976|      0|      goto out;
 3977|      0|    }
 3978|    285|    else {
 3979|       |      /*
 3980|       |       * This is a brand new connection, so let's store it in the connection
 3981|       |       * cache of ours!
 3982|       |       */
 3983|    285|      Curl_attach_connnection(data, conn);
 3984|    285|      result = Curl_conncache_add_conn(data);
 3985|    285|      if(result)
 3986|      0|        goto out;
 3987|    285|    }
 3988|       |
 3989|    285|#if defined(USE_NTLM)
 3990|       |    /* If NTLM is requested in a part of this connection, make sure we don't
 3991|       |       assume the state is fine as this is a fresh connection and NTLM is
 3992|       |       connection based. */
 3993|    285|    if((data->state.authhost.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 3994|    285|       data->state.authhost.done) {
 3995|      0|      infof(data, "NTLM picked AND auth done set, clear picked!");
 3996|      0|      data->state.authhost.picked = CURLAUTH_NONE;
 3997|      0|      data->state.authhost.done = FALSE;
 3998|      0|    }
 3999|       |
 4000|    285|    if((data->state.authproxy.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 4001|    285|       data->state.authproxy.done) {
 4002|      0|      infof(data, "NTLM-proxy picked AND auth done set, clear picked!");
 4003|      0|      data->state.authproxy.picked = CURLAUTH_NONE;
 4004|      0|      data->state.authproxy.done = FALSE;
 4005|      0|    }
 4006|    285|#endif
 4007|    285|  }
 4008|       |
 4009|       |  /* Setup and init stuff before DO starts, in preparing for the transfer. */
 4010|    285|  Curl_init_do(data, conn);
 4011|       |
 4012|       |  /*
 4013|       |   * Setup whatever necessary for a resumed transfer
 4014|       |   */
 4015|    285|  result = setup_range(data);
 4016|    285|  if(result)
 4017|      0|    goto out;
 4018|       |
 4019|       |  /* Continue connectdata initialization here. */
 4020|       |
 4021|       |  /*
 4022|       |   * Inherit the proper values from the urldata struct AFTER we have arranged
 4023|       |   * the persistent connection stuff
 4024|       |   */
 4025|    285|  conn->seek_func = data->set.seek_func;
 4026|    285|  conn->seek_client = data->set.seek_client;
 4027|       |
 4028|       |  /*************************************************************
 4029|       |   * Resolve the address of the server or proxy
 4030|       |   *************************************************************/
 4031|    285|  result = resolve_server(data, conn, async);
 4032|       |
 4033|       |  /* Strip trailing dots. resolve_server copied the name. */
 4034|    285|  strip_trailing_dot(&conn->host);
 4035|    285|#ifndef CURL_DISABLE_PROXY
 4036|    285|  if(conn->bits.httpproxy)
 4037|      0|    strip_trailing_dot(&conn->http_proxy.host);
 4038|    285|  if(conn->bits.socksproxy)
 4039|      0|    strip_trailing_dot(&conn->socks_proxy.host);
 4040|    285|#endif
 4041|    285|  if(conn->bits.conn_to_host)
 4042|    285|    strip_trailing_dot(&conn->conn_to_host);
 4043|       |
 4044|    406|out:
 4045|    406|  return result;
 4046|    285|}
url.c:allocate_conn:
 1674|    406|{
 1675|    406|  struct connectdata *conn = calloc(1, sizeof(struct connectdata));
 1676|    406|  if(!conn)
 1677|      0|    return NULL;
 1678|       |
 1679|    406|#ifdef USE_SSL
 1680|       |  /* The SSL backend-specific data (ssl_backend_data) objects are allocated as
 1681|       |     a separate array to ensure suitable alignment.
 1682|       |     Note that these backend pointers can be swapped by vtls (eg ssl backend
 1683|       |     data becomes proxy backend data). */
 1684|    406|  {
 1685|    406|    size_t sslsize = Curl_ssl->sizeof_ssl_backend_data;
 1686|    406|    char *ssl = calloc(4, sslsize);
 1687|    406|    if(!ssl) {
 1688|      0|      free(conn);
 1689|      0|      return NULL;
 1690|      0|    }
 1691|    406|    conn->ssl_extra = ssl;
 1692|    406|    conn->ssl[0].backend = (void *)ssl;
 1693|    406|    conn->ssl[1].backend = (void *)(ssl + sslsize);
 1694|    406|#ifndef CURL_DISABLE_PROXY
 1695|    406|    conn->proxy_ssl[0].backend = (void *)(ssl + 2 * sslsize);
 1696|    406|    conn->proxy_ssl[1].backend = (void *)(ssl + 3 * sslsize);
 1697|    406|#endif
 1698|    406|  }
 1699|      0|#endif
 1700|       |
 1701|      0|  conn->handler = &Curl_handler_dummy;  /* Be sure we have a handler defined
 1702|       |                                           already from start to avoid NULL
 1703|       |                                           situations and checks */
 1704|       |
 1705|       |  /* and we setup a few fields in case we end up actually using this struct */
 1706|       |
 1707|    406|  conn->sock[FIRSTSOCKET] = CURL_SOCKET_BAD;     /* no file descriptor */
 1708|    406|  conn->sock[SECONDARYSOCKET] = CURL_SOCKET_BAD; /* no file descriptor */
 1709|    406|  conn->tempsock[0] = CURL_SOCKET_BAD; /* no file descriptor */
 1710|    406|  conn->tempsock[1] = CURL_SOCKET_BAD; /* no file descriptor */
 1711|    406|  conn->connection_id = -1;    /* no ID */
 1712|    406|  conn->port = -1; /* unknown at this point */
 1713|    406|  conn->remote_port = -1; /* unknown at this point */
 1714|       |#if defined(USE_RECV_BEFORE_SEND_WORKAROUND) && defined(DEBUGBUILD)
 1715|       |  conn->postponed[0].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1716|       |  conn->postponed[1].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1717|       |#endif /* USE_RECV_BEFORE_SEND_WORKAROUND && DEBUGBUILD */
 1718|       |
 1719|       |  /* Default protocol-independent behavior doesn't support persistent
 1720|       |     connections, so we set this to force-close. Protocols that support
 1721|       |     this need to set this to FALSE in their "curl_do" functions. */
 1722|    406|  connclose(conn, "Default to force-close");
 1723|       |
 1724|       |  /* Store creation time to help future close decision making */
 1725|    406|  conn->created = Curl_now();
 1726|       |
 1727|       |  /* Store current time to give a baseline to keepalive connection times. */
 1728|    406|  conn->keepalive = Curl_now();
 1729|       |
 1730|    406|#ifndef CURL_DISABLE_PROXY
 1731|    406|  conn->http_proxy.proxytype = data->set.proxytype;
 1732|    406|  conn->socks_proxy.proxytype = CURLPROXY_SOCKS4;
 1733|       |
 1734|       |  /* note that these two proxy bits are now just on what looks to be
 1735|       |     requested, they may be altered down the road */
 1736|    406|  conn->bits.proxy = (data->set.str[STRING_PROXY] &&
 1737|    406|                      *data->set.str[STRING_PROXY]) ? TRUE : FALSE;
 1738|    406|  conn->bits.httpproxy = (conn->bits.proxy &&
 1739|    406|                          (conn->http_proxy.proxytype == CURLPROXY_HTTP ||
 1740|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0 ||
 1741|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTPS)) ?
 1742|    406|                           TRUE : FALSE;
 1743|    406|  conn->bits.socksproxy = (conn->bits.proxy &&
 1744|    406|                           !conn->bits.httpproxy) ? TRUE : FALSE;
 1745|       |
 1746|    406|  if(data->set.str[STRING_PRE_PROXY] && *data->set.str[STRING_PRE_PROXY]) {
 1747|      0|    conn->bits.proxy = TRUE;
 1748|      0|    conn->bits.socksproxy = TRUE;
 1749|      0|  }
 1750|       |
 1751|    406|  conn->bits.proxy_user_passwd =
 1752|    406|    (data->state.aptr.proxyuser) ? TRUE : FALSE;
 1753|    406|  conn->bits.tunnel_proxy = data->set.tunnel_thru_httpproxy;
 1754|    406|#endif /* CURL_DISABLE_PROXY */
 1755|       |
 1756|    406|  conn->bits.user_passwd = (data->state.aptr.user) ? TRUE : FALSE;
 1757|    406|#ifndef CURL_DISABLE_FTP
 1758|    406|  conn->bits.ftp_use_epsv = data->set.ftp_use_epsv;
 1759|    406|  conn->bits.ftp_use_eprt = data->set.ftp_use_eprt;
 1760|    406|#endif
 1761|    406|  conn->ssl_config.verifystatus = data->set.ssl.primary.verifystatus;
 1762|    406|  conn->ssl_config.verifypeer = data->set.ssl.primary.verifypeer;
 1763|    406|  conn->ssl_config.verifyhost = data->set.ssl.primary.verifyhost;
 1764|    406|#ifndef CURL_DISABLE_PROXY
 1765|    406|  conn->proxy_ssl_config.verifystatus =
 1766|    406|    data->set.proxy_ssl.primary.verifystatus;
 1767|    406|  conn->proxy_ssl_config.verifypeer = data->set.proxy_ssl.primary.verifypeer;
 1768|    406|  conn->proxy_ssl_config.verifyhost = data->set.proxy_ssl.primary.verifyhost;
 1769|    406|#endif
 1770|    406|  conn->ip_version = data->set.ipver;
 1771|    406|  conn->bits.connect_only = data->set.connect_only;
 1772|    406|  conn->transport = TRNSPRT_TCP; /* most of them are TCP streams */
 1773|       |
 1774|    406|#if !defined(CURL_DISABLE_HTTP) && defined(USE_NTLM) && \
 1775|    406|    defined(NTLM_WB_ENABLED)
 1776|    406|  conn->ntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1777|    406|  conn->proxyntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1778|    406|#endif
 1779|       |
 1780|       |  /* Initialize the easy handle list */
 1781|    406|  Curl_llist_init(&conn->easyq, NULL);
 1782|       |
 1783|       |#ifdef HAVE_GSSAPI
 1784|       |  conn->data_prot = PROT_CLEAR;
 1785|       |#endif
 1786|       |
 1787|       |  /* Store the local bind parameters that will be used for this connection */
 1788|    406|  if(data->set.str[STRING_DEVICE]) {
 1789|      0|    conn->localdev = strdup(data->set.str[STRING_DEVICE]);
 1790|      0|    if(!conn->localdev)
 1791|      0|      goto error;
 1792|      0|  }
 1793|    406|  conn->localportrange = data->set.localportrange;
 1794|    406|  conn->localport = data->set.localport;
 1795|       |
 1796|       |  /* the close socket stuff needs to be copied to the connection struct as
 1797|       |     it may live on without (this specific) Curl_easy */
 1798|    406|  conn->fclosesocket = data->set.fclosesocket;
 1799|    406|  conn->closesocket_client = data->set.closesocket_client;
 1800|    406|  conn->lastused = Curl_now(); /* used now */
 1801|       |
 1802|    406|  return conn;
 1803|      0|  error:
 1804|       |
 1805|      0|  Curl_llist_destroy(&conn->easyq, NULL);
 1806|      0|  free(conn->localdev);
 1807|      0|#ifdef USE_SSL
 1808|      0|  free(conn->ssl_extra);
 1809|      0|#endif
 1810|      0|  free(conn);
 1811|      0|  return NULL;
 1812|    406|}
url.c:parseurlandfillconn:
 1932|    406|{
 1933|    406|  CURLcode result;
 1934|    406|  CURLU *uh;
 1935|    406|  CURLUcode uc;
 1936|    406|  char *hostname;
 1937|    406|  bool use_set_uh = (data->set.uh && !data->state.this_is_a_follow);
 1938|       |
 1939|    406|  up_free(data); /* cleanup previous leftovers first */
 1940|       |
 1941|       |  /* parse the URL */
 1942|    406|  if(use_set_uh) {
 1943|      0|    uh = data->state.uh = curl_url_dup(data->set.uh);
 1944|      0|  }
 1945|    406|  else {
 1946|    406|    uh = data->state.uh = curl_url();
 1947|    406|  }
 1948|       |
 1949|    406|  if(!uh)
 1950|      0|    return CURLE_OUT_OF_MEMORY;
 1951|       |
 1952|    406|  if(data->set.str[STRING_DEFAULT_PROTOCOL] &&
 1953|    406|     !Curl_is_absolute_url(data->state.url, NULL, MAX_SCHEME_LEN)) {
 1954|      0|    char *url = aprintf("%s://%s", data->set.str[STRING_DEFAULT_PROTOCOL],
 1955|      0|                        data->state.url);
 1956|      0|    if(!url)
 1957|      0|      return CURLE_OUT_OF_MEMORY;
 1958|      0|    if(data->state.url_alloc)
 1959|      0|      free(data->state.url);
 1960|      0|    data->state.url = url;
 1961|      0|    data->state.url_alloc = TRUE;
 1962|      0|  }
 1963|       |
 1964|    406|  if(!use_set_uh) {
 1965|    406|    char *newurl;
 1966|    406|    uc = curl_url_set(uh, CURLUPART_URL, data->state.url,
 1967|    406|                    CURLU_GUESS_SCHEME |
 1968|    406|                    CURLU_NON_SUPPORT_SCHEME |
 1969|    406|                    (data->set.disallow_username_in_url ?
 1970|    406|                     CURLU_DISALLOW_USER : 0) |
 1971|    406|                    (data->set.path_as_is ? CURLU_PATH_AS_IS : 0));
 1972|    406|    if(uc) {
 1973|     56|      DEBUGF(infof(data, "curl_url_set rejected %s: %s", data->state.url,
 1974|     56|                   curl_url_strerror(uc)));
 1975|     56|      return Curl_uc_to_curlcode(uc);
 1976|     56|    }
 1977|       |
 1978|       |    /* after it was parsed, get the generated normalized version */
 1979|    350|    uc = curl_url_get(uh, CURLUPART_URL, &newurl, 0);
 1980|    350|    if(uc)
 1981|      0|      return Curl_uc_to_curlcode(uc);
 1982|    350|    if(data->state.url_alloc)
 1983|      0|      free(data->state.url);
 1984|    350|    data->state.url = newurl;
 1985|    350|    data->state.url_alloc = TRUE;
 1986|    350|  }
 1987|       |
 1988|    350|  uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 1989|    350|  if(uc)
 1990|      0|    return Curl_uc_to_curlcode(uc);
 1991|       |
 1992|    350|  uc = curl_url_get(uh, CURLUPART_HOST, &data->state.up.hostname, 0);
 1993|    350|  if(uc) {
 1994|      0|    if(!strcasecompare("file", data->state.up.scheme))
 1995|      0|      return CURLE_OUT_OF_MEMORY;
 1996|      0|  }
 1997|       |
 1998|    350|#ifndef CURL_DISABLE_HSTS
 1999|    350|  if(data->hsts && strcasecompare("http", data->state.up.scheme)) {
 2000|      0|    if(Curl_hsts(data->hsts, data->state.up.hostname, TRUE)) {
 2001|      0|      char *url;
 2002|      0|      Curl_safefree(data->state.up.scheme);
 2003|      0|      uc = curl_url_set(uh, CURLUPART_SCHEME, "https", 0);
 2004|      0|      if(uc)
 2005|      0|        return Curl_uc_to_curlcode(uc);
 2006|      0|      if(data->state.url_alloc)
 2007|      0|        Curl_safefree(data->state.url);
 2008|       |      /* after update, get the updated version */
 2009|      0|      uc = curl_url_get(uh, CURLUPART_URL, &url, 0);
 2010|      0|      if(uc)
 2011|      0|        return Curl_uc_to_curlcode(uc);
 2012|      0|      uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 2013|      0|      if(uc) {
 2014|      0|        free(url);
 2015|      0|        return Curl_uc_to_curlcode(uc);
 2016|      0|      }
 2017|      0|      data->state.url = url;
 2018|      0|      data->state.url_alloc = TRUE;
 2019|      0|      infof(data, "Switched from HTTP to HTTPS due to HSTS => %s",
 2020|      0|            data->state.url);
 2021|      0|    }
 2022|      0|  }
 2023|    350|#endif
 2024|       |
 2025|    350|  result = findprotocol(data, conn, data->state.up.scheme);
 2026|    350|  if(result)
 2027|     64|    return result;
 2028|       |
 2029|       |  /*
 2030|       |   * User name and password set with their own options override the
 2031|       |   * credentials possibly set in the URL.
 2032|       |   */
 2033|    286|  if(!data->state.aptr.user) {
 2034|       |    /* we don't use the URL API's URL decoder option here since it rejects
 2035|       |       control codes and we want to allow them for some schemes in the user
 2036|       |       and password fields */
 2037|    281|    uc = curl_url_get(uh, CURLUPART_USER, &data->state.up.user, 0);
 2038|    281|    if(!uc) {
 2039|    153|      char *decoded;
 2040|    153|      result = Curl_urldecode(NULL, data->state.up.user, 0, &decoded, NULL,
 2041|    153|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2042|    153|                              REJECT_ZERO : REJECT_CTRL);
 2043|    153|      if(result)
 2044|      1|        return result;
 2045|    152|      conn->user = decoded;
 2046|    152|      conn->bits.user_passwd = TRUE;
 2047|    152|      result = Curl_setstropt(&data->state.aptr.user, decoded);
 2048|    152|      if(result)
 2049|      0|        return result;
 2050|    152|    }
 2051|    128|    else if(uc != CURLUE_NO_USER)
 2052|      0|      return Curl_uc_to_curlcode(uc);
 2053|    281|  }
 2054|       |
 2055|    285|  if(!data->state.aptr.passwd) {
 2056|    283|    uc = curl_url_get(uh, CURLUPART_PASSWORD, &data->state.up.password, 0);
 2057|    283|    if(!uc) {
 2058|      8|      char *decoded;
 2059|      8|      result = Curl_urldecode(NULL, data->state.up.password, 0, &decoded, NULL,
 2060|      8|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2061|      8|                              REJECT_ZERO : REJECT_CTRL);
 2062|      8|      if(result)
 2063|      0|        return result;
 2064|      8|      conn->passwd = decoded;
 2065|      8|      conn->bits.user_passwd = TRUE;
 2066|      8|      result = Curl_setstropt(&data->state.aptr.passwd, decoded);
 2067|      8|      if(result)
 2068|      0|        return result;
 2069|      8|    }
 2070|    275|    else if(uc != CURLUE_NO_PASSWORD)
 2071|      0|      return Curl_uc_to_curlcode(uc);
 2072|    283|  }
 2073|       |
 2074|    285|  uc = curl_url_get(uh, CURLUPART_OPTIONS, &data->state.up.options,
 2075|    285|                    CURLU_URLDECODE);
 2076|    285|  if(!uc) {
 2077|      0|    conn->options = strdup(data->state.up.options);
 2078|      0|    if(!conn->options)
 2079|      0|      return CURLE_OUT_OF_MEMORY;
 2080|      0|  }
 2081|    285|  else if(uc != CURLUE_NO_OPTIONS)
 2082|      0|    return Curl_uc_to_curlcode(uc);
 2083|       |
 2084|    285|  uc = curl_url_get(uh, CURLUPART_PATH, &data->state.up.path, 0);
 2085|    285|  if(uc)
 2086|      0|    return Curl_uc_to_curlcode(uc);
 2087|       |
 2088|    285|  uc = curl_url_get(uh, CURLUPART_PORT, &data->state.up.port,
 2089|    285|                    CURLU_DEFAULT_PORT);
 2090|    285|  if(uc) {
 2091|      0|    if(!strcasecompare("file", data->state.up.scheme))
 2092|      0|      return CURLE_OUT_OF_MEMORY;
 2093|      0|  }
 2094|    285|  else {
 2095|    285|    unsigned long port = strtoul(data->state.up.port, NULL, 10);
 2096|    285|    conn->port = conn->remote_port =
 2097|    285|      (data->set.use_port && data->state.allow_port) ?
 2098|    285|      (int)data->set.use_port : curlx_ultous(port);
 2099|    285|  }
 2100|       |
 2101|    285|  (void)curl_url_get(uh, CURLUPART_QUERY, &data->state.up.query, 0);
 2102|       |
 2103|    285|  hostname = data->state.up.hostname;
 2104|    285|  if(hostname && hostname[0] == '[') {
 2105|       |    /* This looks like an IPv6 address literal. See if there is an address
 2106|       |       scope. */
 2107|      0|    size_t hlen;
 2108|      0|    conn->bits.ipv6_ip = TRUE;
 2109|       |    /* cut off the brackets! */
 2110|      0|    hostname++;
 2111|      0|    hlen = strlen(hostname);
 2112|      0|    hostname[hlen - 1] = 0;
 2113|       |
 2114|      0|    zonefrom_url(uh, data, conn);
 2115|      0|  }
 2116|       |
 2117|       |  /* make sure the connect struct gets its own copy of the host name */
 2118|    285|  conn->host.rawalloc = strdup(hostname ? hostname : "");
 2119|    285|  if(!conn->host.rawalloc)
 2120|      0|    return CURLE_OUT_OF_MEMORY;
 2121|    285|  conn->host.name = conn->host.rawalloc;
 2122|       |
 2123|    285|  if(data->set.scope_id)
 2124|       |    /* Override any scope that was set above.  */
 2125|      0|    conn->scope_id = data->set.scope_id;
 2126|       |
 2127|    285|  return CURLE_OK;
 2128|    285|}
url.c:findprotocol:
 1832|    350|{
 1833|    350|  const struct Curl_handler *p = Curl_builtin_scheme(protostr);
 1834|       |
 1835|    350|  if(p && /* Protocol found in table. Check if allowed */
 1836|    350|     (data->set.allowed_protocols & p->protocol)) {
 1837|       |
 1838|       |    /* it is allowed for "normal" request, now do an extra check if this is
 1839|       |       the result of a redirect */
 1840|    286|    if(data->state.this_is_a_follow &&
 1841|    286|       !(data->set.redir_protocols & p->protocol))
 1842|       |      /* nope, get out */
 1843|      0|      ;
 1844|    286|    else {
 1845|       |      /* Perform setup complement if some. */
 1846|    286|      conn->handler = conn->given = p;
 1847|       |
 1848|       |      /* 'port' and 'remote_port' are set in setup_connection_internals() */
 1849|    286|      return CURLE_OK;
 1850|    286|    }
 1851|    286|  }
 1852|       |
 1853|       |  /* The protocol was not found in the table, but we don't have to assign it
 1854|       |     to anything since it is already assigned to a dummy-struct in the
 1855|       |     create_conn() function when the connectdata struct is allocated. */
 1856|     64|  failf(data, "Protocol \"%s\" not supported or disabled in " LIBCURL_NAME,
 1857|     64|        protostr);
 1858|       |
 1859|     64|  return CURLE_UNSUPPORTED_PROTOCOL;
 1860|    350|}
url.c:create_conn_helper_init_proxy:
 2575|    285|{
 2576|    285|  char *proxy = NULL;
 2577|    285|  char *socksproxy = NULL;
 2578|    285|  char *no_proxy = NULL;
 2579|    285|  CURLcode result = CURLE_OK;
 2580|       |
 2581|       |  /*************************************************************
 2582|       |   * Extract the user and password from the authentication string
 2583|       |   *************************************************************/
 2584|    285|  if(conn->bits.proxy_user_passwd) {
 2585|      0|    result = parse_proxy_auth(data, conn);
 2586|      0|    if(result)
 2587|      0|      goto out;
 2588|      0|  }
 2589|       |
 2590|       |  /*************************************************************
 2591|       |   * Detect what (if any) proxy to use
 2592|       |   *************************************************************/
 2593|    285|  if(data->set.str[STRING_PROXY]) {
 2594|      0|    proxy = strdup(data->set.str[STRING_PROXY]);
 2595|       |    /* if global proxy is set, this is it */
 2596|      0|    if(NULL == proxy) {
 2597|      0|      failf(data, "memory shortage");
 2598|      0|      result = CURLE_OUT_OF_MEMORY;
 2599|      0|      goto out;
 2600|      0|    }
 2601|      0|  }
 2602|       |
 2603|    285|  if(data->set.str[STRING_PRE_PROXY]) {
 2604|      0|    socksproxy = strdup(data->set.str[STRING_PRE_PROXY]);
 2605|       |    /* if global socks proxy is set, this is it */
 2606|      0|    if(NULL == socksproxy) {
 2607|      0|      failf(data, "memory shortage");
 2608|      0|      result = CURLE_OUT_OF_MEMORY;
 2609|      0|      goto out;
 2610|      0|    }
 2611|      0|  }
 2612|       |
 2613|    285|  if(!data->set.str[STRING_NOPROXY]) {
 2614|    285|    const char *p = "no_proxy";
 2615|    285|    no_proxy = curl_getenv(p);
 2616|    285|    if(!no_proxy) {
 2617|    285|      p = "NO_PROXY";
 2618|    285|      no_proxy = curl_getenv(p);
 2619|    285|    }
 2620|    285|    if(no_proxy) {
 2621|      0|      infof(data, "Uses proxy env variable %s == '%s'", p, no_proxy);
 2622|      0|    }
 2623|    285|  }
 2624|       |
 2625|    285|  if(check_noproxy(conn->host.name, data->set.str[STRING_NOPROXY] ?
 2626|    285|      data->set.str[STRING_NOPROXY] : no_proxy)) {
 2627|      0|    Curl_safefree(proxy);
 2628|      0|    Curl_safefree(socksproxy);
 2629|      0|  }
 2630|    285|#ifndef CURL_DISABLE_HTTP
 2631|    285|  else if(!proxy && !socksproxy)
 2632|       |    /* if the host is not in the noproxy list, detect proxy. */
 2633|    285|    proxy = detect_proxy(data, conn);
 2634|    285|#endif /* CURL_DISABLE_HTTP */
 2635|       |
 2636|    285|  Curl_safefree(no_proxy);
 2637|       |
 2638|    285|#ifdef USE_UNIX_SOCKETS
 2639|       |  /* For the time being do not mix proxy and unix domain sockets. See #1274 */
 2640|    285|  if(proxy && conn->unix_domain_socket) {
 2641|      0|    free(proxy);
 2642|      0|    proxy = NULL;
 2643|      0|  }
 2644|    285|#endif
 2645|       |
 2646|    285|  if(proxy && (!*proxy || (conn->handler->flags & PROTOPT_NONETWORK))) {
 2647|      0|    free(proxy);  /* Don't bother with an empty proxy string or if the
 2648|       |                     protocol doesn't work with network */
 2649|      0|    proxy = NULL;
 2650|      0|  }
 2651|    285|  if(socksproxy && (!*socksproxy ||
 2652|      0|                    (conn->handler->flags & PROTOPT_NONETWORK))) {
 2653|      0|    free(socksproxy);  /* Don't bother with an empty socks proxy string or if
 2654|       |                          the protocol doesn't work with network */
 2655|      0|    socksproxy = NULL;
 2656|      0|  }
 2657|       |
 2658|       |  /***********************************************************************
 2659|       |   * If this is supposed to use a proxy, we need to figure out the proxy host
 2660|       |   * name, proxy type and port number, so that we can re-use an existing
 2661|       |   * connection that may exist registered to the same proxy host.
 2662|       |   ***********************************************************************/
 2663|    285|  if(proxy || socksproxy) {
 2664|      0|    if(proxy) {
 2665|      0|      result = parse_proxy(data, conn, proxy, conn->http_proxy.proxytype);
 2666|      0|      Curl_safefree(proxy); /* parse_proxy copies the proxy string */
 2667|      0|      if(result)
 2668|      0|        goto out;
 2669|      0|    }
 2670|       |
 2671|      0|    if(socksproxy) {
 2672|      0|      result = parse_proxy(data, conn, socksproxy,
 2673|      0|                           conn->socks_proxy.proxytype);
 2674|       |      /* parse_proxy copies the socks proxy string */
 2675|      0|      Curl_safefree(socksproxy);
 2676|      0|      if(result)
 2677|      0|        goto out;
 2678|      0|    }
 2679|       |
 2680|      0|    if(conn->http_proxy.host.rawalloc) {
 2681|       |#ifdef CURL_DISABLE_HTTP
 2682|       |      /* asking for a HTTP proxy is a bit funny when HTTP is disabled... */
 2683|       |      result = CURLE_UNSUPPORTED_PROTOCOL;
 2684|       |      goto out;
 2685|       |#else
 2686|       |      /* force this connection's protocol to become HTTP if compatible */
 2687|      0|      if(!(conn->handler->protocol & PROTO_FAMILY_HTTP)) {
 2688|      0|        if((conn->handler->flags & PROTOPT_PROXY_AS_HTTP) &&
 2689|      0|           !conn->bits.tunnel_proxy)
 2690|      0|          conn->handler = &Curl_handler_http;
 2691|      0|        else
 2692|       |          /* if not converting to HTTP over the proxy, enforce tunneling */
 2693|      0|          conn->bits.tunnel_proxy = TRUE;
 2694|      0|      }
 2695|      0|      conn->bits.httpproxy = TRUE;
 2696|      0|#endif
 2697|      0|    }
 2698|      0|    else {
 2699|      0|      conn->bits.httpproxy = FALSE; /* not a HTTP proxy */
 2700|      0|      conn->bits.tunnel_proxy = FALSE; /* no tunneling if not HTTP */
 2701|      0|    }
 2702|       |
 2703|      0|    if(conn->socks_proxy.host.rawalloc) {
 2704|      0|      if(!conn->http_proxy.host.rawalloc) {
 2705|       |        /* once a socks proxy */
 2706|      0|        if(!conn->socks_proxy.user) {
 2707|      0|          conn->socks_proxy.user = conn->http_proxy.user;
 2708|      0|          conn->http_proxy.user = NULL;
 2709|      0|          Curl_safefree(conn->socks_proxy.passwd);
 2710|      0|          conn->socks_proxy.passwd = conn->http_proxy.passwd;
 2711|      0|          conn->http_proxy.passwd = NULL;
 2712|      0|        }
 2713|      0|      }
 2714|      0|      conn->bits.socksproxy = TRUE;
 2715|      0|    }
 2716|      0|    else
 2717|      0|      conn->bits.socksproxy = FALSE; /* not a socks proxy */
 2718|      0|  }
 2719|    285|  else {
 2720|    285|    conn->bits.socksproxy = FALSE;
 2721|    285|    conn->bits.httpproxy = FALSE;
 2722|    285|  }
 2723|    285|  conn->bits.proxy = conn->bits.httpproxy || conn->bits.socksproxy;
 2724|       |
 2725|    285|  if(!conn->bits.proxy) {
 2726|       |    /* we aren't using the proxy after all... */
 2727|    285|    conn->bits.proxy = FALSE;
 2728|    285|    conn->bits.httpproxy = FALSE;
 2729|    285|    conn->bits.socksproxy = FALSE;
 2730|    285|    conn->bits.proxy_user_passwd = FALSE;
 2731|    285|    conn->bits.tunnel_proxy = FALSE;
 2732|       |    /* CURLPROXY_HTTPS does not have its own flag in conn->bits, yet we need
 2733|       |       to signal that CURLPROXY_HTTPS is not used for this connection */
 2734|    285|    conn->http_proxy.proxytype = CURLPROXY_HTTP;
 2735|    285|  }
 2736|       |
 2737|    285|out:
 2738|       |
 2739|    285|  free(socksproxy);
 2740|    285|  free(proxy);
 2741|    285|  return result;
 2742|    285|}
url.c:check_noproxy:
 2223|    285|{
 2224|       |  /* no_proxy=domain1.dom,host.domain2.dom
 2225|       |   *   (a comma-separated list of hosts which should
 2226|       |   *   not be proxied, or an asterisk to override
 2227|       |   *   all proxy variables)
 2228|       |   */
 2229|    285|  if(no_proxy && no_proxy[0]) {
 2230|      0|    size_t tok_start;
 2231|      0|    size_t tok_end;
 2232|      0|    const char *separator = ", ";
 2233|      0|    size_t no_proxy_len;
 2234|      0|    size_t namelen;
 2235|      0|    char *endptr;
 2236|      0|    if(strcasecompare("*", no_proxy)) {
 2237|      0|      return TRUE;
 2238|      0|    }
 2239|       |
 2240|       |    /* NO_PROXY was specified and it wasn't just an asterisk */
 2241|       |
 2242|      0|    no_proxy_len = strlen(no_proxy);
 2243|      0|    if(name[0] == '[') {
 2244|       |      /* IPv6 numerical address */
 2245|      0|      endptr = strchr(name, ']');
 2246|      0|      if(!endptr)
 2247|      0|        return FALSE;
 2248|      0|      name++;
 2249|      0|      namelen = endptr - name;
 2250|      0|    }
 2251|      0|    else
 2252|      0|      namelen = strlen(name);
 2253|       |
 2254|      0|    for(tok_start = 0; tok_start < no_proxy_len; tok_start = tok_end + 1) {
 2255|      0|      while(tok_start < no_proxy_len &&
 2256|      0|            strchr(separator, no_proxy[tok_start]) != NULL) {
 2257|       |        /* Look for the beginning of the token. */
 2258|      0|        ++tok_start;
 2259|      0|      }
 2260|       |
 2261|      0|      if(tok_start == no_proxy_len)
 2262|      0|        break; /* It was all trailing separator chars, no more tokens. */
 2263|       |
 2264|      0|      for(tok_end = tok_start; tok_end < no_proxy_len &&
 2265|      0|            strchr(separator, no_proxy[tok_end]) == NULL; ++tok_end)
 2266|       |        /* Look for the end of the token. */
 2267|      0|        ;
 2268|       |
 2269|       |      /* To match previous behavior, where it was necessary to specify
 2270|       |       * ".local.com" to prevent matching "notlocal.com", we will leave
 2271|       |       * the '.' off.
 2272|       |       */
 2273|      0|      if(no_proxy[tok_start] == '.')
 2274|      0|        ++tok_start;
 2275|       |
 2276|      0|      if((tok_end - tok_start) <= namelen) {
 2277|       |        /* Match the last part of the name to the domain we are checking. */
 2278|      0|        const char *checkn = name + namelen - (tok_end - tok_start);
 2279|      0|        if(strncasecompare(no_proxy + tok_start, checkn,
 2280|      0|                           tok_end - tok_start)) {
 2281|      0|          if((tok_end - tok_start) == namelen || *(checkn - 1) == '.') {
 2282|       |            /* We either have an exact match, or the previous character is a .
 2283|       |             * so it is within the same domain, so no proxy for this host.
 2284|       |             */
 2285|      0|            return TRUE;
 2286|      0|          }
 2287|      0|        }
 2288|      0|      } /* if((tok_end - tok_start) <= namelen) */
 2289|      0|    } /* for(tok_start = 0; tok_start < no_proxy_len;
 2290|       |         tok_start = tok_end + 1) */
 2291|      0|  } /* NO_PROXY was specified and it wasn't just an asterisk */
 2292|       |
 2293|    285|  return FALSE;
 2294|    285|}
url.c:detect_proxy:
 2304|    285|{
 2305|    285|  char *proxy = NULL;
 2306|       |
 2307|       |  /* If proxy was not specified, we check for default proxy environment
 2308|       |   * variables, to enable i.e Lynx compliance:
 2309|       |   *
 2310|       |   * http_proxy=http://some.server.dom:port/
 2311|       |   * https_proxy=http://some.server.dom:port/
 2312|       |   * ftp_proxy=http://some.server.dom:port/
 2313|       |   * no_proxy=domain1.dom,host.domain2.dom
 2314|       |   *   (a comma-separated list of hosts which should
 2315|       |   *   not be proxied, or an asterisk to override
 2316|       |   *   all proxy variables)
 2317|       |   * all_proxy=http://some.server.dom:port/
 2318|       |   *   (seems to exist for the CERN www lib. Probably
 2319|       |   *   the first to check for.)
 2320|       |   *
 2321|       |   * For compatibility, the all-uppercase versions of these variables are
 2322|       |   * checked if the lowercase versions don't exist.
 2323|       |   */
 2324|    285|  char proxy_env[128];
 2325|    285|  const char *protop = conn->handler->scheme;
 2326|    285|  char *envp = proxy_env;
 2327|    285|  char *prox;
 2328|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
 2329|       |  (void)data;
 2330|       |#endif
 2331|       |
 2332|       |  /* Now, build <protocol>_proxy and check for such a one to use */
 2333|  1.42k|  while(*protop)
 2334|  1.14k|    *envp++ = (char)tolower((int)*protop++);
 2335|       |
 2336|       |  /* append _proxy */
 2337|    285|  strcpy(envp, "_proxy");
 2338|       |
 2339|       |  /* read the protocol proxy: */
 2340|    285|  prox = curl_getenv(proxy_env);
 2341|       |
 2342|       |  /*
 2343|       |   * We don't try the uppercase version of HTTP_PROXY because of
 2344|       |   * security reasons:
 2345|       |   *
 2346|       |   * When curl is used in a webserver application
 2347|       |   * environment (cgi or php), this environment variable can
 2348|       |   * be controlled by the web server user by setting the
 2349|       |   * http header 'Proxy:' to some value.
 2350|       |   *
 2351|       |   * This can cause 'internal' http/ftp requests to be
 2352|       |   * arbitrarily redirected by any external attacker.
 2353|       |   */
 2354|    285|  if(!prox && !strcasecompare("http_proxy", proxy_env)) {
 2355|       |    /* There was no lowercase variable, try the uppercase version: */
 2356|    285|    Curl_strntoupper(proxy_env, proxy_env, sizeof(proxy_env));
 2357|    285|    prox = curl_getenv(proxy_env);
 2358|    285|  }
 2359|       |
 2360|    285|  envp = proxy_env;
 2361|    285|  if(prox) {
 2362|      0|    proxy = prox; /* use this */
 2363|      0|  }
 2364|    285|  else {
 2365|    285|    envp = (char *)"all_proxy";
 2366|    285|    proxy = curl_getenv(envp); /* default proxy to use */
 2367|    285|    if(!proxy) {
 2368|    285|      envp = (char *)"ALL_PROXY";
 2369|    285|      proxy = curl_getenv(envp);
 2370|    285|    }
 2371|    285|  }
 2372|    285|  if(proxy)
 2373|      0|    infof(data, "Uses proxy env variable %s == '%s'", envp, proxy);
 2374|       |
 2375|    285|  return proxy;
 2376|    285|}
url.c:parse_remote_port:
 2888|    285|{
 2889|       |
 2890|    285|  if(data->set.use_port && data->state.allow_port) {
 2891|       |    /* if set, we use this instead of the port possibly given in the URL */
 2892|      0|    char portbuf[16];
 2893|      0|    CURLUcode uc;
 2894|      0|    conn->remote_port = (unsigned short)data->set.use_port;
 2895|      0|    msnprintf(portbuf, sizeof(portbuf), "%d", conn->remote_port);
 2896|      0|    uc = curl_url_set(data->state.uh, CURLUPART_PORT, portbuf, 0);
 2897|      0|    if(uc)
 2898|      0|      return CURLE_OUT_OF_MEMORY;
 2899|      0|  }
 2900|       |
 2901|    285|  return CURLE_OK;
 2902|    285|}
url.c:override_login:
 2910|    285|{
 2911|    285|  CURLUcode uc;
 2912|    285|  char **userp = &conn->user;
 2913|    285|  char **passwdp = &conn->passwd;
 2914|    285|  char **optionsp = &conn->options;
 2915|       |
 2916|    285|#ifndef CURL_DISABLE_NETRC
 2917|    285|  if(data->set.use_netrc == CURL_NETRC_REQUIRED && conn->bits.user_passwd) {
 2918|      0|    Curl_safefree(*userp);
 2919|      0|    Curl_safefree(*passwdp);
 2920|      0|    conn->bits.user_passwd = FALSE; /* disable user+password */
 2921|      0|  }
 2922|    285|#endif
 2923|       |
 2924|    285|  if(data->set.str[STRING_OPTIONS]) {
 2925|      0|    free(*optionsp);
 2926|      0|    *optionsp = strdup(data->set.str[STRING_OPTIONS]);
 2927|      0|    if(!*optionsp)
 2928|      0|      return CURLE_OUT_OF_MEMORY;
 2929|      0|  }
 2930|       |
 2931|    285|#ifndef CURL_DISABLE_NETRC
 2932|    285|  conn->bits.netrc = FALSE;
 2933|    285|  if(data->set.use_netrc && !data->set.str[STRING_USERNAME]) {
 2934|      0|    bool netrc_user_changed = FALSE;
 2935|      0|    bool netrc_passwd_changed = FALSE;
 2936|      0|    int ret;
 2937|       |
 2938|      0|    ret = Curl_parsenetrc(conn->host.name,
 2939|      0|                          userp, passwdp,
 2940|      0|                          &netrc_user_changed, &netrc_passwd_changed,
 2941|      0|                          data->set.str[STRING_NETRC_FILE]);
 2942|      0|    if(ret > 0) {
 2943|      0|      infof(data, "Couldn't find host %s in the %s file; using defaults",
 2944|      0|            conn->host.name, data->set.str[STRING_NETRC_FILE]);
 2945|      0|    }
 2946|      0|    else if(ret < 0) {
 2947|      0|      return CURLE_OUT_OF_MEMORY;
 2948|      0|    }
 2949|      0|    else {
 2950|       |      /* set bits.netrc TRUE to remember that we got the name from a .netrc
 2951|       |         file, so that it is safe to use even if we followed a Location: to a
 2952|       |         different host or similar. */
 2953|      0|      conn->bits.netrc = TRUE;
 2954|      0|      conn->bits.user_passwd = TRUE; /* enable user+password */
 2955|      0|    }
 2956|      0|  }
 2957|    285|#endif
 2958|       |
 2959|       |  /* for updated strings, we update them in the URL */
 2960|    285|  if(*userp) {
 2961|    152|    CURLcode result = Curl_setstropt(&data->state.aptr.user, *userp);
 2962|    152|    if(result)
 2963|      0|      return result;
 2964|    152|  }
 2965|    285|  if(data->state.aptr.user) {
 2966|    157|    uc = curl_url_set(data->state.uh, CURLUPART_USER, data->state.aptr.user,
 2967|    157|                      CURLU_URLENCODE);
 2968|    157|    if(uc)
 2969|      0|      return Curl_uc_to_curlcode(uc);
 2970|    157|    if(!*userp) {
 2971|      5|      *userp = strdup(data->state.aptr.user);
 2972|      5|      if(!*userp)
 2973|      0|        return CURLE_OUT_OF_MEMORY;
 2974|      5|    }
 2975|    157|  }
 2976|       |
 2977|    285|  if(*passwdp) {
 2978|      8|    CURLcode result = Curl_setstropt(&data->state.aptr.passwd, *passwdp);
 2979|      8|    if(result)
 2980|      0|      return result;
 2981|      8|  }
 2982|    285|  if(data->state.aptr.passwd) {
 2983|     10|    uc = curl_url_set(data->state.uh, CURLUPART_PASSWORD,
 2984|     10|                      data->state.aptr.passwd, CURLU_URLENCODE);
 2985|     10|    if(uc)
 2986|      0|      return Curl_uc_to_curlcode(uc);
 2987|     10|    if(!*passwdp) {
 2988|      2|      *passwdp = strdup(data->state.aptr.passwd);
 2989|      2|      if(!*passwdp)
 2990|      0|        return CURLE_OUT_OF_MEMORY;
 2991|      2|    }
 2992|     10|  }
 2993|       |
 2994|    285|  return CURLE_OK;
 2995|    285|}
url.c:set_login:
 3001|    285|{
 3002|    285|  CURLcode result = CURLE_OK;
 3003|    285|  const char *setuser = CURL_DEFAULT_USER;
 3004|    285|  const char *setpasswd = CURL_DEFAULT_PASSWORD;
 3005|       |
 3006|       |  /* If our protocol needs a password and we have none, use the defaults */
 3007|    285|  if((conn->handler->flags & PROTOPT_NEEDSPWD) && !conn->bits.user_passwd)
 3008|      0|    ;
 3009|    285|  else {
 3010|    285|    setuser = "";
 3011|    285|    setpasswd = "";
 3012|    285|  }
 3013|       |  /* Store the default user */
 3014|    285|  if(!conn->user) {
 3015|    128|    conn->user = strdup(setuser);
 3016|    128|    if(!conn->user)
 3017|      0|      return CURLE_OUT_OF_MEMORY;
 3018|    128|  }
 3019|       |
 3020|       |  /* Store the default password */
 3021|    285|  if(!conn->passwd) {
 3022|    275|    conn->passwd = strdup(setpasswd);
 3023|    275|    if(!conn->passwd)
 3024|      0|      result = CURLE_OUT_OF_MEMORY;
 3025|    275|  }
 3026|       |
 3027|    285|  return result;
 3028|    285|}
url.c:parse_connect_to_slist:
 3211|    285|{
 3212|    285|  CURLcode result = CURLE_OK;
 3213|    285|  char *host = NULL;
 3214|    285|  int port = -1;
 3215|       |
 3216|    570|  while(conn_to_host && !host && port == -1) {
 3217|    285|    result = parse_connect_to_string(data, conn, conn_to_host->data,
 3218|    285|                                     &host, &port);
 3219|    285|    if(result)
 3220|      0|      return result;
 3221|       |
 3222|    285|    if(host && *host) {
 3223|    285|      conn->conn_to_host.rawalloc = host;
 3224|    285|      conn->conn_to_host.name = host;
 3225|    285|      conn->bits.conn_to_host = TRUE;
 3226|       |
 3227|    285|      infof(data, "Connecting to hostname: %s", host);
 3228|    285|    }
 3229|      0|    else {
 3230|       |      /* no "connect to host" */
 3231|      0|      conn->bits.conn_to_host = FALSE;
 3232|      0|      Curl_safefree(host);
 3233|      0|    }
 3234|       |
 3235|    285|    if(port >= 0) {
 3236|      0|      conn->conn_to_port = port;
 3237|      0|      conn->bits.conn_to_port = TRUE;
 3238|      0|      infof(data, "Connecting to port: %d", port);
 3239|      0|    }
 3240|    285|    else {
 3241|       |      /* no "connect to port" */
 3242|    285|      conn->bits.conn_to_port = FALSE;
 3243|    285|      port = -1;
 3244|    285|    }
 3245|       |
 3246|    285|    conn_to_host = conn_to_host->next;
 3247|    285|  }
 3248|       |
 3249|    285|#ifndef CURL_DISABLE_ALTSVC
 3250|    285|  if(data->asi && !host && (port == -1) &&
 3251|    285|     ((conn->handler->protocol == CURLPROTO_HTTPS) ||
 3252|      0|#ifdef CURLDEBUG
 3253|       |      /* allow debug builds to circumvent the HTTPS restriction */
 3254|      0|      getenv("CURL_ALTSVC_HTTP")
 3255|       |#else
 3256|       |      0
 3257|       |#endif
 3258|      0|       )) {
 3259|       |    /* no connect_to match, try alt-svc! */
 3260|      0|    enum alpnid srcalpnid;
 3261|      0|    bool hit;
 3262|      0|    struct altsvc *as;
 3263|      0|    const int allowed_versions = ( ALPN_h1
 3264|      0|#ifdef USE_NGHTTP2
 3265|      0|      | ALPN_h2
 3266|      0|#endif
 3267|       |#ifdef ENABLE_QUIC
 3268|       |      | ALPN_h3
 3269|       |#endif
 3270|      0|      ) & data->asi->flags;
 3271|       |
 3272|      0|    host = conn->host.rawalloc;
 3273|      0|#ifdef USE_NGHTTP2
 3274|       |    /* with h2 support, check that first */
 3275|      0|    srcalpnid = ALPN_h2;
 3276|      0|    hit = Curl_altsvc_lookup(data->asi,
 3277|      0|                             srcalpnid, host, conn->remote_port, /* from */
 3278|      0|                             &as /* to */,
 3279|      0|                             allowed_versions);
 3280|      0|    if(!hit)
 3281|      0|#endif
 3282|      0|    {
 3283|      0|      srcalpnid = ALPN_h1;
 3284|      0|      hit = Curl_altsvc_lookup(data->asi,
 3285|      0|                               srcalpnid, host, conn->remote_port, /* from */
 3286|      0|                               &as /* to */,
 3287|      0|                               allowed_versions);
 3288|      0|    }
 3289|      0|    if(hit) {
 3290|      0|      char *hostd = strdup((char *)as->dst.host);
 3291|      0|      if(!hostd)
 3292|      0|        return CURLE_OUT_OF_MEMORY;
 3293|      0|      conn->conn_to_host.rawalloc = hostd;
 3294|      0|      conn->conn_to_host.name = hostd;
 3295|      0|      conn->bits.conn_to_host = TRUE;
 3296|      0|      conn->conn_to_port = as->dst.port;
 3297|      0|      conn->bits.conn_to_port = TRUE;
 3298|      0|      conn->bits.altused = TRUE;
 3299|      0|      infof(data, "Alt-svc connecting from [%s]%s:%d to [%s]%s:%d",
 3300|      0|            Curl_alpnid2str(srcalpnid), host, conn->remote_port,
 3301|      0|            Curl_alpnid2str(as->dst.alpnid), hostd, as->dst.port);
 3302|      0|      if(srcalpnid != as->dst.alpnid) {
 3303|       |        /* protocol version switch */
 3304|      0|        switch(as->dst.alpnid) {
 3305|      0|        case ALPN_h1:
 3306|      0|          conn->httpversion = 11;
 3307|      0|          break;
 3308|      0|        case ALPN_h2:
 3309|      0|          conn->httpversion = 20;
 3310|      0|          break;
 3311|      0|        case ALPN_h3:
 3312|      0|          conn->transport = TRNSPRT_QUIC;
 3313|      0|          conn->httpversion = 30;
 3314|      0|          break;
 3315|      0|        default: /* shouldn't be possible */
 3316|      0|          break;
 3317|      0|        }
 3318|      0|      }
 3319|      0|    }
 3320|      0|  }
 3321|    285|#endif
 3322|       |
 3323|    285|  return result;
 3324|    285|}
url.c:parse_connect_to_string:
 3143|    285|{
 3144|    285|  CURLcode result = CURLE_OK;
 3145|    285|  const char *ptr = conn_to_host;
 3146|    285|  int host_match = FALSE;
 3147|    285|  int port_match = FALSE;
 3148|       |
 3149|    285|  *host_result = NULL;
 3150|    285|  *port_result = -1;
 3151|       |
 3152|    285|  if(*ptr == ':') {
 3153|       |    /* an empty hostname always matches */
 3154|    285|    host_match = TRUE;
 3155|    285|    ptr++;
 3156|    285|  }
 3157|      0|  else {
 3158|       |    /* check whether the URL's hostname matches */
 3159|      0|    size_t hostname_to_match_len;
 3160|      0|    char *hostname_to_match = aprintf("%s%s%s",
 3161|      0|                                      conn->bits.ipv6_ip ? "[" : "",
 3162|      0|                                      conn->host.name,
 3163|      0|                                      conn->bits.ipv6_ip ? "]" : "");
 3164|      0|    if(!hostname_to_match)
 3165|      0|      return CURLE_OUT_OF_MEMORY;
 3166|      0|    hostname_to_match_len = strlen(hostname_to_match);
 3167|      0|    host_match = strncasecompare(ptr, hostname_to_match,
 3168|      0|                                 hostname_to_match_len);
 3169|      0|    free(hostname_to_match);
 3170|      0|    ptr += hostname_to_match_len;
 3171|       |
 3172|      0|    host_match = host_match && *ptr == ':';
 3173|      0|    ptr++;
 3174|      0|  }
 3175|       |
 3176|    285|  if(host_match) {
 3177|    285|    if(*ptr == ':') {
 3178|       |      /* an empty port always matches */
 3179|    285|      port_match = TRUE;
 3180|    285|      ptr++;
 3181|    285|    }
 3182|      0|    else {
 3183|       |      /* check whether the URL's port matches */
 3184|      0|      char *ptr_next = strchr(ptr, ':');
 3185|      0|      if(ptr_next) {
 3186|      0|        char *endp = NULL;
 3187|      0|        long port_to_match = strtol(ptr, &endp, 10);
 3188|      0|        if((endp == ptr_next) && (port_to_match == conn->remote_port)) {
 3189|      0|          port_match = TRUE;
 3190|      0|          ptr = ptr_next + 1;
 3191|      0|        }
 3192|      0|      }
 3193|      0|    }
 3194|    285|  }
 3195|       |
 3196|    285|  if(host_match && port_match) {
 3197|       |    /* parse the hostname and port to connect to */
 3198|    285|    result = parse_connect_to_host_port(data, ptr, host_result, port_result);
 3199|    285|  }
 3200|       |
 3201|    285|  return result;
 3202|    285|}
url.c:parse_connect_to_host_port:
 3039|    285|{
 3040|    285|  char *host_dup;
 3041|    285|  char *hostptr;
 3042|    285|  char *host_portno;
 3043|    285|  char *portptr;
 3044|    285|  int port = -1;
 3045|    285|  CURLcode result = CURLE_OK;
 3046|       |
 3047|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
 3048|       |  (void) data;
 3049|       |#endif
 3050|       |
 3051|    285|  *hostname_result = NULL;
 3052|    285|  *port_result = -1;
 3053|       |
 3054|    285|  if(!host || !*host)
 3055|      0|    return CURLE_OK;
 3056|       |
 3057|    285|  host_dup = strdup(host);
 3058|    285|  if(!host_dup)
 3059|      0|    return CURLE_OUT_OF_MEMORY;
 3060|       |
 3061|    285|  hostptr = host_dup;
 3062|       |
 3063|       |  /* start scanning for port number at this point */
 3064|    285|  portptr = hostptr;
 3065|       |
 3066|       |  /* detect and extract RFC6874-style IPv6-addresses */
 3067|    285|  if(*hostptr == '[') {
 3068|      0|#ifdef ENABLE_IPV6
 3069|      0|    char *ptr = ++hostptr; /* advance beyond the initial bracket */
 3070|      0|    while(*ptr && (ISXDIGIT(*ptr) || (*ptr == ':') || (*ptr == '.')))
 3071|      0|      ptr++;
 3072|      0|    if(*ptr == '%') {
 3073|       |      /* There might be a zone identifier */
 3074|      0|      if(strncmp("%25", ptr, 3))
 3075|      0|        infof(data, "Please URL encode %% as %%25, see RFC 6874.");
 3076|      0|      ptr++;
 3077|       |      /* Allow unreserved characters as defined in RFC 3986 */
 3078|      0|      while(*ptr && (ISALPHA(*ptr) || ISXDIGIT(*ptr) || (*ptr == '-') ||
 3079|      0|                     (*ptr == '.') || (*ptr == '_') || (*ptr == '~')))
 3080|      0|        ptr++;
 3081|      0|    }
 3082|      0|    if(*ptr == ']')
 3083|       |      /* yeps, it ended nicely with a bracket as well */
 3084|      0|      *ptr++ = '\0';
 3085|      0|    else
 3086|      0|      infof(data, "Invalid IPv6 address format");
 3087|      0|    portptr = ptr;
 3088|       |    /* Note that if this didn't end with a bracket, we still advanced the
 3089|       |     * hostptr first, but I can't see anything wrong with that as no host
 3090|       |     * name nor a numeric can legally start with a bracket.
 3091|       |     */
 3092|       |#else
 3093|       |    failf(data, "Use of IPv6 in *_CONNECT_TO without IPv6 support built-in!");
 3094|       |    result = CURLE_NOT_BUILT_IN;
 3095|       |    goto error;
 3096|       |#endif
 3097|      0|  }
 3098|       |
 3099|       |  /* Get port number off server.com:1080 */
 3100|    285|  host_portno = strchr(portptr, ':');
 3101|    285|  if(host_portno) {
 3102|    285|    char *endp = NULL;
 3103|    285|    *host_portno = '\0'; /* cut off number from host name */
 3104|    285|    host_portno++;
 3105|    285|    if(*host_portno) {
 3106|      0|      long portparse = strtol(host_portno, &endp, 10);
 3107|      0|      if((endp && *endp) || (portparse < 0) || (portparse > 65535)) {
 3108|      0|        failf(data, "No valid port number in connect to host string (%s)",
 3109|      0|              host_portno);
 3110|      0|        result = CURLE_SETOPT_OPTION_SYNTAX;
 3111|      0|        goto error;
 3112|      0|      }
 3113|      0|      else
 3114|      0|        port = (int)portparse; /* we know it will fit */
 3115|      0|    }
 3116|    285|  }
 3117|       |
 3118|       |  /* now, clone the cleaned host name */
 3119|    285|  if(hostptr) {
 3120|    285|    *hostname_result = strdup(hostptr);
 3121|    285|    if(!*hostname_result) {
 3122|      0|      result = CURLE_OUT_OF_MEMORY;
 3123|      0|      goto error;
 3124|      0|    }
 3125|    285|  }
 3126|       |
 3127|    285|  *port_result = port;
 3128|       |
 3129|    285|  error:
 3130|    285|  free(host_dup);
 3131|    285|  return result;
 3132|    285|}
url.c:setup_connection_internals:
 2174|    285|{
 2175|    285|  const struct Curl_handler *p;
 2176|    285|  CURLcode result;
 2177|       |
 2178|       |  /* Perform setup complement if some. */
 2179|    285|  p = conn->handler;
 2180|       |
 2181|    285|  if(p->setup_connection) {
 2182|    285|    result = (*p->setup_connection)(data, conn);
 2183|       |
 2184|    285|    if(result)
 2185|      0|      return result;
 2186|       |
 2187|    285|    p = conn->handler;              /* May have changed. */
 2188|    285|  }
 2189|       |
 2190|    285|  if(conn->port < 0)
 2191|       |    /* we check for -1 here since if proxy was detected already, this
 2192|       |       was very likely already set to the proxy port */
 2193|      0|    conn->port = p->defport;
 2194|       |
 2195|    285|  return CURLE_OK;
 2196|    285|}
url.c:setup_range:
 2136|    285|{
 2137|    285|  struct UrlState *s = &data->state;
 2138|    285|  s->resume_from = data->set.set_resume_from;
 2139|    285|  if(s->resume_from || data->set.str[STRING_SET_RANGE]) {
 2140|      0|    if(s->rangestringalloc)
 2141|      0|      free(s->range);
 2142|       |
 2143|      0|    if(s->resume_from)
 2144|      0|      s->range = aprintf("%" CURL_FORMAT_CURL_OFF_T "-", s->resume_from);
 2145|      0|    else
 2146|      0|      s->range = strdup(data->set.str[STRING_SET_RANGE]);
 2147|       |
 2148|      0|    s->rangestringalloc = (s->range) ? TRUE : FALSE;
 2149|       |
 2150|      0|    if(!s->range)
 2151|      0|      return CURLE_OUT_OF_MEMORY;
 2152|       |
 2153|       |    /* tell ourselves to fetch this range */
 2154|      0|    s->use_range = TRUE;        /* enable range download */
 2155|      0|  }
 2156|    285|  else
 2157|    285|    s->use_range = FALSE; /* disable range download */
 2158|       |
 2159|    285|  return CURLE_OK;
 2160|    285|}
url.c:prune_dead_connections:
 1077|    285|{
 1078|    285|  struct curltime now = Curl_now();
 1079|    285|  timediff_t elapsed;
 1080|       |
 1081|    285|  DEBUGASSERT(!data->conn); /* no connection */
 1082|    285|  CONNCACHE_LOCK(data);
 1083|    285|  elapsed =
 1084|    285|    Curl_timediff(now, data->state.conn_cache->last_cleanup);
 1085|    285|  CONNCACHE_UNLOCK(data);
 1086|       |
 1087|    285|  if(elapsed >= 1000L) {
 1088|    285|    struct prunedead prune;
 1089|    285|    prune.data = data;
 1090|    285|    prune.extracted = NULL;
 1091|    285|    while(Curl_conncache_foreach(data, data->state.conn_cache, &prune,
 1092|    285|                                 call_extract_if_dead)) {
 1093|       |      /* unlocked */
 1094|       |
 1095|       |      /* remove connection from cache */
 1096|      0|      Curl_conncache_remove_conn(data, prune.extracted, TRUE);
 1097|       |
 1098|       |      /* disconnect it */
 1099|      0|      (void)Curl_disconnect(data, prune.extracted, TRUE);
 1100|      0|    }
 1101|    285|    CONNCACHE_LOCK(data);
 1102|    285|    data->state.conn_cache->last_cleanup = now;
 1103|    285|    CONNCACHE_UNLOCK(data);
 1104|    285|  }
 1105|    285|}
url.c:ConnectionExists:
 1124|    285|{
 1125|    285|  struct connectdata *check;
 1126|    285|  struct connectdata *chosen = 0;
 1127|    285|  bool foundPendingCandidate = FALSE;
 1128|    285|  bool canmultiplex = IsMultiplexingPossible(data, needle);
 1129|    285|  struct connectbundle *bundle;
 1130|    285|  const char *hostbundle;
 1131|       |
 1132|    285|#ifdef USE_NTLM
 1133|    285|  bool wantNTLMhttp = ((data->state.authhost.want &
 1134|    285|                        (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1135|    285|                       (needle->handler->protocol & PROTO_FAMILY_HTTP));
 1136|    285|#ifndef CURL_DISABLE_PROXY
 1137|    285|  bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&
 1138|    285|                            ((data->state.authproxy.want &
 1139|      0|                              (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1140|      0|                             (needle->handler->protocol & PROTO_FAMILY_HTTP)));
 1141|       |#else
 1142|       |  bool wantProxyNTLMhttp = FALSE;
 1143|       |#endif
 1144|    285|#endif
 1145|       |
 1146|    285|  *force_reuse = FALSE;
 1147|    285|  *waitpipe = FALSE;
 1148|       |
 1149|       |  /* Look up the bundle with all the connections to this particular host.
 1150|       |     Locks the connection cache, beware of early returns! */
 1151|    285|  bundle = Curl_conncache_find_bundle(data, needle, data->state.conn_cache,
 1152|    285|                                      &hostbundle);
 1153|    285|  if(bundle) {
 1154|       |    /* Max pipe length is zero (unlimited) for multiplexed connections */
 1155|      0|    struct Curl_llist_element *curr;
 1156|       |
 1157|      0|    infof(data, "Found bundle for host %s: %p [%s]",
 1158|      0|          hostbundle, (void *)bundle, (bundle->multiuse == BUNDLE_MULTIPLEX ?
 1159|      0|                                       "can multiplex" : "serially"));
 1160|       |
 1161|       |    /* We can't multiplex if we don't know anything about the server */
 1162|      0|    if(canmultiplex) {
 1163|      0|      if(bundle->multiuse == BUNDLE_UNKNOWN) {
 1164|      0|        if(data->set.pipewait) {
 1165|      0|          infof(data, "Server doesn't support multiplex yet, wait");
 1166|      0|          *waitpipe = TRUE;
 1167|      0|          CONNCACHE_UNLOCK(data);
 1168|      0|          return FALSE; /* no re-use */
 1169|      0|        }
 1170|       |
 1171|      0|        infof(data, "Server doesn't support multiplex (yet)");
 1172|      0|        canmultiplex = FALSE;
 1173|      0|      }
 1174|      0|      if((bundle->multiuse == BUNDLE_MULTIPLEX) &&
 1175|      0|         !Curl_multiplex_wanted(data->multi)) {
 1176|      0|        infof(data, "Could multiplex, but not asked to!");
 1177|      0|        canmultiplex = FALSE;
 1178|      0|      }
 1179|      0|      if(bundle->multiuse == BUNDLE_NO_MULTIUSE) {
 1180|      0|        infof(data, "Can not multiplex, even if we wanted to!");
 1181|      0|        canmultiplex = FALSE;
 1182|      0|      }
 1183|      0|    }
 1184|       |
 1185|      0|    curr = bundle->conn_list.head;
 1186|      0|    while(curr) {
 1187|      0|      bool match = FALSE;
 1188|      0|      size_t multiplexed = 0;
 1189|       |
 1190|       |      /*
 1191|       |       * Note that if we use a HTTP proxy in normal mode (no tunneling), we
 1192|       |       * check connections to that proxy and not to the actual remote server.
 1193|       |       */
 1194|      0|      check = curr->ptr;
 1195|      0|      curr = curr->next;
 1196|       |
 1197|      0|      if(check->bits.connect_only || check->bits.close)
 1198|       |        /* connect-only or to-be-closed connections will not be reused */
 1199|      0|        continue;
 1200|       |
 1201|      0|      if(extract_if_dead(check, data)) {
 1202|       |        /* disconnect it */
 1203|      0|        (void)Curl_disconnect(data, check, TRUE);
 1204|      0|        continue;
 1205|      0|      }
 1206|       |
 1207|      0|      if(data->set.ipver != CURL_IPRESOLVE_WHATEVER
 1208|      0|          && data->set.ipver != check->ip_version) {
 1209|       |        /* skip because the connection is not via the requested IP version */
 1210|      0|        continue;
 1211|      0|      }
 1212|       |
 1213|      0|      if(bundle->multiuse == BUNDLE_MULTIPLEX)
 1214|      0|        multiplexed = CONN_INUSE(check);
 1215|       |
 1216|      0|      if(!canmultiplex) {
 1217|      0|        if(multiplexed) {
 1218|       |          /* can only happen within multi handles, and means that another easy
 1219|       |             handle is using this connection */
 1220|      0|          continue;
 1221|      0|        }
 1222|       |
 1223|      0|        if(Curl_resolver_asynch()) {
 1224|       |          /* primary_ip[0] is NUL only if the resolving of the name hasn't
 1225|       |             completed yet and until then we don't re-use this connection */
 1226|      0|          if(!check->primary_ip[0]) {
 1227|      0|            infof(data,
 1228|      0|                  "Connection #%ld is still name resolving, can't reuse",
 1229|      0|                  check->connection_id);
 1230|      0|            continue;
 1231|      0|          }
 1232|      0|        }
 1233|       |
 1234|      0|        if(check->sock[FIRSTSOCKET] == CURL_SOCKET_BAD) {
 1235|      0|          foundPendingCandidate = TRUE;
 1236|       |          /* Don't pick a connection that hasn't connected yet */
 1237|      0|          infof(data, "Connection #%ld isn't open enough, can't reuse",
 1238|      0|                check->connection_id);
 1239|      0|          continue;
 1240|      0|        }
 1241|      0|      }
 1242|       |
 1243|      0|#ifdef USE_UNIX_SOCKETS
 1244|      0|      if(needle->unix_domain_socket) {
 1245|      0|        if(!check->unix_domain_socket)
 1246|      0|          continue;
 1247|      0|        if(strcmp(needle->unix_domain_socket, check->unix_domain_socket))
 1248|      0|          continue;
 1249|      0|        if(needle->bits.abstract_unix_socket !=
 1250|      0|           check->bits.abstract_unix_socket)
 1251|      0|          continue;
 1252|      0|      }
 1253|      0|      else if(check->unix_domain_socket)
 1254|      0|        continue;
 1255|      0|#endif
 1256|       |
 1257|      0|      if((needle->handler->flags&PROTOPT_SSL) !=
 1258|      0|         (check->handler->flags&PROTOPT_SSL))
 1259|       |        /* don't do mixed SSL and non-SSL connections */
 1260|      0|        if(get_protocol_family(check->handler) !=
 1261|      0|           needle->handler->protocol || !check->bits.tls_upgraded)
 1262|       |          /* except protocols that have been upgraded via TLS */
 1263|      0|          continue;
 1264|       |
 1265|      0|#ifndef CURL_DISABLE_PROXY
 1266|      0|      if(needle->bits.httpproxy != check->bits.httpproxy ||
 1267|      0|         needle->bits.socksproxy != check->bits.socksproxy)
 1268|      0|        continue;
 1269|       |
 1270|      0|      if(needle->bits.socksproxy &&
 1271|      0|        !socks_proxy_info_matches(&needle->socks_proxy,
 1272|      0|                                  &check->socks_proxy))
 1273|      0|        continue;
 1274|      0|#endif
 1275|      0|      if(needle->bits.conn_to_host != check->bits.conn_to_host)
 1276|       |        /* don't mix connections that use the "connect to host" feature and
 1277|       |         * connections that don't use this feature */
 1278|      0|        continue;
 1279|       |
 1280|      0|      if(needle->bits.conn_to_port != check->bits.conn_to_port)
 1281|       |        /* don't mix connections that use the "connect to port" feature and
 1282|       |         * connections that don't use this feature */
 1283|      0|        continue;
 1284|       |
 1285|      0|#ifndef CURL_DISABLE_PROXY
 1286|      0|      if(needle->bits.httpproxy) {
 1287|      0|        if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))
 1288|      0|          continue;
 1289|       |
 1290|      0|        if(needle->bits.tunnel_proxy != check->bits.tunnel_proxy)
 1291|      0|          continue;
 1292|       |
 1293|      0|        if(needle->http_proxy.proxytype == CURLPROXY_HTTPS) {
 1294|       |          /* use https proxy */
 1295|      0|          if(needle->handler->flags&PROTOPT_SSL) {
 1296|       |            /* use double layer ssl */
 1297|      0|            if(!Curl_ssl_config_matches(&needle->proxy_ssl_config,
 1298|      0|                                        &check->proxy_ssl_config))
 1299|      0|              continue;
 1300|      0|            if(check->proxy_ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1301|      0|              continue;
 1302|      0|          }
 1303|      0|          else {
 1304|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1305|      0|                                        &check->ssl_config))
 1306|      0|              continue;
 1307|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1308|      0|              continue;
 1309|      0|          }
 1310|      0|        }
 1311|      0|      }
 1312|      0|#endif
 1313|       |
 1314|      0|      if(!canmultiplex && CONN_INUSE(check))
 1315|       |        /* this request can't be multiplexed but the checked connection is
 1316|       |           already in use so we skip it */
 1317|      0|        continue;
 1318|       |
 1319|      0|      if(CONN_INUSE(check)) {
 1320|       |        /* Subject for multiplex use if 'checks' belongs to the same multi
 1321|       |           handle as 'data' is. */
 1322|      0|        struct Curl_llist_element *e = check->easyq.head;
 1323|      0|        struct Curl_easy *entry = e->ptr;
 1324|      0|        if(entry->multi != data->multi)
 1325|      0|          continue;
 1326|      0|      }
 1327|       |
 1328|      0|      if(needle->localdev || needle->localport) {
 1329|       |        /* If we are bound to a specific local end (IP+port), we must not
 1330|       |           re-use a random other one, although if we didn't ask for a
 1331|       |           particular one we can reuse one that was bound.
 1332|       |
 1333|       |           This comparison is a bit rough and too strict. Since the input
 1334|       |           parameters can be specified in numerous ways and still end up the
 1335|       |           same it would take a lot of processing to make it really accurate.
 1336|       |           Instead, this matching will assume that re-uses of bound connections
 1337|       |           will most likely also re-use the exact same binding parameters and
 1338|       |           missing out a few edge cases shouldn't hurt anyone very much.
 1339|       |        */
 1340|      0|        if((check->localport != needle->localport) ||
 1341|      0|           (check->localportrange != needle->localportrange) ||
 1342|      0|           (needle->localdev &&
 1343|      0|            (!check->localdev || strcmp(check->localdev, needle->localdev))))
 1344|      0|          continue;
 1345|      0|      }
 1346|       |
 1347|      0|      if(!(needle->handler->flags & PROTOPT_CREDSPERREQUEST)) {
 1348|       |        /* This protocol requires credentials per connection,
 1349|       |           so verify that we're using the same name and password as well */
 1350|      0|        if(strcmp(needle->user, check->user) ||
 1351|      0|           strcmp(needle->passwd, check->passwd)) {
 1352|       |          /* one of them was different */
 1353|      0|          continue;
 1354|      0|        }
 1355|      0|      }
 1356|       |
 1357|       |      /* If multiplexing isn't enabled on the h2 connection and h1 is
 1358|       |         explicitly requested, handle it: */
 1359|      0|      if((needle->handler->protocol & PROTO_FAMILY_HTTP) &&
 1360|      0|         (check->httpversion >= 20) &&
 1361|      0|         (data->state.httpwant < CURL_HTTP_VERSION_2_0))
 1362|      0|        continue;
 1363|       |
 1364|      0|      if((needle->handler->flags&PROTOPT_SSL)
 1365|      0|#ifndef CURL_DISABLE_PROXY
 1366|      0|         || !needle->bits.httpproxy || needle->bits.tunnel_proxy
 1367|      0|#endif
 1368|      0|        ) {
 1369|       |        /* The requested connection does not use a HTTP proxy or it uses SSL or
 1370|       |           it is a non-SSL protocol tunneled or it is a non-SSL protocol which
 1371|       |           is allowed to be upgraded via TLS */
 1372|       |
 1373|      0|        if((strcasecompare(needle->handler->scheme, check->handler->scheme) ||
 1374|      0|            (get_protocol_family(check->handler) ==
 1375|      0|             needle->handler->protocol && check->bits.tls_upgraded)) &&
 1376|      0|           (!needle->bits.conn_to_host || strcasecompare(
 1377|      0|            needle->conn_to_host.name, check->conn_to_host.name)) &&
 1378|      0|           (!needle->bits.conn_to_port ||
 1379|      0|             needle->conn_to_port == check->conn_to_port) &&
 1380|      0|           strcasecompare(needle->host.name, check->host.name) &&
 1381|      0|           needle->remote_port == check->remote_port) {
 1382|       |          /* The schemes match or the protocol family is the same and the
 1383|       |             previous connection was TLS upgraded, and the hostname and host
 1384|       |             port match */
 1385|      0|          if(needle->handler->flags & PROTOPT_SSL) {
 1386|       |            /* This is a SSL connection so verify that we're using the same
 1387|       |               SSL options as well */
 1388|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1389|      0|                                        &check->ssl_config)) {
 1390|      0|              DEBUGF(infof(data,
 1391|      0|                           "Connection #%ld has different SSL parameters, "
 1392|      0|                           "can't reuse",
 1393|      0|                           check->connection_id));
 1394|      0|              continue;
 1395|      0|            }
 1396|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete) {
 1397|      0|              foundPendingCandidate = TRUE;
 1398|      0|              DEBUGF(infof(data,
 1399|      0|                           "Connection #%ld has not started SSL connect, "
 1400|      0|                           "can't reuse",
 1401|      0|                           check->connection_id));
 1402|      0|              continue;
 1403|      0|            }
 1404|      0|          }
 1405|      0|          match = TRUE;
 1406|      0|        }
 1407|      0|      }
 1408|      0|      else {
 1409|       |        /* The requested connection is using the same HTTP proxy in normal
 1410|       |           mode (no tunneling) */
 1411|      0|        match = TRUE;
 1412|      0|      }
 1413|       |
 1414|      0|      if(match) {
 1415|      0|#if defined(USE_NTLM)
 1416|       |        /* If we are looking for an HTTP+NTLM connection, check if this is
 1417|       |           already authenticating with the right credentials. If not, keep
 1418|       |           looking so that we can reuse NTLM connections if
 1419|       |           possible. (Especially we must not reuse the same connection if
 1420|       |           partway through a handshake!) */
 1421|      0|        if(wantNTLMhttp) {
 1422|      0|          if(strcmp(needle->user, check->user) ||
 1423|      0|             strcmp(needle->passwd, check->passwd)) {
 1424|       |
 1425|       |            /* we prefer a credential match, but this is at least a connection
 1426|       |               that can be reused and "upgraded" to NTLM */
 1427|      0|            if(check->http_ntlm_state == NTLMSTATE_NONE)
 1428|      0|              chosen = check;
 1429|      0|            continue;
 1430|      0|          }
 1431|      0|        }
 1432|      0|        else if(check->http_ntlm_state != NTLMSTATE_NONE) {
 1433|       |          /* Connection is using NTLM auth but we don't want NTLM */
 1434|      0|          continue;
 1435|      0|        }
 1436|       |
 1437|      0|#ifndef CURL_DISABLE_PROXY
 1438|       |        /* Same for Proxy NTLM authentication */
 1439|      0|        if(wantProxyNTLMhttp) {
 1440|       |          /* Both check->http_proxy.user and check->http_proxy.passwd can be
 1441|       |           * NULL */
 1442|      0|          if(!check->http_proxy.user || !check->http_proxy.passwd)
 1443|      0|            continue;
 1444|       |
 1445|      0|          if(strcmp(needle->http_proxy.user, check->http_proxy.user) ||
 1446|      0|             strcmp(needle->http_proxy.passwd, check->http_proxy.passwd))
 1447|      0|            continue;
 1448|      0|        }
 1449|      0|        else if(check->proxy_ntlm_state != NTLMSTATE_NONE) {
 1450|       |          /* Proxy connection is using NTLM auth but we don't want NTLM */
 1451|      0|          continue;
 1452|      0|        }
 1453|      0|#endif
 1454|      0|        if(wantNTLMhttp || wantProxyNTLMhttp) {
 1455|       |          /* Credentials are already checked, we can use this connection */
 1456|      0|          chosen = check;
 1457|       |
 1458|      0|          if((wantNTLMhttp &&
 1459|      0|             (check->http_ntlm_state != NTLMSTATE_NONE)) ||
 1460|      0|              (wantProxyNTLMhttp &&
 1461|      0|               (check->proxy_ntlm_state != NTLMSTATE_NONE))) {
 1462|       |            /* We must use this connection, no other */
 1463|      0|            *force_reuse = TRUE;
 1464|      0|            break;
 1465|      0|          }
 1466|       |
 1467|       |          /* Continue look up for a better connection */
 1468|      0|          continue;
 1469|      0|        }
 1470|      0|#endif
 1471|      0|        if(canmultiplex) {
 1472|       |          /* We can multiplex if we want to. Let's continue looking for
 1473|       |             the optimal connection to use. */
 1474|       |
 1475|      0|          if(!multiplexed) {
 1476|       |            /* We have the optimal connection. Let's stop looking. */
 1477|      0|            chosen = check;
 1478|      0|            break;
 1479|      0|          }
 1480|       |
 1481|      0|#ifdef USE_NGHTTP2
 1482|       |          /* If multiplexed, make sure we don't go over concurrency limit */
 1483|      0|          if(check->bits.multiplex) {
 1484|       |            /* Multiplexed connections can only be HTTP/2 for now */
 1485|      0|            struct http_conn *httpc = &check->proto.httpc;
 1486|      0|            if(multiplexed >= httpc->settings.max_concurrent_streams) {
 1487|      0|              infof(data, "MAX_CONCURRENT_STREAMS reached, skip (%zu)",
 1488|      0|                    multiplexed);
 1489|      0|              continue;
 1490|      0|            }
 1491|      0|            else if(multiplexed >=
 1492|      0|                    Curl_multi_max_concurrent_streams(data->multi)) {
 1493|      0|              infof(data, "client side MAX_CONCURRENT_STREAMS reached"
 1494|      0|                    ", skip (%zu)",
 1495|      0|                    multiplexed);
 1496|      0|              continue;
 1497|      0|            }
 1498|      0|          }
 1499|      0|#endif
 1500|       |          /* When not multiplexed, we have a match here! */
 1501|      0|          chosen = check;
 1502|      0|          infof(data, "Multiplexed connection found!");
 1503|      0|          break;
 1504|      0|        }
 1505|      0|        else {
 1506|       |          /* We have found a connection. Let's stop searching. */
 1507|      0|          chosen = check;
 1508|      0|          break;
 1509|      0|        }
 1510|      0|      }
 1511|      0|    }
 1512|      0|  }
 1513|       |
 1514|    285|  if(chosen) {
 1515|       |    /* mark it as used before releasing the lock */
 1516|      0|    Curl_attach_connnection(data, chosen);
 1517|      0|    CONNCACHE_UNLOCK(data);
 1518|      0|    *usethis = chosen;
 1519|      0|    return TRUE; /* yes, we found one to use! */
 1520|      0|  }
 1521|    285|  CONNCACHE_UNLOCK(data);
 1522|       |
 1523|    285|  if(foundPendingCandidate && data->set.pipewait) {
 1524|      0|    infof(data,
 1525|      0|          "Found pending candidate for reuse and CURLOPT_PIPEWAIT is set");
 1526|      0|    *waitpipe = TRUE;
 1527|      0|  }
 1528|       |
 1529|    285|  return FALSE; /* no matching connecting exists */
 1530|    285|}
url.c:IsMultiplexingPossible:
  906|    285|{
  907|    285|  int avail = 0;
  908|       |
  909|       |  /* If a HTTP protocol and multiplexing is enabled */
  910|    285|  if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  911|    285|     (!conn->bits.protoconnstart || !conn->bits.close)) {
  912|       |
  913|      0|    if(Curl_multiplex_wanted(handle->multi) &&
  914|      0|       (handle->state.httpwant >= CURL_HTTP_VERSION_2))
  915|       |      /* allows HTTP/2 */
  916|      0|      avail |= CURLPIPE_MULTIPLEX;
  917|      0|  }
  918|    285|  return avail;
  919|    285|}
url.c:resolve_server:
 3332|    285|{
 3333|    285|  CURLcode result = CURLE_OK;
 3334|    285|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 3335|       |
 3336|    285|  DEBUGASSERT(conn);
 3337|    285|  DEBUGASSERT(data);
 3338|       |  /*************************************************************
 3339|       |   * Resolve the name of the server or proxy
 3340|       |   *************************************************************/
 3341|    285|  if(conn->bits.reuse)
 3342|       |    /* We're reusing the connection - no need to resolve anything, and
 3343|       |       idnconvert_hostname() was called already in create_conn() for the re-use
 3344|       |       case. */
 3345|      0|    *async = FALSE;
 3346|       |
 3347|    285|  else {
 3348|       |    /* this is a fresh connect */
 3349|    285|    int rc;
 3350|    285|    struct Curl_dns_entry *hostaddr = NULL;
 3351|       |
 3352|    285|#ifdef USE_UNIX_SOCKETS
 3353|    285|    if(conn->unix_domain_socket) {
 3354|       |      /* Unix domain sockets are local. The host gets ignored, just use the
 3355|       |       * specified domain socket address. Do not cache "DNS entries". There is
 3356|       |       * no DNS involved and we already have the filesystem path available */
 3357|      0|      const char *path = conn->unix_domain_socket;
 3358|       |
 3359|      0|      hostaddr = calloc(1, sizeof(struct Curl_dns_entry));
 3360|      0|      if(!hostaddr)
 3361|      0|        result = CURLE_OUT_OF_MEMORY;
 3362|      0|      else {
 3363|      0|        bool longpath = FALSE;
 3364|      0|        hostaddr->addr = Curl_unix2addr(path, &longpath,
 3365|      0|                                        conn->bits.abstract_unix_socket);
 3366|      0|        if(hostaddr->addr)
 3367|      0|          hostaddr->inuse++;
 3368|      0|        else {
 3369|       |          /* Long paths are not supported for now */
 3370|      0|          if(longpath) {
 3371|      0|            failf(data, "Unix socket path too long: '%s'", path);
 3372|      0|            result = CURLE_COULDNT_RESOLVE_HOST;
 3373|      0|          }
 3374|      0|          else
 3375|      0|            result = CURLE_OUT_OF_MEMORY;
 3376|      0|          free(hostaddr);
 3377|      0|          hostaddr = NULL;
 3378|      0|        }
 3379|      0|      }
 3380|      0|    }
 3381|    285|    else
 3382|    285|#endif
 3383|       |
 3384|    285|    if(!conn->bits.proxy) {
 3385|    285|      struct hostname *connhost;
 3386|    285|      if(conn->bits.conn_to_host)
 3387|    285|        connhost = &conn->conn_to_host;
 3388|      0|      else
 3389|      0|        connhost = &conn->host;
 3390|       |
 3391|       |      /* If not connecting via a proxy, extract the port from the URL, if it is
 3392|       |       * there, thus overriding any defaults that might have been set above. */
 3393|    285|      if(conn->bits.conn_to_port)
 3394|      0|        conn->port = conn->conn_to_port;
 3395|    285|      else
 3396|    285|        conn->port = conn->remote_port;
 3397|       |
 3398|       |      /* Resolve target host right on */
 3399|    285|      conn->hostname_resolve = strdup(connhost->name);
 3400|    285|      if(!conn->hostname_resolve)
 3401|      0|        return CURLE_OUT_OF_MEMORY;
 3402|    285|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3403|    285|                               &hostaddr, timeout_ms);
 3404|    285|      if(rc == CURLRESOLV_PENDING)
 3405|      0|        *async = TRUE;
 3406|       |
 3407|    285|      else if(rc == CURLRESOLV_TIMEDOUT) {
 3408|      0|        failf(data, "Failed to resolve host '%s' with timeout after %ld ms",
 3409|      0|              connhost->dispname,
 3410|      0|              Curl_timediff(Curl_now(), data->progress.t_startsingle));
 3411|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3412|      0|      }
 3413|    285|      else if(!hostaddr) {
 3414|      0|        failf(data, "Could not resolve host: %s", connhost->dispname);
 3415|      0|        result = CURLE_COULDNT_RESOLVE_HOST;
 3416|       |        /* don't return yet, we need to clean up the timeout first */
 3417|      0|      }
 3418|    285|    }
 3419|      0|#ifndef CURL_DISABLE_PROXY
 3420|      0|    else {
 3421|       |      /* This is a proxy that hasn't been resolved yet. */
 3422|       |
 3423|      0|      struct hostname * const host = conn->bits.socksproxy ?
 3424|      0|        &conn->socks_proxy.host : &conn->http_proxy.host;
 3425|       |
 3426|       |      /* resolve proxy */
 3427|      0|      conn->hostname_resolve = strdup(host->name);
 3428|      0|      if(!conn->hostname_resolve)
 3429|      0|        return CURLE_OUT_OF_MEMORY;
 3430|      0|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3431|      0|                               &hostaddr, timeout_ms);
 3432|       |
 3433|      0|      if(rc == CURLRESOLV_PENDING)
 3434|      0|        *async = TRUE;
 3435|       |
 3436|      0|      else if(rc == CURLRESOLV_TIMEDOUT)
 3437|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3438|       |
 3439|      0|      else if(!hostaddr) {
 3440|      0|        failf(data, "Couldn't resolve proxy '%s'", host->dispname);
 3441|      0|        result = CURLE_COULDNT_RESOLVE_PROXY;
 3442|       |        /* don't return yet, we need to clean up the timeout first */
 3443|      0|      }
 3444|      0|    }
 3445|    285|#endif
 3446|    285|    DEBUGASSERT(conn->dns_entry == NULL);
 3447|    285|    conn->dns_entry = hostaddr;
 3448|    285|  }
 3449|       |
 3450|    285|  return result;
 3451|    285|}
url.c:strip_trailing_dot:
 1574|    570|{
 1575|    570|  size_t len;
 1576|    570|  if(!host || !host->name)
 1577|      0|    return;
 1578|    570|  len = strlen(host->name);
 1579|    570|  if(len && (host->name[len-1] == '.'))
 1580|     21|    host->name[len-1] = 0;
 1581|    570|}

Curl_is_absolute_url:
  236|    812|{
  237|    812|  size_t i;
  238|       |#ifdef WIN32
  239|       |  if(STARTS_WITH_DRIVE_PREFIX(url))
  240|       |    return FALSE;
  241|       |#endif
  242|  3.99k|  for(i = 0; i < buflen && url[i]; ++i) {
  243|  3.98k|    char s = url[i];
  244|  3.98k|    if((s == ':') && (url[i + 1] == '/')) {
  245|    672|      if(buf)
  246|    336|        buf[i] = 0;
  247|    672|      return TRUE;
  248|    672|    }
  249|       |    /* RFC 3986 3.1 explains:
  250|       |      scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  251|       |    */
  252|  3.31k|    else if(ISALNUM(s) || (s == '+') || (s == '-') || (s == '.') ) {
  253|  3.18k|      if(buf)
  254|  1.59k|        buf[i] = (char)TOLOWER(s);
  255|  3.18k|    }
  256|    130|    else
  257|    130|      break;
  258|  3.98k|  }
  259|    140|  return FALSE;
  260|    812|}
Curl_parse_port:
  500|    378|{
  501|    378|  char *portptr = NULL;
  502|    378|  char endbracket;
  503|    378|  int len;
  504|       |
  505|       |  /*
  506|       |   * Find the end of an IPv6 address, either on the ']' ending bracket or
  507|       |   * a percent-encoded zone index.
  508|       |   */
  509|    378|  if(1 == sscanf(hostname, "[%*45[0123456789abcdefABCDEF:.]%c%n",
  510|    378|                 &endbracket, &len)) {
  511|      2|    if(']' == endbracket)
  512|      0|      portptr = &hostname[len];
  513|      2|    else if('%' == endbracket) {
  514|      0|      int zonelen = len;
  515|      0|      if(1 == sscanf(hostname + zonelen, "%*[^]]%c%n", &endbracket, &len)) {
  516|      0|        if(']' != endbracket)
  517|      0|          return CURLUE_MALFORMED_INPUT;
  518|      0|        portptr = &hostname[--zonelen + len + 1];
  519|      0|      }
  520|      0|      else
  521|      0|        return CURLUE_MALFORMED_INPUT;
  522|      0|    }
  523|      2|    else
  524|      2|      return CURLUE_MALFORMED_INPUT;
  525|       |
  526|       |    /* this is a RFC2732-style specified IP-address */
  527|      0|    if(portptr && *portptr) {
  528|      0|      if(*portptr != ':')
  529|      0|        return CURLUE_MALFORMED_INPUT;
  530|      0|    }
  531|      0|    else
  532|      0|      portptr = NULL;
  533|      0|  }
  534|    376|  else
  535|    376|    portptr = strchr(hostname, ':');
  536|       |
  537|    376|  if(portptr) {
  538|     25|    char *rest;
  539|     25|    long port;
  540|     25|    char portbuf[7];
  541|       |
  542|       |    /* Browser behavior adaptation. If there's a colon with no digits after,
  543|       |       just cut off the name there which makes us ignore the colon and just
  544|       |       use the default port. Firefox, Chrome and Safari all do that.
  545|       |
  546|       |       Don't do it if the URL has no scheme, to make something that looks like
  547|       |       a scheme not work!
  548|       |    */
  549|     25|    if(!portptr[1]) {
  550|      9|      *portptr = '\0';
  551|      9|      return has_scheme ? CURLUE_OK : CURLUE_BAD_PORT_NUMBER;
  552|      9|    }
  553|       |
  554|     16|    if(!ISDIGIT(portptr[1]))
  555|      4|      return CURLUE_BAD_PORT_NUMBER;
  556|       |
  557|     12|    port = strtol(portptr + 1, &rest, 10);  /* Port number must be decimal */
  558|       |
  559|     12|    if((port <= 0) || (port > 0xffff))
  560|       |      /* Single unix standard says port numbers are 16 bits long, but we don't
  561|       |         treat port zero as OK. */
  562|      3|      return CURLUE_BAD_PORT_NUMBER;
  563|       |
  564|      9|    if(rest[0])
  565|      1|      return CURLUE_BAD_PORT_NUMBER;
  566|       |
  567|      8|    *portptr++ = '\0'; /* cut off the name there */
  568|      8|    *rest = 0;
  569|       |    /* generate a new port number string to get rid of leading zeroes etc */
  570|      8|    msnprintf(portbuf, sizeof(portbuf), "%ld", port);
  571|      8|    u->portnum = port;
  572|      8|    u->port = strdup(portbuf);
  573|      8|    if(!u->port)
  574|      0|      return CURLUE_OUT_OF_MEMORY;
  575|      8|  }
  576|       |
  577|    359|  return CURLUE_OK;
  578|    376|}
curl_url:
 1117|    812|{
 1118|    812|  return calloc(sizeof(struct Curl_URL), 1);
 1119|    812|}
curl_url_cleanup:
 1122|  1.50k|{
 1123|  1.50k|  if(u) {
 1124|    462|    free_urlhandle(u);
 1125|    462|    free(u);
 1126|    462|  }
 1127|  1.50k|}
curl_url_get:
 1161|  2.82k|{
 1162|  2.82k|  char *ptr;
 1163|  2.82k|  CURLUcode ifmissing = CURLUE_UNKNOWN_PART;
 1164|  2.82k|  char portbuf[7];
 1165|  2.82k|  bool urldecode = (flags & CURLU_URLDECODE)?1:0;
 1166|  2.82k|  bool urlencode = (flags & CURLU_URLENCODE)?1:0;
 1167|  2.82k|  bool plusdecode = FALSE;
 1168|  2.82k|  (void)flags;
 1169|  2.82k|  if(!u)
 1170|      0|    return CURLUE_BAD_HANDLE;
 1171|  2.82k|  if(!part)
 1172|      0|    return CURLUE_BAD_PARTPOINTER;
 1173|  2.82k|  *part = NULL;
 1174|       |
 1175|  2.82k|  switch(what) {
 1176|    350|  case CURLUPART_SCHEME:
 1177|    350|    ptr = u->scheme;
 1178|    350|    ifmissing = CURLUE_NO_SCHEME;
 1179|    350|    urldecode = FALSE; /* never for schemes */
 1180|    350|    break;
 1181|    281|  case CURLUPART_USER:
 1182|    281|    ptr = u->user;
 1183|    281|    ifmissing = CURLUE_NO_USER;
 1184|    281|    break;
 1185|    283|  case CURLUPART_PASSWORD:
 1186|    283|    ptr = u->password;
 1187|    283|    ifmissing = CURLUE_NO_PASSWORD;
 1188|    283|    break;
 1189|    285|  case CURLUPART_OPTIONS:
 1190|    285|    ptr = u->options;
 1191|    285|    ifmissing = CURLUE_NO_OPTIONS;
 1192|    285|    break;
 1193|    350|  case CURLUPART_HOST:
 1194|    350|    ptr = u->host;
 1195|    350|    ifmissing = CURLUE_NO_HOST;
 1196|    350|    break;
 1197|      0|  case CURLUPART_ZONEID:
 1198|      0|    ptr = u->zoneid;
 1199|      0|    break;
 1200|    285|  case CURLUPART_PORT:
 1201|    285|    ptr = u->port;
 1202|    285|    ifmissing = CURLUE_NO_PORT;
 1203|    285|    urldecode = FALSE; /* never for port */
 1204|    285|    if(!ptr && (flags & CURLU_DEFAULT_PORT) && u->scheme) {
 1205|       |      /* there's no stored port number, but asked to deliver
 1206|       |         a default one for the scheme */
 1207|    284|      const struct Curl_handler *h =
 1208|    284|        Curl_builtin_scheme(u->scheme);
 1209|    284|      if(h) {
 1210|    284|        msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1211|    284|        ptr = portbuf;
 1212|    284|      }
 1213|    284|    }
 1214|      1|    else if(ptr && u->scheme) {
 1215|       |      /* there is a stored port number, but ask to inhibit if
 1216|       |         it matches the default one for the scheme */
 1217|      1|      const struct Curl_handler *h =
 1218|      1|        Curl_builtin_scheme(u->scheme);
 1219|      1|      if(h && (h->defport == u->portnum) &&
 1220|      1|         (flags & CURLU_NO_DEFAULT_PORT))
 1221|      0|        ptr = NULL;
 1222|      1|    }
 1223|    285|    break;
 1224|    285|  case CURLUPART_PATH:
 1225|    285|    ptr = u->path;
 1226|    285|    if(!ptr) {
 1227|    169|      ptr = u->path = strdup("/");
 1228|    169|      if(!u->path)
 1229|      0|        return CURLUE_OUT_OF_MEMORY;
 1230|    169|    }
 1231|    285|    break;
 1232|    285|  case CURLUPART_QUERY:
 1233|    285|    ptr = u->query;
 1234|    285|    ifmissing = CURLUE_NO_QUERY;
 1235|    285|    plusdecode = urldecode;
 1236|    285|    break;
 1237|      0|  case CURLUPART_FRAGMENT:
 1238|      0|    ptr = u->fragment;
 1239|      0|    ifmissing = CURLUE_NO_FRAGMENT;
 1240|      0|    break;
 1241|    420|  case CURLUPART_URL: {
 1242|    420|    char *url;
 1243|    420|    char *scheme;
 1244|    420|    char *options = u->options;
 1245|    420|    char *port = u->port;
 1246|    420|    char *allochost = NULL;
 1247|    420|    if(u->scheme && strcasecompare("file", u->scheme)) {
 1248|      0|      url = aprintf("file://%s%s%s",
 1249|      0|                    u->path,
 1250|      0|                    u->fragment? "#": "",
 1251|      0|                    u->fragment? u->fragment : "");
 1252|      0|    }
 1253|    420|    else if(!u->host)
 1254|     70|      return CURLUE_NO_HOST;
 1255|    350|    else {
 1256|    350|      const struct Curl_handler *h = NULL;
 1257|    350|      if(u->scheme)
 1258|    350|        scheme = u->scheme;
 1259|      0|      else if(flags & CURLU_DEFAULT_SCHEME)
 1260|      0|        scheme = (char *) DEFAULT_SCHEME;
 1261|      0|      else
 1262|      0|        return CURLUE_NO_SCHEME;
 1263|       |
 1264|    350|      h = Curl_builtin_scheme(scheme);
 1265|    350|      if(!port && (flags & CURLU_DEFAULT_PORT)) {
 1266|       |        /* there's no stored port number, but asked to deliver
 1267|       |           a default one for the scheme */
 1268|      0|        if(h) {
 1269|      0|          msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1270|      0|          port = portbuf;
 1271|      0|        }
 1272|      0|      }
 1273|    350|      else if(port) {
 1274|       |        /* there is a stored port number, but asked to inhibit if it matches
 1275|       |           the default one for the scheme */
 1276|      6|        if(h && (h->defport == u->portnum) &&
 1277|      6|           (flags & CURLU_NO_DEFAULT_PORT))
 1278|      0|          port = NULL;
 1279|      6|      }
 1280|       |
 1281|    350|      if(h && !(h->flags & PROTOPT_URLOPTIONS))
 1282|    325|        options = NULL;
 1283|       |
 1284|    350|      if(u->host[0] == '[') {
 1285|      0|        if(u->zoneid) {
 1286|       |          /* make it '[ host %25 zoneid ]' */
 1287|      0|          size_t hostlen = strlen(u->host);
 1288|      0|          size_t alen = hostlen + 3 + strlen(u->zoneid) + 1;
 1289|      0|          allochost = malloc(alen);
 1290|      0|          if(!allochost)
 1291|      0|            return CURLUE_OUT_OF_MEMORY;
 1292|      0|          memcpy(allochost, u->host, hostlen - 1);
 1293|      0|          msnprintf(&allochost[hostlen - 1], alen - hostlen + 1,
 1294|      0|                    "%%25%s]", u->zoneid);
 1295|      0|        }
 1296|      0|      }
 1297|    350|      else if(urlencode) {
 1298|      0|        allochost = curl_easy_escape(NULL, u->host, 0);
 1299|      0|        if(!allochost)
 1300|      0|          return CURLUE_OUT_OF_MEMORY;
 1301|      0|      }
 1302|    350|      else {
 1303|       |        /* only encode '%' in output host name */
 1304|    350|        char *host = u->host;
 1305|    350|        size_t pcount = 0;
 1306|       |        /* first, count number of percents present in the name */
 1307|  3.20k|        while(*host) {
 1308|  2.85k|          if(*host == '%')
 1309|     34|            pcount++;
 1310|  2.85k|          host++;
 1311|  2.85k|        }
 1312|       |        /* if there were percents, encode the host name */
 1313|    350|        if(pcount) {
 1314|     33|          size_t hostlen = strlen(u->host);
 1315|     33|          size_t alen = hostlen + 2 * pcount + 1;
 1316|     33|          char *o = allochost = malloc(alen);
 1317|     33|          if(!allochost)
 1318|      0|            return CURLUE_OUT_OF_MEMORY;
 1319|       |
 1320|     33|          host = u->host;
 1321|    534|          while(*host) {
 1322|    501|            if(*host == '%') {
 1323|     34|              memcpy(o, "%25", 3);
 1324|     34|              o += 3;
 1325|     34|              host++;
 1326|     34|              continue;
 1327|     34|            }
 1328|    467|            *o++ = *host++;
 1329|    467|          }
 1330|     33|          *o = '\0';
 1331|     33|        }
 1332|    350|      }
 1333|       |
 1334|    350|      url = aprintf("%s://%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
 1335|    350|                    scheme,
 1336|    350|                    u->user ? u->user : "",
 1337|    350|                    u->password ? ":": "",
 1338|    350|                    u->password ? u->password : "",
 1339|    350|                    options ? ";" : "",
 1340|    350|                    options ? options : "",
 1341|    350|                    (u->user || u->password || options) ? "@": "",
 1342|    350|                    allochost ? allochost : u->host,
 1343|    350|                    port ? ":": "",
 1344|    350|                    port ? port : "",
 1345|    350|                    (u->path && (u->path[0] != '/')) ? "/": "",
 1346|    350|                    u->path ? u->path : "/",
 1347|    350|                    (u->query && u->query[0]) ? "?": "",
 1348|    350|                    (u->query && u->query[0]) ? u->query : "",
 1349|    350|                    u->fragment? "#": "",
 1350|    350|                    u->fragment? u->fragment : "");
 1351|    350|      free(allochost);
 1352|    350|    }
 1353|    350|    if(!url)
 1354|      0|      return CURLUE_OUT_OF_MEMORY;
 1355|    350|    *part = url;
 1356|    350|    return CURLUE_OK;
 1357|    350|  }
 1358|      0|  default:
 1359|      0|    ptr = NULL;
 1360|      0|    break;
 1361|  2.82k|  }
 1362|  2.40k|  if(ptr) {
 1363|  1.43k|    *part = strdup(ptr);
 1364|  1.43k|    if(!*part)
 1365|      0|      return CURLUE_OUT_OF_MEMORY;
 1366|  1.43k|    if(plusdecode) {
 1367|       |      /* convert + to space */
 1368|      0|      char *plus;
 1369|      0|      for(plus = *part; *plus; ++plus) {
 1370|      0|        if(*plus == '+')
 1371|      0|          *plus = ' ';
 1372|      0|      }
 1373|      0|    }
 1374|  1.43k|    if(urldecode) {
 1375|      0|      char *decoded;
 1376|      0|      size_t dlen;
 1377|       |      /* this unconditional rejection of control bytes is documented
 1378|       |         API behavior */
 1379|      0|      CURLcode res = Curl_urldecode(NULL, *part, 0, &decoded, &dlen,
 1380|      0|                                    REJECT_CTRL);
 1381|      0|      free(*part);
 1382|      0|      if(res) {
 1383|      0|        *part = NULL;
 1384|      0|        return CURLUE_URLDECODE;
 1385|      0|      }
 1386|      0|      *part = decoded;
 1387|      0|    }
 1388|  1.43k|    return CURLUE_OK;
 1389|  1.43k|  }
 1390|    973|  else
 1391|    973|    return ifmissing;
 1392|  2.40k|}
curl_url_set:
 1396|    573|{
 1397|    573|  char **storep = NULL;
 1398|    573|  long port = 0;
 1399|    573|  bool urlencode = (flags & CURLU_URLENCODE)? 1 : 0;
 1400|    573|  bool plusencode = FALSE;
 1401|    573|  bool urlskipslash = FALSE;
 1402|    573|  bool appendquery = FALSE;
 1403|    573|  bool equalsencode = FALSE;
 1404|       |
 1405|    573|  if(!u)
 1406|      0|    return CURLUE_BAD_HANDLE;
 1407|    573|  if(!part) {
 1408|       |    /* setting a part to NULL clears it */
 1409|      0|    switch(what) {
 1410|      0|    case CURLUPART_URL:
 1411|      0|      break;
 1412|      0|    case CURLUPART_SCHEME:
 1413|      0|      storep = &u->scheme;
 1414|      0|      break;
 1415|      0|    case CURLUPART_USER:
 1416|      0|      storep = &u->user;
 1417|      0|      break;
 1418|      0|    case CURLUPART_PASSWORD:
 1419|      0|      storep = &u->password;
 1420|      0|      break;
 1421|      0|    case CURLUPART_OPTIONS:
 1422|      0|      storep = &u->options;
 1423|      0|      break;
 1424|      0|    case CURLUPART_HOST:
 1425|      0|      storep = &u->host;
 1426|      0|      break;
 1427|      0|    case CURLUPART_ZONEID:
 1428|      0|      storep = &u->zoneid;
 1429|      0|      break;
 1430|      0|    case CURLUPART_PORT:
 1431|      0|      u->portnum = 0;
 1432|      0|      storep = &u->port;
 1433|      0|      break;
 1434|      0|    case CURLUPART_PATH:
 1435|      0|      storep = &u->path;
 1436|      0|      break;
 1437|      0|    case CURLUPART_QUERY:
 1438|      0|      storep = &u->query;
 1439|      0|      break;
 1440|      0|    case CURLUPART_FRAGMENT:
 1441|      0|      storep = &u->fragment;
 1442|      0|      break;
 1443|      0|    default:
 1444|      0|      return CURLUE_UNKNOWN_PART;
 1445|      0|    }
 1446|      0|    if(storep && *storep) {
 1447|      0|      Curl_safefree(*storep);
 1448|      0|    }
 1449|      0|    return CURLUE_OK;
 1450|      0|  }
 1451|       |
 1452|    573|  switch(what) {
 1453|      0|  case CURLUPART_SCHEME:
 1454|      0|    if(strlen(part) > MAX_SCHEME_LEN)
 1455|       |      /* too long */
 1456|      0|      return CURLUE_MALFORMED_INPUT;
 1457|      0|    if(!(flags & CURLU_NON_SUPPORT_SCHEME) &&
 1458|       |       /* verify that it is a fine scheme */
 1459|      0|       !Curl_builtin_scheme(part))
 1460|      0|      return CURLUE_UNSUPPORTED_SCHEME;
 1461|      0|    storep = &u->scheme;
 1462|      0|    urlencode = FALSE; /* never */
 1463|      0|    break;
 1464|    157|  case CURLUPART_USER:
 1465|    157|    storep = &u->user;
 1466|    157|    break;
 1467|     10|  case CURLUPART_PASSWORD:
 1468|     10|    storep = &u->password;
 1469|     10|    break;
 1470|      0|  case CURLUPART_OPTIONS:
 1471|      0|    storep = &u->options;
 1472|      0|    break;
 1473|      0|  case CURLUPART_HOST: {
 1474|      0|    size_t len = strcspn(part, " \r\n");
 1475|      0|    if(strlen(part) != len)
 1476|       |      /* hostname with bad content */
 1477|      0|      return CURLUE_MALFORMED_INPUT;
 1478|      0|    storep = &u->host;
 1479|      0|    Curl_safefree(u->zoneid);
 1480|      0|    break;
 1481|      0|  }
 1482|      0|  case CURLUPART_ZONEID:
 1483|      0|    storep = &u->zoneid;
 1484|      0|    break;
 1485|      0|  case CURLUPART_PORT:
 1486|      0|  {
 1487|      0|    char *endp;
 1488|      0|    urlencode = FALSE; /* never */
 1489|      0|    port = strtol(part, &endp, 10);  /* Port number must be decimal */
 1490|      0|    if((port <= 0) || (port > 0xffff))
 1491|      0|      return CURLUE_BAD_PORT_NUMBER;
 1492|      0|    if(*endp)
 1493|       |      /* weirdly provided number, not good! */
 1494|      0|      return CURLUE_MALFORMED_INPUT;
 1495|      0|    storep = &u->port;
 1496|      0|  }
 1497|      0|  break;
 1498|      0|  case CURLUPART_PATH:
 1499|      0|    urlskipslash = TRUE;
 1500|      0|    storep = &u->path;
 1501|      0|    break;
 1502|      0|  case CURLUPART_QUERY:
 1503|      0|    plusencode = urlencode;
 1504|      0|    appendquery = (flags & CURLU_APPENDQUERY)?1:0;
 1505|      0|    equalsencode = appendquery;
 1506|      0|    storep = &u->query;
 1507|      0|    break;
 1508|      0|  case CURLUPART_FRAGMENT:
 1509|      0|    storep = &u->fragment;
 1510|      0|    break;
 1511|    406|  case CURLUPART_URL: {
 1512|       |    /*
 1513|       |     * Allow a new URL to replace the existing (if any) contents.
 1514|       |     *
 1515|       |     * If the existing contents is enough for a URL, allow a relative URL to
 1516|       |     * replace it.
 1517|       |     */
 1518|    406|    CURLUcode result;
 1519|    406|    char *oldurl;
 1520|    406|    char *redired_url;
 1521|    406|    CURLU *handle2;
 1522|       |
 1523|    406|    if(Curl_is_absolute_url(part, NULL, MAX_SCHEME_LEN + 1)) {
 1524|    336|      handle2 = curl_url();
 1525|    336|      if(!handle2)
 1526|      0|        return CURLUE_OUT_OF_MEMORY;
 1527|    336|      result = parseurl(part, handle2, flags);
 1528|    336|      if(!result)
 1529|    311|        mv_urlhandle(handle2, u);
 1530|     25|      else
 1531|     25|        curl_url_cleanup(handle2);
 1532|    336|      return result;
 1533|    336|    }
 1534|       |    /* extract the full "old" URL to do the redirect on */
 1535|     70|    result = curl_url_get(u, CURLUPART_URL, &oldurl, flags);
 1536|     70|    if(result) {
 1537|       |      /* couldn't get the old URL, just use the new! */
 1538|     70|      handle2 = curl_url();
 1539|     70|      if(!handle2)
 1540|      0|        return CURLUE_OUT_OF_MEMORY;
 1541|     70|      result = parseurl(part, handle2, flags);
 1542|     70|      if(!result)
 1543|     39|        mv_urlhandle(handle2, u);
 1544|     31|      else
 1545|     31|        curl_url_cleanup(handle2);
 1546|     70|      return result;
 1547|     70|    }
 1548|       |
 1549|       |    /* apply the relative part to create a new URL */
 1550|      0|    redired_url = concat_url(oldurl, part);
 1551|      0|    free(oldurl);
 1552|      0|    if(!redired_url)
 1553|      0|      return CURLUE_OUT_OF_MEMORY;
 1554|       |
 1555|       |    /* now parse the new URL */
 1556|      0|    handle2 = curl_url();
 1557|      0|    if(!handle2) {
 1558|      0|      free(redired_url);
 1559|      0|      return CURLUE_OUT_OF_MEMORY;
 1560|      0|    }
 1561|      0|    result = parseurl(redired_url, handle2, flags);
 1562|      0|    free(redired_url);
 1563|      0|    if(!result)
 1564|      0|      mv_urlhandle(handle2, u);
 1565|      0|    else
 1566|      0|      curl_url_cleanup(handle2);
 1567|      0|    return result;
 1568|      0|  }
 1569|      0|  default:
 1570|      0|    return CURLUE_UNKNOWN_PART;
 1571|    573|  }
 1572|    167|  DEBUGASSERT(storep);
 1573|    167|  {
 1574|    167|    const char *newp = part;
 1575|    167|    size_t nalloc = strlen(part);
 1576|       |
 1577|    167|    if(nalloc > CURL_MAX_INPUT_LENGTH)
 1578|       |      /* excessive input length */
 1579|      0|      return CURLUE_MALFORMED_INPUT;
 1580|       |
 1581|    167|    if(urlencode) {
 1582|    167|      const unsigned char *i;
 1583|    167|      char *o;
 1584|    167|      char *enc = malloc(nalloc * 3 + 1); /* for worst case! */
 1585|    167|      if(!enc)
 1586|      0|        return CURLUE_OUT_OF_MEMORY;
 1587|  3.74k|      for(i = (const unsigned char *)part, o = enc; *i; i++) {
 1588|  3.58k|        if((*i == ' ') && plusencode) {
 1589|      0|          *o = '+';
 1590|      0|          o++;
 1591|      0|        }
 1592|  3.58k|        else if(Curl_isunreserved(*i) ||
 1593|  3.58k|                ((*i == '/') && urlskipslash) ||
 1594|  3.58k|                ((*i == '=') && equalsencode)) {
 1595|  1.07k|          if((*i == '=') && equalsencode)
 1596|       |            /* only skip the first equals sign */
 1597|      0|            equalsencode = FALSE;
 1598|  1.07k|          *o = *i;
 1599|  1.07k|          o++;
 1600|  1.07k|        }
 1601|  2.50k|        else {
 1602|  2.50k|          msnprintf(o, 4, "%%%02x", *i);
 1603|  2.50k|          o += 3;
 1604|  2.50k|        }
 1605|  3.58k|      }
 1606|    167|      *o = 0; /* null-terminate */
 1607|    167|      newp = enc;
 1608|    167|    }
 1609|      0|    else {
 1610|      0|      char *p;
 1611|      0|      newp = strdup(part);
 1612|      0|      if(!newp)
 1613|      0|        return CURLUE_OUT_OF_MEMORY;
 1614|      0|      p = (char *)newp;
 1615|      0|      while(*p) {
 1616|       |        /* make sure percent encoded are lower case */
 1617|      0|        if((*p == '%') && ISXDIGIT(p[1]) && ISXDIGIT(p[2]) &&
 1618|      0|           (ISUPPER(p[1]) || ISUPPER(p[2]))) {
 1619|      0|          p[1] = (char)TOLOWER(p[1]);
 1620|      0|          p[2] = (char)TOLOWER(p[2]);
 1621|      0|          p += 3;
 1622|      0|        }
 1623|      0|        else
 1624|      0|          p++;
 1625|      0|      }
 1626|      0|    }
 1627|       |
 1628|    167|    if(appendquery) {
 1629|       |      /* Append the string onto the old query. Add a '&' separator if none is
 1630|       |         present at the end of the exsting query already */
 1631|      0|      size_t querylen = u->query ? strlen(u->query) : 0;
 1632|      0|      bool addamperand = querylen && (u->query[querylen -1] != '&');
 1633|      0|      if(querylen) {
 1634|      0|        size_t newplen = strlen(newp);
 1635|      0|        char *p = malloc(querylen + addamperand + newplen + 1);
 1636|      0|        if(!p) {
 1637|      0|          free((char *)newp);
 1638|      0|          return CURLUE_OUT_OF_MEMORY;
 1639|      0|        }
 1640|      0|        strcpy(p, u->query); /* original query */
 1641|      0|        if(addamperand)
 1642|      0|          p[querylen] = '&'; /* ampersand */
 1643|      0|        strcpy(&p[querylen + addamperand], newp); /* new suffix */
 1644|      0|        free((char *)newp);
 1645|      0|        free(*storep);
 1646|      0|        *storep = p;
 1647|      0|        return CURLUE_OK;
 1648|      0|      }
 1649|      0|    }
 1650|       |
 1651|    167|    if(what == CURLUPART_HOST) {
 1652|      0|      if(0 == strlen(newp) && (flags & CURLU_NO_AUTHORITY)) {
 1653|       |        /* Skip hostname check, it's allowed to be empty. */
 1654|      0|      }
 1655|      0|      else {
 1656|      0|        if(hostname_check(u, (char *)newp)) {
 1657|      0|          free((char *)newp);
 1658|      0|          return CURLUE_MALFORMED_INPUT;
 1659|      0|        }
 1660|      0|      }
 1661|      0|    }
 1662|       |
 1663|    167|    free(*storep);
 1664|    167|    *storep = (char *)newp;
 1665|    167|  }
 1666|       |  /* set after the string, to make it not assigned if the allocation above
 1667|       |     fails */
 1668|    167|  if(port)
 1669|      0|    u->portnum = port;
 1670|    167|  return CURLUE_OK;
 1671|    167|}
urlapi.c:free_urlhandle:
   74|    868|{
   75|    868|  free(u->scheme);
   76|    868|  free(u->user);
   77|    868|  free(u->password);
   78|    868|  free(u->options);
   79|    868|  free(u->host);
   80|    868|  free(u->zoneid);
   81|    868|  free(u->port);
   82|    868|  free(u->path);
   83|    868|  free(u->query);
   84|    868|  free(u->fragment);
   85|    868|  free(u->scratch);
   86|    868|  free(u->temppath);
   87|    868|}
urlapi.c:parseurl:
 1105|    406|{
 1106|    406|  CURLUcode result = seturl(url, u, flags);
 1107|    406|  if(result) {
 1108|     56|    free_urlhandle(u);
 1109|     56|    memset(u, 0, sizeof(struct Curl_URL));
 1110|     56|  }
 1111|    406|  return result;
 1112|    406|}
urlapi.c:seturl:
  782|    406|{
  783|    406|  char *path;
  784|    406|  bool path_alloced = FALSE;
  785|    406|  bool uncpath = FALSE;
  786|    406|  char *hostname;
  787|    406|  char *query = NULL;
  788|    406|  char *fragment = NULL;
  789|    406|  CURLUcode result;
  790|    406|  bool url_has_scheme = FALSE;
  791|    406|  char schemebuf[MAX_SCHEME_LEN + 1];
  792|    406|  const char *schemep = NULL;
  793|    406|  size_t schemelen = 0;
  794|    406|  size_t urllen;
  795|       |
  796|    406|  DEBUGASSERT(url);
  797|       |
  798|       |  /*************************************************************
  799|       |   * Parse the URL.
  800|       |   ************************************************************/
  801|       |  /* allocate scratch area */
  802|    406|  urllen = strlen(url);
  803|    406|  if(urllen > CURL_MAX_INPUT_LENGTH)
  804|       |    /* excessive input length */
  805|      0|    return CURLUE_MALFORMED_INPUT;
  806|       |
  807|    406|  path = u->scratch = malloc(urllen * 2 + 2);
  808|    406|  if(!path)
  809|      0|    return CURLUE_OUT_OF_MEMORY;
  810|       |
  811|    406|  hostname = &path[urllen + 1];
  812|    406|  hostname[0] = 0;
  813|       |
  814|    406|  if(Curl_is_absolute_url(url, schemebuf, sizeof(schemebuf))) {
  815|    336|    url_has_scheme = TRUE;
  816|    336|    schemelen = strlen(schemebuf);
  817|    336|  }
  818|       |
  819|       |  /* handle the file: scheme */
  820|    406|  if(url_has_scheme && strcasecompare(schemebuf, "file")) {
  821|       |    /* path has been allocated large enough to hold this */
  822|      0|    strcpy(path, &url[5]);
  823|       |
  824|      0|    u->scheme = strdup("file");
  825|      0|    if(!u->scheme)
  826|      0|      return CURLUE_OUT_OF_MEMORY;
  827|       |
  828|       |    /* Extra handling URLs with an authority component (i.e. that start with
  829|       |     * "file://")
  830|       |     *
  831|       |     * We allow omitted hostname (e.g. file:/<path>) -- valid according to
  832|       |     * RFC 8089, but not the (current) WHAT-WG URL spec.
  833|       |     */
  834|      0|    if(path[0] == '/' && path[1] == '/') {
  835|       |      /* swallow the two slashes */
  836|      0|      char *ptr = &path[2];
  837|       |
  838|       |      /*
  839|       |       * According to RFC 8089, a file: URL can be reliably dereferenced if:
  840|       |       *
  841|       |       *  o it has no/blank hostname, or
  842|       |       *
  843|       |       *  o the hostname matches "localhost" (case-insensitively), or
  844|       |       *
  845|       |       *  o the hostname is a FQDN that resolves to this machine, or
  846|       |       *
  847|       |       *  o it is an UNC String transformed to an URI (Windows only, RFC 8089
  848|       |       *    Appendix E.3).
  849|       |       *
  850|       |       * For brevity, we only consider URLs with empty, "localhost", or
  851|       |       * "127.0.0.1" hostnames as local, otherwise as an UNC String.
  852|       |       *
  853|       |       * Additionally, there is an exception for URLs with a Windows drive
  854|       |       * letter in the authority (which was accidentally omitted from RFC 8089
  855|       |       * Appendix E, but believe me, it was meant to be there. --MK)
  856|       |       */
  857|      0|      if(ptr[0] != '/' && !STARTS_WITH_URL_DRIVE_PREFIX(ptr)) {
  858|       |        /* the URL includes a host name, it must match "localhost" or
  859|       |           "127.0.0.1" to be valid */
  860|      0|        if(checkprefix("localhost/", ptr) ||
  861|      0|           checkprefix("127.0.0.1/", ptr)) {
  862|      0|          ptr += 9; /* now points to the slash after the host */
  863|      0|        }
  864|      0|        else {
  865|       |#if defined(WIN32)
  866|       |          size_t len;
  867|       |
  868|       |          /* the host name, NetBIOS computer name, can not contain disallowed
  869|       |             chars, and the delimiting slash character must be appended to the
  870|       |             host name */
  871|       |          path = strpbrk(ptr, "/\\:*?\"<>|");
  872|       |          if(!path || *path != '/')
  873|       |            return CURLUE_MALFORMED_INPUT;
  874|       |
  875|       |          len = path - ptr;
  876|       |          if(len) {
  877|       |            memcpy(hostname, ptr, len);
  878|       |            hostname[len] = 0;
  879|       |            uncpath = TRUE;
  880|       |          }
  881|       |
  882|       |          ptr -= 2; /* now points to the // before the host in UNC */
  883|       |#else
  884|       |          /* Invalid file://hostname/, expected localhost or 127.0.0.1 or
  885|       |             none */
  886|      0|          return CURLUE_MALFORMED_INPUT;
  887|      0|#endif
  888|      0|        }
  889|      0|      }
  890|       |
  891|      0|      path = ptr;
  892|      0|    }
  893|       |
  894|      0|    if(!uncpath)
  895|      0|        hostname = NULL; /* no host for file: URLs by default */
  896|       |
  897|      0|#if !defined(MSDOS) && !defined(WIN32) && !defined(__CYGWIN__)
  898|       |    /* Don't allow Windows drive letters when not in Windows.
  899|       |     * This catches both "file:/c:" and "file:c:" */
  900|      0|    if(('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) ||
  901|      0|       STARTS_WITH_URL_DRIVE_PREFIX(path)) {
  902|       |      /* File drive letters are only accepted in MSDOS/Windows */
  903|      0|      return CURLUE_MALFORMED_INPUT;
  904|      0|    }
  905|       |#else
  906|       |    /* If the path starts with a slash and a drive letter, ditch the slash */
  907|       |    if('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) {
  908|       |      /* This cannot be done with strcpy, as the memory chunks overlap! */
  909|       |      memmove(path, &path[1], strlen(&path[1]) + 1);
  910|       |    }
  911|       |#endif
  912|       |
  913|      0|  }
  914|    406|  else {
  915|       |    /* clear path */
  916|    406|    const char *p;
  917|    406|    const char *hostp;
  918|    406|    size_t len;
  919|    406|    path[0] = 0;
  920|       |
  921|    406|    if(url_has_scheme) {
  922|    336|      int i = 0;
  923|    336|      p = &url[schemelen + 1];
  924|    950|      while(p && (*p == '/') && (i < 4)) {
  925|    614|        p++;
  926|    614|        i++;
  927|    614|      }
  928|    336|      if((i < 1) || (i>3))
  929|       |        /* less than one or more than three slashes */
  930|      3|        return CURLUE_MALFORMED_INPUT;
  931|       |
  932|    333|      schemep = schemebuf;
  933|    333|      if(!Curl_builtin_scheme(schemep) &&
  934|    333|         !(flags & CURLU_NON_SUPPORT_SCHEME))
  935|      0|        return CURLUE_UNSUPPORTED_SCHEME;
  936|       |
  937|    333|      if(junkscan(schemep, flags))
  938|      0|        return CURLUE_MALFORMED_INPUT;
  939|    333|    }
  940|     70|    else {
  941|       |      /* no scheme! */
  942|       |
  943|     70|      if(!(flags & (CURLU_DEFAULT_SCHEME|CURLU_GUESS_SCHEME)))
  944|      0|        return CURLUE_MALFORMED_INPUT;
  945|     70|      if(flags & CURLU_DEFAULT_SCHEME)
  946|      0|        schemep = DEFAULT_SCHEME;
  947|       |
  948|       |      /*
  949|       |       * The URL was badly formatted, let's try without scheme specified.
  950|       |       */
  951|     70|      p = url;
  952|     70|    }
  953|    403|    hostp = p; /* host name starts here */
  954|       |
  955|  7.49k|    while(*p && !HOSTNAME_END(*p)) /* find end of host name */
  956|  7.09k|      p++;
  957|       |
  958|    403|    len = p - hostp;
  959|    403|    if(len) {
  960|    396|      memcpy(hostname, hostp, len);
  961|    396|      hostname[len] = 0;
  962|    396|    }
  963|      7|    else {
  964|      7|      if(!(flags & CURLU_NO_AUTHORITY))
  965|      7|        return CURLUE_MALFORMED_INPUT;
  966|      7|    }
  967|       |
  968|    396|    len = strlen(p);
  969|    396|    memcpy(path, p, len);
  970|    396|    path[len] = 0;
  971|       |
  972|    396|    if(schemep) {
  973|    327|      u->scheme = strdup(schemep);
  974|    327|      if(!u->scheme)
  975|      0|        return CURLUE_OUT_OF_MEMORY;
  976|    327|    }
  977|    396|  }
  978|       |
  979|    396|  if(junkscan(path, flags))
  980|      5|    return CURLUE_MALFORMED_INPUT;
  981|       |
  982|    391|  if((flags & CURLU_URLENCODE) && path[0]) {
  983|       |    /* worst case output length is 3x the original! */
  984|      0|    char *newp = malloc(strlen(path) * 3);
  985|      0|    if(!newp)
  986|      0|      return CURLUE_OUT_OF_MEMORY;
  987|      0|    path_alloced = TRUE;
  988|      0|    strcpy_url(newp, path, TRUE); /* consider it relative */
  989|      0|    u->temppath = path = newp;
  990|      0|  }
  991|       |
  992|    391|  fragment = strchr(path, '#');
  993|    391|  if(fragment) {
  994|      7|    *fragment++ = 0;
  995|      7|    if(fragment[0]) {
  996|      5|      u->fragment = strdup(fragment);
  997|      5|      if(!u->fragment)
  998|      0|        return CURLUE_OUT_OF_MEMORY;
  999|      5|    }
 1000|      7|  }
 1001|       |
 1002|    391|  query = strchr(path, '?');
 1003|    391|  if(query) {
 1004|      6|    *query++ = 0;
 1005|       |    /* done even if the query part is a blank string */
 1006|      6|    u->query = strdup(query);
 1007|      6|    if(!u->query)
 1008|      0|      return CURLUE_OUT_OF_MEMORY;
 1009|      6|  }
 1010|       |
 1011|    391|  if(!path[0])
 1012|       |    /* if there's no path left set, unset */
 1013|    200|    path = NULL;
 1014|    191|  else {
 1015|    191|    if(!(flags & CURLU_PATH_AS_IS)) {
 1016|       |      /* remove ../ and ./ sequences according to RFC3986 */
 1017|    191|      char *newp = Curl_dedotdotify(path);
 1018|    191|      if(!newp)
 1019|      0|        return CURLUE_OUT_OF_MEMORY;
 1020|       |
 1021|    191|      if(strcmp(newp, path)) {
 1022|       |        /* if we got a new version */
 1023|     46|        if(path_alloced)
 1024|      0|          Curl_safefree(u->temppath);
 1025|     46|        u->temppath = path = newp;
 1026|     46|        path_alloced = TRUE;
 1027|     46|      }
 1028|    145|      else
 1029|    145|        free(newp);
 1030|    191|    }
 1031|       |
 1032|    191|    u->path = path_alloced?path:strdup(path);
 1033|    191|    if(!u->path)
 1034|      0|      return CURLUE_OUT_OF_MEMORY;
 1035|    191|    u->temppath = NULL; /* used now */
 1036|    191|  }
 1037|       |
 1038|    391|  if(hostname) {
 1039|    391|    char normalized_ipv4[sizeof("255.255.255.255") + 1];
 1040|       |    /*
 1041|       |     * Parse the login details and strip them out of the host name.
 1042|       |     */
 1043|    391|    if(junkscan(hostname, flags))
 1044|     13|      return CURLUE_MALFORMED_INPUT;
 1045|       |
 1046|    378|    result = parse_hostname_login(u, &hostname, flags);
 1047|    378|    if(result)
 1048|      0|      return result;
 1049|       |
 1050|    378|    result = Curl_parse_port(u, hostname, url_has_scheme);
 1051|    378|    if(result)
 1052|     16|      return result;
 1053|       |
 1054|    362|    if(0 == strlen(hostname) && (flags & CURLU_NO_AUTHORITY)) {
 1055|       |      /* Skip hostname check, it's allowed to be empty. */
 1056|      0|      u->host = strdup("");
 1057|      0|    }
 1058|    362|    else {
 1059|    362|      if(ipv4_normalize(hostname, normalized_ipv4, sizeof(normalized_ipv4)))
 1060|     45|        u->host = strdup(normalized_ipv4);
 1061|    317|      else {
 1062|    317|        result = decode_host(hostname, &u->host);
 1063|    317|        if(result)
 1064|      3|          return result;
 1065|    314|        result = hostname_check(u, u->host);
 1066|    314|        if(result)
 1067|      9|          return result;
 1068|    314|      }
 1069|    362|    }
 1070|    350|    if(!u->host)
 1071|      0|      return CURLUE_OUT_OF_MEMORY;
 1072|    350|    if((flags & CURLU_GUESS_SCHEME) && !schemep) {
 1073|       |      /* legacy curl-style guess based on host name */
 1074|     39|      if(checkprefix("ftp.", hostname))
 1075|      0|        schemep = "ftp";
 1076|     39|      else if(checkprefix("dict.", hostname))
 1077|      0|        schemep = "dict";
 1078|     39|      else if(checkprefix("ldap.", hostname))
 1079|      0|        schemep = "ldap";
 1080|     39|      else if(checkprefix("imap.", hostname))
 1081|      0|        schemep = "imap";
 1082|     39|      else if(checkprefix("smtp.", hostname))
 1083|      0|        schemep = "smtp";
 1084|     39|      else if(checkprefix("pop3.", hostname))
 1085|      0|        schemep = "pop3";
 1086|     39|      else
 1087|     39|        schemep = "http";
 1088|       |
 1089|     39|      u->scheme = strdup(schemep);
 1090|     39|      if(!u->scheme)
 1091|      0|        return CURLUE_OUT_OF_MEMORY;
 1092|     39|    }
 1093|    350|  }
 1094|       |
 1095|    350|  Curl_safefree(u->scratch);
 1096|    350|  Curl_safefree(u->temppath);
 1097|       |
 1098|    350|  return CURLUE_OK;
 1099|    391|}
urlapi.c:junkscan:
  582|  1.12k|{
  583|  1.12k|  if(part) {
  584|  1.12k|    static const char badbytes[]={
  585|  1.12k|      /* */ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  586|  1.12k|      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  587|  1.12k|      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  588|  1.12k|      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  589|  1.12k|      0x7f, 0x00 /* null-terminate */
  590|  1.12k|    };
  591|  1.12k|    size_t n = strlen(part);
  592|  1.12k|    size_t nfine = strcspn(part, badbytes);
  593|  1.12k|    if(nfine != n)
  594|       |      /* since we don't know which part is scanned, return a generic error
  595|       |         code */
  596|     15|      return TRUE;
  597|  1.10k|    if(!(flags & CURLU_ALLOW_SPACE) && strchr(part, ' '))
  598|      3|      return TRUE;
  599|  1.10k|  }
  600|  1.10k|  return FALSE;
  601|  1.12k|}
urlapi.c:parse_hostname_login:
  431|    378|{
  432|    378|  CURLUcode result = CURLUE_OK;
  433|    378|  CURLcode ccode;
  434|    378|  char *userp = NULL;
  435|    378|  char *passwdp = NULL;
  436|    378|  char *optionsp = NULL;
  437|    378|  const struct Curl_handler *h = NULL;
  438|       |
  439|       |  /* At this point, we're hoping all the other special cases have
  440|       |   * been taken care of, so conn->host.name is at most
  441|       |   *    [user[:password][;options]]@]hostname
  442|       |   *
  443|       |   * We need somewhere to put the embedded details, so do that first.
  444|       |   */
  445|       |
  446|    378|  char *ptr = strchr(*hostname, '@');
  447|    378|  char *login = *hostname;
  448|       |
  449|    378|  if(!ptr)
  450|    209|    goto out;
  451|       |
  452|       |  /* We will now try to extract the
  453|       |   * possible login information in a string like:
  454|       |   * ftp://user:password@ftp.my.site:8021/README */
  455|    169|  *hostname = ++ptr;
  456|       |
  457|       |  /* if this is a known scheme, get some details */
  458|    169|  if(u->scheme)
  459|    164|    h = Curl_builtin_scheme(u->scheme);
  460|       |
  461|       |  /* We could use the login information in the URL so extract it. Only parse
  462|       |     options if the handler says we should. Note that 'h' might be NULL! */
  463|    169|  ccode = Curl_parse_login_details(login, ptr - login - 1,
  464|    169|                                   &userp, &passwdp,
  465|    169|                                   (h && (h->flags & PROTOPT_URLOPTIONS)) ?
  466|      0|                                   &optionsp:NULL);
  467|    169|  if(ccode) {
  468|      0|    result = CURLUE_MALFORMED_INPUT;
  469|      0|    goto out;
  470|      0|  }
  471|       |
  472|    169|  if(userp) {
  473|    162|    if(flags & CURLU_DISALLOW_USER) {
  474|       |      /* Option DISALLOW_USER is set and url contains username. */
  475|      0|      result = CURLUE_USER_NOT_ALLOWED;
  476|      0|      goto out;
  477|      0|    }
  478|       |
  479|    162|    u->user = userp;
  480|    162|  }
  481|       |
  482|    169|  if(passwdp)
  483|      8|    u->password = passwdp;
  484|       |
  485|    169|  if(optionsp)
  486|      0|    u->options = optionsp;
  487|       |
  488|    169|  return CURLUE_OK;
  489|    209|  out:
  490|       |
  491|    209|  free(userp);
  492|    209|  free(passwdp);
  493|    209|  free(optionsp);
  494|       |
  495|    209|  return result;
  496|    169|}
urlapi.c:ipv4_normalize:
  680|    362|{
  681|    362|  bool done = FALSE;
  682|    362|  int n = 0;
  683|    362|  const char *c = hostname;
  684|    362|  unsigned long parts[4] = {0, 0, 0, 0};
  685|       |
  686|    555|  while(!done) {
  687|    499|    char *endp;
  688|    499|    unsigned long l;
  689|    499|    if((*c < '0') || (*c > '9'))
  690|       |      /* most importantly this doesn't allow a leading plus or minus */
  691|    247|      return FALSE;
  692|    252|    l = strtoul(c, &endp, 0);
  693|       |
  694|       |    /* overflow or nothing parsed at all */
  695|    252|    if(((l == ULONG_MAX) && (errno == ERANGE)) ||  (endp == c))
  696|      0|      return FALSE;
  697|       |
  698|    252|#if SIZEOF_LONG > 4
  699|       |    /* a value larger than 32 bits */
  700|    252|    if(l > UINT_MAX)
  701|      1|      return FALSE;
  702|    251|#endif
  703|       |
  704|    251|    parts[n] = l;
  705|    251|    c = endp;
  706|       |
  707|    251|    switch (*c) {
  708|    138|    case '.' :
  709|    138|      if(n == 3)
  710|      1|        return FALSE;
  711|    137|      n++;
  712|    137|      c++;
  713|    137|      break;
  714|       |
  715|     56|    case '\0':
  716|     56|      done = TRUE;
  717|     56|      break;
  718|       |
  719|     57|    default:
  720|     57|      return FALSE;
  721|    251|    }
  722|    251|  }
  723|       |
  724|       |  /* this is deemed a valid IPv4 numerical address */
  725|       |
  726|     56|  switch(n) {
  727|     15|  case 0: /* a -- 32 bits */
  728|     15|    msnprintf(outp, olen, "%u.%u.%u.%u",
  729|     15|              parts[0] >> 24, (parts[0] >> 16) & 0xff,
  730|     15|              (parts[0] >> 8) & 0xff, parts[0] & 0xff);
  731|     15|    break;
  732|      3|  case 1: /* a.b -- 8.24 bits */
  733|      3|    if((parts[0] > 0xff) || (parts[1] > 0xffffff))
  734|      1|      return FALSE;
  735|      2|    msnprintf(outp, olen, "%u.%u.%u.%u",
  736|      2|              parts[0], (parts[1] >> 16) & 0xff,
  737|      2|              (parts[1] >> 8) & 0xff, parts[1] & 0xff);
  738|      2|    break;
  739|      9|  case 2: /* a.b.c -- 8.8.16 bits */
  740|      9|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xffff))
  741|      5|      return FALSE;
  742|      4|    msnprintf(outp, olen, "%u.%u.%u.%u",
  743|      4|              parts[0], parts[1], (parts[2] >> 8) & 0xff,
  744|      4|              parts[2] & 0xff);
  745|      4|    break;
  746|     29|  case 3: /* a.b.c.d -- 8.8.8.8 bits */
  747|     29|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff) ||
  748|     29|       (parts[3] > 0xff))
  749|      5|      return FALSE;
  750|     24|    msnprintf(outp, olen, "%u.%u.%u.%u",
  751|     24|              parts[0], parts[1], parts[2], parts[3]);
  752|     24|    break;
  753|     56|  }
  754|     45|  return TRUE;
  755|     56|}
urlapi.c:decode_host:
  759|    317|{
  760|    317|  char *per = NULL;
  761|    317|  if(hostname[0] != '[')
  762|       |    /* only decode if not an ipv6 numerical */
  763|    314|    per = strchr(hostname, '%');
  764|    317|  if(!per) {
  765|    279|    *outp = strdup(hostname);
  766|    279|    if(!*outp)
  767|      0|      return CURLUE_OUT_OF_MEMORY;
  768|    279|  }
  769|     38|  else {
  770|       |    /* might be encoded */
  771|     38|    size_t dlen;
  772|     38|    CURLcode result = Curl_urldecode(NULL, hostname, 0,
  773|     38|                                     outp, &dlen, REJECT_CTRL);
  774|     38|    if(result)
  775|      3|      return CURLUE_MALFORMED_INPUT;
  776|     38|  }
  777|       |
  778|    314|  return CURLUE_OK;
  779|    317|}
urlapi.c:mv_urlhandle:
   93|    350|{
   94|    350|  free_urlhandle(to);
   95|    350|  *to = *from;
   96|    350|  free(from);
   97|    350|}
urlapi.c:hostname_check:
  604|    314|{
  605|    314|  size_t len;
  606|    314|  size_t hlen = strlen(hostname);
  607|       |
  608|    314|  if(hostname[0] == '[') {
  609|      3|#ifdef ENABLE_IPV6
  610|      3|    char dest[16]; /* fits a binary IPv6 address */
  611|      3|#endif
  612|      3|    const char *l = "0123456789abcdefABCDEF:.";
  613|      3|    if(hlen < 4) /* '[::]' is the shortest possible valid string */
  614|      1|      return CURLUE_MALFORMED_INPUT;
  615|      2|    hostname++;
  616|      2|    hlen -= 2;
  617|       |
  618|      2|    if(hostname[hlen] != ']')
  619|      2|      return CURLUE_MALFORMED_INPUT;
  620|       |
  621|       |    /* only valid letters are ok */
  622|      0|    len = strspn(hostname, l);
  623|      0|    if(hlen != len) {
  624|      0|      hlen = len;
  625|      0|      if(hostname[len] == '%') {
  626|       |        /* this could now be '%[zone id]' */
  627|      0|        char zoneid[16];
  628|      0|        int i = 0;
  629|      0|        char *h = &hostname[len + 1];
  630|       |        /* pass '25' if present and is a url encoded percent sign */
  631|      0|        if(!strncmp(h, "25", 2) && h[2] && (h[2] != ']'))
  632|      0|          h += 2;
  633|      0|        while(*h && (*h != ']') && (i < 15))
  634|      0|          zoneid[i++] = *h++;
  635|      0|        if(!i || (']' != *h))
  636|      0|          return CURLUE_MALFORMED_INPUT;
  637|      0|        zoneid[i] = 0;
  638|      0|        u->zoneid = strdup(zoneid);
  639|      0|        if(!u->zoneid)
  640|      0|          return CURLUE_OUT_OF_MEMORY;
  641|      0|        hostname[len] = ']'; /* insert end bracket */
  642|      0|        hostname[len + 1] = 0; /* terminate the hostname */
  643|      0|      }
  644|      0|      else
  645|      0|        return CURLUE_MALFORMED_INPUT;
  646|       |      /* hostname is fine */
  647|      0|    }
  648|      0|#ifdef ENABLE_IPV6
  649|      0|    hostname[hlen] = 0; /* end the address there */
  650|      0|    if(1 != Curl_inet_pton(AF_INET6, hostname, dest))
  651|      0|      return CURLUE_MALFORMED_INPUT;
  652|      0|    hostname[hlen] = ']'; /* restore ending bracket */
  653|      0|#endif
  654|      0|  }
  655|    311|  else {
  656|       |    /* letters from the second string is not ok */
  657|    311|    len = strcspn(hostname, " \r\n");
  658|    311|    if(hlen != len)
  659|       |      /* hostname with bad content */
  660|      2|      return CURLUE_MALFORMED_INPUT;
  661|    311|  }
  662|    309|  if(!hostname[0])
  663|      4|    return CURLUE_NO_HOST;
  664|    305|  return CURLUE_OK;
  665|    309|}

Curl_auth_digest_cleanup:
  960|  2.09k|{
  961|  2.09k|  Curl_safefree(digest->nonce);
  962|  2.09k|  Curl_safefree(digest->cnonce);
  963|  2.09k|  Curl_safefree(digest->realm);
  964|  2.09k|  Curl_safefree(digest->opaque);
  965|  2.09k|  Curl_safefree(digest->qop);
  966|  2.09k|  Curl_safefree(digest->algorithm);
  967|       |
  968|  2.09k|  digest->nc = 0;
  969|  2.09k|  digest->algo = CURLDIGESTALGO_MD5; /* default algorithm */
  970|  2.09k|  digest->stale = FALSE; /* default means normal, not stale */
  971|  2.09k|  digest->userhash = FALSE;
  972|  2.09k|}

Curl_auth_cleanup_ntlm:
  849|    812|{
  850|       |  /* Free the target info */
  851|    812|  Curl_safefree(ntlm->target_info);
  852|       |
  853|       |  /* Reset any variables */
  854|    812|  ntlm->target_info_len = 0;
  855|    812|}

Curl_tls_keylog_open:
   47|      1|{
   48|      1|  char *keylog_file_name;
   49|       |
   50|      1|  if(!keylog_file_fp) {
   51|      1|    keylog_file_name = curl_getenv("SSLKEYLOGFILE");
   52|      1|    if(keylog_file_name) {
   53|      0|      keylog_file_fp = fopen(keylog_file_name, FOPEN_APPENDTEXT);
   54|      0|      if(keylog_file_fp) {
   55|       |#ifdef WIN32
   56|       |        if(setvbuf(keylog_file_fp, NULL, _IONBF, 0))
   57|       |#else
   58|      0|        if(setvbuf(keylog_file_fp, NULL, _IOLBF, 4096))
   59|      0|#endif
   60|      0|        {
   61|      0|          fclose(keylog_file_fp);
   62|      0|          keylog_file_fp = NULL;
   63|      0|        }
   64|      0|      }
   65|      0|      Curl_safefree(keylog_file_name);
   66|      0|    }
   67|      1|  }
   68|      1|}

openssl.c:ossl_init:
 1172|      1|{
 1173|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) &&  \
 1174|       |  !defined(LIBRESSL_VERSION_NUMBER)
 1175|       |  const uint64_t flags =
 1176|       |#ifdef OPENSSL_INIT_ENGINE_ALL_BUILTIN
 1177|       |    /* not present in BoringSSL */
 1178|       |    OPENSSL_INIT_ENGINE_ALL_BUILTIN |
 1179|       |#endif
 1180|       |#ifdef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1181|       |    OPENSSL_INIT_NO_LOAD_CONFIG |
 1182|       |#else
 1183|       |    OPENSSL_INIT_LOAD_CONFIG |
 1184|       |#endif
 1185|       |    0;
 1186|       |  OPENSSL_init_ssl(flags, NULL);
 1187|       |#else
 1188|      1|  OPENSSL_load_builtin_modules();
 1189|       |
 1190|      1|#ifdef USE_OPENSSL_ENGINE
 1191|      1|  ENGINE_load_builtin_engines();
 1192|      1|#endif
 1193|       |
 1194|       |/* CONF_MFLAGS_DEFAULT_SECTION was introduced some time between 0.9.8b and
 1195|       |   0.9.8e */
 1196|       |#ifndef CONF_MFLAGS_DEFAULT_SECTION
 1197|       |#define CONF_MFLAGS_DEFAULT_SECTION 0x0
 1198|       |#endif
 1199|       |
 1200|      1|#ifndef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1201|      1|  CONF_modules_load_file(NULL, NULL,
 1202|      1|                         CONF_MFLAGS_DEFAULT_SECTION|
 1203|      1|                         CONF_MFLAGS_IGNORE_MISSING_FILE);
 1204|      1|#endif
 1205|       |
 1206|       |  /* Let's get nice error messages */
 1207|      1|  SSL_load_error_strings();
 1208|       |
 1209|       |  /* Init the global ciphers and digests */
 1210|      1|  if(!SSLeay_add_ssl_algorithms())
 1211|      0|    return 0;
 1212|       |
 1213|      1|  OpenSSL_add_all_algorithms();
 1214|      1|#endif
 1215|       |
 1216|      1|  Curl_tls_keylog_open();
 1217|       |
 1218|       |  /* Initialize the extra data indexes */
 1219|      1|  if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||
 1220|      1|     ossl_get_ssl_sockindex_index() < 0 || ossl_get_proxy_index() < 0)
 1221|      0|    return 0;
 1222|       |
 1223|      1|  return 1;
 1224|      1|}
openssl.c:ossl_get_ssl_data_index:
  373|      1|{
  374|      1|  static int ssl_ex_data_data_index = -1;
  375|      1|  if(ssl_ex_data_data_index < 0) {
  376|      1|    ssl_ex_data_data_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  377|      1|  }
  378|      1|  return ssl_ex_data_data_index;
  379|      1|}
openssl.c:ossl_get_ssl_conn_index:
  385|      1|{
  386|      1|  static int ssl_ex_data_conn_index = -1;
  387|      1|  if(ssl_ex_data_conn_index < 0) {
  388|      1|    ssl_ex_data_conn_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  389|      1|  }
  390|      1|  return ssl_ex_data_conn_index;
  391|      1|}
openssl.c:ossl_get_ssl_sockindex_index:
  397|      1|{
  398|      1|  static int sockindex_index = -1;
  399|      1|  if(sockindex_index < 0) {
  400|      1|    sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  401|      1|  }
  402|      1|  return sockindex_index;
  403|      1|}
openssl.c:ossl_get_proxy_index:
  409|      1|{
  410|      1|  static int proxy_index = -1;
  411|      1|  if(proxy_index < 0) {
  412|      1|    proxy_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  413|      1|  }
  414|      1|  return proxy_index;
  415|      1|}
openssl.c:ossl_random:
 4427|    817|{
 4428|    817|  int rc;
 4429|    817|  if(data) {
 4430|    817|    if(ossl_seed(data)) /* Initiate the seed if not already done */
 4431|      0|      return CURLE_FAILED_INIT; /* couldn't seed for some reason */
 4432|    817|  }
 4433|      0|  else {
 4434|      0|    if(!rand_enough())
 4435|      0|      return CURLE_FAILED_INIT;
 4436|      0|  }
 4437|       |  /* RAND_bytes() returns 1 on success, 0 otherwise.  */
 4438|    817|  rc = RAND_bytes(entropy, curlx_uztosi(length));
 4439|    817|  return (rc == 1 ? CURLE_OK : CURLE_FAILED_INIT);
 4440|    817|}
openssl.c:ossl_seed:
  441|    817|{
  442|       |  /* This might get called before it has been added to a multi handle */
  443|    817|  if(data->multi && data->multi->ssl_seeded)
  444|      0|    return CURLE_OK;
  445|       |
  446|    817|  if(rand_enough()) {
  447|       |    /* OpenSSL 1.1.0+ should return here */
  448|    817|    if(data->multi)
  449|    285|      data->multi->ssl_seeded = TRUE;
  450|    817|    return CURLE_OK;
  451|    817|  }
  452|       |#ifdef HAVE_RANDOM_INIT_BY_DEFAULT
  453|       |  /* with OpenSSL 1.1.0+, a failed RAND_status is a showstopper */
  454|       |  failf(data, "Insufficient randomness");
  455|       |  return CURLE_SSL_CONNECT_ERROR;
  456|       |#else
  457|       |
  458|       |#ifndef RANDOM_FILE
  459|       |  /* if RANDOM_FILE isn't defined, we only perform this if an option tells
  460|       |     us to! */
  461|       |  if(data->set.str[STRING_SSL_RANDOM_FILE])
  462|       |#define RANDOM_FILE "" /* doesn't matter won't be used */
  463|       |#endif
  464|      0|  {
  465|       |    /* let the option override the define */
  466|      0|    RAND_load_file((data->set.str[STRING_SSL_RANDOM_FILE]?
  467|      0|                    data->set.str[STRING_SSL_RANDOM_FILE]:
  468|      0|                    RANDOM_FILE),
  469|      0|                   RAND_LOAD_LENGTH);
  470|      0|    if(rand_enough())
  471|      0|      return CURLE_OK;
  472|      0|  }
  473|       |
  474|      0|#if defined(HAVE_RAND_EGD)
  475|       |  /* only available in OpenSSL 0.9.5 and later */
  476|       |  /* EGD_SOCKET is set at configure time or not at all */
  477|      0|#ifndef EGD_SOCKET
  478|       |  /* If we don't have the define set, we only do this if the egd-option
  479|       |     is set */
  480|      0|  if(data->set.str[STRING_SSL_EGDSOCKET])
  481|      0|#define EGD_SOCKET "" /* doesn't matter won't be used */
  482|      0|#endif
  483|      0|  {
  484|       |    /* If there's an option and a define, the option overrides the
  485|       |       define */
  486|      0|    int ret = RAND_egd(data->set.str[STRING_SSL_EGDSOCKET]?
  487|      0|                       data->set.str[STRING_SSL_EGDSOCKET]:EGD_SOCKET);
  488|      0|    if(-1 != ret) {
  489|      0|      if(rand_enough())
  490|      0|        return CURLE_OK;
  491|      0|    }
  492|      0|  }
  493|      0|#endif
  494|       |
  495|       |  /* fallback to a custom seeding of the PRNG using a hash based on a current
  496|       |     time */
  497|      0|  do {
  498|      0|    unsigned char randb[64];
  499|      0|    size_t len = sizeof(randb);
  500|      0|    size_t i, i_max;
  501|      0|    for(i = 0, i_max = len / sizeof(struct curltime); i < i_max; ++i) {
  502|      0|      struct curltime tv = Curl_now();
  503|      0|      Curl_wait_ms(1);
  504|      0|      tv.tv_sec *= i + 1;
  505|      0|      tv.tv_usec *= (unsigned int)i + 2;
  506|      0|      tv.tv_sec ^= ((Curl_now().tv_sec + Curl_now().tv_usec) *
  507|      0|                    (i + 3)) << 8;
  508|      0|      tv.tv_usec ^= (unsigned int) ((Curl_now().tv_sec +
  509|      0|                                     Curl_now().tv_usec) *
  510|      0|                                    (i + 4)) << 16;
  511|      0|      memcpy(&randb[i * sizeof(struct curltime)], &tv,
  512|      0|             sizeof(struct curltime));
  513|      0|    }
  514|      0|    RAND_add(randb, (int)len, (double)len/2);
  515|      0|  } while(!rand_enough());
  516|       |
  517|      0|  {
  518|       |    /* generates a default path for the random seed file */
  519|      0|    char fname[256];
  520|      0|    fname[0] = 0; /* blank it first */
  521|      0|    RAND_file_name(fname, sizeof(fname));
  522|      0|    if(fname[0]) {
  523|       |      /* we got a file name to try */
  524|      0|      RAND_load_file(fname, RAND_LOAD_LENGTH);
  525|      0|      if(rand_enough())
  526|      0|        return CURLE_OK;
  527|      0|    }
  528|      0|  }
  529|       |
  530|      0|  infof(data, "libcurl is now using a weak random seed!");
  531|      0|  return (rand_enough() ? CURLE_OK :
  532|      0|          CURLE_SSL_CONNECT_ERROR /* confusing error code */);
  533|      0|#endif
  534|      0|}
openssl.c:rand_enough:
  436|    817|{
  437|    817|  return (0 != RAND_status()) ? TRUE : FALSE;
  438|    817|}
openssl.c:ossl_close:
 1437|    812|{
 1438|    812|  ossl_closeone(data, conn, &conn->ssl[sockindex]);
 1439|    812|#ifndef CURL_DISABLE_PROXY
 1440|    812|  ossl_closeone(data, conn, &conn->proxy_ssl[sockindex]);
 1441|    812|#endif
 1442|    812|}
openssl.c:ossl_closeone:
 1410|  1.62k|{
 1411|  1.62k|  struct ssl_backend_data *backend = connssl->backend;
 1412|  1.62k|  if(backend->handle) {
 1413|      0|    char buf[32];
 1414|      0|    set_logger(conn, data);
 1415|       |
 1416|       |    /* Maybe the server has already sent a close notify alert.
 1417|       |       Read it to avoid an RST on the TCP connection. */
 1418|      0|    (void)SSL_read(backend->handle, buf, (int)sizeof(buf));
 1419|       |
 1420|      0|    (void)SSL_shutdown(backend->handle);
 1421|      0|    SSL_set_connect_state(backend->handle);
 1422|       |
 1423|      0|    SSL_free(backend->handle);
 1424|      0|    backend->handle = NULL;
 1425|      0|  }
 1426|  1.62k|  if(backend->ctx) {
 1427|      0|    SSL_CTX_free(backend->ctx);
 1428|      0|    backend->ctx = NULL;
 1429|      0|  }
 1430|  1.62k|}
openssl.c:ossl_close_all:
 1561|  1.04k|{
 1562|  1.04k|#ifdef USE_OPENSSL_ENGINE
 1563|  1.04k|  if(data->state.engine) {
 1564|      0|    ENGINE_finish(data->state.engine);
 1565|      0|    ENGINE_free(data->state.engine);
 1566|      0|    data->state.engine = NULL;
 1567|      0|  }
 1568|       |#else
 1569|       |  (void)data;
 1570|       |#endif
 1571|  1.04k|#if !defined(HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED) && \
 1572|  1.04k|  defined(HAVE_ERR_REMOVE_THREAD_STATE)
 1573|       |  /* OpenSSL 1.0.1 and 1.0.2 build an error queue that is stored per-thread
 1574|       |     so we need to clean it here in case the thread will be killed. All OpenSSL
 1575|       |     code should extract the error in association with the error so clearing
 1576|       |     this queue here should be harmless at worst. */
 1577|  1.04k|  ERR_remove_thread_state(NULL);
 1578|  1.04k|#endif
 1579|  1.04k|}
openssl.c:ossl_associate_connection:
 4485|    691|{
 4486|    691|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4487|    691|  struct ssl_backend_data *backend = connssl->backend;
 4488|       |
 4489|       |  /* If we don't have SSL context, do nothing. */
 4490|    691|  if(!backend->handle)
 4491|    691|    return;
 4492|       |
 4493|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4494|      0|    int data_idx = ossl_get_ssl_data_index();
 4495|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4496|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4497|      0|    int proxy_idx = ossl_get_proxy_index();
 4498|       |
 4499|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4500|      0|       proxy_idx >= 0) {
 4501|       |      /* Store the data needed for the "new session" callback.
 4502|       |       * The sockindex is stored as a pointer to an array element. */
 4503|      0|      SSL_set_ex_data(backend->handle, data_idx, data);
 4504|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, conn);
 4505|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
 4506|      0|#ifndef CURL_DISABLE_PROXY
 4507|      0|      SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:
 4508|      0|                      NULL);
 4509|       |#else
 4510|       |      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4511|       |#endif
 4512|      0|    }
 4513|      0|  }
 4514|      0|}
openssl.c:ossl_disassociate_connection:
 4526|    691|{
 4527|    691|  struct connectdata *conn = data->conn;
 4528|    691|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4529|    691|  struct ssl_backend_data *backend = connssl->backend;
 4530|       |
 4531|       |  /* If we don't have SSL context, do nothing. */
 4532|    691|  if(!backend->handle)
 4533|    691|    return;
 4534|       |
 4535|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4536|      0|    int data_idx = ossl_get_ssl_data_index();
 4537|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4538|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4539|      0|    int proxy_idx = ossl_get_proxy_index();
 4540|       |
 4541|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4542|      0|       proxy_idx >= 0) {
 4543|       |      /* Disable references to data in "new session" callback to avoid
 4544|       |       * accessing a stale pointer. */
 4545|      0|      SSL_set_ex_data(backend->handle, data_idx, NULL);
 4546|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
 4547|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
 4548|      0|      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4549|      0|    }
 4550|      0|  }
 4551|      0|}

Curl_clone_primary_ssl_config:
  168|    570|{
  169|    570|  dest->version = source->version;
  170|    570|  dest->version_max = source->version_max;
  171|    570|  dest->verifypeer = source->verifypeer;
  172|    570|  dest->verifyhost = source->verifyhost;
  173|    570|  dest->verifystatus = source->verifystatus;
  174|    570|  dest->sessionid = source->sessionid;
  175|       |
  176|    570|  CLONE_BLOB(cert_blob);
  177|    570|  CLONE_BLOB(ca_info_blob);
  178|    570|  CLONE_BLOB(issuercert_blob);
  179|    570|  CLONE_STRING(CApath);
  180|    570|  CLONE_STRING(CAfile);
  181|    570|  CLONE_STRING(issuercert);
  182|    570|  CLONE_STRING(clientcert);
  183|    570|  CLONE_STRING(random_file);
  184|    570|  CLONE_STRING(egdsocket);
  185|    570|  CLONE_STRING(cipher_list);
  186|    570|  CLONE_STRING(cipher_list13);
  187|    570|  CLONE_STRING(pinned_key);
  188|    570|  CLONE_STRING(curves);
  189|       |
  190|    570|  return TRUE;
  191|    570|}
Curl_free_primary_ssl_config:
  194|    812|{
  195|    812|  Curl_safefree(sslc->CApath);
  196|    812|  Curl_safefree(sslc->CAfile);
  197|    812|  Curl_safefree(sslc->issuercert);
  198|    812|  Curl_safefree(sslc->clientcert);
  199|    812|  Curl_safefree(sslc->random_file);
  200|    812|  Curl_safefree(sslc->egdsocket);
  201|    812|  Curl_safefree(sslc->cipher_list);
  202|    812|  Curl_safefree(sslc->cipher_list13);
  203|    812|  Curl_safefree(sslc->pinned_key);
  204|    812|  Curl_safefree(sslc->cert_blob);
  205|    812|  Curl_safefree(sslc->ca_info_blob);
  206|    812|  Curl_safefree(sslc->issuercert_blob);
  207|    812|  Curl_safefree(sslc->curves);
  208|    812|}
Curl_ssl_backend:
  215|  1.04k|{
  216|  1.04k|#ifdef USE_SSL
  217|  1.04k|  multissl_setup(NULL);
  218|  1.04k|  return Curl_ssl->info.id;
  219|       |#else
  220|       |  return (int)CURLSSLBACKEND_NONE;
  221|       |#endif
  222|  1.04k|}
Curl_ssl_init:
  236|      1|{
  237|       |  /* make sure this is only done once */
  238|      1|  if(init_ssl)
  239|      0|    return 1;
  240|      1|  init_ssl = TRUE; /* never again */
  241|       |
  242|      1|  return Curl_ssl->init();
  243|      1|}
Curl_ssl_kill_session:
  474|  2.03k|{
  475|  2.03k|  if(session->sessionid) {
  476|       |    /* defensive check */
  477|       |
  478|       |    /* free the ID the SSL-layer specific way */
  479|      0|    Curl_ssl->session_free(session->sessionid);
  480|       |
  481|      0|    session->sessionid = NULL;
  482|      0|    session->age = 0; /* fresh */
  483|       |
  484|      0|    Curl_free_primary_ssl_config(&session->ssl_config);
  485|       |
  486|      0|    Curl_safefree(session->name);
  487|      0|    Curl_safefree(session->conn_to_host);
  488|      0|  }
  489|  2.03k|}
Curl_ssl_associate_conn:
  628|    691|{
  629|    691|  if(Curl_ssl->associate_connection) {
  630|    691|    Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);
  631|    691|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  632|      0|      Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);
  633|    691|  }
  634|    691|}
Curl_ssl_detach_conn:
  638|    691|{
  639|    691|  if(Curl_ssl->disassociate_connection) {
  640|    691|    Curl_ssl->disassociate_connection(data, FIRSTSOCKET);
  641|    691|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  642|      0|      Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);
  643|    691|  }
  644|    691|}
Curl_ssl_close_all:
  647|  1.04k|{
  648|       |  /* kill the session ID cache if not shared */
  649|  1.04k|  if(data->state.session && !SSLSESSION_SHARED(data)) {
  650|    406|    size_t i;
  651|  2.43k|    for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++)
  652|       |      /* the single-killer function handles empty table slots */
  653|  2.03k|      Curl_ssl_kill_session(&data->state.session[i]);
  654|       |
  655|       |    /* free the cache data */
  656|    406|    Curl_safefree(data->state.session);
  657|    406|  }
  658|       |
  659|  1.04k|  Curl_ssl->close_all(data);
  660|  1.04k|}
Curl_ssl_close:
  682|    812|{
  683|    812|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
  684|    812|  Curl_ssl->close_one(data, conn, sockindex);
  685|    812|  conn->ssl[sockindex].state = ssl_connection_none;
  686|    812|}
Curl_ssl_initsessions:
  728|    406|{
  729|    406|  struct Curl_ssl_session *session;
  730|       |
  731|    406|  if(data->state.session)
  732|       |    /* this is just a precaution to prevent multiple inits */
  733|      0|    return CURLE_OK;
  734|       |
  735|    406|  session = calloc(amount, sizeof(struct Curl_ssl_session));
  736|    406|  if(!session)
  737|      0|    return CURLE_OUT_OF_MEMORY;
  738|       |
  739|       |  /* store the info in the SSL section */
  740|    406|  data->set.general_ssl.max_ssl_sessions = amount;
  741|    406|  data->state.session = session;
  742|    406|  data->state.sessionage = 1; /* this is brand new */
  743|    406|  return CURLE_OK;
  744|    406|}
Curl_ssl_free_certinfo:
  777|  2.49k|{
  778|  2.49k|  struct curl_certinfo *ci = &data->info.certs;
  779|       |
  780|  2.49k|  if(ci->num_of_certs) {
  781|       |    /* free all individual lists used */
  782|      0|    int i;
  783|      0|    for(i = 0; i<ci->num_of_certs; i++) {
  784|      0|      curl_slist_free_all(ci->certinfo[i]);
  785|      0|      ci->certinfo[i] = NULL;
  786|      0|    }
  787|       |
  788|      0|    free(ci->certinfo); /* free the actual array too */
  789|      0|    ci->certinfo = NULL;
  790|      0|    ci->num_of_certs = 0;
  791|      0|  }
  792|  2.49k|}
Curl_ssl_random:
  870|    817|{
  871|    817|  return Curl_ssl->random(data, entropy, length);
  872|    817|}
vtls.c:blobdup:
   96|  1.71k|{
   97|  1.71k|  DEBUGASSERT(dest);
   98|  1.71k|  DEBUGASSERT(!*dest);
   99|  1.71k|  if(src) {
  100|       |    /* only if there's data to dupe! */
  101|      0|    struct curl_blob *d;
  102|      0|    d = malloc(sizeof(struct curl_blob) + src->len);
  103|      0|    if(!d)
  104|      0|      return CURLE_OUT_OF_MEMORY;
  105|      0|    d->len = src->len;
  106|       |    /* Always duplicate because the connection may survive longer than the
  107|       |       handle that passed in the blob. */
  108|      0|    d->flags = CURL_BLOB_COPY;
  109|      0|    d->data = (void *)((char *)d + sizeof(struct curl_blob));
  110|      0|    memcpy(d->data, src->data, src->len);
  111|      0|    *dest = d;
  112|      0|  }
  113|  1.71k|  return CURLE_OK;
  114|  1.71k|}
vtls.c:multissl_setup:
 1389|  1.04k|{
 1390|  1.04k|  const char *env;
 1391|  1.04k|  char *env_tmp;
 1392|       |
 1393|  1.04k|  if(Curl_ssl != &Curl_ssl_multi)
 1394|  1.04k|    return 1;
 1395|       |
 1396|      0|  if(backend) {
 1397|      0|    Curl_ssl = backend;
 1398|      0|    return 0;
 1399|      0|  }
 1400|       |
 1401|      0|  if(!available_backends[0])
 1402|      0|    return 1;
 1403|       |
 1404|      0|  env = env_tmp = curl_getenv("CURL_SSL_BACKEND");
 1405|       |#ifdef CURL_DEFAULT_SSL_BACKEND
 1406|       |  if(!env)
 1407|       |    env = CURL_DEFAULT_SSL_BACKEND;
 1408|       |#endif
 1409|      0|  if(env) {
 1410|      0|    int i;
 1411|      0|    for(i = 0; available_backends[i]; i++) {
 1412|      0|      if(strcasecompare(env, available_backends[i]->info.name)) {
 1413|      0|        Curl_ssl = available_backends[i];
 1414|      0|        free(env_tmp);
 1415|      0|        return 0;
 1416|      0|      }
 1417|      0|    }
 1418|      0|  }
 1419|       |
 1420|       |  /* Fall back to first available backend */
 1421|      0|  Curl_ssl = available_backends[0];
 1422|      0|  free(env_tmp);
 1423|      0|  return 0;
 1424|      0|}

curlx_ultous:
   63|    285|{
   64|       |#ifdef __INTEL_COMPILER
   65|       |#  pragma warning(push)
   66|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   67|       |#endif
   68|       |
   69|    285|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_USHORT);
   70|    285|  return (unsigned short)(ulnum & (unsigned long) CURL_MASK_USHORT);
   71|       |
   72|       |#ifdef __INTEL_COMPILER
   73|       |#  pragma warning(pop)
   74|       |#endif
   75|    285|}
curlx_ultouc:
   82|      7|{
   83|       |#ifdef __INTEL_COMPILER
   84|       |#  pragma warning(push)
   85|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   86|       |#endif
   87|       |
   88|      7|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_UCHAR);
   89|      7|  return (unsigned char)(ulnum & (unsigned long) CURL_MASK_UCHAR);
   90|       |
   91|       |#ifdef __INTEL_COMPILER
   92|       |#  pragma warning(pop)
   93|       |#endif
   94|      7|}
curlx_uztosi:
  123|    817|{
  124|       |#ifdef __INTEL_COMPILER
  125|       |#  pragma warning(push)
  126|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  127|       |#endif
  128|       |
  129|    817|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_SINT);
  130|    817|  return (int)(uznum & (size_t) CURL_MASK_SINT);
  131|       |
  132|       |#ifdef __INTEL_COMPILER
  133|       |#  pragma warning(pop)
  134|       |#endif
  135|    817|}

Curl_wildcard_dtor:
   50|  1.51k|{
   51|  1.51k|  if(!wc)
   52|      0|    return;
   53|       |
   54|  1.51k|  if(wc->dtor) {
   55|      0|    wc->dtor(wc->protdata);
   56|      0|    wc->dtor = ZERO_NULL;
   57|      0|    wc->protdata = NULL;
   58|      0|  }
   59|  1.51k|  DEBUGASSERT(wc->protdata == NULL);
   60|       |
   61|  1.51k|  Curl_llist_destroy(&wc->filelist, NULL);
   62|       |
   63|       |
   64|  1.51k|  free(wc->path);
   65|  1.51k|  wc->path = NULL;
   66|  1.51k|  free(wc->pattern);
   67|  1.51k|  wc->pattern = NULL;
   68|       |
   69|  1.51k|  wc->customptr = NULL;
   70|  1.51k|  wc->state = CURLWC_INIT;
   71|  1.51k|}

LLVMFuzzerTestOneInput:
   35|    575|{
   36|    575|  int rc = 0;
   37|    575|  int tlv_rc;
   38|    575|  FUZZ_DATA fuzz;
   39|    575|  TLV tlv;
   40|       |
   41|       |  /* Ignore SIGPIPE errors. We'll handle the errors ourselves. */
   42|    575|  signal(SIGPIPE, SIG_IGN);
   43|       |
   44|       |  /* Have to set all fields to zero before getting to the terminate function */
   45|    575|  memset(&fuzz, 0, sizeof(FUZZ_DATA));
   46|       |
   47|    575|  if(size < sizeof(TLV_RAW)) {
   48|       |    /* Not enough data for a single TLV - don't continue */
   49|      1|    goto EXIT_LABEL;
   50|      1|  }
   51|       |
   52|       |  /* Try to initialize the fuzz data */
   53|    574|  FTRY(fuzz_initialize_fuzz_data(&fuzz, data, size));
   54|       |
   55|    574|  for(tlv_rc = fuzz_get_first_tlv(&fuzz, &tlv);
   56|  1.23k|      tlv_rc == 0;
   57|    697|      tlv_rc = fuzz_get_next_tlv(&fuzz, &tlv)) {
   58|       |
   59|       |    /* Have the TLV in hand. Parse the TLV. */
   60|    697|    rc = fuzz_parse_tlv(&fuzz, &tlv);
   61|       |
   62|    697|    if(rc != 0) {
   63|       |      /* Failed to parse the TLV. Can't continue. */
   64|     41|      goto EXIT_LABEL;
   65|     41|    }
   66|    697|  }
   67|       |
   68|    533|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
   69|       |    /* A TLV call failed. Can't continue. */
   70|     61|    goto EXIT_LABEL;
   71|     61|  }
   72|       |
   73|       |  /* Set up the standard easy options. */
   74|    472|  FTRY(fuzz_set_easy_options(&fuzz));
   75|       |
   76|       |  /**
   77|       |   * Add in more curl options that have been accumulated over possibly
   78|       |   * multiple TLVs.
   79|       |   */
   80|    472|  if(fuzz.header_list != NULL) {
   81|      6|    curl_easy_setopt(fuzz.easy, CURLOPT_HTTPHEADER, fuzz.header_list);
   82|      6|  }
   83|       |
   84|    472|  if(fuzz.mail_recipients_list != NULL) {
   85|      2|    curl_easy_setopt(fuzz.easy, CURLOPT_MAIL_RCPT, fuzz.mail_recipients_list);
   86|      2|  }
   87|       |
   88|    472|  if(fuzz.mime != NULL) {
   89|     12|    curl_easy_setopt(fuzz.easy, CURLOPT_MIMEPOST, fuzz.mime);
   90|     12|  }
   91|       |
   92|       |  /* Run the transfer. */
   93|    472|  fuzz_handle_transfer(&fuzz);
   94|       |
   95|    575|EXIT_LABEL:
   96|       |
   97|    575|  fuzz_terminate_fuzz_data(&fuzz);
   98|       |
   99|       |  /* This function must always return 0. Non-zero codes are reserved. */
  100|    575|  return 0;
  101|    472|}
_Z6to_u32PKh:
  107|    792|{
  108|    792|  uint32_t u;
  109|    792|  u = (b[0] << 24) + (b[1] << 16) + (b[2] << 8) + b[3];
  110|    792|  return u;
  111|    792|}
_Z6to_u16PKh:
  117|    792|{
  118|    792|  uint16_t u;
  119|    792|  u = (b[0] << 8) + b[1];
  120|    792|  return u;
  121|    792|}
_Z25fuzz_initialize_fuzz_dataP9fuzz_dataPKhm:
  129|    574|{
  130|    574|  int rc = 0;
  131|    574|  int ii;
  132|       |
  133|       |  /* Initialize the fuzz data. */
  134|    574|  memset(fuzz, 0, sizeof(FUZZ_DATA));
  135|       |
  136|       |  /* Create an easy handle. This will have all of the settings configured on
  137|       |     it. */
  138|    574|  fuzz->easy = curl_easy_init();
  139|    574|  FCHECK(fuzz->easy != NULL);
  140|       |
  141|       |  /* Set up the state parser */
  142|    574|  fuzz->state.data = data;
  143|    574|  fuzz->state.data_len = data_len;
  144|       |
  145|       |  /* Set up the state of the server sockets. */
  146|  1.72k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  147|  1.14k|    fuzz->sockman[ii].index = ii;
  148|  1.14k|    fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  149|  1.14k|  }
  150|       |
  151|       |  /* Check for verbose mode. */
  152|    574|  fuzz->verbose = (getenv("FUZZ_VERBOSE") != NULL);
  153|       |
  154|    574|EXIT_LABEL:
  155|       |
  156|    574|  return rc;
  157|    574|}
_Z21fuzz_set_easy_optionsP9fuzz_data:
  163|    472|{
  164|    472|  int rc = 0;
  165|    472|  unsigned long allowed_protocols;
  166|       |
  167|       |  /* Set some standard options on the CURL easy handle. We need to override the
  168|       |     socket function so that we create our own sockets to present to CURL. */
  169|    472|  FTRY(curl_easy_setopt(fuzz->easy,
  170|    472|                        CURLOPT_OPENSOCKETFUNCTION,
  171|    472|                        fuzz_open_socket));
  172|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_OPENSOCKETDATA, fuzz));
  173|       |
  174|       |  /* In case something tries to set a socket option, intercept this. */
  175|    472|  FTRY(curl_easy_setopt(fuzz->easy,
  176|    472|                        CURLOPT_SOCKOPTFUNCTION,
  177|    472|                        fuzz_sockopt_callback));
  178|       |
  179|       |  /* Set the standard read function callback. */
  180|    472|  FTRY(curl_easy_setopt(fuzz->easy,
  181|    472|                        CURLOPT_READFUNCTION,
  182|    472|                        fuzz_read_callback));
  183|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_READDATA, fuzz));
  184|       |
  185|       |  /* Set the standard write function callback. */
  186|    472|  FTRY(curl_easy_setopt(fuzz->easy,
  187|    472|                        CURLOPT_WRITEFUNCTION,
  188|    472|                        fuzz_write_callback));
  189|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_WRITEDATA, fuzz));
  190|       |
  191|       |  /* Set the cookie jar so cookies are tested. */
  192|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_COOKIEJAR, FUZZ_COOKIE_JAR_PATH));
  193|       |
  194|       |  /* Time out requests quickly. */
  195|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_TIMEOUT_MS, 200L));
  196|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_SERVER_RESPONSE_TIMEOUT, 1L));
  197|       |
  198|       |  /* Can enable verbose mode by having the environment variable FUZZ_VERBOSE. */
  199|    472|  if(fuzz->verbose) {
  200|      0|    FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_VERBOSE, 1L));
  201|      0|  }
  202|       |
  203|       |  /* Force resolution of all addresses to a specific IP address. */
  204|    472|  fuzz->connect_to_list = curl_slist_append(NULL, "::127.0.1.127:");
  205|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_CONNECT_TO, fuzz->connect_to_list));
  206|       |
  207|       |  /* Limit the protocols in use by this fuzzer. */
  208|    472|  FTRY(fuzz_set_allowed_protocols(fuzz));
  209|       |
  210|    472|EXIT_LABEL:
  211|       |
  212|    472|  return rc;
  213|    472|}
_Z24fuzz_terminate_fuzz_dataP9fuzz_data:
  219|    575|{
  220|    575|  int ii;
  221|       |
  222|    575|  fuzz_free((void **)&fuzz->postfields);
  223|       |
  224|  1.72k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  225|  1.15k|    if(fuzz->sockman[ii].fd_state != FUZZ_SOCK_CLOSED) {
  226|    285|      close(fuzz->sockman[ii].fd);
  227|    285|      fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  228|    285|    }
  229|  1.15k|  }
  230|       |
  231|    575|  if(fuzz->connect_to_list != NULL) {
  232|    472|    curl_slist_free_all(fuzz->connect_to_list);
  233|    472|    fuzz->connect_to_list = NULL;
  234|    472|  }
  235|       |
  236|    575|  if(fuzz->header_list != NULL) {
  237|     10|    curl_slist_free_all(fuzz->header_list);
  238|     10|    fuzz->header_list = NULL;
  239|     10|  }
  240|       |
  241|    575|  if(fuzz->mail_recipients_list != NULL) {
  242|      2|    curl_slist_free_all(fuzz->mail_recipients_list);
  243|      2|    fuzz->mail_recipients_list = NULL;
  244|      2|  }
  245|       |
  246|    575|  if(fuzz->mime != NULL) {
  247|     30|    curl_mime_free(fuzz->mime);
  248|     30|    fuzz->mime = NULL;
  249|     30|  }
  250|       |
  251|    575|  if(fuzz->easy != NULL) {
  252|    574|    curl_easy_cleanup(fuzz->easy);
  253|    574|    fuzz->easy = NULL;
  254|    574|  }
  255|    575|}
_Z9fuzz_freePPv:
  261|  1.27k|{
  262|  1.27k|  if(*ptr != NULL) {
  263|    508|    free(*ptr);
  264|    508|    *ptr = NULL;
  265|    508|  }
  266|  1.27k|}
_Z20fuzz_handle_transferP9fuzz_data:
  273|    472|{
  274|    472|  int rc = 0;
  275|    472|  CURLM *multi_handle;
  276|    472|  int still_running; /* keep number of running handles */
  277|    472|  CURLMsg *msg; /* for picking up messages with the transfer status */
  278|    472|  int msgs_left; /* how many messages are left */
  279|    472|  int double_timeout = 0;
  280|    472|  fd_set fdread;
  281|    472|  fd_set fdwrite;
  282|    472|  fd_set fdexcep;
  283|    472|  struct timeval timeout;
  284|    472|  int select_rc;
  285|    472|  CURLMcode mc;
  286|    472|  int maxfd = -1;
  287|    472|  long curl_timeo = -1;
  288|    472|  int ii;
  289|    472|  FUZZ_SOCKET_MANAGER *sman[FUZZ_NUM_CONNECTIONS];
  290|       |
  291|  1.41k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  292|    944|    sman[ii] = &fuzz->sockman[ii];
  293|       |
  294|       |    /* Set up the starting index for responses. */
  295|    944|    sman[ii]->response_index = 1;
  296|    944|  }
  297|       |
  298|       |  /* init a multi stack */
  299|    472|  multi_handle = curl_multi_init();
  300|       |
  301|       |  /* add the individual transfers */
  302|    472|  curl_multi_add_handle(multi_handle, fuzz->easy);
  303|       |
  304|       |  /* Do an initial process. This might end the transfer immediately. */
  305|    472|  curl_multi_perform(multi_handle, &still_running);
  306|    472|  FV_PRINTF(fuzz,
  307|    472|            "FUZZ: Initial perform; still running? %d \n",
  308|    472|            still_running);
  309|       |
  310|  15.8M|  while(still_running) {
  311|       |    /* Reset the sets of file descriptors. */
  312|  15.8M|    FD_ZERO(&fdread);
  313|  15.8M|    FD_ZERO(&fdwrite);
  314|  15.8M|    FD_ZERO(&fdexcep);
  315|       |
  316|       |    /* Set a timeout of 10ms. This is lower than recommended by the multi guide
  317|       |       but we're not going to any remote servers, so everything should complete
  318|       |       very quickly. */
  319|  15.8M|    timeout.tv_sec = 0;
  320|  15.8M|    timeout.tv_usec = 10000;
  321|       |
  322|       |    /* get file descriptors from the transfers */
  323|  15.8M|    mc = curl_multi_fdset(multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);
  324|  15.8M|    if(mc != CURLM_OK) {
  325|      0|      fprintf(stderr, "curl_multi_fdset() failed, code %d.\n", mc);
  326|      0|      rc = -1;
  327|      0|      break;
  328|      0|    }
  329|       |
  330|  47.6M|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  331|       |      /* Add the socket FD into the readable set if connected. */
  332|  31.7M|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN) {
  333|      0|        FD_SET(sman[ii]->fd, &fdread);
  334|       |
  335|       |        /* Work out the maximum FD between the cURL file descriptors and the
  336|       |           server FD. */
  337|      0|        maxfd = FUZZ_MAX(sman[ii]->fd, maxfd);
  338|      0|      }
  339|  31.7M|    }
  340|       |
  341|       |    /* Work out what file descriptors need work. */
  342|  15.8M|    rc = fuzz_select(maxfd + 1, &fdread, &fdwrite, &fdexcep, &timeout);
  343|       |
  344|  15.8M|    if(rc == -1) {
  345|       |      /* Had an issue while selecting a file descriptor. Let's just exit. */
  346|      0|      FV_PRINTF(fuzz, "FUZZ: select failed, exiting \n");
  347|      0|      break;
  348|      0|    }
  349|  15.8M|    else if(rc == 0) {
  350|      0|      FV_PRINTF(fuzz,
  351|      0|                "FUZZ: Timed out; double timeout? %d \n",
  352|      0|                double_timeout);
  353|       |
  354|       |      /* Timed out. */
  355|      0|      if(double_timeout == 1) {
  356|       |        /* We don't expect multiple timeouts in a row. If there are double
  357|       |           timeouts then exit. */
  358|      0|        break;
  359|      0|      }
  360|      0|      else {
  361|       |        /* Set the timeout flag for the next time we select(). */
  362|      0|        double_timeout = 1;
  363|      0|      }
  364|      0|    }
  365|  15.8M|    else {
  366|       |      /* There's an active file descriptor. Reset the timeout flag. */
  367|  15.8M|      double_timeout = 0;
  368|  15.8M|    }
  369|       |
  370|       |    /* Check to see if a server file descriptor is readable. If it is,
  371|       |       then send the next response from the fuzzing data. */
  372|  47.6M|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  373|  31.7M|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN &&
  374|  31.7M|         FD_ISSET(sman[ii]->fd, &fdread)) {
  375|      0|        rc = fuzz_send_next_response(fuzz, sman[ii]);
  376|      0|        if(rc != 0) {
  377|       |          /* Failed to send a response. Break out here. */
  378|      0|          break;
  379|      0|        }
  380|      0|      }
  381|  31.7M|    }
  382|       |
  383|  15.8M|    curl_multi_perform(multi_handle, &still_running);
  384|  15.8M|  }
  385|       |
  386|       |  /* Remove the easy handle from the multi stack. */
  387|    472|  curl_multi_remove_handle(multi_handle, fuzz->easy);
  388|       |
  389|       |  /* Clean up the multi handle - the top level function will handle the easy
  390|       |     handle. */
  391|    472|  curl_multi_cleanup(multi_handle);
  392|       |
  393|    472|  return(rc);
  394|    472|}
_Z11fuzz_selectiP6fd_setS0_S0_P7timeval:
  460|  15.8M|                struct timeval *timeout) {
  461|  15.8M|  return select(nfds, readfds, writefds, exceptfds, timeout);
  462|  15.8M|}
_Z26fuzz_set_allowed_protocolsP9fuzz_data:
  468|    472|{
  469|    472|  int rc = 0;
  470|    472|  unsigned long allowed_protocols = 0;
  471|       |
  472|       |#ifdef FUZZ_PROTOCOLS_ALL
  473|       |  /* Do not allow telnet currently as it accepts input from stdin. */
  474|       |  allowed_protocols |= CURLPROTO_ALL & ~CURLPROTO_TELNET;
  475|       |#endif
  476|       |#ifdef FUZZ_PROTOCOLS_DICT
  477|       |  allowed_protocols |= CURLPROTO_DICT;
  478|       |#endif
  479|       |#ifdef FUZZ_PROTOCOLS_FILE
  480|       |  allowed_protocols |= CURLPROTO_FILE;
  481|       |#endif
  482|       |#ifdef FUZZ_PROTOCOLS_FTP
  483|       |  allowed_protocols |= CURLPROTO_FTP;
  484|       |  allowed_protocols |= CURLPROTO_FTPS;
  485|       |#endif
  486|       |#ifdef FUZZ_PROTOCOLS_GOPHER
  487|       |  allowed_protocols |= CURLPROTO_GOPHER;
  488|       |#endif
  489|       |#ifdef FUZZ_PROTOCOLS_HTTP
  490|       |  allowed_protocols |= CURLPROTO_HTTP;
  491|       |#endif
  492|       |#ifdef FUZZ_PROTOCOLS_HTTPS
  493|       |  allowed_protocols |= CURLPROTO_HTTPS;
  494|       |#endif
  495|       |#ifdef FUZZ_PROTOCOLS_IMAP
  496|       |  allowed_protocols |= CURLPROTO_IMAP;
  497|       |  allowed_protocols |= CURLPROTO_IMAPS;
  498|       |#endif
  499|       |#ifdef FUZZ_PROTOCOLS_LDAP
  500|       |  allowed_protocols |= CURLPROTO_LDAP;
  501|       |  allowed_protocols |= CURLPROTO_LDAPS;
  502|       |#endif
  503|    472|#ifdef FUZZ_PROTOCOLS_MQTT
  504|    472|  allowed_protocols |= CURLPROTO_MQTT;
  505|    472|#endif
  506|       |#ifdef FUZZ_PROTOCOLS_POP3
  507|       |  allowed_protocols |= CURLPROTO_POP3;
  508|       |  allowed_protocols |= CURLPROTO_POP3S;
  509|       |#endif
  510|       |#ifdef FUZZ_PROTOCOLS_RTMP
  511|       |  allowed_protocols |= CURLPROTO_RTMP;
  512|       |  allowed_protocols |= CURLPROTO_RTMPE;
  513|       |  allowed_protocols |= CURLPROTO_RTMPS;
  514|       |  allowed_protocols |= CURLPROTO_RTMPT;
  515|       |  allowed_protocols |= CURLPROTO_RTMPTE;
  516|       |  allowed_protocols |= CURLPROTO_RTMPTS;
  517|       |#endif
  518|       |#ifdef FUZZ_PROTOCOLS_RTSP
  519|       |  allowed_protocols |= CURLPROTO_RTSP;
  520|       |#endif
  521|       |#ifdef FUZZ_PROTOCOLS_SCP
  522|       |  allowed_protocols |= CURLPROTO_SCP;
  523|       |#endif
  524|       |#ifdef FUZZ_PROTOCOLS_SFTP
  525|       |  allowed_protocols |= CURLPROTO_SFTP;
  526|       |#endif
  527|       |#ifdef FUZZ_PROTOCOLS_SMB
  528|       |  allowed_protocols |= CURLPROTO_SMB;
  529|       |  allowed_protocols |= CURLPROTO_SMBS;
  530|       |#endif
  531|       |#ifdef FUZZ_PROTOCOLS_SMTP
  532|       |  allowed_protocols |= CURLPROTO_SMTP;
  533|       |  allowed_protocols |= CURLPROTO_SMTPS;
  534|       |#endif
  535|       |#ifdef FUZZ_PROTOCOLS_TFTP
  536|       |  allowed_protocols |= CURLPROTO_TFTP;
  537|       |#endif
  538|       |
  539|    472|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_PROTOCOLS, allowed_protocols));
  540|       |
  541|    472|EXIT_LABEL:
  542|       |
  543|    472|  return rc;
  544|    472|}

_Z16fuzz_open_socketPv12curlsocktypeP13curl_sockaddr:
   42|    285|{
   43|    285|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
   44|    285|  int fds[2];
   45|    285|  int flags;
   46|    285|  int status;
   47|    285|  const uint8_t *data;
   48|    285|  size_t data_len;
   49|    285|  struct sockaddr_un client_addr;
   50|    285|  FUZZ_SOCKET_MANAGER *sman;
   51|       |
   52|       |  /* Handle unused parameters */
   53|    285|  (void)purpose;
   54|    285|  (void)address;
   55|       |
   56|    285|  if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED &&
   57|    285|     fuzz->sockman[1].fd_state != FUZZ_SOCK_CLOSED) {
   58|       |    /* Both sockets have already been opened. */
   59|      0|    return CURL_SOCKET_BAD;
   60|      0|  }
   61|    285|  else if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED) {
   62|      0|    sman = &fuzz->sockman[1];
   63|      0|  }
   64|    285|  else {
   65|    285|    FV_PRINTF(fuzz, "FUZZ: Using socket manager 0 \n");
   66|    285|    sman = &fuzz->sockman[0];
   67|    285|  }
   68|    285|  FV_PRINTF(fuzz, "FUZZ[%d]: Using socket manager %d \n",
   69|    285|            sman->index,
   70|    285|            sman->index);
   71|       |
   72|    285|  if(socketpair(AF_UNIX, SOCK_STREAM, 0, fds)) {
   73|       |    /* Failed to create a pair of sockets. */
   74|      0|    return CURL_SOCKET_BAD;
   75|      0|  }
   76|       |
   77|    285|  if(!FUZZ_VALID_SOCK(fds[0]) || !FUZZ_VALID_SOCK(fds[1])) {
   78|       |    /* One or more of the file descriptors is too large to fit in an fd_set,
   79|       |       so reject it here. Print out a message because this ought to be quite
   80|       |       rare. */
   81|      0|    printf("FUZZ[%d]: Not using file descriptors %d,%d as FD_SETSIZE is %d\n",
   82|      0|           sman->index,
   83|      0|           fds[0],
   84|      0|           fds[1],
   85|      0|           FD_SETSIZE);
   86|       |
   87|       |    /* Close the file descriptors so they don't leak. */
   88|      0|    close(fds[0]);
   89|      0|    close(fds[1]);
   90|       |
   91|      0|    return CURL_SOCKET_BAD;
   92|      0|  }
   93|       |
   94|       |  /* Make the server non-blocking. */
   95|    285|  flags = fcntl(fds[0], F_GETFL, 0);
   96|    285|  status = fcntl(fds[0], F_SETFL, flags | O_NONBLOCK);
   97|       |
   98|    285|  if(status == -1) {
   99|       |    /* Close the file descriptors so they don't leak. */
  100|      0|    close(fds[0]);
  101|      0|    close(fds[1]);
  102|       |
  103|       |    /* Setting non-blocking failed. Return a negative response code. */
  104|      0|    return CURL_SOCKET_BAD;
  105|      0|  }
  106|       |
  107|       |  /* At this point, the file descriptors in hand should be good enough to
  108|       |     work with. */
  109|    285|  sman->fd = fds[0];
  110|    285|  sman->fd_state = FUZZ_SOCK_OPEN;
  111|       |
  112|       |  /* If the server should be sending data immediately, send it here. */
  113|    285|  data = sman->responses[0].data;
  114|    285|  data_len = sman->responses[0].data_len;
  115|       |
  116|    285|  if(data != NULL) {
  117|     39|    FV_PRINTF(fuzz, "FUZZ[%d]: Sending initial response \n", sman->index);
  118|       |
  119|     39|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  120|       |      /* Close the file descriptors so they don't leak. */
  121|      0|      close(sman->fd);
  122|      0|      sman->fd = -1;
  123|       |
  124|      0|      close(fds[1]);
  125|       |
  126|       |      /* Failed to write all of the response data. */
  127|      0|      return CURL_SOCKET_BAD;
  128|      0|    }
  129|     39|  }
  130|       |
  131|       |  /* Check to see if the socket should be shut down immediately. */
  132|    285|  if(sman->responses[1].data == NULL) {
  133|    285|    FV_PRINTF(fuzz,
  134|    285|              "FUZZ[%d]: Shutting down server socket: %d \n",
  135|    285|              sman->index,
  136|    285|              sman->fd);
  137|    285|    shutdown(sman->fd, SHUT_WR);
  138|    285|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  139|    285|  }
  140|       |
  141|       |  /* Return the other half of the socket pair. */
  142|    285|  return fds[1];
  143|    285|}
_Z21fuzz_sockopt_callbackPvi12curlsocktype:
  152|    285|{
  153|    285|  (void)ptr;
  154|    285|  (void)curlfd;
  155|    285|  (void)purpose;
  156|       |
  157|    285|  return CURL_SOCKOPT_ALREADY_CONNECTED;
  158|    285|}
_Z19fuzz_write_callbackPvmmS_:
  211|      1|{
  212|      1|  size_t total = size * nmemb;
  213|      1|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
  214|      1|  size_t copy_len = total;
  215|       |
  216|       |  /* Restrict copy_len to at most TEMP_WRITE_ARRAY_SIZE. */
  217|      1|  if(copy_len > TEMP_WRITE_ARRAY_SIZE) {
  218|      0|    copy_len = TEMP_WRITE_ARRAY_SIZE;
  219|      0|  }
  220|       |
  221|       |  /* Copy bytes to the temp store just to ensure the parameters are
  222|       |     exercised. */
  223|      1|  memcpy(fuzz->write_array, contents, copy_len);
  224|       |
  225|       |  /* Add on the total to the count. If it exceeds the maximum then return
  226|       |     zero to the caller so that the transfer is terminated early. */
  227|      1|  fuzz->written_data += total;
  228|       |
  229|      1|  if(fuzz->written_data > MAXIMUM_WRITE_LENGTH) {
  230|      0|    FV_PRINTF(fuzz,
  231|      0|              "FUZZ: Exceeded maximum write length (%lu) \n",
  232|      0|              fuzz->written_data);
  233|      0|    total = 0;
  234|      0|  }
  235|       |
  236|      1|  return total;
  237|      1|}

_Z18fuzz_get_first_tlvP9fuzz_dataP3tlv:
   32|    608|{
   33|       |  /* Reset the cursor. */
   34|    608|  fuzz->state.data_pos = 0;
   35|    608|  return fuzz_get_tlv_comn(fuzz, tlv);
   36|    608|}
_Z17fuzz_get_next_tlvP9fuzz_dataP3tlv:
   43|    656|{
   44|       |  /* Advance the cursor by the full length of the previous TLV. */
   45|    656|  fuzz->state.data_pos += sizeof(TLV_RAW) + tlv->length;
   46|       |
   47|       |  /* Work out if there's a TLV's worth of data to read */
   48|    656|  if(fuzz->state.data_pos + sizeof(TLV_RAW) > fuzz->state.data_len) {
   49|       |    /* No more TLVs to parse */
   50|    472|    return TLV_RC_NO_MORE_TLVS;
   51|    472|  }
   52|       |
   53|    184|  return fuzz_get_tlv_comn(fuzz, tlv);
   54|    656|}
_Z17fuzz_get_tlv_comnP9fuzz_dataP3tlv:
   61|    792|{
   62|    792|  int rc = 0;
   63|    792|  size_t data_offset;
   64|    792|  TLV_RAW *raw;
   65|       |
   66|       |  /* Start by casting the data stream to a TLV. */
   67|    792|  raw = (TLV_RAW *)&fuzz->state.data[fuzz->state.data_pos];
   68|    792|  data_offset = fuzz->state.data_pos + sizeof(TLV_RAW);
   69|       |
   70|       |  /* Set the TLV values. */
   71|    792|  tlv->type = to_u16(raw->raw_type);
   72|    792|  tlv->length = to_u32(raw->raw_length);
   73|    792|  tlv->value = &fuzz->state.data[data_offset];
   74|       |
   75|    792|  FV_PRINTF(fuzz, "TLV: type %x length %u\n", tlv->type, tlv->length);
   76|       |
   77|       |  /* Use uint64s to verify lengths of TLVs so that overflow problems don't
   78|       |     matter. */
   79|    792|  uint64_t check_length = data_offset;
   80|    792|  check_length += tlv->length;
   81|       |
   82|    792|  uint64_t remaining_len = fuzz->state.data_len;
   83|    792|  FV_PRINTF(fuzz, "Check length of data: %lu \n", check_length);
   84|    792|  FV_PRINTF(fuzz, "Remaining length of data: %lu \n", remaining_len);
   85|       |
   86|       |  /* Sanity check that the TLV length is ok. */
   87|    792|  if(check_length > remaining_len) {
   88|     81|    FV_PRINTF(fuzz, "Returning TLV_RC_SIZE_ERROR\n");
   89|     81|    rc = TLV_RC_SIZE_ERROR;
   90|     81|  }
   91|       |
   92|    792|  return rc;
   93|    792|}
_Z14fuzz_parse_tlvP9fuzz_dataP3tlv:
   99|    697|{
  100|    697|  int rc;
  101|    697|  char *tmp = NULL;
  102|    697|  uint32_t tmp_u32;
  103|       |
  104|    697|  switch(tlv->type) {
  105|       |    /* The pointers in response TLVs will always be valid as long as the fuzz
  106|       |       data is in scope, which is the entirety of this file. */
  107|     47|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE0, 0);
  108|      4|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE1, 1);
  109|      1|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE2, 2);
  110|      4|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE3, 3);
  111|      9|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE4, 4);
  112|      1|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE5, 5);
  113|      4|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE6, 6);
  114|      2|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE7, 7);
  115|     10|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE8, 8);
  116|      3|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE9, 9);
  117|      6|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE10, 10);
  118|       |
  119|      3|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE0, 0);
  120|      3|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE1, 1);
  121|       |
  122|     12|    case TLV_TYPE_UPLOAD1:
  123|       |      /* The pointers in the TLV will always be valid as long as the fuzz data
  124|       |         is in scope, which is the entirety of this file. */
  125|       |
  126|     12|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_UPLOAD);
  127|       |
  128|     12|      fuzz->upload1_data = tlv->value;
  129|     12|      fuzz->upload1_data_len = tlv->length;
  130|       |
  131|     12|      FSET_OPTION(fuzz, CURLOPT_UPLOAD, 1L);
  132|     12|      FSET_OPTION(fuzz,
  133|     12|                  CURLOPT_INFILESIZE_LARGE,
  134|     12|                  (curl_off_t)fuzz->upload1_data_len);
  135|     12|      break;
  136|       |
  137|     12|    case TLV_TYPE_HEADER:
  138|       |      /* Limit the number of headers that can be added to a message to prevent
  139|       |         timeouts. */
  140|     12|      if(fuzz->header_list_count >= TLV_MAX_NUM_CURLOPT_HEADER) {
  141|      0|        rc = 255;
  142|      0|        goto EXIT_LABEL;
  143|      0|      }
  144|       |
  145|     12|      tmp = fuzz_tlv_to_string(tlv);
  146|     12|      fuzz->header_list = curl_slist_append(fuzz->header_list, tmp);
  147|     12|      fuzz->header_list_count++;
  148|     12|      break;
  149|       |
  150|      2|    case TLV_TYPE_MAIL_RECIPIENT:
  151|      2|      tmp = fuzz_tlv_to_string(tlv);
  152|      2|      fuzz->mail_recipients_list =
  153|      2|                            curl_slist_append(fuzz->mail_recipients_list, tmp);
  154|      2|      break;
  155|       |
  156|     39|    case TLV_TYPE_MIME_PART:
  157|     39|      if(fuzz->mime == NULL) {
  158|     30|        fuzz->mime = curl_mime_init(fuzz->easy);
  159|     30|      }
  160|       |
  161|     39|      fuzz->part = curl_mime_addpart(fuzz->mime);
  162|       |
  163|       |      /* This TLV may have sub TLVs. */
  164|     39|      fuzz_add_mime_part(tlv, fuzz->part);
  165|     39|      break;
  166|       |
  167|      6|    case TLV_TYPE_POSTFIELDS:
  168|      6|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_POSTFIELDS);
  169|      6|      fuzz->postfields = fuzz_tlv_to_string(tlv);
  170|      6|      FSET_OPTION(fuzz, CURLOPT_POSTFIELDS, fuzz->postfields);
  171|      6|      break;
  172|       |
  173|       |    /* Define a set of u32 options. */
  174|      4|    FU32TLV(fuzz, TLV_TYPE_HTTPAUTH, CURLOPT_HTTPAUTH);
  175|      4|    FU32TLV(fuzz, TLV_TYPE_OPTHEADER, CURLOPT_HEADER);
  176|      3|    FU32TLV(fuzz, TLV_TYPE_NOBODY, CURLOPT_NOBODY);
  177|      7|    FU32TLV(fuzz, TLV_TYPE_FOLLOWLOCATION, CURLOPT_FOLLOWLOCATION);
  178|      1|    FU32TLV(fuzz, TLV_TYPE_WILDCARDMATCH, CURLOPT_WILDCARDMATCH);
  179|      1|    FU32TLV(fuzz, TLV_TYPE_RTSP_REQUEST, CURLOPT_RTSP_REQUEST);
  180|      1|    FU32TLV(fuzz, TLV_TYPE_RTSP_CLIENT_CSEQ, CURLOPT_RTSP_CLIENT_CSEQ);
  181|      1|    FU32TLV(fuzz, TLV_TYPE_HTTP_VERSION, CURLOPT_HTTP_VERSION);
  182|       |
  183|       |    /* Define a set of singleton TLVs - they can only have their value set once
  184|       |       and all follow the same pattern. */
  185|    861|    FSINGLETONTLV(fuzz, TLV_TYPE_URL, CURLOPT_URL);
  186|      8|    FSINGLETONTLV(fuzz, TLV_TYPE_DOH_URL, CURLOPT_DOH_URL);
  187|     18|    FSINGLETONTLV(fuzz, TLV_TYPE_USERNAME, CURLOPT_USERNAME);
  188|     17|    FSINGLETONTLV(fuzz, TLV_TYPE_PASSWORD, CURLOPT_PASSWORD);
  189|      8|    FSINGLETONTLV(fuzz, TLV_TYPE_COOKIE, CURLOPT_COOKIE);
  190|      6|    FSINGLETONTLV(fuzz, TLV_TYPE_RANGE, CURLOPT_RANGE);
  191|      4|    FSINGLETONTLV(fuzz, TLV_TYPE_CUSTOMREQUEST, CURLOPT_CUSTOMREQUEST);
  192|      8|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_FROM, CURLOPT_MAIL_FROM);
  193|     23|    FSINGLETONTLV(fuzz, TLV_TYPE_ACCEPTENCODING, CURLOPT_ACCEPT_ENCODING);
  194|      6|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_SESSION_ID, CURLOPT_RTSP_SESSION_ID);
  195|      4|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_STREAM_URI, CURLOPT_RTSP_STREAM_URI);
  196|     12|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_TRANSPORT, CURLOPT_RTSP_TRANSPORT);
  197|      6|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_AUTH, CURLOPT_MAIL_AUTH);
  198|       |
  199|     14|    default:
  200|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  201|       |         corpus so we reject any unknown TLVs. */
  202|     14|      rc = 127;
  203|     14|      goto EXIT_LABEL;
  204|      0|      break;
  205|    697|  }
  206|       |
  207|    656|  rc = 0;
  208|       |
  209|    697|EXIT_LABEL:
  210|       |
  211|    697|  fuzz_free((void **)&tmp);
  212|       |
  213|    697|  return rc;
  214|    656|}
_Z18fuzz_tlv_to_stringP3tlv:
  220|    508|{
  221|    508|  char *tlvstr;
  222|       |
  223|       |  /* Allocate enough space, plus a null terminator */
  224|    508|  tlvstr = (char *)malloc(tlv->length + 1);
  225|       |
  226|    508|  if(tlvstr != NULL) {
  227|    508|    memcpy(tlvstr, tlv->value, tlv->length);
  228|    508|    tlvstr[tlv->length] = 0;
  229|    508|  }
  230|       |
  231|    508|  return tlvstr;
  232|    508|}
_Z18fuzz_add_mime_partP3tlvP13curl_mimepart:
  238|     39|{
  239|     39|  FUZZ_DATA part_fuzz;
  240|     39|  TLV tlv;
  241|     39|  int rc = 0;
  242|     39|  int tlv_rc;
  243|       |
  244|     39|  memset(&part_fuzz, 0, sizeof(FUZZ_DATA));
  245|       |
  246|     39|  if(src_tlv->length < sizeof(TLV_RAW)) {
  247|       |    /* Not enough data for a single TLV - don't continue */
  248|      5|    goto EXIT_LABEL;
  249|      5|  }
  250|       |
  251|       |  /* Set up the state parser */
  252|     34|  part_fuzz.state.data = src_tlv->value;
  253|     34|  part_fuzz.state.data_len = src_tlv->length;
  254|       |
  255|     34|  for(tlv_rc = fuzz_get_first_tlv(&part_fuzz, &tlv);
  256|     34|      tlv_rc == 0;
  257|     34|      tlv_rc = fuzz_get_next_tlv(&part_fuzz, &tlv)) {
  258|       |
  259|       |    /* Have the TLV in hand. Parse the TLV. */
  260|     14|    rc = fuzz_parse_mime_tlv(part, &tlv);
  261|       |
  262|     14|    if(rc != 0) {
  263|       |      /* Failed to parse the TLV. Can't continue. */
  264|     14|      goto EXIT_LABEL;
  265|     14|    }
  266|     14|  }
  267|       |
  268|     20|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
  269|       |    /* A TLV call failed. Can't continue. */
  270|     20|    goto EXIT_LABEL;
  271|     20|  }
  272|       |
  273|     39|EXIT_LABEL:
  274|       |
  275|     39|  return(rc);
  276|     20|}
_Z19fuzz_parse_mime_tlvP13curl_mimepartP3tlv:
  282|     14|{
  283|     14|  int rc;
  284|     14|  char *tmp;
  285|       |
  286|     14|  switch(tlv->type) {
  287|      0|    case TLV_TYPE_MIME_PART_NAME:
  288|      0|      tmp = fuzz_tlv_to_string(tlv);
  289|      0|      curl_mime_name(part, tmp);
  290|      0|      fuzz_free((void **)&tmp);
  291|      0|      break;
  292|       |
  293|      0|    case TLV_TYPE_MIME_PART_DATA:
  294|      0|      curl_mime_data(part, (const char *)tlv->value, tlv->length);
  295|      0|      break;
  296|       |
  297|     14|    default:
  298|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  299|       |         corpus so we reject any unknown TLVs. */
  300|     14|      rc = 255;
  301|     14|      goto EXIT_LABEL;
  302|      0|      break;
  303|     14|  }
  304|       |
  305|      0|  rc = 0;
  306|       |
  307|     14|EXIT_LABEL:
  308|       |
  309|     14|  return rc;
  310|      0|}

ex_data.c:ex_class_item_LHASH_HASH:
  105|     19|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|     19|                const o_type *a = arg; \
  107|     19|                return name##_hash(a); }
ex_data.c:ex_class_item_LHASH_COMP:
  114|     15|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     15|                const o_type *a = arg1;             \
  116|     15|                const o_type *b = arg2; \
  117|     15|                return name##_cmp(a,b); }

EVP_PKEY_asn1_get_count:
  133|     13|{
  134|     13|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  135|     13|    if (app_methods)
  136|      0|        num += sk_EVP_PKEY_ASN1_METHOD_num(app_methods);
  137|     13|    return num;
  138|     13|}
EVP_PKEY_asn1_get0:
  141|     12|{
  142|     12|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  143|     12|    if (idx < 0)
  144|      0|        return NULL;
  145|     12|    if (idx < num)
  146|     12|        return standard_methods[idx];
  147|      0|    idx -= num;
  148|      0|    return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
  149|     12|}
EVP_PKEY_asn1_find_str:
  202|      1|{
  203|      1|    int i;
  204|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  205|      1|    if (len == -1)
  206|      1|        len = strlen(str);
  207|      1|    if (pe) {
  208|      1|#ifndef OPENSSL_NO_ENGINE
  209|      1|        ENGINE *e;
  210|      1|        ameth = ENGINE_pkey_asn1_find_str(&e, str, len);
  211|      1|        if (ameth) {
  212|       |            /*
  213|       |             * Convert structural into functional reference
  214|       |             */
  215|      0|            if (!ENGINE_init(e))
  216|      0|                ameth = NULL;
  217|      0|            ENGINE_free(e);
  218|      0|            *pe = e;
  219|      0|            return ameth;
  220|      0|        }
  221|      1|#endif
  222|      1|        *pe = NULL;
  223|      1|    }
  224|     13|    for (i = 0; i < EVP_PKEY_asn1_get_count(); i++) {
  225|     12|        ameth = EVP_PKEY_asn1_get0(i);
  226|     12|        if (ameth->pkey_flags & ASN1_PKEY_ALIAS)
  227|      5|            continue;
  228|      7|        if (((int)strlen(ameth->pem_str) == len) &&
  229|      7|            !strncasecmp(ameth->pem_str, str, len))
  230|      0|            return ameth;
  231|      7|    }
  232|      1|    return NULL;
  233|      1|}
EVP_PKEY_asn1_new:
  289|      3|{
  290|      3|    EVP_PKEY_ASN1_METHOD *ameth;
  291|      3|    ameth = OPENSSL_malloc(sizeof(EVP_PKEY_ASN1_METHOD));
  292|      3|    if (!ameth)
  293|      0|        return NULL;
  294|       |
  295|      3|    memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));
  296|       |
  297|      3|    ameth->pkey_id = id;
  298|      3|    ameth->pkey_base_id = id;
  299|      3|    ameth->pkey_flags = flags | ASN1_PKEY_DYNAMIC;
  300|       |
  301|      3|    if (info) {
  302|      3|        ameth->info = BUF_strdup(info);
  303|      3|        if (!ameth->info)
  304|      0|            goto err;
  305|      3|    } else
  306|      0|        ameth->info = NULL;
  307|       |
  308|      3|    if (pem_str) {
  309|      3|        ameth->pem_str = BUF_strdup(pem_str);
  310|      3|        if (!ameth->pem_str)
  311|      0|            goto err;
  312|      3|    } else
  313|      0|        ameth->pem_str = NULL;
  314|       |
  315|      3|    ameth->pub_decode = 0;
  316|      3|    ameth->pub_encode = 0;
  317|      3|    ameth->pub_cmp = 0;
  318|      3|    ameth->pub_print = 0;
  319|       |
  320|      3|    ameth->priv_decode = 0;
  321|      3|    ameth->priv_encode = 0;
  322|      3|    ameth->priv_print = 0;
  323|       |
  324|      3|    ameth->old_priv_encode = 0;
  325|      3|    ameth->old_priv_decode = 0;
  326|       |
  327|      3|    ameth->item_verify = 0;
  328|      3|    ameth->item_sign = 0;
  329|       |
  330|      3|    ameth->pkey_size = 0;
  331|      3|    ameth->pkey_bits = 0;
  332|       |
  333|      3|    ameth->param_decode = 0;
  334|      3|    ameth->param_encode = 0;
  335|      3|    ameth->param_missing = 0;
  336|      3|    ameth->param_copy = 0;
  337|      3|    ameth->param_cmp = 0;
  338|      3|    ameth->param_print = 0;
  339|       |
  340|      3|    ameth->pkey_free = 0;
  341|      3|    ameth->pkey_ctrl = 0;
  342|       |
  343|      3|    return ameth;
  344|       |
  345|      0| err:
  346|       |
  347|      0|    EVP_PKEY_asn1_free(ameth);
  348|      0|    return NULL;
  349|       |
  350|      3|}
EVP_PKEY_asn1_set_public:
  409|      2|{
  410|      2|    ameth->pub_decode = pub_decode;
  411|      2|    ameth->pub_encode = pub_encode;
  412|      2|    ameth->pub_cmp = pub_cmp;
  413|      2|    ameth->pub_print = pub_print;
  414|      2|    ameth->pkey_size = pkey_size;
  415|      2|    ameth->pkey_bits = pkey_bits;
  416|      2|}
EVP_PKEY_asn1_set_private:
  428|      2|{
  429|      2|    ameth->priv_decode = priv_decode;
  430|      2|    ameth->priv_encode = priv_encode;
  431|      2|    ameth->priv_print = priv_print;
  432|      2|}
EVP_PKEY_asn1_set_param:
  448|      2|{
  449|      2|    ameth->param_decode = param_decode;
  450|      2|    ameth->param_encode = param_encode;
  451|      2|    ameth->param_missing = param_missing;
  452|      2|    ameth->param_copy = param_copy;
  453|      2|    ameth->param_cmp = param_cmp;
  454|      2|    ameth->param_print = param_print;
  455|      2|}
EVP_PKEY_asn1_set_free:
  459|      3|{
  460|      3|    ameth->pkey_free = pkey_free;
  461|      3|}
EVP_PKEY_asn1_set_ctrl:
  466|      3|{
  467|      3|    ameth->pkey_ctrl = pkey_ctrl;
  468|      3|}

ERR_load_ASN1_strings:
  346|      1|{
  347|      1|#ifndef OPENSSL_NO_ERR
  348|       |
  349|      1|    if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
  350|      1|        ERR_load_strings(0, ASN1_str_functs);
  351|      1|        ERR_load_strings(0, ASN1_str_reasons);
  352|      1|    }
  353|      1|#endif
  354|      1|}

ASN1_add_oid_module:
   99|      1|{
  100|      1|    CONF_module_add("oid_section", oid_module_init, oid_module_finish);
  101|      1|}

ERR_load_BIO_strings:
  149|      1|{
  150|      1|#ifndef OPENSSL_NO_ERR
  151|       |
  152|      1|    if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
  153|      1|        ERR_load_strings(0, BIO_str_functs);
  154|      1|        ERR_load_strings(0, BIO_str_reasons);
  155|      1|    }
  156|      1|#endif
  157|      1|}

BIO_new_file:
  170|      1|{
  171|      1|    BIO  *ret;
  172|      1|    FILE *file = file_fopen(filename, mode);
  173|       |
  174|      1|    if (file == NULL) {
  175|      1|        SYSerr(SYS_F_FOPEN, get_last_sys_error());
  176|      1|        ERR_add_error_data(5, "fopen('", filename, "','", mode, "')");
  177|      1|        if (errno == ENOENT
  178|      1|# ifdef ENXIO
  179|      1|            || errno == ENXIO
  180|      1|# endif
  181|      1|            )
  182|      1|            BIOerr(BIO_F_BIO_NEW_FILE, BIO_R_NO_SUCH_FILE);
  183|      0|        else
  184|      1|            BIOerr(BIO_F_BIO_NEW_FILE, ERR_R_SYS_LIB);
  185|      1|        return (NULL);
  186|      1|    }
  187|      0|    if ((ret = BIO_new(BIO_s_file())) == NULL) {
  188|      0|        fclose(file);
  189|      0|        return (NULL);
  190|      0|    }
  191|       |
  192|      0|    BIO_clear_flags(ret, BIO_FLAGS_UPLINK); /* we did fopen -> we disengage
  193|       |                                             * UPLINK */
  194|      0|    BIO_set_fp(ret, file, BIO_CLOSE);
  195|      0|    return (ret);
  196|      0|}
bss_file.c:file_fopen:
  119|      1|{
  120|      1|    FILE *file = NULL;
  121|       |
  122|       |#  if defined(_WIN32) && defined(CP_UTF8)
  123|       |    int sz, len_0 = (int)strlen(filename) + 1;
  124|       |    DWORD flags;
  125|       |
  126|       |    /*
  127|       |     * Basically there are three cases to cover: a) filename is
  128|       |     * pure ASCII string; b) actual UTF-8 encoded string and
  129|       |     * c) locale-ized string, i.e. one containing 8-bit
  130|       |     * characters that are meaningful in current system locale.
  131|       |     * If filename is pure ASCII or real UTF-8 encoded string,
  132|       |     * MultiByteToWideChar succeeds and _wfopen works. If
  133|       |     * filename is locale-ized string, chances are that
  134|       |     * MultiByteToWideChar fails reporting
  135|       |     * ERROR_NO_UNICODE_TRANSLATION, in which case we fall
  136|       |     * back to fopen...
  137|       |     */
  138|       |    if ((sz = MultiByteToWideChar(CP_UTF8, (flags = MB_ERR_INVALID_CHARS),
  139|       |                                  filename, len_0, NULL, 0)) > 0 ||
  140|       |        (GetLastError() == ERROR_INVALID_FLAGS &&
  141|       |         (sz = MultiByteToWideChar(CP_UTF8, (flags = 0),
  142|       |                                   filename, len_0, NULL, 0)) > 0)
  143|       |        ) {
  144|       |        WCHAR wmode[8];
  145|       |        WCHAR *wfilename = _alloca(sz * sizeof(WCHAR));
  146|       |
  147|       |        if (MultiByteToWideChar(CP_UTF8, flags,
  148|       |                                filename, len_0, wfilename, sz) &&
  149|       |            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
  150|       |                                wmode, sizeof(wmode) / sizeof(wmode[0])) &&
  151|       |            (file = _wfopen(wfilename, wmode)) == NULL &&
  152|       |            (errno == ENOENT || errno == EBADF)
  153|       |            ) {
  154|       |            /*
  155|       |             * UTF-8 decode succeeded, but no file, filename
  156|       |             * could still have been locale-ized...
  157|       |             */
  158|       |            file = fopen(filename, mode);
  159|       |        }
  160|       |    } else if (GetLastError() == ERROR_NO_UNICODE_TRANSLATION) {
  161|       |        file = fopen(filename, mode);
  162|       |    }
  163|       |#  else
  164|      1|    file = fopen(filename, mode);
  165|      1|#  endif
  166|      1|    return (file);
  167|      1|}

ERR_load_BN_strings:
  146|      1|{
  147|      1|#ifndef OPENSSL_NO_ERR
  148|       |
  149|      1|    if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
  150|      1|        ERR_load_strings(0, BN_str_functs);
  151|      1|        ERR_load_strings(0, BN_str_reasons);
  152|      1|    }
  153|      1|#endif
  154|      1|}

ERR_load_BUF_strings:
   89|      1|{
   90|      1|#ifndef OPENSSL_NO_ERR
   91|       |
   92|      1|    if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
   93|      1|        ERR_load_strings(0, BUF_str_functs);
   94|      1|        ERR_load_strings(0, BUF_str_reasons);
   95|      1|    }
   96|      1|#endif
   97|      1|}

BUF_strnlen:
   65|      9|{
   66|      9|    const char *p;
   67|       |
   68|    109|    for (p = str; maxlen-- != 0 && *p != '\0'; ++p) ;
   69|       |
   70|      9|    return p - str;
   71|      9|}
BUF_strdup:
   74|      9|{
   75|      9|    if (str == NULL)
   76|      0|        return NULL;
   77|      9|    return BUF_strndup(str, strlen(str));
   78|      9|}
BUF_strndup:
   81|      9|{
   82|      9|    char *ret;
   83|       |
   84|      9|    if (str == NULL)
   85|      0|        return NULL;
   86|       |
   87|      9|    siz = BUF_strnlen(str, siz);
   88|       |
   89|      9|    if (siz >= INT_MAX)
   90|      0|        return NULL;
   91|       |
   92|      9|    ret = OPENSSL_malloc(siz + 1);
   93|      9|    if (ret == NULL) {
   94|      0|        BUFerr(BUF_F_BUF_STRNDUP, ERR_R_MALLOC_FAILURE);
   95|      0|        return NULL;
   96|      0|    }
   97|       |
   98|      9|    memcpy(ret, str, siz);
   99|      9|    ret[siz] = '\0';
  100|       |
  101|      9|    return (ret);
  102|      9|}
BUF_strlcpy:
  120|     28|{
  121|     28|    size_t l = 0;
  122|    539|    for (; size > 1 && *src; size--) {
  123|    511|        *dst++ = *src++;
  124|    511|        l++;
  125|    511|    }
  126|     28|    if (size)
  127|     28|        *dst = '\0';
  128|     28|    return l + strlen(src);
  129|     28|}
BUF_strlcat:
  132|     23|{
  133|     23|    size_t l = 0;
  134|    435|    for (; size > 0 && *dst; size--, dst++)
  135|    412|        l++;
  136|     23|    return l + BUF_strlcpy(dst, src, size);
  137|     23|}

ERR_load_CMS_strings:
  301|      1|{
  302|      1|#ifndef OPENSSL_NO_ERR
  303|       |
  304|      1|    if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
  305|      1|        ERR_load_strings(0, CMS_str_functs);
  306|      1|        ERR_load_strings(0, CMS_str_reasons);
  307|      1|    }
  308|      1|#endif
  309|      1|}

COMP_zlib:
  344|      1|{
  345|      1|    COMP_METHOD *meth = &zlib_method_nozlib;
  346|       |
  347|       |#ifdef ZLIB_SHARED
  348|       |    if (!zlib_loaded) {
  349|       |# if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)
  350|       |        zlib_dso = DSO_load(NULL, "ZLIB1", NULL, 0);
  351|       |# else
  352|       |        zlib_dso = DSO_load(NULL, "z", NULL, 0);
  353|       |# endif
  354|       |        if (zlib_dso != NULL) {
  355|       |            p_compress = (compress_ft) DSO_bind_func(zlib_dso, "compress");
  356|       |            p_inflateEnd
  357|       |                = (inflateEnd_ft) DSO_bind_func(zlib_dso, "inflateEnd");
  358|       |            p_inflate = (inflate_ft) DSO_bind_func(zlib_dso, "inflate");
  359|       |            p_inflateInit_
  360|       |                = (inflateInit__ft) DSO_bind_func(zlib_dso, "inflateInit_");
  361|       |            p_deflateEnd
  362|       |                = (deflateEnd_ft) DSO_bind_func(zlib_dso, "deflateEnd");
  363|       |            p_deflate = (deflate_ft) DSO_bind_func(zlib_dso, "deflate");
  364|       |            p_deflateInit_
  365|       |                = (deflateInit__ft) DSO_bind_func(zlib_dso, "deflateInit_");
  366|       |            p_zError = (zError__ft) DSO_bind_func(zlib_dso, "zError");
  367|       |
  368|       |            if (p_compress && p_inflateEnd && p_inflate
  369|       |                && p_inflateInit_ && p_deflateEnd
  370|       |                && p_deflate && p_deflateInit_ && p_zError)
  371|       |                zlib_loaded++;
  372|       |        }
  373|       |    }
  374|       |#endif
  375|       |#ifdef ZLIB_SHARED
  376|       |    if (zlib_loaded)
  377|       |#endif
  378|       |#if defined(ZLIB) || defined(ZLIB_SHARED)
  379|       |    {
  380|       |        /*
  381|       |         * init zlib_stateful_ex_idx here so that in a multi-process
  382|       |         * application it's enough to intialize openssl before forking (idx
  383|       |         * will be inherited in all the children)
  384|       |         */
  385|       |        if (zlib_stateful_ex_idx == -1) {
  386|       |            CRYPTO_w_lock(CRYPTO_LOCK_COMP);
  387|       |            if (zlib_stateful_ex_idx == -1)
  388|       |                zlib_stateful_ex_idx =
  389|       |                    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_COMP,
  390|       |                                            0, NULL, NULL, NULL, NULL);
  391|       |            CRYPTO_w_unlock(CRYPTO_LOCK_COMP);
  392|       |            if (zlib_stateful_ex_idx == -1)
  393|       |                goto err;
  394|       |        }
  395|       |
  396|       |        meth = &zlib_stateful_method;
  397|       |    }
  398|       | err:
  399|       |#endif
  400|       |
  401|      1|    return (meth);
  402|      1|}

ERR_load_COMP_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, COMP_str_functs);
   95|      1|        ERR_load_strings(0, COMP_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

_CONF_free_data:
  223|      1|{
  224|      1|    if (conf == NULL || conf->data == NULL)
  225|      1|        return;
  226|       |
  227|      0|    lh_CONF_VALUE_down_load(conf->data) = 0; /* evil thing to make * sure the
  228|       |                                              * 'OPENSSL_free()' works as *
  229|       |                                              * expected */
  230|      0|    lh_CONF_VALUE_doall_arg(conf->data,
  231|      0|                            LHASH_DOALL_ARG_FN(value_free_hash),
  232|      0|                            LHASH_OF(CONF_VALUE), conf->data);
  233|       |
  234|       |    /*
  235|       |     * We now have only 'section' entries in the hash table. Due to problems
  236|       |     * with
  237|       |     */
  238|       |
  239|      0|    lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
  240|      0|    lh_CONF_VALUE_free(conf->data);
  241|      0|}

NCONF_default:
  126|      1|{
  127|      1|    return &default_method;
  128|      1|}
conf_def.c:def_create:
  136|      1|{
  137|      1|    CONF *ret;
  138|       |
  139|      1|    ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
  140|      1|    if (ret)
  141|      1|        if (meth->init(ret) == 0) {
  142|      0|            OPENSSL_free(ret);
  143|      0|            ret = NULL;
  144|      0|        }
  145|      1|    return ret;
  146|      1|}
conf_def.c:def_init_default:
  149|      1|{
  150|      1|    if (conf == NULL)
  151|      0|        return 0;
  152|       |
  153|      1|    conf->meth = &default_method;
  154|      1|    conf->meth_data = CONF_type_default;
  155|      1|    conf->data = NULL;
  156|       |
  157|      1|    return 1;
  158|      1|}
conf_def.c:def_destroy:
  173|      1|{
  174|      1|    if (def_destroy_data(conf)) {
  175|      1|        OPENSSL_free(conf);
  176|      1|        return 1;
  177|      1|    }
  178|      0|    return 0;
  179|      1|}
conf_def.c:def_destroy_data:
  182|      1|{
  183|      1|    if (conf == NULL)
  184|      0|        return 0;
  185|      1|    _CONF_free_data(conf);
  186|      1|    return 1;
  187|      1|}
conf_def.c:def_load:
  190|      1|{
  191|      1|    int ret;
  192|      1|    BIO *in = NULL;
  193|       |
  194|       |#ifdef OPENSSL_SYS_VMS
  195|       |    in = BIO_new_file(name, "r");
  196|       |#else
  197|      1|    in = BIO_new_file(name, "rb");
  198|      1|#endif
  199|      1|    if (in == NULL) {
  200|      1|        if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
  201|      1|            CONFerr(CONF_F_DEF_LOAD, CONF_R_NO_SUCH_FILE);
  202|      0|        else
  203|      1|            CONFerr(CONF_F_DEF_LOAD, ERR_R_SYS_LIB);
  204|      1|        return 0;
  205|      1|    }
  206|       |
  207|      0|    ret = def_load_bio(conf, in, line);
  208|      0|    BIO_free(in);
  209|       |
  210|      0|    return ret;
  211|      1|}

ERR_load_CONF_strings:
  127|      1|{
  128|      1|#ifndef OPENSSL_NO_ERR
  129|       |
  130|      1|    if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
  131|      1|        ERR_load_strings(0, CONF_str_functs);
  132|      1|        ERR_load_strings(0, CONF_str_reasons);
  133|      1|    }
  134|      1|#endif
  135|      1|}

NCONF_new:
  229|      1|{
  230|      1|    CONF *ret;
  231|       |
  232|      1|    if (meth == NULL)
  233|      1|        meth = NCONF_default();
  234|       |
  235|      1|    ret = meth->create(meth);
  236|      1|    if (ret == NULL) {
  237|      0|        CONFerr(CONF_F_NCONF_NEW, ERR_R_MALLOC_FAILURE);
  238|      0|        return (NULL);
  239|      0|    }
  240|       |
  241|      1|    return ret;
  242|      1|}
NCONF_free:
  245|      1|{
  246|      1|    if (conf == NULL)
  247|      0|        return;
  248|      1|    conf->meth->destroy(conf);
  249|      1|}
NCONF_load:
  259|      1|{
  260|      1|    if (conf == NULL) {
  261|      0|        CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
  262|      0|        return 0;
  263|      0|    }
  264|       |
  265|      1|    return conf->meth->load(conf, file, eline);
  266|      1|}

OPENSSL_load_builtin_modules:
   74|      1|{
   75|       |    /* Add builtin modules here */
   76|      1|    ASN1_add_oid_module();
   77|      1|#ifndef OPENSSL_NO_ENGINE
   78|      1|    ENGINE_add_conf_module();
   79|      1|#endif
   80|      1|    EVP_add_alg_module();
   81|      1|}

CONF_modules_load_file:
  164|      1|{
  165|      1|    char *file = NULL;
  166|      1|    CONF *conf = NULL;
  167|      1|    int ret = 0;
  168|      1|    conf = NCONF_new(NULL);
  169|      1|    if (!conf)
  170|      0|        goto err;
  171|       |
  172|      1|    if (filename == NULL) {
  173|      1|        file = CONF_get1_default_config_file();
  174|      1|        if (!file)
  175|      0|            goto err;
  176|      1|    } else
  177|      0|        file = (char *)filename;
  178|       |
  179|      1|    if (NCONF_load(conf, file, NULL) <= 0) {
  180|      1|        if ((flags & CONF_MFLAGS_IGNORE_MISSING_FILE) &&
  181|      1|            (ERR_GET_REASON(ERR_peek_last_error()) == CONF_R_NO_SUCH_FILE)) {
  182|      1|            ERR_clear_error();
  183|      1|            ret = 1;
  184|      1|        }
  185|      1|        goto err;
  186|      1|    }
  187|       |
  188|      0|    ret = CONF_modules_load(conf, appname, flags);
  189|       |
  190|      1| err:
  191|      1|    if (filename == NULL)
  192|      1|        OPENSSL_free(file);
  193|      1|    NCONF_free(conf);
  194|       |
  195|      1|    return ret;
  196|      0|}
CONF_module_add:
  466|      3|{
  467|      3|    if (module_add(NULL, name, ifunc, ffunc))
  468|      3|        return 1;
  469|      0|    else
  470|      0|        return 0;
  471|      3|}
CONF_get1_default_config_file:
  529|      1|{
  530|      1|    char *file;
  531|      1|    int len;
  532|       |
  533|      1|    file = getenv("OPENSSL_CONF");
  534|      1|    if (file)
  535|      0|        return BUF_strdup(file);
  536|       |
  537|      1|    len = strlen(X509_get_default_cert_area());
  538|      1|#ifndef OPENSSL_SYS_VMS
  539|      1|    len++;
  540|      1|#endif
  541|      1|    len += strlen(OPENSSL_CONF);
  542|       |
  543|      1|    file = OPENSSL_malloc(len + 1);
  544|       |
  545|      1|    if (!file)
  546|      0|        return NULL;
  547|      1|    BUF_strlcpy(file, X509_get_default_cert_area(), len + 1);
  548|      1|#ifndef OPENSSL_SYS_VMS
  549|      1|    BUF_strlcat(file, "/", len + 1);
  550|      1|#endif
  551|      1|    BUF_strlcat(file, OPENSSL_CONF, len + 1);
  552|       |
  553|      1|    return file;
  554|      1|}
conf_mod.c:module_add:
  279|      3|{
  280|      3|    CONF_MODULE *tmod = NULL;
  281|      3|    if (supported_modules == NULL)
  282|      1|        supported_modules = sk_CONF_MODULE_new_null();
  283|      3|    if (supported_modules == NULL)
  284|      0|        return NULL;
  285|      3|    tmod = OPENSSL_malloc(sizeof(CONF_MODULE));
  286|      3|    if (tmod == NULL)
  287|      0|        return NULL;
  288|       |
  289|      3|    tmod->dso = dso;
  290|      3|    tmod->name = BUF_strdup(name);
  291|      3|    if (tmod->name == NULL) {
  292|      0|        OPENSSL_free(tmod);
  293|      0|        return NULL;
  294|      0|    }
  295|      3|    tmod->init = ifunc;
  296|      3|    tmod->finish = ffunc;
  297|      3|    tmod->links = 0;
  298|       |
  299|      3|    if (!sk_CONF_MODULE_push(supported_modules, tmod)) {
  300|      0|        OPENSSL_free(tmod);
  301|      0|        return NULL;
  302|      0|    }
  303|       |
  304|      3|    return tmod;
  305|      3|}

ERR_load_CRYPTO_strings:
   96|      1|{
   97|      1|#ifndef OPENSSL_NO_ERR
   98|       |
   99|      1|    if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
  100|      1|        ERR_load_strings(0, CRYPTO_str_functs);
  101|      1|        ERR_load_strings(0, CRYPTO_str_reasons);
  102|      1|    }
  103|      1|#endif
  104|      1|}

CRYPTO_THREADID_set_pointer:
  436|  6.15k|{
  437|  6.15k|    unsigned char *dest = (void *)&id->val;
  438|  6.15k|    unsigned int accum = 0;
  439|  6.15k|    unsigned char dnum = sizeof(id->val);
  440|       |
  441|  6.15k|    memset(id, 0, sizeof(*id));
  442|  6.15k|    id->ptr = ptr;
  443|  6.15k|    if (sizeof(id->val) >= sizeof(id->ptr)) {
  444|       |        /*
  445|       |         * 'ptr' can be embedded in 'val' without loss of uniqueness
  446|       |         */
  447|  6.15k|        id->val = (unsigned long)id->ptr;
  448|  6.15k|        return;
  449|  6.15k|    }
  450|       |    /*
  451|       |     * hash ptr ==> val. Each byte of 'val' gets the mod-256 total of a
  452|       |     * linear function over the bytes in 'ptr', the co-efficients of which
  453|       |     * are a sequence of low-primes (hash_coeffs is an 8-element cycle) - the
  454|       |     * starting prime for the sequence varies for each byte of 'val' (unique
  455|       |     * polynomials unless pointers are >64-bit). For added spice, the totals
  456|       |     * accumulate rather than restarting from zero, and the index of the
  457|       |     * 'val' byte is added each time (position dependence). If I was a
  458|       |     * black-belt, I'd scan big-endian pointers in reverse to give low-order
  459|       |     * bits more play, but this isn't crypto and I'd prefer nobody mistake it
  460|       |     * as such. Plus I'm lazy.
  461|       |     */
  462|      0|    while (dnum--) {
  463|      0|        const unsigned char *src = (void *)&id->ptr;
  464|      0|        unsigned char snum = sizeof(id->ptr);
  465|      0|        while (snum--)
  466|      0|            accum += *(src++) * hash_coeffs[(snum + dnum) & 7];
  467|      0|        accum += dnum;
  468|      0|        *(dest++) = accum & 255;
  469|      0|    }
  470|      0|}
CRYPTO_THREADID_current:
  492|  6.15k|{
  493|  6.15k|    if (threadid_callback) {
  494|      0|        threadid_callback(id);
  495|      0|        return;
  496|      0|    }
  497|  6.15k|#ifndef OPENSSL_NO_DEPRECATED
  498|       |    /* If the deprecated callback was set, fall back to that */
  499|  6.15k|    if (id_callback) {
  500|      0|        CRYPTO_THREADID_set_numeric(id, id_callback());
  501|      0|        return;
  502|      0|    }
  503|  6.15k|#endif
  504|       |    /* Else pick a backup */
  505|       |#ifdef OPENSSL_SYS_WIN16
  506|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentTask());
  507|       |#elif defined(OPENSSL_SYS_WIN32)
  508|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentThreadId());
  509|       |#elif defined(OPENSSL_SYS_BEOS)
  510|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)find_thread(NULL));
  511|       |#else
  512|       |    /* For everything else, default to using the address of 'errno' */
  513|  6.15k|    CRYPTO_THREADID_set_pointer(id, (void *)&errno);
  514|  6.15k|#endif
  515|  6.15k|}
CRYPTO_THREADID_cmp:
  518|  3.98k|{
  519|  3.98k|    return memcmp(a, b, sizeof(*a));
  520|  3.98k|}
CRYPTO_THREADID_cpy:
  523|  4.74k|{
  524|  4.74k|    memcpy(dest, src, sizeof(*src));
  525|  4.74k|}
CRYPTO_THREADID_hash:
  528|  4.43k|{
  529|  4.43k|    return id->val;
  530|  4.43k|}
CRYPTO_lock:
  565|   117k|{
  566|       |#ifdef LOCK_DEBUG
  567|       |    {
  568|       |        CRYPTO_THREADID id;
  569|       |        char *rw_text, *operation_text;
  570|       |
  571|       |        if (mode & CRYPTO_LOCK)
  572|       |            operation_text = "lock  ";
  573|       |        else if (mode & CRYPTO_UNLOCK)
  574|       |            operation_text = "unlock";
  575|       |        else
  576|       |            operation_text = "ERROR ";
  577|       |
  578|       |        if (mode & CRYPTO_READ)
  579|       |            rw_text = "r";
  580|       |        else if (mode & CRYPTO_WRITE)
  581|       |            rw_text = "w";
  582|       |        else
  583|       |            rw_text = "ERROR";
  584|       |
  585|       |        CRYPTO_THREADID_current(&id);
  586|       |        fprintf(stderr, "lock:%08lx:(%s)%s %-18s %s:%d\n",
  587|       |                CRYPTO_THREADID_hash(&id), rw_text, operation_text,
  588|       |                CRYPTO_get_lock_name(type), file, line);
  589|       |    }
  590|       |#endif
  591|   117k|    if (type < 0) {
  592|      0|        if (dynlock_lock_callback != NULL) {
  593|      0|            struct CRYPTO_dynlock_value *pointer
  594|      0|                = CRYPTO_get_dynlock_value(type);
  595|       |
  596|      0|            OPENSSL_assert(pointer != NULL);
  597|       |
  598|      0|            dynlock_lock_callback(mode, pointer, file, line);
  599|       |
  600|      0|            CRYPTO_destroy_dynlockid(type);
  601|      0|        }
  602|   117k|    } else if (locking_callback != NULL)
  603|      0|        locking_callback(mode, type, file, line);
  604|   117k|}
CRYPTO_add_lock:
  608|  4.45k|{
  609|  4.45k|    int ret = 0;
  610|       |
  611|  4.45k|    if (add_lock_callback != NULL) {
  612|       |#ifdef LOCK_DEBUG
  613|       |        int before = *pointer;
  614|       |#endif
  615|       |
  616|      0|        ret = add_lock_callback(pointer, amount, type, file, line);
  617|       |#ifdef LOCK_DEBUG
  618|       |        {
  619|       |            CRYPTO_THREADID id;
  620|       |            CRYPTO_THREADID_current(&id);
  621|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  622|       |                    CRYPTO_THREADID_hash(&id), before, amount, ret,
  623|       |                    CRYPTO_get_lock_name(type), file, line);
  624|       |        }
  625|       |#endif
  626|  4.45k|    } else {
  627|  4.45k|        CRYPTO_lock(CRYPTO_LOCK | CRYPTO_WRITE, type, file, line);
  628|       |
  629|  4.45k|        ret = *pointer + amount;
  630|       |#ifdef LOCK_DEBUG
  631|       |        {
  632|       |            CRYPTO_THREADID id;
  633|       |            CRYPTO_THREADID_current(&id);
  634|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  635|       |                    CRYPTO_THREADID_hash(&id),
  636|       |                    *pointer, amount, ret,
  637|       |                    CRYPTO_get_lock_name(type), file, line);
  638|       |        }
  639|       |#endif
  640|  4.45k|        *pointer = ret;
  641|  4.45k|        CRYPTO_lock(CRYPTO_UNLOCK | CRYPTO_WRITE, type, file, line);
  642|  4.45k|    }
  643|  4.45k|    return (ret);
  644|  4.45k|}
OPENSSL_cpuid_setup:
  687|      4|{
  688|      4|    static int trigger = 0;
  689|      4|    IA32CAP OPENSSL_ia32_cpuid(unsigned int *);
  690|      4|    IA32CAP vec;
  691|      4|    char *env;
  692|       |
  693|      4|    if (trigger)
  694|      2|        return;
  695|       |
  696|      2|    trigger = 1;
  697|      2|    if ((env = getenv("OPENSSL_ia32cap"))) {
  698|      0|        int off = (env[0] == '~') ? 1 : 0;
  699|       |#  if defined(_WIN32)
  700|       |        if (!sscanf(env + off, "%I64i", &vec))
  701|       |            vec = strtoul(env + off, NULL, 0);
  702|       |#  else
  703|      0|        if (!sscanf(env + off, "%lli", (long long *)&vec))
  704|      0|            vec = strtoul(env + off, NULL, 0);
  705|      0|#  endif
  706|      0|        if (off)
  707|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~vec;
  708|      0|        else if (env[0] == ':')
  709|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  710|       |
  711|      0|        OPENSSL_ia32cap_P[2] = 0;
  712|      0|        if ((env = strchr(env, ':'))) {
  713|      0|            unsigned int vecx;
  714|      0|            env++;
  715|      0|            off = (env[0] == '~') ? 1 : 0;
  716|      0|            vecx = strtoul(env + off, NULL, 0);
  717|      0|            if (off)
  718|      0|                OPENSSL_ia32cap_P[2] &= ~vecx;
  719|      0|            else
  720|      0|                OPENSSL_ia32cap_P[2] = vecx;
  721|      0|        }
  722|      0|    } else
  723|      2|        vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  724|       |
  725|       |    /*
  726|       |     * |(1<<10) sets a reserved bit to signal that variable
  727|       |     * was initialized already... This is to avoid interference
  728|       |     * with cpuid snippets in ELF .init segment.
  729|       |     */
  730|      2|    OPENSSL_ia32cap_P[0] = (unsigned int)vec | (1 << 10);
  731|      2|    OPENSSL_ia32cap_P[1] = (unsigned int)(vec >> 32);
  732|      2|}

ERR_load_DH_strings:
  118|      1|{
  119|      1|#ifndef OPENSSL_NO_ERR
  120|       |
  121|      1|    if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
  122|      1|        ERR_load_strings(0, DH_str_functs);
  123|      1|        ERR_load_strings(0, DH_str_reasons);
  124|      1|    }
  125|      1|#endif
  126|      1|}

DH_OpenSSL:
  124|      7|{
  125|      7|    return &dh_ossl;
  126|      7|}

ERR_load_DSA_strings:
  125|      1|{
  126|      1|#ifndef OPENSSL_NO_ERR
  127|       |
  128|      1|    if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
  129|      1|        ERR_load_strings(0, DSA_str_functs);
  130|      1|        ERR_load_strings(0, DSA_str_reasons);
  131|      1|    }
  132|      1|#endif
  133|      1|}

DSA_get_default_method:
   87|      1|{
   88|      1|    if (!default_DSA_method) {
   89|       |#ifdef OPENSSL_FIPS
   90|       |        if (FIPS_mode())
   91|       |            return FIPS_dsa_openssl();
   92|       |        else
   93|       |            return DSA_OpenSSL();
   94|       |#else
   95|      1|        default_DSA_method = DSA_OpenSSL();
   96|      1|#endif
   97|      1|    }
   98|      1|    return default_DSA_method;
   99|      1|}

DSA_OpenSSL:
  129|      5|{
  130|      5|    return &openssl_dsa_meth;
  131|      5|}

DSO_METHOD_dlfcn:
  135|      1|{
  136|      1|    return (&dso_meth_dlfcn);
  137|      1|}
dso_dlfcn.c:dlfcn_load:
  171|      4|{
  172|      4|    void *ptr = NULL;
  173|       |    /* See applicable comments in dso_dl.c */
  174|      4|    char *filename = DSO_convert_filename(dso, NULL);
  175|      4|    int flags = DLOPEN_FLAG;
  176|       |
  177|      4|    if (filename == NULL) {
  178|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);
  179|      0|        goto err;
  180|      0|    }
  181|      4|# ifdef RTLD_GLOBAL
  182|      4|    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)
  183|      0|        flags |= RTLD_GLOBAL;
  184|      4|# endif
  185|      4|    ptr = dlopen(filename, flags);
  186|      4|    if (ptr == NULL) {
  187|      4|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);
  188|      4|        ERR_add_error_data(4, "filename(", filename, "): ", dlerror());
  189|      4|        goto err;
  190|      4|    }
  191|      0|    if (!sk_void_push(dso->meth_data, (char *)ptr)) {
  192|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);
  193|      0|        goto err;
  194|      0|    }
  195|       |    /* Success */
  196|      0|    dso->loaded_filename = filename;
  197|      0|    return (1);
  198|      4| err:
  199|       |    /* Cleanup! */
  200|      4|    if (filename != NULL)
  201|      4|        OPENSSL_free(filename);
  202|      4|    if (ptr != NULL)
  203|      0|        dlclose(ptr);
  204|      4|    return (0);
  205|      0|}
dso_dlfcn.c:dlfcn_unload:
  208|      4|{
  209|      4|    void *ptr;
  210|      4|    if (dso == NULL) {
  211|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);
  212|      0|        return (0);
  213|      0|    }
  214|      4|    if (sk_void_num(dso->meth_data) < 1)
  215|      4|        return (1);
  216|      0|    ptr = sk_void_pop(dso->meth_data);
  217|      0|    if (ptr == NULL) {
  218|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);
  219|       |        /*
  220|       |         * Should push the value back onto the stack in case of a retry.
  221|       |         */
  222|      0|        sk_void_push(dso->meth_data, ptr);
  223|      0|        return (0);
  224|      0|    }
  225|       |    /* For now I'm not aware of any errors associated with dlclose() */
  226|      0|    dlclose(ptr);
  227|      0|    return (1);
  228|      0|}
dso_dlfcn.c:dlfcn_name_converter:
  355|      4|{
  356|      4|    char *translated;
  357|      4|    int len, rsize, transform;
  358|       |
  359|      4|    len = strlen(filename);
  360|      4|    rsize = len + 1;
  361|      4|    transform = (strstr(filename, "/") == NULL);
  362|      4|    if (transform) {
  363|       |        /* We will convert this to "%s.so" or "lib%s.so" etc */
  364|      4|        rsize += DSO_extlen;    /* The length of ".so" */
  365|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  366|      4|            rsize += 3;         /* The length of "lib" */
  367|      4|    }
  368|      4|    translated = OPENSSL_malloc(rsize);
  369|      4|    if (translated == NULL) {
  370|      0|        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);
  371|      0|        return (NULL);
  372|      0|    }
  373|      4|    if (transform) {
  374|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  375|      4|            sprintf(translated, "lib%s" DSO_ext, filename);
  376|      0|        else
  377|      0|            sprintf(translated, "%s" DSO_ext, filename);
  378|      4|    } else
  379|      0|        sprintf(translated, "%s", filename);
  380|      4|    return (translated);
  381|      4|}

ERR_load_DSO_strings:
  150|      1|{
  151|      1|#ifndef OPENSSL_NO_ERR
  152|       |
  153|      1|    if (ERR_func_error_string(DSO_str_functs[0].error) == NULL) {
  154|      1|        ERR_load_strings(0, DSO_str_functs);
  155|      1|        ERR_load_strings(0, DSO_str_reasons);
  156|      1|    }
  157|      1|#endif
  158|      1|}

DSO_new_method:
   96|      4|{
   97|      4|    DSO *ret;
   98|       |
   99|      4|    if (default_DSO_meth == NULL)
  100|       |        /*
  101|       |         * We default to DSO_METH_openssl() which in turn defaults to
  102|       |         * stealing the "best available" method. Will fallback to
  103|       |         * DSO_METH_null() in the worst case.
  104|       |         */
  105|      1|        default_DSO_meth = DSO_METHOD_openssl();
  106|      4|    ret = (DSO *)OPENSSL_malloc(sizeof(DSO));
  107|      4|    if (ret == NULL) {
  108|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  109|      0|        return (NULL);
  110|      0|    }
  111|      4|    memset(ret, 0, sizeof(DSO));
  112|      4|    ret->meth_data = sk_void_new_null();
  113|      4|    if (ret->meth_data == NULL) {
  114|       |        /* sk_new doesn't generate any errors so we do */
  115|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  116|      0|        OPENSSL_free(ret);
  117|      0|        return (NULL);
  118|      0|    }
  119|      4|    if (meth == NULL)
  120|      4|        ret->meth = default_DSO_meth;
  121|      0|    else
  122|      0|        ret->meth = meth;
  123|      4|    ret->references = 1;
  124|      4|    if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {
  125|      0|        sk_void_free(ret->meth_data);
  126|      0|        OPENSSL_free(ret);
  127|      0|        ret = NULL;
  128|      0|    }
  129|      4|    return (ret);
  130|      4|}
DSO_free:
  133|      4|{
  134|      4|    int i;
  135|       |
  136|      4|    if (dso == NULL) {
  137|      0|        DSOerr(DSO_F_DSO_FREE, ERR_R_PASSED_NULL_PARAMETER);
  138|      0|        return (0);
  139|      0|    }
  140|       |
  141|      4|    i = CRYPTO_add(&dso->references, -1, CRYPTO_LOCK_DSO);
  142|       |#ifdef REF_PRINT
  143|       |    REF_PRINT("DSO", dso);
  144|       |#endif
  145|      4|    if (i > 0)
  146|      0|        return (1);
  147|       |#ifdef REF_CHECK
  148|       |    if (i < 0) {
  149|       |        fprintf(stderr, "DSO_free, bad reference count\n");
  150|       |        abort();
  151|       |    }
  152|       |#endif
  153|       |
  154|      4|    if ((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso)) {
  155|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_UNLOAD_FAILED);
  156|      0|        return (0);
  157|      0|    }
  158|       |
  159|      4|    if ((dso->meth->finish != NULL) && !dso->meth->finish(dso)) {
  160|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_FINISH_FAILED);
  161|      0|        return (0);
  162|      0|    }
  163|       |
  164|      4|    sk_void_free(dso->meth_data);
  165|      4|    if (dso->filename != NULL)
  166|      4|        OPENSSL_free(dso->filename);
  167|      4|    if (dso->loaded_filename != NULL)
  168|      0|        OPENSSL_free(dso->loaded_filename);
  169|       |
  170|      4|    OPENSSL_free(dso);
  171|      4|    return (1);
  172|      4|}
DSO_flags:
  175|      8|{
  176|      8|    return ((dso == NULL) ? 0 : dso->flags);
  177|      8|}
DSO_load:
  191|      4|{
  192|      4|    DSO *ret;
  193|      4|    int allocated = 0;
  194|       |
  195|      4|    if (dso == NULL) {
  196|      4|        ret = DSO_new_method(meth);
  197|      4|        if (ret == NULL) {
  198|      0|            DSOerr(DSO_F_DSO_LOAD, ERR_R_MALLOC_FAILURE);
  199|      0|            goto err;
  200|      0|        }
  201|      4|        allocated = 1;
  202|       |        /* Pass the provided flags to the new DSO object */
  203|      4|        if (DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0) {
  204|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_CTRL_FAILED);
  205|      0|            goto err;
  206|      0|        }
  207|      4|    } else
  208|      0|        ret = dso;
  209|       |    /* Don't load if we're currently already loaded */
  210|      4|    if (ret->filename != NULL) {
  211|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_DSO_ALREADY_LOADED);
  212|      0|        goto err;
  213|      0|    }
  214|       |    /*
  215|       |     * filename can only be NULL if we were passed a dso that already has one
  216|       |     * set.
  217|       |     */
  218|      4|    if (filename != NULL)
  219|      4|        if (!DSO_set_filename(ret, filename)) {
  220|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_SET_FILENAME_FAILED);
  221|      0|            goto err;
  222|      0|        }
  223|      4|    filename = ret->filename;
  224|      4|    if (filename == NULL) {
  225|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_NO_FILENAME);
  226|      0|        goto err;
  227|      0|    }
  228|      4|    if (ret->meth->dso_load == NULL) {
  229|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_UNSUPPORTED);
  230|      0|        goto err;
  231|      0|    }
  232|      4|    if (!ret->meth->dso_load(ret)) {
  233|      4|        DSOerr(DSO_F_DSO_LOAD, DSO_R_LOAD_FAILED);
  234|      4|        goto err;
  235|      4|    }
  236|       |    /* Load succeeded */
  237|      0|    return (ret);
  238|      4| err:
  239|      4|    if (allocated)
  240|      4|        DSO_free(ret);
  241|      4|    return (NULL);
  242|      4|}
DSO_ctrl:
  294|      4|{
  295|      4|    if (dso == NULL) {
  296|      0|        DSOerr(DSO_F_DSO_CTRL, ERR_R_PASSED_NULL_PARAMETER);
  297|      0|        return (-1);
  298|      0|    }
  299|       |    /*
  300|       |     * We should intercept certain generic commands and only pass control to
  301|       |     * the method-specific ctrl() function if it's something we don't handle.
  302|       |     */
  303|      4|    switch (cmd) {
  304|      0|    case DSO_CTRL_GET_FLAGS:
  305|      0|        return dso->flags;
  306|      4|    case DSO_CTRL_SET_FLAGS:
  307|      4|        dso->flags = (int)larg;
  308|      4|        return (0);
  309|      0|    case DSO_CTRL_OR_FLAGS:
  310|      0|        dso->flags |= (int)larg;
  311|      0|        return (0);
  312|      0|    default:
  313|      0|        break;
  314|      4|    }
  315|      0|    if ((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL)) {
  316|      0|        DSOerr(DSO_F_DSO_CTRL, DSO_R_UNSUPPORTED);
  317|      0|        return (-1);
  318|      0|    }
  319|      0|    return (dso->meth->dso_ctrl(dso, cmd, larg, parg));
  320|      0|}
DSO_set_filename:
  345|      4|{
  346|      4|    char *copied;
  347|       |
  348|      4|    if ((dso == NULL) || (filename == NULL)) {
  349|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  350|      0|        return (0);
  351|      0|    }
  352|      4|    if (dso->loaded_filename) {
  353|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, DSO_R_DSO_ALREADY_LOADED);
  354|      0|        return (0);
  355|      0|    }
  356|       |    /* We'll duplicate filename */
  357|      4|    copied = OPENSSL_malloc(strlen(filename) + 1);
  358|      4|    if (copied == NULL) {
  359|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_MALLOC_FAILURE);
  360|      0|        return (0);
  361|      0|    }
  362|      4|    BUF_strlcpy(copied, filename, strlen(filename) + 1);
  363|      4|    if (dso->filename)
  364|      0|        OPENSSL_free(dso->filename);
  365|      4|    dso->filename = copied;
  366|      4|    return (1);
  367|      4|}
DSO_convert_filename:
  387|      4|{
  388|      4|    char *result = NULL;
  389|       |
  390|      4|    if (dso == NULL) {
  391|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  392|      0|        return (NULL);
  393|      0|    }
  394|      4|    if (filename == NULL)
  395|      4|        filename = dso->filename;
  396|      4|    if (filename == NULL) {
  397|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, DSO_R_NO_FILENAME);
  398|      0|        return (NULL);
  399|      0|    }
  400|      4|    if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
  401|      4|        if (dso->name_converter != NULL)
  402|      0|            result = dso->name_converter(dso, filename);
  403|      4|        else if (dso->meth->dso_name_converter != NULL)
  404|      4|            result = dso->meth->dso_name_converter(dso, filename);
  405|      4|    }
  406|      4|    if (result == NULL) {
  407|      0|        result = OPENSSL_malloc(strlen(filename) + 1);
  408|      0|        if (result == NULL) {
  409|      0|            DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_MALLOC_FAILURE);
  410|      0|            return (NULL);
  411|      0|        }
  412|      0|        BUF_strlcpy(result, filename, strlen(filename) + 1);
  413|      0|    }
  414|      4|    return (result);
  415|      4|}

DSO_METHOD_openssl:
   67|      1|{
   68|       |#ifdef DEF_DSO_METHOD
   69|       |    return (DEF_DSO_METHOD());
   70|       |#elif defined(DSO_DLFCN)
   71|      1|    return (DSO_METHOD_dlfcn());
   72|       |#elif defined(DSO_DL)
   73|       |    return (DSO_METHOD_dl());
   74|       |#elif defined(DSO_WIN32)
   75|       |    return (DSO_METHOD_win32());
   76|       |#elif defined(DSO_VMS)
   77|       |    return (DSO_METHOD_vms());
   78|       |#elif defined(DSO_BEOS)
   79|       |    return (DSO_METHOD_beos());
   80|       |#else
   81|       |    return (DSO_METHOD_null());
   82|       |#endif
   83|      1|}

ERR_load_EC_strings:
  324|      1|{
  325|      1|#ifndef OPENSSL_NO_ERR
  326|       |
  327|      1|    if (ERR_func_error_string(EC_str_functs[0].error) == NULL) {
  328|      1|        ERR_load_strings(0, EC_str_functs);
  329|      1|        ERR_load_strings(0, EC_str_reasons);
  330|      1|    }
  331|      1|#endif
  332|      1|}

ERR_load_ECDH_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(ECDH_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, ECDH_str_functs);
   95|      1|        ERR_load_strings(0, ECDH_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

ERR_load_ECDSA_strings:
   99|      1|{
  100|      1|#ifndef OPENSSL_NO_ERR
  101|       |
  102|      1|    if (ERR_func_error_string(ECDSA_str_functs[0].error) == NULL) {
  103|      1|        ERR_load_strings(0, ECDSA_str_functs);
  104|      1|        ERR_load_strings(0, ECDSA_str_reasons);
  105|      1|    }
  106|      1|#endif
  107|      1|}

eng_table.c:engine_pile_LHASH_HASH:
  105|  1.74k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  1.74k|                const o_type *a = arg; \
  107|  1.74k|                return name##_hash(a); }
eng_table.c:engine_pile_LHASH_COMP:
  114|     29|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     29|                const o_type *a = arg1;             \
  116|     29|                const o_type *b = arg2; \
  117|     29|                return name##_cmp(a,b); }

ENGINE_load_builtin_engines:
   64|      1|{
   65|       |    /* Some ENGINEs need this */
   66|      1|    OPENSSL_cpuid_setup();
   67|       |#if 0
   68|       |    /*
   69|       |     * There's no longer any need for an "openssl" ENGINE unless, one day, it
   70|       |     * is the *only* way for standard builtin implementations to be be
   71|       |     * accessed (ie. it would be possible to statically link binaries with
   72|       |     * *no* builtin implementations).
   73|       |     */
   74|       |    ENGINE_load_openssl();
   75|       |#endif
   76|       |#if !defined(OPENSSL_NO_HW) && (defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV))
   77|       |    ENGINE_load_cryptodev();
   78|       |#endif
   79|      1|#ifndef OPENSSL_NO_RDRAND
   80|      1|    ENGINE_load_rdrand();
   81|      1|#endif
   82|      1|    ENGINE_load_dynamic();
   83|      1|#ifndef OPENSSL_NO_STATIC_ENGINE
   84|      1|# ifndef OPENSSL_NO_HW
   85|      1|#  ifndef OPENSSL_NO_HW_4758_CCA
   86|      1|    ENGINE_load_4758cca();
   87|      1|#  endif
   88|      1|#  ifndef OPENSSL_NO_HW_AEP
   89|      1|    ENGINE_load_aep();
   90|      1|#  endif
   91|      1|#  ifndef OPENSSL_NO_HW_ATALLA
   92|      1|    ENGINE_load_atalla();
   93|      1|#  endif
   94|      1|#  ifndef OPENSSL_NO_HW_CSWIFT
   95|      1|    ENGINE_load_cswift();
   96|      1|#  endif
   97|      1|#  ifndef OPENSSL_NO_HW_NCIPHER
   98|      1|    ENGINE_load_chil();
   99|      1|#  endif
  100|      1|#  ifndef OPENSSL_NO_HW_NURON
  101|      1|    ENGINE_load_nuron();
  102|      1|#  endif
  103|      1|#  ifndef OPENSSL_NO_HW_SUREWARE
  104|      1|    ENGINE_load_sureware();
  105|      1|#  endif
  106|      1|#  ifndef OPENSSL_NO_HW_UBSEC
  107|      1|    ENGINE_load_ubsec();
  108|      1|#  endif
  109|      1|#  ifndef OPENSSL_NO_HW_PADLOCK
  110|      1|    ENGINE_load_padlock();
  111|      1|#  endif
  112|      1|# endif
  113|      1|# ifndef OPENSSL_NO_GOST
  114|      1|    ENGINE_load_gost();
  115|      1|# endif
  116|       |# ifndef OPENSSL_NO_GMP
  117|       |    ENGINE_load_gmp();
  118|       |# endif
  119|       |# if defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_NO_CAPIENG)
  120|       |    ENGINE_load_capi();
  121|       |# endif
  122|      1|#endif
  123|      1|    ENGINE_register_all_complete();
  124|      1|}

ENGINE_add_conf_module:
  239|      1|{
  240|      1|    CONF_module_add("engines",
  241|      1|                    int_engine_module_init, int_engine_module_finish);
  242|      1|}

ENGINE_load_dynamic:
  312|      1|{
  313|      1|    ENGINE *toadd = engine_dynamic();
  314|      1|    if (!toadd)
  315|      0|        return;
  316|      1|    ENGINE_add(toadd);
  317|       |    /*
  318|       |     * If the "add" worked, it gets a structural reference. So either way, we
  319|       |     * release our just-created reference.
  320|       |     */
  321|      1|    ENGINE_free(toadd);
  322|       |    /*
  323|       |     * If the "add" didn't work, it was probably a conflict because it was
  324|       |     * already added (eg. someone calling ENGINE_load_blah then calling
  325|       |     * ENGINE_load_builtin_engines() perhaps).
  326|       |     */
  327|      1|    ERR_clear_error();
  328|      1|}
eng_dyn.c:engine_dynamic:
  294|      1|{
  295|      1|    ENGINE *ret = ENGINE_new();
  296|      1|    if (!ret)
  297|      0|        return NULL;
  298|      1|    if (!ENGINE_set_id(ret, engine_dynamic_id) ||
  299|      1|        !ENGINE_set_name(ret, engine_dynamic_name) ||
  300|      1|        !ENGINE_set_init_function(ret, dynamic_init) ||
  301|      1|        !ENGINE_set_finish_function(ret, dynamic_finish) ||
  302|      1|        !ENGINE_set_ctrl_function(ret, dynamic_ctrl) ||
  303|      1|        !ENGINE_set_flags(ret, ENGINE_FLAGS_BY_ID_COPY) ||
  304|      1|        !ENGINE_set_cmd_defns(ret, dynamic_cmd_defns)) {
  305|      0|        ENGINE_free(ret);
  306|      0|        return NULL;
  307|      0|    }
  308|      1|    return ret;
  309|      1|}

ERR_load_ENGINE_strings:
  173|      1|{
  174|      1|#ifndef OPENSSL_NO_ERR
  175|       |
  176|      1|    if (ERR_func_error_string(ENGINE_str_functs[0].error) == NULL) {
  177|      1|        ERR_load_strings(0, ENGINE_str_functs);
  178|      1|        ERR_load_strings(0, ENGINE_str_reasons);
  179|      1|    }
  180|      1|#endif
  181|      1|}

ENGINE_register_complete:
  150|     10|{
  151|     10|    ENGINE_register_ciphers(e);
  152|     10|    ENGINE_register_digests(e);
  153|     10|#ifndef OPENSSL_NO_RSA
  154|     10|    ENGINE_register_RSA(e);
  155|     10|#endif
  156|     10|#ifndef OPENSSL_NO_DSA
  157|     10|    ENGINE_register_DSA(e);
  158|     10|#endif
  159|     10|#ifndef OPENSSL_NO_DH
  160|     10|    ENGINE_register_DH(e);
  161|     10|#endif
  162|     10|#ifndef OPENSSL_NO_ECDH
  163|     10|    ENGINE_register_ECDH(e);
  164|     10|#endif
  165|     10|#ifndef OPENSSL_NO_ECDSA
  166|     10|    ENGINE_register_ECDSA(e);
  167|     10|#endif
  168|     10|    ENGINE_register_RAND(e);
  169|     10|    ENGINE_register_pkey_meths(e);
  170|     10|    return 1;
  171|     10|}
ENGINE_register_all_complete:
  174|      1|{
  175|      1|    ENGINE *e;
  176|       |
  177|     12|    for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
  178|     11|        if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
  179|     10|            ENGINE_register_complete(e);
  180|      1|    return 1;
  181|      1|}

engine_unlocked_init:
   63|      4|{
   64|      4|    int to_return = 1;
   65|       |
   66|      4|    if ((e->funct_ref == 0) && e->init)
   67|       |        /*
   68|       |         * This is the first functional reference and the engine requires
   69|       |         * initialisation so we do it now.
   70|       |         */
   71|      4|        to_return = e->init(e);
   72|      4|    if (to_return) {
   73|       |        /*
   74|       |         * OK, we return a functional reference which is also a structural
   75|       |         * reference.
   76|       |         */
   77|      0|        e->struct_ref++;
   78|      0|        e->funct_ref++;
   79|      0|        engine_ref_debug(e, 0, 1)
   80|      0|            engine_ref_debug(e, 1, 1)
   81|      0|    }
   82|      4|    return to_return;
   83|      4|}

ENGINE_new:
   66|     11|{
   67|     11|    ENGINE *ret;
   68|       |
   69|     11|    ret = (ENGINE *)OPENSSL_malloc(sizeof(ENGINE));
   70|     11|    if (ret == NULL) {
   71|      0|        ENGINEerr(ENGINE_F_ENGINE_NEW, ERR_R_MALLOC_FAILURE);
   72|      0|        return NULL;
   73|      0|    }
   74|     11|    memset(ret, 0, sizeof(ENGINE));
   75|     11|    ret->struct_ref = 1;
   76|     11|    engine_ref_debug(ret, 0, 1)
   77|     11|        CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ENGINE, ret, &ret->ex_data);
   78|     11|    return ret;
   79|     11|}
engine_free_util:
  108|     22|{
  109|     22|    int i;
  110|       |
  111|     22|    if (e == NULL) {
  112|      0|        ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL, ERR_R_PASSED_NULL_PARAMETER);
  113|      0|        return 0;
  114|      0|    }
  115|     22|    if (locked)
  116|     22|        i = CRYPTO_add(&e->struct_ref, -1, CRYPTO_LOCK_ENGINE);
  117|      0|    else
  118|      0|        i = --e->struct_ref;
  119|     22|    engine_ref_debug(e, 0, -1)
  120|     22|        if (i > 0)
  121|     22|        return 1;
  122|       |#ifdef REF_CHECK
  123|       |    if (i < 0) {
  124|       |        fprintf(stderr, "ENGINE_free, bad structural reference count\n");
  125|       |        abort();
  126|       |    }
  127|       |#endif
  128|       |    /* Free up any dynamically allocated public key methods */
  129|      0|    engine_pkey_meths_free(e);
  130|      0|    engine_pkey_asn1_meths_free(e);
  131|       |    /*
  132|       |     * Give the ENGINE a chance to do any structural cleanup corresponding to
  133|       |     * allocation it did in its constructor (eg. unload error strings)
  134|       |     */
  135|      0|    if (e->destroy)
  136|      0|        e->destroy(e);
  137|      0|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ENGINE, e, &e->ex_data);
  138|      0|    OPENSSL_free(e);
  139|      0|    return 1;
  140|     22|}
ENGINE_free:
  143|     22|{
  144|     22|    return engine_free_util(e, 1);
  145|     22|}
engine_cleanup_add_first:
  176|      7|{
  177|      7|    ENGINE_CLEANUP_ITEM *item;
  178|      7|    if (!int_cleanup_check(1))
  179|      0|        return;
  180|      7|    item = int_cleanup_item(cb);
  181|      7|    if (item)
  182|      7|        sk_ENGINE_CLEANUP_ITEM_insert(cleanup_stack, item, 0);
  183|      7|}
engine_cleanup_add_last:
  186|      1|{
  187|      1|    ENGINE_CLEANUP_ITEM *item;
  188|      1|    if (!int_cleanup_check(1))
  189|      0|        return;
  190|      1|    item = int_cleanup_item(cb);
  191|      1|    if (item)
  192|      1|        sk_ENGINE_CLEANUP_ITEM_push(cleanup_stack, item);
  193|      1|}
ENGINE_set_id:
  242|     11|{
  243|     11|    if (id == NULL) {
  244|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_ID, ERR_R_PASSED_NULL_PARAMETER);
  245|      0|        return 0;
  246|      0|    }
  247|     11|    e->id = id;
  248|     11|    return 1;
  249|     11|}
ENGINE_set_name:
  252|     11|{
  253|     11|    if (name == NULL) {
  254|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_NAME, ERR_R_PASSED_NULL_PARAMETER);
  255|      0|        return 0;
  256|      0|    }
  257|     11|    e->name = name;
  258|     11|    return 1;
  259|     11|}
ENGINE_set_destroy_function:
  262|      9|{
  263|      9|    e->destroy = destroy_f;
  264|      9|    return 1;
  265|      9|}
ENGINE_set_init_function:
  268|     11|{
  269|     11|    e->init = init_f;
  270|     11|    return 1;
  271|     11|}
ENGINE_set_finish_function:
  274|     10|{
  275|     10|    e->finish = finish_f;
  276|     10|    return 1;
  277|     10|}
ENGINE_set_ctrl_function:
  280|     10|{
  281|     10|    e->ctrl = ctrl_f;
  282|     10|    return 1;
  283|     10|}
ENGINE_set_flags:
  286|      2|{
  287|      2|    e->flags = flags;
  288|      2|    return 1;
  289|      2|}
ENGINE_set_cmd_defns:
  292|      9|{
  293|      9|    e->cmd_defns = defns;
  294|      9|    return 1;
  295|      9|}
eng_lib.c:int_cleanup_check:
  157|      8|{
  158|      8|    if (cleanup_stack)
  159|      7|        return 1;
  160|      1|    if (!create)
  161|      0|        return 0;
  162|      1|    cleanup_stack = sk_ENGINE_CLEANUP_ITEM_new_null();
  163|      1|    return (cleanup_stack ? 1 : 0);
  164|      1|}
eng_lib.c:int_cleanup_item:
  167|      8|{
  168|      8|    ENGINE_CLEANUP_ITEM *item = OPENSSL_malloc(sizeof(ENGINE_CLEANUP_ITEM));
  169|      8|    if (!item)
  170|      0|        return NULL;
  171|      8|    item->cb = cb;
  172|      8|    return item;
  173|      8|}

ENGINE_get_first:
  185|      1|{
  186|      1|    ENGINE *ret;
  187|       |
  188|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  189|      1|    ret = engine_list_head;
  190|      1|    if (ret) {
  191|      1|        ret->struct_ref++;
  192|      1|        engine_ref_debug(ret, 0, 1)
  193|      1|    }
  194|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  195|      1|    return ret;
  196|      1|}
ENGINE_get_next:
  214|     11|{
  215|     11|    ENGINE *ret = NULL;
  216|     11|    if (e == NULL) {
  217|      0|        ENGINEerr(ENGINE_F_ENGINE_GET_NEXT, ERR_R_PASSED_NULL_PARAMETER);
  218|      0|        return 0;
  219|      0|    }
  220|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  221|     11|    ret = e->next;
  222|     11|    if (ret) {
  223|       |        /* Return a valid structural refernce to the next ENGINE */
  224|     10|        ret->struct_ref++;
  225|     10|        engine_ref_debug(ret, 0, 1)
  226|     10|    }
  227|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  228|       |    /* Release the structural reference to the previous ENGINE */
  229|     11|    ENGINE_free(e);
  230|     11|    return ret;
  231|     11|}
ENGINE_add:
  255|     11|{
  256|     11|    int to_return = 1;
  257|     11|    if (e == NULL) {
  258|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ERR_R_PASSED_NULL_PARAMETER);
  259|      0|        return 0;
  260|      0|    }
  261|     11|    if ((e->id == NULL) || (e->name == NULL)) {
  262|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_ID_OR_NAME_MISSING);
  263|      0|        return 0;
  264|      0|    }
  265|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  266|     11|    if (!engine_list_add(e)) {
  267|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  268|      0|        to_return = 0;
  269|      0|    }
  270|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  271|     11|    return to_return;
  272|     11|}
eng_list.c:engine_list_add:
  103|     11|{
  104|     11|    int conflict = 0;
  105|     11|    ENGINE *iterator = NULL;
  106|       |
  107|     11|    if (e == NULL) {
  108|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ERR_R_PASSED_NULL_PARAMETER);
  109|      0|        return 0;
  110|      0|    }
  111|     11|    iterator = engine_list_head;
  112|     66|    while (iterator && !conflict) {
  113|     55|        conflict = (strcmp(iterator->id, e->id) == 0);
  114|     55|        iterator = iterator->next;
  115|     55|    }
  116|     11|    if (conflict) {
  117|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_CONFLICTING_ENGINE_ID);
  118|      0|        return 0;
  119|      0|    }
  120|     11|    if (engine_list_head == NULL) {
  121|       |        /* We are adding to an empty list. */
  122|      1|        if (engine_list_tail) {
  123|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  124|      0|            return 0;
  125|      0|        }
  126|      1|        engine_list_head = e;
  127|      1|        e->prev = NULL;
  128|       |        /*
  129|       |         * The first time the list allocates, we should register the cleanup.
  130|       |         */
  131|      1|        engine_cleanup_add_last(engine_list_cleanup);
  132|     10|    } else {
  133|       |        /* We are adding to the tail of an existing list. */
  134|     10|        if ((engine_list_tail == NULL) || (engine_list_tail->next != NULL)) {
  135|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  136|      0|            return 0;
  137|      0|        }
  138|     10|        engine_list_tail->next = e;
  139|     10|        e->prev = engine_list_tail;
  140|     10|    }
  141|       |    /*
  142|       |     * Having the engine in the list assumes a structural reference.
  143|       |     */
  144|     11|    e->struct_ref++;
  145|     11|    engine_ref_debug(e, 0, 1)
  146|       |        /* However it came to be, e is the last item in the list. */
  147|     11|        engine_list_tail = e;
  148|     11|    e->next = NULL;
  149|     11|    return 1;
  150|     11|}

ENGINE_set_load_privkey_function:
   62|      3|{
   63|      3|    e->load_privkey = loadpriv_f;
   64|      3|    return 1;
   65|      3|}
ENGINE_set_load_pubkey_function:
   68|      3|{
   69|      3|    e->load_pubkey = loadpub_f;
   70|      3|    return 1;
   71|      3|}

ENGINE_load_rdrand:
  133|      1|{
  134|      1|    extern unsigned int OPENSSL_ia32cap_P[];
  135|       |
  136|      1|    if (OPENSSL_ia32cap_P[1] & (1 << (62 - 32))) {
  137|      1|        ENGINE *toadd = ENGINE_rdrand();
  138|      1|        if (!toadd)
  139|      0|            return;
  140|      1|        ENGINE_add(toadd);
  141|      1|        ENGINE_free(toadd);
  142|      1|        ERR_clear_error();
  143|      1|    }
  144|      1|}
eng_rdrand.c:ENGINE_rdrand:
  121|      1|{
  122|      1|    ENGINE *ret = ENGINE_new();
  123|      1|    if (!ret)
  124|      0|        return NULL;
  125|      1|    if (!bind_helper(ret)) {
  126|      0|        ENGINE_free(ret);
  127|      0|        return NULL;
  128|      0|    }
  129|      1|    return ret;
  130|      1|}
eng_rdrand.c:bind_helper:
  109|      1|{
  110|      1|    if (!ENGINE_set_id(e, engine_e_rdrand_id) ||
  111|      1|        !ENGINE_set_name(e, engine_e_rdrand_name) ||
  112|      1|        !ENGINE_set_flags(e, ENGINE_FLAGS_NO_REGISTER_ALL) ||
  113|      1|        !ENGINE_set_init_function(e, rdrand_init) ||
  114|      1|        !ENGINE_set_RAND(e, &rdrand_meth))
  115|      0|        return 0;
  116|       |
  117|      1|    return 1;
  118|      1|}

engine_table_register:
  135|     31|{
  136|     31|    int ret = 0, added = 0;
  137|     31|    ENGINE_PILE tmplate, *fnd;
  138|     31|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  139|     31|    if (!(*table))
  140|      7|        added = 1;
  141|     31|    if (!int_table_check(table, 1))
  142|      0|        goto end;
  143|     31|    if (added)
  144|       |        /* The cleanup callback needs to be added */
  145|      7|        engine_cleanup_add_first(cleanup);
  146|     70|    while (num_nids--) {
  147|     39|        tmplate.nid = *nids;
  148|     39|        fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  149|     39|        if (!fnd) {
  150|     11|            fnd = OPENSSL_malloc(sizeof(ENGINE_PILE));
  151|     11|            if (!fnd)
  152|      0|                goto end;
  153|     11|            fnd->uptodate = 1;
  154|     11|            fnd->nid = *nids;
  155|     11|            fnd->sk = sk_ENGINE_new_null();
  156|     11|            if (!fnd->sk) {
  157|      0|                OPENSSL_free(fnd);
  158|      0|                goto end;
  159|      0|            }
  160|     11|            fnd->funct = NULL;
  161|     11|            (void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
  162|     11|        }
  163|       |        /* A registration shouldn't add duplciate entries */
  164|     39|        (void)sk_ENGINE_delete_ptr(fnd->sk, e);
  165|       |        /*
  166|       |         * if 'setdefault', this ENGINE goes to the head of the list
  167|       |         */
  168|     39|        if (!sk_ENGINE_push(fnd->sk, e))
  169|      0|            goto end;
  170|       |        /* "touch" this ENGINE_PILE */
  171|     39|        fnd->uptodate = 0;
  172|     39|        if (setdefault) {
  173|      0|            if (!engine_unlocked_init(e)) {
  174|      0|                ENGINEerr(ENGINE_F_ENGINE_TABLE_REGISTER,
  175|      0|                          ENGINE_R_INIT_FAILED);
  176|      0|                goto end;
  177|      0|            }
  178|      0|            if (fnd->funct)
  179|      0|                engine_unlocked_finish(fnd->funct, 0);
  180|      0|            fnd->funct = e;
  181|      0|            fnd->uptodate = 1;
  182|      0|        }
  183|     39|        nids++;
  184|     39|    }
  185|     31|    ret = 1;
  186|     31| end:
  187|     31|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  188|     31|    return ret;
  189|     31|}
engine_table_select:
  246|  1.69k|{
  247|  1.69k|    ENGINE *ret = NULL;
  248|  1.69k|    ENGINE_PILE tmplate, *fnd = NULL;
  249|  1.69k|    int initres, loop = 0;
  250|       |
  251|  1.69k|    if (!(*table)) {
  252|       |#ifdef ENGINE_TABLE_DEBUG
  253|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
  254|       |                "registered!\n", f, l, nid);
  255|       |#endif
  256|      0|        return NULL;
  257|      0|    }
  258|  1.69k|    ERR_set_mark();
  259|  1.69k|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  260|       |    /*
  261|       |     * Check again inside the lock otherwise we could race against cleanup
  262|       |     * operations. But don't worry about a fprintf(stderr).
  263|       |     */
  264|  1.69k|    if (!int_table_check(table, 0))
  265|      0|        goto end;
  266|  1.69k|    tmplate.nid = nid;
  267|  1.69k|    fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  268|  1.69k|    if (!fnd)
  269|  1.69k|        goto end;
  270|      1|    if (fnd->funct && engine_unlocked_init(fnd->funct)) {
  271|       |#ifdef ENGINE_TABLE_DEBUG
  272|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  273|       |                "ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
  274|       |#endif
  275|      0|        ret = fnd->funct;
  276|      0|        goto end;
  277|      0|    }
  278|      1|    if (fnd->uptodate) {
  279|      0|        ret = fnd->funct;
  280|      0|        goto end;
  281|      0|    }
  282|      5| trynext:
  283|      5|    ret = sk_ENGINE_value(fnd->sk, loop++);
  284|      5|    if (!ret) {
  285|       |#ifdef ENGINE_TABLE_DEBUG
  286|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
  287|       |                "registered implementations would initialise\n", f, l, nid);
  288|       |#endif
  289|      1|        goto end;
  290|      1|    }
  291|       |    /* Try to initialise the ENGINE? */
  292|      4|    if ((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
  293|      4|        initres = engine_unlocked_init(ret);
  294|      0|    else
  295|      0|        initres = 0;
  296|      4|    if (initres) {
  297|       |        /* Update 'funct' */
  298|      0|        if ((fnd->funct != ret) && engine_unlocked_init(ret)) {
  299|       |            /* If there was a previous default we release it. */
  300|      0|            if (fnd->funct)
  301|      0|                engine_unlocked_finish(fnd->funct, 0);
  302|      0|            fnd->funct = ret;
  303|       |#ifdef ENGINE_TABLE_DEBUG
  304|       |            fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, "
  305|       |                    "setting default to '%s'\n", f, l, nid, ret->id);
  306|       |#endif
  307|      0|        }
  308|       |#ifdef ENGINE_TABLE_DEBUG
  309|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  310|       |                "newly initialised '%s'\n", f, l, nid, ret->id);
  311|       |#endif
  312|      0|        goto end;
  313|      0|    }
  314|      4|    goto trynext;
  315|  1.69k| end:
  316|       |    /*
  317|       |     * If it failed, it is unlikely to succeed again until some future
  318|       |     * registrations have taken place. In all cases, we cache.
  319|       |     */
  320|  1.69k|    if (fnd)
  321|      1|        fnd->uptodate = 1;
  322|       |#ifdef ENGINE_TABLE_DEBUG
  323|       |    if (ret)
  324|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  325|       |                "ENGINE '%s'\n", f, l, nid, ret->id);
  326|       |    else
  327|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  328|       |                "'no matching ENGINE'\n", f, l, nid);
  329|       |#endif
  330|  1.69k|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  331|       |    /*
  332|       |     * Whatever happened, any failed init()s are not failures in this
  333|       |     * context, so clear our error state.
  334|       |     */
  335|  1.69k|    ERR_pop_to_mark();
  336|  1.69k|    return ret;
  337|      4|}
engine_table_doall:
  350|      1|{
  351|      1|    ENGINE_PILE_DOALL dall;
  352|      1|    dall.cb = cb;
  353|      1|    dall.arg = arg;
  354|      1|    if (table)
  355|      1|        lh_ENGINE_PILE_doall_arg(&table->piles,
  356|      1|                                 LHASH_DOALL_ARG_FN(int_cb),
  357|      1|                                 ENGINE_PILE_DOALL, &dall);
  358|      1|}
eng_table.c:int_table_check:
  115|  1.72k|{
  116|  1.72k|    LHASH_OF(ENGINE_PILE) *lh;
  117|       |
  118|  1.72k|    if (*t)
  119|  1.71k|        return 1;
  120|      7|    if (!create)
  121|      0|        return 0;
  122|      7|    if ((lh = lh_ENGINE_PILE_new()) == NULL)
  123|      0|        return 0;
  124|      7|    *t = (ENGINE_TABLE *)lh;
  125|      7|    return 1;
  126|      7|}
eng_table.c:engine_pile_hash:
  102|  1.74k|{
  103|  1.74k|    return c->nid;
  104|  1.74k|}
eng_table.c:engine_pile_cmp:
  107|     29|{
  108|     29|    return a->nid - b->nid;
  109|     29|}

ENGINE_set_pkey_asn1_meths:
  147|      1|{
  148|      1|    e->pkey_asn1_meths = f;
  149|      1|    return 1;
  150|      1|}
ENGINE_pkey_asn1_find_str:
  230|      1|{
  231|      1|    ENGINE_FIND_STR fstr;
  232|      1|    fstr.e = NULL;
  233|      1|    fstr.ameth = NULL;
  234|      1|    fstr.str = str;
  235|      1|    fstr.len = len;
  236|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  237|      1|    engine_table_doall(pkey_asn1_meth_table, look_str_cb, &fstr);
  238|       |    /* If found obtain a structural reference to engine */
  239|      1|    if (fstr.e) {
  240|      0|        fstr.e->struct_ref++;
  241|      0|        engine_ref_debug(fstr.e, 0, 1)
  242|      0|    }
  243|      1|    *pe = fstr.e;
  244|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  245|      1|    return fstr.ameth;
  246|      1|}

ENGINE_register_ciphers:
   77|     11|{
   78|     11|    if (e->ciphers) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->ciphers(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&cipher_table,
   83|      2|                                         engine_unregister_all_ciphers, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_set_ciphers:
  140|      1|{
  141|      1|    e->ciphers = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DH:
   78|     10|{
   79|     10|    if (e->dh_meth)
   80|      7|        return engine_table_register(&dh_table,
   81|      7|                                     engine_unregister_all_DH, e, &dummy_nid,
   82|      7|                                     1, 0);
   83|      3|    return 1;
   84|     10|}
ENGINE_set_DH:
  121|      7|{
  122|      7|    e->dh_meth = dh_meth;
  123|      7|    return 1;
  124|      7|}

ENGINE_register_digests:
   77|     11|{
   78|     11|    if (e->digests) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->digests(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&digest_table,
   83|      2|                                         engine_unregister_all_digests, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_get_digest_engine:
  116|  1.69k|{
  117|  1.69k|    return engine_table_select(&digest_table, nid);
  118|  1.69k|}
ENGINE_set_digests:
  140|      1|{
  141|      1|    e->digests = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DSA:
   78|     10|{
   79|     10|    if (e->dsa_meth)
   80|      6|        return engine_table_register(&dsa_table,
   81|      6|                                     engine_unregister_all_DSA, e, &dummy_nid,
   82|      6|                                     1, 0);
   83|      4|    return 1;
   84|     10|}
ENGINE_set_DSA:
  121|      6|{
  122|      6|    e->dsa_meth = dsa_meth;
  123|      6|    return 1;
  124|      6|}

ENGINE_register_ECDH:
   93|     10|{
   94|     10|    if (e->ecdh_meth)
   95|      0|        return engine_table_register(&ecdh_table,
   96|      0|                                     engine_unregister_all_ECDH, e,
   97|      0|                                     &dummy_nid, 1, 0);
   98|     10|    return 1;
   99|     10|}

ENGINE_register_ECDSA:
   78|     10|{
   79|     10|    if (e->ecdsa_meth)
   80|      0|        return engine_table_register(&ecdsa_table,
   81|      0|                                     engine_unregister_all_ECDSA, e,
   82|      0|                                     &dummy_nid, 1, 0);
   83|     10|    return 1;
   84|     10|}

ENGINE_register_pkey_meths:
   78|     11|{
   79|     11|    if (e->pkey_meths) {
   80|      2|        const int *nids;
   81|      2|        int num_nids = e->pkey_meths(e, NULL, &nids, 0);
   82|      2|        if (num_nids > 0)
   83|      2|            return engine_table_register(&pkey_meth_table,
   84|      2|                                         engine_unregister_all_pkey_meths, e,
   85|      2|                                         nids, num_nids, 0);
   86|      2|    }
   87|      9|    return 1;
   88|     11|}
ENGINE_set_pkey_meths:
  142|      1|{
  143|      1|    e->pkey_meths = f;
  144|      1|    return 1;
  145|      1|}

ENGINE_register_RAND:
   78|     10|{
   79|     10|    if (e->rand_meth)
   80|      4|        return engine_table_register(&rand_table,
   81|      4|                                     engine_unregister_all_RAND, e,
   82|      4|                                     &dummy_nid, 1, 0);
   83|      6|    return 1;
   84|     10|}
ENGINE_get_default_RAND:
  109|      1|{
  110|      1|    return engine_table_select(&rand_table, dummy_nid);
  111|      1|}
ENGINE_set_RAND:
  121|      5|{
  122|      5|    e->rand_meth = rand_meth;
  123|      5|    return 1;
  124|      5|}

ENGINE_register_RSA:
   78|     10|{
   79|     10|    if (e->rsa_meth)
   80|      8|        return engine_table_register(&rsa_table,
   81|      8|                                     engine_unregister_all_RSA, e, &dummy_nid,
   82|      8|                                     1, 0);
   83|      2|    return 1;
   84|     10|}
ENGINE_set_RSA:
  121|      8|{
  122|      8|    e->rsa_meth = rsa_meth;
  123|      8|    return 1;
  124|      8|}

err.c:err_string_data_LHASH_HASH:
  105|  19.0k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  19.0k|                const o_type *a = arg; \
  107|  19.0k|                return name##_hash(a); }
err.c:err_string_data_LHASH_COMP:
  114|  17.2k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  17.2k|                const o_type *a = arg1;             \
  116|  17.2k|                const o_type *b = arg2; \
  117|  17.2k|                return name##_cmp(a,b); }
err.c:err_state_LHASH_HASH:
  105|  4.43k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  4.43k|                const o_type *a = arg; \
  107|  4.43k|                return name##_hash(a); }
err.c:err_state_LHASH_COMP:
  114|  3.92k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  3.92k|                const o_type *a = arg1;             \
  116|  3.92k|                const o_type *b = arg2; \
  117|  3.92k|                return name##_cmp(a,b); }

ERR_load_ERR_strings:
  659|     81|{
  660|     81|    err_fns_check();
  661|     81|#ifndef OPENSSL_NO_ERR
  662|     81|    err_load_strings(0, ERR_str_libraries);
  663|     81|    err_load_strings(0, ERR_str_reasons);
  664|     81|    err_load_strings(ERR_LIB_SYS, ERR_str_functs);
  665|     81|    build_SYS_str_reasons();
  666|     81|    err_load_strings(ERR_LIB_SYS, SYS_str_reasons);
  667|     81|#endif
  668|     81|}
ERR_load_strings:
  681|     80|{
  682|     80|    ERR_load_ERR_strings();
  683|     80|    err_load_strings(lib, str);
  684|     80|}
ERR_put_error:
  705|     15|{
  706|     15|    ERR_STATE *es;
  707|       |
  708|       |#ifdef _OSD_POSIX
  709|       |    /*
  710|       |     * In the BS2000-OSD POSIX subsystem, the compiler generates path names
  711|       |     * in the form "*POSIX(/etc/passwd)". This dirty hack strips them to
  712|       |     * something sensible. @@@ We shouldn't modify a const string, though.
  713|       |     */
  714|       |    if (strncmp(file, "*POSIX(", sizeof("*POSIX(") - 1) == 0) {
  715|       |        char *end;
  716|       |
  717|       |        /* Skip the "*POSIX(" prefix */
  718|       |        file += sizeof("*POSIX(") - 1;
  719|       |        end = &file[strlen(file) - 1];
  720|       |        if (*end == ')')
  721|       |            *end = '\0';
  722|       |        /* Optional: use the basename of the path only. */
  723|       |        if ((end = strrchr(file, '/')) != NULL)
  724|       |            file = &end[1];
  725|       |    }
  726|       |#endif
  727|     15|    es = ERR_get_state();
  728|     15|    if (es == NULL)
  729|      0|        return;
  730|       |
  731|     15|    es->top = (es->top + 1) % ERR_NUM_ERRORS;
  732|     15|    if (es->top == es->bottom)
  733|      0|        es->bottom = (es->bottom + 1) % ERR_NUM_ERRORS;
  734|     15|    es->err_flags[es->top] = 0;
  735|     15|    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
  736|     15|    es->err_file[es->top] = file;
  737|     15|    es->err_line[es->top] = line;
  738|     15|    err_clear_data(es, es->top);
  739|     15|}
ERR_clear_error:
  742|     12|{
  743|     12|    int i;
  744|     12|    ERR_STATE *es;
  745|       |
  746|     12|    es = ERR_get_state();
  747|     12|    if (es == NULL)
  748|      0|        return;
  749|       |
  750|    204|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  751|    192|        err_clear(es, i);
  752|    192|    }
  753|     12|    es->top = es->bottom = 0;
  754|     12|}
ERR_peek_last_error:
  789|      2|{
  790|      2|    return (get_error_values(0, 1, NULL, NULL, NULL, NULL));
  791|      2|}
ERR_func_error_string:
  971|     28|{
  972|     28|    ERR_STRING_DATA d, *p;
  973|     28|    unsigned long l, f;
  974|       |
  975|     28|    err_fns_check();
  976|     28|    l = ERR_GET_LIB(e);
  977|     28|    f = ERR_GET_FUNC(e);
  978|     28|    d.error = ERR_PACK(l, f, 0);
  979|     28|    p = ERRFN(err_get_item) (&d);
  980|     28|    return ((p == NULL) ? NULL : p->string);
  981|     28|}
ERR_remove_thread_state:
 1001|  1.04k|{
 1002|  1.04k|    ERR_STATE tmp;
 1003|       |
 1004|  1.04k|    if (id)
 1005|      0|        CRYPTO_THREADID_cpy(&tmp.tid, id);
 1006|  1.04k|    else
 1007|  1.04k|        CRYPTO_THREADID_current(&tmp.tid);
 1008|  1.04k|    err_fns_check();
 1009|       |    /*
 1010|       |     * thread_del_item automatically destroys the LHASH if the number of
 1011|       |     * items reaches zero.
 1012|       |     */
 1013|  1.04k|    ERRFN(thread_del_item) (&tmp);
 1014|  1.04k|}
ERR_get_state:
 1024|  3.41k|{
 1025|  3.41k|    ERR_STATE *ret, tmp, *tmpp = NULL;
 1026|  3.41k|    int i;
 1027|  3.41k|    CRYPTO_THREADID tid;
 1028|       |
 1029|  3.41k|    err_fns_check();
 1030|  3.41k|    CRYPTO_THREADID_current(&tid);
 1031|  3.41k|    CRYPTO_THREADID_cpy(&tmp.tid, &tid);
 1032|  3.41k|    ret = ERRFN(thread_get_item) (&tmp);
 1033|       |
 1034|       |    /* ret == the error state, if NULL, make a new one */
 1035|  3.41k|    if (ret == NULL) {
 1036|    506|        ret = (ERR_STATE *)OPENSSL_malloc(sizeof(ERR_STATE));
 1037|    506|        if (ret == NULL)
 1038|      0|            return NULL;
 1039|    506|        CRYPTO_THREADID_cpy(&ret->tid, &tid);
 1040|    506|        ret->top = 0;
 1041|    506|        ret->bottom = 0;
 1042|  8.60k|        for (i = 0; i < ERR_NUM_ERRORS; i++) {
 1043|  8.09k|            ret->err_data[i] = NULL;
 1044|  8.09k|            ret->err_data_flags[i] = 0;
 1045|  8.09k|        }
 1046|    506|        tmpp = ERRFN(thread_set_item) (ret);
 1047|       |        /* To check if insertion failed, do a get. */
 1048|    506|        if (ERRFN(thread_get_item) (ret) != ret) {
 1049|      0|            ERR_STATE_free(ret); /* could not insert it */
 1050|      0|            return NULL;
 1051|      0|        }
 1052|       |        /*
 1053|       |         * If a race occured in this function and we came second, tmpp is the
 1054|       |         * first one that we just replaced.
 1055|       |         */
 1056|    506|        if (tmpp)
 1057|      0|            ERR_STATE_free(tmpp);
 1058|    506|    }
 1059|  3.41k|    return ret;
 1060|  3.41k|}
ERR_get_next_error_library:
 1063|      9|{
 1064|      9|    err_fns_check();
 1065|      9|    return ERRFN(get_next_lib) ();
 1066|      9|}
ERR_set_error_data:
 1069|      5|{
 1070|      5|    ERR_STATE *es;
 1071|      5|    int i;
 1072|       |
 1073|      5|    es = ERR_get_state();
 1074|      5|    if (es == NULL)
 1075|      0|        return;
 1076|       |
 1077|      5|    i = es->top;
 1078|       |
 1079|      5|    err_clear_data(es, i);
 1080|      5|    es->err_data[i] = data;
 1081|      5|    es->err_data_flags[i] = flags;
 1082|      5|}
ERR_add_error_data:
 1085|      5|{
 1086|      5|    va_list args;
 1087|      5|    va_start(args, num);
 1088|      5|    ERR_add_error_vdata(num, args);
 1089|      5|    va_end(args);
 1090|      5|}
ERR_add_error_vdata:
 1093|      5|{
 1094|      5|    int i, n, s;
 1095|      5|    char *str, *p, *a;
 1096|       |
 1097|      5|    s = 80;
 1098|      5|    str = OPENSSL_malloc(s + 1);
 1099|      5|    if (str == NULL)
 1100|      0|        return;
 1101|      5|    str[0] = '\0';
 1102|       |
 1103|      5|    n = 0;
 1104|     26|    for (i = 0; i < num; i++) {
 1105|     21|        a = va_arg(args, char *);
 1106|       |        /* ignore NULLs, thanks to Bob Beck <beck@obtuse.com> */
 1107|     21|        if (a != NULL) {
 1108|     21|            n += strlen(a);
 1109|     21|            if (n > s) {
 1110|      4|                s = n + 20;
 1111|      4|                p = OPENSSL_realloc(str, s + 1);
 1112|      4|                if (p == NULL) {
 1113|      0|                    OPENSSL_free(str);
 1114|      0|                    return;
 1115|      0|                } else
 1116|      4|                    str = p;
 1117|      4|            }
 1118|     21|            BUF_strlcat(str, a, (size_t)s + 1);
 1119|     21|        }
 1120|     21|    }
 1121|      5|    ERR_set_error_data(str, ERR_TXT_MALLOCED | ERR_TXT_STRING);
 1122|      5|}
ERR_set_mark:
 1125|  1.69k|{
 1126|  1.69k|    ERR_STATE *es;
 1127|       |
 1128|  1.69k|    es = ERR_get_state();
 1129|  1.69k|    if (es == NULL)
 1130|      0|        return 0;
 1131|       |
 1132|  1.69k|    if (es->bottom == es->top)
 1133|  1.69k|        return 0;
 1134|      0|    es->err_flags[es->top] |= ERR_FLAG_MARK;
 1135|      0|    return 1;
 1136|  1.69k|}
ERR_pop_to_mark:
 1139|  1.69k|{
 1140|  1.69k|    ERR_STATE *es;
 1141|       |
 1142|  1.69k|    es = ERR_get_state();
 1143|  1.69k|    if (es == NULL)
 1144|      0|        return 0;
 1145|       |
 1146|  1.70k|    while (es->bottom != es->top
 1147|  1.70k|           && (es->err_flags[es->top] & ERR_FLAG_MARK) == 0) {
 1148|     12|        err_clear(es, es->top);
 1149|     12|        es->top -= 1;
 1150|     12|        if (es->top == -1)
 1151|      0|            es->top = ERR_NUM_ERRORS - 1;
 1152|     12|    }
 1153|       |
 1154|  1.69k|    if (es->bottom == es->top)
 1155|  1.69k|        return 0;
 1156|      0|    es->err_flags[es->top] &= ~ERR_FLAG_MARK;
 1157|      0|    return 1;
 1158|  1.69k|}
err.c:err_fns_check:
  292|  29.1k|{
  293|  29.1k|    if (err_fns)
  294|  29.1k|        return;
  295|       |
  296|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  297|      1|    if (!err_fns)
  298|      1|        err_fns = &err_defaults;
  299|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  300|      1|}
err.c:int_err_get:
  358|  19.0k|{
  359|  19.0k|    LHASH_OF(ERR_STRING_DATA) *ret = NULL;
  360|       |
  361|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  362|  19.0k|    if (!int_error_hash && create) {
  363|      1|        CRYPTO_push_info("int_err_get (err.c)");
  364|      1|        int_error_hash = lh_ERR_STRING_DATA_new();
  365|      1|        CRYPTO_pop_info();
  366|      1|    }
  367|  19.0k|    if (int_error_hash)
  368|  19.0k|        ret = int_error_hash;
  369|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  370|       |
  371|  19.0k|    return ret;
  372|  19.0k|}
err.c:err_string_data_hash:
  339|  19.0k|{
  340|  19.0k|    unsigned long ret, l;
  341|       |
  342|  19.0k|    l = a->error;
  343|  19.0k|    ret = l ^ ERR_GET_LIB(l) ^ ERR_GET_FUNC(l);
  344|  19.0k|    return (ret ^ ret % 19 * 13);
  345|  19.0k|}
err.c:err_string_data_cmp:
  351|  17.2k|{
  352|  17.2k|    return (int)(a->error - b->error);
  353|  17.2k|}
err.c:int_err_get_item:
  385|     28|{
  386|     28|    ERR_STRING_DATA *p;
  387|     28|    LHASH_OF(ERR_STRING_DATA) *hash;
  388|       |
  389|     28|    err_fns_check();
  390|     28|    hash = ERRFN(err_get) (0);
  391|     28|    if (!hash)
  392|      0|        return NULL;
  393|       |
  394|     28|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  395|     28|    p = lh_ERR_STRING_DATA_retrieve(hash, d);
  396|     28|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  397|       |
  398|     28|    return p;
  399|     28|}
err.c:int_err_set_item:
  402|  19.0k|{
  403|  19.0k|    ERR_STRING_DATA *p;
  404|  19.0k|    LHASH_OF(ERR_STRING_DATA) *hash;
  405|       |
  406|  19.0k|    err_fns_check();
  407|  19.0k|    hash = ERRFN(err_get) (1);
  408|  19.0k|    if (!hash)
  409|      0|        return NULL;
  410|       |
  411|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  412|  19.0k|    p = lh_ERR_STRING_DATA_insert(hash, d);
  413|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  414|       |
  415|  19.0k|    return p;
  416|  19.0k|}
err.c:int_thread_get:
  450|  5.47k|{
  451|  5.47k|    LHASH_OF(ERR_STATE) *ret = NULL;
  452|       |
  453|  5.47k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  454|  5.47k|    if (!int_thread_hash && create) {
  455|    506|        CRYPTO_push_info("int_thread_get (err.c)");
  456|    506|        int_thread_hash = lh_ERR_STATE_new();
  457|    506|        CRYPTO_pop_info();
  458|    506|    }
  459|  5.47k|    if (int_thread_hash) {
  460|  4.43k|        int_thread_hash_references++;
  461|  4.43k|        ret = int_thread_hash;
  462|  4.43k|    }
  463|  5.47k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  464|  5.47k|    return ret;
  465|  5.47k|}
err.c:err_state_hash:
  436|  4.43k|{
  437|  4.43k|    return CRYPTO_THREADID_hash(&a->tid) * 13;
  438|  4.43k|}
err.c:err_state_cmp:
  443|  3.92k|{
  444|  3.92k|    return CRYPTO_THREADID_cmp(&a->tid, &b->tid);
  445|  3.92k|}
err.c:int_thread_release:
  468|  4.43k|{
  469|  4.43k|    int i;
  470|       |
  471|  4.43k|    if (hash == NULL || *hash == NULL)
  472|      0|        return;
  473|       |
  474|  4.43k|    i = CRYPTO_add(&int_thread_hash_references, -1, CRYPTO_LOCK_ERR);
  475|       |
  476|       |#ifdef REF_PRINT
  477|       |    fprintf(stderr, "%4d:%s\n", int_thread_hash_references, "ERR");
  478|       |#endif
  479|  4.43k|    if (i > 0)
  480|      0|        return;
  481|       |#ifdef REF_CHECK
  482|       |    if (i < 0) {
  483|       |        fprintf(stderr, "int_thread_release, bad reference count\n");
  484|       |        abort();                /* ok */
  485|       |    }
  486|       |#endif
  487|  4.43k|    *hash = NULL;
  488|  4.43k|}
err.c:int_thread_get_item:
  491|  3.92k|{
  492|  3.92k|    ERR_STATE *p;
  493|  3.92k|    LHASH_OF(ERR_STATE) *hash;
  494|       |
  495|  3.92k|    err_fns_check();
  496|  3.92k|    hash = ERRFN(thread_get) (0);
  497|  3.92k|    if (!hash)
  498|    506|        return NULL;
  499|       |
  500|  3.41k|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  501|  3.41k|    p = lh_ERR_STATE_retrieve(hash, d);
  502|  3.41k|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  503|       |
  504|  3.41k|    ERRFN(thread_release) (&hash);
  505|  3.41k|    return p;
  506|  3.92k|}
err.c:int_thread_set_item:
  509|    506|{
  510|    506|    ERR_STATE *p;
  511|    506|    LHASH_OF(ERR_STATE) *hash;
  512|       |
  513|    506|    err_fns_check();
  514|    506|    hash = ERRFN(thread_get) (1);
  515|    506|    if (!hash)
  516|      0|        return NULL;
  517|       |
  518|    506|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  519|    506|    p = lh_ERR_STATE_insert(hash, d);
  520|    506|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  521|       |
  522|    506|    ERRFN(thread_release) (&hash);
  523|    506|    return p;
  524|    506|}
err.c:int_thread_del_item:
  527|  1.04k|{
  528|  1.04k|    ERR_STATE *p;
  529|  1.04k|    LHASH_OF(ERR_STATE) *hash;
  530|       |
  531|  1.04k|    err_fns_check();
  532|  1.04k|    hash = ERRFN(thread_get) (0);
  533|  1.04k|    if (!hash)
  534|    540|        return;
  535|       |
  536|    506|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  537|    506|    p = lh_ERR_STATE_delete(hash, d);
  538|       |    /* make sure we don't leak memory */
  539|    506|    if (int_thread_hash_references == 1
  540|    506|        && int_thread_hash && lh_ERR_STATE_num_items(int_thread_hash) == 0) {
  541|    506|        lh_ERR_STATE_free(int_thread_hash);
  542|    506|        int_thread_hash = NULL;
  543|    506|    }
  544|    506|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  545|       |
  546|    506|    ERRFN(thread_release) (&hash);
  547|    506|    if (p)
  548|    506|        ERR_STATE_free(p);
  549|    506|}
err.c:int_err_get_next_lib:
  552|      9|{
  553|      9|    int ret;
  554|       |
  555|      9|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  556|      9|    ret = int_err_library_number++;
  557|      9|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  558|       |
  559|      9|    return ret;
  560|      9|}
err.c:build_SYS_str_reasons:
  578|     81|{
  579|       |    /* OPENSSL_malloc cannot be used here, use static storage instead */
  580|     81|    static char strerror_tab[NUM_SYS_STR_REASONS][LEN_SYS_STR_REASON];
  581|     81|    int i;
  582|     81|    static int init = 1;
  583|       |
  584|     81|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  585|     81|    if (!init) {
  586|     80|        CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  587|     80|        return;
  588|     80|    }
  589|       |
  590|      1|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  591|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  592|      1|    if (!init) {
  593|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  594|      0|        return;
  595|      0|    }
  596|       |
  597|    128|    for (i = 1; i <= NUM_SYS_STR_REASONS; i++) {
  598|    127|        ERR_STRING_DATA *str = &SYS_str_reasons[i - 1];
  599|       |
  600|    127|        str->error = (unsigned long)i;
  601|    127|        if (str->string == NULL) {
  602|    127|            char (*dest)[LEN_SYS_STR_REASON] = &(strerror_tab[i - 1]);
  603|    127|            char *src = strerror(i);
  604|    127|            if (src != NULL) {
  605|    127|                strncpy(*dest, src, sizeof *dest);
  606|    127|                (*dest)[sizeof *dest - 1] = '\0';
  607|    127|                str->string = *dest;
  608|    127|            }
  609|    127|        }
  610|    127|        if (str->string == NULL)
  611|      0|            str->string = "unknown";
  612|    127|    }
  613|       |
  614|       |    /*
  615|       |     * Now we still have SYS_str_reasons[NUM_SYS_STR_REASONS] = {0, NULL}, as
  616|       |     * required by ERR_load_strings.
  617|       |     */
  618|       |
  619|      1|    init = 0;
  620|       |
  621|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  622|      1|}
err.c:err_load_strings:
  671|    404|{
  672|  19.4k|    while (str->error) {
  673|  19.0k|        if (lib)
  674|  11.4k|            str->error |= ERR_PACK(lib, 0, 0);
  675|  19.0k|        ERRFN(err_set_item) (str);
  676|  19.0k|        str++;
  677|  19.0k|    }
  678|    404|}
err.c:get_error_values:
  807|      2|{
  808|      2|    int i = 0;
  809|      2|    ERR_STATE *es;
  810|      2|    unsigned long ret;
  811|       |
  812|      2|    es = ERR_get_state();
  813|      2|    if (es == NULL)
  814|      0|        return 0;
  815|       |
  816|      2|    if (inc && top) {
  817|      0|        if (file)
  818|      0|            *file = "";
  819|      0|        if (line)
  820|      0|            *line = 0;
  821|      0|        if (data)
  822|      0|            *data = "";
  823|      0|        if (flags)
  824|      0|            *flags = 0;
  825|       |
  826|      0|        return ERR_R_INTERNAL_ERROR;
  827|      0|    }
  828|       |
  829|      2|    if (es->bottom == es->top)
  830|      0|        return 0;
  831|      2|    if (top)
  832|      2|        i = es->top;            /* last error */
  833|      0|    else
  834|      0|        i = (es->bottom + 1) % ERR_NUM_ERRORS; /* first error */
  835|       |
  836|      2|    ret = es->err_buffer[i];
  837|      2|    if (inc) {
  838|      0|        es->bottom = i;
  839|      0|        es->err_buffer[i] = 0;
  840|      0|    }
  841|       |
  842|      2|    if ((file != NULL) && (line != NULL)) {
  843|      0|        if (es->err_file[i] == NULL) {
  844|      0|            *file = "NA";
  845|      0|            if (line != NULL)
  846|      0|                *line = 0;
  847|      0|        } else {
  848|      0|            *file = es->err_file[i];
  849|      0|            if (line != NULL)
  850|      0|                *line = es->err_line[i];
  851|      0|        }
  852|      0|    }
  853|       |
  854|      2|    if (data == NULL) {
  855|      2|        if (inc) {
  856|      0|            err_clear_data(es, i);
  857|      0|        }
  858|      2|    } else {
  859|      0|        if (es->err_data[i] == NULL) {
  860|      0|            *data = "";
  861|      0|            if (flags != NULL)
  862|      0|                *flags = 0;
  863|      0|        } else {
  864|      0|            *data = es->err_data[i];
  865|      0|            if (flags != NULL)
  866|      0|                *flags = es->err_data_flags[i];
  867|      0|        }
  868|      0|    }
  869|      2|    return ret;
  870|      2|}
err.c:ERR_STATE_free:
  646|    506|{
  647|    506|    int i;
  648|       |
  649|    506|    if (s == NULL)
  650|      0|        return;
  651|       |
  652|  8.60k|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  653|  8.09k|        err_clear_data(s, i);
  654|  8.09k|    }
  655|    506|    OPENSSL_free(s);
  656|    506|}

ERR_load_crypto_strings:
  112|      1|{
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|    ERR_load_ERR_strings();     /* include error strings for SYSerr */
  115|      1|    ERR_load_BN_strings();
  116|      1|# ifndef OPENSSL_NO_RSA
  117|      1|    ERR_load_RSA_strings();
  118|      1|# endif
  119|      1|# ifndef OPENSSL_NO_DH
  120|      1|    ERR_load_DH_strings();
  121|      1|# endif
  122|      1|    ERR_load_EVP_strings();
  123|      1|    ERR_load_BUF_strings();
  124|      1|    ERR_load_OBJ_strings();
  125|      1|    ERR_load_PEM_strings();
  126|      1|# ifndef OPENSSL_NO_DSA
  127|      1|    ERR_load_DSA_strings();
  128|      1|# endif
  129|      1|    ERR_load_X509_strings();
  130|      1|    ERR_load_ASN1_strings();
  131|      1|    ERR_load_CONF_strings();
  132|      1|    ERR_load_CRYPTO_strings();
  133|      1|# ifndef OPENSSL_NO_COMP
  134|      1|    ERR_load_COMP_strings();
  135|      1|# endif
  136|      1|# ifndef OPENSSL_NO_EC
  137|      1|    ERR_load_EC_strings();
  138|      1|# endif
  139|      1|# ifndef OPENSSL_NO_ECDSA
  140|      1|    ERR_load_ECDSA_strings();
  141|      1|# endif
  142|      1|# ifndef OPENSSL_NO_ECDH
  143|      1|    ERR_load_ECDH_strings();
  144|      1|# endif
  145|       |    /* skip ERR_load_SSL_strings() because it is not in this library */
  146|      1|    ERR_load_BIO_strings();
  147|      1|    ERR_load_PKCS7_strings();
  148|      1|    ERR_load_X509V3_strings();
  149|      1|    ERR_load_PKCS12_strings();
  150|      1|    ERR_load_RAND_strings();
  151|      1|    ERR_load_DSO_strings();
  152|      1|    ERR_load_TS_strings();
  153|      1|# ifndef OPENSSL_NO_ENGINE
  154|      1|    ERR_load_ENGINE_strings();
  155|      1|# endif
  156|      1|    ERR_load_OCSP_strings();
  157|      1|    ERR_load_UI_strings();
  158|       |# ifdef OPENSSL_FIPS
  159|       |    ERR_load_FIPS_strings();
  160|       |# endif
  161|      1|# ifndef OPENSSL_NO_CMS
  162|      1|    ERR_load_CMS_strings();
  163|      1|# endif
  164|       |# ifndef OPENSSL_NO_JPAKE
  165|       |    ERR_load_JPAKE_strings();
  166|       |# endif
  167|      1|#endif
  168|      1|}

EVP_des_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cfb128:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }

OPENSSL_add_all_algorithms_noconf:
   76|      1|{
   77|       |    /*
   78|       |     * For the moment OPENSSL_cpuid_setup does something
   79|       |     * only on IA-32, but we reserve the option for all
   80|       |     * platforms...
   81|       |     */
   82|      1|    OPENSSL_cpuid_setup();
   83|      1|    OpenSSL_add_all_ciphers();
   84|      1|    OpenSSL_add_all_digests();
   85|      1|}

OpenSSL_add_all_ciphers:
   66|      1|{
   67|       |
   68|      1|#ifndef OPENSSL_NO_DES
   69|      1|    EVP_add_cipher(EVP_des_cfb());
   70|      1|    EVP_add_cipher(EVP_des_cfb1());
   71|      1|    EVP_add_cipher(EVP_des_cfb8());
   72|      1|    EVP_add_cipher(EVP_des_ede_cfb());
   73|      1|    EVP_add_cipher(EVP_des_ede3_cfb());
   74|      1|    EVP_add_cipher(EVP_des_ede3_cfb1());
   75|      1|    EVP_add_cipher(EVP_des_ede3_cfb8());
   76|       |
   77|      1|    EVP_add_cipher(EVP_des_ofb());
   78|      1|    EVP_add_cipher(EVP_des_ede_ofb());
   79|      1|    EVP_add_cipher(EVP_des_ede3_ofb());
   80|       |
   81|      1|    EVP_add_cipher(EVP_desx_cbc());
   82|      1|    EVP_add_cipher_alias(SN_desx_cbc, "DESX");
   83|      1|    EVP_add_cipher_alias(SN_desx_cbc, "desx");
   84|       |
   85|      1|    EVP_add_cipher(EVP_des_cbc());
   86|      1|    EVP_add_cipher_alias(SN_des_cbc, "DES");
   87|      1|    EVP_add_cipher_alias(SN_des_cbc, "des");
   88|      1|    EVP_add_cipher(EVP_des_ede_cbc());
   89|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   90|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "DES3");
   91|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "des3");
   92|       |
   93|      1|    EVP_add_cipher(EVP_des_ecb());
   94|      1|    EVP_add_cipher(EVP_des_ede());
   95|      1|    EVP_add_cipher(EVP_des_ede3());
   96|      1|    EVP_add_cipher(EVP_des_ede3_wrap());
   97|      1|#endif
   98|       |
   99|      1|#ifndef OPENSSL_NO_RC4
  100|      1|    EVP_add_cipher(EVP_rc4());
  101|      1|    EVP_add_cipher(EVP_rc4_40());
  102|      1|# ifndef OPENSSL_NO_MD5
  103|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
  104|      1|# endif
  105|      1|#endif
  106|       |
  107|      1|#ifndef OPENSSL_NO_IDEA
  108|      1|    EVP_add_cipher(EVP_idea_ecb());
  109|      1|    EVP_add_cipher(EVP_idea_cfb());
  110|      1|    EVP_add_cipher(EVP_idea_ofb());
  111|      1|    EVP_add_cipher(EVP_idea_cbc());
  112|      1|    EVP_add_cipher_alias(SN_idea_cbc, "IDEA");
  113|      1|    EVP_add_cipher_alias(SN_idea_cbc, "idea");
  114|      1|#endif
  115|       |
  116|      1|#ifndef OPENSSL_NO_SEED
  117|      1|    EVP_add_cipher(EVP_seed_ecb());
  118|      1|    EVP_add_cipher(EVP_seed_cfb());
  119|      1|    EVP_add_cipher(EVP_seed_ofb());
  120|      1|    EVP_add_cipher(EVP_seed_cbc());
  121|      1|    EVP_add_cipher_alias(SN_seed_cbc, "SEED");
  122|      1|    EVP_add_cipher_alias(SN_seed_cbc, "seed");
  123|      1|#endif
  124|       |
  125|      1|#ifndef OPENSSL_NO_RC2
  126|      1|    EVP_add_cipher(EVP_rc2_ecb());
  127|      1|    EVP_add_cipher(EVP_rc2_cfb());
  128|      1|    EVP_add_cipher(EVP_rc2_ofb());
  129|      1|    EVP_add_cipher(EVP_rc2_cbc());
  130|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
  131|      1|    EVP_add_cipher(EVP_rc2_64_cbc());
  132|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "RC2");
  133|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "rc2");
  134|      1|#endif
  135|       |
  136|      1|#ifndef OPENSSL_NO_BF
  137|      1|    EVP_add_cipher(EVP_bf_ecb());
  138|      1|    EVP_add_cipher(EVP_bf_cfb());
  139|      1|    EVP_add_cipher(EVP_bf_ofb());
  140|      1|    EVP_add_cipher(EVP_bf_cbc());
  141|      1|    EVP_add_cipher_alias(SN_bf_cbc, "BF");
  142|      1|    EVP_add_cipher_alias(SN_bf_cbc, "bf");
  143|      1|    EVP_add_cipher_alias(SN_bf_cbc, "blowfish");
  144|      1|#endif
  145|       |
  146|      1|#ifndef OPENSSL_NO_CAST
  147|      1|    EVP_add_cipher(EVP_cast5_ecb());
  148|      1|    EVP_add_cipher(EVP_cast5_cfb());
  149|      1|    EVP_add_cipher(EVP_cast5_ofb());
  150|      1|    EVP_add_cipher(EVP_cast5_cbc());
  151|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST");
  152|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast");
  153|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST-cbc");
  154|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast-cbc");
  155|      1|#endif
  156|       |
  157|      1|#ifndef OPENSSL_NO_RC5
  158|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ecb());
  159|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cfb());
  160|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ofb());
  161|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cbc());
  162|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "rc5");
  163|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "RC5");
  164|      1|#endif
  165|       |
  166|      1|#ifndef OPENSSL_NO_AES
  167|      1|    EVP_add_cipher(EVP_aes_128_ecb());
  168|      1|    EVP_add_cipher(EVP_aes_128_cbc());
  169|      1|    EVP_add_cipher(EVP_aes_128_cfb());
  170|      1|    EVP_add_cipher(EVP_aes_128_cfb1());
  171|      1|    EVP_add_cipher(EVP_aes_128_cfb8());
  172|      1|    EVP_add_cipher(EVP_aes_128_ofb());
  173|      1|    EVP_add_cipher(EVP_aes_128_ctr());
  174|      1|    EVP_add_cipher(EVP_aes_128_gcm());
  175|      1|    EVP_add_cipher(EVP_aes_128_xts());
  176|      1|    EVP_add_cipher(EVP_aes_128_ccm());
  177|      1|    EVP_add_cipher(EVP_aes_128_wrap());
  178|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "AES128");
  179|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "aes128");
  180|      1|    EVP_add_cipher(EVP_aes_192_ecb());
  181|      1|    EVP_add_cipher(EVP_aes_192_cbc());
  182|      1|    EVP_add_cipher(EVP_aes_192_cfb());
  183|      1|    EVP_add_cipher(EVP_aes_192_cfb1());
  184|      1|    EVP_add_cipher(EVP_aes_192_cfb8());
  185|      1|    EVP_add_cipher(EVP_aes_192_ofb());
  186|      1|    EVP_add_cipher(EVP_aes_192_ctr());
  187|      1|    EVP_add_cipher(EVP_aes_192_gcm());
  188|      1|    EVP_add_cipher(EVP_aes_192_ccm());
  189|      1|    EVP_add_cipher(EVP_aes_192_wrap());
  190|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "AES192");
  191|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "aes192");
  192|      1|    EVP_add_cipher(EVP_aes_256_ecb());
  193|      1|    EVP_add_cipher(EVP_aes_256_cbc());
  194|      1|    EVP_add_cipher(EVP_aes_256_cfb());
  195|      1|    EVP_add_cipher(EVP_aes_256_cfb1());
  196|      1|    EVP_add_cipher(EVP_aes_256_cfb8());
  197|      1|    EVP_add_cipher(EVP_aes_256_ofb());
  198|      1|    EVP_add_cipher(EVP_aes_256_ctr());
  199|      1|    EVP_add_cipher(EVP_aes_256_gcm());
  200|      1|    EVP_add_cipher(EVP_aes_256_xts());
  201|      1|    EVP_add_cipher(EVP_aes_256_ccm());
  202|      1|    EVP_add_cipher(EVP_aes_256_wrap());
  203|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "AES256");
  204|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "aes256");
  205|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
  206|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
  207|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
  208|      1|# endif
  209|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
  210|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  211|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  212|      1|# endif
  213|      1|#endif
  214|       |
  215|      1|#ifndef OPENSSL_NO_CAMELLIA
  216|      1|    EVP_add_cipher(EVP_camellia_128_ecb());
  217|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  218|      1|    EVP_add_cipher(EVP_camellia_128_cfb());
  219|      1|    EVP_add_cipher(EVP_camellia_128_cfb1());
  220|      1|    EVP_add_cipher(EVP_camellia_128_cfb8());
  221|      1|    EVP_add_cipher(EVP_camellia_128_ofb());
  222|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "CAMELLIA128");
  223|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "camellia128");
  224|      1|    EVP_add_cipher(EVP_camellia_192_ecb());
  225|      1|    EVP_add_cipher(EVP_camellia_192_cbc());
  226|      1|    EVP_add_cipher(EVP_camellia_192_cfb());
  227|      1|    EVP_add_cipher(EVP_camellia_192_cfb1());
  228|      1|    EVP_add_cipher(EVP_camellia_192_cfb8());
  229|      1|    EVP_add_cipher(EVP_camellia_192_ofb());
  230|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "CAMELLIA192");
  231|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "camellia192");
  232|      1|    EVP_add_cipher(EVP_camellia_256_ecb());
  233|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  234|      1|    EVP_add_cipher(EVP_camellia_256_cfb());
  235|      1|    EVP_add_cipher(EVP_camellia_256_cfb1());
  236|      1|    EVP_add_cipher(EVP_camellia_256_cfb8());
  237|      1|    EVP_add_cipher(EVP_camellia_256_ofb());
  238|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "CAMELLIA256");
  239|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "camellia256");
  240|      1|#endif
  241|      1|}

OpenSSL_add_all_digests:
   66|      1|{
   67|      1|#ifndef OPENSSL_NO_MD4
   68|      1|    EVP_add_digest(EVP_md4());
   69|      1|#endif
   70|      1|#ifndef OPENSSL_NO_MD5
   71|      1|    EVP_add_digest(EVP_md5());
   72|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
   73|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
   74|      1|#endif
   75|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA0)
   76|      1|    EVP_add_digest(EVP_sha());
   77|      1|# ifndef OPENSSL_NO_DSA
   78|      1|    EVP_add_digest(EVP_dss());
   79|      1|# endif
   80|      1|#endif
   81|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   82|      1|    EVP_add_digest(EVP_sha1());
   83|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
   84|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
   85|      1|# ifndef OPENSSL_NO_DSA
   86|      1|    EVP_add_digest(EVP_dss1());
   87|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
   88|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
   89|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
   90|      1|# endif
   91|      1|# ifndef OPENSSL_NO_ECDSA
   92|      1|    EVP_add_digest(EVP_ecdsa());
   93|      1|# endif
   94|      1|#endif
   95|      1|#if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)
   96|      1|    EVP_add_digest(EVP_mdc2());
   97|      1|#endif
   98|      1|#ifndef OPENSSL_NO_RIPEMD
   99|      1|    EVP_add_digest(EVP_ripemd160());
  100|      1|    EVP_add_digest_alias(SN_ripemd160, "ripemd");
  101|      1|    EVP_add_digest_alias(SN_ripemd160, "rmd160");
  102|      1|#endif
  103|      1|#ifndef OPENSSL_NO_SHA256
  104|      1|    EVP_add_digest(EVP_sha224());
  105|      1|    EVP_add_digest(EVP_sha256());
  106|      1|#endif
  107|      1|#ifndef OPENSSL_NO_SHA512
  108|      1|    EVP_add_digest(EVP_sha384());
  109|      1|    EVP_add_digest(EVP_sha512());
  110|      1|#endif
  111|      1|#ifndef OPENSSL_NO_WHIRLPOOL
  112|      1|    EVP_add_digest(EVP_whirlpool());
  113|      1|#endif
  114|      1|}

EVP_MD_CTX_init:
  126|    873|{
  127|    873|    memset(ctx, '\0', sizeof *ctx);
  128|    873|}
EVP_DigestInit_ex:
  147|  1.69k|{
  148|  1.69k|    EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  149|       |#ifdef OPENSSL_FIPS
  150|       |    /* If FIPS mode switch to approved implementation if possible */
  151|       |    if (FIPS_mode()) {
  152|       |        const EVP_MD *fipsmd;
  153|       |        if (type) {
  154|       |            fipsmd = evp_get_fips_md(type);
  155|       |            if (fipsmd)
  156|       |                type = fipsmd;
  157|       |        }
  158|       |    }
  159|       |#endif
  160|  1.69k|#ifndef OPENSSL_NO_ENGINE
  161|       |    /*
  162|       |     * Whether it's nice or not, "Inits" can be used on "Final"'d contexts so
  163|       |     * this context may already have an ENGINE! Try to avoid releasing the
  164|       |     * previous handle, re-querying for an ENGINE, and having a
  165|       |     * reinitialisation, when it may all be unecessary.
  166|       |     */
  167|  1.69k|    if (ctx->engine && ctx->digest && (!type ||
  168|      0|                                       (type
  169|      0|                                        && (type->type ==
  170|      0|                                            ctx->digest->type))))
  171|      0|        goto skip_to_init;
  172|  1.69k|    if (type) {
  173|       |        /*
  174|       |         * Ensure an ENGINE left lying around from last time is cleared (the
  175|       |         * previous check attempted to avoid this if the same ENGINE and
  176|       |         * EVP_MD could be used).
  177|       |         */
  178|  1.69k|        if (ctx->engine)
  179|      0|            ENGINE_finish(ctx->engine);
  180|  1.69k|        if (impl) {
  181|      0|            if (!ENGINE_init(impl)) {
  182|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  183|      0|                return 0;
  184|      0|            }
  185|      0|        } else
  186|       |            /* Ask if an ENGINE is reserved for this job */
  187|  1.69k|            impl = ENGINE_get_digest_engine(type->type);
  188|  1.69k|        if (impl) {
  189|       |            /* There's an ENGINE for this job ... (apparently) */
  190|      0|            const EVP_MD *d = ENGINE_get_digest(impl, type->type);
  191|      0|            if (!d) {
  192|       |                /* Same comment from evp_enc.c */
  193|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  194|      0|                ENGINE_finish(impl);
  195|      0|                return 0;
  196|      0|            }
  197|       |            /* We'll use the ENGINE's private digest definition */
  198|      0|            type = d;
  199|       |            /*
  200|       |             * Store the ENGINE functional reference so we know 'type' came
  201|       |             * from an ENGINE and we need to release it when done.
  202|       |             */
  203|      0|            ctx->engine = impl;
  204|      0|        } else
  205|  1.69k|            ctx->engine = NULL;
  206|  1.69k|    } else {
  207|      0|        if (!ctx->digest) {
  208|      0|            EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_NO_DIGEST_SET);
  209|      0|            return 0;
  210|      0|        }
  211|      0|        type = ctx->digest;
  212|      0|    }
  213|  1.69k|#endif
  214|  1.69k|    if (ctx->digest != type) {
  215|    873|        if (ctx->digest && ctx->digest->ctx_size) {
  216|      0|            OPENSSL_free(ctx->md_data);
  217|      0|            ctx->md_data = NULL;
  218|      0|        }
  219|    873|        ctx->digest = type;
  220|    873|        if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size) {
  221|    873|            ctx->update = type->update;
  222|    873|            ctx->md_data = OPENSSL_malloc(type->ctx_size);
  223|    873|            if (ctx->md_data == NULL) {
  224|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, ERR_R_MALLOC_FAILURE);
  225|      0|                return 0;
  226|      0|            }
  227|    873|        }
  228|    873|    }
  229|  1.69k|#ifndef OPENSSL_NO_ENGINE
  230|  1.69k| skip_to_init:
  231|  1.69k|#endif
  232|  1.69k|    if (ctx->pctx) {
  233|      0|        int r;
  234|      0|        r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
  235|      0|                              EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
  236|      0|        if (r <= 0 && (r != -2))
  237|      0|            return 0;
  238|      0|    }
  239|  1.69k|    if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
  240|      0|        return 1;
  241|       |#ifdef OPENSSL_FIPS
  242|       |    if (FIPS_mode()) {
  243|       |        if (FIPS_digestinit(ctx, type))
  244|       |            return 1;
  245|       |        OPENSSL_free(ctx->md_data);
  246|       |        ctx->md_data = NULL;
  247|       |        return 0;
  248|       |    }
  249|       |#endif
  250|  1.69k|    return ctx->digest->init(ctx);
  251|  1.69k|}
EVP_DigestUpdate:
  254|  6.77k|{
  255|       |#ifdef OPENSSL_FIPS
  256|       |    if (FIPS_mode())
  257|       |        return FIPS_digestupdate(ctx, data, count);
  258|       |#endif
  259|  6.77k|    return ctx->update(ctx, data, count);
  260|  6.77k|}
EVP_DigestFinal_ex:
  273|  1.69k|{
  274|  1.69k|    int ret;
  275|       |#ifdef OPENSSL_FIPS
  276|       |    if (FIPS_mode())
  277|       |        return FIPS_digestfinal(ctx, md, size);
  278|       |#endif
  279|       |
  280|  1.69k|    OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
  281|  1.69k|    ret = ctx->digest->final(ctx, md);
  282|  1.69k|    if (size != NULL)
  283|      0|        *size = ctx->digest->md_size;
  284|  1.69k|    if (ctx->digest->cleanup) {
  285|      0|        ctx->digest->cleanup(ctx);
  286|      0|        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  287|      0|    }
  288|  1.69k|    OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  289|  1.69k|    return ret;
  290|  1.69k|}
EVP_MD_CTX_cleanup:
  377|    873|{
  378|    873|#ifndef OPENSSL_FIPS
  379|       |    /*
  380|       |     * Don't assume ctx->md_data was cleaned in EVP_Digest_Final, because
  381|       |     * sometimes only copies of the context are ever finalised.
  382|       |     */
  383|    873|    if (ctx->digest && ctx->digest->cleanup
  384|    873|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_CLEANED))
  385|      0|        ctx->digest->cleanup(ctx);
  386|    873|    if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
  387|    873|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
  388|    873|        OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  389|    873|        OPENSSL_free(ctx->md_data);
  390|    873|    }
  391|    873|#endif
  392|    873|    if (ctx->pctx)
  393|      0|        EVP_PKEY_CTX_free(ctx->pctx);
  394|    873|#ifndef OPENSSL_NO_ENGINE
  395|    873|    if (ctx->engine)
  396|       |        /*
  397|       |         * The EVP_MD we used belongs to an ENGINE, release the functional
  398|       |         * reference we held for this reason.
  399|       |         */
  400|      0|        ENGINE_finish(ctx->engine);
  401|    873|#endif
  402|       |#ifdef OPENSSL_FIPS
  403|       |    FIPS_md_ctx_cleanup(ctx);
  404|       |#endif
  405|    873|    memset(ctx, '\0', sizeof *ctx);
  406|       |
  407|    873|    return 1;
  408|    873|}

EVP_aes_128_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_gcm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_wrap:
 2001|      1|{
 2002|      1|    return &aes_128_wrap;
 2003|      1|}
EVP_aes_192_wrap:
 2015|      1|{
 2016|      1|    return &aes_192_wrap;
 2017|      1|}
EVP_aes_256_wrap:
 2029|      1|{
 2030|      1|    return &aes_256_wrap;
 2031|      1|}

EVP_aes_128_cbc_hmac_sha1:
  994|      2|{
  995|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
  996|      2|            &aesni_128_cbc_hmac_sha1_cipher : NULL);
  997|      2|}
EVP_aes_256_cbc_hmac_sha1:
 1000|      2|{
 1001|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
 1002|      2|            &aesni_256_cbc_hmac_sha1_cipher : NULL);
 1003|      2|}

EVP_aes_128_cbc_hmac_sha256:
  973|      2|{
  974|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  975|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  976|      0|            &aesni_128_cbc_hmac_sha256_cipher : NULL);
  977|      2|}
EVP_aes_256_cbc_hmac_sha256:
  980|      2|{
  981|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  982|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  983|      0|            &aesni_256_cbc_hmac_sha256_cipher : NULL);
  984|      2|}

EVP_camellia_128_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cbc:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }

EVP_des_ede:
  378|      1|{
  379|      1|    return &des_ede_ecb;
  380|      1|}
EVP_des_ede3:
  383|      1|{
  384|      1|    return &des_ede3_ecb;
  385|      1|}
EVP_des_ede3_wrap:
  492|      1|{
  493|      1|    return &des3_wrap;
  494|      1|}

EVP_rc2_64_cbc:
  123|      1|{
  124|      1|    return (&r2_64_cbc_cipher);
  125|      1|}
EVP_rc2_40_cbc:
  128|      2|{
  129|      2|    return (&r2_40_cbc_cipher);
  130|      2|}

EVP_rc4:
  111|      2|{
  112|      2|    return (&r4_cipher);
  113|      2|}
EVP_rc4_40:
  116|      1|{
  117|      1|    return (&r4_40_cipher);
  118|      1|}

EVP_rc4_hmac_md5:
  309|      2|{
  310|      2|    return (&r4_hmac_md5_cipher);
  311|      2|}

EVP_desx_cbc:
   97|      1|{
   98|      1|    return (&d_xcbc_cipher);
   99|      1|}

EVP_add_alg_module:
  116|      1|{
  117|      1|    CONF_module_add("alg_section", alg_module_init, 0);
  118|      1|}

ERR_load_EVP_strings:
  247|      1|{
  248|      1|#ifndef OPENSSL_NO_ERR
  249|       |
  250|      1|    if (ERR_func_error_string(EVP_str_functs[0].error) == NULL) {
  251|      1|        ERR_load_strings(0, EVP_str_functs);
  252|      1|        ERR_load_strings(0, EVP_str_reasons);
  253|      1|    }
  254|      1|#endif
  255|      1|}

EVP_MD_size:
  311|      5|{
  312|      5|    if (!md) {
  313|      0|        EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
  314|      0|        return -1;
  315|      0|    }
  316|      5|    return md->md_size;
  317|      5|}
EVP_MD_CTX_clear_flags:
  369|  1.69k|{
  370|  1.69k|    ctx->flags &= ~flags;
  371|  1.69k|}
EVP_MD_CTX_test_flags:
  374|    873|{
  375|    873|    return (ctx->flags & flags);
  376|    873|}

EVP_dss:
  101|      1|{
  102|      1|    return (&dsa_md);
  103|      1|}

EVP_dss1:
  102|      2|{
  103|      2|    return (&dss1_md);
  104|      2|}

EVP_ecdsa:
  151|      2|{
  152|      2|    return (&ecdsa_md);
  153|      2|}

EVP_md4:
  105|      1|{
  106|      1|    return (&md4_md);
  107|      1|}

EVP_md5:
  104|      2|{
  105|      2|    return (&md5_md);
  106|      2|}

EVP_mdc2:
  105|      1|{
  106|      1|    return (&mdc2_md);
  107|      1|}

EVP_ripemd160:
  104|      1|{
  105|      1|    return (&ripemd160_md);
  106|      1|}

EVP_sha:
  103|      1|{
  104|      1|    return (&sha_md);
  105|      1|}

EVP_sha1:
  102|  1.69k|{
  103|  1.69k|    return (&sha1_md);
  104|  1.69k|}
EVP_sha224:
  149|      2|{
  150|      2|    return (&sha224_md);
  151|      2|}
EVP_sha256:
  169|      2|{
  170|      2|    return (&sha256_md);
  171|      2|}
EVP_sha384:
  212|      2|{
  213|      2|    return (&sha384_md);
  214|      2|}
EVP_sha512:
  232|      2|{
  233|      2|    return (&sha512_md);
  234|      2|}
m_sha1.c:init:
   72|  1.69k|{
   73|  1.69k|    return SHA1_Init(ctx->md_data);
   74|  1.69k|}
m_sha1.c:update:
   77|  6.77k|{
   78|  6.77k|    return SHA1_Update(ctx->md_data, data, count);
   79|  6.77k|}
m_sha1.c:final:
   82|  1.69k|{
   83|  1.69k|    return SHA1_Final(md, ctx->md_data);
   84|  1.69k|}

EVP_whirlpool:
   45|      1|{
   46|      1|    return (&whirlpool_md);
   47|      1|}

EVP_add_cipher:
   66|    122|{
   67|    122|    int r;
   68|       |
   69|    122|    if (c == NULL)
   70|      4|        return 0;
   71|       |
   72|    118|    OPENSSL_init();
   73|       |
   74|    118|    r = OBJ_NAME_add(OBJ_nid2sn(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   75|    118|                     (const char *)c);
   76|    118|    if (r == 0)
   77|      0|        return (0);
   78|    118|    check_defer(c->nid);
   79|    118|    r = OBJ_NAME_add(OBJ_nid2ln(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   80|    118|                     (const char *)c);
   81|    118|    return (r);
   82|    118|}
EVP_add_digest:
   85|     24|{
   86|     24|    int r;
   87|     24|    const char *name;
   88|     24|    OPENSSL_init();
   89|       |
   90|     24|    name = OBJ_nid2sn(md->type);
   91|     24|    r = OBJ_NAME_add(name, OBJ_NAME_TYPE_MD_METH, (const char *)md);
   92|     24|    if (r == 0)
   93|      0|        return (0);
   94|     24|    check_defer(md->type);
   95|     24|    r = OBJ_NAME_add(OBJ_nid2ln(md->type), OBJ_NAME_TYPE_MD_METH,
   96|     24|                     (const char *)md);
   97|     24|    if (r == 0)
   98|      0|        return (0);
   99|       |
  100|     24|    if (md->pkey_type && md->type != md->pkey_type) {
  101|     18|        r = OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
  102|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  103|     18|        if (r == 0)
  104|      0|            return (0);
  105|     18|        check_defer(md->pkey_type);
  106|     18|        r = OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
  107|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  108|     18|    }
  109|     24|    return (r);
  110|     24|}
EVP_get_cipherbyname:
  113|     13|{
  114|     13|    const EVP_CIPHER *cp;
  115|       |
  116|     13|    cp = (const EVP_CIPHER *)OBJ_NAME_get(name, OBJ_NAME_TYPE_CIPHER_METH);
  117|     13|    return (cp);
  118|     13|}
EVP_get_digestbyname:
  121|      6|{
  122|      6|    const EVP_MD *cp;
  123|       |
  124|      6|    cp = (const EVP_MD *)OBJ_NAME_get(name, OBJ_NAME_TYPE_MD_METH);
  125|      6|    return (cp);
  126|      6|}

EVP_PKEY_meth_new:
  201|      3|{
  202|      3|    EVP_PKEY_METHOD *pmeth;
  203|       |
  204|      3|    pmeth = OPENSSL_malloc(sizeof(EVP_PKEY_METHOD));
  205|      3|    if (!pmeth)
  206|      0|        return NULL;
  207|       |
  208|      3|    memset(pmeth, 0, sizeof(EVP_PKEY_METHOD));
  209|       |
  210|      3|    pmeth->pkey_id = id;
  211|      3|    pmeth->flags = flags | EVP_PKEY_FLAG_DYNAMIC;
  212|      3|    return pmeth;
  213|      3|}
EVP_PKEY_meth_set_init:
  450|      3|{
  451|      3|    pmeth->init = init;
  452|      3|}
EVP_PKEY_meth_set_copy:
  457|      3|{
  458|      3|    pmeth->copy = copy;
  459|      3|}
EVP_PKEY_meth_set_cleanup:
  463|      3|{
  464|      3|    pmeth->cleanup = cleanup;
  465|      3|}
EVP_PKEY_meth_set_paramgen:
  471|      2|{
  472|      2|    pmeth->paramgen_init = paramgen_init;
  473|      2|    pmeth->paramgen = paramgen;
  474|      2|}
EVP_PKEY_meth_set_keygen:
  480|      3|{
  481|      3|    pmeth->keygen_init = keygen_init;
  482|      3|    pmeth->keygen = keygen;
  483|      3|}
EVP_PKEY_meth_set_sign:
  491|      2|{
  492|      2|    pmeth->sign_init = sign_init;
  493|      2|    pmeth->sign = sign;
  494|      2|}
EVP_PKEY_meth_set_verify:
  503|      2|{
  504|      2|    pmeth->verify_init = verify_init;
  505|      2|    pmeth->verify = verify;
  506|      2|}
EVP_PKEY_meth_set_signctx:
  531|      1|{
  532|      1|    pmeth->signctx_init = signctx_init;
  533|      1|    pmeth->signctx = signctx;
  534|      1|}
EVP_PKEY_meth_set_encrypt:
  555|      2|{
  556|      2|    pmeth->encrypt_init = encrypt_init;
  557|      2|    pmeth->encrypt = encryptfn;
  558|      2|}
EVP_PKEY_meth_set_decrypt:
  567|      2|{
  568|      2|    pmeth->decrypt_init = decrypt_init;
  569|      2|    pmeth->decrypt = decrypt;
  570|      2|}
EVP_PKEY_meth_set_derive:
  577|      2|{
  578|      2|    pmeth->derive_init = derive_init;
  579|      2|    pmeth->derive = derive;
  580|      2|}
EVP_PKEY_meth_set_ctrl:
  588|      3|{
  589|      3|    pmeth->ctrl = ctrl;
  590|      3|    pmeth->ctrl_str = ctrl_str;
  591|      3|}

CRYPTO_get_ex_new_index:
  581|      4|{
  582|      4|    int ret = -1;
  583|       |
  584|      4|    IMPL_CHECK
  585|      4|        ret = EX_IMPL(get_new_index) (class_index,
  586|      4|                                      argl, argp, new_func, dup_func,
  587|      4|                                      free_func);
  588|      4|    return ret;
  589|      4|}
CRYPTO_new_ex_data:
  596|     11|{
  597|     11|    IMPL_CHECK return EX_IMPL(new_ex_data) (class_index, obj, ad);
  598|     11|}
ex_data.c:impl_check:
  200|      1|{
  201|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  202|      1|    if (!impl)
  203|      1|        impl = &impl_default;
  204|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  205|      1|}
ex_data.c:ex_data_check:
  276|      1|{
  277|      1|    int toret = 1;
  278|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  279|      1|    if (!ex_data && (ex_data = lh_EX_CLASS_ITEM_new()) == NULL)
  280|      0|        toret = 0;
  281|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  282|      1|    return toret;
  283|      1|}
ex_data.c:ex_class_item_hash:
  258|     19|{
  259|     19|    return a->class_index;
  260|     19|}
ex_data.c:ex_class_item_cmp:
  265|     15|{
  266|     15|    return a->class_index - b->class_index;
  267|     15|}
ex_data.c:int_get_new_index:
  407|      4|{
  408|      4|    EX_CLASS_ITEM *item = def_get_class(class_index);
  409|      4|    if (!item)
  410|      0|        return -1;
  411|      4|    return def_add_index(item, argl, argp, new_func, dup_func, free_func);
  412|      4|}
ex_data.c:def_get_class:
  314|     15|{
  315|     15|    EX_CLASS_ITEM d, *p, *gen;
  316|     15|    EX_DATA_CHECK(return NULL;)
  317|     15|        d.class_index = class_index;
  318|     15|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  319|     15|    p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  320|     15|    if (!p) {
  321|      2|        gen = OPENSSL_malloc(sizeof(EX_CLASS_ITEM));
  322|      2|        if (gen) {
  323|      2|            gen->class_index = class_index;
  324|      2|            gen->meth_num = 0;
  325|      2|            gen->meth = sk_CRYPTO_EX_DATA_FUNCS_new_null();
  326|      2|            if (!gen->meth)
  327|      0|                OPENSSL_free(gen);
  328|      2|            else {
  329|       |                /*
  330|       |                 * Because we're inside the ex_data lock, the return value
  331|       |                 * from the insert will be NULL
  332|       |                 */
  333|      2|                (void)lh_EX_CLASS_ITEM_insert(ex_data, gen);
  334|      2|                p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  335|      2|                if (p != gen) {
  336|      0|                    sk_CRYPTO_EX_DATA_FUNCS_free(gen->meth);
  337|      0|                    OPENSSL_free(gen);
  338|      0|                }
  339|      2|            }
  340|      2|        }
  341|      2|    }
  342|     15|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  343|     15|    if (!p)
  344|     15|        CRYPTOerr(CRYPTO_F_DEF_GET_CLASS, ERR_R_MALLOC_FAILURE);
  345|     15|    return p;
  346|     15|}
ex_data.c:def_add_index:
  355|      4|{
  356|      4|    int toret = -1;
  357|      4|    CRYPTO_EX_DATA_FUNCS *a =
  358|      4|        (CRYPTO_EX_DATA_FUNCS *)OPENSSL_malloc(sizeof(CRYPTO_EX_DATA_FUNCS));
  359|      4|    if (!a) {
  360|      0|        CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  361|      0|        return -1;
  362|      0|    }
  363|      4|    a->argl = argl;
  364|      4|    a->argp = argp;
  365|      4|    a->new_func = new_func;
  366|      4|    a->dup_func = dup_func;
  367|      4|    a->free_func = free_func;
  368|      4|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  369|      8|    while (sk_CRYPTO_EX_DATA_FUNCS_num(item->meth) <= item->meth_num) {
  370|      4|        if (!sk_CRYPTO_EX_DATA_FUNCS_push(item->meth, NULL)) {
  371|      0|            CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  372|      0|            OPENSSL_free(a);
  373|      0|            goto err;
  374|      0|        }
  375|      4|    }
  376|      4|    toret = item->meth_num++;
  377|      4|    (void)sk_CRYPTO_EX_DATA_FUNCS_set(item->meth, toret, a);
  378|      4| err:
  379|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  380|      4|    return toret;
  381|      4|}
ex_data.c:int_new_ex_data:
  421|     11|{
  422|     11|    int mx, i;
  423|     11|    void *ptr;
  424|     11|    CRYPTO_EX_DATA_FUNCS **storage = NULL;
  425|     11|    EX_CLASS_ITEM *item = def_get_class(class_index);
  426|     11|    if (!item)
  427|       |        /* error is already set */
  428|      0|        return 0;
  429|     11|    ad->sk = NULL;
  430|     11|    CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  431|     11|    mx = sk_CRYPTO_EX_DATA_FUNCS_num(item->meth);
  432|     11|    if (mx > 0) {
  433|      0|        storage = OPENSSL_malloc(mx * sizeof(CRYPTO_EX_DATA_FUNCS *));
  434|      0|        if (!storage)
  435|      0|            goto skip;
  436|      0|        for (i = 0; i < mx; i++)
  437|      0|            storage[i] = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  438|      0|    }
  439|     11| skip:
  440|     11|    CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  441|     11|    if ((mx > 0) && !storage) {
  442|      0|        CRYPTOerr(CRYPTO_F_INT_NEW_EX_DATA, ERR_R_MALLOC_FAILURE);
  443|      0|        return 0;
  444|      0|    }
  445|     11|    for (i = 0; i < mx; i++) {
  446|      0|        if (storage[i] && storage[i]->new_func) {
  447|      0|            ptr = CRYPTO_get_ex_data(ad, i);
  448|      0|            storage[i]->new_func(obj, ptr, ad, i,
  449|      0|                                 storage[i]->argl, storage[i]->argp);
  450|      0|        }
  451|      0|    }
  452|     11|    if (storage)
  453|      0|        OPENSSL_free(storage);
  454|     11|    return 1;
  455|     11|}

lh_new:
  134|    516|{
  135|    516|    _LHASH *ret;
  136|    516|    int i;
  137|       |
  138|    516|    if ((ret = OPENSSL_malloc(sizeof(_LHASH))) == NULL)
  139|      0|        goto err0;
  140|    516|    if ((ret->b = OPENSSL_malloc(sizeof(LHASH_NODE *) * MIN_NODES)) == NULL)
  141|      0|        goto err1;
  142|  8.77k|    for (i = 0; i < MIN_NODES; i++)
  143|  8.25k|        ret->b[i] = NULL;
  144|    516|    ret->comp = ((c == NULL) ? (LHASH_COMP_FN_TYPE)strcmp : c);
  145|    516|    ret->hash = ((h == NULL) ? (LHASH_HASH_FN_TYPE)lh_strhash : h);
  146|    516|    ret->num_nodes = MIN_NODES / 2;
  147|    516|    ret->num_alloc_nodes = MIN_NODES;
  148|    516|    ret->p = 0;
  149|    516|    ret->pmax = MIN_NODES / 2;
  150|    516|    ret->up_load = UP_LOAD;
  151|    516|    ret->down_load = DOWN_LOAD;
  152|    516|    ret->num_items = 0;
  153|       |
  154|    516|    ret->num_expands = 0;
  155|    516|    ret->num_expand_reallocs = 0;
  156|    516|    ret->num_contracts = 0;
  157|    516|    ret->num_contract_reallocs = 0;
  158|    516|    ret->num_hash_calls = 0;
  159|    516|    ret->num_comp_calls = 0;
  160|    516|    ret->num_insert = 0;
  161|    516|    ret->num_replace = 0;
  162|    516|    ret->num_delete = 0;
  163|    516|    ret->num_no_delete = 0;
  164|    516|    ret->num_retrieve = 0;
  165|    516|    ret->num_retrieve_miss = 0;
  166|    516|    ret->num_hash_comps = 0;
  167|       |
  168|    516|    ret->error = 0;
  169|    516|    return (ret);
  170|      0| err1:
  171|      0|    OPENSSL_free(ret);
  172|      0| err0:
  173|      0|    return (NULL);
  174|      0|}
lh_free:
  177|    506|{
  178|    506|    unsigned int i;
  179|    506|    LHASH_NODE *n, *nn;
  180|       |
  181|    506|    if (lh == NULL)
  182|      0|        return;
  183|       |
  184|  4.55k|    for (i = 0; i < lh->num_nodes; i++) {
  185|  4.04k|        n = lh->b[i];
  186|  4.04k|        while (n != NULL) {
  187|      0|            nn = n->next;
  188|      0|            OPENSSL_free(n);
  189|      0|            n = nn;
  190|      0|        }
  191|  4.04k|    }
  192|    506|    OPENSSL_free(lh->b);
  193|    506|    OPENSSL_free(lh);
  194|    506|}
lh_insert:
  197|  19.9k|{
  198|  19.9k|    unsigned long hash;
  199|  19.9k|    LHASH_NODE *nn, **rn;
  200|  19.9k|    void *ret;
  201|       |
  202|  19.9k|    lh->error = 0;
  203|  19.9k|    if (lh->up_load <= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)
  204|  19.9k|            && !expand(lh))
  205|      0|        return NULL;
  206|       |
  207|  19.9k|    rn = getrn(lh, data, &hash);
  208|       |
  209|  19.9k|    if (*rn == NULL) {
  210|  3.72k|        if ((nn = (LHASH_NODE *)OPENSSL_malloc(sizeof(LHASH_NODE))) == NULL) {
  211|      0|            lh->error++;
  212|      0|            return (NULL);
  213|      0|        }
  214|  3.72k|        nn->data = data;
  215|  3.72k|        nn->next = NULL;
  216|  3.72k|#ifndef OPENSSL_NO_HASH_COMP
  217|  3.72k|        nn->hash = hash;
  218|  3.72k|#endif
  219|  3.72k|        *rn = nn;
  220|  3.72k|        ret = NULL;
  221|  3.72k|        lh->num_insert++;
  222|  3.72k|        lh->num_items++;
  223|  16.2k|    } else {                    /* replace same key */
  224|       |
  225|  16.2k|        ret = (*rn)->data;
  226|  16.2k|        (*rn)->data = data;
  227|  16.2k|        lh->num_replace++;
  228|  16.2k|    }
  229|  19.9k|    return (ret);
  230|  19.9k|}
lh_delete:
  233|    506|{
  234|    506|    unsigned long hash;
  235|    506|    LHASH_NODE *nn, **rn;
  236|    506|    void *ret;
  237|       |
  238|    506|    lh->error = 0;
  239|    506|    rn = getrn(lh, data, &hash);
  240|       |
  241|    506|    if (*rn == NULL) {
  242|      0|        lh->num_no_delete++;
  243|      0|        return (NULL);
  244|    506|    } else {
  245|    506|        nn = *rn;
  246|    506|        *rn = nn->next;
  247|    506|        ret = nn->data;
  248|    506|        OPENSSL_free(nn);
  249|    506|        lh->num_delete++;
  250|    506|    }
  251|       |
  252|    506|    lh->num_items--;
  253|    506|    if ((lh->num_nodes > MIN_NODES) &&
  254|    506|        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))
  255|      0|        contract(lh);
  256|       |
  257|    506|    return (ret);
  258|    506|}
lh_retrieve:
  261|  5.21k|{
  262|  5.21k|    unsigned long hash;
  263|  5.21k|    LHASH_NODE **rn;
  264|  5.21k|    void *ret;
  265|       |
  266|  5.21k|    lh->error = 0;
  267|  5.21k|    rn = getrn(lh, data, &hash);
  268|       |
  269|  5.21k|    if (*rn == NULL) {
  270|  1.73k|        lh->num_retrieve_miss++;
  271|  1.73k|        return (NULL);
  272|  3.48k|    } else {
  273|  3.48k|        ret = (*rn)->data;
  274|  3.48k|        lh->num_retrieve++;
  275|  3.48k|    }
  276|  3.48k|    return (ret);
  277|  5.21k|}
lh_strhash:
  447|    388|{
  448|    388|    unsigned long ret = 0;
  449|    388|    long n;
  450|    388|    unsigned long v;
  451|    388|    int r;
  452|       |
  453|    388|    if ((c == NULL) || (*c == '\0'))
  454|      0|        return (ret);
  455|       |/*-
  456|       |    unsigned char b[16];
  457|       |    MD5(c,strlen(c),b);
  458|       |    return(b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<24));
  459|       |*/
  460|       |
  461|    388|    n = 0x100;
  462|  4.39k|    while (*c) {
  463|  4.00k|        v = n | (*c);
  464|  4.00k|        n += 0x100;
  465|  4.00k|        r = (int)((v >> 2) ^ v) & 0x0f;
  466|  4.00k|        ret = (ret << r) | (ret >> (32 - r));
  467|  4.00k|        ret &= 0xFFFFFFFFL;
  468|  4.00k|        ret ^= v * v;
  469|  4.00k|        c++;
  470|  4.00k|    }
  471|    388|    return ((ret >> 16) ^ ret);
  472|    388|}
lh_num_items:
  475|    506|{
  476|    506|    return lh ? lh->num_items : 0;
  477|    506|}
lhash.c:expand:
  323|  1.58k|{
  324|  1.58k|    LHASH_NODE **n, **n1, **n2, *np;
  325|  1.58k|    unsigned int p, pmax, nni, j;
  326|  1.58k|    unsigned long hash;
  327|       |
  328|  1.58k|    nni = lh->num_alloc_nodes;
  329|  1.58k|    p = lh->p;
  330|  1.58k|    pmax = lh->pmax;
  331|  1.58k|    if (p + 1 >= pmax) {
  332|     11|        j = nni * 2;
  333|     11|        n = OPENSSL_realloc(lh->b, (int)(sizeof(LHASH_NODE *) * j));
  334|     11|        if (n == NULL) {
  335|      0|            lh->error++;
  336|      0|            return 0;
  337|      0|        }
  338|     11|        lh->b = n;
  339|     11|        memset(n + nni, 0, sizeof(*n) * (j - nni));
  340|     11|        lh->pmax = nni;
  341|     11|        lh->num_alloc_nodes = j;
  342|     11|        lh->num_expand_reallocs++;
  343|     11|        lh->p = 0;
  344|  1.57k|    } else {
  345|  1.57k|        lh->p++;
  346|  1.57k|    }
  347|       |
  348|  1.58k|    lh->num_nodes++;
  349|  1.58k|    lh->num_expands++;
  350|  1.58k|    n1 = &(lh->b[p]);
  351|  1.58k|    n2 = &(lh->b[p + pmax]);
  352|  1.58k|    *n2 = NULL;
  353|       |
  354|  7.20k|    for (np = *n1; np != NULL;) {
  355|  5.61k|#ifndef OPENSSL_NO_HASH_COMP
  356|  5.61k|        hash = np->hash;
  357|       |#else
  358|       |        hash = lh->hash(np->data);
  359|       |        lh->num_hash_calls++;
  360|       |#endif
  361|  5.61k|        if ((hash % nni) != p) { /* move it */
  362|    558|            *n1 = (*n1)->next;
  363|    558|            np->next = *n2;
  364|    558|            *n2 = np;
  365|    558|        } else
  366|  5.05k|            n1 = &((*n1)->next);
  367|  5.61k|        np = *n1;
  368|  5.61k|    }
  369|       |
  370|  1.58k|    return 1;
  371|  1.58k|}
lhash.c:getrn:
  410|  25.6k|{
  411|  25.6k|    LHASH_NODE **ret, *n1;
  412|  25.6k|    unsigned long hash, nn;
  413|  25.6k|    LHASH_COMP_FN_TYPE cf;
  414|       |
  415|  25.6k|    hash = (*(lh->hash)) (data);
  416|  25.6k|    lh->num_hash_calls++;
  417|  25.6k|    *rhash = hash;
  418|       |
  419|  25.6k|    nn = hash % lh->pmax;
  420|  25.6k|    if (nn < lh->p)
  421|  11.6k|        nn = hash % lh->num_alloc_nodes;
  422|       |
  423|  25.6k|    cf = lh->comp;
  424|  25.6k|    ret = &(lh->b[(int)nn]);
  425|  50.8k|    for (n1 = *ret; n1 != NULL; n1 = n1->next) {
  426|  45.4k|#ifndef OPENSSL_NO_HASH_COMP
  427|  45.4k|        lh->num_hash_comps++;
  428|  45.4k|        if (n1->hash != hash) {
  429|  24.1k|            ret = &(n1->next);
  430|  24.1k|            continue;
  431|  24.1k|        }
  432|  21.2k|#endif
  433|  21.2k|        lh->num_comp_calls++;
  434|  21.2k|        if (cf(n1->data, data) == 0)
  435|  20.2k|            break;
  436|  1.06k|        ret = &(n1->next);
  437|  1.06k|    }
  438|  25.6k|    return (ret);
  439|  25.6k|}

CRYPTO_malloc:
  333|  6.61k|{
  334|  6.61k|    void *ret = NULL;
  335|       |
  336|  6.61k|    if (num <= 0)
  337|      0|        return NULL;
  338|       |
  339|  6.61k|    if (allow_customize)
  340|      1|        allow_customize = 0;
  341|  6.61k|    if (malloc_debug_func != NULL) {
  342|      0|        if (allow_customize_debug)
  343|      0|            allow_customize_debug = 0;
  344|      0|        malloc_debug_func(NULL, num, file, line, 0);
  345|      0|    }
  346|  6.61k|    ret = malloc_ex_func(num, file, line);
  347|       |#ifdef LEVITTE_DEBUG_MEM
  348|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         > 0x%p (%d)\n", ret, num);
  349|       |#endif
  350|  6.61k|    if (malloc_debug_func != NULL)
  351|      0|        malloc_debug_func(ret, num, file, line, 1);
  352|       |
  353|  6.61k|    return ret;
  354|  6.61k|}
CRYPTO_realloc:
  368|     23|{
  369|     23|    void *ret = NULL;
  370|       |
  371|     23|    if (str == NULL)
  372|      0|        return CRYPTO_malloc(num, file, line);
  373|       |
  374|     23|    if (num <= 0)
  375|      0|        return NULL;
  376|       |
  377|     23|    if (realloc_debug_func != NULL)
  378|      0|        realloc_debug_func(str, NULL, num, file, line, 0);
  379|     23|    ret = realloc_ex_func(str, num, file, line);
  380|       |#ifdef LEVITTE_DEBUG_MEM
  381|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         | 0x%p -> 0x%p (%d)\n", str,
  382|       |            ret, num);
  383|       |#endif
  384|     23|    if (realloc_debug_func != NULL)
  385|      0|        realloc_debug_func(str, ret, num, file, line, 1);
  386|       |
  387|     23|    return ret;
  388|     23|}
CRYPTO_free:
  428|  3.00k|{
  429|  3.00k|    if (free_debug_func != NULL)
  430|      0|        free_debug_func(str, 0);
  431|       |#ifdef LEVITTE_DEBUG_MEM
  432|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         < 0x%p\n", str);
  433|       |#endif
  434|  3.00k|    free_func(str);
  435|  3.00k|    if (free_debug_func != NULL)
  436|      0|        free_debug_func(NULL, 1);
  437|  3.00k|}
mem.c:default_malloc_ex:
   78|  6.61k|{
   79|  6.61k|    return malloc_func(num);
   80|  6.61k|}
mem.c:default_realloc_ex:
   96|     23|{
   97|     23|    return realloc_func(str, num);
   98|     23|}

CRYPTO_mem_ctrl:
  209|      4|{
  210|      4|    int ret = mh_mode;
  211|       |
  212|      4|    CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  213|      4|    switch (mode) {
  214|       |        /*
  215|       |         * for applications (not to be called while multiple threads use the
  216|       |         * library):
  217|       |         */
  218|      0|    case CRYPTO_MEM_CHECK_ON:  /* aka MemCheck_start() */
  219|      0|        mh_mode = CRYPTO_MEM_CHECK_ON | CRYPTO_MEM_CHECK_ENABLE;
  220|      0|        num_disable = 0;
  221|      0|        break;
  222|      0|    case CRYPTO_MEM_CHECK_OFF: /* aka MemCheck_stop() */
  223|      0|        mh_mode = 0;
  224|      0|        num_disable = 0;        /* should be true *before* MemCheck_stop is
  225|       |                                 * used, or there'll be a lot of confusion */
  226|      0|        break;
  227|       |
  228|       |        /* switch off temporarily (for library-internal use): */
  229|      2|    case CRYPTO_MEM_CHECK_DISABLE: /* aka MemCheck_off() */
  230|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  231|      0|            CRYPTO_THREADID cur;
  232|      0|            CRYPTO_THREADID_current(&cur);
  233|       |            /* see if we don't have the MALLOC2 lock already */
  234|      0|            if (!num_disable
  235|      0|                || CRYPTO_THREADID_cmp(&disabling_threadid, &cur)) {
  236|       |                /*
  237|       |                 * Long-time lock CRYPTO_LOCK_MALLOC2 must not be claimed
  238|       |                 * while we're holding CRYPTO_LOCK_MALLOC, or we'll deadlock
  239|       |                 * if somebody else holds CRYPTO_LOCK_MALLOC2 (and cannot
  240|       |                 * release it because we block entry to this function). Give
  241|       |                 * them a chance, first, and then claim the locks in
  242|       |                 * appropriate order (long-time lock first).
  243|       |                 */
  244|      0|                CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  245|       |                /*
  246|       |                 * Note that after we have waited for CRYPTO_LOCK_MALLOC2 and
  247|       |                 * CRYPTO_LOCK_MALLOC, we'll still be in the right "case" and
  248|       |                 * "if" branch because MemCheck_start and MemCheck_stop may
  249|       |                 * never be used while there are multiple OpenSSL threads.
  250|       |                 */
  251|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC2);
  252|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  253|      0|                mh_mode &= ~CRYPTO_MEM_CHECK_ENABLE;
  254|      0|                CRYPTO_THREADID_cpy(&disabling_threadid, &cur);
  255|      0|            }
  256|      0|            num_disable++;
  257|      0|        }
  258|      2|        break;
  259|      2|    case CRYPTO_MEM_CHECK_ENABLE: /* aka MemCheck_on() */
  260|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  261|      0|            if (num_disable) {  /* always true, or something is going wrong */
  262|      0|                num_disable--;
  263|      0|                if (num_disable == 0) {
  264|      0|                    mh_mode |= CRYPTO_MEM_CHECK_ENABLE;
  265|      0|                    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC2);
  266|      0|                }
  267|      0|            }
  268|      0|        }
  269|      2|        break;
  270|       |
  271|      0|    default:
  272|      0|        break;
  273|      4|    }
  274|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  275|      4|    return (ret);
  276|      4|}
CRYPTO_is_mem_check_on:
  279|  1.01k|{
  280|  1.01k|    int ret = 0;
  281|       |
  282|  1.01k|    if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  283|      0|        CRYPTO_THREADID cur;
  284|      0|        CRYPTO_THREADID_current(&cur);
  285|      0|        CRYPTO_r_lock(CRYPTO_LOCK_MALLOC);
  286|       |
  287|      0|        ret = (mh_mode & CRYPTO_MEM_CHECK_ENABLE)
  288|      0|            || CRYPTO_THREADID_cmp(&disabling_threadid, &cur);
  289|       |
  290|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_MALLOC);
  291|      0|    }
  292|  1.01k|    return (ret);
  293|  1.01k|}
CRYPTO_push_info_:
  390|    507|{
  391|    507|    APP_INFO *ami, *amim;
  392|    507|    int ret = 0;
  393|       |
  394|    507|    if (is_MemCheck_on()) {
  395|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  396|       |
  397|      0|        if ((ami = (APP_INFO *)OPENSSL_malloc(sizeof(APP_INFO))) == NULL) {
  398|      0|            ret = 0;
  399|      0|            goto err;
  400|      0|        }
  401|      0|        if (amih == NULL) {
  402|      0|            if ((amih = lh_APP_INFO_new()) == NULL) {
  403|      0|                OPENSSL_free(ami);
  404|      0|                ret = 0;
  405|      0|                goto err;
  406|      0|            }
  407|      0|        }
  408|       |
  409|      0|        CRYPTO_THREADID_current(&ami->threadid);
  410|      0|        ami->file = file;
  411|      0|        ami->line = line;
  412|      0|        ami->info = info;
  413|      0|        ami->references = 1;
  414|      0|        ami->next = NULL;
  415|       |
  416|      0|        if ((amim = lh_APP_INFO_insert(amih, ami)) != NULL) {
  417|       |#ifdef LEVITTE_DEBUG_MEM
  418|       |            if (CRYPTO_THREADID_cmp(&ami->threadid, &amim->threadid)) {
  419|       |                fprintf(stderr,
  420|       |                        "CRYPTO_push_info(): previous info has other thread ID (%lu) than the current thread (%lu)!!!!\n",
  421|       |                        CRYPTO_THREADID_hash(&amim->threadid),
  422|       |                        CRYPTO_THREADID_hash(&ami->threadid));
  423|       |                abort();
  424|       |            }
  425|       |#endif
  426|      0|            ami->next = amim;
  427|      0|        }
  428|      0| err:
  429|      0|        MemCheck_on();          /* release MALLOC2 lock */
  430|      0|    }
  431|       |
  432|    507|    return (ret);
  433|    507|}
CRYPTO_pop_info:
  436|    507|{
  437|    507|    int ret = 0;
  438|       |
  439|    507|    if (is_MemCheck_on()) {     /* _must_ be true, or something went severely
  440|       |                                 * wrong */
  441|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  442|       |
  443|      0|        ret = (pop_info() != NULL);
  444|       |
  445|      0|        MemCheck_on();          /* release MALLOC2 lock */
  446|      0|    }
  447|    507|    return (ret);
  448|    507|}

OPENSSL_init:
   69|    142|{
   70|    142|    static int done = 0;
   71|    142|    if (done)
   72|    141|        return;
   73|      1|    done = 1;
   74|       |#ifdef OPENSSL_FIPS
   75|       |    FIPS_set_locking_callbacks(CRYPTO_lock, CRYPTO_add_lock);
   76|       |# ifndef OPENSSL_NO_DEPRECATED
   77|       |    FIPS_crypto_set_id_callback(CRYPTO_thread_id);
   78|       |# endif
   79|       |    FIPS_set_error_callbacks(ERR_put_error, ERR_add_error_vdata);
   80|       |    FIPS_set_malloc_callbacks(CRYPTO_malloc, CRYPTO_free);
   81|       |    RAND_init_fips();
   82|       |#endif
   83|       |#if 0
   84|       |    fprintf(stderr, "Called OPENSSL_init\n");
   85|       |#endif
   86|      1|}

o_names.c:obj_name_LHASH_HASH:
  105|    388|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|    388|                const o_type *a = arg; \
  107|    388|                return name##_hash(a); }
o_names.c:obj_name_LHASH_COMP:
  114|     97|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     97|                const o_type *a = arg1;             \
  116|     97|                const o_type *b = arg2; \
  117|     97|                return name##_cmp(a,b); }

OBJ_NAME_init:
   57|      1|{
   58|      1|    if (names_lh != NULL)
   59|      0|        return (1);
   60|      1|    MemCheck_off();
   61|      1|    names_lh = lh_OBJ_NAME_new();
   62|      1|    MemCheck_on();
   63|      1|    return (names_lh != NULL);
   64|      1|}
OBJ_NAME_get:
  151|     19|{
  152|     19|    OBJ_NAME on, *ret;
  153|     19|    int num = 0, alias;
  154|       |
  155|     19|    if (name == NULL)
  156|      0|        return (NULL);
  157|     19|    if ((names_lh == NULL) && !OBJ_NAME_init())
  158|      0|        return (NULL);
  159|       |
  160|     19|    alias = type & OBJ_NAME_ALIAS;
  161|     19|    type &= ~OBJ_NAME_ALIAS;
  162|       |
  163|     19|    on.name = name;
  164|     19|    on.type = type;
  165|       |
  166|     19|    for (;;) {
  167|     19|        ret = lh_OBJ_NAME_retrieve(names_lh, &on);
  168|     19|        if (ret == NULL)
  169|      0|            return (NULL);
  170|     19|        if ((ret->alias) && !alias) {
  171|      0|            if (++num > 10)
  172|      0|                return (NULL);
  173|      0|            on.name = ret->data;
  174|     19|        } else {
  175|     19|            return (ret->data);
  176|     19|        }
  177|     19|    }
  178|     19|}
OBJ_NAME_add:
  181|    369|{
  182|    369|    OBJ_NAME *onp, *ret;
  183|    369|    int alias;
  184|       |
  185|    369|    if ((names_lh == NULL) && !OBJ_NAME_init())
  186|      0|        return (0);
  187|       |
  188|    369|    alias = type & OBJ_NAME_ALIAS;
  189|    369|    type &= ~OBJ_NAME_ALIAS;
  190|       |
  191|    369|    onp = (OBJ_NAME *)OPENSSL_malloc(sizeof(OBJ_NAME));
  192|    369|    if (onp == NULL) {
  193|       |        /* ERROR */
  194|      0|        return 0;
  195|      0|    }
  196|       |
  197|    369|    onp->name = name;
  198|    369|    onp->alias = alias;
  199|    369|    onp->type = type;
  200|    369|    onp->data = data;
  201|       |
  202|    369|    ret = lh_OBJ_NAME_insert(names_lh, onp);
  203|    369|    if (ret != NULL) {
  204|       |        /* free things */
  205|     78|        if ((name_funcs_stack != NULL)
  206|     78|            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {
  207|       |            /*
  208|       |             * XXX: I'm not sure I understand why the free function should
  209|       |             * get three arguments... -- Richard Levitte
  210|       |             */
  211|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  212|      0|                                ret->type)->free_func(ret->name, ret->type,
  213|      0|                                                      ret->data);
  214|      0|        }
  215|     78|        OPENSSL_free(ret);
  216|    291|    } else {
  217|    291|        if (lh_OBJ_NAME_error(names_lh)) {
  218|       |            /* ERROR */
  219|      0|            OPENSSL_free(onp);
  220|      0|            return 0;
  221|      0|        }
  222|    291|    }
  223|    369|    return 1;
  224|    369|}
o_names.c:obj_name_hash:
  134|    388|{
  135|    388|    unsigned long ret;
  136|    388|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  137|       |
  138|    388|    if ((name_funcs_stack != NULL)
  139|    388|        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  140|      0|        ret =
  141|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  142|      0|                                a->type)->hash_func(a->name);
  143|    388|    } else {
  144|    388|        ret = lh_strhash(a->name);
  145|    388|    }
  146|    388|    ret ^= a->type;
  147|    388|    return (ret);
  148|    388|}
o_names.c:obj_name_cmp:
  115|     97|{
  116|     97|    int ret;
  117|     97|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  118|     97|    const OBJ_NAME *b = (const OBJ_NAME *)b_void;
  119|       |
  120|     97|    ret = a->type - b->type;
  121|     97|    if (ret == 0) {
  122|     97|        if ((name_funcs_stack != NULL)
  123|     97|            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  124|      0|            ret = sk_NAME_FUNCS_value(name_funcs_stack,
  125|      0|                                      a->type)->cmp_func(a->name, b->name);
  126|      0|        } else
  127|     97|            ret = strcmp(a->name, b->name);
  128|     97|    }
  129|     97|    return (ret);
  130|     97|}

check_defer:
  229|    160|{
  230|    160|    if (!obj_cleanup_defer && nid >= NUM_NID)
  231|      0|        obj_cleanup_defer = 1;
  232|    160|}
OBJ_nid2sn:
  341|    160|{
  342|    160|    ADDED_OBJ ad, *adp;
  343|    160|    ASN1_OBJECT ob;
  344|       |
  345|    160|    if ((n >= 0) && (n < NUM_NID)) {
  346|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  347|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  348|      0|            return (NULL);
  349|      0|        }
  350|    160|        return (nid_objs[n].sn);
  351|    160|    } else if (added == NULL)
  352|      0|        return (NULL);
  353|      0|    else {
  354|      0|        ad.type = ADDED_NID;
  355|      0|        ad.obj = &ob;
  356|      0|        ob.nid = n;
  357|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  358|      0|        if (adp != NULL)
  359|      0|            return (adp->obj->sn);
  360|      0|        else {
  361|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  362|      0|            return (NULL);
  363|      0|        }
  364|      0|    }
  365|    160|}
OBJ_nid2ln:
  368|    160|{
  369|    160|    ADDED_OBJ ad, *adp;
  370|    160|    ASN1_OBJECT ob;
  371|       |
  372|    160|    if ((n >= 0) && (n < NUM_NID)) {
  373|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  374|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  375|      0|            return (NULL);
  376|      0|        }
  377|    160|        return (nid_objs[n].ln);
  378|    160|    } else if (added == NULL)
  379|      0|        return (NULL);
  380|      0|    else {
  381|      0|        ad.type = ADDED_NID;
  382|      0|        ad.obj = &ob;
  383|      0|        ob.nid = n;
  384|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  385|      0|        if (adp != NULL)
  386|      0|            return (adp->obj->ln);
  387|      0|        else {
  388|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  389|      0|            return (NULL);
  390|      0|        }
  391|      0|    }
  392|    160|}

ERR_load_OBJ_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(OBJ_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, OBJ_str_functs);
   97|      1|        ERR_load_strings(0, OBJ_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

ERR_load_OCSP_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(OCSP_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, OCSP_str_functs);
  146|      1|        ERR_load_strings(0, OCSP_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PEM_strings:
  161|      1|{
  162|      1|#ifndef OPENSSL_NO_ERR
  163|       |
  164|      1|    if (ERR_func_error_string(PEM_str_functs[0].error) == NULL) {
  165|      1|        ERR_load_strings(0, PEM_str_functs);
  166|      1|        ERR_load_strings(0, PEM_str_reasons);
  167|      1|    }
  168|      1|#endif
  169|      1|}

ERR_load_PKCS12_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(PKCS12_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, PKCS12_str_functs);
  146|      1|        ERR_load_strings(0, PKCS12_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PKCS7_strings:
  199|      1|{
  200|      1|#ifndef OPENSSL_NO_ERR
  201|       |
  202|      1|    if (ERR_func_error_string(PKCS7_str_functs[0].error) == NULL) {
  203|      1|        ERR_load_strings(0, PKCS7_str_functs);
  204|      1|        ERR_load_strings(0, PKCS7_str_reasons);
  205|      1|    }
  206|      1|#endif
  207|      1|}

RAND_SSLeay:
  177|      1|{
  178|      1|    return (&rand_ssleay_meth);
  179|      1|}
ssleay_rand_bytes:
  344|    817|{
  345|    817|    static volatile int stirred_pool = 0;
  346|    817|    int i, j, k;
  347|    817|    size_t num_ceil, st_idx, st_num;
  348|    817|    int ok;
  349|    817|    long md_c[2];
  350|    817|    unsigned char local_md[MD_DIGEST_LENGTH];
  351|    817|    EVP_MD_CTX m;
  352|    817|#ifndef GETPID_IS_MEANINGLESS
  353|    817|    pid_t curr_pid = getpid();
  354|    817|#endif
  355|    817|    int do_stir_pool = 0;
  356|       |
  357|       |#ifdef PREDICT
  358|       |    if (rand_predictable) {
  359|       |        static unsigned char val = 0;
  360|       |
  361|       |        for (i = 0; i < num; i++)
  362|       |            buf[i] = val++;
  363|       |        return (1);
  364|       |    }
  365|       |#endif
  366|       |
  367|    817|    if (num <= 0)
  368|      0|        return 1;
  369|       |
  370|    817|    EVP_MD_CTX_init(&m);
  371|       |    /* round upwards to multiple of MD_DIGEST_LENGTH/2 */
  372|    817|    num_ceil =
  373|    817|        (1 + (num - 1) / (MD_DIGEST_LENGTH / 2)) * (MD_DIGEST_LENGTH / 2);
  374|       |
  375|       |    /*
  376|       |     * (Based on the rand(3) manpage:)
  377|       |     *
  378|       |     * For each group of 10 bytes (or less), we do the following:
  379|       |     *
  380|       |     * Input into the hash function the local 'md' (which is initialized from
  381|       |     * the global 'md' before any bytes are generated), the bytes that are to
  382|       |     * be overwritten by the random bytes, and bytes from the 'state'
  383|       |     * (incrementing looping index). From this digest output (which is kept
  384|       |     * in 'md'), the top (up to) 10 bytes are returned to the caller and the
  385|       |     * bottom 10 bytes are xored into the 'state'.
  386|       |     *
  387|       |     * Finally, after we have finished 'num' random bytes for the
  388|       |     * caller, 'count' (which is incremented) and the local and global 'md'
  389|       |     * are fed into the hash function and the results are kept in the
  390|       |     * global 'md'.
  391|       |     */
  392|    817|    if (lock)
  393|    817|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  394|       |
  395|       |    /* prevent ssleay_rand_bytes() from trying to obtain the lock again */
  396|    817|    CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  397|    817|    CRYPTO_THREADID_current(&locking_threadid);
  398|    817|    CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  399|    817|    crypto_lock_rand = 1;
  400|       |
  401|    817|    if (!initialized) {
  402|      0|        RAND_poll();
  403|      0|        initialized = 1;
  404|      0|    }
  405|       |
  406|    817|    if (!stirred_pool)
  407|      1|        do_stir_pool = 1;
  408|       |
  409|    817|    ok = (entropy >= ENTROPY_NEEDED);
  410|    817|    if (!ok) {
  411|       |        /*
  412|       |         * If the PRNG state is not yet unpredictable, then seeing the PRNG
  413|       |         * output may help attackers to determine the new state; thus we have
  414|       |         * to decrease the entropy estimate. Once we've had enough initial
  415|       |         * seeding we don't bother to adjust the entropy count, though,
  416|       |         * because we're not ambitious to provide *information-theoretic*
  417|       |         * randomness. NOTE: This approach fails if the program forks before
  418|       |         * we have enough entropy. Entropy should be collected in a separate
  419|       |         * input pool and be transferred to the output pool only when the
  420|       |         * entropy limit has been reached.
  421|       |         */
  422|      0|        entropy -= num;
  423|      0|        if (entropy < 0)
  424|      0|            entropy = 0;
  425|      0|    }
  426|       |
  427|    817|    if (do_stir_pool) {
  428|       |        /*
  429|       |         * In the output function only half of 'md' remains secret, so we
  430|       |         * better make sure that the required entropy gets 'evenly
  431|       |         * distributed' through 'state', our randomness pool. The input
  432|       |         * function (ssleay_rand_add) chains all of 'md', which makes it more
  433|       |         * suitable for this purpose.
  434|       |         */
  435|       |
  436|      1|        int n = STATE_SIZE;     /* so that the complete pool gets accessed */
  437|     53|        while (n > 0) {
  438|       |#if MD_DIGEST_LENGTH > 20
  439|       |# error "Please adjust DUMMY_SEED."
  440|       |#endif
  441|     52|#define DUMMY_SEED "...................." /* at least MD_DIGEST_LENGTH */
  442|       |            /*
  443|       |             * Note that the seed does not matter, it's just that
  444|       |             * ssleay_rand_add expects to have something to hash.
  445|       |             */
  446|     52|            ssleay_rand_add(DUMMY_SEED, MD_DIGEST_LENGTH, 0.0);
  447|     52|            n -= MD_DIGEST_LENGTH;
  448|     52|        }
  449|      1|        if (ok)
  450|      1|            stirred_pool = 1;
  451|      1|    }
  452|       |
  453|    817|    st_idx = state_index;
  454|    817|    st_num = state_num;
  455|    817|    md_c[0] = md_count[0];
  456|    817|    md_c[1] = md_count[1];
  457|    817|    memcpy(local_md, md, sizeof md);
  458|       |
  459|    817|    state_index += num_ceil;
  460|    817|    if (state_index > state_num)
  461|      8|        state_index %= state_num;
  462|       |
  463|       |    /*
  464|       |     * state[st_idx], ..., state[(st_idx + num_ceil - 1) % st_num] are now
  465|       |     * ours (but other threads may use them too)
  466|       |     */
  467|       |
  468|    817|    md_count[0] += 1;
  469|       |
  470|       |    /* before unlocking, we must clear 'crypto_lock_rand' */
  471|    817|    crypto_lock_rand = 0;
  472|    817|    if (lock)
  473|    817|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  474|       |
  475|  1.63k|    while (num > 0) {
  476|       |        /* num_ceil -= MD_DIGEST_LENGTH/2 */
  477|    817|        j = (num >= MD_DIGEST_LENGTH / 2) ? MD_DIGEST_LENGTH / 2 : num;
  478|    817|        num -= j;
  479|    817|        if (!MD_Init(&m))
  480|      0|           goto err;
  481|    817|#ifndef GETPID_IS_MEANINGLESS
  482|    817|        if (curr_pid) {         /* just in the first iteration to save time */
  483|    817|            if (!MD_Update(&m, (unsigned char *)&curr_pid, sizeof curr_pid))
  484|      0|                goto err;
  485|    817|            curr_pid = 0;
  486|    817|        }
  487|    817|#endif
  488|    817|        if (!MD_Update(&m, local_md, MD_DIGEST_LENGTH) ||
  489|    817|            !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)))
  490|      0|            goto err;
  491|       |
  492|    817|#ifndef PURIFY                  /* purify complains */
  493|       |        /*
  494|       |         * The following line uses the supplied buffer as a small source of
  495|       |         * entropy: since this buffer is often uninitialised it may cause
  496|       |         * programs such as purify or valgrind to complain. So for those
  497|       |         * builds it is not used: the removal of such a small source of
  498|       |         * entropy has negligible impact on security.
  499|       |         */
  500|    817|        if (!MD_Update(&m, buf, j))
  501|      0|            goto err;
  502|    817|#endif
  503|       |
  504|    817|        k = (st_idx + MD_DIGEST_LENGTH / 2) - st_num;
  505|    817|        if (k > 0) {
  506|      8|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2 - k) ||
  507|      8|                !MD_Update(&m, &(state[0]), k))
  508|      0|                goto err;
  509|    809|        } else {
  510|    809|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2))
  511|      0|                goto err;
  512|    809|        }
  513|    817|        if (!MD_Final(&m, local_md))
  514|      0|            goto err;
  515|       |
  516|  8.98k|        for (i = 0; i < MD_DIGEST_LENGTH / 2; i++) {
  517|       |            /* may compete with other threads */
  518|  8.17k|            state[st_idx++] ^= local_md[i];
  519|  8.17k|            if (st_idx >= st_num)
  520|      9|                st_idx = 0;
  521|  8.17k|            if (i < j)
  522|  3.26k|                *(buf++) = local_md[i + MD_DIGEST_LENGTH / 2];
  523|  8.17k|        }
  524|    817|    }
  525|       |
  526|    817|    if (!MD_Init(&m) ||
  527|    817|        !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  528|    817|        !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  529|      0|        goto err;
  530|    817|    if (lock)
  531|    817|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  532|    817|    if (!MD_Update(&m, md, MD_DIGEST_LENGTH) ||
  533|    817|        !MD_Final(&m, md)) {
  534|      0|        if (lock)
  535|      0|            CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  536|      0|        goto err;
  537|      0|    }
  538|    817|    if (lock)
  539|    817|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  540|       |
  541|    817|    EVP_MD_CTX_cleanup(&m);
  542|    817|    if (ok)
  543|    817|        return (1);
  544|      0|    else if (pseudo)
  545|      0|        return 0;
  546|      0|    else {
  547|      0|        RANDerr(RAND_F_SSLEAY_RAND_BYTES, RAND_R_PRNG_NOT_SEEDED);
  548|      0|        ERR_add_error_data(1, "You need to read the OpenSSL FAQ, "
  549|      0|                           "http://www.openssl.org/support/faq.html");
  550|      0|        return (0);
  551|      0|    }
  552|       |
  553|      0| err:
  554|      0|    EVP_MD_CTX_cleanup(&m);
  555|      0|    return (0);
  556|    817|}
md_rand.c:ssleay_rand_add:
  194|     56|{
  195|     56|    int i, j, k, st_idx;
  196|     56|    long md_c[2];
  197|     56|    unsigned char local_md[MD_DIGEST_LENGTH];
  198|     56|    EVP_MD_CTX m;
  199|     56|    int do_not_lock;
  200|       |
  201|     56|    if (!num)
  202|      0|        return;
  203|       |
  204|       |    /*
  205|       |     * (Based on the rand(3) manpage)
  206|       |     *
  207|       |     * The input is chopped up into units of 20 bytes (or less for
  208|       |     * the last block).  Each of these blocks is run through the hash
  209|       |     * function as follows:  The data passed to the hash function
  210|       |     * is the current 'md', the same number of bytes from the 'state'
  211|       |     * (the location determined by in incremented looping index) as
  212|       |     * the current 'block', the new key data 'block', and 'count'
  213|       |     * (which is incremented after each use).
  214|       |     * The result of this is kept in 'md' and also xored into the
  215|       |     * 'state' at the same locations that were used as input into the
  216|       |     * hash function.
  217|       |     */
  218|       |
  219|       |    /* check if we already have the lock */
  220|     56|    if (crypto_lock_rand) {
  221|     56|        CRYPTO_THREADID cur;
  222|     56|        CRYPTO_THREADID_current(&cur);
  223|     56|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  224|     56|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  225|     56|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  226|     56|    } else
  227|      0|        do_not_lock = 0;
  228|       |
  229|     56|    if (!do_not_lock)
  230|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  231|     56|    st_idx = state_index;
  232|       |
  233|       |    /*
  234|       |     * use our own copies of the counters so that even if a concurrent thread
  235|       |     * seeds with exactly the same data and uses the same subarray there's
  236|       |     * _some_ difference
  237|       |     */
  238|     56|    md_c[0] = md_count[0];
  239|     56|    md_c[1] = md_count[1];
  240|       |
  241|     56|    memcpy(local_md, md, sizeof md);
  242|       |
  243|       |    /* state_index <= state_num <= STATE_SIZE */
  244|     56|    state_index += num;
  245|     56|    if (state_index >= STATE_SIZE) {
  246|      1|        state_index %= STATE_SIZE;
  247|      1|        state_num = STATE_SIZE;
  248|     55|    } else if (state_num < STATE_SIZE) {
  249|     52|        if (state_index > state_num)
  250|     52|            state_num = state_index;
  251|     52|    }
  252|       |    /* state_index <= state_num <= STATE_SIZE */
  253|       |
  254|       |    /*
  255|       |     * state[st_idx], ..., state[(st_idx + num - 1) % STATE_SIZE] are what we
  256|       |     * will use now, but other threads may use them as well
  257|       |     */
  258|       |
  259|     56|    md_count[1] += (num / MD_DIGEST_LENGTH) + (num % MD_DIGEST_LENGTH > 0);
  260|       |
  261|     56|    if (!do_not_lock)
  262|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  263|       |
  264|     56|    EVP_MD_CTX_init(&m);
  265|    113|    for (i = 0; i < num; i += MD_DIGEST_LENGTH) {
  266|     57|        j = (num - i);
  267|     57|        j = (j > MD_DIGEST_LENGTH) ? MD_DIGEST_LENGTH : j;
  268|       |
  269|     57|        if (!MD_Init(&m) ||
  270|     57|            !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  271|      0|            goto err;
  272|     57|        k = (st_idx + j) - STATE_SIZE;
  273|     57|        if (k > 0) {
  274|      1|            if (!MD_Update(&m, &(state[st_idx]), j - k) ||
  275|      1|                !MD_Update(&m, &(state[0]), k))
  276|      0|                goto err;
  277|      1|        } else
  278|     56|            if (!MD_Update(&m, &(state[st_idx]), j))
  279|      0|                goto err;
  280|       |
  281|       |        /* DO NOT REMOVE THE FOLLOWING CALL TO MD_Update()! */
  282|     57|        if (!MD_Update(&m, buf, j))
  283|      0|            goto err;
  284|       |        /*
  285|       |         * We know that line may cause programs such as purify and valgrind
  286|       |         * to complain about use of uninitialized data.  The problem is not,
  287|       |         * it's with the caller.  Removing that line will make sure you get
  288|       |         * really bad randomness and thereby other problems such as very
  289|       |         * insecure keys.
  290|       |         */
  291|       |
  292|     57|        if (!MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  293|     57|            !MD_Final(&m, local_md))
  294|      0|            goto err;
  295|     57|        md_c[1]++;
  296|       |
  297|     57|        buf = (const char *)buf + j;
  298|       |
  299|  1.15k|        for (k = 0; k < j; k++) {
  300|       |            /*
  301|       |             * Parallel threads may interfere with this, but always each byte
  302|       |             * of the new state is the XOR of some previous value of its and
  303|       |             * local_md (itermediate values may be lost). Alway using locking
  304|       |             * could hurt performance more than necessary given that
  305|       |             * conflicts occur only when the total seeding is longer than the
  306|       |             * random state.
  307|       |             */
  308|  1.09k|            state[st_idx++] ^= local_md[k];
  309|  1.09k|            if (st_idx >= STATE_SIZE)
  310|      1|                st_idx = 0;
  311|  1.09k|        }
  312|     57|    }
  313|       |
  314|     56|    if (!do_not_lock)
  315|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  316|       |    /*
  317|       |     * Don't just copy back local_md into md -- this could mean that other
  318|       |     * thread's seeding remains without effect (except for the incremented
  319|       |     * counter).  By XORing it we keep at least as much entropy as fits into
  320|       |     * md.
  321|       |     */
  322|  1.17k|    for (k = 0; k < (int)sizeof(md); k++) {
  323|  1.12k|        md[k] ^= local_md[k];
  324|  1.12k|    }
  325|     56|    if (entropy < ENTROPY_NEEDED) /* stop counting when we have enough */
  326|      1|        entropy += add;
  327|     56|    if (!do_not_lock)
  328|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  329|       |
  330|       |#if !defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32)
  331|       |    assert(md_c[1] == md_count[1]);
  332|       |#endif
  333|       |
  334|     56| err:
  335|     56|    EVP_MD_CTX_cleanup(&m);
  336|     56|}
md_rand.c:ssleay_rand_nopseudo_bytes:
  559|    817|{
  560|    817|    return ssleay_rand_bytes(buf, num, 0, 1);
  561|    817|}
md_rand.c:ssleay_rand_status:
  572|    817|{
  573|    817|    CRYPTO_THREADID cur;
  574|    817|    int ret;
  575|    817|    int do_not_lock;
  576|       |
  577|    817|    CRYPTO_THREADID_current(&cur);
  578|       |    /*
  579|       |     * check if we already have the lock (could happen if a RAND_poll()
  580|       |     * implementation calls RAND_status())
  581|       |     */
  582|    817|    if (crypto_lock_rand) {
  583|      0|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  584|      0|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  585|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  586|      0|    } else
  587|    817|        do_not_lock = 0;
  588|       |
  589|    817|    if (!do_not_lock) {
  590|    817|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  591|       |
  592|       |        /*
  593|       |         * prevent ssleay_rand_bytes() from trying to obtain the lock again
  594|       |         */
  595|    817|        CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  596|    817|        CRYPTO_THREADID_cpy(&locking_threadid, &cur);
  597|    817|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  598|    817|        crypto_lock_rand = 1;
  599|    817|    }
  600|       |
  601|    817|    if (!initialized) {
  602|      1|        RAND_poll();
  603|      1|        initialized = 1;
  604|      1|    }
  605|       |
  606|    817|    ret = entropy >= ENTROPY_NEEDED;
  607|       |
  608|    817|    if (!do_not_lock) {
  609|       |        /* before unlocking, we must clear 'crypto_lock_rand' */
  610|    817|        crypto_lock_rand = 0;
  611|       |
  612|    817|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  613|    817|    }
  614|       |
  615|    817|    return ret;
  616|    817|}

ERR_load_RAND_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(RAND_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, RAND_str_functs);
   97|      1|        ERR_load_strings(0, RAND_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

RAND_get_rand_method:
   93|  1.63k|{
   94|  1.63k|    if (!default_RAND_meth) {
   95|      1|#ifndef OPENSSL_NO_ENGINE
   96|      1|        ENGINE *e = ENGINE_get_default_RAND();
   97|      1|        if (e) {
   98|      0|            default_RAND_meth = ENGINE_get_RAND(e);
   99|      0|            if (!default_RAND_meth) {
  100|      0|                ENGINE_finish(e);
  101|      0|                e = NULL;
  102|      0|            }
  103|      0|        }
  104|      1|        if (e)
  105|      0|            funct_ref = e;
  106|      1|        else
  107|      1|#endif
  108|      1|            default_RAND_meth = RAND_SSLeay();
  109|      1|    }
  110|  1.63k|    return default_RAND_meth;
  111|  1.63k|}
RAND_add:
  149|      4|{
  150|      4|    const RAND_METHOD *meth = RAND_get_rand_method();
  151|      4|    if (meth && meth->add)
  152|      4|        meth->add(buf, num, entropy);
  153|      4|}
RAND_bytes:
  156|    817|{
  157|    817|    const RAND_METHOD *meth = RAND_get_rand_method();
  158|    817|    if (meth && meth->bytes)
  159|    817|        return meth->bytes(buf, num);
  160|      0|    return (-1);
  161|    817|}
RAND_status:
  172|    817|{
  173|    817|    const RAND_METHOD *meth = RAND_get_rand_method();
  174|    817|    if (meth && meth->status)
  175|    817|        return meth->status();
  176|      0|    return 0;
  177|    817|}

RAND_poll:
  244|      1|{
  245|      1|    unsigned long l;
  246|      1|    pid_t curr_pid = getpid();
  247|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  248|      1|    unsigned char tmpbuf[ENTROPY_NEEDED];
  249|      1|    int n = 0;
  250|      1|#  endif
  251|      1|#  ifdef DEVRANDOM
  252|      1|    static const char *randomfiles[] = { DEVRANDOM };
  253|      1|    struct stat randomstats[sizeof(randomfiles) / sizeof(randomfiles[0])];
  254|      1|    int fd;
  255|      1|    unsigned int i;
  256|      1|#  endif
  257|      1|#  ifdef DEVRANDOM_EGD
  258|      1|    static const char *egdsockets[] = { DEVRANDOM_EGD, NULL };
  259|      1|    const char **egdsocket = NULL;
  260|      1|#  endif
  261|       |
  262|      1|#  ifdef DEVRANDOM
  263|      1|    memset(randomstats, 0, sizeof(randomstats));
  264|       |    /*
  265|       |     * Use a random entropy pool device. Linux, FreeBSD and OpenBSD have
  266|       |     * this. Use /dev/urandom if you can as /dev/random may block if it runs
  267|       |     * out of random entries.
  268|       |     */
  269|       |
  270|      2|    for (i = 0; (i < sizeof(randomfiles) / sizeof(randomfiles[0])) &&
  271|      2|         (n < ENTROPY_NEEDED); i++) {
  272|      1|        if ((fd = open(randomfiles[i], O_RDONLY
  273|      1|#   ifdef O_NONBLOCK
  274|      1|                       | O_NONBLOCK
  275|      1|#   endif
  276|       |#   ifdef O_BINARY
  277|       |                       | O_BINARY
  278|       |#   endif
  279|      1|#   ifdef O_NOCTTY              /* If it happens to be a TTY (god forbid), do
  280|       |                                 * not make it our controlling tty */
  281|      1|                       | O_NOCTTY
  282|      1|#   endif
  283|      1|             )) >= 0) {
  284|      1|            int usec = 10 * 1000; /* spend 10ms on each file */
  285|      1|            int r;
  286|      1|            unsigned int j;
  287|      1|            struct stat *st = &randomstats[i];
  288|       |
  289|       |            /*
  290|       |             * Avoid using same input... Used to be O_NOFOLLOW above, but
  291|       |             * it's not universally appropriate...
  292|       |             */
  293|      1|            if (fstat(fd, st) != 0) {
  294|      0|                close(fd);
  295|      0|                continue;
  296|      0|            }
  297|      1|            for (j = 0; j < i; j++) {
  298|      0|                if (randomstats[j].st_ino == st->st_ino &&
  299|      0|                    randomstats[j].st_dev == st->st_dev)
  300|      0|                    break;
  301|      0|            }
  302|      1|            if (j < i) {
  303|      0|                close(fd);
  304|      0|                continue;
  305|      0|            }
  306|       |
  307|      1|            do {
  308|      1|                int try_read = 0;
  309|       |
  310|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  311|       |                /*
  312|       |                 * select() is broken in BeOS R5, so we simply try to read
  313|       |                 * something and snooze if we couldn't
  314|       |                 */
  315|       |                try_read = 1;
  316|       |
  317|       |#   elif defined(OPENSSL_SYS_LINUX)
  318|       |                /* use poll() */
  319|      1|                struct pollfd pset;
  320|       |
  321|      1|                pset.fd = fd;
  322|      1|                pset.events = POLLIN;
  323|      1|                pset.revents = 0;
  324|       |
  325|      1|                if (poll(&pset, 1, usec / 1000) < 0)
  326|      0|                    usec = 0;
  327|      1|                else
  328|      1|                    try_read = (pset.revents & POLLIN) != 0;
  329|       |
  330|       |#   else
  331|       |                /* use select() */
  332|       |                fd_set fset;
  333|       |                struct timeval t;
  334|       |
  335|       |                t.tv_sec = 0;
  336|       |                t.tv_usec = usec;
  337|       |
  338|       |                if (FD_SETSIZE > 0 && (unsigned)fd >= FD_SETSIZE) {
  339|       |                    /*
  340|       |                     * can't use select, so just try to read once anyway
  341|       |                     */
  342|       |                    try_read = 1;
  343|       |                } else {
  344|       |                    FD_ZERO(&fset);
  345|       |                    FD_SET(fd, &fset);
  346|       |
  347|       |                    if (select(fd + 1, &fset, NULL, NULL, &t) >= 0) {
  348|       |                        usec = t.tv_usec;
  349|       |                        if (FD_ISSET(fd, &fset))
  350|       |                            try_read = 1;
  351|       |                    } else
  352|       |                        usec = 0;
  353|       |                }
  354|       |#   endif
  355|       |
  356|      1|                if (try_read) {
  357|      1|                    r = read(fd, (unsigned char *)tmpbuf + n,
  358|      1|                             ENTROPY_NEEDED - n);
  359|      1|                    if (r > 0)
  360|      1|                        n += r;
  361|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  362|       |                    if (r == 0)
  363|       |                        snooze(t.tv_usec);
  364|       |#   endif
  365|      1|                } else
  366|      0|                    r = -1;
  367|       |
  368|       |                /*
  369|       |                 * Some Unixen will update t in select(), some won't.  For
  370|       |                 * those who won't, or if we didn't use select() in the first
  371|       |                 * place, give up here, otherwise, we will do this once again
  372|       |                 * for the remaining time.
  373|       |                 */
  374|      1|                if (usec == 10 * 1000)
  375|      1|                    usec = 0;
  376|      1|            }
  377|      1|            while ((r > 0 ||
  378|      1|                    (errno == EINTR || errno == EAGAIN)) && usec != 0
  379|      1|                   && n < ENTROPY_NEEDED);
  380|       |
  381|      1|            close(fd);
  382|      1|        }
  383|      1|    }
  384|      1|#  endif                        /* defined(DEVRANDOM) */
  385|       |
  386|      1|#  ifdef DEVRANDOM_EGD
  387|       |    /*
  388|       |     * Use an EGD socket to read entropy from an EGD or PRNGD entropy
  389|       |     * collecting daemon.
  390|       |     */
  391|       |
  392|      1|    for (egdsocket = egdsockets; *egdsocket && n < ENTROPY_NEEDED;
  393|      1|         egdsocket++) {
  394|      0|        int r;
  395|       |
  396|      0|        r = RAND_query_egd_bytes(*egdsocket, (unsigned char *)tmpbuf + n,
  397|      0|                                 ENTROPY_NEEDED - n);
  398|      0|        if (r > 0)
  399|      0|            n += r;
  400|      0|    }
  401|      1|#  endif                        /* defined(DEVRANDOM_EGD) */
  402|       |
  403|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  404|      1|    if (n > 0) {
  405|      1|        RAND_add(tmpbuf, sizeof tmpbuf, (double)n);
  406|      1|        OPENSSL_cleanse(tmpbuf, n);
  407|      1|    }
  408|      1|#  endif
  409|       |
  410|       |    /* put in some default random data, we need more than just this */
  411|      1|    l = curr_pid;
  412|      1|    RAND_add(&l, sizeof(l), 0.0);
  413|      1|    l = getuid();
  414|      1|    RAND_add(&l, sizeof(l), 0.0);
  415|       |
  416|      1|    l = time(NULL);
  417|      1|    RAND_add(&l, sizeof(l), 0.0);
  418|       |
  419|       |#  if defined(OPENSSL_SYS_BEOS)
  420|       |    {
  421|       |        system_info sysInfo;
  422|       |        get_system_info(&sysInfo);
  423|       |        RAND_add(&sysInfo, sizeof(sysInfo), 0);
  424|       |    }
  425|       |#  endif
  426|       |
  427|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  428|      1|    return 1;
  429|       |#  else
  430|       |    return 0;
  431|       |#  endif
  432|      1|}

RSA_PKCS1_SSLeay:
  151|      7|{
  152|      7|    return (&rsa_pkcs1_eay_meth);
  153|      7|}

ERR_load_RSA_strings:
  239|      1|{
  240|      1|#ifndef OPENSSL_NO_ERR
  241|       |
  242|      1|    if (ERR_func_error_string(RSA_str_functs[0].error) == NULL) {
  243|      1|        ERR_load_strings(0, RSA_str_functs);
  244|      1|        ERR_load_strings(0, RSA_str_reasons);
  245|      1|    }
  246|      1|#endif
  247|      1|}

SHA1_Update:
  303|  6.77k|{
  304|  6.77k|    const unsigned char *data = data_;
  305|  6.77k|    unsigned char *p;
  306|  6.77k|    HASH_LONG l;
  307|  6.77k|    size_t n;
  308|       |
  309|  6.77k|    if (len == 0)
  310|      1|        return 1;
  311|       |
  312|  6.77k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  6.77k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  6.77k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  6.77k|    c->Nl = l;
  322|       |
  323|  6.77k|    n = c->num;
  324|  6.77k|    if (n != 0) {
  325|  5.08k|        p = (unsigned char *)c->data;
  326|       |
  327|  5.08k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|     53|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|     53|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|     53|            n = HASH_CBLOCK - n;
  331|     53|            data += n;
  332|     53|            len -= n;
  333|     53|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|     53|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  5.02k|        } else {
  342|  5.02k|            memcpy(p + n, data, len);
  343|  5.02k|            c->num += (unsigned int)len;
  344|  5.02k|            return 1;
  345|  5.02k|        }
  346|  5.08k|    }
  347|       |
  348|  1.74k|    n = len / HASH_CBLOCK;
  349|  1.74k|    if (n > 0) {
  350|      0|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|      0|        n *= HASH_CBLOCK;
  352|      0|        data += n;
  353|      0|        len -= n;
  354|      0|    }
  355|       |
  356|  1.74k|    if (len != 0) {
  357|  1.74k|        p = (unsigned char *)c->data;
  358|  1.74k|        c->num = (unsigned int)len;
  359|  1.74k|        memcpy(p, data, len);
  360|  1.74k|    }
  361|  1.74k|    return 1;
  362|  6.77k|}
SHA1_Final:
  370|  1.69k|{
  371|  1.69k|    unsigned char *p = (unsigned char *)c->data;
  372|  1.69k|    size_t n = c->num;
  373|       |
  374|  1.69k|    p[n] = 0x80;                /* there is always room for one */
  375|  1.69k|    n++;
  376|       |
  377|  1.69k|    if (n > (HASH_CBLOCK - 8)) {
  378|    818|        memset(p + n, 0, HASH_CBLOCK - n);
  379|    818|        n = 0;
  380|    818|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|    818|    }
  382|  1.69k|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|  1.69k|    p += HASH_CBLOCK - 8;
  385|  1.69k|#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|  1.69k|    (void)HOST_l2c(c->Nh, p);
  387|  1.69k|    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|       |    (void)HOST_l2c(c->Nl, p);
  390|       |    (void)HOST_l2c(c->Nh, p);
  391|       |#endif
  392|  1.69k|    p -= HASH_CBLOCK;
  393|  1.69k|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|  1.69k|    c->num = 0;
  395|  1.69k|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|  1.69k|    HASH_MAKE_STRING(c, md);
  401|  1.69k|#endif
  402|       |
  403|  1.69k|    return 1;
  404|  1.69k|}

SHA1_Init:
  130|  1.69k|{
  131|  1.69k|    memset(c, 0, sizeof(*c));
  132|  1.69k|    c->h0 = INIT_DATA_h0;
  133|  1.69k|    c->h1 = INIT_DATA_h1;
  134|  1.69k|    c->h2 = INIT_DATA_h2;
  135|  1.69k|    c->h3 = INIT_DATA_h3;
  136|  1.69k|    c->h4 = INIT_DATA_h4;
  137|  1.69k|    return 1;
  138|  1.69k|}

sk_new_null:
  153|     19|{
  154|     19|    return sk_new((int (*)(const void *, const void *))0);
  155|     19|}
sk_new:
  158|     20|{
  159|     20|    _STACK *ret;
  160|     20|    int i;
  161|       |
  162|     20|    if ((ret = OPENSSL_malloc(sizeof(_STACK))) == NULL)
  163|      0|        goto err;
  164|     20|    if ((ret->data = OPENSSL_malloc(sizeof(char *) * MIN_NODES)) == NULL)
  165|      0|        goto err;
  166|    100|    for (i = 0; i < MIN_NODES; i++)
  167|     80|        ret->data[i] = NULL;
  168|     20|    ret->comp = c;
  169|     20|    ret->num_alloc = MIN_NODES;
  170|     20|    ret->num = 0;
  171|     20|    ret->sorted = 0;
  172|     20|    return (ret);
  173|      0| err:
  174|      0|    if (ret)
  175|      0|        OPENSSL_free(ret);
  176|      0|    return (NULL);
  177|     20|}
sk_insert:
  180|     54|{
  181|     54|    char **s;
  182|       |
  183|     54|    if (st == NULL)
  184|      0|        return 0;
  185|     54|    if (st->num_alloc <= st->num + 1) {
  186|      8|        s = OPENSSL_realloc((char *)st->data,
  187|      8|                            (unsigned int)sizeof(char *) * st->num_alloc * 2);
  188|      8|        if (s == NULL)
  189|      0|            return (0);
  190|      8|        st->data = s;
  191|      8|        st->num_alloc *= 2;
  192|      8|    }
  193|     54|    if ((loc >= (int)st->num) || (loc < 0))
  194|     47|        st->data[st->num] = data;
  195|      7|    else {
  196|      7|        int i;
  197|      7|        char **f, **t;
  198|       |
  199|      7|        f = st->data;
  200|      7|        t = &(st->data[1]);
  201|     42|        for (i = st->num; i >= loc; i--)
  202|     35|            t[i] = f[i];
  203|       |
  204|       |#ifdef undef                    /* no memmove on sunos :-( */
  205|       |        memmove(&(st->data[loc + 1]),
  206|       |                &(st->data[loc]), sizeof(char *) * (st->num - loc));
  207|       |#endif
  208|      7|        st->data[loc] = data;
  209|      7|    }
  210|     54|    st->num++;
  211|     54|    st->sorted = 0;
  212|     54|    return (st->num);
  213|     54|}
sk_delete_ptr:
  216|     39|{
  217|     39|    int i;
  218|       |
  219|    109|    for (i = 0; i < st->num; i++)
  220|     77|        if (st->data[i] == p)
  221|      7|            return (sk_delete(st, i));
  222|     32|    return (NULL);
  223|     39|}
sk_delete:
  226|      7|{
  227|      7|    char *ret;
  228|      7|    int i, j;
  229|       |
  230|      7|    if (!st || (loc < 0) || (loc >= st->num))
  231|      0|        return NULL;
  232|       |
  233|      7|    ret = st->data[loc];
  234|      7|    if (loc != st->num - 1) {
  235|      0|        j = st->num - 1;
  236|      0|        for (i = loc; i < j; i++)
  237|      0|            st->data[i] = st->data[i + 1];
  238|       |        /*
  239|       |         * In theory memcpy is not safe for this memcpy( &(st->data[loc]),
  240|       |         * &(st->data[loc+1]), sizeof(char *)*(st->num-loc-1));
  241|       |         */
  242|      0|    }
  243|      7|    st->num--;
  244|      7|    return (ret);
  245|      7|}
sk_push:
  282|     47|{
  283|     47|    return (sk_insert(st, data, st->num));
  284|     47|}
sk_free:
  332|      4|{
  333|      4|    if (st == NULL)
  334|      0|        return;
  335|      4|    if (st->data != NULL)
  336|      4|        OPENSSL_free(st->data);
  337|      4|    OPENSSL_free(st);
  338|      4|}
sk_num:
  341|     23|{
  342|     23|    if (st == NULL)
  343|      0|        return -1;
  344|     23|    return st->num;
  345|     23|}
sk_value:
  348|      5|{
  349|      5|    if (!st || (i < 0) || (i >= st->num))
  350|      1|        return NULL;
  351|      4|    return st->data[i];
  352|      5|}
sk_set:
  355|      4|{
  356|      4|    if (!st || (i < 0) || (i >= st->num))
  357|      0|        return NULL;
  358|      4|    return (st->data[i] = value);
  359|      4|}
sk_sort:
  362|      1|{
  363|      1|    if (st && !st->sorted && st->comp != NULL) {
  364|      1|        int (*comp_func) (const void *, const void *);
  365|       |
  366|       |        /*
  367|       |         * same comment as in sk_find ... previously st->comp was declared as
  368|       |         * a (void*,void*) callback type, but this made the population of the
  369|       |         * callback pointer illogical - our callbacks compare type** with
  370|       |         * type**, so we leave the casting until absolutely necessary (ie.
  371|       |         * "now").
  372|       |         */
  373|      1|        comp_func = (int (*)(const void *, const void *))(st->comp);
  374|      1|        qsort(st->data, st->num, sizeof(char *), comp_func);
  375|      1|        st->sorted = 1;
  376|      1|    }
  377|      1|}

ERR_load_TS_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(TS_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, TS_str_functs);
  185|      1|        ERR_load_strings(0, TS_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_UI_strings:
  103|      1|{
  104|      1|#ifndef OPENSSL_NO_ERR
  105|       |
  106|      1|    if (ERR_func_error_string(UI_str_functs[0].error) == NULL) {
  107|      1|        ERR_load_strings(0, UI_str_functs);
  108|      1|        ERR_load_strings(0, UI_str_reasons);
  109|      1|    }
  110|      1|#endif
  111|      1|}

X509_get_default_cert_area:
   70|      2|{
   71|      2|    return (X509_CERT_AREA);
   72|      2|}

ERR_load_X509_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(X509_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, X509_str_functs);
  185|      1|        ERR_load_strings(0, X509_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_X509V3_strings:
  241|      1|{
  242|      1|#ifndef OPENSSL_NO_ERR
  243|       |
  244|      1|    if (ERR_func_error_string(X509V3_str_functs[0].error) == NULL) {
  245|      1|        ERR_load_strings(0, X509V3_str_functs);
  246|      1|        ERR_load_strings(0, X509V3_str_reasons);
  247|      1|    }
  248|      1|#endif
  249|      1|}

ERR_load_GOST_strings:
  183|      1|{
  184|      1|    if (GOST_lib_error_code == 0)
  185|      1|        GOST_lib_error_code = ERR_get_next_error_library();
  186|       |
  187|      1|    if (GOST_error_init) {
  188|      1|        GOST_error_init = 0;
  189|      1|#ifndef OPENSSL_NO_ERR
  190|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_functs);
  191|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_reasons);
  192|      1|#endif
  193|       |
  194|       |#ifdef GOST_LIB_NAME
  195|       |        GOST_lib_name->error = ERR_PACK(GOST_lib_error_code, 0, 0);
  196|       |        ERR_load_strings(0, GOST_lib_name);
  197|       |#endif
  198|      1|    }
  199|      1|}

register_ameth_gost:
  912|      3|{
  913|      3|    *ameth = EVP_PKEY_asn1_new(nid, ASN1_PKEY_SIGPARAM_NULL, pemstr, info);
  914|      3|    if (!*ameth)
  915|      0|        return 0;
  916|      3|    switch (nid) {
  917|      1|    case NID_id_GostR3410_94:
  918|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost94);
  919|      1|        EVP_PKEY_asn1_set_private(*ameth,
  920|      1|                                  priv_decode_gost, priv_encode_gost,
  921|      1|                                  priv_print_gost94);
  922|       |
  923|      1|        EVP_PKEY_asn1_set_param(*ameth,
  924|      1|                                gost94_param_decode, gost94_param_encode,
  925|      1|                                param_missing_gost94, param_copy_gost94,
  926|      1|                                param_cmp_gost94, param_print_gost94);
  927|      1|        EVP_PKEY_asn1_set_public(*ameth,
  928|      1|                                 pub_decode_gost94, pub_encode_gost94,
  929|      1|                                 pub_cmp_gost94, pub_print_gost94,
  930|      1|                                 pkey_size_gost, pkey_bits_gost);
  931|       |
  932|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  933|      1|        break;
  934|      1|    case NID_id_GostR3410_2001:
  935|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost01);
  936|      1|        EVP_PKEY_asn1_set_private(*ameth,
  937|      1|                                  priv_decode_gost, priv_encode_gost,
  938|      1|                                  priv_print_gost01);
  939|       |
  940|      1|        EVP_PKEY_asn1_set_param(*ameth,
  941|      1|                                gost2001_param_decode, gost2001_param_encode,
  942|      1|                                param_missing_gost01, param_copy_gost01,
  943|      1|                                param_cmp_gost01, param_print_gost01);
  944|      1|        EVP_PKEY_asn1_set_public(*ameth,
  945|      1|                                 pub_decode_gost01, pub_encode_gost01,
  946|      1|                                 pub_cmp_gost01, pub_print_gost01,
  947|      1|                                 pkey_size_gost, pkey_bits_gost);
  948|       |
  949|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  950|      1|        break;
  951|      1|    case NID_id_Gost28147_89_MAC:
  952|      1|        EVP_PKEY_asn1_set_free(*ameth, mackey_free_gost);
  953|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, mac_ctrl_gost);
  954|      1|        break;
  955|      3|    }
  956|      3|    return 1;
  957|      3|}

ENGINE_load_gost:
  270|      1|{
  271|      1|    ENGINE *toadd;
  272|      1|    if (pmeth_GostR3410_94)
  273|      0|        return;
  274|      1|    toadd = engine_gost();
  275|      1|    if (!toadd)
  276|      0|        return;
  277|      1|    ENGINE_add(toadd);
  278|      1|    ENGINE_free(toadd);
  279|      1|    ERR_clear_error();
  280|      1|}
gost_eng.c:engine_gost:
  258|      1|{
  259|      1|    ENGINE *ret = ENGINE_new();
  260|      1|    if (!ret)
  261|      0|        return NULL;
  262|      1|    if (!bind_gost(ret, engine_gost_id)) {
  263|      0|        ENGINE_free(ret);
  264|      0|        return NULL;
  265|      0|    }
  266|      1|    return ret;
  267|      1|}
gost_eng.c:bind_gost:
   75|      1|{
   76|      1|    int ret = 0;
   77|      1|    if (id && strcmp(id, engine_gost_id))
   78|      0|        return 0;
   79|      1|    if (ameth_GostR3410_94) {
   80|      0|        printf("GOST engine already loaded\n");
   81|      0|        goto end;
   82|      0|    }
   83|       |
   84|      1|    if (!ENGINE_set_id(e, engine_gost_id)) {
   85|      0|        printf("ENGINE_set_id failed\n");
   86|      0|        goto end;
   87|      0|    }
   88|      1|    if (!ENGINE_set_name(e, engine_gost_name)) {
   89|      0|        printf("ENGINE_set_name failed\n");
   90|      0|        goto end;
   91|      0|    }
   92|      1|    if (!ENGINE_set_digests(e, gost_digests)) {
   93|      0|        printf("ENGINE_set_digests failed\n");
   94|      0|        goto end;
   95|      0|    }
   96|      1|    if (!ENGINE_set_ciphers(e, gost_ciphers)) {
   97|      0|        printf("ENGINE_set_ciphers failed\n");
   98|      0|        goto end;
   99|      0|    }
  100|      1|    if (!ENGINE_set_pkey_meths(e, gost_pkey_meths)) {
  101|      0|        printf("ENGINE_set_pkey_meths failed\n");
  102|      0|        goto end;
  103|      0|    }
  104|      1|    if (!ENGINE_set_pkey_asn1_meths(e, gost_pkey_asn1_meths)) {
  105|      0|        printf("ENGINE_set_pkey_asn1_meths failed\n");
  106|      0|        goto end;
  107|      0|    }
  108|       |    /* Control function and commands */
  109|      1|    if (!ENGINE_set_cmd_defns(e, gost_cmds)) {
  110|      0|        fprintf(stderr, "ENGINE_set_cmd_defns failed\n");
  111|      0|        goto end;
  112|      0|    }
  113|      1|    if (!ENGINE_set_ctrl_function(e, gost_control_func)) {
  114|      0|        fprintf(stderr, "ENGINE_set_ctrl_func failed\n");
  115|      0|        goto end;
  116|      0|    }
  117|      1|    if (!ENGINE_set_destroy_function(e, gost_engine_destroy)
  118|      1|        || !ENGINE_set_init_function(e, gost_engine_init)
  119|      1|        || !ENGINE_set_finish_function(e, gost_engine_finish)) {
  120|      0|        goto end;
  121|      0|    }
  122|       |
  123|      1|    if (!register_ameth_gost
  124|      1|        (NID_id_GostR3410_94, &ameth_GostR3410_94, "GOST94",
  125|      1|         "GOST R 34.10-94"))
  126|      0|        goto end;
  127|      1|    if (!register_ameth_gost
  128|      1|        (NID_id_GostR3410_2001, &ameth_GostR3410_2001, "GOST2001",
  129|      1|         "GOST R 34.10-2001"))
  130|      0|        goto end;
  131|      1|    if (!register_ameth_gost(NID_id_Gost28147_89_MAC, &ameth_Gost28147_MAC,
  132|      1|                             "GOST-MAC", "GOST 28147-89 MAC"))
  133|      0|        goto end;
  134|       |
  135|      1|    if (!register_pmeth_gost(NID_id_GostR3410_94, &pmeth_GostR3410_94, 0))
  136|      0|        goto end;
  137|      1|    if (!register_pmeth_gost(NID_id_GostR3410_2001, &pmeth_GostR3410_2001, 0))
  138|      0|        goto end;
  139|      1|    if (!register_pmeth_gost
  140|      1|        (NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))
  141|      0|        goto end;
  142|      1|    if (!ENGINE_register_ciphers(e)
  143|      1|        || !ENGINE_register_digests(e)
  144|      1|        || !ENGINE_register_pkey_meths(e)
  145|       |        /* These two actually should go in LIST_ADD command */
  146|      1|        || !EVP_add_cipher(&cipher_gost)
  147|      1|        || !EVP_add_cipher(&cipher_gost_cpacnt)
  148|      1|        || !EVP_add_digest(&digest_gost)
  149|      1|        || !EVP_add_digest(&imit_gost_cpa)
  150|      1|        ) {
  151|      0|        goto end;
  152|      0|    }
  153|       |
  154|      1|    ERR_load_GOST_strings();
  155|      1|    ret = 1;
  156|      1| end:
  157|      1|    return ret;
  158|      1|}
gost_eng.c:gost_digests:
  166|      2|{
  167|      2|    int ok = 1;
  168|      2|    if (!digest) {
  169|      2|        *nids = gost_digest_nids;
  170|      2|        return 2;
  171|      2|    }
  172|       |    /*
  173|       |     * printf("Digest no %d requested\n",nid);
  174|       |     */
  175|      0|    if (nid == NID_id_GostR3411_94) {
  176|      0|        *digest = &digest_gost;
  177|      0|    } else if (nid == NID_id_Gost28147_89_MAC) {
  178|      0|        *digest = &imit_gost_cpa;
  179|      0|    } else {
  180|      0|        ok = 0;
  181|      0|        *digest = NULL;
  182|      0|    }
  183|      0|    return ok;
  184|      2|}
gost_eng.c:gost_ciphers:
  188|      2|{
  189|      2|    int ok = 1;
  190|      2|    if (!cipher) {
  191|      2|        *nids = gost_cipher_nids;
  192|      2|        return 2;               /* two ciphers are supported */
  193|      2|    }
  194|       |
  195|      0|    if (nid == NID_id_Gost28147_89) {
  196|      0|        *cipher = &cipher_gost;
  197|      0|    } else if (nid == NID_gost89_cnt) {
  198|      0|        *cipher = &cipher_gost_cpacnt;
  199|      0|    } else {
  200|      0|        ok = 0;
  201|      0|        *cipher = NULL;
  202|      0|    }
  203|      0|    return ok;
  204|      2|}
gost_eng.c:gost_pkey_meths:
  208|      2|{
  209|      2|    if (!pmeth) {
  210|      2|        *nids = gost_pkey_meth_nids;
  211|      2|        return 3;
  212|      2|    }
  213|       |
  214|      0|    switch (nid) {
  215|      0|    case NID_id_GostR3410_94:
  216|      0|        *pmeth = pmeth_GostR3410_94;
  217|      0|        return 1;
  218|      0|    case NID_id_GostR3410_2001:
  219|      0|        *pmeth = pmeth_GostR3410_2001;
  220|      0|        return 1;
  221|      0|    case NID_id_Gost28147_89_MAC:
  222|      0|        *pmeth = pmeth_Gost28147_MAC;
  223|      0|        return 1;
  224|      0|    default:;
  225|      0|    }
  226|       |
  227|      0|    *pmeth = NULL;
  228|      0|    return 0;
  229|      0|}

register_pmeth_gost:
  567|      3|{
  568|      3|    *pmeth = EVP_PKEY_meth_new(id, flags);
  569|      3|    if (!*pmeth)
  570|      0|        return 0;
  571|       |
  572|      3|    switch (id) {
  573|      1|    case NID_id_GostR3410_94:
  574|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl94_str);
  575|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost94cp_keygen);
  576|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost94_cp_sign);
  577|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost94_cp_verify);
  578|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  579|      1|                                  pkey_gost_encrypt_init,
  580|      1|                                  pkey_GOST94cp_encrypt);
  581|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST94cp_decrypt);
  582|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  583|      1|                                 pkey_gost_derive_init, pkey_gost94_derive);
  584|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  585|      1|                                   pkey_gost94_paramgen);
  586|      1|        break;
  587|      1|    case NID_id_GostR3410_2001:
  588|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl01_str);
  589|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost01_cp_sign);
  590|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost01_cp_verify);
  591|       |
  592|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost01cp_keygen);
  593|       |
  594|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  595|      1|                                  pkey_gost_encrypt_init,
  596|      1|                                  pkey_GOST01cp_encrypt);
  597|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST01cp_decrypt);
  598|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  599|      1|                                 pkey_gost_derive_init, pkey_gost2001_derive);
  600|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  601|      1|                                   pkey_gost01_paramgen);
  602|      1|        break;
  603|      1|    case NID_id_Gost28147_89_MAC:
  604|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_mac_ctrl,
  605|      1|                               pkey_gost_mac_ctrl_str);
  606|      1|        EVP_PKEY_meth_set_signctx(*pmeth, pkey_gost_mac_signctx_init,
  607|      1|                                  pkey_gost_mac_signctx);
  608|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost_mac_keygen);
  609|      1|        EVP_PKEY_meth_set_init(*pmeth, pkey_gost_mac_init);
  610|      1|        EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_mac_cleanup);
  611|      1|        EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_mac_copy);
  612|      1|        return 1;
  613|      0|    default:                   /* Unsupported method */
  614|      0|        return 0;
  615|      3|    }
  616|      2|    EVP_PKEY_meth_set_init(*pmeth, pkey_gost_init);
  617|      2|    EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_cleanup);
  618|       |
  619|      2|    EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_copy);
  620|       |    /*
  621|       |     * FIXME derive etc...
  622|       |     */
  623|       |
  624|      2|    return 1;
  625|      3|}

ENGINE_load_4758cca:
  264|      1|{
  265|      1|    ENGINE *e_4758 = engine_4758_cca();
  266|      1|    if (!e_4758)
  267|      0|        return;
  268|      1|    ENGINE_add(e_4758);
  269|      1|    ENGINE_free(e_4758);
  270|      1|    ERR_clear_error();
  271|      1|}
e_4758cca.c:engine_4758_cca:
  252|      1|{
  253|      1|    ENGINE *ret = ENGINE_new();
  254|      1|    if (!ret)
  255|      0|        return NULL;
  256|      1|    if (!bind_helper(ret)) {
  257|      0|        ENGINE_free(ret);
  258|      0|        return NULL;
  259|      0|    }
  260|      1|    return ret;
  261|      1|}
e_4758cca.c:bind_helper:
  228|      1|{
  229|      1|    if (!ENGINE_set_id(e, engine_4758_cca_id) ||
  230|      1|        !ENGINE_set_name(e, engine_4758_cca_name) ||
  231|      1|#  ifndef OPENSSL_NO_RSA
  232|      1|        !ENGINE_set_RSA(e, &ibm_4758_cca_rsa) ||
  233|      1|#  endif
  234|      1|        !ENGINE_set_RAND(e, &ibm_4758_cca_rand) ||
  235|      1|        !ENGINE_set_destroy_function(e, ibm_4758_cca_destroy) ||
  236|      1|        !ENGINE_set_init_function(e, ibm_4758_cca_init) ||
  237|      1|        !ENGINE_set_finish_function(e, ibm_4758_cca_finish) ||
  238|      1|        !ENGINE_set_ctrl_function(e, ibm_4758_cca_ctrl) ||
  239|      1|#  ifndef OPENSSL_NO_RSA
  240|      1|        !ENGINE_set_load_privkey_function(e, ibm_4758_load_privkey) ||
  241|      1|        !ENGINE_set_load_pubkey_function(e, ibm_4758_load_pubkey) ||
  242|      1|#  endif
  243|      1|        !ENGINE_set_cmd_defns(e, cca4758_cmd_defns))
  244|      0|        return 0;
  245|       |    /* Ensure the error handling is set up */
  246|      1|    ERR_load_CCA4758_strings();
  247|      1|    return 1;
  248|      1|}
e_4758cca.c:ibm_4758_cca_init:
  282|      1|{
  283|      1|    if (dso) {
  284|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_ALREADY_LOADED);
  285|      0|        goto err;
  286|      0|    }
  287|       |
  288|      1|    dso = DSO_load(NULL, get_CCA4758_LIB_NAME(), NULL, 0);
  289|      1|    if (!dso) {
  290|      1|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  291|      1|        goto err;
  292|      1|    }
  293|      0|#  ifndef OPENSSL_NO_RSA
  294|      0|    if (!(keyRecordRead = (F_KEYRECORDREAD)
  295|      0|          DSO_bind_func(dso, n_keyRecordRead)) ||
  296|      0|        !(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  297|      0|          DSO_bind_func(dso, n_randomNumberGenerate)) ||
  298|      0|        !(digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE)
  299|      0|          DSO_bind_func(dso, n_digitalSignatureGenerate)) ||
  300|      0|        !(digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)
  301|      0|          DSO_bind_func(dso, n_digitalSignatureVerify)) ||
  302|      0|        !(publicKeyExtract = (F_PUBLICKEYEXTRACT)
  303|      0|          DSO_bind_func(dso, n_publicKeyExtract)) ||
  304|      0|        !(pkaEncrypt = (F_PKAENCRYPT)
  305|      0|          DSO_bind_func(dso, n_pkaEncrypt)) || !(pkaDecrypt = (F_PKADECRYPT)
  306|      0|                                                 DSO_bind_func(dso,
  307|      0|                                                               n_pkaDecrypt)))
  308|      0|    {
  309|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  310|      0|        goto err;
  311|      0|    }
  312|       |#  else
  313|       |    if (!(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  314|       |          DSO_bind_func(dso, n_randomNumberGenerate))) {
  315|       |        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  316|       |        goto err;
  317|       |    }
  318|       |#  endif
  319|       |
  320|      0|#  ifndef OPENSSL_NO_RSA
  321|      0|    hndidx = RSA_get_ex_new_index(0, "IBM 4758 CCA RSA key handle",
  322|      0|                                  NULL, NULL, cca_ex_free);
  323|      0|#  endif
  324|       |
  325|      0|    return 1;
  326|      1| err:
  327|      1|    if (dso)
  328|      0|        DSO_free(dso);
  329|      1|    dso = NULL;
  330|       |
  331|      1|#  ifndef OPENSSL_NO_RSA
  332|      1|    keyRecordRead = (F_KEYRECORDREAD) 0;
  333|      1|    digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE) 0;
  334|      1|    digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)0;
  335|      1|    publicKeyExtract = (F_PUBLICKEYEXTRACT)0;
  336|      1|    pkaEncrypt = (F_PKAENCRYPT) 0;
  337|      1|    pkaDecrypt = (F_PKADECRYPT) 0;
  338|      1|#  endif
  339|      1|    randomNumberGenerate = (F_RANDOMNUMBERGENERATE) 0;
  340|      1|    return 0;
  341|      0|}
e_4758cca.c:get_CCA4758_LIB_NAME:
  142|      1|{
  143|      1|    if (CCA4758_LIB_NAME)
  144|      0|        return CCA4758_LIB_NAME;
  145|      1|    return CCA_LIB_NAME;
  146|      1|}

e_4758cca.c:ERR_CCA4758_error:
  149|      1|{
  150|      1|    if (CCA4758_lib_error_code == 0)
  151|      0|        CCA4758_lib_error_code = ERR_get_next_error_library();
  152|      1|    ERR_PUT_error(CCA4758_lib_error_code, function, reason, file, line);
  153|      1|}
e_4758cca.c:ERR_load_CCA4758_strings:
  115|      1|{
  116|      1|    if (CCA4758_lib_error_code == 0)
  117|      1|        CCA4758_lib_error_code = ERR_get_next_error_library();
  118|       |
  119|      1|    if (CCA4758_error_init) {
  120|      1|        CCA4758_error_init = 0;
  121|      1|#ifndef OPENSSL_NO_ERR
  122|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_functs);
  123|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_reasons);
  124|      1|#endif
  125|       |
  126|       |#ifdef CCA4758_LIB_NAME
  127|       |        CCA4758_lib_name->error = ERR_PACK(CCA4758_lib_error_code, 0, 0);
  128|       |        ERR_load_strings(0, CCA4758_lib_name);
  129|       |#endif
  130|      1|    }
  131|      1|}

ENGINE_load_aep:
  373|      1|{
  374|       |    /* Copied from eng_[openssl|dyn].c */
  375|      1|    ENGINE *toadd = engine_aep();
  376|      1|    if (!toadd)
  377|      0|        return;
  378|      1|    ENGINE_add(toadd);
  379|      1|    ENGINE_free(toadd);
  380|      1|    ERR_clear_error();
  381|      1|}
e_aep.c:engine_aep:
  361|      1|{
  362|      1|    ENGINE *ret = ENGINE_new();
  363|      1|    if (!ret)
  364|      0|        return NULL;
  365|      1|    if (!bind_aep(ret)) {
  366|      0|        ENGINE_free(ret);
  367|      0|        return NULL;
  368|      0|    }
  369|      1|    return ret;
  370|      1|}
e_aep.c:bind_aep:
  271|      1|{
  272|      1|#  ifndef OPENSSL_NO_RSA
  273|      1|    const RSA_METHOD *meth1;
  274|      1|#  endif
  275|      1|#  ifndef OPENSSL_NO_DSA
  276|      1|    const DSA_METHOD *meth2;
  277|      1|#  endif
  278|      1|#  ifndef OPENSSL_NO_DH
  279|      1|    const DH_METHOD *meth3;
  280|      1|#  endif
  281|       |
  282|      1|    if (!ENGINE_set_id(e, engine_aep_id) ||
  283|      1|        !ENGINE_set_name(e, engine_aep_name) ||
  284|      1|#  ifndef OPENSSL_NO_RSA
  285|      1|        !ENGINE_set_RSA(e, &aep_rsa) ||
  286|      1|#  endif
  287|      1|#  ifndef OPENSSL_NO_DSA
  288|      1|        !ENGINE_set_DSA(e, &aep_dsa) ||
  289|      1|#  endif
  290|      1|#  ifndef OPENSSL_NO_DH
  291|      1|        !ENGINE_set_DH(e, &aep_dh) ||
  292|      1|#  endif
  293|       |#  ifdef AEPRAND
  294|       |        !ENGINE_set_RAND(e, &aep_random) ||
  295|       |#  endif
  296|      1|        !ENGINE_set_init_function(e, aep_init) ||
  297|      1|        !ENGINE_set_destroy_function(e, aep_destroy) ||
  298|      1|        !ENGINE_set_finish_function(e, aep_finish) ||
  299|      1|        !ENGINE_set_ctrl_function(e, aep_ctrl) ||
  300|      1|        !ENGINE_set_cmd_defns(e, aep_cmd_defns))
  301|      0|        return 0;
  302|       |
  303|      1|#  ifndef OPENSSL_NO_RSA
  304|       |    /*
  305|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  306|       |     * aep-specific mod_exp and mod_exp_crt so we use those functions. NB: We
  307|       |     * don't use ENGINE_openssl() or anything "more generic" because
  308|       |     * something like the RSAref code may not hook properly, and if you own
  309|       |     * one of these cards then you have the right to do RSA operations on it
  310|       |     * anyway!
  311|       |     */
  312|      1|    meth1 = RSA_PKCS1_SSLeay();
  313|      1|    aep_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  314|      1|    aep_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  315|      1|    aep_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  316|      1|    aep_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  317|      1|#  endif
  318|       |
  319|      1|#  ifndef OPENSSL_NO_DSA
  320|       |    /*
  321|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  322|       |     */
  323|      1|    meth2 = DSA_OpenSSL();
  324|      1|    aep_dsa.dsa_do_sign = meth2->dsa_do_sign;
  325|      1|    aep_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  326|      1|    aep_dsa.dsa_do_verify = meth2->dsa_do_verify;
  327|       |
  328|      1|    aep_dsa = *DSA_get_default_method();
  329|      1|    aep_dsa.dsa_mod_exp = aep_dsa_mod_exp;
  330|      1|    aep_dsa.bn_mod_exp = aep_mod_exp_dsa;
  331|      1|#  endif
  332|       |
  333|      1|#  ifndef OPENSSL_NO_DH
  334|       |    /* Much the same for Diffie-Hellman */
  335|      1|    meth3 = DH_OpenSSL();
  336|      1|    aep_dh.generate_key = meth3->generate_key;
  337|      1|    aep_dh.compute_key = meth3->compute_key;
  338|      1|    aep_dh.bn_mod_exp = meth3->bn_mod_exp;
  339|      1|#  endif
  340|       |
  341|       |    /* Ensure the aep error handling is set up */
  342|      1|    ERR_load_AEPHK_strings();
  343|       |
  344|      1|    return 1;
  345|      1|}

e_aep.c:ERR_load_AEPHK_strings:
  121|      1|{
  122|      1|    if (AEPHK_lib_error_code == 0)
  123|      1|        AEPHK_lib_error_code = ERR_get_next_error_library();
  124|       |
  125|      1|    if (AEPHK_error_init) {
  126|      1|        AEPHK_error_init = 0;
  127|      1|#ifndef OPENSSL_NO_ERR
  128|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_functs);
  129|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_reasons);
  130|      1|#endif
  131|       |
  132|       |#ifdef AEPHK_LIB_NAME
  133|       |        AEPHK_lib_name->error = ERR_PACK(AEPHK_lib_error_code, 0, 0);
  134|       |        ERR_load_strings(0, AEPHK_lib_name);
  135|       |#endif
  136|      1|    }
  137|      1|}

ENGINE_load_atalla:
  279|      1|{
  280|       |    /* Copied from eng_[openssl|dyn].c */
  281|      1|    ENGINE *toadd = engine_atalla();
  282|      1|    if (!toadd)
  283|      0|        return;
  284|      1|    ENGINE_add(toadd);
  285|      1|    ENGINE_free(toadd);
  286|      1|    ERR_clear_error();
  287|      1|}
e_atalla.c:engine_atalla:
  267|      1|{
  268|      1|    ENGINE *ret = ENGINE_new();
  269|      1|    if (!ret)
  270|      0|        return NULL;
  271|      1|    if (!bind_helper(ret)) {
  272|      0|        ENGINE_free(ret);
  273|      0|        return NULL;
  274|      0|    }
  275|      1|    return ret;
  276|      1|}
e_atalla.c:bind_helper:
  199|      1|{
  200|      1|#  ifndef OPENSSL_NO_RSA
  201|      1|    const RSA_METHOD *meth1;
  202|      1|#  endif
  203|      1|#  ifndef OPENSSL_NO_DSA
  204|      1|    const DSA_METHOD *meth2;
  205|      1|#  endif
  206|      1|#  ifndef OPENSSL_NO_DH
  207|      1|    const DH_METHOD *meth3;
  208|      1|#  endif
  209|      1|    if (!ENGINE_set_id(e, engine_atalla_id) ||
  210|      1|        !ENGINE_set_name(e, engine_atalla_name) ||
  211|      1|#  ifndef OPENSSL_NO_RSA
  212|      1|        !ENGINE_set_RSA(e, &atalla_rsa) ||
  213|      1|#  endif
  214|      1|#  ifndef OPENSSL_NO_DSA
  215|      1|        !ENGINE_set_DSA(e, &atalla_dsa) ||
  216|      1|#  endif
  217|      1|#  ifndef OPENSSL_NO_DH
  218|      1|        !ENGINE_set_DH(e, &atalla_dh) ||
  219|      1|#  endif
  220|      1|        !ENGINE_set_destroy_function(e, atalla_destroy) ||
  221|      1|        !ENGINE_set_init_function(e, atalla_init) ||
  222|      1|        !ENGINE_set_finish_function(e, atalla_finish) ||
  223|      1|        !ENGINE_set_ctrl_function(e, atalla_ctrl) ||
  224|      1|        !ENGINE_set_cmd_defns(e, atalla_cmd_defns))
  225|      0|        return 0;
  226|       |
  227|      1|#  ifndef OPENSSL_NO_RSA
  228|       |    /*
  229|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  230|       |     * atalla-specific mod_exp and mod_exp_crt so we use those functions. NB:
  231|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  232|       |     * something like the RSAref code may not hook properly, and if you own
  233|       |     * one of these cards then you have the right to do RSA operations on it
  234|       |     * anyway!
  235|       |     */
  236|      1|    meth1 = RSA_PKCS1_SSLeay();
  237|      1|    atalla_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  238|      1|    atalla_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  239|      1|    atalla_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  240|      1|    atalla_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  241|      1|#  endif
  242|       |
  243|      1|#  ifndef OPENSSL_NO_DSA
  244|       |    /*
  245|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  246|       |     */
  247|      1|    meth2 = DSA_OpenSSL();
  248|      1|    atalla_dsa.dsa_do_sign = meth2->dsa_do_sign;
  249|      1|    atalla_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  250|      1|    atalla_dsa.dsa_do_verify = meth2->dsa_do_verify;
  251|      1|#  endif
  252|       |
  253|      1|#  ifndef OPENSSL_NO_DH
  254|       |    /* Much the same for Diffie-Hellman */
  255|      1|    meth3 = DH_OpenSSL();
  256|      1|    atalla_dh.generate_key = meth3->generate_key;
  257|      1|    atalla_dh.compute_key = meth3->compute_key;
  258|      1|#  endif
  259|       |
  260|       |    /* Ensure the atalla error handling is set up */
  261|      1|    ERR_load_ATALLA_strings();
  262|      1|    return 1;
  263|      1|}

e_atalla.c:ERR_load_ATALLA_strings:
  107|      1|{
  108|      1|    if (ATALLA_lib_error_code == 0)
  109|      1|        ATALLA_lib_error_code = ERR_get_next_error_library();
  110|       |
  111|      1|    if (ATALLA_error_init) {
  112|      1|        ATALLA_error_init = 0;
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_functs);
  115|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_reasons);
  116|      1|#endif
  117|       |
  118|      1|#ifdef ATALLA_LIB_NAME
  119|      1|        ATALLA_lib_name->error = ERR_PACK(ATALLA_lib_error_code, 0, 0);
  120|      1|        ERR_load_strings(0, ATALLA_lib_name);
  121|      1|#endif
  122|      1|    }
  123|      1|}

ENGINE_load_chil:
  419|      1|{
  420|       |    /* Copied from eng_[openssl|dyn].c */
  421|      1|    ENGINE *toadd = engine_chil();
  422|      1|    if (!toadd)
  423|      0|        return;
  424|      1|    ENGINE_add(toadd);
  425|      1|    ENGINE_free(toadd);
  426|      1|    ERR_clear_error();
  427|      1|}
e_chil.c:engine_chil:
  407|      1|{
  408|      1|    ENGINE *ret = ENGINE_new();
  409|      1|    if (!ret)
  410|      0|        return NULL;
  411|      1|    if (!bind_helper(ret)) {
  412|      0|        ENGINE_free(ret);
  413|      0|        return NULL;
  414|      0|    }
  415|      1|    return ret;
  416|      1|}
e_chil.c:bind_helper:
  352|      1|{
  353|      1|#  ifndef OPENSSL_NO_RSA
  354|      1|    const RSA_METHOD *meth1;
  355|      1|#  endif
  356|      1|#  ifndef OPENSSL_NO_DH
  357|      1|    const DH_METHOD *meth2;
  358|      1|#  endif
  359|      1|    if (!ENGINE_set_id(e, engine_hwcrhk_id) ||
  360|      1|        !ENGINE_set_name(e, engine_hwcrhk_name) ||
  361|      1|#  ifndef OPENSSL_NO_RSA
  362|      1|        !ENGINE_set_RSA(e, &hwcrhk_rsa) ||
  363|      1|#  endif
  364|      1|#  ifndef OPENSSL_NO_DH
  365|      1|        !ENGINE_set_DH(e, &hwcrhk_dh) ||
  366|      1|#  endif
  367|      1|        !ENGINE_set_RAND(e, &hwcrhk_rand) ||
  368|      1|        !ENGINE_set_destroy_function(e, hwcrhk_destroy) ||
  369|      1|        !ENGINE_set_init_function(e, hwcrhk_init) ||
  370|      1|        !ENGINE_set_finish_function(e, hwcrhk_finish) ||
  371|      1|        !ENGINE_set_ctrl_function(e, hwcrhk_ctrl) ||
  372|      1|        !ENGINE_set_load_privkey_function(e, hwcrhk_load_privkey) ||
  373|      1|        !ENGINE_set_load_pubkey_function(e, hwcrhk_load_pubkey) ||
  374|      1|        !ENGINE_set_cmd_defns(e, hwcrhk_cmd_defns))
  375|      0|        return 0;
  376|       |
  377|      1|#  ifndef OPENSSL_NO_RSA
  378|       |    /*
  379|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  380|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  381|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  382|       |     * something like the RSAref code may not hook properly, and if you own
  383|       |     * one of these cards then you have the right to do RSA operations on it
  384|       |     * anyway!
  385|       |     */
  386|      1|    meth1 = RSA_PKCS1_SSLeay();
  387|      1|    hwcrhk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  388|      1|    hwcrhk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  389|      1|    hwcrhk_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  390|      1|    hwcrhk_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  391|      1|#  endif
  392|       |
  393|      1|#  ifndef OPENSSL_NO_DH
  394|       |    /* Much the same for Diffie-Hellman */
  395|      1|    meth2 = DH_OpenSSL();
  396|      1|    hwcrhk_dh.generate_key = meth2->generate_key;
  397|      1|    hwcrhk_dh.compute_key = meth2->compute_key;
  398|      1|#  endif
  399|       |
  400|       |    /* Ensure the hwcrhk error handling is set up */
  401|      1|    ERR_load_HWCRHK_strings();
  402|      1|    return 1;
  403|      1|}
e_chil.c:hwcrhk_init:
  536|      1|{
  537|      1|    HWCryptoHook_Init_t *p1;
  538|      1|    HWCryptoHook_Finish_t *p2;
  539|      1|    HWCryptoHook_ModExp_t *p3;
  540|      1|#  ifndef OPENSSL_NO_RSA
  541|      1|    HWCryptoHook_RSA_t *p4;
  542|      1|    HWCryptoHook_RSALoadKey_t *p5;
  543|      1|    HWCryptoHook_RSAGetPublicKey_t *p6;
  544|      1|    HWCryptoHook_RSAUnloadKey_t *p7;
  545|      1|#  endif
  546|      1|    HWCryptoHook_RandomBytes_t *p8;
  547|      1|    HWCryptoHook_ModExpCRT_t *p9;
  548|       |
  549|      1|    if (hwcrhk_dso != NULL) {
  550|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_ALREADY_LOADED);
  551|      0|        goto err;
  552|      0|    }
  553|       |    /* Attempt to load libnfhwcrhk.so/nfhwcrhk.dll/whatever. */
  554|      1|    hwcrhk_dso = DSO_load(NULL, get_HWCRHK_LIBNAME(), NULL, 0);
  555|      1|    if (hwcrhk_dso == NULL) {
  556|      1|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  557|      1|        goto err;
  558|      1|    }
  559|      0|    if (!(p1 = (HWCryptoHook_Init_t *)
  560|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Init)) ||
  561|      0|        !(p2 = (HWCryptoHook_Finish_t *)
  562|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Finish)) ||
  563|      0|        !(p3 = (HWCryptoHook_ModExp_t *)
  564|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExp)) ||
  565|      0|#  ifndef OPENSSL_NO_RSA
  566|      0|        !(p4 = (HWCryptoHook_RSA_t *)
  567|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSA)) ||
  568|      0|        !(p5 = (HWCryptoHook_RSALoadKey_t *)
  569|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSALoadKey)) ||
  570|      0|        !(p6 = (HWCryptoHook_RSAGetPublicKey_t *)
  571|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAGetPublicKey)) ||
  572|      0|        !(p7 = (HWCryptoHook_RSAUnloadKey_t *)
  573|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAUnloadKey)) ||
  574|      0|#  endif
  575|      0|        !(p8 = (HWCryptoHook_RandomBytes_t *)
  576|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RandomBytes)) ||
  577|      0|        !(p9 = (HWCryptoHook_ModExpCRT_t *)
  578|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExpCRT))) {
  579|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  580|      0|        goto err;
  581|      0|    }
  582|       |    /* Copy the pointers */
  583|      0|    p_hwcrhk_Init = p1;
  584|      0|    p_hwcrhk_Finish = p2;
  585|      0|    p_hwcrhk_ModExp = p3;
  586|      0|#  ifndef OPENSSL_NO_RSA
  587|      0|    p_hwcrhk_RSA = p4;
  588|      0|    p_hwcrhk_RSALoadKey = p5;
  589|      0|    p_hwcrhk_RSAGetPublicKey = p6;
  590|      0|    p_hwcrhk_RSAUnloadKey = p7;
  591|      0|#  endif
  592|      0|    p_hwcrhk_RandomBytes = p8;
  593|      0|    p_hwcrhk_ModExpCRT = p9;
  594|       |
  595|       |    /*
  596|       |     * Check if the application decided to support dynamic locks, and if it
  597|       |     * does, use them.
  598|       |     */
  599|      0|    if (disable_mutex_callbacks == 0) {
  600|      0|        if (CRYPTO_get_dynlock_create_callback() != NULL &&
  601|      0|            CRYPTO_get_dynlock_lock_callback() != NULL &&
  602|      0|            CRYPTO_get_dynlock_destroy_callback() != NULL) {
  603|      0|            hwcrhk_globals.mutex_init = hwcrhk_mutex_init;
  604|      0|            hwcrhk_globals.mutex_acquire = hwcrhk_mutex_lock;
  605|      0|            hwcrhk_globals.mutex_release = hwcrhk_mutex_unlock;
  606|      0|            hwcrhk_globals.mutex_destroy = hwcrhk_mutex_destroy;
  607|      0|        }
  608|      0|    }
  609|       |
  610|       |    /*
  611|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  612|       |     */
  613|      0|    if (!get_context(&hwcrhk_context, &password_context)) {
  614|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_UNIT_FAILURE);
  615|      0|        goto err;
  616|      0|    }
  617|       |    /* Everything's fine. */
  618|      0|#  ifndef OPENSSL_NO_RSA
  619|      0|    if (hndidx_rsa == -1)
  620|      0|        hndidx_rsa = RSA_get_ex_new_index(0,
  621|      0|                                          "nFast HWCryptoHook RSA key handle",
  622|      0|                                          NULL, NULL, NULL);
  623|      0|#  endif
  624|      0|    return 1;
  625|      1| err:
  626|      1|    if (hwcrhk_dso)
  627|      0|        DSO_free(hwcrhk_dso);
  628|      1|    hwcrhk_dso = NULL;
  629|      1|    p_hwcrhk_Init = NULL;
  630|      1|    p_hwcrhk_Finish = NULL;
  631|      1|    p_hwcrhk_ModExp = NULL;
  632|      1|#  ifndef OPENSSL_NO_RSA
  633|      1|    p_hwcrhk_RSA = NULL;
  634|      1|    p_hwcrhk_RSALoadKey = NULL;
  635|      1|    p_hwcrhk_RSAGetPublicKey = NULL;
  636|      1|    p_hwcrhk_RSAUnloadKey = NULL;
  637|      1|#  endif
  638|      1|    p_hwcrhk_ModExpCRT = NULL;
  639|      1|    p_hwcrhk_RandomBytes = NULL;
  640|      1|    return 0;
  641|      0|}
e_chil.c:get_HWCRHK_LIBNAME:
  471|      1|{
  472|      1|    if (HWCRHK_LIBNAME)
  473|      0|        return HWCRHK_LIBNAME;
  474|      1|    return "nfhwcrhk";
  475|      1|}

e_chil.c:ERR_HWCRHK_error:
  153|      1|{
  154|      1|    if (HWCRHK_lib_error_code == 0)
  155|      0|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  156|      1|    ERR_PUT_error(HWCRHK_lib_error_code, function, reason, file, line);
  157|      1|}
e_chil.c:ERR_load_HWCRHK_strings:
  119|      1|{
  120|      1|    if (HWCRHK_lib_error_code == 0)
  121|      1|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  122|       |
  123|      1|    if (HWCRHK_error_init) {
  124|      1|        HWCRHK_error_init = 0;
  125|      1|#ifndef OPENSSL_NO_ERR
  126|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_functs);
  127|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_reasons);
  128|      1|#endif
  129|       |
  130|      1|#ifdef HWCRHK_LIB_NAME
  131|      1|        HWCRHK_lib_name->error = ERR_PACK(HWCRHK_lib_error_code, 0, 0);
  132|      1|        ERR_load_strings(0, HWCRHK_lib_name);
  133|      1|#endif
  134|      1|    }
  135|      1|}

ENGINE_load_cswift:
  302|      1|{
  303|       |    /* Copied from eng_[openssl|dyn].c */
  304|      1|    ENGINE *toadd = engine_cswift();
  305|      1|    if (!toadd)
  306|      0|        return;
  307|      1|    ENGINE_add(toadd);
  308|      1|    ENGINE_free(toadd);
  309|      1|    ERR_clear_error();
  310|      1|}
e_cswift.c:engine_cswift:
  290|      1|{
  291|      1|    ENGINE *ret = ENGINE_new();
  292|      1|    if (!ret)
  293|      0|        return NULL;
  294|      1|    if (!bind_helper(ret)) {
  295|      0|        ENGINE_free(ret);
  296|      0|        return NULL;
  297|      0|    }
  298|      1|    return ret;
  299|      1|}
e_cswift.c:bind_helper:
  234|      1|{
  235|      1|#  ifndef OPENSSL_NO_RSA
  236|      1|    const RSA_METHOD *meth1;
  237|      1|#  endif
  238|      1|#  ifndef OPENSSL_NO_DH
  239|      1|    const DH_METHOD *meth2;
  240|      1|#  endif
  241|      1|    if (!ENGINE_set_id(e, engine_cswift_id) ||
  242|      1|        !ENGINE_set_name(e, engine_cswift_name) ||
  243|      1|#  ifndef OPENSSL_NO_RSA
  244|      1|        !ENGINE_set_RSA(e, &cswift_rsa) ||
  245|      1|#  endif
  246|      1|#  ifndef OPENSSL_NO_DSA
  247|      1|        !ENGINE_set_DSA(e, &cswift_dsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DH
  250|      1|        !ENGINE_set_DH(e, &cswift_dh) ||
  251|      1|#  endif
  252|      1|        !ENGINE_set_RAND(e, &cswift_random) ||
  253|      1|        !ENGINE_set_destroy_function(e, cswift_destroy) ||
  254|      1|        !ENGINE_set_init_function(e, cswift_init) ||
  255|      1|        !ENGINE_set_finish_function(e, cswift_finish) ||
  256|      1|        !ENGINE_set_ctrl_function(e, cswift_ctrl) ||
  257|      1|        !ENGINE_set_cmd_defns(e, cswift_cmd_defns))
  258|      0|        return 0;
  259|       |
  260|      1|#  ifndef OPENSSL_NO_RSA
  261|       |    /*
  262|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  263|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  264|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  265|       |     * something like the RSAref code may not hook properly, and if you own
  266|       |     * one of these cards then you have the right to do RSA operations on it
  267|       |     * anyway!
  268|       |     */
  269|      1|    meth1 = RSA_PKCS1_SSLeay();
  270|      1|    cswift_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  271|      1|    cswift_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  272|      1|    cswift_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  273|      1|    cswift_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  274|      1|#  endif
  275|       |
  276|      1|#  ifndef OPENSSL_NO_DH
  277|       |    /* Much the same for Diffie-Hellman */
  278|      1|    meth2 = DH_OpenSSL();
  279|      1|    cswift_dh.generate_key = meth2->generate_key;
  280|      1|    cswift_dh.compute_key = meth2->compute_key;
  281|      1|#  endif
  282|       |
  283|       |    /* Ensure the cswift error handling is set up */
  284|      1|    ERR_load_CSWIFT_strings();
  285|      1|    return 1;
  286|      1|}
e_cswift.c:cswift_init:
  391|      1|{
  392|      1|    SW_CONTEXT_HANDLE hac;
  393|      1|    t_swAcquireAccContext *p1;
  394|      1|    t_swAttachKeyParam *p2;
  395|      1|    t_swSimpleRequest *p3;
  396|      1|    t_swReleaseAccContext *p4;
  397|       |
  398|      1|    if (cswift_dso != NULL) {
  399|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_ALREADY_LOADED);
  400|      0|        goto err;
  401|      0|    }
  402|       |    /* Attempt to load libswift.so/swift.dll/whatever. */
  403|      1|    cswift_dso = DSO_load(NULL, get_CSWIFT_LIBNAME(), NULL, 0);
  404|      1|    if (cswift_dso == NULL) {
  405|      1|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  406|      1|        goto err;
  407|      1|    }
  408|      0|    if (!(p1 = (t_swAcquireAccContext *)
  409|      0|          DSO_bind_func(cswift_dso, CSWIFT_F1)) ||
  410|      0|        !(p2 = (t_swAttachKeyParam *)
  411|      0|          DSO_bind_func(cswift_dso, CSWIFT_F2)) ||
  412|      0|        !(p3 = (t_swSimpleRequest *)
  413|      0|          DSO_bind_func(cswift_dso, CSWIFT_F3)) ||
  414|      0|        !(p4 = (t_swReleaseAccContext *)
  415|      0|          DSO_bind_func(cswift_dso, CSWIFT_F4))) {
  416|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  417|      0|        goto err;
  418|      0|    }
  419|       |    /* Copy the pointers */
  420|      0|    p_CSwift_AcquireAccContext = p1;
  421|      0|    p_CSwift_AttachKeyParam = p2;
  422|      0|    p_CSwift_SimpleRequest = p3;
  423|      0|    p_CSwift_ReleaseAccContext = p4;
  424|       |    /*
  425|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  426|       |     */
  427|      0|    if (!get_context(&hac)) {
  428|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_UNIT_FAILURE);
  429|      0|        goto err;
  430|      0|    }
  431|      0|    release_context(hac);
  432|       |    /* Everything's fine. */
  433|      0|    return 1;
  434|      1| err:
  435|      1|    if (cswift_dso) {
  436|      0|        DSO_free(cswift_dso);
  437|      0|        cswift_dso = NULL;
  438|      0|    }
  439|      1|    p_CSwift_AcquireAccContext = NULL;
  440|      1|    p_CSwift_AttachKeyParam = NULL;
  441|      1|    p_CSwift_SimpleRequest = NULL;
  442|      1|    p_CSwift_ReleaseAccContext = NULL;
  443|      1|    return 0;
  444|      0|}
e_cswift.c:get_CSWIFT_LIBNAME:
  333|      1|{
  334|      1|    if (CSWIFT_LIBNAME)
  335|      0|        return CSWIFT_LIBNAME;
  336|      1|    return "swift";
  337|      1|}

e_cswift.c:ERR_CSWIFT_error:
  146|      1|{
  147|      1|    if (CSWIFT_lib_error_code == 0)
  148|      0|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  149|      1|    ERR_PUT_error(CSWIFT_lib_error_code, function, reason, file, line);
  150|      1|}
e_cswift.c:ERR_load_CSWIFT_strings:
  112|      1|{
  113|      1|    if (CSWIFT_lib_error_code == 0)
  114|      1|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  115|       |
  116|      1|    if (CSWIFT_error_init) {
  117|      1|        CSWIFT_error_init = 0;
  118|      1|#ifndef OPENSSL_NO_ERR
  119|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_functs);
  120|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_reasons);
  121|      1|#endif
  122|       |
  123|      1|#ifdef CSWIFT_LIB_NAME
  124|      1|        CSWIFT_lib_name->error = ERR_PACK(CSWIFT_lib_error_code, 0, 0);
  125|      1|        ERR_load_strings(0, CSWIFT_lib_name);
  126|      1|#endif
  127|      1|    }
  128|      1|}

ENGINE_load_nuron:
  407|      1|{
  408|       |    /* Copied from eng_[openssl|dyn].c */
  409|      1|    ENGINE *toadd = engine_nuron();
  410|      1|    if (!toadd)
  411|      0|        return;
  412|      1|    ENGINE_add(toadd);
  413|      1|    ENGINE_free(toadd);
  414|      1|    ERR_clear_error();
  415|      1|}
e_nuron.c:engine_nuron:
  395|      1|{
  396|      1|    ENGINE *ret = ENGINE_new();
  397|      1|    if (!ret)
  398|      0|        return NULL;
  399|      1|    if (!bind_helper(ret)) {
  400|      0|        ENGINE_free(ret);
  401|      0|        return NULL;
  402|      0|    }
  403|      1|    return ret;
  404|      1|}
e_nuron.c:bind_helper:
  327|      1|{
  328|      1|#  ifndef OPENSSL_NO_RSA
  329|      1|    const RSA_METHOD *meth1;
  330|      1|#  endif
  331|      1|#  ifndef OPENSSL_NO_DSA
  332|      1|    const DSA_METHOD *meth2;
  333|      1|#  endif
  334|      1|#  ifndef OPENSSL_NO_DH
  335|      1|    const DH_METHOD *meth3;
  336|      1|#  endif
  337|      1|    if (!ENGINE_set_id(e, engine_nuron_id) ||
  338|      1|        !ENGINE_set_name(e, engine_nuron_name) ||
  339|      1|#  ifndef OPENSSL_NO_RSA
  340|      1|        !ENGINE_set_RSA(e, &nuron_rsa) ||
  341|      1|#  endif
  342|      1|#  ifndef OPENSSL_NO_DSA
  343|      1|        !ENGINE_set_DSA(e, &nuron_dsa) ||
  344|      1|#  endif
  345|      1|#  ifndef OPENSSL_NO_DH
  346|      1|        !ENGINE_set_DH(e, &nuron_dh) ||
  347|      1|#  endif
  348|      1|        !ENGINE_set_destroy_function(e, nuron_destroy) ||
  349|      1|        !ENGINE_set_init_function(e, nuron_init) ||
  350|      1|        !ENGINE_set_finish_function(e, nuron_finish) ||
  351|      1|        !ENGINE_set_ctrl_function(e, nuron_ctrl) ||
  352|      1|        !ENGINE_set_cmd_defns(e, nuron_cmd_defns))
  353|      0|        return 0;
  354|       |
  355|      1|#  ifndef OPENSSL_NO_RSA
  356|       |    /*
  357|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  358|       |     * nuron-specific mod_exp and mod_exp_crt so we use those functions. NB:
  359|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  360|       |     * something like the RSAref code may not hook properly, and if you own
  361|       |     * one of these cards then you have the right to do RSA operations on it
  362|       |     * anyway!
  363|       |     */
  364|      1|    meth1 = RSA_PKCS1_SSLeay();
  365|      1|    nuron_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  366|      1|    nuron_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  367|      1|    nuron_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  368|      1|    nuron_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  369|      1|#  endif
  370|       |
  371|      1|#  ifndef OPENSSL_NO_DSA
  372|       |    /*
  373|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  374|       |     */
  375|      1|    meth2 = DSA_OpenSSL();
  376|      1|    nuron_dsa.dsa_do_sign = meth2->dsa_do_sign;
  377|      1|    nuron_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  378|      1|    nuron_dsa.dsa_do_verify = meth2->dsa_do_verify;
  379|      1|#  endif
  380|       |
  381|      1|#  ifndef OPENSSL_NO_DH
  382|       |    /* Much the same for Diffie-Hellman */
  383|      1|    meth3 = DH_OpenSSL();
  384|      1|    nuron_dh.generate_key = meth3->generate_key;
  385|      1|    nuron_dh.compute_key = meth3->compute_key;
  386|      1|#  endif
  387|       |
  388|       |    /* Ensure the nuron error handling is set up */
  389|      1|    ERR_load_NURON_strings();
  390|      1|    return 1;
  391|      1|}

e_nuron.c:ERR_load_NURON_strings:
  104|      1|{
  105|      1|    if (NURON_lib_error_code == 0)
  106|      1|        NURON_lib_error_code = ERR_get_next_error_library();
  107|       |
  108|      1|    if (NURON_error_init) {
  109|      1|        NURON_error_init = 0;
  110|      1|#ifndef OPENSSL_NO_ERR
  111|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_functs);
  112|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_reasons);
  113|      1|#endif
  114|       |
  115|      1|#ifdef NURON_LIB_NAME
  116|      1|        NURON_lib_name->error = ERR_PACK(NURON_lib_error_code, 0, 0);
  117|      1|        ERR_load_strings(0, NURON_lib_name);
  118|      1|#endif
  119|      1|    }
  120|      1|}

ENGINE_load_padlock:
  116|      1|{
  117|       |/* On non-x86 CPUs it just returns. */
  118|       |#   ifdef COMPILE_HW_PADLOCK
  119|       |    ENGINE *toadd = ENGINE_padlock();
  120|       |    if (!toadd)
  121|       |        return;
  122|       |    ENGINE_add(toadd);
  123|       |    ENGINE_free(toadd);
  124|       |    ERR_clear_error();
  125|       |#   endif
  126|      1|}

ENGINE_load_sureware:
  330|      1|{
  331|       |    /* Copied from eng_[openssl|dyn].c */
  332|      1|    ENGINE *toadd = engine_sureware();
  333|      1|    if (!toadd)
  334|      0|        return;
  335|      1|    ENGINE_add(toadd);
  336|      1|    ENGINE_free(toadd);
  337|      1|    ERR_clear_error();
  338|      1|}
e_sureware.c:engine_sureware:
  318|      1|{
  319|      1|    ENGINE *ret = ENGINE_new();
  320|      1|    if (!ret)
  321|      0|        return NULL;
  322|      1|    if (!bind_sureware(ret)) {
  323|      0|        ENGINE_free(ret);
  324|      0|        return NULL;
  325|      0|    }
  326|      1|    return ret;
  327|      1|}
e_sureware.c:bind_sureware:
  233|      1|{
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|      1|    const RSA_METHOD *meth1;
  236|      1|#  endif
  237|      1|#  ifndef OPENSSL_NO_DSA
  238|      1|    const DSA_METHOD *meth2;
  239|      1|#  endif
  240|      1|#  ifndef OPENSSL_NO_DH
  241|      1|    const DH_METHOD *meth3;
  242|      1|#  endif
  243|       |
  244|      1|    if (!ENGINE_set_id(e, engine_sureware_id) ||
  245|      1|        !ENGINE_set_name(e, engine_sureware_name) ||
  246|      1|#  ifndef OPENSSL_NO_RSA
  247|      1|        !ENGINE_set_RSA(e, &surewarehk_rsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DSA
  250|      1|        !ENGINE_set_DSA(e, &surewarehk_dsa) ||
  251|      1|#  endif
  252|      1|#  ifndef OPENSSL_NO_DH
  253|      1|        !ENGINE_set_DH(e, &surewarehk_dh) ||
  254|      1|#  endif
  255|      1|        !ENGINE_set_RAND(e, &surewarehk_rand) ||
  256|      1|        !ENGINE_set_destroy_function(e, surewarehk_destroy) ||
  257|      1|        !ENGINE_set_init_function(e, surewarehk_init) ||
  258|      1|        !ENGINE_set_finish_function(e, surewarehk_finish) ||
  259|      1|        !ENGINE_set_ctrl_function(e, surewarehk_ctrl) ||
  260|      1|        !ENGINE_set_load_privkey_function(e, surewarehk_load_privkey) ||
  261|      1|        !ENGINE_set_load_pubkey_function(e, surewarehk_load_pubkey))
  262|      0|        return 0;
  263|       |
  264|      1|#  ifndef OPENSSL_NO_RSA
  265|       |    /*
  266|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  267|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  268|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  269|       |     * something like the RSAref code may not hook properly, and if you own
  270|       |     * one of these cards then you have the right to do RSA operations on it
  271|       |     * anyway!
  272|       |     */
  273|      1|    meth1 = RSA_PKCS1_SSLeay();
  274|      1|    if (meth1) {
  275|      1|        surewarehk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  276|      1|        surewarehk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  277|      1|    }
  278|      1|#  endif
  279|       |
  280|      1|#  ifndef OPENSSL_NO_DSA
  281|       |    /*
  282|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  283|       |     */
  284|      1|    meth2 = DSA_OpenSSL();
  285|      1|    if (meth2) {
  286|      1|        surewarehk_dsa.dsa_do_verify = meth2->dsa_do_verify;
  287|      1|    }
  288|      1|#  endif
  289|       |
  290|      1|#  ifndef OPENSSL_NO_DH
  291|       |    /* Much the same for Diffie-Hellman */
  292|      1|    meth3 = DH_OpenSSL();
  293|      1|    if (meth3) {
  294|      1|        surewarehk_dh.generate_key = meth3->generate_key;
  295|      1|        surewarehk_dh.compute_key = meth3->compute_key;
  296|      1|    }
  297|      1|#  endif
  298|       |
  299|       |    /* Ensure the sureware error handling is set up */
  300|      1|    ERR_load_SUREWARE_strings();
  301|      1|    return 1;
  302|      1|}
e_sureware.c:surewarehk_init:
  456|      1|{
  457|      1|    char msg[64] = "ENGINE_init";
  458|      1|    SureWareHook_Init_t *p1 = NULL;
  459|      1|    SureWareHook_Finish_t *p2 = NULL;
  460|      1|    SureWareHook_Rand_Bytes_t *p3 = NULL;
  461|      1|    SureWareHook_Rand_Seed_t *p4 = NULL;
  462|      1|    SureWareHook_Load_Privkey_t *p5 = NULL;
  463|      1|    SureWareHook_Load_Rsa_Pubkey_t *p6 = NULL;
  464|      1|    SureWareHook_Free_t *p7 = NULL;
  465|      1|    SureWareHook_Rsa_Priv_Dec_t *p8 = NULL;
  466|      1|    SureWareHook_Rsa_Sign_t *p9 = NULL;
  467|      1|    SureWareHook_Dsa_Sign_t *p12 = NULL;
  468|      1|    SureWareHook_Info_Pubkey_t *p13 = NULL;
  469|      1|    SureWareHook_Load_Dsa_Pubkey_t *p14 = NULL;
  470|      1|    SureWareHook_Mod_Exp_t *p15 = NULL;
  471|       |
  472|      1|    if (surewarehk_dso != NULL) {
  473|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_ALREADY_LOADED);
  474|      0|        goto err;
  475|      0|    }
  476|       |    /* Attempt to load libsurewarehk.so/surewarehk.dll/whatever. */
  477|      1|    surewarehk_dso = DSO_load(NULL, surewarehk_LIBNAME, NULL, 0);
  478|      1|    if (surewarehk_dso == NULL) {
  479|      1|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  480|      1|        goto err;
  481|      1|    }
  482|      0|    if (!
  483|      0|        (p1 =
  484|      0|         (SureWareHook_Init_t *) DSO_bind_func(surewarehk_dso,
  485|      0|                                               n_surewarehk_Init))
  486|      0||| !(p2 =
  487|      0|     (SureWareHook_Finish_t *) DSO_bind_func(surewarehk_dso,
  488|      0|                                             n_surewarehk_Finish))
  489|      0||| !(p3 =
  490|      0|     (SureWareHook_Rand_Bytes_t *) DSO_bind_func(surewarehk_dso,
  491|      0|                                                 n_surewarehk_Rand_Bytes))
  492|      0||| !(p4 =
  493|      0|     (SureWareHook_Rand_Seed_t *) DSO_bind_func(surewarehk_dso,
  494|      0|                                                n_surewarehk_Rand_Seed))
  495|      0||| !(p5 =
  496|      0|     (SureWareHook_Load_Privkey_t *) DSO_bind_func(surewarehk_dso,
  497|      0|                                                   n_surewarehk_Load_Privkey))
  498|      0||| !(p6 =
  499|      0|     (SureWareHook_Load_Rsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  500|      0|                                                      n_surewarehk_Load_Rsa_Pubkey))
  501|      0||| !(p7 =
  502|      0|     (SureWareHook_Free_t *) DSO_bind_func(surewarehk_dso, n_surewarehk_Free))
  503|      0||| !(p8 =
  504|      0|     (SureWareHook_Rsa_Priv_Dec_t *) DSO_bind_func(surewarehk_dso,
  505|      0|                                                   n_surewarehk_Rsa_Priv_Dec))
  506|      0||| !(p9 =
  507|      0|     (SureWareHook_Rsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  508|      0|                                               n_surewarehk_Rsa_Sign))
  509|      0||| !(p12 =
  510|      0|     (SureWareHook_Dsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  511|      0|                                               n_surewarehk_Dsa_Sign))
  512|      0||| !(p13 =
  513|      0|     (SureWareHook_Info_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  514|      0|                                                  n_surewarehk_Info_Pubkey))
  515|      0||| !(p14 =
  516|      0|     (SureWareHook_Load_Dsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  517|      0|                                                      n_surewarehk_Load_Dsa_Pubkey))
  518|      0||| !(p15 =
  519|      0|     (SureWareHook_Mod_Exp_t *) DSO_bind_func(surewarehk_dso,
  520|      0|                                              n_surewarehk_Mod_Exp))) {
  521|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  522|      0|        goto err;
  523|      0|    }
  524|       |    /* Copy the pointers */
  525|      0|    p_surewarehk_Init = p1;
  526|      0|    p_surewarehk_Finish = p2;
  527|      0|    p_surewarehk_Rand_Bytes = p3;
  528|      0|    p_surewarehk_Rand_Seed = p4;
  529|      0|    p_surewarehk_Load_Privkey = p5;
  530|      0|    p_surewarehk_Load_Rsa_Pubkey = p6;
  531|      0|    p_surewarehk_Free = p7;
  532|      0|    p_surewarehk_Rsa_Priv_Dec = p8;
  533|      0|    p_surewarehk_Rsa_Sign = p9;
  534|      0|    p_surewarehk_Dsa_Sign = p12;
  535|      0|    p_surewarehk_Info_Pubkey = p13;
  536|      0|    p_surewarehk_Load_Dsa_Pubkey = p14;
  537|      0|    p_surewarehk_Mod_Exp = p15;
  538|       |    /* Contact the hardware and initialises it. */
  539|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  540|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  541|      0|        goto err;
  542|      0|    }
  543|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  544|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  545|      0|        goto err;
  546|      0|    }
  547|       |    /*
  548|       |     * try to load the default private key, if failed does not return a
  549|       |     * failure but wait for an explicit ENGINE_load_privakey
  550|       |     */
  551|      0|    surewarehk_load_privkey(e, NULL, NULL, NULL);
  552|       |
  553|       |    /* Everything's fine. */
  554|      0|#  ifndef OPENSSL_NO_RSA
  555|      0|    if (rsaHndidx == -1)
  556|      0|        rsaHndidx = RSA_get_ex_new_index(0,
  557|      0|                                         "SureWareHook RSA key handle",
  558|      0|                                         NULL, NULL, surewarehk_ex_free);
  559|      0|#  endif
  560|      0|#  ifndef OPENSSL_NO_DSA
  561|      0|    if (dsaHndidx == -1)
  562|      0|        dsaHndidx = DSA_get_ex_new_index(0,
  563|      0|                                         "SureWareHook DSA key handle",
  564|      0|                                         NULL, NULL, surewarehk_ex_free);
  565|      0|#  endif
  566|       |
  567|      0|    return 1;
  568|      1| err:
  569|      1|    if (surewarehk_dso)
  570|      0|        DSO_free(surewarehk_dso);
  571|      1|    surewarehk_dso = NULL;
  572|      1|    p_surewarehk_Init = NULL;
  573|      1|    p_surewarehk_Finish = NULL;
  574|      1|    p_surewarehk_Rand_Bytes = NULL;
  575|      1|    p_surewarehk_Rand_Seed = NULL;
  576|      1|    p_surewarehk_Load_Privkey = NULL;
  577|      1|    p_surewarehk_Load_Rsa_Pubkey = NULL;
  578|      1|    p_surewarehk_Free = NULL;
  579|      1|    p_surewarehk_Rsa_Priv_Dec = NULL;
  580|      1|    p_surewarehk_Rsa_Sign = NULL;
  581|      1|    p_surewarehk_Dsa_Sign = NULL;
  582|      1|    p_surewarehk_Info_Pubkey = NULL;
  583|      1|    p_surewarehk_Load_Dsa_Pubkey = NULL;
  584|      1|    p_surewarehk_Mod_Exp = NULL;
  585|      1|    return 0;
  586|      0|}

e_sureware.c:ERR_SUREWARE_error:
  150|      1|{
  151|      1|    if (SUREWARE_lib_error_code == 0)
  152|      0|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  153|      1|    ERR_PUT_error(SUREWARE_lib_error_code, function, reason, file, line);
  154|      1|}
e_sureware.c:ERR_load_SUREWARE_strings:
  116|      1|{
  117|      1|    if (SUREWARE_lib_error_code == 0)
  118|      1|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (SUREWARE_error_init) {
  121|      1|        SUREWARE_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_functs);
  124|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef SUREWARE_LIB_NAME
  128|      1|        SUREWARE_lib_name->error = ERR_PACK(SUREWARE_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, SUREWARE_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

ENGINE_load_ubsec:
  278|      1|{
  279|       |    /* Copied from eng_[openssl|dyn].c */
  280|      1|    ENGINE *toadd = engine_ubsec();
  281|      1|    if (!toadd)
  282|      0|        return;
  283|      1|    ENGINE_add(toadd);
  284|      1|    ENGINE_free(toadd);
  285|      1|    ERR_clear_error();
  286|      1|}
e_ubsec.c:engine_ubsec:
  266|      1|{
  267|      1|    ENGINE *ret = ENGINE_new();
  268|      1|    if (!ret)
  269|      0|        return NULL;
  270|      1|    if (!bind_helper(ret)) {
  271|      0|        ENGINE_free(ret);
  272|      0|        return NULL;
  273|      0|    }
  274|      1|    return ret;
  275|      1|}
e_ubsec.c:bind_helper:
  207|      1|{
  208|      1|#  ifndef OPENSSL_NO_RSA
  209|      1|    const RSA_METHOD *meth1;
  210|      1|#  endif
  211|      1|#  ifndef OPENSSL_NO_DH
  212|      1|#   ifndef HAVE_UBSEC_DH
  213|      1|    const DH_METHOD *meth3;
  214|      1|#   endif                       /* HAVE_UBSEC_DH */
  215|      1|#  endif
  216|      1|    if (!ENGINE_set_id(e, engine_ubsec_id) ||
  217|      1|        !ENGINE_set_name(e, engine_ubsec_name) ||
  218|      1|#  ifndef OPENSSL_NO_RSA
  219|      1|        !ENGINE_set_RSA(e, &ubsec_rsa) ||
  220|      1|#  endif
  221|      1|#  ifndef OPENSSL_NO_DSA
  222|      1|        !ENGINE_set_DSA(e, &ubsec_dsa) ||
  223|      1|#  endif
  224|      1|#  ifndef OPENSSL_NO_DH
  225|      1|        !ENGINE_set_DH(e, &ubsec_dh) ||
  226|      1|#  endif
  227|      1|        !ENGINE_set_destroy_function(e, ubsec_destroy) ||
  228|      1|        !ENGINE_set_init_function(e, ubsec_init) ||
  229|      1|        !ENGINE_set_finish_function(e, ubsec_finish) ||
  230|      1|        !ENGINE_set_ctrl_function(e, ubsec_ctrl) ||
  231|      1|        !ENGINE_set_cmd_defns(e, ubsec_cmd_defns))
  232|      0|        return 0;
  233|       |
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|       |    /*
  236|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  237|       |     * Broadcom-specific mod_exp and mod_exp_crt so we use those functions.
  238|       |     * NB: We don't use ENGINE_openssl() or anything "more generic" because
  239|       |     * something like the RSAref code may not hook properly, and if you own
  240|       |     * one of these cards then you have the right to do RSA operations on it
  241|       |     * anyway!
  242|       |     */
  243|      1|    meth1 = RSA_PKCS1_SSLeay();
  244|      1|    ubsec_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  245|      1|    ubsec_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  246|      1|    ubsec_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  247|      1|    ubsec_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  248|      1|#  endif
  249|       |
  250|      1|#  ifndef OPENSSL_NO_DH
  251|      1|#   ifndef HAVE_UBSEC_DH
  252|       |    /* Much the same for Diffie-Hellman */
  253|      1|    meth3 = DH_OpenSSL();
  254|      1|    ubsec_dh.generate_key = meth3->generate_key;
  255|      1|    ubsec_dh.compute_key = meth3->compute_key;
  256|      1|#   endif                       /* HAVE_UBSEC_DH */
  257|      1|#  endif
  258|       |
  259|       |    /* Ensure the ubsec error handling is set up */
  260|      1|    ERR_load_UBSEC_strings();
  261|      1|    return 1;
  262|      1|}

e_ubsec.c:ERR_load_UBSEC_strings:
  116|      1|{
  117|      1|    if (UBSEC_lib_error_code == 0)
  118|      1|        UBSEC_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (UBSEC_error_init) {
  121|      1|        UBSEC_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_functs);
  124|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef UBSEC_LIB_NAME
  128|      1|        UBSEC_lib_name->error = ERR_PACK(UBSEC_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, UBSEC_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

SSL_library_init:
   65|      1|{
   66|       |
   67|      1|#ifndef OPENSSL_NO_DES
   68|      1|    EVP_add_cipher(EVP_des_cbc());
   69|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   70|      1|#endif
   71|      1|#ifndef OPENSSL_NO_IDEA
   72|      1|    EVP_add_cipher(EVP_idea_cbc());
   73|      1|#endif
   74|      1|#ifndef OPENSSL_NO_RC4
   75|      1|    EVP_add_cipher(EVP_rc4());
   76|      1|# if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
   77|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
   78|      1|# endif
   79|      1|#endif
   80|      1|#ifndef OPENSSL_NO_RC2
   81|      1|    EVP_add_cipher(EVP_rc2_cbc());
   82|       |    /*
   83|       |     * Not actually used for SSL/TLS but this makes PKCS#12 work if an
   84|       |     * application only calls SSL_library_init().
   85|       |     */
   86|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
   87|      1|#endif
   88|      1|#ifndef OPENSSL_NO_AES
   89|      1|    EVP_add_cipher(EVP_aes_128_cbc());
   90|      1|    EVP_add_cipher(EVP_aes_192_cbc());
   91|      1|    EVP_add_cipher(EVP_aes_256_cbc());
   92|      1|    EVP_add_cipher(EVP_aes_128_gcm());
   93|      1|    EVP_add_cipher(EVP_aes_256_gcm());
   94|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   95|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
   96|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
   97|      1|# endif
   98|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
   99|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  100|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  101|      1|# endif
  102|       |
  103|      1|#endif
  104|      1|#ifndef OPENSSL_NO_CAMELLIA
  105|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  106|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  107|      1|#endif
  108|       |
  109|      1|#ifndef OPENSSL_NO_SEED
  110|      1|    EVP_add_cipher(EVP_seed_cbc());
  111|      1|#endif
  112|       |
  113|      1|#ifndef OPENSSL_NO_MD5
  114|      1|    EVP_add_digest(EVP_md5());
  115|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
  116|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
  117|      1|#endif
  118|      1|#ifndef OPENSSL_NO_SHA
  119|      1|    EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
  120|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
  121|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
  122|      1|#endif
  123|      1|#ifndef OPENSSL_NO_SHA256
  124|      1|    EVP_add_digest(EVP_sha224());
  125|      1|    EVP_add_digest(EVP_sha256());
  126|      1|#endif
  127|      1|#ifndef OPENSSL_NO_SHA512
  128|      1|    EVP_add_digest(EVP_sha384());
  129|      1|    EVP_add_digest(EVP_sha512());
  130|      1|#endif
  131|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
  132|      1|    EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
  133|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
  134|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
  135|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
  136|      1|#endif
  137|      1|#ifndef OPENSSL_NO_ECDSA
  138|      1|    EVP_add_digest(EVP_ecdsa());
  139|      1|#endif
  140|       |    /* If you want support for phased out ciphers, add the following */
  141|       |#if 0
  142|       |    EVP_add_digest(EVP_sha());
  143|       |    EVP_add_digest(EVP_dss());
  144|       |#endif
  145|      1|#ifndef OPENSSL_NO_COMP
  146|       |    /*
  147|       |     * This will initialise the built-in compression algorithms. The value
  148|       |     * returned is a STACK_OF(SSL_COMP), but that can be discarded safely
  149|       |     */
  150|      1|    (void)SSL_COMP_get_compression_methods();
  151|      1|#endif
  152|       |    /* initialize cipher/digest methods table */
  153|      1|    ssl_load_ciphers();
  154|      1|    return (1);
  155|      1|}

ssl_load_ciphers:
  406|      1|{
  407|      1|    ssl_cipher_methods[SSL_ENC_DES_IDX] = EVP_get_cipherbyname(SN_des_cbc);
  408|      1|    ssl_cipher_methods[SSL_ENC_3DES_IDX] =
  409|      1|        EVP_get_cipherbyname(SN_des_ede3_cbc);
  410|      1|    ssl_cipher_methods[SSL_ENC_RC4_IDX] = EVP_get_cipherbyname(SN_rc4);
  411|      1|    ssl_cipher_methods[SSL_ENC_RC2_IDX] = EVP_get_cipherbyname(SN_rc2_cbc);
  412|      1|#ifndef OPENSSL_NO_IDEA
  413|      1|    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = EVP_get_cipherbyname(SN_idea_cbc);
  414|       |#else
  415|       |    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = NULL;
  416|       |#endif
  417|      1|    ssl_cipher_methods[SSL_ENC_AES128_IDX] =
  418|      1|        EVP_get_cipherbyname(SN_aes_128_cbc);
  419|      1|    ssl_cipher_methods[SSL_ENC_AES256_IDX] =
  420|      1|        EVP_get_cipherbyname(SN_aes_256_cbc);
  421|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA128_IDX] =
  422|      1|        EVP_get_cipherbyname(SN_camellia_128_cbc);
  423|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA256_IDX] =
  424|      1|        EVP_get_cipherbyname(SN_camellia_256_cbc);
  425|      1|    ssl_cipher_methods[SSL_ENC_GOST89_IDX] =
  426|      1|        EVP_get_cipherbyname(SN_gost89_cnt);
  427|      1|    ssl_cipher_methods[SSL_ENC_SEED_IDX] = EVP_get_cipherbyname(SN_seed_cbc);
  428|       |
  429|      1|    ssl_cipher_methods[SSL_ENC_AES128GCM_IDX] =
  430|      1|        EVP_get_cipherbyname(SN_aes_128_gcm);
  431|      1|    ssl_cipher_methods[SSL_ENC_AES256GCM_IDX] =
  432|      1|        EVP_get_cipherbyname(SN_aes_256_gcm);
  433|       |
  434|      1|    ssl_digest_methods[SSL_MD_MD5_IDX] = EVP_get_digestbyname(SN_md5);
  435|      1|    ssl_mac_secret_size[SSL_MD_MD5_IDX] =
  436|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_MD5_IDX]);
  437|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0);
  438|      1|    ssl_digest_methods[SSL_MD_SHA1_IDX] = EVP_get_digestbyname(SN_sha1);
  439|      1|    ssl_mac_secret_size[SSL_MD_SHA1_IDX] =
  440|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA1_IDX]);
  441|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0);
  442|      1|    ssl_digest_methods[SSL_MD_GOST94_IDX] =
  443|      1|        EVP_get_digestbyname(SN_id_GostR3411_94);
  444|      1|    if (ssl_digest_methods[SSL_MD_GOST94_IDX]) {
  445|      1|        ssl_mac_secret_size[SSL_MD_GOST94_IDX] =
  446|      1|            EVP_MD_size(ssl_digest_methods[SSL_MD_GOST94_IDX]);
  447|      1|        OPENSSL_assert(ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0);
  448|      1|    }
  449|      1|    ssl_digest_methods[SSL_MD_GOST89MAC_IDX] =
  450|      1|        EVP_get_digestbyname(SN_id_Gost28147_89_MAC);
  451|      1|    ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX] = get_optional_pkey_id("gost-mac");
  452|      1|    if (ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX]) {
  453|      0|        ssl_mac_secret_size[SSL_MD_GOST89MAC_IDX] = 32;
  454|      0|    }
  455|       |
  456|      1|    ssl_digest_methods[SSL_MD_SHA256_IDX] = EVP_get_digestbyname(SN_sha256);
  457|      1|    ssl_mac_secret_size[SSL_MD_SHA256_IDX] =
  458|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA256_IDX]);
  459|      1|    ssl_digest_methods[SSL_MD_SHA384_IDX] = EVP_get_digestbyname(SN_sha384);
  460|      1|    ssl_mac_secret_size[SSL_MD_SHA384_IDX] =
  461|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA384_IDX]);
  462|      1|}
SSL_COMP_get_compression_methods:
 1961|      1|{
 1962|      1|    load_builtin_compressions();
 1963|      1|    return (ssl_comp_methods);
 1964|      1|}
ssl_ciph.c:get_optional_pkey_id:
  388|      1|{
  389|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  390|      1|    ENGINE *tmpeng = NULL;
  391|      1|    int pkey_id = 0;
  392|      1|    ameth = EVP_PKEY_asn1_find_str(&tmpeng, pkey_name, -1);
  393|      1|    if (ameth) {
  394|      0|        if (EVP_PKEY_asn1_get0_info(&pkey_id, NULL, NULL, NULL, NULL,
  395|      0|                                    ameth) <= 0)
  396|      0|            pkey_id = 0;
  397|      0|    }
  398|      1|    if (tmpeng)
  399|      0|        ENGINE_finish(tmpeng);
  400|      1|    return pkey_id;
  401|      1|}
ssl_ciph.c:load_builtin_compressions:
  472|      1|{
  473|      1|    int got_write_lock = 0;
  474|       |
  475|      1|    CRYPTO_r_lock(CRYPTO_LOCK_SSL);
  476|      1|    if (ssl_comp_methods == NULL) {
  477|      1|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  478|      1|        CRYPTO_w_lock(CRYPTO_LOCK_SSL);
  479|      1|        got_write_lock = 1;
  480|       |
  481|      1|        if (ssl_comp_methods == NULL) {
  482|      1|            SSL_COMP *comp = NULL;
  483|       |
  484|      1|            MemCheck_off();
  485|      1|            ssl_comp_methods = sk_SSL_COMP_new(sk_comp_cmp);
  486|      1|            if (ssl_comp_methods != NULL) {
  487|      1|                comp = (SSL_COMP *)OPENSSL_malloc(sizeof(SSL_COMP));
  488|      1|                if (comp != NULL) {
  489|      1|                    comp->method = COMP_zlib();
  490|      1|                    if (comp->method && comp->method->type == NID_undef)
  491|      1|                        OPENSSL_free(comp);
  492|      0|                    else {
  493|      0|                        comp->id = SSL_COMP_ZLIB_IDX;
  494|      0|                        comp->name = comp->method->name;
  495|      0|                        sk_SSL_COMP_push(ssl_comp_methods, comp);
  496|      0|                    }
  497|      1|                }
  498|      1|                sk_SSL_COMP_sort(ssl_comp_methods);
  499|      1|            }
  500|      1|            MemCheck_on();
  501|      1|        }
  502|      1|    }
  503|       |
  504|      1|    if (got_write_lock)
  505|      1|        CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
  506|      0|    else
  507|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  508|      1|}

ERR_load_SSL_strings:
  832|      1|{
  833|      1|#ifndef OPENSSL_NO_ERR
  834|       |
  835|      1|    if (ERR_func_error_string(SSL_str_functs[0].error) == NULL) {
  836|      1|        ERR_load_strings(0, SSL_str_functs);
  837|      1|        ERR_load_strings(0, SSL_str_reasons);
  838|      1|    }
  839|      1|#endif
  840|      1|}

SSL_load_error_strings:
   64|      1|{
   65|      1|#ifndef OPENSSL_NO_ERR
   66|      1|    ERR_load_crypto_strings();
   67|      1|    ERR_load_SSL_strings();
   68|      1|#endif
   69|      1|}

SSL_get_ex_new_index:
 3286|      4|{
 3287|      4|    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, argl, argp,
 3288|      4|                                   new_func, dup_func, free_func);
 3289|      4|}

