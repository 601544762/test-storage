easy.c:sigpipe_ignore:
   44|  2.31k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  2.31k|  ig->no_signal = data->set.no_signal;
   48|  2.31k|  if(!data->set.no_signal) {
   49|  2.31k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  2.31k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  2.31k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  2.31k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  2.31k|    action.sa_handler = SIG_IGN;
   56|  2.31k|    sigaction(SIGPIPE, &action, NULL);
   57|  2.31k|  }
   58|  2.31k|}
easy.c:sigpipe_restore:
   66|  2.31k|{
   67|  2.31k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  2.31k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  2.31k|}
multi.c:sigpipe_ignore:
   44|  3.24k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  3.24k|  ig->no_signal = data->set.no_signal;
   48|  3.24k|  if(!data->set.no_signal) {
   49|  3.24k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  3.24k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  3.24k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  3.24k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  3.24k|    action.sa_handler = SIG_IGN;
   56|  3.24k|    sigaction(SIGPIPE, &action, NULL);
   57|  3.24k|  }
   58|  3.24k|}
multi.c:sigpipe_restore:
   66|  3.24k|{
   67|  3.24k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  3.24k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  3.24k|}
conncache.c:sigpipe_ignore:
   44|  3.10k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  3.10k|  ig->no_signal = data->set.no_signal;
   48|  3.10k|  if(!data->set.no_signal) {
   49|  3.10k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  3.10k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  3.10k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  3.10k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  3.10k|    action.sa_handler = SIG_IGN;
   56|  3.10k|    sigaction(SIGPIPE, &action, NULL);
   57|  3.10k|  }
   58|  3.10k|}
conncache.c:sigpipe_restore:
   66|  3.10k|{
   67|  3.10k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  3.10k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  3.10k|}

Curl_altsvc_cleanup:
  306|  4.57k|{
  307|  4.57k|  struct Curl_llist_element *e;
  308|  4.57k|  struct Curl_llist_element *n;
  309|  4.57k|  if(*altsvcp) {
  310|      0|    struct altsvcinfo *altsvc = *altsvcp;
  311|      0|    for(e = altsvc->list.head; e; e = n) {
  312|      0|      struct altsvc *as = e->ptr;
  313|      0|      n = e->next;
  314|      0|      altsvc_free(as);
  315|      0|    }
  316|      0|    free(altsvc->filename);
  317|      0|    free(altsvc);
  318|      0|    *altsvcp = NULL; /* clear the pointer */
  319|      0|  }
  320|  4.57k|}
Curl_altsvc_save:
  327|  4.57k|{
  328|  4.57k|  struct Curl_llist_element *e;
  329|  4.57k|  struct Curl_llist_element *n;
  330|  4.57k|  CURLcode result = CURLE_OK;
  331|  4.57k|  FILE *out;
  332|  4.57k|  char *tempstore;
  333|  4.57k|  unsigned char randsuffix[9];
  334|       |
  335|  4.57k|  if(!altsvc)
  336|       |    /* no cache activated */
  337|  4.57k|    return CURLE_OK;
  338|       |
  339|       |  /* if not new name is given, use the one we stored from the load */
  340|      0|  if(!file && altsvc->filename)
  341|      0|    file = altsvc->filename;
  342|       |
  343|      0|  if((altsvc->flags & CURLALTSVC_READONLYFILE) || !file || !file[0])
  344|       |    /* marked as read-only, no file or zero length file name */
  345|      0|    return CURLE_OK;
  346|       |
  347|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  348|      0|    return CURLE_FAILED_INIT;
  349|       |
  350|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  351|      0|  if(!tempstore)
  352|      0|    return CURLE_OUT_OF_MEMORY;
  353|       |
  354|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  355|      0|  if(!out)
  356|      0|    result = CURLE_WRITE_ERROR;
  357|      0|  else {
  358|      0|    fputs("# Your alt-svc cache. https://curl.se/docs/alt-svc.html\n"
  359|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  360|      0|          out);
  361|      0|    for(e = altsvc->list.head; e; e = n) {
  362|      0|      struct altsvc *as = e->ptr;
  363|      0|      n = e->next;
  364|      0|      result = altsvc_out(as, out);
  365|      0|      if(result)
  366|      0|        break;
  367|      0|    }
  368|      0|    fclose(out);
  369|      0|    if(!result && Curl_rename(tempstore, file))
  370|      0|      result = CURLE_WRITE_ERROR;
  371|       |
  372|      0|    if(result)
  373|      0|      unlink(tempstore);
  374|      0|  }
  375|      0|  free(tempstore);
  376|      0|  return result;
  377|      0|}

Curl_resolver_global_init:
   92|      1|{
   93|      1|  return CURLE_OK;
   94|      1|}
Curl_resolver_init:
  112|  4.57k|{
  113|  4.57k|  (void)easy;
  114|  4.57k|  *resolver = calloc(1, sizeof(struct resdata));
  115|  4.57k|  if(!*resolver)
  116|      0|    return CURLE_OUT_OF_MEMORY;
  117|  4.57k|  return CURLE_OK;
  118|  4.57k|}
Curl_resolver_cleanup:
  127|  4.57k|{
  128|  4.57k|  free(resolver);
  129|  4.57k|}
Curl_resolver_cancel:
  148|  4.75k|{
  149|  4.75k|  destroy_async_data(&data->state.async);
  150|  4.75k|}
Curl_resolver_kill:
  531|  2.30k|{
  532|  2.30k|  struct thread_data *td = data->state.async.tdata;
  533|       |
  534|       |  /* If we're still resolving, we must wait for the threads to fully clean up,
  535|       |     unfortunately.  Otherwise, we can simply cancel to clean up any resolver
  536|       |     data. */
  537|  2.30k|  if(td && td->thread_hnd != curl_thread_t_null)
  538|      0|    (void)thread_wait_resolv(data, NULL, FALSE);
  539|  2.30k|  else
  540|  2.30k|    Curl_resolver_cancel(data);
  541|  2.30k|}
asyn-thread.c:destroy_async_data:
  380|  4.75k|{
  381|  4.75k|  if(async->tdata) {
  382|      0|    struct thread_data *td = async->tdata;
  383|      0|    int done;
  384|      0|#ifndef CURL_DISABLE_SOCKETPAIR
  385|      0|    curl_socket_t sock_rd = td->tsd.sock_pair[0];
  386|      0|    struct Curl_easy *data = td->tsd.data;
  387|      0|#endif
  388|       |
  389|       |    /*
  390|       |     * if the thread is still blocking in the resolve syscall, detach it and
  391|       |     * let the thread do the cleanup...
  392|       |     */
  393|      0|    Curl_mutex_acquire(td->tsd.mtx);
  394|      0|    done = td->tsd.done;
  395|      0|    td->tsd.done = 1;
  396|      0|    Curl_mutex_release(td->tsd.mtx);
  397|       |
  398|      0|    if(!done) {
  399|      0|      Curl_thread_destroy(td->thread_hnd);
  400|      0|    }
  401|      0|    else {
  402|      0|      if(td->thread_hnd != curl_thread_t_null)
  403|      0|        Curl_thread_join(&td->thread_hnd);
  404|       |
  405|      0|      destroy_thread_sync_data(&td->tsd);
  406|       |
  407|      0|      free(async->tdata);
  408|      0|    }
  409|      0|#ifndef CURL_DISABLE_SOCKETPAIR
  410|       |    /*
  411|       |     * ensure CURLMOPT_SOCKETFUNCTION fires CURL_POLL_REMOVE
  412|       |     * before the FD is invalidated to avoid EBADF on EPOLL_CTL_DEL
  413|       |     */
  414|      0|    Curl_multi_closed(data, sock_rd);
  415|      0|    sclose(sock_rd);
  416|      0|#endif
  417|      0|  }
  418|  4.75k|  async->tdata = NULL;
  419|       |
  420|  4.75k|  free(async->hostname);
  421|  4.75k|  async->hostname = NULL;
  422|  4.75k|}

Curl_base64_encode:
  301|    259|{
  302|    259|  return base64_encode(base64, data, inputbuff, insize, outptr, outlen);
  303|    259|}
Curl_base64url_encode:
  325|      1|{
  326|      1|  return base64_encode(base64url, data, inputbuff, insize, outptr, outlen);
  327|      1|}
base64.c:base64_encode:
  182|    260|{
  183|    260|  CURLcode result;
  184|    260|  unsigned char ibuf[3];
  185|    260|  unsigned char obuf[4];
  186|    260|  int i;
  187|    260|  int inputparts;
  188|    260|  char *output;
  189|    260|  char *base64data;
  190|    260|  char *convbuf = NULL;
  191|       |
  192|    260|  const char *indata = inputbuff;
  193|       |
  194|    260|  *outptr = NULL;
  195|    260|  *outlen = 0;
  196|       |
  197|    260|  if(!insize)
  198|      0|    insize = strlen(indata);
  199|       |
  200|       |#if SIZEOF_SIZE_T == 4
  201|       |  if(insize > UINT_MAX/4)
  202|       |    return CURLE_OUT_OF_MEMORY;
  203|       |#endif
  204|       |
  205|    260|  base64data = output = malloc(insize * 4 / 3 + 4);
  206|    260|  if(!output)
  207|      0|    return CURLE_OUT_OF_MEMORY;
  208|       |
  209|       |  /*
  210|       |   * The base64 data needs to be created using the network encoding
  211|       |   * not the host encoding.  And we can't change the actual input
  212|       |   * so we copy it to a buffer, translate it, and use that instead.
  213|       |   */
  214|    260|  result = Curl_convert_clone(data, indata, insize, &convbuf);
  215|    260|  if(result) {
  216|      0|    free(output);
  217|      0|    return result;
  218|      0|  }
  219|       |
  220|    260|  if(convbuf)
  221|      0|    indata = (char *)convbuf;
  222|       |
  223|  32.6k|  while(insize > 0) {
  224|   129k|    for(i = inputparts = 0; i < 3; i++) {
  225|  97.2k|      if(insize > 0) {
  226|  96.9k|        inputparts++;
  227|  96.9k|        ibuf[i] = (unsigned char) *indata;
  228|  96.9k|        indata++;
  229|  96.9k|        insize--;
  230|  96.9k|      }
  231|    262|      else
  232|    262|        ibuf[i] = 0;
  233|  97.2k|    }
  234|       |
  235|  32.4k|    obuf[0] = (unsigned char)  ((ibuf[0] & 0xFC) >> 2);
  236|  32.4k|    obuf[1] = (unsigned char) (((ibuf[0] & 0x03) << 4) | \
  237|  32.4k|                               ((ibuf[1] & 0xF0) >> 4));
  238|  32.4k|    obuf[2] = (unsigned char) (((ibuf[1] & 0x0F) << 2) | \
  239|  32.4k|                               ((ibuf[2] & 0xC0) >> 6));
  240|  32.4k|    obuf[3] = (unsigned char)   (ibuf[2] & 0x3F);
  241|       |
  242|  32.4k|    switch(inputparts) {
  243|     64|    case 1: /* only one byte read */
  244|     64|      msnprintf(output, 5, "%c%c==",
  245|     64|                table64[obuf[0]],
  246|     64|                table64[obuf[1]]);
  247|     64|      break;
  248|       |
  249|    134|    case 2: /* two bytes read */
  250|    134|      msnprintf(output, 5, "%c%c%c=",
  251|    134|                table64[obuf[0]],
  252|    134|                table64[obuf[1]],
  253|    134|                table64[obuf[2]]);
  254|    134|      break;
  255|       |
  256|  32.2k|    default:
  257|  32.2k|      msnprintf(output, 5, "%c%c%c%c",
  258|  32.2k|                table64[obuf[0]],
  259|  32.2k|                table64[obuf[1]],
  260|  32.2k|                table64[obuf[2]],
  261|  32.2k|                table64[obuf[3]]);
  262|  32.2k|      break;
  263|  32.4k|    }
  264|  32.4k|    output += 4;
  265|  32.4k|  }
  266|       |
  267|       |  /* Zero terminate */
  268|    260|  *output = '\0';
  269|       |
  270|       |  /* Return the pointer to the new data (allocated memory) */
  271|    260|  *outptr = base64data;
  272|       |
  273|    260|  free(convbuf);
  274|       |
  275|       |  /* Return the length of the new data */
  276|    260|  *outlen = strlen(base64data);
  277|       |
  278|    260|  return CURLE_OK;
  279|    260|}

Curl_bufref_init:
   36|      2|{
   37|      2|  DEBUGASSERT(br);
   38|      2|  br->dtor = NULL;
   39|      2|  br->ptr = NULL;
   40|      2|  br->len = 0;
   41|       |
   42|      2|#ifdef DEBUGBUILD
   43|      2|  br->signature = SIGNATURE;
   44|      2|#endif
   45|      2|}
Curl_bufref_free:
   53|      4|{
   54|      4|  DEBUGASSERT(br);
   55|      4|  DEBUGASSERT(br->signature == SIGNATURE);
   56|      4|  DEBUGASSERT(br->ptr || !br->len);
   57|       |
   58|      4|  if(br->ptr && br->dtor)
   59|      2|    br->dtor((void *) br->ptr);
   60|       |
   61|      4|  br->dtor = NULL;
   62|      4|  br->ptr = NULL;
   63|      4|  br->len = 0;
   64|      4|}
Curl_bufref_set:
   72|      2|{
   73|      2|  DEBUGASSERT(ptr || !len);
   74|      2|  DEBUGASSERT(len <= CURL_MAX_INPUT_LENGTH);
   75|       |
   76|      2|  Curl_bufref_free(br);
   77|      2|  br->ptr = (const unsigned char *) ptr;
   78|      2|  br->len = len;
   79|      2|  br->dtor = dtor;
   80|      2|}
Curl_bufref_ptr:
   86|      2|{
   87|      2|  DEBUGASSERT(br);
   88|      2|  DEBUGASSERT(br->signature == SIGNATURE);
   89|      2|  DEBUGASSERT(br->ptr || !br->len);
   90|       |
   91|      2|  return br->ptr;
   92|      2|}
Curl_bufref_len:
   98|      4|{
   99|      4|  DEBUGASSERT(br);
  100|      4|  DEBUGASSERT(br->signature == SIGNATURE);
  101|      4|  DEBUGASSERT(br->ptr || !br->len);
  102|       |
  103|      4|  return br->len;
  104|      4|}

Curl_conncache_init:
  115|  2.25k|{
  116|  2.25k|  int rc;
  117|       |
  118|       |  /* allocate a new easy handle to use when closing cached connections */
  119|  2.25k|  connc->closure_handle = curl_easy_init();
  120|  2.25k|  if(!connc->closure_handle)
  121|      0|    return 1; /* bad */
  122|       |
  123|  2.25k|  rc = Curl_hash_init(&connc->hash, size, Curl_hash_str,
  124|  2.25k|                      Curl_str_key_compare, free_bundle_hash_entry);
  125|  2.25k|  if(rc)
  126|      0|    Curl_close(&connc->closure_handle);
  127|  2.25k|  else
  128|  2.25k|    connc->closure_handle->state.conn_cache = connc;
  129|       |
  130|  2.25k|  return rc;
  131|  2.25k|}
Curl_conncache_destroy:
  134|  2.25k|{
  135|  2.25k|  if(connc)
  136|  2.25k|    Curl_hash_destroy(&connc->hash);
  137|  2.25k|}
Curl_conncache_size:
  172|    983|{
  173|    983|  size_t num;
  174|    983|  CONNCACHE_LOCK(data);
  175|    983|  num = data->state.conn_cache->num_conn;
  176|    983|  CONNCACHE_UNLOCK(data);
  177|    983|  return num;
  178|    983|}
Curl_conncache_find_bundle:
  189|  7.07k|{
  190|  7.07k|  struct connectbundle *bundle = NULL;
  191|  7.07k|  CONNCACHE_LOCK(data);
  192|  7.07k|  if(connc) {
  193|  7.07k|    char key[HASHKEY_SIZE];
  194|  7.07k|    hashkey(conn, key, sizeof(key), hostp);
  195|  7.07k|    bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
  196|  7.07k|  }
  197|       |
  198|  7.07k|  return bundle;
  199|  7.07k|}
Curl_conncache_add_conn:
  235|  2.35k|{
  236|  2.35k|  CURLcode result = CURLE_OK;
  237|  2.35k|  struct connectbundle *bundle = NULL;
  238|  2.35k|  struct connectdata *conn = data->conn;
  239|  2.35k|  struct conncache *connc = data->state.conn_cache;
  240|  2.35k|  DEBUGASSERT(conn);
  241|       |
  242|       |  /* *find_bundle() locks the connection cache */
  243|  2.35k|  bundle = Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
  244|  2.35k|                                      NULL);
  245|  2.35k|  if(!bundle) {
  246|  2.35k|    int rc;
  247|  2.35k|    char key[HASHKEY_SIZE];
  248|       |
  249|  2.35k|    result = bundle_create(&bundle);
  250|  2.35k|    if(result) {
  251|      0|      goto unlock;
  252|      0|    }
  253|       |
  254|  2.35k|    hashkey(conn, key, sizeof(key), NULL);
  255|  2.35k|    rc = conncache_add_bundle(data->state.conn_cache, key, bundle);
  256|       |
  257|  2.35k|    if(!rc) {
  258|      0|      bundle_destroy(bundle);
  259|      0|      result = CURLE_OUT_OF_MEMORY;
  260|      0|      goto unlock;
  261|      0|    }
  262|  2.35k|  }
  263|       |
  264|  2.35k|  bundle_add_conn(bundle, conn);
  265|  2.35k|  conn->connection_id = connc->next_connection_id++;
  266|  2.35k|  connc->num_conn++;
  267|       |
  268|  2.35k|  DEBUGF(infof(data, "Added connection %ld. "
  269|  2.35k|               "The cache now contains %zu members",
  270|  2.35k|               conn->connection_id, connc->num_conn));
  271|       |
  272|  2.35k|  unlock:
  273|  2.35k|  CONNCACHE_UNLOCK(data);
  274|       |
  275|  2.35k|  return result;
  276|  2.35k|}
Curl_conncache_remove_conn:
  287|  2.44k|{
  288|  2.44k|  struct connectbundle *bundle = conn->bundle;
  289|  2.44k|  struct conncache *connc = data->state.conn_cache;
  290|       |
  291|       |  /* The bundle pointer can be NULL, since this function can be called
  292|       |     due to a failed connection attempt, before being added to a bundle */
  293|  2.44k|  if(bundle) {
  294|  2.35k|    if(lock) {
  295|    900|      CONNCACHE_LOCK(data);
  296|    900|    }
  297|  2.35k|    bundle_remove_conn(bundle, conn);
  298|  2.35k|    if(bundle->num_connections == 0)
  299|  2.35k|      conncache_remove_bundle(connc, bundle);
  300|  2.35k|    conn->bundle = NULL; /* removed from it */
  301|  2.35k|    if(connc) {
  302|  2.35k|      connc->num_conn--;
  303|  2.35k|      DEBUGF(infof(data, "The cache now contains %zu members",
  304|  2.35k|                   connc->num_conn));
  305|  2.35k|    }
  306|  2.35k|    if(lock) {
  307|    900|      CONNCACHE_UNLOCK(data);
  308|    900|    }
  309|  2.35k|  }
  310|  2.44k|}
Curl_conncache_foreach:
  329|  3.05k|{
  330|  3.05k|  struct Curl_hash_iterator iter;
  331|  3.05k|  struct Curl_llist_element *curr;
  332|  3.05k|  struct Curl_hash_element *he;
  333|       |
  334|  3.05k|  if(!connc)
  335|      0|    return FALSE;
  336|       |
  337|  3.05k|  CONNCACHE_LOCK(data);
  338|  3.05k|  Curl_hash_start_iterate(&connc->hash, &iter);
  339|       |
  340|  3.05k|  he = Curl_hash_next_element(&iter);
  341|  3.05k|  while(he) {
  342|    850|    struct connectbundle *bundle;
  343|       |
  344|    850|    bundle = he->ptr;
  345|    850|    he = Curl_hash_next_element(&iter);
  346|       |
  347|    850|    curr = bundle->conn_list.head;
  348|    855|    while(curr) {
  349|       |      /* Yes, we need to update curr before calling func(), because func()
  350|       |         might decide to remove the connection */
  351|    850|      struct connectdata *conn = curr->ptr;
  352|    850|      curr = curr->next;
  353|       |
  354|    850|      if(1 == func(data, conn, param)) {
  355|    845|        CONNCACHE_UNLOCK(data);
  356|    845|        return TRUE;
  357|    845|      }
  358|    850|    }
  359|    850|  }
  360|  2.20k|  CONNCACHE_UNLOCK(data);
  361|  2.20k|  return FALSE;
  362|  2.20k|}
Curl_conncache_return_conn:
  403|    983|{
  404|       |  /* data->multi->maxconnects can be negative, deal with it. */
  405|    983|  size_t maxconnects =
  406|    983|    (data->multi->maxconnects < 0) ? data->multi->num_easy * 4:
  407|    983|    data->multi->maxconnects;
  408|    983|  struct connectdata *conn_candidate = NULL;
  409|       |
  410|    983|  conn->lastused = Curl_now(); /* it was used up until now */
  411|    983|  if(maxconnects > 0 &&
  412|    983|     Curl_conncache_size(data) > maxconnects) {
  413|      0|    infof(data, "Connection cache is full, closing the oldest one");
  414|       |
  415|      0|    conn_candidate = Curl_conncache_extract_oldest(data);
  416|      0|    if(conn_candidate) {
  417|       |      /* the winner gets the honour of being disconnected */
  418|      0|      (void)Curl_disconnect(data, conn_candidate, /* dead_connection */ FALSE);
  419|      0|    }
  420|      0|  }
  421|       |
  422|    983|  return (conn_candidate == conn) ? FALSE : TRUE;
  423|       |
  424|    983|}
Curl_conncache_close_all_connections:
  540|  2.25k|{
  541|  2.25k|  struct connectdata *conn;
  542|  2.25k|  char buffer[READBUFFER_MIN + 1];
  543|  2.25k|  if(!connc->closure_handle)
  544|      0|    return;
  545|  2.25k|  connc->closure_handle->state.buffer = buffer;
  546|  2.25k|  connc->closure_handle->set.buffer_size = READBUFFER_MIN;
  547|       |
  548|  2.25k|  conn = conncache_find_first_connection(connc);
  549|  3.10k|  while(conn) {
  550|    851|    SIGPIPE_VARIABLE(pipe_st);
  551|    851|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  552|       |    /* This will remove the connection from the cache */
  553|    851|    connclose(conn, "kill all");
  554|    851|    Curl_conncache_remove_conn(connc->closure_handle, conn, TRUE);
  555|    851|    (void)Curl_disconnect(connc->closure_handle, conn, FALSE);
  556|    851|    sigpipe_restore(&pipe_st);
  557|       |
  558|    851|    conn = conncache_find_first_connection(connc);
  559|    851|  }
  560|       |
  561|  2.25k|  connc->closure_handle->state.buffer = NULL;
  562|  2.25k|  if(connc->closure_handle) {
  563|  2.25k|    SIGPIPE_VARIABLE(pipe_st);
  564|  2.25k|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  565|       |
  566|  2.25k|    Curl_hostcache_clean(connc->closure_handle,
  567|  2.25k|                         connc->closure_handle->dns.hostcache);
  568|  2.25k|    Curl_close(&connc->closure_handle);
  569|  2.25k|    sigpipe_restore(&pipe_st);
  570|  2.25k|  }
  571|  2.25k|}
conncache.c:free_bundle_hash_entry:
  108|  2.35k|{
  109|  2.35k|  struct connectbundle *b = (struct connectbundle *) freethis;
  110|       |
  111|  2.35k|  bundle_destroy(b);
  112|  2.35k|}
conncache.c:hashkey:
  143|  9.43k|{
  144|  9.43k|  const char *hostname;
  145|  9.43k|  long port = conn->remote_port;
  146|       |
  147|  9.43k|#ifndef CURL_DISABLE_PROXY
  148|  9.43k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
  149|      0|    hostname = conn->http_proxy.host.name;
  150|      0|    port = conn->port;
  151|      0|  }
  152|  9.43k|  else
  153|  9.43k|#endif
  154|  9.43k|    if(conn->bits.conn_to_host)
  155|  9.41k|      hostname = conn->conn_to_host.name;
  156|     16|  else
  157|     16|    hostname = conn->host.name;
  158|       |
  159|  9.43k|  if(hostp)
  160|       |    /* report back which name we used */
  161|  4.71k|    *hostp = hostname;
  162|       |
  163|       |  /* put the number first so that the hostname gets cut off if too long */
  164|  9.43k|  msnprintf(buf, len, "%ld%s", port, hostname);
  165|  9.43k|  Curl_strntolower(buf, buf, len);
  166|  9.43k|}
conncache.c:bundle_create:
   54|  2.35k|{
   55|  2.35k|  DEBUGASSERT(*bundlep == NULL);
   56|  2.35k|  *bundlep = malloc(sizeof(struct connectbundle));
   57|  2.35k|  if(!*bundlep)
   58|      0|    return CURLE_OUT_OF_MEMORY;
   59|       |
   60|  2.35k|  (*bundlep)->num_connections = 0;
   61|  2.35k|  (*bundlep)->multiuse = BUNDLE_UNKNOWN;
   62|       |
   63|  2.35k|  Curl_llist_init(&(*bundlep)->conn_list, (Curl_llist_dtor) conn_llist_dtor);
   64|  2.35k|  return CURLE_OK;
   65|  2.35k|}
conncache.c:conn_llist_dtor:
   47|  2.35k|{
   48|  2.35k|  struct connectdata *conn = element;
   49|  2.35k|  (void)user;
   50|  2.35k|  conn->bundle = NULL;
   51|  2.35k|}
conncache.c:conncache_add_bundle:
  204|  2.35k|{
  205|  2.35k|  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
  206|       |
  207|  2.35k|  return p?TRUE:FALSE;
  208|  2.35k|}
conncache.c:bundle_destroy:
   68|  2.35k|{
   69|  2.35k|  if(!bundle)
   70|      0|    return;
   71|       |
   72|  2.35k|  Curl_llist_destroy(&bundle->conn_list, NULL);
   73|       |
   74|  2.35k|  free(bundle);
   75|  2.35k|}
conncache.c:bundle_add_conn:
   80|  2.35k|{
   81|  2.35k|  Curl_llist_insert_next(&bundle->conn_list, bundle->conn_list.tail, conn,
   82|  2.35k|                         &conn->bundle_node);
   83|  2.35k|  conn->bundle = bundle;
   84|  2.35k|  bundle->num_connections++;
   85|  2.35k|}
conncache.c:bundle_remove_conn:
   90|  2.35k|{
   91|  2.35k|  struct Curl_llist_element *curr;
   92|       |
   93|  2.35k|  curr = bundle->conn_list.head;
   94|  2.35k|  while(curr) {
   95|  2.35k|    if(curr->ptr == conn) {
   96|  2.35k|      Curl_llist_remove(&bundle->conn_list, curr, NULL);
   97|  2.35k|      bundle->num_connections--;
   98|  2.35k|      conn->bundle = NULL;
   99|  2.35k|      return 1; /* we removed a handle */
  100|  2.35k|    }
  101|      1|    curr = curr->next;
  102|      1|  }
  103|      0|  DEBUGASSERT(0);
  104|      0|  return 0;
  105|      0|}
conncache.c:conncache_remove_bundle:
  212|  2.35k|{
  213|  2.35k|  struct Curl_hash_iterator iter;
  214|  2.35k|  struct Curl_hash_element *he;
  215|       |
  216|  2.35k|  if(!connc)
  217|      0|    return;
  218|       |
  219|  2.35k|  Curl_hash_start_iterate(&connc->hash, &iter);
  220|       |
  221|  2.35k|  he = Curl_hash_next_element(&iter);
  222|  2.37k|  while(he) {
  223|  2.37k|    if(he->ptr == bundle) {
  224|       |      /* The bundle is destroyed by the hash destructor function,
  225|       |         free_bundle_hash_entry() */
  226|  2.35k|      Curl_hash_delete(&connc->hash, he->key, he->key_len);
  227|  2.35k|      return;
  228|  2.35k|    }
  229|       |
  230|     16|    he = Curl_hash_next_element(&iter);
  231|     16|  }
  232|  2.35k|}
conncache.c:conncache_find_first_connection:
  372|  3.10k|{
  373|  3.10k|  struct Curl_hash_iterator iter;
  374|  3.10k|  struct Curl_hash_element *he;
  375|  3.10k|  struct connectbundle *bundle;
  376|       |
  377|  3.10k|  Curl_hash_start_iterate(&connc->hash, &iter);
  378|       |
  379|  3.10k|  he = Curl_hash_next_element(&iter);
  380|  3.10k|  while(he) {
  381|    851|    struct Curl_llist_element *curr;
  382|    851|    bundle = he->ptr;
  383|       |
  384|    851|    curr = bundle->conn_list.head;
  385|    851|    if(curr) {
  386|    851|      return curr->ptr;
  387|    851|    }
  388|       |
  389|      0|    he = Curl_hash_next_element(&iter);
  390|      0|  }
  391|       |
  392|  2.25k|  return NULL;
  393|  3.10k|}

Curl_timeleft:
  187|  19.5k|{
  188|  19.5k|  unsigned int timeout_set = 0;
  189|  19.5k|  timediff_t connect_timeout_ms = 0;
  190|  19.5k|  timediff_t maxtime_timeout_ms = 0;
  191|  19.5k|  timediff_t timeout_ms = 0;
  192|  19.5k|  struct curltime now;
  193|       |
  194|       |  /* The duration of a connect and the total transfer are calculated from two
  195|       |     different time-stamps. It can end up with the total timeout being reached
  196|       |     before the connect timeout expires and we must acknowledge whichever
  197|       |     timeout that is reached first. The total timeout is set per entire
  198|       |     operation, while the connect timeout is set per connect. */
  199|       |
  200|  19.5k|  if(data->set.timeout > 0) {
  201|  19.5k|    timeout_set = TIMEOUT_MAXTIME;
  202|  19.5k|    maxtime_timeout_ms = data->set.timeout;
  203|  19.5k|  }
  204|  19.5k|  if(duringconnect) {
  205|  4.71k|    timeout_set |= TIMEOUT_CONNECT;
  206|  4.71k|    connect_timeout_ms = (data->set.connecttimeout > 0) ?
  207|  4.71k|      data->set.connecttimeout : DEFAULT_CONNECT_TIMEOUT;
  208|  4.71k|  }
  209|  19.5k|  if(!timeout_set)
  210|       |    /* no timeout  */
  211|      0|    return 0;
  212|       |
  213|  19.5k|  if(!nowp) {
  214|  4.71k|    now = Curl_now();
  215|  4.71k|    nowp = &now;
  216|  4.71k|  }
  217|       |
  218|  19.5k|  if(timeout_set & TIMEOUT_MAXTIME) {
  219|  19.5k|    maxtime_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startop);
  220|  19.5k|    timeout_ms = maxtime_timeout_ms;
  221|  19.5k|  }
  222|       |
  223|  19.5k|  if(timeout_set & TIMEOUT_CONNECT) {
  224|  4.71k|    connect_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startsingle);
  225|       |
  226|  4.71k|    if(!(timeout_set & TIMEOUT_MAXTIME) ||
  227|  4.71k|       (connect_timeout_ms < maxtime_timeout_ms))
  228|      0|      timeout_ms = connect_timeout_ms;
  229|  4.71k|  }
  230|       |
  231|  19.5k|  if(!timeout_ms)
  232|       |    /* avoid returning 0 as that means no timeout! */
  233|      0|    return -1;
  234|       |
  235|  19.5k|  return timeout_ms;
  236|  19.5k|}
Curl_persistconninfo:
  611|  2.30k|{
  612|  2.30k|  memcpy(data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
  613|  2.30k|  if(local_ip && local_ip[0])
  614|      0|    memcpy(data->info.conn_local_ip, local_ip, MAX_IPADR_LEN);
  615|  2.30k|  else
  616|  2.30k|    data->info.conn_local_ip[0] = 0;
  617|  2.30k|  data->info.conn_scheme = conn->handler->scheme;
  618|  2.30k|  data->info.conn_protocol = conn->handler->protocol;
  619|  2.30k|  data->info.conn_primary_port = conn->port;
  620|  2.30k|  data->info.conn_local_port = local_port;
  621|  2.30k|}
Curl_addr2string:
  627|  6.92k|{
  628|  6.92k|  struct sockaddr_in *si = NULL;
  629|  6.92k|#ifdef ENABLE_IPV6
  630|  6.92k|  struct sockaddr_in6 *si6 = NULL;
  631|  6.92k|#endif
  632|  6.92k|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  633|  6.92k|  struct sockaddr_un *su = NULL;
  634|       |#else
  635|       |  (void)salen;
  636|       |#endif
  637|       |
  638|  6.92k|  switch(sa->sa_family) {
  639|  2.30k|    case AF_INET:
  640|  2.30k|      si = (struct sockaddr_in *)(void *) sa;
  641|  2.30k|      if(Curl_inet_ntop(sa->sa_family, &si->sin_addr,
  642|  2.30k|                        addr, MAX_IPADR_LEN)) {
  643|  2.30k|        unsigned short us_port = ntohs(si->sin_port);
  644|  2.30k|        *port = us_port;
  645|  2.30k|        return TRUE;
  646|  2.30k|      }
  647|      0|      break;
  648|      0|#ifdef ENABLE_IPV6
  649|      0|    case AF_INET6:
  650|      0|      si6 = (struct sockaddr_in6 *)(void *) sa;
  651|      0|      if(Curl_inet_ntop(sa->sa_family, &si6->sin6_addr,
  652|      0|                        addr, MAX_IPADR_LEN)) {
  653|      0|        unsigned short us_port = ntohs(si6->sin6_port);
  654|      0|        *port = us_port;
  655|      0|        return TRUE;
  656|      0|      }
  657|      0|      break;
  658|      0|#endif
  659|      0|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  660|  4.61k|    case AF_UNIX:
  661|  4.61k|      if(salen > (curl_socklen_t)sizeof(CURL_SA_FAMILY_T)) {
  662|      0|        su = (struct sockaddr_un*)sa;
  663|      0|        msnprintf(addr, MAX_IPADR_LEN, "%s", su->sun_path);
  664|      0|      }
  665|  4.61k|      else
  666|  4.61k|        addr[0] = 0; /* socket with no name */
  667|  4.61k|      *port = 0;
  668|  4.61k|      return TRUE;
  669|      0|#endif
  670|      0|    default:
  671|      0|      break;
  672|  6.92k|  }
  673|       |
  674|      0|  addr[0] = '\0';
  675|      0|  *port = 0;
  676|      0|  errno = EAFNOSUPPORT;
  677|      0|  return FALSE;
  678|  6.92k|}
Curl_conninfo_remote:
  684|  2.30k|{
  685|  2.30k|#ifdef HAVE_GETPEERNAME
  686|  2.30k|  char buffer[STRERROR_LEN];
  687|  2.30k|  struct Curl_sockaddr_storage ssrem;
  688|  2.30k|  curl_socklen_t plen;
  689|  2.30k|  int port;
  690|  2.30k|  plen = sizeof(struct Curl_sockaddr_storage);
  691|  2.30k|  memset(&ssrem, 0, sizeof(ssrem));
  692|  2.30k|  if(getpeername(sockfd, (struct sockaddr*) &ssrem, &plen)) {
  693|      0|    int error = SOCKERRNO;
  694|      0|    failf(data, "getpeername() failed with errno %d: %s",
  695|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  696|      0|    return;
  697|      0|  }
  698|  2.30k|  if(!Curl_addr2string((struct sockaddr*)&ssrem, plen,
  699|  2.30k|                       conn->primary_ip, &port)) {
  700|      0|    failf(data, "ssrem inet_ntop() failed with errno %d: %s",
  701|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  702|      0|    return;
  703|      0|  }
  704|       |#else
  705|       |  (void)data;
  706|       |  (void)conn;
  707|       |  (void)sockfd;
  708|       |#endif
  709|  2.30k|}
Curl_conninfo_local:
  715|  2.30k|{
  716|  2.30k|#ifdef HAVE_GETSOCKNAME
  717|  2.30k|  char buffer[STRERROR_LEN];
  718|  2.30k|  struct Curl_sockaddr_storage ssloc;
  719|  2.30k|  curl_socklen_t slen;
  720|  2.30k|  slen = sizeof(struct Curl_sockaddr_storage);
  721|  2.30k|  memset(&ssloc, 0, sizeof(ssloc));
  722|  2.30k|  if(getsockname(sockfd, (struct sockaddr*) &ssloc, &slen)) {
  723|      0|    int error = SOCKERRNO;
  724|      0|    failf(data, "getsockname() failed with errno %d: %s",
  725|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  726|      0|    return;
  727|      0|  }
  728|  2.30k|  if(!Curl_addr2string((struct sockaddr*)&ssloc, slen,
  729|  2.30k|                       local_ip, local_port)) {
  730|      0|    failf(data, "ssloc inet_ntop() failed with errno %d: %s",
  731|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  732|      0|    return;
  733|      0|  }
  734|       |#else
  735|       |  (void)data;
  736|       |  (void)sockfd;
  737|       |  (void)local_ip;
  738|       |  (void)local_port;
  739|       |#endif
  740|  2.30k|}
Curl_updateconninfo:
  746|  2.30k|{
  747|       |  /* 'local_ip' and 'local_port' get filled with local's numerical
  748|       |     ip address and port number whenever an outgoing connection is
  749|       |     **established** from the primary socket to a remote address. */
  750|  2.30k|  char local_ip[MAX_IPADR_LEN] = "";
  751|  2.30k|  int local_port = -1;
  752|       |
  753|  2.30k|  if(conn->transport == TRNSPRT_TCP) {
  754|  2.30k|    if(!conn->bits.reuse && !conn->bits.tcp_fastopen)
  755|  2.30k|      Curl_conninfo_remote(data, conn, sockfd);
  756|  2.30k|    Curl_conninfo_local(data, sockfd, local_ip, &local_port);
  757|  2.30k|  } /* end of TCP-only section */
  758|       |
  759|       |  /* persist connection info in session handle */
  760|  2.30k|  Curl_persistconninfo(data, conn, local_ip, local_port);
  761|  2.30k|}
Curl_is_connected:
  852|  2.30k|{
  853|  2.30k|  CURLcode result = CURLE_OK;
  854|  2.30k|  timediff_t allow;
  855|  2.30k|  int error = 0;
  856|  2.30k|  struct curltime now;
  857|  2.30k|  int rc = 0;
  858|  2.30k|  unsigned int i;
  859|       |
  860|  2.30k|  DEBUGASSERT(sockindex >= FIRSTSOCKET && sockindex <= SECONDARYSOCKET);
  861|       |
  862|  2.30k|  *connected = FALSE; /* a very negative world view is best */
  863|       |
  864|  2.30k|  if(conn->bits.tcpconnect[sockindex]) {
  865|       |    /* we are connected already! */
  866|      0|    *connected = TRUE;
  867|      0|    return CURLE_OK;
  868|      0|  }
  869|       |
  870|  2.30k|  now = Curl_now();
  871|       |
  872|  2.30k|  if(SOCKS_STATE(conn->cnnct.state)) {
  873|       |    /* still doing SOCKS */
  874|      0|    result = connect_SOCKS(data, sockindex, connected);
  875|      0|    if(!result && *connected)
  876|      0|      post_SOCKS(data, conn, sockindex, connected);
  877|      0|    return result;
  878|      0|  }
  879|       |
  880|  2.30k|  for(i = 0; i<2; i++) {
  881|  2.30k|    const int other = i ^ 1;
  882|  2.30k|    if(conn->tempsock[i] == CURL_SOCKET_BAD)
  883|      0|      continue;
  884|  2.30k|    error = 0;
  885|       |#ifdef ENABLE_QUIC
  886|       |    if(conn->transport == TRNSPRT_QUIC) {
  887|       |      result = Curl_quic_is_connected(data, conn, i, connected);
  888|       |      if(!result && *connected) {
  889|       |        /* use this socket from now on */
  890|       |        conn->sock[sockindex] = conn->tempsock[i];
  891|       |        conn->ip_addr = conn->tempaddr[i];
  892|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  893|       |        post_SOCKS(data, conn, sockindex, connected);
  894|       |        connkeep(conn, "HTTP/3 default");
  895|       |        return CURLE_OK;
  896|       |      }
  897|       |      if(result) {
  898|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  899|       |        error = SOCKERRNO;
  900|       |      }
  901|       |    }
  902|       |    else
  903|       |#endif
  904|  2.30k|    {
  905|       |#ifdef mpeix
  906|       |      /* Call this function once now, and ignore the results. We do this to
  907|       |         "clear" the error state on the socket so that we can later read it
  908|       |         reliably. This is reported necessary on the MPE/iX operating
  909|       |         system. */
  910|       |      (void)verifyconnect(conn->tempsock[i], NULL);
  911|       |#endif
  912|       |
  913|       |      /* check socket for connect */
  914|  2.30k|      rc = SOCKET_WRITABLE(conn->tempsock[i], 0);
  915|  2.30k|    }
  916|       |
  917|  2.30k|    if(rc == 0) { /* no connection yet */
  918|      0|      if(Curl_timediff(now, conn->connecttime) >=
  919|      0|         conn->timeoutms_per_addr[i]) {
  920|      0|        infof(data, "After %" CURL_FORMAT_TIMEDIFF_T
  921|      0|              "ms connect time, move on!", conn->timeoutms_per_addr[i]);
  922|      0|        error = ETIMEDOUT;
  923|      0|      }
  924|       |
  925|       |      /* should we try another protocol family? */
  926|      0|      if(i == 0 && !conn->bits.parallel_connect &&
  927|      0|         (Curl_timediff(now, conn->connecttime) >=
  928|      0|          data->set.happy_eyeballs_timeout)) {
  929|      0|        conn->bits.parallel_connect = TRUE; /* starting now */
  930|      0|        trynextip(data, conn, sockindex, 1);
  931|      0|      }
  932|      0|    }
  933|  2.30k|    else if(rc == CURL_CSELECT_OUT || conn->bits.tcp_fastopen) {
  934|  2.30k|      if(verifyconnect(conn->tempsock[i], &error)) {
  935|       |        /* we are connected with TCP, awesome! */
  936|       |
  937|       |        /* use this socket from now on */
  938|  2.30k|        conn->sock[sockindex] = conn->tempsock[i];
  939|  2.30k|        conn->ip_addr = conn->tempaddr[i];
  940|  2.30k|        conn->tempsock[i] = CURL_SOCKET_BAD;
  941|  2.30k|#ifdef ENABLE_IPV6
  942|  2.30k|        conn->bits.ipv6 = (conn->ip_addr->ai_family == AF_INET6)?TRUE:FALSE;
  943|  2.30k|#endif
  944|       |
  945|       |        /* close the other socket, if open */
  946|  2.30k|        if(conn->tempsock[other] != CURL_SOCKET_BAD) {
  947|      0|          Curl_closesocket(data, conn, conn->tempsock[other]);
  948|      0|          conn->tempsock[other] = CURL_SOCKET_BAD;
  949|      0|        }
  950|       |
  951|       |        /* see if we need to kick off any SOCKS proxy magic once we
  952|       |           connected */
  953|  2.30k|        result = connect_SOCKS(data, sockindex, connected);
  954|  2.30k|        if(result || !*connected)
  955|      0|          return result;
  956|       |
  957|  2.30k|        post_SOCKS(data, conn, sockindex, connected);
  958|       |
  959|  2.30k|        return CURLE_OK;
  960|  2.30k|      }
  961|  2.30k|    }
  962|      0|    else if(rc & CURL_CSELECT_ERR) {
  963|      0|      (void)verifyconnect(conn->tempsock[i], &error);
  964|      0|    }
  965|       |
  966|       |    /*
  967|       |     * The connection failed here, we should attempt to connect to the "next
  968|       |     * address" for the given host. But first remember the latest error.
  969|       |     */
  970|      0|    if(error) {
  971|      0|      data->state.os_errno = error;
  972|      0|      SET_SOCKERRNO(error);
  973|      0|      if(conn->tempaddr[i]) {
  974|      0|        CURLcode status;
  975|      0|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  976|      0|        char ipaddress[MAX_IPADR_LEN];
  977|      0|        char buffer[STRERROR_LEN];
  978|      0|        Curl_printable_address(conn->tempaddr[i], ipaddress,
  979|      0|                               sizeof(ipaddress));
  980|      0|        infof(data, "connect to %s port %u failed: %s",
  981|      0|              ipaddress, conn->port,
  982|      0|              Curl_strerror(error, buffer, sizeof(buffer)));
  983|      0|#endif
  984|       |
  985|      0|        allow = Curl_timeleft(data, &now, TRUE);
  986|      0|        conn->timeoutms_per_addr[i] = conn->tempaddr[i]->ai_next == NULL ?
  987|      0|          allow : allow / 2;
  988|      0|        ainext(conn, i, TRUE);
  989|      0|        status = trynextip(data, conn, sockindex, i);
  990|      0|        if((status != CURLE_COULDNT_CONNECT) ||
  991|      0|           conn->tempsock[other] == CURL_SOCKET_BAD)
  992|       |          /* the last attempt failed and no other sockets remain open */
  993|      0|          result = status;
  994|      0|      }
  995|      0|    }
  996|      0|  }
  997|       |
  998|       |  /*
  999|       |   * Now that we've checked whether we are connected, check whether we've
 1000|       |   * already timed out.
 1001|       |   *
 1002|       |   * First figure out how long time we have left to connect */
 1003|       |
 1004|      0|  allow = Curl_timeleft(data, &now, TRUE);
 1005|       |
 1006|      0|  if(allow < 0) {
 1007|       |    /* time-out, bail out, go home */
 1008|      0|    failf(data, "Connection timeout after %ld ms",
 1009|      0|          Curl_timediff(now, data->progress.t_startsingle));
 1010|      0|    return CURLE_OPERATION_TIMEDOUT;
 1011|      0|  }
 1012|       |
 1013|      0|  if(result &&
 1014|      0|     (conn->tempsock[0] == CURL_SOCKET_BAD) &&
 1015|      0|     (conn->tempsock[1] == CURL_SOCKET_BAD)) {
 1016|       |    /* no more addresses to try */
 1017|      0|    const char *hostname;
 1018|      0|    char buffer[STRERROR_LEN];
 1019|       |
 1020|       |    /* if the first address family runs out of addresses to try before the
 1021|       |       happy eyeball timeout, go ahead and try the next family now */
 1022|      0|    result = trynextip(data, conn, sockindex, 1);
 1023|      0|    if(!result)
 1024|      0|      return result;
 1025|       |
 1026|      0|#ifndef CURL_DISABLE_PROXY
 1027|      0|    if(conn->bits.socksproxy)
 1028|      0|      hostname = conn->socks_proxy.host.name;
 1029|      0|    else if(conn->bits.httpproxy)
 1030|      0|      hostname = conn->http_proxy.host.name;
 1031|      0|    else
 1032|      0|#endif
 1033|      0|      if(conn->bits.conn_to_host)
 1034|      0|        hostname = conn->conn_to_host.name;
 1035|      0|    else
 1036|      0|      hostname = conn->host.name;
 1037|       |
 1038|      0|    failf(data, "Failed to connect to %s port %u after "
 1039|      0|                "%" CURL_FORMAT_TIMEDIFF_T " ms: %s",
 1040|      0|        hostname, conn->port,
 1041|      0|        Curl_timediff(now, data->progress.t_startsingle),
 1042|      0|        Curl_strerror(error, buffer, sizeof(buffer)));
 1043|       |
 1044|      0|    Curl_quic_disconnect(data, conn, 0);
 1045|      0|    Curl_quic_disconnect(data, conn, 1);
 1046|       |
 1047|       |#ifdef WSAETIMEDOUT
 1048|       |    if(WSAETIMEDOUT == data->state.os_errno)
 1049|       |      result = CURLE_OPERATION_TIMEDOUT;
 1050|       |#elif defined(ETIMEDOUT)
 1051|      0|    if(ETIMEDOUT == data->state.os_errno)
 1052|      0|      result = CURLE_OPERATION_TIMEDOUT;
 1053|      0|#endif
 1054|      0|  }
 1055|      0|  else
 1056|      0|    result = CURLE_OK; /* still trying */
 1057|       |
 1058|      0|  return result;
 1059|      0|}
Curl_connecthost:
 1357|  2.35k|{
 1358|  2.35k|  CURLcode result = CURLE_COULDNT_CONNECT;
 1359|  2.35k|  int i;
 1360|  2.35k|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 1361|       |
 1362|  2.35k|  if(timeout_ms < 0) {
 1363|       |    /* a precaution, no need to continue if time already is up */
 1364|      0|    failf(data, "Connection time-out");
 1365|      0|    return CURLE_OPERATION_TIMEDOUT;
 1366|      0|  }
 1367|       |
 1368|  2.35k|  conn->num_addr = Curl_num_addresses(remotehost->addr);
 1369|  2.35k|  conn->tempaddr[0] = conn->tempaddr[1] = remotehost->addr;
 1370|  2.35k|  conn->tempsock[0] = conn->tempsock[1] = CURL_SOCKET_BAD;
 1371|       |
 1372|       |  /* Max time for the next connection attempt */
 1373|  2.35k|  conn->timeoutms_per_addr[0] =
 1374|  2.35k|    conn->tempaddr[0]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1375|  2.35k|  conn->timeoutms_per_addr[1] =
 1376|  2.35k|    conn->tempaddr[1]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1377|       |
 1378|  2.35k|  if(conn->ip_version == CURL_IPRESOLVE_WHATEVER) {
 1379|       |    /* any IP version is allowed */
 1380|  2.35k|    conn->tempfamily[0] = conn->tempaddr[0]?
 1381|  2.35k|      conn->tempaddr[0]->ai_family:0;
 1382|  2.35k|#ifdef ENABLE_IPV6
 1383|  2.35k|    conn->tempfamily[1] = conn->tempfamily[0] == AF_INET6 ?
 1384|      0|      AF_INET : AF_INET6;
 1385|       |#else
 1386|       |    conn->tempfamily[1] = AF_UNSPEC;
 1387|       |#endif
 1388|  2.35k|  }
 1389|      0|  else {
 1390|       |    /* only one IP version is allowed */
 1391|      0|    conn->tempfamily[0] = (conn->ip_version == CURL_IPRESOLVE_V4) ?
 1392|      0|      AF_INET :
 1393|      0|#ifdef ENABLE_IPV6
 1394|      0|      AF_INET6;
 1395|       |#else
 1396|       |      AF_UNSPEC;
 1397|       |#endif
 1398|      0|    conn->tempfamily[1] = AF_UNSPEC;
 1399|       |
 1400|      0|    ainext(conn, 0, FALSE); /* find first address of the right type */
 1401|      0|  }
 1402|       |
 1403|  2.35k|  ainext(conn, 1, FALSE); /* assigns conn->tempaddr[1] accordingly */
 1404|       |
 1405|  2.35k|  DEBUGF(infof(data, "family0 == %s, family1 == %s",
 1406|  2.35k|               conn->tempfamily[0] == AF_INET ? "v4" : "v6",
 1407|  2.35k|               conn->tempfamily[1] == AF_INET ? "v4" : "v6"));
 1408|       |
 1409|       |  /* get through the list in family order in case of quick failures */
 1410|  4.76k|  for(i = 0; (i < 2) && result; i++) {
 1411|  2.45k|    while(conn->tempaddr[i]) {
 1412|  2.35k|      result = singleipconnect(data, conn, conn->tempaddr[i], i);
 1413|  2.35k|      if(!result)
 1414|  2.30k|        break;
 1415|     49|      ainext(conn, i, TRUE);
 1416|     49|    }
 1417|  2.40k|  }
 1418|  2.35k|  if(result)
 1419|     49|    return result;
 1420|       |
 1421|  2.30k|  Curl_expire(data, data->set.happy_eyeballs_timeout,
 1422|  2.30k|              EXPIRE_HAPPY_EYEBALLS);
 1423|       |
 1424|  2.30k|  return CURLE_OK;
 1425|  2.35k|}
Curl_closesocket:
 1518|  2.30k|{
 1519|  2.30k|  if(conn && conn->fclosesocket) {
 1520|      0|    if((sock == conn->sock[SECONDARYSOCKET]) && conn->bits.sock_accepted)
 1521|       |      /* if this socket matches the second socket, and that was created with
 1522|       |         accept, then we MUST NOT call the callback but clear the accepted
 1523|       |         status */
 1524|      0|      conn->bits.sock_accepted = FALSE;
 1525|      0|    else {
 1526|      0|      int rc;
 1527|      0|      Curl_multi_closed(data, sock);
 1528|      0|      Curl_set_in_callback(data, true);
 1529|      0|      rc = conn->fclosesocket(conn->closesocket_client, sock);
 1530|      0|      Curl_set_in_callback(data, false);
 1531|      0|      return rc;
 1532|      0|    }
 1533|      0|  }
 1534|       |
 1535|  2.30k|  if(conn)
 1536|       |    /* tell the multi-socket code about this */
 1537|  2.30k|    Curl_multi_closed(data, sock);
 1538|       |
 1539|  2.30k|  sclose(sock);
 1540|       |
 1541|  2.30k|  return 0;
 1542|  2.30k|}
Curl_socket:
 1557|  2.35k|{
 1558|  2.35k|  struct connectdata *conn = data->conn;
 1559|  2.35k|  struct Curl_sockaddr_ex dummy;
 1560|       |
 1561|  2.35k|  if(!addr)
 1562|       |    /* if the caller doesn't want info back, use a local temp copy */
 1563|      0|    addr = &dummy;
 1564|       |
 1565|       |  /*
 1566|       |   * The Curl_sockaddr_ex structure is basically libcurl's external API
 1567|       |   * curl_sockaddr structure with enough space available to directly hold
 1568|       |   * any protocol-specific address structures. The variable declared here
 1569|       |   * will be used to pass / receive data to/from the fopensocket callback
 1570|       |   * if this has been set, before that, it is initialized from parameters.
 1571|       |   */
 1572|       |
 1573|  2.35k|  addr->family = ai->ai_family;
 1574|  2.35k|  addr->socktype = (conn->transport == TRNSPRT_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 1575|  2.35k|  addr->protocol = conn->transport != TRNSPRT_TCP ? IPPROTO_UDP :
 1576|  2.35k|    ai->ai_protocol;
 1577|  2.35k|  addr->addrlen = ai->ai_addrlen;
 1578|       |
 1579|  2.35k|  if(addr->addrlen > sizeof(struct Curl_sockaddr_storage))
 1580|      0|     addr->addrlen = sizeof(struct Curl_sockaddr_storage);
 1581|  2.35k|  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
 1582|       |
 1583|  2.35k|  if(data->set.fopensocket) {
 1584|       |   /*
 1585|       |    * If the opensocket callback is set, all the destination address
 1586|       |    * information is passed to the callback. Depending on this information the
 1587|       |    * callback may opt to abort the connection, this is indicated returning
 1588|       |    * CURL_SOCKET_BAD; otherwise it will return a not-connected socket. When
 1589|       |    * the callback returns a valid socket the destination address information
 1590|       |    * might have been changed and this 'new' address will actually be used
 1591|       |    * here to connect.
 1592|       |    */
 1593|  2.35k|    Curl_set_in_callback(data, true);
 1594|  2.35k|    *sockfd = data->set.fopensocket(data->set.opensocket_client,
 1595|  2.35k|                                    CURLSOCKTYPE_IPCXN,
 1596|  2.35k|                                    (struct curl_sockaddr *)addr);
 1597|  2.35k|    Curl_set_in_callback(data, false);
 1598|  2.35k|  }
 1599|      0|  else
 1600|       |    /* opensocket callback not set, so simply create the socket now */
 1601|      0|    *sockfd = socket(addr->family, addr->socktype, addr->protocol);
 1602|       |
 1603|  2.35k|  if(*sockfd == CURL_SOCKET_BAD)
 1604|       |    /* no socket, no connection */
 1605|     49|    return CURLE_COULDNT_CONNECT;
 1606|       |
 1607|  2.30k|  if(conn->transport == TRNSPRT_QUIC) {
 1608|       |    /* QUIC sockets need to be nonblocking */
 1609|      0|    (void)curlx_nonblock(*sockfd, TRUE);
 1610|      0|  }
 1611|       |
 1612|  2.30k|#if defined(ENABLE_IPV6) && defined(HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID)
 1613|  2.30k|  if(conn->scope_id && (addr->family == AF_INET6)) {
 1614|      0|    struct sockaddr_in6 * const sa6 = (void *)&addr->sa_addr;
 1615|      0|    sa6->sin6_scope_id = conn->scope_id;
 1616|      0|  }
 1617|  2.30k|#endif
 1618|       |
 1619|  2.30k|#if defined(__linux__) && defined(IP_RECVERR)
 1620|  2.30k|  if(addr->socktype == SOCK_DGRAM) {
 1621|      0|    int one = 1;
 1622|      0|    switch(addr->family) {
 1623|      0|    case AF_INET:
 1624|      0|      (void)setsockopt(*sockfd, SOL_IP, IP_RECVERR, &one, sizeof(one));
 1625|      0|      break;
 1626|      0|    case AF_INET6:
 1627|      0|      (void)setsockopt(*sockfd, SOL_IPV6, IPV6_RECVERR, &one, sizeof(one));
 1628|      0|      break;
 1629|      0|    }
 1630|      0|  }
 1631|  2.30k|#endif
 1632|       |
 1633|  2.30k|  return CURLE_OK;
 1634|  2.30k|}
Curl_conncontrol:
 1645|  9.19k|{
 1646|       |  /* close if a connection, or a stream that isn't multiplexed. */
 1647|       |  /* This function will be called both before and after this connection is
 1648|       |     associated with a transfer. */
 1649|  9.19k|  bool closeit;
 1650|  9.19k|  DEBUGASSERT(conn);
 1651|  9.19k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1652|  9.19k|  (void)reason; /* useful for debugging */
 1653|  9.19k|#endif
 1654|  9.19k|  closeit = (ctrl == CONNCTRL_CONNECTION) ||
 1655|  9.19k|    ((ctrl == CONNCTRL_STREAM) && !(conn->handler->flags & PROTOPT_STREAM));
 1656|  9.19k|  if((ctrl == CONNCTRL_STREAM) &&
 1657|  9.19k|     (conn->handler->flags & PROTOPT_STREAM))
 1658|    243|    ;
 1659|  8.95k|  else if((bit)closeit != conn->bits.close) {
 1660|  6.99k|    conn->bits.close = closeit; /* the only place in the source code that
 1661|       |                                   should assign this bit */
 1662|  6.99k|  }
 1663|  9.19k|}
connect.c:connect_SOCKS:
  772|  2.30k|{
  773|  2.30k|  CURLcode result = CURLE_OK;
  774|  2.30k|#ifndef CURL_DISABLE_PROXY
  775|  2.30k|  CURLproxycode pxresult = CURLPX_OK;
  776|  2.30k|  struct connectdata *conn = data->conn;
  777|  2.30k|  if(conn->bits.socksproxy) {
  778|       |    /* for the secondary socket (FTP), use the "connect to host"
  779|       |     * but ignore the "connect to port" (use the secondary port)
  780|       |     */
  781|      0|    const char * const host =
  782|      0|      conn->bits.httpproxy ?
  783|      0|      conn->http_proxy.host.name :
  784|      0|      conn->bits.conn_to_host ?
  785|      0|      conn->conn_to_host.name :
  786|      0|      sockindex == SECONDARYSOCKET ?
  787|      0|      conn->secondaryhostname : conn->host.name;
  788|      0|    const int port =
  789|      0|      conn->bits.httpproxy ? (int)conn->http_proxy.port :
  790|      0|      sockindex == SECONDARYSOCKET ? conn->secondary_port :
  791|      0|      conn->bits.conn_to_port ? conn->conn_to_port :
  792|      0|      conn->remote_port;
  793|      0|    switch(conn->socks_proxy.proxytype) {
  794|      0|    case CURLPROXY_SOCKS5:
  795|      0|    case CURLPROXY_SOCKS5_HOSTNAME:
  796|      0|      pxresult = Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd,
  797|      0|                             host, port, sockindex, data, done);
  798|      0|      break;
  799|       |
  800|      0|    case CURLPROXY_SOCKS4:
  801|      0|    case CURLPROXY_SOCKS4A:
  802|      0|      pxresult = Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex,
  803|      0|                             data, done);
  804|      0|      break;
  805|       |
  806|      0|    default:
  807|      0|      failf(data, "unknown proxytype option given");
  808|      0|      result = CURLE_COULDNT_CONNECT;
  809|      0|    } /* switch proxytype */
  810|      0|    if(pxresult) {
  811|      0|      result = CURLE_PROXY;
  812|      0|      data->info.pxcode = pxresult;
  813|      0|    }
  814|      0|  }
  815|  2.30k|  else
  816|       |#else
  817|       |    (void)data;
  818|       |    (void)sockindex;
  819|       |#endif /* CURL_DISABLE_PROXY */
  820|  2.30k|    *done = TRUE; /* no SOCKS proxy, so consider us connected */
  821|       |
  822|  2.30k|  return result;
  823|  2.30k|}
connect.c:post_SOCKS:
  833|  2.30k|{
  834|  2.30k|  conn->bits.tcpconnect[sockindex] = TRUE;
  835|       |
  836|  2.30k|  *connected = TRUE;
  837|  2.30k|  if(sockindex == FIRSTSOCKET)
  838|  2.30k|    Curl_pgrsTime(data, TIMER_CONNECT); /* connect done */
  839|  2.30k|  Curl_updateconninfo(data, conn, conn->sock[sockindex]);
  840|  2.30k|  Curl_verboseconnect(data, conn);
  841|  2.30k|  data->info.numconnects++; /* to track the number of connections made */
  842|  2.30k|}
connect.c:verifyconnect:
  494|  2.30k|{
  495|  2.30k|  bool rc = TRUE;
  496|  2.30k|#ifdef SO_ERROR
  497|  2.30k|  int err = 0;
  498|  2.30k|  curl_socklen_t errSize = sizeof(err);
  499|       |
  500|       |#ifdef WIN32
  501|       |  /*
  502|       |   * In October 2003 we effectively nullified this function on Windows due to
  503|       |   * problems with it using all CPU in multi-threaded cases.
  504|       |   *
  505|       |   * In May 2004, we bring it back to offer more info back on connect failures.
  506|       |   * Gisle Vanem could reproduce the former problems with this function, but
  507|       |   * could avoid them by adding this SleepEx() call below:
  508|       |   *
  509|       |   *    "I don't have Rational Quantify, but the hint from his post was
  510|       |   *    ntdll::NtRemoveIoCompletion(). So I'd assume the SleepEx (or maybe
  511|       |   *    just Sleep(0) would be enough?) would release whatever
  512|       |   *    mutex/critical-section the ntdll call is waiting on.
  513|       |   *
  514|       |   *    Someone got to verify this on Win-NT 4.0, 2000."
  515|       |   */
  516|       |
  517|       |#ifdef _WIN32_WCE
  518|       |  Sleep(0);
  519|       |#else
  520|       |  SleepEx(0, FALSE);
  521|       |#endif
  522|       |
  523|       |#endif
  524|       |
  525|  2.30k|  if(0 != getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void *)&err, &errSize))
  526|      0|    err = SOCKERRNO;
  527|       |#ifdef _WIN32_WCE
  528|       |  /* Old WinCE versions don't support SO_ERROR */
  529|       |  if(WSAENOPROTOOPT == err) {
  530|       |    SET_SOCKERRNO(0);
  531|       |    err = 0;
  532|       |  }
  533|       |#endif
  534|       |#if defined(EBADIOCTL) && defined(__minix)
  535|       |  /* Minix 3.1.x doesn't support getsockopt on UDP sockets */
  536|       |  if(EBADIOCTL == err) {
  537|       |    SET_SOCKERRNO(0);
  538|       |    err = 0;
  539|       |  }
  540|       |#endif
  541|  2.30k|  if((0 == err) || (EISCONN == err))
  542|       |    /* we are connected, awesome! */
  543|  2.30k|    rc = TRUE;
  544|      0|  else
  545|       |    /* This wasn't a successful connect */
  546|      0|    rc = FALSE;
  547|  2.30k|  if(error)
  548|  2.30k|    *error = err;
  549|       |#else
  550|       |  (void)sockfd;
  551|       |  if(error)
  552|       |    *error = SOCKERRNO;
  553|       |#endif
  554|  2.30k|  return rc;
  555|  2.30k|}
connect.c:ainext:
  562|  2.40k|{
  563|  2.40k|  struct Curl_addrinfo *ai = conn->tempaddr[tempindex];
  564|  2.40k|  if(ai && next)
  565|     49|    ai = ai->ai_next;
  566|  4.76k|  while(ai && (ai->ai_family != conn->tempfamily[tempindex]))
  567|  2.35k|    ai = ai->ai_next;
  568|  2.40k|  conn->tempaddr[tempindex] = ai;
  569|  2.40k|  return ai;
  570|  2.40k|}
connect.c:singleipconnect:
 1161|  2.35k|{
 1162|  2.35k|  struct Curl_sockaddr_ex addr;
 1163|  2.35k|  int rc = -1;
 1164|  2.35k|  int error = 0;
 1165|  2.35k|  bool isconnected = FALSE;
 1166|  2.35k|  curl_socket_t sockfd;
 1167|  2.35k|  CURLcode result;
 1168|  2.35k|  char ipaddress[MAX_IPADR_LEN];
 1169|  2.35k|  int port;
 1170|  2.35k|  bool is_tcp;
 1171|  2.35k|#ifdef TCP_FASTOPEN_CONNECT
 1172|  2.35k|  int optval = 1;
 1173|  2.35k|#endif
 1174|  2.35k|  char buffer[STRERROR_LEN];
 1175|  2.35k|  curl_socket_t *sockp = &conn->tempsock[tempindex];
 1176|  2.35k|  *sockp = CURL_SOCKET_BAD;
 1177|       |
 1178|  2.35k|  result = Curl_socket(data, ai, &addr, &sockfd);
 1179|  2.35k|  if(result)
 1180|     49|    return result;
 1181|       |
 1182|       |  /* store remote address and port used in this connection attempt */
 1183|  2.30k|  if(!Curl_addr2string((struct sockaddr*)&addr.sa_addr, addr.addrlen,
 1184|  2.30k|                       ipaddress, &port)) {
 1185|       |    /* malformed address or bug in inet_ntop, try next address */
 1186|      0|    failf(data, "sa_addr inet_ntop() failed with errno %d: %s",
 1187|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
 1188|      0|    Curl_closesocket(data, conn, sockfd);
 1189|      0|    return CURLE_OK;
 1190|      0|  }
 1191|  2.30k|  infof(data, "  Trying %s:%d...", ipaddress, port);
 1192|       |
 1193|  2.30k|#ifdef ENABLE_IPV6
 1194|  2.30k|  is_tcp = (addr.family == AF_INET || addr.family == AF_INET6) &&
 1195|  2.30k|    addr.socktype == SOCK_STREAM;
 1196|       |#else
 1197|       |  is_tcp = (addr.family == AF_INET) && addr.socktype == SOCK_STREAM;
 1198|       |#endif
 1199|  2.30k|  if(is_tcp && data->set.tcp_nodelay)
 1200|  2.30k|    tcpnodelay(data, sockfd);
 1201|       |
 1202|  2.30k|  nosigpipe(data, sockfd);
 1203|       |
 1204|  2.30k|  Curl_sndbufset(sockfd);
 1205|       |
 1206|  2.30k|  if(is_tcp && data->set.tcp_keepalive)
 1207|      0|    tcpkeepalive(data, sockfd);
 1208|       |
 1209|  2.30k|  if(data->set.fsockopt) {
 1210|       |    /* activate callback for setting socket options */
 1211|  2.30k|    Curl_set_in_callback(data, true);
 1212|  2.30k|    error = data->set.fsockopt(data->set.sockopt_client,
 1213|  2.30k|                               sockfd,
 1214|  2.30k|                               CURLSOCKTYPE_IPCXN);
 1215|  2.30k|    Curl_set_in_callback(data, false);
 1216|       |
 1217|  2.30k|    if(error == CURL_SOCKOPT_ALREADY_CONNECTED)
 1218|  2.30k|      isconnected = TRUE;
 1219|      0|    else if(error) {
 1220|      0|      Curl_closesocket(data, conn, sockfd); /* close the socket and bail out */
 1221|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1222|      0|    }
 1223|  2.30k|  }
 1224|       |
 1225|       |  /* possibly bind the local end to an IP, interface or port */
 1226|  2.30k|  if(addr.family == AF_INET
 1227|  2.30k|#ifdef ENABLE_IPV6
 1228|  2.30k|     || addr.family == AF_INET6
 1229|  2.30k|#endif
 1230|  2.30k|    ) {
 1231|  2.30k|    result = bindlocal(data, sockfd, addr.family,
 1232|  2.30k|                       Curl_ipv6_scope((struct sockaddr*)&addr.sa_addr));
 1233|  2.30k|    if(result) {
 1234|      0|      Curl_closesocket(data, conn, sockfd); /* close socket and bail out */
 1235|      0|      if(result == CURLE_UNSUPPORTED_PROTOCOL) {
 1236|       |        /* The address family is not supported on this interface.
 1237|       |           We can continue trying addresses */
 1238|      0|        return CURLE_COULDNT_CONNECT;
 1239|      0|      }
 1240|      0|      return result;
 1241|      0|    }
 1242|  2.30k|  }
 1243|       |
 1244|       |  /* set socket non-blocking */
 1245|  2.30k|  (void)curlx_nonblock(sockfd, TRUE);
 1246|       |
 1247|  2.30k|  conn->connecttime = Curl_now();
 1248|  2.30k|  if(conn->num_addr > 1) {
 1249|      0|    Curl_expire(data, conn->timeoutms_per_addr[0], EXPIRE_DNS_PER_NAME);
 1250|      0|    Curl_expire(data, conn->timeoutms_per_addr[1], EXPIRE_DNS_PER_NAME2);
 1251|      0|  }
 1252|       |
 1253|       |  /* Connect TCP and QUIC sockets */
 1254|  2.30k|  if(!isconnected && (conn->transport != TRNSPRT_UDP)) {
 1255|      0|    if(conn->bits.tcp_fastopen) {
 1256|       |#if defined(CONNECT_DATA_IDEMPOTENT) /* Darwin */
 1257|       |#  if defined(HAVE_BUILTIN_AVAILABLE)
 1258|       |      /* while connectx function is available since macOS 10.11 / iOS 9,
 1259|       |         it did not have the interface declared correctly until
 1260|       |         Xcode 9 / macOS SDK 10.13 */
 1261|       |      if(__builtin_available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *)) {
 1262|       |        sa_endpoints_t endpoints;
 1263|       |        endpoints.sae_srcif = 0;
 1264|       |        endpoints.sae_srcaddr = NULL;
 1265|       |        endpoints.sae_srcaddrlen = 0;
 1266|       |        endpoints.sae_dstaddr = &addr.sa_addr;
 1267|       |        endpoints.sae_dstaddrlen = addr.addrlen;
 1268|       |
 1269|       |        rc = connectx(sockfd, &endpoints, SAE_ASSOCID_ANY,
 1270|       |                      CONNECT_RESUME_ON_READ_WRITE | CONNECT_DATA_IDEMPOTENT,
 1271|       |                      NULL, 0, NULL, NULL);
 1272|       |      }
 1273|       |      else {
 1274|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1275|       |      }
 1276|       |#  else
 1277|       |      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1278|       |#  endif /* HAVE_BUILTIN_AVAILABLE */
 1279|       |#elif defined(TCP_FASTOPEN_CONNECT) /* Linux >= 4.11 */
 1280|      0|      if(setsockopt(sockfd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT,
 1281|      0|                    (void *)&optval, sizeof(optval)) < 0)
 1282|      0|        infof(data, "Failed to enable TCP Fast Open on fd %d", sockfd);
 1283|       |
 1284|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1285|       |#elif defined(MSG_FASTOPEN) /* old Linux */
 1286|       |      if(conn->given->flags & PROTOPT_SSL)
 1287|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1288|       |      else
 1289|       |        rc = 0; /* Do nothing */
 1290|       |#endif
 1291|      0|    }
 1292|      0|    else {
 1293|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1294|      0|    }
 1295|       |
 1296|      0|    if(-1 == rc)
 1297|      0|      error = SOCKERRNO;
 1298|       |#ifdef ENABLE_QUIC
 1299|       |    else if(conn->transport == TRNSPRT_QUIC) {
 1300|       |      /* pass in 'sockfd' separately since it hasn't been put into the
 1301|       |         tempsock array at this point */
 1302|       |      result = Curl_quic_connect(data, conn, sockfd, tempindex,
 1303|       |                                 &addr.sa_addr, addr.addrlen);
 1304|       |      if(result)
 1305|       |        error = SOCKERRNO;
 1306|       |    }
 1307|       |#endif
 1308|      0|  }
 1309|  2.30k|  else {
 1310|  2.30k|    *sockp = sockfd;
 1311|  2.30k|    return CURLE_OK;
 1312|  2.30k|  }
 1313|       |
 1314|      0|  if(-1 == rc) {
 1315|      0|    switch(error) {
 1316|      0|    case EINPROGRESS:
 1317|      0|    case EWOULDBLOCK:
 1318|      0|#if defined(EAGAIN)
 1319|       |#if (EAGAIN) != (EWOULDBLOCK)
 1320|       |      /* On some platforms EAGAIN and EWOULDBLOCK are the
 1321|       |       * same value, and on others they are different, hence
 1322|       |       * the odd #if
 1323|       |       */
 1324|       |    case EAGAIN:
 1325|       |#endif
 1326|      0|#endif
 1327|      0|      result = CURLE_OK;
 1328|      0|      break;
 1329|       |
 1330|      0|    default:
 1331|       |      /* unknown error, fallthrough and try another address! */
 1332|      0|      infof(data, "Immediate connect fail for %s: %s",
 1333|      0|            ipaddress, Curl_strerror(error, buffer, sizeof(buffer)));
 1334|      0|      data->state.os_errno = error;
 1335|       |
 1336|       |      /* connect failed */
 1337|      0|      Curl_closesocket(data, conn, sockfd);
 1338|      0|      result = CURLE_COULDNT_CONNECT;
 1339|      0|    }
 1340|      0|  }
 1341|       |
 1342|      0|  if(!result)
 1343|      0|    *sockp = sockfd;
 1344|       |
 1345|      0|  return result;
 1346|      0|}
connect.c:tcpnodelay:
 1062|  2.30k|{
 1063|  2.30k|#if defined(TCP_NODELAY)
 1064|  2.30k|  curl_socklen_t onoff = (curl_socklen_t) 1;
 1065|  2.30k|  int level = IPPROTO_TCP;
 1066|  2.30k|#if !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1067|  2.30k|  char buffer[STRERROR_LEN];
 1068|       |#else
 1069|       |  (void) data;
 1070|       |#endif
 1071|       |
 1072|  2.30k|  if(setsockopt(sockfd, level, TCP_NODELAY, (void *)&onoff,
 1073|  2.30k|                sizeof(onoff)) < 0)
 1074|  2.30k|    infof(data, "Could not set TCP_NODELAY: %s",
 1075|  2.30k|          Curl_strerror(SOCKERRNO, buffer, sizeof(buffer)));
 1076|       |#else
 1077|       |  (void)data;
 1078|       |  (void)sockfd;
 1079|       |#endif
 1080|  2.30k|}
connect.c:bindlocal:
  240|  2.30k|{
  241|  2.30k|  struct connectdata *conn = data->conn;
  242|  2.30k|  struct Curl_sockaddr_storage sa;
  243|  2.30k|  struct sockaddr *sock = (struct sockaddr *)&sa;  /* bind to this address */
  244|  2.30k|  curl_socklen_t sizeof_sa = 0; /* size of the data sock points to */
  245|  2.30k|  struct sockaddr_in *si4 = (struct sockaddr_in *)&sa;
  246|  2.30k|#ifdef ENABLE_IPV6
  247|  2.30k|  struct sockaddr_in6 *si6 = (struct sockaddr_in6 *)&sa;
  248|  2.30k|#endif
  249|       |
  250|  2.30k|  struct Curl_dns_entry *h = NULL;
  251|  2.30k|  unsigned short port = data->set.localport; /* use this port number, 0 for
  252|       |                                                "random" */
  253|       |  /* how many port numbers to try to bind to, increasing one at a time */
  254|  2.30k|  int portnum = data->set.localportrange;
  255|  2.30k|  const char *dev = data->set.str[STRING_DEVICE];
  256|  2.30k|  int error;
  257|  2.30k|#ifdef IP_BIND_ADDRESS_NO_PORT
  258|  2.30k|  int on = 1;
  259|  2.30k|#endif
  260|       |
  261|       |  /*************************************************************
  262|       |   * Select device to bind socket to
  263|       |   *************************************************************/
  264|  2.30k|  if(!dev && !port)
  265|       |    /* no local kind of binding was requested */
  266|  2.30k|    return CURLE_OK;
  267|       |
  268|      0|  memset(&sa, 0, sizeof(struct Curl_sockaddr_storage));
  269|       |
  270|      0|  if(dev && (strlen(dev)<255) ) {
  271|      0|    char myhost[256] = "";
  272|      0|    int done = 0; /* -1 for error, 1 for address found */
  273|      0|    bool is_interface = FALSE;
  274|      0|    bool is_host = FALSE;
  275|      0|    static const char *if_prefix = "if!";
  276|      0|    static const char *host_prefix = "host!";
  277|       |
  278|      0|    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
  279|      0|      dev += strlen(if_prefix);
  280|      0|      is_interface = TRUE;
  281|      0|    }
  282|      0|    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
  283|      0|      dev += strlen(host_prefix);
  284|      0|      is_host = TRUE;
  285|      0|    }
  286|       |
  287|       |    /* interface */
  288|      0|    if(!is_host) {
  289|      0|#ifdef SO_BINDTODEVICE
  290|       |      /* I am not sure any other OSs than Linux that provide this feature,
  291|       |       * and at the least I cannot test. --Ben
  292|       |       *
  293|       |       * This feature allows one to tightly bind the local socket to a
  294|       |       * particular interface.  This will force even requests to other
  295|       |       * local interfaces to go out the external interface.
  296|       |       *
  297|       |       *
  298|       |       * Only bind to the interface when specified as interface, not just
  299|       |       * as a hostname or ip address.
  300|       |       *
  301|       |       * interface might be a VRF, eg: vrf-blue, which means it cannot be
  302|       |       * converted to an IP address and would fail Curl_if2ip. Simply try
  303|       |       * to use it straight away.
  304|       |       */
  305|      0|      if(setsockopt(sockfd, SOL_SOCKET, SO_BINDTODEVICE,
  306|      0|                    dev, (curl_socklen_t)strlen(dev) + 1) == 0) {
  307|       |        /* This is typically "errno 1, error: Operation not permitted" if
  308|       |         * you're not running as root or another suitable privileged
  309|       |         * user.
  310|       |         * If it succeeds it means the parameter was a valid interface and
  311|       |         * not an IP address. Return immediately.
  312|       |         */
  313|      0|        return CURLE_OK;
  314|      0|      }
  315|      0|#endif
  316|       |
  317|      0|      switch(Curl_if2ip(af, scope, conn->scope_id, dev,
  318|      0|                        myhost, sizeof(myhost))) {
  319|      0|        case IF2IP_NOT_FOUND:
  320|      0|          if(is_interface) {
  321|       |            /* Do not fall back to treating it as a host name */
  322|      0|            failf(data, "Couldn't bind to interface '%s'", dev);
  323|      0|            return CURLE_INTERFACE_FAILED;
  324|      0|          }
  325|      0|          break;
  326|      0|        case IF2IP_AF_NOT_SUPPORTED:
  327|       |          /* Signal the caller to try another address family if available */
  328|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  329|      0|        case IF2IP_FOUND:
  330|      0|          is_interface = TRUE;
  331|       |          /*
  332|       |           * We now have the numerical IP address in the 'myhost' buffer
  333|       |           */
  334|      0|          infof(data, "Local Interface %s is ip %s using address family %i",
  335|      0|                dev, myhost, af);
  336|      0|          done = 1;
  337|      0|          break;
  338|      0|      }
  339|      0|    }
  340|      0|    if(!is_interface) {
  341|       |      /*
  342|       |       * This was not an interface, resolve the name as a host name
  343|       |       * or IP number
  344|       |       *
  345|       |       * Temporarily force name resolution to use only the address type
  346|       |       * of the connection. The resolve functions should really be changed
  347|       |       * to take a type parameter instead.
  348|       |       */
  349|      0|      unsigned char ipver = conn->ip_version;
  350|      0|      int rc;
  351|       |
  352|      0|      if(af == AF_INET)
  353|      0|        conn->ip_version = CURL_IPRESOLVE_V4;
  354|      0|#ifdef ENABLE_IPV6
  355|      0|      else if(af == AF_INET6)
  356|      0|        conn->ip_version = CURL_IPRESOLVE_V6;
  357|      0|#endif
  358|       |
  359|      0|      rc = Curl_resolv(data, dev, 0, FALSE, &h);
  360|      0|      if(rc == CURLRESOLV_PENDING)
  361|      0|        (void)Curl_resolver_wait_resolv(data, &h);
  362|      0|      conn->ip_version = ipver;
  363|       |
  364|      0|      if(h) {
  365|       |        /* convert the resolved address, sizeof myhost >= INET_ADDRSTRLEN */
  366|      0|        Curl_printable_address(h->addr, myhost, sizeof(myhost));
  367|      0|        infof(data, "Name '%s' family %i resolved to '%s' family %i",
  368|      0|              dev, af, myhost, h->addr->ai_family);
  369|      0|        Curl_resolv_unlock(data, h);
  370|      0|        if(af != h->addr->ai_family) {
  371|       |          /* bad IP version combo, signal the caller to try another address
  372|       |             family if available */
  373|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  374|      0|        }
  375|      0|        done = 1;
  376|      0|      }
  377|      0|      else {
  378|       |        /*
  379|       |         * provided dev was no interface (or interfaces are not supported
  380|       |         * e.g. solaris) no ip address and no domain we fail here
  381|       |         */
  382|      0|        done = -1;
  383|      0|      }
  384|      0|    }
  385|       |
  386|      0|    if(done > 0) {
  387|      0|#ifdef ENABLE_IPV6
  388|       |      /* IPv6 address */
  389|      0|      if(af == AF_INET6) {
  390|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  391|      0|        char *scope_ptr = strchr(myhost, '%');
  392|      0|        if(scope_ptr)
  393|      0|          *(scope_ptr++) = 0;
  394|      0|#endif
  395|      0|        if(Curl_inet_pton(AF_INET6, myhost, &si6->sin6_addr) > 0) {
  396|      0|          si6->sin6_family = AF_INET6;
  397|      0|          si6->sin6_port = htons(port);
  398|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  399|      0|          if(scope_ptr)
  400|       |            /* The "myhost" string either comes from Curl_if2ip or from
  401|       |               Curl_printable_address. The latter returns only numeric scope
  402|       |               IDs and the former returns none at all.  So the scope ID, if
  403|       |               present, is known to be numeric */
  404|      0|            si6->sin6_scope_id = atoi(scope_ptr);
  405|      0|#endif
  406|      0|        }
  407|      0|        sizeof_sa = sizeof(struct sockaddr_in6);
  408|      0|      }
  409|      0|      else
  410|      0|#endif
  411|       |      /* IPv4 address */
  412|      0|      if((af == AF_INET) &&
  413|      0|         (Curl_inet_pton(AF_INET, myhost, &si4->sin_addr) > 0)) {
  414|      0|        si4->sin_family = AF_INET;
  415|      0|        si4->sin_port = htons(port);
  416|      0|        sizeof_sa = sizeof(struct sockaddr_in);
  417|      0|      }
  418|      0|    }
  419|       |
  420|      0|    if(done < 1) {
  421|       |      /* errorbuf is set false so failf will overwrite any message already in
  422|       |         the error buffer, so the user receives this error message instead of a
  423|       |         generic resolve error. */
  424|      0|      data->state.errorbuf = FALSE;
  425|      0|      failf(data, "Couldn't bind to '%s'", dev);
  426|      0|      return CURLE_INTERFACE_FAILED;
  427|      0|    }
  428|      0|  }
  429|      0|  else {
  430|       |    /* no device was given, prepare sa to match af's needs */
  431|      0|#ifdef ENABLE_IPV6
  432|      0|    if(af == AF_INET6) {
  433|      0|      si6->sin6_family = AF_INET6;
  434|      0|      si6->sin6_port = htons(port);
  435|      0|      sizeof_sa = sizeof(struct sockaddr_in6);
  436|      0|    }
  437|      0|    else
  438|      0|#endif
  439|      0|    if(af == AF_INET) {
  440|      0|      si4->sin_family = AF_INET;
  441|      0|      si4->sin_port = htons(port);
  442|      0|      sizeof_sa = sizeof(struct sockaddr_in);
  443|      0|    }
  444|      0|  }
  445|      0|#ifdef IP_BIND_ADDRESS_NO_PORT
  446|      0|  (void)setsockopt(sockfd, SOL_IP, IP_BIND_ADDRESS_NO_PORT, &on, sizeof(on));
  447|      0|#endif
  448|      0|  for(;;) {
  449|      0|    if(bind(sockfd, sock, sizeof_sa) >= 0) {
  450|       |      /* we succeeded to bind */
  451|      0|      struct Curl_sockaddr_storage add;
  452|      0|      curl_socklen_t size = sizeof(add);
  453|      0|      memset(&add, 0, sizeof(struct Curl_sockaddr_storage));
  454|      0|      if(getsockname(sockfd, (struct sockaddr *) &add, &size) < 0) {
  455|      0|        char buffer[STRERROR_LEN];
  456|      0|        data->state.os_errno = error = SOCKERRNO;
  457|      0|        failf(data, "getsockname() failed with errno %d: %s",
  458|      0|              error, Curl_strerror(error, buffer, sizeof(buffer)));
  459|      0|        return CURLE_INTERFACE_FAILED;
  460|      0|      }
  461|      0|      infof(data, "Local port: %hu", port);
  462|      0|      conn->bits.bound = TRUE;
  463|      0|      return CURLE_OK;
  464|      0|    }
  465|       |
  466|      0|    if(--portnum > 0) {
  467|      0|      infof(data, "Bind to local port %hu failed, trying next", port);
  468|      0|      port++; /* try next port */
  469|       |      /* We re-use/clobber the port variable here below */
  470|      0|      if(sock->sa_family == AF_INET)
  471|      0|        si4->sin_port = ntohs(port);
  472|      0|#ifdef ENABLE_IPV6
  473|      0|      else
  474|      0|        si6->sin6_port = ntohs(port);
  475|      0|#endif
  476|      0|    }
  477|      0|    else
  478|      0|      break;
  479|      0|  }
  480|      0|  {
  481|      0|    char buffer[STRERROR_LEN];
  482|      0|    data->state.os_errno = error = SOCKERRNO;
  483|      0|    failf(data, "bind failed with errno %d: %s",
  484|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  485|      0|  }
  486|       |
  487|      0|  return CURLE_INTERFACE_FAILED;
  488|      0|}

Curl_all_content_encodings:
  853|    186|{
  854|    186|  size_t len = 0;
  855|    186|  const struct content_encoding * const *cep;
  856|    186|  const struct content_encoding *ce;
  857|    186|  char *ace;
  858|       |
  859|    744|  for(cep = encodings; *cep; cep++) {
  860|    558|    ce = *cep;
  861|    558|    if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT))
  862|    372|      len += strlen(ce->name) + 2;
  863|    558|  }
  864|       |
  865|    186|  if(!len)
  866|      0|    return strdup(CONTENT_ENCODING_DEFAULT);
  867|       |
  868|    186|  ace = malloc(len);
  869|    186|  if(ace) {
  870|    186|    char *p = ace;
  871|    744|    for(cep = encodings; *cep; cep++) {
  872|    558|      ce = *cep;
  873|    558|      if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT)) {
  874|    372|        strcpy(p, ce->name);
  875|    372|        p += strlen(p);
  876|    372|        *p++ = ',';
  877|    372|        *p++ = ' ';
  878|    372|      }
  879|    558|    }
  880|    186|    p[-2] = '\0';
  881|    186|  }
  882|       |
  883|    186|  return ace;
  884|    186|}
Curl_unencode_write:
  994|    552|{
  995|    552|  if(!nbytes)
  996|      0|    return CURLE_OK;
  997|    552|  return writer->handler->unencode_write(data, writer, buf, nbytes);
  998|    552|}
Curl_unencode_cleanup:
 1002|  2.30k|{
 1003|  2.30k|  struct SingleRequest *k = &data->req;
 1004|  2.30k|  struct contenc_writer *writer = k->writer_stack;
 1005|       |
 1006|  2.82k|  while(writer) {
 1007|    515|    k->writer_stack = writer->downstream;
 1008|    515|    writer->handler->close_writer(data, writer);
 1009|    515|    free(writer);
 1010|    515|    writer = k->writer_stack;
 1011|    515|  }
 1012|  2.30k|}
Curl_build_unencoding_stack:
 1033|    273|{
 1034|    273|  struct SingleRequest *k = &data->req;
 1035|       |
 1036|    315|  do {
 1037|    315|    const char *name;
 1038|    315|    size_t namelen;
 1039|       |
 1040|       |    /* Parse a single encoding name. */
 1041|    748|    while(ISSPACE(*enclist) || *enclist == ',')
 1042|    433|      enclist++;
 1043|       |
 1044|    315|    name = enclist;
 1045|       |
 1046|  2.48k|    for(namelen = 0; *enclist && *enclist != ','; enclist++)
 1047|  2.17k|      if(!ISSPACE(*enclist))
 1048|  1.54k|        namelen = enclist - name + 1;
 1049|       |
 1050|       |    /* Special case: chunked encoding is handled at the reader level. */
 1051|    315|    if(maybechunked && namelen == 7 && strncasecompare(name, "chunked", 7)) {
 1052|      0|      k->chunk = TRUE;             /* chunks coming our way. */
 1053|      0|      Curl_httpchunk_init(data);   /* init our chunky engine. */
 1054|      0|    }
 1055|    315|    else if(namelen) {
 1056|    304|      const struct content_encoding *encoding = find_encoding(name, namelen);
 1057|    304|      struct contenc_writer *writer;
 1058|       |
 1059|    304|      if(!k->writer_stack) {
 1060|    211|        k->writer_stack = new_unencoding_writer(data, &client_encoding, NULL);
 1061|       |
 1062|    211|        if(!k->writer_stack)
 1063|      0|          return CURLE_OUT_OF_MEMORY;
 1064|    211|      }
 1065|       |
 1066|    304|      if(!encoding)
 1067|     95|        encoding = &error_encoding;  /* Defer error at stack use. */
 1068|       |
 1069|       |      /* Stack the unencoding stage. */
 1070|    304|      writer = new_unencoding_writer(data, encoding, k->writer_stack);
 1071|    304|      if(!writer)
 1072|      0|        return CURLE_OUT_OF_MEMORY;
 1073|    304|      k->writer_stack = writer;
 1074|    304|    }
 1075|    315|  } while(*enclist);
 1076|       |
 1077|    273|  return CURLE_OK;
 1078|    273|}
content_encoding.c:zalloc_cb:
   93|    305|{
   94|    305|  (void) opaque;
   95|       |  /* not a typo, keep it calloc() */
   96|    305|  return (voidpf) calloc(items, size);
   97|    305|}
content_encoding.c:zfree_cb:
  101|    305|{
  102|    305|  (void) opaque;
  103|    305|  free(ptr);
  104|    305|}
content_encoding.c:process_zlib_error:
  108|     95|{
  109|     95|  if(z->msg)
  110|     94|    failf(data, "Error while processing content unencoding: %s",
  111|     94|          z->msg);
  112|      1|  else
  113|      1|    failf(data, "Error while processing content unencoding: "
  114|      1|          "Unknown failure within decompression software.");
  115|       |
  116|     95|  return CURLE_BAD_CONTENT_ENCODING;
  117|     95|}
content_encoding.c:process_trailer:
  137|      2|{
  138|      2|  z_stream *z = &zp->z;
  139|      2|  CURLcode result = CURLE_OK;
  140|      2|  uInt len = z->avail_in < zp->trailerlen? z->avail_in: zp->trailerlen;
  141|       |
  142|       |  /* Consume expected trailer bytes. Terminate stream if exhausted.
  143|       |     Issue an error if unexpected bytes follow. */
  144|       |
  145|      2|  zp->trailerlen -= len;
  146|      2|  z->avail_in -= len;
  147|      2|  z->next_in += len;
  148|      2|  if(z->avail_in)
  149|      1|    result = CURLE_WRITE_ERROR;
  150|      2|  if(result || !zp->trailerlen)
  151|      2|    result = exit_zlib(data, z, &zp->zlib_init, result);
  152|      0|  else {
  153|       |    /* Only occurs for gzip with zlib < 1.2.0.4 or raw deflate. */
  154|      0|    zp->zlib_init = ZLIB_EXTERNAL_TRAILER;
  155|      0|  }
  156|      2|  return result;
  157|      2|}
content_encoding.c:exit_zlib:
  122|    313|{
  123|    313|  if(*zlib_init == ZLIB_GZIP_HEADER)
  124|      0|    Curl_safefree(z->next_in);
  125|       |
  126|    313|  if(*zlib_init != ZLIB_UNINIT) {
  127|    209|    if(inflateEnd(z) != Z_OK && result == CURLE_OK)
  128|      0|      result = process_zlib_error(data, z);
  129|    209|    *zlib_init = ZLIB_UNINIT;
  130|    209|  }
  131|       |
  132|    313|  return result;
  133|    313|}
content_encoding.c:inflate_stream:
  162|    237|{
  163|    237|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  164|    237|  z_stream *z = &zp->z;         /* zlib state structure */
  165|    237|  uInt nread = z->avail_in;
  166|    237|  Bytef *orig_in = z->next_in;
  167|    237|  bool done = FALSE;
  168|    237|  CURLcode result = CURLE_OK;   /* Curl_client_write status */
  169|    237|  char *decomp;                 /* Put the decompressed data here. */
  170|       |
  171|       |  /* Check state. */
  172|    237|  if(zp->zlib_init != ZLIB_INIT &&
  173|    237|     zp->zlib_init != ZLIB_INFLATING &&
  174|    237|     zp->zlib_init != ZLIB_INIT_GZIP &&
  175|    237|     zp->zlib_init != ZLIB_GZIP_INFLATING)
  176|      0|    return exit_zlib(data, z, &zp->zlib_init, CURLE_WRITE_ERROR);
  177|       |
  178|       |  /* Dynamically allocate a buffer for decompression because it's uncommonly
  179|       |     large to hold on the stack */
  180|    237|  decomp = malloc(DSIZ);
  181|    237|  if(!decomp)
  182|      0|    return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  183|       |
  184|       |  /* because the buffer size is fixed, iteratively decompress and transfer to
  185|       |     the client via downstream_write function. */
  186|  1.05k|  while(!done) {
  187|    825|    int status;                   /* zlib status */
  188|    825|    done = TRUE;
  189|       |
  190|       |    /* (re)set buffer for decompressed output for every iteration */
  191|    825|    z->next_out = (Bytef *) decomp;
  192|    825|    z->avail_out = DSIZ;
  193|       |
  194|    825|#ifdef Z_BLOCK
  195|       |    /* Z_BLOCK is only available in zlib ver. >= 1.2.0.5 */
  196|    825|    status = inflate(z, Z_BLOCK);
  197|       |#else
  198|       |    /* fallback for zlib ver. < 1.2.0.5 */
  199|       |    status = inflate(z, Z_SYNC_FLUSH);
  200|       |#endif
  201|       |
  202|       |    /* Flush output data if some. */
  203|    825|    if(z->avail_out != DSIZ) {
  204|    337|      if(status == Z_OK || status == Z_STREAM_END) {
  205|    323|        zp->zlib_init = started;      /* Data started. */
  206|    323|        result = Curl_unencode_write(data, writer->downstream, decomp,
  207|    323|                                     DSIZ - z->avail_out);
  208|    323|        if(result) {
  209|      7|          exit_zlib(data, z, &zp->zlib_init, result);
  210|      7|          break;
  211|      7|        }
  212|    323|      }
  213|    337|    }
  214|       |
  215|       |    /* Dispatch by inflate() status. */
  216|    818|    switch(status) {
  217|    588|    case Z_OK:
  218|       |      /* Always loop: there may be unflushed latched data in zlib state. */
  219|    588|      done = FALSE;
  220|    588|      break;
  221|    133|    case Z_BUF_ERROR:
  222|       |      /* No more data to flush: just exit loop. */
  223|    133|      break;
  224|      2|    case Z_STREAM_END:
  225|      2|      result = process_trailer(data, zp);
  226|      2|      break;
  227|     94|    case Z_DATA_ERROR:
  228|       |      /* some servers seem to not generate zlib headers, so this is an attempt
  229|       |         to fix and continue anyway */
  230|     94|      if(zp->zlib_init == ZLIB_INIT) {
  231|       |        /* Do not use inflateReset2(): only available since zlib 1.2.3.4. */
  232|      0|        (void) inflateEnd(z);     /* don't care about the return code */
  233|      0|        if(inflateInit2(z, -MAX_WBITS) == Z_OK) {
  234|      0|          z->next_in = orig_in;
  235|      0|          z->avail_in = nread;
  236|      0|          zp->zlib_init = ZLIB_INFLATING;
  237|      0|          zp->trailerlen = 4; /* Tolerate up to 4 unknown trailer bytes. */
  238|      0|          done = FALSE;
  239|      0|          break;
  240|      0|        }
  241|      0|        zp->zlib_init = ZLIB_UNINIT;    /* inflateEnd() already called. */
  242|      0|      }
  243|     94|      result = exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  244|     94|      break;
  245|      1|    default:
  246|      1|      result = exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  247|      1|      break;
  248|    818|    }
  249|    818|  }
  250|    237|  free(decomp);
  251|       |
  252|       |  /* We're about to leave this call so the `nread' data bytes won't be seen
  253|       |     again. If we are in a state that would wrongly allow restart in raw mode
  254|       |     at the next call, assume output has already started. */
  255|    237|  if(nread && zp->zlib_init == ZLIB_INIT)
  256|      0|    zp->zlib_init = started;      /* Cannot restart anymore. */
  257|       |
  258|    237|  return result;
  259|    237|}
content_encoding.c:gzip_init_writer:
  322|    209|{
  323|    209|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  324|    209|  z_stream *z = &zp->z;     /* zlib state structure */
  325|       |
  326|    209|  if(!writer->downstream)
  327|      0|    return CURLE_WRITE_ERROR;
  328|       |
  329|       |  /* Initialize zlib */
  330|    209|  z->zalloc = (alloc_func) zalloc_cb;
  331|    209|  z->zfree = (free_func) zfree_cb;
  332|       |
  333|    209|  if(strcmp(zlibVersion(), "1.2.0.4") >= 0) {
  334|       |    /* zlib ver. >= 1.2.0.4 supports transparent gzip decompressing */
  335|    209|    if(inflateInit2(z, MAX_WBITS + 32) != Z_OK) {
  336|      0|      return process_zlib_error(data, z);
  337|      0|    }
  338|    209|    zp->zlib_init = ZLIB_INIT_GZIP; /* Transparent gzip decompress state */
  339|    209|  }
  340|      0|  else {
  341|       |    /* we must parse the gzip header and trailer ourselves */
  342|      0|    if(inflateInit2(z, -MAX_WBITS) != Z_OK) {
  343|      0|      return process_zlib_error(data, z);
  344|      0|    }
  345|      0|    zp->trailerlen = 8; /* A CRC-32 and a 32-bit input size (RFC 1952, 2.2) */
  346|      0|    zp->zlib_init = ZLIB_INIT; /* Initial call state */
  347|      0|  }
  348|       |
  349|    209|  return CURLE_OK;
  350|    209|}
content_encoding.c:gzip_unencode_write:
  439|    237|{
  440|    237|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  441|    237|  z_stream *z = &zp->z;     /* zlib state structure */
  442|       |
  443|    237|  if(zp->zlib_init == ZLIB_INIT_GZIP) {
  444|       |    /* Let zlib handle the gzip decompression entirely */
  445|    237|    z->next_in = (Bytef *) buf;
  446|    237|    z->avail_in = (uInt) nbytes;
  447|       |    /* Now uncompress the data */
  448|    237|    return inflate_stream(data, writer, ZLIB_INIT_GZIP);
  449|    237|  }
  450|       |
  451|       |#ifndef OLD_ZLIB_SUPPORT
  452|       |  /* Support for old zlib versions is compiled away and we are running with
  453|       |     an old version, so return an error. */
  454|       |  return exit_zlib(data, z, &zp->zlib_init, CURLE_WRITE_ERROR);
  455|       |
  456|       |#else
  457|       |  /* This next mess is to get around the potential case where there isn't
  458|       |   * enough data passed in to skip over the gzip header.  If that happens, we
  459|       |   * malloc a block and copy what we have then wait for the next call.  If
  460|       |   * there still isn't enough (this is definitely a worst-case scenario), we
  461|       |   * make the block bigger, copy the next part in and keep waiting.
  462|       |   *
  463|       |   * This is only required with zlib versions < 1.2.0.4 as newer versions
  464|       |   * can handle the gzip header themselves.
  465|       |   */
  466|       |
  467|      0|  switch(zp->zlib_init) {
  468|       |  /* Skip over gzip header? */
  469|      0|  case ZLIB_INIT:
  470|      0|  {
  471|       |    /* Initial call state */
  472|      0|    ssize_t hlen;
  473|       |
  474|      0|    switch(check_gzip_header((unsigned char *) buf, nbytes, &hlen)) {
  475|      0|    case GZIP_OK:
  476|      0|      z->next_in = (Bytef *) buf + hlen;
  477|      0|      z->avail_in = (uInt) (nbytes - hlen);
  478|      0|      zp->zlib_init = ZLIB_GZIP_INFLATING; /* Inflating stream state */
  479|      0|      break;
  480|       |
  481|      0|    case GZIP_UNDERFLOW:
  482|       |      /* We need more data so we can find the end of the gzip header.  It's
  483|       |       * possible that the memory block we malloc here will never be freed if
  484|       |       * the transfer abruptly aborts after this point.  Since it's unlikely
  485|       |       * that circumstances will be right for this code path to be followed in
  486|       |       * the first place, and it's even more unlikely for a transfer to fail
  487|       |       * immediately afterwards, it should seldom be a problem.
  488|       |       */
  489|      0|      z->avail_in = (uInt) nbytes;
  490|      0|      z->next_in = malloc(z->avail_in);
  491|      0|      if(!z->next_in) {
  492|      0|        return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  493|      0|      }
  494|      0|      memcpy(z->next_in, buf, z->avail_in);
  495|      0|      zp->zlib_init = ZLIB_GZIP_HEADER;  /* Need more gzip header data state */
  496|       |      /* We don't have any data to inflate yet */
  497|      0|      return CURLE_OK;
  498|       |
  499|      0|    case GZIP_BAD:
  500|      0|    default:
  501|      0|      return exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  502|      0|    }
  503|       |
  504|      0|  }
  505|      0|  break;
  506|       |
  507|      0|  case ZLIB_GZIP_HEADER:
  508|      0|  {
  509|       |    /* Need more gzip header data state */
  510|      0|    ssize_t hlen;
  511|      0|    z->avail_in += (uInt) nbytes;
  512|      0|    z->next_in = Curl_saferealloc(z->next_in, z->avail_in);
  513|      0|    if(!z->next_in) {
  514|      0|      return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  515|      0|    }
  516|       |    /* Append the new block of data to the previous one */
  517|      0|    memcpy(z->next_in + z->avail_in - nbytes, buf, nbytes);
  518|       |
  519|      0|    switch(check_gzip_header(z->next_in, z->avail_in, &hlen)) {
  520|      0|    case GZIP_OK:
  521|       |      /* This is the zlib stream data */
  522|      0|      free(z->next_in);
  523|       |      /* Don't point into the malloced block since we just freed it */
  524|      0|      z->next_in = (Bytef *) buf + hlen + nbytes - z->avail_in;
  525|      0|      z->avail_in = (uInt) (z->avail_in - hlen);
  526|      0|      zp->zlib_init = ZLIB_GZIP_INFLATING;   /* Inflating stream state */
  527|      0|      break;
  528|       |
  529|      0|    case GZIP_UNDERFLOW:
  530|       |      /* We still don't have any data to inflate! */
  531|      0|      return CURLE_OK;
  532|       |
  533|      0|    case GZIP_BAD:
  534|      0|    default:
  535|      0|      return exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  536|      0|    }
  537|       |
  538|      0|  }
  539|      0|  break;
  540|       |
  541|      0|  case ZLIB_EXTERNAL_TRAILER:
  542|      0|    z->next_in = (Bytef *) buf;
  543|      0|    z->avail_in = (uInt) nbytes;
  544|      0|    return process_trailer(data, zp);
  545|       |
  546|      0|  case ZLIB_GZIP_INFLATING:
  547|      0|  default:
  548|       |    /* Inflating stream state */
  549|      0|    z->next_in = (Bytef *) buf;
  550|      0|    z->avail_in = (uInt) nbytes;
  551|      0|    break;
  552|      0|  }
  553|       |
  554|      0|  if(z->avail_in == 0) {
  555|       |    /* We don't have any data to inflate; wait until next time */
  556|      0|    return CURLE_OK;
  557|      0|  }
  558|       |
  559|       |  /* We've parsed the header, now uncompress the data */
  560|      0|  return inflate_stream(data, writer, ZLIB_GZIP_INFLATING);
  561|      0|#endif
  562|      0|}
content_encoding.c:gzip_close_writer:
  566|    209|{
  567|    209|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  568|    209|  z_stream *z = &zp->z;     /* zlib state structure */
  569|       |
  570|    209|  exit_zlib(data, z, &zp->zlib_init, CURLE_OK);
  571|    209|}
content_encoding.c:find_encoding:
 1017|    304|{
 1018|    304|  const struct content_encoding * const *cep;
 1019|       |
 1020|  1.00k|  for(cep = encodings; *cep; cep++) {
 1021|    912|    const struct content_encoding *ce = *cep;
 1022|    912|    if((strncasecompare(name, ce->name, len) && !ce->name[len]) ||
 1023|    912|       (ce->alias && strncasecompare(name, ce->alias, len) && !ce->alias[len]))
 1024|    209|      return ce;
 1025|    912|  }
 1026|     95|  return NULL;
 1027|    304|}
content_encoding.c:new_unencoding_writer:
  973|    515|{
  974|    515|  size_t sz = offsetof(struct contenc_writer, params) + handler->paramsize;
  975|    515|  struct contenc_writer *writer = (struct contenc_writer *)calloc(1, sz);
  976|       |
  977|    515|  if(writer) {
  978|    515|    writer->handler = handler;
  979|    515|    writer->downstream = downstream;
  980|    515|    if(handler->init_writer(data, writer)) {
  981|      0|      free(writer);
  982|      0|      writer = NULL;
  983|      0|    }
  984|    515|  }
  985|       |
  986|    515|  return writer;
  987|    515|}
content_encoding.c:client_init_writer:
  890|    211|{
  891|    211|  (void) data;
  892|    211|  return writer->downstream? CURLE_WRITE_ERROR: CURLE_OK;
  893|    211|}
content_encoding.c:client_unencode_write:
  898|    308|{
  899|    308|  struct SingleRequest *k = &data->req;
  900|       |
  901|    308|  (void) writer;
  902|       |
  903|    308|  if(!nbytes || k->ignorebody)
  904|      0|    return CURLE_OK;
  905|       |
  906|    308|  return Curl_client_write(data, CLIENTWRITE_BODY, (char *) buf, nbytes);
  907|    308|}
content_encoding.c:client_close_writer:
  911|    211|{
  912|    211|  (void) data;
  913|    211|  (void) writer;
  914|    211|}
content_encoding.c:error_init_writer:
  929|     95|{
  930|     95|  (void) data;
  931|     95|  return writer->downstream? CURLE_OK: CURLE_WRITE_ERROR;
  932|     95|}
content_encoding.c:error_unencode_write:
  937|      7|{
  938|      7|  char *all = Curl_all_content_encodings();
  939|       |
  940|      7|  (void) writer;
  941|      7|  (void) buf;
  942|      7|  (void) nbytes;
  943|       |
  944|      7|  if(!all)
  945|      0|    return CURLE_OUT_OF_MEMORY;
  946|      7|  failf(data, "Unrecognized content encoding type. "
  947|      7|        "libcurl understands %s content encodings.", all);
  948|      7|  free(all);
  949|      7|  return CURLE_BAD_CONTENT_ENCODING;
  950|      7|}
content_encoding.c:error_close_writer:
  954|     95|{
  955|     95|  (void) data;
  956|     95|  (void) writer;
  957|     95|}

Curl_cookie_add:
  459|  5.89k|{
  460|  5.89k|  struct Cookie *clist;
  461|  5.89k|  struct Cookie *co;
  462|  5.89k|  struct Cookie *lastc = NULL;
  463|  5.89k|  time_t now = time(NULL);
  464|  5.89k|  bool replace_old = FALSE;
  465|  5.89k|  bool badcookie = FALSE; /* cookies are good by default. mmmmm yummy */
  466|  5.89k|  size_t myhash;
  467|       |
  468|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
  469|       |  (void)data;
  470|       |#endif
  471|       |
  472|       |  /* First, alloc and init a new struct for it */
  473|  5.89k|  co = calloc(1, sizeof(struct Cookie));
  474|  5.89k|  if(!co)
  475|      0|    return NULL; /* bail out if we're this low on memory */
  476|       |
  477|  5.89k|  if(httpheader) {
  478|       |    /* This line was read off a HTTP-header */
  479|  5.89k|    char name[MAX_NAME];
  480|  5.89k|    char what[MAX_NAME];
  481|  5.89k|    const char *ptr;
  482|  5.89k|    const char *semiptr;
  483|       |
  484|  5.89k|    size_t linelength = strlen(lineptr);
  485|  5.89k|    if(linelength > MAX_COOKIE_LINE) {
  486|       |      /* discard overly long lines at once */
  487|      0|      free(co);
  488|      0|      return NULL;
  489|      0|    }
  490|       |
  491|  5.89k|    semiptr = strchr(lineptr, ';'); /* first, find a semicolon */
  492|       |
  493|  11.4k|    while(*lineptr && ISBLANK(*lineptr))
  494|  5.54k|      lineptr++;
  495|       |
  496|  5.89k|    ptr = lineptr;
  497|  12.2k|    do {
  498|       |      /* we have a <what>=<this> pair or a stand-alone word here */
  499|  12.2k|      name[0] = what[0] = 0; /* init the buffers */
  500|  12.2k|      if(1 <= sscanf(ptr, "%" MAX_NAME_TXT "[^;\r\n=] =%"
  501|  12.2k|                     MAX_NAME_TXT "[^;\r\n]",
  502|  12.2k|                     name, what)) {
  503|       |        /*
  504|       |         * Use strstore() below to properly deal with received cookie
  505|       |         * headers that have the same string property set more than once,
  506|       |         * and then we use the last one.
  507|       |         */
  508|  11.2k|        const char *whatptr;
  509|  11.2k|        bool done = FALSE;
  510|  11.2k|        bool sep;
  511|  11.2k|        size_t len = strlen(what);
  512|  11.2k|        size_t nlen = strlen(name);
  513|  11.2k|        const char *endofn = &ptr[ nlen ];
  514|       |
  515|       |        /*
  516|       |         * Check for too long individual name or contents, or too long
  517|       |         * combination of name + contents. Chrome and Firefox support 4095 or
  518|       |         * 4096 bytes combo
  519|       |         */
  520|  11.2k|        if(nlen >= (MAX_NAME-1) || len >= (MAX_NAME-1) ||
  521|  11.2k|           ((nlen + len) > MAX_NAME)) {
  522|      3|          freecookie(co);
  523|      3|          infof(data, "oversized cookie dropped, name/val %zu + %zu bytes",
  524|      3|                nlen, len);
  525|      3|          return NULL;
  526|      3|        }
  527|       |
  528|       |        /* name ends with a '=' ? */
  529|  11.2k|        sep = (*endofn == '=')?TRUE:FALSE;
  530|       |
  531|  11.2k|        if(nlen) {
  532|  11.2k|          endofn--; /* move to the last character */
  533|  11.2k|          if(ISBLANK(*endofn)) {
  534|       |            /* skip trailing spaces in name */
  535|    122|            while(*endofn && ISBLANK(*endofn) && nlen) {
  536|     75|              endofn--;
  537|     75|              nlen--;
  538|     75|            }
  539|     47|            name[nlen] = 0; /* new end of name */
  540|     47|          }
  541|  11.2k|        }
  542|       |
  543|       |        /* Strip off trailing whitespace from the 'what' */
  544|  11.2k|        while(len && ISBLANK(what[len-1])) {
  545|     83|          what[len-1] = 0;
  546|     83|          len--;
  547|     83|        }
  548|       |
  549|       |        /* Skip leading whitespace from the 'what' */
  550|  11.2k|        whatptr = what;
  551|  11.2k|        while(*whatptr && ISBLANK(*whatptr))
  552|     21|          whatptr++;
  553|       |
  554|       |        /*
  555|       |         * Check if we have a reserved prefix set before anything else, as we
  556|       |         * otherwise have to test for the prefix in both the cookie name and
  557|       |         * "the rest". Prefixes must start with '__' and end with a '-', so
  558|       |         * only test for names where that can possibly be true.
  559|       |         */
  560|  11.2k|        if(nlen > 3 && name[0] == '_' && name[1] == '_') {
  561|    107|          if(!strncmp("__Secure-", name, 9))
  562|     51|            co->prefix |= COOKIE_PREFIX__SECURE;
  563|     56|          else if(!strncmp("__Host-", name, 7))
  564|     19|            co->prefix |= COOKIE_PREFIX__HOST;
  565|    107|        }
  566|       |
  567|  11.2k|        if(!co->name) {
  568|       |          /* The very first name/value pair is the actual cookie name */
  569|  5.73k|          if(!sep) {
  570|       |            /* Bad name/value pair. */
  571|    680|            badcookie = TRUE;
  572|    680|            break;
  573|    680|          }
  574|  5.05k|          co->name = strdup(name);
  575|  5.05k|          co->value = strdup(whatptr);
  576|  5.05k|          done = TRUE;
  577|  5.05k|          if(!co->name || !co->value) {
  578|      0|            badcookie = TRUE;
  579|      0|            break;
  580|      0|          }
  581|  5.05k|        }
  582|  5.48k|        else if(!len) {
  583|       |          /*
  584|       |           * this was a "<name>=" with no content, and we must allow
  585|       |           * 'secure' and 'httponly' specified this weirdly
  586|       |           */
  587|    219|          done = TRUE;
  588|       |          /*
  589|       |           * secure cookies are only allowed to be set when the connection is
  590|       |           * using a secure protocol, or when the cookie is being set by
  591|       |           * reading from file
  592|       |           */
  593|    219|          if(strcasecompare("secure", name)) {
  594|      0|            if(secure || !c->running) {
  595|      0|              co->secure = TRUE;
  596|      0|            }
  597|      0|            else {
  598|      0|              badcookie = TRUE;
  599|      0|              break;
  600|      0|            }
  601|      0|          }
  602|    219|          else if(strcasecompare("httponly", name))
  603|      0|            co->httponly = TRUE;
  604|    219|          else if(sep)
  605|       |            /* there was a '=' so we're not done parsing this field */
  606|     20|            done = FALSE;
  607|    219|        }
  608|  10.5k|        if(done)
  609|  5.24k|          ;
  610|  5.28k|        else if(strcasecompare("path", name)) {
  611|  3.54k|          strstore(&co->path, whatptr);
  612|  3.54k|          if(!co->path) {
  613|      0|            badcookie = TRUE; /* out of memory bad */
  614|      0|            break;
  615|      0|          }
  616|  3.54k|          free(co->spath); /* if this is set again */
  617|  3.54k|          co->spath = sanitize_cookie_path(co->path);
  618|  3.54k|          if(!co->spath) {
  619|      0|            badcookie = TRUE; /* out of memory bad */
  620|      0|            break;
  621|      0|          }
  622|  3.54k|        }
  623|  1.74k|        else if(strcasecompare("domain", name)) {
  624|      0|          bool is_ip;
  625|       |
  626|       |          /*
  627|       |           * Now, we make sure that our host is within the given domain, or
  628|       |           * the given domain is not valid and thus cannot be set.
  629|       |           */
  630|       |
  631|      0|          if('.' == whatptr[0])
  632|      0|            whatptr++; /* ignore preceding dot */
  633|       |
  634|      0|#ifndef USE_LIBPSL
  635|       |          /*
  636|       |           * Without PSL we don't know when the incoming cookie is set on a
  637|       |           * TLD or otherwise "protected" suffix. To reduce risk, we require a
  638|       |           * dot OR the exact host name being "localhost".
  639|       |           */
  640|      0|          if(bad_domain(whatptr))
  641|      0|            domain = ":";
  642|      0|#endif
  643|       |
  644|      0|          is_ip = Curl_host_is_ipnum(domain ? domain : whatptr);
  645|       |
  646|      0|          if(!domain
  647|      0|             || (is_ip && !strcmp(whatptr, domain))
  648|      0|             || (!is_ip && tailmatch(whatptr, domain))) {
  649|      0|            strstore(&co->domain, whatptr);
  650|      0|            if(!co->domain) {
  651|      0|              badcookie = TRUE;
  652|      0|              break;
  653|      0|            }
  654|      0|            if(!is_ip)
  655|      0|              co->tailmatch = TRUE; /* we always do that if the domain name was
  656|       |                                       given */
  657|      0|          }
  658|      0|          else {
  659|       |            /*
  660|       |             * We did not get a tailmatch and then the attempted set domain is
  661|       |             * not a domain to which the current host belongs. Mark as bad.
  662|       |             */
  663|      0|            badcookie = TRUE;
  664|      0|            infof(data, "skipped cookie with bad tailmatch domain: %s",
  665|      0|                  whatptr);
  666|      0|          }
  667|      0|        }
  668|  1.74k|        else if(strcasecompare("version", name)) {
  669|      0|          strstore(&co->version, whatptr);
  670|      0|          if(!co->version) {
  671|      0|            badcookie = TRUE;
  672|      0|            break;
  673|      0|          }
  674|      0|        }
  675|  1.74k|        else if(strcasecompare("max-age", name)) {
  676|       |          /*
  677|       |           * Defined in RFC2109:
  678|       |           *
  679|       |           * Optional.  The Max-Age attribute defines the lifetime of the
  680|       |           * cookie, in seconds.  The delta-seconds value is a decimal non-
  681|       |           * negative integer.  After delta-seconds seconds elapse, the
  682|       |           * client should discard the cookie.  A value of zero means the
  683|       |           * cookie should be discarded immediately.
  684|       |           */
  685|      0|          strstore(&co->maxage, whatptr);
  686|      0|          if(!co->maxage) {
  687|      0|            badcookie = TRUE;
  688|      0|            break;
  689|      0|          }
  690|      0|        }
  691|  1.74k|        else if(strcasecompare("expires", name)) {
  692|  1.33k|          strstore(&co->expirestr, whatptr);
  693|  1.33k|          if(!co->expirestr) {
  694|      0|            badcookie = TRUE;
  695|      0|            break;
  696|      0|          }
  697|  1.33k|        }
  698|       |
  699|       |        /*
  700|       |         * Else, this is the second (or more) name we don't know about!
  701|       |         */
  702|  10.5k|      }
  703|  1.07k|      else {
  704|       |        /* this is an "illegal" <what>=<this> pair */
  705|  1.07k|      }
  706|       |
  707|  11.6k|      if(!semiptr || !*semiptr) {
  708|       |        /* we already know there are no more cookies */
  709|  5.16k|        semiptr = NULL;
  710|  5.16k|        continue;
  711|  5.16k|      }
  712|       |
  713|  6.44k|      ptr = semiptr + 1;
  714|  11.6k|      while(*ptr && ISBLANK(*ptr))
  715|  5.21k|        ptr++;
  716|  6.44k|      semiptr = strchr(ptr, ';'); /* now, find the next semicolon */
  717|       |
  718|  6.44k|      if(!semiptr && *ptr)
  719|       |        /*
  720|       |         * There are no more semicolons, but there's a final name=value pair
  721|       |         * coming up
  722|       |         */
  723|  4.47k|        semiptr = strchr(ptr, '\0');
  724|  11.6k|    } while(semiptr);
  725|       |
  726|  5.88k|    if(co->maxage) {
  727|      0|      CURLofft offt;
  728|      0|      offt = curlx_strtoofft((*co->maxage == '\"')?
  729|      0|                             &co->maxage[1]:&co->maxage[0], NULL, 10,
  730|      0|                             &co->expires);
  731|      0|      if(offt == CURL_OFFT_FLOW)
  732|       |        /* overflow, used max value */
  733|      0|        co->expires = CURL_OFF_T_MAX;
  734|      0|      else if(!offt) {
  735|      0|        if(!co->expires)
  736|       |          /* already expired */
  737|      0|          co->expires = 1;
  738|      0|        else if(CURL_OFF_T_MAX - now < co->expires)
  739|       |          /* would overflow */
  740|      0|          co->expires = CURL_OFF_T_MAX;
  741|      0|        else
  742|      0|          co->expires += now;
  743|      0|      }
  744|      0|    }
  745|  5.88k|    else if(co->expirestr) {
  746|       |      /*
  747|       |       * Note that if the date couldn't get parsed for whatever reason, the
  748|       |       * cookie will be treated as a session cookie
  749|       |       */
  750|  1.33k|      co->expires = Curl_getdate_capped(co->expirestr);
  751|       |
  752|       |      /*
  753|       |       * Session cookies have expires set to 0 so if we get that back from the
  754|       |       * date parser let's add a second to make it a non-session cookie
  755|       |       */
  756|  1.33k|      if(co->expires == 0)
  757|      0|        co->expires = 1;
  758|  1.33k|      else if(co->expires < 0)
  759|    728|        co->expires = 0;
  760|  1.33k|    }
  761|       |
  762|  5.88k|    if(!badcookie && !co->domain) {
  763|  5.20k|      if(domain) {
  764|       |        /* no domain was given in the header line, set the default */
  765|  5.20k|        co->domain = strdup(domain);
  766|  5.20k|        if(!co->domain)
  767|      0|          badcookie = TRUE;
  768|  5.20k|      }
  769|  5.20k|    }
  770|       |
  771|  5.88k|    if(!badcookie && !co->path && path) {
  772|       |      /*
  773|       |       * No path was given in the header line, set the default.  Note that the
  774|       |       * passed-in path to this function MAY have a '?' and following part that
  775|       |       * MUST NOT be stored as part of the path.
  776|       |       */
  777|  1.68k|      char *queryp = strchr(path, '?');
  778|       |
  779|       |      /*
  780|       |       * queryp is where the interesting part of the path ends, so now we
  781|       |       * want to the find the last
  782|       |       */
  783|  1.68k|      char *endslash;
  784|  1.68k|      if(!queryp)
  785|  1.68k|        endslash = strrchr(path, '/');
  786|      0|      else
  787|      0|        endslash = memrchr(path, '/', (queryp - path));
  788|  1.68k|      if(endslash) {
  789|  1.68k|        size_t pathlen = (endslash-path + 1); /* include end slash */
  790|  1.68k|        co->path = malloc(pathlen + 1); /* one extra for the zero byte */
  791|  1.68k|        if(co->path) {
  792|  1.68k|          memcpy(co->path, path, pathlen);
  793|  1.68k|          co->path[pathlen] = 0; /* null-terminate */
  794|  1.68k|          co->spath = sanitize_cookie_path(co->path);
  795|  1.68k|          if(!co->spath)
  796|      0|            badcookie = TRUE; /* out of memory bad */
  797|  1.68k|        }
  798|      0|        else
  799|      0|          badcookie = TRUE;
  800|  1.68k|      }
  801|  1.68k|    }
  802|       |
  803|       |    /*
  804|       |     * If we didn't get a cookie name, or a bad one, the this is an illegal
  805|       |     * line so bail out.
  806|       |     */
  807|  5.88k|    if(badcookie || !co->name) {
  808|    838|      freecookie(co);
  809|    838|      return NULL;
  810|    838|    }
  811|       |
  812|  5.88k|  }
  813|      0|  else {
  814|       |    /*
  815|       |     * This line is NOT a HTTP header style line, we do offer support for
  816|       |     * reading the odd netscape cookies-file format here
  817|       |     */
  818|      0|    char *ptr;
  819|      0|    char *firstptr;
  820|      0|    char *tok_buf = NULL;
  821|      0|    int fields;
  822|       |
  823|       |    /*
  824|       |     * IE introduced HTTP-only cookies to prevent XSS attacks. Cookies marked
  825|       |     * with httpOnly after the domain name are not accessible from javascripts,
  826|       |     * but since curl does not operate at javascript level, we include them
  827|       |     * anyway. In Firefox's cookie files, these lines are preceded with
  828|       |     * #HttpOnly_ and then everything is as usual, so we skip 10 characters of
  829|       |     * the line..
  830|       |     */
  831|      0|    if(strncmp(lineptr, "#HttpOnly_", 10) == 0) {
  832|      0|      lineptr += 10;
  833|      0|      co->httponly = TRUE;
  834|      0|    }
  835|       |
  836|      0|    if(lineptr[0]=='#') {
  837|       |      /* don't even try the comments */
  838|      0|      free(co);
  839|      0|      return NULL;
  840|      0|    }
  841|       |    /* strip off the possible end-of-line characters */
  842|      0|    ptr = strchr(lineptr, '\r');
  843|      0|    if(ptr)
  844|      0|      *ptr = 0; /* clear it */
  845|      0|    ptr = strchr(lineptr, '\n');
  846|      0|    if(ptr)
  847|      0|      *ptr = 0; /* clear it */
  848|       |
  849|      0|    firstptr = strtok_r(lineptr, "\t", &tok_buf); /* tokenize it on the TAB */
  850|       |
  851|       |    /*
  852|       |     * Now loop through the fields and init the struct we already have
  853|       |     * allocated
  854|       |     */
  855|      0|    for(ptr = firstptr, fields = 0; ptr && !badcookie;
  856|      0|        ptr = strtok_r(NULL, "\t", &tok_buf), fields++) {
  857|      0|      switch(fields) {
  858|      0|      case 0:
  859|      0|        if(ptr[0]=='.') /* skip preceding dots */
  860|      0|          ptr++;
  861|      0|        co->domain = strdup(ptr);
  862|      0|        if(!co->domain)
  863|      0|          badcookie = TRUE;
  864|      0|        break;
  865|      0|      case 1:
  866|       |        /*
  867|       |         * flag: A TRUE/FALSE value indicating if all machines within a given
  868|       |         * domain can access the variable. Set TRUE when the cookie says
  869|       |         * .domain.com and to false when the domain is complete www.domain.com
  870|       |         */
  871|      0|        co->tailmatch = strcasecompare(ptr, "TRUE")?TRUE:FALSE;
  872|      0|        break;
  873|      0|      case 2:
  874|       |        /* The file format allows the path field to remain not filled in */
  875|      0|        if(strcmp("TRUE", ptr) && strcmp("FALSE", ptr)) {
  876|       |          /* only if the path doesn't look like a boolean option! */
  877|      0|          co->path = strdup(ptr);
  878|      0|          if(!co->path)
  879|      0|            badcookie = TRUE;
  880|      0|          else {
  881|      0|            co->spath = sanitize_cookie_path(co->path);
  882|      0|            if(!co->spath) {
  883|      0|              badcookie = TRUE; /* out of memory bad */
  884|      0|            }
  885|      0|          }
  886|      0|          break;
  887|      0|        }
  888|       |        /* this doesn't look like a path, make one up! */
  889|      0|        co->path = strdup("/");
  890|      0|        if(!co->path)
  891|      0|          badcookie = TRUE;
  892|      0|        co->spath = strdup("/");
  893|      0|        if(!co->spath)
  894|      0|          badcookie = TRUE;
  895|      0|        fields++; /* add a field and fall down to secure */
  896|       |        /* FALLTHROUGH */
  897|      0|      case 3:
  898|      0|        co->secure = FALSE;
  899|      0|        if(strcasecompare(ptr, "TRUE")) {
  900|      0|          if(secure || c->running)
  901|      0|            co->secure = TRUE;
  902|      0|          else
  903|      0|            badcookie = TRUE;
  904|      0|        }
  905|      0|        break;
  906|      0|      case 4:
  907|      0|        if(curlx_strtoofft(ptr, NULL, 10, &co->expires))
  908|      0|          badcookie = TRUE;
  909|      0|        break;
  910|      0|      case 5:
  911|      0|        co->name = strdup(ptr);
  912|      0|        if(!co->name)
  913|      0|          badcookie = TRUE;
  914|      0|        else {
  915|       |          /* For Netscape file format cookies we check prefix on the name */
  916|      0|          if(strncasecompare("__Secure-", co->name, 9))
  917|      0|            co->prefix |= COOKIE_PREFIX__SECURE;
  918|      0|          else if(strncasecompare("__Host-", co->name, 7))
  919|      0|            co->prefix |= COOKIE_PREFIX__HOST;
  920|      0|        }
  921|      0|        break;
  922|      0|      case 6:
  923|      0|        co->value = strdup(ptr);
  924|      0|        if(!co->value)
  925|      0|          badcookie = TRUE;
  926|      0|        break;
  927|      0|      }
  928|      0|    }
  929|      0|    if(6 == fields) {
  930|       |      /* we got a cookie with blank contents, fix it */
  931|      0|      co->value = strdup("");
  932|      0|      if(!co->value)
  933|      0|        badcookie = TRUE;
  934|      0|      else
  935|      0|        fields++;
  936|      0|    }
  937|       |
  938|      0|    if(!badcookie && (7 != fields))
  939|       |      /* we did not find the sufficient number of fields */
  940|      0|      badcookie = TRUE;
  941|       |
  942|      0|    if(badcookie) {
  943|      0|      freecookie(co);
  944|      0|      return NULL;
  945|      0|    }
  946|       |
  947|      0|  }
  948|       |
  949|  5.04k|  if(co->prefix & COOKIE_PREFIX__SECURE) {
  950|       |    /* The __Secure- prefix only requires that the cookie be set secure */
  951|     48|    if(!co->secure) {
  952|     48|      freecookie(co);
  953|     48|      return NULL;
  954|     48|    }
  955|     48|  }
  956|  5.00k|  if(co->prefix & COOKIE_PREFIX__HOST) {
  957|       |    /*
  958|       |     * The __Host- prefix requires the cookie to be secure, have a "/" path
  959|       |     * and not have a domain set.
  960|       |     */
  961|     18|    if(co->secure && co->path && strcmp(co->path, "/") == 0 && !co->tailmatch)
  962|      0|      ;
  963|     18|    else {
  964|     18|      freecookie(co);
  965|     18|      return NULL;
  966|     18|    }
  967|     18|  }
  968|       |
  969|  4.98k|  if(!c->running &&    /* read from a file */
  970|  4.98k|     c->newsession &&  /* clean session cookies */
  971|  4.98k|     !co->expires) {   /* this is a session cookie since it doesn't expire! */
  972|      0|    freecookie(co);
  973|      0|    return NULL;
  974|      0|  }
  975|       |
  976|  4.98k|  co->livecookie = c->running;
  977|  4.98k|  co->creationtime = ++c->lastct;
  978|       |
  979|       |  /*
  980|       |   * Now we have parsed the incoming line, we must now check if this supersedes
  981|       |   * an already existing cookie, which it may if the previous have the same
  982|       |   * domain and path as this.
  983|       |   */
  984|       |
  985|       |  /* at first, remove expired cookies */
  986|  4.98k|  if(!noexpire)
  987|  4.98k|    remove_expired(c);
  988|       |
  989|       |#ifdef USE_LIBPSL
  990|       |  /*
  991|       |   * Check if the domain is a Public Suffix and if yes, ignore the cookie. We
  992|       |   * must also check that the data handle isn't NULL since the psl code will
  993|       |   * dereference it.
  994|       |   */
  995|       |  if(data && (domain && co->domain && !Curl_host_is_ipnum(co->domain))) {
  996|       |    const psl_ctx_t *psl = Curl_psl_use(data);
  997|       |    int acceptable;
  998|       |
  999|       |    if(psl) {
 1000|       |      acceptable = psl_is_cookie_domain_acceptable(psl, domain, co->domain);
 1001|       |      Curl_psl_release(data);
 1002|       |    }
 1003|       |    else
 1004|       |      acceptable = !bad_domain(domain);
 1005|       |
 1006|       |    if(!acceptable) {
 1007|       |      infof(data, "cookie '%s' dropped, domain '%s' must not "
 1008|       |                  "set cookies for '%s'", co->name, domain, co->domain);
 1009|       |      freecookie(co);
 1010|       |      return NULL;
 1011|       |    }
 1012|       |  }
 1013|       |#endif
 1014|       |
 1015|  4.98k|  myhash = cookiehash(co->domain);
 1016|  4.98k|  clist = c->cookies[myhash];
 1017|  4.98k|  replace_old = FALSE;
 1018|  17.0k|  while(clist) {
 1019|  15.3k|    if(strcasecompare(clist->name, co->name)) {
 1020|       |      /* the names are identical */
 1021|       |
 1022|  3.90k|      if(clist->domain && co->domain) {
 1023|  3.90k|        if(strcasecompare(clist->domain, co->domain) &&
 1024|  3.90k|          (clist->tailmatch == co->tailmatch))
 1025|       |          /* The domains are identical */
 1026|  3.90k|          replace_old = TRUE;
 1027|  3.90k|      }
 1028|      0|      else if(!clist->domain && !co->domain)
 1029|      0|        replace_old = TRUE;
 1030|       |
 1031|  3.90k|      if(replace_old) {
 1032|       |        /* the domains were identical */
 1033|       |
 1034|  3.90k|        if(clist->spath && co->spath) {
 1035|  3.90k|          if(clist->secure && !co->secure && !secure) {
 1036|      0|            size_t cllen;
 1037|      0|            const char *sep;
 1038|       |
 1039|       |            /*
 1040|       |             * A non-secure cookie may not overlay an existing secure cookie.
 1041|       |             * For an existing cookie "a" with path "/login", refuse a new
 1042|       |             * cookie "a" with for example path "/login/en", while the path
 1043|       |             * "/loginhelper" is ok.
 1044|       |             */
 1045|       |
 1046|      0|            sep = strchr(clist->spath + 1, '/');
 1047|       |
 1048|      0|            if(sep)
 1049|      0|              cllen = sep - clist->spath;
 1050|      0|            else
 1051|      0|              cllen = strlen(clist->spath);
 1052|       |
 1053|      0|            if(strncasecompare(clist->spath, co->spath, cllen)) {
 1054|      0|              freecookie(co);
 1055|      0|              return NULL;
 1056|      0|            }
 1057|      0|          }
 1058|  3.90k|          else if(strcasecompare(clist->spath, co->spath))
 1059|  3.31k|            replace_old = TRUE;
 1060|    595|          else
 1061|    595|            replace_old = FALSE;
 1062|  3.90k|        }
 1063|      0|        else if(!clist->spath && !co->spath)
 1064|      0|          replace_old = TRUE;
 1065|      0|        else
 1066|      0|          replace_old = FALSE;
 1067|       |
 1068|  3.90k|      }
 1069|       |
 1070|  3.90k|      if(replace_old && !co->livecookie && clist->livecookie) {
 1071|       |        /*
 1072|       |         * Both cookies matched fine, except that the already present cookie is
 1073|       |         * "live", which means it was set from a header, while the new one was
 1074|       |         * read from a file and thus isn't "live". "live" cookies are preferred
 1075|       |         * so the new cookie is freed.
 1076|       |         */
 1077|      0|        freecookie(co);
 1078|      0|        return NULL;
 1079|      0|      }
 1080|       |
 1081|  3.90k|      if(replace_old) {
 1082|  3.31k|        co->next = clist->next; /* get the next-pointer first */
 1083|       |
 1084|       |        /* when replacing, creationtime is kept from old */
 1085|  3.31k|        co->creationtime = clist->creationtime;
 1086|       |
 1087|       |        /* then free all the old pointers */
 1088|  3.31k|        free(clist->name);
 1089|  3.31k|        free(clist->value);
 1090|  3.31k|        free(clist->domain);
 1091|  3.31k|        free(clist->path);
 1092|  3.31k|        free(clist->spath);
 1093|  3.31k|        free(clist->expirestr);
 1094|  3.31k|        free(clist->version);
 1095|  3.31k|        free(clist->maxage);
 1096|       |
 1097|  3.31k|        *clist = *co;  /* then store all the new data */
 1098|       |
 1099|  3.31k|        free(co);   /* free the newly allocated memory */
 1100|  3.31k|        co = clist; /* point to the previous struct instead */
 1101|       |
 1102|       |        /*
 1103|       |         * We have replaced a cookie, now skip the rest of the list but make
 1104|       |         * sure the 'lastc' pointer is properly set
 1105|       |         */
 1106|  11.8k|        do {
 1107|  11.8k|          lastc = clist;
 1108|  11.8k|          clist = clist->next;
 1109|  11.8k|        } while(clist);
 1110|  3.31k|        break;
 1111|  3.31k|      }
 1112|  3.90k|    }
 1113|  12.0k|    lastc = clist;
 1114|  12.0k|    clist = clist->next;
 1115|  12.0k|  }
 1116|       |
 1117|  4.98k|  if(c->running)
 1118|       |    /* Only show this when NOT reading the cookies from a file */
 1119|  4.98k|    infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, "
 1120|  4.98k|          "expire %" CURL_FORMAT_CURL_OFF_T,
 1121|  4.98k|          replace_old?"Replaced":"Added", co->name, co->value,
 1122|  4.98k|          co->domain, co->path, co->expires);
 1123|       |
 1124|  4.98k|  if(!replace_old) {
 1125|       |    /* then make the last item point on this new one */
 1126|  1.67k|    if(lastc)
 1127|  1.29k|      lastc->next = co;
 1128|    375|    else
 1129|    375|      c->cookies[myhash] = co;
 1130|  1.67k|    c->numcookies++; /* one more cookie in the jar */
 1131|  1.67k|  }
 1132|       |
 1133|       |  /*
 1134|       |   * Now that we've added a new cookie to the jar, update the expiration
 1135|       |   * tracker in case it is the next one to expire.
 1136|       |   */
 1137|  4.98k|  if(co->expires && (co->expires < c->next_expiration))
 1138|    339|    c->next_expiration = co->expires;
 1139|       |
 1140|  4.98k|  return co;
 1141|  4.98k|}
Curl_cookie_init:
 1161|  2.25k|{
 1162|  2.25k|  struct CookieInfo *c;
 1163|  2.25k|  FILE *fp = NULL;
 1164|  2.25k|  bool fromfile = TRUE;
 1165|  2.25k|  char *line = NULL;
 1166|       |
 1167|  2.25k|  if(NULL == inc) {
 1168|       |    /* we didn't get a struct, create one */
 1169|  2.25k|    c = calloc(1, sizeof(struct CookieInfo));
 1170|  2.25k|    if(!c)
 1171|      0|      return NULL; /* failed to get memory */
 1172|  2.25k|    c->filename = strdup(file?file:"none"); /* copy the name just in case */
 1173|  2.25k|    if(!c->filename)
 1174|      0|      goto fail; /* failed to get memory */
 1175|       |    /*
 1176|       |     * Initialize the next_expiration time to signal that we don't have enough
 1177|       |     * information yet.
 1178|       |     */
 1179|  2.25k|    c->next_expiration = CURL_OFF_T_MAX;
 1180|  2.25k|  }
 1181|      0|  else {
 1182|       |    /* we got an already existing one, use that */
 1183|      0|    c = inc;
 1184|      0|  }
 1185|  2.25k|  c->running = FALSE; /* this is not running, this is init */
 1186|       |
 1187|  2.25k|  if(file && !strcmp(file, "-")) {
 1188|      0|    fp = stdin;
 1189|      0|    fromfile = FALSE;
 1190|      0|  }
 1191|  2.25k|  else if(file && !*file) {
 1192|       |    /* points to a "" string */
 1193|      0|    fp = NULL;
 1194|      0|  }
 1195|  2.25k|  else
 1196|  2.25k|    fp = file?fopen(file, FOPEN_READTEXT):NULL;
 1197|       |
 1198|  2.25k|  c->newsession = newsession; /* new session? */
 1199|       |
 1200|  2.25k|  if(fp) {
 1201|      0|    char *lineptr;
 1202|      0|    bool headerline;
 1203|       |
 1204|      0|    line = malloc(MAX_COOKIE_LINE);
 1205|      0|    if(!line)
 1206|      0|      goto fail;
 1207|      0|    while(Curl_get_line(line, MAX_COOKIE_LINE, fp)) {
 1208|      0|      if(checkprefix("Set-Cookie:", line)) {
 1209|       |        /* This is a cookie line, get it! */
 1210|      0|        lineptr = &line[11];
 1211|      0|        headerline = TRUE;
 1212|      0|      }
 1213|      0|      else {
 1214|      0|        lineptr = line;
 1215|      0|        headerline = FALSE;
 1216|      0|      }
 1217|      0|      while(*lineptr && ISBLANK(*lineptr))
 1218|      0|        lineptr++;
 1219|       |
 1220|      0|      Curl_cookie_add(data, c, headerline, TRUE, lineptr, NULL, NULL, TRUE);
 1221|      0|    }
 1222|      0|    free(line); /* free the line buffer */
 1223|       |
 1224|       |    /*
 1225|       |     * Remove expired cookies from the hash. We must make sure to run this
 1226|       |     * after reading the file, and not on every cookie.
 1227|       |     */
 1228|      0|    remove_expired(c);
 1229|       |
 1230|      0|    if(fromfile)
 1231|      0|      fclose(fp);
 1232|      0|  }
 1233|       |
 1234|  2.25k|  c->running = TRUE;          /* now, we're running */
 1235|  2.25k|  if(data)
 1236|  2.25k|    data->state.cookie_engine = TRUE;
 1237|       |
 1238|  2.25k|  return c;
 1239|       |
 1240|      0|fail:
 1241|      0|  free(line);
 1242|       |  /*
 1243|       |   * Only clean up if we allocated it here, as the original could still be in
 1244|       |   * use by a share handle.
 1245|       |   */
 1246|      0|  if(!inc)
 1247|      0|    Curl_cookie_cleanup(c);
 1248|      0|  if(fromfile && fp)
 1249|      0|    fclose(fp);
 1250|      0|  return NULL; /* out of memory */
 1251|  2.25k|}
Curl_cookie_getlist:
 1352|  2.29k|{
 1353|  2.29k|  struct Cookie *newco;
 1354|  2.29k|  struct Cookie *co;
 1355|  2.29k|  struct Cookie *mainco = NULL;
 1356|  2.29k|  size_t matches = 0;
 1357|  2.29k|  bool is_ip;
 1358|  2.29k|  const size_t myhash = cookiehash(host);
 1359|       |
 1360|  2.29k|  if(!c || !c->cookies[myhash])
 1361|  2.25k|    return NULL; /* no cookie struct or no cookies in the struct */
 1362|       |
 1363|       |  /* at first, remove expired cookies */
 1364|     42|  remove_expired(c);
 1365|       |
 1366|       |  /* check if host is an IP(v4|v6) address */
 1367|     42|  is_ip = Curl_host_is_ipnum(host);
 1368|       |
 1369|     42|  co = c->cookies[myhash];
 1370|       |
 1371|    136|  while(co) {
 1372|       |    /* if the cookie requires we're secure we must only continue if we are! */
 1373|     94|    if(co->secure?secure:TRUE) {
 1374|       |
 1375|       |      /* now check if the domain is correct */
 1376|     94|      if(!co->domain ||
 1377|     94|         (co->tailmatch && !is_ip && tailmatch(co->domain, host)) ||
 1378|     94|         ((!co->tailmatch || is_ip) && strcasecompare(host, co->domain)) ) {
 1379|       |        /*
 1380|       |         * the right part of the host matches the domain stuff in the
 1381|       |         * cookie data
 1382|       |         */
 1383|       |
 1384|       |        /*
 1385|       |         * now check the left part of the path with the cookies path
 1386|       |         * requirement
 1387|       |         */
 1388|     88|        if(!co->spath || pathmatch(co->spath, path) ) {
 1389|       |
 1390|       |          /*
 1391|       |           * and now, we know this is a match and we should create an
 1392|       |           * entry for the return-linked-list
 1393|       |           */
 1394|       |
 1395|     55|          newco = dup_cookie(co);
 1396|     55|          if(newco) {
 1397|       |            /* then modify our next */
 1398|     55|            newco->next = mainco;
 1399|       |
 1400|       |            /* point the main to us */
 1401|     55|            mainco = newco;
 1402|       |
 1403|     55|            matches++;
 1404|     55|          }
 1405|      0|          else
 1406|      0|            goto fail;
 1407|     55|        }
 1408|     88|      }
 1409|     94|    }
 1410|     94|    co = co->next;
 1411|     94|  }
 1412|       |
 1413|     42|  if(matches) {
 1414|       |    /*
 1415|       |     * Now we need to make sure that if there is a name appearing more than
 1416|       |     * once, the longest specified path version comes first. To make this
 1417|       |     * the swiftest way, we just sort them all based on path length.
 1418|       |     */
 1419|     23|    struct Cookie **array;
 1420|     23|    size_t i;
 1421|       |
 1422|       |    /* alloc an array and store all cookie pointers */
 1423|     23|    array = malloc(sizeof(struct Cookie *) * matches);
 1424|     23|    if(!array)
 1425|      0|      goto fail;
 1426|       |
 1427|     23|    co = mainco;
 1428|       |
 1429|     78|    for(i = 0; co; co = co->next)
 1430|     55|      array[i++] = co;
 1431|       |
 1432|       |    /* now sort the cookie pointers in path length order */
 1433|     23|    qsort(array, matches, sizeof(struct Cookie *), cookie_sort);
 1434|       |
 1435|       |    /* remake the linked list order according to the new order */
 1436|       |
 1437|     23|    mainco = array[0]; /* start here */
 1438|     55|    for(i = 0; i<matches-1; i++)
 1439|     32|      array[i]->next = array[i + 1];
 1440|     23|    array[matches-1]->next = NULL; /* terminate the list */
 1441|       |
 1442|     23|    free(array); /* remove the temporary data again */
 1443|     23|  }
 1444|       |
 1445|     42|  return mainco; /* return the new list */
 1446|       |
 1447|      0|fail:
 1448|       |  /* failure, clear up the allocated chain and return NULL */
 1449|      0|  Curl_cookie_freelist(mainco);
 1450|      0|  return NULL;
 1451|     42|}
Curl_cookie_freelist:
 1476|   577k|{
 1477|   577k|  struct Cookie *next;
 1478|   578k|  while(co) {
 1479|  1.51k|    next = co->next;
 1480|  1.51k|    freecookie(co);
 1481|  1.51k|    co = next;
 1482|  1.51k|  }
 1483|   577k|}
Curl_cookie_cleanup:
 1532|  4.57k|{
 1533|  4.57k|  if(c) {
 1534|  2.25k|    unsigned int i;
 1535|  2.25k|    free(c->filename);
 1536|   579k|    for(i = 0; i < COOKIE_HASH_SIZE; i++)
 1537|   577k|      Curl_cookie_freelist(c->cookies[i]);
 1538|  2.25k|    free(c); /* free the base struct as well */
 1539|  2.25k|  }
 1540|  4.57k|}
Curl_flush_cookies:
 1730|  4.57k|{
 1731|  4.57k|  CURLcode res;
 1732|       |
 1733|  4.57k|  if(data->set.str[STRING_COOKIEJAR]) {
 1734|  2.25k|    if(data->state.cookielist) {
 1735|       |      /* If there is a list of cookie files to read, do it first so that
 1736|       |         we have all the told files read before we write the new jar.
 1737|       |         Curl_cookie_loadfiles() LOCKS and UNLOCKS the share itself! */
 1738|      0|      Curl_cookie_loadfiles(data);
 1739|      0|    }
 1740|       |
 1741|  2.25k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1742|       |
 1743|       |    /* if we have a destination file for all the cookies to get dumped to */
 1744|  2.25k|    res = cookie_output(data, data->cookies, data->set.str[STRING_COOKIEJAR]);
 1745|  2.25k|    if(res)
 1746|      0|      infof(data, "WARNING: failed to save cookies in %s: %s",
 1747|      0|            data->set.str[STRING_COOKIEJAR], curl_easy_strerror(res));
 1748|  2.25k|  }
 1749|  2.31k|  else {
 1750|  2.31k|    if(cleanup && data->state.cookielist) {
 1751|       |      /* since nothing is written, we can just free the list of cookie file
 1752|       |         names */
 1753|      0|      curl_slist_free_all(data->state.cookielist); /* clean up list */
 1754|      0|      data->state.cookielist = NULL;
 1755|      0|    }
 1756|  2.31k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1757|  2.31k|  }
 1758|       |
 1759|  4.57k|  if(cleanup && (!data->share || (data->cookies != data->share->cookies))) {
 1760|  4.57k|    Curl_cookie_cleanup(data->cookies);
 1761|  4.57k|    data->cookies = NULL;
 1762|  4.57k|  }
 1763|  4.57k|  Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 1764|  4.57k|}
cookie.c:freecookie:
  110|  2.63k|{
  111|  2.63k|  free(co->expirestr);
  112|  2.63k|  free(co->domain);
  113|  2.63k|  free(co->path);
  114|  2.63k|  free(co->spath);
  115|  2.63k|  free(co->name);
  116|  2.63k|  free(co->value);
  117|  2.63k|  free(co->maxage);
  118|  2.63k|  free(co->version);
  119|  2.63k|  free(co);
  120|  2.63k|}
cookie.c:strstore:
  364|  4.95k|{
  365|  4.95k|  free(*str);
  366|  4.95k|  *str = strdup(newstr);
  367|  4.95k|}
cookie.c:sanitize_cookie_path:
  291|  5.22k|{
  292|  5.22k|  size_t len;
  293|  5.22k|  char *new_path = strdup(cookie_path);
  294|  5.22k|  if(!new_path)
  295|      0|    return NULL;
  296|       |
  297|       |  /* some stupid site sends path attribute with '"'. */
  298|  5.22k|  len = strlen(new_path);
  299|  5.22k|  if(new_path[0] == '\"') {
  300|     20|    memmove((void *)new_path, (const void *)(new_path + 1), len);
  301|     20|    len--;
  302|     20|  }
  303|  5.22k|  if(len && (new_path[len - 1] == '\"')) {
  304|     10|    new_path[len - 1] = 0x0;
  305|     10|    len--;
  306|     10|  }
  307|       |
  308|       |  /* RFC6265 5.2.4 The Path Attribute */
  309|  5.22k|  if(new_path[0] != '/') {
  310|       |    /* Let cookie-path be the default-path. */
  311|     74|    strstore(&new_path, "/");
  312|     74|    return new_path;
  313|     74|  }
  314|       |
  315|       |  /* convert /hoge/ to /hoge */
  316|  5.14k|  if(len && new_path[len - 1] == '/') {
  317|  5.10k|    new_path[len - 1] = 0x0;
  318|  5.10k|  }
  319|       |
  320|  5.14k|  return new_path;
  321|  5.22k|}
cookie.c:remove_expired:
  379|  7.28k|{
  380|  7.28k|  struct Cookie *co, *nx;
  381|  7.28k|  curl_off_t now = (curl_off_t)time(NULL);
  382|  7.28k|  unsigned int i;
  383|       |
  384|       |  /*
  385|       |   * If the earliest expiration timestamp in the jar is in the future we can
  386|       |   * skip scanning the whole jar and instead exit early as there won't be any
  387|       |   * cookies to evict.  If we need to evict however, reset the next_expiration
  388|       |   * counter in order to track the next one. In case the recorded first
  389|       |   * expiration is the max offset, then perform the safe fallback of checking
  390|       |   * all cookies.
  391|       |   */
  392|  7.28k|  if(now < cookies->next_expiration &&
  393|  7.28k|      cookies->next_expiration != CURL_OFF_T_MAX)
  394|  2.20k|    return;
  395|  5.07k|  else
  396|  5.07k|    cookies->next_expiration = CURL_OFF_T_MAX;
  397|       |
  398|  1.30M|  for(i = 0; i < COOKIE_HASH_SIZE; i++) {
  399|  1.29M|    struct Cookie *pv = NULL;
  400|  1.29M|    co = cookies->cookies[i];
  401|  1.31M|    while(co) {
  402|  12.6k|      nx = co->next;
  403|  12.6k|      if(co->expires && co->expires < now) {
  404|    213|        if(!pv) {
  405|     72|          cookies->cookies[i] = co->next;
  406|     72|        }
  407|    141|        else {
  408|    141|          pv->next = co->next;
  409|    141|        }
  410|    213|        cookies->numcookies--;
  411|    213|        freecookie(co);
  412|    213|      }
  413|  12.4k|      else {
  414|       |        /*
  415|       |         * If this cookie has an expiration timestamp earlier than what we've
  416|       |         * seen so far then record it for the next round of expirations.
  417|       |         */
  418|  12.4k|        if(co->expires && co->expires < cookies->next_expiration)
  419|    170|          cookies->next_expiration = co->expires;
  420|  12.4k|        pv = co;
  421|  12.4k|      }
  422|  12.6k|      co = nx;
  423|  12.6k|    }
  424|  1.29M|  }
  425|  5.07k|}
cookie.c:cookiehash:
  276|  7.27k|{
  277|  7.27k|  const char *top;
  278|  7.27k|  size_t len;
  279|       |
  280|  7.27k|  if(!domain || Curl_host_is_ipnum(domain))
  281|  4.80k|    return 0;
  282|       |
  283|  2.47k|  top = get_top_domain(domain, &len);
  284|  2.47k|  return cookie_hash_domain(top, len);
  285|  7.27k|}
cookie.c:get_top_domain:
  227|  2.47k|{
  228|  2.47k|  size_t len = 0;
  229|  2.47k|  const char *first = NULL, *last;
  230|       |
  231|  2.47k|  if(domain) {
  232|  2.47k|    len = strlen(domain);
  233|  2.47k|    last = memrchr(domain, '.', len);
  234|  2.47k|    if(last) {
  235|  1.28k|      first = memrchr(domain, '.', (last - domain));
  236|  1.28k|      if(first)
  237|    941|        len -= (++first - domain);
  238|  1.28k|    }
  239|  2.47k|  }
  240|       |
  241|  2.47k|  if(outlen)
  242|  2.47k|    *outlen = len;
  243|       |
  244|  2.47k|  return first? first: domain;
  245|  2.47k|}
cookie.c:cookie_hash_domain:
  256|  2.47k|{
  257|  2.47k|  const char *end = domain + len;
  258|  2.47k|  size_t h = 5381;
  259|       |
  260|  14.6k|  while(domain < end) {
  261|  12.1k|    h += h << 5;
  262|  12.1k|    h ^= Curl_raw_toupper(*domain++);
  263|  12.1k|  }
  264|       |
  265|  2.47k|  return (h % COOKIE_HASH_SIZE);
  266|  2.47k|}
cookie.c:pathmatch:
  153|     88|{
  154|     88|  size_t cookie_path_len;
  155|     88|  size_t uri_path_len;
  156|     88|  char *uri_path = NULL;
  157|     88|  char *pos;
  158|     88|  bool ret = FALSE;
  159|       |
  160|       |  /* cookie_path must not have last '/' separator. ex: /sample */
  161|     88|  cookie_path_len = strlen(cookie_path);
  162|     88|  if(1 == cookie_path_len) {
  163|       |    /* cookie_path must be '/' */
  164|     17|    return TRUE;
  165|     17|  }
  166|       |
  167|     71|  uri_path = strdup(request_uri);
  168|     71|  if(!uri_path)
  169|      0|    return FALSE;
  170|     71|  pos = strchr(uri_path, '?');
  171|     71|  if(pos)
  172|      0|    *pos = 0x0;
  173|       |
  174|       |  /* #-fragments are already cut off! */
  175|     71|  if(0 == strlen(uri_path) || uri_path[0] != '/') {
  176|      0|    strstore(&uri_path, "/");
  177|      0|    if(!uri_path)
  178|      0|      return FALSE;
  179|      0|  }
  180|       |
  181|       |  /*
  182|       |   * here, RFC6265 5.1.4 says
  183|       |   *  4. Output the characters of the uri-path from the first character up
  184|       |   *     to, but not including, the right-most %x2F ("/").
  185|       |   *  but URL path /hoge?fuga=xxx means /hoge/index.cgi?fuga=xxx in some site
  186|       |   *  without redirect.
  187|       |   *  Ignore this algorithm because /hoge is uri path for this case
  188|       |   *  (uri path is not /).
  189|       |   */
  190|       |
  191|     71|  uri_path_len = strlen(uri_path);
  192|       |
  193|     71|  if(uri_path_len < cookie_path_len) {
  194|     13|    ret = FALSE;
  195|     13|    goto pathmatched;
  196|     13|  }
  197|       |
  198|       |  /* not using checkprefix() because matching should be case-sensitive */
  199|     58|  if(strncmp(cookie_path, uri_path, cookie_path_len)) {
  200|     10|    ret = FALSE;
  201|     10|    goto pathmatched;
  202|     10|  }
  203|       |
  204|       |  /* The cookie-path and the uri-path are identical. */
  205|     48|  if(cookie_path_len == uri_path_len) {
  206|     19|    ret = TRUE;
  207|     19|    goto pathmatched;
  208|     19|  }
  209|       |
  210|       |  /* here, cookie_path_len < uri_path_len */
  211|     29|  if(uri_path[cookie_path_len] == '/') {
  212|     19|    ret = TRUE;
  213|     19|    goto pathmatched;
  214|     19|  }
  215|       |
  216|     10|  ret = FALSE;
  217|       |
  218|     71|pathmatched:
  219|     71|  free(uri_path);
  220|     71|  return ret;
  221|     10|}
cookie.c:dup_cookie:
 1315|     55|{
 1316|     55|  struct Cookie *d = calloc(sizeof(struct Cookie), 1);
 1317|     55|  if(d) {
 1318|     55|    CLONE(expirestr);
 1319|     55|    CLONE(domain);
 1320|     55|    CLONE(path);
 1321|     55|    CLONE(spath);
 1322|     55|    CLONE(name);
 1323|     55|    CLONE(value);
 1324|     55|    CLONE(maxage);
 1325|     55|    CLONE(version);
 1326|     55|    d->expires = src->expires;
 1327|     55|    d->tailmatch = src->tailmatch;
 1328|     55|    d->secure = src->secure;
 1329|     55|    d->livecookie = src->livecookie;
 1330|     55|    d->httponly = src->httponly;
 1331|     55|    d->creationtime = src->creationtime;
 1332|     55|  }
 1333|     55|  return d;
 1334|       |
 1335|      0|  fail:
 1336|      0|  freecookie(d);
 1337|      0|  return NULL;
 1338|     55|}
cookie.c:cookie_sort:
 1262|     45|{
 1263|     45|  struct Cookie *c1 = *(struct Cookie **)p1;
 1264|     45|  struct Cookie *c2 = *(struct Cookie **)p2;
 1265|     45|  size_t l1, l2;
 1266|       |
 1267|       |  /* 1 - compare cookie path lengths */
 1268|     45|  l1 = c1->path ? strlen(c1->path) : 0;
 1269|     45|  l2 = c2->path ? strlen(c2->path) : 0;
 1270|       |
 1271|     45|  if(l1 != l2)
 1272|      9|    return (l2 > l1) ? 1 : -1 ; /* avoid size_t <=> int conversions */
 1273|       |
 1274|       |  /* 2 - compare cookie domain lengths */
 1275|     36|  l1 = c1->domain ? strlen(c1->domain) : 0;
 1276|     36|  l2 = c2->domain ? strlen(c2->domain) : 0;
 1277|       |
 1278|     36|  if(l1 != l2)
 1279|      0|    return (l2 > l1) ? 1 : -1 ;  /* avoid size_t <=> int conversions */
 1280|       |
 1281|       |  /* 3 - compare cookie name lengths */
 1282|     36|  l1 = c1->name ? strlen(c1->name) : 0;
 1283|     36|  l2 = c2->name ? strlen(c2->name) : 0;
 1284|       |
 1285|     36|  if(l1 != l2)
 1286|     32|    return (l2 > l1) ? 1 : -1;
 1287|       |
 1288|       |  /* 4 - compare cookie creation time */
 1289|      4|  return (c2->creationtime > c1->creationtime) ? 1 : -1;
 1290|     36|}
cookie.c:get_netscape_format:
 1550|  1.45k|{
 1551|  1.45k|  return aprintf(
 1552|  1.45k|    "%s"     /* httponly preamble */
 1553|  1.45k|    "%s%s\t" /* domain */
 1554|  1.45k|    "%s\t"   /* tailmatch */
 1555|  1.45k|    "%s\t"   /* path */
 1556|  1.45k|    "%s\t"   /* secure */
 1557|  1.45k|    "%" CURL_FORMAT_CURL_OFF_T "\t"   /* expires */
 1558|  1.45k|    "%s\t"   /* name */
 1559|  1.45k|    "%s",    /* value */
 1560|  1.45k|    co->httponly?"#HttpOnly_":"",
 1561|       |    /*
 1562|       |     * Make sure all domains are prefixed with a dot if they allow
 1563|       |     * tailmatching. This is Mozilla-style.
 1564|       |     */
 1565|  1.45k|    (co->tailmatch && co->domain && co->domain[0] != '.')? ".":"",
 1566|  1.45k|    co->domain?co->domain:"unknown",
 1567|  1.45k|    co->tailmatch?"TRUE":"FALSE",
 1568|  1.45k|    co->path?co->path:"/",
 1569|  1.45k|    co->secure?"TRUE":"FALSE",
 1570|  1.45k|    co->expires,
 1571|  1.45k|    co->name,
 1572|  1.45k|    co->value?co->value:"");
 1573|  1.45k|}
cookie.c:cookie_output:
 1585|  2.25k|{
 1586|  2.25k|  struct Cookie *co;
 1587|  2.25k|  FILE *out = NULL;
 1588|  2.25k|  bool use_stdout = FALSE;
 1589|  2.25k|  char *tempstore = NULL;
 1590|  2.25k|  CURLcode error = CURLE_OK;
 1591|       |
 1592|  2.25k|  if(!c)
 1593|       |    /* no cookie engine alive */
 1594|      0|    return CURLE_OK;
 1595|       |
 1596|       |  /* at first, remove expired cookies */
 1597|  2.25k|  remove_expired(c);
 1598|       |
 1599|  2.25k|  if(!strcmp("-", filename)) {
 1600|       |    /* use stdout */
 1601|      0|    out = stdout;
 1602|      0|    use_stdout = TRUE;
 1603|      0|  }
 1604|  2.25k|  else {
 1605|  2.25k|    unsigned char randsuffix[9];
 1606|       |
 1607|  2.25k|    if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
 1608|      0|      return 2;
 1609|       |
 1610|  2.25k|    tempstore = aprintf("%s.%s.tmp", filename, randsuffix);
 1611|  2.25k|    if(!tempstore)
 1612|      0|      return CURLE_OUT_OF_MEMORY;
 1613|       |
 1614|  2.25k|    out = fopen(tempstore, FOPEN_WRITETEXT);
 1615|  2.25k|    if(!out) {
 1616|      0|      error = CURLE_WRITE_ERROR;
 1617|      0|      goto error;
 1618|      0|    }
 1619|  2.25k|  }
 1620|       |
 1621|  2.25k|  fputs("# Netscape HTTP Cookie File\n"
 1622|  2.25k|        "# https://curl.se/docs/http-cookies.html\n"
 1623|  2.25k|        "# This file was generated by libcurl! Edit at your own risk.\n\n",
 1624|  2.25k|        out);
 1625|       |
 1626|  2.25k|  if(c->numcookies) {
 1627|    305|    unsigned int i;
 1628|    305|    size_t nvalid = 0;
 1629|    305|    struct Cookie **array;
 1630|       |
 1631|    305|    array = calloc(1, sizeof(struct Cookie *) * c->numcookies);
 1632|    305|    if(!array) {
 1633|      0|      error = CURLE_OUT_OF_MEMORY;
 1634|      0|      goto error;
 1635|      0|    }
 1636|       |
 1637|       |    /* only sort the cookies with a domain property */
 1638|  78.3k|    for(i = 0; i < COOKIE_HASH_SIZE; i++) {
 1639|  79.5k|      for(co = c->cookies[i]; co; co = co->next) {
 1640|  1.45k|        if(!co->domain)
 1641|      0|          continue;
 1642|  1.45k|        array[nvalid++] = co;
 1643|  1.45k|      }
 1644|  78.0k|    }
 1645|       |
 1646|    305|    qsort(array, nvalid, sizeof(struct Cookie *), cookie_sort_ct);
 1647|       |
 1648|  1.76k|    for(i = 0; i < nvalid; i++) {
 1649|  1.45k|      char *format_ptr = get_netscape_format(array[i]);
 1650|  1.45k|      if(!format_ptr) {
 1651|      0|        free(array);
 1652|      0|        error = CURLE_OUT_OF_MEMORY;
 1653|      0|        goto error;
 1654|      0|      }
 1655|  1.45k|      fprintf(out, "%s\n", format_ptr);
 1656|  1.45k|      free(format_ptr);
 1657|  1.45k|    }
 1658|       |
 1659|    305|    free(array);
 1660|    305|  }
 1661|       |
 1662|  2.25k|  if(!use_stdout) {
 1663|  2.25k|    fclose(out);
 1664|  2.25k|    out = NULL;
 1665|  2.25k|    if(Curl_rename(tempstore, filename)) {
 1666|      0|      unlink(tempstore);
 1667|      0|      error = CURLE_WRITE_ERROR;
 1668|      0|      goto error;
 1669|      0|    }
 1670|  2.25k|  }
 1671|       |
 1672|       |  /*
 1673|       |   * If we reach here we have successfully written a cookie file so theree is
 1674|       |   * no need to inspect the error, any error case should have jumped into the
 1675|       |   * error block below.
 1676|       |   */
 1677|  2.25k|  free(tempstore);
 1678|  2.25k|  return CURLE_OK;
 1679|       |
 1680|      0|error:
 1681|      0|  if(out && !use_stdout)
 1682|      0|    fclose(out);
 1683|      0|  free(tempstore);
 1684|      0|  return error;
 1685|  2.25k|}
cookie.c:cookie_sort_ct:
 1298|  2.06k|{
 1299|  2.06k|  struct Cookie *c1 = *(struct Cookie **)p1;
 1300|  2.06k|  struct Cookie *c2 = *(struct Cookie **)p2;
 1301|       |
 1302|  2.06k|  return (c2->creationtime > c1->creationtime) ? 1 : -1;
 1303|  2.06k|}

Curl_freeaddrinfo:
   82|  2.12k|{
   83|  2.12k|  struct Curl_addrinfo *vqualifier canext;
   84|  2.12k|  struct Curl_addrinfo *ca;
   85|       |
   86|  4.24k|  for(ca = cahead; ca; ca = canext) {
   87|  2.12k|    canext = ca->ai_next;
   88|  2.12k|    free(ca);
   89|  2.12k|  }
   90|  2.12k|}
Curl_he2ai:
  260|  2.12k|{
  261|  2.12k|  struct Curl_addrinfo *ai;
  262|  2.12k|  struct Curl_addrinfo *prevai = NULL;
  263|  2.12k|  struct Curl_addrinfo *firstai = NULL;
  264|  2.12k|  struct sockaddr_in *addr;
  265|  2.12k|#ifdef ENABLE_IPV6
  266|  2.12k|  struct sockaddr_in6 *addr6;
  267|  2.12k|#endif
  268|  2.12k|  CURLcode result = CURLE_OK;
  269|  2.12k|  int i;
  270|  2.12k|  char *curr;
  271|       |
  272|  2.12k|  if(!he)
  273|       |    /* no input == no output! */
  274|      0|    return NULL;
  275|       |
  276|  2.12k|  DEBUGASSERT((he->h_name != NULL) && (he->h_addr_list != NULL));
  277|       |
  278|  4.24k|  for(i = 0; (curr = he->h_addr_list[i]) != NULL; i++) {
  279|  2.12k|    size_t ss_size;
  280|  2.12k|    size_t namelen = strlen(he->h_name) + 1; /* include zero termination */
  281|  2.12k|#ifdef ENABLE_IPV6
  282|  2.12k|    if(he->h_addrtype == AF_INET6)
  283|      0|      ss_size = sizeof(struct sockaddr_in6);
  284|  2.12k|    else
  285|  2.12k|#endif
  286|  2.12k|      ss_size = sizeof(struct sockaddr_in);
  287|       |
  288|       |    /* allocate memory to hold the struct, the address and the name */
  289|  2.12k|    ai = calloc(1, sizeof(struct Curl_addrinfo) + ss_size + namelen);
  290|  2.12k|    if(!ai) {
  291|      0|      result = CURLE_OUT_OF_MEMORY;
  292|      0|      break;
  293|      0|    }
  294|       |    /* put the address after the struct */
  295|  2.12k|    ai->ai_addr = (void *)((char *)ai + sizeof(struct Curl_addrinfo));
  296|       |    /* then put the name after the address */
  297|  2.12k|    ai->ai_canonname = (char *)ai->ai_addr + ss_size;
  298|  2.12k|    memcpy(ai->ai_canonname, he->h_name, namelen);
  299|       |
  300|  2.12k|    if(!firstai)
  301|       |      /* store the pointer we want to return from this function */
  302|  2.12k|      firstai = ai;
  303|       |
  304|  2.12k|    if(prevai)
  305|       |      /* make the previous entry point to this */
  306|      0|      prevai->ai_next = ai;
  307|       |
  308|  2.12k|    ai->ai_family = he->h_addrtype;
  309|       |
  310|       |    /* we return all names as STREAM, so when using this address for TFTP
  311|       |       the type must be ignored and conn->socktype be used instead! */
  312|  2.12k|    ai->ai_socktype = SOCK_STREAM;
  313|       |
  314|  2.12k|    ai->ai_addrlen = (curl_socklen_t)ss_size;
  315|       |
  316|       |    /* leave the rest of the struct filled with zero */
  317|       |
  318|  2.12k|    switch(ai->ai_family) {
  319|  2.12k|    case AF_INET:
  320|  2.12k|      addr = (void *)ai->ai_addr; /* storage area for this info */
  321|       |
  322|  2.12k|      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
  323|  2.12k|      addr->sin_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  324|  2.12k|      addr->sin_port = htons((unsigned short)port);
  325|  2.12k|      break;
  326|       |
  327|      0|#ifdef ENABLE_IPV6
  328|      0|    case AF_INET6:
  329|      0|      addr6 = (void *)ai->ai_addr; /* storage area for this info */
  330|       |
  331|      0|      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
  332|      0|      addr6->sin6_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  333|      0|      addr6->sin6_port = htons((unsigned short)port);
  334|      0|      break;
  335|  2.12k|#endif
  336|  2.12k|    }
  337|       |
  338|  2.12k|    prevai = ai;
  339|  2.12k|  }
  340|       |
  341|  2.12k|  if(result) {
  342|      0|    Curl_freeaddrinfo(firstai);
  343|      0|    firstai = NULL;
  344|      0|  }
  345|       |
  346|  2.12k|  return firstai;
  347|  2.12k|}
Curl_ip2addr:
  373|  2.12k|{
  374|  2.12k|  struct Curl_addrinfo *ai;
  375|       |
  376|       |#if defined(__VMS) && \
  377|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  378|       |#pragma pointer_size save
  379|       |#pragma pointer_size short
  380|       |#pragma message disable PTRMISMATCH
  381|       |#endif
  382|       |
  383|  2.12k|  struct hostent  *h;
  384|  2.12k|  struct namebuff *buf;
  385|  2.12k|  char  *addrentry;
  386|  2.12k|  char  *hoststr;
  387|  2.12k|  size_t addrsize;
  388|       |
  389|  2.12k|  DEBUGASSERT(inaddr && hostname);
  390|       |
  391|  2.12k|  buf = malloc(sizeof(struct namebuff));
  392|  2.12k|  if(!buf)
  393|      0|    return NULL;
  394|       |
  395|  2.12k|  hoststr = strdup(hostname);
  396|  2.12k|  if(!hoststr) {
  397|      0|    free(buf);
  398|      0|    return NULL;
  399|      0|  }
  400|       |
  401|  2.12k|  switch(af) {
  402|  2.12k|  case AF_INET:
  403|  2.12k|    addrsize = sizeof(struct in_addr);
  404|  2.12k|    addrentry = (void *)&buf->addrentry.ina4;
  405|  2.12k|    memcpy(addrentry, inaddr, sizeof(struct in_addr));
  406|  2.12k|    break;
  407|      0|#ifdef ENABLE_IPV6
  408|      0|  case AF_INET6:
  409|      0|    addrsize = sizeof(struct in6_addr);
  410|      0|    addrentry = (void *)&buf->addrentry.ina6;
  411|      0|    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
  412|      0|    break;
  413|      0|#endif
  414|      0|  default:
  415|      0|    free(hoststr);
  416|      0|    free(buf);
  417|      0|    return NULL;
  418|  2.12k|  }
  419|       |
  420|  2.12k|  h = &buf->hostentry;
  421|  2.12k|  h->h_name = hoststr;
  422|  2.12k|  h->h_aliases = NULL;
  423|  2.12k|  h->h_addrtype = (short)af;
  424|  2.12k|  h->h_length = (short)addrsize;
  425|  2.12k|  h->h_addr_list = &buf->h_addr_list[0];
  426|  2.12k|  h->h_addr_list[0] = addrentry;
  427|  2.12k|  h->h_addr_list[1] = NULL; /* terminate list of entries */
  428|       |
  429|       |#if defined(__VMS) && \
  430|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  431|       |#pragma pointer_size restore
  432|       |#pragma message enable PTRMISMATCH
  433|       |#endif
  434|       |
  435|  2.12k|  ai = Curl_he2ai(h, port);
  436|       |
  437|  2.12k|  free(hoststr);
  438|  2.12k|  free(buf);
  439|       |
  440|  2.12k|  return ai;
  441|  2.12k|}

Curl_isspace:
   64|  37.7k|{
   65|  37.7k|  if((c < 0) || (c >= 0x80))
   66|  1.16k|    return FALSE;
   67|  36.5k|  return (ascii[c] & _S);
   68|  37.7k|}
Curl_isdigit:
   71|   750k|{
   72|   750k|  if((c < 0) || (c >= 0x80))
   73|    105|    return FALSE;
   74|   750k|  return (ascii[c] & _N);
   75|   750k|}
Curl_isalnum:
   78|  38.8k|{
   79|  38.8k|  if((c < 0) || (c >= 0x80))
   80|    323|    return FALSE;
   81|  38.5k|  return (ascii[c] & (_N|_U|_L));
   82|  38.8k|}
Curl_isxdigit:
   85|  1.87k|{
   86|  1.87k|  if((c < 0) || (c >= 0x80))
   87|     23|    return FALSE;
   88|  1.84k|  return (ascii[c] & (_N|_X));
   89|  1.87k|}
Curl_isgraph:
   92|  20.2k|{
   93|  20.2k|  if((c < 0) || (c >= 0x80) || (c == ' '))
   94|  1.05k|    return FALSE;
   95|  19.2k|  return (ascii[c] & (_N|_X|_U|_L|_P|_S));
   96|  20.2k|}
Curl_isalpha:
  106|  6.39k|{
  107|  6.39k|  if((c < 0) || (c >= 0x80))
  108|      0|    return FALSE;
  109|  6.39k|  return (ascii[c] & (_U|_L));
  110|  6.39k|}
Curl_iscntrl:
  127|  20.5k|{
  128|  20.5k|  if((c < 0) || (c >= 0x80))
  129|  1.05k|    return FALSE;
  130|  19.4k|  return (ascii[c] & (_C));
  131|  20.5k|}

Curl_memrchr:
   46|  3.75k|{
   47|  3.75k|  if(n > 0) {
   48|  3.30k|    const unsigned char *p = s;
   49|  3.30k|    const unsigned char *q = s;
   50|       |
   51|  3.30k|    p += n - 1;
   52|       |
   53|  14.1k|    while(p >= q) {
   54|  13.1k|      if(*p == (unsigned char)c)
   55|  2.22k|        return (void *)p;
   56|  10.8k|      p--;
   57|  10.8k|    }
   58|  3.30k|  }
   59|  1.53k|  return NULL;
   60|  3.75k|}

Curl_output_ntlm_wb:
  384|      3|{
  385|       |  /* point to the address of the pointer that holds the string to send to the
  386|       |     server, which is for a plain host or for a HTTP proxy */
  387|      3|  char **allocuserpwd;
  388|       |  /* point to the name and password for this */
  389|      3|  const char *userp;
  390|      3|  struct ntlmdata *ntlm;
  391|      3|  curlntlm *state;
  392|      3|  struct auth *authp;
  393|       |
  394|      3|  CURLcode res = CURLE_OK;
  395|       |
  396|      3|  DEBUGASSERT(conn);
  397|      3|  DEBUGASSERT(data);
  398|       |
  399|      3|  if(proxy) {
  400|      0|#ifndef CURL_DISABLE_PROXY
  401|      0|    allocuserpwd = &data->state.aptr.proxyuserpwd;
  402|      0|    userp = conn->http_proxy.user;
  403|      0|    ntlm = &conn->proxyntlm;
  404|      0|    state = &conn->proxy_ntlm_state;
  405|      0|    authp = &data->state.authproxy;
  406|       |#else
  407|       |    return CURLE_NOT_BUILT_IN;
  408|       |#endif
  409|      0|  }
  410|      3|  else {
  411|      3|    allocuserpwd = &data->state.aptr.userpwd;
  412|      3|    userp = conn->user;
  413|      3|    ntlm = &conn->ntlm;
  414|      3|    state = &conn->http_ntlm_state;
  415|      3|    authp = &data->state.authhost;
  416|      3|  }
  417|      3|  authp->done = FALSE;
  418|       |
  419|       |  /* not set means empty */
  420|      3|  if(!userp)
  421|      0|    userp = "";
  422|       |
  423|      3|  switch(*state) {
  424|      0|  case NTLMSTATE_TYPE1:
  425|      3|  default:
  426|       |    /* Use Samba's 'winbind' daemon to support NTLM authentication,
  427|       |     * by delegating the NTLM challenge/response protocol to a helper
  428|       |     * in ntlm_auth.
  429|       |     * https://web.archive.org/web/20190925164737
  430|       |     * /devel.squid-cache.org/ntlm/squid_helper_protocol.html
  431|       |     * https://www.samba.org/samba/docs/man/manpages-3/winbindd.8.html
  432|       |     * https://www.samba.org/samba/docs/man/manpages-3/ntlm_auth.1.html
  433|       |     * Preprocessor symbol 'NTLM_WB_ENABLED' is defined when this
  434|       |     * feature is enabled and 'NTLM_WB_FILE' symbol holds absolute
  435|       |     * filename of ntlm_auth helper.
  436|       |     * If NTLM authentication using winbind fails, go back to original
  437|       |     * request handling process.
  438|       |     */
  439|       |    /* Create communication with ntlm_auth */
  440|      3|    res = ntlm_wb_init(data, ntlm, userp);
  441|      3|    if(res)
  442|      3|      return res;
  443|      0|    res = ntlm_wb_response(data, ntlm, "YR\n", *state);
  444|      0|    if(res)
  445|      0|      return res;
  446|       |
  447|      0|    free(*allocuserpwd);
  448|      0|    *allocuserpwd = aprintf("%sAuthorization: NTLM %s\r\n",
  449|      0|                            proxy ? "Proxy-" : "",
  450|      0|                            ntlm->response);
  451|      0|    DEBUG_OUT(fprintf(stderr, "**** Header %s\n ", *allocuserpwd));
  452|      0|    Curl_safefree(ntlm->response);
  453|      0|    if(!*allocuserpwd)
  454|      0|      return CURLE_OUT_OF_MEMORY;
  455|      0|    break;
  456|       |
  457|      0|  case NTLMSTATE_TYPE2: {
  458|      0|    char *input = aprintf("TT %s\n", ntlm->challenge);
  459|      0|    if(!input)
  460|      0|      return CURLE_OUT_OF_MEMORY;
  461|      0|    res = ntlm_wb_response(data, ntlm, input, *state);
  462|      0|    free(input);
  463|      0|    if(res)
  464|      0|      return res;
  465|       |
  466|      0|    free(*allocuserpwd);
  467|      0|    *allocuserpwd = aprintf("%sAuthorization: NTLM %s\r\n",
  468|      0|                            proxy ? "Proxy-" : "",
  469|      0|                            ntlm->response);
  470|      0|    DEBUG_OUT(fprintf(stderr, "**** %s\n ", *allocuserpwd));
  471|      0|    *state = NTLMSTATE_TYPE3; /* we sent a type-3 */
  472|      0|    authp->done = TRUE;
  473|      0|    Curl_http_auth_cleanup_ntlm_wb(conn);
  474|      0|    if(!*allocuserpwd)
  475|      0|      return CURLE_OUT_OF_MEMORY;
  476|      0|    break;
  477|      0|  }
  478|      0|  case NTLMSTATE_TYPE3:
  479|       |    /* connection is already authenticated,
  480|       |     * don't send a header in future requests */
  481|      0|    *state = NTLMSTATE_LAST;
  482|       |    /* FALLTHROUGH */
  483|      0|  case NTLMSTATE_LAST:
  484|      0|    Curl_safefree(*allocuserpwd);
  485|      0|    authp->done = TRUE;
  486|      0|    break;
  487|      3|  }
  488|       |
  489|      0|  return CURLE_OK;
  490|      3|}
Curl_http_auth_cleanup_ntlm_wb:
  493|  2.44k|{
  494|  2.44k|  ntlm_wb_cleanup(&conn->ntlm);
  495|  2.44k|  ntlm_wb_cleanup(&conn->proxyntlm);
  496|  2.44k|}
curl_ntlm_wb.c:ntlm_wb_init:
  117|      3|{
  118|      3|  curl_socket_t sockfds[2];
  119|      3|  pid_t child_pid;
  120|      3|  const char *username;
  121|      3|  char *slash, *domain = NULL;
  122|      3|  const char *ntlm_auth = NULL;
  123|      3|  char *ntlm_auth_alloc = NULL;
  124|      3|#if defined(HAVE_GETPWUID_R) && defined(HAVE_GETEUID)
  125|      3|  struct passwd pw, *pw_res;
  126|      3|  char pwbuf[1024];
  127|      3|#endif
  128|      3|  char buffer[STRERROR_LEN];
  129|       |
  130|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
  131|       |  (void) data;
  132|       |#endif
  133|       |
  134|       |  /* Return if communication with ntlm_auth already set up */
  135|      3|  if(ntlm->ntlm_auth_hlpr_socket != CURL_SOCKET_BAD ||
  136|      3|     ntlm->ntlm_auth_hlpr_pid)
  137|      0|    return CURLE_OK;
  138|       |
  139|      3|  username = userp;
  140|       |  /* The real ntlm_auth really doesn't like being invoked with an
  141|       |     empty username. It won't make inferences for itself, and expects
  142|       |     the client to do so (mostly because it's really designed for
  143|       |     servers like squid to use for auth, and client support is an
  144|       |     afterthought for it). So try hard to provide a suitable username
  145|       |     if we don't already have one. But if we can't, provide the
  146|       |     empty one anyway. Perhaps they have an implementation of the
  147|       |     ntlm_auth helper which *doesn't* need it so we might as well try */
  148|      3|  if(!username || !username[0]) {
  149|      1|    username = getenv("NTLMUSER");
  150|      1|    if(!username || !username[0])
  151|      1|      username = getenv("LOGNAME");
  152|      1|    if(!username || !username[0])
  153|      1|      username = getenv("USER");
  154|      1|#if defined(HAVE_GETPWUID_R) && defined(HAVE_GETEUID)
  155|      1|    if((!username || !username[0]) &&
  156|      1|       !getpwuid_r(geteuid(), &pw, pwbuf, sizeof(pwbuf), &pw_res) &&
  157|      1|       pw_res) {
  158|      1|      username = pw.pw_name;
  159|      1|    }
  160|      1|#endif
  161|      1|    if(!username || !username[0])
  162|      0|      username = userp;
  163|      1|  }
  164|      3|  slash = strpbrk(username, "\\/");
  165|      3|  if(slash) {
  166|      1|    domain = strdup(username);
  167|      1|    if(!domain)
  168|      0|      return CURLE_OUT_OF_MEMORY;
  169|      1|    slash = domain + (slash - username);
  170|      1|    *slash = '\0';
  171|      1|    username = username + (slash - domain) + 1;
  172|      1|  }
  173|       |
  174|       |  /* For testing purposes, when DEBUGBUILD is defined and environment
  175|       |     variable CURL_NTLM_WB_FILE is set a fake_ntlm is used to perform
  176|       |     NTLM challenge/response which only accepts commands and output
  177|       |     strings pre-written in test case definitions */
  178|      3|#ifdef DEBUGBUILD
  179|      3|  ntlm_auth_alloc = curl_getenv("CURL_NTLM_WB_FILE");
  180|      3|  if(ntlm_auth_alloc)
  181|      0|    ntlm_auth = ntlm_auth_alloc;
  182|      3|  else
  183|      3|#endif
  184|      3|    ntlm_auth = NTLM_WB_FILE;
  185|       |
  186|      3|  if(access(ntlm_auth, X_OK) != 0) {
  187|      3|    failf(data, "Could not access ntlm_auth: %s errno %d: %s",
  188|      3|          ntlm_auth, errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  189|      3|    goto done;
  190|      3|  }
  191|       |
  192|      0|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, sockfds)) {
  193|      0|    failf(data, "Could not open socket pair. errno %d: %s",
  194|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  195|      0|    goto done;
  196|      0|  }
  197|       |
  198|      0|  child_pid = fork();
  199|      0|  if(child_pid == -1) {
  200|      0|    sclose(sockfds[0]);
  201|      0|    sclose(sockfds[1]);
  202|      0|    failf(data, "Could not fork. errno %d: %s",
  203|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  204|      0|    goto done;
  205|      0|  }
  206|      0|  else if(!child_pid) {
  207|       |    /*
  208|       |     * child process
  209|       |     */
  210|       |
  211|       |    /* Don't use sclose in the child since it fools the socket leak detector */
  212|      0|    sclose_nolog(sockfds[0]);
  213|      0|    if(dup2(sockfds[1], STDIN_FILENO) == -1) {
  214|      0|      failf(data, "Could not redirect child stdin. errno %d: %s",
  215|      0|            errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  216|      0|      exit(1);
  217|      0|    }
  218|       |
  219|      0|    if(dup2(sockfds[1], STDOUT_FILENO) == -1) {
  220|      0|      failf(data, "Could not redirect child stdout. errno %d: %s",
  221|      0|            errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  222|      0|      exit(1);
  223|      0|    }
  224|       |
  225|      0|    if(domain)
  226|      0|      execl(ntlm_auth, ntlm_auth,
  227|      0|            "--helper-protocol", "ntlmssp-client-1",
  228|      0|            "--use-cached-creds",
  229|      0|            "--username", username,
  230|      0|            "--domain", domain,
  231|      0|            NULL);
  232|      0|    else
  233|      0|      execl(ntlm_auth, ntlm_auth,
  234|      0|            "--helper-protocol", "ntlmssp-client-1",
  235|      0|            "--use-cached-creds",
  236|      0|            "--username", username,
  237|      0|            NULL);
  238|       |
  239|      0|    sclose_nolog(sockfds[1]);
  240|      0|    failf(data, "Could not execl(). errno %d: %s",
  241|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  242|      0|    exit(1);
  243|      0|  }
  244|       |
  245|      0|  sclose(sockfds[1]);
  246|      0|  ntlm->ntlm_auth_hlpr_socket = sockfds[0];
  247|      0|  ntlm->ntlm_auth_hlpr_pid = child_pid;
  248|      0|  free(domain);
  249|      0|  free(ntlm_auth_alloc);
  250|      0|  return CURLE_OK;
  251|       |
  252|      3|done:
  253|      3|  free(domain);
  254|      3|  free(ntlm_auth_alloc);
  255|      3|  return CURLE_REMOTE_ACCESS_DENIED;
  256|      0|}
curl_ntlm_wb.c:ntlm_wb_cleanup:
   80|  4.89k|{
   81|  4.89k|  if(ntlm->ntlm_auth_hlpr_socket != CURL_SOCKET_BAD) {
   82|      0|    sclose(ntlm->ntlm_auth_hlpr_socket);
   83|      0|    ntlm->ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
   84|      0|  }
   85|       |
   86|  4.89k|  if(ntlm->ntlm_auth_hlpr_pid) {
   87|      0|    int i;
   88|      0|    for(i = 0; i < 4; i++) {
   89|      0|      pid_t ret = waitpid(ntlm->ntlm_auth_hlpr_pid, NULL, WNOHANG);
   90|      0|      if(ret == ntlm->ntlm_auth_hlpr_pid || errno == ECHILD)
   91|      0|        break;
   92|      0|      switch(i) {
   93|      0|      case 0:
   94|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGTERM);
   95|      0|        break;
   96|      0|      case 1:
   97|       |        /* Give the process another moment to shut down cleanly before
   98|       |           bringing down the axe */
   99|      0|        Curl_wait_ms(1);
  100|      0|        break;
  101|      0|      case 2:
  102|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGKILL);
  103|      0|        break;
  104|      0|      case 3:
  105|      0|        break;
  106|      0|      }
  107|      0|    }
  108|      0|    ntlm->ntlm_auth_hlpr_pid = 0;
  109|      0|  }
  110|       |
  111|  4.89k|  Curl_safefree(ntlm->challenge);
  112|  4.89k|  Curl_safefree(ntlm->response);
  113|  4.89k|}

Curl_dedotdotify:
   54|  1.54k|{
   55|  1.54k|  size_t inlen = strlen(input);
   56|  1.54k|  char *clone;
   57|  1.54k|  size_t clen = inlen; /* the length of the cloned input */
   58|  1.54k|  char *out = malloc(inlen + 1);
   59|  1.54k|  char *outptr;
   60|  1.54k|  char *orgclone;
   61|  1.54k|  char *queryp;
   62|  1.54k|  if(!out)
   63|      0|    return NULL; /* out of memory */
   64|       |
   65|  1.54k|  *out = 0; /* null-terminates, for inputs like "./" */
   66|       |
   67|       |  /* get a cloned copy of the input */
   68|  1.54k|  clone = strdup(input);
   69|  1.54k|  if(!clone) {
   70|      0|    free(out);
   71|      0|    return NULL;
   72|      0|  }
   73|  1.54k|  orgclone = clone;
   74|  1.54k|  outptr = out;
   75|       |
   76|  1.54k|  if(!*clone) {
   77|       |    /* zero length string, return that */
   78|      0|    free(out);
   79|      0|    return clone;
   80|      0|  }
   81|       |
   82|       |  /*
   83|       |   * To handle query-parts properly, we must find it and remove it during the
   84|       |   * dotdot-operation and then append it again at the end to the output
   85|       |   * string.
   86|       |   */
   87|  1.54k|  queryp = strchr(clone, '?');
   88|  1.54k|  if(queryp)
   89|      0|    *queryp = 0;
   90|       |
   91|  2.90k|  do {
   92|       |
   93|       |    /*  A.  If the input buffer begins with a prefix of "../" or "./", then
   94|       |        remove that prefix from the input buffer; otherwise, */
   95|       |
   96|  2.90k|    if(!strncmp("./", clone, 2)) {
   97|      0|      clone += 2;
   98|      0|      clen -= 2;
   99|      0|    }
  100|  2.90k|    else if(!strncmp("../", clone, 3)) {
  101|      0|      clone += 3;
  102|      0|      clen -= 3;
  103|      0|    }
  104|       |
  105|       |    /*  B.  if the input buffer begins with a prefix of "/./" or "/.", where
  106|       |        "."  is a complete path segment, then replace that prefix with "/" in
  107|       |        the input buffer; otherwise, */
  108|  2.90k|    else if(!strncmp("/./", clone, 3)) {
  109|     50|      clone += 2;
  110|     50|      clen -= 2;
  111|     50|    }
  112|  2.85k|    else if(!strcmp("/.", clone)) {
  113|      6|      clone[1]='/';
  114|      6|      clone++;
  115|      6|      clen -= 1;
  116|      6|    }
  117|       |
  118|       |    /*  C.  if the input buffer begins with a prefix of "/../" or "/..", where
  119|       |        ".." is a complete path segment, then replace that prefix with "/" in
  120|       |        the input buffer and remove the last segment and its preceding "/" (if
  121|       |        any) from the output buffer; otherwise, */
  122|       |
  123|  2.85k|    else if(!strncmp("/../", clone, 4)) {
  124|    120|      clone += 3;
  125|    120|      clen -= 3;
  126|       |      /* remove the last segment from the output buffer */
  127|    581|      while(outptr > out) {
  128|    525|        outptr--;
  129|    525|        if(*outptr == '/')
  130|     64|          break;
  131|    525|      }
  132|    120|      *outptr = 0; /* null-terminate where it stops */
  133|    120|    }
  134|  2.73k|    else if(!strcmp("/..", clone)) {
  135|     23|      clone[2]='/';
  136|     23|      clone += 2;
  137|     23|      clen -= 2;
  138|       |      /* remove the last segment from the output buffer */
  139|    379|      while(outptr > out) {
  140|    366|        outptr--;
  141|    366|        if(*outptr == '/')
  142|     10|          break;
  143|    366|      }
  144|     23|      *outptr = 0; /* null-terminate where it stops */
  145|     23|    }
  146|       |
  147|       |    /*  D.  if the input buffer consists only of "." or "..", then remove
  148|       |        that from the input buffer; otherwise, */
  149|       |
  150|  2.70k|    else if(!strcmp(".", clone) || !strcmp("..", clone)) {
  151|      0|      *clone = 0;
  152|      0|      *out = 0;
  153|      0|    }
  154|       |
  155|  2.70k|    else {
  156|       |      /*  E.  move the first path segment in the input buffer to the end of
  157|       |          the output buffer, including the initial "/" character (if any) and
  158|       |          any subsequent characters up to, but not including, the next "/"
  159|       |          character or the end of the input buffer. */
  160|       |
  161|  19.2k|      do {
  162|  19.2k|        *outptr++ = *clone++;
  163|  19.2k|        clen--;
  164|  19.2k|      } while(*clone && (*clone != '/'));
  165|  2.70k|      *outptr = 0;
  166|  2.70k|    }
  167|       |
  168|  2.90k|  } while(*clone);
  169|       |
  170|  1.54k|  if(queryp) {
  171|      0|    size_t qlen;
  172|       |    /* There was a query part, append that to the output. The 'clone' string
  173|       |       may now have been altered so we copy from the original input string
  174|       |       from the correct index. */
  175|      0|    size_t oindex = queryp - orgclone;
  176|      0|    qlen = strlen(&input[oindex]);
  177|      0|    memcpy(outptr, &input[oindex], qlen + 1); /* include the end zero byte */
  178|      0|  }
  179|       |
  180|  1.54k|  free(orgclone);
  181|  1.54k|  return out;
  182|  1.54k|}

Curl_dyn_init:
   39|  20.9k|{
   40|  20.9k|  DEBUGASSERT(s);
   41|  20.9k|  DEBUGASSERT(toobig);
   42|  20.9k|  s->bufr = NULL;
   43|  20.9k|  s->leng = 0;
   44|  20.9k|  s->allc = 0;
   45|  20.9k|  s->toobig = toobig;
   46|  20.9k|#ifdef DEBUGBUILD
   47|  20.9k|  s->init = DYNINIT;
   48|  20.9k|#endif
   49|  20.9k|}
Curl_dyn_free:
   56|  16.2k|{
   57|  16.2k|  DEBUGASSERT(s);
   58|  16.2k|  Curl_safefree(s->bufr);
   59|  16.2k|  s->leng = s->allc = 0;
   60|  16.2k|}
Curl_dyn_reset:
  120|  22.0k|{
  121|  22.0k|  DEBUGASSERT(s);
  122|  22.0k|  DEBUGASSERT(s->init == DYNINIT);
  123|  22.0k|  DEBUGASSERT(!s->leng || s->bufr);
  124|  22.0k|  if(s->leng)
  125|  18.2k|    s->bufr[0] = 0;
  126|  22.0k|  s->leng = 0;
  127|  22.0k|}
Curl_dyn_addn:
  160|  1.18M|{
  161|  1.18M|  DEBUGASSERT(s);
  162|  1.18M|  DEBUGASSERT(s->init == DYNINIT);
  163|  1.18M|  DEBUGASSERT(!s->leng || s->bufr);
  164|  1.18M|  return dyn_nappend(s, mem, len);
  165|  1.18M|}
Curl_dyn_add:
  171|  7.84k|{
  172|  7.84k|  size_t n = strlen(str);
  173|  7.84k|  DEBUGASSERT(s);
  174|  7.84k|  DEBUGASSERT(s->init == DYNINIT);
  175|  7.84k|  DEBUGASSERT(!s->leng || s->bufr);
  176|  7.84k|  return dyn_nappend(s, (unsigned char *)str, n);
  177|  7.84k|}
Curl_dyn_vaddf:
  183|  5.90k|{
  184|  5.90k|#ifdef BUILDING_LIBCURL
  185|  5.90k|  int rc;
  186|  5.90k|  DEBUGASSERT(s);
  187|  5.90k|  DEBUGASSERT(s->init == DYNINIT);
  188|  5.90k|  DEBUGASSERT(!s->leng || s->bufr);
  189|  5.90k|  rc = Curl_dyn_vprintf(s, fmt, ap);
  190|       |
  191|  5.90k|  if(!rc)
  192|  5.90k|    return CURLE_OK;
  193|       |#else
  194|       |  char *str;
  195|       |  str = vaprintf(fmt, ap); /* this allocs a new string to append */
  196|       |
  197|       |  if(str) {
  198|       |    CURLcode result = dyn_nappend(s, (unsigned char *)str, strlen(str));
  199|       |    free(str);
  200|       |    return result;
  201|       |  }
  202|       |  /* If we failed, we cleanup the whole buffer and return error */
  203|       |  Curl_dyn_free(s);
  204|       |#endif
  205|      0|  return CURLE_OUT_OF_MEMORY;
  206|  5.90k|}
Curl_dyn_addf:
  212|  5.90k|{
  213|  5.90k|  CURLcode result;
  214|  5.90k|  va_list ap;
  215|  5.90k|  DEBUGASSERT(s);
  216|  5.90k|  DEBUGASSERT(s->init == DYNINIT);
  217|  5.90k|  DEBUGASSERT(!s->leng || s->bufr);
  218|  5.90k|  va_start(ap, fmt);
  219|  5.90k|  result = Curl_dyn_vaddf(s, fmt, ap);
  220|  5.90k|  va_end(ap);
  221|  5.90k|  return result;
  222|  5.90k|}
Curl_dyn_ptr:
  228|  57.4k|{
  229|  57.4k|  DEBUGASSERT(s);
  230|  57.4k|  DEBUGASSERT(s->init == DYNINIT);
  231|  57.4k|  DEBUGASSERT(!s->leng || s->bufr);
  232|  57.4k|  return s->bufr;
  233|  57.4k|}
Curl_dyn_len:
  250|   108k|{
  251|   108k|  DEBUGASSERT(s);
  252|   108k|  DEBUGASSERT(s->init == DYNINIT);
  253|   108k|  DEBUGASSERT(!s->leng || s->bufr);
  254|   108k|  return s->leng;
  255|   108k|}
dynbuf.c:dyn_nappend:
   67|  1.19M|{
   68|  1.19M|  size_t indx = s->leng;
   69|  1.19M|  size_t a = s->allc;
   70|  1.19M|  size_t fit = len + indx + 1; /* new string + old string + zero byte */
   71|       |
   72|       |  /* try to detect if there's rubbish in the struct */
   73|  1.19M|  DEBUGASSERT(s->init == DYNINIT);
   74|  1.19M|  DEBUGASSERT(s->toobig);
   75|  1.19M|  DEBUGASSERT(indx < s->toobig);
   76|  1.19M|  DEBUGASSERT(!s->leng || s->bufr);
   77|       |
   78|  1.19M|  if(fit > s->toobig) {
   79|      0|    Curl_dyn_free(s);
   80|      0|    return CURLE_OUT_OF_MEMORY;
   81|      0|  }
   82|  1.19M|  else if(!a) {
   83|  16.7k|    DEBUGASSERT(!indx);
   84|       |    /* first invoke */
   85|  16.7k|    if(fit < MIN_FIRST_ALLOC)
   86|  16.6k|      a = MIN_FIRST_ALLOC;
   87|    178|    else
   88|    178|      a = fit;
   89|  16.7k|  }
   90|  1.17M|  else {
   91|  1.19M|    while(a < fit)
   92|  12.5k|      a *= 2;
   93|  1.17M|  }
   94|       |
   95|  1.19M|  if(a != s->allc) {
   96|       |    /* this logic is not using Curl_saferealloc() to make the tool not have to
   97|       |       include that as well when it uses this code */
   98|  28.7k|    void *p = realloc(s->bufr, a);
   99|  28.7k|    if(!p) {
  100|      0|      Curl_safefree(s->bufr);
  101|      0|      s->leng = s->allc = 0;
  102|      0|      return CURLE_OUT_OF_MEMORY;
  103|      0|    }
  104|  28.7k|    s->bufr = p;
  105|  28.7k|    s->allc = a;
  106|  28.7k|  }
  107|       |
  108|  1.19M|  if(len)
  109|  1.17M|    memcpy(&s->bufr[indx], mem, len);
  110|  1.19M|  s->leng = indx + len;
  111|  1.19M|  s->bufr[s->leng] = 0;
  112|  1.19M|  return CURLE_OK;
  113|  1.19M|}

curl_global_init:
  216|      1|{
  217|      1|  return global_init(flags, TRUE);
  218|      1|}
curl_easy_init:
  290|  4.57k|{
  291|  4.57k|  CURLcode result;
  292|  4.57k|  struct Curl_easy *data;
  293|       |
  294|       |  /* Make sure we inited the global SSL stuff */
  295|  4.57k|  if(!initialized) {
  296|      1|    result = curl_global_init(CURL_GLOBAL_DEFAULT);
  297|      1|    if(result) {
  298|       |      /* something in the global init failed, return nothing */
  299|      0|      DEBUGF(fprintf(stderr, "Error: curl_global_init failed\n"));
  300|      0|      return NULL;
  301|      0|    }
  302|      1|  }
  303|       |
  304|       |  /* We use curl_open() with undefined URL so far */
  305|  4.57k|  result = Curl_open(&data);
  306|  4.57k|  if(result) {
  307|      0|    DEBUGF(fprintf(stderr, "Error: Curl_open failed\n"));
  308|      0|    return NULL;
  309|      0|  }
  310|       |
  311|  4.57k|  return data;
  312|  4.57k|}
curl_easy_cleanup:
  735|  2.31k|{
  736|  2.31k|  SIGPIPE_VARIABLE(pipe_st);
  737|       |
  738|  2.31k|  if(!data)
  739|      0|    return;
  740|       |
  741|  2.31k|  sigpipe_ignore(data, &pipe_st);
  742|  2.31k|  Curl_close(&data);
  743|  2.31k|  sigpipe_restore(&pipe_st);
  744|  2.31k|}
easy.c:global_init:
  136|      1|{
  137|      1|  if(initialized++)
  138|      0|    return CURLE_OK;
  139|       |
  140|      1|  if(memoryfuncs) {
  141|       |    /* Setup the default memory functions here (again) */
  142|      1|    Curl_cmalloc = (curl_malloc_callback)malloc;
  143|      1|    Curl_cfree = (curl_free_callback)free;
  144|      1|    Curl_crealloc = (curl_realloc_callback)realloc;
  145|      1|    Curl_cstrdup = (curl_strdup_callback)system_strdup;
  146|      1|    Curl_ccalloc = (curl_calloc_callback)calloc;
  147|       |#if defined(WIN32) && defined(UNICODE)
  148|       |    Curl_cwcsdup = (curl_wcsdup_callback)_wcsdup;
  149|       |#endif
  150|      1|  }
  151|       |
  152|      1|  if(!Curl_ssl_init()) {
  153|      0|    DEBUGF(fprintf(stderr, "Error: Curl_ssl_init failed\n"));
  154|      0|    goto fail;
  155|      0|  }
  156|       |
  157|       |#ifdef WIN32
  158|       |  if(Curl_win32_init(flags)) {
  159|       |    DEBUGF(fprintf(stderr, "Error: win32_init failed\n"));
  160|       |    goto fail;
  161|       |  }
  162|       |#endif
  163|       |
  164|       |#ifdef __AMIGA__
  165|       |  if(!Curl_amiga_init()) {
  166|       |    DEBUGF(fprintf(stderr, "Error: Curl_amiga_init failed\n"));
  167|       |    goto fail;
  168|       |  }
  169|       |#endif
  170|       |
  171|       |#ifdef NETWARE
  172|       |  if(netware_init()) {
  173|       |    DEBUGF(fprintf(stderr, "Warning: LONG namespace not available\n"));
  174|       |  }
  175|       |#endif
  176|       |
  177|      1|  if(Curl_resolver_global_init()) {
  178|      0|    DEBUGF(fprintf(stderr, "Error: resolver_global_init failed\n"));
  179|      0|    goto fail;
  180|      0|  }
  181|       |
  182|       |#if defined(USE_SSH)
  183|       |  if(Curl_ssh_init()) {
  184|       |    goto fail;
  185|       |  }
  186|       |#endif
  187|       |
  188|       |#ifdef USE_WOLFSSH
  189|       |  if(WS_SUCCESS != wolfSSH_Init()) {
  190|       |    DEBUGF(fprintf(stderr, "Error: wolfSSH_Init failed\n"));
  191|       |    return CURLE_FAILED_INIT;
  192|       |  }
  193|       |#endif
  194|       |
  195|      1|  init_flags = flags;
  196|       |
  197|      1|#ifdef DEBUGBUILD
  198|      1|  if(getenv("CURL_GLOBAL_INIT"))
  199|       |    /* alloc data that will leak if *cleanup() is not called! */
  200|      0|    leakpointer = malloc(1);
  201|      1|#endif
  202|       |
  203|      1|  return CURLE_OK;
  204|       |
  205|      0|  fail:
  206|      0|  initialized--; /* undo the increase */
  207|      0|  return CURLE_FAILED_INIT;
  208|      1|}

Curl_isunreserved:
   45|   105k|{
   46|   105k|  switch(in) {
   47|  8.88k|    case '0': case '1': case '2': case '3': case '4':
   48|  11.4k|    case '5': case '6': case '7': case '8': case '9':
   49|  22.1k|    case 'a': case 'b': case 'c': case 'd': case 'e':
   50|  27.6k|    case 'f': case 'g': case 'h': case 'i': case 'j':
   51|  35.8k|    case 'k': case 'l': case 'm': case 'n': case 'o':
   52|  46.5k|    case 'p': case 'q': case 'r': case 's': case 't':
   53|  60.7k|    case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
   54|  65.8k|    case 'A': case 'B': case 'C': case 'D': case 'E':
   55|  70.1k|    case 'F': case 'G': case 'H': case 'I': case 'J':
   56|  72.8k|    case 'K': case 'L': case 'M': case 'N': case 'O':
   57|  78.3k|    case 'P': case 'Q': case 'R': case 'S': case 'T':
   58|  79.2k|    case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
   59|  83.2k|    case '-': case '.': case '_': case '~':
   60|  83.2k|      return TRUE;
   61|  22.3k|    default:
   62|  22.3k|      break;
   63|   105k|  }
   64|  22.3k|  return FALSE;
   65|   105k|}
curl_easy_escape:
   81|    192|{
   82|    192|  size_t length;
   83|    192|  CURLcode result;
   84|    192|  struct dynbuf d;
   85|       |
   86|    192|  if(inlength < 0)
   87|      0|    return NULL;
   88|       |
   89|    192|  Curl_dyn_init(&d, CURL_MAX_INPUT_LENGTH * 3);
   90|       |
   91|    192|  length = (inlength?(size_t)inlength:strlen(string));
   92|    192|  if(!length)
   93|      0|    return strdup("");
   94|       |
   95|  2.76k|  while(length--) {
   96|  2.57k|    unsigned char in = *string; /* we need to treat the characters unsigned */
   97|       |
   98|  2.57k|    if(Curl_isunreserved(in)) {
   99|       |      /* append this */
  100|  1.91k|      if(Curl_dyn_addn(&d, &in, 1))
  101|      0|        return NULL;
  102|  1.91k|    }
  103|    658|    else {
  104|       |      /* encode it */
  105|    658|      char encoded[4];
  106|    658|      result = Curl_convert_to_network(data, (char *)&in, 1);
  107|    658|      if(result) {
  108|       |        /* Curl_convert_to_network calls failf if unsuccessful */
  109|      0|        Curl_dyn_free(&d);
  110|      0|        return NULL;
  111|      0|      }
  112|       |
  113|    658|      msnprintf(encoded, sizeof(encoded), "%%%02X", in);
  114|    658|      if(Curl_dyn_add(&d, encoded))
  115|      0|        return NULL;
  116|    658|    }
  117|  2.57k|    string++;
  118|  2.57k|  }
  119|       |
  120|    192|  return Curl_dyn_ptr(&d);
  121|    192|}
Curl_urldecode:
  146|    220|{
  147|    220|  size_t alloc;
  148|    220|  char *ns;
  149|    220|  size_t strindex = 0;
  150|    220|  unsigned long hex;
  151|    220|  CURLcode result = CURLE_OK;
  152|       |
  153|    220|  DEBUGASSERT(string);
  154|    220|  DEBUGASSERT(ctrl >= REJECT_NADA); /* crash on TRUE/FALSE */
  155|       |
  156|    220|  alloc = (length?length:strlen(string)) + 1;
  157|    220|  ns = malloc(alloc);
  158|       |
  159|    220|  if(!ns)
  160|      0|    return CURLE_OUT_OF_MEMORY;
  161|       |
  162|  3.56k|  while(--alloc > 0) {
  163|  3.35k|    unsigned char in = *string;
  164|  3.35k|    if(('%' == in) && (alloc > 2) &&
  165|  3.35k|       ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
  166|       |      /* this is two hexadecimal digits following a '%' */
  167|    798|      char hexstr[3];
  168|    798|      char *ptr;
  169|    798|      hexstr[0] = string[1];
  170|    798|      hexstr[1] = string[2];
  171|    798|      hexstr[2] = 0;
  172|       |
  173|    798|      hex = strtoul(hexstr, &ptr, 16);
  174|       |
  175|    798|      in = curlx_ultouc(hex); /* this long is never bigger than 255 anyway */
  176|       |
  177|    798|      if(data) {
  178|      0|        result = Curl_convert_from_network(data, (char *)&in, 1);
  179|      0|        if(result) {
  180|       |          /* Curl_convert_from_network calls failf if unsuccessful */
  181|      0|          free(ns);
  182|      0|          return result;
  183|      0|        }
  184|      0|      }
  185|       |
  186|    798|      string += 2;
  187|    798|      alloc -= 2;
  188|    798|    }
  189|       |
  190|  3.35k|    if(((ctrl == REJECT_CTRL) && (in < 0x20)) ||
  191|  3.35k|       ((ctrl == REJECT_ZERO) && (in == 0))) {
  192|      4|      free(ns);
  193|      4|      return CURLE_URL_MALFORMAT;
  194|      4|    }
  195|       |
  196|  3.34k|    ns[strindex++] = in;
  197|  3.34k|    string++;
  198|  3.34k|  }
  199|    216|  ns[strindex] = 0; /* terminate it */
  200|       |
  201|    216|  if(olen)
  202|       |    /* store output size */
  203|    119|    *olen = strindex;
  204|       |
  205|       |  /* store output string */
  206|    216|  *ostring = ns;
  207|       |
  208|    216|  return CURLE_OK;
  209|    220|}
curl_free:
  244|      2|{
  245|      2|  free(p);
  246|      2|}

curl_getenv:
   75|  11.7k|{
   76|  11.7k|  return GetEnv(v);
   77|  11.7k|}
getenv.c:GetEnv:
   31|  11.7k|{
   32|       |#if defined(_WIN32_WCE) || defined(CURL_WINDOWS_APP)
   33|       |  (void)variable;
   34|       |  return NULL;
   35|       |#elif defined(WIN32)
   36|       |  /* This uses Windows API instead of C runtime getenv() to get the environment
   37|       |     variable since some changes aren't always visible to the latter. #4774 */
   38|       |  char *buf = NULL;
   39|       |  char *tmp;
   40|       |  DWORD bufsize;
   41|       |  DWORD rc = 1;
   42|       |  const DWORD max = 32768; /* max env var size from MSCRT source */
   43|       |
   44|       |  for(;;) {
   45|       |    tmp = realloc(buf, rc);
   46|       |    if(!tmp) {
   47|       |      free(buf);
   48|       |      return NULL;
   49|       |    }
   50|       |
   51|       |    buf = tmp;
   52|       |    bufsize = rc;
   53|       |
   54|       |    /* It's possible for rc to be 0 if the variable was found but empty.
   55|       |       Since getenv doesn't make that distinction we ignore it as well. */
   56|       |    rc = GetEnvironmentVariableA(variable, buf, bufsize);
   57|       |    if(!rc || rc == bufsize || rc > max) {
   58|       |      free(buf);
   59|       |      return NULL;
   60|       |    }
   61|       |
   62|       |    /* if rc < bufsize then rc is bytes written not including null */
   63|       |    if(rc < bufsize)
   64|       |      return buf;
   65|       |
   66|       |    /* else rc is bytes needed, try again */
   67|       |  }
   68|       |#else
   69|  11.7k|  char *env = getenv(variable);
   70|  11.7k|  return (env && env[0])?strdup(env):NULL;
   71|  11.7k|#endif
   72|  11.7k|}

Curl_initinfo:
   46|  6.75k|{
   47|  6.75k|  struct Progress *pro = &data->progress;
   48|  6.75k|  struct PureInfo *info = &data->info;
   49|       |
   50|  6.75k|  pro->t_nslookup = 0;
   51|  6.75k|  pro->t_connect = 0;
   52|  6.75k|  pro->t_appconnect = 0;
   53|  6.75k|  pro->t_pretransfer = 0;
   54|  6.75k|  pro->t_starttransfer = 0;
   55|  6.75k|  pro->timespent = 0;
   56|  6.75k|  pro->t_redirect = 0;
   57|  6.75k|  pro->is_t_startransfer_set = false;
   58|       |
   59|  6.75k|  info->httpcode = 0;
   60|  6.75k|  info->httpproxycode = 0;
   61|  6.75k|  info->httpversion = 0;
   62|  6.75k|  info->filetime = -1; /* -1 is an illegal time and thus means unknown */
   63|  6.75k|  info->timecond = FALSE;
   64|       |
   65|  6.75k|  info->header_size = 0;
   66|  6.75k|  info->request_size = 0;
   67|  6.75k|  info->proxyauthavail = 0;
   68|  6.75k|  info->httpauthavail = 0;
   69|  6.75k|  info->numconnects = 0;
   70|       |
   71|  6.75k|  free(info->contenttype);
   72|  6.75k|  info->contenttype = NULL;
   73|       |
   74|  6.75k|  free(info->wouldredirect);
   75|  6.75k|  info->wouldredirect = NULL;
   76|       |
   77|  6.75k|  info->conn_primary_ip[0] = '\0';
   78|  6.75k|  info->conn_local_ip[0] = '\0';
   79|  6.75k|  info->conn_primary_port = 0;
   80|  6.75k|  info->conn_local_port = 0;
   81|  6.75k|  info->retry_after = 0;
   82|       |
   83|  6.75k|  info->conn_scheme = 0;
   84|  6.75k|  info->conn_protocol = 0;
   85|       |
   86|  6.75k|#ifdef USE_SSL
   87|  6.75k|  Curl_ssl_free_certinfo(data);
   88|  6.75k|#endif
   89|  6.75k|  return CURLE_OK;
   90|  6.75k|}

Curl_hash_init:
   62|  6.76k|{
   63|  6.76k|  if(!slots || !hfunc || !comparator ||!dtor) {
   64|      0|    return 1; /* failure */
   65|      0|  }
   66|       |
   67|  6.76k|  h->hash_func = hfunc;
   68|  6.76k|  h->comp_func = comparator;
   69|  6.76k|  h->dtor = dtor;
   70|  6.76k|  h->size = 0;
   71|  6.76k|  h->slots = slots;
   72|       |
   73|  6.76k|  h->table = malloc(slots * sizeof(struct Curl_llist));
   74|  6.76k|  if(h->table) {
   75|  6.76k|    int i;
   76|  2.29M|    for(i = 0; i < slots; ++i)
   77|  2.28M|      Curl_llist_init(&h->table[i], (Curl_llist_dtor) hash_element_dtor);
   78|  6.76k|    return 0; /* fine */
   79|  6.76k|  }
   80|      0|  h->slots = 0;
   81|      0|  return 1; /* failure */
   82|  6.76k|}
Curl_hash_add:
  110|  4.48k|{
  111|  4.48k|  struct Curl_hash_element  *he;
  112|  4.48k|  struct Curl_llist_element *le;
  113|  4.48k|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  114|       |
  115|  4.49k|  for(le = l->head; le; le = le->next) {
  116|     15|    he = (struct Curl_hash_element *) le->ptr;
  117|     15|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  118|      0|      Curl_llist_remove(l, le, (void *)h);
  119|      0|      --h->size;
  120|      0|      break;
  121|      0|    }
  122|     15|  }
  123|       |
  124|  4.48k|  he = mk_hash_element(key, key_len, p);
  125|  4.48k|  if(he) {
  126|  4.48k|    Curl_llist_insert_next(l, l->tail, he, &he->list);
  127|  4.48k|    ++h->size;
  128|  4.48k|    return p; /* return the new entry */
  129|  4.48k|  }
  130|       |
  131|      0|  return NULL; /* failure */
  132|  4.48k|}
Curl_hash_delete:
  140|  2.35k|{
  141|  2.35k|  struct Curl_llist_element *le;
  142|  2.35k|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  143|       |
  144|  2.36k|  for(le = l->head; le; le = le->next) {
  145|  2.36k|    struct Curl_hash_element *he = le->ptr;
  146|  2.36k|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  147|  2.35k|      Curl_llist_remove(l, le, (void *) h);
  148|  2.35k|      --h->size;
  149|  2.35k|      return 0;
  150|  2.35k|    }
  151|  2.36k|  }
  152|      0|  return 1;
  153|  2.35k|}
Curl_hash_pick:
  161|  10.8k|{
  162|  10.8k|  struct Curl_llist_element *le;
  163|  10.8k|  struct Curl_llist *l;
  164|       |
  165|  10.8k|  if(h) {
  166|  10.8k|    l = FETCH_LIST(h, key, key_len);
  167|  10.9k|    for(le = l->head; le; le = le->next) {
  168|    397|      struct Curl_hash_element *he = le->ptr;
  169|    397|      if(h->comp_func(he->key, he->key_len, key, key_len)) {
  170|    369|        return he->ptr;
  171|    369|      }
  172|    397|    }
  173|  10.8k|  }
  174|       |
  175|  10.5k|  return NULL;
  176|  10.8k|}
Curl_hash_destroy:
  206|  6.76k|{
  207|  6.76k|  int i;
  208|       |
  209|  2.29M|  for(i = 0; i < h->slots; ++i) {
  210|  2.28M|    Curl_llist_destroy(&h->table[i], (void *) h);
  211|  2.28M|  }
  212|       |
  213|  6.76k|  Curl_safefree(h->table);
  214|  6.76k|  h->size = 0;
  215|  6.76k|  h->slots = 0;
  216|  6.76k|}
Curl_hash_clean:
  224|  2.25k|{
  225|  2.25k|  Curl_hash_clean_with_criterium(h, NULL, NULL);
  226|  2.25k|}
Curl_hash_clean_with_criterium:
  232|  4.56k|{
  233|  4.56k|  struct Curl_llist_element *le;
  234|  4.56k|  struct Curl_llist_element *lnext;
  235|  4.56k|  struct Curl_llist *list;
  236|  4.56k|  int i;
  237|       |
  238|  4.56k|  if(!h)
  239|  2.25k|    return;
  240|       |
  241|  18.4k|  for(i = 0; i < h->slots; ++i) {
  242|  16.1k|    list = &h->table[i];
  243|  16.1k|    le = list->head; /* get first list entry */
  244|  18.4k|    while(le) {
  245|  2.32k|      struct Curl_hash_element *he = le->ptr;
  246|  2.32k|      lnext = le->next;
  247|       |      /* ask the callback function if we shall remove this entry or not */
  248|  2.32k|      if(!comp || comp(user, he->ptr)) {
  249|      0|        Curl_llist_remove(list, le, (void *) h);
  250|      0|        --h->size; /* one less entry in the hash now */
  251|      0|      }
  252|  2.32k|      le = lnext;
  253|  2.32k|    }
  254|  16.1k|  }
  255|  2.30k|}
Curl_hash_str:
  258|  16.2k|{
  259|  16.2k|  const char *key_str = (const char *) key;
  260|  16.2k|  const char *end = key_str + key_length;
  261|  16.2k|  size_t h = 5381;
  262|       |
  263|   247k|  while(key_str < end) {
  264|   230k|    h += h << 5;
  265|   230k|    h ^= *key_str++;
  266|   230k|  }
  267|       |
  268|  16.2k|  return (h % slots_num);
  269|  16.2k|}
Curl_str_key_compare:
  273|  2.77k|{
  274|  2.77k|  if((key1_len == key2_len) && !memcmp(k1, k2, key1_len))
  275|  2.72k|    return 1;
  276|       |
  277|     48|  return 0;
  278|  2.77k|}
Curl_hash_start_iterate:
  282|  8.51k|{
  283|  8.51k|  iter->hash = hash;
  284|  8.51k|  iter->slot_index = 0;
  285|  8.51k|  iter->current_element = NULL;
  286|  8.51k|}
Curl_hash_next_element:
  290|  9.38k|{
  291|  9.38k|  struct Curl_hash *h = iter->hash;
  292|       |
  293|       |  /* Get the next element in the current list, if any */
  294|  9.38k|  if(iter->current_element)
  295|    866|    iter->current_element = iter->current_element->next;
  296|       |
  297|       |  /* If we have reached the end of the list, find the next one */
  298|  9.38k|  if(!iter->current_element) {
  299|  9.37k|    int i;
  300|   679k|    for(i = iter->slot_index; i < h->slots; i++) {
  301|   674k|      if(h->table[i].head) {
  302|  4.06k|        iter->current_element = h->table[i].head;
  303|  4.06k|        iter->slot_index = i + 1;
  304|  4.06k|        break;
  305|  4.06k|      }
  306|   674k|    }
  307|  9.37k|  }
  308|       |
  309|  9.38k|  if(iter->current_element) {
  310|  4.07k|    struct Curl_hash_element *he = iter->current_element->ptr;
  311|  4.07k|    return he;
  312|  4.07k|  }
  313|  5.30k|  iter->current_element = NULL;
  314|  5.30k|  return NULL;
  315|  9.38k|}
hash.c:hash_element_dtor:
   36|  4.48k|{
   37|  4.48k|  struct Curl_hash *h = (struct Curl_hash *) user;
   38|  4.48k|  struct Curl_hash_element *e = (struct Curl_hash_element *) element;
   39|       |
   40|  4.48k|  if(e->ptr) {
   41|  4.48k|    h->dtor(e->ptr);
   42|  4.48k|    e->ptr = NULL;
   43|  4.48k|  }
   44|       |
   45|  4.48k|  e->key_len = 0;
   46|       |
   47|  4.48k|  free(e);
   48|  4.48k|}
hash.c:mk_hash_element:
   86|  4.48k|{
   87|       |  /* allocate the struct plus memory after it to store the key */
   88|  4.48k|  struct Curl_hash_element *he = malloc(sizeof(struct Curl_hash_element) +
   89|  4.48k|                                        key_len);
   90|  4.48k|  if(he) {
   91|       |    /* copy the key */
   92|  4.48k|    memcpy(he->key, key, key_len);
   93|  4.48k|    he->key_len = key_len;
   94|  4.48k|    he->ptr = (void *) p;
   95|  4.48k|  }
   96|  4.48k|  return he;
   97|  4.48k|}

Curl_HMAC_init:
   55|     75|{
   56|     75|  size_t i;
   57|     75|  struct HMAC_context *ctxt;
   58|     75|  unsigned char *hkey;
   59|     75|  unsigned char b;
   60|       |
   61|       |  /* Create HMAC context. */
   62|     75|  i = sizeof(*ctxt) + 2 * hashparams->hmac_ctxtsize +
   63|     75|    hashparams->hmac_resultlen;
   64|     75|  ctxt = malloc(i);
   65|       |
   66|     75|  if(!ctxt)
   67|      0|    return ctxt;
   68|       |
   69|     75|  ctxt->hmac_hash = hashparams;
   70|     75|  ctxt->hmac_hashctxt1 = (void *) (ctxt + 1);
   71|     75|  ctxt->hmac_hashctxt2 = (void *) ((char *) ctxt->hmac_hashctxt1 +
   72|     75|      hashparams->hmac_ctxtsize);
   73|       |
   74|       |  /* If the key is too long, replace it by its hash digest. */
   75|     75|  if(keylen > hashparams->hmac_maxkeylen) {
   76|      5|    (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt1);
   77|      5|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, key, keylen);
   78|      5|    hkey = (unsigned char *) ctxt->hmac_hashctxt2 + hashparams->hmac_ctxtsize;
   79|      5|    (*hashparams->hmac_hfinal)(hkey, ctxt->hmac_hashctxt1);
   80|      5|    key = hkey;
   81|      5|    keylen = hashparams->hmac_resultlen;
   82|      5|  }
   83|       |
   84|       |  /* Prime the two hash contexts with the modified key. */
   85|     75|  (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt1);
   86|     75|  (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt2);
   87|       |
   88|  2.25k|  for(i = 0; i < keylen; i++) {
   89|  2.18k|    b = (unsigned char)(*key ^ hmac_ipad);
   90|  2.18k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, &b, 1);
   91|  2.18k|    b = (unsigned char)(*key++ ^ hmac_opad);
   92|  2.18k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2, &b, 1);
   93|  2.18k|  }
   94|       |
   95|  2.69k|  for(; i < hashparams->hmac_maxkeylen; i++) {
   96|  2.61k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, &hmac_ipad, 1);
   97|  2.61k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2, &hmac_opad, 1);
   98|  2.61k|  }
   99|       |
  100|       |  /* Done, return pointer to HMAC context. */
  101|     75|  return ctxt;
  102|     75|}
Curl_HMAC_update:
  107|     75|{
  108|       |  /* Update first hash calculation. */
  109|     75|  (*ctxt->hmac_hash->hmac_hupdate)(ctxt->hmac_hashctxt1, data, len);
  110|     75|  return 0;
  111|     75|}
Curl_HMAC_final:
  115|     75|{
  116|     75|  const struct HMAC_params *hashparams = ctxt->hmac_hash;
  117|       |
  118|       |  /* Do not get result if called with a null parameter: only release
  119|       |     storage. */
  120|       |
  121|     75|  if(!result)
  122|      0|    result = (unsigned char *) ctxt->hmac_hashctxt2 +
  123|      0|     ctxt->hmac_hash->hmac_ctxtsize;
  124|       |
  125|     75|  (*hashparams->hmac_hfinal)(result, ctxt->hmac_hashctxt1);
  126|     75|  (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2,
  127|     75|   result, hashparams->hmac_resultlen);
  128|     75|  (*hashparams->hmac_hfinal)(result, ctxt->hmac_hashctxt2);
  129|     75|  free((char *) ctxt);
  130|     75|  return 0;
  131|     75|}
Curl_hmacit:
  154|     75|{
  155|     75|  struct HMAC_context *ctxt =
  156|     75|    Curl_HMAC_init(hashparams, key, curlx_uztoui(keylen));
  157|       |
  158|     75|  if(!ctxt)
  159|      0|    return CURLE_OUT_OF_MEMORY;
  160|       |
  161|       |  /* Update the digest with the given challenge */
  162|     75|  Curl_HMAC_update(ctxt, data, curlx_uztoui(datalen));
  163|       |
  164|       |  /* Finalise the digest */
  165|     75|  Curl_HMAC_final(ctxt, output);
  166|       |
  167|     75|  return CURLE_OK;
  168|     75|}

Curl_num_addresses:
  128|  2.35k|{
  129|  2.35k|  int i = 0;
  130|  4.71k|  while(addr) {
  131|  2.35k|    addr = addr->ai_next;
  132|  2.35k|    i++;
  133|  2.35k|  }
  134|  2.35k|  return i;
  135|  2.35k|}
Curl_hostcache_prune:
  230|  2.30k|{
  231|  2.30k|  time_t now;
  232|       |
  233|  2.30k|  if((data->set.dns_cache_timeout == -1) || !data->dns.hostcache)
  234|       |    /* cache forever means never prune, and NULL hostcache means
  235|       |       we can't do it */
  236|      0|    return;
  237|       |
  238|  2.30k|  if(data->share)
  239|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  240|       |
  241|  2.30k|  time(&now);
  242|       |
  243|       |  /* Remove outdated and unused entries from the hostcache */
  244|  2.30k|  hostcache_prune(data->dns.hostcache,
  245|  2.30k|                  data->set.dns_cache_timeout,
  246|  2.30k|                  now);
  247|       |
  248|  2.30k|  if(data->share)
  249|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  250|  2.30k|}
Curl_cache_addr:
  419|  2.12k|{
  420|  2.12k|  char entry_id[MAX_HOSTCACHE_LEN];
  421|  2.12k|  size_t entry_len;
  422|  2.12k|  struct Curl_dns_entry *dns;
  423|  2.12k|  struct Curl_dns_entry *dns2;
  424|       |
  425|  2.12k|#ifndef CURL_DISABLE_SHUFFLE_DNS
  426|       |  /* shuffle addresses if requested */
  427|  2.12k|  if(data->set.dns_shuffle_addresses) {
  428|      0|    CURLcode result = Curl_shuffle_addr(data, &addr);
  429|      0|    if(result)
  430|      0|      return NULL;
  431|      0|  }
  432|  2.12k|#endif
  433|       |
  434|       |  /* Create a new cache entry */
  435|  2.12k|  dns = calloc(1, sizeof(struct Curl_dns_entry));
  436|  2.12k|  if(!dns) {
  437|      0|    return NULL;
  438|      0|  }
  439|       |
  440|       |  /* Create an entry id, based upon the hostname and port */
  441|  2.12k|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  442|  2.12k|  entry_len = strlen(entry_id);
  443|       |
  444|  2.12k|  dns->inuse = 1;   /* the cache has the first reference */
  445|  2.12k|  dns->addr = addr; /* this is the address(es) */
  446|  2.12k|  time(&dns->timestamp);
  447|  2.12k|  if(dns->timestamp == 0)
  448|      0|    dns->timestamp = 1;   /* zero indicates permanent CURLOPT_RESOLVE entry */
  449|       |
  450|       |  /* Store the resolved data in our DNS cache. */
  451|  2.12k|  dns2 = Curl_hash_add(data->dns.hostcache, entry_id, entry_len + 1,
  452|  2.12k|                       (void *)dns);
  453|  2.12k|  if(!dns2) {
  454|      0|    free(dns);
  455|      0|    return NULL;
  456|      0|  }
  457|       |
  458|  2.12k|  dns = dns2;
  459|  2.12k|  dns->inuse++;         /* mark entry as in-use */
  460|  2.12k|  return dns;
  461|  2.12k|}
Curl_ipv6works:
  540|  2.25k|{
  541|  2.25k|  if(data) {
  542|       |    /* the nature of most system is that IPv6 status doesn't come and go
  543|       |       during a program's lifetime so we only probe the first time and then we
  544|       |       have the info kept for fast re-use */
  545|      0|    DEBUGASSERT(data);
  546|      0|    DEBUGASSERT(data->multi);
  547|      0|    return data->multi->ipv6_works;
  548|      0|  }
  549|  2.25k|  else {
  550|  2.25k|    int ipv6_works = -1;
  551|       |    /* probe to see if we have a working IPv6 stack */
  552|  2.25k|    curl_socket_t s = socket(PF_INET6, SOCK_DGRAM, 0);
  553|  2.25k|    if(s == CURL_SOCKET_BAD)
  554|       |      /* an IPv6 address was requested but we can't get/use one */
  555|      0|      ipv6_works = 0;
  556|  2.25k|    else {
  557|  2.25k|      ipv6_works = 1;
  558|  2.25k|      sclose(s);
  559|  2.25k|    }
  560|  2.25k|    return (ipv6_works>0)?TRUE:FALSE;
  561|  2.25k|  }
  562|  2.25k|}
Curl_host_is_ipnum:
  570|  7.31k|{
  571|  7.31k|  struct in_addr in;
  572|  7.31k|#ifdef ENABLE_IPV6
  573|  7.31k|  struct in6_addr in6;
  574|  7.31k|#endif
  575|  7.31k|  if(Curl_inet_pton(AF_INET, hostname, &in) > 0
  576|  7.31k|#ifdef ENABLE_IPV6
  577|  7.31k|     || Curl_inet_pton(AF_INET6, hostname, &in6) > 0
  578|  7.31k|#endif
  579|  7.31k|    )
  580|  4.81k|    return TRUE;
  581|  2.50k|  return FALSE;
  582|  7.31k|}
Curl_resolv:
  606|  2.35k|{
  607|  2.35k|  struct Curl_dns_entry *dns = NULL;
  608|  2.35k|  CURLcode result;
  609|  2.35k|  enum resolve_t rc = CURLRESOLV_ERROR; /* default to failure */
  610|  2.35k|  struct connectdata *conn = data->conn;
  611|  2.35k|  *entry = NULL;
  612|  2.35k|  conn->bits.doh = FALSE; /* default is not */
  613|       |
  614|  2.35k|  if(data->share)
  615|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  616|       |
  617|  2.35k|  dns = fetch_addr(data, hostname, port);
  618|       |
  619|  2.35k|  if(dns) {
  620|    234|    infof(data, "Hostname %s was found in DNS cache", hostname);
  621|    234|    dns->inuse++; /* we use it! */
  622|    234|    rc = CURLRESOLV_RESOLVED;
  623|    234|  }
  624|       |
  625|  2.35k|  if(data->share)
  626|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  627|       |
  628|  2.35k|  if(!dns) {
  629|       |    /* The entry was not in the cache. Resolve it to IP address */
  630|       |
  631|  2.12k|    struct Curl_addrinfo *addr = NULL;
  632|  2.12k|    int respwait = 0;
  633|  2.12k|    struct in_addr in;
  634|  2.12k|#ifndef USE_RESOLVE_ON_IPS
  635|  2.12k|    const
  636|  2.12k|#endif
  637|  2.12k|      bool ipnum = FALSE;
  638|       |
  639|       |    /* notify the resolver start callback */
  640|  2.12k|    if(data->set.resolver_start) {
  641|      0|      int st;
  642|      0|      Curl_set_in_callback(data, true);
  643|      0|      st = data->set.resolver_start(
  644|      0|#ifdef USE_CURL_ASYNC
  645|      0|        data->state.async.resolver,
  646|       |#else
  647|       |        NULL,
  648|       |#endif
  649|      0|        NULL,
  650|      0|        data->set.resolver_start_client);
  651|      0|      Curl_set_in_callback(data, false);
  652|      0|      if(st)
  653|      0|        return CURLRESOLV_ERROR;
  654|      0|    }
  655|       |
  656|       |#if defined(ENABLE_IPV6) && defined(CURL_OSX_CALL_COPYPROXIES)
  657|       |    {
  658|       |      /*
  659|       |       * The automagic conversion from IPv4 literals to IPv6 literals only
  660|       |       * works if the SCDynamicStoreCopyProxies system function gets called
  661|       |       * first. As Curl currently doesn't support system-wide HTTP proxies, we
  662|       |       * therefore don't use any value this function might return.
  663|       |       *
  664|       |       * This function is only available on a macOS and is not needed for
  665|       |       * IPv4-only builds, hence the conditions above.
  666|       |       */
  667|       |      CFDictionaryRef dict = SCDynamicStoreCopyProxies(NULL);
  668|       |      if(dict)
  669|       |        CFRelease(dict);
  670|       |    }
  671|       |#endif
  672|       |
  673|  2.12k|#ifndef USE_RESOLVE_ON_IPS
  674|       |    /* First check if this is an IPv4 address string */
  675|  2.12k|    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  676|       |      /* This is a dotted IP address 123.123.123.123-style */
  677|  2.12k|      addr = Curl_ip2addr(AF_INET, &in, hostname, port);
  678|  2.12k|#ifdef ENABLE_IPV6
  679|  2.12k|    if(!addr) {
  680|      0|      struct in6_addr in6;
  681|       |      /* check if this is an IPv6 address string */
  682|      0|      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  683|       |        /* This is an IPv6 address literal */
  684|      0|        addr = Curl_ip2addr(AF_INET6, &in6, hostname, port);
  685|      0|    }
  686|  2.12k|#endif /* ENABLE_IPV6 */
  687|       |
  688|       |#else /* if USE_RESOLVE_ON_IPS */
  689|       |    /* First check if this is an IPv4 address string */
  690|       |    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  691|       |      /* This is a dotted IP address 123.123.123.123-style */
  692|       |      ipnum = TRUE;
  693|       |#ifdef ENABLE_IPV6
  694|       |    else {
  695|       |      struct in6_addr in6;
  696|       |      /* check if this is an IPv6 address string */
  697|       |      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  698|       |        /* This is an IPv6 address literal */
  699|       |        ipnum = TRUE;
  700|       |    }
  701|       |#endif /* ENABLE_IPV6 */
  702|       |
  703|       |#endif /* !USE_RESOLVE_ON_IPS */
  704|       |
  705|  2.12k|    if(!addr) {
  706|      0|      if(conn->ip_version == CURL_IPRESOLVE_V6 && !Curl_ipv6works(data))
  707|      0|        return CURLRESOLV_ERROR;
  708|       |
  709|      0|      if(strcasecompare(hostname, "localhost"))
  710|      0|        addr = get_localhost(port);
  711|      0|      else if(allowDOH && data->set.doh && !ipnum)
  712|      0|        addr = Curl_doh(data, hostname, port, &respwait);
  713|      0|      else {
  714|       |        /* Check what IP specifics the app has requested and if we can provide
  715|       |         * it. If not, bail out. */
  716|      0|        if(!Curl_ipvalid(data, conn))
  717|      0|          return CURLRESOLV_ERROR;
  718|       |        /* If Curl_getaddrinfo() returns NULL, 'respwait' might be set to a
  719|       |           non-zero value indicating that we need to wait for the response to
  720|       |           the resolve call */
  721|      0|        addr = Curl_getaddrinfo(data, hostname, port, &respwait);
  722|      0|      }
  723|      0|    }
  724|  2.12k|    if(!addr) {
  725|      0|      if(respwait) {
  726|       |        /* the response to our resolve call will come asynchronously at
  727|       |           a later time, good or bad */
  728|       |        /* First, check that we haven't received the info by now */
  729|      0|        result = Curl_resolv_check(data, &dns);
  730|      0|        if(result) /* error detected */
  731|      0|          return CURLRESOLV_ERROR;
  732|      0|        if(dns)
  733|      0|          rc = CURLRESOLV_RESOLVED; /* pointer provided */
  734|      0|        else
  735|      0|          rc = CURLRESOLV_PENDING; /* no info yet */
  736|      0|      }
  737|      0|    }
  738|  2.12k|    else {
  739|  2.12k|      if(data->share)
  740|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  741|       |
  742|       |      /* we got a response, store it in the cache */
  743|  2.12k|      dns = Curl_cache_addr(data, addr, hostname, port);
  744|       |
  745|  2.12k|      if(data->share)
  746|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  747|       |
  748|  2.12k|      if(!dns)
  749|       |        /* returned failure, bail out nicely */
  750|      0|        Curl_freeaddrinfo(addr);
  751|  2.12k|      else
  752|  2.12k|        rc = CURLRESOLV_RESOLVED;
  753|  2.12k|    }
  754|  2.12k|  }
  755|       |
  756|  2.35k|  *entry = dns;
  757|       |
  758|  2.35k|  return rc;
  759|  2.35k|}
Curl_resolv_timeout:
  803|  2.35k|{
  804|       |#ifdef USE_ALARM_TIMEOUT
  805|       |#ifdef HAVE_SIGACTION
  806|       |  struct sigaction keep_sigact;   /* store the old struct here */
  807|       |  volatile bool keep_copysig = FALSE; /* whether old sigact has been saved */
  808|       |  struct sigaction sigact;
  809|       |#else
  810|       |#ifdef HAVE_SIGNAL
  811|       |  void (*keep_sigact)(int);       /* store the old handler here */
  812|       |#endif /* HAVE_SIGNAL */
  813|       |#endif /* HAVE_SIGACTION */
  814|       |  volatile long timeout;
  815|       |  volatile unsigned int prev_alarm = 0;
  816|       |#endif /* USE_ALARM_TIMEOUT */
  817|  2.35k|  enum resolve_t rc;
  818|       |
  819|  2.35k|  *entry = NULL;
  820|       |
  821|  2.35k|  if(timeoutms < 0)
  822|       |    /* got an already expired timeout */
  823|      0|    return CURLRESOLV_TIMEDOUT;
  824|       |
  825|       |#ifdef USE_ALARM_TIMEOUT
  826|       |  if(data->set.no_signal)
  827|       |    /* Ignore the timeout when signals are disabled */
  828|       |    timeout = 0;
  829|       |  else
  830|       |    timeout = (timeoutms > LONG_MAX) ? LONG_MAX : (long)timeoutms;
  831|       |
  832|       |  if(!timeout)
  833|       |    /* USE_ALARM_TIMEOUT defined, but no timeout actually requested */
  834|       |    return Curl_resolv(data, hostname, port, TRUE, entry);
  835|       |
  836|       |  if(timeout < 1000) {
  837|       |    /* The alarm() function only provides integer second resolution, so if
  838|       |       we want to wait less than one second we must bail out already now. */
  839|       |    failf(data,
  840|       |        "remaining timeout of %ld too small to resolve via SIGALRM method",
  841|       |        timeout);
  842|       |    return CURLRESOLV_TIMEDOUT;
  843|       |  }
  844|       |  /* This allows us to time-out from the name resolver, as the timeout
  845|       |     will generate a signal and we will siglongjmp() from that here.
  846|       |     This technique has problems (see alarmfunc).
  847|       |     This should be the last thing we do before calling Curl_resolv(),
  848|       |     as otherwise we'd have to worry about variables that get modified
  849|       |     before we invoke Curl_resolv() (and thus use "volatile"). */
  850|       |  if(sigsetjmp(curl_jmpenv, 1)) {
  851|       |    /* this is coming from a siglongjmp() after an alarm signal */
  852|       |    failf(data, "name lookup timed out");
  853|       |    rc = CURLRESOLV_ERROR;
  854|       |    goto clean_up;
  855|       |  }
  856|       |  else {
  857|       |    /*************************************************************
  858|       |     * Set signal handler to catch SIGALRM
  859|       |     * Store the old value to be able to set it back later!
  860|       |     *************************************************************/
  861|       |#ifdef HAVE_SIGACTION
  862|       |    sigaction(SIGALRM, NULL, &sigact);
  863|       |    keep_sigact = sigact;
  864|       |    keep_copysig = TRUE; /* yes, we have a copy */
  865|       |    sigact.sa_handler = alarmfunc;
  866|       |#ifdef SA_RESTART
  867|       |    /* HPUX doesn't have SA_RESTART but defaults to that behavior! */
  868|       |    sigact.sa_flags &= ~SA_RESTART;
  869|       |#endif
  870|       |    /* now set the new struct */
  871|       |    sigaction(SIGALRM, &sigact, NULL);
  872|       |#else /* HAVE_SIGACTION */
  873|       |    /* no sigaction(), revert to the much lamer signal() */
  874|       |#ifdef HAVE_SIGNAL
  875|       |    keep_sigact = signal(SIGALRM, alarmfunc);
  876|       |#endif
  877|       |#endif /* HAVE_SIGACTION */
  878|       |
  879|       |    /* alarm() makes a signal get sent when the timeout fires off, and that
  880|       |       will abort system calls */
  881|       |    prev_alarm = alarm(curlx_sltoui(timeout/1000L));
  882|       |  }
  883|       |
  884|       |#else
  885|       |#ifndef CURLRES_ASYNCH
  886|       |  if(timeoutms)
  887|       |    infof(data, "timeout on name lookup is not supported");
  888|       |#else
  889|  2.35k|  (void)timeoutms; /* timeoutms not used with an async resolver */
  890|  2.35k|#endif
  891|  2.35k|#endif /* USE_ALARM_TIMEOUT */
  892|       |
  893|       |  /* Perform the actual name resolution. This might be interrupted by an
  894|       |   * alarm if it takes too long.
  895|       |   */
  896|  2.35k|  rc = Curl_resolv(data, hostname, port, TRUE, entry);
  897|       |
  898|       |#ifdef USE_ALARM_TIMEOUT
  899|       |clean_up:
  900|       |
  901|       |  if(!prev_alarm)
  902|       |    /* deactivate a possibly active alarm before uninstalling the handler */
  903|       |    alarm(0);
  904|       |
  905|       |#ifdef HAVE_SIGACTION
  906|       |  if(keep_copysig) {
  907|       |    /* we got a struct as it looked before, now put that one back nice
  908|       |       and clean */
  909|       |    sigaction(SIGALRM, &keep_sigact, NULL); /* put it back */
  910|       |  }
  911|       |#else
  912|       |#ifdef HAVE_SIGNAL
  913|       |  /* restore the previous SIGALRM handler */
  914|       |  signal(SIGALRM, keep_sigact);
  915|       |#endif
  916|       |#endif /* HAVE_SIGACTION */
  917|       |
  918|       |  /* switch back the alarm() to either zero or to what it was before minus
  919|       |     the time we spent until now! */
  920|       |  if(prev_alarm) {
  921|       |    /* there was an alarm() set before us, now put it back */
  922|       |    timediff_t elapsed_secs = Curl_timediff(Curl_now(),
  923|       |                                            data->conn->created) / 1000;
  924|       |
  925|       |    /* the alarm period is counted in even number of seconds */
  926|       |    unsigned long alarm_set = (unsigned long)(prev_alarm - elapsed_secs);
  927|       |
  928|       |    if(!alarm_set ||
  929|       |       ((alarm_set >= 0x80000000) && (prev_alarm < 0x80000000)) ) {
  930|       |      /* if the alarm time-left reached zero or turned "negative" (counted
  931|       |         with unsigned values), we should fire off a SIGALRM here, but we
  932|       |         won't, and zero would be to switch it off so we never set it to
  933|       |         less than 1! */
  934|       |      alarm(1);
  935|       |      rc = CURLRESOLV_TIMEDOUT;
  936|       |      failf(data, "Previous alarm fired off!");
  937|       |    }
  938|       |    else
  939|       |      alarm((unsigned int)alarm_set);
  940|       |  }
  941|       |#endif /* USE_ALARM_TIMEOUT */
  942|       |
  943|  2.35k|  return rc;
  944|  2.35k|}
Curl_resolv_unlock:
  954|  2.35k|{
  955|  2.35k|  if(data && data->share)
  956|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  957|       |
  958|  2.35k|  freednsentry(dns);
  959|       |
  960|  2.35k|  if(data && data->share)
  961|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  962|  2.35k|}
Curl_mk_dnscache:
  983|  2.25k|{
  984|  2.25k|  return Curl_hash_init(hash, 7, Curl_hash_str, Curl_str_key_compare,
  985|  2.25k|                        freednsentry);
  986|  2.25k|}
Curl_hostcache_clean:
  997|  2.25k|{
  998|  2.25k|  if(data && data->share)
  999|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 1000|       |
 1001|  2.25k|  Curl_hash_clean(hash);
 1002|       |
 1003|  2.25k|  if(data && data->share)
 1004|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 1005|  2.25k|}
hostip.c:hostcache_prune:
  214|  2.30k|{
  215|  2.30k|  struct hostcache_prune_data user;
  216|       |
  217|  2.30k|  user.cache_timeout = cache_timeout;
  218|  2.30k|  user.now = now;
  219|       |
  220|  2.30k|  Curl_hash_clean_with_criterium(hostcache,
  221|  2.30k|                                 (void *) &user,
  222|  2.30k|                                 hostcache_timestamp_remove);
  223|  2.30k|}
hostip.c:hostcache_timestamp_remove:
  200|  2.55k|{
  201|  2.55k|  struct hostcache_prune_data *data =
  202|  2.55k|    (struct hostcache_prune_data *) datap;
  203|  2.55k|  struct Curl_dns_entry *c = (struct Curl_dns_entry *) hc;
  204|       |
  205|  2.55k|  return (0 != c->timestamp)
  206|  2.55k|    && (data->now - c->timestamp >= data->cache_timeout);
  207|  2.55k|}
hostip.c:fetch_addr:
  263|  2.35k|{
  264|  2.35k|  struct Curl_dns_entry *dns = NULL;
  265|  2.35k|  size_t entry_len;
  266|  2.35k|  char entry_id[MAX_HOSTCACHE_LEN];
  267|       |
  268|       |  /* Create an entry id, based upon the hostname and port */
  269|  2.35k|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  270|  2.35k|  entry_len = strlen(entry_id);
  271|       |
  272|       |  /* See if its already in our dns cache */
  273|  2.35k|  dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  274|       |
  275|       |  /* No entry found in cache, check if we might have a wildcard entry */
  276|  2.35k|  if(!dns && data->state.wildcard_resolve) {
  277|      0|    create_hostcache_id("*", port, entry_id, sizeof(entry_id));
  278|      0|    entry_len = strlen(entry_id);
  279|       |
  280|       |    /* See if it's already in our dns cache */
  281|      0|    dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  282|      0|  }
  283|       |
  284|  2.35k|  if(dns && (data->set.dns_cache_timeout != -1)) {
  285|       |    /* See whether the returned entry is stale. Done before we release lock */
  286|    234|    struct hostcache_prune_data user;
  287|       |
  288|    234|    time(&user.now);
  289|    234|    user.cache_timeout = data->set.dns_cache_timeout;
  290|       |
  291|    234|    if(hostcache_timestamp_remove(&user, dns)) {
  292|      0|      infof(data, "Hostname in DNS cache was stale, zapped");
  293|      0|      dns = NULL; /* the memory deallocation is being handled by the hash */
  294|      0|      Curl_hash_delete(data->dns.hostcache, entry_id, entry_len + 1);
  295|      0|    }
  296|    234|  }
  297|       |
  298|  2.35k|  return dns;
  299|  2.35k|}
hostip.c:create_hostcache_id:
  176|  4.48k|{
  177|  4.48k|  size_t len = strlen(name);
  178|  4.48k|  if(len > (buflen - 7))
  179|      0|    len = buflen - 7;
  180|       |  /* store and lower case the name */
  181|  53.7k|  while(len--)
  182|  49.3k|    *ptr++ = (char)TOLOWER(*name++);
  183|  4.48k|  msnprintf(ptr, 7, ":%u", port);
  184|  4.48k|}
hostip.c:freednsentry:
  968|  4.48k|{
  969|  4.48k|  struct Curl_dns_entry *dns = (struct Curl_dns_entry *) freethis;
  970|  4.48k|  DEBUGASSERT(dns && (dns->inuse>0));
  971|       |
  972|  4.48k|  dns->inuse--;
  973|  4.48k|  if(dns->inuse == 0) {
  974|  2.12k|    Curl_freeaddrinfo(dns->addr);
  975|  2.12k|    free(dns);
  976|  2.12k|  }
  977|  4.48k|}

Curl_hsts_cleanup:
   90|  4.57k|{
   91|  4.57k|  struct hsts *h = *hp;
   92|  4.57k|  if(h) {
   93|      0|    struct Curl_llist_element *e;
   94|      0|    struct Curl_llist_element *n;
   95|      0|    for(e = h->list.head; e; e = n) {
   96|      0|      struct stsentry *sts = e->ptr;
   97|      0|      n = e->next;
   98|      0|      hsts_free(sts);
   99|      0|    }
  100|      0|    free(h->filename);
  101|      0|    free(h);
  102|      0|    *hp = NULL;
  103|      0|  }
  104|  4.57k|}
Curl_hsts_save:
  332|  4.57k|{
  333|  4.57k|  struct Curl_llist_element *e;
  334|  4.57k|  struct Curl_llist_element *n;
  335|  4.57k|  CURLcode result = CURLE_OK;
  336|  4.57k|  FILE *out;
  337|  4.57k|  char *tempstore;
  338|  4.57k|  unsigned char randsuffix[9];
  339|       |
  340|  4.57k|  if(!h)
  341|       |    /* no cache activated */
  342|  4.57k|    return CURLE_OK;
  343|       |
  344|       |  /* if no new name is given, use the one we stored from the load */
  345|      0|  if(!file && h->filename)
  346|      0|    file = h->filename;
  347|       |
  348|      0|  if((h->flags & CURLHSTS_READONLYFILE) || !file || !file[0])
  349|       |    /* marked as read-only, no file or zero length file name */
  350|      0|    goto skipsave;
  351|       |
  352|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  353|      0|    return CURLE_FAILED_INIT;
  354|       |
  355|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  356|      0|  if(!tempstore)
  357|      0|    return CURLE_OUT_OF_MEMORY;
  358|       |
  359|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  360|      0|  if(!out)
  361|      0|    result = CURLE_WRITE_ERROR;
  362|      0|  else {
  363|      0|    fputs("# Your HSTS cache. https://curl.se/docs/hsts.html\n"
  364|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  365|      0|          out);
  366|      0|    for(e = h->list.head; e; e = n) {
  367|      0|      struct stsentry *sts = e->ptr;
  368|      0|      n = e->next;
  369|      0|      result = hsts_out(sts, out);
  370|      0|      if(result)
  371|      0|        break;
  372|      0|    }
  373|      0|    fclose(out);
  374|      0|    if(!result && Curl_rename(tempstore, file))
  375|      0|      result = CURLE_WRITE_ERROR;
  376|       |
  377|      0|    if(result)
  378|      0|      unlink(tempstore);
  379|      0|  }
  380|      0|  free(tempstore);
  381|      0|  skipsave:
  382|      0|  if(data->set.hsts_write) {
  383|       |    /* if there's a write callback */
  384|      0|    struct curl_index i; /* count */
  385|      0|    i.total = h->list.size;
  386|      0|    i.index = 0;
  387|      0|    for(e = h->list.head; e; e = n) {
  388|      0|      struct stsentry *sts = e->ptr;
  389|      0|      bool stop;
  390|      0|      n = e->next;
  391|      0|      result = hsts_push(data, &i, sts, &stop);
  392|      0|      if(result || stop)
  393|      0|        break;
  394|      0|      i.index++;
  395|      0|    }
  396|      0|  }
  397|      0|  return result;
  398|      0|}
Curl_hsts_loadcb:
  538|  2.18k|{
  539|  2.18k|  if(h)
  540|      0|    return hsts_pull(data, h);
  541|  2.18k|  return CURLE_OK;
  542|  2.18k|}

Curl_copy_header_value:
  246|  1.62k|{
  247|  1.62k|  const char *start;
  248|  1.62k|  const char *end;
  249|  1.62k|  char *value;
  250|  1.62k|  size_t len;
  251|       |
  252|       |  /* Find the end of the header name */
  253|  20.4k|  while(*header && (*header != ':'))
  254|  18.8k|    ++header;
  255|       |
  256|  1.62k|  if(*header)
  257|       |    /* Skip over colon */
  258|  1.62k|    ++header;
  259|       |
  260|       |  /* Find the first non-space letter */
  261|  1.62k|  start = header;
  262|  3.24k|  while(*start && ISSPACE(*start))
  263|  1.61k|    start++;
  264|       |
  265|       |  /* data is in the host encoding so
  266|       |     use '\r' and '\n' instead of 0x0d and 0x0a */
  267|  1.62k|  end = strchr(start, '\r');
  268|  1.62k|  if(!end)
  269|    320|    end = strchr(start, '\n');
  270|  1.62k|  if(!end)
  271|    246|    end = strchr(start, '\0');
  272|  1.62k|  if(!end)
  273|      0|    return NULL;
  274|       |
  275|       |  /* skip all trailing space letters */
  276|  3.06k|  while((end > start) && ISSPACE(*end))
  277|  1.43k|    end--;
  278|       |
  279|       |  /* get length of the type */
  280|  1.62k|  len = end - start + 1;
  281|       |
  282|  1.62k|  value = malloc(len + 1);
  283|  1.62k|  if(!value)
  284|      0|    return NULL;
  285|       |
  286|  1.62k|  memcpy(value, start, len);
  287|  1.62k|  value[len] = 0; /* null-terminate */
  288|       |
  289|  1.62k|  return value;
  290|  1.62k|}
Curl_http_auth_act:
  574|    624|{
  575|    624|  struct connectdata *conn = data->conn;
  576|    624|  bool pickhost = FALSE;
  577|    624|  bool pickproxy = FALSE;
  578|    624|  CURLcode result = CURLE_OK;
  579|    624|  unsigned long authmask = ~0ul;
  580|       |
  581|    624|  if(!data->set.str[STRING_BEARER])
  582|    624|    authmask &= (unsigned long)~CURLAUTH_BEARER;
  583|       |
  584|    624|  if(100 <= data->req.httpcode && 199 >= data->req.httpcode)
  585|       |    /* this is a transient response code, ignore */
  586|     23|    return CURLE_OK;
  587|       |
  588|    601|  if(data->state.authproblem)
  589|     14|    return data->set.http_fail_on_error?CURLE_HTTP_RETURNED_ERROR:CURLE_OK;
  590|       |
  591|    587|  if((conn->bits.user_passwd || data->set.str[STRING_BEARER]) &&
  592|    587|     ((data->req.httpcode == 401) ||
  593|     80|      (conn->bits.authneg && data->req.httpcode < 300))) {
  594|     62|    pickhost = pickoneauth(&data->state.authhost, authmask);
  595|     62|    if(!pickhost)
  596|      6|      data->state.authproblem = TRUE;
  597|     62|    if(data->state.authhost.picked == CURLAUTH_NTLM &&
  598|     62|       conn->httpversion > 11) {
  599|      0|      infof(data, "Forcing HTTP/1.1 for NTLM");
  600|      0|      connclose(conn, "Force HTTP/1.1 connection");
  601|      0|      data->state.httpwant = CURL_HTTP_VERSION_1_1;
  602|      0|    }
  603|     62|  }
  604|    587|#ifndef CURL_DISABLE_PROXY
  605|    587|  if(conn->bits.proxy_user_passwd &&
  606|    587|     ((data->req.httpcode == 407) ||
  607|      0|      (conn->bits.authneg && data->req.httpcode < 300))) {
  608|      0|    pickproxy = pickoneauth(&data->state.authproxy,
  609|      0|                            authmask & ~CURLAUTH_BEARER);
  610|      0|    if(!pickproxy)
  611|      0|      data->state.authproblem = TRUE;
  612|      0|  }
  613|    587|#endif
  614|       |
  615|    587|  if(pickhost || pickproxy) {
  616|     56|    if((data->state.httpreq != HTTPREQ_GET) &&
  617|     56|       (data->state.httpreq != HTTPREQ_HEAD) &&
  618|     56|       !conn->bits.rewindaftersend) {
  619|     29|      result = http_perhapsrewind(data, conn);
  620|     29|      if(result)
  621|      0|        return result;
  622|     29|    }
  623|       |    /* In case this is GSS auth, the newurl field is already allocated so
  624|       |       we must make sure to free it before allocating a new one. As figured
  625|       |       out in bug #2284386 */
  626|     56|    Curl_safefree(data->req.newurl);
  627|     56|    data->req.newurl = strdup(data->state.url); /* clone URL */
  628|     56|    if(!data->req.newurl)
  629|      0|      return CURLE_OUT_OF_MEMORY;
  630|     56|  }
  631|    531|  else if((data->req.httpcode < 300) &&
  632|    531|          (!data->state.authhost.done) &&
  633|    531|          conn->bits.authneg) {
  634|       |    /* no (known) authentication available,
  635|       |       authentication is not "done" yet and
  636|       |       no authentication seems to be required and
  637|       |       we didn't try HEAD or GET */
  638|      1|    if((data->state.httpreq != HTTPREQ_GET) &&
  639|      1|       (data->state.httpreq != HTTPREQ_HEAD)) {
  640|      1|      data->req.newurl = strdup(data->state.url); /* clone URL */
  641|      1|      if(!data->req.newurl)
  642|      0|        return CURLE_OUT_OF_MEMORY;
  643|      1|      data->state.authhost.done = TRUE;
  644|      1|    }
  645|      1|  }
  646|    587|  if(http_should_fail(data)) {
  647|      0|    failf(data, "The requested URL returned error: %d",
  648|      0|          data->req.httpcode);
  649|      0|    result = CURLE_HTTP_RETURNED_ERROR;
  650|      0|  }
  651|       |
  652|    587|  return result;
  653|    587|}
Curl_http_output_auth:
  800|  2.30k|{
  801|  2.30k|  CURLcode result = CURLE_OK;
  802|  2.30k|  struct auth *authhost;
  803|  2.30k|  struct auth *authproxy;
  804|       |
  805|  2.30k|  DEBUGASSERT(data);
  806|       |
  807|  2.30k|  authhost = &data->state.authhost;
  808|  2.30k|  authproxy = &data->state.authproxy;
  809|       |
  810|  2.30k|  if(
  811|  2.30k|#ifndef CURL_DISABLE_PROXY
  812|  2.30k|    (conn->bits.httpproxy && conn->bits.proxy_user_passwd) ||
  813|  2.30k|#endif
  814|  2.30k|     conn->bits.user_passwd || data->set.str[STRING_BEARER])
  815|    349|    /* continue please */;
  816|  1.96k|  else {
  817|  1.96k|    authhost->done = TRUE;
  818|  1.96k|    authproxy->done = TRUE;
  819|  1.96k|    return CURLE_OK; /* no authentication with no user or password */
  820|  1.96k|  }
  821|       |
  822|    349|  if(authhost->want && !authhost->picked)
  823|       |    /* The app has selected one or more methods, but none has been picked
  824|       |       so far by a server round-trip. Then we set the picked one to the
  825|       |       want one, and if this is one single bit it'll be used instantly. */
  826|    282|    authhost->picked = authhost->want;
  827|       |
  828|    349|  if(authproxy->want && !authproxy->picked)
  829|       |    /* The app has selected one or more methods, but none has been picked so
  830|       |       far by a proxy round-trip. Then we set the picked one to the want one,
  831|       |       and if this is one single bit it'll be used instantly. */
  832|    283|    authproxy->picked = authproxy->want;
  833|       |
  834|    349|#ifndef CURL_DISABLE_PROXY
  835|       |  /* Send proxy authentication header if needed */
  836|    349|  if(conn->bits.httpproxy &&
  837|    349|     (conn->bits.tunnel_proxy == (bit)proxytunnel)) {
  838|      0|    result = output_auth_headers(data, conn, authproxy, request, path, TRUE);
  839|      0|    if(result)
  840|      0|      return result;
  841|      0|  }
  842|    349|  else
  843|       |#else
  844|       |  (void)proxytunnel;
  845|       |#endif /* CURL_DISABLE_PROXY */
  846|       |    /* we have no proxy so let's pretend we're done authenticating
  847|       |       with it */
  848|    349|    authproxy->done = TRUE;
  849|       |
  850|       |  /* To prevent the user+password to get sent to other than the original
  851|       |     host due to a location-follow, we do some weirdo checks here */
  852|    349|  if(!data->state.this_is_a_follow ||
  853|    349|#ifndef CURL_DISABLE_NETRC
  854|    349|     conn->bits.netrc ||
  855|    349|#endif
  856|    349|     !data->state.first_host ||
  857|    349|     data->set.allow_auth_to_other_hosts ||
  858|    349|     strcasecompare(data->state.first_host, conn->host.name)) {
  859|    348|    result = output_auth_headers(data, conn, authhost, request, path, FALSE);
  860|    348|  }
  861|      1|  else
  862|      1|    authhost->done = TRUE;
  863|       |
  864|    349|  if(((authhost->multipass && !authhost->done) ||
  865|    349|      (authproxy->multipass && !authproxy->done)) &&
  866|    349|     (httpreq != HTTPREQ_GET) &&
  867|    349|     (httpreq != HTTPREQ_HEAD)) {
  868|       |    /* Auth is required and we are not authenticated yet. Make a PUT or POST
  869|       |       with content-length zero as a "probe". */
  870|     16|    conn->bits.authneg = TRUE;
  871|     16|  }
  872|    333|  else
  873|    333|    conn->bits.authneg = FALSE;
  874|       |
  875|    349|  return result;
  876|    349|}
Curl_http_input_auth:
  911|    162|{
  912|       |  /*
  913|       |   * This resource requires authentication
  914|       |   */
  915|    162|  struct connectdata *conn = data->conn;
  916|       |#ifdef USE_SPNEGO
  917|       |  curlnegotiate *negstate = proxy ? &conn->proxy_negotiate_state :
  918|       |                                    &conn->http_negotiate_state;
  919|       |#endif
  920|    162|  unsigned long *availp;
  921|    162|  struct auth *authp;
  922|       |
  923|    162|  (void) conn; /* In case conditionals make it unused. */
  924|       |
  925|    162|  if(proxy) {
  926|      0|    availp = &data->info.proxyauthavail;
  927|      0|    authp = &data->state.authproxy;
  928|      0|  }
  929|    162|  else {
  930|    162|    availp = &data->info.httpauthavail;
  931|    162|    authp = &data->state.authhost;
  932|    162|  }
  933|       |
  934|       |  /*
  935|       |   * Here we check if we want the specific single authentication (using ==) and
  936|       |   * if we do, we initiate usage of it.
  937|       |   *
  938|       |   * If the provided authentication is wanted as one out of several accepted
  939|       |   * types (using &), we OR this authentication type to the authavail
  940|       |   * variable.
  941|       |   *
  942|       |   * Note:
  943|       |   *
  944|       |   * ->picked is first set to the 'want' value (one or more bits) before the
  945|       |   * request is sent, and then it is again set _after_ all response 401/407
  946|       |   * headers have been received but then only to a single preferred method
  947|       |   * (bit).
  948|       |   */
  949|       |
  950|    595|  while(*auth) {
  951|       |#ifdef USE_SPNEGO
  952|       |    if(checkprefix("Negotiate", auth) && is_valid_auth_separator(auth[9])) {
  953|       |      if((authp->avail & CURLAUTH_NEGOTIATE) ||
  954|       |         Curl_auth_is_spnego_supported()) {
  955|       |        *availp |= CURLAUTH_NEGOTIATE;
  956|       |        authp->avail |= CURLAUTH_NEGOTIATE;
  957|       |
  958|       |        if(authp->picked == CURLAUTH_NEGOTIATE) {
  959|       |          CURLcode result = Curl_input_negotiate(data, conn, proxy, auth);
  960|       |          if(!result) {
  961|       |            DEBUGASSERT(!data->req.newurl);
  962|       |            data->req.newurl = strdup(data->state.url);
  963|       |            if(!data->req.newurl)
  964|       |              return CURLE_OUT_OF_MEMORY;
  965|       |            data->state.authproblem = FALSE;
  966|       |            /* we received a GSS auth token and we dealt with it fine */
  967|       |            *negstate = GSS_AUTHRECV;
  968|       |          }
  969|       |          else
  970|       |            data->state.authproblem = TRUE;
  971|       |        }
  972|       |      }
  973|       |    }
  974|       |    else
  975|       |#endif
  976|    433|#ifdef USE_NTLM
  977|       |      /* NTLM support requires the SSL crypto libs */
  978|    433|      if(checkprefix("NTLM", auth) && is_valid_auth_separator(auth[4])) {
  979|      0|        if((authp->avail & CURLAUTH_NTLM) ||
  980|      0|           (authp->avail & CURLAUTH_NTLM_WB) ||
  981|      0|           Curl_auth_is_ntlm_supported()) {
  982|      0|          *availp |= CURLAUTH_NTLM;
  983|      0|          authp->avail |= CURLAUTH_NTLM;
  984|       |
  985|      0|          if(authp->picked == CURLAUTH_NTLM ||
  986|      0|             authp->picked == CURLAUTH_NTLM_WB) {
  987|       |            /* NTLM authentication is picked and activated */
  988|      0|            CURLcode result = Curl_input_ntlm(data, proxy, auth);
  989|      0|            if(!result) {
  990|      0|              data->state.authproblem = FALSE;
  991|      0|#ifdef NTLM_WB_ENABLED
  992|      0|              if(authp->picked == CURLAUTH_NTLM_WB) {
  993|      0|                *availp &= ~CURLAUTH_NTLM;
  994|      0|                authp->avail &= ~CURLAUTH_NTLM;
  995|      0|                *availp |= CURLAUTH_NTLM_WB;
  996|      0|                authp->avail |= CURLAUTH_NTLM_WB;
  997|       |
  998|      0|                result = Curl_input_ntlm_wb(data, conn, proxy, auth);
  999|      0|                if(result) {
 1000|      0|                  infof(data, "Authentication problem. Ignoring this.");
 1001|      0|                  data->state.authproblem = TRUE;
 1002|      0|                }
 1003|      0|              }
 1004|      0|#endif
 1005|      0|            }
 1006|      0|            else {
 1007|      0|              infof(data, "Authentication problem. Ignoring this.");
 1008|      0|              data->state.authproblem = TRUE;
 1009|      0|            }
 1010|      0|          }
 1011|      0|        }
 1012|      0|      }
 1013|    433|      else
 1014|    433|#endif
 1015|    433|#ifndef CURL_DISABLE_CRYPTO_AUTH
 1016|    433|        if(checkprefix("Digest", auth) && is_valid_auth_separator(auth[6])) {
 1017|    135|          if((authp->avail & CURLAUTH_DIGEST) != 0)
 1018|     17|            infof(data, "Ignoring duplicate digest auth header.");
 1019|    118|          else if(Curl_auth_is_digest_supported()) {
 1020|    118|            CURLcode result;
 1021|       |
 1022|    118|            *availp |= CURLAUTH_DIGEST;
 1023|    118|            authp->avail |= CURLAUTH_DIGEST;
 1024|       |
 1025|       |            /* We call this function on input Digest headers even if Digest
 1026|       |             * authentication isn't activated yet, as we need to store the
 1027|       |             * incoming data from this header in case we are going to use
 1028|       |             * Digest */
 1029|    118|            result = Curl_input_digest(data, proxy, auth);
 1030|    118|            if(result) {
 1031|     52|              infof(data, "Authentication problem. Ignoring this.");
 1032|     52|              data->state.authproblem = TRUE;
 1033|     52|            }
 1034|    118|          }
 1035|    135|        }
 1036|    298|        else
 1037|    298|#endif
 1038|    298|          if(checkprefix("Basic", auth) &&
 1039|    298|             is_valid_auth_separator(auth[5])) {
 1040|      0|            *availp |= CURLAUTH_BASIC;
 1041|      0|            authp->avail |= CURLAUTH_BASIC;
 1042|      0|            if(authp->picked == CURLAUTH_BASIC) {
 1043|       |              /* We asked for Basic authentication but got a 40X back
 1044|       |                 anyway, which basically means our name+password isn't
 1045|       |                 valid. */
 1046|      0|              authp->avail = CURLAUTH_NONE;
 1047|      0|              infof(data, "Authentication problem. Ignoring this.");
 1048|      0|              data->state.authproblem = TRUE;
 1049|      0|            }
 1050|      0|          }
 1051|    298|          else
 1052|    298|            if(checkprefix("Bearer", auth) &&
 1053|    298|               is_valid_auth_separator(auth[6])) {
 1054|      0|              *availp |= CURLAUTH_BEARER;
 1055|      0|              authp->avail |= CURLAUTH_BEARER;
 1056|      0|              if(authp->picked == CURLAUTH_BEARER) {
 1057|       |                /* We asked for Bearer authentication but got a 40X back
 1058|       |                  anyway, which basically means our token isn't valid. */
 1059|      0|                authp->avail = CURLAUTH_NONE;
 1060|      0|                infof(data, "Authentication problem. Ignoring this.");
 1061|      0|                data->state.authproblem = TRUE;
 1062|      0|              }
 1063|      0|            }
 1064|       |
 1065|       |    /* there may be multiple methods on one line, so keep reading */
 1066|  9.12k|    while(*auth && *auth != ',') /* read up to the next comma */
 1067|  8.69k|      auth++;
 1068|    433|    if(*auth == ',') /* if we're on a comma, skip it */
 1069|    286|      auth++;
 1070|    843|    while(*auth && ISSPACE(*auth))
 1071|    410|      auth++;
 1072|    433|  }
 1073|       |
 1074|    162|  return CURLE_OK;
 1075|    162|}
Curl_buffer_send:
 1229|  2.29k|{
 1230|  2.29k|  ssize_t amount;
 1231|  2.29k|  CURLcode result;
 1232|  2.29k|  char *ptr;
 1233|  2.29k|  size_t size;
 1234|  2.29k|  struct connectdata *conn = data->conn;
 1235|  2.29k|  struct HTTP *http = data->req.p.http;
 1236|  2.29k|  size_t sendsize;
 1237|  2.29k|  curl_socket_t sockfd;
 1238|  2.29k|  size_t headersize;
 1239|       |
 1240|  2.29k|  DEBUGASSERT(socketindex <= SECONDARYSOCKET);
 1241|       |
 1242|  2.29k|  sockfd = conn->sock[socketindex];
 1243|       |
 1244|       |  /* The looping below is required since we use non-blocking sockets, but due
 1245|       |     to the circumstances we will just loop and try again and again etc */
 1246|       |
 1247|  2.29k|  ptr = Curl_dyn_ptr(in);
 1248|  2.29k|  size = Curl_dyn_len(in);
 1249|       |
 1250|  2.29k|  headersize = size - (size_t)included_body_bytes; /* the initial part that
 1251|       |                                                      isn't body is header */
 1252|       |
 1253|  2.29k|  DEBUGASSERT(size > (size_t)included_body_bytes);
 1254|       |
 1255|  2.29k|  result = Curl_convert_to_network(data, ptr, headersize);
 1256|       |  /* Curl_convert_to_network calls failf if unsuccessful */
 1257|  2.29k|  if(result) {
 1258|       |    /* conversion failed, free memory and return to the caller */
 1259|      0|    Curl_dyn_free(in);
 1260|      0|    return result;
 1261|      0|  }
 1262|       |
 1263|  2.29k|  if((conn->handler->flags & PROTOPT_SSL
 1264|  2.29k|#ifndef CURL_DISABLE_PROXY
 1265|  2.29k|      || conn->http_proxy.proxytype == CURLPROXY_HTTPS
 1266|  2.29k|#endif
 1267|  2.29k|       )
 1268|  2.29k|     && conn->httpversion != 20) {
 1269|       |    /* Make sure this doesn't send more body bytes than what the max send
 1270|       |       speed says. The request bytes do not count to the max speed.
 1271|       |    */
 1272|      0|    if(data->set.max_send_speed &&
 1273|      0|       (included_body_bytes > data->set.max_send_speed)) {
 1274|      0|      curl_off_t overflow = included_body_bytes - data->set.max_send_speed;
 1275|      0|      DEBUGASSERT((size_t)overflow < size);
 1276|      0|      sendsize = size - (size_t)overflow;
 1277|      0|    }
 1278|      0|    else
 1279|      0|      sendsize = size;
 1280|       |
 1281|       |    /* OpenSSL is very picky and we must send the SAME buffer pointer to the
 1282|       |       library when we attempt to re-send this buffer. Sending the same data
 1283|       |       is not enough, we must use the exact same address. For this reason, we
 1284|       |       must copy the data to the uploadbuffer first, since that is the buffer
 1285|       |       we will be using if this send is retried later.
 1286|       |    */
 1287|      0|    result = Curl_get_upload_buffer(data);
 1288|      0|    if(result) {
 1289|       |      /* malloc failed, free memory and return to the caller */
 1290|      0|      Curl_dyn_free(in);
 1291|      0|      return result;
 1292|      0|    }
 1293|       |    /* We never send more than upload_buffer_size bytes in one single chunk
 1294|       |       when we speak HTTPS, as if only a fraction of it is sent now, this data
 1295|       |       needs to fit into the normal read-callback buffer later on and that
 1296|       |       buffer is using this size.
 1297|       |    */
 1298|      0|    if(sendsize > (size_t)data->set.upload_buffer_size)
 1299|      0|      sendsize = (size_t)data->set.upload_buffer_size;
 1300|       |
 1301|      0|    memcpy(data->state.ulbuf, ptr, sendsize);
 1302|      0|    ptr = data->state.ulbuf;
 1303|      0|  }
 1304|  2.29k|  else {
 1305|  2.29k|#ifdef CURLDEBUG
 1306|       |    /* Allow debug builds to override this logic to force short initial
 1307|       |       sends
 1308|       |     */
 1309|  2.29k|    char *p = getenv("CURL_SMALLREQSEND");
 1310|  2.29k|    if(p) {
 1311|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
 1312|      0|      if(altsize)
 1313|      0|        sendsize = CURLMIN(size, altsize);
 1314|      0|      else
 1315|      0|        sendsize = size;
 1316|      0|    }
 1317|  2.29k|    else
 1318|  2.29k|#endif
 1319|  2.29k|    {
 1320|       |      /* Make sure this doesn't send more body bytes than what the max send
 1321|       |         speed says. The request bytes do not count to the max speed.
 1322|       |      */
 1323|  2.29k|      if(data->set.max_send_speed &&
 1324|  2.29k|         (included_body_bytes > data->set.max_send_speed)) {
 1325|      0|        curl_off_t overflow = included_body_bytes - data->set.max_send_speed;
 1326|      0|        DEBUGASSERT((size_t)overflow < size);
 1327|      0|        sendsize = size - (size_t)overflow;
 1328|      0|      }
 1329|  2.29k|      else
 1330|  2.29k|        sendsize = size;
 1331|  2.29k|    }
 1332|  2.29k|  }
 1333|       |
 1334|  2.29k|  result = Curl_write(data, sockfd, ptr, sendsize, &amount);
 1335|       |
 1336|  2.29k|  if(!result) {
 1337|       |    /*
 1338|       |     * Note that we may not send the entire chunk at once, and we have a set
 1339|       |     * number of data bytes at the end of the big buffer (out of which we may
 1340|       |     * only send away a part).
 1341|       |     */
 1342|       |    /* how much of the header that was sent */
 1343|  2.26k|    size_t headlen = (size_t)amount>headersize ? headersize : (size_t)amount;
 1344|  2.26k|    size_t bodylen = amount - headlen;
 1345|       |
 1346|       |    /* this data _may_ contain binary stuff */
 1347|  2.26k|    Curl_debug(data, CURLINFO_HEADER_OUT, ptr, headlen);
 1348|  2.26k|    if(bodylen)
 1349|       |      /* there was body data sent beyond the initial header part, pass that on
 1350|       |         to the debug callback too */
 1351|     12|      Curl_debug(data, CURLINFO_DATA_OUT, ptr + headlen, bodylen);
 1352|       |
 1353|       |    /* 'amount' can never be a very large value here so typecasting it so a
 1354|       |       signed 31 bit value should not cause problems even if ssize_t is
 1355|       |       64bit */
 1356|  2.26k|    *bytes_written += (long)amount;
 1357|       |
 1358|  2.26k|    if(http) {
 1359|       |      /* if we sent a piece of the body here, up the byte counter for it
 1360|       |         accordingly */
 1361|  2.26k|      data->req.writebytecount += bodylen;
 1362|  2.26k|      Curl_pgrsSetUploadCounter(data, data->req.writebytecount);
 1363|       |
 1364|  2.26k|      if((size_t)amount != size) {
 1365|       |        /* The whole request could not be sent in one system call. We must
 1366|       |           queue it up and send it later when we get the chance. We must not
 1367|       |           loop here and wait until it might work again. */
 1368|       |
 1369|      0|        size -= amount;
 1370|       |
 1371|      0|        ptr = Curl_dyn_ptr(in) + amount;
 1372|       |
 1373|       |        /* backup the currently set pointers */
 1374|      0|        http->backup.fread_func = data->state.fread_func;
 1375|      0|        http->backup.fread_in = data->state.in;
 1376|      0|        http->backup.postdata = http->postdata;
 1377|      0|        http->backup.postsize = http->postsize;
 1378|       |
 1379|       |        /* set the new pointers for the request-sending */
 1380|      0|        data->state.fread_func = (curl_read_callback)readmoredata;
 1381|      0|        data->state.in = (void *)data;
 1382|      0|        http->postdata = ptr;
 1383|      0|        http->postsize = (curl_off_t)size;
 1384|       |
 1385|       |        /* this much data is remaining header: */
 1386|      0|        data->req.pendingheader = headersize - headlen;
 1387|       |
 1388|      0|        http->send_buffer = *in; /* copy the whole struct */
 1389|      0|        http->sending = HTTPSEND_REQUEST;
 1390|       |
 1391|      0|        return CURLE_OK;
 1392|      0|      }
 1393|  2.26k|      http->sending = HTTPSEND_BODY;
 1394|       |      /* the full buffer was sent, clean up and return */
 1395|  2.26k|    }
 1396|      0|    else {
 1397|      0|      if((size_t)amount != size)
 1398|       |        /* We have no continue-send mechanism now, fail. This can only happen
 1399|       |           when this function is used from the CONNECT sending function. We
 1400|       |           currently (stupidly) assume that the whole request is always sent
 1401|       |           away in the first single chunk.
 1402|       |
 1403|       |           This needs FIXing.
 1404|       |        */
 1405|      0|        return CURLE_SEND_ERROR;
 1406|      0|    }
 1407|  2.26k|  }
 1408|  2.29k|  Curl_dyn_free(in);
 1409|       |
 1410|       |  /* no remaining header data */
 1411|  2.29k|  data->req.pendingheader = 0;
 1412|  2.29k|  return result;
 1413|  2.29k|}
Curl_compareheader:
 1432|  17.1k|{
 1433|       |  /* RFC2616, section 4.2 says: "Each header field consists of a name followed
 1434|       |   * by a colon (":") and the field value. Field names are case-insensitive.
 1435|       |   * The field value MAY be preceded by any amount of LWS, though a single SP
 1436|       |   * is preferred." */
 1437|       |
 1438|  17.1k|  size_t hlen = strlen(header);
 1439|  17.1k|  size_t clen;
 1440|  17.1k|  size_t len;
 1441|  17.1k|  const char *start;
 1442|  17.1k|  const char *end;
 1443|       |
 1444|  17.1k|  if(!strncasecompare(headerline, header, hlen))
 1445|  16.4k|    return FALSE; /* doesn't start with header */
 1446|       |
 1447|       |  /* pass the header */
 1448|    763|  start = &headerline[hlen];
 1449|       |
 1450|       |  /* pass all whitespace */
 1451|  1.62k|  while(*start && ISSPACE(*start))
 1452|    866|    start++;
 1453|       |
 1454|       |  /* find the end of the header line */
 1455|    763|  end = strchr(start, '\r'); /* lines end with CRLF */
 1456|    763|  if(!end) {
 1457|       |    /* in case there's a non-standard compliant line here */
 1458|    415|    end = strchr(start, '\n');
 1459|       |
 1460|    415|    if(!end)
 1461|       |      /* hm, there's no line ending here, use the zero byte! */
 1462|    164|      end = strchr(start, '\0');
 1463|    415|  }
 1464|       |
 1465|    763|  len = end-start; /* length of the content part of the input line */
 1466|    763|  clen = strlen(content); /* length of the word to find */
 1467|       |
 1468|       |  /* find the content string in the rest of the line */
 1469|  5.83k|  for(; len >= clen; len--, start++) {
 1470|  5.41k|    if(strncasecompare(start, content, clen))
 1471|    338|      return TRUE; /* match! */
 1472|  5.41k|  }
 1473|       |
 1474|    425|  return FALSE; /* no match */
 1475|    763|}
Curl_http_connect:
 1482|  2.30k|{
 1483|  2.30k|  CURLcode result;
 1484|  2.30k|  struct connectdata *conn = data->conn;
 1485|       |
 1486|       |  /* We default to persistent connections. We set this already in this connect
 1487|       |     function to make the re-use checks properly be able to check this bit. */
 1488|  2.30k|  connkeep(conn, "HTTP default");
 1489|       |
 1490|  2.30k|#ifndef CURL_DISABLE_PROXY
 1491|       |  /* the CONNECT procedure might not have been completed */
 1492|  2.30k|  result = Curl_proxy_connect(data, FIRSTSOCKET);
 1493|  2.30k|  if(result)
 1494|      0|    return result;
 1495|       |
 1496|  2.30k|  if(conn->bits.proxy_connect_closed)
 1497|       |    /* this is not an error, just part of the connection negotiation */
 1498|      0|    return CURLE_OK;
 1499|       |
 1500|  2.30k|  if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1501|      0|    return CURLE_OK; /* wait for HTTPS proxy SSL initialization to complete */
 1502|       |
 1503|  2.30k|  if(Curl_connect_ongoing(conn))
 1504|       |    /* nothing else to do except wait right now - we're not done here. */
 1505|      0|    return CURLE_OK;
 1506|       |
 1507|  2.30k|  if(data->set.haproxyprotocol) {
 1508|       |    /* add HAProxy PROXY protocol header */
 1509|      0|    result = add_haproxy_protocol_header(data);
 1510|      0|    if(result)
 1511|      0|      return result;
 1512|      0|  }
 1513|  2.30k|#endif
 1514|       |
 1515|  2.30k|  if(conn->given->protocol & CURLPROTO_HTTPS) {
 1516|       |    /* perform SSL initialization */
 1517|      0|    result = https_connecting(data, done);
 1518|      0|    if(result)
 1519|      0|      return result;
 1520|      0|  }
 1521|  2.30k|  else
 1522|  2.30k|    *done = TRUE;
 1523|       |
 1524|  2.30k|  return CURLE_OK;
 1525|  2.30k|}
Curl_http_done:
 1616|  2.30k|{
 1617|  2.30k|  struct connectdata *conn = data->conn;
 1618|  2.30k|  struct HTTP *http = data->req.p.http;
 1619|       |
 1620|       |  /* Clear multipass flag. If authentication isn't done yet, then it will get
 1621|       |   * a chance to be set back to true when we output the next auth header */
 1622|  2.30k|  data->state.authhost.multipass = FALSE;
 1623|  2.30k|  data->state.authproxy.multipass = FALSE;
 1624|       |
 1625|  2.30k|  Curl_unencode_cleanup(data);
 1626|       |
 1627|       |  /* set the proper values (possibly modified on POST) */
 1628|  2.30k|  conn->seek_func = data->set.seek_func; /* restore */
 1629|  2.30k|  conn->seek_client = data->set.seek_client; /* restore */
 1630|       |
 1631|  2.30k|  if(!http)
 1632|      0|    return CURLE_OK;
 1633|       |
 1634|  2.30k|  Curl_dyn_free(&http->send_buffer);
 1635|  2.30k|  Curl_http2_done(data, premature);
 1636|  2.30k|  Curl_quic_done(data, premature);
 1637|  2.30k|  Curl_mime_cleanpart(&http->form);
 1638|  2.30k|  Curl_dyn_reset(&data->state.headerb);
 1639|  2.30k|  Curl_hyper_done(data);
 1640|       |
 1641|  2.30k|  if(status)
 1642|    714|    return status;
 1643|       |
 1644|  1.59k|  if(!premature && /* this check is pointless when DONE is called before the
 1645|       |                      entire operation is complete */
 1646|  1.59k|     !conn->bits.retry &&
 1647|  1.59k|     !data->set.connect_only &&
 1648|  1.59k|     (data->req.bytecount +
 1649|  1.57k|      data->req.headerbytecount -
 1650|  1.57k|      data->req.deductheadercount) <= 0) {
 1651|       |    /* If this connection isn't simply closed to be retried, AND nothing was
 1652|       |       read from the HTTP server (that counts), this can't be right so we
 1653|       |       return an error here */
 1654|    710|    failf(data, "Empty reply from server");
 1655|       |    /* Mark it as closed to avoid the "left intact" message */
 1656|    710|    streamclose(conn, "Empty reply from server");
 1657|    710|    return CURLE_GOT_NOTHING;
 1658|    710|  }
 1659|       |
 1660|    885|  return CURLE_OK;
 1661|  1.59k|}
Curl_use_http_1_1plus:
 1674|  1.65k|{
 1675|  1.65k|  if((data->state.httpversion == 10) || (conn->httpversion == 10))
 1676|      6|    return FALSE;
 1677|  1.64k|  if((data->state.httpwant == CURL_HTTP_VERSION_1_0) &&
 1678|  1.64k|     (conn->httpversion <= 10))
 1679|      4|    return FALSE;
 1680|  1.64k|  return ((data->state.httpwant == CURL_HTTP_VERSION_NONE) ||
 1681|  1.64k|          (data->state.httpwant >= CURL_HTTP_VERSION_1_1));
 1682|  1.64k|}
Curl_add_custom_headers:
 1793|  2.29k|{
 1794|  2.29k|  struct connectdata *conn = data->conn;
 1795|  2.29k|  char *ptr;
 1796|  2.29k|  struct curl_slist *h[2];
 1797|  2.29k|  struct curl_slist *headers;
 1798|  2.29k|  int numlists = 1; /* by default */
 1799|  2.29k|  int i;
 1800|       |
 1801|  2.29k|#ifndef CURL_DISABLE_PROXY
 1802|  2.29k|  enum proxy_use proxy;
 1803|       |
 1804|  2.29k|  if(is_connect)
 1805|      0|    proxy = HEADER_CONNECT;
 1806|  2.29k|  else
 1807|  2.29k|    proxy = conn->bits.httpproxy && !conn->bits.tunnel_proxy?
 1808|  2.29k|      HEADER_PROXY:HEADER_SERVER;
 1809|       |
 1810|  2.29k|  switch(proxy) {
 1811|  2.29k|  case HEADER_SERVER:
 1812|  2.29k|    h[0] = data->set.headers;
 1813|  2.29k|    break;
 1814|      0|  case HEADER_PROXY:
 1815|      0|    h[0] = data->set.headers;
 1816|      0|    if(data->set.sep_headers) {
 1817|      0|      h[1] = data->set.proxyheaders;
 1818|      0|      numlists++;
 1819|      0|    }
 1820|      0|    break;
 1821|      0|  case HEADER_CONNECT:
 1822|      0|    if(data->set.sep_headers)
 1823|      0|      h[0] = data->set.proxyheaders;
 1824|      0|    else
 1825|      0|      h[0] = data->set.headers;
 1826|      0|    break;
 1827|  2.29k|  }
 1828|       |#else
 1829|       |  (void)is_connect;
 1830|       |  h[0] = data->set.headers;
 1831|       |#endif
 1832|       |
 1833|       |  /* loop through one or two lists */
 1834|  4.58k|  for(i = 0; i < numlists; i++) {
 1835|  2.29k|    headers = h[i];
 1836|       |
 1837|  4.31k|    while(headers) {
 1838|  2.02k|      char *semicolonp = NULL;
 1839|  2.02k|      ptr = strchr(headers->data, ':');
 1840|  2.02k|      if(!ptr) {
 1841|  1.06k|        char *optr;
 1842|       |        /* no colon, semicolon? */
 1843|  1.06k|        ptr = strchr(headers->data, ';');
 1844|  1.06k|        if(ptr) {
 1845|    627|          optr = ptr;
 1846|    627|          ptr++; /* pass the semicolon */
 1847|  1.44k|          while(*ptr && ISSPACE(*ptr))
 1848|    821|            ptr++;
 1849|       |
 1850|    627|          if(*ptr) {
 1851|       |            /* this may be used for something else in the future */
 1852|    275|            optr = NULL;
 1853|    275|          }
 1854|    352|          else {
 1855|    352|            if(*(--ptr) == ';') {
 1856|       |              /* copy the source */
 1857|     74|              semicolonp = strdup(headers->data);
 1858|     74|              if(!semicolonp) {
 1859|      0|#ifndef USE_HYPER
 1860|      0|                Curl_dyn_free(req);
 1861|      0|#endif
 1862|      0|                return CURLE_OUT_OF_MEMORY;
 1863|      0|              }
 1864|       |              /* put a colon where the semicolon is */
 1865|     74|              semicolonp[ptr - headers->data] = ':';
 1866|       |              /* point at the colon */
 1867|     74|              optr = &semicolonp [ptr - headers->data];
 1868|     74|            }
 1869|    352|          }
 1870|    627|          ptr = optr;
 1871|    627|        }
 1872|  1.06k|      }
 1873|  2.02k|      if(ptr) {
 1874|       |        /* we require a colon for this to be a true header */
 1875|       |
 1876|  1.31k|        ptr++; /* pass the colon */
 1877|  2.56k|        while(*ptr && ISSPACE(*ptr))
 1878|  1.25k|          ptr++;
 1879|       |
 1880|  1.31k|        if(*ptr || semicolonp) {
 1881|       |          /* only send this if the contents was non-blank or done special */
 1882|    805|          CURLcode result = CURLE_OK;
 1883|    805|          char *compare = semicolonp ? semicolonp : headers->data;
 1884|       |
 1885|    805|          if(data->state.aptr.host &&
 1886|       |             /* a Host: header was sent already, don't pass on any custom Host:
 1887|       |                header as that will produce *two* in the same request! */
 1888|    805|             checkprefix("Host:", compare))
 1889|      0|            ;
 1890|    805|          else if(data->state.httpreq == HTTPREQ_POST_FORM &&
 1891|       |                  /* this header (extended by formdata.c) is sent later */
 1892|    805|                  checkprefix("Content-Type:", compare))
 1893|      0|            ;
 1894|    805|          else if(data->state.httpreq == HTTPREQ_POST_MIME &&
 1895|       |                  /* this header is sent later */
 1896|    805|                  checkprefix("Content-Type:", compare))
 1897|      0|            ;
 1898|    805|          else if(conn->bits.authneg &&
 1899|       |                  /* while doing auth neg, don't allow the custom length since
 1900|       |                     we will force length zero then */
 1901|    805|                  checkprefix("Content-Length:", compare))
 1902|      0|            ;
 1903|    805|          else if(data->state.aptr.te &&
 1904|       |                  /* when asking for Transfer-Encoding, don't pass on a custom
 1905|       |                     Connection: */
 1906|    805|                  checkprefix("Connection:", compare))
 1907|      0|            ;
 1908|    805|          else if((conn->httpversion >= 20) &&
 1909|    805|                  checkprefix("Transfer-Encoding:", compare))
 1910|       |            /* HTTP/2 doesn't support chunked requests */
 1911|      0|            ;
 1912|    805|          else if((checkprefix("Authorization:", compare) ||
 1913|    805|                   checkprefix("Cookie:", compare)) &&
 1914|       |                  /* be careful of sending this potentially sensitive header to
 1915|       |                     other hosts */
 1916|    805|                  (data->state.this_is_a_follow &&
 1917|     11|                   data->state.first_host &&
 1918|     11|                   !data->set.allow_auth_to_other_hosts &&
 1919|     11|                   !strcasecompare(data->state.first_host, conn->host.name)))
 1920|      0|            ;
 1921|    805|          else {
 1922|       |#ifdef USE_HYPER
 1923|       |            result = Curl_hyper_header(data, req, compare);
 1924|       |#else
 1925|    805|            result = Curl_dyn_addf(req, "%s\r\n", compare);
 1926|    805|#endif
 1927|    805|          }
 1928|    805|          if(semicolonp)
 1929|     74|            free(semicolonp);
 1930|    805|          if(result)
 1931|      0|            return result;
 1932|    805|        }
 1933|  1.31k|      }
 1934|  2.02k|      headers = headers->next;
 1935|  2.02k|    }
 1936|  2.29k|  }
 1937|       |
 1938|  2.29k|  return CURLE_OK;
 1939|  2.29k|}
Curl_add_timecondition:
 1949|  2.29k|{
 1950|  2.29k|  const struct tm *tm;
 1951|  2.29k|  struct tm keeptime;
 1952|  2.29k|  CURLcode result;
 1953|  2.29k|  char datestr[80];
 1954|  2.29k|  const char *condp;
 1955|       |
 1956|  2.29k|  if(data->set.timecondition == CURL_TIMECOND_NONE)
 1957|       |    /* no condition was asked for */
 1958|  2.29k|    return CURLE_OK;
 1959|       |
 1960|      0|  result = Curl_gmtime(data->set.timevalue, &keeptime);
 1961|      0|  if(result) {
 1962|      0|    failf(data, "Invalid TIMEVALUE");
 1963|      0|    return result;
 1964|      0|  }
 1965|      0|  tm = &keeptime;
 1966|       |
 1967|      0|  switch(data->set.timecondition) {
 1968|      0|  default:
 1969|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1970|       |
 1971|      0|  case CURL_TIMECOND_IFMODSINCE:
 1972|      0|    condp = "If-Modified-Since";
 1973|      0|    break;
 1974|      0|  case CURL_TIMECOND_IFUNMODSINCE:
 1975|      0|    condp = "If-Unmodified-Since";
 1976|      0|    break;
 1977|      0|  case CURL_TIMECOND_LASTMOD:
 1978|      0|    condp = "Last-Modified";
 1979|      0|    break;
 1980|      0|  }
 1981|       |
 1982|      0|  if(Curl_checkheaders(data, condp)) {
 1983|       |    /* A custom header was specified; it will be sent instead. */
 1984|      0|    return CURLE_OK;
 1985|      0|  }
 1986|       |
 1987|       |  /* The If-Modified-Since header family should have their times set in
 1988|       |   * GMT as RFC2616 defines: "All HTTP date/time stamps MUST be
 1989|       |   * represented in Greenwich Mean Time (GMT), without exception. For the
 1990|       |   * purposes of HTTP, GMT is exactly equal to UTC (Coordinated Universal
 1991|       |   * Time)." (see page 20 of RFC2616).
 1992|       |   */
 1993|       |
 1994|       |  /* format: "Tue, 15 Nov 1994 12:45:26 GMT" */
 1995|      0|  msnprintf(datestr, sizeof(datestr),
 1996|      0|            "%s: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n",
 1997|      0|            condp,
 1998|      0|            Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
 1999|      0|            tm->tm_mday,
 2000|      0|            Curl_month[tm->tm_mon],
 2001|      0|            tm->tm_year + 1900,
 2002|      0|            tm->tm_hour,
 2003|      0|            tm->tm_min,
 2004|      0|            tm->tm_sec);
 2005|       |
 2006|      0|#ifndef USE_HYPER
 2007|      0|  result = Curl_dyn_add(req, datestr);
 2008|       |#else
 2009|       |  result = Curl_hyper_header(data, req, datestr);
 2010|       |#endif
 2011|       |
 2012|      0|  return result;
 2013|      0|}
Curl_http_method:
 2027|  2.32k|{
 2028|  2.32k|  Curl_HttpReq httpreq = data->state.httpreq;
 2029|  2.32k|  const char *request;
 2030|  2.32k|  if((conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_FTP)) &&
 2031|  2.32k|     data->set.upload)
 2032|     63|    httpreq = HTTPREQ_PUT;
 2033|       |
 2034|       |  /* Now set the 'request' pointer to the proper request string */
 2035|  2.32k|  if(data->set.str[STRING_CUSTOMREQUEST])
 2036|    339|    request = data->set.str[STRING_CUSTOMREQUEST];
 2037|  1.98k|  else {
 2038|  1.98k|    if(data->set.opt_no_body)
 2039|      4|      request = "HEAD";
 2040|  1.98k|    else {
 2041|  1.98k|      DEBUGASSERT((httpreq >= HTTPREQ_GET) && (httpreq <= HTTPREQ_HEAD));
 2042|  1.98k|      switch(httpreq) {
 2043|     24|      case HTTPREQ_POST:
 2044|     24|      case HTTPREQ_POST_FORM:
 2045|    161|      case HTTPREQ_POST_MIME:
 2046|    161|        request = "POST";
 2047|    161|        break;
 2048|     60|      case HTTPREQ_PUT:
 2049|     60|        request = "PUT";
 2050|     60|        break;
 2051|      0|      default: /* this should never happen */
 2052|  1.76k|      case HTTPREQ_GET:
 2053|  1.76k|        request = "GET";
 2054|  1.76k|        break;
 2055|      0|      case HTTPREQ_HEAD:
 2056|      0|        request = "HEAD";
 2057|      0|        break;
 2058|  1.98k|      }
 2059|  1.98k|    }
 2060|  1.98k|  }
 2061|  2.32k|  *method = request;
 2062|  2.32k|  *reqp = httpreq;
 2063|  2.32k|}
Curl_http_useragent:
 2066|  2.30k|{
 2067|       |  /* The User-Agent string might have been allocated in url.c already, because
 2068|       |     it might have been used in the proxy connect, but if we have got a header
 2069|       |     with the user-agent string specified, we erase the previously made string
 2070|       |     here. */
 2071|  2.30k|  if(Curl_checkheaders(data, "User-Agent")) {
 2072|      0|    free(data->state.aptr.uagent);
 2073|      0|    data->state.aptr.uagent = NULL;
 2074|      0|  }
 2075|  2.30k|  return CURLE_OK;
 2076|  2.30k|}
Curl_http_host:
 2080|  2.30k|{
 2081|  2.30k|  const char *ptr;
 2082|  2.30k|  if(!data->state.this_is_a_follow) {
 2083|       |    /* Free to avoid leaking memory on multiple requests*/
 2084|  2.10k|    free(data->state.first_host);
 2085|       |
 2086|  2.10k|    data->state.first_host = strdup(conn->host.name);
 2087|  2.10k|    if(!data->state.first_host)
 2088|      0|      return CURLE_OUT_OF_MEMORY;
 2089|       |
 2090|  2.10k|    data->state.first_remote_port = conn->remote_port;
 2091|  2.10k|  }
 2092|  2.30k|  Curl_safefree(data->state.aptr.host);
 2093|       |
 2094|  2.30k|  ptr = Curl_checkheaders(data, "Host");
 2095|  2.30k|  if(ptr && (!data->state.this_is_a_follow ||
 2096|      0|             strcasecompare(data->state.first_host, conn->host.name))) {
 2097|      0|#if !defined(CURL_DISABLE_COOKIES)
 2098|       |    /* If we have a given custom Host: header, we extract the host name in
 2099|       |       order to possibly use it for cookie reasons later on. We only allow the
 2100|       |       custom Host: header if this is NOT a redirect, as setting Host: in the
 2101|       |       redirected request is being out on thin ice. Except if the host name
 2102|       |       is the same as the first one! */
 2103|      0|    char *cookiehost = Curl_copy_header_value(ptr);
 2104|      0|    if(!cookiehost)
 2105|      0|      return CURLE_OUT_OF_MEMORY;
 2106|      0|    if(!*cookiehost)
 2107|       |      /* ignore empty data */
 2108|      0|      free(cookiehost);
 2109|      0|    else {
 2110|       |      /* If the host begins with '[', we start searching for the port after
 2111|       |         the bracket has been closed */
 2112|      0|      if(*cookiehost == '[') {
 2113|      0|        char *closingbracket;
 2114|       |        /* since the 'cookiehost' is an allocated memory area that will be
 2115|       |           freed later we cannot simply increment the pointer */
 2116|      0|        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
 2117|      0|        closingbracket = strchr(cookiehost, ']');
 2118|      0|        if(closingbracket)
 2119|      0|          *closingbracket = 0;
 2120|      0|      }
 2121|      0|      else {
 2122|      0|        int startsearch = 0;
 2123|      0|        char *colon = strchr(cookiehost + startsearch, ':');
 2124|      0|        if(colon)
 2125|      0|          *colon = 0; /* The host must not include an embedded port number */
 2126|      0|      }
 2127|      0|      Curl_safefree(data->state.aptr.cookiehost);
 2128|      0|      data->state.aptr.cookiehost = cookiehost;
 2129|      0|    }
 2130|      0|#endif
 2131|       |
 2132|      0|    if(strcmp("Host:", ptr)) {
 2133|      0|      data->state.aptr.host = aprintf("Host:%s\r\n", &ptr[5]);
 2134|      0|      if(!data->state.aptr.host)
 2135|      0|        return CURLE_OUT_OF_MEMORY;
 2136|      0|    }
 2137|      0|    else
 2138|       |      /* when clearing the header */
 2139|      0|      data->state.aptr.host = NULL;
 2140|      0|  }
 2141|  2.30k|  else {
 2142|       |    /* When building Host: headers, we must put the host name within
 2143|       |       [brackets] if the host name is a plain IPv6-address. RFC2732-style. */
 2144|  2.30k|    const char *host = conn->host.name;
 2145|       |
 2146|  2.30k|    if(((conn->given->protocol&CURLPROTO_HTTPS) &&
 2147|  2.30k|        (conn->remote_port == PORT_HTTPS)) ||
 2148|  2.30k|       ((conn->given->protocol&CURLPROTO_HTTP) &&
 2149|  2.30k|        (conn->remote_port == PORT_HTTP)) )
 2150|       |      /* if(HTTPS on port 443) OR (HTTP on port 80) then don't include
 2151|       |         the port number in the host string */
 2152|  1.57k|      data->state.aptr.host = aprintf("Host: %s%s%s\r\n",
 2153|  1.57k|                                    conn->bits.ipv6_ip?"[":"",
 2154|  1.57k|                                    host,
 2155|  1.57k|                                    conn->bits.ipv6_ip?"]":"");
 2156|    731|    else
 2157|    731|      data->state.aptr.host = aprintf("Host: %s%s%s:%d\r\n",
 2158|    731|                                    conn->bits.ipv6_ip?"[":"",
 2159|    731|                                    host,
 2160|    731|                                    conn->bits.ipv6_ip?"]":"",
 2161|    731|                                    conn->remote_port);
 2162|       |
 2163|  2.30k|    if(!data->state.aptr.host)
 2164|       |      /* without Host: we can't make a nice request */
 2165|      0|      return CURLE_OUT_OF_MEMORY;
 2166|  2.30k|  }
 2167|  2.30k|  return CURLE_OK;
 2168|  2.30k|}
Curl_http_target:
 2176|  2.29k|{
 2177|  2.29k|  CURLcode result = CURLE_OK;
 2178|  2.29k|  const char *path = data->state.up.path;
 2179|  2.29k|  const char *query = data->state.up.query;
 2180|       |
 2181|  2.29k|  if(data->set.str[STRING_TARGET]) {
 2182|      0|    path = data->set.str[STRING_TARGET];
 2183|      0|    query = NULL;
 2184|      0|  }
 2185|       |
 2186|  2.29k|#ifndef CURL_DISABLE_PROXY
 2187|  2.29k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
 2188|       |    /* Using a proxy but does not tunnel through it */
 2189|       |
 2190|       |    /* The path sent to the proxy is in fact the entire URL. But if the remote
 2191|       |       host is a IDN-name, we must make sure that the request we produce only
 2192|       |       uses the encoded host name! */
 2193|       |
 2194|       |    /* and no fragment part */
 2195|      0|    CURLUcode uc;
 2196|      0|    char *url;
 2197|      0|    CURLU *h = curl_url_dup(data->state.uh);
 2198|      0|    if(!h)
 2199|      0|      return CURLE_OUT_OF_MEMORY;
 2200|       |
 2201|      0|    if(conn->host.dispname != conn->host.name) {
 2202|      0|      uc = curl_url_set(h, CURLUPART_HOST, conn->host.name, 0);
 2203|      0|      if(uc) {
 2204|      0|        curl_url_cleanup(h);
 2205|      0|        return CURLE_OUT_OF_MEMORY;
 2206|      0|      }
 2207|      0|    }
 2208|      0|    uc = curl_url_set(h, CURLUPART_FRAGMENT, NULL, 0);
 2209|      0|    if(uc) {
 2210|      0|      curl_url_cleanup(h);
 2211|      0|      return CURLE_OUT_OF_MEMORY;
 2212|      0|    }
 2213|       |
 2214|      0|    if(strcasecompare("http", data->state.up.scheme)) {
 2215|       |      /* when getting HTTP, we don't want the userinfo the URL */
 2216|      0|      uc = curl_url_set(h, CURLUPART_USER, NULL, 0);
 2217|      0|      if(uc) {
 2218|      0|        curl_url_cleanup(h);
 2219|      0|        return CURLE_OUT_OF_MEMORY;
 2220|      0|      }
 2221|      0|      uc = curl_url_set(h, CURLUPART_PASSWORD, NULL, 0);
 2222|      0|      if(uc) {
 2223|      0|        curl_url_cleanup(h);
 2224|      0|        return CURLE_OUT_OF_MEMORY;
 2225|      0|      }
 2226|      0|    }
 2227|       |    /* Extract the URL to use in the request. Store in STRING_TEMP_URL for
 2228|       |       clean-up reasons if the function returns before the free() further
 2229|       |       down. */
 2230|      0|    uc = curl_url_get(h, CURLUPART_URL, &url, CURLU_NO_DEFAULT_PORT);
 2231|      0|    if(uc) {
 2232|      0|      curl_url_cleanup(h);
 2233|      0|      return CURLE_OUT_OF_MEMORY;
 2234|      0|    }
 2235|       |
 2236|      0|    curl_url_cleanup(h);
 2237|       |
 2238|       |    /* target or url */
 2239|      0|    result = Curl_dyn_add(r, data->set.str[STRING_TARGET]?
 2240|      0|      data->set.str[STRING_TARGET]:url);
 2241|      0|    free(url);
 2242|      0|    if(result)
 2243|      0|      return (result);
 2244|       |
 2245|      0|    if(strcasecompare("ftp", data->state.up.scheme)) {
 2246|      0|      if(data->set.proxy_transfer_mode) {
 2247|       |        /* when doing ftp, append ;type=<a|i> if not present */
 2248|      0|        char *type = strstr(path, ";type=");
 2249|      0|        if(type && type[6] && type[7] == 0) {
 2250|      0|          switch(Curl_raw_toupper(type[6])) {
 2251|      0|          case 'A':
 2252|      0|          case 'D':
 2253|      0|          case 'I':
 2254|      0|            break;
 2255|      0|          default:
 2256|      0|            type = NULL;
 2257|      0|          }
 2258|      0|        }
 2259|      0|        if(!type) {
 2260|      0|          result = Curl_dyn_addf(r, ";type=%c",
 2261|      0|                                 data->state.prefer_ascii ? 'a' : 'i');
 2262|      0|          if(result)
 2263|      0|            return result;
 2264|      0|        }
 2265|      0|      }
 2266|      0|    }
 2267|      0|  }
 2268|       |
 2269|  2.29k|  else
 2270|       |#else
 2271|       |    (void)conn; /* not used in disabled-proxy builds */
 2272|       |#endif
 2273|  2.29k|  {
 2274|  2.29k|    result = Curl_dyn_add(r, path);
 2275|  2.29k|    if(result)
 2276|      0|      return result;
 2277|  2.29k|    if(query)
 2278|     93|      result = Curl_dyn_addf(r, "?%s", query);
 2279|  2.29k|  }
 2280|       |
 2281|  2.29k|  return result;
 2282|  2.29k|}
Curl_http_body:
 2286|  2.30k|{
 2287|  2.30k|  CURLcode result = CURLE_OK;
 2288|  2.30k|  const char *ptr;
 2289|  2.30k|  struct HTTP *http = data->req.p.http;
 2290|  2.30k|  http->postsize = 0;
 2291|       |
 2292|  2.30k|  switch(httpreq) {
 2293|    138|  case HTTPREQ_POST_MIME:
 2294|    138|    http->sendit = &data->set.mimepost;
 2295|    138|    break;
 2296|      0|  case HTTPREQ_POST_FORM:
 2297|       |    /* Convert the form structure into a mime structure. */
 2298|      0|    Curl_mime_cleanpart(&http->form);
 2299|      0|    result = Curl_getformdata(data, &http->form, data->set.httppost,
 2300|      0|                              data->state.fread_func);
 2301|      0|    if(result)
 2302|      0|      return result;
 2303|      0|    http->sendit = &http->form;
 2304|      0|    break;
 2305|  2.16k|  default:
 2306|  2.16k|    http->sendit = NULL;
 2307|  2.30k|  }
 2308|       |
 2309|  2.30k|#ifndef CURL_DISABLE_MIME
 2310|  2.30k|  if(http->sendit) {
 2311|    138|    const char *cthdr = Curl_checkheaders(data, "Content-Type");
 2312|       |
 2313|       |    /* Read and seek body only. */
 2314|    138|    http->sendit->flags |= MIME_BODY_ONLY;
 2315|       |
 2316|       |    /* Prepare the mime structure headers & set content type. */
 2317|       |
 2318|    138|    if(cthdr)
 2319|      0|      for(cthdr += 13; *cthdr == ' '; cthdr++)
 2320|      0|        ;
 2321|    138|    else if(http->sendit->kind == MIMEKIND_MULTIPART)
 2322|    138|      cthdr = "multipart/form-data";
 2323|       |
 2324|    138|    curl_mime_headers(http->sendit, data->set.headers, 0);
 2325|    138|    result = Curl_mime_prepare_headers(http->sendit, cthdr,
 2326|    138|                                       NULL, MIMESTRATEGY_FORM);
 2327|    138|    curl_mime_headers(http->sendit, NULL, 0);
 2328|    138|    if(!result)
 2329|    138|      result = Curl_mime_rewind(http->sendit);
 2330|    138|    if(result)
 2331|      6|      return result;
 2332|    132|    http->postsize = Curl_mime_size(http->sendit);
 2333|    132|  }
 2334|  2.29k|#endif
 2335|       |
 2336|  2.29k|  ptr = Curl_checkheaders(data, "Transfer-Encoding");
 2337|  2.29k|  if(ptr) {
 2338|       |    /* Some kind of TE is requested, check if 'chunked' is chosen */
 2339|      0|    data->req.upload_chunky =
 2340|      0|      Curl_compareheader(ptr, "Transfer-Encoding:", "chunked");
 2341|      0|  }
 2342|  2.29k|  else {
 2343|  2.29k|    if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
 2344|  2.29k|       (((httpreq == HTTPREQ_POST_MIME || httpreq == HTTPREQ_POST_FORM) &&
 2345|  2.29k|         http->postsize < 0) ||
 2346|  2.29k|        ((data->set.upload || httpreq == HTTPREQ_POST) &&
 2347|  2.29k|         data->state.infilesize == -1))) {
 2348|     18|      if(conn->bits.authneg)
 2349|       |        /* don't enable chunked during auth neg */
 2350|      1|        ;
 2351|     17|      else if(Curl_use_http_1_1plus(data, conn)) {
 2352|     15|        if(conn->httpversion < 20)
 2353|       |          /* HTTP, upload, unknown file size and not HTTP 1.0 */
 2354|     13|          data->req.upload_chunky = TRUE;
 2355|     15|      }
 2356|      2|      else {
 2357|      2|        failf(data, "Chunky upload is not supported by HTTP 1.0");
 2358|      2|        return CURLE_UPLOAD_FAILED;
 2359|      2|      }
 2360|     18|    }
 2361|  2.27k|    else {
 2362|       |      /* else, no chunky upload */
 2363|  2.27k|      data->req.upload_chunky = FALSE;
 2364|  2.27k|    }
 2365|       |
 2366|  2.29k|    if(data->req.upload_chunky)
 2367|     13|      *tep = "Transfer-Encoding: chunked\r\n";
 2368|  2.29k|  }
 2369|  2.29k|  return result;
 2370|  2.29k|}
Curl_http_bodysend:
 2374|  2.29k|{
 2375|  2.29k|#ifndef USE_HYPER
 2376|       |  /* Hyper always handles the body separately */
 2377|  2.29k|  curl_off_t included_body = 0;
 2378|  2.29k|#endif
 2379|  2.29k|  CURLcode result = CURLE_OK;
 2380|  2.29k|  struct HTTP *http = data->req.p.http;
 2381|  2.29k|  const char *ptr;
 2382|       |
 2383|       |  /* If 'authdone' is FALSE, we must not set the write socket index to the
 2384|       |     Curl_transfer() call below, as we're not ready to actually upload any
 2385|       |     data yet. */
 2386|       |
 2387|  2.29k|  switch(httpreq) {
 2388|       |
 2389|     60|  case HTTPREQ_PUT: /* Let's PUT the data to the server! */
 2390|       |
 2391|     60|    if(conn->bits.authneg)
 2392|      3|      http->postsize = 0;
 2393|     57|    else
 2394|     57|      http->postsize = data->state.infilesize;
 2395|       |
 2396|     60|    if((http->postsize != -1) && !data->req.upload_chunky &&
 2397|     60|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2398|       |      /* only add Content-Length if not uploading chunked */
 2399|     45|      result = Curl_dyn_addf(r, "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2400|     45|                             "\r\n", http->postsize);
 2401|     45|      if(result)
 2402|      0|        return result;
 2403|     45|    }
 2404|       |
 2405|     60|    if(http->postsize) {
 2406|     48|      result = expect100(data, conn, r);
 2407|     48|      if(result)
 2408|      0|        return result;
 2409|     48|    }
 2410|       |
 2411|       |    /* end of headers */
 2412|     60|    result = Curl_dyn_add(r, "\r\n");
 2413|     60|    if(result)
 2414|      0|      return result;
 2415|       |
 2416|       |    /* set the upload size to the progress meter */
 2417|     60|    Curl_pgrsSetUploadSize(data, http->postsize);
 2418|       |
 2419|       |    /* this sends the buffer and frees all the buffer resources */
 2420|     60|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2421|     60|                              FIRSTSOCKET);
 2422|     60|    if(result)
 2423|      1|      failf(data, "Failed sending PUT request");
 2424|     59|    else
 2425|       |      /* prepare for transfer */
 2426|     59|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2427|     59|                          http->postsize?FIRSTSOCKET:-1);
 2428|     60|    if(result)
 2429|      1|      return result;
 2430|     59|    break;
 2431|       |
 2432|     59|  case HTTPREQ_POST_FORM:
 2433|    132|  case HTTPREQ_POST_MIME:
 2434|       |    /* This is form posting using mime data. */
 2435|    132|    if(conn->bits.authneg) {
 2436|       |      /* nothing to post! */
 2437|     11|      result = Curl_dyn_add(r, "Content-Length: 0\r\n\r\n");
 2438|     11|      if(result)
 2439|      0|        return result;
 2440|       |
 2441|     11|      result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2442|     11|                                FIRSTSOCKET);
 2443|     11|      if(result)
 2444|      0|        failf(data, "Failed sending POST request");
 2445|     11|      else
 2446|       |        /* setup variables for the upcoming transfer */
 2447|     11|        Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, -1);
 2448|     11|      break;
 2449|     11|    }
 2450|       |
 2451|    121|    data->state.infilesize = http->postsize;
 2452|       |
 2453|       |    /* We only set Content-Length and allow a custom Content-Length if
 2454|       |       we don't upload data chunked, as RFC2616 forbids us to set both
 2455|       |       kinds of headers (Transfer-Encoding: chunked and Content-Length) */
 2456|    121|    if(http->postsize != -1 && !data->req.upload_chunky &&
 2457|    121|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2458|       |      /* we allow replacing this header if not during auth negotiation,
 2459|       |         although it isn't very wise to actually set your own */
 2460|    121|      result = Curl_dyn_addf(r,
 2461|    121|                             "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2462|    121|                             "\r\n", http->postsize);
 2463|    121|      if(result)
 2464|      0|        return result;
 2465|    121|    }
 2466|       |
 2467|    121|#ifndef CURL_DISABLE_MIME
 2468|       |    /* Output mime-generated headers. */
 2469|    121|    {
 2470|    121|      struct curl_slist *hdr;
 2471|       |
 2472|    242|      for(hdr = http->sendit->curlheaders; hdr; hdr = hdr->next) {
 2473|    121|        result = Curl_dyn_addf(r, "%s\r\n", hdr->data);
 2474|    121|        if(result)
 2475|      0|          return result;
 2476|    121|      }
 2477|    121|    }
 2478|    121|#endif
 2479|       |
 2480|       |    /* For really small posts we don't use Expect: headers at all, and for
 2481|       |       the somewhat bigger ones we allow the app to disable it. Just make
 2482|       |       sure that the expect100header is always set to the preferred value
 2483|       |       here. */
 2484|    121|    ptr = Curl_checkheaders(data, "Expect");
 2485|    121|    if(ptr) {
 2486|      0|      data->state.expect100header =
 2487|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 2488|      0|    }
 2489|    121|    else if(http->postsize > EXPECT_100_THRESHOLD || http->postsize < 0) {
 2490|      0|      result = expect100(data, conn, r);
 2491|      0|      if(result)
 2492|      0|        return result;
 2493|      0|    }
 2494|    121|    else
 2495|    121|      data->state.expect100header = FALSE;
 2496|       |
 2497|       |    /* make the request end in a true CRLF */
 2498|    121|    result = Curl_dyn_add(r, "\r\n");
 2499|    121|    if(result)
 2500|      0|      return result;
 2501|       |
 2502|       |    /* set the upload size to the progress meter */
 2503|    121|    Curl_pgrsSetUploadSize(data, http->postsize);
 2504|       |
 2505|       |    /* Read from mime structure. */
 2506|    121|    data->state.fread_func = (curl_read_callback) Curl_mime_read;
 2507|    121|    data->state.in = (void *) http->sendit;
 2508|    121|    http->sending = HTTPSEND_BODY;
 2509|       |
 2510|       |    /* this sends the buffer and frees all the buffer resources */
 2511|    121|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2512|    121|                              FIRSTSOCKET);
 2513|    121|    if(result)
 2514|      1|      failf(data, "Failed sending POST request");
 2515|    120|    else
 2516|       |      /* prepare for transfer */
 2517|    120|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2518|    120|                          http->postsize?FIRSTSOCKET:-1);
 2519|    121|    if(result)
 2520|      1|      return result;
 2521|       |
 2522|    120|    break;
 2523|       |
 2524|    120|  case HTTPREQ_POST:
 2525|       |    /* this is the simple POST, using x-www-form-urlencoded style */
 2526|       |
 2527|     23|    if(conn->bits.authneg)
 2528|      2|      http->postsize = 0;
 2529|     21|    else
 2530|       |      /* the size of the post body */
 2531|     21|      http->postsize = data->state.infilesize;
 2532|       |
 2533|       |    /* We only set Content-Length and allow a custom Content-Length if
 2534|       |       we don't upload data chunked, as RFC2616 forbids us to set both
 2535|       |       kinds of headers (Transfer-Encoding: chunked and Content-Length) */
 2536|     23|    if((http->postsize != -1) && !data->req.upload_chunky &&
 2537|     23|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2538|       |      /* we allow replacing this header if not during auth negotiation,
 2539|       |         although it isn't very wise to actually set your own */
 2540|     23|      result = Curl_dyn_addf(r, "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2541|     23|                             "\r\n", http->postsize);
 2542|     23|      if(result)
 2543|      0|        return result;
 2544|     23|    }
 2545|       |
 2546|     23|    if(!Curl_checkheaders(data, "Content-Type")) {
 2547|     23|      result = Curl_dyn_add(r, "Content-Type: application/"
 2548|     23|                            "x-www-form-urlencoded\r\n");
 2549|     23|      if(result)
 2550|      0|        return result;
 2551|     23|    }
 2552|       |
 2553|       |    /* For really small posts we don't use Expect: headers at all, and for
 2554|       |       the somewhat bigger ones we allow the app to disable it. Just make
 2555|       |       sure that the expect100header is always set to the preferred value
 2556|       |       here. */
 2557|     23|    ptr = Curl_checkheaders(data, "Expect");
 2558|     23|    if(ptr) {
 2559|      0|      data->state.expect100header =
 2560|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 2561|      0|    }
 2562|     23|    else if(http->postsize > EXPECT_100_THRESHOLD || http->postsize < 0) {
 2563|      0|      result = expect100(data, conn, r);
 2564|      0|      if(result)
 2565|      0|        return result;
 2566|      0|    }
 2567|     23|    else
 2568|     23|      data->state.expect100header = FALSE;
 2569|       |
 2570|     23|#ifndef USE_HYPER
 2571|       |    /* With Hyper the body is always passed on separately */
 2572|     23|    if(data->set.postfields) {
 2573|       |
 2574|       |      /* In HTTP2, we send request body in DATA frame regardless of
 2575|       |         its size. */
 2576|     23|      if(conn->httpversion != 20 &&
 2577|     23|         !data->state.expect100header &&
 2578|     23|         (http->postsize < MAX_INITIAL_POST_SIZE)) {
 2579|       |        /* if we don't use expect: 100  AND
 2580|       |           postsize is less than MAX_INITIAL_POST_SIZE
 2581|       |
 2582|       |           then append the post data to the HTTP request header. This limit
 2583|       |           is no magic limit but only set to prevent really huge POSTs to
 2584|       |           get the data duplicated with malloc() and family. */
 2585|       |
 2586|       |        /* end of headers! */
 2587|     15|        result = Curl_dyn_add(r, "\r\n");
 2588|     15|        if(result)
 2589|      0|          return result;
 2590|       |
 2591|     15|        if(!data->req.upload_chunky) {
 2592|       |          /* We're not sending it 'chunked', append it to the request
 2593|       |             already now to reduce the number if send() calls */
 2594|     15|          result = Curl_dyn_addn(r, data->set.postfields,
 2595|     15|                                 (size_t)http->postsize);
 2596|     15|          included_body = http->postsize;
 2597|     15|        }
 2598|      0|        else {
 2599|      0|          if(http->postsize) {
 2600|      0|            char chunk[16];
 2601|       |            /* Append the POST data chunky-style */
 2602|      0|            msnprintf(chunk, sizeof(chunk), "%x\r\n", (int)http->postsize);
 2603|      0|            result = Curl_dyn_add(r, chunk);
 2604|      0|            if(!result) {
 2605|      0|              included_body = http->postsize + strlen(chunk);
 2606|      0|              result = Curl_dyn_addn(r, data->set.postfields,
 2607|      0|                                     (size_t)http->postsize);
 2608|      0|              if(!result)
 2609|      0|                result = Curl_dyn_add(r, "\r\n");
 2610|      0|              included_body += 2;
 2611|      0|            }
 2612|      0|          }
 2613|      0|          if(!result) {
 2614|      0|            result = Curl_dyn_add(r, "\x30\x0d\x0a\x0d\x0a");
 2615|       |            /* 0  CR  LF  CR  LF */
 2616|      0|            included_body += 5;
 2617|      0|          }
 2618|      0|        }
 2619|     15|        if(result)
 2620|      0|          return result;
 2621|       |        /* Make sure the progress information is accurate */
 2622|     15|        Curl_pgrsSetUploadSize(data, http->postsize);
 2623|     15|      }
 2624|      8|      else {
 2625|       |        /* A huge POST coming up, do data separate from the request */
 2626|      8|        http->postdata = data->set.postfields;
 2627|       |
 2628|      8|        http->sending = HTTPSEND_BODY;
 2629|       |
 2630|      8|        data->state.fread_func = (curl_read_callback)readmoredata;
 2631|      8|        data->state.in = (void *)data;
 2632|       |
 2633|       |        /* set the upload size to the progress meter */
 2634|      8|        Curl_pgrsSetUploadSize(data, http->postsize);
 2635|       |
 2636|       |        /* end of headers! */
 2637|      8|        result = Curl_dyn_add(r, "\r\n");
 2638|      8|        if(result)
 2639|      0|          return result;
 2640|      8|      }
 2641|     23|    }
 2642|      0|    else
 2643|      0|#endif
 2644|      0|    {
 2645|       |       /* end of headers! */
 2646|      0|      result = Curl_dyn_add(r, "\r\n");
 2647|      0|      if(result)
 2648|      0|        return result;
 2649|       |
 2650|      0|      if(data->req.upload_chunky && conn->bits.authneg) {
 2651|       |        /* Chunky upload is selected and we're negotiating auth still, send
 2652|       |           end-of-data only */
 2653|      0|        result = Curl_dyn_add(r, (char *)"\x30\x0d\x0a\x0d\x0a");
 2654|       |        /* 0  CR  LF  CR  LF */
 2655|      0|        if(result)
 2656|      0|          return result;
 2657|      0|      }
 2658|       |
 2659|      0|      else if(data->state.infilesize) {
 2660|       |        /* set the upload size to the progress meter */
 2661|      0|        Curl_pgrsSetUploadSize(data, http->postsize?http->postsize:-1);
 2662|       |
 2663|       |        /* set the pointer to mark that we will send the post body using the
 2664|       |           read callback, but only if we're not in authenticate negotiation */
 2665|      0|        if(!conn->bits.authneg)
 2666|      0|          http->postdata = (char *)&http->postdata;
 2667|      0|      }
 2668|      0|    }
 2669|       |    /* issue the request */
 2670|     23|    result = Curl_buffer_send(r, data, &data->info.request_size, included_body,
 2671|     23|                              FIRSTSOCKET);
 2672|       |
 2673|     23|    if(result)
 2674|      1|      failf(data, "Failed sending HTTP POST request");
 2675|     22|    else
 2676|     22|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2677|     22|                          http->postdata?FIRSTSOCKET:-1);
 2678|     23|    break;
 2679|       |
 2680|  2.07k|  default:
 2681|  2.07k|    result = Curl_dyn_add(r, "\r\n");
 2682|  2.07k|    if(result)
 2683|      0|      return result;
 2684|       |
 2685|       |    /* issue the request */
 2686|  2.07k|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2687|  2.07k|                              FIRSTSOCKET);
 2688|       |
 2689|  2.07k|    if(result)
 2690|     23|      failf(data, "Failed sending HTTP request");
 2691|  2.05k|    else
 2692|       |      /* HTTP GET/HEAD download: */
 2693|  2.05k|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, -1);
 2694|  2.29k|  }
 2695|       |
 2696|  2.29k|  return result;
 2697|  2.29k|}
Curl_http_cookies:
 2703|  2.29k|{
 2704|  2.29k|  CURLcode result = CURLE_OK;
 2705|  2.29k|  char *addcookies = NULL;
 2706|  2.29k|  if(data->set.str[STRING_COOKIE] && !Curl_checkheaders(data, "Cookie"))
 2707|      7|    addcookies = data->set.str[STRING_COOKIE];
 2708|       |
 2709|  2.29k|  if(data->cookies || addcookies) {
 2710|  2.29k|    struct Cookie *co = NULL; /* no cookies from start */
 2711|  2.29k|    int count = 0;
 2712|       |
 2713|  2.29k|    if(data->cookies && data->state.cookie_engine) {
 2714|  2.29k|      const char *host = data->state.aptr.cookiehost ?
 2715|  2.29k|        data->state.aptr.cookiehost : conn->host.name;
 2716|  2.29k|      const bool secure_context =
 2717|  2.29k|        conn->handler->protocol&CURLPROTO_HTTPS ||
 2718|  2.29k|        strcasecompare("localhost", host) ||
 2719|  2.29k|        !strcmp(host, "127.0.0.1") ||
 2720|  2.29k|        !strcmp(host, "[::1]") ? TRUE : FALSE;
 2721|  2.29k|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 2722|  2.29k|      co = Curl_cookie_getlist(data->cookies, host, data->state.up.path,
 2723|  2.29k|                               secure_context);
 2724|  2.29k|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 2725|  2.29k|    }
 2726|  2.29k|    if(co) {
 2727|     23|      struct Cookie *store = co;
 2728|       |      /* now loop through all cookies that matched */
 2729|     78|      while(co) {
 2730|     55|        if(co->value) {
 2731|     55|          if(0 == count) {
 2732|     23|            result = Curl_dyn_add(r, "Cookie: ");
 2733|     23|            if(result)
 2734|      0|              break;
 2735|     23|          }
 2736|     55|          result = Curl_dyn_addf(r, "%s%s=%s", count?"; ":"",
 2737|     55|                                 co->name, co->value);
 2738|     55|          if(result)
 2739|      0|            break;
 2740|     55|          count++;
 2741|     55|        }
 2742|     55|        co = co->next; /* next cookie please */
 2743|     55|      }
 2744|     23|      Curl_cookie_freelist(store);
 2745|     23|    }
 2746|  2.29k|    if(addcookies && !result) {
 2747|      7|      if(!count)
 2748|      6|        result = Curl_dyn_add(r, "Cookie: ");
 2749|      7|      if(!result) {
 2750|      7|        result = Curl_dyn_addf(r, "%s%s", count?"; ":"", addcookies);
 2751|      7|        count++;
 2752|      7|      }
 2753|      7|    }
 2754|  2.29k|    if(count && !result)
 2755|     29|      result = Curl_dyn_add(r, "\r\n");
 2756|       |
 2757|  2.29k|    if(result)
 2758|      0|      return result;
 2759|  2.29k|  }
 2760|  2.29k|  return result;
 2761|  2.29k|}
Curl_http_range:
 2766|  2.29k|{
 2767|  2.29k|  if(data->state.use_range) {
 2768|       |    /*
 2769|       |     * A range is selected. We use different headers whether we're downloading
 2770|       |     * or uploading and we always let customized headers override our internal
 2771|       |     * ones if any such are specified.
 2772|       |     */
 2773|     26|    if(((httpreq == HTTPREQ_GET) || (httpreq == HTTPREQ_HEAD)) &&
 2774|     26|       !Curl_checkheaders(data, "Range")) {
 2775|       |      /* if a line like this was already allocated, free the previous one */
 2776|      9|      free(data->state.aptr.rangeline);
 2777|      9|      data->state.aptr.rangeline = aprintf("Range: bytes=%s\r\n",
 2778|      9|                                           data->state.range);
 2779|      9|    }
 2780|     17|    else if((httpreq == HTTPREQ_POST || httpreq == HTTPREQ_PUT) &&
 2781|     17|            !Curl_checkheaders(data, "Content-Range")) {
 2782|       |
 2783|       |      /* if a line like this was already allocated, free the previous one */
 2784|     10|      free(data->state.aptr.rangeline);
 2785|       |
 2786|     10|      if(data->set.set_resume_from < 0) {
 2787|       |        /* Upload resume was asked for, but we don't know the size of the
 2788|       |           remote part so we tell the server (and act accordingly) that we
 2789|       |           upload the whole file (again) */
 2790|      0|        data->state.aptr.rangeline =
 2791|      0|          aprintf("Content-Range: bytes 0-%" CURL_FORMAT_CURL_OFF_T
 2792|      0|                  "/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2793|      0|                  data->state.infilesize - 1, data->state.infilesize);
 2794|       |
 2795|      0|      }
 2796|     10|      else if(data->state.resume_from) {
 2797|       |        /* This is because "resume" was selected */
 2798|      0|        curl_off_t total_expected_size =
 2799|      0|          data->state.resume_from + data->state.infilesize;
 2800|      0|        data->state.aptr.rangeline =
 2801|      0|          aprintf("Content-Range: bytes %s%" CURL_FORMAT_CURL_OFF_T
 2802|      0|                  "/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2803|      0|                  data->state.range, total_expected_size-1,
 2804|      0|                  total_expected_size);
 2805|      0|      }
 2806|     10|      else {
 2807|       |        /* Range was selected and then we just pass the incoming range and
 2808|       |           append total size */
 2809|     10|        data->state.aptr.rangeline =
 2810|     10|          aprintf("Content-Range: bytes %s/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2811|     10|                  data->state.range, data->state.infilesize);
 2812|     10|      }
 2813|     10|      if(!data->state.aptr.rangeline)
 2814|      0|        return CURLE_OUT_OF_MEMORY;
 2815|     10|    }
 2816|     26|  }
 2817|  2.29k|  return CURLE_OK;
 2818|  2.29k|}
Curl_http_resume:
 2823|  2.29k|{
 2824|  2.29k|  if((HTTPREQ_POST == httpreq || HTTPREQ_PUT == httpreq) &&
 2825|  2.29k|     data->state.resume_from) {
 2826|       |    /**********************************************************************
 2827|       |     * Resuming upload in HTTP means that we PUT or POST and that we have
 2828|       |     * got a resume_from value set. The resume value has already created
 2829|       |     * a Range: header that will be passed along. We need to "fast forward"
 2830|       |     * the file the given number of bytes and decrease the assume upload
 2831|       |     * file size before we continue this venture in the dark lands of HTTP.
 2832|       |     * Resuming mime/form posting at an offset > 0 has no sense and is ignored.
 2833|       |     *********************************************************************/
 2834|       |
 2835|      0|    if(data->state.resume_from < 0) {
 2836|       |      /*
 2837|       |       * This is meant to get the size of the present remote-file by itself.
 2838|       |       * We don't support this now. Bail out!
 2839|       |       */
 2840|      0|      data->state.resume_from = 0;
 2841|      0|    }
 2842|       |
 2843|      0|    if(data->state.resume_from && !data->state.this_is_a_follow) {
 2844|       |      /* do we still game? */
 2845|       |
 2846|       |      /* Now, let's read off the proper amount of bytes from the
 2847|       |         input. */
 2848|      0|      int seekerr = CURL_SEEKFUNC_CANTSEEK;
 2849|      0|      if(conn->seek_func) {
 2850|      0|        Curl_set_in_callback(data, true);
 2851|      0|        seekerr = conn->seek_func(conn->seek_client, data->state.resume_from,
 2852|      0|                                  SEEK_SET);
 2853|      0|        Curl_set_in_callback(data, false);
 2854|      0|      }
 2855|       |
 2856|      0|      if(seekerr != CURL_SEEKFUNC_OK) {
 2857|      0|        curl_off_t passed = 0;
 2858|       |
 2859|      0|        if(seekerr != CURL_SEEKFUNC_CANTSEEK) {
 2860|      0|          failf(data, "Could not seek stream");
 2861|      0|          return CURLE_READ_ERROR;
 2862|      0|        }
 2863|       |        /* when seekerr == CURL_SEEKFUNC_CANTSEEK (can't seek to offset) */
 2864|      0|        do {
 2865|      0|          size_t readthisamountnow =
 2866|      0|            (data->state.resume_from - passed > data->set.buffer_size) ?
 2867|      0|            (size_t)data->set.buffer_size :
 2868|      0|            curlx_sotouz(data->state.resume_from - passed);
 2869|       |
 2870|      0|          size_t actuallyread =
 2871|      0|            data->state.fread_func(data->state.buffer, 1, readthisamountnow,
 2872|      0|                                   data->state.in);
 2873|       |
 2874|      0|          passed += actuallyread;
 2875|      0|          if((actuallyread == 0) || (actuallyread > readthisamountnow)) {
 2876|       |            /* this checks for greater-than only to make sure that the
 2877|       |               CURL_READFUNC_ABORT return code still aborts */
 2878|      0|            failf(data, "Could only read %" CURL_FORMAT_CURL_OFF_T
 2879|      0|                  " bytes from the input", passed);
 2880|      0|            return CURLE_READ_ERROR;
 2881|      0|          }
 2882|      0|        } while(passed < data->state.resume_from);
 2883|      0|      }
 2884|       |
 2885|       |      /* now, decrease the size of the read */
 2886|      0|      if(data->state.infilesize>0) {
 2887|      0|        data->state.infilesize -= data->state.resume_from;
 2888|       |
 2889|      0|        if(data->state.infilesize <= 0) {
 2890|      0|          failf(data, "File already completely uploaded");
 2891|      0|          return CURLE_PARTIAL_FILE;
 2892|      0|        }
 2893|      0|      }
 2894|       |      /* we've passed, proceed as normal */
 2895|      0|    }
 2896|      0|  }
 2897|  2.29k|  return CURLE_OK;
 2898|  2.29k|}
Curl_http_firstwrite:
 2903|    547|{
 2904|    547|  struct SingleRequest *k = &data->req;
 2905|       |
 2906|    547|  if(data->req.newurl) {
 2907|    159|    if(conn->bits.close) {
 2908|       |      /* Abort after the headers if "follow Location" is set
 2909|       |         and we're set to close anyway. */
 2910|     96|      k->keepon &= ~KEEP_RECV;
 2911|     96|      *done = TRUE;
 2912|     96|      return CURLE_OK;
 2913|     96|    }
 2914|       |    /* We have a new url to load, but since we want to be able to re-use this
 2915|       |       connection properly, we read the full response in "ignore more" */
 2916|     63|    k->ignorebody = TRUE;
 2917|     63|    infof(data, "Ignoring the response-body");
 2918|     63|  }
 2919|    451|  if(data->state.resume_from && !k->content_range &&
 2920|    451|     (data->state.httpreq == HTTPREQ_GET) &&
 2921|    451|     !k->ignorebody) {
 2922|       |
 2923|      0|    if(k->size == data->state.resume_from) {
 2924|       |      /* The resume point is at the end of file, consider this fine even if it
 2925|       |         doesn't allow resume from here. */
 2926|      0|      infof(data, "The entire document is already downloaded");
 2927|      0|      connclose(conn, "already downloaded");
 2928|       |      /* Abort download */
 2929|      0|      k->keepon &= ~KEEP_RECV;
 2930|      0|      *done = TRUE;
 2931|      0|      return CURLE_OK;
 2932|      0|    }
 2933|       |
 2934|       |    /* we wanted to resume a download, although the server doesn't seem to
 2935|       |     * support this and we did this with a GET (if it wasn't a GET we did a
 2936|       |     * POST or PUT resume) */
 2937|      0|    failf(data, "HTTP server doesn't seem to support "
 2938|      0|          "byte ranges. Cannot resume.");
 2939|      0|    return CURLE_RANGE_ERROR;
 2940|      0|  }
 2941|       |
 2942|    451|  if(data->set.timecondition && !data->state.range) {
 2943|       |    /* A time condition has been set AND no ranges have been requested. This
 2944|       |       seems to be what chapter 13.3.4 of RFC 2616 defines to be the correct
 2945|       |       action for a HTTP/1.1 client */
 2946|       |
 2947|      0|    if(!Curl_meets_timecondition(data, k->timeofdoc)) {
 2948|      0|      *done = TRUE;
 2949|       |      /* We're simulating a http 304 from server so we return
 2950|       |         what should have been returned from the server */
 2951|      0|      data->info.httpcode = 304;
 2952|      0|      infof(data, "Simulate a HTTP 304 response!");
 2953|       |      /* we abort the transfer before it is completed == we ruin the
 2954|       |         re-use ability. Close the connection */
 2955|      0|      connclose(conn, "Simulated 304 handling");
 2956|      0|      return CURLE_OK;
 2957|      0|    }
 2958|      0|  } /* we have a time condition */
 2959|       |
 2960|    451|  return CURLE_OK;
 2961|    451|}
Curl_transferencode:
 2965|  2.30k|{
 2966|  2.30k|  if(!Curl_checkheaders(data, "TE") &&
 2967|  2.30k|     data->set.http_transfer_encoding) {
 2968|       |    /* When we are to insert a TE: header in the request, we must also insert
 2969|       |       TE in a Connection: header, so we need to merge the custom provided
 2970|       |       Connection: header and prevent the original to get sent. Note that if
 2971|       |       the user has inserted his/her own TE: header we don't do this magic
 2972|       |       but then assume that the user will handle it all! */
 2973|      0|    char *cptr = Curl_checkheaders(data, "Connection");
 2974|      0|#define TE_HEADER "TE: gzip\r\n"
 2975|       |
 2976|      0|    Curl_safefree(data->state.aptr.te);
 2977|       |
 2978|      0|    if(cptr) {
 2979|      0|      cptr = Curl_copy_header_value(cptr);
 2980|      0|      if(!cptr)
 2981|      0|        return CURLE_OUT_OF_MEMORY;
 2982|      0|    }
 2983|       |
 2984|       |    /* Create the (updated) Connection: header */
 2985|      0|    data->state.aptr.te = aprintf("Connection: %s%sTE\r\n" TE_HEADER,
 2986|      0|                                cptr ? cptr : "", (cptr && *cptr) ? ", ":"");
 2987|       |
 2988|      0|    free(cptr);
 2989|      0|    if(!data->state.aptr.te)
 2990|      0|      return CURLE_OUT_OF_MEMORY;
 2991|      0|  }
 2992|  2.30k|  return CURLE_OK;
 2993|  2.30k|}
Curl_http:
 3003|  2.30k|{
 3004|  2.30k|  struct connectdata *conn = data->conn;
 3005|  2.30k|  CURLcode result = CURLE_OK;
 3006|  2.30k|  struct HTTP *http;
 3007|  2.30k|  Curl_HttpReq httpreq;
 3008|  2.30k|  const char *te = ""; /* transfer-encoding */
 3009|  2.30k|  const char *request;
 3010|  2.30k|  const char *httpstring;
 3011|  2.30k|  struct dynbuf req;
 3012|  2.30k|  char *altused = NULL;
 3013|  2.30k|  const char *p_accept;      /* Accept: string */
 3014|       |
 3015|       |  /* Always consider the DO phase done after this function call, even if there
 3016|       |     may be parts of the request that are not yet sent, since we can deal with
 3017|       |     the rest of the request in the PERFORM phase. */
 3018|  2.30k|  *done = TRUE;
 3019|       |
 3020|  2.30k|  if(conn->transport != TRNSPRT_QUIC) {
 3021|  2.30k|    if(conn->httpversion < 20) { /* unless the connection is re-used and
 3022|       |                                    already http2 */
 3023|  2.30k|      switch(conn->negnpn) {
 3024|      0|      case CURL_HTTP_VERSION_2:
 3025|      0|        conn->httpversion = 20; /* we know we're on HTTP/2 now */
 3026|       |
 3027|      0|        result = Curl_http2_switched(data, NULL, 0);
 3028|      0|        if(result)
 3029|      0|          return result;
 3030|      0|        break;
 3031|      0|      case CURL_HTTP_VERSION_1_1:
 3032|       |        /* continue with HTTP/1.1 when explicitly requested */
 3033|      0|        break;
 3034|  2.30k|      default:
 3035|       |        /* Check if user wants to use HTTP/2 with clear TCP*/
 3036|  2.30k|#ifdef USE_NGHTTP2
 3037|  2.30k|        if(data->state.httpwant == CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE) {
 3038|    704|#ifndef CURL_DISABLE_PROXY
 3039|    704|          if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
 3040|       |            /* We don't support HTTP/2 proxies yet. Also it's debatable
 3041|       |               whether or not this setting should apply to HTTP/2 proxies. */
 3042|      0|            infof(data, "Ignoring HTTP/2 prior knowledge due to proxy");
 3043|      0|            break;
 3044|      0|          }
 3045|    704|#endif
 3046|    704|          DEBUGF(infof(data, "HTTP/2 over clean TCP"));
 3047|    704|          conn->httpversion = 20;
 3048|       |
 3049|    704|          result = Curl_http2_switched(data, NULL, 0);
 3050|    704|          if(result)
 3051|      0|            return result;
 3052|    704|        }
 3053|  2.30k|#endif
 3054|  2.30k|        break;
 3055|  2.30k|      }
 3056|  2.30k|    }
 3057|      0|    else {
 3058|       |      /* prepare for a http2 request */
 3059|      0|      result = Curl_http2_setup(data, conn);
 3060|      0|      if(result)
 3061|      0|        return result;
 3062|      0|    }
 3063|  2.30k|  }
 3064|  2.30k|  http = data->req.p.http;
 3065|  2.30k|  DEBUGASSERT(http);
 3066|       |
 3067|  2.30k|  result = Curl_http_host(data, conn);
 3068|  2.30k|  if(result)
 3069|      0|    return result;
 3070|       |
 3071|  2.30k|  result = Curl_http_useragent(data);
 3072|  2.30k|  if(result)
 3073|      0|    return result;
 3074|       |
 3075|  2.30k|  Curl_http_method(data, conn, &request, &httpreq);
 3076|       |
 3077|       |  /* setup the authentication headers */
 3078|  2.30k|  {
 3079|  2.30k|    char *pq = NULL;
 3080|  2.30k|    if(data->state.up.query) {
 3081|     93|      pq = aprintf("%s?%s", data->state.up.path, data->state.up.query);
 3082|     93|      if(!pq)
 3083|      0|        return CURLE_OUT_OF_MEMORY;
 3084|     93|    }
 3085|  2.30k|    result = Curl_http_output_auth(data, conn, request, httpreq,
 3086|  2.30k|                                   (pq ? pq : data->state.up.path), FALSE);
 3087|  2.30k|    free(pq);
 3088|  2.30k|    if(result)
 3089|      7|      return result;
 3090|  2.30k|  }
 3091|       |
 3092|  2.30k|  Curl_safefree(data->state.aptr.ref);
 3093|  2.30k|  if(data->state.referer && !Curl_checkheaders(data, "Referer")) {
 3094|      0|    data->state.aptr.ref = aprintf("Referer: %s\r\n", data->state.referer);
 3095|      0|    if(!data->state.aptr.ref)
 3096|      0|      return CURLE_OUT_OF_MEMORY;
 3097|      0|  }
 3098|       |
 3099|  2.30k|  if(!Curl_checkheaders(data, "Accept-Encoding") &&
 3100|  2.30k|     data->set.str[STRING_ENCODING]) {
 3101|    221|    Curl_safefree(data->state.aptr.accept_encoding);
 3102|    221|    data->state.aptr.accept_encoding =
 3103|    221|      aprintf("Accept-Encoding: %s\r\n", data->set.str[STRING_ENCODING]);
 3104|    221|    if(!data->state.aptr.accept_encoding)
 3105|      0|      return CURLE_OUT_OF_MEMORY;
 3106|    221|  }
 3107|  2.08k|  else
 3108|  2.08k|    Curl_safefree(data->state.aptr.accept_encoding);
 3109|       |
 3110|  2.30k|#ifdef HAVE_LIBZ
 3111|       |  /* we only consider transfer-encoding magic if libz support is built-in */
 3112|  2.30k|  result = Curl_transferencode(data);
 3113|  2.30k|  if(result)
 3114|      0|    return result;
 3115|  2.30k|#endif
 3116|       |
 3117|  2.30k|  result = Curl_http_body(data, conn, httpreq, &te);
 3118|  2.30k|  if(result)
 3119|      8|    return result;
 3120|       |
 3121|  2.29k|  p_accept = Curl_checkheaders(data, "Accept")?NULL:"Accept: */*\r\n";
 3122|       |
 3123|  2.29k|  result = Curl_http_resume(data, conn, httpreq);
 3124|  2.29k|  if(result)
 3125|      0|    return result;
 3126|       |
 3127|  2.29k|  result = Curl_http_range(data, httpreq);
 3128|  2.29k|  if(result)
 3129|      0|    return result;
 3130|       |
 3131|  2.29k|  httpstring = get_http_string(data, conn);
 3132|       |
 3133|       |  /* initialize a dynamic send-buffer */
 3134|  2.29k|  Curl_dyn_init(&req, DYN_HTTP_REQUEST);
 3135|       |
 3136|       |  /* make sure the header buffer is reset - if there are leftovers from a
 3137|       |     previous transfer */
 3138|  2.29k|  Curl_dyn_reset(&data->state.headerb);
 3139|       |
 3140|       |  /* add the main request stuff */
 3141|       |  /* GET/HEAD/POST/PUT */
 3142|  2.29k|  result = Curl_dyn_addf(&req, "%s ", request);
 3143|  2.29k|  if(!result)
 3144|  2.29k|    result = Curl_http_target(data, conn, &req);
 3145|  2.29k|  if(result) {
 3146|      0|    Curl_dyn_free(&req);
 3147|      0|    return result;
 3148|      0|  }
 3149|       |
 3150|  2.29k|#ifndef CURL_DISABLE_ALTSVC
 3151|  2.29k|  if(conn->bits.altused && !Curl_checkheaders(data, "Alt-Used")) {
 3152|      0|    altused = aprintf("Alt-Used: %s:%d\r\n",
 3153|      0|                      conn->conn_to_host.name, conn->conn_to_port);
 3154|      0|    if(!altused) {
 3155|      0|      Curl_dyn_free(&req);
 3156|      0|      return CURLE_OUT_OF_MEMORY;
 3157|      0|    }
 3158|      0|  }
 3159|  2.29k|#endif
 3160|  2.29k|  result =
 3161|  2.29k|    Curl_dyn_addf(&req,
 3162|  2.29k|                  " HTTP/%s\r\n" /* HTTP version */
 3163|  2.29k|                  "%s" /* host */
 3164|  2.29k|                  "%s" /* proxyuserpwd */
 3165|  2.29k|                  "%s" /* userpwd */
 3166|  2.29k|                  "%s" /* range */
 3167|  2.29k|                  "%s" /* user agent */
 3168|  2.29k|                  "%s" /* accept */
 3169|  2.29k|                  "%s" /* TE: */
 3170|  2.29k|                  "%s" /* accept-encoding */
 3171|  2.29k|                  "%s" /* referer */
 3172|  2.29k|                  "%s" /* Proxy-Connection */
 3173|  2.29k|                  "%s" /* transfer-encoding */
 3174|  2.29k|                  "%s",/* Alt-Used */
 3175|       |
 3176|  2.29k|                  httpstring,
 3177|  2.29k|                  (data->state.aptr.host?data->state.aptr.host:""),
 3178|  2.29k|                  data->state.aptr.proxyuserpwd?
 3179|  2.29k|                  data->state.aptr.proxyuserpwd:"",
 3180|  2.29k|                  data->state.aptr.userpwd?data->state.aptr.userpwd:"",
 3181|  2.29k|                  (data->state.use_range && data->state.aptr.rangeline)?
 3182|  2.27k|                  data->state.aptr.rangeline:"",
 3183|  2.29k|                  (data->set.str[STRING_USERAGENT] &&
 3184|  2.29k|                   *data->set.str[STRING_USERAGENT] &&
 3185|  2.29k|                   data->state.aptr.uagent)?
 3186|  2.29k|                  data->state.aptr.uagent:"",
 3187|  2.29k|                  p_accept?p_accept:"",
 3188|  2.29k|                  data->state.aptr.te?data->state.aptr.te:"",
 3189|  2.29k|                  (data->set.str[STRING_ENCODING] &&
 3190|  2.29k|                   *data->set.str[STRING_ENCODING] &&
 3191|  2.29k|                   data->state.aptr.accept_encoding)?
 3192|  2.07k|                  data->state.aptr.accept_encoding:"",
 3193|  2.29k|                  (data->state.referer && data->state.aptr.ref)?
 3194|  2.29k|                  data->state.aptr.ref:"" /* Referer: <data> */,
 3195|  2.29k|#ifndef CURL_DISABLE_PROXY
 3196|  2.29k|                  (conn->bits.httpproxy &&
 3197|  2.29k|                   !conn->bits.tunnel_proxy &&
 3198|  2.29k|                   !Curl_checkheaders(data, "Proxy-Connection") &&
 3199|  2.29k|                   !Curl_checkProxyheaders(data, conn, "Proxy-Connection"))?
 3200|  2.29k|                  "Proxy-Connection: Keep-Alive\r\n":"",
 3201|       |#else
 3202|       |                  "",
 3203|       |#endif
 3204|  2.29k|                  te,
 3205|  2.29k|                  altused ? altused : ""
 3206|  2.29k|      );
 3207|       |
 3208|       |  /* clear userpwd and proxyuserpwd to avoid re-using old credentials
 3209|       |   * from re-used connections */
 3210|  2.29k|  Curl_safefree(data->state.aptr.userpwd);
 3211|  2.29k|  Curl_safefree(data->state.aptr.proxyuserpwd);
 3212|  2.29k|  free(altused);
 3213|       |
 3214|  2.29k|  if(result) {
 3215|      0|    Curl_dyn_free(&req);
 3216|      0|    return result;
 3217|      0|  }
 3218|       |
 3219|  2.29k|  if(!(conn->handler->flags&PROTOPT_SSL) &&
 3220|  2.29k|     conn->httpversion != 20 &&
 3221|  2.29k|     (data->state.httpwant == CURL_HTTP_VERSION_2)) {
 3222|       |    /* append HTTP2 upgrade magic stuff to the HTTP request if it isn't done
 3223|       |       over SSL */
 3224|      1|    result = Curl_http2_request_upgrade(&req, data);
 3225|      1|    if(result) {
 3226|      0|      Curl_dyn_free(&req);
 3227|      0|      return result;
 3228|      0|    }
 3229|      1|  }
 3230|       |
 3231|  2.29k|  result = Curl_http_cookies(data, conn, &req);
 3232|  2.29k|  if(!result)
 3233|  2.29k|    result = Curl_add_timecondition(data, &req);
 3234|  2.29k|  if(!result)
 3235|  2.29k|    result = Curl_add_custom_headers(data, FALSE, &req);
 3236|       |
 3237|  2.29k|  if(!result) {
 3238|  2.29k|    http->postdata = NULL;  /* nothing to post at this point */
 3239|  2.29k|    if((httpreq == HTTPREQ_GET) ||
 3240|  2.29k|       (httpreq == HTTPREQ_HEAD))
 3241|  2.07k|      Curl_pgrsSetUploadSize(data, 0); /* nothing */
 3242|       |
 3243|       |    /* bodysend takes ownership of the 'req' memory on success */
 3244|  2.29k|    result = Curl_http_bodysend(data, conn, &req, httpreq);
 3245|  2.29k|  }
 3246|  2.29k|  if(result) {
 3247|     26|    Curl_dyn_free(&req);
 3248|     26|    return result;
 3249|     26|  }
 3250|       |
 3251|  2.26k|  if((http->postsize > -1) &&
 3252|  2.26k|     (http->postsize <= data->req.writebytecount) &&
 3253|  2.26k|     (http->sending != HTTPSEND_REQUEST))
 3254|  2.08k|    data->req.upload_done = TRUE;
 3255|       |
 3256|  2.26k|  if(data->req.writebytecount) {
 3257|       |    /* if a request-body has been sent off, we make sure this progress is noted
 3258|       |       properly */
 3259|     12|    Curl_pgrsSetUploadCounter(data, data->req.writebytecount);
 3260|     12|    if(Curl_pgrsUpdate(data))
 3261|      0|      result = CURLE_ABORTED_BY_CALLBACK;
 3262|       |
 3263|     12|    if(!http->postsize) {
 3264|       |      /* already sent the entire request body, mark the "upload" as
 3265|       |         complete */
 3266|      0|      infof(data, "upload completely sent off: %" CURL_FORMAT_CURL_OFF_T
 3267|      0|            " out of %" CURL_FORMAT_CURL_OFF_T " bytes",
 3268|      0|            data->req.writebytecount, http->postsize);
 3269|      0|      data->req.upload_done = TRUE;
 3270|      0|      data->req.keepon &= ~KEEP_SEND; /* we're done writing */
 3271|      0|      data->req.exp100 = EXP100_SEND_DATA; /* already sent */
 3272|      0|      Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 3273|      0|    }
 3274|     12|  }
 3275|       |
 3276|  2.26k|  if((conn->httpversion == 20) && data->req.upload_chunky)
 3277|       |    /* upload_chunky was set above to set up the request in a chunky fashion,
 3278|       |       but is disabled here again to avoid that the chunked encoded version is
 3279|       |       actually used when sending the request body over h2 */
 3280|      0|    data->req.upload_chunky = FALSE;
 3281|  2.26k|  return result;
 3282|  2.29k|}
Curl_http_header:
 3395|  17.4k|{
 3396|  17.4k|  CURLcode result;
 3397|  17.4k|  struct SingleRequest *k = &data->req;
 3398|       |  /* Check for Content-Length: header lines to get size */
 3399|  17.4k|  if(!k->http_bodyless &&
 3400|  17.4k|     !data->set.ignorecl && checkprefix("Content-Length:", headp)) {
 3401|    688|    curl_off_t contentlength;
 3402|    688|    CURLofft offt = curlx_strtoofft(headp + strlen("Content-Length:"),
 3403|    688|                                    NULL, 10, &contentlength);
 3404|       |
 3405|    688|    if(offt == CURL_OFFT_OK) {
 3406|    667|      k->size = contentlength;
 3407|    667|      k->maxdownload = k->size;
 3408|    667|    }
 3409|     21|    else if(offt == CURL_OFFT_FLOW) {
 3410|       |      /* out of range */
 3411|     18|      if(data->set.max_filesize) {
 3412|      0|        failf(data, "Maximum file size exceeded");
 3413|      0|        return CURLE_FILESIZE_EXCEEDED;
 3414|      0|      }
 3415|     18|      streamclose(conn, "overflow content-length");
 3416|     18|      infof(data, "Overflow Content-Length: value!");
 3417|     18|    }
 3418|      3|    else {
 3419|       |      /* negative or just rubbish - bad HTTP */
 3420|      3|      failf(data, "Invalid Content-Length: value");
 3421|      3|      return CURLE_WEIRD_SERVER_REPLY;
 3422|      3|    }
 3423|    688|  }
 3424|       |  /* check for Content-Type: header lines to get the MIME-type */
 3425|  16.7k|  else if(checkprefix("Content-Type:", headp)) {
 3426|  1.12k|    char *contenttype = Curl_copy_header_value(headp);
 3427|  1.12k|    if(!contenttype)
 3428|      0|      return CURLE_OUT_OF_MEMORY;
 3429|  1.12k|    if(!*contenttype)
 3430|       |      /* ignore empty data */
 3431|     35|      free(contenttype);
 3432|  1.09k|    else {
 3433|  1.09k|      Curl_safefree(data->info.contenttype);
 3434|  1.09k|      data->info.contenttype = contenttype;
 3435|  1.09k|    }
 3436|  1.12k|  }
 3437|  15.6k|#ifndef CURL_DISABLE_PROXY
 3438|  15.6k|  else if((conn->httpversion == 10) &&
 3439|  15.6k|          conn->bits.httpproxy &&
 3440|  15.6k|          Curl_compareheader(headp, "Proxy-Connection:", "keep-alive")) {
 3441|       |    /*
 3442|       |     * When a HTTP/1.0 reply comes when using a proxy, the
 3443|       |     * 'Proxy-Connection: keep-alive' line tells us the
 3444|       |     * connection will be kept alive for our pleasure.
 3445|       |     * Default action for 1.0 is to close.
 3446|       |     */
 3447|      0|    connkeep(conn, "Proxy-Connection keep-alive"); /* don't close */
 3448|      0|    infof(data, "HTTP/1.0 proxy connection set to keep alive!");
 3449|      0|  }
 3450|  15.6k|  else if((conn->httpversion == 11) &&
 3451|  15.6k|          conn->bits.httpproxy &&
 3452|  15.6k|          Curl_compareheader(headp, "Proxy-Connection:", "close")) {
 3453|       |    /*
 3454|       |     * We get a HTTP/1.1 response from a proxy and it says it'll
 3455|       |     * close down after this transfer.
 3456|       |     */
 3457|      0|    connclose(conn, "Proxy-Connection: asked to close after done");
 3458|      0|    infof(data, "HTTP/1.1 proxy connection set close!");
 3459|      0|  }
 3460|  15.6k|#endif
 3461|  15.6k|  else if((conn->httpversion == 10) &&
 3462|  15.6k|          Curl_compareheader(headp, "Connection:", "keep-alive")) {
 3463|       |    /*
 3464|       |     * A HTTP/1.0 reply with the 'Connection: keep-alive' line
 3465|       |     * tells us the connection will be kept alive for our
 3466|       |     * pleasure.  Default action for 1.0 is to close.
 3467|       |     *
 3468|       |     * [RFC2068, section 19.7.1] */
 3469|     40|    connkeep(conn, "Connection keep-alive");
 3470|     40|    infof(data, "HTTP/1.0 connection set to keep alive!");
 3471|     40|  }
 3472|  15.5k|  else if(Curl_compareheader(headp, "Connection:", "close")) {
 3473|       |    /*
 3474|       |     * [RFC 2616, section 8.1.2.1]
 3475|       |     * "Connection: close" is HTTP/1.1 language and means that
 3476|       |     * the connection will close when this request has been
 3477|       |     * served.
 3478|       |     */
 3479|    298|    streamclose(conn, "Connection: close used");
 3480|    298|  }
 3481|  15.2k|  else if(!k->http_bodyless && checkprefix("Transfer-Encoding:", headp)) {
 3482|       |    /* One or more encodings. We check for chunked and/or a compression
 3483|       |       algorithm. */
 3484|       |    /*
 3485|       |     * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
 3486|       |     * means that the server will send a series of "chunks". Each
 3487|       |     * chunk starts with line with info (including size of the
 3488|       |     * coming block) (terminated with CRLF), then a block of data
 3489|       |     * with the previously mentioned size. There can be any amount
 3490|       |     * of chunks, and a chunk-data set to zero signals the
 3491|       |     * end-of-chunks. */
 3492|       |
 3493|      0|    result = Curl_build_unencoding_stack(data,
 3494|      0|                                         headp + strlen("Transfer-Encoding:"),
 3495|      0|                                         TRUE);
 3496|      0|    if(result)
 3497|      0|      return result;
 3498|      0|    if(!k->chunk) {
 3499|       |      /* if this isn't chunked, only close can signal the end of this transfer
 3500|       |         as Content-Length is said not to be trusted for transfer-encoding! */
 3501|      0|      connclose(conn, "HTTP/1.1 transfer-encoding without chunks");
 3502|      0|      k->ignore_cl = TRUE;
 3503|      0|    }
 3504|      0|  }
 3505|  15.2k|  else if(!k->http_bodyless && checkprefix("Content-Encoding:", headp) &&
 3506|  15.2k|          data->set.str[STRING_ENCODING]) {
 3507|       |    /*
 3508|       |     * Process Content-Encoding. Look for the values: identity,
 3509|       |     * gzip, deflate, compress, x-gzip and x-compress. x-gzip and
 3510|       |     * x-compress are the same as gzip and compress. (Sec 3.5 RFC
 3511|       |     * 2616). zlib cannot handle compress.  However, errors are
 3512|       |     * handled further down when the response body is processed
 3513|       |     */
 3514|    273|    result = Curl_build_unencoding_stack(data,
 3515|    273|                                         headp + strlen("Content-Encoding:"),
 3516|    273|                                         FALSE);
 3517|    273|    if(result)
 3518|      0|      return result;
 3519|    273|  }
 3520|  14.9k|  else if(checkprefix("Retry-After:", headp)) {
 3521|       |    /* Retry-After = HTTP-date / delay-seconds */
 3522|     11|    curl_off_t retry_after = 0; /* zero for unknown or "now" */
 3523|     11|    time_t date = Curl_getdate_capped(headp + strlen("Retry-After:"));
 3524|     11|    if(-1 == date) {
 3525|       |      /* not a date, try it as a decimal number */
 3526|     11|      (void)curlx_strtoofft(headp + strlen("Retry-After:"),
 3527|     11|                            NULL, 10, &retry_after);
 3528|     11|    }
 3529|      0|    else
 3530|       |      /* convert date to number of seconds into the future */
 3531|      0|      retry_after = date - time(NULL);
 3532|     11|    data->info.retry_after = retry_after; /* store it */
 3533|     11|  }
 3534|  14.9k|  else if(!k->http_bodyless && checkprefix("Content-Range:", headp)) {
 3535|       |    /* Content-Range: bytes [num]-
 3536|       |       Content-Range: bytes: [num]-
 3537|       |       Content-Range: [num]-
 3538|       |       Content-Range: [asterisk]/[total]
 3539|       |
 3540|       |       The second format was added since Sun's webserver
 3541|       |       JavaWebServer/1.1.1 obviously sends the header this way!
 3542|       |       The third added since some servers use that!
 3543|       |       The forth means the requested range was unsatisfied.
 3544|       |    */
 3545|       |
 3546|    333|    char *ptr = headp + strlen("Content-Range:");
 3547|       |
 3548|       |    /* Move forward until first digit or asterisk */
 3549|  3.18k|    while(*ptr && !ISDIGIT(*ptr) && *ptr != '*')
 3550|  2.85k|      ptr++;
 3551|       |
 3552|       |    /* if it truly stopped on a digit */
 3553|    333|    if(ISDIGIT(*ptr)) {
 3554|    299|      if(!curlx_strtoofft(ptr, NULL, 10, &k->offset)) {
 3555|    281|        if(data->state.resume_from == k->offset)
 3556|       |          /* we asked for a resume and we got it */
 3557|     26|          k->content_range = TRUE;
 3558|    281|      }
 3559|    299|    }
 3560|     34|    else
 3561|     34|      data->state.resume_from = 0; /* get everything */
 3562|    333|  }
 3563|  14.6k|#if !defined(CURL_DISABLE_COOKIES)
 3564|  14.6k|  else if(data->cookies && data->state.cookie_engine &&
 3565|  14.6k|          checkprefix("Set-Cookie:", headp)) {
 3566|       |    /* If there is a custom-set Host: name, use it here, or else use real peer
 3567|       |       host name. */
 3568|  5.89k|    const char *host = data->state.aptr.cookiehost?
 3569|  5.89k|      data->state.aptr.cookiehost:conn->host.name;
 3570|  5.89k|    const bool secure_context =
 3571|  5.89k|      conn->handler->protocol&CURLPROTO_HTTPS ||
 3572|  5.89k|      strcasecompare("localhost", host) ||
 3573|  5.89k|      !strcmp(host, "127.0.0.1") ||
 3574|  5.89k|      !strcmp(host, "[::1]") ? TRUE : FALSE;
 3575|       |
 3576|  5.89k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE,
 3577|  5.89k|                    CURL_LOCK_ACCESS_SINGLE);
 3578|  5.89k|    Curl_cookie_add(data, data->cookies, TRUE, FALSE,
 3579|  5.89k|                    headp + strlen("Set-Cookie:"), host,
 3580|  5.89k|                    data->state.up.path, secure_context);
 3581|  5.89k|    Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 3582|  5.89k|  }
 3583|  8.76k|#endif
 3584|  8.76k|  else if(!k->http_bodyless && checkprefix("Last-Modified:", headp) &&
 3585|  8.76k|          (data->set.timecondition || data->set.get_filetime) ) {
 3586|      0|    k->timeofdoc = Curl_getdate_capped(headp + strlen("Last-Modified:"));
 3587|      0|    if(data->set.get_filetime)
 3588|      0|      data->info.filetime = k->timeofdoc;
 3589|      0|  }
 3590|  8.76k|  else if((checkprefix("WWW-Authenticate:", headp) &&
 3591|  8.76k|           (401 == k->httpcode)) ||
 3592|  8.76k|          (checkprefix("Proxy-authenticate:", headp) &&
 3593|  8.59k|           (407 == k->httpcode))) {
 3594|       |
 3595|    162|    bool proxy = (k->httpcode == 407) ? TRUE : FALSE;
 3596|    162|    char *auth = Curl_copy_header_value(headp);
 3597|    162|    if(!auth)
 3598|      0|      return CURLE_OUT_OF_MEMORY;
 3599|       |
 3600|    162|    result = Curl_http_input_auth(data, proxy, auth);
 3601|       |
 3602|    162|    free(auth);
 3603|       |
 3604|    162|    if(result)
 3605|      0|      return result;
 3606|    162|  }
 3607|       |#ifdef USE_SPNEGO
 3608|       |  else if(checkprefix("Persistent-Auth:", headp)) {
 3609|       |    struct negotiatedata *negdata = &conn->negotiate;
 3610|       |    struct auth *authp = &data->state.authhost;
 3611|       |    if(authp->picked == CURLAUTH_NEGOTIATE) {
 3612|       |      char *persistentauth = Curl_copy_header_value(headp);
 3613|       |      if(!persistentauth)
 3614|       |        return CURLE_OUT_OF_MEMORY;
 3615|       |      negdata->noauthpersist = checkprefix("false", persistentauth)?
 3616|       |        TRUE:FALSE;
 3617|       |      negdata->havenoauthpersist = TRUE;
 3618|       |      infof(data, "Negotiate: noauthpersist -> %d, header part: %s",
 3619|       |            negdata->noauthpersist, persistentauth);
 3620|       |      free(persistentauth);
 3621|       |    }
 3622|       |  }
 3623|       |#endif
 3624|  8.59k|  else if((k->httpcode >= 300 && k->httpcode < 400) &&
 3625|  8.59k|          checkprefix("Location:", headp) &&
 3626|  8.59k|          !data->req.location) {
 3627|       |    /* this is the URL that the server advises us to use instead */
 3628|    339|    char *location = Curl_copy_header_value(headp);
 3629|    339|    if(!location)
 3630|      0|      return CURLE_OUT_OF_MEMORY;
 3631|    339|    if(!*location)
 3632|       |      /* ignore empty data */
 3633|     13|      free(location);
 3634|    326|    else {
 3635|    326|      data->req.location = location;
 3636|       |
 3637|    326|      if(data->set.http_follow_location) {
 3638|    214|        DEBUGASSERT(!data->req.newurl);
 3639|    214|        data->req.newurl = strdup(data->req.location); /* clone */
 3640|    214|        if(!data->req.newurl)
 3641|      0|          return CURLE_OUT_OF_MEMORY;
 3642|       |
 3643|       |        /* some cases of POST and PUT etc needs to rewind the data
 3644|       |           stream at this point */
 3645|    214|        result = http_perhapsrewind(data, conn);
 3646|    214|        if(result)
 3647|      2|          return result;
 3648|    214|      }
 3649|    326|    }
 3650|    339|  }
 3651|       |
 3652|  8.26k|#ifndef CURL_DISABLE_HSTS
 3653|       |  /* If enabled, the header is incoming and this is over HTTPS */
 3654|  8.26k|  else if(data->hsts && checkprefix("Strict-Transport-Security:", headp) &&
 3655|  8.26k|          (conn->handler->flags & PROTOPT_SSL)) {
 3656|      0|    CURLcode check =
 3657|      0|      Curl_hsts_parse(data->hsts, data->state.up.hostname,
 3658|      0|                      headp + strlen("Strict-Transport-Security:"));
 3659|      0|    if(check)
 3660|      0|      infof(data, "Illegal STS header skipped");
 3661|      0|#ifdef DEBUGBUILD
 3662|      0|    else
 3663|      0|      infof(data, "Parsed STS header fine (%zu entries)",
 3664|      0|            data->hsts->list.size);
 3665|      0|#endif
 3666|      0|  }
 3667|  8.26k|#endif
 3668|  8.26k|#ifndef CURL_DISABLE_ALTSVC
 3669|       |  /* If enabled, the header is incoming and this is over HTTPS */
 3670|  8.26k|  else if(data->asi && checkprefix("Alt-Svc:", headp) &&
 3671|  8.26k|          ((conn->handler->flags & PROTOPT_SSL) ||
 3672|      0|#ifdef CURLDEBUG
 3673|       |           /* allow debug builds to circumvent the HTTPS restriction */
 3674|      0|           getenv("CURL_ALTSVC_HTTP")
 3675|       |#else
 3676|       |           0
 3677|       |#endif
 3678|      0|            )) {
 3679|       |    /* the ALPN of the current request */
 3680|      0|    enum alpnid id = (conn->httpversion == 20) ? ALPN_h2 : ALPN_h1;
 3681|      0|    result = Curl_altsvc_parse(data, data->asi,
 3682|      0|                               headp + strlen("Alt-Svc:"),
 3683|      0|                               id, conn->host.name,
 3684|      0|                               curlx_uitous(conn->remote_port));
 3685|      0|    if(result)
 3686|      0|      return result;
 3687|      0|  }
 3688|  8.26k|#endif
 3689|  8.26k|  else if(conn->handler->protocol & CURLPROTO_RTSP) {
 3690|      0|    result = Curl_rtsp_parseheader(data, headp);
 3691|      0|    if(result)
 3692|      0|      return result;
 3693|      0|  }
 3694|  17.4k|  return CURLE_OK;
 3695|  17.4k|}
Curl_http_statusline:
 3704|  1.08k|{
 3705|  1.08k|  struct SingleRequest *k = &data->req;
 3706|  1.08k|  data->info.httpcode = k->httpcode;
 3707|       |
 3708|  1.08k|  data->info.httpversion = conn->httpversion;
 3709|  1.08k|  if(!data->state.httpversion ||
 3710|  1.08k|     data->state.httpversion > conn->httpversion)
 3711|       |    /* store the lowest server version we encounter */
 3712|  1.02k|    data->state.httpversion = conn->httpversion;
 3713|       |
 3714|       |  /*
 3715|       |   * This code executes as part of processing the header.  As a
 3716|       |   * result, it's not totally clear how to interpret the
 3717|       |   * response code yet as that depends on what other headers may
 3718|       |   * be present.  401 and 407 may be errors, but may be OK
 3719|       |   * depending on how authentication is working.  Other codes
 3720|       |   * are definitely errors, so give up here.
 3721|       |   */
 3722|  1.08k|  if(data->state.resume_from && data->state.httpreq == HTTPREQ_GET &&
 3723|  1.08k|     k->httpcode == 416) {
 3724|       |    /* "Requested Range Not Satisfiable", just proceed and
 3725|       |       pretend this is no error */
 3726|      0|    k->ignorebody = TRUE; /* Avoid appending error msg to good data. */
 3727|      0|  }
 3728|       |
 3729|  1.08k|  if(conn->httpversion == 10) {
 3730|       |    /* Default action for HTTP/1.0 must be to close, unless
 3731|       |       we get one of those fancy headers that tell us the
 3732|       |       server keeps it open for us! */
 3733|     37|    infof(data, "HTTP 1.0, assume close after body");
 3734|     37|    connclose(conn, "HTTP/1.0 close after body");
 3735|     37|  }
 3736|  1.05k|  else if(conn->httpversion == 20 ||
 3737|  1.05k|          (k->upgr101 == UPGR101_REQUESTED && k->httpcode == 101)) {
 3738|     58|    DEBUGF(infof(data, "HTTP/2 found, allow multiplexing"));
 3739|       |    /* HTTP/2 cannot avoid multiplexing since it is a core functionality
 3740|       |       of the protocol */
 3741|     58|    conn->bundle->multiuse = BUNDLE_MULTIPLEX;
 3742|     58|  }
 3743|    993|  else if(conn->httpversion >= 11 &&
 3744|    993|          !conn->bits.close) {
 3745|       |    /* If HTTP version is >= 1.1 and connection is persistent */
 3746|    992|    DEBUGF(infof(data,
 3747|    992|                 "HTTP 1.1 or later with persistent connection"));
 3748|    992|  }
 3749|       |
 3750|  1.08k|  k->http_bodyless = k->httpcode >= 100 && k->httpcode < 200;
 3751|  1.08k|  switch(k->httpcode) {
 3752|      4|  case 304:
 3753|       |    /* (quote from RFC2616, section 10.3.5): The 304 response
 3754|       |     * MUST NOT contain a message-body, and thus is always
 3755|       |     * terminated by the first empty line after the header
 3756|       |     * fields.  */
 3757|      4|    if(data->set.timecondition)
 3758|      0|      data->info.timecond = TRUE;
 3759|       |    /* FALLTHROUGH */
 3760|     13|  case 204:
 3761|       |    /* (quote from RFC2616, section 10.2.5): The server has
 3762|       |     * fulfilled the request but does not need to return an
 3763|       |     * entity-body ... The 204 response MUST NOT include a
 3764|       |     * message-body, and thus is always terminated by the first
 3765|       |     * empty line after the header fields. */
 3766|     13|    k->size = 0;
 3767|     13|    k->maxdownload = 0;
 3768|     13|    k->http_bodyless = TRUE;
 3769|     13|    break;
 3770|  1.07k|  default:
 3771|  1.07k|    break;
 3772|  1.08k|  }
 3773|  1.08k|  return CURLE_OK;
 3774|  1.08k|}
Curl_http_size:
 3782|    602|{
 3783|    602|  struct SingleRequest *k = &data->req;
 3784|    602|  if(data->req.ignore_cl || k->chunk) {
 3785|      0|    k->size = k->maxdownload = -1;
 3786|      0|  }
 3787|    602|  else if(k->size != -1) {
 3788|    251|    if(data->set.max_filesize &&
 3789|    251|       k->size > data->set.max_filesize) {
 3790|      0|      failf(data, "Maximum file size exceeded");
 3791|      0|      return CURLE_FILESIZE_EXCEEDED;
 3792|      0|    }
 3793|    251|    Curl_pgrsSetDownloadSize(data, k->size);
 3794|    251|    k->maxdownload = k->size;
 3795|    251|  }
 3796|    602|  return CURLE_OK;
 3797|    602|}
Curl_http_readwrite_headers:
 3806|  24.6k|{
 3807|  24.6k|  CURLcode result;
 3808|  24.6k|  struct SingleRequest *k = &data->req;
 3809|  24.6k|  ssize_t onread = *nread;
 3810|  24.6k|  char *ostr = k->str;
 3811|  24.6k|  char *headp;
 3812|  24.6k|  char *str_start;
 3813|  24.6k|  char *end_ptr;
 3814|       |
 3815|       |  /* header line within buffer loop */
 3816|  41.6k|  do {
 3817|  41.6k|    size_t rest_length;
 3818|  41.6k|    size_t full_length;
 3819|  41.6k|    int writetype;
 3820|       |
 3821|       |    /* str_start is start of line within buf */
 3822|  41.6k|    str_start = k->str;
 3823|       |
 3824|       |    /* data is in network encoding so use 0x0a instead of '\n' */
 3825|  41.6k|    end_ptr = memchr(str_start, 0x0a, *nread);
 3826|       |
 3827|  41.6k|    if(!end_ptr) {
 3828|       |      /* Not a complete header line within buffer, append the data to
 3829|       |         the end of the headerbuff. */
 3830|  23.5k|      result = Curl_dyn_addn(&data->state.headerb, str_start, *nread);
 3831|  23.5k|      if(result)
 3832|      0|        return result;
 3833|       |
 3834|  23.5k|      if(!k->headerline) {
 3835|       |        /* check if this looks like a protocol header */
 3836|  22.6k|        statusline st =
 3837|  22.6k|          checkprotoprefix(data, conn,
 3838|  22.6k|                           Curl_dyn_ptr(&data->state.headerb),
 3839|  22.6k|                           Curl_dyn_len(&data->state.headerb));
 3840|       |
 3841|  22.6k|        if(st == STATUS_BAD) {
 3842|       |          /* this is not the beginning of a protocol first header line */
 3843|     19|          k->header = FALSE;
 3844|     19|          k->badheader = HEADER_ALLBAD;
 3845|     19|          streamclose(conn, "bad HTTP: No end-of-message indicator");
 3846|     19|          if(!data->set.http09_allowed) {
 3847|     19|            failf(data, "Received HTTP/0.9 when not allowed");
 3848|     19|            return CURLE_UNSUPPORTED_PROTOCOL;
 3849|     19|          }
 3850|      0|          break;
 3851|     19|        }
 3852|  22.6k|      }
 3853|       |
 3854|  23.5k|      break; /* read more and try again */
 3855|  23.5k|    }
 3856|       |
 3857|       |    /* decrease the size of the remaining (supposed) header line */
 3858|  18.0k|    rest_length = (end_ptr - k->str) + 1;
 3859|  18.0k|    *nread -= (ssize_t)rest_length;
 3860|       |
 3861|  18.0k|    k->str = end_ptr + 1; /* move past new line */
 3862|       |
 3863|  18.0k|    full_length = k->str - str_start;
 3864|       |
 3865|  18.0k|    result = Curl_dyn_addn(&data->state.headerb, str_start, full_length);
 3866|  18.0k|    if(result)
 3867|      0|      return result;
 3868|       |
 3869|       |    /****
 3870|       |     * We now have a FULL header line in 'headerb'.
 3871|       |     *****/
 3872|       |
 3873|  18.0k|    if(!k->headerline) {
 3874|       |      /* the first read header */
 3875|  1.11k|      statusline st = checkprotoprefix(data, conn,
 3876|  1.11k|                                       Curl_dyn_ptr(&data->state.headerb),
 3877|  1.11k|                                       Curl_dyn_len(&data->state.headerb));
 3878|  1.11k|      if(st == STATUS_BAD) {
 3879|     22|        streamclose(conn, "bad HTTP: No end-of-message indicator");
 3880|       |        /* this is not the beginning of a protocol first header line */
 3881|     22|        if(!data->set.http09_allowed) {
 3882|     22|          failf(data, "Received HTTP/0.9 when not allowed");
 3883|     22|          return CURLE_UNSUPPORTED_PROTOCOL;
 3884|     22|        }
 3885|      0|        k->header = FALSE;
 3886|      0|        if(*nread)
 3887|       |          /* since there's more, this is a partial bad header */
 3888|      0|          k->badheader = HEADER_PARTHEADER;
 3889|      0|        else {
 3890|       |          /* this was all we read so it's all a bad header */
 3891|      0|          k->badheader = HEADER_ALLBAD;
 3892|      0|          *nread = onread;
 3893|      0|          k->str = ostr;
 3894|      0|          return CURLE_OK;
 3895|      0|        }
 3896|      0|        break;
 3897|      0|      }
 3898|  1.11k|    }
 3899|       |
 3900|       |    /* headers are in network encoding so use 0x0a and 0x0d instead of '\n'
 3901|       |       and '\r' */
 3902|  18.0k|    headp = Curl_dyn_ptr(&data->state.headerb);
 3903|  18.0k|    if((0x0a == *headp) || (0x0d == *headp)) {
 3904|    624|      size_t headerlen;
 3905|       |      /* Zero-length header line means end of headers! */
 3906|       |
 3907|       |#ifdef CURL_DOES_CONVERSIONS
 3908|       |      if(0x0d == *headp) {
 3909|       |        *headp = '\r'; /* replace with CR in host encoding */
 3910|       |        headp++;       /* pass the CR byte */
 3911|       |      }
 3912|       |      if(0x0a == *headp) {
 3913|       |        *headp = '\n'; /* replace with LF in host encoding */
 3914|       |        headp++;       /* pass the LF byte */
 3915|       |      }
 3916|       |#else
 3917|    624|      if('\r' == *headp)
 3918|    591|        headp++; /* pass the \r byte */
 3919|    624|      if('\n' == *headp)
 3920|    600|        headp++; /* pass the \n byte */
 3921|    624|#endif /* CURL_DOES_CONVERSIONS */
 3922|       |
 3923|    624|      if(100 <= k->httpcode && 199 >= k->httpcode) {
 3924|       |        /* "A user agent MAY ignore unexpected 1xx status responses." */
 3925|     23|        switch(k->httpcode) {
 3926|     13|        case 100:
 3927|       |          /*
 3928|       |           * We have made a HTTP PUT or POST and this is 1.1-lingo
 3929|       |           * that tells us that the server is OK with this and ready
 3930|       |           * to receive the data.
 3931|       |           * However, we'll get more headers now so we must get
 3932|       |           * back into the header-parsing state!
 3933|       |           */
 3934|     13|          k->header = TRUE;
 3935|     13|          k->headerline = 0; /* restart the header line counter */
 3936|       |
 3937|       |          /* if we did wait for this do enable write now! */
 3938|     13|          if(k->exp100 > EXP100_SEND_DATA) {
 3939|      9|            k->exp100 = EXP100_SEND_DATA;
 3940|      9|            k->keepon |= KEEP_SEND;
 3941|      9|            Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 3942|      9|          }
 3943|     13|          break;
 3944|      1|        case 101:
 3945|       |          /* Switching Protocols */
 3946|      1|          if(k->upgr101 == UPGR101_REQUESTED) {
 3947|       |            /* Switching to HTTP/2 */
 3948|      0|            infof(data, "Received 101");
 3949|      0|            k->upgr101 = UPGR101_RECEIVED;
 3950|       |
 3951|       |            /* we'll get more headers (HTTP/2 response) */
 3952|      0|            k->header = TRUE;
 3953|      0|            k->headerline = 0; /* restart the header line counter */
 3954|       |
 3955|       |            /* switch to http2 now. The bytes after response headers
 3956|       |               are also processed here, otherwise they are lost. */
 3957|      0|            result = Curl_http2_switched(data, k->str, *nread);
 3958|      0|            if(result)
 3959|      0|              return result;
 3960|      0|            *nread = 0;
 3961|      0|          }
 3962|      1|          else {
 3963|       |            /* Switching to another protocol (e.g. WebSocket) */
 3964|      1|            k->header = FALSE; /* no more header to parse! */
 3965|      1|          }
 3966|      1|          break;
 3967|      9|        default:
 3968|       |          /* the status code 1xx indicates a provisional response, so
 3969|       |             we'll get another set of headers */
 3970|      9|          k->header = TRUE;
 3971|      9|          k->headerline = 0; /* restart the header line counter */
 3972|      9|          break;
 3973|     23|        }
 3974|     23|      }
 3975|    601|      else {
 3976|    601|        k->header = FALSE; /* no more header to parse! */
 3977|       |
 3978|    601|        if((k->size == -1) && !k->chunk && !conn->bits.close &&
 3979|    601|           (conn->httpversion == 11) &&
 3980|    601|           !(conn->handler->protocol & CURLPROTO_RTSP) &&
 3981|    601|           data->state.httpreq != HTTPREQ_HEAD) {
 3982|       |          /* On HTTP 1.1, when connection is not to get closed, but no
 3983|       |             Content-Length nor Transfer-Encoding chunked have been
 3984|       |             received, according to RFC2616 section 4.4 point 5, we
 3985|       |             assume that the server will close the connection to
 3986|       |             signal the end of the document. */
 3987|    284|          infof(data, "no chunk, no close, no size. Assume close to "
 3988|    284|                "signal end");
 3989|    284|          streamclose(conn, "HTTP: No end-of-message indicator");
 3990|    284|        }
 3991|    601|      }
 3992|       |
 3993|    624|      if(!k->header) {
 3994|    602|        result = Curl_http_size(data);
 3995|    602|        if(result)
 3996|      0|          return result;
 3997|    602|      }
 3998|       |
 3999|       |      /* At this point we have some idea about the fate of the connection.
 4000|       |         If we are closing the connection it may result auth failure. */
 4001|    624|#if defined(USE_NTLM)
 4002|    624|      if(conn->bits.close &&
 4003|    624|         (((data->req.httpcode == 401) &&
 4004|    363|           (conn->http_ntlm_state == NTLMSTATE_TYPE2)) ||
 4005|    363|          ((data->req.httpcode == 407) &&
 4006|    363|           (conn->proxy_ntlm_state == NTLMSTATE_TYPE2)))) {
 4007|      0|        infof(data, "Connection closure while negotiating auth (HTTP 1.0?)");
 4008|      0|        data->state.authproblem = TRUE;
 4009|      0|      }
 4010|    624|#endif
 4011|       |#if defined(USE_SPNEGO)
 4012|       |      if(conn->bits.close &&
 4013|       |        (((data->req.httpcode == 401) &&
 4014|       |          (conn->http_negotiate_state == GSS_AUTHRECV)) ||
 4015|       |         ((data->req.httpcode == 407) &&
 4016|       |          (conn->proxy_negotiate_state == GSS_AUTHRECV)))) {
 4017|       |        infof(data, "Connection closure while negotiating auth (HTTP 1.0?)");
 4018|       |        data->state.authproblem = TRUE;
 4019|       |      }
 4020|       |      if((conn->http_negotiate_state == GSS_AUTHDONE) &&
 4021|       |         (data->req.httpcode != 401)) {
 4022|       |        conn->http_negotiate_state = GSS_AUTHSUCC;
 4023|       |      }
 4024|       |      if((conn->proxy_negotiate_state == GSS_AUTHDONE) &&
 4025|       |         (data->req.httpcode != 407)) {
 4026|       |        conn->proxy_negotiate_state = GSS_AUTHSUCC;
 4027|       |      }
 4028|       |#endif
 4029|       |
 4030|       |      /* now, only output this if the header AND body are requested:
 4031|       |       */
 4032|    624|      writetype = CLIENTWRITE_HEADER;
 4033|    624|      if(data->set.include_header)
 4034|      4|        writetype |= CLIENTWRITE_BODY;
 4035|       |
 4036|    624|      headerlen = Curl_dyn_len(&data->state.headerb);
 4037|    624|      result = Curl_client_write(data, writetype,
 4038|    624|                                 Curl_dyn_ptr(&data->state.headerb),
 4039|    624|                                 headerlen);
 4040|    624|      if(result)
 4041|      0|        return result;
 4042|       |
 4043|    624|      data->info.header_size += (long)headerlen;
 4044|    624|      data->req.headerbytecount += (long)headerlen;
 4045|       |
 4046|       |      /*
 4047|       |       * When all the headers have been parsed, see if we should give
 4048|       |       * up and return an error.
 4049|       |       */
 4050|    624|      if(http_should_fail(data)) {
 4051|      0|        failf(data, "The requested URL returned error: %d",
 4052|      0|              k->httpcode);
 4053|      0|        return CURLE_HTTP_RETURNED_ERROR;
 4054|      0|      }
 4055|       |
 4056|    624|      data->req.deductheadercount =
 4057|    624|        (100 <= k->httpcode && 199 >= k->httpcode)?data->req.headerbytecount:0;
 4058|       |
 4059|       |      /* Curl_http_auth_act() checks what authentication methods
 4060|       |       * that are available and decides which one (if any) to
 4061|       |       * use. It will set 'newurl' if an auth method was picked. */
 4062|    624|      result = Curl_http_auth_act(data);
 4063|       |
 4064|    624|      if(result)
 4065|      0|        return result;
 4066|       |
 4067|    624|      if(k->httpcode >= 300) {
 4068|    322|        if((!conn->bits.authneg) && !conn->bits.close &&
 4069|    322|           !conn->bits.rewindaftersend) {
 4070|       |          /*
 4071|       |           * General treatment of errors when about to send data. Including :
 4072|       |           * "417 Expectation Failed", while waiting for 100-continue.
 4073|       |           *
 4074|       |           * The check for close above is done simply because of something
 4075|       |           * else has already deemed the connection to get closed then
 4076|       |           * something else should've considered the big picture and we
 4077|       |           * avoid this check.
 4078|       |           *
 4079|       |           * rewindaftersend indicates that something has told libcurl to
 4080|       |           * continue sending even if it gets discarded
 4081|       |           */
 4082|       |
 4083|     80|          switch(data->state.httpreq) {
 4084|      4|          case HTTPREQ_PUT:
 4085|      5|          case HTTPREQ_POST:
 4086|      5|          case HTTPREQ_POST_FORM:
 4087|      7|          case HTTPREQ_POST_MIME:
 4088|       |            /* We got an error response. If this happened before the whole
 4089|       |             * request body has been sent we stop sending and mark the
 4090|       |             * connection for closure after we've read the entire response.
 4091|       |             */
 4092|      7|            Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 4093|      7|            if(!k->upload_done) {
 4094|      5|              if((k->httpcode == 417) && data->state.expect100header) {
 4095|       |                /* 417 Expectation Failed - try again without the Expect
 4096|       |                   header */
 4097|      0|                infof(data, "Got 417 while waiting for a 100");
 4098|      0|                data->state.disableexpect = TRUE;
 4099|      0|                DEBUGASSERT(!data->req.newurl);
 4100|      0|                data->req.newurl = strdup(data->state.url);
 4101|      0|                Curl_done_sending(data, k);
 4102|      0|              }
 4103|      5|              else if(data->set.http_keep_sending_on_error) {
 4104|      0|                infof(data, "HTTP error before end of send, keep sending");
 4105|      0|                if(k->exp100 > EXP100_SEND_DATA) {
 4106|      0|                  k->exp100 = EXP100_SEND_DATA;
 4107|      0|                  k->keepon |= KEEP_SEND;
 4108|      0|                }
 4109|      0|              }
 4110|      5|              else {
 4111|      5|                infof(data, "HTTP error before end of send, stop sending");
 4112|      5|                streamclose(conn, "Stop sending data before everything sent");
 4113|      5|                result = Curl_done_sending(data, k);
 4114|      5|                if(result)
 4115|      0|                  return result;
 4116|      5|                k->upload_done = TRUE;
 4117|      5|                if(data->state.expect100header)
 4118|      1|                  k->exp100 = EXP100_FAILED;
 4119|      5|              }
 4120|      5|            }
 4121|      7|            break;
 4122|       |
 4123|     73|          default: /* default label present to avoid compiler warnings */
 4124|     73|            break;
 4125|     80|          }
 4126|     80|        }
 4127|       |
 4128|    322|        if(conn->bits.rewindaftersend) {
 4129|       |          /* We rewind after a complete send, so thus we continue
 4130|       |             sending now */
 4131|      0|          infof(data, "Keep sending data to get tossed away!");
 4132|      0|          k->keepon |= KEEP_SEND;
 4133|      0|        }
 4134|    322|      }
 4135|       |
 4136|    624|      if(!k->header) {
 4137|       |        /*
 4138|       |         * really end-of-headers.
 4139|       |         *
 4140|       |         * If we requested a "no body", this is a good time to get
 4141|       |         * out and return home.
 4142|       |         */
 4143|    602|        if(data->set.opt_no_body)
 4144|      2|          *stop_reading = TRUE;
 4145|    600|#ifndef CURL_DISABLE_RTSP
 4146|    600|        else if((conn->handler->protocol & CURLPROTO_RTSP) &&
 4147|    600|                (data->set.rtspreq == RTSPREQ_DESCRIBE) &&
 4148|    600|                (k->size <= -1))
 4149|       |          /* Respect section 4.4 of rfc2326: If the Content-Length header is
 4150|       |             absent, a length 0 must be assumed.  It will prevent libcurl from
 4151|       |             hanging on DESCRIBE request that got refused for whatever
 4152|       |             reason */
 4153|      0|          *stop_reading = TRUE;
 4154|    602|#endif
 4155|       |
 4156|       |        /* If max download size is *zero* (nothing) we already have
 4157|       |           nothing and can safely return ok now!  But for HTTP/2, we'd
 4158|       |           like to call http2_handle_stream_close to properly close a
 4159|       |           stream.  In order to do this, we keep reading until we
 4160|       |           close the stream. */
 4161|    602|        if(0 == k->maxdownload
 4162|    602|#if defined(USE_NGHTTP2)
 4163|    602|           && !((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
 4164|     27|                conn->httpversion == 20)
 4165|    602|#endif
 4166|    602|           )
 4167|     18|          *stop_reading = TRUE;
 4168|       |
 4169|    602|        if(*stop_reading) {
 4170|       |          /* we make sure that this socket isn't read more now */
 4171|     20|          k->keepon &= ~KEEP_RECV;
 4172|     20|        }
 4173|       |
 4174|    602|        Curl_debug(data, CURLINFO_HEADER_IN, str_start, headerlen);
 4175|    602|        break; /* exit header line loop */
 4176|    602|      }
 4177|       |
 4178|       |      /* We continue reading headers, reset the line-based header */
 4179|     22|      Curl_dyn_reset(&data->state.headerb);
 4180|     22|      continue;
 4181|    624|    }
 4182|       |
 4183|       |    /*
 4184|       |     * Checks for special headers coming up.
 4185|       |     */
 4186|       |
 4187|  17.4k|    if(!k->headerline++) {
 4188|       |      /* This is the first header, it MUST be the error code line
 4189|       |         or else we consider this to be the body right away! */
 4190|  1.09k|      int httpversion_major;
 4191|  1.09k|      int rtspversion_major;
 4192|  1.09k|      int nc = 0;
 4193|       |#ifdef CURL_DOES_CONVERSIONS
 4194|       |#define HEADER1 scratch
 4195|       |#define SCRATCHSIZE 21
 4196|       |      CURLcode res;
 4197|       |      char scratch[SCRATCHSIZE + 1]; /* "HTTP/major.minor 123" */
 4198|       |      /* We can't really convert this yet because we don't know if it's the
 4199|       |         1st header line or the body.  So we do a partial conversion into a
 4200|       |         scratch area, leaving the data at 'headp' as-is.
 4201|       |      */
 4202|       |      strncpy(&scratch[0], headp, SCRATCHSIZE);
 4203|       |      scratch[SCRATCHSIZE] = 0; /* null terminate */
 4204|       |      res = Curl_convert_from_network(data,
 4205|       |                                      &scratch[0],
 4206|       |                                      SCRATCHSIZE);
 4207|       |      if(res)
 4208|       |        /* Curl_convert_from_network calls failf if unsuccessful */
 4209|       |        return res;
 4210|       |#else
 4211|  1.09k|#define HEADER1 headp /* no conversion needed, just use headp */
 4212|  1.09k|#endif /* CURL_DOES_CONVERSIONS */
 4213|       |
 4214|  1.09k|      if(conn->handler->protocol & PROTO_FAMILY_HTTP) {
 4215|       |        /*
 4216|       |         * https://tools.ietf.org/html/rfc7230#section-3.1.2
 4217|       |         *
 4218|       |         * The response code is always a three-digit number in HTTP as the spec
 4219|       |         * says. We allow any three-digit number here, but we cannot make
 4220|       |         * guarantees on future behaviors since it isn't within the protocol.
 4221|       |         */
 4222|  1.09k|        char separator;
 4223|  1.09k|        char twoorthree[2];
 4224|  1.09k|        int httpversion = 0;
 4225|  1.09k|        char digit4 = 0;
 4226|  1.09k|        nc = sscanf(HEADER1,
 4227|  1.09k|                    " HTTP/%1d.%1d%c%3d%c",
 4228|  1.09k|                    &httpversion_major,
 4229|  1.09k|                    &httpversion,
 4230|  1.09k|                    &separator,
 4231|  1.09k|                    &k->httpcode,
 4232|  1.09k|                    &digit4);
 4233|       |
 4234|  1.09k|        if(nc == 1 && httpversion_major >= 2 &&
 4235|  1.09k|           2 == sscanf(HEADER1, " HTTP/%1[23] %d", twoorthree, &k->httpcode)) {
 4236|     38|          conn->httpversion = 0;
 4237|     38|          nc = 4;
 4238|     38|          separator = ' ';
 4239|     38|        }
 4240|       |
 4241|       |        /* There can only be a 4th response code digit stored in 'digit4' if
 4242|       |           all the other fields were parsed and stored first, so nc is 5 when
 4243|       |           digit4 a digit.
 4244|       |
 4245|       |           The sscanf() line above will also allow zero-prefixed and negative
 4246|       |           numbers, so we check for that too here.
 4247|       |        */
 4248|  1.05k|        else if(ISDIGIT(digit4) || (k->httpcode < 100)) {
 4249|      6|          failf(data, "Unsupported response code in HTTP response");
 4250|      6|          return CURLE_UNSUPPORTED_PROTOCOL;
 4251|      6|        }
 4252|       |
 4253|  1.09k|        if((nc >= 4) && (' ' == separator)) {
 4254|  1.08k|          httpversion += 10 * httpversion_major;
 4255|  1.08k|          switch(httpversion) {
 4256|     36|          case 10:
 4257|  1.02k|          case 11:
 4258|  1.02k|#if defined(USE_NGHTTP2) || defined(USE_HYPER)
 4259|  1.08k|          case 20:
 4260|  1.08k|#endif
 4261|       |#if defined(ENABLE_QUIC)
 4262|       |          case 30:
 4263|       |#endif
 4264|  1.08k|            conn->httpversion = (unsigned char)httpversion;
 4265|  1.08k|            break;
 4266|      2|          default:
 4267|      2|            failf(data, "Unsupported HTTP version (%u.%d) in response",
 4268|      2|                  httpversion/10, httpversion%10);
 4269|      2|            return CURLE_UNSUPPORTED_PROTOCOL;
 4270|  1.08k|          }
 4271|       |
 4272|  1.08k|          if(k->upgr101 == UPGR101_RECEIVED) {
 4273|       |            /* supposedly upgraded to http2 now */
 4274|      0|            if(conn->httpversion != 20)
 4275|      0|              infof(data, "Lying server, not serving HTTP/2");
 4276|      0|          }
 4277|  1.08k|          if(conn->httpversion < 20) {
 4278|  1.02k|            conn->bundle->multiuse = BUNDLE_NO_MULTIUSE;
 4279|  1.02k|            infof(data, "Mark bundle as not supporting multiuse");
 4280|  1.02k|          }
 4281|  1.08k|        }
 4282|      2|        else if(!nc) {
 4283|       |          /* this is the real world, not a Nirvana
 4284|       |             NCSA 1.5.x returns this crap when asked for HTTP/1.1
 4285|       |          */
 4286|      1|          nc = sscanf(HEADER1, " HTTP %3d", &k->httpcode);
 4287|      1|          conn->httpversion = 10;
 4288|       |
 4289|       |          /* If user has set option HTTP200ALIASES,
 4290|       |             compare header line against list of aliases
 4291|       |          */
 4292|      1|          if(!nc) {
 4293|      1|            statusline check =
 4294|      1|              checkhttpprefix(data,
 4295|      1|                              Curl_dyn_ptr(&data->state.headerb),
 4296|      1|                              Curl_dyn_len(&data->state.headerb));
 4297|      1|            if(check == STATUS_DONE) {
 4298|      1|              nc = 1;
 4299|      1|              k->httpcode = 200;
 4300|      1|              conn->httpversion = 10;
 4301|      1|            }
 4302|      1|          }
 4303|      1|        }
 4304|      1|        else {
 4305|      1|          failf(data, "Unsupported HTTP version in response");
 4306|      1|          return CURLE_UNSUPPORTED_PROTOCOL;
 4307|      1|        }
 4308|  1.09k|      }
 4309|      0|      else if(conn->handler->protocol & CURLPROTO_RTSP) {
 4310|      0|        char separator;
 4311|      0|        int rtspversion;
 4312|      0|        nc = sscanf(HEADER1,
 4313|      0|                    " RTSP/%1d.%1d%c%3d",
 4314|      0|                    &rtspversion_major,
 4315|      0|                    &rtspversion,
 4316|      0|                    &separator,
 4317|      0|                    &k->httpcode);
 4318|      0|        if((nc == 4) && (' ' == separator)) {
 4319|      0|          conn->httpversion = 11; /* For us, RTSP acts like HTTP 1.1 */
 4320|      0|        }
 4321|      0|        else {
 4322|      0|          nc = 0;
 4323|      0|        }
 4324|      0|      }
 4325|       |
 4326|  1.08k|      if(nc) {
 4327|  1.08k|        result = Curl_http_statusline(data, conn);
 4328|  1.08k|        if(result)
 4329|      0|          return result;
 4330|  1.08k|      }
 4331|      0|      else {
 4332|      0|        k->header = FALSE;   /* this is not a header line */
 4333|      0|        break;
 4334|      0|      }
 4335|  1.08k|    }
 4336|       |
 4337|  17.4k|    result = Curl_convert_from_network(data, headp, strlen(headp));
 4338|       |    /* Curl_convert_from_network calls failf if unsuccessful */
 4339|  17.4k|    if(result)
 4340|      0|      return result;
 4341|       |
 4342|  17.4k|    result = Curl_http_header(data, conn, headp);
 4343|  17.4k|    if(result)
 4344|      5|      return result;
 4345|       |
 4346|       |    /*
 4347|       |     * End of header-checks. Write them to the client.
 4348|       |     */
 4349|       |
 4350|  17.4k|    writetype = CLIENTWRITE_HEADER;
 4351|  17.4k|    if(data->set.include_header)
 4352|     23|      writetype |= CLIENTWRITE_BODY;
 4353|       |
 4354|  17.4k|    Curl_debug(data, CURLINFO_HEADER_IN, headp,
 4355|  17.4k|               Curl_dyn_len(&data->state.headerb));
 4356|       |
 4357|  17.4k|    result = Curl_client_write(data, writetype, headp,
 4358|  17.4k|                               Curl_dyn_len(&data->state.headerb));
 4359|  17.4k|    if(result)
 4360|      0|      return result;
 4361|       |
 4362|  17.4k|    data->info.header_size += Curl_dyn_len(&data->state.headerb);
 4363|  17.4k|    data->req.headerbytecount += Curl_dyn_len(&data->state.headerb);
 4364|       |
 4365|  17.4k|    Curl_dyn_reset(&data->state.headerb);
 4366|  17.4k|  }
 4367|  24.6k|  while(*k->str); /* header line within buffer */
 4368|       |
 4369|       |  /* We might have reached the end of the header part here, but
 4370|       |     there might be a non-header part left in the end of the read
 4371|       |     buffer. */
 4372|       |
 4373|  24.5k|  return CURLE_OK;
 4374|  24.6k|}
http.c:http_setup_conn:
  175|  2.35k|{
  176|       |  /* allocate the HTTP-specific struct for the Curl_easy, only to survive
  177|       |     during this request */
  178|  2.35k|  struct HTTP *http;
  179|  2.35k|  DEBUGASSERT(data->req.p.http == NULL);
  180|       |
  181|  2.35k|  http = calloc(1, sizeof(struct HTTP));
  182|  2.35k|  if(!http)
  183|      0|    return CURLE_OUT_OF_MEMORY;
  184|       |
  185|  2.35k|  Curl_mime_initpart(&http->form, data);
  186|  2.35k|  data->req.p.http = http;
  187|       |
  188|  2.35k|  if(data->state.httpwant == CURL_HTTP_VERSION_3) {
  189|      1|    if(conn->handler->flags & PROTOPT_SSL)
  190|       |      /* Only go HTTP/3 directly on HTTPS URLs. It needs a UDP socket and does
  191|       |         the QUIC dance. */
  192|      0|      conn->transport = TRNSPRT_QUIC;
  193|      1|    else {
  194|      1|      failf(data, "HTTP/3 requested for non-HTTPS URL");
  195|      1|      return CURLE_URL_MALFORMAT;
  196|      1|    }
  197|      1|  }
  198|  2.35k|  else {
  199|  2.35k|    if(!CONN_INUSE(conn))
  200|       |      /* if not already multi-using, setup connection details */
  201|  2.35k|      Curl_http2_setup_conn(conn);
  202|  2.35k|    Curl_http2_setup_req(data);
  203|  2.35k|  }
  204|  2.35k|  return CURLE_OK;
  205|  2.35k|}
http.c:pickoneauth:
  387|     62|{
  388|     62|  bool picked;
  389|       |  /* only deal with authentication we want */
  390|     62|  unsigned long avail = pick->avail & pick->want & mask;
  391|     62|  picked = TRUE;
  392|       |
  393|       |  /* The order of these checks is highly relevant, as this will be the order
  394|       |     of preference in case of the existence of multiple accepted types. */
  395|     62|  if(avail & CURLAUTH_NEGOTIATE)
  396|      0|    pick->picked = CURLAUTH_NEGOTIATE;
  397|     62|  else if(avail & CURLAUTH_BEARER)
  398|      0|    pick->picked = CURLAUTH_BEARER;
  399|     62|  else if(avail & CURLAUTH_DIGEST)
  400|     56|    pick->picked = CURLAUTH_DIGEST;
  401|      6|  else if(avail & CURLAUTH_NTLM)
  402|      0|    pick->picked = CURLAUTH_NTLM;
  403|      6|  else if(avail & CURLAUTH_NTLM_WB)
  404|      0|    pick->picked = CURLAUTH_NTLM_WB;
  405|      6|  else if(avail & CURLAUTH_BASIC)
  406|      0|    pick->picked = CURLAUTH_BASIC;
  407|      6|  else if(avail & CURLAUTH_AWS_SIGV4)
  408|      0|    pick->picked = CURLAUTH_AWS_SIGV4;
  409|      6|  else {
  410|      6|    pick->picked = CURLAUTH_PICKNONE; /* we select to use nothing */
  411|      6|    picked = FALSE;
  412|      6|  }
  413|     62|  pick->avail = CURLAUTH_NONE; /* clear it here */
  414|       |
  415|     62|  return picked;
  416|     62|}
http.c:http_perhapsrewind:
  443|    243|{
  444|    243|  struct HTTP *http = data->req.p.http;
  445|    243|  curl_off_t bytessent;
  446|    243|  curl_off_t expectsend = -1; /* default is unknown */
  447|       |
  448|    243|  if(!http)
  449|       |    /* If this is still NULL, we have not reach very far and we can safely
  450|       |       skip this rewinding stuff */
  451|      0|    return CURLE_OK;
  452|       |
  453|    243|  switch(data->state.httpreq) {
  454|    203|  case HTTPREQ_GET:
  455|    203|  case HTTPREQ_HEAD:
  456|    203|    return CURLE_OK;
  457|     40|  default:
  458|     40|    break;
  459|    243|  }
  460|       |
  461|     40|  bytessent = data->req.writebytecount;
  462|       |
  463|     40|  if(conn->bits.authneg) {
  464|       |    /* This is a state where we are known to be negotiating and we don't send
  465|       |       any data then. */
  466|     11|    expectsend = 0;
  467|     11|  }
  468|     29|  else if(!conn->bits.protoconnstart) {
  469|       |    /* HTTP CONNECT in progress: there is no body */
  470|      0|    expectsend = 0;
  471|      0|  }
  472|     29|  else {
  473|       |    /* figure out how much data we are expected to send */
  474|     29|    switch(data->state.httpreq) {
  475|      5|    case HTTPREQ_POST:
  476|     10|    case HTTPREQ_PUT:
  477|     10|      if(data->state.infilesize != -1)
  478|     10|        expectsend = data->state.infilesize;
  479|     10|      break;
  480|      0|    case HTTPREQ_POST_FORM:
  481|     19|    case HTTPREQ_POST_MIME:
  482|     19|      expectsend = http->postsize;
  483|     19|      break;
  484|      0|    default:
  485|      0|      break;
  486|     29|    }
  487|     29|  }
  488|       |
  489|     40|  conn->bits.rewindaftersend = FALSE; /* default */
  490|       |
  491|     40|  if((expectsend == -1) || (expectsend > bytessent)) {
  492|     17|#if defined(USE_NTLM)
  493|       |    /* There is still data left to send */
  494|     17|    if((data->state.authproxy.picked == CURLAUTH_NTLM) ||
  495|     17|       (data->state.authhost.picked == CURLAUTH_NTLM) ||
  496|     17|       (data->state.authproxy.picked == CURLAUTH_NTLM_WB) ||
  497|     17|       (data->state.authhost.picked == CURLAUTH_NTLM_WB)) {
  498|      0|      if(((expectsend - bytessent) < 2000) ||
  499|      0|         (conn->http_ntlm_state != NTLMSTATE_NONE) ||
  500|      0|         (conn->proxy_ntlm_state != NTLMSTATE_NONE)) {
  501|       |        /* The NTLM-negotiation has started *OR* there is just a little (<2K)
  502|       |           data left to send, keep on sending. */
  503|       |
  504|       |        /* rewind data when completely done sending! */
  505|      0|        if(!conn->bits.authneg && (conn->writesockfd != CURL_SOCKET_BAD)) {
  506|      0|          conn->bits.rewindaftersend = TRUE;
  507|      0|          infof(data, "Rewind stream after send");
  508|      0|        }
  509|       |
  510|      0|        return CURLE_OK;
  511|      0|      }
  512|       |
  513|      0|      if(conn->bits.close)
  514|       |        /* this is already marked to get closed */
  515|      0|        return CURLE_OK;
  516|       |
  517|      0|      infof(data, "NTLM send, close instead of sending %"
  518|      0|            CURL_FORMAT_CURL_OFF_T " bytes",
  519|      0|            (curl_off_t)(expectsend - bytessent));
  520|      0|    }
  521|     17|#endif
  522|       |#if defined(USE_SPNEGO)
  523|       |    /* There is still data left to send */
  524|       |    if((data->state.authproxy.picked == CURLAUTH_NEGOTIATE) ||
  525|       |       (data->state.authhost.picked == CURLAUTH_NEGOTIATE)) {
  526|       |      if(((expectsend - bytessent) < 2000) ||
  527|       |         (conn->http_negotiate_state != GSS_AUTHNONE) ||
  528|       |         (conn->proxy_negotiate_state != GSS_AUTHNONE)) {
  529|       |        /* The NEGOTIATE-negotiation has started *OR*
  530|       |        there is just a little (<2K) data left to send, keep on sending. */
  531|       |
  532|       |        /* rewind data when completely done sending! */
  533|       |        if(!conn->bits.authneg && (conn->writesockfd != CURL_SOCKET_BAD)) {
  534|       |          conn->bits.rewindaftersend = TRUE;
  535|       |          infof(data, "Rewind stream after send");
  536|       |        }
  537|       |
  538|       |        return CURLE_OK;
  539|       |      }
  540|       |
  541|       |      if(conn->bits.close)
  542|       |        /* this is already marked to get closed */
  543|       |        return CURLE_OK;
  544|       |
  545|       |      infof(data, "NEGOTIATE send, close instead of sending %"
  546|       |        CURL_FORMAT_CURL_OFF_T " bytes",
  547|       |        (curl_off_t)(expectsend - bytessent));
  548|       |    }
  549|       |#endif
  550|       |
  551|       |    /* This is not NEGOTIATE/NTLM or many bytes left to send: close */
  552|     17|    streamclose(conn, "Mid-auth HTTP and much data left to send");
  553|     17|    data->req.size = 0; /* don't download any more than 0 bytes */
  554|       |
  555|       |    /* There still is data left to send, but this connection is marked for
  556|       |       closure so we can safely do the rewind right now */
  557|     17|  }
  558|       |
  559|     40|  if(bytessent)
  560|       |    /* we rewind now at once since if we already sent something */
  561|      7|    return Curl_readrewind(data);
  562|       |
  563|     33|  return CURLE_OK;
  564|     40|}
http.c:output_auth_headers:
  667|    348|{
  668|    348|  const char *auth = NULL;
  669|    348|  CURLcode result = CURLE_OK;
  670|       |
  671|       |#ifdef CURL_DISABLE_CRYPTO_AUTH
  672|       |  (void)request;
  673|       |  (void)path;
  674|       |#endif
  675|    348|#ifndef CURL_DISABLE_CRYPTO_AUTH
  676|    348|  if(authstatus->picked == CURLAUTH_AWS_SIGV4) {
  677|     19|    auth = "AWS_SIGV4";
  678|     19|    result = Curl_output_aws_sigv4(data, proxy);
  679|     19|    if(result)
  680|      4|      return result;
  681|     19|  }
  682|    329|  else
  683|    329|#endif
  684|       |#ifdef USE_SPNEGO
  685|       |  if(authstatus->picked == CURLAUTH_NEGOTIATE) {
  686|       |    auth = "Negotiate";
  687|       |    result = Curl_output_negotiate(data, conn, proxy);
  688|       |    if(result)
  689|       |      return result;
  690|       |  }
  691|       |  else
  692|       |#endif
  693|    329|#ifdef USE_NTLM
  694|    329|  if(authstatus->picked == CURLAUTH_NTLM) {
  695|      2|    auth = "NTLM";
  696|      2|    result = Curl_output_ntlm(data, proxy);
  697|      2|    if(result)
  698|      0|      return result;
  699|      2|  }
  700|    327|  else
  701|    327|#endif
  702|    327|#if defined(USE_NTLM) && defined(NTLM_WB_ENABLED)
  703|    327|  if(authstatus->picked == CURLAUTH_NTLM_WB) {
  704|      3|    auth = "NTLM_WB";
  705|      3|    result = Curl_output_ntlm_wb(data, conn, proxy);
  706|      3|    if(result)
  707|      3|      return result;
  708|      3|  }
  709|    324|  else
  710|    324|#endif
  711|    324|#ifndef CURL_DISABLE_CRYPTO_AUTH
  712|    324|  if(authstatus->picked == CURLAUTH_DIGEST) {
  713|     95|    auth = "Digest";
  714|     95|    result = Curl_output_digest(data,
  715|     95|                                proxy,
  716|     95|                                (const unsigned char *)request,
  717|     95|                                (const unsigned char *)path);
  718|     95|    if(result)
  719|      0|      return result;
  720|     95|  }
  721|    229|  else
  722|    229|#endif
  723|    229|  if(authstatus->picked == CURLAUTH_BASIC) {
  724|       |    /* Basic */
  725|    201|    if(
  726|    201|#ifndef CURL_DISABLE_PROXY
  727|    201|      (proxy && conn->bits.proxy_user_passwd &&
  728|    201|       !Curl_checkProxyheaders(data, conn, "Proxy-authorization")) ||
  729|    201|#endif
  730|    201|      (!proxy && conn->bits.user_passwd &&
  731|    201|       !Curl_checkheaders(data, "Authorization"))) {
  732|    201|      auth = "Basic";
  733|    201|      result = http_output_basic(data, proxy);
  734|    201|      if(result)
  735|      0|        return result;
  736|    201|    }
  737|       |
  738|       |    /* NOTE: this function should set 'done' TRUE, as the other auth
  739|       |       functions work that way */
  740|    201|    authstatus->done = TRUE;
  741|    201|  }
  742|    341|  if(authstatus->picked == CURLAUTH_BEARER) {
  743|       |    /* Bearer */
  744|      1|    if((!proxy && data->set.str[STRING_BEARER] &&
  745|      1|        !Curl_checkheaders(data, "Authorization"))) {
  746|      0|      auth = "Bearer";
  747|      0|      result = http_output_bearer(data);
  748|      0|      if(result)
  749|      0|        return result;
  750|      0|    }
  751|       |
  752|       |    /* NOTE: this function should set 'done' TRUE, as the other auth
  753|       |       functions work that way */
  754|      1|    authstatus->done = TRUE;
  755|      1|  }
  756|       |
  757|    341|  if(auth) {
  758|    313|#ifndef CURL_DISABLE_PROXY
  759|    313|    infof(data, "%s auth using %s with user '%s'",
  760|    313|          proxy ? "Proxy" : "Server", auth,
  761|    313|          proxy ? (data->state.aptr.proxyuser ?
  762|      0|                   data->state.aptr.proxyuser : "") :
  763|    313|          (data->state.aptr.user ?
  764|    305|           data->state.aptr.user : ""));
  765|       |#else
  766|       |    infof(data, "Server auth using %s with user '%s'",
  767|       |          auth, data->state.aptr.user ?
  768|       |          data->state.aptr.user : "");
  769|       |#endif
  770|    313|    authstatus->multipass = (!authstatus->done) ? TRUE : FALSE;
  771|    313|  }
  772|     28|  else
  773|     28|    authstatus->multipass = FALSE;
  774|       |
  775|    341|  return CURLE_OK;
  776|    341|}
http.c:http_output_basic:
  300|    201|{
  301|    201|  size_t size = 0;
  302|    201|  char *authorization = NULL;
  303|    201|  char **userp;
  304|    201|  const char *user;
  305|    201|  const char *pwd;
  306|    201|  CURLcode result;
  307|    201|  char *out;
  308|       |
  309|       |  /* credentials are unique per transfer for HTTP, do not use the ones for the
  310|       |     connection */
  311|    201|  if(proxy) {
  312|      0|#ifndef CURL_DISABLE_PROXY
  313|      0|    userp = &data->state.aptr.proxyuserpwd;
  314|      0|    user = data->state.aptr.proxyuser;
  315|      0|    pwd = data->state.aptr.proxypasswd;
  316|       |#else
  317|       |    return CURLE_NOT_BUILT_IN;
  318|       |#endif
  319|      0|  }
  320|    201|  else {
  321|    201|    userp = &data->state.aptr.userpwd;
  322|    201|    user = data->state.aptr.user;
  323|    201|    pwd = data->state.aptr.passwd;
  324|    201|  }
  325|       |
  326|    201|  out = aprintf("%s:%s", user ? user : "", pwd ? pwd : "");
  327|    201|  if(!out)
  328|      0|    return CURLE_OUT_OF_MEMORY;
  329|       |
  330|    201|  result = Curl_base64_encode(data, out, strlen(out), &authorization, &size);
  331|    201|  if(result)
  332|      0|    goto fail;
  333|       |
  334|    201|  if(!authorization) {
  335|      0|    result = CURLE_REMOTE_ACCESS_DENIED;
  336|      0|    goto fail;
  337|      0|  }
  338|       |
  339|    201|  free(*userp);
  340|    201|  *userp = aprintf("%sAuthorization: Basic %s\r\n",
  341|    201|                   proxy ? "Proxy-" : "",
  342|    201|                   authorization);
  343|    201|  free(authorization);
  344|    201|  if(!*userp) {
  345|      0|    result = CURLE_OUT_OF_MEMORY;
  346|      0|    goto fail;
  347|      0|  }
  348|       |
  349|    201|  fail:
  350|    201|  free(out);
  351|    201|  return result;
  352|    201|}
http.c:is_valid_auth_separator:
  905|    145|{
  906|    145|  return ch == '\0' || ch == ',' || ISSPACE(ch);
  907|    145|}
http.c:http_should_fail:
 1088|  1.21k|{
 1089|  1.21k|  int httpcode;
 1090|  1.21k|  DEBUGASSERT(data);
 1091|  1.21k|  DEBUGASSERT(data->conn);
 1092|       |
 1093|  1.21k|  httpcode = data->req.httpcode;
 1094|       |
 1095|       |  /*
 1096|       |  ** If we haven't been asked to fail on error,
 1097|       |  ** don't fail.
 1098|       |  */
 1099|  1.21k|  if(!data->set.http_fail_on_error)
 1100|  1.21k|    return FALSE;
 1101|       |
 1102|       |  /*
 1103|       |  ** Any code < 400 is never terminal.
 1104|       |  */
 1105|      0|  if(httpcode < 400)
 1106|      0|    return FALSE;
 1107|       |
 1108|       |  /*
 1109|       |  ** A 416 response to a resume request is presumably because the file is
 1110|       |  ** already completely downloaded and thus not actually a fail.
 1111|       |  */
 1112|      0|  if(data->state.resume_from && data->state.httpreq == HTTPREQ_GET &&
 1113|      0|     httpcode == 416)
 1114|      0|    return FALSE;
 1115|       |
 1116|       |  /*
 1117|       |  ** Any code >= 400 that's not 401 or 407 is always
 1118|       |  ** a terminal error
 1119|       |  */
 1120|      0|  if((httpcode != 401) && (httpcode != 407))
 1121|      0|    return TRUE;
 1122|       |
 1123|       |  /*
 1124|       |  ** All we have left to deal with is 401 and 407
 1125|       |  */
 1126|      0|  DEBUGASSERT((httpcode == 401) || (httpcode == 407));
 1127|       |
 1128|       |  /*
 1129|       |  ** Examine the current authentication state to see if this
 1130|       |  ** is an error.  The idea is for this function to get
 1131|       |  ** called after processing all the headers in a response
 1132|       |  ** message.  So, if we've been to asked to authenticate a
 1133|       |  ** particular stage, and we've done it, we're OK.  But, if
 1134|       |  ** we're already completely authenticated, it's not OK to
 1135|       |  ** get another 401 or 407.
 1136|       |  **
 1137|       |  ** It is possible for authentication to go stale such that
 1138|       |  ** the client needs to reauthenticate.  Once that info is
 1139|       |  ** available, use it here.
 1140|       |  */
 1141|       |
 1142|       |  /*
 1143|       |  ** Either we're not authenticating, or we're supposed to
 1144|       |  ** be authenticating something else.  This is an error.
 1145|       |  */
 1146|      0|  if((httpcode == 401) && !data->conn->bits.user_passwd)
 1147|      0|    return TRUE;
 1148|      0|#ifndef CURL_DISABLE_PROXY
 1149|      0|  if((httpcode == 407) && !data->conn->bits.proxy_user_passwd)
 1150|      0|    return TRUE;
 1151|      0|#endif
 1152|       |
 1153|      0|  return data->state.authproblem;
 1154|      0|}
http.c:readmoredata:
 1169|      3|{
 1170|      3|  struct Curl_easy *data = (struct Curl_easy *)userp;
 1171|      3|  struct HTTP *http = data->req.p.http;
 1172|      3|  size_t fullsize = size * nitems;
 1173|       |
 1174|      3|  if(!http->postsize)
 1175|       |    /* nothing to return */
 1176|      0|    return 0;
 1177|       |
 1178|       |  /* make sure that a HTTP request is never sent away chunked! */
 1179|      3|  data->req.forbidchunk = (http->sending == HTTPSEND_REQUEST)?TRUE:FALSE;
 1180|       |
 1181|      3|  if(data->set.max_send_speed &&
 1182|      3|     (data->set.max_send_speed < (curl_off_t)fullsize) &&
 1183|      3|     (data->set.max_send_speed < http->postsize))
 1184|       |    /* speed limit */
 1185|      0|    fullsize = (size_t)data->set.max_send_speed;
 1186|       |
 1187|      3|  else if(http->postsize <= (curl_off_t)fullsize) {
 1188|      3|    memcpy(buffer, http->postdata, (size_t)http->postsize);
 1189|      3|    fullsize = (size_t)http->postsize;
 1190|       |
 1191|      3|    if(http->backup.postsize) {
 1192|       |      /* move backup data into focus and continue on that */
 1193|      0|      http->postdata = http->backup.postdata;
 1194|      0|      http->postsize = http->backup.postsize;
 1195|      0|      data->state.fread_func = http->backup.fread_func;
 1196|      0|      data->state.in = http->backup.fread_in;
 1197|       |
 1198|      0|      http->sending++; /* move one step up */
 1199|       |
 1200|      0|      http->backup.postsize = 0;
 1201|      0|    }
 1202|      3|    else
 1203|      3|      http->postsize = 0;
 1204|       |
 1205|      3|    return fullsize;
 1206|      3|  }
 1207|       |
 1208|      0|  memcpy(buffer, http->postdata, fullsize);
 1209|      0|  http->postdata += fullsize;
 1210|      0|  http->postsize -= fullsize;
 1211|       |
 1212|      0|  return fullsize;
 1213|      3|}
http.c:expect100:
 1710|     48|{
 1711|     48|  CURLcode result = CURLE_OK;
 1712|     48|  data->state.expect100header = FALSE; /* default to false unless it is set
 1713|       |                                          to TRUE below */
 1714|     48|  if(!data->state.disableexpect && Curl_use_http_1_1plus(data, conn) &&
 1715|     48|     (conn->httpversion < 20)) {
 1716|       |    /* if not doing HTTP 1.0 or version 2, or disabled explicitly, we add an
 1717|       |       Expect: 100-continue to the headers which actually speeds up post
 1718|       |       operations (as there is one packet coming back from the web server) */
 1719|     28|    const char *ptr = Curl_checkheaders(data, "Expect");
 1720|     28|    if(ptr) {
 1721|      0|      data->state.expect100header =
 1722|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 1723|      0|    }
 1724|     28|    else {
 1725|     28|      result = Curl_dyn_add(req, "Expect: 100-continue\r\n");
 1726|     28|      if(!result)
 1727|     28|        data->state.expect100header = TRUE;
 1728|     28|    }
 1729|     28|  }
 1730|       |
 1731|     48|  return result;
 1732|     48|}
http.c:get_http_string:
 1687|  2.29k|{
 1688|       |#ifdef ENABLE_QUIC
 1689|       |  if((data->state.httpwant == CURL_HTTP_VERSION_3) ||
 1690|       |     (conn->httpversion == 30))
 1691|       |    return "3";
 1692|       |#endif
 1693|       |
 1694|  2.29k|#ifdef USE_NGHTTP2
 1695|  2.29k|  if(conn->proto.httpc.h2)
 1696|    704|    return "2";
 1697|  1.59k|#endif
 1698|       |
 1699|  1.59k|  if(Curl_use_http_1_1plus(data, conn))
 1700|  1.58k|    return "1.1";
 1701|       |
 1702|      6|  return "1.0";
 1703|  1.59k|}
http.c:checkprotoprefix:
 3379|  23.7k|{
 3380|  23.7k|#ifndef CURL_DISABLE_RTSP
 3381|  23.7k|  if(conn->handler->protocol & CURLPROTO_RTSP)
 3382|      0|    return checkrtspprefix(data, s, len);
 3383|       |#else
 3384|       |  (void)conn;
 3385|       |#endif /* CURL_DISABLE_RTSP */
 3386|       |
 3387|  23.7k|  return checkhttpprefix(data, s, len);
 3388|  23.7k|}
http.c:checkprefixmax:
 3295|  23.7k|{
 3296|  23.7k|  size_t ch = CURLMIN(strlen(prefix), len);
 3297|  23.7k|  return curl_strnequal(prefix, buffer, ch);
 3298|  23.7k|}
http.c:checkhttpprefix:
 3308|  23.7k|{
 3309|  23.7k|  struct curl_slist *head = data->set.http200aliases;
 3310|  23.7k|  statusline rc = STATUS_BAD;
 3311|  23.7k|  statusline onmatch = len >= 5? STATUS_DONE : STATUS_UNKNOWN;
 3312|       |#ifdef CURL_DOES_CONVERSIONS
 3313|       |  /* convert from the network encoding using a scratch area */
 3314|       |  char *scratch = strdup(s);
 3315|       |  if(NULL == scratch) {
 3316|       |    failf(data, "Failed to allocate memory for conversion!");
 3317|       |    return FALSE; /* can't return CURLE_OUT_OF_MEMORY so return FALSE */
 3318|       |  }
 3319|       |  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s) + 1)) {
 3320|       |    /* Curl_convert_from_network calls failf if unsuccessful */
 3321|       |    free(scratch);
 3322|       |    return FALSE; /* can't return CURLE_foobar so return FALSE */
 3323|       |  }
 3324|       |  s = scratch;
 3325|       |#endif /* CURL_DOES_CONVERSIONS */
 3326|       |
 3327|  23.7k|  while(head) {
 3328|      0|    if(checkprefixmax(head->data, s, len)) {
 3329|      0|      rc = onmatch;
 3330|      0|      break;
 3331|      0|    }
 3332|      0|    head = head->next;
 3333|      0|  }
 3334|       |
 3335|  23.7k|  if((rc != STATUS_DONE) && (checkprefixmax("HTTP/", s, len)))
 3336|  23.7k|    rc = onmatch;
 3337|       |
 3338|       |#ifdef CURL_DOES_CONVERSIONS
 3339|       |  free(scratch);
 3340|       |#endif /* CURL_DOES_CONVERSIONS */
 3341|  23.7k|  return rc;
 3342|  23.7k|}

Curl_http2_init_state:
   83|  2.18k|{
   84|  2.18k|  state->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   85|  2.18k|}
Curl_http2_init_userset:
   92|  4.57k|{
   93|  4.57k|  set->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   94|  4.57k|}
Curl_http2_setup_req:
  287|  2.35k|{
  288|  2.35k|  struct HTTP *http = data->req.p.http;
  289|  2.35k|  http->bodystarted = FALSE;
  290|  2.35k|  http->status_code = -1;
  291|  2.35k|  http->pausedata = NULL;
  292|  2.35k|  http->pauselen = 0;
  293|  2.35k|  http->closed = FALSE;
  294|  2.35k|  http->close_handled = FALSE;
  295|  2.35k|  http->mem = NULL;
  296|  2.35k|  http->len = 0;
  297|  2.35k|  http->memlen = 0;
  298|  2.35k|  http->error = NGHTTP2_NO_ERROR;
  299|  2.35k|}
Curl_http2_setup_conn:
  303|  2.35k|{
  304|  2.35k|  conn->proto.httpc.settings.max_concurrent_streams =
  305|  2.35k|    DEFAULT_MAX_CONCURRENT_STREAMS;
  306|  2.35k|}
Curl_http2_done:
 1206|  2.30k|{
 1207|  2.30k|  struct HTTP *http = data->req.p.http;
 1208|  2.30k|  struct http_conn *httpc = &data->conn->proto.httpc;
 1209|       |
 1210|       |  /* there might be allocated resources done before this got the 'h2' pointer
 1211|       |     setup */
 1212|  2.30k|  Curl_dyn_free(&http->header_recvbuf);
 1213|  2.30k|  Curl_dyn_free(&http->trailer_recvbuf);
 1214|  2.30k|  if(http->push_headers) {
 1215|       |    /* if they weren't used and then freed before */
 1216|      0|    for(; http->push_headers_used > 0; --http->push_headers_used) {
 1217|      0|      free(http->push_headers[http->push_headers_used - 1]);
 1218|      0|    }
 1219|      0|    free(http->push_headers);
 1220|      0|    http->push_headers = NULL;
 1221|      0|  }
 1222|       |
 1223|  2.30k|  if(!(data->conn->handler->protocol&PROTO_FAMILY_HTTP) ||
 1224|  2.30k|     !httpc->h2) /* not HTTP/2 ? */
 1225|  1.60k|    return;
 1226|       |
 1227|    704|  if(premature) {
 1228|       |    /* RST_STREAM */
 1229|    449|    set_transfer(httpc, data); /* set the transfer */
 1230|    449|    if(!nghttp2_submit_rst_stream(httpc->h2, NGHTTP2_FLAG_NONE,
 1231|    449|                                  http->stream_id, NGHTTP2_STREAM_CLOSED))
 1232|    384|      (void)nghttp2_session_send(httpc->h2);
 1233|       |
 1234|    449|    if(http->stream_id == httpc->pause_stream_id) {
 1235|    447|      infof(data, "stopped the pause stream!");
 1236|    447|      httpc->pause_stream_id = 0;
 1237|    447|    }
 1238|    449|  }
 1239|       |
 1240|    704|  if(data->state.drain)
 1241|    391|    drained_transfer(data, httpc);
 1242|       |
 1243|       |  /* -1 means unassigned and 0 means cleared */
 1244|    704|  if(http->stream_id > 0) {
 1245|    221|    int rv = nghttp2_session_set_stream_user_data(httpc->h2,
 1246|    221|                                                  http->stream_id, 0);
 1247|    221|    if(rv) {
 1248|      0|      infof(data, "http/2: failed to clear user_data for stream %d!",
 1249|      0|            http->stream_id);
 1250|      0|      DEBUGASSERT(0);
 1251|      0|    }
 1252|    221|    set_transfer(httpc, NULL);
 1253|    221|    http->stream_id = 0;
 1254|    221|  }
 1255|    704|}
Curl_http2_request_upgrade:
 1314|      1|{
 1315|      1|  CURLcode result;
 1316|      1|  ssize_t binlen;
 1317|      1|  char *base64;
 1318|      1|  size_t blen;
 1319|      1|  struct connectdata *conn = data->conn;
 1320|      1|  struct SingleRequest *k = &data->req;
 1321|      1|  uint8_t *binsettings = conn->proto.httpc.binsettings;
 1322|      1|  struct http_conn *httpc = &conn->proto.httpc;
 1323|       |
 1324|      1|  populate_settings(data, httpc);
 1325|       |
 1326|       |  /* this returns number of bytes it wrote */
 1327|      1|  binlen = nghttp2_pack_settings_payload(binsettings, H2_BINSETTINGS_LEN,
 1328|      1|                                         httpc->local_settings,
 1329|      1|                                         httpc->local_settings_num);
 1330|      1|  if(binlen <= 0) {
 1331|      0|    failf(data, "nghttp2 unexpectedly failed on pack_settings_payload");
 1332|      0|    Curl_dyn_free(req);
 1333|      0|    return CURLE_FAILED_INIT;
 1334|      0|  }
 1335|      1|  conn->proto.httpc.binlen = binlen;
 1336|       |
 1337|      1|  result = Curl_base64url_encode(data, (const char *)binsettings, binlen,
 1338|      1|                                 &base64, &blen);
 1339|      1|  if(result) {
 1340|      0|    Curl_dyn_free(req);
 1341|      0|    return result;
 1342|      0|  }
 1343|       |
 1344|      1|  result = Curl_dyn_addf(req,
 1345|      1|                         "Connection: Upgrade, HTTP2-Settings\r\n"
 1346|      1|                         "Upgrade: %s\r\n"
 1347|      1|                         "HTTP2-Settings: %s\r\n",
 1348|      1|                         NGHTTP2_CLEARTEXT_PROTO_VERSION_ID, base64);
 1349|      1|  free(base64);
 1350|       |
 1351|      1|  k->upgr101 = UPGR101_REQUESTED;
 1352|       |
 1353|      1|  return result;
 1354|      1|}
Curl_http2_done_sending:
 1442|    111|{
 1443|    111|  CURLcode result = CURLE_OK;
 1444|       |
 1445|    111|  if((conn->handler == &Curl_handler_http2_ssl) ||
 1446|    111|     (conn->handler == &Curl_handler_http2)) {
 1447|       |    /* make sure this is only attempted for HTTP/2 transfers */
 1448|     11|    struct HTTP *stream = data->req.p.http;
 1449|     11|    struct http_conn *httpc = &conn->proto.httpc;
 1450|     11|    nghttp2_session *h2 = httpc->h2;
 1451|       |
 1452|     11|    if(stream->upload_left) {
 1453|       |      /* If the stream still thinks there's data left to upload. */
 1454|       |
 1455|      3|      stream->upload_left = 0; /* DONE! */
 1456|       |
 1457|       |      /* resume sending here to trigger the callback to get called again so
 1458|       |         that it can signal EOF to nghttp2 */
 1459|      3|      (void)nghttp2_session_resume_data(h2, stream->stream_id);
 1460|      3|      (void)h2_process_pending_input(data, httpc, &result);
 1461|      3|    }
 1462|       |
 1463|       |    /* If nghttp2 still has pending frames unsent */
 1464|     11|    if(nghttp2_session_want_write(h2)) {
 1465|      0|      struct SingleRequest *k = &data->req;
 1466|      0|      int rv;
 1467|       |
 1468|      0|      H2BUGF(infof(data, "HTTP/2 still wants to send data (easy %p)", data));
 1469|       |
 1470|       |      /* and attempt to send the pending frames */
 1471|      0|      rv = h2_session_send(data, h2);
 1472|      0|      if(rv)
 1473|      0|        result = CURLE_SEND_ERROR;
 1474|       |
 1475|      0|      if(nghttp2_session_want_write(h2)) {
 1476|       |         /* re-set KEEP_SEND to make sure we are called again */
 1477|      0|         k->keepon |= KEEP_SEND;
 1478|      0|      }
 1479|      0|    }
 1480|     11|  }
 1481|    111|  return result;
 1482|    111|}
Curl_http2_setup:
 2222|    704|{
 2223|    704|  CURLcode result;
 2224|    704|  struct http_conn *httpc = &conn->proto.httpc;
 2225|    704|  struct HTTP *stream = data->req.p.http;
 2226|       |
 2227|    704|  DEBUGASSERT(data->state.buffer);
 2228|       |
 2229|    704|  stream->stream_id = -1;
 2230|       |
 2231|    704|  Curl_dyn_init(&stream->header_recvbuf, DYN_H2_HEADERS);
 2232|    704|  Curl_dyn_init(&stream->trailer_recvbuf, DYN_H2_TRAILERS);
 2233|       |
 2234|    704|  stream->upload_left = 0;
 2235|    704|  stream->upload_mem = NULL;
 2236|    704|  stream->upload_len = 0;
 2237|    704|  stream->mem = data->state.buffer;
 2238|    704|  stream->len = data->set.buffer_size;
 2239|       |
 2240|    704|  multi_connchanged(data->multi);
 2241|       |  /* below this point only connection related inits are done, which only needs
 2242|       |     to be done once per connection */
 2243|       |
 2244|    704|  if((conn->handler == &Curl_handler_http2_ssl) ||
 2245|    704|     (conn->handler == &Curl_handler_http2))
 2246|      0|    return CURLE_OK; /* already done */
 2247|       |
 2248|    704|  if(conn->handler->flags & PROTOPT_SSL)
 2249|      0|    conn->handler = &Curl_handler_http2_ssl;
 2250|    704|  else
 2251|    704|    conn->handler = &Curl_handler_http2;
 2252|       |
 2253|    704|  result = http2_init(data, conn);
 2254|    704|  if(result) {
 2255|      0|    Curl_dyn_free(&stream->header_recvbuf);
 2256|      0|    return result;
 2257|      0|  }
 2258|       |
 2259|    704|  infof(data, "Using HTTP2, server supports multiplexing");
 2260|       |
 2261|    704|  conn->bits.multiplex = TRUE; /* at least potentially multiplexed */
 2262|    704|  conn->httpversion = 20;
 2263|    704|  conn->bundle->multiuse = BUNDLE_MULTIPLEX;
 2264|       |
 2265|    704|  httpc->inbuflen = 0;
 2266|    704|  httpc->nread_inbuf = 0;
 2267|       |
 2268|    704|  httpc->pause_stream_id = 0;
 2269|    704|  httpc->drain_total = 0;
 2270|       |
 2271|    704|  infof(data, "Connection state changed (HTTP/2 confirmed)");
 2272|       |
 2273|    704|  return CURLE_OK;
 2274|    704|}
Curl_http2_switched:
 2278|    704|{
 2279|    704|  CURLcode result;
 2280|    704|  struct connectdata *conn = data->conn;
 2281|    704|  struct http_conn *httpc = &conn->proto.httpc;
 2282|    704|  int rv;
 2283|    704|  struct HTTP *stream = data->req.p.http;
 2284|       |
 2285|    704|  result = Curl_http2_setup(data, conn);
 2286|    704|  if(result)
 2287|      0|    return result;
 2288|       |
 2289|    704|  httpc->recv_underlying = conn->recv[FIRSTSOCKET];
 2290|    704|  httpc->send_underlying = conn->send[FIRSTSOCKET];
 2291|    704|  conn->recv[FIRSTSOCKET] = http2_recv;
 2292|    704|  conn->send[FIRSTSOCKET] = http2_send;
 2293|       |
 2294|    704|  if(data->req.upgr101 == UPGR101_RECEIVED) {
 2295|       |    /* stream 1 is opened implicitly on upgrade */
 2296|      0|    stream->stream_id = 1;
 2297|       |    /* queue SETTINGS frame (again) */
 2298|      0|    rv = nghttp2_session_upgrade2(httpc->h2, httpc->binsettings, httpc->binlen,
 2299|      0|                                  data->state.httpreq == HTTPREQ_HEAD, NULL);
 2300|      0|    if(rv) {
 2301|      0|      failf(data, "nghttp2_session_upgrade2() failed: %s(%d)",
 2302|      0|            nghttp2_strerror(rv), rv);
 2303|      0|      return CURLE_HTTP2;
 2304|      0|    }
 2305|       |
 2306|      0|    rv = nghttp2_session_set_stream_user_data(httpc->h2,
 2307|      0|                                              stream->stream_id,
 2308|      0|                                              data);
 2309|      0|    if(rv) {
 2310|      0|      infof(data, "http/2: failed to set user_data for stream %d!",
 2311|      0|            stream->stream_id);
 2312|      0|      DEBUGASSERT(0);
 2313|      0|    }
 2314|      0|  }
 2315|    704|  else {
 2316|    704|    populate_settings(data, httpc);
 2317|       |
 2318|       |    /* stream ID is unknown at this point */
 2319|    704|    stream->stream_id = -1;
 2320|    704|    rv = nghttp2_submit_settings(httpc->h2, NGHTTP2_FLAG_NONE,
 2321|    704|                                 httpc->local_settings,
 2322|    704|                                 httpc->local_settings_num);
 2323|    704|    if(rv) {
 2324|      0|      failf(data, "nghttp2_submit_settings() failed: %s(%d)",
 2325|      0|            nghttp2_strerror(rv), rv);
 2326|      0|      return CURLE_HTTP2;
 2327|      0|    }
 2328|    704|  }
 2329|       |
 2330|    704|  rv = nghttp2_session_set_local_window_size(httpc->h2, NGHTTP2_FLAG_NONE, 0,
 2331|    704|                                             HTTP2_HUGE_WINDOW_SIZE);
 2332|    704|  if(rv) {
 2333|      0|    failf(data, "nghttp2_session_set_local_window_size() failed: %s(%d)",
 2334|      0|          nghttp2_strerror(rv), rv);
 2335|      0|    return CURLE_HTTP2;
 2336|      0|  }
 2337|       |
 2338|       |  /* we are going to copy mem to httpc->inbuf.  This is required since
 2339|       |     mem is part of buffer pointed by stream->mem, and callbacks
 2340|       |     called by nghttp2_session_mem_recv() will write stream specific
 2341|       |     data into stream->mem, overwriting data already there. */
 2342|    704|  if(H2_BUFSIZE < nread) {
 2343|      0|    failf(data, "connection buffer size is too small to store data following "
 2344|      0|          "HTTP Upgrade response header: buflen=%d, datalen=%zu",
 2345|      0|          H2_BUFSIZE, nread);
 2346|      0|    return CURLE_HTTP2;
 2347|      0|  }
 2348|       |
 2349|    704|  infof(data, "Copying HTTP/2 data in stream buffer to connection buffer"
 2350|    704|        " after upgrade: len=%zu",
 2351|    704|        nread);
 2352|       |
 2353|    704|  if(nread)
 2354|      0|    memcpy(httpc->inbuf, mem, nread);
 2355|       |
 2356|    704|  httpc->inbuflen = nread;
 2357|       |
 2358|    704|  DEBUGASSERT(httpc->nread_inbuf == 0);
 2359|       |
 2360|    704|  if(-1 == h2_process_pending_input(data, httpc, &result))
 2361|      0|    return CURLE_HTTP2;
 2362|       |
 2363|    704|  return CURLE_OK;
 2364|    704|}
Curl_http2_cleanup_dependencies:
 2482|  4.57k|{
 2483|  4.57k|  while(data->set.stream_dependents) {
 2484|      0|    struct Curl_easy *tmp = data->set.stream_dependents->data;
 2485|      0|    Curl_http2_remove_child(data, tmp);
 2486|      0|    if(data->set.stream_depends_on)
 2487|      0|      Curl_http2_add_child(data->set.stream_depends_on, tmp, FALSE);
 2488|      0|  }
 2489|       |
 2490|  4.57k|  if(data->set.stream_depends_on)
 2491|      0|    Curl_http2_remove_child(data->set.stream_depends_on, data);
 2492|  4.57k|}
Curl_h2_http_1_1_error:
 2497|    417|{
 2498|    417|  struct HTTP *stream = data->req.p.http;
 2499|    417|  return (stream->error == NGHTTP2_HTTP_1_1_REQUIRED);
 2500|    417|}
http2.c:set_transfer:
  226|  3.73k|{
  227|  3.73k|  c->trnsfr = data;
  228|  3.73k|}
http2.c:drained_transfer:
  468|    480|{
  469|    480|  DEBUGASSERT(httpc->drain_total >= data->state.drain);
  470|    480|  httpc->drain_total -= data->state.drain;
  471|    480|  data->state.drain = 0;
  472|    480|}
http2.c:populate_settings:
 1190|    705|{
 1191|    705|  nghttp2_settings_entry *iv = httpc->local_settings;
 1192|       |
 1193|    705|  iv[0].settings_id = NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS;
 1194|    705|  iv[0].value = Curl_multi_max_concurrent_streams(data->multi);
 1195|       |
 1196|    705|  iv[1].settings_id = NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE;
 1197|    705|  iv[1].value = HTTP2_HUGE_WINDOW_SIZE;
 1198|       |
 1199|    705|  iv[2].settings_id = NGHTTP2_SETTINGS_ENABLE_PUSH;
 1200|    705|  iv[2].value = data->multi->push_cb != NULL;
 1201|       |
 1202|    705|  httpc->local_settings_num = 3;
 1203|    705|}
http2.c:http2_getsock:
   99|    154|{
  100|    154|  const struct http_conn *c = &conn->proto.httpc;
  101|    154|  struct SingleRequest *k = &data->req;
  102|    154|  int bitmap = GETSOCK_BLANK;
  103|    154|  struct HTTP *stream = data->req.p.http;
  104|       |
  105|    154|  sock[0] = conn->sock[FIRSTSOCKET];
  106|       |
  107|    154|  if(!(k->keepon & KEEP_RECV_PAUSE))
  108|       |    /* Unless paused - in a HTTP/2 connection we can basically always get a
  109|       |       frame so we should always be ready for one */
  110|    154|    bitmap |= GETSOCK_READSOCK(FIRSTSOCKET);
  111|       |
  112|       |  /* we're (still uploading OR the HTTP/2 layer wants to send data) AND
  113|       |     there's a window to send data in */
  114|    154|  if((((k->keepon & (KEEP_SEND|KEEP_SEND_PAUSE)) == KEEP_SEND) ||
  115|    154|      nghttp2_session_want_write(c->h2)) &&
  116|    154|     (nghttp2_session_get_remote_window_size(c->h2) &&
  117|     18|      nghttp2_session_get_stream_remote_window_size(c->h2,
  118|     18|                                                    stream->stream_id)))
  119|      1|    bitmap |= GETSOCK_WRITESOCK(FIRSTSOCKET);
  120|       |
  121|    154|  return bitmap;
  122|    154|}
http2.c:http2_disconnect:
  147|    704|{
  148|    704|  struct http_conn *c = &conn->proto.httpc;
  149|    704|  (void)dead_connection;
  150|    704|#ifndef DEBUG_HTTP2
  151|    704|  (void)data;
  152|    704|#endif
  153|       |
  154|    704|  H2BUGF(infof(data, "HTTP/2 DISCONNECT starts now"));
  155|       |
  156|    704|  nghttp2_session_del(c->h2);
  157|    704|  Curl_safefree(c->inbuf);
  158|       |
  159|    704|  H2BUGF(infof(data, "HTTP/2 DISCONNECT done"));
  160|       |
  161|    704|  return CURLE_OK;
  162|    704|}
http2.c:h2_process_pending_input:
 1374|  1.17k|{
 1375|  1.17k|  ssize_t nread;
 1376|  1.17k|  char *inbuf;
 1377|  1.17k|  ssize_t rv;
 1378|       |
 1379|  1.17k|  nread = httpc->inbuflen - httpc->nread_inbuf;
 1380|  1.17k|  inbuf = httpc->inbuf + httpc->nread_inbuf;
 1381|       |
 1382|  1.17k|  set_transfer(httpc, data); /* set the transfer */
 1383|  1.17k|  rv = nghttp2_session_mem_recv(httpc->h2, (const uint8_t *)inbuf, nread);
 1384|  1.17k|  if(rv < 0) {
 1385|      0|    failf(data,
 1386|      0|          "h2_process_pending_input: nghttp2_session_mem_recv() returned "
 1387|      0|          "%zd:%s", rv, nghttp2_strerror((int)rv));
 1388|      0|    *err = CURLE_RECV_ERROR;
 1389|      0|    return -1;
 1390|      0|  }
 1391|       |
 1392|  1.17k|  if(nread == rv) {
 1393|  1.17k|    H2BUGF(infof(data,
 1394|  1.17k|                 "h2_process_pending_input: All data in connection buffer "
 1395|  1.17k|                 "processed"));
 1396|  1.17k|    httpc->inbuflen = 0;
 1397|  1.17k|    httpc->nread_inbuf = 0;
 1398|  1.17k|  }
 1399|      0|  else {
 1400|      0|    httpc->nread_inbuf += rv;
 1401|      0|    H2BUGF(infof(data,
 1402|      0|                 "h2_process_pending_input: %zu bytes left in connection "
 1403|      0|                 "buffer",
 1404|      0|                 httpc->inbuflen - httpc->nread_inbuf));
 1405|      0|  }
 1406|       |
 1407|  1.17k|  rv = h2_session_send(data, httpc->h2);
 1408|  1.17k|  if(rv) {
 1409|      0|    *err = CURLE_SEND_ERROR;
 1410|      0|    return -1;
 1411|      0|  }
 1412|       |
 1413|  1.17k|  if(nghttp2_session_check_request_allowed(httpc->h2) == 0) {
 1414|       |    /* No more requests are allowed in the current session, so
 1415|       |       the connection may not be reused. This is set when a
 1416|       |       GOAWAY frame has been received or when the limit of stream
 1417|       |       identifiers has been reached. */
 1418|    253|    connclose(data->conn, "http/2: No new requests allowed");
 1419|    253|  }
 1420|       |
 1421|  1.17k|  if(should_close_session(httpc)) {
 1422|    226|    struct HTTP *stream = data->req.p.http;
 1423|    226|    H2BUGF(infof(data,
 1424|    226|                 "h2_process_pending_input: nothing to do in this session"));
 1425|    226|    if(stream->error)
 1426|     14|      *err = CURLE_HTTP2;
 1427|    212|    else {
 1428|       |      /* not an error per se, but should still close the connection */
 1429|    212|      connclose(data->conn, "GOAWAY received");
 1430|    212|      *err = CURLE_OK;
 1431|    212|    }
 1432|    226|    return -1;
 1433|    226|  }
 1434|    950|  return 0;
 1435|  1.17k|}
http2.c:should_close_session:
 1360|  23.5k|{
 1361|  23.5k|  return httpc->drain_total == 0 && !nghttp2_session_want_read(httpc->h2) &&
 1362|  23.5k|    !nghttp2_session_want_write(httpc->h2);
 1363|  23.5k|}
http2.c:h2_session_send:
 1586|  1.88k|{
 1587|  1.88k|  struct HTTP *stream = data->req.p.http;
 1588|  1.88k|  struct http_conn *httpc = &data->conn->proto.httpc;
 1589|  1.88k|  set_transfer(httpc, data);
 1590|  1.88k|  if((data->set.stream_weight != data->state.stream_weight) ||
 1591|  1.88k|     (data->set.stream_depends_e != data->state.stream_depends_e) ||
 1592|  1.88k|     (data->set.stream_depends_on != data->state.stream_depends_on) ) {
 1593|       |    /* send new weight and/or dependency */
 1594|      0|    nghttp2_priority_spec pri_spec;
 1595|      0|    int rv;
 1596|       |
 1597|      0|    h2_pri_spec(data, &pri_spec);
 1598|       |
 1599|      0|    H2BUGF(infof(data, "Queuing PRIORITY on stream %u (easy %p)",
 1600|      0|                 stream->stream_id, data));
 1601|      0|    DEBUGASSERT(stream->stream_id != -1);
 1602|      0|    rv = nghttp2_submit_priority(h2, NGHTTP2_FLAG_NONE, stream->stream_id,
 1603|      0|                                 &pri_spec);
 1604|      0|    if(rv)
 1605|      0|      return rv;
 1606|      0|  }
 1607|       |
 1608|  1.88k|  return nghttp2_session_send(h2);
 1609|  1.88k|}
http2.c:h2_pri_spec:
 1568|    678|{
 1569|    678|  struct HTTP *depstream = (data->set.stream_depends_on?
 1570|      0|                            data->set.stream_depends_on->req.p.http:NULL);
 1571|    678|  int32_t depstream_id = depstream? depstream->stream_id:0;
 1572|    678|  nghttp2_priority_spec_init(pri_spec, depstream_id, data->set.stream_weight,
 1573|    678|                             data->set.stream_depends_e);
 1574|    678|  data->state.stream_weight = data->set.stream_weight;
 1575|    678|  data->state.stream_depends_e = data->set.stream_depends_e;
 1576|    678|  data->state.stream_depends_on = data->set.stream_depends_on;
 1577|    678|}
http2.c:multi_connchanged:
  666|    917|{
  667|    917|  multi->recheckstate = TRUE;
  668|    917|}
http2.c:http2_init:
 1261|    704|{
 1262|    704|  if(!conn->proto.httpc.h2) {
 1263|    704|    int rc;
 1264|    704|    nghttp2_session_callbacks *callbacks;
 1265|       |
 1266|    704|    conn->proto.httpc.inbuf = malloc(H2_BUFSIZE);
 1267|    704|    if(!conn->proto.httpc.inbuf)
 1268|      0|      return CURLE_OUT_OF_MEMORY;
 1269|       |
 1270|    704|    rc = nghttp2_session_callbacks_new(&callbacks);
 1271|       |
 1272|    704|    if(rc) {
 1273|      0|      failf(data, "Couldn't initialize nghttp2 callbacks!");
 1274|      0|      return CURLE_OUT_OF_MEMORY; /* most likely at least */
 1275|      0|    }
 1276|       |
 1277|       |    /* nghttp2_send_callback */
 1278|    704|    nghttp2_session_callbacks_set_send_callback(callbacks, send_callback);
 1279|       |    /* nghttp2_on_frame_recv_callback */
 1280|    704|    nghttp2_session_callbacks_set_on_frame_recv_callback
 1281|    704|      (callbacks, on_frame_recv);
 1282|       |    /* nghttp2_on_data_chunk_recv_callback */
 1283|    704|    nghttp2_session_callbacks_set_on_data_chunk_recv_callback
 1284|    704|      (callbacks, on_data_chunk_recv);
 1285|       |    /* nghttp2_on_stream_close_callback */
 1286|    704|    nghttp2_session_callbacks_set_on_stream_close_callback
 1287|    704|      (callbacks, on_stream_close);
 1288|       |    /* nghttp2_on_begin_headers_callback */
 1289|    704|    nghttp2_session_callbacks_set_on_begin_headers_callback
 1290|    704|      (callbacks, on_begin_headers);
 1291|       |    /* nghttp2_on_header_callback */
 1292|    704|    nghttp2_session_callbacks_set_on_header_callback(callbacks, on_header);
 1293|       |
 1294|    704|    nghttp2_session_callbacks_set_error_callback(callbacks, error_callback);
 1295|       |
 1296|       |    /* The nghttp2 session is not yet setup, do it */
 1297|    704|    rc = nghttp2_session_client_new(&conn->proto.httpc.h2, callbacks, conn);
 1298|       |
 1299|    704|    nghttp2_session_callbacks_del(callbacks);
 1300|       |
 1301|    704|    if(rc) {
 1302|      0|      failf(data, "Couldn't initialize nghttp2!");
 1303|      0|      return CURLE_OUT_OF_MEMORY; /* most likely at least */
 1304|      0|    }
 1305|    704|  }
 1306|    704|  return CURLE_OK;
 1307|    704|}
http2.c:send_callback:
  376|  3.69k|{
  377|  3.69k|  struct connectdata *conn = (struct connectdata *)userp;
  378|  3.69k|  struct http_conn *c = &conn->proto.httpc;
  379|  3.69k|  struct Curl_easy *data = get_transfer(c);
  380|  3.69k|  ssize_t written;
  381|  3.69k|  CURLcode result = CURLE_OK;
  382|       |
  383|  3.69k|  (void)h2;
  384|  3.69k|  (void)flags;
  385|       |
  386|  3.69k|  if(!c->send_underlying)
  387|       |    /* called before setup properly! */
  388|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  389|       |
  390|  3.69k|  written = ((Curl_send*)c->send_underlying)(data, FIRSTSOCKET,
  391|  3.69k|                                             mem, length, &result);
  392|       |
  393|  3.69k|  if(result == CURLE_AGAIN) {
  394|      0|    return NGHTTP2_ERR_WOULDBLOCK;
  395|      0|  }
  396|       |
  397|  3.69k|  if(written == -1) {
  398|      0|    failf(data, "Failed sending HTTP2 data");
  399|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  400|      0|  }
  401|       |
  402|  3.69k|  if(!written)
  403|      0|    return NGHTTP2_ERR_WOULDBLOCK;
  404|       |
  405|  3.69k|  return written;
  406|  3.69k|}
http2.c:get_transfer:
  234|  5.60k|{
  235|  5.60k|  DEBUGASSERT(c && c->trnsfr);
  236|  5.60k|  return c->trnsfr;
  237|  5.60k|}
http2.c:on_frame_recv:
  672|    624|{
  673|    624|  struct connectdata *conn = (struct connectdata *)userp;
  674|    624|  struct http_conn *httpc = &conn->proto.httpc;
  675|    624|  struct Curl_easy *data_s = NULL;
  676|    624|  struct HTTP *stream = NULL;
  677|    624|  struct Curl_easy *data = get_transfer(httpc);
  678|    624|  int rv;
  679|    624|  size_t left, ncopy;
  680|    624|  int32_t stream_id = frame->hd.stream_id;
  681|    624|  CURLcode result;
  682|       |
  683|    624|  if(!stream_id) {
  684|       |    /* stream ID zero is for connection-oriented stuff */
  685|    582|    if(frame->hd.type == NGHTTP2_SETTINGS) {
  686|    560|      uint32_t max_conn = httpc->settings.max_concurrent_streams;
  687|    560|      H2BUGF(infof(data, "Got SETTINGS"));
  688|    560|      httpc->settings.max_concurrent_streams =
  689|    560|        nghttp2_session_get_remote_settings(
  690|    560|          session, NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS);
  691|    560|      httpc->settings.enable_push =
  692|    560|        nghttp2_session_get_remote_settings(
  693|    560|          session, NGHTTP2_SETTINGS_ENABLE_PUSH);
  694|    560|      H2BUGF(infof(data, "MAX_CONCURRENT_STREAMS == %d",
  695|    560|                   httpc->settings.max_concurrent_streams));
  696|    560|      H2BUGF(infof(data, "ENABLE_PUSH == %s",
  697|    560|                   httpc->settings.enable_push?"TRUE":"false"));
  698|    560|      if(max_conn != httpc->settings.max_concurrent_streams) {
  699|       |        /* only signal change if the value actually changed */
  700|    213|        infof(data,
  701|    213|              "Connection state changed (MAX_CONCURRENT_STREAMS == %u)!",
  702|    213|              httpc->settings.max_concurrent_streams);
  703|    213|        multi_connchanged(data->multi);
  704|    213|      }
  705|    560|    }
  706|    582|    return 0;
  707|    582|  }
  708|     42|  data_s = nghttp2_session_get_stream_user_data(session, stream_id);
  709|     42|  if(!data_s) {
  710|      1|    H2BUGF(infof(data,
  711|      1|                 "No Curl_easy associated with stream: %x",
  712|      1|                 stream_id));
  713|      1|    return 0;
  714|      1|  }
  715|       |
  716|     41|  stream = data_s->req.p.http;
  717|     41|  if(!stream) {
  718|      0|    H2BUGF(infof(data_s, "No proto pointer for stream: %x",
  719|      0|                 stream_id));
  720|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  721|      0|  }
  722|       |
  723|     41|  H2BUGF(infof(data_s, "on_frame_recv() header %x stream %x",
  724|     41|               frame->hd.type, stream_id));
  725|       |
  726|     41|  switch(frame->hd.type) {
  727|      4|  case NGHTTP2_DATA:
  728|       |    /* If body started on this stream, then receiving DATA is illegal. */
  729|      4|    if(!stream->bodystarted) {
  730|      0|      rv = nghttp2_submit_rst_stream(session, NGHTTP2_FLAG_NONE,
  731|      0|                                     stream_id, NGHTTP2_PROTOCOL_ERROR);
  732|       |
  733|      0|      if(nghttp2_is_fatal(rv)) {
  734|      0|        return NGHTTP2_ERR_CALLBACK_FAILURE;
  735|      0|      }
  736|      0|    }
  737|      4|    break;
  738|     34|  case NGHTTP2_HEADERS:
  739|     34|    if(stream->bodystarted) {
  740|       |      /* Only valid HEADERS after body started is trailer HEADERS.  We
  741|       |         buffer them in on_header callback. */
  742|      2|      break;
  743|      2|    }
  744|       |
  745|       |    /* nghttp2 guarantees that :status is received, and we store it to
  746|       |       stream->status_code. Fuzzing has proven this can still be reached
  747|       |       without status code having been set. */
  748|     32|    if(stream->status_code == -1)
  749|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
  750|       |
  751|       |    /* Only final status code signals the end of header */
  752|     32|    if(stream->status_code / 100 != 1) {
  753|     32|      stream->bodystarted = TRUE;
  754|     32|      stream->status_code = -1;
  755|     32|    }
  756|       |
  757|     32|    result = Curl_dyn_add(&stream->header_recvbuf, "\r\n");
  758|     32|    if(result)
  759|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
  760|       |
  761|     32|    left = Curl_dyn_len(&stream->header_recvbuf) -
  762|     32|      stream->nread_header_recvbuf;
  763|     32|    ncopy = CURLMIN(stream->len, left);
  764|       |
  765|     32|    memcpy(&stream->mem[stream->memlen],
  766|     32|           Curl_dyn_ptr(&stream->header_recvbuf) +
  767|     32|           stream->nread_header_recvbuf,
  768|     32|           ncopy);
  769|     32|    stream->nread_header_recvbuf += ncopy;
  770|       |
  771|     32|    DEBUGASSERT(stream->mem);
  772|     32|    H2BUGF(infof(data_s, "Store %zu bytes headers from stream %u at %p",
  773|     32|                 ncopy, stream_id, stream->mem));
  774|       |
  775|     32|    stream->len -= ncopy;
  776|     32|    stream->memlen += ncopy;
  777|       |
  778|     32|    drain_this(data_s, httpc);
  779|       |    /* if we receive data for another handle, wake that up */
  780|     32|    if(get_transfer(httpc) != data_s)
  781|      0|      Curl_expire(data_s, 0, EXPIRE_RUN_NOW);
  782|     32|    break;
  783|      0|  case NGHTTP2_PUSH_PROMISE:
  784|      0|    rv = push_promise(data_s, conn, &frame->push_promise);
  785|      0|    if(rv) { /* deny! */
  786|      0|      int h2;
  787|      0|      DEBUGASSERT((rv > CURL_PUSH_OK) && (rv <= CURL_PUSH_ERROROUT));
  788|      0|      h2 = nghttp2_submit_rst_stream(session, NGHTTP2_FLAG_NONE,
  789|      0|                                     frame->push_promise.promised_stream_id,
  790|      0|                                     NGHTTP2_CANCEL);
  791|      0|      if(nghttp2_is_fatal(h2))
  792|      0|        return NGHTTP2_ERR_CALLBACK_FAILURE;
  793|      0|      else if(rv == CURL_PUSH_ERROROUT) {
  794|      0|        DEBUGF(infof(data_s, "Fail the parent stream (too)"));
  795|      0|        return NGHTTP2_ERR_CALLBACK_FAILURE;
  796|      0|      }
  797|      0|    }
  798|      0|    break;
  799|      3|  default:
  800|      3|    H2BUGF(infof(data_s, "Got frame type %x for stream %u!",
  801|      3|                 frame->hd.type, stream_id));
  802|      3|    break;
  803|     41|  }
  804|     41|  return 0;
  805|     41|}
http2.c:drain_this:
  479|    500|{
  480|    500|  data->state.drain++;
  481|    500|  httpc->drain_total++;
  482|    500|  DEBUGASSERT(httpc->drain_total >= data->state.drain);
  483|    500|}
http2.c:on_data_chunk_recv:
  810|     11|{
  811|     11|  struct HTTP *stream;
  812|     11|  struct Curl_easy *data_s;
  813|     11|  size_t nread;
  814|     11|  struct connectdata *conn = (struct connectdata *)userp;
  815|     11|  struct http_conn *httpc = &conn->proto.httpc;
  816|     11|  (void)session;
  817|     11|  (void)flags;
  818|       |
  819|     11|  DEBUGASSERT(stream_id); /* should never be a zero stream ID here */
  820|       |
  821|       |  /* get the stream from the hash based on Stream ID */
  822|     11|  data_s = nghttp2_session_get_stream_user_data(session, stream_id);
  823|     11|  if(!data_s)
  824|       |    /* Receiving a Stream ID not in the hash should not happen, this is an
  825|       |       internal error more than anything else! */
  826|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  827|       |
  828|     11|  stream = data_s->req.p.http;
  829|     11|  if(!stream)
  830|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  831|       |
  832|     11|  nread = CURLMIN(stream->len, len);
  833|     11|  memcpy(&stream->mem[stream->memlen], mem, nread);
  834|       |
  835|     11|  stream->len -= nread;
  836|     11|  stream->memlen += nread;
  837|       |
  838|     11|  drain_this(data_s, &conn->proto.httpc);
  839|       |
  840|       |  /* if we receive data for another handle, wake that up */
  841|     11|  if(get_transfer(httpc) != data_s)
  842|      0|    Curl_expire(data_s, 0, EXPIRE_RUN_NOW);
  843|       |
  844|     11|  H2BUGF(infof(data_s, "%zu data received for stream %u "
  845|     11|               "(%zu left in buffer %p, total %zu)",
  846|     11|               nread, stream_id,
  847|     11|               stream->len, stream->mem,
  848|     11|               stream->memlen));
  849|       |
  850|     11|  if(nread < len) {
  851|      0|    stream->pausedata = mem + nread;
  852|      0|    stream->pauselen = len - nread;
  853|      0|    H2BUGF(infof(data_s, "NGHTTP2_ERR_PAUSE - %zu bytes out of buffer"
  854|      0|                 ", stream %u",
  855|      0|                 len - nread, stream_id));
  856|      0|    data_s->conn->proto.httpc.pause_stream_id = stream_id;
  857|       |
  858|      0|    return NGHTTP2_ERR_PAUSE;
  859|      0|  }
  860|       |
  861|       |  /* pause execution of nghttp2 if we received data for another handle
  862|       |     in order to process them first. */
  863|     11|  if(get_transfer(httpc) != data_s) {
  864|      0|    data_s->conn->proto.httpc.pause_stream_id = stream_id;
  865|       |
  866|      0|    return NGHTTP2_ERR_PAUSE;
  867|      0|  }
  868|       |
  869|     11|  return 0;
  870|     11|}
http2.c:on_stream_close:
  874|    457|{
  875|    457|  struct Curl_easy *data_s;
  876|    457|  struct HTTP *stream;
  877|    457|  struct connectdata *conn = (struct connectdata *)userp;
  878|    457|  int rv;
  879|    457|  (void)session;
  880|    457|  (void)stream_id;
  881|       |
  882|    457|  if(stream_id) {
  883|    457|    struct http_conn *httpc;
  884|       |    /* get the stream from the hash based on Stream ID, stream ID zero is for
  885|       |       connection-oriented stuff */
  886|    457|    data_s = nghttp2_session_get_stream_user_data(session, stream_id);
  887|    457|    if(!data_s) {
  888|       |      /* We could get stream ID not in the hash.  For example, if we
  889|       |         decided to reject stream (e.g., PUSH_PROMISE). */
  890|      0|      return 0;
  891|      0|    }
  892|    457|    H2BUGF(infof(data_s, "on_stream_close(), %s (err %d), stream %u",
  893|    457|                 nghttp2_http2_strerror(error_code), error_code, stream_id));
  894|    457|    stream = data_s->req.p.http;
  895|    457|    if(!stream)
  896|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
  897|       |
  898|    457|    stream->closed = TRUE;
  899|    457|    httpc = &conn->proto.httpc;
  900|    457|    drain_this(data_s, httpc);
  901|    457|    Curl_expire(data_s, 0, EXPIRE_RUN_NOW);
  902|    457|    stream->error = error_code;
  903|       |
  904|       |    /* remove the entry from the hash as the stream is now gone */
  905|    457|    rv = nghttp2_session_set_stream_user_data(session, stream_id, 0);
  906|    457|    if(rv) {
  907|      0|      infof(data_s, "http/2: failed to clear user_data for stream %d!",
  908|      0|            stream_id);
  909|      0|      DEBUGASSERT(0);
  910|      0|    }
  911|    457|    if(stream_id == httpc->pause_stream_id) {
  912|      0|      H2BUGF(infof(data_s, "Stopped the pause stream!"));
  913|      0|      httpc->pause_stream_id = 0;
  914|      0|    }
  915|    457|    H2BUGF(infof(data_s, "Removed stream %u hash!", stream_id));
  916|    457|    stream->stream_id = 0; /* cleared */
  917|    457|  }
  918|    457|  return 0;
  919|    457|}
http2.c:on_begin_headers:
  923|    226|{
  924|    226|  struct HTTP *stream;
  925|    226|  struct Curl_easy *data_s = NULL;
  926|    226|  (void)userp;
  927|       |
  928|    226|  data_s = nghttp2_session_get_stream_user_data(session, frame->hd.stream_id);
  929|    226|  if(!data_s) {
  930|      0|    return 0;
  931|      0|  }
  932|       |
  933|    226|  H2BUGF(infof(data_s, "on_begin_headers() was called"));
  934|       |
  935|    226|  if(frame->hd.type != NGHTTP2_HEADERS) {
  936|      0|    return 0;
  937|      0|  }
  938|       |
  939|    226|  stream = data_s->req.p.http;
  940|    226|  if(!stream || !stream->bodystarted) {
  941|    213|    return 0;
  942|    213|  }
  943|       |
  944|     13|  return 0;
  945|    226|}
http2.c:on_header:
  980|  1.27k|{
  981|  1.27k|  struct HTTP *stream;
  982|  1.27k|  struct Curl_easy *data_s;
  983|  1.27k|  int32_t stream_id = frame->hd.stream_id;
  984|  1.27k|  struct connectdata *conn = (struct connectdata *)userp;
  985|  1.27k|  struct http_conn *httpc = &conn->proto.httpc;
  986|  1.27k|  CURLcode result;
  987|  1.27k|  (void)flags;
  988|       |
  989|  1.27k|  DEBUGASSERT(stream_id); /* should never be a zero stream ID here */
  990|       |
  991|       |  /* get the stream from the hash based on Stream ID */
  992|  1.27k|  data_s = nghttp2_session_get_stream_user_data(session, stream_id);
  993|  1.27k|  if(!data_s)
  994|       |    /* Receiving a Stream ID not in the hash should not happen, this is an
  995|       |       internal error more than anything else! */
  996|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  997|       |
  998|  1.27k|  stream = data_s->req.p.http;
  999|  1.27k|  if(!stream) {
 1000|      0|    failf(data_s, "Internal NULL stream!");
 1001|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 1002|      0|  }
 1003|       |
 1004|       |  /* Store received PUSH_PROMISE headers to be used when the subsequent
 1005|       |     PUSH_PROMISE callback comes */
 1006|  1.27k|  if(frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 1007|      0|    char *h;
 1008|       |
 1009|      0|    if(!strcmp(":authority", (const char *)name)) {
 1010|       |      /* pseudo headers are lower case */
 1011|      0|      int rc = 0;
 1012|      0|      char *check = aprintf("%s:%d", conn->host.name, conn->remote_port);
 1013|      0|      if(!check)
 1014|       |        /* no memory */
 1015|      0|        return NGHTTP2_ERR_CALLBACK_FAILURE;
 1016|      0|      if(!Curl_strcasecompare(check, (const char *)value) &&
 1017|      0|         ((conn->remote_port != conn->given->defport) ||
 1018|      0|          !Curl_strcasecompare(conn->host.name, (const char *)value))) {
 1019|       |        /* This is push is not for the same authority that was asked for in
 1020|       |         * the URL. RFC 7540 section 8.2 says: "A client MUST treat a
 1021|       |         * PUSH_PROMISE for which the server is not authoritative as a stream
 1022|       |         * error of type PROTOCOL_ERROR."
 1023|       |         */
 1024|      0|        (void)nghttp2_submit_rst_stream(session, NGHTTP2_FLAG_NONE,
 1025|      0|                                        stream_id, NGHTTP2_PROTOCOL_ERROR);
 1026|      0|        rc = NGHTTP2_ERR_CALLBACK_FAILURE;
 1027|      0|      }
 1028|      0|      free(check);
 1029|      0|      if(rc)
 1030|      0|        return rc;
 1031|      0|    }
 1032|       |
 1033|      0|    if(!stream->push_headers) {
 1034|      0|      stream->push_headers_alloc = 10;
 1035|      0|      stream->push_headers = malloc(stream->push_headers_alloc *
 1036|      0|                                    sizeof(char *));
 1037|      0|      if(!stream->push_headers)
 1038|      0|        return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
 1039|      0|      stream->push_headers_used = 0;
 1040|      0|    }
 1041|      0|    else if(stream->push_headers_used ==
 1042|      0|            stream->push_headers_alloc) {
 1043|      0|      char **headp;
 1044|      0|      stream->push_headers_alloc *= 2;
 1045|      0|      headp = Curl_saferealloc(stream->push_headers,
 1046|      0|                               stream->push_headers_alloc * sizeof(char *));
 1047|      0|      if(!headp) {
 1048|      0|        stream->push_headers = NULL;
 1049|      0|        return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
 1050|      0|      }
 1051|      0|      stream->push_headers = headp;
 1052|      0|    }
 1053|      0|    h = aprintf("%s:%s", name, value);
 1054|      0|    if(h)
 1055|      0|      stream->push_headers[stream->push_headers_used++] = h;
 1056|      0|    return 0;
 1057|      0|  }
 1058|       |
 1059|  1.27k|  if(stream->bodystarted) {
 1060|       |    /* This is a trailer */
 1061|     46|    H2BUGF(infof(data_s, "h2 trailer: %.*s: %.*s", namelen, name, valuelen,
 1062|     46|                 value));
 1063|     46|    result = Curl_dyn_addf(&stream->trailer_recvbuf,
 1064|     46|                           "%.*s: %.*s\r\n", namelen, name,
 1065|     46|                           valuelen, value);
 1066|     46|    if(result)
 1067|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1068|       |
 1069|     46|    return 0;
 1070|     46|  }
 1071|       |
 1072|  1.22k|  if(namelen == sizeof(":status") - 1 &&
 1073|  1.22k|     memcmp(":status", name, namelen) == 0) {
 1074|       |    /* nghttp2 guarantees :status is received first and only once, and
 1075|       |       value is 3 digits status code, and decode_status_code always
 1076|       |       succeeds. */
 1077|    160|    stream->status_code = decode_status_code(value, valuelen);
 1078|    160|    DEBUGASSERT(stream->status_code != -1);
 1079|       |
 1080|    160|    result = Curl_dyn_add(&stream->header_recvbuf, "HTTP/2 ");
 1081|    160|    if(result)
 1082|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1083|    160|    result = Curl_dyn_addn(&stream->header_recvbuf, value, valuelen);
 1084|    160|    if(result)
 1085|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1086|       |    /* the space character after the status code is mandatory */
 1087|    160|    result = Curl_dyn_add(&stream->header_recvbuf, " \r\n");
 1088|    160|    if(result)
 1089|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1090|       |    /* if we receive data for another handle, wake that up */
 1091|    160|    if(get_transfer(httpc) != data_s)
 1092|      0|      Curl_expire(data_s, 0, EXPIRE_RUN_NOW);
 1093|       |
 1094|    160|    H2BUGF(infof(data_s, "h2 status: HTTP/2 %03d (easy %p)",
 1095|    160|                 stream->status_code, data_s));
 1096|    160|    return 0;
 1097|    160|  }
 1098|       |
 1099|       |  /* nghttp2 guarantees that namelen > 0, and :status was already
 1100|       |     received, and this is not pseudo-header field . */
 1101|       |  /* convert to a HTTP1-style header */
 1102|  1.06k|  result = Curl_dyn_addn(&stream->header_recvbuf, name, namelen);
 1103|  1.06k|  if(result)
 1104|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 1105|  1.06k|  result = Curl_dyn_add(&stream->header_recvbuf, ": ");
 1106|  1.06k|  if(result)
 1107|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 1108|  1.06k|  result = Curl_dyn_addn(&stream->header_recvbuf, value, valuelen);
 1109|  1.06k|  if(result)
 1110|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 1111|  1.06k|  result = Curl_dyn_add(&stream->header_recvbuf, "\r\n");
 1112|  1.06k|  if(result)
 1113|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 1114|       |  /* if we receive data for another handle, wake that up */
 1115|  1.06k|  if(get_transfer(httpc) != data_s)
 1116|      0|    Curl_expire(data_s, 0, EXPIRE_RUN_NOW);
 1117|       |
 1118|  1.06k|  H2BUGF(infof(data_s, "h2 header: %.*s: %.*s", namelen, name, valuelen,
 1119|  1.06k|               value));
 1120|       |
 1121|  1.06k|  return 0; /* 0 is successful */
 1122|  1.06k|}
http2.c:decode_status_code:
  950|    160|{
  951|    160|  int i;
  952|    160|  int res;
  953|       |
  954|    160|  if(len != 3) {
  955|      0|    return -1;
  956|      0|  }
  957|       |
  958|    160|  res = 0;
  959|       |
  960|    640|  for(i = 0; i < 3; ++i) {
  961|    480|    char c = value[i];
  962|       |
  963|    480|    if(c < '0' || c > '9') {
  964|      0|      return -1;
  965|      0|    }
  966|       |
  967|    480|    res *= 10;
  968|    480|    res += c - '0';
  969|    480|  }
  970|       |
  971|    160|  return res;
  972|    160|}
http2.c:error_callback:
 1179|    171|{
 1180|    171|  (void)session;
 1181|    171|  (void)msg;
 1182|    171|  (void)len;
 1183|    171|  (void)userp;
 1184|    171|  return 0;
 1185|    171|}
http2.c:http2_recv:
 1613|  21.6k|{
 1614|  21.6k|  ssize_t nread;
 1615|  21.6k|  struct connectdata *conn = data->conn;
 1616|  21.6k|  struct http_conn *httpc = &conn->proto.httpc;
 1617|  21.6k|  struct HTTP *stream = data->req.p.http;
 1618|       |
 1619|  21.6k|  (void)sockindex; /* we always do HTTP2 on sockindex 0 */
 1620|       |
 1621|  21.6k|  if(should_close_session(httpc)) {
 1622|  20.8k|    H2BUGF(infof(data,
 1623|  20.8k|                 "http2_recv: nothing to do in this session"));
 1624|  20.8k|    if(conn->bits.close) {
 1625|       |      /* already marked for closure, return OK and we're done */
 1626|  20.8k|      *err = CURLE_OK;
 1627|  20.8k|      return 0;
 1628|  20.8k|    }
 1629|      0|    *err = CURLE_HTTP2;
 1630|      0|    return -1;
 1631|  20.8k|  }
 1632|       |
 1633|       |  /* Nullify here because we call nghttp2_session_send() and they
 1634|       |     might refer to the old buffer. */
 1635|    799|  stream->upload_mem = NULL;
 1636|    799|  stream->upload_len = 0;
 1637|       |
 1638|       |  /*
 1639|       |   * At this point 'stream' is just in the Curl_easy the connection
 1640|       |   * identifies as its owner at this time.
 1641|       |   */
 1642|       |
 1643|    799|  if(stream->bodystarted &&
 1644|    799|     stream->nread_header_recvbuf < Curl_dyn_len(&stream->header_recvbuf)) {
 1645|       |    /* If there is header data pending for this stream to return, do that */
 1646|      0|    size_t left =
 1647|      0|      Curl_dyn_len(&stream->header_recvbuf) - stream->nread_header_recvbuf;
 1648|      0|    size_t ncopy = CURLMIN(len, left);
 1649|      0|    memcpy(mem, Curl_dyn_ptr(&stream->header_recvbuf) +
 1650|      0|           stream->nread_header_recvbuf, ncopy);
 1651|      0|    stream->nread_header_recvbuf += ncopy;
 1652|       |
 1653|      0|    H2BUGF(infof(data, "http2_recv: Got %d bytes from header_recvbuf",
 1654|      0|                 (int)ncopy));
 1655|      0|    return ncopy;
 1656|      0|  }
 1657|       |
 1658|    799|  H2BUGF(infof(data, "http2_recv: easy %p (stream %u) win %u/%u",
 1659|    799|               data, stream->stream_id,
 1660|    799|               nghttp2_session_get_local_window_size(httpc->h2),
 1661|    799|               nghttp2_session_get_stream_local_window_size(httpc->h2,
 1662|    799|                                                            stream->stream_id)
 1663|    799|           ));
 1664|       |
 1665|    799|  if((data->state.drain) && stream->memlen) {
 1666|      0|    H2BUGF(infof(data, "http2_recv: DRAIN %zu bytes stream %u!! (%p => %p)",
 1667|      0|                 stream->memlen, stream->stream_id,
 1668|      0|                 stream->mem, mem));
 1669|      0|    if(mem != stream->mem) {
 1670|       |      /* if we didn't get the same buffer this time, we must move the data to
 1671|       |         the beginning */
 1672|      0|      memmove(mem, stream->mem, stream->memlen);
 1673|      0|      stream->len = len - stream->memlen;
 1674|      0|      stream->mem = mem;
 1675|      0|    }
 1676|      0|    if(httpc->pause_stream_id == stream->stream_id && !stream->pausedata) {
 1677|       |      /* We have paused nghttp2, but we have no pause data (see
 1678|       |         on_data_chunk_recv). */
 1679|      0|      httpc->pause_stream_id = 0;
 1680|      0|      if(h2_process_pending_input(data, httpc, err) != 0) {
 1681|      0|        return -1;
 1682|      0|      }
 1683|      0|    }
 1684|      0|  }
 1685|    799|  else if(stream->pausedata) {
 1686|      0|    DEBUGASSERT(httpc->pause_stream_id == stream->stream_id);
 1687|      0|    nread = CURLMIN(len, stream->pauselen);
 1688|      0|    memcpy(mem, stream->pausedata, nread);
 1689|       |
 1690|      0|    stream->pausedata += nread;
 1691|      0|    stream->pauselen -= nread;
 1692|       |
 1693|      0|    if(stream->pauselen == 0) {
 1694|      0|      H2BUGF(infof(data, "Unpaused by stream %u", stream->stream_id));
 1695|      0|      DEBUGASSERT(httpc->pause_stream_id == stream->stream_id);
 1696|      0|      httpc->pause_stream_id = 0;
 1697|       |
 1698|      0|      stream->pausedata = NULL;
 1699|      0|      stream->pauselen = 0;
 1700|       |
 1701|       |      /* When NGHTTP2_ERR_PAUSE is returned from
 1702|       |         data_source_read_callback, we might not process DATA frame
 1703|       |         fully.  Calling nghttp2_session_mem_recv() again will
 1704|       |         continue to process DATA frame, but if there is no incoming
 1705|       |         frames, then we have to call it again with 0-length data.
 1706|       |         Without this, on_stream_close callback will not be called,
 1707|       |         and stream could be hanged. */
 1708|      0|      if(h2_process_pending_input(data, httpc, err) != 0) {
 1709|      0|        return -1;
 1710|      0|      }
 1711|      0|    }
 1712|      0|    H2BUGF(infof(data, "http2_recv: returns unpaused %zd bytes on stream %u",
 1713|      0|                 nread, stream->stream_id));
 1714|      0|    return nread;
 1715|      0|  }
 1716|    799|  else if(httpc->pause_stream_id) {
 1717|       |    /* If a stream paused nghttp2_session_mem_recv previously, and has
 1718|       |       not processed all data, it still refers to the buffer in
 1719|       |       nghttp2_session.  If we call nghttp2_session_mem_recv(), we may
 1720|       |       overwrite that buffer.  To avoid that situation, just return
 1721|       |       here with CURLE_AGAIN.  This could be busy loop since data in
 1722|       |       socket is not read.  But it seems that usually streams are
 1723|       |       notified with its drain property, and socket is read again
 1724|       |       quickly. */
 1725|      0|    if(stream->closed)
 1726|       |      /* closed overrides paused */
 1727|      0|      return 0;
 1728|      0|    H2BUGF(infof(data, "stream %x is paused, pause id: %x",
 1729|      0|                 stream->stream_id, httpc->pause_stream_id));
 1730|      0|    *err = CURLE_AGAIN;
 1731|      0|    return -1;
 1732|      0|  }
 1733|    799|  else {
 1734|       |    /* remember where to store incoming data for this stream and how big the
 1735|       |       buffer is */
 1736|    799|    stream->mem = mem;
 1737|    799|    stream->len = len;
 1738|    799|    stream->memlen = 0;
 1739|       |
 1740|    799|    if(httpc->inbuflen == 0) {
 1741|    799|      nread = ((Curl_recv *)httpc->recv_underlying)(
 1742|    799|        data, FIRSTSOCKET, httpc->inbuf, H2_BUFSIZE, err);
 1743|       |
 1744|    799|      if(nread == -1) {
 1745|     11|        if(*err != CURLE_AGAIN)
 1746|      0|          failf(data, "Failed receiving HTTP2 data");
 1747|     11|        else if(stream->closed)
 1748|       |          /* received when the stream was already closed! */
 1749|      2|          return http2_handle_stream_close(conn, data, stream, err);
 1750|       |
 1751|      9|        return -1;
 1752|     11|      }
 1753|       |
 1754|    788|      if(nread == 0) {
 1755|    385|        if(!stream->closed) {
 1756|       |          /* This will happen when the server or proxy server is SIGKILLed
 1757|       |             during data transfer. We should emit an error since our data
 1758|       |             received may be incomplete. */
 1759|    368|          failf(data, "HTTP/2 stream %d was not closed cleanly before"
 1760|    368|                " end of the underlying stream",
 1761|    368|                stream->stream_id);
 1762|    368|          *err = CURLE_HTTP2_STREAM;
 1763|    368|          return -1;
 1764|    368|        }
 1765|       |
 1766|     17|        H2BUGF(infof(data, "end of stream"));
 1767|     17|        *err = CURLE_OK;
 1768|     17|        return 0;
 1769|    385|      }
 1770|       |
 1771|    403|      H2BUGF(infof(data, "nread=%zd", nread));
 1772|       |
 1773|    403|      httpc->inbuflen = nread;
 1774|       |
 1775|    403|      DEBUGASSERT(httpc->nread_inbuf == 0);
 1776|    403|    }
 1777|      0|    else {
 1778|      0|      nread = httpc->inbuflen - httpc->nread_inbuf;
 1779|      0|      (void)nread;  /* silence warning, used in debug */
 1780|      0|      H2BUGF(infof(data, "Use data left in connection buffer, nread=%zd",
 1781|      0|                   nread));
 1782|      0|    }
 1783|       |
 1784|    403|    if(h2_process_pending_input(data, httpc, err))
 1785|    211|      return -1;
 1786|    403|  }
 1787|    192|  if(stream->memlen) {
 1788|     34|    ssize_t retlen = stream->memlen;
 1789|     34|    H2BUGF(infof(data, "http2_recv: returns %zd for stream %u",
 1790|     34|                 retlen, stream->stream_id));
 1791|     34|    stream->memlen = 0;
 1792|       |
 1793|     34|    if(httpc->pause_stream_id == stream->stream_id) {
 1794|       |      /* data for this stream is returned now, but this stream caused a pause
 1795|       |         already so we need it called again asap */
 1796|     11|      H2BUGF(infof(data, "Data returned for PAUSED stream %u",
 1797|     11|                   stream->stream_id));
 1798|     11|    }
 1799|     23|    else if(!stream->closed) {
 1800|     23|      drained_transfer(data, httpc);
 1801|     23|    }
 1802|      0|    else
 1803|       |      /* this stream is closed, trigger a another read ASAP to detect that */
 1804|      0|      Curl_expire(data, 0, EXPIRE_RUN_NOW);
 1805|       |
 1806|     34|    return retlen;
 1807|     34|  }
 1808|    158|  if(stream->closed)
 1809|     63|    return http2_handle_stream_close(conn, data, stream, err);
 1810|     95|  *err = CURLE_AGAIN;
 1811|     95|  H2BUGF(infof(data, "http2_recv returns AGAIN for stream %u",
 1812|     95|               stream->stream_id));
 1813|     95|  return -1;
 1814|    158|}
http2.c:http2_handle_stream_close:
 1487|     66|{
 1488|     66|  struct http_conn *httpc = &conn->proto.httpc;
 1489|       |
 1490|     66|  if(httpc->pause_stream_id == stream->stream_id) {
 1491|     66|    httpc->pause_stream_id = 0;
 1492|     66|  }
 1493|       |
 1494|     66|  drained_transfer(data, httpc);
 1495|       |
 1496|     66|  if(httpc->pause_stream_id == 0) {
 1497|     66|    if(h2_process_pending_input(data, httpc, err) != 0) {
 1498|     15|      return -1;
 1499|     15|    }
 1500|     66|  }
 1501|       |
 1502|     51|  DEBUGASSERT(data->state.drain == 0);
 1503|       |
 1504|       |  /* Reset to FALSE to prevent infinite loop in readwrite_data function. */
 1505|     51|  stream->closed = FALSE;
 1506|     51|  if(stream->error == NGHTTP2_REFUSED_STREAM) {
 1507|      0|    H2BUGF(infof(data, "REFUSED_STREAM (%d), try again on a new connection!",
 1508|      0|                 stream->stream_id));
 1509|      0|    connclose(conn, "REFUSED_STREAM"); /* don't use this anymore */
 1510|      0|    data->state.refused_stream = TRUE;
 1511|      0|    *err = CURLE_RECV_ERROR; /* trigger Curl_retry_request() later */
 1512|      0|    return -1;
 1513|      0|  }
 1514|     51|  else if(stream->error != NGHTTP2_NO_ERROR) {
 1515|     49|    failf(data, "HTTP/2 stream %d was not closed cleanly: %s (err %u)",
 1516|     49|          stream->stream_id, nghttp2_http2_strerror(stream->error),
 1517|     49|          stream->error);
 1518|     49|    *err = CURLE_HTTP2_STREAM;
 1519|     49|    return -1;
 1520|     49|  }
 1521|       |
 1522|      2|  if(!stream->bodystarted) {
 1523|      0|    failf(data, "HTTP/2 stream %d was closed cleanly, but before getting "
 1524|      0|          " all response header fields, treated as error",
 1525|      0|          stream->stream_id);
 1526|      0|    *err = CURLE_HTTP2_STREAM;
 1527|      0|    return -1;
 1528|      0|  }
 1529|       |
 1530|      2|  if(Curl_dyn_len(&stream->trailer_recvbuf)) {
 1531|      0|    char *trailp = Curl_dyn_ptr(&stream->trailer_recvbuf);
 1532|      0|    char *lf;
 1533|       |
 1534|      0|    do {
 1535|      0|      size_t len = 0;
 1536|      0|      CURLcode result;
 1537|       |      /* each trailer line ends with a newline */
 1538|      0|      lf = strchr(trailp, '\n');
 1539|      0|      if(!lf)
 1540|      0|        break;
 1541|      0|      len = lf + 1 - trailp;
 1542|       |
 1543|      0|      Curl_debug(data, CURLINFO_HEADER_IN, trailp, len);
 1544|       |      /* pass the trailers one by one to the callback */
 1545|      0|      result = Curl_client_write(data, CLIENTWRITE_HEADER, trailp, len);
 1546|      0|      if(result) {
 1547|      0|        *err = result;
 1548|      0|        return -1;
 1549|      0|      }
 1550|      0|      trailp = ++lf;
 1551|      0|    } while(lf);
 1552|      0|  }
 1553|       |
 1554|      2|  stream->close_handled = TRUE;
 1555|       |
 1556|      2|  H2BUGF(infof(data, "http2_recv returns 0, http2_handle_stream_close"));
 1557|      2|  return 0;
 1558|      2|}
http2.c:http2_send:
 1892|    738|{
 1893|       |  /*
 1894|       |   * Currently, we send request in this function, but this function is also
 1895|       |   * used to send request body. It would be nice to add dedicated function for
 1896|       |   * request.
 1897|       |   */
 1898|    738|  int rv;
 1899|    738|  struct connectdata *conn = data->conn;
 1900|    738|  struct http_conn *httpc = &conn->proto.httpc;
 1901|    738|  struct HTTP *stream = data->req.p.http;
 1902|    738|  nghttp2_nv *nva = NULL;
 1903|    738|  size_t nheader;
 1904|    738|  size_t i;
 1905|    738|  size_t authority_idx;
 1906|    738|  char *hdbuf = (char *)mem;
 1907|    738|  char *end, *line_end;
 1908|    738|  nghttp2_data_provider data_prd;
 1909|    738|  int32_t stream_id;
 1910|    738|  nghttp2_session *h2 = httpc->h2;
 1911|    738|  nghttp2_priority_spec pri_spec;
 1912|       |
 1913|    738|  (void)sockindex;
 1914|       |
 1915|    738|  H2BUGF(infof(data, "http2_send len=%zu", len));
 1916|       |
 1917|    738|  if(stream->stream_id != -1) {
 1918|     34|    if(stream->close_handled) {
 1919|      0|      infof(data, "stream %d closed", stream->stream_id);
 1920|      0|      *err = CURLE_HTTP2_STREAM;
 1921|      0|      return -1;
 1922|      0|    }
 1923|     34|    else if(stream->closed) {
 1924|      1|      return http2_handle_stream_close(conn, data, stream, err);
 1925|      1|    }
 1926|       |    /* If stream_id != -1, we have dispatched request HEADERS, and now
 1927|       |       are going to send or sending request body in DATA frame */
 1928|     33|    stream->upload_mem = mem;
 1929|     33|    stream->upload_len = len;
 1930|     33|    rv = nghttp2_session_resume_data(h2, stream->stream_id);
 1931|     33|    if(nghttp2_is_fatal(rv)) {
 1932|      0|      *err = CURLE_SEND_ERROR;
 1933|      0|      return -1;
 1934|      0|    }
 1935|     33|    rv = h2_session_send(data, h2);
 1936|     33|    if(nghttp2_is_fatal(rv)) {
 1937|      0|      *err = CURLE_SEND_ERROR;
 1938|      0|      return -1;
 1939|      0|    }
 1940|     33|    len -= stream->upload_len;
 1941|       |
 1942|       |    /* Nullify here because we call nghttp2_session_send() and they
 1943|       |       might refer to the old buffer. */
 1944|     33|    stream->upload_mem = NULL;
 1945|     33|    stream->upload_len = 0;
 1946|       |
 1947|     33|    if(should_close_session(httpc)) {
 1948|      0|      H2BUGF(infof(data, "http2_send: nothing to do in this session"));
 1949|      0|      *err = CURLE_HTTP2;
 1950|      0|      return -1;
 1951|      0|    }
 1952|       |
 1953|     33|    if(stream->upload_left) {
 1954|       |      /* we are sure that we have more data to send here.  Calling the
 1955|       |         following API will make nghttp2_session_want_write() return
 1956|       |         nonzero if remote window allows it, which then libcurl checks
 1957|       |         socket is writable or not.  See http2_perform_getsock(). */
 1958|     26|      nghttp2_session_resume_data(h2, stream->stream_id);
 1959|     26|    }
 1960|       |
 1961|       |#ifdef DEBUG_HTTP2
 1962|       |    if(!len) {
 1963|       |      infof(data, "http2_send: easy %p (stream %u) win %u/%u",
 1964|       |            data, stream->stream_id,
 1965|       |            nghttp2_session_get_remote_window_size(httpc->h2),
 1966|       |            nghttp2_session_get_stream_remote_window_size(httpc->h2,
 1967|       |                                                          stream->stream_id)
 1968|       |        );
 1969|       |
 1970|       |    }
 1971|       |    infof(data, "http2_send returns %zu for stream %u", len,
 1972|       |          stream->stream_id);
 1973|       |#endif
 1974|     33|    return len;
 1975|     33|  }
 1976|       |
 1977|       |  /* Calculate number of headers contained in [mem, mem + len) */
 1978|       |  /* Here, we assume the curl http code generate *correct* HTTP header
 1979|       |     field block */
 1980|    704|  nheader = 0;
 1981|   170k|  for(i = 1; i < len; ++i) {
 1982|   169k|    if(hdbuf[i] == '\n' && hdbuf[i - 1] == '\r') {
 1983|  6.13k|      ++nheader;
 1984|  6.13k|      ++i;
 1985|  6.13k|    }
 1986|   169k|  }
 1987|    704|  if(nheader < 2)
 1988|      0|    goto fail;
 1989|       |
 1990|       |  /* We counted additional 2 \r\n in the first and last line. We need 3
 1991|       |     new headers: :method, :path and :scheme. Therefore we need one
 1992|       |     more space. */
 1993|    704|  nheader += 1;
 1994|    704|  nva = malloc(sizeof(nghttp2_nv) * nheader);
 1995|    704|  if(!nva) {
 1996|      0|    *err = CURLE_OUT_OF_MEMORY;
 1997|      0|    return -1;
 1998|      0|  }
 1999|       |
 2000|       |  /* Extract :method, :path from request line
 2001|       |     We do line endings with CRLF so checking for CR is enough */
 2002|    704|  line_end = memchr(hdbuf, '\r', len);
 2003|    704|  if(!line_end)
 2004|      0|    goto fail;
 2005|       |
 2006|       |  /* Method does not contain spaces */
 2007|    704|  end = memchr(hdbuf, ' ', line_end - hdbuf);
 2008|    704|  if(!end || end == hdbuf)
 2009|      4|    goto fail;
 2010|    700|  nva[0].name = (unsigned char *)":method";
 2011|    700|  nva[0].namelen = strlen((char *)nva[0].name);
 2012|    700|  nva[0].value = (unsigned char *)hdbuf;
 2013|    700|  nva[0].valuelen = (size_t)(end - hdbuf);
 2014|    700|  nva[0].flags = NGHTTP2_NV_FLAG_NONE;
 2015|    700|  if(HEADER_OVERFLOW(nva[0])) {
 2016|      0|    failf(data, "Failed sending HTTP request: Header overflow");
 2017|      0|    goto fail;
 2018|      0|  }
 2019|       |
 2020|    700|  hdbuf = end + 1;
 2021|       |
 2022|       |  /* Path may contain spaces so scan backwards */
 2023|    700|  end = NULL;
 2024|  6.41k|  for(i = (size_t)(line_end - hdbuf); i; --i) {
 2025|  6.41k|    if(hdbuf[i - 1] == ' ') {
 2026|    698|      end = &hdbuf[i - 1];
 2027|    698|      break;
 2028|    698|    }
 2029|  6.41k|  }
 2030|    700|  if(!end || end == hdbuf)
 2031|      3|    goto fail;
 2032|    697|  nva[1].name = (unsigned char *)":path";
 2033|    697|  nva[1].namelen = strlen((char *)nva[1].name);
 2034|    697|  nva[1].value = (unsigned char *)hdbuf;
 2035|    697|  nva[1].valuelen = (size_t)(end - hdbuf);
 2036|    697|  nva[1].flags = NGHTTP2_NV_FLAG_NONE;
 2037|    697|  if(HEADER_OVERFLOW(nva[1])) {
 2038|      0|    failf(data, "Failed sending HTTP request: Header overflow");
 2039|      0|    goto fail;
 2040|      0|  }
 2041|       |
 2042|    697|  nva[2].name = (unsigned char *)":scheme";
 2043|    697|  nva[2].namelen = strlen((char *)nva[2].name);
 2044|    697|  if(conn->handler->flags & PROTOPT_SSL)
 2045|      0|    nva[2].value = (unsigned char *)"https";
 2046|    697|  else
 2047|    697|    nva[2].value = (unsigned char *)"http";
 2048|    697|  nva[2].valuelen = strlen((char *)nva[2].value);
 2049|    697|  nva[2].flags = NGHTTP2_NV_FLAG_NONE;
 2050|    697|  if(HEADER_OVERFLOW(nva[2])) {
 2051|      0|    failf(data, "Failed sending HTTP request: Header overflow");
 2052|      0|    goto fail;
 2053|      0|  }
 2054|       |
 2055|    697|  authority_idx = 0;
 2056|    697|  i = 3;
 2057|  5.34k|  while(i < nheader) {
 2058|  4.66k|    size_t hlen;
 2059|       |
 2060|  4.66k|    hdbuf = line_end + 2;
 2061|       |
 2062|       |    /* check for next CR, but only within the piece of data left in the given
 2063|       |       buffer */
 2064|  4.66k|    line_end = memchr(hdbuf, '\r', len - (hdbuf - (char *)mem));
 2065|  4.66k|    if(!line_end || (line_end == hdbuf))
 2066|      2|      goto fail;
 2067|       |
 2068|       |    /* header continuation lines are not supported */
 2069|  4.66k|    if(*hdbuf == ' ' || *hdbuf == '\t')
 2070|      2|      goto fail;
 2071|       |
 2072|  51.1k|    for(end = hdbuf; end < line_end && *end != ':'; ++end)
 2073|  46.4k|      ;
 2074|  4.66k|    if(end == hdbuf || end == line_end)
 2075|     15|      goto fail;
 2076|  4.64k|    hlen = end - hdbuf;
 2077|       |
 2078|  4.64k|    if(hlen == 4 && strncasecompare("host", hdbuf, 4)) {
 2079|    611|      authority_idx = i;
 2080|    611|      nva[i].name = (unsigned char *)":authority";
 2081|    611|      nva[i].namelen = strlen((char *)nva[i].name);
 2082|    611|    }
 2083|  4.03k|    else {
 2084|  4.03k|      nva[i].namelen = (size_t)(end - hdbuf);
 2085|       |      /* Lower case the header name for HTTP/2 */
 2086|  4.03k|      Curl_strntolower((char *)hdbuf, hdbuf, nva[i].namelen);
 2087|  4.03k|      nva[i].name = (unsigned char *)hdbuf;
 2088|  4.03k|    }
 2089|  4.64k|    hdbuf = end + 1;
 2090|  8.38k|    while(*hdbuf == ' ' || *hdbuf == '\t')
 2091|  3.74k|      ++hdbuf;
 2092|  4.64k|    end = line_end;
 2093|       |
 2094|  4.64k|    switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,
 2095|  4.64k|                          end - hdbuf)) {
 2096|    126|    case HEADERINST_IGNORE:
 2097|       |      /* skip header fields prohibited by HTTP/2 specification. */
 2098|    126|      --nheader;
 2099|    126|      continue;
 2100|      0|    case HEADERINST_TE_TRAILERS:
 2101|      0|      nva[i].value = (uint8_t*)"trailers";
 2102|      0|      nva[i].valuelen = sizeof("trailers") - 1;
 2103|      0|      break;
 2104|  4.52k|    default:
 2105|  4.52k|      nva[i].value = (unsigned char *)hdbuf;
 2106|  4.52k|      nva[i].valuelen = (size_t)(end - hdbuf);
 2107|  4.64k|    }
 2108|       |
 2109|  4.52k|    nva[i].flags = NGHTTP2_NV_FLAG_NONE;
 2110|  4.52k|    if(HEADER_OVERFLOW(nva[i])) {
 2111|      0|      failf(data, "Failed sending HTTP request: Header overflow");
 2112|      0|      goto fail;
 2113|      0|    }
 2114|  4.52k|    ++i;
 2115|  4.52k|  }
 2116|       |
 2117|       |  /* :authority must come before non-pseudo header fields */
 2118|    678|  if(authority_idx && authority_idx != AUTHORITY_DST_IDX) {
 2119|    227|    nghttp2_nv authority = nva[authority_idx];
 2120|  2.63k|    for(i = authority_idx; i > AUTHORITY_DST_IDX; --i) {
 2121|  2.40k|      nva[i] = nva[i - 1];
 2122|  2.40k|    }
 2123|    227|    nva[i] = authority;
 2124|    227|  }
 2125|       |
 2126|       |  /* Warn stream may be rejected if cumulative length of headers is too large.
 2127|       |     It appears nghttp2 will not send a header frame larger than 64KB. */
 2128|    678|#define MAX_ACC 60000  /* <64KB to account for some overhead */
 2129|    678|  {
 2130|    678|    size_t acc = 0;
 2131|       |
 2132|  7.17k|    for(i = 0; i < nheader; ++i) {
 2133|  6.49k|      acc += nva[i].namelen + nva[i].valuelen;
 2134|       |
 2135|  6.49k|      H2BUGF(infof(data, "h2 header: %.*s:%.*s",
 2136|  6.49k|                   nva[i].namelen, nva[i].name,
 2137|  6.49k|                   nva[i].valuelen, nva[i].value));
 2138|  6.49k|    }
 2139|       |
 2140|    678|    if(acc > MAX_ACC) {
 2141|      0|      infof(data, "http2_send: Warning: The cumulative length of all "
 2142|      0|            "headers exceeds %d bytes and that could cause the "
 2143|      0|            "stream to be rejected.", MAX_ACC);
 2144|      0|    }
 2145|    678|  }
 2146|       |
 2147|    678|  h2_pri_spec(data, &pri_spec);
 2148|       |
 2149|    678|  H2BUGF(infof(data, "http2_send request allowed %d (easy handle %p)",
 2150|    678|               nghttp2_session_check_request_allowed(h2), (void *)data));
 2151|       |
 2152|    678|  switch(data->state.httpreq) {
 2153|      7|  case HTTPREQ_POST:
 2154|      7|  case HTTPREQ_POST_FORM:
 2155|     16|  case HTTPREQ_POST_MIME:
 2156|     31|  case HTTPREQ_PUT:
 2157|     31|    if(data->state.infilesize != -1)
 2158|     29|      stream->upload_left = data->state.infilesize;
 2159|      2|    else
 2160|       |      /* data sending without specifying the data amount up front */
 2161|      2|      stream->upload_left = -1; /* unknown, but not zero */
 2162|       |
 2163|     31|    data_prd.read_callback = data_source_read_callback;
 2164|     31|    data_prd.source.ptr = NULL;
 2165|     31|    stream_id = nghttp2_submit_request(h2, &pri_spec, nva, nheader,
 2166|     31|                                       &data_prd, data);
 2167|     31|    break;
 2168|    647|  default:
 2169|    647|    stream_id = nghttp2_submit_request(h2, &pri_spec, nva, nheader,
 2170|    647|                                       NULL, data);
 2171|    678|  }
 2172|       |
 2173|    678|  Curl_safefree(nva);
 2174|       |
 2175|    678|  if(stream_id < 0) {
 2176|      0|    H2BUGF(infof(data,
 2177|      0|                 "http2_send() nghttp2_submit_request error (%s)%d",
 2178|      0|                 nghttp2_strerror(stream_id), stream_id));
 2179|      0|    *err = CURLE_SEND_ERROR;
 2180|      0|    return -1;
 2181|      0|  }
 2182|       |
 2183|    678|  infof(data, "Using Stream ID: %x (easy handle %p)",
 2184|    678|        stream_id, (void *)data);
 2185|    678|  stream->stream_id = stream_id;
 2186|       |
 2187|    678|  rv = h2_session_send(data, h2);
 2188|    678|  if(rv) {
 2189|      0|    H2BUGF(infof(data,
 2190|      0|                 "http2_send() nghttp2_session_send error (%s)%d",
 2191|      0|                 nghttp2_strerror(rv), rv));
 2192|       |
 2193|      0|    *err = CURLE_SEND_ERROR;
 2194|      0|    return -1;
 2195|      0|  }
 2196|       |
 2197|    678|  if(should_close_session(httpc)) {
 2198|      0|    H2BUGF(infof(data, "http2_send: nothing to do in this session"));
 2199|      0|    *err = CURLE_HTTP2;
 2200|      0|    return -1;
 2201|      0|  }
 2202|       |
 2203|       |  /* If whole HEADERS frame was sent off to the underlying socket, the nghttp2
 2204|       |     library calls data_source_read_callback. But only it found that no data
 2205|       |     available, so it deferred the DATA transmission. Which means that
 2206|       |     nghttp2_session_want_write() returns 0 on http2_perform_getsock(), which
 2207|       |     results that no writable socket check is performed. To workaround this,
 2208|       |     we issue nghttp2_session_resume_data() here to bring back DATA
 2209|       |     transmission from deferred state. */
 2210|    678|  nghttp2_session_resume_data(h2, stream->stream_id);
 2211|       |
 2212|    678|  return len;
 2213|       |
 2214|     26|fail:
 2215|     26|  free(nva);
 2216|     26|  *err = CURLE_SEND_ERROR;
 2217|     26|  return -1;
 2218|    678|}
http2.c:inspect_header:
 1864|  4.64k|                                         const char *value, size_t valuelen) {
 1865|  4.64k|  switch(namelen) {
 1866|     80|  case 2:
 1867|     80|    if(!strncasecompare("te", name, namelen))
 1868|     26|      return HEADERINST_FORWARD;
 1869|       |
 1870|     54|    return contains_trailers(value, valuelen) ?
 1871|     54|           HEADERINST_TE_TRAILERS : HEADERINST_IGNORE;
 1872|    271|  case 7:
 1873|    271|    return strncasecompare("upgrade", name, namelen) ?
 1874|    271|           HEADERINST_IGNORE : HEADERINST_FORWARD;
 1875|  1.05k|  case 10:
 1876|  1.05k|    return (strncasecompare("connection", name, namelen) ||
 1877|  1.05k|            strncasecompare("keep-alive", name, namelen)) ?
 1878|    987|           HEADERINST_IGNORE : HEADERINST_FORWARD;
 1879|    126|  case 16:
 1880|    126|    return strncasecompare("proxy-connection", name, namelen) ?
 1881|    126|           HEADERINST_IGNORE : HEADERINST_FORWARD;
 1882|    124|  case 17:
 1883|    124|    return strncasecompare("transfer-encoding", name, namelen) ?
 1884|    124|           HEADERINST_IGNORE : HEADERINST_FORWARD;
 1885|  2.98k|  default:
 1886|  2.98k|    return HEADERINST_FORWARD;
 1887|  4.64k|  }
 1888|  4.64k|}
http2.c:contains_trailers:
 1830|     54|{
 1831|     54|  const char *end = p + len;
 1832|    250|  for(;;) {
 1833|    315|    for(; p != end && (*p == ' ' || *p == '\t'); ++p)
 1834|     65|      ;
 1835|    250|    if(p == end || (size_t)(end - p) < sizeof("trailers") - 1)
 1836|     16|      return FALSE;
 1837|    234|    if(strncasecompare("trailers", p, sizeof("trailers") - 1)) {
 1838|      0|      p += sizeof("trailers") - 1;
 1839|      0|      for(; p != end && (*p == ' ' || *p == '\t'); ++p)
 1840|      0|        ;
 1841|      0|      if(p == end || *p == ',')
 1842|      0|        return TRUE;
 1843|      0|    }
 1844|       |    /* skip to next token */
 1845|  4.97k|    for(; p != end && *p != ','; ++p)
 1846|  4.74k|      ;
 1847|    234|    if(p == end)
 1848|     38|      return FALSE;
 1849|    196|    ++p;
 1850|    196|  }
 1851|     54|}
http2.c:data_source_read_callback:
 1130|     64|{
 1131|     64|  struct Curl_easy *data_s;
 1132|     64|  struct HTTP *stream = NULL;
 1133|     64|  size_t nread;
 1134|     64|  (void)source;
 1135|     64|  (void)userp;
 1136|       |
 1137|     64|  if(stream_id) {
 1138|       |    /* get the stream from the hash based on Stream ID, stream ID zero is for
 1139|       |       connection-oriented stuff */
 1140|     64|    data_s = nghttp2_session_get_stream_user_data(session, stream_id);
 1141|     64|    if(!data_s)
 1142|       |      /* Receiving a Stream ID not in the hash should not happen, this is an
 1143|       |         internal error more than anything else! */
 1144|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1145|       |
 1146|     64|    stream = data_s->req.p.http;
 1147|     64|    if(!stream)
 1148|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1149|     64|  }
 1150|      0|  else
 1151|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 1152|       |
 1153|     64|  nread = CURLMIN(stream->upload_len, length);
 1154|     64|  if(nread > 0) {
 1155|     14|    memcpy(buf, stream->upload_mem, nread);
 1156|     14|    stream->upload_mem += nread;
 1157|     14|    stream->upload_len -= nread;
 1158|     14|    if(data_s->state.infilesize != -1)
 1159|     12|      stream->upload_left -= nread;
 1160|     14|  }
 1161|       |
 1162|     64|  if(stream->upload_left == 0)
 1163|     11|    *data_flags = NGHTTP2_DATA_FLAG_EOF;
 1164|     53|  else if(nread == 0)
 1165|     46|    return NGHTTP2_ERR_DEFERRED;
 1166|       |
 1167|     18|  H2BUGF(infof(data_s, "data_source_read_callback: "
 1168|     18|               "returns %zu bytes stream %u",
 1169|     18|               nread, stream_id));
 1170|       |
 1171|     18|  return nread;
 1172|     64|}

Curl_output_aws_sigv4:
   70|     19|{
   71|     19|  CURLcode ret = CURLE_OUT_OF_MEMORY;
   72|     19|  struct connectdata *conn = data->conn;
   73|     19|  size_t len;
   74|     19|  const char *tmp0;
   75|     19|  const char *tmp1;
   76|     19|  char *provider0_low = NULL;
   77|     19|  char *provider0_up = NULL;
   78|     19|  char *provider1_low = NULL;
   79|     19|  char *provider1_mid = NULL;
   80|     19|  char *region = NULL;
   81|     19|  char *service = NULL;
   82|     19|  const char *hostname = conn->host.name;
   83|     19|#ifdef DEBUGBUILD
   84|     19|  char *force_timestamp;
   85|     19|#endif
   86|     19|  time_t clock;
   87|     19|  struct tm tm;
   88|     19|  char timestamp[17];
   89|     19|  char date[9];
   90|     19|  const char *content_type = Curl_checkheaders(data, "Content-Type");
   91|     19|  char *canonical_headers = NULL;
   92|     19|  char *signed_headers = NULL;
   93|     19|  Curl_HttpReq httpreq;
   94|     19|  const char *method;
   95|     19|  size_t post_data_len;
   96|     19|  const char *post_data = data->set.postfields ? data->set.postfields : "";
   97|     19|  unsigned char sha_hash[32];
   98|     19|  char sha_hex[65];
   99|     19|  char *canonical_request = NULL;
  100|     19|  char *request_type = NULL;
  101|     19|  char *credential_scope = NULL;
  102|     19|  char *str_to_sign = NULL;
  103|     19|  const char *user = data->state.aptr.user ? data->state.aptr.user : "";
  104|     19|  const char *passwd = data->state.aptr.passwd ? data->state.aptr.passwd : "";
  105|     19|  char *secret = NULL;
  106|     19|  unsigned char tmp_sign0[32] = {0};
  107|     19|  unsigned char tmp_sign1[32] = {0};
  108|     19|  char *auth_headers = NULL;
  109|       |
  110|     19|  DEBUGASSERT(!proxy);
  111|     19|  (void)proxy;
  112|       |
  113|     19|  if(Curl_checkheaders(data, "Authorization")) {
  114|       |    /* Authorization already present, Bailing out */
  115|      0|    return CURLE_OK;
  116|      0|  }
  117|       |
  118|       |  /*
  119|       |   * Parameters parsing
  120|       |   * Google and Outscale use the same OSC or GOOG,
  121|       |   * but Amazon uses AWS and AMZ for header arguments.
  122|       |   * AWS is the default because most of non-amazon providers
  123|       |   * are still using aws:amz as a prefix.
  124|       |   */
  125|     19|  tmp0 = data->set.str[STRING_AWS_SIGV4] ?
  126|     19|    data->set.str[STRING_AWS_SIGV4] : "aws:amz";
  127|     19|  tmp1 = strchr(tmp0, ':');
  128|     19|  len = tmp1 ? (size_t)(tmp1 - tmp0) : strlen(tmp0);
  129|     19|  if(len < 1) {
  130|      0|    infof(data, "first provider can't be empty");
  131|      0|    ret = CURLE_BAD_FUNCTION_ARGUMENT;
  132|      0|    goto fail;
  133|      0|  }
  134|     19|  provider0_low = malloc(len + 1);
  135|     19|  provider0_up = malloc(len + 1);
  136|     19|  if(!provider0_low || !provider0_up) {
  137|      0|    goto fail;
  138|      0|  }
  139|     19|  Curl_strntolower(provider0_low, tmp0, len);
  140|     19|  provider0_low[len] = '\0';
  141|     19|  Curl_strntoupper(provider0_up, tmp0, len);
  142|     19|  provider0_up[len] = '\0';
  143|       |
  144|     19|  if(tmp1) {
  145|     19|    tmp0 = tmp1 + 1;
  146|     19|    tmp1 = strchr(tmp0, ':');
  147|     19|    len = tmp1 ? (size_t)(tmp1 - tmp0) : strlen(tmp0);
  148|     19|    if(len < 1) {
  149|      0|      infof(data, "second provider can't be empty");
  150|      0|      ret = CURLE_BAD_FUNCTION_ARGUMENT;
  151|      0|      goto fail;
  152|      0|    }
  153|     19|    provider1_low = malloc(len + 1);
  154|     19|    provider1_mid = malloc(len + 1);
  155|     19|    if(!provider1_low || !provider1_mid) {
  156|      0|      goto fail;
  157|      0|    }
  158|     19|    Curl_strntolower(provider1_low, tmp0, len);
  159|     19|    provider1_low[len] = '\0';
  160|     19|    Curl_strntolower(provider1_mid, tmp0, len);
  161|     19|    provider1_mid[0] = Curl_raw_toupper(provider1_mid[0]);
  162|     19|    provider1_mid[len] = '\0';
  163|       |
  164|     19|    if(tmp1) {
  165|      0|      tmp0 = tmp1 + 1;
  166|      0|      tmp1 = strchr(tmp0, ':');
  167|      0|      len = tmp1 ? (size_t)(tmp1 - tmp0) : strlen(tmp0);
  168|      0|      if(len < 1) {
  169|      0|        infof(data, "region can't be empty");
  170|      0|        ret = CURLE_BAD_FUNCTION_ARGUMENT;
  171|      0|        goto fail;
  172|      0|      }
  173|      0|      region = Curl_memdup(tmp0, len + 1);
  174|      0|      if(!region) {
  175|      0|        goto fail;
  176|      0|      }
  177|      0|      region[len] = '\0';
  178|       |
  179|      0|      if(tmp1) {
  180|      0|        tmp0 = tmp1 + 1;
  181|      0|        service = strdup(tmp0);
  182|      0|        if(!service) {
  183|      0|          goto fail;
  184|      0|        }
  185|      0|        if(strlen(service) < 1) {
  186|      0|          infof(data, "service can't be empty");
  187|      0|          ret = CURLE_BAD_FUNCTION_ARGUMENT;
  188|      0|          goto fail;
  189|      0|        }
  190|      0|      }
  191|      0|    }
  192|     19|  }
  193|      0|  else {
  194|      0|    provider1_low = Curl_memdup(provider0_low, len + 1);
  195|      0|    provider1_mid = Curl_memdup(provider0_low, len + 1);
  196|      0|    if(!provider1_low || !provider1_mid) {
  197|      0|      goto fail;
  198|      0|    }
  199|      0|    provider1_mid[0] = Curl_raw_toupper(provider1_mid[0]);
  200|      0|  }
  201|       |
  202|     19|  if(!service) {
  203|     19|    tmp0 = hostname;
  204|     19|    tmp1 = strchr(tmp0, '.');
  205|     19|    len = tmp1 - tmp0;
  206|     19|    if(!tmp1 || len < 1) {
  207|      2|      infof(data, "service missing in parameters or hostname");
  208|      2|      ret = CURLE_URL_MALFORMAT;
  209|      2|      goto fail;
  210|      2|    }
  211|     17|    service = Curl_memdup(tmp0, len + 1);
  212|     17|    if(!service) {
  213|      0|      goto fail;
  214|      0|    }
  215|     17|    service[len] = '\0';
  216|       |
  217|     17|    if(!region) {
  218|     17|      tmp0 = tmp1 + 1;
  219|     17|      tmp1 = strchr(tmp0, '.');
  220|     17|      len = tmp1 - tmp0;
  221|     17|      if(!tmp1 || len < 1) {
  222|      2|        infof(data, "region missing in parameters or hostname");
  223|      2|        ret = CURLE_URL_MALFORMAT;
  224|      2|        goto fail;
  225|      2|      }
  226|     15|      region = Curl_memdup(tmp0, len + 1);
  227|     15|      if(!region) {
  228|      0|        goto fail;
  229|      0|      }
  230|     15|      region[len] = '\0';
  231|     15|    }
  232|     17|  }
  233|       |
  234|     15|#ifdef DEBUGBUILD
  235|     15|  force_timestamp = getenv("CURL_FORCETIME");
  236|     15|  if(force_timestamp)
  237|      0|    clock = 0;
  238|     15|  else
  239|     15|    time(&clock);
  240|       |#else
  241|       |  time(&clock);
  242|       |#endif
  243|     15|  ret = Curl_gmtime(clock, &tm);
  244|     15|  if(ret != CURLE_OK) {
  245|      0|    goto fail;
  246|      0|  }
  247|     15|  if(!strftime(timestamp, sizeof(timestamp), "%Y%m%dT%H%M%SZ", &tm)) {
  248|      0|    goto fail;
  249|      0|  }
  250|     15|  memcpy(date, timestamp, sizeof(date));
  251|     15|  date[sizeof(date) - 1] = 0;
  252|       |
  253|     15|  if(content_type) {
  254|      0|    content_type = strchr(content_type, ':');
  255|      0|    if(!content_type) {
  256|      0|      ret = CURLE_FAILED_INIT;
  257|      0|      goto fail;
  258|      0|    }
  259|      0|    content_type++;
  260|       |    /* Skip whitespace now */
  261|      0|    while(*content_type == ' ' || *content_type == '\t')
  262|      0|      ++content_type;
  263|       |
  264|      0|    canonical_headers = curl_maprintf("content-type:%s\n"
  265|      0|                                      "host:%s\n"
  266|      0|                                      "x-%s-date:%s\n",
  267|      0|                                      content_type,
  268|      0|                                      hostname,
  269|      0|                                      provider1_low, timestamp);
  270|      0|    signed_headers = curl_maprintf("content-type;host;x-%s-date",
  271|      0|                                   provider1_low);
  272|      0|  }
  273|     15|  else {
  274|     15|    canonical_headers = curl_maprintf("host:%s\n"
  275|     15|                                      "x-%s-date:%s\n",
  276|     15|                                      hostname,
  277|     15|                                      provider1_low, timestamp);
  278|     15|    signed_headers = curl_maprintf("host;x-%s-date", provider1_low);
  279|     15|  }
  280|       |
  281|     15|  if(!canonical_headers || !signed_headers) {
  282|      0|    goto fail;
  283|      0|  }
  284|       |
  285|     15|  if(data->set.postfieldsize < 0)
  286|     15|    post_data_len = strlen(post_data);
  287|      0|  else
  288|      0|    post_data_len = (size_t)data->set.postfieldsize;
  289|     15|  Curl_sha256it(sha_hash,
  290|     15|                (const unsigned char *) post_data, post_data_len);
  291|     15|  sha256_to_hex(sha_hex, sha_hash, sizeof(sha_hex));
  292|       |
  293|     15|  Curl_http_method(data, conn, &method, &httpreq);
  294|       |
  295|     15|  canonical_request =
  296|     15|    curl_maprintf("%s\n" /* HTTPRequestMethod */
  297|     15|                  "%s\n" /* CanonicalURI */
  298|     15|                  "%s\n" /* CanonicalQueryString */
  299|     15|                  "%s\n" /* CanonicalHeaders */
  300|     15|                  "%s\n" /* SignedHeaders */
  301|     15|                  "%s",  /* HashedRequestPayload in hex */
  302|     15|                  method,
  303|     15|                  data->state.up.path,
  304|     15|                  data->state.up.query ? data->state.up.query : "",
  305|     15|                  canonical_headers,
  306|     15|                  signed_headers,
  307|     15|                  sha_hex);
  308|     15|  if(!canonical_request) {
  309|      0|    goto fail;
  310|      0|  }
  311|       |
  312|     15|  request_type = curl_maprintf("%s4_request", provider0_low);
  313|     15|  if(!request_type) {
  314|      0|    goto fail;
  315|      0|  }
  316|       |
  317|     15|  credential_scope = curl_maprintf("%s/%s/%s/%s",
  318|     15|                                   date, region, service, request_type);
  319|     15|  if(!credential_scope) {
  320|      0|    goto fail;
  321|      0|  }
  322|       |
  323|     15|  Curl_sha256it(sha_hash, (unsigned char *) canonical_request,
  324|     15|                strlen(canonical_request));
  325|     15|  sha256_to_hex(sha_hex, sha_hash, sizeof(sha_hex));
  326|       |
  327|       |  /*
  328|       |   * Google allow to use rsa key instead of HMAC, so this code might change
  329|       |   * In the future, but for now we support only HMAC version
  330|       |   */
  331|     15|  str_to_sign = curl_maprintf("%s4-HMAC-SHA256\n" /* Algorithm */
  332|     15|                              "%s\n" /* RequestDateTime */
  333|     15|                              "%s\n" /* CredentialScope */
  334|     15|                              "%s",  /* HashedCanonicalRequest in hex */
  335|     15|                              provider0_up,
  336|     15|                              timestamp,
  337|     15|                              credential_scope,
  338|     15|                              sha_hex);
  339|     15|  if(!str_to_sign) {
  340|      0|    goto fail;
  341|      0|  }
  342|       |
  343|     15|  secret = curl_maprintf("%s4%s", provider0_up, passwd);
  344|     15|  if(!secret) {
  345|      0|    goto fail;
  346|      0|  }
  347|       |
  348|     15|  HMAC_SHA256(secret, strlen(secret),
  349|     15|              date, strlen(date), tmp_sign0);
  350|     15|  HMAC_SHA256(tmp_sign0, sizeof(tmp_sign0),
  351|     15|              region, strlen(region), tmp_sign1);
  352|     15|  HMAC_SHA256(tmp_sign1, sizeof(tmp_sign1),
  353|     15|              service, strlen(service), tmp_sign0);
  354|     15|  HMAC_SHA256(tmp_sign0, sizeof(tmp_sign0),
  355|     15|              request_type, strlen(request_type), tmp_sign1);
  356|     15|  HMAC_SHA256(tmp_sign1, sizeof(tmp_sign1),
  357|     15|              str_to_sign, strlen(str_to_sign), tmp_sign0);
  358|       |
  359|     15|  sha256_to_hex(sha_hex, tmp_sign0, sizeof(sha_hex));
  360|       |
  361|     15|  auth_headers = curl_maprintf("Authorization: %s4-HMAC-SHA256 "
  362|     15|                               "Credential=%s/%s, "
  363|     15|                               "SignedHeaders=%s, "
  364|     15|                               "Signature=%s\r\n"
  365|     15|                               "X-%s-Date: %s\r\n",
  366|     15|                               provider0_up,
  367|     15|                               user,
  368|     15|                               credential_scope,
  369|     15|                               signed_headers,
  370|     15|                               sha_hex,
  371|     15|                               provider1_mid,
  372|     15|                               timestamp);
  373|     15|  if(!auth_headers) {
  374|      0|    goto fail;
  375|      0|  }
  376|       |
  377|     15|  Curl_safefree(data->state.aptr.userpwd);
  378|     15|  data->state.aptr.userpwd = auth_headers;
  379|     15|  data->state.authhost.done = TRUE;
  380|     15|  ret = CURLE_OK;
  381|       |
  382|     19|fail:
  383|     19|  free(provider0_low);
  384|     19|  free(provider0_up);
  385|     19|  free(provider1_low);
  386|     19|  free(provider1_mid);
  387|     19|  free(region);
  388|     19|  free(service);
  389|     19|  free(canonical_headers);
  390|     19|  free(signed_headers);
  391|     19|  free(canonical_request);
  392|     19|  free(request_type);
  393|     19|  free(credential_scope);
  394|     19|  free(str_to_sign);
  395|     19|  free(secret);
  396|     19|  return ret;
  397|     15|}
http_aws_sigv4.c:sha256_to_hex:
   60|     45|{
   61|     45|  int i;
   62|       |
   63|     45|  DEBUGASSERT(dst_l >= 65);
   64|  1.48k|  for(i = 0; i < 32; ++i) {
   65|  1.44k|    curl_msnprintf(dst + (i * 2), dst_l - (i * 2), "%02x", sha[i]);
   66|  1.44k|  }
   67|     45|}

Curl_input_digest:
   48|    118|{
   49|       |  /* Point to the correct struct with this */
   50|    118|  struct digestdata *digest;
   51|       |
   52|    118|  if(proxy) {
   53|      0|    digest = &data->state.proxydigest;
   54|      0|  }
   55|    118|  else {
   56|    118|    digest = &data->state.digest;
   57|    118|  }
   58|       |
   59|    118|  if(!checkprefix("Digest", header) || !ISSPACE(header[6]))
   60|      8|    return CURLE_BAD_CONTENT_ENCODING;
   61|       |
   62|    110|  header += strlen("Digest");
   63|    290|  while(*header && ISSPACE(*header))
   64|    180|    header++;
   65|       |
   66|    110|  return Curl_auth_decode_digest_http_message(header, digest);
   67|    118|}
Curl_output_digest:
   73|     95|{
   74|     95|  CURLcode result;
   75|     95|  unsigned char *path = NULL;
   76|     95|  char *tmp = NULL;
   77|     95|  char *response;
   78|     95|  size_t len;
   79|     95|  bool have_chlg;
   80|       |
   81|       |  /* Point to the address of the pointer that holds the string to send to the
   82|       |     server, which is for a plain host or for a HTTP proxy */
   83|     95|  char **allocuserpwd;
   84|       |
   85|       |  /* Point to the name and password for this */
   86|     95|  const char *userp;
   87|     95|  const char *passwdp;
   88|       |
   89|       |  /* Point to the correct struct with this */
   90|     95|  struct digestdata *digest;
   91|     95|  struct auth *authp;
   92|       |
   93|     95|  if(proxy) {
   94|       |#ifdef CURL_DISABLE_PROXY
   95|       |    return CURLE_NOT_BUILT_IN;
   96|       |#else
   97|      0|    digest = &data->state.proxydigest;
   98|      0|    allocuserpwd = &data->state.aptr.proxyuserpwd;
   99|      0|    userp = data->state.aptr.proxyuser;
  100|      0|    passwdp = data->state.aptr.proxypasswd;
  101|      0|    authp = &data->state.authproxy;
  102|      0|#endif
  103|      0|  }
  104|     95|  else {
  105|     95|    digest = &data->state.digest;
  106|     95|    allocuserpwd = &data->state.aptr.userpwd;
  107|     95|    userp = data->state.aptr.user;
  108|     95|    passwdp = data->state.aptr.passwd;
  109|     95|    authp = &data->state.authhost;
  110|     95|  }
  111|       |
  112|     95|  Curl_safefree(*allocuserpwd);
  113|       |
  114|       |  /* not set means empty */
  115|     95|  if(!userp)
  116|      1|    userp = "";
  117|       |
  118|     95|  if(!passwdp)
  119|     80|    passwdp = "";
  120|       |
  121|       |#if defined(USE_WINDOWS_SSPI)
  122|       |  have_chlg = digest->input_token ? TRUE : FALSE;
  123|       |#else
  124|     95|  have_chlg = digest->nonce ? TRUE : FALSE;
  125|     95|#endif
  126|       |
  127|     95|  if(!have_chlg) {
  128|     39|    authp->done = FALSE;
  129|     39|    return CURLE_OK;
  130|     39|  }
  131|       |
  132|       |  /* So IE browsers < v7 cut off the URI part at the query part when they
  133|       |     evaluate the MD5 and some (IIS?) servers work with them so we may need to
  134|       |     do the Digest IE-style. Note that the different ways cause different MD5
  135|       |     sums to get sent.
  136|       |
  137|       |     Apache servers can be set to do the Digest IE-style automatically using
  138|       |     the BrowserMatch feature:
  139|       |     https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie
  140|       |
  141|       |     Further details on Digest implementation differences:
  142|       |     http://www.fngtps.com/2006/09/http-authentication
  143|       |  */
  144|       |
  145|     56|  if(authp->iestyle) {
  146|     17|    tmp = strchr((char *)uripath, '?');
  147|     17|    if(tmp) {
  148|      3|      size_t urilen = tmp - (char *)uripath;
  149|       |      /* typecast is fine here since the value is always less than 32 bits */
  150|      3|      path = (unsigned char *) aprintf("%.*s", (int)urilen, uripath);
  151|      3|    }
  152|     17|  }
  153|     56|  if(!tmp)
  154|     53|    path = (unsigned char *) strdup((char *) uripath);
  155|       |
  156|     56|  if(!path)
  157|      0|    return CURLE_OUT_OF_MEMORY;
  158|       |
  159|     56|  result = Curl_auth_create_digest_http_message(data, userp, passwdp, request,
  160|     56|                                                path, digest, &response, &len);
  161|     56|  free(path);
  162|     56|  if(result)
  163|      0|    return result;
  164|       |
  165|     56|  *allocuserpwd = aprintf("%sAuthorization: Digest %s\r\n",
  166|     56|                          proxy ? "Proxy-" : "",
  167|     56|                          response);
  168|     56|  free(response);
  169|     56|  if(!*allocuserpwd)
  170|      0|    return CURLE_OUT_OF_MEMORY;
  171|       |
  172|     56|  authp->done = TRUE;
  173|       |
  174|     56|  return CURLE_OK;
  175|     56|}
Curl_http_auth_cleanup_digest:
  178|  4.57k|{
  179|  4.57k|  Curl_auth_digest_cleanup(&data->state.digest);
  180|  4.57k|  Curl_auth_digest_cleanup(&data->state.proxydigest);
  181|  4.57k|}

Curl_output_ntlm:
  128|      2|{
  129|      2|  char *base64 = NULL;
  130|      2|  size_t len = 0;
  131|      2|  CURLcode result = CURLE_OK;
  132|      2|  struct bufref ntlmmsg;
  133|       |
  134|       |  /* point to the address of the pointer that holds the string to send to the
  135|       |     server, which is for a plain host or for a HTTP proxy */
  136|      2|  char **allocuserpwd;
  137|       |
  138|       |  /* point to the username, password, service and host */
  139|      2|  const char *userp;
  140|      2|  const char *passwdp;
  141|      2|  const char *service = NULL;
  142|      2|  const char *hostname = NULL;
  143|       |
  144|       |  /* point to the correct struct with this */
  145|      2|  struct ntlmdata *ntlm;
  146|      2|  curlntlm *state;
  147|      2|  struct auth *authp;
  148|      2|  struct connectdata *conn = data->conn;
  149|       |
  150|      2|  DEBUGASSERT(conn);
  151|      2|  DEBUGASSERT(data);
  152|       |
  153|      2|  if(proxy) {
  154|      0|#ifndef CURL_DISABLE_PROXY
  155|      0|    allocuserpwd = &data->state.aptr.proxyuserpwd;
  156|      0|    userp = data->state.aptr.proxyuser;
  157|      0|    passwdp = data->state.aptr.proxypasswd;
  158|      0|    service = data->set.str[STRING_PROXY_SERVICE_NAME] ?
  159|      0|      data->set.str[STRING_PROXY_SERVICE_NAME] : "HTTP";
  160|      0|    hostname = conn->http_proxy.host.name;
  161|      0|    ntlm = &conn->proxyntlm;
  162|      0|    state = &conn->proxy_ntlm_state;
  163|      0|    authp = &data->state.authproxy;
  164|       |#else
  165|       |    return CURLE_NOT_BUILT_IN;
  166|       |#endif
  167|      0|  }
  168|      2|  else {
  169|      2|    allocuserpwd = &data->state.aptr.userpwd;
  170|      2|    userp = data->state.aptr.user;
  171|      2|    passwdp = data->state.aptr.passwd;
  172|      2|    service = data->set.str[STRING_SERVICE_NAME] ?
  173|      2|      data->set.str[STRING_SERVICE_NAME] : "HTTP";
  174|      2|    hostname = conn->host.name;
  175|      2|    ntlm = &conn->ntlm;
  176|      2|    state = &conn->http_ntlm_state;
  177|      2|    authp = &data->state.authhost;
  178|      2|  }
  179|      2|  authp->done = FALSE;
  180|       |
  181|       |  /* not set means empty */
  182|      2|  if(!userp)
  183|      1|    userp = "";
  184|       |
  185|      2|  if(!passwdp)
  186|      1|    passwdp = "";
  187|       |
  188|       |#ifdef USE_WINDOWS_SSPI
  189|       |  if(!s_hSecDll) {
  190|       |    /* not thread safe and leaks - use curl_global_init() to avoid */
  191|       |    CURLcode err = Curl_sspi_global_init();
  192|       |    if(!s_hSecDll)
  193|       |      return err;
  194|       |  }
  195|       |#ifdef SECPKG_ATTR_ENDPOINT_BINDINGS
  196|       |  ntlm->sslContext = conn->sslContext;
  197|       |#endif
  198|       |#endif
  199|       |
  200|      2|  Curl_bufref_init(&ntlmmsg);
  201|       |
  202|       |  /* connection is already authenticated, don't send a header in future
  203|       |   * requests so go directly to NTLMSTATE_LAST */
  204|      2|  if(*state == NTLMSTATE_TYPE3)
  205|      0|    *state = NTLMSTATE_LAST;
  206|       |
  207|      2|  switch(*state) {
  208|      0|  case NTLMSTATE_TYPE1:
  209|      2|  default: /* for the weird cases we (re)start here */
  210|       |    /* Create a type-1 message */
  211|      2|    result = Curl_auth_create_ntlm_type1_message(data, userp, passwdp,
  212|      2|                                                 service, hostname,
  213|      2|                                                 ntlm, &ntlmmsg);
  214|      2|    if(!result) {
  215|      2|      DEBUGASSERT(Curl_bufref_len(&ntlmmsg) != 0);
  216|      2|      result = Curl_base64_encode(data,
  217|      2|                                  (const char *) Curl_bufref_ptr(&ntlmmsg),
  218|      2|                                  Curl_bufref_len(&ntlmmsg), &base64, &len);
  219|      2|      if(!result) {
  220|      2|        free(*allocuserpwd);
  221|      2|        *allocuserpwd = aprintf("%sAuthorization: NTLM %s\r\n",
  222|      2|                                proxy ? "Proxy-" : "",
  223|      2|                                base64);
  224|      2|        free(base64);
  225|      2|        if(!*allocuserpwd)
  226|      0|          result = CURLE_OUT_OF_MEMORY;
  227|      2|      }
  228|      2|    }
  229|      2|    break;
  230|       |
  231|      2|  case NTLMSTATE_TYPE2:
  232|       |    /* We already received the type-2 message, create a type-3 message */
  233|      0|    result = Curl_auth_create_ntlm_type3_message(data, userp, passwdp,
  234|      0|                                                 ntlm, &ntlmmsg);
  235|      0|    if(!result && Curl_bufref_len(&ntlmmsg)) {
  236|      0|      result = Curl_base64_encode(data,
  237|      0|                                  (const char *) Curl_bufref_ptr(&ntlmmsg),
  238|      0|                                  Curl_bufref_len(&ntlmmsg), &base64, &len);
  239|      0|      if(!result) {
  240|      0|        free(*allocuserpwd);
  241|      0|        *allocuserpwd = aprintf("%sAuthorization: NTLM %s\r\n",
  242|      0|                                proxy ? "Proxy-" : "",
  243|      0|                                base64);
  244|      0|        free(base64);
  245|      0|        if(!*allocuserpwd)
  246|      0|          result = CURLE_OUT_OF_MEMORY;
  247|      0|        else {
  248|      0|          *state = NTLMSTATE_TYPE3; /* we send a type-3 */
  249|      0|          authp->done = TRUE;
  250|      0|        }
  251|      0|      }
  252|      0|    }
  253|      0|    break;
  254|       |
  255|      0|  case NTLMSTATE_LAST:
  256|      0|    Curl_safefree(*allocuserpwd);
  257|      0|    authp->done = TRUE;
  258|      0|    break;
  259|      2|  }
  260|      2|  Curl_bufref_free(&ntlmmsg);
  261|       |
  262|      2|  return result;
  263|      2|}
Curl_http_auth_cleanup_ntlm:
  266|  2.44k|{
  267|  2.44k|  Curl_auth_cleanup_ntlm(&conn->ntlm);
  268|  2.44k|  Curl_auth_cleanup_ntlm(&conn->proxyntlm);
  269|       |
  270|  2.44k|#if defined(NTLM_WB_ENABLED)
  271|  2.44k|  Curl_http_auth_cleanup_ntlm_wb(conn);
  272|  2.44k|#endif
  273|  2.44k|}

Curl_proxy_connect:
   80|  4.61k|{
   81|  4.61k|  struct connectdata *conn = data->conn;
   82|  4.61k|  if(conn->http_proxy.proxytype == CURLPROXY_HTTPS) {
   83|      0|    const CURLcode result = https_proxy_connect(data, sockindex);
   84|      0|    if(result)
   85|      0|      return result;
   86|      0|    if(!conn->bits.proxy_ssl_connected[sockindex])
   87|      0|      return result; /* wait for HTTPS proxy SSL initialization to complete */
   88|      0|  }
   89|       |
   90|  4.61k|  if(conn->bits.tunnel_proxy && conn->bits.httpproxy) {
   91|      0|#ifndef CURL_DISABLE_PROXY
   92|       |    /* for [protocol] tunneled through HTTP proxy */
   93|      0|    const char *hostname;
   94|      0|    int remote_port;
   95|      0|    CURLcode result;
   96|       |
   97|       |    /* We want "seamless" operations through HTTP proxy tunnel */
   98|       |
   99|       |    /* for the secondary socket (FTP), use the "connect to host"
  100|       |     * but ignore the "connect to port" (use the secondary port)
  101|       |     */
  102|       |
  103|      0|    if(conn->bits.conn_to_host)
  104|      0|      hostname = conn->conn_to_host.name;
  105|      0|    else if(sockindex == SECONDARYSOCKET)
  106|      0|      hostname = conn->secondaryhostname;
  107|      0|    else
  108|      0|      hostname = conn->host.name;
  109|       |
  110|      0|    if(sockindex == SECONDARYSOCKET)
  111|      0|      remote_port = conn->secondary_port;
  112|      0|    else if(conn->bits.conn_to_port)
  113|      0|      remote_port = conn->conn_to_port;
  114|      0|    else
  115|      0|      remote_port = conn->remote_port;
  116|       |
  117|      0|    result = Curl_proxyCONNECT(data, sockindex, hostname, remote_port);
  118|      0|    if(CURLE_OK != result)
  119|      0|      return result;
  120|      0|    Curl_safefree(data->state.aptr.proxyuserpwd);
  121|       |#else
  122|       |    return CURLE_NOT_BUILT_IN;
  123|       |#endif
  124|      0|  }
  125|       |  /* no HTTP tunnel proxy, just return */
  126|  4.61k|  return CURLE_OK;
  127|  4.61k|}
Curl_connect_ongoing:
  136|  6.92k|{
  137|  6.92k|  return conn->connect_state &&
  138|  6.92k|    (conn->connect_state->tunnel_state <= TUNNEL_COMPLETE);
  139|  6.92k|}
Curl_connect_free:
 1021|  2.30k|{
 1022|  2.30k|  struct connectdata *conn = data->conn;
 1023|  2.30k|  struct http_connect_state *s = conn->connect_state;
 1024|  2.30k|  if(s) {
 1025|      0|    free(s);
 1026|      0|    conn->connect_state = NULL;
 1027|      0|  }
 1028|  2.30k|}

Curl_ipv6_scope:
   65|  2.30k|{
   66|       |#ifndef ENABLE_IPV6
   67|       |  (void) sa;
   68|       |#else
   69|  2.30k|  if(sa->sa_family == AF_INET6) {
   70|      0|    const struct sockaddr_in6 * sa6 = (const struct sockaddr_in6 *)(void *) sa;
   71|      0|    const unsigned char *b = sa6->sin6_addr.s6_addr;
   72|      0|    unsigned short w = (unsigned short) ((b[0] << 8) | b[1]);
   73|       |
   74|      0|    if((b[0] & 0xFE) == 0xFC) /* Handle ULAs */
   75|      0|      return IPV6_SCOPE_UNIQUELOCAL;
   76|      0|    switch(w & 0xFFC0) {
   77|      0|    case 0xFE80:
   78|      0|      return IPV6_SCOPE_LINKLOCAL;
   79|      0|    case 0xFEC0:
   80|      0|      return IPV6_SCOPE_SITELOCAL;
   81|      0|    case 0x0000:
   82|      0|      w = b[1] | b[2] | b[3] | b[4] | b[5] | b[6] | b[7] | b[8] | b[9] |
   83|      0|          b[10] | b[11] | b[12] | b[13] | b[14];
   84|      0|      if(w || b[15] != 0x01)
   85|      0|        break;
   86|      0|      return IPV6_SCOPE_NODELOCAL;
   87|      0|    default:
   88|      0|      break;
   89|      0|    }
   90|      0|  }
   91|  2.30k|#endif
   92|       |
   93|  2.30k|  return IPV6_SCOPE_GLOBAL;
   94|  2.30k|}

Curl_llist_init:
   38|  2.30M|{
   39|  2.30M|  l->size = 0;
   40|  2.30M|  l->dtor = dtor;
   41|  2.30M|  l->head = NULL;
   42|  2.30M|  l->tail = NULL;
   43|  2.30M|}
Curl_llist_insert_next:
   60|  21.3k|{
   61|  21.3k|  ne->ptr = (void *) p;
   62|  21.3k|  if(list->size == 0) {
   63|  16.1k|    list->head = ne;
   64|  16.1k|    list->head->prev = NULL;
   65|  16.1k|    list->head->next = NULL;
   66|  16.1k|    list->tail = ne;
   67|  16.1k|  }
   68|  5.26k|  else {
   69|       |    /* if 'e' is NULL here, we insert the new element first in the list */
   70|  5.26k|    ne->next = e?e->next:list->head;
   71|  5.26k|    ne->prev = e;
   72|  5.26k|    if(!e) {
   73|    465|      list->head->prev = ne;
   74|    465|      list->head = ne;
   75|    465|    }
   76|  4.79k|    else if(e->next) {
   77|     12|      e->next->prev = ne;
   78|     12|    }
   79|  4.78k|    else {
   80|  4.78k|      list->tail = ne;
   81|  4.78k|    }
   82|  5.26k|    if(e)
   83|  4.79k|      e->next = ne;
   84|  5.26k|  }
   85|       |
   86|  21.3k|  ++list->size;
   87|  21.3k|}
Curl_llist_remove:
   95|  21.3k|{
   96|  21.3k|  void *ptr;
   97|  21.3k|  if(!e || list->size == 0)
   98|      0|    return;
   99|       |
  100|  21.3k|  if(e == list->head) {
  101|  17.5k|    list->head = e->next;
  102|       |
  103|  17.5k|    if(!list->head)
  104|  16.1k|      list->tail = NULL;
  105|  1.46k|    else
  106|  1.46k|      e->next->prev = NULL;
  107|  17.5k|  }
  108|  3.79k|  else {
  109|  3.79k|    if(e->prev)
  110|  3.79k|      e->prev->next = e->next;
  111|       |
  112|  3.79k|    if(!e->next)
  113|  3.59k|      list->tail = e->prev;
  114|    206|    else
  115|    206|      e->next->prev = e->prev;
  116|  3.79k|  }
  117|       |
  118|  21.3k|  ptr = e->ptr;
  119|       |
  120|  21.3k|  e->ptr  = NULL;
  121|  21.3k|  e->prev = NULL;
  122|  21.3k|  e->next = NULL;
  123|       |
  124|  21.3k|  --list->size;
  125|       |
  126|       |  /* call the dtor() last for when it actually frees the 'e' memory itself */
  127|  21.3k|  if(list->dtor)
  128|  6.83k|    list->dtor(user, ptr);
  129|  21.3k|}
Curl_llist_destroy:
  133|  2.31M|{
  134|  2.31M|  if(list) {
  135|  2.31M|    while(list->size > 0)
  136|  2.12k|      Curl_llist_remove(list, list->tail, user);
  137|  2.31M|  }
  138|  2.31M|}
Curl_llist_count:
  142|  7.50k|{
  143|  7.50k|  return list->size;
  144|  7.50k|}

Curl_md5it:
  561|    168|{
  562|    168|  MD5_CTX ctx;
  563|       |
  564|    168|  MD5_Init(&ctx);
  565|    168|  MD5_Update(&ctx, input, curlx_uztoui(len));
  566|    168|  MD5_Final(outbuffer, &ctx);
  567|    168|}

curl_dbg_malloc:
  131|   133k|{
  132|   133k|  struct memdebug *mem;
  133|   133k|  size_t size;
  134|       |
  135|   133k|  DEBUGASSERT(wantedsize != 0);
  136|       |
  137|   133k|  if(countcheck("malloc", line, source))
  138|      0|    return NULL;
  139|       |
  140|       |  /* alloc at least 64 bytes */
  141|   133k|  size = sizeof(struct memdebug) + wantedsize;
  142|       |
  143|   133k|  mem = (Curl_cmalloc)(size);
  144|   133k|  if(mem) {
  145|   133k|    mem->size = wantedsize;
  146|   133k|  }
  147|       |
  148|   133k|  if(source)
  149|  42.3k|    curl_dbg_log("MEM %s:%d malloc(%zu) = %p\n",
  150|  42.3k|                 source, line, wantedsize,
  151|  42.3k|                 mem ? (void *)mem->mem : (void *)0);
  152|       |
  153|   133k|  return (mem ? mem->mem : NULL);
  154|   133k|}
curl_dbg_calloc:
  158|  39.6k|{
  159|  39.6k|  struct memdebug *mem;
  160|  39.6k|  size_t size, user_size;
  161|       |
  162|  39.6k|  DEBUGASSERT(wanted_elements != 0);
  163|  39.6k|  DEBUGASSERT(wanted_size != 0);
  164|       |
  165|  39.6k|  if(countcheck("calloc", line, source))
  166|      0|    return NULL;
  167|       |
  168|       |  /* alloc at least 64 bytes */
  169|  39.6k|  user_size = wanted_size * wanted_elements;
  170|  39.6k|  size = sizeof(struct memdebug) + user_size;
  171|       |
  172|  39.6k|  mem = (Curl_ccalloc)(1, size);
  173|  39.6k|  if(mem)
  174|  39.6k|    mem->size = user_size;
  175|       |
  176|  39.6k|  if(source)
  177|  39.6k|    curl_dbg_log("MEM %s:%d calloc(%zu,%zu) = %p\n",
  178|  39.6k|                 source, line, wanted_elements, wanted_size,
  179|  39.6k|                 mem ? (void *)mem->mem : (void *)0);
  180|       |
  181|  39.6k|  return (mem ? mem->mem : NULL);
  182|  39.6k|}
curl_dbg_strdup:
  185|  91.5k|{
  186|  91.5k|  char *mem;
  187|  91.5k|  size_t len;
  188|       |
  189|  91.5k|  DEBUGASSERT(str != NULL);
  190|       |
  191|  91.5k|  if(countcheck("strdup", line, source))
  192|      0|    return NULL;
  193|       |
  194|  91.5k|  len = strlen(str) + 1;
  195|       |
  196|  91.5k|  mem = curl_dbg_malloc(len, 0, NULL); /* NULL prevents logging */
  197|  91.5k|  if(mem)
  198|  91.5k|    memcpy(mem, str, len);
  199|       |
  200|  91.5k|  if(source)
  201|  91.5k|    curl_dbg_log("MEM %s:%d strdup(%p) (%zu) = %p\n",
  202|  91.5k|                 source, line, (const void *)str, len, (const void *)mem);
  203|       |
  204|  91.5k|  return mem;
  205|  91.5k|}
curl_dbg_realloc:
  237|  28.7k|{
  238|  28.7k|  struct memdebug *mem = NULL;
  239|       |
  240|  28.7k|  size_t size = sizeof(struct memdebug) + wantedsize;
  241|       |
  242|  28.7k|  DEBUGASSERT(wantedsize != 0);
  243|       |
  244|  28.7k|  if(countcheck("realloc", line, source))
  245|      0|    return NULL;
  246|       |
  247|       |#ifdef __INTEL_COMPILER
  248|       |#  pragma warning(push)
  249|       |#  pragma warning(disable:1684)
  250|       |   /* 1684: conversion from pointer to same-sized integral type */
  251|       |#endif
  252|       |
  253|  28.7k|  if(ptr)
  254|  11.9k|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  255|       |
  256|       |#ifdef __INTEL_COMPILER
  257|       |#  pragma warning(pop)
  258|       |#endif
  259|       |
  260|  28.7k|  mem = (Curl_crealloc)(mem, size);
  261|  28.7k|  if(source)
  262|  28.7k|    curl_dbg_log("MEM %s:%d realloc(%p, %zu) = %p\n",
  263|  28.7k|                source, line, (void *)ptr, wantedsize,
  264|  28.7k|                mem ? (void *)mem->mem : (void *)0);
  265|       |
  266|  28.7k|  if(mem) {
  267|  28.7k|    mem->size = wantedsize;
  268|  28.7k|    return mem->mem;
  269|  28.7k|  }
  270|       |
  271|      0|  return NULL;
  272|  28.7k|}
curl_dbg_free:
  275|  1.12M|{
  276|  1.12M|  if(ptr) {
  277|   190k|    struct memdebug *mem;
  278|       |
  279|       |#ifdef __INTEL_COMPILER
  280|       |#  pragma warning(push)
  281|       |#  pragma warning(disable:1684)
  282|       |   /* 1684: conversion from pointer to same-sized integral type */
  283|       |#endif
  284|       |
  285|   190k|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  286|       |
  287|       |#ifdef __INTEL_COMPILER
  288|       |#  pragma warning(pop)
  289|       |#endif
  290|       |
  291|       |    /* free for real */
  292|   190k|    (Curl_cfree)(mem);
  293|   190k|  }
  294|       |
  295|  1.12M|  if(source && ptr)
  296|   190k|    curl_dbg_log("MEM %s:%d free(%p)\n", source, line, (void *)ptr);
  297|  1.12M|}
curl_dbg_socket:
  301|  2.25k|{
  302|  2.25k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  303|  2.25k|    "FD %s:%d socket() = %d\n" :
  304|  2.25k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  305|      0|    "FD %s:%d socket() = %ld\n" :
  306|      0|    "FD %s:%d socket() = %zd\n";
  307|       |
  308|  2.25k|  curl_socket_t sockfd;
  309|       |
  310|  2.25k|  if(countcheck("socket", line, source))
  311|      0|    return CURL_SOCKET_BAD;
  312|       |
  313|  2.25k|  sockfd = socket(domain, type, protocol);
  314|       |
  315|  2.25k|  if(source && (sockfd != CURL_SOCKET_BAD))
  316|  2.25k|    curl_dbg_log(fmt, source, line, sockfd);
  317|       |
  318|  2.25k|  return sockfd;
  319|  2.25k|}
curl_dbg_send:
  325|  5.38k|{
  326|  5.38k|  SEND_TYPE_RETV rc;
  327|  5.38k|  if(countcheck("send", line, source))
  328|      0|    return -1;
  329|  5.38k|  rc = send(sockfd, buf, len, flags);
  330|  5.38k|  if(source)
  331|  5.38k|    curl_dbg_log("SEND %s:%d send(%lu) = %ld\n",
  332|  5.38k|                source, line, (unsigned long)len, (long)rc);
  333|  5.38k|  return rc;
  334|  5.38k|}
curl_dbg_recv:
  339|  4.65k|{
  340|  4.65k|  RECV_TYPE_RETV rc;
  341|  4.65k|  if(countcheck("recv", line, source))
  342|      0|    return -1;
  343|  4.65k|  rc = recv(sockfd, buf, len, flags);
  344|  4.65k|  if(source)
  345|  4.65k|    curl_dbg_log("RECV %s:%d recv(%lu) = %ld\n",
  346|  4.65k|                source, line, (unsigned long)len, (long)rc);
  347|  4.65k|  return rc;
  348|  4.65k|}
curl_dbg_socketpair:
  354|  2.25k|{
  355|  2.25k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  356|  2.25k|    "FD %s:%d socketpair() = %d %d\n" :
  357|  2.25k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  358|      0|    "FD %s:%d socketpair() = %ld %ld\n" :
  359|      0|    "FD %s:%d socketpair() = %zd %zd\n";
  360|       |
  361|  2.25k|  int res = socketpair(domain, type, protocol, socket_vector);
  362|       |
  363|  2.25k|  if(source && (0 == res))
  364|  2.25k|    curl_dbg_log(fmt, source, line, socket_vector[0], socket_vector[1]);
  365|       |
  366|  2.25k|  return res;
  367|  2.25k|}
curl_dbg_mark_sclose:
  392|  9.07k|{
  393|  9.07k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  394|  9.07k|    "FD %s:%d sclose(%d)\n":
  395|  9.07k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  396|      0|    "FD %s:%d sclose(%ld)\n":
  397|      0|    "FD %s:%d sclose(%zd)\n";
  398|       |
  399|  9.07k|  if(source)
  400|  9.07k|    curl_dbg_log(fmt, source, line, sockfd);
  401|  9.07k|}
curl_dbg_sclose:
  405|  9.07k|{
  406|  9.07k|  int res = sclose(sockfd);
  407|  9.07k|  curl_dbg_mark_sclose(sockfd, line, source);
  408|  9.07k|  return res;
  409|  9.07k|}
curl_dbg_fopen:
  413|  2.25k|{
  414|  2.25k|  FILE *res = fopen(file, mode);
  415|       |
  416|  2.25k|  if(source)
  417|  2.25k|    curl_dbg_log("FILE %s:%d fopen(\"%s\",\"%s\") = %p\n",
  418|  2.25k|                source, line, file, mode, (void *)res);
  419|       |
  420|  2.25k|  return res;
  421|  2.25k|}
curl_dbg_fclose:
  434|  2.25k|{
  435|  2.25k|  int res;
  436|       |
  437|  2.25k|  DEBUGASSERT(file != NULL);
  438|       |
  439|  2.25k|  if(source)
  440|  2.25k|    curl_dbg_log("FILE %s:%d fclose(%p)\n",
  441|  2.25k|                 source, line, (void *)file);
  442|       |
  443|  2.25k|  res = fclose(file);
  444|       |
  445|  2.25k|  return res;
  446|  2.25k|}
curl_dbg_log:
  452|   420k|{
  453|   420k|  char *buf;
  454|   420k|  int nchars;
  455|   420k|  va_list ap;
  456|       |
  457|   420k|  if(!curl_dbg_logfile)
  458|   420k|    return;
  459|       |
  460|      0|  buf = (Curl_cmalloc)(LOGLINE_BUFSIZE);
  461|      0|  if(!buf)
  462|      0|    return;
  463|       |
  464|      0|  va_start(ap, format);
  465|      0|  nchars = mvsnprintf(buf, LOGLINE_BUFSIZE, format, ap);
  466|      0|  va_end(ap);
  467|       |
  468|      0|  if(nchars > LOGLINE_BUFSIZE - 1)
  469|      0|    nchars = LOGLINE_BUFSIZE - 1;
  470|       |
  471|      0|  if(nchars > 0)
  472|      0|    fwrite(buf, 1, (size_t)nchars, curl_dbg_logfile);
  473|       |
  474|      0|  (Curl_cfree)(buf);
  475|      0|}
memdebug.c:countcheck:
  106|   306k|{
  107|       |  /* if source is NULL, then the call is made internally and this check
  108|       |     should not be made */
  109|   306k|  if(memlimit && source) {
  110|      0|    if(!memsize) {
  111|       |      /* log to file */
  112|      0|      curl_dbg_log("LIMIT %s:%d %s reached memlimit\n",
  113|      0|                   source, line, func);
  114|       |      /* log to stderr also */
  115|      0|      fprintf(stderr, "LIMIT %s:%d %s reached memlimit\n",
  116|      0|              source, line, func);
  117|      0|      fflush(curl_dbg_logfile); /* because it might crash now */
  118|      0|      errno = ENOMEM;
  119|      0|      return TRUE; /* RETURN ERROR! */
  120|      0|    }
  121|      0|    else
  122|      0|      memsize--; /* countdown */
  123|       |
  124|       |
  125|      0|  }
  126|       |
  127|   306k|  return FALSE; /* allow this */
  128|   306k|}

Curl_mime_cleanpart:
 1200|  9.72k|{
 1201|  9.72k|  cleanup_part_content(part);
 1202|  9.72k|  curl_slist_free_all(part->curlheaders);
 1203|  9.72k|  if(part->flags & MIME_USERHEADERS_OWNER)
 1204|      0|    curl_slist_free_all(part->userheaders);
 1205|  9.72k|  Curl_safefree(part->mimetype);
 1206|  9.72k|  Curl_safefree(part->name);
 1207|  9.72k|  Curl_safefree(part->filename);
 1208|  9.72k|  Curl_mime_initpart(part, part->easy);
 1209|  9.72k|}
curl_mime_free:
 1213|    174|{
 1214|    174|  curl_mimepart *part;
 1215|       |
 1216|    174|  if(mime) {
 1217|    174|    mime_subparts_unbind(mime);  /* Be sure it's not referenced anymore. */
 1218|  3.01k|    while(mime->firstpart) {
 1219|  2.84k|      part = mime->firstpart;
 1220|  2.84k|      mime->firstpart = part->nextpart;
 1221|  2.84k|      Curl_mime_cleanpart(part);
 1222|  2.84k|      free(part);
 1223|  2.84k|    }
 1224|    174|    free(mime);
 1225|    174|  }
 1226|    174|}
curl_mime_init:
 1309|    174|{
 1310|    174|  curl_mime *mime;
 1311|       |
 1312|    174|  mime = (curl_mime *) malloc(sizeof(*mime));
 1313|       |
 1314|    174|  if(mime) {
 1315|    174|    mime->easy = easy;
 1316|    174|    mime->parent = NULL;
 1317|    174|    mime->firstpart = NULL;
 1318|    174|    mime->lastpart = NULL;
 1319|       |
 1320|    174|    memset(mime->boundary, '-', 24);
 1321|    174|    if(Curl_rand_hex(easy, (unsigned char *) &mime->boundary[24],
 1322|    174|                     MIME_RAND_BOUNDARY_CHARS + 1)) {
 1323|       |      /* failed to get random separator, bail out */
 1324|      0|      free(mime);
 1325|      0|      return NULL;
 1326|      0|    }
 1327|    174|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1328|    174|  }
 1329|       |
 1330|    174|  return mime;
 1331|    174|}
Curl_mime_initpart:
 1335|  19.4k|{
 1336|  19.4k|  memset((char *) part, 0, sizeof(*part));
 1337|  19.4k|  part->easy = easy;
 1338|  19.4k|  part->lastreadstatus = 1; /* Successful read status. */
 1339|  19.4k|  mimesetstate(&part->state, MIMESTATE_BEGIN, NULL);
 1340|  19.4k|}
curl_mime_addpart:
 1344|  2.84k|{
 1345|  2.84k|  curl_mimepart *part;
 1346|       |
 1347|  2.84k|  if(!mime)
 1348|      0|    return NULL;
 1349|       |
 1350|  2.84k|  part = (curl_mimepart *) malloc(sizeof(*part));
 1351|       |
 1352|  2.84k|  if(part) {
 1353|  2.84k|    Curl_mime_initpart(part, mime->easy);
 1354|  2.84k|    part->parent = mime;
 1355|       |
 1356|  2.84k|    if(mime->lastpart)
 1357|  2.66k|      mime->lastpart->nextpart = part;
 1358|    174|    else
 1359|    174|      mime->firstpart = part;
 1360|       |
 1361|  2.84k|    mime->lastpart = part;
 1362|  2.84k|  }
 1363|       |
 1364|  2.84k|  return part;
 1365|  2.84k|}
curl_mime_name:
 1369|    234|{
 1370|    234|  if(!part)
 1371|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1372|       |
 1373|    234|  Curl_safefree(part->name);
 1374|    234|  part->name = NULL;
 1375|       |
 1376|    234|  if(name) {
 1377|    234|    part->name = strdup(name);
 1378|    234|    if(!part->name)
 1379|      0|      return CURLE_OUT_OF_MEMORY;
 1380|    234|  }
 1381|       |
 1382|    234|  return CURLE_OK;
 1383|    234|}
curl_mime_data:
 1406|  2.72k|{
 1407|  2.72k|  if(!part)
 1408|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|       |
 1410|  2.72k|  cleanup_part_content(part);
 1411|       |
 1412|  2.72k|  if(data) {
 1413|  2.72k|    if(datasize == CURL_ZERO_TERMINATED)
 1414|      0|      datasize = strlen(data);
 1415|       |
 1416|  2.72k|    part->data = malloc(datasize + 1);
 1417|  2.72k|    if(!part->data)
 1418|      0|      return CURLE_OUT_OF_MEMORY;
 1419|       |
 1420|  2.72k|    part->datasize = datasize;
 1421|       |
 1422|  2.72k|    if(datasize)
 1423|  2.70k|      memcpy(part->data, data, datasize);
 1424|  2.72k|    part->data[datasize] = '\0';    /* Set a null terminator as sentinel. */
 1425|       |
 1426|  2.72k|    part->readfunc = mime_mem_read;
 1427|  2.72k|    part->seekfunc = mime_mem_seek;
 1428|  2.72k|    part->freefunc = mime_mem_free;
 1429|  2.72k|    part->flags |= MIME_FAST_READ;
 1430|  2.72k|    part->kind = MIMEKIND_DATA;
 1431|  2.72k|  }
 1432|       |
 1433|  2.72k|  return CURLE_OK;
 1434|  2.72k|}
curl_mime_headers:
 1529|    276|{
 1530|    276|  if(!part)
 1531|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1532|       |
 1533|    276|  if(part->flags & MIME_USERHEADERS_OWNER) {
 1534|      0|    if(part->userheaders != headers)  /* Allow setting twice the same list. */
 1535|      0|      curl_slist_free_all(part->userheaders);
 1536|      0|    part->flags &= ~MIME_USERHEADERS_OWNER;
 1537|      0|  }
 1538|    276|  part->userheaders = headers;
 1539|    276|  if(headers && take_ownership)
 1540|      0|    part->flags |= MIME_USERHEADERS_OWNER;
 1541|    276|  return CURLE_OK;
 1542|    276|}
Curl_mime_set_subparts:
 1570|    159|{
 1571|    159|  curl_mime *root;
 1572|       |
 1573|    159|  if(!part)
 1574|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1575|       |
 1576|       |  /* Accept setting twice the same subparts. */
 1577|    159|  if(part->kind == MIMEKIND_MULTIPART && part->arg == subparts)
 1578|      0|    return CURLE_OK;
 1579|       |
 1580|    159|  cleanup_part_content(part);
 1581|       |
 1582|    159|  if(subparts) {
 1583|       |    /* Must belong to the same data handle. */
 1584|    159|    if(part->easy && subparts->easy && part->easy != subparts->easy)
 1585|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1586|       |
 1587|       |    /* Should not have been attached already. */
 1588|    159|    if(subparts->parent)
 1589|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1590|       |
 1591|       |    /* Should not be the part's root. */
 1592|    159|    root = part->parent;
 1593|    159|    if(root) {
 1594|      0|      while(root->parent && root->parent->parent)
 1595|      0|        root = root->parent->parent;
 1596|      0|      if(subparts == root) {
 1597|      0|        if(part->easy)
 1598|      0|          failf(part->easy, "Can't add itself as a subpart!");
 1599|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
 1600|      0|      }
 1601|      0|    }
 1602|       |
 1603|    159|    subparts->parent = part;
 1604|       |    /* Subparts are processed internally: no read callback. */
 1605|    159|    part->seekfunc = mime_subparts_seek;
 1606|    159|    part->freefunc = take_ownership? mime_subparts_free: mime_subparts_unbind;
 1607|    159|    part->arg = subparts;
 1608|    159|    part->datasize = -1;
 1609|    159|    part->kind = MIMEKIND_MULTIPART;
 1610|    159|  }
 1611|       |
 1612|    159|  return CURLE_OK;
 1613|    159|}
Curl_mime_read:
 1624|     95|{
 1625|     95|  curl_mimepart *part = (curl_mimepart *) instream;
 1626|     95|  size_t ret;
 1627|     95|  bool hasread;
 1628|       |
 1629|     95|  (void) size;   /* Always 1. */
 1630|       |
 1631|     95|  do {
 1632|     95|    hasread = FALSE;
 1633|     95|    ret = readback_part(part, buffer, nitems, &hasread);
 1634|       |    /*
 1635|       |     * If this is not possible to get some data without calling more than
 1636|       |     * one read callback (probably because a content encoder is not able to
 1637|       |     * deliver a new bunch for the few data accumulated so far), force another
 1638|       |     * read until we get enough data or a special exit code.
 1639|       |     */
 1640|     95|  } while(ret == STOP_FILLING);
 1641|       |
 1642|     95|  return ret;
 1643|     95|}
Curl_mime_rewind:
 1647|    142|{
 1648|    142|  return mime_part_rewind(part) == CURL_SEEKFUNC_OK?
 1649|    134|         CURLE_OK: CURLE_SEND_FAIL_REWIND;
 1650|    142|}
Curl_mime_size:
 1693|  2.27k|{
 1694|  2.27k|  curl_off_t size;
 1695|       |
 1696|  2.27k|  if(part->kind == MIMEKIND_MULTIPART)
 1697|    132|    part->datasize = multipart_size(part->arg);
 1698|       |
 1699|  2.27k|  size = part->datasize;
 1700|       |
 1701|  2.27k|  if(part->encoder)
 1702|      0|    size = part->encoder->sizefunc(part);
 1703|       |
 1704|  2.27k|  if(size >= 0 && !(part->flags & MIME_BODY_ONLY)) {
 1705|       |    /* Compute total part size. */
 1706|  2.14k|    size += slist_size(part->curlheaders, 2, NULL);
 1707|  2.14k|    size += slist_size(part->userheaders, 2, "Content-Type");
 1708|  2.14k|    size += 2;    /* CRLF after headers. */
 1709|  2.14k|  }
 1710|  2.27k|  return size;
 1711|  2.27k|}
Curl_mime_add_header:
 1716|  2.29k|{
 1717|  2.29k|  struct curl_slist *hdr = NULL;
 1718|  2.29k|  char *s = NULL;
 1719|  2.29k|  va_list ap;
 1720|       |
 1721|  2.29k|  va_start(ap, fmt);
 1722|  2.29k|  s = curl_mvaprintf(fmt, ap);
 1723|  2.29k|  va_end(ap);
 1724|       |
 1725|  2.29k|  if(s) {
 1726|  2.29k|    hdr = Curl_slist_append_nodup(*slp, s);
 1727|  2.29k|    if(hdr)
 1728|  2.29k|      *slp = hdr;
 1729|      0|    else
 1730|      0|      free(s);
 1731|  2.29k|  }
 1732|       |
 1733|  2.29k|  return hdr? CURLE_OK: CURLE_OUT_OF_MEMORY;
 1734|  2.29k|}
Curl_mime_contenttype:
 1746|  2.15k|{
 1747|       |  /*
 1748|       |   * If no content type was specified, we scan through a few well-known
 1749|       |   * extensions and pick the first we match!
 1750|       |   */
 1751|  2.15k|  struct ContentType {
 1752|  2.15k|    const char *extension;
 1753|  2.15k|    const char *type;
 1754|  2.15k|  };
 1755|  2.15k|  static const struct ContentType ctts[] = {
 1756|  2.15k|    {".gif",  "image/gif"},
 1757|  2.15k|    {".jpg",  "image/jpeg"},
 1758|  2.15k|    {".jpeg", "image/jpeg"},
 1759|  2.15k|    {".png",  "image/png"},
 1760|  2.15k|    {".svg",  "image/svg+xml"},
 1761|  2.15k|    {".txt",  "text/plain"},
 1762|  2.15k|    {".htm",  "text/html"},
 1763|  2.15k|    {".html", "text/html"},
 1764|  2.15k|    {".pdf",  "application/pdf"},
 1765|  2.15k|    {".xml",  "application/xml"}
 1766|  2.15k|  };
 1767|       |
 1768|  2.15k|  if(filename) {
 1769|      0|    size_t len1 = strlen(filename);
 1770|      0|    const char *nameend = filename + len1;
 1771|      0|    unsigned int i;
 1772|       |
 1773|      0|    for(i = 0; i < sizeof(ctts) / sizeof(ctts[0]); i++) {
 1774|      0|      size_t len2 = strlen(ctts[i].extension);
 1775|       |
 1776|      0|      if(len1 >= len2 && strcasecompare(nameend - len2, ctts[i].extension))
 1777|      0|          return ctts[i].type;
 1778|      0|    }
 1779|      0|  }
 1780|  2.15k|  return NULL;
 1781|  2.15k|}
Curl_mime_prepare_headers:
 1804|  2.29k|{
 1805|  2.29k|  curl_mime *mime = NULL;
 1806|  2.29k|  const char *boundary = NULL;
 1807|  2.29k|  char *customct;
 1808|  2.29k|  const char *cte = NULL;
 1809|  2.29k|  CURLcode ret = CURLE_OK;
 1810|       |
 1811|       |  /* Get rid of previously prepared headers. */
 1812|  2.29k|  curl_slist_free_all(part->curlheaders);
 1813|  2.29k|  part->curlheaders = NULL;
 1814|       |
 1815|       |  /* Be sure we won't access old headers later. */
 1816|  2.29k|  if(part->state.state == MIMESTATE_CURLHEADERS)
 1817|      0|    mimesetstate(&part->state, MIMESTATE_CURLHEADERS, NULL);
 1818|       |
 1819|       |  /* Check if content type is specified. */
 1820|  2.29k|  customct = part->mimetype;
 1821|  2.29k|  if(!customct)
 1822|  2.29k|    customct = search_header(part->userheaders, "Content-Type");
 1823|  2.29k|  if(customct)
 1824|      0|    contenttype = customct;
 1825|       |
 1826|       |  /* If content type is not specified, try to determine it. */
 1827|  2.29k|  if(!contenttype) {
 1828|  2.15k|    switch(part->kind) {
 1829|      0|    case MIMEKIND_MULTIPART:
 1830|      0|      contenttype = MULTIPART_CONTENTTYPE_DEFAULT;
 1831|      0|      break;
 1832|      0|    case MIMEKIND_FILE:
 1833|      0|      contenttype = Curl_mime_contenttype(part->filename);
 1834|      0|      if(!contenttype)
 1835|      0|        contenttype = Curl_mime_contenttype(part->data);
 1836|      0|      if(!contenttype && part->filename)
 1837|      0|        contenttype = FILE_CONTENTTYPE_DEFAULT;
 1838|      0|      break;
 1839|  2.15k|    default:
 1840|  2.15k|      contenttype = Curl_mime_contenttype(part->filename);
 1841|  2.15k|      break;
 1842|  2.15k|    }
 1843|  2.15k|  }
 1844|       |
 1845|  2.29k|  if(part->kind == MIMEKIND_MULTIPART) {
 1846|    138|    mime = (curl_mime *) part->arg;
 1847|    138|    if(mime)
 1848|    138|      boundary = mime->boundary;
 1849|    138|  }
 1850|  2.15k|  else if(contenttype && !customct &&
 1851|  2.15k|          content_type_match(contenttype, "text/plain"))
 1852|      0|    if(strategy == MIMESTRATEGY_MAIL || !part->filename)
 1853|      0|      contenttype = NULL;
 1854|       |
 1855|       |  /* Issue content-disposition header only if not already set by caller. */
 1856|  2.29k|  if(!search_header(part->userheaders, "Content-Disposition")) {
 1857|  2.29k|    if(!disposition)
 1858|    138|      if(part->filename || part->name ||
 1859|    138|        (contenttype && !strncasecompare(contenttype, "multipart/", 10)))
 1860|      0|          disposition = DISPOSITION_DEFAULT;
 1861|  2.29k|    if(disposition && curl_strequal(disposition, "attachment") &&
 1862|  2.29k|     !part->name && !part->filename)
 1863|      0|      disposition = NULL;
 1864|  2.29k|    if(disposition) {
 1865|  2.15k|      char *name = NULL;
 1866|  2.15k|      char *filename = NULL;
 1867|       |
 1868|  2.15k|      if(part->name) {
 1869|    192|        name = escape_string(part->name);
 1870|    192|        if(!name)
 1871|      0|          ret = CURLE_OUT_OF_MEMORY;
 1872|    192|      }
 1873|  2.15k|      if(!ret && part->filename) {
 1874|      0|        filename = escape_string(part->filename);
 1875|      0|        if(!filename)
 1876|      0|          ret = CURLE_OUT_OF_MEMORY;
 1877|      0|      }
 1878|  2.15k|      if(!ret)
 1879|  2.15k|        ret = Curl_mime_add_header(&part->curlheaders,
 1880|  2.15k|                                   "Content-Disposition: %s%s%s%s%s%s%s",
 1881|  2.15k|                                   disposition,
 1882|  2.15k|                                   name? "; name=\"": "",
 1883|  2.15k|                                   name? name: "",
 1884|  2.15k|                                   name? "\"": "",
 1885|  2.15k|                                   filename? "; filename=\"": "",
 1886|  2.15k|                                   filename? filename: "",
 1887|  2.15k|                                   filename? "\"": "");
 1888|  2.15k|      Curl_safefree(name);
 1889|  2.15k|      Curl_safefree(filename);
 1890|  2.15k|      if(ret)
 1891|      0|        return ret;
 1892|  2.15k|      }
 1893|  2.29k|    }
 1894|       |
 1895|       |  /* Issue Content-Type header. */
 1896|  2.29k|  if(contenttype) {
 1897|    138|    ret = add_content_type(&part->curlheaders, contenttype, boundary);
 1898|    138|    if(ret)
 1899|      0|      return ret;
 1900|    138|  }
 1901|       |
 1902|       |  /* Content-Transfer-Encoding header. */
 1903|  2.29k|  if(!search_header(part->userheaders, "Content-Transfer-Encoding")) {
 1904|  2.29k|    if(part->encoder)
 1905|      0|      cte = part->encoder->name;
 1906|  2.29k|    else if(contenttype && strategy == MIMESTRATEGY_MAIL &&
 1907|  2.29k|     part->kind != MIMEKIND_MULTIPART)
 1908|      0|      cte = "8bit";
 1909|  2.29k|    if(cte) {
 1910|      0|      ret = Curl_mime_add_header(&part->curlheaders,
 1911|      0|                                 "Content-Transfer-Encoding: %s", cte);
 1912|      0|      if(ret)
 1913|      0|        return ret;
 1914|      0|    }
 1915|  2.29k|  }
 1916|       |
 1917|       |  /* If we were reading curl-generated headers, restart with new ones (this
 1918|       |     should not occur). */
 1919|  2.29k|  if(part->state.state == MIMESTATE_CURLHEADERS)
 1920|      0|    mimesetstate(&part->state, MIMESTATE_CURLHEADERS, part->curlheaders);
 1921|       |
 1922|       |  /* Process subparts. */
 1923|  2.29k|  if(part->kind == MIMEKIND_MULTIPART && mime) {
 1924|    138|    curl_mimepart *subpart;
 1925|       |
 1926|    138|    disposition = NULL;
 1927|    138|    if(content_type_match(contenttype, "multipart/form-data"))
 1928|    138|      disposition = "form-data";
 1929|  2.29k|    for(subpart = mime->firstpart; subpart; subpart = subpart->nextpart) {
 1930|  2.15k|      ret = Curl_mime_prepare_headers(subpart, NULL, disposition, strategy);
 1931|  2.15k|      if(ret)
 1932|      0|        return ret;
 1933|  2.15k|    }
 1934|    138|  }
 1935|  2.29k|  return ret;
 1936|  2.29k|}
mime.c:cleanup_part_content:
 1157|  12.7k|{
 1158|  12.7k|  if(part->freefunc)
 1159|  2.72k|    part->freefunc(part->arg);
 1160|       |
 1161|  12.7k|  part->readfunc = NULL;
 1162|  12.7k|  part->seekfunc = NULL;
 1163|  12.7k|  part->freefunc = NULL;
 1164|  12.7k|  part->arg = (void *) part;          /* Defaults to part itself. */
 1165|  12.7k|  part->data = NULL;
 1166|  12.7k|  part->fp = NULL;
 1167|  12.7k|  part->datasize = (curl_off_t) 0;    /* No size yet. */
 1168|  12.7k|  cleanup_encoder_state(&part->encstate);
 1169|  12.7k|  part->kind = MIMEKIND_NONE;
 1170|  12.7k|  part->flags &= ~MIME_FAST_READ;
 1171|  12.7k|  part->lastreadstatus = 1; /* Successful read status. */
 1172|  12.7k|  part->state.state = MIMESTATE_BEGIN;
 1173|  12.7k|}
mime.c:cleanup_encoder_state:
  347|  15.0k|{
  348|  15.0k|  p->pos = 0;
  349|  15.0k|  p->bufbeg = 0;
  350|  15.0k|  p->bufend = 0;
  351|  15.0k|}
mime.c:mime_subparts_unbind:
 1188|    174|{
 1189|    174|  curl_mime *mime = (curl_mime *) ptr;
 1190|       |
 1191|    174|  if(mime && mime->parent) {
 1192|    159|    mime->parent->freefunc = NULL;  /* Be sure we won't be called again. */
 1193|    159|    cleanup_part_content(mime->parent);  /* Avoid dangling pointer in part. */
 1194|    159|    mime->parent = NULL;
 1195|    159|  }
 1196|    174|}
mime.c:mimesetstate:
  274|  40.8k|{
  275|  40.8k|  state->state = tok;
  276|  40.8k|  state->ptr = ptr;
  277|  40.8k|  state->offset = 0;
  278|  40.8k|}
mime.c:mime_mem_read:
  644|  1.36k|{
  645|  1.36k|  curl_mimepart *part = (curl_mimepart *) instream;
  646|  1.36k|  size_t sz = curlx_sotouz(part->datasize - part->state.offset);
  647|  1.36k|  (void) size;   /* Always 1.*/
  648|       |
  649|  1.36k|  if(!nitems)
  650|      0|    return STOP_FILLING;
  651|       |
  652|  1.36k|  if(sz > nitems)
  653|      0|    sz = nitems;
  654|       |
  655|  1.36k|  if(sz)
  656|  1.36k|    memcpy(buffer, part->data + curlx_sotouz(part->state.offset), sz);
  657|       |
  658|  1.36k|  return sz;
  659|  1.36k|}
mime.c:mime_mem_seek:
  662|      4|{
  663|      4|  curl_mimepart *part = (curl_mimepart *) instream;
  664|       |
  665|      4|  switch(whence) {
  666|      0|  case SEEK_CUR:
  667|      0|    offset += part->state.offset;
  668|      0|    break;
  669|      0|  case SEEK_END:
  670|      0|    offset += part->datasize;
  671|      0|    break;
  672|      4|  }
  673|       |
  674|      4|  if(offset < 0 || offset > part->datasize)
  675|      0|    return CURL_SEEKFUNC_FAIL;
  676|       |
  677|      4|  part->state.offset = offset;
  678|      4|  return CURL_SEEKFUNC_OK;
  679|      4|}
mime.c:mime_mem_free:
  682|  2.72k|{
  683|  2.72k|  Curl_safefree(((curl_mimepart *) ptr)->data);
  684|  2.72k|}
mime.c:mime_subparts_seek:
 1132|     10|{
 1133|     10|  curl_mime *mime = (curl_mime *) instream;
 1134|     10|  curl_mimepart *part;
 1135|     10|  int result = CURL_SEEKFUNC_OK;
 1136|       |
 1137|     10|  if(whence != SEEK_SET || offset)
 1138|      0|    return CURL_SEEKFUNC_CANTSEEK;    /* Only support full rewind. */
 1139|       |
 1140|     10|  if(mime->state.state == MIMESTATE_BEGIN)
 1141|      0|   return CURL_SEEKFUNC_OK;           /* Already rewound. */
 1142|       |
 1143|     31|  for(part = mime->firstpart; part; part = part->nextpart) {
 1144|     21|    int res = mime_part_rewind(part);
 1145|     21|    if(res != CURL_SEEKFUNC_OK)
 1146|     17|      result = res;
 1147|     21|  }
 1148|       |
 1149|     10|  if(result == CURL_SEEKFUNC_OK)
 1150|      2|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1151|       |
 1152|     10|  return result;
 1153|     10|}
mime.c:readback_part:
  902|  4.19k|{
  903|  4.19k|  size_t cursize = 0;
  904|       |#ifdef CURL_DOES_CONVERSIONS
  905|       |  char *convbuf = buffer;
  906|       |#endif
  907|       |
  908|       |  /* Readback from part. */
  909|       |
  910|  24.2k|  while(bufsize) {
  911|  24.2k|    size_t sz = 0;
  912|  24.2k|    struct curl_slist *hdr = (struct curl_slist *) part->state.ptr;
  913|  24.2k|    switch(part->state.state) {
  914|  2.05k|    case MIMESTATE_BEGIN:
  915|  2.05k|      mimesetstate(&part->state,
  916|  2.05k|                   (part->flags & MIME_BODY_ONLY)?
  917|  2.05k|                     MIMESTATE_BODY: MIMESTATE_CURLHEADERS,
  918|  2.05k|                   part->curlheaders);
  919|  2.05k|      break;
  920|  2.05k|    case MIMESTATE_USERHEADERS:
  921|  2.05k|      if(!hdr) {
  922|  2.05k|        mimesetstate(&part->state, MIMESTATE_EOH, NULL);
  923|  2.05k|        break;
  924|  2.05k|      }
  925|      0|      if(match_header(hdr, "Content-Type", 12)) {
  926|      0|        mimesetstate(&part->state, MIMESTATE_USERHEADERS, hdr->next);
  927|      0|        break;
  928|      0|      }
  929|       |      /* FALLTHROUGH */
  930|  8.20k|    case MIMESTATE_CURLHEADERS:
  931|  8.20k|      if(!hdr)
  932|  2.05k|        mimesetstate(&part->state, MIMESTATE_USERHEADERS, part->userheaders);
  933|  6.15k|      else {
  934|  6.15k|        sz = readback_bytes(&part->state, buffer, bufsize,
  935|  6.15k|                            hdr->data, strlen(hdr->data), "\r\n");
  936|  6.15k|        if(!sz)
  937|  2.05k|          mimesetstate(&part->state, part->state.state, hdr->next);
  938|  6.15k|      }
  939|  8.20k|      break;
  940|  4.10k|    case MIMESTATE_EOH:
  941|  4.10k|      sz = readback_bytes(&part->state, buffer, bufsize, "\r\n", 2, "");
  942|  4.10k|      if(!sz)
  943|  2.05k|        mimesetstate(&part->state, MIMESTATE_BODY, NULL);
  944|  4.10k|      break;
  945|  2.14k|    case MIMESTATE_BODY:
  946|       |#ifdef CURL_DOES_CONVERSIONS
  947|       |      if(part->easy && convbuf < buffer) {
  948|       |        CURLcode result = Curl_convert_to_network(part->easy, convbuf,
  949|       |                                                  buffer - convbuf);
  950|       |        if(result)
  951|       |          return READ_ERROR;
  952|       |        convbuf = buffer;
  953|       |      }
  954|       |#endif
  955|  2.14k|      cleanup_encoder_state(&part->encstate);
  956|  2.14k|      mimesetstate(&part->state, MIMESTATE_CONTENT, NULL);
  957|  2.14k|      break;
  958|  3.60k|    case MIMESTATE_CONTENT:
  959|  3.60k|      if(part->encoder)
  960|      0|        sz = read_encoded_part_content(part, buffer, bufsize, hasread);
  961|  3.60k|      else
  962|  3.60k|        sz = read_part_content(part, buffer, bufsize, hasread);
  963|  3.60k|      switch(sz) {
  964|  2.14k|      case 0:
  965|  2.14k|        mimesetstate(&part->state, MIMESTATE_END, NULL);
  966|       |        /* Try sparing open file descriptors. */
  967|  2.14k|        if(part->kind == MIMEKIND_FILE && part->fp) {
  968|      0|          fclose(part->fp);
  969|      0|          part->fp = NULL;
  970|      0|        }
  971|       |        /* FALLTHROUGH */
  972|  2.14k|      case CURL_READFUNC_ABORT:
  973|  2.14k|      case CURL_READFUNC_PAUSE:
  974|  2.14k|      case READ_ERROR:
  975|  2.14k|      case STOP_FILLING:
  976|  2.14k|        return cursize? cursize: sz;
  977|  3.60k|      }
  978|  1.45k|      break;
  979|  2.05k|    case MIMESTATE_END:
  980|  2.05k|      return cursize;
  981|      0|    default:
  982|      0|      break;    /* Other values not in part state. */
  983|  24.2k|    }
  984|       |
  985|       |    /* Bump buffer and counters according to read size. */
  986|  20.0k|    cursize += sz;
  987|  20.0k|    buffer += sz;
  988|  20.0k|    bufsize -= sz;
  989|  20.0k|  }
  990|       |
  991|       |#ifdef CURL_DOES_CONVERSIONS
  992|       |      if(part->easy && convbuf < buffer &&
  993|       |         part->state.state < MIMESTATE_BODY) {
  994|       |        CURLcode result = Curl_convert_to_network(part->easy, convbuf,
  995|       |                                                  buffer - convbuf);
  996|       |        if(result)
  997|       |          return READ_ERROR;
  998|       |      }
  999|       |#endif
 1000|       |
 1001|      0|  return cursize;
 1002|  4.19k|}
mime.c:match_header:
  309|  2.65k|{
  310|  2.65k|  char *value = NULL;
  311|       |
  312|  2.65k|  if(strncasecompare(hdr->data, lbl, len) && hdr->data[len] == ':')
  313|      0|    for(value = hdr->data + len + 1; *value == ' '; value++)
  314|      0|      ;
  315|  2.65k|  return value;
  316|  2.65k|}
mime.c:readback_bytes:
  748|  20.9k|{
  749|  20.9k|  size_t sz;
  750|  20.9k|  size_t offset = curlx_sotouz(state->offset);
  751|       |
  752|  20.9k|  if(numbytes > offset) {
  753|  8.39k|    sz = numbytes - offset;
  754|  8.39k|    bytes += offset;
  755|  8.39k|  }
  756|  12.5k|  else {
  757|  12.5k|    size_t tsz = strlen(trail);
  758|       |
  759|  12.5k|    sz = offset - numbytes;
  760|  12.5k|    if(sz >= tsz)
  761|  8.39k|      return 0;
  762|  4.19k|    bytes = trail + sz;
  763|  4.19k|    sz = tsz - sz;
  764|  4.19k|  }
  765|       |
  766|  12.5k|  if(sz > bufsize)
  767|      0|    sz = bufsize;
  768|       |
  769|  12.5k|  memcpy(buffer, bytes, sz);
  770|  12.5k|  state->offset += sz;
  771|  12.5k|  return sz;
  772|  20.9k|}
mime.c:read_part_content:
  777|  3.60k|{
  778|  3.60k|  size_t sz = 0;
  779|       |
  780|  3.60k|  switch(part->lastreadstatus) {
  781|      0|  case 0:
  782|      0|  case CURL_READFUNC_ABORT:
  783|      0|  case CURL_READFUNC_PAUSE:
  784|      0|  case READ_ERROR:
  785|      0|    return part->lastreadstatus;
  786|  3.60k|  default:
  787|  3.60k|    break;
  788|  3.60k|  }
  789|       |
  790|       |  /* If we can determine we are at end of part data, spare a read. */
  791|  3.60k|  if(part->datasize != (curl_off_t) -1 &&
  792|  3.60k|     part->state.offset >= part->datasize) {
  793|       |    /* sz is already zero. */
  794|  2.14k|  }
  795|  1.45k|  else {
  796|  1.45k|    switch(part->kind) {
  797|     95|    case MIMEKIND_MULTIPART:
  798|       |      /*
  799|       |       * Cannot be processed as other kinds since read function requires
  800|       |       * an additional parameter and is highly recursive.
  801|       |       */
  802|     95|       sz = mime_subparts_read(buffer, 1, bufsize, part->arg, hasread);
  803|     95|       break;
  804|      0|    case MIMEKIND_FILE:
  805|      0|      if(part->fp && feof(part->fp))
  806|      0|        break;  /* At EOF. */
  807|       |      /* FALLTHROUGH */
  808|  1.36k|    default:
  809|  1.36k|      if(part->readfunc) {
  810|  1.36k|        if(!(part->flags & MIME_FAST_READ)) {
  811|      0|          if(*hasread)
  812|      0|            return STOP_FILLING;
  813|      0|          *hasread = TRUE;
  814|      0|        }
  815|  1.36k|        sz = part->readfunc(buffer, 1, bufsize, part->arg);
  816|  1.36k|      }
  817|  1.36k|      break;
  818|  1.45k|    }
  819|  1.45k|  }
  820|       |
  821|  3.60k|  switch(sz) {
  822|      0|  case STOP_FILLING:
  823|      0|    break;
  824|  2.14k|  case 0:
  825|  2.14k|  case CURL_READFUNC_ABORT:
  826|  2.14k|  case CURL_READFUNC_PAUSE:
  827|  2.14k|  case READ_ERROR:
  828|  2.14k|    part->lastreadstatus = sz;
  829|  2.14k|    break;
  830|  1.45k|  default:
  831|  1.45k|    part->state.offset += sz;
  832|  1.45k|    part->lastreadstatus = sz;
  833|  1.45k|    break;
  834|  3.60k|  }
  835|       |
  836|  3.60k|  return sz;
  837|  3.60k|}
mime.c:mime_subparts_read:
 1007|     95|{
 1008|     95|  curl_mime *mime = (curl_mime *) instream;
 1009|     95|  size_t cursize = 0;
 1010|       |#ifdef CURL_DOES_CONVERSIONS
 1011|       |  char *convbuf = buffer;
 1012|       |#endif
 1013|       |
 1014|     95|  (void) size;   /* Always 1. */
 1015|       |
 1016|  15.1k|  while(nitems) {
 1017|  15.1k|    size_t sz = 0;
 1018|  15.1k|    curl_mimepart *part = mime->state.ptr;
 1019|  15.1k|    switch(mime->state.state) {
 1020|     95|    case MIMESTATE_BEGIN:
 1021|     95|    case MIMESTATE_BODY:
 1022|       |#ifdef CURL_DOES_CONVERSIONS
 1023|       |      convbuf = buffer;
 1024|       |#endif
 1025|     95|      mimesetstate(&mime->state, MIMESTATE_BOUNDARY1, mime->firstpart);
 1026|       |      /* The first boundary always follows the header termination empty line,
 1027|       |         so is always preceded by a CRLF. We can then spare 2 characters
 1028|       |         by skipping the leading CRLF in boundary. */
 1029|     95|      mime->state.offset += 2;
 1030|     95|      break;
 1031|  4.29k|    case MIMESTATE_BOUNDARY1:
 1032|  4.29k|      sz = readback_bytes(&mime->state, buffer, nitems, "\r\n--", 4, "");
 1033|  4.29k|      if(!sz)
 1034|  2.14k|        mimesetstate(&mime->state, MIMESTATE_BOUNDARY2, part);
 1035|  4.29k|      break;
 1036|  6.44k|    case MIMESTATE_BOUNDARY2:
 1037|  6.44k|      sz = readback_bytes(&mime->state, buffer, nitems, mime->boundary,
 1038|  6.44k|                          strlen(mime->boundary), part? "\r\n": "--\r\n");
 1039|  6.44k|      if(!sz) {
 1040|       |#ifdef CURL_DOES_CONVERSIONS
 1041|       |        if(mime->easy && convbuf < buffer) {
 1042|       |          CURLcode result = Curl_convert_to_network(mime->easy, convbuf,
 1043|       |                                                    buffer - convbuf);
 1044|       |          if(result)
 1045|       |            return READ_ERROR;
 1046|       |          convbuf = buffer;
 1047|       |        }
 1048|       |#endif
 1049|  2.14k|        mimesetstate(&mime->state, MIMESTATE_CONTENT, part);
 1050|  2.14k|      }
 1051|  6.44k|      break;
 1052|  4.19k|    case MIMESTATE_CONTENT:
 1053|  4.19k|      if(!part) {
 1054|     95|        mimesetstate(&mime->state, MIMESTATE_END, NULL);
 1055|     95|        break;
 1056|     95|      }
 1057|  4.10k|      sz = readback_part(part, buffer, nitems, hasread);
 1058|  4.10k|      switch(sz) {
 1059|      0|      case CURL_READFUNC_ABORT:
 1060|      0|      case CURL_READFUNC_PAUSE:
 1061|      0|      case READ_ERROR:
 1062|      0|      case STOP_FILLING:
 1063|      0|        return cursize? cursize: sz;
 1064|  2.05k|      case 0:
 1065|       |#ifdef CURL_DOES_CONVERSIONS
 1066|       |        convbuf = buffer;
 1067|       |#endif
 1068|  2.05k|        mimesetstate(&mime->state, MIMESTATE_BOUNDARY1, part->nextpart);
 1069|  2.05k|        break;
 1070|  4.10k|      }
 1071|  4.10k|      break;
 1072|  4.10k|    case MIMESTATE_END:
 1073|     95|      return cursize;
 1074|      0|    default:
 1075|      0|      break;    /* other values not used in mime state. */
 1076|  15.1k|    }
 1077|       |
 1078|       |    /* Bump buffer and counters according to read size. */
 1079|  15.0k|    cursize += sz;
 1080|  15.0k|    buffer += sz;
 1081|  15.0k|    nitems -= sz;
 1082|  15.0k|  }
 1083|       |
 1084|       |#ifdef CURL_DOES_CONVERSIONS
 1085|       |      if(mime->easy && convbuf < buffer &&
 1086|       |         mime->state.state <= MIMESTATE_CONTENT) {
 1087|       |        CURLcode result = Curl_convert_to_network(mime->easy, convbuf,
 1088|       |                                                  buffer - convbuf);
 1089|       |        if(result)
 1090|       |          return READ_ERROR;
 1091|       |      }
 1092|       |#endif
 1093|       |
 1094|      0|  return cursize;
 1095|     95|}
mime.c:mime_part_rewind:
 1098|    163|{
 1099|    163|  int res = CURL_SEEKFUNC_OK;
 1100|    163|  enum mimestate targetstate = MIMESTATE_BEGIN;
 1101|       |
 1102|    163|  if(part->flags & MIME_BODY_ONLY)
 1103|    142|    targetstate = MIMESTATE_BODY;
 1104|    163|  cleanup_encoder_state(&part->encstate);
 1105|    163|  if(part->state.state > targetstate) {
 1106|     31|    res = CURL_SEEKFUNC_CANTSEEK;
 1107|     31|    if(part->seekfunc) {
 1108|     14|      res = part->seekfunc(part->arg, (curl_off_t) 0, SEEK_SET);
 1109|     14|      switch(res) {
 1110|      6|      case CURL_SEEKFUNC_OK:
 1111|      6|      case CURL_SEEKFUNC_FAIL:
 1112|     14|      case CURL_SEEKFUNC_CANTSEEK:
 1113|     14|        break;
 1114|      0|      case -1:    /* For fseek() error. */
 1115|      0|        res = CURL_SEEKFUNC_CANTSEEK;
 1116|      0|        break;
 1117|      0|      default:
 1118|      0|        res = CURL_SEEKFUNC_FAIL;
 1119|      0|        break;
 1120|     14|      }
 1121|     14|    }
 1122|     31|  }
 1123|       |
 1124|    163|  if(res == CURL_SEEKFUNC_OK)
 1125|    138|    mimesetstate(&part->state, targetstate, NULL);
 1126|       |
 1127|    163|  part->lastreadstatus = 1; /* Successful read status. */
 1128|    163|  return res;
 1129|    163|}
mime.c:multipart_size:
 1667|    132|{
 1668|    132|  curl_off_t size;
 1669|    132|  size_t boundarysize;
 1670|    132|  curl_mimepart *part;
 1671|       |
 1672|    132|  if(!mime)
 1673|      0|    return 0;           /* Not present -> empty. */
 1674|       |
 1675|    132|  boundarysize = 4 + strlen(mime->boundary) + 2;
 1676|    132|  size = boundarysize;  /* Final boundary - CRLF after headers. */
 1677|       |
 1678|  2.27k|  for(part = mime->firstpart; part; part = part->nextpart) {
 1679|  2.14k|    curl_off_t sz = Curl_mime_size(part);
 1680|       |
 1681|  2.14k|    if(sz < 0)
 1682|      0|      size = sz;
 1683|       |
 1684|  2.14k|    if(size >= 0)
 1685|  2.14k|      size += boundarysize + sz;
 1686|  2.14k|  }
 1687|       |
 1688|    132|  return size;
 1689|    132|}
mime.c:slist_size:
 1655|  4.29k|{
 1656|  4.29k|  size_t size = 0;
 1657|  4.29k|  size_t skiplen = skip? strlen(skip): 0;
 1658|       |
 1659|  6.44k|  for(; s; s = s->next)
 1660|  2.14k|    if(!skip || !match_header(s, skip, skiplen))
 1661|  2.14k|      size += strlen(s->data) + overhead;
 1662|  4.29k|  return size;
 1663|  4.29k|}
mime.c:search_header:
  320|  6.88k|{
  321|  6.88k|  size_t len = strlen(hdr);
  322|  6.88k|  char *value = NULL;
  323|       |
  324|  9.54k|  for(; !value && hdrlist; hdrlist = hdrlist->next)
  325|  2.65k|    value = match_header(hdrlist, hdr, len);
  326|       |
  327|  6.88k|  return value;
  328|  6.88k|}
mime.c:content_type_match:
 1784|    138|{
 1785|    138|  size_t len = strlen(target);
 1786|       |
 1787|    138|  if(contenttype && strncasecompare(contenttype, target, len))
 1788|    138|    switch(contenttype[len]) {
 1789|    138|    case '\0':
 1790|    138|    case '\t':
 1791|    138|    case '\r':
 1792|    138|    case '\n':
 1793|    138|    case ' ':
 1794|    138|    case ';':
 1795|    138|      return TRUE;
 1796|    138|    }
 1797|      0|  return FALSE;
 1798|    138|}
mime.c:escape_string:
  283|    192|{
  284|    192|  size_t bytecount = 0;
  285|    192|  size_t i;
  286|    192|  char *dst;
  287|       |
  288|    971|  for(i = 0; src[i]; i++)
  289|    779|    if(src[i] == '"' || src[i] == '\\')
  290|     17|      bytecount++;
  291|       |
  292|    192|  bytecount += i;
  293|    192|  dst = malloc(bytecount + 1);
  294|    192|  if(!dst)
  295|      0|    return NULL;
  296|       |
  297|    971|  for(i = 0; *src; src++) {
  298|    779|    if(*src == '"' || *src == '\\')
  299|     17|      dst[i++] = '\\';
  300|    779|    dst[i++] = *src;
  301|    779|  }
  302|       |
  303|    192|  dst[i] = '\0';
  304|    192|  return dst;
  305|    192|}
mime.c:add_content_type:
 1739|    138|{
 1740|    138|  return Curl_mime_add_header(slp, "Content-Type: %s%s%s", type,
 1741|    138|                              boundary? "; boundary=": "",
 1742|    138|                              boundary? boundary: "");
 1743|    138|}

curl_mvsnprintf:
 1009|  78.2k|{
 1010|  78.2k|  int retcode;
 1011|  78.2k|  struct nsprintf info;
 1012|       |
 1013|  78.2k|  info.buffer = buffer;
 1014|  78.2k|  info.length = 0;
 1015|  78.2k|  info.max = maxlength;
 1016|       |
 1017|  78.2k|  retcode = dprintf_formatf(&info, addbyter, format, ap_save);
 1018|  78.2k|  if((retcode != -1) && info.max) {
 1019|       |    /* we terminate this with a zero byte */
 1020|  78.2k|    if(info.max == info.length) {
 1021|       |      /* we're at maximum, scrap the last letter */
 1022|      0|      info.buffer[-1] = 0;
 1023|      0|      retcode--; /* don't count the nul byte */
 1024|      0|    }
 1025|  78.2k|    else
 1026|  78.2k|      info.buffer[0] = 0;
 1027|  78.2k|  }
 1028|  78.2k|  return retcode;
 1029|  78.2k|}
curl_msnprintf:
 1032|  78.2k|{
 1033|  78.2k|  int retcode;
 1034|  78.2k|  va_list ap_save; /* argument pointer */
 1035|  78.2k|  va_start(ap_save, format);
 1036|  78.2k|  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
 1037|  78.2k|  va_end(ap_save);
 1038|  78.2k|  return retcode;
 1039|  78.2k|}
Curl_dyn_vprintf:
 1059|  5.90k|{
 1060|  5.90k|  int retcode;
 1061|  5.90k|  struct asprintf info;
 1062|  5.90k|  info.b = dyn;
 1063|  5.90k|  info.fail = 0;
 1064|       |
 1065|  5.90k|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1066|  5.90k|  if((-1 == retcode) || info.fail) {
 1067|      0|    Curl_dyn_free(info.b);
 1068|      0|    return 1;
 1069|      0|  }
 1070|  5.90k|  return 0;
 1071|  5.90k|}
curl_mvaprintf:
 1074|  12.4k|{
 1075|  12.4k|  int retcode;
 1076|  12.4k|  struct asprintf info;
 1077|  12.4k|  struct dynbuf dyn;
 1078|  12.4k|  info.b = &dyn;
 1079|  12.4k|  Curl_dyn_init(info.b, DYN_APRINTF);
 1080|  12.4k|  info.fail = 0;
 1081|       |
 1082|  12.4k|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1083|  12.4k|  if((-1 == retcode) || info.fail) {
 1084|      0|    Curl_dyn_free(info.b);
 1085|      0|    return NULL;
 1086|      0|  }
 1087|  12.4k|  if(Curl_dyn_len(info.b))
 1088|  12.4k|    return Curl_dyn_ptr(info.b);
 1089|      0|  return strdup("");
 1090|  12.4k|}
curl_maprintf:
 1093|  10.1k|{
 1094|  10.1k|  va_list ap_save;
 1095|  10.1k|  char *s;
 1096|  10.1k|  va_start(ap_save, format);
 1097|  10.1k|  s = curl_mvaprintf(format, ap_save);
 1098|  10.1k|  va_end(ap_save);
 1099|  10.1k|  return s;
 1100|  10.1k|}
curl_mfprintf:
 1134|  1.45k|{
 1135|  1.45k|  int retcode;
 1136|  1.45k|  va_list ap_save; /* argument pointer */
 1137|  1.45k|  va_start(ap_save, format);
 1138|  1.45k|  retcode = dprintf_formatf(whereto, fputc, format, ap_save);
 1139|  1.45k|  va_end(ap_save);
 1140|  1.45k|  return retcode;
 1141|  1.45k|}
mprintf.c:dprintf_formatf:
  570|  98.0k|{
  571|       |  /* Base-36 digits for numbers.  */
  572|  98.0k|  const char *digits = lower_digits;
  573|       |
  574|       |  /* Pointer into the format string.  */
  575|  98.0k|  char *f;
  576|       |
  577|       |  /* Number of characters written.  */
  578|  98.0k|  int done = 0;
  579|       |
  580|  98.0k|  long param; /* current parameter to read */
  581|  98.0k|  long param_num = 0; /* parameter counter */
  582|       |
  583|  98.0k|  struct va_stack vto[MAX_PARAMETERS];
  584|  98.0k|  char *endpos[MAX_PARAMETERS];
  585|  98.0k|  char **end;
  586|  98.0k|  char work[BUFFSIZE];
  587|  98.0k|  struct va_stack *p;
  588|       |
  589|       |  /* 'workend' points to the final buffer byte position, but with an extra
  590|       |     byte as margin to avoid the (false?) warning Coverity gives us
  591|       |     otherwise */
  592|  98.0k|  char *workend = &work[sizeof(work) - 2];
  593|       |
  594|       |  /* Do the actual %-code parsing */
  595|  98.0k|  if(dprintf_Pass1(format, vto, endpos, ap_save))
  596|      0|    return -1;
  597|       |
  598|  98.0k|  end = &endpos[0]; /* the initial end-position from the list dprintf_Pass1()
  599|       |                       created for us */
  600|       |
  601|  98.0k|  f = (char *)format;
  602|   485k|  while(*f != '\0') {
  603|       |    /* Format spec modifiers.  */
  604|   387k|    int is_alt;
  605|       |
  606|       |    /* Width of a field.  */
  607|   387k|    long width;
  608|       |
  609|       |    /* Precision of a field.  */
  610|   387k|    long prec;
  611|       |
  612|       |    /* Decimal integer is negative.  */
  613|   387k|    int is_neg;
  614|       |
  615|       |    /* Base of a number to be written.  */
  616|   387k|    unsigned long base;
  617|       |
  618|       |    /* Integral values to be written.  */
  619|   387k|    mp_uintmax_t num;
  620|       |
  621|       |    /* Used to convert negative in positive.  */
  622|   387k|    mp_intmax_t signed_num;
  623|       |
  624|   387k|    char *w;
  625|       |
  626|   387k|    if(*f != '%') {
  627|       |      /* This isn't a format spec, so write everything out until the next one
  628|       |         OR end of string is reached.  */
  629|   180k|      do {
  630|   180k|        OUTCHAR(*f);
  631|   180k|      } while(*++f && ('%' != *f));
  632|  47.8k|      continue;
  633|  47.8k|    }
  634|       |
  635|   339k|    ++f;
  636|       |
  637|       |    /* Check for "%%".  Note that although the ANSI standard lists
  638|       |       '%' as a conversion specifier, it says "The complete format
  639|       |       specification shall be `%%'," so we can avoid all the width
  640|       |       and precision processing.  */
  641|   339k|    if(*f == '%') {
  642|  22.9k|      ++f;
  643|  22.9k|      OUTCHAR('%');
  644|  22.9k|      continue;
  645|  22.9k|    }
  646|       |
  647|       |    /* If this is a positional parameter, the position must follow immediately
  648|       |       after the %, thus create a %<num>$ sequence */
  649|   316k|    param = dprintf_DollarString(f, &f);
  650|       |
  651|   316k|    if(!param)
  652|   316k|      param = param_num;
  653|      0|    else
  654|      0|      --param;
  655|       |
  656|   316k|    param_num++; /* increase this always to allow "%2$s %1$s %s" and then the
  657|       |                    third %s will pick the 3rd argument */
  658|       |
  659|   316k|    p = &vto[param];
  660|       |
  661|       |    /* pick up the specified width */
  662|   316k|    if(p->flags & FLAGS_WIDTHPARAM) {
  663|      0|      width = (long)vto[p->width].data.num.as_signed;
  664|      0|      param_num++; /* since the width is extracted from a parameter, we
  665|       |                      must skip that to get to the next one properly */
  666|      0|      if(width < 0) {
  667|       |        /* "A negative field width is taken as a '-' flag followed by a
  668|       |           positive field width." */
  669|      0|        width = -width;
  670|      0|        p->flags |= FLAGS_LEFT;
  671|      0|        p->flags &= ~FLAGS_PAD_NIL;
  672|      0|      }
  673|      0|    }
  674|   316k|    else
  675|   316k|      width = p->width;
  676|       |
  677|       |    /* pick up the specified precision */
  678|   316k|    if(p->flags & FLAGS_PRECPARAM) {
  679|     95|      prec = (long)vto[p->precision].data.num.as_signed;
  680|     95|      param_num++; /* since the precision is extracted from a parameter, we
  681|       |                      must skip that to get to the next one properly */
  682|     95|      if(prec < 0)
  683|       |        /* "A negative precision is taken as if the precision were
  684|       |           omitted." */
  685|      0|        prec = -1;
  686|     95|    }
  687|   316k|    else if(p->flags & FLAGS_PREC)
  688|      0|      prec = p->precision;
  689|   316k|    else
  690|   316k|      prec = -1;
  691|       |
  692|   316k|    is_alt = (p->flags & FLAGS_ALT) ? 1 : 0;
  693|       |
  694|   316k|    switch(p->type) {
  695|   181k|    case FORMAT_INT:
  696|   181k|      num = p->data.num.as_unsigned;
  697|   181k|      if(p->flags & FLAGS_CHAR) {
  698|       |        /* Character.  */
  699|   129k|        if(!(p->flags & FLAGS_LEFT))
  700|   129k|          while(--width > 0)
  701|      0|            OUTCHAR(' ');
  702|   129k|        OUTCHAR((char) num);
  703|   129k|        if(p->flags & FLAGS_LEFT)
  704|      0|          while(--width > 0)
  705|      0|            OUTCHAR(' ');
  706|   129k|        break;
  707|   129k|      }
  708|  52.1k|      if(p->flags & FLAGS_OCTAL) {
  709|       |        /* Octal unsigned integer.  */
  710|      0|        base = 8;
  711|      0|        goto unsigned_number;
  712|      0|      }
  713|  52.1k|      else if(p->flags & FLAGS_HEX) {
  714|       |        /* Hexadecimal unsigned integer.  */
  715|       |
  716|  27.0k|        digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  717|  27.0k|        base = 16;
  718|  27.0k|        goto unsigned_number;
  719|  27.0k|      }
  720|  25.1k|      else if(p->flags & FLAGS_UNSIGNED) {
  721|       |        /* Decimal unsigned integer.  */
  722|  11.4k|        base = 10;
  723|  11.4k|        goto unsigned_number;
  724|  11.4k|      }
  725|       |
  726|       |      /* Decimal integer.  */
  727|  13.7k|      base = 10;
  728|       |
  729|  13.7k|      is_neg = (p->data.num.as_signed < (mp_intmax_t)0) ? 1 : 0;
  730|  13.7k|      if(is_neg) {
  731|       |        /* signed_num might fail to hold absolute negative minimum by 1 */
  732|      3|        signed_num = p->data.num.as_signed + (mp_intmax_t)1;
  733|      3|        signed_num = -signed_num;
  734|      3|        num = (mp_uintmax_t)signed_num;
  735|      3|        num += (mp_uintmax_t)1;
  736|      3|      }
  737|       |
  738|  13.7k|      goto number;
  739|       |
  740|  38.4k|      unsigned_number:
  741|       |      /* Unsigned number of base BASE.  */
  742|  38.4k|      is_neg = 0;
  743|       |
  744|  52.1k|      number:
  745|       |      /* Number of base BASE.  */
  746|       |
  747|       |      /* Supply a default precision if none was given.  */
  748|  52.1k|      if(prec == -1)
  749|  52.1k|        prec = 1;
  750|       |
  751|       |      /* Put the number in WORK.  */
  752|  52.1k|      w = workend;
  753|   155k|      while(num > 0) {
  754|   103k|        *w-- = digits[num % base];
  755|   103k|        num /= base;
  756|   103k|      }
  757|  52.1k|      width -= (long)(workend - w);
  758|  52.1k|      prec -= (long)(workend - w);
  759|       |
  760|  52.1k|      if(is_alt && base == 8 && prec <= 0) {
  761|      0|        *w-- = '0';
  762|      0|        --width;
  763|      0|      }
  764|       |
  765|  52.1k|      if(prec > 0) {
  766|  5.10k|        width -= prec;
  767|  10.2k|        while(prec-- > 0 && w >= work)
  768|  5.10k|          *w-- = '0';
  769|  5.10k|      }
  770|       |
  771|  52.1k|      if(is_alt && base == 16)
  772|      0|        width -= 2;
  773|       |
  774|  52.1k|      if(is_neg || (p->flags & FLAGS_SHOWSIGN) || (p->flags & FLAGS_SPACE))
  775|      3|        --width;
  776|       |
  777|  52.1k|      if(!(p->flags & FLAGS_LEFT) && !(p->flags & FLAGS_PAD_NIL))
  778|  25.1k|        while(width-- > 0)
  779|      0|          OUTCHAR(' ');
  780|       |
  781|  52.1k|      if(is_neg)
  782|      3|        OUTCHAR('-');
  783|  52.1k|      else if(p->flags & FLAGS_SHOWSIGN)
  784|      0|        OUTCHAR('+');
  785|  52.1k|      else if(p->flags & FLAGS_SPACE)
  786|      0|        OUTCHAR(' ');
  787|       |
  788|  52.1k|      if(is_alt && base == 16) {
  789|      0|        OUTCHAR('0');
  790|      0|        if(p->flags & FLAGS_UPPER)
  791|      0|          OUTCHAR('X');
  792|      0|        else
  793|      0|          OUTCHAR('x');
  794|      0|      }
  795|       |
  796|  52.1k|      if(!(p->flags & FLAGS_LEFT) && (p->flags & FLAGS_PAD_NIL))
  797|  31.6k|        while(width-- > 0)
  798|  4.58k|          OUTCHAR('0');
  799|       |
  800|       |      /* Write the number.  */
  801|   160k|      while(++w <= workend) {
  802|   108k|        OUTCHAR(*w);
  803|   108k|      }
  804|       |
  805|  52.1k|      if(p->flags & FLAGS_LEFT)
  806|      0|        while(width-- > 0)
  807|      0|          OUTCHAR(' ');
  808|  52.1k|      break;
  809|       |
  810|   134k|    case FORMAT_STRING:
  811|       |            /* String.  */
  812|   134k|      {
  813|   134k|        static const char null[] = "(nil)";
  814|   134k|        const char *str;
  815|   134k|        size_t len;
  816|       |
  817|   134k|        str = (char *) p->data.str;
  818|   134k|        if(!str) {
  819|       |          /* Write null[] if there's space.  */
  820|     42|          if(prec == -1 || prec >= (long) sizeof(null) - 1) {
  821|     42|            str = null;
  822|     42|            len = sizeof(null) - 1;
  823|       |            /* Disable quotes around (nil) */
  824|     42|            p->flags &= (~FLAGS_ALT);
  825|     42|          }
  826|      0|          else {
  827|      0|            str = "";
  828|      0|            len = 0;
  829|      0|          }
  830|     42|        }
  831|   134k|        else if(prec != -1)
  832|     95|          len = (size_t)prec;
  833|   134k|        else
  834|   134k|          len = strlen(str);
  835|       |
  836|   134k|        width -= (len > LONG_MAX) ? LONG_MAX : (long)len;
  837|       |
  838|   134k|        if(p->flags & FLAGS_ALT)
  839|      0|          OUTCHAR('"');
  840|       |
  841|   134k|        if(!(p->flags&FLAGS_LEFT))
  842|   134k|          while(width-- > 0)
  843|      0|            OUTCHAR(' ');
  844|       |
  845|  1.41M|        for(; len && *str; len--)
  846|  1.28M|          OUTCHAR(*str++);
  847|   134k|        if(p->flags&FLAGS_LEFT)
  848|      0|          while(width-- > 0)
  849|      0|            OUTCHAR(' ');
  850|       |
  851|   134k|        if(p->flags & FLAGS_ALT)
  852|      0|          OUTCHAR('"');
  853|   134k|      }
  854|   134k|      break;
  855|       |
  856|   134k|    case FORMAT_PTR:
  857|       |      /* Generic pointer.  */
  858|      0|      {
  859|      0|        void *ptr;
  860|      0|        ptr = (void *) p->data.ptr;
  861|      0|        if(ptr != NULL) {
  862|       |          /* If the pointer is not NULL, write it as a %#x spec.  */
  863|      0|          base = 16;
  864|      0|          digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  865|      0|          is_alt = 1;
  866|      0|          num = (size_t) ptr;
  867|      0|          is_neg = 0;
  868|      0|          goto number;
  869|      0|        }
  870|      0|        else {
  871|       |          /* Write "(nil)" for a nil pointer.  */
  872|      0|          static const char strnil[] = "(nil)";
  873|      0|          const char *point;
  874|       |
  875|      0|          width -= (long)(sizeof(strnil) - 1);
  876|      0|          if(p->flags & FLAGS_LEFT)
  877|      0|            while(width-- > 0)
  878|      0|              OUTCHAR(' ');
  879|      0|          for(point = strnil; *point != '\0'; ++point)
  880|      0|            OUTCHAR(*point);
  881|      0|          if(!(p->flags & FLAGS_LEFT))
  882|      0|            while(width-- > 0)
  883|      0|              OUTCHAR(' ');
  884|      0|        }
  885|      0|      }
  886|      0|      break;
  887|       |
  888|      0|    case FORMAT_DOUBLE:
  889|      0|      {
  890|      0|        char formatbuf[32]="%";
  891|      0|        char *fptr = &formatbuf[1];
  892|      0|        size_t left = sizeof(formatbuf)-strlen(formatbuf);
  893|      0|        int len;
  894|       |
  895|      0|        width = -1;
  896|      0|        if(p->flags & FLAGS_WIDTH)
  897|      0|          width = p->width;
  898|      0|        else if(p->flags & FLAGS_WIDTHPARAM)
  899|      0|          width = (long)vto[p->width].data.num.as_signed;
  900|       |
  901|      0|        prec = -1;
  902|      0|        if(p->flags & FLAGS_PREC)
  903|      0|          prec = p->precision;
  904|      0|        else if(p->flags & FLAGS_PRECPARAM)
  905|      0|          prec = (long)vto[p->precision].data.num.as_signed;
  906|       |
  907|      0|        if(p->flags & FLAGS_LEFT)
  908|      0|          *fptr++ = '-';
  909|      0|        if(p->flags & FLAGS_SHOWSIGN)
  910|      0|          *fptr++ = '+';
  911|      0|        if(p->flags & FLAGS_SPACE)
  912|      0|          *fptr++ = ' ';
  913|      0|        if(p->flags & FLAGS_ALT)
  914|      0|          *fptr++ = '#';
  915|       |
  916|      0|        *fptr = 0;
  917|       |
  918|      0|        if(width >= 0) {
  919|      0|          if(width >= (long)sizeof(work))
  920|      0|            width = sizeof(work)-1;
  921|       |          /* RECURSIVE USAGE */
  922|      0|          len = curl_msnprintf(fptr, left, "%ld", width);
  923|      0|          fptr += len;
  924|      0|          left -= len;
  925|      0|        }
  926|      0|        if(prec >= 0) {
  927|       |          /* for each digit in the integer part, we can have one less
  928|       |             precision */
  929|      0|          size_t maxprec = sizeof(work) - 2;
  930|      0|          double val = p->data.dnum;
  931|      0|          if(width > 0 && prec <= width)
  932|      0|            maxprec -= width;
  933|      0|          while(val >= 10.0) {
  934|      0|            val /= 10;
  935|      0|            maxprec--;
  936|      0|          }
  937|       |
  938|      0|          if(prec > (long)maxprec)
  939|      0|            prec = (long)maxprec-1;
  940|      0|          if(prec < 0)
  941|      0|            prec = 0;
  942|       |          /* RECURSIVE USAGE */
  943|      0|          len = curl_msnprintf(fptr, left, ".%ld", prec);
  944|      0|          fptr += len;
  945|      0|        }
  946|      0|        if(p->flags & FLAGS_LONG)
  947|      0|          *fptr++ = 'l';
  948|       |
  949|      0|        if(p->flags & FLAGS_FLOATE)
  950|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'E':'e');
  951|      0|        else if(p->flags & FLAGS_FLOATG)
  952|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'G' : 'g');
  953|      0|        else
  954|      0|          *fptr++ = 'f';
  955|       |
  956|      0|        *fptr = 0; /* and a final zero termination */
  957|       |
  958|       |        /* NOTE NOTE NOTE!! Not all sprintf implementations return number of
  959|       |           output characters */
  960|      0|        (sprintf)(work, formatbuf, p->data.dnum);
  961|      0|        DEBUGASSERT(strlen(work) <= sizeof(work));
  962|      0|        for(fptr = work; *fptr; fptr++)
  963|      0|          OUTCHAR(*fptr);
  964|      0|      }
  965|      0|      break;
  966|       |
  967|      0|    case FORMAT_INTPTR:
  968|       |      /* Answer the count of characters written.  */
  969|      0|#ifdef HAVE_LONG_LONG_TYPE
  970|      0|      if(p->flags & FLAGS_LONGLONG)
  971|      0|        *(LONG_LONG_TYPE *) p->data.ptr = (LONG_LONG_TYPE)done;
  972|      0|      else
  973|      0|#endif
  974|      0|        if(p->flags & FLAGS_LONG)
  975|      0|          *(long *) p->data.ptr = (long)done;
  976|      0|      else if(!(p->flags & FLAGS_SHORT))
  977|      0|        *(int *) p->data.ptr = (int)done;
  978|      0|      else
  979|      0|        *(short *) p->data.ptr = (short)done;
  980|      0|      break;
  981|       |
  982|      0|    default:
  983|      0|      break;
  984|   316k|    }
  985|   316k|    f = *end++; /* goto end of %-code */
  986|       |
  987|   316k|  }
  988|  98.0k|  return done;
  989|  98.0k|}
mprintf.c:dprintf_Pass1:
  230|  98.0k|{
  231|  98.0k|  char *fmt = (char *)format;
  232|  98.0k|  int param_num = 0;
  233|  98.0k|  long this_param;
  234|  98.0k|  long width;
  235|  98.0k|  long precision;
  236|  98.0k|  int flags;
  237|  98.0k|  long max_param = 0;
  238|  98.0k|  long i;
  239|       |
  240|   934k|  while(*fmt) {
  241|   836k|    if(*fmt++ == '%') {
  242|   339k|      if(*fmt == '%') {
  243|  22.9k|        fmt++;
  244|  22.9k|        continue; /* while */
  245|  22.9k|      }
  246|       |
  247|   316k|      flags = FLAGS_NEW;
  248|       |
  249|       |      /* Handle the positional case (N$) */
  250|       |
  251|   316k|      param_num++;
  252|       |
  253|   316k|      this_param = dprintf_DollarString(fmt, &fmt);
  254|   316k|      if(0 == this_param)
  255|       |        /* we got no positional, get the next counter */
  256|   316k|        this_param = param_num;
  257|       |
  258|   316k|      if(this_param > max_param)
  259|   316k|        max_param = this_param;
  260|       |
  261|       |      /*
  262|       |       * The parameter with number 'i' should be used. Next, we need
  263|       |       * to get SIZE and TYPE of the parameter. Add the information
  264|       |       * to our array.
  265|       |       */
  266|       |
  267|   316k|      width = 0;
  268|   316k|      precision = 0;
  269|       |
  270|       |      /* Handle the flags */
  271|       |
  272|   356k|      while(dprintf_IsQualifierNoDollar(fmt)) {
  273|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  274|       |        if(!strncmp(fmt, "I32", 3)) {
  275|       |          flags |= FLAGS_LONG;
  276|       |          fmt += 3;
  277|       |        }
  278|       |        else if(!strncmp(fmt, "I64", 3)) {
  279|       |          flags |= FLAGS_LONGLONG;
  280|       |          fmt += 3;
  281|       |        }
  282|       |        else
  283|       |#endif
  284|       |
  285|  40.1k|        switch(*fmt++) {
  286|      0|        case ' ':
  287|      0|          flags |= FLAGS_SPACE;
  288|      0|          break;
  289|      0|        case '+':
  290|      0|          flags |= FLAGS_SHOWSIGN;
  291|      0|          break;
  292|      0|        case '-':
  293|      0|          flags |= FLAGS_LEFT;
  294|      0|          flags &= ~FLAGS_PAD_NIL;
  295|      0|          break;
  296|      0|        case '#':
  297|      0|          flags |= FLAGS_ALT;
  298|      0|          break;
  299|     95|        case '.':
  300|     95|          if('*' == *fmt) {
  301|       |            /* The precision is picked from a specified parameter */
  302|       |
  303|     95|            flags |= FLAGS_PRECPARAM;
  304|     95|            fmt++;
  305|     95|            param_num++;
  306|       |
  307|     95|            i = dprintf_DollarString(fmt, &fmt);
  308|     95|            if(i)
  309|      0|              precision = i;
  310|     95|            else
  311|     95|              precision = param_num;
  312|       |
  313|     95|            if(precision > max_param)
  314|     95|              max_param = precision;
  315|     95|          }
  316|      0|          else {
  317|      0|            flags |= FLAGS_PREC;
  318|      0|            precision = strtol(fmt, &fmt, 10);
  319|      0|          }
  320|     95|          break;
  321|      0|        case 'h':
  322|      0|          flags |= FLAGS_SHORT;
  323|      0|          break;
  324|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  325|       |        case 'I':
  326|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  327|       |          flags |= FLAGS_LONGLONG;
  328|       |#else
  329|       |          flags |= FLAGS_LONG;
  330|       |#endif
  331|       |          break;
  332|       |#endif
  333|  12.9k|        case 'l':
  334|  12.9k|          if(flags & FLAGS_LONG)
  335|      0|            flags |= FLAGS_LONGLONG;
  336|  12.9k|          else
  337|  12.9k|            flags |= FLAGS_LONG;
  338|  12.9k|          break;
  339|      0|        case 'L':
  340|      0|          flags |= FLAGS_LONGDOUBLE;
  341|      0|          break;
  342|      0|        case 'q':
  343|      0|          flags |= FLAGS_LONGLONG;
  344|      0|          break;
  345|      4|        case 'z':
  346|       |          /* the code below generates a warning if -Wunreachable-code is
  347|       |             used */
  348|       |#if (SIZEOF_SIZE_T > SIZEOF_LONG)
  349|       |          flags |= FLAGS_LONGLONG;
  350|       |#else
  351|      4|          flags |= FLAGS_LONG;
  352|      4|#endif
  353|      4|          break;
  354|      0|        case 'O':
  355|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  356|       |          flags |= FLAGS_LONGLONG;
  357|       |#else
  358|      0|          flags |= FLAGS_LONG;
  359|      0|#endif
  360|      0|          break;
  361|  27.0k|        case '0':
  362|  27.0k|          if(!(flags & FLAGS_LEFT))
  363|  27.0k|            flags |= FLAGS_PAD_NIL;
  364|       |          /* FALLTHROUGH */
  365|  27.0k|        case '1': case '2': case '3': case '4':
  366|  27.0k|        case '5': case '6': case '7': case '8': case '9':
  367|  27.0k|          flags |= FLAGS_WIDTH;
  368|  27.0k|          width = strtol(fmt-1, &fmt, 10);
  369|  27.0k|          break;
  370|      0|        case '*':  /* Special case */
  371|      0|          flags |= FLAGS_WIDTHPARAM;
  372|      0|          param_num++;
  373|       |
  374|      0|          i = dprintf_DollarString(fmt, &fmt);
  375|      0|          if(i)
  376|      0|            width = i;
  377|      0|          else
  378|      0|            width = param_num;
  379|      0|          if(width > max_param)
  380|      0|            max_param = width;
  381|      0|          break;
  382|      0|        case '\0':
  383|      0|          fmt--;
  384|      0|        default:
  385|      0|          break;
  386|  40.1k|        }
  387|  40.1k|      } /* switch */
  388|       |
  389|       |      /* Handle the specifier */
  390|       |
  391|   316k|      i = this_param - 1;
  392|       |
  393|   316k|      if((i < 0) || (i >= MAX_PARAMETERS))
  394|       |        /* out of allowed range */
  395|      0|        return 1;
  396|       |
  397|   316k|      switch (*fmt) {
  398|      0|      case 'S':
  399|      0|        flags |= FLAGS_ALT;
  400|       |        /* FALLTHROUGH */
  401|   134k|      case 's':
  402|   134k|        vto[i].type = FORMAT_STRING;
  403|   134k|        break;
  404|      0|      case 'n':
  405|      0|        vto[i].type = FORMAT_INTPTR;
  406|      0|        break;
  407|      0|      case 'p':
  408|      0|        vto[i].type = FORMAT_PTR;
  409|      0|        break;
  410|  13.7k|      case 'd': case 'i':
  411|  13.7k|        vto[i].type = FORMAT_INT;
  412|  13.7k|        break;
  413|  11.4k|      case 'u':
  414|  11.4k|        vto[i].type = FORMAT_INT;
  415|  11.4k|        flags |= FLAGS_UNSIGNED;
  416|  11.4k|        break;
  417|      0|      case 'o':
  418|      0|        vto[i].type = FORMAT_INT;
  419|      0|        flags |= FLAGS_OCTAL;
  420|      0|        break;
  421|  26.4k|      case 'x':
  422|  26.4k|        vto[i].type = FORMAT_INT;
  423|  26.4k|        flags |= FLAGS_HEX|FLAGS_UNSIGNED;
  424|  26.4k|        break;
  425|    658|      case 'X':
  426|    658|        vto[i].type = FORMAT_INT;
  427|    658|        flags |= FLAGS_HEX|FLAGS_UPPER|FLAGS_UNSIGNED;
  428|    658|        break;
  429|   129k|      case 'c':
  430|   129k|        vto[i].type = FORMAT_INT;
  431|   129k|        flags |= FLAGS_CHAR;
  432|   129k|        break;
  433|      0|      case 'f':
  434|      0|        vto[i].type = FORMAT_DOUBLE;
  435|      0|        break;
  436|      0|      case 'e':
  437|      0|        vto[i].type = FORMAT_DOUBLE;
  438|      0|        flags |= FLAGS_FLOATE;
  439|      0|        break;
  440|      0|      case 'E':
  441|      0|        vto[i].type = FORMAT_DOUBLE;
  442|      0|        flags |= FLAGS_FLOATE|FLAGS_UPPER;
  443|      0|        break;
  444|      0|      case 'g':
  445|      0|        vto[i].type = FORMAT_DOUBLE;
  446|      0|        flags |= FLAGS_FLOATG;
  447|      0|        break;
  448|      0|      case 'G':
  449|      0|        vto[i].type = FORMAT_DOUBLE;
  450|      0|        flags |= FLAGS_FLOATG|FLAGS_UPPER;
  451|      0|        break;
  452|      0|      default:
  453|      0|        vto[i].type = FORMAT_UNKNOWN;
  454|      0|        break;
  455|   316k|      } /* switch */
  456|       |
  457|   316k|      vto[i].flags = flags;
  458|   316k|      vto[i].width = width;
  459|   316k|      vto[i].precision = precision;
  460|       |
  461|   316k|      if(flags & FLAGS_WIDTHPARAM) {
  462|       |        /* we have the width specified from a parameter, so we make that
  463|       |           parameter's info setup properly */
  464|      0|        long k = width - 1;
  465|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  466|       |          /* out of allowed range */
  467|      0|          return 1;
  468|      0|        vto[i].width = k;
  469|      0|        vto[k].type = FORMAT_WIDTH;
  470|      0|        vto[k].flags = FLAGS_NEW;
  471|       |        /* can't use width or precision of width! */
  472|      0|        vto[k].width = 0;
  473|      0|        vto[k].precision = 0;
  474|      0|      }
  475|   316k|      if(flags & FLAGS_PRECPARAM) {
  476|       |        /* we have the precision specified from a parameter, so we make that
  477|       |           parameter's info setup properly */
  478|     95|        long k = precision - 1;
  479|     95|        if((k < 0) || (k >= MAX_PARAMETERS))
  480|       |          /* out of allowed range */
  481|      0|          return 1;
  482|     95|        vto[i].precision = k;
  483|     95|        vto[k].type = FORMAT_WIDTH;
  484|     95|        vto[k].flags = FLAGS_NEW;
  485|       |        /* can't use width or precision of width! */
  486|     95|        vto[k].width = 0;
  487|     95|        vto[k].precision = 0;
  488|     95|      }
  489|   316k|      *endpos++ = fmt + ((*fmt == '\0') ? 0 : 1); /* end of this sequence */
  490|   316k|    }
  491|   836k|  }
  492|       |
  493|       |  /* Read the arg list parameters into our data list */
  494|   414k|  for(i = 0; i<max_param; i++) {
  495|       |    /* Width/precision arguments must be read before the main argument
  496|       |       they are attached to */
  497|   316k|    if(vto[i].flags & FLAGS_WIDTHPARAM) {
  498|      0|      vto[vto[i].width].data.num.as_signed =
  499|      0|        (mp_intmax_t)va_arg(arglist, int);
  500|      0|    }
  501|   316k|    if(vto[i].flags & FLAGS_PRECPARAM) {
  502|     95|      vto[vto[i].precision].data.num.as_signed =
  503|     95|        (mp_intmax_t)va_arg(arglist, int);
  504|     95|    }
  505|       |
  506|   316k|    switch(vto[i].type) {
  507|   134k|    case FORMAT_STRING:
  508|   134k|      vto[i].data.str = va_arg(arglist, char *);
  509|   134k|      break;
  510|       |
  511|      0|    case FORMAT_INTPTR:
  512|      0|    case FORMAT_UNKNOWN:
  513|      0|    case FORMAT_PTR:
  514|      0|      vto[i].data.ptr = va_arg(arglist, void *);
  515|      0|      break;
  516|       |
  517|   181k|    case FORMAT_INT:
  518|   181k|#ifdef HAVE_LONG_LONG_TYPE
  519|   181k|      if((vto[i].flags & FLAGS_LONGLONG) && (vto[i].flags & FLAGS_UNSIGNED))
  520|      0|        vto[i].data.num.as_unsigned =
  521|      0|          (mp_uintmax_t)va_arg(arglist, mp_uintmax_t);
  522|   181k|      else if(vto[i].flags & FLAGS_LONGLONG)
  523|      0|        vto[i].data.num.as_signed =
  524|      0|          (mp_intmax_t)va_arg(arglist, mp_intmax_t);
  525|   181k|      else
  526|   181k|#endif
  527|   181k|      {
  528|   181k|        if((vto[i].flags & FLAGS_LONG) && (vto[i].flags & FLAGS_UNSIGNED))
  529|      4|          vto[i].data.num.as_unsigned =
  530|      4|            (mp_uintmax_t)va_arg(arglist, unsigned long);
  531|   181k|        else if(vto[i].flags & FLAGS_LONG)
  532|  12.9k|          vto[i].data.num.as_signed =
  533|  12.9k|            (mp_intmax_t)va_arg(arglist, long);
  534|   168k|        else if(vto[i].flags & FLAGS_UNSIGNED)
  535|  38.4k|          vto[i].data.num.as_unsigned =
  536|  38.4k|            (mp_uintmax_t)va_arg(arglist, unsigned int);
  537|   130k|        else
  538|   130k|          vto[i].data.num.as_signed =
  539|   130k|            (mp_intmax_t)va_arg(arglist, int);
  540|   181k|      }
  541|   181k|      break;
  542|       |
  543|      0|    case FORMAT_DOUBLE:
  544|      0|      vto[i].data.dnum = va_arg(arglist, double);
  545|      0|      break;
  546|       |
  547|     95|    case FORMAT_WIDTH:
  548|       |      /* Argument has been read. Silently convert it into an integer
  549|       |       * for later use
  550|       |       */
  551|     95|      vto[i].type = FORMAT_INT;
  552|     95|      break;
  553|       |
  554|      0|    default:
  555|      0|      break;
  556|   316k|    }
  557|   316k|  }
  558|       |
  559|  98.0k|  return 0;
  560|       |
  561|  98.0k|}
mprintf.c:dprintf_IsQualifierNoDollar:
  195|   356k|{
  196|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  197|       |  if(!strncmp(fmt, "I32", 3) || !strncmp(fmt, "I64", 3)) {
  198|       |    return TRUE;
  199|       |  }
  200|       |#endif
  201|       |
  202|   356k|  switch(*fmt) {
  203|     95|  case '-': case '+': case ' ': case '#': case '.':
  204|  27.1k|  case '0': case '1': case '2': case '3': case '4':
  205|  27.1k|  case '5': case '6': case '7': case '8': case '9':
  206|  40.1k|  case 'h': case 'l': case 'L': case 'z': case 'q':
  207|  40.1k|  case '*': case 'O':
  208|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  209|       |  case 'I':
  210|       |#endif
  211|  40.1k|    return TRUE;
  212|       |
  213|   316k|  default:
  214|   316k|    return FALSE;
  215|   356k|  }
  216|   356k|}
mprintf.c:dprintf_DollarString:
  178|   633k|{
  179|   633k|  int number = 0;
  180|   741k|  while(ISDIGIT(*input)) {
  181|   108k|    if(number < MAX_PARAMETERS) {
  182|   108k|      number *= 10;
  183|   108k|      number += *input - '0';
  184|   108k|    }
  185|   108k|    input++;
  186|   108k|  }
  187|   633k|  if(number <= MAX_PARAMETERS && ('$' == *input)) {
  188|      0|    *end = ++input;
  189|      0|    return number;
  190|      0|  }
  191|   633k|  return 0;
  192|   633k|}
mprintf.c:addbyter:
  993|   414k|{
  994|   414k|  struct nsprintf *infop = (struct nsprintf *)data;
  995|   414k|  unsigned char outc = (unsigned char)output;
  996|       |
  997|   414k|  if(infop->length < infop->max) {
  998|       |    /* only do this if we haven't reached max length yet */
  999|   414k|    infop->buffer[0] = outc; /* store */
 1000|   414k|    infop->buffer++; /* increase pointer */
 1001|   414k|    infop->length++; /* we are now one byte larger */
 1002|   414k|    return outc;     /* fputc() returns like this on success */
 1003|   414k|  }
 1004|      0|  return -1;
 1005|   414k|}
mprintf.c:alloc_addbyter:
 1043|  1.14M|{
 1044|  1.14M|  struct asprintf *infop = (struct asprintf *)data;
 1045|  1.14M|  unsigned char outc = (unsigned char)output;
 1046|       |
 1047|  1.14M|  if(Curl_dyn_addn(infop->b, &outc, 1)) {
 1048|      0|    infop->fail = 1;
 1049|      0|    return -1; /* fail */
 1050|      0|  }
 1051|  1.14M|  return outc; /* fputc() returns like this on success */
 1052|  1.14M|}

Curl_multi_handle:
  357|  2.25k|{
  358|  2.25k|  struct Curl_multi *multi = calloc(1, sizeof(struct Curl_multi));
  359|       |
  360|  2.25k|  if(!multi)
  361|      0|    return NULL;
  362|       |
  363|  2.25k|  multi->magic = CURL_MULTI_HANDLE;
  364|       |
  365|  2.25k|  if(Curl_mk_dnscache(&multi->hostcache))
  366|      0|    goto error;
  367|       |
  368|  2.25k|  if(sh_init(&multi->sockhash, hashsize))
  369|      0|    goto error;
  370|       |
  371|  2.25k|  if(Curl_conncache_init(&multi->conn_cache, chashsize))
  372|      0|    goto error;
  373|       |
  374|  2.25k|  Curl_llist_init(&multi->msglist, NULL);
  375|  2.25k|  Curl_llist_init(&multi->pending, NULL);
  376|       |
  377|  2.25k|  multi->multiplexing = TRUE;
  378|       |
  379|       |  /* -1 means it not set by user, use the default value */
  380|  2.25k|  multi->maxconnects = -1;
  381|  2.25k|  multi->max_concurrent_streams = 100;
  382|  2.25k|  multi->ipv6_works = Curl_ipv6works(NULL);
  383|       |
  384|       |#ifdef USE_WINSOCK
  385|       |  multi->wsa_event = WSACreateEvent();
  386|       |  if(multi->wsa_event == WSA_INVALID_EVENT)
  387|       |    goto error;
  388|       |#else
  389|  2.25k|#ifdef ENABLE_WAKEUP
  390|  2.25k|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, multi->wakeup_pair) < 0) {
  391|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  392|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  393|      0|  }
  394|  2.25k|  else if(curlx_nonblock(multi->wakeup_pair[0], TRUE) < 0 ||
  395|  2.25k|          curlx_nonblock(multi->wakeup_pair[1], TRUE) < 0) {
  396|      0|    sclose(multi->wakeup_pair[0]);
  397|      0|    sclose(multi->wakeup_pair[1]);
  398|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  399|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  400|      0|  }
  401|  2.25k|#endif
  402|  2.25k|#endif
  403|       |
  404|  2.25k|  return multi;
  405|       |
  406|      0|  error:
  407|       |
  408|      0|  Curl_hash_destroy(&multi->sockhash);
  409|      0|  Curl_hash_destroy(&multi->hostcache);
  410|      0|  Curl_conncache_destroy(&multi->conn_cache);
  411|      0|  Curl_llist_destroy(&multi->msglist, NULL);
  412|      0|  Curl_llist_destroy(&multi->pending, NULL);
  413|       |
  414|      0|  free(multi);
  415|      0|  return NULL;
  416|  2.25k|}
curl_multi_init:
  419|  2.25k|{
  420|  2.25k|  return Curl_multi_handle(CURL_SOCKET_HASH_TABLE_SIZE,
  421|  2.25k|                           CURL_CONNECTION_HASH_SIZE);
  422|  2.25k|}
curl_multi_add_handle:
  426|  2.25k|{
  427|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  428|  2.25k|  if(!GOOD_MULTI_HANDLE(multi))
  429|      0|    return CURLM_BAD_HANDLE;
  430|       |
  431|       |  /* Verify that we got a somewhat good easy handle too */
  432|  2.25k|  if(!GOOD_EASY_HANDLE(data))
  433|      0|    return CURLM_BAD_EASY_HANDLE;
  434|       |
  435|       |  /* Prevent users from adding same easy handle more than once and prevent
  436|       |     adding to more than one multi stack */
  437|  2.25k|  if(data->multi)
  438|      0|    return CURLM_ADDED_ALREADY;
  439|       |
  440|  2.25k|  if(multi->in_callback)
  441|      0|    return CURLM_RECURSIVE_API_CALL;
  442|       |
  443|       |  /* Initialize timeout list for this handle */
  444|  2.25k|  Curl_llist_init(&data->state.timeoutlist, NULL);
  445|       |
  446|       |  /*
  447|       |   * No failure allowed in this function beyond this point. And no
  448|       |   * modification of easy nor multi handle allowed before this except for
  449|       |   * potential multi's connection cache growing which won't be undone in this
  450|       |   * function no matter what.
  451|       |   */
  452|  2.25k|  if(data->set.errorbuffer)
  453|      0|    data->set.errorbuffer[0] = 0;
  454|       |
  455|       |  /* set the easy handle */
  456|  2.25k|  multistate(data, MSTATE_INIT);
  457|       |
  458|       |  /* for multi interface connections, we share DNS cache automatically if the
  459|       |     easy handle's one is currently not set. */
  460|  2.25k|  if(!data->dns.hostcache ||
  461|  2.25k|     (data->dns.hostcachetype == HCACHE_NONE)) {
  462|  2.25k|    data->dns.hostcache = &multi->hostcache;
  463|  2.25k|    data->dns.hostcachetype = HCACHE_MULTI;
  464|  2.25k|  }
  465|       |
  466|       |  /* Point to the shared or multi handle connection cache */
  467|  2.25k|  if(data->share && (data->share->specifier & (1<< CURL_LOCK_DATA_CONNECT)))
  468|      0|    data->state.conn_cache = &data->share->conn_cache;
  469|  2.25k|  else
  470|  2.25k|    data->state.conn_cache = &multi->conn_cache;
  471|  2.25k|  data->state.lastconnect_id = -1;
  472|       |
  473|       |#ifdef USE_LIBPSL
  474|       |  /* Do the same for PSL. */
  475|       |  if(data->share && (data->share->specifier & (1 << CURL_LOCK_DATA_PSL)))
  476|       |    data->psl = &data->share->psl;
  477|       |  else
  478|       |    data->psl = &multi->psl;
  479|       |#endif
  480|       |
  481|       |  /* We add the new entry last in the list. */
  482|  2.25k|  data->next = NULL; /* end of the line */
  483|  2.25k|  if(multi->easyp) {
  484|      0|    struct Curl_easy *last = multi->easylp;
  485|      0|    last->next = data;
  486|      0|    data->prev = last;
  487|      0|    multi->easylp = data; /* the new last node */
  488|      0|  }
  489|  2.25k|  else {
  490|       |    /* first node, make prev NULL! */
  491|  2.25k|    data->prev = NULL;
  492|  2.25k|    multi->easylp = multi->easyp = data; /* both first and last */
  493|  2.25k|  }
  494|       |
  495|       |  /* make the Curl_easy refer back to this multi handle */
  496|  2.25k|  data->multi = multi;
  497|       |
  498|       |  /* Set the timeout for this handle to expire really soon so that it will
  499|       |     be taken care of even when this handle is added in the midst of operation
  500|       |     when only the curl_multi_socket() API is used. During that flow, only
  501|       |     sockets that time-out or have actions will be dealt with. Since this
  502|       |     handle has no action yet, we make sure it times out to get things to
  503|       |     happen. */
  504|  2.25k|  Curl_expire(data, 0, EXPIRE_RUN_NOW);
  505|       |
  506|       |  /* increase the node-counter */
  507|  2.25k|  multi->num_easy++;
  508|       |
  509|       |  /* increase the alive-counter */
  510|  2.25k|  multi->num_alive++;
  511|       |
  512|       |  /* A somewhat crude work-around for a little glitch in Curl_update_timer()
  513|       |     that happens if the lastcall time is set to the same time when the handle
  514|       |     is removed as when the next handle is added, as then the check in
  515|       |     Curl_update_timer() that prevents calling the application multiple times
  516|       |     with the same timer info will not trigger and then the new handle's
  517|       |     timeout will not be notified to the app.
  518|       |
  519|       |     The work-around is thus simply to clear the 'lastcall' variable to force
  520|       |     Curl_update_timer() to always trigger a callback to the app when a new
  521|       |     easy handle is added */
  522|  2.25k|  memset(&multi->timer_lastcall, 0, sizeof(multi->timer_lastcall));
  523|       |
  524|  2.25k|  CONNCACHE_LOCK(data);
  525|       |  /* The closure handle only ever has default timeouts set. To improve the
  526|       |     state somewhat we clone the timeouts from each added handle so that the
  527|       |     closure handle always has the same timeouts as the most recently added
  528|       |     easy handle. */
  529|  2.25k|  data->state.conn_cache->closure_handle->set.timeout = data->set.timeout;
  530|  2.25k|  data->state.conn_cache->closure_handle->set.server_response_timeout =
  531|  2.25k|    data->set.server_response_timeout;
  532|  2.25k|  data->state.conn_cache->closure_handle->set.no_signal =
  533|  2.25k|    data->set.no_signal;
  534|  2.25k|  CONNCACHE_UNLOCK(data);
  535|       |
  536|  2.25k|  Curl_update_timer(multi);
  537|  2.25k|  return CURLM_OK;
  538|  2.25k|}
curl_multi_remove_handle:
  718|  2.25k|{
  719|  2.25k|  struct Curl_easy *easy = data;
  720|  2.25k|  bool premature;
  721|  2.25k|  struct Curl_llist_element *e;
  722|       |
  723|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  724|  2.25k|  if(!GOOD_MULTI_HANDLE(multi))
  725|      0|    return CURLM_BAD_HANDLE;
  726|       |
  727|       |  /* Verify that we got a somewhat good easy handle too */
  728|  2.25k|  if(!GOOD_EASY_HANDLE(data))
  729|      0|    return CURLM_BAD_EASY_HANDLE;
  730|       |
  731|       |  /* Prevent users from trying to remove same easy handle more than once */
  732|  2.25k|  if(!data->multi)
  733|      0|    return CURLM_OK; /* it is already removed so let's say it is fine! */
  734|       |
  735|       |  /* Prevent users from trying to remove an easy handle from the wrong multi */
  736|  2.25k|  if(data->multi != multi)
  737|      0|    return CURLM_BAD_EASY_HANDLE;
  738|       |
  739|  2.25k|  if(multi->in_callback)
  740|      0|    return CURLM_RECURSIVE_API_CALL;
  741|       |
  742|  2.25k|  premature = (data->mstate < MSTATE_COMPLETED) ? TRUE : FALSE;
  743|       |
  744|       |  /* If the 'state' is not INIT or COMPLETED, we might need to do something
  745|       |     nice to put the easy_handle in a good known state when this returns. */
  746|  2.25k|  if(premature) {
  747|       |    /* this handle is "alive" so we need to count down the total number of
  748|       |       alive connections when this is removed */
  749|     18|    multi->num_alive--;
  750|     18|  }
  751|       |
  752|  2.25k|  if(data->conn &&
  753|  2.25k|     data->mstate > MSTATE_DO &&
  754|  2.25k|     data->mstate < MSTATE_COMPLETED) {
  755|       |    /* Set connection owner so that the DONE function closes it.  We can
  756|       |       safely do this here since connection is killed. */
  757|     18|    streamclose(data->conn, "Removed with partial response");
  758|     18|  }
  759|       |
  760|  2.25k|  if(data->conn) {
  761|       |    /* multi_done() clears the association between the easy handle and the
  762|       |       connection.
  763|       |
  764|       |       Note that this ignores the return code simply because there's
  765|       |       nothing really useful to do with it anyway! */
  766|     18|    (void)multi_done(data, data->result, premature);
  767|     18|  }
  768|       |
  769|       |  /* The timer must be shut down before data->multi is set to NULL, else the
  770|       |     timenode will remain in the splay tree after curl_easy_cleanup is
  771|       |     called. Do it after multi_done() in case that sets another time! */
  772|  2.25k|  Curl_expire_clear(data);
  773|       |
  774|  2.25k|  if(data->connect_queue.ptr)
  775|       |    /* the handle was in the pending list waiting for an available connection,
  776|       |       so go ahead and remove it */
  777|      0|    Curl_llist_remove(&multi->pending, &data->connect_queue, NULL);
  778|       |
  779|  2.25k|  if(data->dns.hostcachetype == HCACHE_MULTI) {
  780|       |    /* stop using the multi handle's DNS cache, *after* the possible
  781|       |       multi_done() call above */
  782|  2.25k|    data->dns.hostcache = NULL;
  783|  2.25k|    data->dns.hostcachetype = HCACHE_NONE;
  784|  2.25k|  }
  785|       |
  786|  2.25k|  Curl_wildcard_dtor(&data->wildcard);
  787|       |
  788|       |  /* destroy the timeout list that is held in the easy handle, do this *after*
  789|       |     multi_done() as that may actually call Curl_expire that uses this */
  790|  2.25k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  791|       |
  792|       |  /* change state without using multistate(), only to make singlesocket() do
  793|       |     what we want */
  794|  2.25k|  data->mstate = MSTATE_COMPLETED;
  795|  2.25k|  singlesocket(multi, easy); /* to let the application know what sockets that
  796|       |                                vanish with this handle */
  797|       |
  798|       |  /* Remove the association between the connection and the handle */
  799|  2.25k|  Curl_detach_connnection(data);
  800|       |
  801|  2.25k|  if(data->state.lastconnect_id != -1) {
  802|       |    /* Mark any connect-only connection for closure */
  803|    950|    Curl_conncache_foreach(data, data->state.conn_cache,
  804|    950|                           NULL, close_connect_only);
  805|    950|  }
  806|       |
  807|       |#ifdef USE_LIBPSL
  808|       |  /* Remove the PSL association. */
  809|       |  if(data->psl == &multi->psl)
  810|       |    data->psl = NULL;
  811|       |#endif
  812|       |
  813|       |  /* as this was using a shared connection cache we clear the pointer to that
  814|       |     since we're not part of that multi handle anymore */
  815|  2.25k|  data->state.conn_cache = NULL;
  816|       |
  817|  2.25k|  data->multi = NULL; /* clear the association to this multi handle */
  818|       |
  819|       |  /* make sure there's no pending message in the queue sent from this easy
  820|       |     handle */
  821|       |
  822|  2.25k|  for(e = multi->msglist.head; e; e = e->next) {
  823|  2.23k|    struct Curl_message *msg = e->ptr;
  824|       |
  825|  2.23k|    if(msg->extmsg.easy_handle == easy) {
  826|  2.23k|      Curl_llist_remove(&multi->msglist, e, NULL);
  827|       |      /* there can only be one from this specific handle */
  828|  2.23k|      break;
  829|  2.23k|    }
  830|  2.23k|  }
  831|       |
  832|       |  /* Remove from the pending list if it is there. Otherwise this will
  833|       |     remain on the pending list forever due to the state change. */
  834|  2.25k|  for(e = multi->pending.head; e; e = e->next) {
  835|      0|    struct Curl_easy *curr_data = e->ptr;
  836|       |
  837|      0|    if(curr_data == data) {
  838|      0|      Curl_llist_remove(&multi->pending, e, NULL);
  839|      0|      break;
  840|      0|    }
  841|      0|  }
  842|       |
  843|       |  /* make the previous node point to our next */
  844|  2.25k|  if(data->prev)
  845|      0|    data->prev->next = data->next;
  846|  2.25k|  else
  847|  2.25k|    multi->easyp = data->next; /* point to first node */
  848|       |
  849|       |  /* make our next point to our previous node */
  850|  2.25k|  if(data->next)
  851|      0|    data->next->prev = data->prev;
  852|  2.25k|  else
  853|  2.25k|    multi->easylp = data->prev; /* point to last node */
  854|       |
  855|       |  /* NOTE NOTE NOTE
  856|       |     We do not touch the easy handle here! */
  857|  2.25k|  multi->num_easy--; /* one less to care about now */
  858|       |
  859|  2.25k|  process_pending_handles(multi);
  860|       |
  861|  2.25k|  Curl_update_timer(multi);
  862|  2.25k|  return CURLM_OK;
  863|  2.25k|}
Curl_multiplex_wanted:
  867|  2.36k|{
  868|  2.36k|  return (multi && (multi->multiplexing));
  869|  2.36k|}
Curl_detach_connnection:
  878|  13.9k|{
  879|  13.9k|  struct connectdata *conn = data->conn;
  880|  13.9k|  if(conn) {
  881|  4.80k|    Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);
  882|  4.80k|    Curl_ssl_detach_conn(data, conn);
  883|  4.80k|  }
  884|  13.9k|  data->conn = NULL;
  885|  13.9k|}
Curl_attach_connnection:
  894|  4.80k|{
  895|  4.80k|  DEBUGASSERT(!data->conn);
  896|  4.80k|  DEBUGASSERT(conn);
  897|  4.80k|  data->conn = conn;
  898|  4.80k|  Curl_llist_insert_next(&conn->easyq, conn->easyq.tail, data,
  899|  4.80k|                         &data->conn_queue);
  900|  4.80k|  if(conn->handler->attach)
  901|      0|    conn->handler->attach(data, conn);
  902|  4.80k|  Curl_ssl_associate_conn(data, conn);
  903|  4.80k|}
curl_multi_fdset:
 1027|  1.01k|{
 1028|       |  /* Scan through all the easy handles to get the file descriptors set.
 1029|       |     Some easy handles may not have connected to the remote host yet,
 1030|       |     and then we must make sure that is done. */
 1031|  1.01k|  struct Curl_easy *data;
 1032|  1.01k|  int this_max_fd = -1;
 1033|  1.01k|  curl_socket_t sockbunch[MAX_SOCKSPEREASYHANDLE];
 1034|  1.01k|  int i;
 1035|  1.01k|  (void)exc_fd_set; /* not used */
 1036|       |
 1037|  1.01k|  if(!GOOD_MULTI_HANDLE(multi))
 1038|      0|    return CURLM_BAD_HANDLE;
 1039|       |
 1040|  1.01k|  if(multi->in_callback)
 1041|      0|    return CURLM_RECURSIVE_API_CALL;
 1042|       |
 1043|  1.01k|  data = multi->easyp;
 1044|  2.02k|  while(data) {
 1045|  1.01k|    int bitmap;
 1046|       |#ifdef __clang_analyzer_
 1047|       |    /* to prevent "The left operand of '>=' is a garbage value" warnings */
 1048|       |    memset(sockbunch, 0, sizeof(sockbunch));
 1049|       |#endif
 1050|  1.01k|    bitmap = multi_getsock(data, sockbunch);
 1051|       |
 1052|  2.02k|    for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++) {
 1053|  2.02k|      curl_socket_t s = CURL_SOCKET_BAD;
 1054|       |
 1055|  2.02k|      if((bitmap & GETSOCK_READSOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1056|    994|        if(!FDSET_SOCK(sockbunch[i]))
 1057|       |          /* pretend it doesn't exist */
 1058|      0|          continue;
 1059|    994|        FD_SET(sockbunch[i], read_fd_set);
 1060|    994|        s = sockbunch[i];
 1061|    994|      }
 1062|  2.02k|      if((bitmap & GETSOCK_WRITESOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1063|     20|        if(!FDSET_SOCK(sockbunch[i]))
 1064|       |          /* pretend it doesn't exist */
 1065|      0|          continue;
 1066|     20|        FD_SET(sockbunch[i], write_fd_set);
 1067|     20|        s = sockbunch[i];
 1068|     20|      }
 1069|  2.02k|      if(s == CURL_SOCKET_BAD)
 1070|       |        /* this socket is unused, break out of loop */
 1071|  1.01k|        break;
 1072|  1.01k|      if((int)s > this_max_fd)
 1073|  1.01k|        this_max_fd = (int)s;
 1074|  1.01k|    }
 1075|       |
 1076|  1.01k|    data = data->next; /* check next handle */
 1077|  1.01k|  }
 1078|       |
 1079|  1.01k|  *max_fd = this_max_fd;
 1080|       |
 1081|  1.01k|  return CURLM_OK;
 1082|  1.01k|}
Curl_preconnect:
 1716|  4.80k|{
 1717|  4.80k|  if(!data->state.buffer) {
 1718|  2.44k|    data->state.buffer = malloc(data->set.buffer_size + 1);
 1719|  2.44k|    if(!data->state.buffer)
 1720|      0|      return CURLE_OUT_OF_MEMORY;
 1721|  2.44k|  }
 1722|  4.80k|  return CURLE_OK;
 1723|  4.80k|}
curl_multi_perform:
 2572|  3.24k|{
 2573|  3.24k|  struct Curl_easy *data;
 2574|  3.24k|  CURLMcode returncode = CURLM_OK;
 2575|  3.24k|  struct Curl_tree *t;
 2576|  3.24k|  struct curltime now = Curl_now();
 2577|       |
 2578|  3.24k|  if(!GOOD_MULTI_HANDLE(multi))
 2579|      0|    return CURLM_BAD_HANDLE;
 2580|       |
 2581|  3.24k|  if(multi->in_callback)
 2582|      0|    return CURLM_RECURSIVE_API_CALL;
 2583|       |
 2584|  3.24k|  data = multi->easyp;
 2585|  6.49k|  while(data) {
 2586|  3.24k|    CURLMcode result;
 2587|  3.24k|    SIGPIPE_VARIABLE(pipe_st);
 2588|       |
 2589|  3.24k|    sigpipe_ignore(data, &pipe_st);
 2590|  3.24k|    result = multi_runsingle(multi, &now, data);
 2591|  3.24k|    sigpipe_restore(&pipe_st);
 2592|       |
 2593|  3.24k|    if(result)
 2594|      0|      returncode = result;
 2595|       |
 2596|  3.24k|    data = data->next; /* operate on next handle */
 2597|  3.24k|  }
 2598|       |
 2599|       |  /*
 2600|       |   * Simply remove all expired timers from the splay since handles are dealt
 2601|       |   * with unconditionally by this function and curl_multi_timeout() requires
 2602|       |   * that already passed/handled expire times are removed from the splay.
 2603|       |   *
 2604|       |   * It is important that the 'now' value is set at the entry of this function
 2605|       |   * and not for the current time as it may have ticked a little while since
 2606|       |   * then and then we risk this loop to remove timers that actually have not
 2607|       |   * been handled!
 2608|       |   */
 2609|  4.04k|  do {
 2610|  4.04k|    multi->timetree = Curl_splaygetbest(now, multi->timetree, &t);
 2611|  4.04k|    if(t)
 2612|       |      /* the removed may have another timeout in queue */
 2613|    791|      (void)add_next_timeout(now, multi, t->payload);
 2614|       |
 2615|  4.04k|  } while(t);
 2616|       |
 2617|  3.24k|  *running_handles = multi->num_alive;
 2618|       |
 2619|  3.24k|  if(CURLM_OK >= returncode)
 2620|  3.24k|    Curl_update_timer(multi);
 2621|       |
 2622|  3.24k|  return returncode;
 2623|  3.24k|}
curl_multi_cleanup:
 2626|  2.25k|{
 2627|  2.25k|  struct Curl_easy *data;
 2628|  2.25k|  struct Curl_easy *nextdata;
 2629|       |
 2630|  2.25k|  if(GOOD_MULTI_HANDLE(multi)) {
 2631|  2.25k|    if(multi->in_callback)
 2632|      0|      return CURLM_RECURSIVE_API_CALL;
 2633|       |
 2634|  2.25k|    multi->magic = 0; /* not good anymore */
 2635|       |
 2636|       |    /* First remove all remaining easy handles */
 2637|  2.25k|    data = multi->easyp;
 2638|  2.25k|    while(data) {
 2639|      0|      nextdata = data->next;
 2640|      0|      if(!data->state.done && data->conn)
 2641|       |        /* if DONE was never called for this handle */
 2642|      0|        (void)multi_done(data, CURLE_OK, TRUE);
 2643|      0|      if(data->dns.hostcachetype == HCACHE_MULTI) {
 2644|       |        /* clear out the usage of the shared DNS cache */
 2645|      0|        Curl_hostcache_clean(data, data->dns.hostcache);
 2646|      0|        data->dns.hostcache = NULL;
 2647|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2648|      0|      }
 2649|       |
 2650|       |      /* Clear the pointer to the connection cache */
 2651|      0|      data->state.conn_cache = NULL;
 2652|      0|      data->multi = NULL; /* clear the association */
 2653|       |
 2654|       |#ifdef USE_LIBPSL
 2655|       |      if(data->psl == &multi->psl)
 2656|       |        data->psl = NULL;
 2657|       |#endif
 2658|       |
 2659|      0|      data = nextdata;
 2660|      0|    }
 2661|       |
 2662|       |    /* Close all the connections in the connection cache */
 2663|  2.25k|    Curl_conncache_close_all_connections(&multi->conn_cache);
 2664|       |
 2665|  2.25k|    Curl_hash_destroy(&multi->sockhash);
 2666|  2.25k|    Curl_conncache_destroy(&multi->conn_cache);
 2667|  2.25k|    Curl_llist_destroy(&multi->msglist, NULL);
 2668|  2.25k|    Curl_llist_destroy(&multi->pending, NULL);
 2669|       |
 2670|  2.25k|    Curl_hash_destroy(&multi->hostcache);
 2671|  2.25k|    Curl_psl_destroy(&multi->psl);
 2672|       |
 2673|       |#ifdef USE_WINSOCK
 2674|       |    WSACloseEvent(multi->wsa_event);
 2675|       |#else
 2676|  2.25k|#ifdef ENABLE_WAKEUP
 2677|  2.25k|    sclose(multi->wakeup_pair[0]);
 2678|  2.25k|    sclose(multi->wakeup_pair[1]);
 2679|  2.25k|#endif
 2680|  2.25k|#endif
 2681|  2.25k|    free(multi);
 2682|       |
 2683|  2.25k|    return CURLM_OK;
 2684|  2.25k|  }
 2685|      0|  return CURLM_BAD_HANDLE;
 2686|  2.25k|}
Curl_multi_closed:
 2899|  2.30k|{
 2900|  2.30k|  if(data) {
 2901|       |    /* if there's still an easy handle associated with this connection */
 2902|  2.30k|    struct Curl_multi *multi = data->multi;
 2903|  2.30k|    if(multi) {
 2904|       |      /* this is set if this connection is part of a handle that is added to
 2905|       |         a multi handle, and only then this is necessary */
 2906|  1.45k|      struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);
 2907|       |
 2908|  1.45k|      if(entry) {
 2909|      0|        if(multi->socket_cb)
 2910|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2911|      0|                           multi->socket_userp,
 2912|      0|                           entry->socketp);
 2913|       |
 2914|       |        /* now remove it from the socket hash */
 2915|      0|        sh_delentry(entry, &multi->sockhash, s);
 2916|      0|      }
 2917|  1.45k|    }
 2918|  2.30k|  }
 2919|  2.30k|}
Curl_update_timer:
 3259|  7.75k|{
 3260|  7.75k|  long timeout_ms;
 3261|       |
 3262|  7.75k|  if(!multi->timer_cb)
 3263|  7.75k|    return;
 3264|      0|  if(multi_timeout(multi, &timeout_ms)) {
 3265|      0|    return;
 3266|      0|  }
 3267|      0|  if(timeout_ms < 0) {
 3268|      0|    static const struct curltime none = {0, 0};
 3269|      0|    if(Curl_splaycomparekeys(none, multi->timer_lastcall)) {
 3270|      0|      multi->timer_lastcall = none;
 3271|       |      /* there's no timeout now but there was one previously, tell the app to
 3272|       |         disable it */
 3273|      0|      multi->timer_cb(multi, -1, multi->timer_userp);
 3274|      0|      return;
 3275|      0|    }
 3276|      0|    return;
 3277|      0|  }
 3278|       |
 3279|       |  /* When multi_timeout() is done, multi->timetree points to the node with the
 3280|       |   * timeout we got the (relative) time-out time for. We can thus easily check
 3281|       |   * if this is the same (fixed) time as we got in a previous call and then
 3282|       |   * avoid calling the callback again. */
 3283|      0|  if(Curl_splaycomparekeys(multi->timetree->key, multi->timer_lastcall) == 0)
 3284|      0|    return;
 3285|       |
 3286|      0|  multi->timer_lastcall = multi->timetree->key;
 3287|       |
 3288|      0|  multi->timer_cb(multi, timeout_ms, multi->timer_userp);
 3289|      0|}
Curl_expire:
 3366|  7.50k|{
 3367|  7.50k|  struct Curl_multi *multi = data->multi;
 3368|  7.50k|  struct curltime *nowp = &data->state.expiretime;
 3369|  7.50k|  struct curltime set;
 3370|       |
 3371|       |  /* this is only interesting while there is still an associated multi struct
 3372|       |     remaining! */
 3373|  7.50k|  if(!multi)
 3374|      0|    return;
 3375|       |
 3376|  7.50k|  DEBUGASSERT(id < EXPIRE_LAST);
 3377|       |
 3378|  7.50k|  set = Curl_now();
 3379|  7.50k|  set.tv_sec += (time_t)(milli/1000); /* might be a 64 to 32 bit conversion */
 3380|  7.50k|  set.tv_usec += (unsigned int)(milli%1000)*1000;
 3381|       |
 3382|  7.50k|  if(set.tv_usec >= 1000000) {
 3383|    250|    set.tv_sec++;
 3384|    250|    set.tv_usec -= 1000000;
 3385|    250|  }
 3386|       |
 3387|       |  /* Remove any timer with the same id just in case. */
 3388|  7.50k|  multi_deltimeout(data, id);
 3389|       |
 3390|       |  /* Add it to the timer list.  It must stay in the list until it has expired
 3391|       |     in case we need to recompute the minimum timer later. */
 3392|  7.50k|  multi_addtimeout(data, &set, id);
 3393|       |
 3394|  7.50k|  if(nowp->tv_sec || nowp->tv_usec) {
 3395|       |    /* This means that the struct is added as a node in the splay tree.
 3396|       |       Compare if the new time is earlier, and only remove-old/add-new if it
 3397|       |       is. */
 3398|  5.24k|    timediff_t diff = Curl_timediff(set, *nowp);
 3399|  5.24k|    int rc;
 3400|       |
 3401|  5.24k|    if(diff > 0) {
 3402|       |      /* The current splay tree entry is sooner than this new expiry time.
 3403|       |         We don't need to update our splay tree entry. */
 3404|  4.52k|      return;
 3405|  4.52k|    }
 3406|       |
 3407|       |    /* Since this is an updated time, we must remove the previous entry from
 3408|       |       the splay tree first and then re-add the new value */
 3409|    727|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3410|    727|                          &multi->timetree);
 3411|    727|    if(rc)
 3412|      0|      infof(data, "Internal error removing splay node = %d", rc);
 3413|    727|  }
 3414|       |
 3415|       |  /* Indicate that we are in the splay tree and insert the new timer expiry
 3416|       |     value since it is our local minimum. */
 3417|  2.98k|  *nowp = set;
 3418|  2.98k|  data->state.timenode.payload = data;
 3419|  2.98k|  multi->timetree = Curl_splayinsert(*nowp, multi->timetree,
 3420|  2.98k|                                     &data->state.timenode);
 3421|  2.98k|}
Curl_expire_done:
 3430|     16|{
 3431|       |  /* remove the timer, if there */
 3432|     16|  multi_deltimeout(data, id);
 3433|     16|}
Curl_expire_clear:
 3441|  9.06k|{
 3442|  9.06k|  struct Curl_multi *multi = data->multi;
 3443|  9.06k|  struct curltime *nowp = &data->state.expiretime;
 3444|       |
 3445|       |  /* this is only interesting while there is still an associated multi struct
 3446|       |     remaining! */
 3447|  9.06k|  if(!multi)
 3448|  4.57k|    return;
 3449|       |
 3450|  4.49k|  if(nowp->tv_sec || nowp->tv_usec) {
 3451|       |    /* Since this is an cleared time, we must remove the previous entry from
 3452|       |       the splay tree */
 3453|  2.25k|    struct Curl_llist *list = &data->state.timeoutlist;
 3454|  2.25k|    int rc;
 3455|       |
 3456|  2.25k|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3457|  2.25k|                          &multi->timetree);
 3458|  2.25k|    if(rc)
 3459|      0|      infof(data, "Internal error clearing splay node = %d", rc);
 3460|       |
 3461|       |    /* flush the timeout list too */
 3462|  8.07k|    while(list->size > 0) {
 3463|  5.82k|      Curl_llist_remove(list, list->tail, NULL);
 3464|  5.82k|    }
 3465|       |
 3466|  2.25k|#ifdef DEBUGBUILD
 3467|  2.25k|    infof(data, "Expire cleared (transfer %p)", data);
 3468|  2.25k|#endif
 3469|  2.25k|    nowp->tv_sec = 0;
 3470|  2.25k|    nowp->tv_usec = 0;
 3471|  2.25k|  }
 3472|  4.49k|}
Curl_multi_max_host_connections:
 3496|  2.44k|{
 3497|  2.44k|  return multi ? multi->max_host_connections : 0;
 3498|  2.44k|}
Curl_multi_max_total_connections:
 3501|  2.44k|{
 3502|  2.44k|  return multi ? multi->max_total_connections : 0;
 3503|  2.44k|}
Curl_set_in_callback:
 3545|  10.6k|{
 3546|       |  /* might get called when there is no data pointer! */
 3547|  10.6k|  if(data) {
 3548|  10.6k|    if(data->multi_easy)
 3549|      0|      data->multi_easy->in_callback = value;
 3550|  10.6k|    else if(data->multi)
 3551|  10.6k|      data->multi->in_callback = value;
 3552|  10.6k|  }
 3553|  10.6k|}
Curl_multi_max_concurrent_streams:
 3595|    705|{
 3596|    705|  DEBUGASSERT(multi);
 3597|    705|  return multi->max_concurrent_streams;
 3598|    705|}
multi.c:sh_init:
  336|  2.25k|{
  337|  2.25k|  return Curl_hash_init(hash, hashsize, hash_fd, fd_key_compare,
  338|  2.25k|                        sh_freeentry);
  339|  2.25k|}
multi.c:hash_fd:
  310|  1.45k|{
  311|  1.45k|  curl_socket_t fd = *((curl_socket_t *) key);
  312|  1.45k|  (void) key_length;
  313|       |
  314|  1.45k|  return (fd % slots_num);
  315|  1.45k|}
multi.c:mstate:
  131|  21.9k|{
  132|  21.9k|  CURLMstate oldstate = data->mstate;
  133|  21.9k|  static const init_multistate_func finit[MSTATE_LAST] = {
  134|  21.9k|    NULL,              /* INIT */
  135|  21.9k|    NULL,              /* PENDING */
  136|  21.9k|    Curl_init_CONNECT, /* CONNECT */
  137|  21.9k|    NULL,              /* RESOLVING */
  138|  21.9k|    NULL,              /* CONNECTING */
  139|  21.9k|    NULL,              /* TUNNELING */
  140|  21.9k|    NULL,              /* PROTOCONNECT */
  141|  21.9k|    NULL,              /* PROTOCONNECTING */
  142|  21.9k|    Curl_connect_free, /* DO */
  143|  21.9k|    NULL,              /* DOING */
  144|  21.9k|    NULL,              /* DOING_MORE */
  145|  21.9k|    before_perform,    /* DID */
  146|  21.9k|    NULL,              /* PERFORMING */
  147|  21.9k|    NULL,              /* RATELIMITING */
  148|  21.9k|    NULL,              /* DONE */
  149|  21.9k|    init_completed,    /* COMPLETED */
  150|       |    NULL               /* MSGSENT */
  151|  21.9k|  };
  152|       |
  153|       |#if defined(DEBUGBUILD) && defined(CURL_DISABLE_VERBOSE_STRINGS)
  154|       |  (void) lineno;
  155|       |#endif
  156|       |
  157|  21.9k|  if(oldstate == state)
  158|       |    /* don't bother when the new state is the same as the old state */
  159|  2.25k|    return;
  160|       |
  161|  19.6k|  data->mstate = state;
  162|       |
  163|  19.6k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  164|  19.6k|  if(data->mstate >= MSTATE_PENDING &&
  165|  19.6k|     data->mstate < MSTATE_COMPLETED) {
  166|  15.2k|    long connection_id = -5000;
  167|       |
  168|  15.2k|    if(data->conn)
  169|  12.7k|      connection_id = data->conn->connection_id;
  170|       |
  171|  15.2k|    infof(data,
  172|  15.2k|          "STATE: %s => %s handle %p; line %d (connection #%ld)",
  173|  15.2k|          statename[oldstate], statename[data->mstate],
  174|  15.2k|          (void *)data, lineno, connection_id);
  175|  15.2k|  }
  176|  19.6k|#endif
  177|       |
  178|  19.6k|  if(state == MSTATE_COMPLETED) {
  179|       |    /* changing to COMPLETED means there's one less easy handle 'alive' */
  180|  2.23k|    DEBUGASSERT(data->multi->num_alive > 0);
  181|  2.23k|    data->multi->num_alive--;
  182|  2.23k|  }
  183|       |
  184|       |  /* if this state has an init-function, run it */
  185|  19.6k|  if(finit[state])
  186|  9.26k|    finit[state](data);
  187|  19.6k|}
multi.c:before_perform:
  110|  2.26k|{
  111|  2.26k|  data->req.chunk = FALSE;
  112|  2.26k|  Curl_pgrsTime(data, TIMER_PRETRANSFER);
  113|  2.26k|}
multi.c:init_completed:
  116|  2.23k|{
  117|       |  /* this is a completed transfer */
  118|       |
  119|       |  /* Important: reset the conn pointer so that we don't point to memory
  120|       |     that could be freed anytime */
  121|  2.23k|  Curl_detach_connnection(data);
  122|  2.23k|  Curl_expire_clear(data); /* stop all timers */
  123|  2.23k|}
multi.c:multi_done:
  560|  2.30k|{
  561|  2.30k|  CURLcode result;
  562|  2.30k|  struct connectdata *conn = data->conn;
  563|  2.30k|  unsigned int i;
  564|       |
  565|  2.30k|  DEBUGF(infof(data, "multi_done"));
  566|       |
  567|  2.30k|  if(data->state.done)
  568|       |    /* Stop if multi_done() has already been called */
  569|      0|    return CURLE_OK;
  570|       |
  571|       |  /* Stop the resolver and free its own resources (but not dns_entry yet). */
  572|  2.30k|  Curl_resolver_kill(data);
  573|       |
  574|       |  /* Cleanup possible redirect junk */
  575|  2.30k|  Curl_safefree(data->req.newurl);
  576|  2.30k|  Curl_safefree(data->req.location);
  577|       |
  578|  2.30k|  switch(status) {
  579|      3|  case CURLE_ABORTED_BY_CALLBACK:
  580|      3|  case CURLE_READ_ERROR:
  581|      4|  case CURLE_WRITE_ERROR:
  582|       |    /* When we're aborted due to a callback return code it basically have to
  583|       |       be counted as premature as there is trouble ahead if we don't. We have
  584|       |       many callbacks and protocols work differently, we could potentially do
  585|       |       this more fine-grained in the future. */
  586|      4|    premature = TRUE;
  587|  2.30k|  default:
  588|  2.30k|    break;
  589|  2.30k|  }
  590|       |
  591|       |  /* this calls the protocol-specific function pointer previously set */
  592|  2.30k|  if(conn->handler->done)
  593|  2.30k|    result = conn->handler->done(data, status, premature);
  594|      0|  else
  595|      0|    result = status;
  596|       |
  597|  2.30k|  if(CURLE_ABORTED_BY_CALLBACK != result) {
  598|       |    /* avoid this if we already aborted by callback to avoid this calling
  599|       |       another callback */
  600|  2.30k|    CURLcode rc = Curl_pgrsDone(data);
  601|  2.30k|    if(!result && rc)
  602|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  603|  2.30k|  }
  604|       |
  605|  2.30k|  process_pending_handles(data->multi); /* connection / multiplex */
  606|       |
  607|  2.30k|  CONNCACHE_LOCK(data);
  608|  2.30k|  Curl_detach_connnection(data);
  609|  2.30k|  if(CONN_INUSE(conn)) {
  610|       |    /* Stop if still used. */
  611|      0|    CONNCACHE_UNLOCK(data);
  612|      0|    DEBUGF(infof(data, "Connection still in use %zu, "
  613|      0|                 "no more multi_done now!",
  614|      0|                 conn->easyq.size));
  615|      0|    return CURLE_OK;
  616|      0|  }
  617|       |
  618|  2.30k|  data->state.done = TRUE; /* called just now! */
  619|       |
  620|  2.30k|  if(conn->dns_entry) {
  621|  2.30k|    Curl_resolv_unlock(data, conn->dns_entry); /* done with this */
  622|  2.30k|    conn->dns_entry = NULL;
  623|  2.30k|  }
  624|  2.30k|  Curl_hostcache_prune(data);
  625|  2.30k|  Curl_safefree(data->state.ulbuf);
  626|       |
  627|       |  /* if the transfer was completed in a paused state there can be buffered
  628|       |     data left to free */
  629|  2.30k|  for(i = 0; i < data->state.tempcount; i++) {
  630|      0|    Curl_dyn_free(&data->state.tempwrite[i].b);
  631|      0|  }
  632|  2.30k|  data->state.tempcount = 0;
  633|       |
  634|       |  /* if data->set.reuse_forbid is TRUE, it means the libcurl client has
  635|       |     forced us to close this connection. This is ignored for requests taking
  636|       |     place in a NTLM/NEGOTIATE authentication handshake
  637|       |
  638|       |     if conn->bits.close is TRUE, it means that the connection should be
  639|       |     closed in spite of all our efforts to be nice, due to protocol
  640|       |     restrictions in our or the server's end
  641|       |
  642|       |     if premature is TRUE, it means this connection was said to be DONE before
  643|       |     the entire request operation is complete and thus we can't know in what
  644|       |     state it is for re-using, so we're forced to close it. In a perfect world
  645|       |     we can add code that keep track of if we really must close it here or not,
  646|       |     but currently we have no such detail knowledge.
  647|       |  */
  648|       |
  649|  2.30k|  if((data->set.reuse_forbid
  650|  2.30k|#if defined(USE_NTLM)
  651|  2.30k|      && !(conn->http_ntlm_state == NTLMSTATE_TYPE2 ||
  652|      0|           conn->proxy_ntlm_state == NTLMSTATE_TYPE2)
  653|  2.30k|#endif
  654|       |#if defined(USE_SPNEGO)
  655|       |      && !(conn->http_negotiate_state == GSS_AUTHRECV ||
  656|       |           conn->proxy_negotiate_state == GSS_AUTHRECV)
  657|       |#endif
  658|  2.30k|     ) || conn->bits.close
  659|  2.30k|       || (premature && !(conn->handler->flags & PROTOPT_STREAM))) {
  660|  1.32k|    CURLcode res2;
  661|  1.32k|    connclose(conn, "disconnecting");
  662|  1.32k|    Curl_conncache_remove_conn(data, conn, FALSE);
  663|  1.32k|    CONNCACHE_UNLOCK(data);
  664|  1.32k|    res2 = Curl_disconnect(data, conn, premature);
  665|       |
  666|       |    /* If we had an error already, make sure we return that one. But
  667|       |       if we got a new error, return that. */
  668|  1.32k|    if(!result && res2)
  669|      0|      result = res2;
  670|  1.32k|  }
  671|    983|  else {
  672|    983|    char buffer[256];
  673|    983|    const char *host =
  674|    983|#ifndef CURL_DISABLE_PROXY
  675|    983|      conn->bits.socksproxy ?
  676|      0|      conn->socks_proxy.host.dispname :
  677|    983|      conn->bits.httpproxy ? conn->http_proxy.host.dispname :
  678|    983|#endif
  679|    983|      conn->bits.conn_to_host ? conn->conn_to_host.dispname :
  680|    983|      conn->host.dispname;
  681|       |    /* create string before returning the connection */
  682|    983|    msnprintf(buffer, sizeof(buffer),
  683|    983|              "Connection #%ld to host %s left intact",
  684|    983|              conn->connection_id, host);
  685|       |    /* the connection is no longer in use by this transfer */
  686|    983|    CONNCACHE_UNLOCK(data);
  687|    983|    if(Curl_conncache_return_conn(data, conn)) {
  688|       |      /* remember the most recently used connection */
  689|    983|      data->state.lastconnect_id = conn->connection_id;
  690|    983|      infof(data, "%s", buffer);
  691|    983|    }
  692|      0|    else
  693|      0|      data->state.lastconnect_id = -1;
  694|    983|  }
  695|       |
  696|  2.30k|  Curl_safefree(data->state.buffer);
  697|  2.30k|  Curl_free_request_state(data);
  698|  2.30k|  return result;
  699|  2.30k|}
multi.c:close_connect_only:
  703|    850|{
  704|    850|  (void)param;
  705|    850|  if(data->state.lastconnect_id != conn->connection_id)
  706|      5|    return 0;
  707|       |
  708|    845|  if(!conn->bits.connect_only)
  709|    845|    return 1;
  710|       |
  711|      0|  connclose(conn, "Removing connect-only easy handle");
  712|       |
  713|      0|  return 1;
  714|    845|}
multi.c:multi_getsock:
  984|  3.26k|{
  985|  3.26k|  struct connectdata *conn = data->conn;
  986|       |  /* The no connection case can happen when this is called from
  987|       |     curl_multi_remove_handle() => singlesocket() => multi_getsock().
  988|       |  */
  989|  3.26k|  if(!conn)
  990|  2.25k|    return 0;
  991|       |
  992|  1.01k|  switch(data->mstate) {
  993|      0|  default:
  994|      0|    return 0;
  995|       |
  996|      0|  case MSTATE_RESOLVING:
  997|      0|    return Curl_resolv_getsock(data, socks);
  998|       |
  999|      0|  case MSTATE_PROTOCONNECTING:
 1000|      0|  case MSTATE_PROTOCONNECT:
 1001|      0|    return protocol_getsock(data, conn, socks);
 1002|       |
 1003|      0|  case MSTATE_DO:
 1004|      0|  case MSTATE_DOING:
 1005|      0|    return doing_getsock(data, conn, socks);
 1006|       |
 1007|      0|  case MSTATE_TUNNELING:
 1008|      0|    return waitproxyconnect_getsock(conn, socks);
 1009|       |
 1010|      0|  case MSTATE_CONNECTING:
 1011|      0|    return waitconnect_getsock(conn, socks);
 1012|       |
 1013|      0|  case MSTATE_DOING_MORE:
 1014|      0|    return domore_getsock(data, conn, socks);
 1015|       |
 1016|      0|  case MSTATE_DID: /* since is set after DO is completed, we switch to
 1017|       |                        waiting for the same as the PERFORMING state */
 1018|  1.01k|  case MSTATE_PERFORMING:
 1019|  1.01k|    return Curl_single_getsock(data, conn, socks);
 1020|  1.01k|  }
 1021|       |
 1022|  1.01k|}
multi.c:multi_runsingle:
 1729|  3.24k|{
 1730|  3.24k|  struct Curl_message *msg = NULL;
 1731|  3.24k|  bool connected;
 1732|  3.24k|  bool async;
 1733|  3.24k|  bool protocol_connected = FALSE;
 1734|  3.24k|  bool dophase_done = FALSE;
 1735|  3.24k|  bool done = FALSE;
 1736|  3.24k|  CURLMcode rc;
 1737|  3.24k|  CURLcode result = CURLE_OK;
 1738|  3.24k|  timediff_t recv_timeout_ms;
 1739|  3.24k|  timediff_t send_timeout_ms;
 1740|  3.24k|  int control;
 1741|       |
 1742|  3.24k|  if(!GOOD_EASY_HANDLE(data))
 1743|      0|    return CURLM_BAD_EASY_HANDLE;
 1744|       |
 1745|  18.5k|  do {
 1746|       |    /* A "stream" here is a logical stream if the protocol can handle that
 1747|       |       (HTTP/2), or the full connection for older protocols */
 1748|  18.5k|    bool stream_error = FALSE;
 1749|  18.5k|    rc = CURLM_OK;
 1750|       |
 1751|  18.5k|    if(multi_ischanged(multi, TRUE)) {
 1752|    795|      DEBUGF(infof(data, "multi changed, check CONNECT_PEND queue!"));
 1753|    795|      process_pending_handles(multi); /* multiplexed */
 1754|    795|    }
 1755|       |
 1756|  18.5k|    if(data->mstate > MSTATE_CONNECT &&
 1757|  18.5k|       data->mstate < MSTATE_COMPLETED) {
 1758|       |      /* Make sure we set the connection's current owner */
 1759|  13.8k|      DEBUGASSERT(data->conn);
 1760|  13.8k|      if(!data->conn)
 1761|      0|        return CURLM_INTERNAL_ERROR;
 1762|  13.8k|    }
 1763|       |
 1764|  18.5k|    if(data->conn &&
 1765|  18.5k|       (data->mstate >= MSTATE_CONNECT) &&
 1766|  18.5k|       (data->mstate < MSTATE_COMPLETED)) {
 1767|       |      /* Check for overall operation timeout here but defer handling the
 1768|       |       * connection timeout to later, to allow for a connection to be set up
 1769|       |       * in the window since we last checked timeout. This prevents us
 1770|       |       * tearing down a completed connection in the case where we were slow
 1771|       |       * to check the timeout (e.g. process descheduled during this loop).
 1772|       |       * We set connect_timeout=FALSE to do this. */
 1773|       |
 1774|       |      /* we need to wait for the connect state as only then is the start time
 1775|       |         stored, but we must not check already completed handles */
 1776|  13.8k|      if(multi_handle_timeout(data, nowp, &stream_error, &result, FALSE)) {
 1777|       |        /* Skip the statemachine and go directly to error handling section. */
 1778|      0|        goto statemachine_end;
 1779|      0|      }
 1780|  13.8k|    }
 1781|       |
 1782|  18.5k|    switch(data->mstate) {
 1783|  2.25k|    case MSTATE_INIT:
 1784|       |      /* init this transfer. */
 1785|  2.25k|      result = Curl_pretransfer(data);
 1786|       |
 1787|  2.25k|      if(!result) {
 1788|       |        /* after init, go CONNECT */
 1789|  2.18k|        multistate(data, MSTATE_CONNECT);
 1790|  2.18k|        *nowp = Curl_pgrsTime(data, TIMER_STARTOP);
 1791|  2.18k|        rc = CURLM_CALL_MULTI_PERFORM;
 1792|  2.18k|      }
 1793|  2.25k|      break;
 1794|       |
 1795|      0|    case MSTATE_PENDING:
 1796|       |      /* We will stay here until there is a connection available. Then
 1797|       |         we try again in the MSTATE_CONNECT state. */
 1798|      0|      break;
 1799|       |
 1800|  2.44k|    case MSTATE_CONNECT:
 1801|       |      /* Connect. We want to get a connection identifier filled in. */
 1802|       |      /* init this transfer. */
 1803|  2.44k|      result = Curl_preconnect(data);
 1804|  2.44k|      if(result)
 1805|      0|        break;
 1806|       |
 1807|  2.44k|      *nowp = Curl_pgrsTime(data, TIMER_STARTSINGLE);
 1808|  2.44k|      if(data->set.timeout)
 1809|  2.44k|        Curl_expire(data, data->set.timeout, EXPIRE_TIMEOUT);
 1810|       |
 1811|  2.44k|      if(data->set.connecttimeout)
 1812|      0|        Curl_expire(data, data->set.connecttimeout, EXPIRE_CONNECTTIMEOUT);
 1813|       |
 1814|  2.44k|      result = Curl_connect(data, &async, &protocol_connected);
 1815|  2.44k|      if(CURLE_NO_CONNECTION_AVAILABLE == result) {
 1816|       |        /* There was no connection available. We will go to the pending
 1817|       |           state and wait for an available connection. */
 1818|      0|        multistate(data, MSTATE_PENDING);
 1819|       |
 1820|       |        /* add this handle to the list of connect-pending handles */
 1821|      0|        Curl_llist_insert_next(&multi->pending, multi->pending.tail, data,
 1822|      0|                               &data->connect_queue);
 1823|      0|        result = CURLE_OK;
 1824|      0|        break;
 1825|      0|      }
 1826|  2.44k|      else if(data->state.previouslypending) {
 1827|       |        /* this transfer comes from the pending queue so try move another */
 1828|      0|        infof(data, "Transfer was pending, now try another");
 1829|      0|        process_pending_handles(data->multi);
 1830|      0|      }
 1831|       |
 1832|  2.44k|      if(!result) {
 1833|  2.30k|        if(async)
 1834|       |          /* We're now waiting for an asynchronous name lookup */
 1835|      0|          multistate(data, MSTATE_RESOLVING);
 1836|  2.30k|        else {
 1837|       |          /* after the connect has been sent off, go WAITCONNECT unless the
 1838|       |             protocol connect is already done and we can go directly to
 1839|       |             WAITDO or DO! */
 1840|  2.30k|          rc = CURLM_CALL_MULTI_PERFORM;
 1841|       |
 1842|  2.30k|          if(protocol_connected)
 1843|      0|            multistate(data, MSTATE_DO);
 1844|  2.30k|          else {
 1845|  2.30k|#ifndef CURL_DISABLE_HTTP
 1846|  2.30k|            if(Curl_connect_ongoing(data->conn))
 1847|      0|              multistate(data, MSTATE_TUNNELING);
 1848|  2.30k|            else
 1849|  2.30k|#endif
 1850|  2.30k|              multistate(data, MSTATE_CONNECTING);
 1851|  2.30k|          }
 1852|  2.30k|        }
 1853|  2.30k|      }
 1854|  2.44k|      break;
 1855|       |
 1856|      0|    case MSTATE_RESOLVING:
 1857|       |      /* awaiting an asynch name resolve to complete */
 1858|      0|    {
 1859|      0|      struct Curl_dns_entry *dns = NULL;
 1860|      0|      struct connectdata *conn = data->conn;
 1861|      0|      const char *hostname;
 1862|       |
 1863|      0|      DEBUGASSERT(conn);
 1864|      0|#ifndef CURL_DISABLE_PROXY
 1865|      0|      if(conn->bits.httpproxy)
 1866|      0|        hostname = conn->http_proxy.host.name;
 1867|      0|      else
 1868|      0|#endif
 1869|      0|        if(conn->bits.conn_to_host)
 1870|      0|        hostname = conn->conn_to_host.name;
 1871|      0|      else
 1872|      0|        hostname = conn->host.name;
 1873|       |
 1874|       |      /* check if we have the name resolved by now */
 1875|      0|      dns = Curl_fetch_addr(data, hostname, (int)conn->port);
 1876|       |
 1877|      0|      if(dns) {
 1878|      0|#ifdef CURLRES_ASYNCH
 1879|      0|        data->state.async.dns = dns;
 1880|      0|        data->state.async.done = TRUE;
 1881|      0|#endif
 1882|      0|        result = CURLE_OK;
 1883|      0|        infof(data, "Hostname '%s' was found in DNS cache", hostname);
 1884|      0|      }
 1885|       |
 1886|      0|      if(!dns)
 1887|      0|        result = Curl_resolv_check(data, &dns);
 1888|       |
 1889|       |      /* Update sockets here, because the socket(s) may have been
 1890|       |         closed and the application thus needs to be told, even if it
 1891|       |         is likely that the same socket(s) will again be used further
 1892|       |         down.  If the name has not yet been resolved, it is likely
 1893|       |         that new sockets have been opened in an attempt to contact
 1894|       |         another resolver. */
 1895|      0|      singlesocket(multi, data);
 1896|       |
 1897|      0|      if(dns) {
 1898|       |        /* Perform the next step in the connection phase, and then move on
 1899|       |           to the WAITCONNECT state */
 1900|      0|        result = Curl_once_resolved(data, &protocol_connected);
 1901|       |
 1902|      0|        if(result)
 1903|       |          /* if Curl_once_resolved() returns failure, the connection struct
 1904|       |             is already freed and gone */
 1905|      0|          data->conn = NULL; /* no more connection */
 1906|      0|        else {
 1907|       |          /* call again please so that we get the next socket setup */
 1908|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 1909|      0|          if(protocol_connected)
 1910|      0|            multistate(data, MSTATE_DO);
 1911|      0|          else {
 1912|      0|#ifndef CURL_DISABLE_HTTP
 1913|      0|            if(Curl_connect_ongoing(data->conn))
 1914|      0|              multistate(data, MSTATE_TUNNELING);
 1915|      0|            else
 1916|      0|#endif
 1917|      0|              multistate(data, MSTATE_CONNECTING);
 1918|      0|          }
 1919|      0|        }
 1920|      0|      }
 1921|       |
 1922|      0|      if(result) {
 1923|       |        /* failure detected */
 1924|      0|        stream_error = TRUE;
 1925|      0|        break;
 1926|      0|      }
 1927|      0|    }
 1928|      0|    break;
 1929|       |
 1930|      0|#ifndef CURL_DISABLE_HTTP
 1931|      0|    case MSTATE_TUNNELING:
 1932|       |      /* this is HTTP-specific, but sending CONNECT to a proxy is HTTP... */
 1933|      0|      DEBUGASSERT(data->conn);
 1934|      0|      result = Curl_http_connect(data, &protocol_connected);
 1935|      0|#ifndef CURL_DISABLE_PROXY
 1936|      0|      if(data->conn->bits.proxy_connect_closed) {
 1937|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 1938|       |        /* connect back to proxy again */
 1939|      0|        result = CURLE_OK;
 1940|      0|        multi_done(data, CURLE_OK, FALSE);
 1941|      0|        multistate(data, MSTATE_CONNECT);
 1942|      0|      }
 1943|      0|      else
 1944|      0|#endif
 1945|      0|        if(!result) {
 1946|      0|          if(
 1947|      0|#ifndef CURL_DISABLE_PROXY
 1948|      0|            (data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||
 1949|      0|             data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&
 1950|      0|#endif
 1951|      0|            Curl_connect_complete(data->conn)) {
 1952|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 1953|       |            /* initiate protocol connect phase */
 1954|      0|            multistate(data, MSTATE_PROTOCONNECT);
 1955|      0|          }
 1956|      0|        }
 1957|      0|      else
 1958|      0|        stream_error = TRUE;
 1959|      0|      break;
 1960|      0|#endif
 1961|       |
 1962|  2.30k|    case MSTATE_CONNECTING:
 1963|       |      /* awaiting a completion of an asynch TCP connect */
 1964|  2.30k|      DEBUGASSERT(data->conn);
 1965|  2.30k|      result = Curl_is_connected(data, data->conn, FIRSTSOCKET, &connected);
 1966|  2.30k|      if(connected && !result) {
 1967|  2.30k|#ifndef CURL_DISABLE_HTTP
 1968|  2.30k|        if(
 1969|  2.30k|#ifndef CURL_DISABLE_PROXY
 1970|  2.30k|          (data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&
 1971|  2.30k|           !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||
 1972|  2.30k|#endif
 1973|  2.30k|          Curl_connect_ongoing(data->conn)) {
 1974|      0|          multistate(data, MSTATE_TUNNELING);
 1975|      0|          break;
 1976|      0|        }
 1977|  2.30k|#endif
 1978|  2.30k|        rc = CURLM_CALL_MULTI_PERFORM;
 1979|  2.30k|#ifndef CURL_DISABLE_PROXY
 1980|  2.30k|        multistate(data,
 1981|  2.30k|                   data->conn->bits.tunnel_proxy?
 1982|  2.30k|                   MSTATE_TUNNELING : MSTATE_PROTOCONNECT);
 1983|       |#else
 1984|       |        multistate(data, MSTATE_PROTOCONNECT);
 1985|       |#endif
 1986|  2.30k|      }
 1987|      0|      else if(result) {
 1988|       |        /* failure detected */
 1989|      0|        Curl_posttransfer(data);
 1990|      0|        multi_done(data, result, TRUE);
 1991|      0|        stream_error = TRUE;
 1992|      0|        break;
 1993|      0|      }
 1994|  2.30k|      break;
 1995|       |
 1996|  2.30k|    case MSTATE_PROTOCONNECT:
 1997|  2.30k|      result = protocol_connect(data, &protocol_connected);
 1998|  2.30k|      if(!result && !protocol_connected)
 1999|       |        /* switch to waiting state */
 2000|      0|        multistate(data, MSTATE_PROTOCONNECTING);
 2001|  2.30k|      else if(!result) {
 2002|       |        /* protocol connect has completed, go WAITDO or DO */
 2003|  2.30k|        multistate(data, MSTATE_DO);
 2004|  2.30k|        rc = CURLM_CALL_MULTI_PERFORM;
 2005|  2.30k|      }
 2006|      0|      else {
 2007|       |        /* failure detected */
 2008|      0|        Curl_posttransfer(data);
 2009|      0|        multi_done(data, result, TRUE);
 2010|      0|        stream_error = TRUE;
 2011|      0|      }
 2012|  2.30k|      break;
 2013|       |
 2014|      0|    case MSTATE_PROTOCONNECTING:
 2015|       |      /* protocol-specific connect phase */
 2016|      0|      result = protocol_connecting(data, &protocol_connected);
 2017|      0|      if(!result && protocol_connected) {
 2018|       |        /* after the connect has completed, go WAITDO or DO */
 2019|      0|        multistate(data, MSTATE_DO);
 2020|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2021|      0|      }
 2022|      0|      else if(result) {
 2023|       |        /* failure detected */
 2024|      0|        Curl_posttransfer(data);
 2025|      0|        multi_done(data, result, TRUE);
 2026|      0|        stream_error = TRUE;
 2027|      0|      }
 2028|      0|      break;
 2029|       |
 2030|  2.30k|    case MSTATE_DO:
 2031|  2.30k|      if(data->set.fprereq) {
 2032|      0|        int prereq_rc;
 2033|       |
 2034|       |        /* call the prerequest callback function */
 2035|      0|        Curl_set_in_callback(data, true);
 2036|      0|        prereq_rc = data->set.fprereq(data->set.prereq_userp,
 2037|      0|                                      data->info.conn_primary_ip,
 2038|      0|                                      data->info.conn_local_ip,
 2039|      0|                                      data->info.conn_primary_port,
 2040|      0|                                      data->info.conn_local_port);
 2041|      0|        Curl_set_in_callback(data, false);
 2042|      0|        if(prereq_rc != CURL_PREREQFUNC_OK) {
 2043|      0|          failf(data, "operation aborted by pre-request callback");
 2044|       |          /* failure in pre-request callback - don't do any other processing */
 2045|      0|          result = CURLE_ABORTED_BY_CALLBACK;
 2046|      0|          Curl_posttransfer(data);
 2047|      0|          multi_done(data, result, FALSE);
 2048|      0|          stream_error = TRUE;
 2049|      0|          break;
 2050|      0|        }
 2051|      0|      }
 2052|       |
 2053|  2.30k|      if(data->set.connect_only) {
 2054|       |        /* keep connection open for application to use the socket */
 2055|      0|        connkeep(data->conn, "CONNECT_ONLY");
 2056|      0|        multistate(data, MSTATE_DONE);
 2057|      0|        result = CURLE_OK;
 2058|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2059|      0|      }
 2060|  2.30k|      else {
 2061|       |        /* Perform the protocol's DO action */
 2062|  2.30k|        result = multi_do(data, &dophase_done);
 2063|       |
 2064|       |        /* When multi_do() returns failure, data->conn might be NULL! */
 2065|       |
 2066|  2.30k|        if(!result) {
 2067|  2.26k|          if(!dophase_done) {
 2068|      0|#ifndef CURL_DISABLE_FTP
 2069|       |            /* some steps needed for wildcard matching */
 2070|      0|            if(data->state.wildcardmatch) {
 2071|      0|              struct WildcardData *wc = &data->wildcard;
 2072|      0|              if(wc->state == CURLWC_DONE || wc->state == CURLWC_SKIP) {
 2073|       |                /* skip some states if it is important */
 2074|      0|                multi_done(data, CURLE_OK, FALSE);
 2075|       |
 2076|       |                /* if there's no connection left, skip the DONE state */
 2077|      0|                multistate(data, data->conn ?
 2078|      0|                           MSTATE_DONE : MSTATE_COMPLETED);
 2079|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2080|      0|                break;
 2081|      0|              }
 2082|      0|            }
 2083|      0|#endif
 2084|       |            /* DO was not completed in one function call, we must continue
 2085|       |               DOING... */
 2086|      0|            multistate(data, MSTATE_DOING);
 2087|      0|            rc = CURLM_OK;
 2088|      0|          }
 2089|       |
 2090|       |          /* after DO, go DO_DONE... or DO_MORE */
 2091|  2.26k|          else if(data->conn->bits.do_more) {
 2092|       |            /* we're supposed to do more, but we need to sit down, relax
 2093|       |               and wait a little while first */
 2094|      0|            multistate(data, MSTATE_DOING_MORE);
 2095|      0|            rc = CURLM_OK;
 2096|      0|          }
 2097|  2.26k|          else {
 2098|       |            /* we're done with the DO, now DID */
 2099|  2.26k|            multistate(data, MSTATE_DID);
 2100|  2.26k|            rc = CURLM_CALL_MULTI_PERFORM;
 2101|  2.26k|          }
 2102|  2.26k|        }
 2103|     41|        else if((CURLE_SEND_ERROR == result) &&
 2104|     41|                data->conn->bits.reuse) {
 2105|       |          /*
 2106|       |           * In this situation, a connection that we were trying to use
 2107|       |           * may have unexpectedly died.  If possible, send the connection
 2108|       |           * back to the CONNECT phase so we can try again.
 2109|       |           */
 2110|      0|          char *newurl = NULL;
 2111|      0|          followtype follow = FOLLOW_NONE;
 2112|      0|          CURLcode drc;
 2113|       |
 2114|      0|          drc = Curl_retry_request(data, &newurl);
 2115|      0|          if(drc) {
 2116|       |            /* a failure here pretty much implies an out of memory */
 2117|      0|            result = drc;
 2118|      0|            stream_error = TRUE;
 2119|      0|          }
 2120|       |
 2121|      0|          Curl_posttransfer(data);
 2122|      0|          drc = multi_done(data, result, FALSE);
 2123|       |
 2124|       |          /* When set to retry the connection, we must to go back to
 2125|       |           * the CONNECT state */
 2126|      0|          if(newurl) {
 2127|      0|            if(!drc || (drc == CURLE_SEND_ERROR)) {
 2128|      0|              follow = FOLLOW_RETRY;
 2129|      0|              drc = Curl_follow(data, newurl, follow);
 2130|      0|              if(!drc) {
 2131|      0|                multistate(data, MSTATE_CONNECT);
 2132|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2133|      0|                result = CURLE_OK;
 2134|      0|              }
 2135|      0|              else {
 2136|       |                /* Follow failed */
 2137|      0|                result = drc;
 2138|      0|              }
 2139|      0|            }
 2140|      0|            else {
 2141|       |              /* done didn't return OK or SEND_ERROR */
 2142|      0|              result = drc;
 2143|      0|            }
 2144|      0|          }
 2145|      0|          else {
 2146|       |            /* Have error handler disconnect conn if we can't retry */
 2147|      0|            stream_error = TRUE;
 2148|      0|          }
 2149|      0|          free(newurl);
 2150|      0|        }
 2151|     41|        else {
 2152|       |          /* failure detected */
 2153|     41|          Curl_posttransfer(data);
 2154|     41|          if(data->conn)
 2155|     41|            multi_done(data, result, FALSE);
 2156|     41|          stream_error = TRUE;
 2157|     41|        }
 2158|  2.30k|      }
 2159|  2.30k|      break;
 2160|       |
 2161|  2.30k|    case MSTATE_DOING:
 2162|       |      /* we continue DOING until the DO phase is complete */
 2163|      0|      DEBUGASSERT(data->conn);
 2164|      0|      result = protocol_doing(data, &dophase_done);
 2165|      0|      if(!result) {
 2166|      0|        if(dophase_done) {
 2167|       |          /* after DO, go DO_DONE or DO_MORE */
 2168|      0|          multistate(data, data->conn->bits.do_more?
 2169|      0|                     MSTATE_DOING_MORE : MSTATE_DID);
 2170|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 2171|      0|        } /* dophase_done */
 2172|      0|      }
 2173|      0|      else {
 2174|       |        /* failure detected */
 2175|      0|        Curl_posttransfer(data);
 2176|      0|        multi_done(data, result, FALSE);
 2177|      0|        stream_error = TRUE;
 2178|      0|      }
 2179|      0|      break;
 2180|       |
 2181|      0|    case MSTATE_DOING_MORE:
 2182|       |      /*
 2183|       |       * When we are connected, DOING MORE and then go DID
 2184|       |       */
 2185|      0|      DEBUGASSERT(data->conn);
 2186|      0|      result = multi_do_more(data, &control);
 2187|       |
 2188|      0|      if(!result) {
 2189|      0|        if(control) {
 2190|       |          /* if positive, advance to DO_DONE
 2191|       |             if negative, go back to DOING */
 2192|      0|          multistate(data, control == 1?
 2193|      0|                     MSTATE_DID : MSTATE_DOING);
 2194|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 2195|      0|        }
 2196|      0|        else
 2197|       |          /* stay in DO_MORE */
 2198|      0|          rc = CURLM_OK;
 2199|      0|      }
 2200|      0|      else {
 2201|       |        /* failure detected */
 2202|      0|        Curl_posttransfer(data);
 2203|      0|        multi_done(data, result, FALSE);
 2204|      0|        stream_error = TRUE;
 2205|      0|      }
 2206|      0|      break;
 2207|       |
 2208|  2.26k|    case MSTATE_DID:
 2209|  2.26k|      DEBUGASSERT(data->conn);
 2210|  2.26k|      if(data->conn->bits.multiplex)
 2211|       |        /* Check if we can move pending requests to send pipe */
 2212|    678|        process_pending_handles(multi); /*  multiplexed */
 2213|       |
 2214|       |      /* Only perform the transfer if there's a good socket to work with.
 2215|       |         Having both BAD is a signal to skip immediately to DONE */
 2216|  2.26k|      if((data->conn->sockfd != CURL_SOCKET_BAD) ||
 2217|  2.26k|         (data->conn->writesockfd != CURL_SOCKET_BAD))
 2218|  2.26k|        multistate(data, MSTATE_PERFORMING);
 2219|      0|      else {
 2220|      0|#ifndef CURL_DISABLE_FTP
 2221|      0|        if(data->state.wildcardmatch &&
 2222|      0|           ((data->conn->handler->flags & PROTOPT_WILDCARD) == 0)) {
 2223|      0|          data->wildcard.state = CURLWC_DONE;
 2224|      0|        }
 2225|      0|#endif
 2226|      0|        multistate(data, MSTATE_DONE);
 2227|      0|      }
 2228|  2.26k|      rc = CURLM_CALL_MULTI_PERFORM;
 2229|  2.26k|      break;
 2230|       |
 2231|      0|    case MSTATE_RATELIMITING: /* limit-rate exceeded in either direction */
 2232|      0|      DEBUGASSERT(data->conn);
 2233|       |      /* if both rates are within spec, resume transfer */
 2234|      0|      if(Curl_pgrsUpdate(data))
 2235|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2236|      0|      else
 2237|      0|        result = Curl_speedcheck(data, *nowp);
 2238|       |
 2239|      0|      if(result) {
 2240|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2241|      0|           result != CURLE_HTTP2_STREAM)
 2242|      0|          streamclose(data->conn, "Transfer returned error");
 2243|       |
 2244|      0|        Curl_posttransfer(data);
 2245|      0|        multi_done(data, result, TRUE);
 2246|      0|      }
 2247|      0|      else {
 2248|      0|        send_timeout_ms = 0;
 2249|      0|        if(data->set.max_send_speed)
 2250|      0|          send_timeout_ms =
 2251|      0|            Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2252|      0|                                   data->progress.ul_limit_size,
 2253|      0|                                   data->set.max_send_speed,
 2254|      0|                                   data->progress.ul_limit_start,
 2255|      0|                                   *nowp);
 2256|       |
 2257|      0|        recv_timeout_ms = 0;
 2258|      0|        if(data->set.max_recv_speed)
 2259|      0|          recv_timeout_ms =
 2260|      0|            Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2261|      0|                                   data->progress.dl_limit_size,
 2262|      0|                                   data->set.max_recv_speed,
 2263|      0|                                   data->progress.dl_limit_start,
 2264|      0|                                   *nowp);
 2265|       |
 2266|      0|        if(!send_timeout_ms && !recv_timeout_ms) {
 2267|      0|          multistate(data, MSTATE_PERFORMING);
 2268|      0|          Curl_ratelimit(data, *nowp);
 2269|      0|        }
 2270|      0|        else if(send_timeout_ms >= recv_timeout_ms)
 2271|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2272|      0|        else
 2273|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2274|      0|      }
 2275|      0|      break;
 2276|       |
 2277|  3.29k|    case MSTATE_PERFORMING:
 2278|  3.29k|    {
 2279|  3.29k|      char *newurl = NULL;
 2280|  3.29k|      bool retry = FALSE;
 2281|  3.29k|      bool comeback = FALSE;
 2282|  3.29k|      DEBUGASSERT(data->state.buffer);
 2283|       |      /* check if over send speed */
 2284|  3.29k|      send_timeout_ms = 0;
 2285|  3.29k|      if(data->set.max_send_speed)
 2286|      0|        send_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2287|      0|                                                 data->progress.ul_limit_size,
 2288|      0|                                                 data->set.max_send_speed,
 2289|      0|                                                 data->progress.ul_limit_start,
 2290|      0|                                                 *nowp);
 2291|       |
 2292|       |      /* check if over recv speed */
 2293|  3.29k|      recv_timeout_ms = 0;
 2294|  3.29k|      if(data->set.max_recv_speed)
 2295|      0|        recv_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2296|      0|                                                 data->progress.dl_limit_size,
 2297|      0|                                                 data->set.max_recv_speed,
 2298|      0|                                                 data->progress.dl_limit_start,
 2299|      0|                                                 *nowp);
 2300|       |
 2301|  3.29k|      if(send_timeout_ms || recv_timeout_ms) {
 2302|      0|        Curl_ratelimit(data, *nowp);
 2303|      0|        multistate(data, MSTATE_RATELIMITING);
 2304|      0|        if(send_timeout_ms >= recv_timeout_ms)
 2305|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2306|      0|        else
 2307|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2308|      0|        break;
 2309|      0|      }
 2310|       |
 2311|       |      /* read/write data if it is ready to do so */
 2312|  3.29k|      result = Curl_readwrite(data->conn, data, &done, &comeback);
 2313|       |
 2314|  3.29k|      if(done || (result == CURLE_RECV_ERROR)) {
 2315|       |        /* If CURLE_RECV_ERROR happens early enough, we assume it was a race
 2316|       |         * condition and the server closed the re-used connection exactly when
 2317|       |         * we wanted to use it, so figure out if that is indeed the case.
 2318|       |         */
 2319|  1.57k|        CURLcode ret = Curl_retry_request(data, &newurl);
 2320|  1.57k|        if(!ret)
 2321|  1.57k|          retry = (newurl)?TRUE:FALSE;
 2322|      0|        else if(!result)
 2323|      0|          result = ret;
 2324|       |
 2325|  1.57k|        if(retry) {
 2326|       |          /* if we are to retry, set the result to OK and consider the
 2327|       |             request as done */
 2328|      0|          result = CURLE_OK;
 2329|      0|          done = TRUE;
 2330|      0|        }
 2331|  1.57k|      }
 2332|  1.72k|      else if((CURLE_HTTP2_STREAM == result) &&
 2333|  1.72k|              Curl_h2_http_1_1_error(data)) {
 2334|      0|        CURLcode ret = Curl_retry_request(data, &newurl);
 2335|       |
 2336|      0|        if(!ret) {
 2337|      0|          infof(data, "Downgrades to HTTP/1.1!");
 2338|      0|          streamclose(data->conn, "Disconnect HTTP/2 for HTTP/1");
 2339|      0|          data->state.httpwant = CURL_HTTP_VERSION_1_1;
 2340|       |          /* clear the error message bit too as we ignore the one we got */
 2341|      0|          data->state.errorbuf = FALSE;
 2342|      0|          if(!newurl)
 2343|       |            /* typically for HTTP_1_1_REQUIRED error on first flight */
 2344|      0|            newurl = strdup(data->state.url);
 2345|       |          /* if we are to retry, set the result to OK and consider the request
 2346|       |             as done */
 2347|      0|          retry = TRUE;
 2348|      0|          result = CURLE_OK;
 2349|      0|          done = TRUE;
 2350|      0|        }
 2351|      0|        else
 2352|      0|          result = ret;
 2353|      0|      }
 2354|       |
 2355|  3.29k|      if(result) {
 2356|       |        /*
 2357|       |         * The transfer phase returned error, we mark the connection to get
 2358|       |         * closed to prevent being re-used. This is because we can't possibly
 2359|       |         * know if the connection is in a good shape or not now.  Unless it is
 2360|       |         * a protocol which uses two "channels" like FTP, as then the error
 2361|       |         * happened in the data connection.
 2362|       |         */
 2363|       |
 2364|    673|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2365|    673|           result != CURLE_HTTP2_STREAM)
 2366|    256|          streamclose(data->conn, "Transfer returned error");
 2367|       |
 2368|    673|        Curl_posttransfer(data);
 2369|    673|        multi_done(data, result, TRUE);
 2370|    673|      }
 2371|  2.62k|      else if(done) {
 2372|       |
 2373|       |        /* call this even if the readwrite function returned error */
 2374|  1.57k|        Curl_posttransfer(data);
 2375|       |
 2376|       |        /* When we follow redirects or is set to retry the connection, we must
 2377|       |           to go back to the CONNECT state */
 2378|  1.57k|        if(data->req.newurl || retry) {
 2379|    269|          followtype follow = FOLLOW_NONE;
 2380|    269|          if(!retry) {
 2381|       |            /* if the URL is a follow-location and not just a retried request
 2382|       |               then figure out the URL here */
 2383|    269|            free(newurl);
 2384|    269|            newurl = data->req.newurl;
 2385|    269|            data->req.newurl = NULL;
 2386|    269|            follow = FOLLOW_REDIR;
 2387|    269|          }
 2388|      0|          else
 2389|      0|            follow = FOLLOW_RETRY;
 2390|    269|          (void)multi_done(data, CURLE_OK, FALSE);
 2391|       |          /* multi_done() might return CURLE_GOT_NOTHING */
 2392|    269|          result = Curl_follow(data, newurl, follow);
 2393|    269|          if(!result) {
 2394|    261|            multistate(data, MSTATE_CONNECT);
 2395|    261|            rc = CURLM_CALL_MULTI_PERFORM;
 2396|    261|          }
 2397|    269|          free(newurl);
 2398|    269|        }
 2399|  1.30k|        else {
 2400|       |          /* after the transfer is done, go DONE */
 2401|       |
 2402|       |          /* but first check to see if we got a location info even though we're
 2403|       |             not following redirects */
 2404|  1.30k|          if(data->req.location) {
 2405|    112|            free(newurl);
 2406|    112|            newurl = data->req.location;
 2407|    112|            data->req.location = NULL;
 2408|    112|            result = Curl_follow(data, newurl, FOLLOW_FAKE);
 2409|    112|            free(newurl);
 2410|    112|            if(result) {
 2411|      0|              stream_error = TRUE;
 2412|      0|              result = multi_done(data, result, TRUE);
 2413|      0|            }
 2414|    112|          }
 2415|       |
 2416|  1.30k|          if(!result) {
 2417|  1.30k|            multistate(data, MSTATE_DONE);
 2418|  1.30k|            rc = CURLM_CALL_MULTI_PERFORM;
 2419|  1.30k|          }
 2420|  1.30k|        }
 2421|  1.57k|      }
 2422|  1.04k|      else if(comeback) {
 2423|       |        /* This avoids CURLM_CALL_MULTI_PERFORM so that a very fast transfer
 2424|       |           won't get stuck on this transfer at the expense of other concurrent
 2425|       |           transfers */
 2426|      8|        Curl_expire(data, 0, EXPIRE_RUN_NOW);
 2427|      8|        rc = CURLM_OK;
 2428|      8|      }
 2429|  3.29k|      break;
 2430|  3.29k|    }
 2431|       |
 2432|  1.30k|    case MSTATE_DONE:
 2433|       |      /* this state is highly transient, so run another loop after this */
 2434|  1.30k|      rc = CURLM_CALL_MULTI_PERFORM;
 2435|       |
 2436|  1.30k|      if(data->conn) {
 2437|  1.30k|        CURLcode res;
 2438|       |
 2439|  1.30k|        if(data->conn->bits.multiplex)
 2440|       |          /* Check if we can move pending requests to connection */
 2441|    229|          process_pending_handles(multi); /* multiplexing */
 2442|       |
 2443|       |        /* post-transfer command */
 2444|  1.30k|        res = multi_done(data, result, FALSE);
 2445|       |
 2446|       |        /* allow a previously set error code take precedence */
 2447|  1.30k|        if(!result)
 2448|  1.30k|          result = res;
 2449|  1.30k|      }
 2450|       |
 2451|  1.30k|#ifndef CURL_DISABLE_FTP
 2452|  1.30k|      if(data->state.wildcardmatch) {
 2453|      0|        if(data->wildcard.state != CURLWC_DONE) {
 2454|       |          /* if a wildcard is set and we are not ending -> lets start again
 2455|       |             with MSTATE_INIT */
 2456|      0|          multistate(data, MSTATE_INIT);
 2457|      0|          break;
 2458|      0|        }
 2459|      0|      }
 2460|  1.30k|#endif
 2461|       |      /* after we have DONE what we're supposed to do, go COMPLETED, and
 2462|       |         it doesn't matter what the multi_done() returned! */
 2463|  1.30k|      multistate(data, MSTATE_COMPLETED);
 2464|  1.30k|      break;
 2465|       |
 2466|      0|    case MSTATE_COMPLETED:
 2467|      0|      break;
 2468|       |
 2469|     42|    case MSTATE_MSGSENT:
 2470|     42|      data->result = result;
 2471|     42|      return CURLM_OK; /* do nothing */
 2472|       |
 2473|      0|    default:
 2474|      0|      return CURLM_INTERNAL_ERROR;
 2475|  18.5k|    }
 2476|       |
 2477|  18.5k|    if(data->conn &&
 2478|  18.5k|       data->mstate >= MSTATE_CONNECT &&
 2479|  18.5k|       data->mstate < MSTATE_DO &&
 2480|  18.5k|       rc != CURLM_CALL_MULTI_PERFORM &&
 2481|  18.5k|       !multi_ischanged(multi, false)) {
 2482|       |      /* We now handle stream timeouts if and only if this will be the last
 2483|       |       * loop iteration. We only check this on the last iteration to ensure
 2484|       |       * that if we know we have additional work to do immediately
 2485|       |       * (i.e. CURLM_CALL_MULTI_PERFORM == TRUE) then we should do that before
 2486|       |       * declaring the connection timed out as we may almost have a completed
 2487|       |       * connection. */
 2488|      0|      multi_handle_timeout(data, nowp, &stream_error, &result, TRUE);
 2489|      0|    }
 2490|       |
 2491|  18.5k|    statemachine_end:
 2492|       |
 2493|  18.5k|    if(data->mstate < MSTATE_COMPLETED) {
 2494|  17.1k|      if(result) {
 2495|       |        /*
 2496|       |         * If an error was returned, and we aren't in completed state now,
 2497|       |         * then we go to completed and consider this transfer aborted.
 2498|       |         */
 2499|       |
 2500|       |        /* NOTE: no attempt to disconnect connections must be made
 2501|       |           in the case blocks above - cleanup happens only here */
 2502|       |
 2503|       |        /* Check if we can move pending requests to send pipe */
 2504|    929|        process_pending_handles(multi); /* connection */
 2505|       |
 2506|    929|        if(data->conn) {
 2507|      0|          if(stream_error) {
 2508|       |            /* Don't attempt to send data over a connection that timed out */
 2509|      0|            bool dead_connection = result == CURLE_OPERATION_TIMEDOUT;
 2510|      0|            struct connectdata *conn = data->conn;
 2511|       |
 2512|       |            /* This is where we make sure that the conn pointer is reset.
 2513|       |               We don't have to do this in every case block above where a
 2514|       |               failure is detected */
 2515|      0|            Curl_detach_connnection(data);
 2516|       |
 2517|       |            /* remove connection from cache */
 2518|      0|            Curl_conncache_remove_conn(data, conn, TRUE);
 2519|       |
 2520|       |            /* disconnect properly */
 2521|      0|            Curl_disconnect(data, conn, dead_connection);
 2522|      0|          }
 2523|      0|        }
 2524|    929|        else if(data->mstate == MSTATE_CONNECT) {
 2525|       |          /* Curl_connect() failed */
 2526|    137|          (void)Curl_posttransfer(data);
 2527|    137|        }
 2528|       |
 2529|    929|        multistate(data, MSTATE_COMPLETED);
 2530|    929|        rc = CURLM_CALL_MULTI_PERFORM;
 2531|    929|      }
 2532|       |      /* if there's still a connection to use, call the progress function */
 2533|  16.2k|      else if(data->conn && Curl_pgrsUpdate(data)) {
 2534|       |        /* aborted due to progress callback return code must close the
 2535|       |           connection */
 2536|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2537|      0|        streamclose(data->conn, "Aborted by callback");
 2538|       |
 2539|       |        /* if not yet in DONE state, go there, otherwise COMPLETED */
 2540|      0|        multistate(data, (data->mstate < MSTATE_DONE)?
 2541|      0|                   MSTATE_DONE: MSTATE_COMPLETED);
 2542|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2543|      0|      }
 2544|  17.1k|    }
 2545|       |
 2546|  18.5k|    if(MSTATE_COMPLETED == data->mstate) {
 2547|  2.23k|      if(data->set.fmultidone) {
 2548|       |        /* signal via callback instead */
 2549|      0|        data->set.fmultidone(data, result);
 2550|      0|      }
 2551|  2.23k|      else {
 2552|       |        /* now fill in the Curl_message with this info */
 2553|  2.23k|        msg = &data->msg;
 2554|       |
 2555|  2.23k|        msg->extmsg.msg = CURLMSG_DONE;
 2556|  2.23k|        msg->extmsg.easy_handle = data;
 2557|  2.23k|        msg->extmsg.data.result = result;
 2558|       |
 2559|  2.23k|        rc = multi_addmsg(multi, msg);
 2560|  2.23k|        DEBUGASSERT(!data->conn);
 2561|  2.23k|      }
 2562|  2.23k|      multistate(data, MSTATE_MSGSENT);
 2563|  2.23k|    }
 2564|  18.5k|  } while((rc == CURLM_CALL_MULTI_PERFORM) || multi_ischanged(multi, FALSE));
 2565|       |
 2566|  3.20k|  data->result = result;
 2567|  3.20k|  return rc;
 2568|  3.24k|}
multi.c:multi_ischanged:
 1486|  21.8k|{
 1487|  21.8k|  bool retval = multi->recheckstate;
 1488|  21.8k|  if(clear)
 1489|  18.5k|    multi->recheckstate = FALSE;
 1490|  21.8k|  return retval;
 1491|  21.8k|}
multi.c:multi_handle_timeout:
 1563|  13.8k|{
 1564|  13.8k|  timediff_t timeout_ms;
 1565|  13.8k|  timeout_ms = Curl_timeleft(data, now, connect_timeout);
 1566|       |
 1567|  13.8k|  if(timeout_ms < 0) {
 1568|       |    /* Handle timed out */
 1569|      0|    if(data->mstate == MSTATE_RESOLVING)
 1570|      0|      failf(data, "Resolving timed out after %" CURL_FORMAT_TIMEDIFF_T
 1571|      0|            " milliseconds",
 1572|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1573|      0|    else if(data->mstate == MSTATE_CONNECTING)
 1574|      0|      failf(data, "Connection timed out after %" CURL_FORMAT_TIMEDIFF_T
 1575|      0|            " milliseconds",
 1576|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1577|      0|    else {
 1578|      0|      struct SingleRequest *k = &data->req;
 1579|      0|      if(k->size != -1) {
 1580|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1581|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1582|      0|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1583|      0|              Curl_timediff(*now, data->progress.t_startsingle),
 1584|      0|              k->bytecount, k->size);
 1585|      0|      }
 1586|      0|      else {
 1587|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1588|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T
 1589|      0|              " bytes received",
 1590|      0|              Curl_timediff(*now, data->progress.t_startsingle),
 1591|      0|              k->bytecount);
 1592|      0|      }
 1593|      0|    }
 1594|       |
 1595|       |    /* Force connection closed if the connection has indeed been used */
 1596|      0|    if(data->mstate > MSTATE_DO) {
 1597|      0|      streamclose(data->conn, "Disconnected with pending data");
 1598|      0|      *stream_error = TRUE;
 1599|      0|    }
 1600|      0|    *result = CURLE_OPERATION_TIMEDOUT;
 1601|      0|    (void)multi_done(data, *result, TRUE);
 1602|      0|  }
 1603|       |
 1604|  13.8k|  return (timeout_ms < 0);
 1605|  13.8k|}
multi.c:protocol_connect:
 1655|  2.30k|{
 1656|  2.30k|  CURLcode result = CURLE_OK;
 1657|  2.30k|  struct connectdata *conn = data->conn;
 1658|  2.30k|  DEBUGASSERT(conn);
 1659|  2.30k|  DEBUGASSERT(protocol_done);
 1660|       |
 1661|  2.30k|  *protocol_done = FALSE;
 1662|       |
 1663|  2.30k|  if(conn->bits.tcpconnect[FIRSTSOCKET] && conn->bits.protoconnstart) {
 1664|       |    /* We already are connected, get back. This may happen when the connect
 1665|       |       worked fine in the first call, like when we connect to a local server
 1666|       |       or proxy. Note that we don't know if the protocol is actually done.
 1667|       |
 1668|       |       Unless this protocol doesn't have any protocol-connect callback, as
 1669|       |       then we know we're done. */
 1670|      0|    if(!conn->handler->connecting)
 1671|      0|      *protocol_done = TRUE;
 1672|       |
 1673|      0|    return CURLE_OK;
 1674|      0|  }
 1675|       |
 1676|  2.30k|  if(!conn->bits.protoconnstart) {
 1677|  2.30k|#ifndef CURL_DISABLE_PROXY
 1678|  2.30k|    result = Curl_proxy_connect(data, FIRSTSOCKET);
 1679|  2.30k|    if(result)
 1680|      0|      return result;
 1681|       |
 1682|  2.30k|    if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1683|       |      /* wait for HTTPS proxy SSL initialization to complete */
 1684|      0|      return CURLE_OK;
 1685|       |
 1686|  2.30k|    if(conn->bits.tunnel_proxy && conn->bits.httpproxy &&
 1687|  2.30k|       Curl_connect_ongoing(conn))
 1688|       |      /* when using an HTTP tunnel proxy, await complete tunnel establishment
 1689|       |         before proceeding further. Return CURLE_OK so we'll be called again */
 1690|      0|      return CURLE_OK;
 1691|  2.30k|#endif
 1692|  2.30k|    if(conn->handler->connect_it) {
 1693|       |      /* is there a protocol-specific connect() procedure? */
 1694|       |
 1695|       |      /* Call the protocol-specific connect function */
 1696|  2.30k|      result = conn->handler->connect_it(data, protocol_done);
 1697|  2.30k|    }
 1698|      0|    else
 1699|      0|      *protocol_done = TRUE;
 1700|       |
 1701|       |    /* it has started, possibly even completed but that knowledge isn't stored
 1702|       |       in this bit! */
 1703|  2.30k|    if(!result)
 1704|  2.30k|      conn->bits.protoconnstart = TRUE;
 1705|  2.30k|  }
 1706|       |
 1707|  2.30k|  return result; /* pass back status */
 1708|  2.30k|}
multi.c:multi_do:
 1519|  2.30k|{
 1520|  2.30k|  CURLcode result = CURLE_OK;
 1521|  2.30k|  struct connectdata *conn = data->conn;
 1522|       |
 1523|  2.30k|  DEBUGASSERT(conn);
 1524|  2.30k|  DEBUGASSERT(conn->handler);
 1525|       |
 1526|  2.30k|  if(conn->handler->do_it)
 1527|       |    /* generic protocol-specific function pointer set in curl_connect() */
 1528|  2.30k|    result = conn->handler->do_it(data, done);
 1529|       |
 1530|  2.30k|  return result;
 1531|  2.30k|}
multi.c:multi_addmsg:
  349|  2.23k|{
  350|  2.23k|  Curl_llist_insert_next(&multi->msglist, multi->msglist.tail, msg,
  351|  2.23k|                         &msg->list);
  352|  2.23k|  return CURLM_OK;
  353|  2.23k|}
multi.c:singlesocket:
 2732|  2.25k|{
 2733|  2.25k|  curl_socket_t socks[MAX_SOCKSPEREASYHANDLE];
 2734|  2.25k|  int i;
 2735|  2.25k|  struct Curl_sh_entry *entry;
 2736|  2.25k|  curl_socket_t s;
 2737|  2.25k|  int num;
 2738|  2.25k|  unsigned int curraction;
 2739|  2.25k|  unsigned char actions[MAX_SOCKSPEREASYHANDLE];
 2740|       |
 2741|  13.5k|  for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++)
 2742|  11.2k|    socks[i] = CURL_SOCKET_BAD;
 2743|       |
 2744|       |  /* Fill in the 'current' struct with the state as it is now: what sockets to
 2745|       |     supervise and for what actions */
 2746|  2.25k|  curraction = multi_getsock(data, socks);
 2747|       |
 2748|       |  /* We have 0 .. N sockets already and we get to know about the 0 .. M
 2749|       |     sockets we should have from now on. Detect the differences, remove no
 2750|       |     longer supervised ones and add new ones */
 2751|       |
 2752|       |  /* walk over the sockets we got right now */
 2753|  2.25k|  for(i = 0; (i< MAX_SOCKSPEREASYHANDLE) &&
 2754|  2.25k|        (curraction & (GETSOCK_READSOCK(i) | GETSOCK_WRITESOCK(i)));
 2755|  2.25k|      i++) {
 2756|      0|    unsigned char action = CURL_POLL_NONE;
 2757|      0|    unsigned char prevaction = 0;
 2758|      0|    int comboaction;
 2759|      0|    bool sincebefore = FALSE;
 2760|       |
 2761|      0|    s = socks[i];
 2762|       |
 2763|       |    /* get it from the hash */
 2764|      0|    entry = sh_getentry(&multi->sockhash, s);
 2765|       |
 2766|      0|    if(curraction & GETSOCK_READSOCK(i))
 2767|      0|      action |= CURL_POLL_IN;
 2768|      0|    if(curraction & GETSOCK_WRITESOCK(i))
 2769|      0|      action |= CURL_POLL_OUT;
 2770|       |
 2771|      0|    actions[i] = action;
 2772|      0|    if(entry) {
 2773|       |      /* check if new for this transfer */
 2774|      0|      int j;
 2775|      0|      for(j = 0; j< data->numsocks; j++) {
 2776|      0|        if(s == data->sockets[j]) {
 2777|      0|          prevaction = data->actions[j];
 2778|      0|          sincebefore = TRUE;
 2779|      0|          break;
 2780|      0|        }
 2781|      0|      }
 2782|      0|    }
 2783|      0|    else {
 2784|       |      /* this is a socket we didn't have before, add it to the hash! */
 2785|      0|      entry = sh_addentry(&multi->sockhash, s);
 2786|      0|      if(!entry)
 2787|       |        /* fatal */
 2788|      0|        return CURLM_OUT_OF_MEMORY;
 2789|      0|    }
 2790|      0|    if(sincebefore && (prevaction != action)) {
 2791|       |      /* Socket was used already, but different action now */
 2792|      0|      if(prevaction & CURL_POLL_IN)
 2793|      0|        entry->readers--;
 2794|      0|      if(prevaction & CURL_POLL_OUT)
 2795|      0|        entry->writers--;
 2796|      0|      if(action & CURL_POLL_IN)
 2797|      0|        entry->readers++;
 2798|      0|      if(action & CURL_POLL_OUT)
 2799|      0|        entry->writers++;
 2800|      0|    }
 2801|      0|    else if(!sincebefore) {
 2802|       |      /* a new user */
 2803|      0|      entry->users++;
 2804|      0|      if(action & CURL_POLL_IN)
 2805|      0|        entry->readers++;
 2806|      0|      if(action & CURL_POLL_OUT)
 2807|      0|        entry->writers++;
 2808|       |
 2809|       |      /* add 'data' to the transfer hash on this socket! */
 2810|      0|      if(!Curl_hash_add(&entry->transfers, (char *)&data, /* hash key */
 2811|      0|                        sizeof(struct Curl_easy *), data))
 2812|      0|        return CURLM_OUT_OF_MEMORY;
 2813|      0|    }
 2814|       |
 2815|      0|    comboaction = (entry->writers? CURL_POLL_OUT : 0) |
 2816|      0|                   (entry->readers ? CURL_POLL_IN : 0);
 2817|       |
 2818|       |    /* socket existed before and has the same action set as before */
 2819|      0|    if(sincebefore && ((int)entry->action == comboaction))
 2820|       |      /* same, continue */
 2821|      0|      continue;
 2822|       |
 2823|      0|    if(multi->socket_cb)
 2824|      0|      multi->socket_cb(data, s, comboaction, multi->socket_userp,
 2825|      0|                       entry->socketp);
 2826|       |
 2827|      0|    entry->action = comboaction; /* store the current action state */
 2828|      0|  }
 2829|       |
 2830|  2.25k|  num = i; /* number of sockets */
 2831|       |
 2832|       |  /* when we've walked over all the sockets we should have right now, we must
 2833|       |     make sure to detect sockets that are removed */
 2834|  2.25k|  for(i = 0; i< data->numsocks; i++) {
 2835|      0|    int j;
 2836|      0|    bool stillused = FALSE;
 2837|      0|    s = data->sockets[i];
 2838|      0|    for(j = 0; j < num; j++) {
 2839|      0|      if(s == socks[j]) {
 2840|       |        /* this is still supervised */
 2841|      0|        stillused = TRUE;
 2842|      0|        break;
 2843|      0|      }
 2844|      0|    }
 2845|      0|    if(stillused)
 2846|      0|      continue;
 2847|       |
 2848|      0|    entry = sh_getentry(&multi->sockhash, s);
 2849|       |    /* if this is NULL here, the socket has been closed and notified so
 2850|       |       already by Curl_multi_closed() */
 2851|      0|    if(entry) {
 2852|      0|      unsigned char oldactions = data->actions[i];
 2853|       |      /* this socket has been removed. Decrease user count */
 2854|      0|      entry->users--;
 2855|      0|      if(oldactions & CURL_POLL_OUT)
 2856|      0|        entry->writers--;
 2857|      0|      if(oldactions & CURL_POLL_IN)
 2858|      0|        entry->readers--;
 2859|      0|      if(!entry->users) {
 2860|      0|        if(multi->socket_cb)
 2861|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2862|      0|                           multi->socket_userp,
 2863|      0|                           entry->socketp);
 2864|      0|        sh_delentry(entry, &multi->sockhash, s);
 2865|      0|      }
 2866|      0|      else {
 2867|       |        /* still users, but remove this handle as a user of this socket */
 2868|      0|        if(Curl_hash_delete(&entry->transfers, (char *)&data,
 2869|      0|                            sizeof(struct Curl_easy *))) {
 2870|      0|          DEBUGASSERT(NULL);
 2871|      0|        }
 2872|      0|      }
 2873|      0|    }
 2874|      0|  } /* for loop over numsocks */
 2875|       |
 2876|  2.25k|  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
 2877|  2.25k|  memcpy(data->actions, actions, num*sizeof(char));
 2878|  2.25k|  data->numsocks = num;
 2879|  2.25k|  return CURLM_OK;
 2880|  2.25k|}
multi.c:sh_getentry:
  216|  1.45k|{
  217|  1.45k|  if(s != CURL_SOCKET_BAD) {
  218|       |    /* only look for proper sockets */
  219|  1.45k|    return Curl_hash_pick(sh, (char *)&s, sizeof(curl_socket_t));
  220|  1.45k|  }
  221|      0|  return NULL;
  222|  1.45k|}
multi.c:add_next_timeout:
 2936|    791|{
 2937|    791|  struct curltime *tv = &d->state.expiretime;
 2938|    791|  struct Curl_llist *list = &d->state.timeoutlist;
 2939|    791|  struct Curl_llist_element *e;
 2940|    791|  struct time_node *node = NULL;
 2941|       |
 2942|       |  /* move over the timeout list for this specific handle and remove all
 2943|       |     timeouts that are now passed tense and store the next pending
 2944|       |     timeout in *tv */
 2945|  1.58k|  for(e = list->head; e;) {
 2946|  1.58k|    struct Curl_llist_element *n = e->next;
 2947|  1.58k|    timediff_t diff;
 2948|  1.58k|    node = (struct time_node *)e->ptr;
 2949|  1.58k|    diff = Curl_timediff(node->time, now);
 2950|  1.58k|    if(diff <= 0)
 2951|       |      /* remove outdated entry */
 2952|    791|      Curl_llist_remove(list, e, NULL);
 2953|    791|    else
 2954|       |      /* the list is sorted so get out on the first mismatch */
 2955|    791|      break;
 2956|    791|    e = n;
 2957|    791|  }
 2958|    791|  e = list->head;
 2959|    791|  if(!e) {
 2960|       |    /* clear the expire times within the handles that we remove from the
 2961|       |       splay tree */
 2962|      0|    tv->tv_sec = 0;
 2963|      0|    tv->tv_usec = 0;
 2964|      0|  }
 2965|    791|  else {
 2966|       |    /* copy the first entry to 'tv' */
 2967|    791|    memcpy(tv, &node->time, sizeof(*tv));
 2968|       |
 2969|       |    /* Insert this node again into the splay.  Keep the timer in the list in
 2970|       |       case we need to recompute future timers. */
 2971|    791|    multi->timetree = Curl_splayinsert(*tv, multi->timetree,
 2972|    791|                                       &d->state.timenode);
 2973|    791|  }
 2974|    791|  return CURLM_OK;
 2975|    791|}
multi.c:multi_deltimeout:
 3298|  7.51k|{
 3299|  7.51k|  struct Curl_llist_element *e;
 3300|  7.51k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3301|       |  /* find and remove the specific node from the list */
 3302|  14.3k|  for(e = timeoutlist->head; e; e = e->next) {
 3303|  7.72k|    struct time_node *n = (struct time_node *)e->ptr;
 3304|  7.72k|    if(n->eid == eid) {
 3305|    892|      Curl_llist_remove(timeoutlist, e, NULL);
 3306|    892|      return;
 3307|    892|    }
 3308|  7.72k|  }
 3309|  7.51k|}
multi.c:multi_addtimeout:
 3322|  7.50k|{
 3323|  7.50k|  struct Curl_llist_element *e;
 3324|  7.50k|  struct time_node *node;
 3325|  7.50k|  struct Curl_llist_element *prev = NULL;
 3326|  7.50k|  size_t n;
 3327|  7.50k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3328|       |
 3329|  7.50k|  node = &data->state.expires[eid];
 3330|       |
 3331|       |  /* copy the timestamp and id */
 3332|  7.50k|  memcpy(&node->time, stamp, sizeof(*stamp));
 3333|  7.50k|  node->eid = eid; /* also marks it as in use */
 3334|       |
 3335|  7.50k|  n = Curl_llist_count(timeoutlist);
 3336|  7.50k|  if(n) {
 3337|       |    /* find the correct spot in the list */
 3338|  12.3k|    for(e = timeoutlist->head; e; e = e->next) {
 3339|  7.62k|      struct time_node *check = (struct time_node *)e->ptr;
 3340|  7.62k|      timediff_t diff = Curl_timediff(check->time, node->time);
 3341|  7.62k|      if(diff > 0)
 3342|    477|        break;
 3343|  7.14k|      prev = e;
 3344|  7.14k|    }
 3345|       |
 3346|  5.24k|  }
 3347|       |  /* else
 3348|       |     this is the first timeout on the list */
 3349|       |
 3350|  7.50k|  Curl_llist_insert_next(timeoutlist, prev, node, &node->list);
 3351|  7.50k|  return CURLM_OK;
 3352|  7.50k|}
multi.c:process_pending_handles:
 3524|  7.19k|{
 3525|  7.19k|  struct Curl_llist_element *e = multi->pending.head;
 3526|  7.19k|  if(e) {
 3527|      0|    struct Curl_easy *data = e->ptr;
 3528|       |
 3529|      0|    DEBUGASSERT(data->mstate == MSTATE_PENDING);
 3530|       |
 3531|      0|    multistate(data, MSTATE_CONNECT);
 3532|       |
 3533|       |    /* Remove this node from the list */
 3534|      0|    Curl_llist_remove(&multi->pending, e, NULL);
 3535|       |
 3536|       |    /* Make sure that the handle will be processed soonish. */
 3537|      0|    Curl_expire(data, 0, EXPIRE_RUN_NOW);
 3538|       |
 3539|       |    /* mark this as having been in the pending queue */
 3540|      0|    data->state.previouslypending = TRUE;
 3541|      0|  }
 3542|  7.19k|}

curlx_nonblock:
   49|  6.81k|{
   50|  6.81k|#if defined(HAVE_FCNTL_O_NONBLOCK)
   51|       |  /* most recent unix versions */
   52|  6.81k|  int flags;
   53|  6.81k|  flags = sfcntl(sockfd, F_GETFL, 0);
   54|  6.81k|  if(nonblock)
   55|  6.81k|    return sfcntl(sockfd, F_SETFL, flags | O_NONBLOCK);
   56|      0|  return sfcntl(sockfd, F_SETFL, flags & (~O_NONBLOCK));
   57|       |
   58|       |#elif defined(HAVE_IOCTL_FIONBIO)
   59|       |
   60|       |  /* older unix versions */
   61|       |  int flags = nonblock ? 1 : 0;
   62|       |  return ioctl(sockfd, FIONBIO, &flags);
   63|       |
   64|       |#elif defined(HAVE_IOCTLSOCKET_FIONBIO)
   65|       |
   66|       |  /* Windows */
   67|       |  unsigned long flags = nonblock ? 1UL : 0UL;
   68|       |  return ioctlsocket(sockfd, FIONBIO, &flags);
   69|       |
   70|       |#elif defined(HAVE_IOCTLSOCKET_CAMEL_FIONBIO)
   71|       |
   72|       |  /* Amiga */
   73|       |  long flags = nonblock ? 1L : 0L;
   74|       |  return IoctlSocket(sockfd, FIONBIO, (char *)&flags);
   75|       |
   76|       |#elif defined(HAVE_SETSOCKOPT_SO_NONBLOCK)
   77|       |
   78|       |  /* BeOS */
   79|       |  long b = nonblock ? 1L : 0L;
   80|       |  return setsockopt(sockfd, SOL_SOCKET, SO_NONBLOCK, &b, sizeof(b));
   81|       |
   82|       |#else
   83|       |#  error "no non-blocking method was found/used/set"
   84|       |#endif
   85|  6.81k|}

Curl_getdate_capped:
  560|  1.34k|{
  561|  1.34k|  time_t parsed = -1;
  562|  1.34k|  int rc = parsedate(p, &parsed);
  563|       |
  564|  1.34k|  switch(rc) {
  565|    603|  case PARSEDATE_OK:
  566|    603|    if(parsed == -1)
  567|       |      /* avoid returning -1 for a working scenario */
  568|      0|      parsed++;
  569|    603|    return parsed;
  570|      0|  case PARSEDATE_LATER:
  571|       |    /* this returns the maximum time value */
  572|      0|    return parsed;
  573|    739|  default:
  574|    739|    return -1; /* everything else is fail */
  575|  1.34k|  }
  576|       |  /* UNREACHABLE */
  577|  1.34k|}
Curl_gmtime:
  586|     15|{
  587|     15|  const struct tm *tm;
  588|     15|#ifdef HAVE_GMTIME_R
  589|       |  /* thread-safe version */
  590|     15|  tm = (struct tm *)gmtime_r(&intime, store);
  591|       |#else
  592|       |  /* !checksrc! disable BANNEDFUNC 1 */
  593|       |  tm = gmtime(&intime);
  594|       |  if(tm)
  595|       |    *store = *tm; /* copy the pointed struct to the local copy */
  596|       |#endif
  597|       |
  598|     15|  if(!tm)
  599|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  600|     15|  return CURLE_OK;
  601|     15|}
parsedate.c:parsedate:
  307|  1.34k|{
  308|  1.34k|  time_t t = 0;
  309|  1.34k|  int wdaynum = -1;  /* day of the week number, 0-6 (mon-sun) */
  310|  1.34k|  int monnum = -1;   /* month of the year number, 0-11 */
  311|  1.34k|  int mdaynum = -1; /* day of month, 1 - 31 */
  312|  1.34k|  int hournum = -1;
  313|  1.34k|  int minnum = -1;
  314|  1.34k|  int secnum = -1;
  315|  1.34k|  int yearnum = -1;
  316|  1.34k|  int tzoff = -1;
  317|  1.34k|  enum assume dignext = DATE_MDAY;
  318|  1.34k|  const char *indate = date; /* save the original pointer */
  319|  1.34k|  int part = 0; /* max 6 parts */
  320|       |
  321|  7.23k|  while(*date && (part < 6)) {
  322|  6.39k|    bool found = FALSE;
  323|       |
  324|  6.39k|    skip(&date);
  325|       |
  326|  6.39k|    if(ISALPHA(*date)) {
  327|       |      /* a name coming up */
  328|  3.15k|      char buf[32]="";
  329|  3.15k|      size_t len;
  330|  3.15k|      if(sscanf(date, "%31[ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  331|  3.15k|                          "abcdefghijklmnopqrstuvwxyz]", buf))
  332|  3.15k|        len = strlen(buf);
  333|      0|      else
  334|      0|        len = 0;
  335|       |
  336|  3.15k|      if(wdaynum == -1) {
  337|  1.35k|        wdaynum = checkday(buf, len);
  338|  1.35k|        if(wdaynum != -1)
  339|  1.18k|          found = TRUE;
  340|  1.35k|      }
  341|  3.15k|      if(!found && (monnum == -1)) {
  342|  1.34k|        monnum = checkmonth(buf);
  343|  1.34k|        if(monnum != -1)
  344|  1.10k|          found = TRUE;
  345|  1.34k|      }
  346|       |
  347|  3.15k|      if(!found && (tzoff == -1)) {
  348|       |        /* this just must be a time zone string */
  349|    768|        tzoff = checktz(buf);
  350|    768|        if(tzoff != -1)
  351|    677|          found = TRUE;
  352|    768|      }
  353|       |
  354|  3.15k|      if(!found)
  355|    189|        return PARSEDATE_FAIL; /* bad string */
  356|       |
  357|  2.96k|      date += len;
  358|  2.96k|    }
  359|  3.24k|    else if(ISDIGIT(*date)) {
  360|       |      /* a digit */
  361|  3.12k|      int val;
  362|  3.12k|      char *end;
  363|  3.12k|      int len = 0;
  364|  3.12k|      if((secnum == -1) &&
  365|  3.12k|         (3 == sscanf(date, "%02d:%02d:%02d%n",
  366|  3.10k|                      &hournum, &minnum, &secnum, &len))) {
  367|       |        /* time stamp! */
  368|    508|        date += len;
  369|    508|      }
  370|  2.61k|      else if((secnum == -1) &&
  371|  2.61k|              (2 == sscanf(date, "%02d:%02d%n", &hournum, &minnum, &len))) {
  372|       |        /* time stamp without seconds */
  373|     24|        date += len;
  374|     24|        secnum = 0;
  375|     24|      }
  376|  2.59k|      else {
  377|  2.59k|        long lval;
  378|  2.59k|        int error;
  379|  2.59k|        int old_errno;
  380|       |
  381|  2.59k|        old_errno = errno;
  382|  2.59k|        errno = 0;
  383|  2.59k|        lval = strtol(date, &end, 10);
  384|  2.59k|        error = errno;
  385|  2.59k|        if(errno != old_errno)
  386|  1.88k|          errno = old_errno;
  387|       |
  388|  2.59k|        if(error)
  389|     28|          return PARSEDATE_FAIL;
  390|       |
  391|  2.56k|#if LONG_MAX != INT_MAX
  392|  2.56k|        if((lval > (long)INT_MAX) || (lval < (long)INT_MIN))
  393|     33|          return PARSEDATE_FAIL;
  394|  2.53k|#endif
  395|       |
  396|  2.53k|        val = curlx_sltosi(lval);
  397|       |
  398|  2.53k|        if((tzoff == -1) &&
  399|  2.53k|           ((end - date) == 4) &&
  400|  2.53k|           (val <= 1400) &&
  401|  2.53k|           (indate< date) &&
  402|  2.53k|           ((date[-1] == '+' || date[-1] == '-'))) {
  403|       |          /* four digits and a value less than or equal to 1400 (to take into
  404|       |             account all sorts of funny time zone diffs) and it is preceded
  405|       |             with a plus or minus. This is a time zone indication.  1400 is
  406|       |             picked since +1300 is frequently used and +1400 is mentioned as
  407|       |             an edge number in the document "ISO C 200X Proposal: Timezone
  408|       |             Functions" at http://david.tribble.com/text/c0xtimezone.html If
  409|       |             anyone has a more authoritative source for the exact maximum time
  410|       |             zone offsets, please speak up! */
  411|     74|          found = TRUE;
  412|     74|          tzoff = (val/100 * 60 + val%100)*60;
  413|       |
  414|       |          /* the + and - prefix indicates the local time compared to GMT,
  415|       |             this we need their reversed math to get what we want */
  416|     74|          tzoff = date[-1]=='+'?-tzoff:tzoff;
  417|     74|        }
  418|       |
  419|  2.53k|        if(((end - date) == 8) &&
  420|  2.53k|           (yearnum == -1) &&
  421|  2.53k|           (monnum == -1) &&
  422|  2.53k|           (mdaynum == -1)) {
  423|       |          /* 8 digits, no year, month or day yet. This is YYYYMMDD */
  424|     55|          found = TRUE;
  425|     55|          yearnum = val/10000;
  426|     55|          monnum = (val%10000)/100-1; /* month is 0 - 11 */
  427|     55|          mdaynum = val%100;
  428|     55|        }
  429|       |
  430|  2.53k|        if(!found && (dignext == DATE_MDAY) && (mdaynum == -1)) {
  431|  1.25k|          if((val > 0) && (val<32)) {
  432|  1.10k|            mdaynum = val;
  433|  1.10k|            found = TRUE;
  434|  1.10k|          }
  435|  1.25k|          dignext = DATE_YEAR;
  436|  1.25k|        }
  437|       |
  438|  2.53k|        if(!found && (dignext == DATE_YEAR) && (yearnum == -1)) {
  439|  1.05k|          yearnum = val;
  440|  1.05k|          found = TRUE;
  441|  1.05k|          if(yearnum < 100) {
  442|    303|            if(yearnum > 70)
  443|     23|              yearnum += 1900;
  444|    280|            else
  445|    280|              yearnum += 2000;
  446|    303|          }
  447|  1.05k|          if(mdaynum == -1)
  448|     93|            dignext = DATE_MDAY;
  449|  1.05k|        }
  450|       |
  451|  2.53k|        if(!found)
  452|    247|          return PARSEDATE_FAIL;
  453|       |
  454|  2.28k|        date = end;
  455|  2.28k|      }
  456|  3.12k|    }
  457|       |
  458|  5.89k|    part++;
  459|  5.89k|  }
  460|       |
  461|    845|  if(-1 == secnum)
  462|    385|    secnum = minnum = hournum = 0; /* no time, make it zero */
  463|       |
  464|    845|  if((-1 == mdaynum) ||
  465|    845|     (-1 == monnum) ||
  466|    845|     (-1 == yearnum))
  467|       |    /* lacks vital info, fail */
  468|    111|    return PARSEDATE_FAIL;
  469|       |
  470|       |#ifdef HAVE_TIME_T_UNSIGNED
  471|       |  if(yearnum < 1970) {
  472|       |    /* only positive numbers cannot return earlier */
  473|       |    *output = TIME_T_MIN;
  474|       |    return PARSEDATE_SOONER;
  475|       |  }
  476|       |#endif
  477|       |
  478|       |#if (SIZEOF_TIME_T < 5)
  479|       |
  480|       |#ifdef HAVE_TIME_T_UNSIGNED
  481|       |  /* an unsigned 32 bit time_t can only hold dates to 2106 */
  482|       |  if(yearnum > 2105) {
  483|       |    *output = TIME_T_MAX;
  484|       |    return PARSEDATE_LATER;
  485|       |  }
  486|       |#else
  487|       |  /* a signed 32 bit time_t can only hold dates to the beginning of 2038 */
  488|       |  if(yearnum > 2037) {
  489|       |    *output = TIME_T_MAX;
  490|       |    return PARSEDATE_LATER;
  491|       |  }
  492|       |  if(yearnum < 1903) {
  493|       |    *output = TIME_T_MIN;
  494|       |    return PARSEDATE_SOONER;
  495|       |  }
  496|       |#endif
  497|       |
  498|       |#else
  499|       |  /* The Gregorian calendar was introduced 1582 */
  500|    734|  if(yearnum < 1583)
  501|     18|    return PARSEDATE_FAIL;
  502|    716|#endif
  503|       |
  504|    716|  if((mdaynum > 31) || (monnum > 11) ||
  505|    716|     (hournum > 23) || (minnum > 59) || (secnum > 60))
  506|    113|    return PARSEDATE_FAIL; /* clearly an illegal date */
  507|       |
  508|       |  /* time2epoch() returns a time_t. time_t is often 32 bits, sometimes even on
  509|       |     architectures that feature 64 bit 'long' but ultimately time_t is the
  510|       |     correct data type to use.
  511|       |  */
  512|    603|  t = time2epoch(secnum, minnum, hournum, mdaynum, monnum, yearnum);
  513|       |
  514|       |  /* Add the time zone diff between local time zone and GMT. */
  515|    603|  if(tzoff == -1)
  516|    226|    tzoff = 0;
  517|       |
  518|    603|  if((tzoff > 0) && (t > TIME_T_MAX - tzoff)) {
  519|      0|    *output = TIME_T_MAX;
  520|      0|    return PARSEDATE_LATER; /* time_t overflow */
  521|      0|  }
  522|       |
  523|    603|  t += tzoff;
  524|       |
  525|    603|  *output = t;
  526|       |
  527|    603|  return PARSEDATE_OK;
  528|    603|}
parsedate.c:skip:
  266|  6.39k|{
  267|       |  /* skip everything that aren't letters or digits */
  268|  13.0k|  while(**date && !ISALNUM(**date))
  269|  6.63k|    (*date)++;
  270|  6.39k|}
parsedate.c:checkday:
  210|  1.35k|{
  211|  1.35k|  int i;
  212|  1.35k|  const char * const *what;
  213|  1.35k|  bool found = FALSE;
  214|  1.35k|  if(len > 3)
  215|     48|    what = &weekday[0];
  216|  1.31k|  else
  217|  1.31k|    what = &Curl_wkday[0];
  218|  7.24k|  for(i = 0; i<7; i++) {
  219|  7.06k|    if(strcasecompare(check, what[0])) {
  220|  1.18k|      found = TRUE;
  221|  1.18k|      break;
  222|  1.18k|    }
  223|  5.88k|    what++;
  224|  5.88k|  }
  225|  1.35k|  return found?i:-1;
  226|  1.35k|}
parsedate.c:checkmonth:
  229|  1.34k|{
  230|  1.34k|  int i;
  231|  1.34k|  const char * const *what;
  232|  1.34k|  bool found = FALSE;
  233|       |
  234|  1.34k|  what = &Curl_month[0];
  235|  5.57k|  for(i = 0; i<12; i++) {
  236|  5.32k|    if(strcasecompare(check, what[0])) {
  237|  1.10k|      found = TRUE;
  238|  1.10k|      break;
  239|  1.10k|    }
  240|  4.22k|    what++;
  241|  4.22k|  }
  242|  1.34k|  return found?i:-1; /* return the offset or -1, no real offset is -1 */
  243|  1.34k|}
parsedate.c:checktz:
  249|    768|{
  250|    768|  unsigned int i;
  251|    768|  const struct tzinfo *what;
  252|    768|  bool found = FALSE;
  253|       |
  254|    768|  what = tz;
  255|  18.4k|  for(i = 0; i< sizeof(tz)/sizeof(tz[0]); i++) {
  256|  18.3k|    if(strcasecompare(check, what->name)) {
  257|    677|      found = TRUE;
  258|    677|      break;
  259|    677|    }
  260|  17.6k|    what++;
  261|  17.6k|  }
  262|    768|  return found?what->offset*60:-1;
  263|    768|}
parsedate.c:time2epoch:
  284|    603|{
  285|    603|  static const int month_days_cumulative [12] =
  286|    603|    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
  287|    603|  int leap_days = year - (mon <= 1);
  288|    603|  leap_days = ((leap_days / 4) - (leap_days / 100) + (leap_days / 400)
  289|    603|               - (1969 / 4) + (1969 / 100) - (1969 / 400));
  290|    603|  return ((((time_t) (year - 1970) * 365
  291|    603|            + leap_days + month_days_cumulative[mon] + mday - 1) * 24
  292|    603|           + hour) * 60 + min) * 60 + sec;
  293|    603|}

Curl_pgrsDone:
  141|  2.30k|{
  142|  2.30k|  int rc;
  143|  2.30k|  data->progress.lastshow = 0;
  144|  2.30k|  rc = Curl_pgrsUpdate(data); /* the final (forced) update */
  145|  2.30k|  if(rc)
  146|      0|    return rc;
  147|       |
  148|  2.30k|  if(!(data->progress.flags & PGRS_HIDE) &&
  149|  2.30k|     !data->progress.callback)
  150|       |    /* only output if we don't use a progress callback and we're not
  151|       |     * hidden */
  152|      0|    fprintf(data->set.err, "\n");
  153|       |
  154|  2.30k|  data->progress.speeder_c = 0; /* reset the progress meter display */
  155|  2.30k|  return 0;
  156|  2.30k|}
Curl_pgrsResetTransferSizes:
  160|  2.44k|{
  161|  2.44k|  Curl_pgrsSetDownloadSize(data, -1);
  162|  2.44k|  Curl_pgrsSetUploadSize(data, -1);
  163|  2.44k|}
Curl_pgrsTime:
  173|  36.6k|{
  174|  36.6k|  struct curltime now = Curl_now();
  175|  36.6k|  timediff_t *delta = NULL;
  176|       |
  177|  36.6k|  switch(timer) {
  178|      0|  default:
  179|      0|  case TIMER_NONE:
  180|       |    /* mistake filter */
  181|      0|    break;
  182|  2.18k|  case TIMER_STARTOP:
  183|       |    /* This is set at the start of a transfer */
  184|  2.18k|    data->progress.t_startop = now;
  185|  2.18k|    break;
  186|  2.44k|  case TIMER_STARTSINGLE:
  187|       |    /* This is set at the start of each single fetch */
  188|  2.44k|    data->progress.t_startsingle = now;
  189|  2.44k|    data->progress.is_t_startransfer_set = false;
  190|  2.44k|    break;
  191|      0|  case TIMER_STARTACCEPT:
  192|      0|    data->progress.t_acceptdata = now;
  193|      0|    break;
  194|  2.35k|  case TIMER_NAMELOOKUP:
  195|  2.35k|    delta = &data->progress.t_nslookup;
  196|  2.35k|    break;
  197|  2.30k|  case TIMER_CONNECT:
  198|  2.30k|    delta = &data->progress.t_connect;
  199|  2.30k|    break;
  200|      0|  case TIMER_APPCONNECT:
  201|      0|    delta = &data->progress.t_appconnect;
  202|      0|    break;
  203|  2.26k|  case TIMER_PRETRANSFER:
  204|  2.26k|    delta = &data->progress.t_pretransfer;
  205|  2.26k|    break;
  206|  24.8k|  case TIMER_STARTTRANSFER:
  207|  24.8k|    delta = &data->progress.t_starttransfer;
  208|       |    /* prevent updating t_starttransfer unless:
  209|       |     *   1) this is the first time we're setting t_starttransfer
  210|       |     *   2) a redirect has occurred since the last time t_starttransfer was set
  211|       |     * This prevents repeated invocations of the function from incorrectly
  212|       |     * changing the t_starttransfer time.
  213|       |     */
  214|  24.8k|    if(data->progress.is_t_startransfer_set) {
  215|  22.9k|      return now;
  216|  22.9k|    }
  217|  1.84k|    else {
  218|  1.84k|      data->progress.is_t_startransfer_set = true;
  219|  1.84k|      break;
  220|  1.84k|    }
  221|      0|  case TIMER_POSTRANSFER:
  222|       |    /* this is the normal end-of-transfer thing */
  223|      0|    break;
  224|    261|  case TIMER_REDIRECT:
  225|    261|    data->progress.t_redirect = Curl_timediff_us(now, data->progress.start);
  226|    261|    break;
  227|  36.6k|  }
  228|  13.6k|  if(delta) {
  229|  8.78k|    timediff_t us = Curl_timediff_us(now, data->progress.t_startsingle);
  230|  8.78k|    if(us < 1)
  231|      0|      us = 1; /* make sure at least one microsecond passed */
  232|  8.78k|    *delta += us;
  233|  8.78k|  }
  234|  13.6k|  return now;
  235|  36.6k|}
Curl_pgrsStartNow:
  238|  2.18k|{
  239|  2.18k|  data->progress.speeder_c = 0; /* reset the progress meter display */
  240|  2.18k|  data->progress.start = Curl_now();
  241|  2.18k|  data->progress.is_t_startransfer_set = false;
  242|  2.18k|  data->progress.ul_limit_start = data->progress.start;
  243|  2.18k|  data->progress.dl_limit_start = data->progress.start;
  244|  2.18k|  data->progress.ul_limit_size = 0;
  245|  2.18k|  data->progress.dl_limit_size = 0;
  246|  2.18k|  data->progress.downloaded = 0;
  247|  2.18k|  data->progress.uploaded = 0;
  248|       |  /* clear all bits except HIDE and HEADERS_OUT */
  249|  2.18k|  data->progress.flags &= PGRS_HIDE|PGRS_HEADERS_OUT;
  250|  2.18k|  Curl_ratelimit(data, data->progress.start);
  251|  2.18k|}
Curl_pgrsSetDownloadCounter:
  316|  2.88k|{
  317|  2.88k|  data->progress.downloaded = size;
  318|  2.88k|}
Curl_ratelimit:
  324|  2.18k|{
  325|       |  /* don't set a new stamp unless the time since last update is long enough */
  326|  2.18k|  if(data->set.max_recv_speed) {
  327|      0|    if(Curl_timediff(now, data->progress.dl_limit_start) >=
  328|      0|       MIN_RATE_LIMIT_PERIOD) {
  329|      0|      data->progress.dl_limit_start = now;
  330|      0|      data->progress.dl_limit_size = data->progress.downloaded;
  331|      0|    }
  332|      0|  }
  333|  2.18k|  if(data->set.max_send_speed) {
  334|      0|    if(Curl_timediff(now, data->progress.ul_limit_start) >=
  335|      0|       MIN_RATE_LIMIT_PERIOD) {
  336|      0|      data->progress.ul_limit_start = now;
  337|      0|      data->progress.ul_limit_size = data->progress.uploaded;
  338|      0|    }
  339|      0|  }
  340|  2.18k|}
Curl_pgrsSetUploadCounter:
  346|  4.75k|{
  347|  4.75k|  data->progress.uploaded = size;
  348|  4.75k|}
Curl_pgrsSetDownloadSize:
  351|  2.69k|{
  352|  2.69k|  if(size >= 0) {
  353|    251|    data->progress.size_dl = size;
  354|    251|    data->progress.flags |= PGRS_DL_SIZE_KNOWN;
  355|    251|  }
  356|  2.44k|  else {
  357|  2.44k|    data->progress.size_dl = 0;
  358|  2.44k|    data->progress.flags &= ~PGRS_DL_SIZE_KNOWN;
  359|  2.44k|  }
  360|  2.69k|}
Curl_pgrsSetUploadSize:
  363|  4.72k|{
  364|  4.72k|  if(size >= 0) {
  365|  2.26k|    data->progress.size_ul = size;
  366|  2.26k|    data->progress.flags |= PGRS_UL_SIZE_KNOWN;
  367|  2.26k|  }
  368|  2.46k|  else {
  369|  2.46k|    data->progress.size_ul = 0;
  370|  2.46k|    data->progress.flags &= ~PGRS_UL_SIZE_KNOWN;
  371|  2.46k|  }
  372|  4.72k|}
Curl_pgrsUpdate:
  577|  20.2k|{
  578|  20.2k|  struct curltime now = Curl_now(); /* what time is it */
  579|  20.2k|  bool showprogress = progress_calc(data, now);
  580|  20.2k|  if(!(data->progress.flags & PGRS_HIDE)) {
  581|      0|    if(data->set.fxferinfo) {
  582|      0|      int result;
  583|       |      /* There's a callback set, call that */
  584|      0|      Curl_set_in_callback(data, true);
  585|      0|      result = data->set.fxferinfo(data->set.progress_client,
  586|      0|                                   data->progress.size_dl,
  587|      0|                                   data->progress.downloaded,
  588|      0|                                   data->progress.size_ul,
  589|      0|                                   data->progress.uploaded);
  590|      0|      Curl_set_in_callback(data, false);
  591|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  592|      0|        if(result)
  593|      0|          failf(data, "Callback aborted");
  594|      0|        return result;
  595|      0|      }
  596|      0|    }
  597|      0|    else if(data->set.fprogress) {
  598|      0|      int result;
  599|       |      /* The older deprecated callback is set, call that */
  600|      0|      Curl_set_in_callback(data, true);
  601|      0|      result = data->set.fprogress(data->set.progress_client,
  602|      0|                                   (double)data->progress.size_dl,
  603|      0|                                   (double)data->progress.downloaded,
  604|      0|                                   (double)data->progress.size_ul,
  605|      0|                                   (double)data->progress.uploaded);
  606|      0|      Curl_set_in_callback(data, false);
  607|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  608|      0|        if(result)
  609|      0|          failf(data, "Callback aborted");
  610|      0|        return result;
  611|      0|      }
  612|      0|    }
  613|       |
  614|      0|    if(showprogress)
  615|      0|      progress_meter(data);
  616|      0|  }
  617|       |
  618|  20.2k|  return 0;
  619|  20.2k|}
progress.c:progress_calc:
  390|  20.2k|{
  391|  20.2k|  bool timetoshow = FALSE;
  392|  20.2k|  struct Progress * const p = &data->progress;
  393|       |
  394|       |  /* The time spent so far (from the start) in microseconds */
  395|  20.2k|  p->timespent = Curl_timediff_us(now, p->start);
  396|  20.2k|  p->dlspeed = trspeed(p->downloaded, p->timespent);
  397|  20.2k|  p->ulspeed = trspeed(p->uploaded, p->timespent);
  398|       |
  399|       |  /* Calculations done at most once a second, unless end is reached */
  400|  20.2k|  if(p->lastshow != now.tv_sec) {
  401|  4.40k|    int countindex; /* amount of seconds stored in the speeder array */
  402|  4.40k|    int nowindex = p->speeder_c% CURR_TIME;
  403|  4.40k|    p->lastshow = now.tv_sec;
  404|  4.40k|    timetoshow = TRUE;
  405|       |
  406|       |    /* Let's do the "current speed" thing, with the dl + ul speeds
  407|       |       combined. Store the speed at entry 'nowindex'. */
  408|  4.40k|    p->speeder[ nowindex ] = p->downloaded + p->uploaded;
  409|       |
  410|       |    /* remember the exact time for this moment */
  411|  4.40k|    p->speeder_time [ nowindex ] = now;
  412|       |
  413|       |    /* advance our speeder_c counter, which is increased every time we get
  414|       |       here and we expect it to never wrap as 2^32 is a lot of seconds! */
  415|  4.40k|    p->speeder_c++;
  416|       |
  417|       |    /* figure out how many index entries of data we have stored in our speeder
  418|       |       array. With N_ENTRIES filled in, we have about N_ENTRIES-1 seconds of
  419|       |       transfer. Imagine, after one second we have filled in two entries,
  420|       |       after two seconds we've filled in three entries etc. */
  421|  4.40k|    countindex = ((p->speeder_c >= CURR_TIME)? CURR_TIME:p->speeder_c) - 1;
  422|       |
  423|       |    /* first of all, we don't do this if there's no counted seconds yet */
  424|  4.40k|    if(countindex) {
  425|  2.10k|      int checkindex;
  426|  2.10k|      timediff_t span_ms;
  427|  2.10k|      curl_off_t amount;
  428|       |
  429|       |      /* Get the index position to compare with the 'nowindex' position.
  430|       |         Get the oldest entry possible. While we have less than CURR_TIME
  431|       |         entries, the first entry will remain the oldest. */
  432|  2.10k|      checkindex = (p->speeder_c >= CURR_TIME)? p->speeder_c%CURR_TIME:0;
  433|       |
  434|       |      /* Figure out the exact time for the time span */
  435|  2.10k|      span_ms = Curl_timediff(now, p->speeder_time[checkindex]);
  436|  2.10k|      if(0 == span_ms)
  437|  2.08k|        span_ms = 1; /* at least one millisecond MUST have passed */
  438|       |
  439|       |      /* Calculate the average speed the last 'span_ms' milliseconds */
  440|  2.10k|      amount = p->speeder[nowindex]- p->speeder[checkindex];
  441|       |
  442|  2.10k|      if(amount > CURL_OFF_T_C(4294967) /* 0xffffffff/1000 */)
  443|       |        /* the 'amount' value is bigger than would fit in 32 bits if
  444|       |           multiplied with 1000, so we use the double math for this */
  445|      0|        p->current_speed = (curl_off_t)
  446|      0|          ((double)amount/((double)span_ms/1000.0));
  447|  2.10k|      else
  448|       |        /* the 'amount' value is small enough to fit within 32 bits even
  449|       |           when multiplied with 1000 */
  450|  2.10k|        p->current_speed = amount*CURL_OFF_T_C(1000)/span_ms;
  451|  2.10k|    }
  452|  2.30k|    else
  453|       |      /* the first second we use the average */
  454|  2.30k|      p->current_speed = p->ulspeed + p->dlspeed;
  455|       |
  456|  4.40k|  } /* Calculations end */
  457|  20.2k|  return timetoshow;
  458|  20.2k|}
progress.c:trspeed:
  377|  40.4k|{
  378|  40.4k|  if(us < 1)
  379|      0|    return size * 1000000;
  380|  40.4k|  else if(size < CURL_OFF_T_MAX/1000000)
  381|  40.4k|    return (size * 1000000) / us;
  382|      0|  else if(us >= 1000000)
  383|      0|    return size / (us / 1000000);
  384|      0|  else
  385|      0|    return CURL_OFF_T_MAX;
  386|  40.4k|}

Curl_rand:
  120|  2.48k|{
  121|  2.48k|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  122|       |
  123|  2.48k|  DEBUGASSERT(num > 0);
  124|       |
  125|  5.31k|  while(num) {
  126|  2.82k|    unsigned int r;
  127|  2.82k|    size_t left = num < sizeof(unsigned int) ? num : sizeof(unsigned int);
  128|       |
  129|  2.82k|    result = randit(data, &r);
  130|  2.82k|    if(result)
  131|      0|      return result;
  132|       |
  133|  14.1k|    while(left) {
  134|  11.3k|      *rnd++ = (unsigned char)(r & 0xFF);
  135|  11.3k|      r >>= 8;
  136|  11.3k|      --num;
  137|  11.3k|      --left;
  138|  11.3k|    }
  139|  2.82k|  }
  140|       |
  141|  2.48k|  return result;
  142|  2.48k|}
Curl_rand_hex:
  152|  2.48k|{
  153|  2.48k|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  154|  2.48k|  const char *hex = "0123456789abcdef";
  155|  2.48k|  unsigned char buffer[128];
  156|  2.48k|  unsigned char *bufp = buffer;
  157|  2.48k|  DEBUGASSERT(num > 1);
  158|       |
  159|       |#ifdef __clang_analyzer__
  160|       |  /* This silences a scan-build warning about accessing this buffer with
  161|       |     uninitialized memory. */
  162|       |  memset(buffer, 0, sizeof(buffer));
  163|       |#endif
  164|       |
  165|  2.48k|  if((num/2 >= sizeof(buffer)) || !(num&1))
  166|       |    /* make sure it fits in the local buffer and that it is an odd number! */
  167|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  168|       |
  169|  2.48k|  num--; /* save one for zero termination */
  170|       |
  171|  2.48k|  result = Curl_rand(data, buffer, num/2);
  172|  2.48k|  if(result)
  173|      0|    return result;
  174|       |
  175|  13.7k|  while(num) {
  176|       |    /* clang-tidy warns on this line without this comment: */
  177|       |    /* NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult) */
  178|  11.3k|    *rnd++ = hex[(*bufp & 0xF0)>>4];
  179|  11.3k|    *rnd++ = hex[*bufp & 0x0F];
  180|  11.3k|    bufp++;
  181|  11.3k|    num -= 2;
  182|  11.3k|  }
  183|  2.48k|  *rnd = 0;
  184|       |
  185|  2.48k|  return result;
  186|  2.48k|}
rand.c:randit:
   40|  2.82k|{
   41|  2.82k|  unsigned int r;
   42|  2.82k|  CURLcode result = CURLE_OK;
   43|  2.82k|  static unsigned int randseed;
   44|  2.82k|  static bool seeded = FALSE;
   45|       |
   46|  2.82k|#ifdef CURLDEBUG
   47|  2.82k|  char *force_entropy = getenv("CURL_ENTROPY");
   48|  2.82k|  if(force_entropy) {
   49|      0|    if(!seeded) {
   50|      0|      unsigned int seed = 0;
   51|      0|      size_t elen = strlen(force_entropy);
   52|      0|      size_t clen = sizeof(seed);
   53|      0|      size_t min = elen < clen ? elen : clen;
   54|      0|      memcpy((char *)&seed, force_entropy, min);
   55|      0|      randseed = ntohl(seed);
   56|      0|      seeded = TRUE;
   57|      0|    }
   58|      0|    else
   59|      0|      randseed++;
   60|      0|    *rnd = randseed;
   61|      0|    return CURLE_OK;
   62|      0|  }
   63|  2.82k|#endif
   64|       |
   65|       |  /* data may be NULL! */
   66|  2.82k|  result = Curl_ssl_random(data, (unsigned char *)rnd, sizeof(*rnd));
   67|  2.82k|  if(result != CURLE_NOT_BUILT_IN)
   68|       |    /* only if there is no random function in the TLS backend do the non crypto
   69|       |       version, otherwise return result */
   70|  2.82k|    return result;
   71|       |
   72|       |  /* ---- non-cryptographic version following ---- */
   73|       |
   74|      0|#ifdef RANDOM_FILE
   75|      0|  if(!seeded) {
   76|       |    /* if there's a random file to read a seed from, use it */
   77|      0|    int fd = open(RANDOM_FILE, O_RDONLY);
   78|      0|    if(fd > -1) {
   79|       |      /* read random data into the randseed variable */
   80|      0|      ssize_t nread = read(fd, &randseed, sizeof(randseed));
   81|      0|      if(nread == sizeof(randseed))
   82|      0|        seeded = TRUE;
   83|      0|      close(fd);
   84|      0|    }
   85|      0|  }
   86|      0|#endif
   87|       |
   88|      0|  if(!seeded) {
   89|      0|    struct curltime now = Curl_now();
   90|      0|    infof(data, "WARNING: Using weak random seed");
   91|      0|    randseed += (unsigned int)now.tv_usec + (unsigned int)now.tv_sec;
   92|      0|    randseed = randseed * 1103515245 + 12345;
   93|      0|    randseed = randseed * 1103515245 + 12345;
   94|      0|    randseed = randseed * 1103515245 + 12345;
   95|      0|    seeded = TRUE;
   96|      0|  }
   97|       |
   98|       |  /* Return an unsigned 32-bit pseudo-random number. */
   99|      0|  r = randseed = randseed * 1103515245 + 12345;
  100|      0|  *rnd = (r << 16) | ((r >> 16) & 0xFFFF);
  101|      0|  return CURLE_OK;
  102|  2.82k|}

Curl_rename:
   40|  2.25k|{
   41|       |#ifdef WIN32
   42|       |  /* rename() on Windows doesn't overwrite, so we can't use it here.
   43|       |     MoveFileEx() will overwrite and is usually atomic, however it fails
   44|       |     when there are open handles to the file. */
   45|       |  const int max_wait_ms = 1000;
   46|       |  struct curltime start = Curl_now();
   47|       |  TCHAR *tchar_oldpath = curlx_convert_UTF8_to_tchar((char *)oldpath);
   48|       |  TCHAR *tchar_newpath = curlx_convert_UTF8_to_tchar((char *)newpath);
   49|       |  for(;;) {
   50|       |    timediff_t diff;
   51|       |    if(MoveFileEx(tchar_oldpath, tchar_newpath, MOVEFILE_REPLACE_EXISTING)) {
   52|       |      curlx_unicodefree(tchar_oldpath);
   53|       |      curlx_unicodefree(tchar_newpath);
   54|       |      break;
   55|       |    }
   56|       |    diff = Curl_timediff(Curl_now(), start);
   57|       |    if(diff < 0 || diff > max_wait_ms) {
   58|       |      curlx_unicodefree(tchar_oldpath);
   59|       |      curlx_unicodefree(tchar_newpath);
   60|       |      return 1;
   61|       |    }
   62|       |    Sleep(1);
   63|       |  }
   64|       |#else
   65|  2.25k|  if(rename(oldpath, newpath))
   66|      0|    return 1;
   67|  2.25k|#endif
   68|  2.25k|  return 0;
   69|  2.25k|}

Curl_socket_check:
  250|  5.73k|{
  251|  5.73k|  struct pollfd pfd[3];
  252|  5.73k|  int num;
  253|  5.73k|  int r;
  254|       |
  255|  5.73k|  if((readfd0 == CURL_SOCKET_BAD) && (readfd1 == CURL_SOCKET_BAD) &&
  256|  5.73k|     (writefd == CURL_SOCKET_BAD)) {
  257|       |    /* no sockets, just wait */
  258|      0|    return Curl_wait_ms(timeout_ms);
  259|      0|  }
  260|       |
  261|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  262|       |     time in this function does not need to be measured. This happens
  263|       |     when function is called with a zero timeout or a negative timeout
  264|       |     value indicating a blocking call should be performed. */
  265|       |
  266|  5.73k|  num = 0;
  267|  5.73k|  if(readfd0 != CURL_SOCKET_BAD) {
  268|  3.41k|    pfd[num].fd = readfd0;
  269|  3.41k|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  270|  3.41k|    pfd[num].revents = 0;
  271|  3.41k|    num++;
  272|  3.41k|  }
  273|  5.73k|  if(readfd1 != CURL_SOCKET_BAD) {
  274|      0|    pfd[num].fd = readfd1;
  275|      0|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  276|      0|    pfd[num].revents = 0;
  277|      0|    num++;
  278|      0|  }
  279|  5.73k|  if(writefd != CURL_SOCKET_BAD) {
  280|  2.48k|    pfd[num].fd = writefd;
  281|  2.48k|    pfd[num].events = POLLWRNORM|POLLOUT|POLLPRI;
  282|  2.48k|    pfd[num].revents = 0;
  283|  2.48k|    num++;
  284|  2.48k|  }
  285|       |
  286|  5.73k|  r = Curl_poll(pfd, num, timeout_ms);
  287|  5.73k|  if(r <= 0)
  288|    153|    return r;
  289|       |
  290|  5.57k|  r = 0;
  291|  5.57k|  num = 0;
  292|  5.57k|  if(readfd0 != CURL_SOCKET_BAD) {
  293|  3.26k|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  294|  3.24k|      r |= CURL_CSELECT_IN;
  295|  3.26k|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  296|      0|      r |= CURL_CSELECT_ERR;
  297|  3.26k|    num++;
  298|  3.26k|  }
  299|  5.57k|  if(readfd1 != CURL_SOCKET_BAD) {
  300|      0|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  301|      0|      r |= CURL_CSELECT_IN2;
  302|      0|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  303|      0|      r |= CURL_CSELECT_ERR;
  304|      0|    num++;
  305|      0|  }
  306|  5.57k|  if(writefd != CURL_SOCKET_BAD) {
  307|  2.48k|    if(pfd[num].revents & (POLLWRNORM|POLLOUT))
  308|  2.48k|      r |= CURL_CSELECT_OUT;
  309|  2.48k|    if(pfd[num].revents & (POLLERR|POLLHUP|POLLPRI|POLLNVAL))
  310|      0|      r |= CURL_CSELECT_ERR;
  311|  2.48k|  }
  312|       |
  313|  5.57k|  return r;
  314|  5.73k|}
Curl_poll:
  330|  5.73k|{
  331|  5.73k|#ifdef HAVE_POLL_FINE
  332|  5.73k|  int pending_ms;
  333|       |#else
  334|       |  fd_set fds_read;
  335|       |  fd_set fds_write;
  336|       |  fd_set fds_err;
  337|       |  curl_socket_t maxfd;
  338|       |#endif
  339|  5.73k|  bool fds_none = TRUE;
  340|  5.73k|  unsigned int i;
  341|  5.73k|  int r;
  342|       |
  343|  5.73k|  if(ufds) {
  344|  5.73k|    for(i = 0; i < nfds; i++) {
  345|  5.73k|      if(ufds[i].fd != CURL_SOCKET_BAD) {
  346|  5.73k|        fds_none = FALSE;
  347|  5.73k|        break;
  348|  5.73k|      }
  349|  5.73k|    }
  350|  5.73k|  }
  351|  5.73k|  if(fds_none) {
  352|       |    /* no sockets, just wait */
  353|      0|    return Curl_wait_ms(timeout_ms);
  354|      0|  }
  355|       |
  356|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  357|       |     time in this function does not need to be measured. This happens
  358|       |     when function is called with a zero timeout or a negative timeout
  359|       |     value indicating a blocking call should be performed. */
  360|       |
  361|  5.73k|#ifdef HAVE_POLL_FINE
  362|       |
  363|       |  /* prevent overflow, timeout_ms is typecast to int. */
  364|  5.73k|#if TIMEDIFF_T_MAX > INT_MAX
  365|  5.73k|  if(timeout_ms > INT_MAX)
  366|      0|    timeout_ms = INT_MAX;
  367|  5.73k|#endif
  368|  5.73k|  if(timeout_ms > 0)
  369|      0|    pending_ms = (int)timeout_ms;
  370|  5.73k|  else if(timeout_ms < 0)
  371|      0|    pending_ms = -1;
  372|  5.73k|  else
  373|  5.73k|    pending_ms = 0;
  374|  5.73k|  r = poll(ufds, nfds, pending_ms);
  375|  5.73k|  if(r <= 0)
  376|    153|    return r;
  377|       |
  378|  11.3k|  for(i = 0; i < nfds; i++) {
  379|  5.74k|    if(ufds[i].fd == CURL_SOCKET_BAD)
  380|      0|      continue;
  381|  5.74k|    if(ufds[i].revents & POLLHUP)
  382|      0|      ufds[i].revents |= POLLIN;
  383|  5.74k|    if(ufds[i].revents & POLLERR)
  384|      0|      ufds[i].revents |= POLLIN|POLLOUT;
  385|  5.74k|  }
  386|       |
  387|       |#else  /* HAVE_POLL_FINE */
  388|       |
  389|       |  FD_ZERO(&fds_read);
  390|       |  FD_ZERO(&fds_write);
  391|       |  FD_ZERO(&fds_err);
  392|       |  maxfd = (curl_socket_t)-1;
  393|       |
  394|       |  for(i = 0; i < nfds; i++) {
  395|       |    ufds[i].revents = 0;
  396|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  397|       |      continue;
  398|       |    VERIFY_SOCK(ufds[i].fd);
  399|       |    if(ufds[i].events & (POLLIN|POLLOUT|POLLPRI|
  400|       |                         POLLRDNORM|POLLWRNORM|POLLRDBAND)) {
  401|       |      if(ufds[i].fd > maxfd)
  402|       |        maxfd = ufds[i].fd;
  403|       |      if(ufds[i].events & (POLLRDNORM|POLLIN))
  404|       |        FD_SET(ufds[i].fd, &fds_read);
  405|       |      if(ufds[i].events & (POLLWRNORM|POLLOUT))
  406|       |        FD_SET(ufds[i].fd, &fds_write);
  407|       |      if(ufds[i].events & (POLLRDBAND|POLLPRI))
  408|       |        FD_SET(ufds[i].fd, &fds_err);
  409|       |    }
  410|       |  }
  411|       |
  412|       |  /*
  413|       |     Note also that WinSock ignores the first argument, so we don't worry
  414|       |     about the fact that maxfd is computed incorrectly with WinSock (since
  415|       |     curl_socket_t is unsigned in such cases and thus -1 is the largest
  416|       |     value).
  417|       |  */
  418|       |  r = our_select(maxfd, &fds_read, &fds_write, &fds_err, timeout_ms);
  419|       |  if(r <= 0)
  420|       |    return r;
  421|       |
  422|       |  r = 0;
  423|       |  for(i = 0; i < nfds; i++) {
  424|       |    ufds[i].revents = 0;
  425|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  426|       |      continue;
  427|       |    if(FD_ISSET(ufds[i].fd, &fds_read)) {
  428|       |      if(ufds[i].events & POLLRDNORM)
  429|       |        ufds[i].revents |= POLLRDNORM;
  430|       |      if(ufds[i].events & POLLIN)
  431|       |        ufds[i].revents |= POLLIN;
  432|       |    }
  433|       |    if(FD_ISSET(ufds[i].fd, &fds_write)) {
  434|       |      if(ufds[i].events & POLLWRNORM)
  435|       |        ufds[i].revents |= POLLWRNORM;
  436|       |      if(ufds[i].events & POLLOUT)
  437|       |        ufds[i].revents |= POLLOUT;
  438|       |    }
  439|       |    if(FD_ISSET(ufds[i].fd, &fds_err)) {
  440|       |      if(ufds[i].events & POLLRDBAND)
  441|       |        ufds[i].revents |= POLLRDBAND;
  442|       |      if(ufds[i].events & POLLPRI)
  443|       |        ufds[i].revents |= POLLPRI;
  444|       |    }
  445|       |    if(ufds[i].revents)
  446|       |      r++;
  447|       |  }
  448|       |
  449|       |#endif  /* HAVE_POLL_FINE */
  450|       |
  451|  5.57k|  return r;
  452|  5.73k|}

Curl_infof:
  242|  51.7k|{
  243|  51.7k|  DEBUGASSERT(!strchr(fmt, '\n'));
  244|  51.7k|  if(data && data->set.verbose) {
  245|      0|    va_list ap;
  246|      0|    size_t len;
  247|      0|    char buffer[MAXINFO + 2];
  248|      0|    va_start(ap, fmt);
  249|      0|    len = mvsnprintf(buffer, MAXINFO, fmt, ap);
  250|      0|    va_end(ap);
  251|      0|    buffer[len++] = '\n';
  252|      0|    buffer[len] = '\0';
  253|      0|    Curl_debug(data, CURLINFO_TEXT, buffer, len);
  254|      0|  }
  255|  51.7k|}
Curl_failf:
  262|  1.49k|{
  263|  1.49k|  DEBUGASSERT(!strchr(fmt, '\n'));
  264|  1.49k|  if(data->set.verbose || data->set.errorbuffer) {
  265|      0|    va_list ap;
  266|      0|    size_t len;
  267|      0|    char error[CURL_ERROR_SIZE + 2];
  268|      0|    va_start(ap, fmt);
  269|      0|    len = mvsnprintf(error, CURL_ERROR_SIZE, fmt, ap);
  270|       |
  271|      0|    if(data->set.errorbuffer && !data->state.errorbuf) {
  272|      0|      strcpy(data->set.errorbuffer, error);
  273|      0|      data->state.errorbuf = TRUE; /* wrote error string */
  274|      0|    }
  275|      0|    error[len++] = '\n';
  276|      0|    error[len] = '\0';
  277|      0|    Curl_debug(data, CURLINFO_TEXT, error, len);
  278|      0|    va_end(ap);
  279|      0|  }
  280|  1.49k|}
Curl_write:
  294|  2.42k|{
  295|  2.42k|  ssize_t bytes_written;
  296|  2.42k|  CURLcode result = CURLE_OK;
  297|  2.42k|  struct connectdata *conn;
  298|  2.42k|  int num;
  299|  2.42k|  DEBUGASSERT(data);
  300|  2.42k|  DEBUGASSERT(data->conn);
  301|  2.42k|  conn = data->conn;
  302|  2.42k|  num = (sockfd == conn->sock[SECONDARYSOCKET]);
  303|       |
  304|  2.42k|#ifdef CURLDEBUG
  305|  2.42k|  {
  306|       |    /* Allow debug builds to override this logic to force short sends
  307|       |    */
  308|  2.42k|    char *p = getenv("CURL_SMALLSENDS");
  309|  2.42k|    if(p) {
  310|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
  311|      0|      if(altsize)
  312|      0|        len = CURLMIN(len, altsize);
  313|      0|    }
  314|  2.42k|  }
  315|  2.42k|#endif
  316|  2.42k|  bytes_written = conn->send[num](data, num, mem, len, &result);
  317|       |
  318|  2.42k|  *written = bytes_written;
  319|  2.42k|  if(bytes_written >= 0)
  320|       |    /* we completely ignore the curlcode value when subzero is not returned */
  321|  2.40k|    return CURLE_OK;
  322|       |
  323|       |  /* handle CURLE_AGAIN or a send failure */
  324|     27|  switch(result) {
  325|      0|  case CURLE_AGAIN:
  326|      0|    *written = 0;
  327|      0|    return CURLE_OK;
  328|       |
  329|      0|  case CURLE_OK:
  330|       |    /* general send failure */
  331|      0|    return CURLE_SEND_ERROR;
  332|       |
  333|     27|  default:
  334|       |    /* we got a specific curlcode, forward it */
  335|     27|    return result;
  336|     27|  }
  337|     27|}
Curl_send_plain:
  341|  5.38k|{
  342|  5.38k|  struct connectdata *conn;
  343|  5.38k|  curl_socket_t sockfd;
  344|  5.38k|  ssize_t bytes_written;
  345|       |
  346|  5.38k|  DEBUGASSERT(data);
  347|  5.38k|  DEBUGASSERT(data->conn);
  348|  5.38k|  conn = data->conn;
  349|  5.38k|  sockfd = conn->sock[num];
  350|       |  /* WinSock will destroy unread received data if send() is
  351|       |     failed.
  352|       |     To avoid lossage of received data, recv() must be
  353|       |     performed before every send() if any incoming data is
  354|       |     available. */
  355|  5.38k|  if(pre_receive_plain(data, conn, num)) {
  356|      0|    *code = CURLE_OUT_OF_MEMORY;
  357|      0|    return -1;
  358|      0|  }
  359|       |
  360|       |#if defined(MSG_FASTOPEN) && !defined(TCP_FASTOPEN_CONNECT) /* Linux */
  361|       |  if(conn->bits.tcp_fastopen) {
  362|       |    bytes_written = sendto(sockfd, mem, len, MSG_FASTOPEN,
  363|       |                           conn->ip_addr->ai_addr, conn->ip_addr->ai_addrlen);
  364|       |    conn->bits.tcp_fastopen = FALSE;
  365|       |  }
  366|       |  else
  367|       |#endif
  368|  5.38k|    bytes_written = swrite(sockfd, mem, len);
  369|       |
  370|  5.38k|  *code = CURLE_OK;
  371|  5.38k|  if(-1 == bytes_written) {
  372|      0|    int err = SOCKERRNO;
  373|       |
  374|      0|    if(
  375|       |#ifdef WSAEWOULDBLOCK
  376|       |      /* This is how Windows does it */
  377|       |      (WSAEWOULDBLOCK == err)
  378|       |#else
  379|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  380|       |         due to its inability to send off data without blocking. We therefore
  381|       |         treat both error codes the same here */
  382|      0|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err) ||
  383|      0|      (EINPROGRESS == err)
  384|      0|#endif
  385|      0|      ) {
  386|       |      /* this is just a case of EWOULDBLOCK */
  387|      0|      bytes_written = 0;
  388|      0|      *code = CURLE_AGAIN;
  389|      0|    }
  390|      0|    else {
  391|      0|      char buffer[STRERROR_LEN];
  392|      0|      failf(data, "Send failure: %s",
  393|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  394|      0|      data->state.os_errno = err;
  395|      0|      *code = CURLE_SEND_ERROR;
  396|      0|    }
  397|      0|  }
  398|  5.38k|  return bytes_written;
  399|  5.38k|}
Curl_recv_plain:
  425|  4.65k|{
  426|  4.65k|  struct connectdata *conn;
  427|  4.65k|  curl_socket_t sockfd;
  428|  4.65k|  ssize_t nread;
  429|  4.65k|  DEBUGASSERT(data);
  430|  4.65k|  DEBUGASSERT(data->conn);
  431|  4.65k|  conn = data->conn;
  432|  4.65k|  sockfd = conn->sock[num];
  433|       |  /* Check and return data that already received and storied in internal
  434|       |     intermediate buffer */
  435|  4.65k|  nread = get_pre_recved(conn, num, buf, len);
  436|  4.65k|  if(nread > 0) {
  437|      0|    *code = CURLE_OK;
  438|      0|    return nread;
  439|      0|  }
  440|       |
  441|  4.65k|  nread = sread(sockfd, buf, len);
  442|       |
  443|  4.65k|  *code = CURLE_OK;
  444|  4.65k|  if(-1 == nread) {
  445|     13|    int err = SOCKERRNO;
  446|       |
  447|     13|    if(
  448|       |#ifdef WSAEWOULDBLOCK
  449|       |      /* This is how Windows does it */
  450|       |      (WSAEWOULDBLOCK == err)
  451|       |#else
  452|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  453|       |         due to its inability to send off data without blocking. We therefore
  454|       |         treat both error codes the same here */
  455|     13|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err)
  456|     13|#endif
  457|     13|      ) {
  458|       |      /* this is just a case of EWOULDBLOCK */
  459|     13|      *code = CURLE_AGAIN;
  460|     13|    }
  461|      0|    else {
  462|      0|      char buffer[STRERROR_LEN];
  463|      0|      failf(data, "Recv failure: %s",
  464|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  465|      0|      data->state.os_errno = err;
  466|      0|      *code = CURLE_RECV_ERROR;
  467|      0|    }
  468|     13|  }
  469|  4.65k|  return nread;
  470|  4.65k|}
Curl_client_write:
  621|  18.5k|{
  622|  18.5k|  struct connectdata *conn = data->conn;
  623|       |
  624|  18.5k|  DEBUGASSERT(!(type & ~CLIENTWRITE_BOTH));
  625|       |
  626|  18.5k|  if(!len)
  627|      0|    return CURLE_OK;
  628|       |
  629|       |  /* FTP data may need conversion. */
  630|  18.5k|  if((type & CLIENTWRITE_BODY) &&
  631|  18.5k|    (conn->handler->protocol & PROTO_FAMILY_FTP) &&
  632|  18.5k|    conn->proto.ftpc.transfertype == 'A') {
  633|       |    /* convert from the network encoding */
  634|      0|    CURLcode result = Curl_convert_from_network(data, ptr, len);
  635|       |    /* Curl_convert_from_network calls failf if unsuccessful */
  636|      0|    if(result)
  637|      0|      return result;
  638|       |
  639|      0|#ifdef CURL_DO_LINEEND_CONV
  640|       |    /* convert end-of-line markers */
  641|      0|    len = convert_lineends(data, ptr, len);
  642|      0|#endif /* CURL_DO_LINEEND_CONV */
  643|      0|    }
  644|       |
  645|  18.5k|  return chop_write(data, type, ptr, len);
  646|  18.5k|}
Curl_read:
  685|  25.4k|{
  686|  25.4k|  CURLcode result = CURLE_RECV_ERROR;
  687|  25.4k|  ssize_t nread = 0;
  688|  25.4k|  size_t bytesfromsocket = 0;
  689|  25.4k|  char *buffertofill = NULL;
  690|  25.4k|  struct connectdata *conn = data->conn;
  691|       |
  692|       |  /* Set 'num' to 0 or 1, depending on which socket that has been sent here.
  693|       |     If it is the second socket, we set num to 1. Otherwise to 0. This lets
  694|       |     us use the correct ssl handle. */
  695|  25.4k|  int num = (sockfd == conn->sock[SECONDARYSOCKET]);
  696|       |
  697|  25.4k|  *n = 0; /* reset amount to zero */
  698|       |
  699|  25.4k|  bytesfromsocket = CURLMIN(sizerequested, (size_t)data->set.buffer_size);
  700|  25.4k|  buffertofill = buf;
  701|       |
  702|  25.4k|  nread = conn->recv[num](data, num, buffertofill, bytesfromsocket, &result);
  703|  25.4k|  if(nread < 0)
  704|    748|    return result;
  705|       |
  706|  24.7k|  *n += nread;
  707|       |
  708|  24.7k|  return CURLE_OK;
  709|  25.4k|}
Curl_debug:
  714|  20.4k|{
  715|  20.4k|  int rc = 0;
  716|  20.4k|  if(data->set.verbose) {
  717|      0|    static const char s_infotype[CURLINFO_END][3] = {
  718|      0|      "* ", "< ", "> ", "{ ", "} ", "{ ", "} " };
  719|       |
  720|       |#ifdef CURL_DOES_CONVERSIONS
  721|       |    char *buf = NULL;
  722|       |    size_t conv_size = 0;
  723|       |
  724|       |    switch(type) {
  725|       |    case CURLINFO_HEADER_OUT:
  726|       |      buf = Curl_memdup(ptr, size);
  727|       |      if(!buf)
  728|       |        return 1;
  729|       |      conv_size = size;
  730|       |
  731|       |      /* Special processing is needed for this block if it
  732|       |       * contains both headers and data (separated by CRLFCRLF).
  733|       |       * We want to convert just the headers, leaving the data as-is.
  734|       |       */
  735|       |      if(size > 4) {
  736|       |        size_t i;
  737|       |        for(i = 0; i < size-4; i++) {
  738|       |          if(memcmp(&buf[i], "\x0d\x0a\x0d\x0a", 4) == 0) {
  739|       |            /* convert everything through this CRLFCRLF but no further */
  740|       |            conv_size = i + 4;
  741|       |            break;
  742|       |          }
  743|       |        }
  744|       |      }
  745|       |
  746|       |      Curl_convert_from_network(data, buf, conv_size);
  747|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  748|       |      /* we might as well continue even if it fails...   */
  749|       |      ptr = buf; /* switch pointer to use my buffer instead */
  750|       |      break;
  751|       |    default:
  752|       |      /* leave everything else as-is */
  753|       |      break;
  754|       |    }
  755|       |#endif /* CURL_DOES_CONVERSIONS */
  756|       |
  757|      0|    if(data->set.fdebug) {
  758|      0|      Curl_set_in_callback(data, true);
  759|      0|      rc = (*data->set.fdebug)(data, type, ptr, size, data->set.debugdata);
  760|      0|      Curl_set_in_callback(data, false);
  761|      0|    }
  762|      0|    else {
  763|      0|      switch(type) {
  764|      0|      case CURLINFO_TEXT:
  765|      0|      case CURLINFO_HEADER_OUT:
  766|      0|      case CURLINFO_HEADER_IN:
  767|      0|        fwrite(s_infotype[type], 2, 1, data->set.err);
  768|      0|        fwrite(ptr, size, 1, data->set.err);
  769|       |#ifdef CURL_DOES_CONVERSIONS
  770|       |        if(size != conv_size) {
  771|       |          /* we had untranslated data so we need an explicit newline */
  772|       |          fwrite("\n", 1, 1, data->set.err);
  773|       |        }
  774|       |#endif
  775|      0|        break;
  776|      0|      default: /* nada */
  777|      0|        break;
  778|      0|      }
  779|      0|    }
  780|       |#ifdef CURL_DOES_CONVERSIONS
  781|       |    free(buf);
  782|       |#endif
  783|      0|  }
  784|  20.4k|  return rc;
  785|  20.4k|}
sendf.c:chop_write:
  526|  18.5k|{
  527|  18.5k|  struct connectdata *conn = data->conn;
  528|  18.5k|  curl_write_callback writeheader = NULL;
  529|  18.5k|  curl_write_callback writebody = NULL;
  530|  18.5k|  char *ptr = optr;
  531|  18.5k|  size_t len = olen;
  532|       |
  533|  18.5k|  if(!len)
  534|      0|    return CURLE_OK;
  535|       |
  536|       |  /* If reading is paused, append this data to the already held data for this
  537|       |     type. */
  538|  18.5k|  if(data->req.keepon & KEEP_RECV_PAUSE)
  539|      0|    return pausewrite(data, type, ptr, len);
  540|       |
  541|       |  /* Determine the callback(s) to use. */
  542|  18.5k|  if(type & CLIENTWRITE_BODY)
  543|    532|    writebody = data->set.fwrite_func;
  544|  18.5k|  if((type & CLIENTWRITE_HEADER) &&
  545|  18.5k|     (data->set.fwrite_header || data->set.writeheader)) {
  546|       |    /*
  547|       |     * Write headers to the same callback or to the especially setup
  548|       |     * header callback function (added after version 7.7.1).
  549|       |     */
  550|      0|    writeheader =
  551|      0|      data->set.fwrite_header? data->set.fwrite_header: data->set.fwrite_func;
  552|      0|  }
  553|       |
  554|       |  /* Chop data, write chunks. */
  555|  37.0k|  while(len) {
  556|  18.5k|    size_t chunklen = len <= CURL_MAX_WRITE_SIZE? len: CURL_MAX_WRITE_SIZE;
  557|       |
  558|  18.5k|    if(writebody) {
  559|    532|      size_t wrote;
  560|    532|      Curl_set_in_callback(data, true);
  561|    532|      wrote = writebody(ptr, 1, chunklen, data->set.out);
  562|    532|      Curl_set_in_callback(data, false);
  563|       |
  564|    532|      if(CURL_WRITEFUNC_PAUSE == wrote) {
  565|      0|        if(conn->handler->flags & PROTOPT_NONETWORK) {
  566|       |          /* Protocols that work without network cannot be paused. This is
  567|       |             actually only FILE:// just now, and it can't pause since the
  568|       |             transfer isn't done using the "normal" procedure. */
  569|      0|          failf(data, "Write callback asked for PAUSE when not supported!");
  570|      0|          return CURLE_WRITE_ERROR;
  571|      0|        }
  572|      0|        return pausewrite(data, type, ptr, len);
  573|      0|      }
  574|    532|      if(wrote != chunklen) {
  575|      0|        failf(data, "Failure writing output to destination");
  576|      0|        return CURLE_WRITE_ERROR;
  577|      0|      }
  578|    532|    }
  579|       |
  580|  18.5k|    ptr += chunklen;
  581|  18.5k|    len -= chunklen;
  582|  18.5k|  }
  583|       |
  584|  18.5k|  if(writeheader) {
  585|      0|    size_t wrote;
  586|      0|    ptr = optr;
  587|      0|    len = olen;
  588|      0|    Curl_set_in_callback(data, true);
  589|      0|    wrote = writeheader(ptr, 1, len, data->set.writeheader);
  590|      0|    Curl_set_in_callback(data, false);
  591|       |
  592|      0|    if(CURL_WRITEFUNC_PAUSE == wrote)
  593|       |      /* here we pass in the HEADER bit only since if this was body as well
  594|       |         then it was passed already and clearly that didn't trigger the
  595|       |         pause, so this is saved for later with the HEADER bit only */
  596|      0|      return pausewrite(data, CLIENTWRITE_HEADER, ptr, len);
  597|       |
  598|      0|    if(wrote != len) {
  599|      0|      failf(data, "Failed writing header");
  600|      0|      return CURLE_WRITE_ERROR;
  601|      0|    }
  602|      0|  }
  603|       |
  604|  18.5k|  return CURLE_OK;
  605|  18.5k|}

Curl_setstropt:
   58|  23.3k|{
   59|       |  /* Release the previous storage at `charp' and replace by a dynamic storage
   60|       |     copy of `s'. Return CURLE_OK or CURLE_OUT_OF_MEMORY. */
   61|       |
   62|  23.3k|  Curl_safefree(*charp);
   63|       |
   64|  23.3k|  if(s) {
   65|  14.8k|    char *str = strdup(s);
   66|       |
   67|  14.8k|    if(str) {
   68|  14.8k|      size_t len = strlen(str);
   69|  14.8k|      if(len > CURL_MAX_INPUT_LENGTH) {
   70|      0|        free(str);
   71|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
   72|      0|      }
   73|  14.8k|    }
   74|  14.8k|    if(!str)
   75|      0|      return CURLE_OUT_OF_MEMORY;
   76|       |
   77|  14.8k|    *charp = str;
   78|  14.8k|  }
   79|       |
   80|  23.3k|  return CURLE_OK;
   81|  23.3k|}
Curl_vsetopt:
  161|  31.4k|{
  162|  31.4k|  char *argptr;
  163|  31.4k|  CURLcode result = CURLE_OK;
  164|  31.4k|  long arg;
  165|  31.4k|  unsigned long uarg;
  166|  31.4k|  curl_off_t bigsize;
  167|       |
  168|  31.4k|  switch(option) {
  169|      0|  case CURLOPT_DNS_CACHE_TIMEOUT:
  170|      0|    arg = va_arg(param, long);
  171|      0|    if(arg < -1)
  172|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  173|      0|    data->set.dns_cache_timeout = arg;
  174|      0|    break;
  175|      0|  case CURLOPT_DNS_USE_GLOBAL_CACHE:
  176|       |    /* deprecated */
  177|      0|    break;
  178|      0|  case CURLOPT_SSL_CIPHER_LIST:
  179|       |    /* set a list of cipher we want to use in the SSL connection */
  180|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST],
  181|      0|                            va_arg(param, char *));
  182|      0|    break;
  183|      0|#ifndef CURL_DISABLE_PROXY
  184|      0|  case CURLOPT_PROXY_SSL_CIPHER_LIST:
  185|       |    /* set a list of cipher we want to use in the SSL connection for proxy */
  186|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST_PROXY],
  187|      0|                            va_arg(param, char *));
  188|      0|    break;
  189|      0|#endif
  190|      0|  case CURLOPT_TLS13_CIPHERS:
  191|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  192|       |      /* set preferred list of TLS 1.3 cipher suites */
  193|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST],
  194|      0|                              va_arg(param, char *));
  195|      0|    }
  196|      0|    else
  197|      0|      return CURLE_NOT_BUILT_IN;
  198|      0|    break;
  199|      0|#ifndef CURL_DISABLE_PROXY
  200|      0|  case CURLOPT_PROXY_TLS13_CIPHERS:
  201|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  202|       |      /* set preferred list of TLS 1.3 cipher suites for proxy */
  203|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST_PROXY],
  204|      0|                              va_arg(param, char *));
  205|      0|    }
  206|      0|    else
  207|      0|      return CURLE_NOT_BUILT_IN;
  208|      0|    break;
  209|      0|#endif
  210|      0|  case CURLOPT_RANDOM_FILE:
  211|       |    /*
  212|       |     * This is the path name to a file that contains random data to seed
  213|       |     * the random SSL stuff with. The file is only used for reading.
  214|       |     */
  215|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_RANDOM_FILE],
  216|      0|                            va_arg(param, char *));
  217|      0|    break;
  218|      0|  case CURLOPT_EGDSOCKET:
  219|       |    /*
  220|       |     * The Entropy Gathering Daemon socket pathname
  221|       |     */
  222|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EGDSOCKET],
  223|      0|                            va_arg(param, char *));
  224|      0|    break;
  225|      0|  case CURLOPT_MAXCONNECTS:
  226|       |    /*
  227|       |     * Set the absolute number of maximum simultaneous alive connection that
  228|       |     * libcurl is allowed to have.
  229|       |     */
  230|      0|    arg = va_arg(param, long);
  231|      0|    if(arg < 0)
  232|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  233|      0|    data->set.maxconnects = arg;
  234|      0|    break;
  235|      0|  case CURLOPT_FORBID_REUSE:
  236|       |    /*
  237|       |     * When this transfer is done, it must not be left to be reused by a
  238|       |     * subsequent transfer but shall be closed immediately.
  239|       |     */
  240|      0|    data->set.reuse_forbid = (0 != va_arg(param, long)) ? TRUE : FALSE;
  241|      0|    break;
  242|      0|  case CURLOPT_FRESH_CONNECT:
  243|       |    /*
  244|       |     * This transfer shall not use a previously cached connection but
  245|       |     * should be made with a fresh new connect!
  246|       |     */
  247|      0|    data->set.reuse_fresh = (0 != va_arg(param, long)) ? TRUE : FALSE;
  248|      0|    break;
  249|      0|  case CURLOPT_VERBOSE:
  250|       |    /*
  251|       |     * Verbose means infof() calls that give a lot of information about
  252|       |     * the connection and transfer procedures as well as internal choices.
  253|       |     */
  254|      0|    data->set.verbose = (0 != va_arg(param, long)) ? TRUE : FALSE;
  255|      0|    break;
  256|      5|  case CURLOPT_HEADER:
  257|       |    /*
  258|       |     * Set to include the header in the general data output stream.
  259|       |     */
  260|      5|    data->set.include_header = (0 != va_arg(param, long)) ? TRUE : FALSE;
  261|      5|    break;
  262|      0|  case CURLOPT_NOPROGRESS:
  263|       |    /*
  264|       |     * Shut off the internal supported progress meter
  265|       |     */
  266|      0|    data->set.hide_progress = (0 != va_arg(param, long)) ? TRUE : FALSE;
  267|      0|    if(data->set.hide_progress)
  268|      0|      data->progress.flags |= PGRS_HIDE;
  269|      0|    else
  270|      0|      data->progress.flags &= ~PGRS_HIDE;
  271|      0|    break;
  272|      4|  case CURLOPT_NOBODY:
  273|       |    /*
  274|       |     * Do not include the body part in the output data stream.
  275|       |     */
  276|      4|    data->set.opt_no_body = (0 != va_arg(param, long)) ? TRUE : FALSE;
  277|      4|#ifndef CURL_DISABLE_HTTP
  278|      4|    if(data->set.opt_no_body)
  279|       |      /* in HTTP lingo, no body means using the HEAD request... */
  280|      3|      data->set.method = HTTPREQ_HEAD;
  281|      1|    else if(data->set.method == HTTPREQ_HEAD)
  282|      0|      data->set.method = HTTPREQ_GET;
  283|      4|#endif
  284|      4|    break;
  285|      0|  case CURLOPT_FAILONERROR:
  286|       |    /*
  287|       |     * Don't output the >=400 error code HTML-page, but instead only
  288|       |     * return error.
  289|       |     */
  290|      0|    data->set.http_fail_on_error = (0 != va_arg(param, long)) ? TRUE : FALSE;
  291|      0|    break;
  292|      0|  case CURLOPT_KEEP_SENDING_ON_ERROR:
  293|      0|    data->set.http_keep_sending_on_error = (0 != va_arg(param, long)) ?
  294|      0|      TRUE : FALSE;
  295|      0|    break;
  296|     53|  case CURLOPT_UPLOAD:
  297|     53|  case CURLOPT_PUT:
  298|       |    /*
  299|       |     * We want to sent data to the remote host. If this is HTTP, that equals
  300|       |     * using the PUT request.
  301|       |     */
  302|     53|    data->set.upload = (0 != va_arg(param, long)) ? TRUE : FALSE;
  303|     53|    if(data->set.upload) {
  304|       |      /* If this is HTTP, PUT is what's needed to "upload" */
  305|     53|      data->set.method = HTTPREQ_PUT;
  306|     53|      data->set.opt_no_body = FALSE; /* this is implied */
  307|     53|    }
  308|      0|    else
  309|       |      /* In HTTP, the opposite of upload is GET (unless NOBODY is true as
  310|       |         then this can be changed to HEAD later on) */
  311|      0|      data->set.method = HTTPREQ_GET;
  312|     53|    break;
  313|      0|  case CURLOPT_REQUEST_TARGET:
  314|      0|    result = Curl_setstropt(&data->set.str[STRING_TARGET],
  315|      0|                            va_arg(param, char *));
  316|      0|    break;
  317|      0|  case CURLOPT_FILETIME:
  318|       |    /*
  319|       |     * Try to get the file time of the remote document. The time will
  320|       |     * later (possibly) become available using curl_easy_getinfo().
  321|       |     */
  322|      0|    data->set.get_filetime = (0 != va_arg(param, long)) ? TRUE : FALSE;
  323|      0|    break;
  324|  2.25k|  case CURLOPT_SERVER_RESPONSE_TIMEOUT:
  325|       |    /*
  326|       |     * Option that specifies how quickly an server response must be obtained
  327|       |     * before it is considered failure. For pingpong protocols.
  328|       |     */
  329|  2.25k|    arg = va_arg(param, long);
  330|  2.25k|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
  331|  2.25k|      data->set.server_response_timeout = arg * 1000;
  332|      0|    else
  333|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  334|  2.25k|    break;
  335|  2.25k|#ifndef CURL_DISABLE_TFTP
  336|  2.25k|  case CURLOPT_TFTP_NO_OPTIONS:
  337|       |    /*
  338|       |     * Option that prevents libcurl from sending TFTP option requests to the
  339|       |     * server.
  340|       |     */
  341|      0|    data->set.tftp_no_options = va_arg(param, long) != 0;
  342|      0|    break;
  343|      0|  case CURLOPT_TFTP_BLKSIZE:
  344|       |    /*
  345|       |     * TFTP option that specifies the block size to use for data transmission.
  346|       |     */
  347|      0|    arg = va_arg(param, long);
  348|      0|    if(arg < 0)
  349|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  350|      0|    data->set.tftp_blksize = arg;
  351|      0|    break;
  352|      0|#endif
  353|      0|#ifndef CURL_DISABLE_NETRC
  354|      0|  case CURLOPT_NETRC:
  355|       |    /*
  356|       |     * Parse the $HOME/.netrc file
  357|       |     */
  358|      0|    arg = va_arg(param, long);
  359|      0|    if((arg < CURL_NETRC_IGNORED) || (arg >= CURL_NETRC_LAST))
  360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  361|      0|    data->set.use_netrc = (enum CURL_NETRC_OPTION)arg;
  362|      0|    break;
  363|      0|  case CURLOPT_NETRC_FILE:
  364|       |    /*
  365|       |     * Use this file instead of the $HOME/.netrc file
  366|       |     */
  367|      0|    result = Curl_setstropt(&data->set.str[STRING_NETRC_FILE],
  368|      0|                            va_arg(param, char *));
  369|      0|    break;
  370|      0|#endif
  371|      0|  case CURLOPT_TRANSFERTEXT:
  372|       |    /*
  373|       |     * This option was previously named 'FTPASCII'. Renamed to work with
  374|       |     * more protocols than merely FTP.
  375|       |     *
  376|       |     * Transfer using ASCII (instead of BINARY).
  377|       |     */
  378|      0|    data->set.prefer_ascii = (0 != va_arg(param, long)) ? TRUE : FALSE;
  379|      0|    break;
  380|      0|  case CURLOPT_TIMECONDITION:
  381|       |    /*
  382|       |     * Set HTTP time condition. This must be one of the defines in the
  383|       |     * curl/curl.h header file.
  384|       |     */
  385|      0|    arg = va_arg(param, long);
  386|      0|    if((arg < CURL_TIMECOND_NONE) || (arg >= CURL_TIMECOND_LAST))
  387|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  388|      0|    data->set.timecondition = (curl_TimeCond)arg;
  389|      0|    break;
  390|      0|  case CURLOPT_TIMEVALUE:
  391|       |    /*
  392|       |     * This is the value to compare with the remote document with the
  393|       |     * method set with CURLOPT_TIMECONDITION
  394|       |     */
  395|      0|    data->set.timevalue = (time_t)va_arg(param, long);
  396|      0|    break;
  397|       |
  398|      0|  case CURLOPT_TIMEVALUE_LARGE:
  399|       |    /*
  400|       |     * This is the value to compare with the remote document with the
  401|       |     * method set with CURLOPT_TIMECONDITION
  402|       |     */
  403|      0|    data->set.timevalue = (time_t)va_arg(param, curl_off_t);
  404|      0|    break;
  405|       |
  406|      0|  case CURLOPT_SSLVERSION:
  407|      0|#ifndef CURL_DISABLE_PROXY
  408|      0|  case CURLOPT_PROXY_SSLVERSION:
  409|      0|#endif
  410|       |    /*
  411|       |     * Set explicit SSL version to try to connect with, as some SSL
  412|       |     * implementations are lame.
  413|       |     */
  414|      0|#ifdef USE_SSL
  415|      0|    {
  416|      0|      long version, version_max;
  417|      0|      struct ssl_primary_config *primary = &data->set.ssl.primary;
  418|      0|#ifndef CURL_DISABLE_PROXY
  419|      0|      if(option != CURLOPT_SSLVERSION)
  420|      0|        primary = &data->set.proxy_ssl.primary;
  421|      0|#endif
  422|       |
  423|      0|      arg = va_arg(param, long);
  424|       |
  425|      0|      version = C_SSLVERSION_VALUE(arg);
  426|      0|      version_max = C_SSLVERSION_MAX_VALUE(arg);
  427|       |
  428|      0|      if(version < CURL_SSLVERSION_DEFAULT ||
  429|      0|         version == CURL_SSLVERSION_SSLv2 ||
  430|      0|         version == CURL_SSLVERSION_SSLv3 ||
  431|      0|         version >= CURL_SSLVERSION_LAST ||
  432|      0|         version_max < CURL_SSLVERSION_MAX_NONE ||
  433|      0|         version_max >= CURL_SSLVERSION_MAX_LAST)
  434|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  435|       |
  436|      0|      primary->version = version;
  437|      0|      primary->version_max = version_max;
  438|      0|    }
  439|       |#else
  440|       |    result = CURLE_NOT_BUILT_IN;
  441|       |#endif
  442|      0|    break;
  443|       |
  444|       |    /* MQTT "borrows" some of the HTTP options */
  445|      0|#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MQTT)
  446|      0|  case CURLOPT_COPYPOSTFIELDS:
  447|       |    /*
  448|       |     * A string with POST data. Makes curl HTTP POST. Even if it is NULL.
  449|       |     * If needed, CURLOPT_POSTFIELDSIZE must have been set prior to
  450|       |     *  CURLOPT_COPYPOSTFIELDS and not altered later.
  451|       |     */
  452|      0|    argptr = va_arg(param, char *);
  453|       |
  454|      0|    if(!argptr || data->set.postfieldsize == -1)
  455|      0|      result = Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], argptr);
  456|      0|    else {
  457|       |      /*
  458|       |       *  Check that requested length does not overflow the size_t type.
  459|       |       */
  460|       |
  461|      0|      if((data->set.postfieldsize < 0) ||
  462|      0|         ((sizeof(curl_off_t) != sizeof(size_t)) &&
  463|      0|          (data->set.postfieldsize > (curl_off_t)((size_t)-1))))
  464|      0|        result = CURLE_OUT_OF_MEMORY;
  465|      0|      else {
  466|      0|        char *p;
  467|       |
  468|      0|        (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  469|       |
  470|       |        /* Allocate even when size == 0. This satisfies the need of possible
  471|       |           later address compare to detect the COPYPOSTFIELDS mode, and
  472|       |           to mark that postfields is used rather than read function or
  473|       |           form data.
  474|       |        */
  475|      0|        p = malloc((size_t)(data->set.postfieldsize?
  476|      0|                            data->set.postfieldsize:1));
  477|       |
  478|      0|        if(!p)
  479|      0|          result = CURLE_OUT_OF_MEMORY;
  480|      0|        else {
  481|      0|          if(data->set.postfieldsize)
  482|      0|            memcpy(p, argptr, (size_t)data->set.postfieldsize);
  483|       |
  484|      0|          data->set.str[STRING_COPYPOSTFIELDS] = p;
  485|      0|        }
  486|      0|      }
  487|      0|    }
  488|       |
  489|      0|    data->set.postfields = data->set.str[STRING_COPYPOSTFIELDS];
  490|      0|    data->set.method = HTTPREQ_POST;
  491|      0|    break;
  492|       |
  493|     26|  case CURLOPT_POSTFIELDS:
  494|       |    /*
  495|       |     * Like above, but use static data instead of copying it.
  496|       |     */
  497|     26|    data->set.postfields = va_arg(param, void *);
  498|       |    /* Release old copied data. */
  499|     26|    (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  500|     26|    data->set.method = HTTPREQ_POST;
  501|     26|    break;
  502|       |
  503|      0|  case CURLOPT_POSTFIELDSIZE:
  504|       |    /*
  505|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  506|       |     * figure it out. Enables binary posts.
  507|       |     */
  508|      0|    bigsize = va_arg(param, long);
  509|      0|    if(bigsize < -1)
  510|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  511|       |
  512|      0|    if(data->set.postfieldsize < bigsize &&
  513|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  514|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  515|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  516|      0|      data->set.postfields = NULL;
  517|      0|    }
  518|       |
  519|      0|    data->set.postfieldsize = bigsize;
  520|      0|    break;
  521|       |
  522|      0|  case CURLOPT_POSTFIELDSIZE_LARGE:
  523|       |    /*
  524|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  525|       |     * figure it out. Enables binary posts.
  526|       |     */
  527|      0|    bigsize = va_arg(param, curl_off_t);
  528|      0|    if(bigsize < -1)
  529|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  530|       |
  531|      0|    if(data->set.postfieldsize < bigsize &&
  532|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  533|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  534|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  535|      0|      data->set.postfields = NULL;
  536|      0|    }
  537|       |
  538|      0|    data->set.postfieldsize = bigsize;
  539|      0|    break;
  540|      0|#endif
  541|      0|#ifndef CURL_DISABLE_HTTP
  542|      0|  case CURLOPT_AUTOREFERER:
  543|       |    /*
  544|       |     * Switch on automatic referer that gets set if curl follows locations.
  545|       |     */
  546|      0|    data->set.http_auto_referer = (0 != va_arg(param, long)) ? TRUE : FALSE;
  547|      0|    break;
  548|       |
  549|    221|  case CURLOPT_ACCEPT_ENCODING:
  550|       |    /*
  551|       |     * String to use at the value of Accept-Encoding header.
  552|       |     *
  553|       |     * If the encoding is set to "" we use an Accept-Encoding header that
  554|       |     * encompasses all the encodings we support.
  555|       |     * If the encoding is set to NULL we don't send an Accept-Encoding header
  556|       |     * and ignore an received Content-Encoding header.
  557|       |     *
  558|       |     */
  559|    221|    argptr = va_arg(param, char *);
  560|    221|    if(argptr && !*argptr) {
  561|    179|      argptr = Curl_all_content_encodings();
  562|    179|      if(!argptr)
  563|      0|        result = CURLE_OUT_OF_MEMORY;
  564|    179|      else {
  565|    179|        result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  566|    179|        free(argptr);
  567|    179|      }
  568|    179|    }
  569|     42|    else
  570|     42|      result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  571|    221|    break;
  572|       |
  573|      0|  case CURLOPT_TRANSFER_ENCODING:
  574|      0|    data->set.http_transfer_encoding = (0 != va_arg(param, long)) ?
  575|      0|      TRUE : FALSE;
  576|      0|    break;
  577|       |
  578|    165|  case CURLOPT_FOLLOWLOCATION:
  579|       |    /*
  580|       |     * Follow Location: header hints on a HTTP-server.
  581|       |     */
  582|    165|    data->set.http_follow_location = (0 != va_arg(param, long)) ? TRUE : FALSE;
  583|    165|    break;
  584|       |
  585|      0|  case CURLOPT_UNRESTRICTED_AUTH:
  586|       |    /*
  587|       |     * Send authentication (user+password) when following locations, even when
  588|       |     * hostname changed.
  589|       |     */
  590|      0|    data->set.allow_auth_to_other_hosts =
  591|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
  592|      0|    break;
  593|       |
  594|      0|  case CURLOPT_MAXREDIRS:
  595|       |    /*
  596|       |     * The maximum amount of hops you allow curl to follow Location:
  597|       |     * headers. This should mostly be used to detect never-ending loops.
  598|       |     */
  599|      0|    arg = va_arg(param, long);
  600|      0|    if(arg < -1)
  601|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  602|      0|    data->set.maxredirs = arg;
  603|      0|    break;
  604|       |
  605|      0|  case CURLOPT_POSTREDIR:
  606|       |    /*
  607|       |     * Set the behavior of POST when redirecting
  608|       |     * CURL_REDIR_GET_ALL - POST is changed to GET after 301 and 302
  609|       |     * CURL_REDIR_POST_301 - POST is kept as POST after 301
  610|       |     * CURL_REDIR_POST_302 - POST is kept as POST after 302
  611|       |     * CURL_REDIR_POST_303 - POST is kept as POST after 303
  612|       |     * CURL_REDIR_POST_ALL - POST is kept as POST after 301, 302 and 303
  613|       |     * other - POST is kept as POST after 301 and 302
  614|       |     */
  615|      0|    arg = va_arg(param, long);
  616|      0|    if(arg < CURL_REDIR_GET_ALL)
  617|       |      /* no return error on too high numbers since the bitmask could be
  618|       |         extended in a future */
  619|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  620|      0|    data->set.keep_post = arg & CURL_REDIR_POST_ALL;
  621|      0|    break;
  622|       |
  623|      0|  case CURLOPT_POST:
  624|       |    /* Does this option serve a purpose anymore? Yes it does, when
  625|       |       CURLOPT_POSTFIELDS isn't used and the POST data is read off the
  626|       |       callback! */
  627|      0|    if(va_arg(param, long)) {
  628|      0|      data->set.method = HTTPREQ_POST;
  629|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  630|      0|    }
  631|      0|    else
  632|      0|      data->set.method = HTTPREQ_GET;
  633|      0|    break;
  634|       |
  635|      0|  case CURLOPT_HTTPPOST:
  636|       |    /*
  637|       |     * Set to make us do HTTP POST
  638|       |     */
  639|      0|    data->set.httppost = va_arg(param, struct curl_httppost *);
  640|      0|    data->set.method = HTTPREQ_POST_FORM;
  641|      0|    data->set.opt_no_body = FALSE; /* this is implied */
  642|      0|    break;
  643|       |
  644|      0|  case CURLOPT_AWS_SIGV4:
  645|       |    /*
  646|       |     * String that is merged to some authentication
  647|       |     * parameters are used by the algorithm.
  648|       |     */
  649|      0|    result = Curl_setstropt(&data->set.str[STRING_AWS_SIGV4],
  650|      0|                            va_arg(param, char *));
  651|       |    /*
  652|       |     * Basic been set by default it need to be unset here
  653|       |     */
  654|      0|    if(data->set.str[STRING_AWS_SIGV4])
  655|      0|      data->set.httpauth = CURLAUTH_AWS_SIGV4;
  656|      0|    break;
  657|       |
  658|    159|  case CURLOPT_MIMEPOST:
  659|       |    /*
  660|       |     * Set to make us do MIME/form POST
  661|       |     */
  662|    159|    result = Curl_mime_set_subparts(&data->set.mimepost,
  663|    159|                                    va_arg(param, curl_mime *), FALSE);
  664|    159|    if(!result) {
  665|    159|      data->set.method = HTTPREQ_POST_MIME;
  666|    159|      data->set.opt_no_body = FALSE; /* this is implied */
  667|    159|    }
  668|    159|    break;
  669|       |
  670|      0|  case CURLOPT_REFERER:
  671|       |    /*
  672|       |     * String to set in the HTTP Referer: field.
  673|       |     */
  674|      0|    if(data->state.referer_alloc) {
  675|      0|      Curl_safefree(data->state.referer);
  676|      0|      data->state.referer_alloc = FALSE;
  677|      0|    }
  678|      0|    result = Curl_setstropt(&data->set.str[STRING_SET_REFERER],
  679|      0|                            va_arg(param, char *));
  680|      0|    data->state.referer = data->set.str[STRING_SET_REFERER];
  681|      0|    break;
  682|       |
  683|      0|  case CURLOPT_USERAGENT:
  684|       |    /*
  685|       |     * String to use in the HTTP User-Agent field
  686|       |     */
  687|      0|    result = Curl_setstropt(&data->set.str[STRING_USERAGENT],
  688|      0|                            va_arg(param, char *));
  689|      0|    break;
  690|       |
  691|     99|  case CURLOPT_HTTPHEADER:
  692|       |    /*
  693|       |     * Set a list with HTTP headers to use (or replace internals with)
  694|       |     */
  695|     99|    data->set.headers = va_arg(param, struct curl_slist *);
  696|     99|    break;
  697|       |
  698|      0|#ifndef CURL_DISABLE_PROXY
  699|      0|  case CURLOPT_PROXYHEADER:
  700|       |    /*
  701|       |     * Set a list with proxy headers to use (or replace internals with)
  702|       |     *
  703|       |     * Since CURLOPT_HTTPHEADER was the only way to set HTTP headers for a
  704|       |     * long time we remain doing it this way until CURLOPT_PROXYHEADER is
  705|       |     * used. As soon as this option has been used, if set to anything but
  706|       |     * NULL, custom headers for proxies are only picked from this list.
  707|       |     *
  708|       |     * Set this option to NULL to restore the previous behavior.
  709|       |     */
  710|      0|    data->set.proxyheaders = va_arg(param, struct curl_slist *);
  711|      0|    break;
  712|      0|#endif
  713|      0|  case CURLOPT_HEADEROPT:
  714|       |    /*
  715|       |     * Set header option.
  716|       |     */
  717|      0|    arg = va_arg(param, long);
  718|      0|    data->set.sep_headers = (bool)((arg & CURLHEADER_SEPARATE)? TRUE: FALSE);
  719|      0|    break;
  720|       |
  721|      0|  case CURLOPT_HTTP200ALIASES:
  722|       |    /*
  723|       |     * Set a list of aliases for HTTP 200 in response header
  724|       |     */
  725|      0|    data->set.http200aliases = va_arg(param, struct curl_slist *);
  726|      0|    break;
  727|       |
  728|      0|#if !defined(CURL_DISABLE_COOKIES)
  729|      7|  case CURLOPT_COOKIE:
  730|       |    /*
  731|       |     * Cookie string to send to the remote server in the request.
  732|       |     */
  733|      7|    result = Curl_setstropt(&data->set.str[STRING_COOKIE],
  734|      7|                            va_arg(param, char *));
  735|      7|    break;
  736|       |
  737|      0|  case CURLOPT_COOKIEFILE:
  738|       |    /*
  739|       |     * Set cookie file to read and parse. Can be used multiple times.
  740|       |     */
  741|      0|    argptr = (char *)va_arg(param, void *);
  742|      0|    if(argptr) {
  743|      0|      struct curl_slist *cl;
  744|       |      /* general protection against mistakes and abuse */
  745|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  746|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  747|       |      /* append the cookie file name to the list of file names, and deal with
  748|       |         them later */
  749|      0|      cl = curl_slist_append(data->state.cookielist, argptr);
  750|      0|      if(!cl) {
  751|      0|        curl_slist_free_all(data->state.cookielist);
  752|      0|        data->state.cookielist = NULL;
  753|      0|        return CURLE_OUT_OF_MEMORY;
  754|      0|      }
  755|      0|      data->state.cookielist = cl; /* store the list for later use */
  756|      0|    }
  757|      0|    else {
  758|       |      /* clear the list of cookie files */
  759|      0|      curl_slist_free_all(data->state.cookielist);
  760|      0|      data->state.cookielist = NULL;
  761|       |
  762|      0|      if(!data->share || !data->share->cookies) {
  763|       |        /* throw away all existing cookies if this isn't a shared cookie
  764|       |           container */
  765|      0|        Curl_cookie_clearall(data->cookies);
  766|      0|        Curl_cookie_cleanup(data->cookies);
  767|      0|      }
  768|       |      /* disable the cookie engine */
  769|      0|      data->cookies = NULL;
  770|      0|    }
  771|      0|    break;
  772|       |
  773|  2.25k|  case CURLOPT_COOKIEJAR:
  774|       |    /*
  775|       |     * Set cookie file name to dump all cookies to when we're done.
  776|       |     */
  777|  2.25k|  {
  778|  2.25k|    struct CookieInfo *newcookies;
  779|  2.25k|    result = Curl_setstropt(&data->set.str[STRING_COOKIEJAR],
  780|  2.25k|                            va_arg(param, char *));
  781|       |
  782|       |    /*
  783|       |     * Activate the cookie parser. This may or may not already
  784|       |     * have been made.
  785|       |     */
  786|  2.25k|    newcookies = Curl_cookie_init(data, NULL, data->cookies,
  787|  2.25k|                                  data->set.cookiesession);
  788|  2.25k|    if(!newcookies)
  789|      0|      result = CURLE_OUT_OF_MEMORY;
  790|  2.25k|    data->cookies = newcookies;
  791|  2.25k|  }
  792|  2.25k|  break;
  793|       |
  794|      0|  case CURLOPT_COOKIESESSION:
  795|       |    /*
  796|       |     * Set this option to TRUE to start a new "cookie session". It will
  797|       |     * prevent the forthcoming read-cookies-from-file actions to accept
  798|       |     * cookies that are marked as being session cookies, as they belong to a
  799|       |     * previous session.
  800|       |     *
  801|       |     * In the original Netscape cookie spec, "session cookies" are cookies
  802|       |     * with no expire date set. RFC2109 describes the same action if no
  803|       |     * 'Max-Age' is set and RFC2965 includes the RFC2109 description and adds
  804|       |     * a 'Discard' action that can enforce the discard even for cookies that
  805|       |     * have a Max-Age.
  806|       |     *
  807|       |     * We run mostly with the original cookie spec, as hardly anyone implements
  808|       |     * anything else.
  809|       |     */
  810|      0|    data->set.cookiesession = (0 != va_arg(param, long)) ? TRUE : FALSE;
  811|      0|    break;
  812|       |
  813|      0|  case CURLOPT_COOKIELIST:
  814|      0|    argptr = va_arg(param, char *);
  815|       |
  816|      0|    if(!argptr)
  817|      0|      break;
  818|       |
  819|      0|    if(strcasecompare(argptr, "ALL")) {
  820|       |      /* clear all cookies */
  821|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  822|      0|      Curl_cookie_clearall(data->cookies);
  823|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  824|      0|    }
  825|      0|    else if(strcasecompare(argptr, "SESS")) {
  826|       |      /* clear session cookies */
  827|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  828|      0|      Curl_cookie_clearsess(data->cookies);
  829|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  830|      0|    }
  831|      0|    else if(strcasecompare(argptr, "FLUSH")) {
  832|       |      /* flush cookies to file, takes care of the locking */
  833|      0|      Curl_flush_cookies(data, FALSE);
  834|      0|    }
  835|      0|    else if(strcasecompare(argptr, "RELOAD")) {
  836|       |      /* reload cookies from file */
  837|      0|      Curl_cookie_loadfiles(data);
  838|      0|      break;
  839|      0|    }
  840|      0|    else {
  841|      0|      if(!data->cookies)
  842|       |        /* if cookie engine was not running, activate it */
  843|      0|        data->cookies = Curl_cookie_init(data, NULL, NULL, TRUE);
  844|       |
  845|       |      /* general protection against mistakes and abuse */
  846|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  847|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  848|      0|      argptr = strdup(argptr);
  849|      0|      if(!argptr || !data->cookies) {
  850|      0|        result = CURLE_OUT_OF_MEMORY;
  851|      0|        free(argptr);
  852|      0|      }
  853|      0|      else {
  854|      0|        Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  855|       |
  856|      0|        if(checkprefix("Set-Cookie:", argptr))
  857|       |          /* HTTP Header format line */
  858|      0|          Curl_cookie_add(data, data->cookies, TRUE, FALSE, argptr + 11, NULL,
  859|      0|                          NULL, TRUE);
  860|       |
  861|      0|        else
  862|       |          /* Netscape format line */
  863|      0|          Curl_cookie_add(data, data->cookies, FALSE, FALSE, argptr, NULL,
  864|      0|                          NULL, TRUE);
  865|       |
  866|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  867|      0|        free(argptr);
  868|      0|      }
  869|      0|    }
  870|       |
  871|      0|    break;
  872|      0|#endif /* !CURL_DISABLE_COOKIES */
  873|       |
  874|      0|  case CURLOPT_HTTPGET:
  875|       |    /*
  876|       |     * Set to force us do HTTP GET
  877|       |     */
  878|      0|    if(va_arg(param, long)) {
  879|      0|      data->set.method = HTTPREQ_GET;
  880|      0|      data->set.upload = FALSE; /* switch off upload */
  881|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  882|      0|    }
  883|      0|    break;
  884|       |
  885|    712|  case CURLOPT_HTTP_VERSION:
  886|       |    /*
  887|       |     * This sets a requested HTTP version to be used. The value is one of
  888|       |     * the listed enums in curl/curl.h.
  889|       |     */
  890|    712|    arg = va_arg(param, long);
  891|    712|    if(arg < CURL_HTTP_VERSION_NONE)
  892|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  893|       |#ifdef ENABLE_QUIC
  894|       |    if(arg == CURL_HTTP_VERSION_3)
  895|       |      ;
  896|       |    else
  897|       |#endif
  898|       |#if !defined(USE_NGHTTP2) && !defined(USE_HYPER)
  899|       |    if(arg >= CURL_HTTP_VERSION_2)
  900|       |      return CURLE_UNSUPPORTED_PROTOCOL;
  901|       |#else
  902|    712|    if(arg >= CURL_HTTP_VERSION_LAST)
  903|      1|      return CURLE_UNSUPPORTED_PROTOCOL;
  904|    711|    if(arg == CURL_HTTP_VERSION_NONE)
  905|      1|      arg = CURL_HTTP_VERSION_2TLS;
  906|    711|#endif
  907|    711|    data->set.httpwant = (unsigned char)arg;
  908|    711|    break;
  909|       |
  910|      0|  case CURLOPT_EXPECT_100_TIMEOUT_MS:
  911|       |    /*
  912|       |     * Time to wait for a response to a HTTP request containing an
  913|       |     * Expect: 100-continue header before sending the data anyway.
  914|       |     */
  915|      0|    arg = va_arg(param, long);
  916|      0|    if(arg < 0)
  917|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  918|      0|    data->set.expect_100_timeout = arg;
  919|      0|    break;
  920|       |
  921|      0|  case CURLOPT_HTTP09_ALLOWED:
  922|      0|    arg = va_arg(param, unsigned long);
  923|      0|    if(arg > 1L)
  924|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  925|       |#ifdef USE_HYPER
  926|       |    /* Hyper does not support HTTP/0.9 */
  927|       |    if(arg)
  928|       |      return CURLE_BAD_FUNCTION_ARGUMENT;
  929|       |#else
  930|      0|    data->set.http09_allowed = arg ? TRUE : FALSE;
  931|      0|#endif
  932|      0|    break;
  933|      0|#endif   /* CURL_DISABLE_HTTP */
  934|       |
  935|     95|  case CURLOPT_HTTPAUTH:
  936|       |    /*
  937|       |     * Set HTTP Authentication type BITMASK.
  938|       |     */
  939|     95|  {
  940|     95|    int bitcheck;
  941|     95|    bool authbits;
  942|     95|    unsigned long auth = va_arg(param, unsigned long);
  943|       |
  944|     95|    if(auth == CURLAUTH_NONE) {
  945|      1|      data->set.httpauth = auth;
  946|      1|      break;
  947|      1|    }
  948|       |
  949|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
  950|       |       rest we need to handle it as normal DIGEST */
  951|     94|    data->state.authhost.iestyle =
  952|     94|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
  953|       |
  954|     94|    if(auth & CURLAUTH_DIGEST_IE) {
  955|     20|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
  956|     20|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
  957|     20|    }
  958|       |
  959|       |    /* switch off bits we can't support */
  960|       |#ifndef USE_NTLM
  961|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
  962|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  963|       |#elif !defined(NTLM_WB_ENABLED)
  964|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  965|       |#endif
  966|     94|#ifndef USE_SPNEGO
  967|     94|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
  968|       |                                    GSS-API or SSPI */
  969|     94|#endif
  970|       |
  971|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
  972|     94|    bitcheck = 0;
  973|     94|    authbits = FALSE;
  974|    350|    while(bitcheck < 31) {
  975|    349|      if(auth & (1UL << bitcheck++)) {
  976|     93|        authbits = TRUE;
  977|     93|        break;
  978|     93|      }
  979|    349|    }
  980|     94|    if(!authbits)
  981|      1|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
  982|       |
  983|     93|    data->set.httpauth = auth;
  984|     93|  }
  985|      0|  break;
  986|       |
  987|    338|  case CURLOPT_CUSTOMREQUEST:
  988|       |    /*
  989|       |     * Set a custom string to use as request
  990|       |     */
  991|    338|    result = Curl_setstropt(&data->set.str[STRING_CUSTOMREQUEST],
  992|    338|                            va_arg(param, char *));
  993|       |
  994|       |    /* we don't set
  995|       |       data->set.method = HTTPREQ_CUSTOM;
  996|       |       here, we continue as if we were using the already set type
  997|       |       and this just changes the actual request keyword */
  998|    338|    break;
  999|       |
 1000|      0|#ifndef CURL_DISABLE_PROXY
 1001|      0|  case CURLOPT_HTTPPROXYTUNNEL:
 1002|       |    /*
 1003|       |     * Tunnel operations through the proxy instead of normal proxy use
 1004|       |     */
 1005|      0|    data->set.tunnel_thru_httpproxy = (0 != va_arg(param, long)) ?
 1006|      0|      TRUE : FALSE;
 1007|      0|    break;
 1008|       |
 1009|      0|  case CURLOPT_PROXYPORT:
 1010|       |    /*
 1011|       |     * Explicitly set HTTP proxy port number.
 1012|       |     */
 1013|      0|    arg = va_arg(param, long);
 1014|      0|    if((arg < 0) || (arg > 65535))
 1015|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1016|      0|    data->set.proxyport = arg;
 1017|      0|    break;
 1018|       |
 1019|      0|  case CURLOPT_PROXYAUTH:
 1020|       |    /*
 1021|       |     * Set HTTP Authentication type BITMASK.
 1022|       |     */
 1023|      0|  {
 1024|      0|    int bitcheck;
 1025|      0|    bool authbits;
 1026|      0|    unsigned long auth = va_arg(param, unsigned long);
 1027|       |
 1028|      0|    if(auth == CURLAUTH_NONE) {
 1029|      0|      data->set.proxyauth = auth;
 1030|      0|      break;
 1031|      0|    }
 1032|       |
 1033|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
 1034|       |       rest we need to handle it as normal DIGEST */
 1035|      0|    data->state.authproxy.iestyle =
 1036|      0|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
 1037|       |
 1038|      0|    if(auth & CURLAUTH_DIGEST_IE) {
 1039|      0|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
 1040|      0|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
 1041|      0|    }
 1042|       |    /* switch off bits we can't support */
 1043|       |#ifndef USE_NTLM
 1044|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
 1045|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1046|       |#elif !defined(NTLM_WB_ENABLED)
 1047|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1048|       |#endif
 1049|      0|#ifndef USE_SPNEGO
 1050|      0|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
 1051|       |                                    GSS-API or SSPI */
 1052|      0|#endif
 1053|       |
 1054|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
 1055|      0|    bitcheck = 0;
 1056|      0|    authbits = FALSE;
 1057|      0|    while(bitcheck < 31) {
 1058|      0|      if(auth & (1UL << bitcheck++)) {
 1059|      0|        authbits = TRUE;
 1060|      0|        break;
 1061|      0|      }
 1062|      0|    }
 1063|      0|    if(!authbits)
 1064|      0|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
 1065|       |
 1066|      0|    data->set.proxyauth = auth;
 1067|      0|  }
 1068|      0|  break;
 1069|       |
 1070|      0|  case CURLOPT_PROXY:
 1071|       |    /*
 1072|       |     * Set proxy server:port to use as proxy.
 1073|       |     *
 1074|       |     * If the proxy is set to "" (and CURLOPT_SOCKS_PROXY is set to "" or NULL)
 1075|       |     * we explicitly say that we don't want to use a proxy
 1076|       |     * (even though there might be environment variables saying so).
 1077|       |     *
 1078|       |     * Setting it to NULL, means no proxy but allows the environment variables
 1079|       |     * to decide for us (if CURLOPT_SOCKS_PROXY setting it to NULL).
 1080|       |     */
 1081|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY],
 1082|      0|                            va_arg(param, char *));
 1083|      0|    break;
 1084|       |
 1085|      0|  case CURLOPT_PRE_PROXY:
 1086|       |    /*
 1087|       |     * Set proxy server:port to use as SOCKS proxy.
 1088|       |     *
 1089|       |     * If the proxy is set to "" or NULL we explicitly say that we don't want
 1090|       |     * to use the socks proxy.
 1091|       |     */
 1092|      0|    result = Curl_setstropt(&data->set.str[STRING_PRE_PROXY],
 1093|      0|                            va_arg(param, char *));
 1094|      0|    break;
 1095|       |
 1096|      0|  case CURLOPT_PROXYTYPE:
 1097|       |    /*
 1098|       |     * Set proxy type. HTTP/HTTP_1_0/SOCKS4/SOCKS4a/SOCKS5/SOCKS5_HOSTNAME
 1099|       |     */
 1100|      0|    arg = va_arg(param, long);
 1101|      0|    if((arg < CURLPROXY_HTTP) || (arg > CURLPROXY_SOCKS5_HOSTNAME))
 1102|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1103|      0|    data->set.proxytype = (curl_proxytype)arg;
 1104|      0|    break;
 1105|       |
 1106|      0|  case CURLOPT_PROXY_TRANSFER_MODE:
 1107|       |    /*
 1108|       |     * set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy
 1109|       |     */
 1110|      0|    switch(va_arg(param, long)) {
 1111|      0|    case 0:
 1112|      0|      data->set.proxy_transfer_mode = FALSE;
 1113|      0|      break;
 1114|      0|    case 1:
 1115|      0|      data->set.proxy_transfer_mode = TRUE;
 1116|      0|      break;
 1117|      0|    default:
 1118|       |      /* reserve other values for future use */
 1119|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1120|      0|      break;
 1121|      0|    }
 1122|      0|    break;
 1123|      0|#endif   /* CURL_DISABLE_PROXY */
 1124|       |
 1125|      0|  case CURLOPT_SOCKS5_AUTH:
 1126|      0|    data->set.socks5auth = va_arg(param, unsigned long);
 1127|      0|    if(data->set.socks5auth & ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))
 1128|      0|      result = CURLE_NOT_BUILT_IN;
 1129|      0|    break;
 1130|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
 1131|       |  case CURLOPT_SOCKS5_GSSAPI_NEC:
 1132|       |    /*
 1133|       |     * Set flag for NEC SOCK5 support
 1134|       |     */
 1135|       |    data->set.socks5_gssapi_nec = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1136|       |    break;
 1137|       |#endif
 1138|      0|#ifndef CURL_DISABLE_PROXY
 1139|      0|  case CURLOPT_SOCKS5_GSSAPI_SERVICE:
 1140|      0|  case CURLOPT_PROXY_SERVICE_NAME:
 1141|       |    /*
 1142|       |     * Set proxy authentication service name for Kerberos 5 and SPNEGO
 1143|       |     */
 1144|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY_SERVICE_NAME],
 1145|      0|                            va_arg(param, char *));
 1146|      0|    break;
 1147|      0|#endif
 1148|      0|  case CURLOPT_SERVICE_NAME:
 1149|       |    /*
 1150|       |     * Set authentication service name for DIGEST-MD5, Kerberos 5 and SPNEGO
 1151|       |     */
 1152|      0|    result = Curl_setstropt(&data->set.str[STRING_SERVICE_NAME],
 1153|      0|                            va_arg(param, char *));
 1154|      0|    break;
 1155|       |
 1156|      0|  case CURLOPT_HEADERDATA:
 1157|       |    /*
 1158|       |     * Custom pointer to pass the header write callback function
 1159|       |     */
 1160|      0|    data->set.writeheader = (void *)va_arg(param, void *);
 1161|      0|    break;
 1162|      0|  case CURLOPT_ERRORBUFFER:
 1163|       |    /*
 1164|       |     * Error buffer provided by the caller to get the human readable
 1165|       |     * error string in.
 1166|       |     */
 1167|      0|    data->set.errorbuffer = va_arg(param, char *);
 1168|      0|    break;
 1169|  2.25k|  case CURLOPT_WRITEDATA:
 1170|       |    /*
 1171|       |     * FILE pointer to write to. Or possibly
 1172|       |     * used as argument to the write callback.
 1173|       |     */
 1174|  2.25k|    data->set.out = va_arg(param, void *);
 1175|  2.25k|    break;
 1176|       |
 1177|      0|  case CURLOPT_DIRLISTONLY:
 1178|       |    /*
 1179|       |     * An option that changes the command to one that asks for a list only, no
 1180|       |     * file info details. Used for FTP, POP3 and SFTP.
 1181|       |     */
 1182|      0|    data->set.list_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1183|      0|    break;
 1184|       |
 1185|      0|  case CURLOPT_APPEND:
 1186|       |    /*
 1187|       |     * We want to upload and append to an existing file. Used for FTP and
 1188|       |     * SFTP.
 1189|       |     */
 1190|      0|    data->set.remote_append = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1191|      0|    break;
 1192|       |
 1193|      0|#ifndef CURL_DISABLE_FTP
 1194|      0|  case CURLOPT_FTP_FILEMETHOD:
 1195|       |    /*
 1196|       |     * How do access files over FTP.
 1197|       |     */
 1198|      0|    arg = va_arg(param, long);
 1199|      0|    if((arg < CURLFTPMETHOD_DEFAULT) || (arg >= CURLFTPMETHOD_LAST))
 1200|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1201|      0|    data->set.ftp_filemethod = (curl_ftpfile)arg;
 1202|      0|    break;
 1203|      0|  case CURLOPT_FTPPORT:
 1204|       |    /*
 1205|       |     * Use FTP PORT, this also specifies which IP address to use
 1206|       |     */
 1207|      0|    result = Curl_setstropt(&data->set.str[STRING_FTPPORT],
 1208|      0|                            va_arg(param, char *));
 1209|      0|    data->set.ftp_use_port = (data->set.str[STRING_FTPPORT]) ? TRUE : FALSE;
 1210|      0|    break;
 1211|       |
 1212|      0|  case CURLOPT_FTP_USE_EPRT:
 1213|      0|    data->set.ftp_use_eprt = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1214|      0|    break;
 1215|       |
 1216|      0|  case CURLOPT_FTP_USE_EPSV:
 1217|      0|    data->set.ftp_use_epsv = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1218|      0|    break;
 1219|       |
 1220|      0|  case CURLOPT_FTP_USE_PRET:
 1221|      0|    data->set.ftp_use_pret = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1222|      0|    break;
 1223|       |
 1224|      0|  case CURLOPT_FTP_SSL_CCC:
 1225|      0|    arg = va_arg(param, long);
 1226|      0|    if((arg < CURLFTPSSL_CCC_NONE) || (arg >= CURLFTPSSL_CCC_LAST))
 1227|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1228|      0|    data->set.ftp_ccc = (curl_ftpccc)arg;
 1229|      0|    break;
 1230|       |
 1231|      0|  case CURLOPT_FTP_SKIP_PASV_IP:
 1232|       |    /*
 1233|       |     * Enable or disable FTP_SKIP_PASV_IP, which will disable/enable the
 1234|       |     * bypass of the IP address in PASV responses.
 1235|       |     */
 1236|      0|    data->set.ftp_skip_ip = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1237|      0|    break;
 1238|       |
 1239|      0|  case CURLOPT_FTP_ACCOUNT:
 1240|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ACCOUNT],
 1241|      0|                            va_arg(param, char *));
 1242|      0|    break;
 1243|       |
 1244|      0|  case CURLOPT_FTP_ALTERNATIVE_TO_USER:
 1245|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ALTERNATIVE_TO_USER],
 1246|      0|                            va_arg(param, char *));
 1247|      0|    break;
 1248|       |
 1249|      0|  case CURLOPT_FTPSSLAUTH:
 1250|       |    /*
 1251|       |     * Set a specific auth for FTP-SSL transfers.
 1252|       |     */
 1253|      0|    arg = va_arg(param, long);
 1254|      0|    if((arg < CURLFTPAUTH_DEFAULT) || (arg >= CURLFTPAUTH_LAST))
 1255|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1256|      0|    data->set.ftpsslauth = (curl_ftpauth)arg;
 1257|      0|    break;
 1258|      0|  case CURLOPT_KRBLEVEL:
 1259|       |    /*
 1260|       |     * A string that defines the kerberos security level.
 1261|       |     */
 1262|      0|    result = Curl_setstropt(&data->set.str[STRING_KRB_LEVEL],
 1263|      0|                            va_arg(param, char *));
 1264|      0|    data->set.krb = (data->set.str[STRING_KRB_LEVEL]) ? TRUE : FALSE;
 1265|      0|    break;
 1266|      0|#endif
 1267|      0|  case CURLOPT_FTP_CREATE_MISSING_DIRS:
 1268|       |    /*
 1269|       |     * An FTP/SFTP option that modifies an upload to create missing
 1270|       |     * directories on the server.
 1271|       |     */
 1272|      0|    arg = va_arg(param, long);
 1273|       |    /* reserve other values for future use */
 1274|      0|    if((arg < CURLFTP_CREATE_DIR_NONE) ||
 1275|      0|       (arg > CURLFTP_CREATE_DIR_RETRY))
 1276|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1277|      0|    else
 1278|      0|      data->set.ftp_create_missing_dirs = (int)arg;
 1279|      0|    break;
 1280|  2.25k|  case CURLOPT_READDATA:
 1281|       |    /*
 1282|       |     * FILE pointer to read the file to be uploaded from. Or possibly
 1283|       |     * used as argument to the read callback.
 1284|       |     */
 1285|  2.25k|    data->set.in_set = va_arg(param, void *);
 1286|  2.25k|    break;
 1287|      0|  case CURLOPT_INFILESIZE:
 1288|       |    /*
 1289|       |     * If known, this should inform curl about the file size of the
 1290|       |     * to-be-uploaded file.
 1291|       |     */
 1292|      0|    arg = va_arg(param, long);
 1293|      0|    if(arg < -1)
 1294|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1295|      0|    data->set.filesize = arg;
 1296|      0|    break;
 1297|     53|  case CURLOPT_INFILESIZE_LARGE:
 1298|       |    /*
 1299|       |     * If known, this should inform curl about the file size of the
 1300|       |     * to-be-uploaded file.
 1301|       |     */
 1302|     53|    bigsize = va_arg(param, curl_off_t);
 1303|     53|    if(bigsize < -1)
 1304|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1305|     53|    data->set.filesize = bigsize;
 1306|     53|    break;
 1307|      0|  case CURLOPT_LOW_SPEED_LIMIT:
 1308|       |    /*
 1309|       |     * The low speed limit that if transfers are below this for
 1310|       |     * CURLOPT_LOW_SPEED_TIME, the transfer is aborted.
 1311|       |     */
 1312|      0|    arg = va_arg(param, long);
 1313|      0|    if(arg < 0)
 1314|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1315|      0|    data->set.low_speed_limit = arg;
 1316|      0|    break;
 1317|      0|  case CURLOPT_MAX_SEND_SPEED_LARGE:
 1318|       |    /*
 1319|       |     * When transfer uploads are faster then CURLOPT_MAX_SEND_SPEED_LARGE
 1320|       |     * bytes per second the transfer is throttled..
 1321|       |     */
 1322|      0|    bigsize = va_arg(param, curl_off_t);
 1323|      0|    if(bigsize < 0)
 1324|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1325|      0|    data->set.max_send_speed = bigsize;
 1326|      0|    break;
 1327|      0|  case CURLOPT_MAX_RECV_SPEED_LARGE:
 1328|       |    /*
 1329|       |     * When receiving data faster than CURLOPT_MAX_RECV_SPEED_LARGE bytes per
 1330|       |     * second the transfer is throttled..
 1331|       |     */
 1332|      0|    bigsize = va_arg(param, curl_off_t);
 1333|      0|    if(bigsize < 0)
 1334|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1335|      0|    data->set.max_recv_speed = bigsize;
 1336|      0|    break;
 1337|      0|  case CURLOPT_LOW_SPEED_TIME:
 1338|       |    /*
 1339|       |     * The low speed time that if transfers are below the set
 1340|       |     * CURLOPT_LOW_SPEED_LIMIT during this time, the transfer is aborted.
 1341|       |     */
 1342|      0|    arg = va_arg(param, long);
 1343|      0|    if(arg < 0)
 1344|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1345|      0|    data->set.low_speed_time = arg;
 1346|      0|    break;
 1347|      0|  case CURLOPT_CURLU:
 1348|       |    /*
 1349|       |     * pass CURLU to set URL
 1350|       |     */
 1351|      0|    data->set.uh = va_arg(param, CURLU *);
 1352|      0|    break;
 1353|  2.20k|  case CURLOPT_URL:
 1354|       |    /*
 1355|       |     * The URL to fetch.
 1356|       |     */
 1357|  2.20k|    if(data->state.url_alloc) {
 1358|       |      /* the already set URL is allocated, free it first! */
 1359|      0|      Curl_safefree(data->state.url);
 1360|      0|      data->state.url_alloc = FALSE;
 1361|      0|    }
 1362|  2.20k|    result = Curl_setstropt(&data->set.str[STRING_SET_URL],
 1363|  2.20k|                            va_arg(param, char *));
 1364|  2.20k|    data->state.url = data->set.str[STRING_SET_URL];
 1365|  2.20k|    break;
 1366|      0|  case CURLOPT_PORT:
 1367|       |    /*
 1368|       |     * The port number to use when getting the URL
 1369|       |     */
 1370|      0|    arg = va_arg(param, long);
 1371|      0|    if((arg < 0) || (arg > 65535))
 1372|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1373|      0|    data->set.use_port = arg;
 1374|      0|    break;
 1375|      0|  case CURLOPT_TIMEOUT:
 1376|       |    /*
 1377|       |     * The maximum time you allow curl to use for a single transfer
 1378|       |     * operation.
 1379|       |     */
 1380|      0|    arg = va_arg(param, long);
 1381|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1382|      0|      data->set.timeout = arg * 1000;
 1383|      0|    else
 1384|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1385|      0|    break;
 1386|       |
 1387|  2.25k|  case CURLOPT_TIMEOUT_MS:
 1388|  2.25k|    arg = va_arg(param, long);
 1389|  2.25k|    if(arg < 0)
 1390|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1391|  2.25k|    data->set.timeout = arg;
 1392|  2.25k|    break;
 1393|       |
 1394|      0|  case CURLOPT_CONNECTTIMEOUT:
 1395|       |    /*
 1396|       |     * The maximum time you allow curl to use to connect.
 1397|       |     */
 1398|      0|    arg = va_arg(param, long);
 1399|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1400|      0|      data->set.connecttimeout = arg * 1000;
 1401|      0|    else
 1402|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1403|      0|    break;
 1404|       |
 1405|      0|  case CURLOPT_CONNECTTIMEOUT_MS:
 1406|      0|    arg = va_arg(param, long);
 1407|      0|    if(arg < 0)
 1408|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|      0|    data->set.connecttimeout = arg;
 1410|      0|    break;
 1411|       |
 1412|      0|  case CURLOPT_ACCEPTTIMEOUT_MS:
 1413|       |    /*
 1414|       |     * The maximum time you allow curl to wait for server connect
 1415|       |     */
 1416|      0|    arg = va_arg(param, long);
 1417|      0|    if(arg < 0)
 1418|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1419|      0|    data->set.accepttimeout = arg;
 1420|      0|    break;
 1421|       |
 1422|      0|  case CURLOPT_USERPWD:
 1423|       |    /*
 1424|       |     * user:password to use in the operation
 1425|       |     */
 1426|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1427|      0|                               &data->set.str[STRING_USERNAME],
 1428|      0|                               &data->set.str[STRING_PASSWORD]);
 1429|      0|    break;
 1430|       |
 1431|    196|  case CURLOPT_USERNAME:
 1432|       |    /*
 1433|       |     * authentication user name to use in the operation
 1434|       |     */
 1435|    196|    result = Curl_setstropt(&data->set.str[STRING_USERNAME],
 1436|    196|                            va_arg(param, char *));
 1437|    196|    break;
 1438|     37|  case CURLOPT_PASSWORD:
 1439|       |    /*
 1440|       |     * authentication password to use in the operation
 1441|       |     */
 1442|     37|    result = Curl_setstropt(&data->set.str[STRING_PASSWORD],
 1443|     37|                            va_arg(param, char *));
 1444|     37|    break;
 1445|       |
 1446|      0|  case CURLOPT_LOGIN_OPTIONS:
 1447|       |    /*
 1448|       |     * authentication options to use in the operation
 1449|       |     */
 1450|      0|    result = Curl_setstropt(&data->set.str[STRING_OPTIONS],
 1451|      0|                            va_arg(param, char *));
 1452|      0|    break;
 1453|       |
 1454|      0|  case CURLOPT_XOAUTH2_BEARER:
 1455|       |    /*
 1456|       |     * OAuth 2.0 bearer token to use in the operation
 1457|       |     */
 1458|      0|    result = Curl_setstropt(&data->set.str[STRING_BEARER],
 1459|      0|                            va_arg(param, char *));
 1460|      0|    break;
 1461|       |
 1462|      0|  case CURLOPT_POSTQUOTE:
 1463|       |    /*
 1464|       |     * List of RAW FTP commands to use after a transfer
 1465|       |     */
 1466|      0|    data->set.postquote = va_arg(param, struct curl_slist *);
 1467|      0|    break;
 1468|      0|  case CURLOPT_PREQUOTE:
 1469|       |    /*
 1470|       |     * List of RAW FTP commands to use prior to RETR (Wesley Laxton)
 1471|       |     */
 1472|      0|    data->set.prequote = va_arg(param, struct curl_slist *);
 1473|      0|    break;
 1474|      0|  case CURLOPT_QUOTE:
 1475|       |    /*
 1476|       |     * List of RAW FTP commands to use before a transfer
 1477|       |     */
 1478|      0|    data->set.quote = va_arg(param, struct curl_slist *);
 1479|      0|    break;
 1480|      0|  case CURLOPT_RESOLVE:
 1481|       |    /*
 1482|       |     * List of HOST:PORT:[addresses] strings to populate the DNS cache with
 1483|       |     * Entries added this way will remain in the cache until explicitly
 1484|       |     * removed or the handle is cleaned up.
 1485|       |     *
 1486|       |     * Prefix the HOST with plus sign (+) to have the entry expire just like
 1487|       |     * automatically added entries.
 1488|       |     *
 1489|       |     * Prefix the HOST with dash (-) to _remove_ the entry from the cache.
 1490|       |     *
 1491|       |     * This API can remove any entry from the DNS cache, but only entries
 1492|       |     * that aren't actually in use right now will be pruned immediately.
 1493|       |     */
 1494|      0|    data->set.resolve = va_arg(param, struct curl_slist *);
 1495|      0|    data->state.resolve = data->set.resolve;
 1496|      0|    break;
 1497|      0|  case CURLOPT_PROGRESSFUNCTION:
 1498|       |    /*
 1499|       |     * Progress callback function
 1500|       |     */
 1501|      0|    data->set.fprogress = va_arg(param, curl_progress_callback);
 1502|      0|    if(data->set.fprogress)
 1503|      0|      data->progress.callback = TRUE; /* no longer internal */
 1504|      0|    else
 1505|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1506|      0|    break;
 1507|       |
 1508|      0|  case CURLOPT_XFERINFOFUNCTION:
 1509|       |    /*
 1510|       |     * Transfer info callback function
 1511|       |     */
 1512|      0|    data->set.fxferinfo = va_arg(param, curl_xferinfo_callback);
 1513|      0|    if(data->set.fxferinfo)
 1514|      0|      data->progress.callback = TRUE; /* no longer internal */
 1515|      0|    else
 1516|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1517|       |
 1518|      0|    break;
 1519|       |
 1520|      0|  case CURLOPT_PROGRESSDATA:
 1521|       |    /*
 1522|       |     * Custom client data to pass to the progress callback
 1523|       |     */
 1524|      0|    data->set.progress_client = va_arg(param, void *);
 1525|      0|    break;
 1526|       |
 1527|      0|#ifndef CURL_DISABLE_PROXY
 1528|      0|  case CURLOPT_PROXYUSERPWD:
 1529|       |    /*
 1530|       |     * user:password needed to use the proxy
 1531|       |     */
 1532|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1533|      0|                               &data->set.str[STRING_PROXYUSERNAME],
 1534|      0|                               &data->set.str[STRING_PROXYPASSWORD]);
 1535|      0|    break;
 1536|      0|  case CURLOPT_PROXYUSERNAME:
 1537|       |    /*
 1538|       |     * authentication user name to use in the operation
 1539|       |     */
 1540|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYUSERNAME],
 1541|      0|                            va_arg(param, char *));
 1542|      0|    break;
 1543|      0|  case CURLOPT_PROXYPASSWORD:
 1544|       |    /*
 1545|       |     * authentication password to use in the operation
 1546|       |     */
 1547|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYPASSWORD],
 1548|      0|                            va_arg(param, char *));
 1549|      0|    break;
 1550|      0|  case CURLOPT_NOPROXY:
 1551|       |    /*
 1552|       |     * proxy exception list
 1553|       |     */
 1554|      0|    result = Curl_setstropt(&data->set.str[STRING_NOPROXY],
 1555|      0|                            va_arg(param, char *));
 1556|      0|    break;
 1557|      0|#endif
 1558|       |
 1559|     19|  case CURLOPT_RANGE:
 1560|       |    /*
 1561|       |     * What range of the file you want to transfer
 1562|       |     */
 1563|     19|    result = Curl_setstropt(&data->set.str[STRING_SET_RANGE],
 1564|     19|                            va_arg(param, char *));
 1565|     19|    break;
 1566|      0|  case CURLOPT_RESUME_FROM:
 1567|       |    /*
 1568|       |     * Resume transfer at the given file position
 1569|       |     */
 1570|      0|    arg = va_arg(param, long);
 1571|      0|    if(arg < -1)
 1572|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1573|      0|    data->set.set_resume_from = arg;
 1574|      0|    break;
 1575|      0|  case CURLOPT_RESUME_FROM_LARGE:
 1576|       |    /*
 1577|       |     * Resume transfer at the given file position
 1578|       |     */
 1579|      0|    bigsize = va_arg(param, curl_off_t);
 1580|      0|    if(bigsize < -1)
 1581|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1582|      0|    data->set.set_resume_from = bigsize;
 1583|      0|    break;
 1584|      0|  case CURLOPT_DEBUGFUNCTION:
 1585|       |    /*
 1586|       |     * stderr write callback.
 1587|       |     */
 1588|      0|    data->set.fdebug = va_arg(param, curl_debug_callback);
 1589|       |    /*
 1590|       |     * if the callback provided is NULL, it'll use the default callback
 1591|       |     */
 1592|      0|    break;
 1593|      0|  case CURLOPT_DEBUGDATA:
 1594|       |    /*
 1595|       |     * Set to a void * that should receive all error writes. This
 1596|       |     * defaults to CURLOPT_STDERR for normal operations.
 1597|       |     */
 1598|      0|    data->set.debugdata = va_arg(param, void *);
 1599|      0|    break;
 1600|      0|  case CURLOPT_STDERR:
 1601|       |    /*
 1602|       |     * Set to a FILE * that should receive all error writes. This
 1603|       |     * defaults to stderr for normal operations.
 1604|       |     */
 1605|      0|    data->set.err = va_arg(param, FILE *);
 1606|      0|    if(!data->set.err)
 1607|      0|      data->set.err = stderr;
 1608|      0|    break;
 1609|      0|  case CURLOPT_HEADERFUNCTION:
 1610|       |    /*
 1611|       |     * Set header write callback
 1612|       |     */
 1613|      0|    data->set.fwrite_header = va_arg(param, curl_write_callback);
 1614|      0|    break;
 1615|  2.25k|  case CURLOPT_WRITEFUNCTION:
 1616|       |    /*
 1617|       |     * Set data write callback
 1618|       |     */
 1619|  2.25k|    data->set.fwrite_func = va_arg(param, curl_write_callback);
 1620|  2.25k|    if(!data->set.fwrite_func) {
 1621|      0|      data->set.is_fwrite_set = 0;
 1622|       |      /* When set to NULL, reset to our internal default function */
 1623|      0|      data->set.fwrite_func = (curl_write_callback)fwrite;
 1624|      0|    }
 1625|  2.25k|    else
 1626|  2.25k|      data->set.is_fwrite_set = 1;
 1627|  2.25k|    break;
 1628|  2.25k|  case CURLOPT_READFUNCTION:
 1629|       |    /*
 1630|       |     * Read data callback
 1631|       |     */
 1632|  2.25k|    data->set.fread_func_set = va_arg(param, curl_read_callback);
 1633|  2.25k|    if(!data->set.fread_func_set) {
 1634|      0|      data->set.is_fread_set = 0;
 1635|       |      /* When set to NULL, reset to our internal default function */
 1636|      0|      data->set.fread_func_set = (curl_read_callback)fread;
 1637|      0|    }
 1638|  2.25k|    else
 1639|  2.25k|      data->set.is_fread_set = 1;
 1640|  2.25k|    break;
 1641|      0|  case CURLOPT_SEEKFUNCTION:
 1642|       |    /*
 1643|       |     * Seek callback. Might be NULL.
 1644|       |     */
 1645|      0|    data->set.seek_func = va_arg(param, curl_seek_callback);
 1646|      0|    break;
 1647|      0|  case CURLOPT_SEEKDATA:
 1648|       |    /*
 1649|       |     * Seek control callback. Might be NULL.
 1650|       |     */
 1651|      0|    data->set.seek_client = va_arg(param, void *);
 1652|      0|    break;
 1653|      0|  case CURLOPT_CONV_FROM_NETWORK_FUNCTION:
 1654|       |    /*
 1655|       |     * "Convert from network encoding" callback
 1656|       |     */
 1657|      0|    data->set.convfromnetwork = va_arg(param, curl_conv_callback);
 1658|      0|    break;
 1659|      0|  case CURLOPT_CONV_TO_NETWORK_FUNCTION:
 1660|       |    /*
 1661|       |     * "Convert to network encoding" callback
 1662|       |     */
 1663|      0|    data->set.convtonetwork = va_arg(param, curl_conv_callback);
 1664|      0|    break;
 1665|      0|  case CURLOPT_CONV_FROM_UTF8_FUNCTION:
 1666|       |    /*
 1667|       |     * "Convert from UTF-8 encoding" callback
 1668|       |     */
 1669|      0|    data->set.convfromutf8 = va_arg(param, curl_conv_callback);
 1670|      0|    break;
 1671|      0|  case CURLOPT_IOCTLFUNCTION:
 1672|       |    /*
 1673|       |     * I/O control callback. Might be NULL.
 1674|       |     */
 1675|      0|    data->set.ioctl_func = va_arg(param, curl_ioctl_callback);
 1676|      0|    break;
 1677|      0|  case CURLOPT_IOCTLDATA:
 1678|       |    /*
 1679|       |     * I/O control data pointer. Might be NULL.
 1680|       |     */
 1681|      0|    data->set.ioctl_client = va_arg(param, void *);
 1682|      0|    break;
 1683|      0|  case CURLOPT_SSLCERT:
 1684|       |    /*
 1685|       |     * String that holds file name of the SSL certificate to use
 1686|       |     */
 1687|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT],
 1688|      0|                            va_arg(param, char *));
 1689|      0|    break;
 1690|      0|  case CURLOPT_SSLCERT_BLOB:
 1691|       |    /*
 1692|       |     * Blob that holds file content of the SSL certificate to use
 1693|       |     */
 1694|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT],
 1695|      0|                             va_arg(param, struct curl_blob *));
 1696|      0|    break;
 1697|      0|#ifndef CURL_DISABLE_PROXY
 1698|      0|  case CURLOPT_PROXY_SSLCERT:
 1699|       |    /*
 1700|       |     * String that holds file name of the SSL certificate to use for proxy
 1701|       |     */
 1702|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_PROXY],
 1703|      0|                            va_arg(param, char *));
 1704|      0|    break;
 1705|      0|  case CURLOPT_PROXY_SSLCERT_BLOB:
 1706|       |    /*
 1707|       |     * Blob that holds file content of the SSL certificate to use for proxy
 1708|       |     */
 1709|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT_PROXY],
 1710|      0|                             va_arg(param, struct curl_blob *));
 1711|      0|    break;
 1712|      0|#endif
 1713|      0|  case CURLOPT_SSLCERTTYPE:
 1714|       |    /*
 1715|       |     * String that holds file type of the SSL certificate to use
 1716|       |     */
 1717|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE],
 1718|      0|                            va_arg(param, char *));
 1719|      0|    break;
 1720|      0|#ifndef CURL_DISABLE_PROXY
 1721|      0|  case CURLOPT_PROXY_SSLCERTTYPE:
 1722|       |    /*
 1723|       |     * String that holds file type of the SSL certificate to use for proxy
 1724|       |     */
 1725|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE_PROXY],
 1726|      0|                            va_arg(param, char *));
 1727|      0|    break;
 1728|      0|#endif
 1729|      0|  case CURLOPT_SSLKEY:
 1730|       |    /*
 1731|       |     * String that holds file name of the SSL key to use
 1732|       |     */
 1733|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY],
 1734|      0|                            va_arg(param, char *));
 1735|      0|    break;
 1736|      0|  case CURLOPT_SSLKEY_BLOB:
 1737|       |    /*
 1738|       |     * Blob that holds file content of the SSL key to use
 1739|       |     */
 1740|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY],
 1741|      0|                             va_arg(param, struct curl_blob *));
 1742|      0|    break;
 1743|      0|#ifndef CURL_DISABLE_PROXY
 1744|      0|  case CURLOPT_PROXY_SSLKEY:
 1745|       |    /*
 1746|       |     * String that holds file name of the SSL key to use for proxy
 1747|       |     */
 1748|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PROXY],
 1749|      0|                            va_arg(param, char *));
 1750|      0|    break;
 1751|      0|  case CURLOPT_PROXY_SSLKEY_BLOB:
 1752|       |    /*
 1753|       |     * Blob that holds file content of the SSL key to use for proxy
 1754|       |     */
 1755|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY_PROXY],
 1756|      0|                             va_arg(param, struct curl_blob *));
 1757|      0|    break;
 1758|      0|#endif
 1759|      0|  case CURLOPT_SSLKEYTYPE:
 1760|       |    /*
 1761|       |     * String that holds file type of the SSL key to use
 1762|       |     */
 1763|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE],
 1764|      0|                            va_arg(param, char *));
 1765|      0|    break;
 1766|      0|#ifndef CURL_DISABLE_PROXY
 1767|      0|  case CURLOPT_PROXY_SSLKEYTYPE:
 1768|       |    /*
 1769|       |     * String that holds file type of the SSL key to use for proxy
 1770|       |     */
 1771|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE_PROXY],
 1772|      0|                            va_arg(param, char *));
 1773|      0|    break;
 1774|      0|#endif
 1775|      0|  case CURLOPT_KEYPASSWD:
 1776|       |    /*
 1777|       |     * String that holds the SSL or SSH private key password.
 1778|       |     */
 1779|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD],
 1780|      0|                            va_arg(param, char *));
 1781|      0|    break;
 1782|      0|#ifndef CURL_DISABLE_PROXY
 1783|      0|  case CURLOPT_PROXY_KEYPASSWD:
 1784|       |    /*
 1785|       |     * String that holds the SSL private key password for proxy.
 1786|       |     */
 1787|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD_PROXY],
 1788|      0|                            va_arg(param, char *));
 1789|      0|    break;
 1790|      0|#endif
 1791|      0|  case CURLOPT_SSLENGINE:
 1792|       |    /*
 1793|       |     * String that holds the SSL crypto engine.
 1794|       |     */
 1795|      0|    argptr = va_arg(param, char *);
 1796|      0|    if(argptr && argptr[0]) {
 1797|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], argptr);
 1798|      0|      if(!result) {
 1799|      0|        result = Curl_ssl_set_engine(data, argptr);
 1800|      0|      }
 1801|      0|    }
 1802|      0|    break;
 1803|       |
 1804|      0|  case CURLOPT_SSLENGINE_DEFAULT:
 1805|       |    /*
 1806|       |     * flag to set engine as default.
 1807|       |     */
 1808|      0|    Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], NULL);
 1809|      0|    result = Curl_ssl_set_engine_default(data);
 1810|      0|    break;
 1811|      0|  case CURLOPT_CRLF:
 1812|       |    /*
 1813|       |     * Kludgy option to enable CRLF conversions. Subject for removal.
 1814|       |     */
 1815|      0|    data->set.crlf = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1816|      0|    break;
 1817|      0|#ifndef CURL_DISABLE_PROXY
 1818|      0|  case CURLOPT_HAPROXYPROTOCOL:
 1819|       |    /*
 1820|       |     * Set to send the HAProxy Proxy Protocol header
 1821|       |     */
 1822|      0|    data->set.haproxyprotocol = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1823|      0|    break;
 1824|      0|#endif
 1825|      0|  case CURLOPT_INTERFACE:
 1826|       |    /*
 1827|       |     * Set what interface or address/hostname to bind the socket to when
 1828|       |     * performing an operation and thus what from-IP your connection will use.
 1829|       |     */
 1830|      0|    result = Curl_setstropt(&data->set.str[STRING_DEVICE],
 1831|      0|                            va_arg(param, char *));
 1832|      0|    break;
 1833|      0|  case CURLOPT_LOCALPORT:
 1834|       |    /*
 1835|       |     * Set what local port to bind the socket to when performing an operation.
 1836|       |     */
 1837|      0|    arg = va_arg(param, long);
 1838|      0|    if((arg < 0) || (arg > 65535))
 1839|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1840|      0|    data->set.localport = curlx_sltous(arg);
 1841|      0|    break;
 1842|      0|  case CURLOPT_LOCALPORTRANGE:
 1843|       |    /*
 1844|       |     * Set number of local ports to try, starting with CURLOPT_LOCALPORT.
 1845|       |     */
 1846|      0|    arg = va_arg(param, long);
 1847|      0|    if((arg < 0) || (arg > 65535))
 1848|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1849|      0|    data->set.localportrange = curlx_sltosi(arg);
 1850|      0|    break;
 1851|      0|  case CURLOPT_GSSAPI_DELEGATION:
 1852|       |    /*
 1853|       |     * GSS-API credential delegation bitmask
 1854|       |     */
 1855|      0|    arg = va_arg(param, long);
 1856|      0|    if(arg < CURLGSSAPI_DELEGATION_NONE)
 1857|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1858|      0|    data->set.gssapi_delegation = arg;
 1859|      0|    break;
 1860|      0|  case CURLOPT_SSL_VERIFYPEER:
 1861|       |    /*
 1862|       |     * Enable peer SSL verifying.
 1863|       |     */
 1864|      0|    data->set.ssl.primary.verifypeer = (0 != va_arg(param, long)) ?
 1865|      0|      TRUE : FALSE;
 1866|       |
 1867|       |    /* Update the current connection ssl_config. */
 1868|      0|    if(data->conn) {
 1869|      0|      data->conn->ssl_config.verifypeer =
 1870|      0|        data->set.ssl.primary.verifypeer;
 1871|      0|    }
 1872|      0|    break;
 1873|      0|  case CURLOPT_DOH_SSL_VERIFYPEER:
 1874|       |    /*
 1875|       |     * Enable peer SSL verifying for DoH.
 1876|       |     */
 1877|      0|    data->set.doh_verifypeer = (0 != va_arg(param, long)) ?
 1878|      0|      TRUE : FALSE;
 1879|      0|    break;
 1880|      0|#ifndef CURL_DISABLE_PROXY
 1881|      0|  case CURLOPT_PROXY_SSL_VERIFYPEER:
 1882|       |    /*
 1883|       |     * Enable peer SSL verifying for proxy.
 1884|       |     */
 1885|      0|    data->set.proxy_ssl.primary.verifypeer =
 1886|      0|      (0 != va_arg(param, long))?TRUE:FALSE;
 1887|       |
 1888|       |    /* Update the current connection proxy_ssl_config. */
 1889|      0|    if(data->conn) {
 1890|      0|      data->conn->proxy_ssl_config.verifypeer =
 1891|      0|        data->set.proxy_ssl.primary.verifypeer;
 1892|      0|    }
 1893|      0|    break;
 1894|      0|#endif
 1895|      0|  case CURLOPT_SSL_VERIFYHOST:
 1896|       |    /*
 1897|       |     * Enable verification of the host name in the peer certificate
 1898|       |     */
 1899|      0|    arg = va_arg(param, long);
 1900|       |
 1901|       |    /* Obviously people are not reading documentation and too many thought
 1902|       |       this argument took a boolean when it wasn't and misused it.
 1903|       |       Treat 1 and 2 the same */
 1904|      0|    data->set.ssl.primary.verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1905|       |
 1906|       |    /* Update the current connection ssl_config. */
 1907|      0|    if(data->conn) {
 1908|      0|      data->conn->ssl_config.verifyhost =
 1909|      0|        data->set.ssl.primary.verifyhost;
 1910|      0|    }
 1911|      0|    break;
 1912|      0|  case CURLOPT_DOH_SSL_VERIFYHOST:
 1913|       |    /*
 1914|       |     * Enable verification of the host name in the peer certificate for DoH
 1915|       |     */
 1916|      0|    arg = va_arg(param, long);
 1917|       |
 1918|       |    /* Treat both 1 and 2 as TRUE */
 1919|      0|    data->set.doh_verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1920|      0|    break;
 1921|      0|#ifndef CURL_DISABLE_PROXY
 1922|      0|  case CURLOPT_PROXY_SSL_VERIFYHOST:
 1923|       |    /*
 1924|       |     * Enable verification of the host name in the peer certificate for proxy
 1925|       |     */
 1926|      0|    arg = va_arg(param, long);
 1927|       |
 1928|       |    /* Treat both 1 and 2 as TRUE */
 1929|      0|    data->set.proxy_ssl.primary.verifyhost = (bool)((arg & 3)?TRUE:FALSE);
 1930|       |
 1931|       |    /* Update the current connection proxy_ssl_config. */
 1932|      0|    if(data->conn) {
 1933|      0|      data->conn->proxy_ssl_config.verifyhost =
 1934|      0|        data->set.proxy_ssl.primary.verifyhost;
 1935|      0|    }
 1936|      0|    break;
 1937|      0|#endif
 1938|      0|  case CURLOPT_SSL_VERIFYSTATUS:
 1939|       |    /*
 1940|       |     * Enable certificate status verifying.
 1941|       |     */
 1942|      0|    if(!Curl_ssl_cert_status_request()) {
 1943|      0|      result = CURLE_NOT_BUILT_IN;
 1944|      0|      break;
 1945|      0|    }
 1946|       |
 1947|      0|    data->set.ssl.primary.verifystatus = (0 != va_arg(param, long)) ?
 1948|      0|      TRUE : FALSE;
 1949|       |
 1950|       |    /* Update the current connection ssl_config. */
 1951|      0|    if(data->conn) {
 1952|      0|      data->conn->ssl_config.verifystatus =
 1953|      0|        data->set.ssl.primary.verifystatus;
 1954|      0|    }
 1955|      0|    break;
 1956|      0|  case CURLOPT_DOH_SSL_VERIFYSTATUS:
 1957|       |    /*
 1958|       |     * Enable certificate status verifying for DoH.
 1959|       |     */
 1960|      0|    if(!Curl_ssl_cert_status_request()) {
 1961|      0|      result = CURLE_NOT_BUILT_IN;
 1962|      0|      break;
 1963|      0|    }
 1964|       |
 1965|      0|    data->set.doh_verifystatus = (0 != va_arg(param, long)) ?
 1966|      0|      TRUE : FALSE;
 1967|      0|    break;
 1968|      0|  case CURLOPT_SSL_CTX_FUNCTION:
 1969|       |    /*
 1970|       |     * Set a SSL_CTX callback
 1971|       |     */
 1972|      0|#ifdef USE_SSL
 1973|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1974|      0|      data->set.ssl.fsslctx = va_arg(param, curl_ssl_ctx_callback);
 1975|      0|    else
 1976|      0|#endif
 1977|      0|      result = CURLE_NOT_BUILT_IN;
 1978|      0|    break;
 1979|      0|  case CURLOPT_SSL_CTX_DATA:
 1980|       |    /*
 1981|       |     * Set a SSL_CTX callback parameter pointer
 1982|       |     */
 1983|      0|#ifdef USE_SSL
 1984|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1985|      0|      data->set.ssl.fsslctxp = va_arg(param, void *);
 1986|      0|    else
 1987|      0|#endif
 1988|      0|      result = CURLE_NOT_BUILT_IN;
 1989|      0|    break;
 1990|      0|  case CURLOPT_SSL_FALSESTART:
 1991|       |    /*
 1992|       |     * Enable TLS false start.
 1993|       |     */
 1994|      0|    if(!Curl_ssl_false_start()) {
 1995|      0|      result = CURLE_NOT_BUILT_IN;
 1996|      0|      break;
 1997|      0|    }
 1998|       |
 1999|      0|    data->set.ssl.falsestart = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2000|      0|    break;
 2001|      0|  case CURLOPT_CERTINFO:
 2002|      0|#ifdef USE_SSL
 2003|      0|    if(Curl_ssl->supports & SSLSUPP_CERTINFO)
 2004|      0|      data->set.ssl.certinfo = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2005|      0|    else
 2006|      0|#endif
 2007|      0|      result = CURLE_NOT_BUILT_IN;
 2008|      0|        break;
 2009|      0|  case CURLOPT_PINNEDPUBLICKEY:
 2010|       |    /*
 2011|       |     * Set pinned public key for SSL connection.
 2012|       |     * Specify file name of the public key in DER format.
 2013|       |     */
 2014|      0|#ifdef USE_SSL
 2015|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2016|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY],
 2017|      0|                              va_arg(param, char *));
 2018|      0|    else
 2019|      0|#endif
 2020|      0|      result = CURLE_NOT_BUILT_IN;
 2021|      0|    break;
 2022|      0|#ifndef CURL_DISABLE_PROXY
 2023|      0|  case CURLOPT_PROXY_PINNEDPUBLICKEY:
 2024|       |    /*
 2025|       |     * Set pinned public key for SSL connection.
 2026|       |     * Specify file name of the public key in DER format.
 2027|       |     */
 2028|      0|#ifdef USE_SSL
 2029|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2030|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY],
 2031|      0|                              va_arg(param, char *));
 2032|      0|    else
 2033|      0|#endif
 2034|      0|      result = CURLE_NOT_BUILT_IN;
 2035|      0|    break;
 2036|      0|#endif
 2037|      0|  case CURLOPT_CAINFO:
 2038|       |    /*
 2039|       |     * Set CA info for SSL connection. Specify file name of the CA certificate
 2040|       |     */
 2041|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE],
 2042|      0|                            va_arg(param, char *));
 2043|      0|    break;
 2044|      0|  case CURLOPT_CAINFO_BLOB:
 2045|       |    /*
 2046|       |     * Blob that holds CA info for SSL connection.
 2047|       |     * Specify entire PEM of the CA certificate
 2048|       |     */
 2049|      0|#ifdef USE_SSL
 2050|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2051|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO],
 2052|      0|                               va_arg(param, struct curl_blob *));
 2053|      0|    else
 2054|      0|#endif
 2055|      0|      return CURLE_NOT_BUILT_IN;
 2056|       |
 2057|      0|    break;
 2058|      0|#ifndef CURL_DISABLE_PROXY
 2059|      0|  case CURLOPT_PROXY_CAINFO:
 2060|       |    /*
 2061|       |     * Set CA info SSL connection for proxy. Specify file name of the
 2062|       |     * CA certificate
 2063|       |     */
 2064|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE_PROXY],
 2065|      0|                            va_arg(param, char *));
 2066|      0|    break;
 2067|      0|  case CURLOPT_PROXY_CAINFO_BLOB:
 2068|       |    /*
 2069|       |     * Blob that holds CA info for SSL connection proxy.
 2070|       |     * Specify entire PEM of the CA certificate
 2071|       |     */
 2072|      0|#ifdef USE_SSL
 2073|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2074|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO_PROXY],
 2075|      0|                               va_arg(param, struct curl_blob *));
 2076|      0|    else
 2077|      0|#endif
 2078|      0|      return CURLE_NOT_BUILT_IN;
 2079|      0|    break;
 2080|      0|#endif
 2081|      0|  case CURLOPT_CAPATH:
 2082|       |    /*
 2083|       |     * Set CA path info for SSL connection. Specify directory name of the CA
 2084|       |     * certificates which have been prepared using openssl c_rehash utility.
 2085|       |     */
 2086|      0|#ifdef USE_SSL
 2087|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2088|       |      /* This does not work on windows. */
 2089|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH],
 2090|      0|                              va_arg(param, char *));
 2091|      0|    else
 2092|      0|#endif
 2093|      0|      result = CURLE_NOT_BUILT_IN;
 2094|      0|    break;
 2095|      0|#ifndef CURL_DISABLE_PROXY
 2096|      0|  case CURLOPT_PROXY_CAPATH:
 2097|       |    /*
 2098|       |     * Set CA path info for SSL connection proxy. Specify directory name of the
 2099|       |     * CA certificates which have been prepared using openssl c_rehash utility.
 2100|       |     */
 2101|      0|#ifdef USE_SSL
 2102|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2103|       |      /* This does not work on windows. */
 2104|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH_PROXY],
 2105|      0|                              va_arg(param, char *));
 2106|      0|    else
 2107|      0|#endif
 2108|      0|      result = CURLE_NOT_BUILT_IN;
 2109|      0|    break;
 2110|      0|#endif
 2111|      0|  case CURLOPT_CRLFILE:
 2112|       |    /*
 2113|       |     * Set CRL file info for SSL connection. Specify file name of the CRL
 2114|       |     * to check certificates revocation
 2115|       |     */
 2116|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE],
 2117|      0|                            va_arg(param, char *));
 2118|      0|    break;
 2119|      0|#ifndef CURL_DISABLE_PROXY
 2120|      0|  case CURLOPT_PROXY_CRLFILE:
 2121|       |    /*
 2122|       |     * Set CRL file info for SSL connection for proxy. Specify file name of the
 2123|       |     * CRL to check certificates revocation
 2124|       |     */
 2125|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE_PROXY],
 2126|      0|                            va_arg(param, char *));
 2127|      0|    break;
 2128|      0|#endif
 2129|      0|  case CURLOPT_ISSUERCERT:
 2130|       |    /*
 2131|       |     * Set Issuer certificate file
 2132|       |     * to check certificates issuer
 2133|       |     */
 2134|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT],
 2135|      0|                            va_arg(param, char *));
 2136|      0|    break;
 2137|      0|  case CURLOPT_ISSUERCERT_BLOB:
 2138|       |    /*
 2139|       |     * Blob that holds Issuer certificate to check certificates issuer
 2140|       |     */
 2141|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT],
 2142|      0|                             va_arg(param, struct curl_blob *));
 2143|      0|    break;
 2144|      0|#ifndef CURL_DISABLE_PROXY
 2145|      0|  case CURLOPT_PROXY_ISSUERCERT:
 2146|       |    /*
 2147|       |     * Set Issuer certificate file
 2148|       |     * to check certificates issuer
 2149|       |     */
 2150|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT_PROXY],
 2151|      0|                            va_arg(param, char *));
 2152|      0|    break;
 2153|      0|  case CURLOPT_PROXY_ISSUERCERT_BLOB:
 2154|       |    /*
 2155|       |     * Blob that holds Issuer certificate to check certificates issuer
 2156|       |     */
 2157|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY],
 2158|      0|                             va_arg(param, struct curl_blob *));
 2159|      0|    break;
 2160|      0|#endif
 2161|      0|#ifndef CURL_DISABLE_TELNET
 2162|      0|  case CURLOPT_TELNETOPTIONS:
 2163|       |    /*
 2164|       |     * Set a linked list of telnet options
 2165|       |     */
 2166|      0|    data->set.telnet_options = va_arg(param, struct curl_slist *);
 2167|      0|    break;
 2168|      0|#endif
 2169|      0|  case CURLOPT_BUFFERSIZE:
 2170|       |    /*
 2171|       |     * The application kindly asks for a differently sized receive buffer.
 2172|       |     * If it seems reasonable, we'll use it.
 2173|       |     */
 2174|      0|    if(data->state.buffer)
 2175|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2176|       |
 2177|      0|    arg = va_arg(param, long);
 2178|       |
 2179|      0|    if(arg > READBUFFER_MAX)
 2180|      0|      arg = READBUFFER_MAX;
 2181|      0|    else if(arg < 1)
 2182|      0|      arg = READBUFFER_SIZE;
 2183|      0|    else if(arg < READBUFFER_MIN)
 2184|      0|      arg = READBUFFER_MIN;
 2185|       |
 2186|      0|    data->set.buffer_size = arg;
 2187|      0|    break;
 2188|       |
 2189|      0|  case CURLOPT_UPLOAD_BUFFERSIZE:
 2190|       |    /*
 2191|       |     * The application kindly asks for a differently sized upload buffer.
 2192|       |     * Cap it to sensible.
 2193|       |     */
 2194|      0|    arg = va_arg(param, long);
 2195|       |
 2196|      0|    if(arg > UPLOADBUFFER_MAX)
 2197|      0|      arg = UPLOADBUFFER_MAX;
 2198|      0|    else if(arg < UPLOADBUFFER_MIN)
 2199|      0|      arg = UPLOADBUFFER_MIN;
 2200|       |
 2201|      0|    data->set.upload_buffer_size = (unsigned int)arg;
 2202|      0|    Curl_safefree(data->state.ulbuf); /* force a realloc next opportunity */
 2203|      0|    break;
 2204|       |
 2205|      0|  case CURLOPT_NOSIGNAL:
 2206|       |    /*
 2207|       |     * The application asks not to set any signal() or alarm() handlers,
 2208|       |     * even when using a timeout.
 2209|       |     */
 2210|      0|    data->set.no_signal = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2211|      0|    break;
 2212|       |
 2213|      0|  case CURLOPT_SHARE:
 2214|      0|  {
 2215|      0|    struct Curl_share *set;
 2216|      0|    set = va_arg(param, struct Curl_share *);
 2217|       |
 2218|       |    /* disconnect from old share, if any */
 2219|      0|    if(data->share) {
 2220|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2221|       |
 2222|      0|      if(data->dns.hostcachetype == HCACHE_SHARED) {
 2223|      0|        data->dns.hostcache = NULL;
 2224|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2225|      0|      }
 2226|       |
 2227|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2228|      0|      if(data->share->cookies == data->cookies)
 2229|      0|        data->cookies = NULL;
 2230|      0|#endif
 2231|       |
 2232|      0|      if(data->share->sslsession == data->state.session)
 2233|      0|        data->state.session = NULL;
 2234|       |
 2235|       |#ifdef USE_LIBPSL
 2236|       |      if(data->psl == &data->share->psl)
 2237|       |        data->psl = data->multi? &data->multi->psl: NULL;
 2238|       |#endif
 2239|       |
 2240|      0|      data->share->dirty--;
 2241|       |
 2242|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2243|      0|      data->share = NULL;
 2244|      0|    }
 2245|       |
 2246|      0|    if(GOOD_SHARE_HANDLE(set))
 2247|       |      /* use new share if it set */
 2248|      0|      data->share = set;
 2249|      0|    if(data->share) {
 2250|       |
 2251|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2252|       |
 2253|      0|      data->share->dirty++;
 2254|       |
 2255|      0|      if(data->share->specifier & (1<< CURL_LOCK_DATA_DNS)) {
 2256|       |        /* use shared host cache */
 2257|      0|        data->dns.hostcache = &data->share->hostcache;
 2258|      0|        data->dns.hostcachetype = HCACHE_SHARED;
 2259|      0|      }
 2260|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2261|      0|      if(data->share->cookies) {
 2262|       |        /* use shared cookie list, first free own one if any */
 2263|      0|        Curl_cookie_cleanup(data->cookies);
 2264|       |        /* enable cookies since we now use a share that uses cookies! */
 2265|      0|        data->cookies = data->share->cookies;
 2266|      0|      }
 2267|      0|#endif   /* CURL_DISABLE_HTTP */
 2268|      0|      if(data->share->sslsession) {
 2269|      0|        data->set.general_ssl.max_ssl_sessions = data->share->max_ssl_sessions;
 2270|      0|        data->state.session = data->share->sslsession;
 2271|      0|      }
 2272|       |#ifdef USE_LIBPSL
 2273|       |      if(data->share->specifier & (1 << CURL_LOCK_DATA_PSL))
 2274|       |        data->psl = &data->share->psl;
 2275|       |#endif
 2276|       |
 2277|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2278|      0|    }
 2279|       |    /* check for host cache not needed,
 2280|       |     * it will be done by curl_easy_perform */
 2281|      0|  }
 2282|      0|  break;
 2283|       |
 2284|      0|  case CURLOPT_PRIVATE:
 2285|       |    /*
 2286|       |     * Set private data pointer.
 2287|       |     */
 2288|      0|    data->set.private_data = va_arg(param, void *);
 2289|      0|    break;
 2290|       |
 2291|      0|  case CURLOPT_MAXFILESIZE:
 2292|       |    /*
 2293|       |     * Set the maximum size of a file to download.
 2294|       |     */
 2295|      0|    arg = va_arg(param, long);
 2296|      0|    if(arg < 0)
 2297|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2298|      0|    data->set.max_filesize = arg;
 2299|      0|    break;
 2300|       |
 2301|      0|#ifdef USE_SSL
 2302|      0|  case CURLOPT_USE_SSL:
 2303|       |    /*
 2304|       |     * Make transfers attempt to use SSL/TLS.
 2305|       |     */
 2306|      0|    arg = va_arg(param, long);
 2307|      0|    if((arg < CURLUSESSL_NONE) || (arg >= CURLUSESSL_LAST))
 2308|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2309|      0|    data->set.use_ssl = (curl_usessl)arg;
 2310|      0|    break;
 2311|       |
 2312|      0|  case CURLOPT_SSL_OPTIONS:
 2313|      0|    arg = va_arg(param, long);
 2314|      0|    data->set.ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2315|      0|    data->set.ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2316|      0|    data->set.ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2317|      0|    data->set.ssl.revoke_best_effort = !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2318|      0|    data->set.ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2319|      0|    data->set.ssl.auto_client_cert = !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2320|       |    /* If a setting is added here it should also be added in dohprobe()
 2321|       |       which sets its own CURLOPT_SSL_OPTIONS based on these settings. */
 2322|      0|    break;
 2323|       |
 2324|      0|#ifndef CURL_DISABLE_PROXY
 2325|      0|  case CURLOPT_PROXY_SSL_OPTIONS:
 2326|      0|    arg = va_arg(param, long);
 2327|      0|    data->set.proxy_ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2328|      0|    data->set.proxy_ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2329|      0|    data->set.proxy_ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2330|      0|    data->set.proxy_ssl.revoke_best_effort =
 2331|      0|      !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2332|      0|    data->set.proxy_ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2333|      0|    data->set.proxy_ssl.auto_client_cert =
 2334|      0|      !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2335|      0|    break;
 2336|      0|#endif
 2337|       |
 2338|      0|  case CURLOPT_SSL_EC_CURVES:
 2339|       |    /*
 2340|       |     * Set accepted curves in SSL connection setup.
 2341|       |     * Specify colon-delimited list of curve algorithm names.
 2342|       |     */
 2343|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EC_CURVES],
 2344|      0|                            va_arg(param, char *));
 2345|      0|    break;
 2346|      0|#endif
 2347|      0|  case CURLOPT_IPRESOLVE:
 2348|      0|    arg = va_arg(param, long);
 2349|      0|    if((arg < CURL_IPRESOLVE_WHATEVER) || (arg > CURL_IPRESOLVE_V6))
 2350|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2351|      0|    data->set.ipver = (unsigned char) arg;
 2352|      0|    break;
 2353|       |
 2354|      0|  case CURLOPT_MAXFILESIZE_LARGE:
 2355|       |    /*
 2356|       |     * Set the maximum size of a file to download.
 2357|       |     */
 2358|      0|    bigsize = va_arg(param, curl_off_t);
 2359|      0|    if(bigsize < 0)
 2360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2361|      0|    data->set.max_filesize = bigsize;
 2362|      0|    break;
 2363|       |
 2364|      0|  case CURLOPT_TCP_NODELAY:
 2365|       |    /*
 2366|       |     * Enable or disable TCP_NODELAY, which will disable/enable the Nagle
 2367|       |     * algorithm
 2368|       |     */
 2369|      0|    data->set.tcp_nodelay = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2370|      0|    break;
 2371|       |
 2372|      0|  case CURLOPT_IGNORE_CONTENT_LENGTH:
 2373|      0|    data->set.ignorecl = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2374|      0|    break;
 2375|       |
 2376|      0|  case CURLOPT_CONNECT_ONLY:
 2377|       |    /*
 2378|       |     * No data transfer, set up connection and let application use the socket
 2379|       |     */
 2380|      0|    data->set.connect_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2381|      0|    break;
 2382|       |
 2383|  2.25k|  case CURLOPT_SOCKOPTFUNCTION:
 2384|       |    /*
 2385|       |     * socket callback function: called after socket() but before connect()
 2386|       |     */
 2387|  2.25k|    data->set.fsockopt = va_arg(param, curl_sockopt_callback);
 2388|  2.25k|    break;
 2389|       |
 2390|      0|  case CURLOPT_SOCKOPTDATA:
 2391|       |    /*
 2392|       |     * socket callback data pointer. Might be NULL.
 2393|       |     */
 2394|      0|    data->set.sockopt_client = va_arg(param, void *);
 2395|      0|    break;
 2396|       |
 2397|  2.25k|  case CURLOPT_OPENSOCKETFUNCTION:
 2398|       |    /*
 2399|       |     * open/create socket callback function: called instead of socket(),
 2400|       |     * before connect()
 2401|       |     */
 2402|  2.25k|    data->set.fopensocket = va_arg(param, curl_opensocket_callback);
 2403|  2.25k|    break;
 2404|       |
 2405|  2.25k|  case CURLOPT_OPENSOCKETDATA:
 2406|       |    /*
 2407|       |     * socket callback data pointer. Might be NULL.
 2408|       |     */
 2409|  2.25k|    data->set.opensocket_client = va_arg(param, void *);
 2410|  2.25k|    break;
 2411|       |
 2412|      0|  case CURLOPT_CLOSESOCKETFUNCTION:
 2413|       |    /*
 2414|       |     * close socket callback function: called instead of close()
 2415|       |     * when shutting down a connection
 2416|       |     */
 2417|      0|    data->set.fclosesocket = va_arg(param, curl_closesocket_callback);
 2418|      0|    break;
 2419|       |
 2420|      0|  case CURLOPT_RESOLVER_START_FUNCTION:
 2421|       |    /*
 2422|       |     * resolver start callback function: called before a new resolver request
 2423|       |     * is started
 2424|       |     */
 2425|      0|    data->set.resolver_start = va_arg(param, curl_resolver_start_callback);
 2426|      0|    break;
 2427|       |
 2428|      0|  case CURLOPT_RESOLVER_START_DATA:
 2429|       |    /*
 2430|       |     * resolver start callback data pointer. Might be NULL.
 2431|       |     */
 2432|      0|    data->set.resolver_start_client = va_arg(param, void *);
 2433|      0|    break;
 2434|       |
 2435|      0|  case CURLOPT_CLOSESOCKETDATA:
 2436|       |    /*
 2437|       |     * socket callback data pointer. Might be NULL.
 2438|       |     */
 2439|      0|    data->set.closesocket_client = va_arg(param, void *);
 2440|      0|    break;
 2441|       |
 2442|      0|  case CURLOPT_SSL_SESSIONID_CACHE:
 2443|      0|    data->set.ssl.primary.sessionid = (0 != va_arg(param, long)) ?
 2444|      0|      TRUE : FALSE;
 2445|      0|#ifndef CURL_DISABLE_PROXY
 2446|      0|    data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;
 2447|      0|#endif
 2448|      0|    break;
 2449|       |
 2450|       |#ifdef USE_SSH
 2451|       |    /* we only include SSH options if explicitly built to support SSH */
 2452|       |  case CURLOPT_SSH_AUTH_TYPES:
 2453|       |    data->set.ssh_auth_types = va_arg(param, long);
 2454|       |    break;
 2455|       |
 2456|       |  case CURLOPT_SSH_PUBLIC_KEYFILE:
 2457|       |    /*
 2458|       |     * Use this file instead of the $HOME/.ssh/id_dsa.pub file
 2459|       |     */
 2460|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PUBLIC_KEY],
 2461|       |                            va_arg(param, char *));
 2462|       |    break;
 2463|       |
 2464|       |  case CURLOPT_SSH_PRIVATE_KEYFILE:
 2465|       |    /*
 2466|       |     * Use this file instead of the $HOME/.ssh/id_dsa file
 2467|       |     */
 2468|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PRIVATE_KEY],
 2469|       |                            va_arg(param, char *));
 2470|       |    break;
 2471|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
 2472|       |    /*
 2473|       |     * Option to allow for the MD5 of the host public key to be checked
 2474|       |     * for validation purposes.
 2475|       |     */
 2476|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5],
 2477|       |                            va_arg(param, char *));
 2478|       |    break;
 2479|       |
 2480|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256:
 2481|       |    /*
 2482|       |     * Option to allow for the SHA256 of the host public key to be checked
 2483|       |     * for validation purposes.
 2484|       |     */
 2485|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_SHA256],
 2486|       |                            va_arg(param, char *));
 2487|       |    break;
 2488|       |
 2489|       |  case CURLOPT_SSH_KNOWNHOSTS:
 2490|       |    /*
 2491|       |     * Store the file name to read known hosts from.
 2492|       |     */
 2493|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_KNOWNHOSTS],
 2494|       |                            va_arg(param, char *));
 2495|       |    break;
 2496|       |
 2497|       |  case CURLOPT_SSH_KEYFUNCTION:
 2498|       |    /* setting to NULL is fine since the ssh.c functions themselves will
 2499|       |       then revert to use the internal default */
 2500|       |    data->set.ssh_keyfunc = va_arg(param, curl_sshkeycallback);
 2501|       |    break;
 2502|       |
 2503|       |  case CURLOPT_SSH_KEYDATA:
 2504|       |    /*
 2505|       |     * Custom client data to pass to the SSH keyfunc callback
 2506|       |     */
 2507|       |    data->set.ssh_keyfunc_userp = va_arg(param, void *);
 2508|       |    break;
 2509|       |
 2510|       |  case CURLOPT_SSH_COMPRESSION:
 2511|       |    data->set.ssh_compression = (0 != va_arg(param, long))?TRUE:FALSE;
 2512|       |    break;
 2513|       |#endif /* USE_SSH */
 2514|       |
 2515|      0|  case CURLOPT_HTTP_TRANSFER_DECODING:
 2516|       |    /*
 2517|       |     * disable libcurl transfer encoding is used
 2518|       |     */
 2519|      0|#ifndef USE_HYPER
 2520|      0|    data->set.http_te_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2521|      0|    break;
 2522|       |#else
 2523|       |    return CURLE_NOT_BUILT_IN; /* hyper doesn't support */
 2524|       |#endif
 2525|       |
 2526|      0|  case CURLOPT_HTTP_CONTENT_DECODING:
 2527|       |    /*
 2528|       |     * raw data passed to the application when content encoding is used
 2529|       |     */
 2530|      0|    data->set.http_ce_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2531|      0|    break;
 2532|       |
 2533|      0|#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)
 2534|      0|  case CURLOPT_NEW_FILE_PERMS:
 2535|       |    /*
 2536|       |     * Uses these permissions instead of 0644
 2537|       |     */
 2538|      0|    arg = va_arg(param, long);
 2539|      0|    if((arg < 0) || (arg > 0777))
 2540|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2541|      0|    data->set.new_file_perms = arg;
 2542|      0|    break;
 2543|       |
 2544|      0|  case CURLOPT_NEW_DIRECTORY_PERMS:
 2545|       |    /*
 2546|       |     * Uses these permissions instead of 0755
 2547|       |     */
 2548|      0|    arg = va_arg(param, long);
 2549|      0|    if((arg < 0) || (arg > 0777))
 2550|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2551|      0|    data->set.new_directory_perms = arg;
 2552|      0|    break;
 2553|      0|#endif
 2554|       |
 2555|      0|  case CURLOPT_ADDRESS_SCOPE:
 2556|       |    /*
 2557|       |     * Use this scope id when using IPv6
 2558|       |     * We always get longs when passed plain numericals so we should check
 2559|       |     * that the value fits into an unsigned 32 bit integer.
 2560|       |     */
 2561|      0|    uarg = va_arg(param, unsigned long);
 2562|      0|#if SIZEOF_LONG > 4
 2563|      0|    if(uarg > UINT_MAX)
 2564|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2565|      0|#endif
 2566|      0|    data->set.scope_id = (unsigned int)uarg;
 2567|      0|    break;
 2568|       |
 2569|  2.25k|  case CURLOPT_PROTOCOLS:
 2570|       |    /* set the bitmask for the protocols that are allowed to be used for the
 2571|       |       transfer, which thus helps the app which takes URLs from users or other
 2572|       |       external inputs and want to restrict what protocol(s) to deal
 2573|       |       with. Defaults to CURLPROTO_ALL. */
 2574|  2.25k|    data->set.allowed_protocols = va_arg(param, long);
 2575|  2.25k|    break;
 2576|       |
 2577|      0|  case CURLOPT_REDIR_PROTOCOLS:
 2578|       |    /* set the bitmask for the protocols that libcurl is allowed to follow to,
 2579|       |       as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
 2580|       |       to be set in both bitmasks to be allowed to get redirected to. */
 2581|      0|    data->set.redir_protocols = va_arg(param, long);
 2582|      0|    break;
 2583|       |
 2584|      0|  case CURLOPT_DEFAULT_PROTOCOL:
 2585|       |    /* Set the protocol to use when the URL doesn't include any protocol */
 2586|      0|    result = Curl_setstropt(&data->set.str[STRING_DEFAULT_PROTOCOL],
 2587|      0|                            va_arg(param, char *));
 2588|      0|    break;
 2589|      0|#ifndef CURL_DISABLE_SMTP
 2590|      3|  case CURLOPT_MAIL_FROM:
 2591|       |    /* Set the SMTP mail originator */
 2592|      3|    result = Curl_setstropt(&data->set.str[STRING_MAIL_FROM],
 2593|      3|                            va_arg(param, char *));
 2594|      3|    break;
 2595|       |
 2596|      2|  case CURLOPT_MAIL_AUTH:
 2597|       |    /* Set the SMTP auth originator */
 2598|      2|    result = Curl_setstropt(&data->set.str[STRING_MAIL_AUTH],
 2599|      2|                            va_arg(param, char *));
 2600|      2|    break;
 2601|       |
 2602|      7|  case CURLOPT_MAIL_RCPT:
 2603|       |    /* Set the list of mail recipients */
 2604|      7|    data->set.mail_rcpt = va_arg(param, struct curl_slist *);
 2605|      7|    break;
 2606|      0|  case CURLOPT_MAIL_RCPT_ALLLOWFAILS:
 2607|       |    /* allow RCPT TO command to fail for some recipients */
 2608|      0|    data->set.mail_rcpt_allowfails = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2609|      0|    break;
 2610|      0|#endif
 2611|       |
 2612|      0|  case CURLOPT_SASL_AUTHZID:
 2613|       |    /* Authorisation identity (identity to act as) */
 2614|      0|    result = Curl_setstropt(&data->set.str[STRING_SASL_AUTHZID],
 2615|      0|                            va_arg(param, char *));
 2616|      0|    break;
 2617|       |
 2618|      0|  case CURLOPT_SASL_IR:
 2619|       |    /* Enable/disable SASL initial response */
 2620|      0|    data->set.sasl_ir = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2621|      0|    break;
 2622|      0|#ifndef CURL_DISABLE_RTSP
 2623|      3|  case CURLOPT_RTSP_REQUEST:
 2624|      3|  {
 2625|       |    /*
 2626|       |     * Set the RTSP request method (OPTIONS, SETUP, PLAY, etc...)
 2627|       |     * Would this be better if the RTSPREQ_* were just moved into here?
 2628|       |     */
 2629|      3|    long in_rtspreq = va_arg(param, long);
 2630|      3|    Curl_RtspReq rtspreq = RTSPREQ_NONE;
 2631|      3|    switch(in_rtspreq) {
 2632|      0|    case CURL_RTSPREQ_OPTIONS:
 2633|      0|      rtspreq = RTSPREQ_OPTIONS;
 2634|      0|      break;
 2635|       |
 2636|      0|    case CURL_RTSPREQ_DESCRIBE:
 2637|      0|      rtspreq = RTSPREQ_DESCRIBE;
 2638|      0|      break;
 2639|       |
 2640|      0|    case CURL_RTSPREQ_ANNOUNCE:
 2641|      0|      rtspreq = RTSPREQ_ANNOUNCE;
 2642|      0|      break;
 2643|       |
 2644|      0|    case CURL_RTSPREQ_SETUP:
 2645|      0|      rtspreq = RTSPREQ_SETUP;
 2646|      0|      break;
 2647|       |
 2648|      1|    case CURL_RTSPREQ_PLAY:
 2649|      1|      rtspreq = RTSPREQ_PLAY;
 2650|      1|      break;
 2651|       |
 2652|      0|    case CURL_RTSPREQ_PAUSE:
 2653|      0|      rtspreq = RTSPREQ_PAUSE;
 2654|      0|      break;
 2655|       |
 2656|      0|    case CURL_RTSPREQ_TEARDOWN:
 2657|      0|      rtspreq = RTSPREQ_TEARDOWN;
 2658|      0|      break;
 2659|       |
 2660|      0|    case CURL_RTSPREQ_GET_PARAMETER:
 2661|      0|      rtspreq = RTSPREQ_GET_PARAMETER;
 2662|      0|      break;
 2663|       |
 2664|      0|    case CURL_RTSPREQ_SET_PARAMETER:
 2665|      0|      rtspreq = RTSPREQ_SET_PARAMETER;
 2666|      0|      break;
 2667|       |
 2668|      0|    case CURL_RTSPREQ_RECORD:
 2669|      0|      rtspreq = RTSPREQ_RECORD;
 2670|      0|      break;
 2671|       |
 2672|      0|    case CURL_RTSPREQ_RECEIVE:
 2673|      0|      rtspreq = RTSPREQ_RECEIVE;
 2674|      0|      break;
 2675|      2|    default:
 2676|      2|      rtspreq = RTSPREQ_NONE;
 2677|      3|    }
 2678|       |
 2679|      3|    data->set.rtspreq = rtspreq;
 2680|      3|    break;
 2681|      3|  }
 2682|       |
 2683|       |
 2684|      2|  case CURLOPT_RTSP_SESSION_ID:
 2685|       |    /*
 2686|       |     * Set the RTSP Session ID manually. Useful if the application is
 2687|       |     * resuming a previously established RTSP session
 2688|       |     */
 2689|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_SESSION_ID],
 2690|      2|                            va_arg(param, char *));
 2691|      2|    break;
 2692|       |
 2693|      2|  case CURLOPT_RTSP_STREAM_URI:
 2694|       |    /*
 2695|       |     * Set the Stream URI for the RTSP request. Unless the request is
 2696|       |     * for generic server options, the application will need to set this.
 2697|       |     */
 2698|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_STREAM_URI],
 2699|      2|                            va_arg(param, char *));
 2700|      2|    break;
 2701|       |
 2702|      2|  case CURLOPT_RTSP_TRANSPORT:
 2703|       |    /*
 2704|       |     * The content of the Transport: header for the RTSP request
 2705|       |     */
 2706|      2|    result = Curl_setstropt(&data->set.str[STRING_RTSP_TRANSPORT],
 2707|      2|                            va_arg(param, char *));
 2708|      2|    break;
 2709|       |
 2710|      3|  case CURLOPT_RTSP_CLIENT_CSEQ:
 2711|       |    /*
 2712|       |     * Set the CSEQ number to issue for the next RTSP request. Useful if the
 2713|       |     * application is resuming a previously broken connection. The CSEQ
 2714|       |     * will increment from this new number henceforth.
 2715|       |     */
 2716|      3|    data->state.rtsp_next_client_CSeq = va_arg(param, long);
 2717|      3|    break;
 2718|       |
 2719|      0|  case CURLOPT_RTSP_SERVER_CSEQ:
 2720|       |    /* Same as the above, but for server-initiated requests */
 2721|      0|    data->state.rtsp_next_server_CSeq = va_arg(param, long);
 2722|      0|    break;
 2723|       |
 2724|      0|  case CURLOPT_INTERLEAVEDATA:
 2725|      0|    data->set.rtp_out = va_arg(param, void *);
 2726|      0|    break;
 2727|      0|  case CURLOPT_INTERLEAVEFUNCTION:
 2728|       |    /* Set the user defined RTP write function */
 2729|      0|    data->set.fwrite_rtp = va_arg(param, curl_write_callback);
 2730|      0|    break;
 2731|      0|#endif
 2732|      0|#ifndef CURL_DISABLE_FTP
 2733|      2|  case CURLOPT_WILDCARDMATCH:
 2734|      2|    data->set.wildcard_enabled = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2735|      2|    break;
 2736|      0|  case CURLOPT_CHUNK_BGN_FUNCTION:
 2737|      0|    data->set.chunk_bgn = va_arg(param, curl_chunk_bgn_callback);
 2738|      0|    break;
 2739|      0|  case CURLOPT_CHUNK_END_FUNCTION:
 2740|      0|    data->set.chunk_end = va_arg(param, curl_chunk_end_callback);
 2741|      0|    break;
 2742|      0|  case CURLOPT_FNMATCH_FUNCTION:
 2743|      0|    data->set.fnmatch = va_arg(param, curl_fnmatch_callback);
 2744|      0|    break;
 2745|      0|  case CURLOPT_CHUNK_DATA:
 2746|      0|    data->wildcard.customptr = va_arg(param, void *);
 2747|      0|    break;
 2748|      0|  case CURLOPT_FNMATCH_DATA:
 2749|      0|    data->set.fnmatch_data = va_arg(param, void *);
 2750|      0|    break;
 2751|      0|#endif
 2752|      0|#ifdef USE_TLS_SRP
 2753|      0|  case CURLOPT_TLSAUTH_USERNAME:
 2754|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME],
 2755|      0|                            va_arg(param, char *));
 2756|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2757|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2758|      0|    break;
 2759|      0|  case CURLOPT_PROXY_TLSAUTH_USERNAME:
 2760|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],
 2761|      0|                            va_arg(param, char *));
 2762|      0|#ifndef CURL_DISABLE_PROXY
 2763|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2764|      0|       !data->set.proxy_ssl.authtype)
 2765|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2766|      0|#endif
 2767|      0|    break;
 2768|      0|  case CURLOPT_TLSAUTH_PASSWORD:
 2769|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD],
 2770|      0|                            va_arg(param, char *));
 2771|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2772|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2773|      0|    break;
 2774|      0|  case CURLOPT_PROXY_TLSAUTH_PASSWORD:
 2775|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],
 2776|      0|                            va_arg(param, char *));
 2777|      0|#ifndef CURL_DISABLE_PROXY
 2778|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2779|      0|       !data->set.proxy_ssl.authtype)
 2780|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2781|      0|#endif
 2782|      0|    break;
 2783|      0|  case CURLOPT_TLSAUTH_TYPE:
 2784|      0|    argptr = va_arg(param, char *);
 2785|      0|    if(!argptr ||
 2786|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2787|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP;
 2788|      0|    else
 2789|      0|      data->set.ssl.authtype = CURL_TLSAUTH_NONE;
 2790|      0|    break;
 2791|      0|#ifndef CURL_DISABLE_PROXY
 2792|      0|  case CURLOPT_PROXY_TLSAUTH_TYPE:
 2793|      0|    argptr = va_arg(param, char *);
 2794|      0|    if(!argptr ||
 2795|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2796|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP;
 2797|      0|    else
 2798|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_NONE;
 2799|      0|    break;
 2800|      0|#endif
 2801|      0|#endif
 2802|       |#ifdef USE_ARES
 2803|       |  case CURLOPT_DNS_SERVERS:
 2804|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],
 2805|       |                            va_arg(param, char *));
 2806|       |    if(result)
 2807|       |      return result;
 2808|       |    result = Curl_set_dns_servers(data, data->set.str[STRING_DNS_SERVERS]);
 2809|       |    break;
 2810|       |  case CURLOPT_DNS_INTERFACE:
 2811|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_INTERFACE],
 2812|       |                            va_arg(param, char *));
 2813|       |    if(result)
 2814|       |      return result;
 2815|       |    result = Curl_set_dns_interface(data, data->set.str[STRING_DNS_INTERFACE]);
 2816|       |    break;
 2817|       |  case CURLOPT_DNS_LOCAL_IP4:
 2818|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP4],
 2819|       |                            va_arg(param, char *));
 2820|       |    if(result)
 2821|       |      return result;
 2822|       |    result = Curl_set_dns_local_ip4(data, data->set.str[STRING_DNS_LOCAL_IP4]);
 2823|       |    break;
 2824|       |  case CURLOPT_DNS_LOCAL_IP6:
 2825|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP6],
 2826|       |                            va_arg(param, char *));
 2827|       |    if(result)
 2828|       |      return result;
 2829|       |    result = Curl_set_dns_local_ip6(data, data->set.str[STRING_DNS_LOCAL_IP6]);
 2830|       |    break;
 2831|       |#endif
 2832|      0|  case CURLOPT_TCP_KEEPALIVE:
 2833|      0|    data->set.tcp_keepalive = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2834|      0|    break;
 2835|      0|  case CURLOPT_TCP_KEEPIDLE:
 2836|      0|    arg = va_arg(param, long);
 2837|      0|    if(arg < 0)
 2838|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2839|      0|    data->set.tcp_keepidle = arg;
 2840|      0|    break;
 2841|      0|  case CURLOPT_TCP_KEEPINTVL:
 2842|      0|    arg = va_arg(param, long);
 2843|      0|    if(arg < 0)
 2844|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2845|      0|    data->set.tcp_keepintvl = arg;
 2846|      0|    break;
 2847|      0|  case CURLOPT_TCP_FASTOPEN:
 2848|      0|#if defined(CONNECT_DATA_IDEMPOTENT) || defined(MSG_FASTOPEN) || \
 2849|      0|   defined(TCP_FASTOPEN_CONNECT)
 2850|      0|    data->set.tcp_fastopen = (0 != va_arg(param, long))?TRUE:FALSE;
 2851|       |#else
 2852|       |    result = CURLE_NOT_BUILT_IN;
 2853|       |#endif
 2854|      0|    break;
 2855|      0|  case CURLOPT_SSL_ENABLE_NPN:
 2856|      0|    data->set.ssl_enable_npn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2857|      0|    break;
 2858|      0|  case CURLOPT_SSL_ENABLE_ALPN:
 2859|      0|    data->set.ssl_enable_alpn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2860|      0|    break;
 2861|      0|#ifdef USE_UNIX_SOCKETS
 2862|      0|  case CURLOPT_UNIX_SOCKET_PATH:
 2863|      0|    data->set.abstract_unix_socket = FALSE;
 2864|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2865|      0|                            va_arg(param, char *));
 2866|      0|    break;
 2867|      0|  case CURLOPT_ABSTRACT_UNIX_SOCKET:
 2868|      0|    data->set.abstract_unix_socket = TRUE;
 2869|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2870|      0|                            va_arg(param, char *));
 2871|      0|    break;
 2872|      0|#endif
 2873|       |
 2874|      0|  case CURLOPT_PATH_AS_IS:
 2875|      0|    data->set.path_as_is = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2876|      0|    break;
 2877|      0|  case CURLOPT_PIPEWAIT:
 2878|      0|    data->set.pipewait = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2879|      0|    break;
 2880|      0|  case CURLOPT_STREAM_WEIGHT:
 2881|       |#ifndef USE_NGHTTP2
 2882|       |    return CURLE_NOT_BUILT_IN;
 2883|       |#else
 2884|      0|    arg = va_arg(param, long);
 2885|      0|    if((arg >= 1) && (arg <= 256))
 2886|      0|      data->set.stream_weight = (int)arg;
 2887|      0|    break;
 2888|      0|#endif
 2889|      0|  case CURLOPT_STREAM_DEPENDS:
 2890|      0|  case CURLOPT_STREAM_DEPENDS_E:
 2891|      0|  {
 2892|       |#ifndef USE_NGHTTP2
 2893|       |    return CURLE_NOT_BUILT_IN;
 2894|       |#else
 2895|      0|    struct Curl_easy *dep = va_arg(param, struct Curl_easy *);
 2896|      0|    if(!dep || GOOD_EASY_HANDLE(dep)) {
 2897|      0|      if(data->set.stream_depends_on) {
 2898|      0|        Curl_http2_remove_child(data->set.stream_depends_on, data);
 2899|      0|      }
 2900|      0|      Curl_http2_add_child(dep, data, (option == CURLOPT_STREAM_DEPENDS_E));
 2901|      0|    }
 2902|      0|    break;
 2903|      0|#endif
 2904|      0|  }
 2905|  2.25k|  case CURLOPT_CONNECT_TO:
 2906|  2.25k|    data->set.connect_to = va_arg(param, struct curl_slist *);
 2907|  2.25k|    break;
 2908|      0|  case CURLOPT_SUPPRESS_CONNECT_HEADERS:
 2909|      0|    data->set.suppress_connect_headers = (0 != va_arg(param, long))?TRUE:FALSE;
 2910|      0|    break;
 2911|      0|  case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
 2912|      0|    arg = va_arg(param, long);
 2913|      0|    if(arg < 0)
 2914|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2915|      0|    data->set.happy_eyeballs_timeout = arg;
 2916|      0|    break;
 2917|      0|#ifndef CURL_DISABLE_SHUFFLE_DNS
 2918|      0|  case CURLOPT_DNS_SHUFFLE_ADDRESSES:
 2919|      0|    data->set.dns_shuffle_addresses = (0 != va_arg(param, long)) ? TRUE:FALSE;
 2920|      0|    break;
 2921|      0|#endif
 2922|      0|  case CURLOPT_DISALLOW_USERNAME_IN_URL:
 2923|      0|    data->set.disallow_username_in_url =
 2924|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
 2925|      0|    break;
 2926|      0|#ifndef CURL_DISABLE_DOH
 2927|      2|  case CURLOPT_DOH_URL:
 2928|      2|    result = Curl_setstropt(&data->set.str[STRING_DOH],
 2929|      2|                            va_arg(param, char *));
 2930|      2|    data->set.doh = data->set.str[STRING_DOH]?TRUE:FALSE;
 2931|      2|    break;
 2932|      0|#endif
 2933|      0|  case CURLOPT_UPKEEP_INTERVAL_MS:
 2934|      0|    arg = va_arg(param, long);
 2935|      0|    if(arg < 0)
 2936|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2937|      0|    data->set.upkeep_interval_ms = arg;
 2938|      0|    break;
 2939|      0|  case CURLOPT_MAXAGE_CONN:
 2940|      0|    arg = va_arg(param, long);
 2941|      0|    if(arg < 0)
 2942|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2943|      0|    data->set.maxage_conn = arg;
 2944|      0|    break;
 2945|      0|  case CURLOPT_MAXLIFETIME_CONN:
 2946|      0|    arg = va_arg(param, long);
 2947|      0|    if(arg < 0)
 2948|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2949|      0|    data->set.maxlifetime_conn = arg;
 2950|      0|    break;
 2951|      0|  case CURLOPT_TRAILERFUNCTION:
 2952|      0|#ifndef CURL_DISABLE_HTTP
 2953|      0|    data->set.trailer_callback = va_arg(param, curl_trailer_callback);
 2954|      0|#endif
 2955|      0|    break;
 2956|      0|  case CURLOPT_TRAILERDATA:
 2957|      0|#ifndef CURL_DISABLE_HTTP
 2958|      0|    data->set.trailer_data = va_arg(param, void *);
 2959|      0|#endif
 2960|      0|    break;
 2961|      0|#ifndef CURL_DISABLE_HSTS
 2962|      0|  case CURLOPT_HSTSREADFUNCTION:
 2963|      0|    data->set.hsts_read = va_arg(param, curl_hstsread_callback);
 2964|      0|    break;
 2965|      0|  case CURLOPT_HSTSREADDATA:
 2966|      0|    data->set.hsts_read_userp = va_arg(param, void *);
 2967|      0|    break;
 2968|      0|  case CURLOPT_HSTSWRITEFUNCTION:
 2969|      0|    data->set.hsts_write = va_arg(param, curl_hstswrite_callback);
 2970|      0|    break;
 2971|      0|  case CURLOPT_HSTSWRITEDATA:
 2972|      0|    data->set.hsts_write_userp = va_arg(param, void *);
 2973|      0|    break;
 2974|      0|  case CURLOPT_HSTS:
 2975|      0|    if(!data->hsts) {
 2976|      0|      data->hsts = Curl_hsts_init();
 2977|      0|      if(!data->hsts)
 2978|      0|        return CURLE_OUT_OF_MEMORY;
 2979|      0|    }
 2980|      0|    argptr = va_arg(param, char *);
 2981|      0|    result = Curl_setstropt(&data->set.str[STRING_HSTS], argptr);
 2982|      0|    if(result)
 2983|      0|      return result;
 2984|      0|    if(argptr)
 2985|      0|      (void)Curl_hsts_loadfile(data, data->hsts, argptr);
 2986|      0|    break;
 2987|      0|  case CURLOPT_HSTS_CTRL:
 2988|      0|    arg = va_arg(param, long);
 2989|      0|    if(arg & CURLHSTS_ENABLE) {
 2990|      0|      if(!data->hsts) {
 2991|      0|        data->hsts = Curl_hsts_init();
 2992|      0|        if(!data->hsts)
 2993|      0|          return CURLE_OUT_OF_MEMORY;
 2994|      0|      }
 2995|      0|    }
 2996|      0|    else
 2997|      0|      Curl_hsts_cleanup(&data->hsts);
 2998|      0|    break;
 2999|      0|#endif
 3000|      0|#ifndef CURL_DISABLE_ALTSVC
 3001|      0|  case CURLOPT_ALTSVC:
 3002|      0|    if(!data->asi) {
 3003|      0|      data->asi = Curl_altsvc_init();
 3004|      0|      if(!data->asi)
 3005|      0|        return CURLE_OUT_OF_MEMORY;
 3006|      0|    }
 3007|      0|    argptr = va_arg(param, char *);
 3008|      0|    result = Curl_setstropt(&data->set.str[STRING_ALTSVC], argptr);
 3009|      0|    if(result)
 3010|      0|      return result;
 3011|      0|    if(argptr)
 3012|      0|      (void)Curl_altsvc_load(data->asi, argptr);
 3013|      0|    break;
 3014|      0|  case CURLOPT_ALTSVC_CTRL:
 3015|      0|    if(!data->asi) {
 3016|      0|      data->asi = Curl_altsvc_init();
 3017|      0|      if(!data->asi)
 3018|      0|        return CURLE_OUT_OF_MEMORY;
 3019|      0|    }
 3020|      0|    arg = va_arg(param, long);
 3021|      0|    result = Curl_altsvc_ctrl(data->asi, arg);
 3022|      0|    if(result)
 3023|      0|      return result;
 3024|      0|    break;
 3025|      0|#endif
 3026|      0|  case CURLOPT_PREREQFUNCTION:
 3027|      0|    data->set.fprereq = va_arg(param, curl_prereq_callback);
 3028|      0|    break;
 3029|      0|  case CURLOPT_PREREQDATA:
 3030|      0|    data->set.prereq_userp = va_arg(param, void *);
 3031|      0|    break;
 3032|      0|  default:
 3033|       |    /* unknown tag and its companion, just ignore: */
 3034|      0|    result = CURLE_UNKNOWN_OPTION;
 3035|      0|    break;
 3036|  31.4k|  }
 3037|       |
 3038|  31.4k|  return result;
 3039|  31.4k|}
curl_easy_setopt:
 3051|  31.4k|{
 3052|  31.4k|  va_list arg;
 3053|  31.4k|  CURLcode result;
 3054|       |
 3055|  31.4k|  if(!data)
 3056|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 3057|       |
 3058|  31.4k|  va_start(arg, tag);
 3059|       |
 3060|  31.4k|  result = Curl_vsetopt(data, tag, arg);
 3061|       |
 3062|  31.4k|  va_end(arg);
 3063|  31.4k|  return result;
 3064|  31.4k|}

Curl_sha256it:
  497|     30|{
  498|     30|  my_sha256_ctx ctx;
  499|       |
  500|     30|  my_sha256_init(&ctx);
  501|     30|  my_sha256_update(&ctx, input, curlx_uztoui(length));
  502|     30|  my_sha256_final(output, &ctx);
  503|     30|}
sha256.c:my_sha256_init:
   86|    185|{
   87|    185|  ctx->openssl_ctx = EVP_MD_CTX_create();
   88|    185|  EVP_DigestInit_ex(ctx->openssl_ctx, EVP_sha256(), NULL);
   89|    185|}
sha256.c:my_sha256_update:
   94|  9.78k|{
   95|  9.78k|  EVP_DigestUpdate(ctx->openssl_ctx, data, length);
   96|  9.78k|}
sha256.c:my_sha256_final:
   99|    185|{
  100|    185|  EVP_DigestFinal_ex(ctx->openssl_ctx, digest, NULL);
  101|    185|  EVP_MD_CTX_destroy(ctx->openssl_ctx);
  102|    185|}

Curl_share_lock:
  235|  12.7k|{
  236|  12.7k|  struct Curl_share *share = data->share;
  237|       |
  238|  12.7k|  if(!share)
  239|  12.7k|    return CURLSHE_INVALID;
  240|       |
  241|      0|  if(share->specifier & (1<<type)) {
  242|      0|    if(share->lockfunc) /* only call this if set! */
  243|      0|      share->lockfunc(data, type, accesstype, share->clientdata);
  244|      0|  }
  245|       |  /* else if we don't share this, pretend successful lock */
  246|       |
  247|      0|  return CURLSHE_OK;
  248|  12.7k|}
Curl_share_unlock:
  252|  12.7k|{
  253|  12.7k|  struct Curl_share *share = data->share;
  254|       |
  255|  12.7k|  if(!share)
  256|  12.7k|    return CURLSHE_INVALID;
  257|       |
  258|      0|  if(share->specifier & (1<<type)) {
  259|      0|    if(share->unlockfunc) /* only call this if set! */
  260|      0|      share->unlockfunc (data, type, share->clientdata);
  261|      0|  }
  262|       |
  263|      0|  return CURLSHE_OK;
  264|  12.7k|}

Curl_slist_append_nodup:
   60|  6.61k|{
   61|  6.61k|  struct curl_slist     *last;
   62|  6.61k|  struct curl_slist     *new_item;
   63|       |
   64|  6.61k|  DEBUGASSERT(data);
   65|       |
   66|  6.61k|  new_item = malloc(sizeof(struct curl_slist));
   67|  6.61k|  if(!new_item)
   68|      0|    return NULL;
   69|       |
   70|  6.61k|  new_item->next = NULL;
   71|  6.61k|  new_item->data = data;
   72|       |
   73|       |  /* if this is the first item, then new_item *is* the list */
   74|  6.61k|  if(!list)
   75|  4.65k|    return new_item;
   76|       |
   77|  1.95k|  last = slist_get_last(list);
   78|  1.95k|  last->next = new_item;
   79|  1.95k|  return list;
   80|  6.61k|}
curl_slist_append:
   91|  4.31k|{
   92|  4.31k|  char *dupdata = strdup(data);
   93|       |
   94|  4.31k|  if(!dupdata)
   95|      0|    return NULL;
   96|       |
   97|  4.31k|  list = Curl_slist_append_nodup(list, dupdata);
   98|  4.31k|  if(!list)
   99|      0|    free(dupdata);
  100|       |
  101|  4.31k|  return list;
  102|  4.31k|}
curl_slist_free_all:
  130|  14.3k|{
  131|  14.3k|  struct curl_slist     *next;
  132|  14.3k|  struct curl_slist     *item;
  133|       |
  134|  14.3k|  if(!list)
  135|  9.72k|    return;
  136|       |
  137|  4.65k|  item = list;
  138|  6.61k|  do {
  139|  6.61k|    next = item->next;
  140|  6.61k|    Curl_safefree(item->data);
  141|  6.61k|    free(item);
  142|  6.61k|    item = next;
  143|  6.61k|  } while(next);
  144|  4.65k|}
slist.c:slist_get_last:
   35|  1.95k|{
   36|  1.95k|  struct curl_slist     *item;
   37|       |
   38|       |  /* if caller passed us a NULL, return now */
   39|  1.95k|  if(!list)
   40|      0|    return NULL;
   41|       |
   42|       |  /* loop through to find the last item */
   43|  1.95k|  item = list;
   44|  76.7k|  while(item->next) {
   45|  74.7k|    item = item->next;
   46|  74.7k|  }
   47|  1.95k|  return item;
   48|  1.95k|}

Curl_speedinit:
   32|  2.35k|{
   33|  2.35k|  memset(&data->state.keeps_speed, 0, sizeof(struct curltime));
   34|  2.35k|}
Curl_speedcheck:
   41|  2.61k|{
   42|  2.61k|  if(data->req.keepon & KEEP_RECV_PAUSE)
   43|       |    /* A paused transfer is not qualified for speed checks */
   44|      0|    return CURLE_OK;
   45|       |
   46|  2.61k|  if((data->progress.current_speed >= 0) && data->set.low_speed_time) {
   47|      0|    if(data->progress.current_speed < data->set.low_speed_limit) {
   48|      0|      if(!data->state.keeps_speed.tv_sec)
   49|       |        /* under the limit at this very moment */
   50|      0|        data->state.keeps_speed = now;
   51|      0|      else {
   52|       |        /* how long has it been under the limit */
   53|      0|        timediff_t howlong = Curl_timediff(now, data->state.keeps_speed);
   54|       |
   55|      0|        if(howlong >= data->set.low_speed_time * 1000) {
   56|       |          /* too long */
   57|      0|          failf(data,
   58|      0|                "Operation too slow. "
   59|      0|                "Less than %ld bytes/sec transferred the last %ld seconds",
   60|      0|                data->set.low_speed_limit,
   61|      0|                data->set.low_speed_time);
   62|      0|          return CURLE_OPERATION_TIMEDOUT;
   63|      0|        }
   64|      0|      }
   65|      0|    }
   66|      0|    else
   67|       |      /* faster right now */
   68|      0|      data->state.keeps_speed.tv_sec = 0;
   69|      0|  }
   70|       |
   71|  2.61k|  if(data->set.low_speed_limit)
   72|       |    /* if low speed limit is enabled, set the expire timer to make this
   73|       |       connection's speed get checked again in a second */
   74|      0|    Curl_expire(data, 1000, EXPIRE_SPEEDCHECK);
   75|       |
   76|  2.61k|  return CURLE_OK;
   77|  2.61k|}

Curl_splay:
   42|  4.78k|{
   43|  4.78k|  struct Curl_tree N, *l, *r, *y;
   44|       |
   45|  4.78k|  if(!t)
   46|      0|    return t;
   47|  4.78k|  N.smaller = N.larger = NULL;
   48|  4.78k|  l = r = &N;
   49|       |
   50|  4.78k|  for(;;) {
   51|  4.78k|    long comp = compare(i, t->key);
   52|  4.78k|    if(comp < 0) {
   53|  1.80k|      if(!t->smaller)
   54|  1.80k|        break;
   55|      0|      if(compare(i, t->smaller->key) < 0) {
   56|      0|        y = t->smaller;                           /* rotate smaller */
   57|      0|        t->smaller = y->larger;
   58|      0|        y->larger = t;
   59|      0|        t = y;
   60|      0|        if(!t->smaller)
   61|      0|          break;
   62|      0|      }
   63|      0|      r->smaller = t;                               /* link smaller */
   64|      0|      r = t;
   65|      0|      t = t->smaller;
   66|      0|    }
   67|  2.98k|    else if(comp > 0) {
   68|      0|      if(!t->larger)
   69|      0|        break;
   70|      0|      if(compare(i, t->larger->key) > 0) {
   71|      0|        y = t->larger;                          /* rotate larger */
   72|      0|        t->larger = y->smaller;
   73|      0|        y->smaller = t;
   74|      0|        t = y;
   75|      0|        if(!t->larger)
   76|      0|          break;
   77|      0|      }
   78|      0|      l->larger = t;                              /* link larger */
   79|      0|      l = t;
   80|      0|      t = t->larger;
   81|      0|    }
   82|  2.98k|    else
   83|  2.98k|      break;
   84|  4.78k|  }
   85|       |
   86|  4.78k|  l->larger = t->smaller;                                /* assemble */
   87|  4.78k|  r->smaller = t->larger;
   88|  4.78k|  t->smaller = N.larger;
   89|  4.78k|  t->larger = N.smaller;
   90|       |
   91|  4.78k|  return t;
   92|  4.78k|}
Curl_splayinsert:
  102|  3.77k|{
  103|  3.77k|  static const struct curltime KEY_NOTUSED = {
  104|  3.77k|    (time_t)-1, (unsigned int)-1
  105|  3.77k|  }; /* will *NEVER* appear */
  106|       |
  107|  3.77k|  if(!node)
  108|      0|    return t;
  109|       |
  110|  3.77k|  if(t != NULL) {
  111|      0|    t = Curl_splay(i, t);
  112|      0|    if(compare(i, t->key) == 0) {
  113|       |      /* There already exists a node in the tree with the very same key. Build
  114|       |         a doubly-linked circular list of nodes. We add the new 'node' struct
  115|       |         to the end of this list. */
  116|       |
  117|      0|      node->key = KEY_NOTUSED; /* we set the key in the sub node to NOTUSED
  118|       |                                  to quickly identify this node as a subnode */
  119|      0|      node->samen = t;
  120|      0|      node->samep = t->samep;
  121|      0|      t->samep->samen = node;
  122|      0|      t->samep = node;
  123|       |
  124|      0|      return t; /* the root node always stays the same */
  125|      0|    }
  126|      0|  }
  127|       |
  128|  3.77k|  if(!t) {
  129|  3.77k|    node->smaller = node->larger = NULL;
  130|  3.77k|  }
  131|      0|  else if(compare(i, t->key) < 0) {
  132|      0|    node->smaller = t->smaller;
  133|      0|    node->larger = t;
  134|      0|    t->smaller = NULL;
  135|       |
  136|      0|  }
  137|      0|  else {
  138|      0|    node->larger = t->larger;
  139|      0|    node->smaller = t;
  140|      0|    t->larger = NULL;
  141|      0|  }
  142|  3.77k|  node->key = i;
  143|       |
  144|       |  /* no identical nodes (yet), we are the only one in the list of nodes */
  145|  3.77k|  node->samen = node;
  146|  3.77k|  node->samep = node;
  147|  3.77k|  return node;
  148|  3.77k|}
Curl_splaygetbest:
  156|  4.04k|{
  157|  4.04k|  static const struct curltime tv_zero = {0, 0};
  158|  4.04k|  struct Curl_tree *x;
  159|       |
  160|  4.04k|  if(!t) {
  161|  2.23k|    *removed = NULL; /* none removed since there was no root */
  162|  2.23k|    return NULL;
  163|  2.23k|  }
  164|       |
  165|       |  /* find smallest */
  166|  1.80k|  t = Curl_splay(tv_zero, t);
  167|  1.80k|  if(compare(i, t->key) < 0) {
  168|       |    /* even the smallest is too big */
  169|  1.01k|    *removed = NULL;
  170|  1.01k|    return t;
  171|  1.01k|  }
  172|       |
  173|       |  /* FIRST! Check if there is a list with identical keys */
  174|    791|  x = t->samen;
  175|    791|  if(x != t) {
  176|       |    /* there is, pick one from the list */
  177|       |
  178|       |    /* 'x' is the new root node */
  179|       |
  180|      0|    x->key = t->key;
  181|      0|    x->larger = t->larger;
  182|      0|    x->smaller = t->smaller;
  183|      0|    x->samep = t->samep;
  184|      0|    t->samep->samen = x;
  185|       |
  186|      0|    *removed = t;
  187|      0|    return x; /* new root */
  188|      0|  }
  189|       |
  190|       |  /* we splayed the tree to the smallest element, there is no smaller */
  191|    791|  x = t->larger;
  192|    791|  *removed = t;
  193|       |
  194|    791|  return x;
  195|    791|}
Curl_splayremove:
  212|  2.98k|{
  213|  2.98k|  static const struct curltime KEY_NOTUSED = {
  214|  2.98k|    (time_t)-1, (unsigned int)-1
  215|  2.98k|  }; /* will *NEVER* appear */
  216|  2.98k|  struct Curl_tree *x;
  217|       |
  218|  2.98k|  if(!t || !removenode)
  219|      0|    return 1;
  220|       |
  221|  2.98k|  if(compare(KEY_NOTUSED, removenode->key) == 0) {
  222|       |    /* Key set to NOTUSED means it is a subnode within a 'same' linked list
  223|       |       and thus we can unlink it easily. */
  224|      0|    if(removenode->samen == removenode)
  225|       |      /* A non-subnode should never be set to KEY_NOTUSED */
  226|      0|      return 3;
  227|       |
  228|      0|    removenode->samep->samen = removenode->samen;
  229|      0|    removenode->samen->samep = removenode->samep;
  230|       |
  231|       |    /* Ensures that double-remove gets caught. */
  232|      0|    removenode->samen = removenode;
  233|       |
  234|      0|    *newroot = t; /* return the same root */
  235|      0|    return 0;
  236|      0|  }
  237|       |
  238|  2.98k|  t = Curl_splay(removenode->key, t);
  239|       |
  240|       |  /* First make sure that we got the same root node as the one we want
  241|       |     to remove, as otherwise we might be trying to remove a node that
  242|       |     isn't actually in the tree.
  243|       |
  244|       |     We cannot just compare the keys here as a double remove in quick
  245|       |     succession of a node with key != KEY_NOTUSED && same != NULL
  246|       |     could return the same key but a different node. */
  247|  2.98k|  if(t != removenode)
  248|      0|    return 2;
  249|       |
  250|       |  /* Check if there is a list with identical sizes, as then we're trying to
  251|       |     remove the root node of a list of nodes with identical keys. */
  252|  2.98k|  x = t->samen;
  253|  2.98k|  if(x != t) {
  254|       |    /* 'x' is the new root node, we just make it use the root node's
  255|       |       smaller/larger links */
  256|       |
  257|      0|    x->key = t->key;
  258|      0|    x->larger = t->larger;
  259|      0|    x->smaller = t->smaller;
  260|      0|    x->samep = t->samep;
  261|      0|    t->samep->samen = x;
  262|      0|  }
  263|  2.98k|  else {
  264|       |    /* Remove the root node */
  265|  2.98k|    if(!t->smaller)
  266|  2.98k|      x = t->larger;
  267|      0|    else {
  268|      0|      x = Curl_splay(removenode->key, t->smaller);
  269|      0|      x->larger = t->larger;
  270|      0|    }
  271|  2.98k|  }
  272|       |
  273|  2.98k|  *newroot = x; /* store new root pointer */
  274|       |
  275|  2.98k|  return 0;
  276|  2.98k|}

Curl_raw_toupper:
   34|  1.99M|{
   35|  1.99M|#if !defined(CURL_DOES_CONVERSIONS)
   36|  1.99M|  if(in >= 'a' && in <= 'z')
   37|   803k|    return (char)('A' + in - 'a');
   38|       |#else
   39|       |  switch(in) {
   40|       |  case 'a':
   41|       |    return 'A';
   42|       |  case 'b':
   43|       |    return 'B';
   44|       |  case 'c':
   45|       |    return 'C';
   46|       |  case 'd':
   47|       |    return 'D';
   48|       |  case 'e':
   49|       |    return 'E';
   50|       |  case 'f':
   51|       |    return 'F';
   52|       |  case 'g':
   53|       |    return 'G';
   54|       |  case 'h':
   55|       |    return 'H';
   56|       |  case 'i':
   57|       |    return 'I';
   58|       |  case 'j':
   59|       |    return 'J';
   60|       |  case 'k':
   61|       |    return 'K';
   62|       |  case 'l':
   63|       |    return 'L';
   64|       |  case 'm':
   65|       |    return 'M';
   66|       |  case 'n':
   67|       |    return 'N';
   68|       |  case 'o':
   69|       |    return 'O';
   70|       |  case 'p':
   71|       |    return 'P';
   72|       |  case 'q':
   73|       |    return 'Q';
   74|       |  case 'r':
   75|       |    return 'R';
   76|       |  case 's':
   77|       |    return 'S';
   78|       |  case 't':
   79|       |    return 'T';
   80|       |  case 'u':
   81|       |    return 'U';
   82|       |  case 'v':
   83|       |    return 'V';
   84|       |  case 'w':
   85|       |    return 'W';
   86|       |  case 'x':
   87|       |    return 'X';
   88|       |  case 'y':
   89|       |    return 'Y';
   90|       |  case 'z':
   91|       |    return 'Z';
   92|       |  }
   93|       |#endif
   94|       |
   95|  1.18M|  return in;
   96|  1.99M|}
Curl_strcasecompare:
  181|   111k|{
  182|   368k|  while(*first && *second) {
  183|   324k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second))
  184|       |      /* get out of the loop as soon as they don't match */
  185|  67.1k|      break;
  186|   257k|    first++;
  187|   257k|    second++;
  188|   257k|  }
  189|       |  /* we do the comparison here (possibly again), just to make sure that if the
  190|       |     loop above is skipped because one of the strings reached zero, we must not
  191|       |     return this as a successful match */
  192|   111k|  return (Curl_raw_toupper(*first) == Curl_raw_toupper(*second));
  193|   111k|}
Curl_strncasecompare:
  209|   210k|{
  210|   414k|  while(*first && *second && max) {
  211|   378k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second)) {
  212|   174k|      break;
  213|   174k|    }
  214|   203k|    max--;
  215|   203k|    first++;
  216|   203k|    second++;
  217|   203k|  }
  218|   210k|  if(0 == max)
  219|  35.5k|    return 1; /* they are equal this far */
  220|       |
  221|   175k|  return Curl_raw_toupper(*first) == Curl_raw_toupper(*second);
  222|   210k|}
Curl_strntoupper:
  230|     19|{
  231|     19|  if(n < 1)
  232|      0|    return;
  233|       |
  234|     57|  do {
  235|     57|    *dest++ = Curl_raw_toupper(*src);
  236|     57|  } while(*src++ && --n);
  237|     19|}
Curl_strntolower:
  245|  13.5k|{
  246|  13.5k|  if(n < 1)
  247|      0|    return;
  248|       |
  249|   182k|  do {
  250|   182k|    *dest++ = raw_tolower(*src);
  251|   182k|  } while(*src++ && --n);
  252|  13.5k|}
curl_strequal:
  257|  2.15k|{
  258|  2.15k|  return Curl_strcasecompare(first, second);
  259|  2.15k|}
curl_strnequal:
  261|   165k|{
  262|   165k|  return Curl_strncasecompare(first, second, max);
  263|   165k|}
strcase.c:raw_tolower:
  102|   182k|{
  103|   182k|#if !defined(CURL_DOES_CONVERSIONS)
  104|   182k|  if(in >= 'A' && in <= 'Z')
  105|  6.06k|    return (char)('a' + in - 'A');
  106|       |#else
  107|       |  switch(in) {
  108|       |  case 'A':
  109|       |    return 'a';
  110|       |  case 'B':
  111|       |    return 'b';
  112|       |  case 'C':
  113|       |    return 'c';
  114|       |  case 'D':
  115|       |    return 'd';
  116|       |  case 'E':
  117|       |    return 'e';
  118|       |  case 'F':
  119|       |    return 'f';
  120|       |  case 'G':
  121|       |    return 'g';
  122|       |  case 'H':
  123|       |    return 'h';
  124|       |  case 'I':
  125|       |    return 'i';
  126|       |  case 'J':
  127|       |    return 'j';
  128|       |  case 'K':
  129|       |    return 'k';
  130|       |  case 'L':
  131|       |    return 'l';
  132|       |  case 'M':
  133|       |    return 'm';
  134|       |  case 'N':
  135|       |    return 'n';
  136|       |  case 'O':
  137|       |    return 'o';
  138|       |  case 'P':
  139|       |    return 'p';
  140|       |  case 'Q':
  141|       |    return 'q';
  142|       |  case 'R':
  143|       |    return 'r';
  144|       |  case 'S':
  145|       |    return 's';
  146|       |  case 'T':
  147|       |    return 't';
  148|       |  case 'U':
  149|       |    return 'u';
  150|       |  case 'V':
  151|       |    return 'v';
  152|       |  case 'W':
  153|       |    return 'w';
  154|       |  case 'X':
  155|       |    return 'x';
  156|       |  case 'Y':
  157|       |    return 'y';
  158|       |  case 'Z':
  159|       |    return 'z';
  160|       |  }
  161|       |#endif
  162|       |
  163|   176k|  return in;
  164|   182k|}

Curl_memdup:
   90|     32|{
   91|     32|  void *buffer = malloc(length);
   92|     32|  if(!buffer)
   93|      0|    return NULL; /* fail */
   94|       |
   95|     32|  memcpy(buffer, src, length);
   96|       |
   97|     32|  return buffer;
   98|     32|}

curl_url_strerror:
  458|     58|{
  459|     58|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  460|     58|  switch(error) {
  461|      0|  case CURLUE_OK:
  462|      0|    return "No error";
  463|       |
  464|      0|  case CURLUE_BAD_HANDLE:
  465|      0|    return "An invalid CURLU pointer was passed as argument";
  466|       |
  467|      0|  case CURLUE_BAD_PARTPOINTER:
  468|      0|    return "An invalid 'part' argument was passed as argument";
  469|       |
  470|     43|  case CURLUE_MALFORMED_INPUT:
  471|     43|    return "A malformed input was passed to a URL API function";
  472|       |
  473|      8|  case CURLUE_BAD_PORT_NUMBER:
  474|      8|    return "The port number was not a decimal number between 0 and 65535";
  475|       |
  476|      0|  case CURLUE_UNSUPPORTED_SCHEME:
  477|      0|    return "This libcurl build doesn't support the given URL scheme";
  478|       |
  479|      0|  case CURLUE_URLDECODE:
  480|      0|    return "URL decode error, most likely because of rubbish in the input";
  481|       |
  482|      0|  case CURLUE_OUT_OF_MEMORY:
  483|      0|    return "A memory function failed";
  484|       |
  485|      0|  case CURLUE_USER_NOT_ALLOWED:
  486|      0|    return "Credentials was passed in the URL when prohibited";
  487|       |
  488|      0|  case CURLUE_UNKNOWN_PART:
  489|      0|    return "An unknown part ID was passed to a URL API function";
  490|       |
  491|      0|  case CURLUE_NO_SCHEME:
  492|      0|    return "There is no scheme part in the URL";
  493|       |
  494|      0|  case CURLUE_NO_USER:
  495|      0|    return "There is no user part in the URL";
  496|       |
  497|      0|  case CURLUE_NO_PASSWORD:
  498|      0|    return "There is no password part in the URL";
  499|       |
  500|      0|  case CURLUE_NO_OPTIONS:
  501|      0|    return "There is no options part in the URL";
  502|       |
  503|      7|  case CURLUE_NO_HOST:
  504|      7|    return "There is no host part in the URL";
  505|       |
  506|      0|  case CURLUE_NO_PORT:
  507|      0|    return "There is no port part in the URL";
  508|       |
  509|      0|  case CURLUE_NO_QUERY:
  510|      0|    return "There is no query part in the URL";
  511|       |
  512|      0|  case CURLUE_NO_FRAGMENT:
  513|      0|    return "There is no fragment part in the URL";
  514|       |
  515|      0|  case CURLUE_LAST:
  516|      0|    break;
  517|     58|  }
  518|       |
  519|      0|  return "CURLUcode unknown";
  520|       |#else
  521|       |  if(error == CURLUE_OK)
  522|       |    return "No error";
  523|       |  else
  524|       |    return "Error";
  525|       |#endif
  526|     58|}
Curl_strerror:
  788|  2.31k|{
  789|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  790|       |  DWORD old_win_err = GetLastError();
  791|       |#endif
  792|  2.31k|  int old_errno = errno;
  793|  2.31k|  char *p;
  794|  2.31k|  size_t max;
  795|       |
  796|  2.31k|  if(!buflen)
  797|      0|    return NULL;
  798|       |
  799|  2.31k|#ifndef WIN32
  800|  2.31k|  DEBUGASSERT(err >= 0);
  801|  2.31k|#endif
  802|       |
  803|  2.31k|  max = buflen - 1;
  804|  2.31k|  *buf = '\0';
  805|       |
  806|       |#if defined(WIN32) || defined(_WIN32_WCE)
  807|       |#if defined(WIN32)
  808|       |  /* 'sys_nerr' is the maximum errno number, it is not widely portable */
  809|       |  if(err >= 0 && err < sys_nerr)
  810|       |    strncpy(buf, sys_errlist[err], max);
  811|       |  else
  812|       |#endif
  813|       |  {
  814|       |    if(
  815|       |#ifdef USE_WINSOCK
  816|       |       !get_winsock_error(err, buf, max) &&
  817|       |#endif
  818|       |       !get_winapi_error((DWORD)err, buf, max))
  819|       |      msnprintf(buf, max, "Unknown error %d (%#x)", err, err);
  820|       |  }
  821|       |#else /* not Windows coming up */
  822|       |
  823|  2.31k|#if defined(HAVE_STRERROR_R) && defined(HAVE_POSIX_STRERROR_R)
  824|       | /*
  825|       |  * The POSIX-style strerror_r() may set errno to ERANGE if insufficient
  826|       |  * storage is supplied via 'strerrbuf' and 'buflen' to hold the generated
  827|       |  * message string, or EINVAL if 'errnum' is not a valid error number.
  828|       |  */
  829|  2.31k|  if(0 != strerror_r(err, buf, max)) {
  830|      0|    if('\0' == buf[0])
  831|      0|      msnprintf(buf, max, "Unknown error %d", err);
  832|      0|  }
  833|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_GLIBC_STRERROR_R)
  834|       | /*
  835|       |  * The glibc-style strerror_r() only *might* use the buffer we pass to
  836|       |  * the function, but it always returns the error message as a pointer,
  837|       |  * so we must copy that string unconditionally (if non-NULL).
  838|       |  */
  839|       |  {
  840|       |    char buffer[256];
  841|       |    char *msg = strerror_r(err, buffer, sizeof(buffer));
  842|       |    if(msg)
  843|       |      strncpy(buf, msg, max);
  844|       |    else
  845|       |      msnprintf(buf, max, "Unknown error %d", err);
  846|       |  }
  847|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_VXWORKS_STRERROR_R)
  848|       | /*
  849|       |  * The vxworks-style strerror_r() does use the buffer we pass to the function.
  850|       |  * The buffer size should be at least NAME_MAX (256)
  851|       |  */
  852|       |  {
  853|       |    char buffer[256];
  854|       |    if(OK == strerror_r(err, buffer))
  855|       |      strncpy(buf, buffer, max);
  856|       |    else
  857|       |      msnprintf(buf, max, "Unknown error %d", err);
  858|       |  }
  859|       |#else
  860|       |  {
  861|       |    /* !checksrc! disable STRERROR 1 */
  862|       |    const char *msg = strerror(err);
  863|       |    if(msg)
  864|       |      strncpy(buf, msg, max);
  865|       |    else
  866|       |      msnprintf(buf, max, "Unknown error %d", err);
  867|       |  }
  868|       |#endif
  869|       |
  870|  2.31k|#endif /* end of not Windows */
  871|       |
  872|  2.31k|  buf[max] = '\0'; /* make sure the string is null-terminated */
  873|       |
  874|       |  /* strip trailing '\r\n' or '\n'. */
  875|  2.31k|  p = strrchr(buf, '\n');
  876|  2.31k|  if(p && (p - buf) >= 2)
  877|      0|    *p = '\0';
  878|  2.31k|  p = strrchr(buf, '\r');
  879|  2.31k|  if(p && (p - buf) >= 1)
  880|      0|    *p = '\0';
  881|       |
  882|  2.31k|  if(errno != old_errno)
  883|      0|    errno = old_errno;
  884|       |
  885|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  886|       |  if(old_win_err != GetLastError())
  887|       |    SetLastError(old_win_err);
  888|       |#endif
  889|       |
  890|  2.31k|  return buf;
  891|  2.31k|}

curlx_strtoofft:
  217|    998|{
  218|    998|  char *end;
  219|    998|  curl_off_t number;
  220|    998|  errno = 0;
  221|    998|  *num = 0; /* clear by default */
  222|       |
  223|  1.73k|  while(*str && ISSPACE(*str))
  224|    736|    str++;
  225|    998|  if('-' == *str) {
  226|      1|    if(endp)
  227|      0|      *endp = (char *)str; /* didn't actually move */
  228|      1|    return CURL_OFFT_INVAL; /* nothing parsed */
  229|      1|  }
  230|    997|  number = strtooff(str, &end, base);
  231|    997|  if(endp)
  232|      0|    *endp = end;
  233|    997|  if(errno == ERANGE)
  234|       |    /* overflow/underflow */
  235|     36|    return CURL_OFFT_FLOW;
  236|    961|  else if(str == end)
  237|       |    /* nothing parsed */
  238|      8|    return CURL_OFFT_INVAL;
  239|       |
  240|    953|  *num = number;
  241|    953|  return CURL_OFFT_OK;
  242|    997|}

Curl_now:
   62|  99.7k|{
   63|       |  /*
   64|       |  ** clock_gettime() is granted to be increased monotonically when the
   65|       |  ** monotonic clock is queried. Time starting point is unspecified, it
   66|       |  ** could be the system start-up time, the Epoch, or something else,
   67|       |  ** in any case the time starting point does not change once that the
   68|       |  ** system has started up.
   69|       |  */
   70|  99.7k|#ifdef HAVE_GETTIMEOFDAY
   71|  99.7k|  struct timeval now;
   72|  99.7k|#endif
   73|  99.7k|  struct curltime cnow;
   74|  99.7k|  struct timespec tsnow;
   75|       |
   76|       |  /*
   77|       |  ** clock_gettime() may be defined by Apple's SDK as weak symbol thus
   78|       |  ** code compiles but fails during run-time if clock_gettime() is
   79|       |  ** called on unsupported OS version.
   80|       |  */
   81|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   82|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   83|       |  bool have_clock_gettime = FALSE;
   84|       |  if(__builtin_available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *))
   85|       |    have_clock_gettime = TRUE;
   86|       |#endif
   87|       |
   88|  99.7k|  if(
   89|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   90|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   91|       |    have_clock_gettime &&
   92|       |#endif
   93|  99.7k|    (0 == clock_gettime(CLOCK_MONOTONIC, &tsnow))) {
   94|  99.7k|    cnow.tv_sec = tsnow.tv_sec;
   95|  99.7k|    cnow.tv_usec = (unsigned int)(tsnow.tv_nsec / 1000);
   96|  99.7k|  }
   97|       |  /*
   98|       |  ** Even when the configure process has truly detected monotonic clock
   99|       |  ** availability, it might happen that it is not actually available at
  100|       |  ** run-time. When this occurs simply fallback to other time source.
  101|       |  */
  102|      0|#ifdef HAVE_GETTIMEOFDAY
  103|      0|  else {
  104|      0|    (void)gettimeofday(&now, NULL);
  105|      0|    cnow.tv_sec = now.tv_sec;
  106|      0|    cnow.tv_usec = (unsigned int)now.tv_usec;
  107|      0|  }
  108|       |#else
  109|       |  else {
  110|       |    cnow.tv_sec = time(NULL);
  111|       |    cnow.tv_usec = 0;
  112|       |  }
  113|       |#endif
  114|  99.7k|  return cnow;
  115|  99.7k|}
Curl_timediff:
  187|  43.4k|{
  188|  43.4k|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  189|  43.4k|  if(diff >= (TIMEDIFF_T_MAX/1000))
  190|      0|    return TIMEDIFF_T_MAX;
  191|  43.4k|  else if(diff <= (TIMEDIFF_T_MIN/1000))
  192|      0|    return TIMEDIFF_T_MIN;
  193|  43.4k|  return diff * 1000 + (newer.tv_usec-older.tv_usec)/1000;
  194|  43.4k|}
Curl_timediff_us:
  201|  29.2k|{
  202|  29.2k|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  203|  29.2k|  if(diff >= (TIMEDIFF_T_MAX/1000000))
  204|      0|    return TIMEDIFF_T_MAX;
  205|  29.2k|  else if(diff <= (TIMEDIFF_T_MIN/1000000))
  206|      0|    return TIMEDIFF_T_MIN;
  207|  29.2k|  return diff * 1000000 + newer.tv_usec-older.tv_usec;
  208|  29.2k|}

Curl_checkheaders:
   99|  14.5k|{
  100|  14.5k|  struct curl_slist *head;
  101|  14.5k|  size_t thislen = strlen(thisheader);
  102|  14.5k|  DEBUGASSERT(thislen);
  103|  14.5k|  DEBUGASSERT(thisheader[thislen-1] != ':');
  104|       |
  105|  29.4k|  for(head = data->set.headers; head; head = head->next) {
  106|  14.8k|    if(strncasecompare(head->data, thisheader, thislen) &&
  107|  14.8k|       Curl_headersep(head->data[thislen]) )
  108|     13|      return head->data;
  109|  14.8k|  }
  110|       |
  111|  14.5k|  return NULL;
  112|  14.5k|}
Curl_get_upload_buffer:
  116|    231|{
  117|    231|  if(!data->state.ulbuf) {
  118|    120|    data->state.ulbuf = malloc(data->set.upload_buffer_size);
  119|    120|    if(!data->state.ulbuf)
  120|      0|      return CURLE_OUT_OF_MEMORY;
  121|    120|  }
  122|    231|  return CURLE_OK;
  123|    231|}
Curl_fillreadbuffer:
  161|    121|{
  162|    121|  size_t buffersize = bytes;
  163|    121|  size_t nread;
  164|       |
  165|    121|  curl_read_callback readfunc = NULL;
  166|    121|  void *extra_data = NULL;
  167|       |
  168|       |#ifdef CURL_DOES_CONVERSIONS
  169|       |  bool sending_http_headers = FALSE;
  170|       |  struct connectdata *conn = data->conn;
  171|       |
  172|       |  if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  173|       |    const struct HTTP *http = data->req.p.http;
  174|       |
  175|       |    if(http->sending == HTTPSEND_REQUEST)
  176|       |      /* We're sending the HTTP request headers, not the data.
  177|       |         Remember that so we don't re-translate them into garbage. */
  178|       |      sending_http_headers = TRUE;
  179|       |  }
  180|       |#endif
  181|       |
  182|    121|#ifndef CURL_DISABLE_HTTP
  183|    121|  if(data->state.trailers_state == TRAILERS_INITIALIZED) {
  184|      0|    struct curl_slist *trailers = NULL;
  185|      0|    CURLcode result;
  186|      0|    int trailers_ret_code;
  187|       |
  188|       |    /* at this point we already verified that the callback exists
  189|       |       so we compile and store the trailers buffer, then proceed */
  190|      0|    infof(data,
  191|      0|          "Moving trailers state machine from initialized to sending.");
  192|      0|    data->state.trailers_state = TRAILERS_SENDING;
  193|      0|    Curl_dyn_init(&data->state.trailers_buf, DYN_TRAILERS);
  194|       |
  195|      0|    data->state.trailers_bytes_sent = 0;
  196|      0|    Curl_set_in_callback(data, true);
  197|      0|    trailers_ret_code = data->set.trailer_callback(&trailers,
  198|      0|                                                   data->set.trailer_data);
  199|      0|    Curl_set_in_callback(data, false);
  200|      0|    if(trailers_ret_code == CURL_TRAILERFUNC_OK) {
  201|      0|      result = Curl_http_compile_trailers(trailers, &data->state.trailers_buf,
  202|      0|                                          data);
  203|      0|    }
  204|      0|    else {
  205|      0|      failf(data, "operation aborted by trailing headers callback");
  206|      0|      *nreadp = 0;
  207|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  208|      0|    }
  209|      0|    if(result) {
  210|      0|      Curl_dyn_free(&data->state.trailers_buf);
  211|      0|      curl_slist_free_all(trailers);
  212|      0|      return result;
  213|      0|    }
  214|      0|    infof(data, "Successfully compiled trailers.");
  215|      0|    curl_slist_free_all(trailers);
  216|      0|  }
  217|    121|#endif
  218|       |
  219|       |  /* if we are transmitting trailing data, we don't need to write
  220|       |     a chunk size so we skip this */
  221|    121|  if(data->req.upload_chunky &&
  222|    121|     data->state.trailers_state == TRAILERS_NONE) {
  223|       |    /* if chunked Transfer-Encoding */
  224|      6|    buffersize -= (8 + 2 + 2);   /* 32bit hex + CRLF + CRLF */
  225|      6|    data->req.upload_fromhere += (8 + 2); /* 32bit hex + CRLF */
  226|      6|  }
  227|       |
  228|    121|#ifndef CURL_DISABLE_HTTP
  229|    121|  if(data->state.trailers_state == TRAILERS_SENDING) {
  230|       |    /* if we're here then that means that we already sent the last empty chunk
  231|       |       but we didn't send a final CR LF, so we sent 0 CR LF. We then start
  232|       |       pulling trailing data until we have no more at which point we
  233|       |       simply return to the previous point in the state machine as if
  234|       |       nothing happened.
  235|       |       */
  236|      0|    readfunc = trailers_read;
  237|      0|    extra_data = (void *)data;
  238|      0|  }
  239|    121|  else
  240|    121|#endif
  241|    121|  {
  242|    121|    readfunc = data->state.fread_func;
  243|    121|    extra_data = data->state.in;
  244|    121|  }
  245|       |
  246|    121|  Curl_set_in_callback(data, true);
  247|    121|  nread = readfunc(data->req.upload_fromhere, 1,
  248|    121|                   buffersize, extra_data);
  249|    121|  Curl_set_in_callback(data, false);
  250|       |
  251|    121|  if(nread == CURL_READFUNC_ABORT) {
  252|      3|    failf(data, "operation aborted by callback");
  253|      3|    *nreadp = 0;
  254|      3|    return CURLE_ABORTED_BY_CALLBACK;
  255|      3|  }
  256|    118|  if(nread == CURL_READFUNC_PAUSE) {
  257|      0|    struct SingleRequest *k = &data->req;
  258|       |
  259|      0|    if(data->conn->handler->flags & PROTOPT_NONETWORK) {
  260|       |      /* protocols that work without network cannot be paused. This is
  261|       |         actually only FILE:// just now, and it can't pause since the transfer
  262|       |         isn't done using the "normal" procedure. */
  263|      0|      failf(data, "Read callback asked for PAUSE when not supported!");
  264|      0|      return CURLE_READ_ERROR;
  265|      0|    }
  266|       |
  267|       |    /* CURL_READFUNC_PAUSE pauses read callbacks that feed socket writes */
  268|      0|    k->keepon |= KEEP_SEND_PAUSE; /* mark socket send as paused */
  269|      0|    if(data->req.upload_chunky) {
  270|       |        /* Back out the preallocation done above */
  271|      0|      data->req.upload_fromhere -= (8 + 2);
  272|      0|    }
  273|      0|    *nreadp = 0;
  274|       |
  275|      0|    return CURLE_OK; /* nothing was read */
  276|      0|  }
  277|    118|  else if(nread > buffersize) {
  278|       |    /* the read function returned a too large value */
  279|      0|    *nreadp = 0;
  280|      0|    failf(data, "read function returned funny value");
  281|      0|    return CURLE_READ_ERROR;
  282|      0|  }
  283|       |
  284|    118|  if(!data->req.forbidchunk && data->req.upload_chunky) {
  285|       |    /* if chunked Transfer-Encoding
  286|       |     *    build chunk:
  287|       |     *
  288|       |     *        <HEX SIZE> CRLF
  289|       |     *        <DATA> CRLF
  290|       |     */
  291|       |    /* On non-ASCII platforms the <DATA> may or may not be
  292|       |       translated based on state.prefer_ascii while the protocol
  293|       |       portion must always be translated to the network encoding.
  294|       |       To further complicate matters, line end conversion might be
  295|       |       done later on, so we need to prevent CRLFs from becoming
  296|       |       CRCRLFs if that's the case.  To do this we use bare LFs
  297|       |       here, knowing they'll become CRLFs later on.
  298|       |     */
  299|       |
  300|      4|    bool added_crlf = FALSE;
  301|      4|    int hexlen = 0;
  302|      4|    const char *endofline_native;
  303|      4|    const char *endofline_network;
  304|       |
  305|      4|    if(
  306|      4|#ifdef CURL_DO_LINEEND_CONV
  307|      4|       (data->state.prefer_ascii) ||
  308|      4|#endif
  309|      4|       (data->set.crlf)) {
  310|       |      /* \n will become \r\n later on */
  311|      0|      endofline_native  = "\n";
  312|      0|      endofline_network = "\x0a";
  313|      0|    }
  314|      4|    else {
  315|      4|      endofline_native  = "\r\n";
  316|      4|      endofline_network = "\x0d\x0a";
  317|      4|    }
  318|       |
  319|       |    /* if we're not handling trailing data, proceed as usual */
  320|      4|    if(data->state.trailers_state != TRAILERS_SENDING) {
  321|      4|      char hexbuffer[11] = "";
  322|      4|      hexlen = msnprintf(hexbuffer, sizeof(hexbuffer),
  323|      4|                         "%zx%s", nread, endofline_native);
  324|       |
  325|       |      /* move buffer pointer */
  326|      4|      data->req.upload_fromhere -= hexlen;
  327|      4|      nread += hexlen;
  328|       |
  329|       |      /* copy the prefix to the buffer, leaving out the NUL */
  330|      4|      memcpy(data->req.upload_fromhere, hexbuffer, hexlen);
  331|       |
  332|       |      /* always append ASCII CRLF to the data unless
  333|       |         we have a valid trailer callback */
  334|      4|#ifndef CURL_DISABLE_HTTP
  335|      4|      if((nread-hexlen) == 0 &&
  336|      4|          data->set.trailer_callback != NULL &&
  337|      4|          data->state.trailers_state == TRAILERS_NONE) {
  338|      0|        data->state.trailers_state = TRAILERS_INITIALIZED;
  339|      0|      }
  340|      4|      else
  341|      4|#endif
  342|      4|      {
  343|      4|        memcpy(data->req.upload_fromhere + nread,
  344|      4|               endofline_network,
  345|      4|               strlen(endofline_network));
  346|      4|        added_crlf = TRUE;
  347|      4|      }
  348|      4|    }
  349|       |
  350|       |#ifdef CURL_DOES_CONVERSIONS
  351|       |    {
  352|       |      CURLcode result;
  353|       |      size_t length;
  354|       |      if(data->state.prefer_ascii)
  355|       |        /* translate the protocol and data */
  356|       |        length = nread;
  357|       |      else
  358|       |        /* just translate the protocol portion */
  359|       |        length = hexlen;
  360|       |      if(length) {
  361|       |        result = Curl_convert_to_network(data, data->req.upload_fromhere,
  362|       |                                         length);
  363|       |        /* Curl_convert_to_network calls failf if unsuccessful */
  364|       |        if(result)
  365|       |          return result;
  366|       |      }
  367|       |    }
  368|       |#endif /* CURL_DOES_CONVERSIONS */
  369|       |
  370|      4|#ifndef CURL_DISABLE_HTTP
  371|      4|    if(data->state.trailers_state == TRAILERS_SENDING &&
  372|      4|       !trailers_left(data)) {
  373|      0|      Curl_dyn_free(&data->state.trailers_buf);
  374|      0|      data->state.trailers_state = TRAILERS_DONE;
  375|      0|      data->set.trailer_data = NULL;
  376|      0|      data->set.trailer_callback = NULL;
  377|       |      /* mark the transfer as done */
  378|      0|      data->req.upload_done = TRUE;
  379|      0|      infof(data, "Signaling end of chunked upload after trailers.");
  380|      0|    }
  381|      4|    else
  382|      4|#endif
  383|      4|      if((nread - hexlen) == 0 &&
  384|      4|         data->state.trailers_state != TRAILERS_INITIALIZED) {
  385|       |        /* mark this as done once this chunk is transferred */
  386|      2|        data->req.upload_done = TRUE;
  387|      2|        infof(data,
  388|      2|              "Signaling end of chunked upload via terminating chunk.");
  389|      2|      }
  390|       |
  391|      4|    if(added_crlf)
  392|      4|      nread += strlen(endofline_network); /* for the added end of line */
  393|      4|  }
  394|       |#ifdef CURL_DOES_CONVERSIONS
  395|       |  else if((data->state.prefer_ascii) && (!sending_http_headers)) {
  396|       |    CURLcode result;
  397|       |    result = Curl_convert_to_network(data, data->req.upload_fromhere, nread);
  398|       |    /* Curl_convert_to_network calls failf if unsuccessful */
  399|       |    if(result)
  400|       |      return result;
  401|       |  }
  402|       |#endif /* CURL_DOES_CONVERSIONS */
  403|       |
  404|    118|  *nreadp = nread;
  405|       |
  406|    118|  return CURLE_OK;
  407|    118|}
Curl_readrewind:
  416|      7|{
  417|      7|  struct connectdata *conn = data->conn;
  418|      7|  curl_mimepart *mimepart = &data->set.mimepost;
  419|       |
  420|      7|  conn->bits.rewindaftersend = FALSE; /* we rewind now */
  421|       |
  422|       |  /* explicitly switch off sending data on this connection now since we are
  423|       |     about to restart a new transfer and thus we want to avoid inadvertently
  424|       |     sending more data on the existing connection until the next transfer
  425|       |     starts */
  426|      7|  data->req.keepon &= ~KEEP_SEND;
  427|       |
  428|       |  /* We have sent away data. If not using CURLOPT_POSTFIELDS or
  429|       |     CURLOPT_HTTPPOST, call app to rewind
  430|       |  */
  431|      7|  if(conn->handler->protocol & PROTO_FAMILY_HTTP) {
  432|      7|    struct HTTP *http = data->req.p.http;
  433|       |
  434|      7|    if(http->sendit)
  435|      4|      mimepart = http->sendit;
  436|      7|  }
  437|      7|  if(data->set.postfields)
  438|      3|    ; /* do nothing */
  439|      4|  else if(data->state.httpreq == HTTPREQ_POST_MIME ||
  440|      4|          data->state.httpreq == HTTPREQ_POST_FORM) {
  441|      4|    CURLcode result = Curl_mime_rewind(mimepart);
  442|      4|    if(result) {
  443|      2|      failf(data, "Cannot rewind mime/post data");
  444|      2|      return result;
  445|      2|    }
  446|      4|  }
  447|      0|  else {
  448|      0|    if(data->set.seek_func) {
  449|      0|      int err;
  450|       |
  451|      0|      Curl_set_in_callback(data, true);
  452|      0|      err = (data->set.seek_func)(data->set.seek_client, 0, SEEK_SET);
  453|      0|      Curl_set_in_callback(data, false);
  454|      0|      if(err) {
  455|      0|        failf(data, "seek callback returned error %d", (int)err);
  456|      0|        return CURLE_SEND_FAIL_REWIND;
  457|      0|      }
  458|      0|    }
  459|      0|    else if(data->set.ioctl_func) {
  460|      0|      curlioerr err;
  461|       |
  462|      0|      Curl_set_in_callback(data, true);
  463|      0|      err = (data->set.ioctl_func)(data, CURLIOCMD_RESTARTREAD,
  464|      0|                                   data->set.ioctl_client);
  465|      0|      Curl_set_in_callback(data, false);
  466|      0|      infof(data, "the ioctl callback returned %d", (int)err);
  467|       |
  468|      0|      if(err) {
  469|      0|        failf(data, "ioctl callback returned error %d", (int)err);
  470|      0|        return CURLE_SEND_FAIL_REWIND;
  471|      0|      }
  472|      0|    }
  473|      0|    else {
  474|       |      /* If no CURLOPT_READFUNCTION is used, we know that we operate on a
  475|       |         given FILE * stream and we can actually attempt to rewind that
  476|       |         ourselves with fseek() */
  477|      0|      if(data->state.fread_func == (curl_read_callback)fread) {
  478|      0|        if(-1 != fseek(data->state.in, 0, SEEK_SET))
  479|       |          /* successful rewind */
  480|      0|          return CURLE_OK;
  481|      0|      }
  482|       |
  483|       |      /* no callback set or failure above, makes us fail at once */
  484|      0|      failf(data, "necessary data rewind wasn't possible");
  485|      0|      return CURLE_SEND_FAIL_REWIND;
  486|      0|    }
  487|      0|  }
  488|      5|  return CURLE_OK;
  489|      7|}
Curl_done_sending:
  910|    111|{
  911|    111|  struct connectdata *conn = data->conn;
  912|    111|  k->keepon &= ~KEEP_SEND; /* we're done writing */
  913|       |
  914|       |  /* These functions should be moved into the handler struct! */
  915|    111|  Curl_http2_done_sending(data, conn);
  916|    111|  Curl_quic_done_sending(data);
  917|       |
  918|    111|  if(conn->bits.rewindaftersend) {
  919|      0|    CURLcode result = Curl_readrewind(data);
  920|      0|    if(result)
  921|      0|      return result;
  922|      0|  }
  923|    111|  return CURLE_OK;
  924|    111|}
Curl_readwrite:
 1176|  3.29k|{
 1177|  3.29k|  struct SingleRequest *k = &data->req;
 1178|  3.29k|  CURLcode result;
 1179|  3.29k|  int didwhat = 0;
 1180|       |
 1181|  3.29k|  curl_socket_t fd_read;
 1182|  3.29k|  curl_socket_t fd_write;
 1183|  3.29k|  int select_res = conn->cselect_bits;
 1184|       |
 1185|  3.29k|  conn->cselect_bits = 0;
 1186|       |
 1187|       |  /* only use the proper socket if the *_HOLD bit is not set simultaneously as
 1188|       |     then we are in rate limiting state in that transfer direction */
 1189|       |
 1190|  3.29k|  if((k->keepon & KEEP_RECVBITS) == KEEP_RECV)
 1191|  3.28k|    fd_read = conn->sockfd;
 1192|     18|  else
 1193|     18|    fd_read = CURL_SOCKET_BAD;
 1194|       |
 1195|  3.29k|  if((k->keepon & KEEP_SENDBITS) == KEEP_SEND)
 1196|    187|    fd_write = conn->writesockfd;
 1197|  3.11k|  else
 1198|  3.11k|    fd_write = CURL_SOCKET_BAD;
 1199|       |
 1200|  3.29k|  if(data->state.drain) {
 1201|      0|    select_res |= CURL_CSELECT_IN;
 1202|      0|    DEBUGF(infof(data, "Curl_readwrite: forcibly told to drain data"));
 1203|      0|  }
 1204|       |
 1205|  3.29k|  if(!select_res) /* Call for select()/poll() only, if read/write/error
 1206|       |                     status is not known. */
 1207|  3.29k|    select_res = Curl_socket_check(fd_read, CURL_SOCKET_BAD, fd_write, 0);
 1208|       |
 1209|  3.29k|  if(select_res == CURL_CSELECT_ERR) {
 1210|      0|    failf(data, "select/poll returned error");
 1211|      0|    return CURLE_SEND_ERROR;
 1212|      0|  }
 1213|       |
 1214|       |#ifdef USE_HYPER
 1215|       |  if(conn->datastream) {
 1216|       |    result = conn->datastream(data, conn, &didwhat, done, select_res);
 1217|       |    if(result || *done)
 1218|       |      return result;
 1219|       |  }
 1220|       |  else {
 1221|       |#endif
 1222|       |  /* We go ahead and do a read if we have a readable socket or if
 1223|       |     the stream was rewound (in which case we have data in a
 1224|       |     buffer) */
 1225|  3.29k|  if((k->keepon & KEEP_RECV) && (select_res & CURL_CSELECT_IN)) {
 1226|  3.11k|    result = readwrite_data(data, conn, k, &didwhat, done, comeback);
 1227|  3.11k|    if(result || *done)
 1228|    684|      return result;
 1229|  3.11k|  }
 1230|       |
 1231|       |  /* If we still have writing to do, we check if we have a writable socket. */
 1232|  2.61k|  if((k->keepon & KEEP_SEND) && (select_res & CURL_CSELECT_OUT)) {
 1233|       |    /* write */
 1234|       |
 1235|    138|    result = readwrite_upload(data, conn, &didwhat);
 1236|    138|    if(result)
 1237|      4|      return result;
 1238|    138|  }
 1239|       |#ifdef USE_HYPER
 1240|       |  }
 1241|       |#endif
 1242|       |
 1243|  2.61k|  k->now = Curl_now();
 1244|  2.61k|  if(!didwhat) {
 1245|       |    /* no read no write, this is a timeout? */
 1246|    233|    if(k->exp100 == EXP100_AWAITING_CONTINUE) {
 1247|       |      /* This should allow some time for the header to arrive, but only a
 1248|       |         very short time as otherwise it'll be too much wasted time too
 1249|       |         often. */
 1250|       |
 1251|       |      /* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":
 1252|       |
 1253|       |         Therefore, when a client sends this header field to an origin server
 1254|       |         (possibly via a proxy) from which it has never seen a 100 (Continue)
 1255|       |         status, the client SHOULD NOT wait for an indefinite period before
 1256|       |         sending the request body.
 1257|       |
 1258|       |      */
 1259|       |
 1260|      1|      timediff_t ms = Curl_timediff(k->now, k->start100);
 1261|      1|      if(ms >= data->set.expect_100_timeout) {
 1262|       |        /* we've waited long enough, continue anyway */
 1263|      0|        k->exp100 = EXP100_SEND_DATA;
 1264|      0|        k->keepon |= KEEP_SEND;
 1265|      0|        Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 1266|      0|        infof(data, "Done waiting for 100-continue");
 1267|      0|      }
 1268|      1|    }
 1269|    233|  }
 1270|       |
 1271|  2.61k|  if(Curl_pgrsUpdate(data))
 1272|      0|    result = CURLE_ABORTED_BY_CALLBACK;
 1273|  2.61k|  else
 1274|  2.61k|    result = Curl_speedcheck(data, k->now);
 1275|  2.61k|  if(result)
 1276|      0|    return result;
 1277|       |
 1278|  2.61k|  if(k->keepon) {
 1279|  1.04k|    if(0 > Curl_timeleft(data, &k->now, FALSE)) {
 1280|      0|      if(k->size != -1) {
 1281|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1282|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1283|      0|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1284|      0|              Curl_timediff(k->now, data->progress.t_startsingle),
 1285|      0|              k->bytecount, k->size);
 1286|      0|      }
 1287|      0|      else {
 1288|      0|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1289|      0|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " bytes received",
 1290|      0|              Curl_timediff(k->now, data->progress.t_startsingle),
 1291|      0|              k->bytecount);
 1292|      0|      }
 1293|      0|      return CURLE_OPERATION_TIMEDOUT;
 1294|      0|    }
 1295|  1.04k|  }
 1296|  1.56k|  else {
 1297|       |    /*
 1298|       |     * The transfer has been performed. Just make some general checks before
 1299|       |     * returning.
 1300|       |     */
 1301|       |
 1302|  1.56k|    if(!(data->set.opt_no_body) && (k->size != -1) &&
 1303|  1.56k|       (k->bytecount != k->size) &&
 1304|  1.56k|#ifdef CURL_DO_LINEEND_CONV
 1305|       |       /* Most FTP servers don't adjust their file SIZE response for CRLFs,
 1306|       |          so we'll check to see if the discrepancy can be explained
 1307|       |          by the number of CRLFs we've changed to LFs.
 1308|       |       */
 1309|  1.56k|       (k->bytecount != (k->size + data->state.crlf_conversions)) &&
 1310|  1.56k|#endif /* CURL_DO_LINEEND_CONV */
 1311|  1.56k|       !k->newurl) {
 1312|     81|      failf(data, "transfer closed with %" CURL_FORMAT_CURL_OFF_T
 1313|     81|            " bytes remaining to read", k->size - k->bytecount);
 1314|     81|      return CURLE_PARTIAL_FILE;
 1315|     81|    }
 1316|  1.48k|    if(!(data->set.opt_no_body) && k->chunk &&
 1317|  1.48k|       (conn->chunk.state != CHUNK_STOP)) {
 1318|       |      /*
 1319|       |       * In chunked mode, return an error if the connection is closed prior to
 1320|       |       * the empty (terminating) chunk is read.
 1321|       |       *
 1322|       |       * The condition above used to check for
 1323|       |       * conn->proto.http->chunk.datasize != 0 which is true after reading
 1324|       |       * *any* chunk, not just the empty chunk.
 1325|       |       *
 1326|       |       */
 1327|      0|      failf(data, "transfer closed with outstanding read data remaining");
 1328|      0|      return CURLE_PARTIAL_FILE;
 1329|      0|    }
 1330|  1.48k|    if(Curl_pgrsUpdate(data))
 1331|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1332|  1.48k|  }
 1333|       |
 1334|       |  /* Now update the "done" boolean we return */
 1335|  2.52k|  *done = (0 == (k->keepon&(KEEP_RECV|KEEP_SEND|
 1336|  2.52k|                            KEEP_RECV_PAUSE|KEEP_SEND_PAUSE))) ? TRUE : FALSE;
 1337|       |
 1338|  2.52k|  return CURLE_OK;
 1339|  2.61k|}
Curl_single_getsock:
 1351|  1.01k|{
 1352|  1.01k|  int bitmap = GETSOCK_BLANK;
 1353|  1.01k|  unsigned sockindex = 0;
 1354|       |
 1355|  1.01k|  if(conn->handler->perform_getsock)
 1356|    154|    return conn->handler->perform_getsock(data, conn, sock);
 1357|       |
 1358|       |  /* don't include HOLD and PAUSE connections */
 1359|    858|  if((data->req.keepon & KEEP_RECVBITS) == KEEP_RECV) {
 1360|       |
 1361|    840|    DEBUGASSERT(conn->sockfd != CURL_SOCKET_BAD);
 1362|       |
 1363|    840|    bitmap |= GETSOCK_READSOCK(sockindex);
 1364|    840|    sock[sockindex] = conn->sockfd;
 1365|    840|  }
 1366|       |
 1367|       |  /* don't include HOLD and PAUSE connections */
 1368|    858|  if((data->req.keepon & KEEP_SENDBITS) == KEEP_SEND) {
 1369|       |
 1370|     19|    if((conn->sockfd != conn->writesockfd) ||
 1371|     19|       bitmap == GETSOCK_BLANK) {
 1372|       |      /* only if they are not the same socket and we have a readable
 1373|       |         one, we increase index */
 1374|     18|      if(bitmap != GETSOCK_BLANK)
 1375|      0|        sockindex++; /* increase index if we need two entries */
 1376|       |
 1377|     18|      DEBUGASSERT(conn->writesockfd != CURL_SOCKET_BAD);
 1378|       |
 1379|     18|      sock[sockindex] = conn->writesockfd;
 1380|     18|    }
 1381|       |
 1382|     19|    bitmap |= GETSOCK_WRITESOCK(sockindex);
 1383|     19|  }
 1384|       |
 1385|    858|  return bitmap;
 1386|    858|}
Curl_init_CONNECT:
 1391|  2.44k|{
 1392|  2.44k|  data->state.fread_func = data->set.fread_func_set;
 1393|  2.44k|  data->state.in = data->set.in_set;
 1394|  2.44k|}
Curl_pretransfer:
 1402|  2.25k|{
 1403|  2.25k|  CURLcode result;
 1404|       |
 1405|  2.25k|  if(!data->state.url && !data->set.uh) {
 1406|       |    /* we can't do anything without URL */
 1407|     70|    failf(data, "No URL set!");
 1408|     70|    return CURLE_URL_MALFORMAT;
 1409|     70|  }
 1410|       |
 1411|       |  /* since the URL may have been redirected in a previous use of this handle */
 1412|  2.18k|  if(data->state.url_alloc) {
 1413|       |    /* the already set URL is allocated, free it first! */
 1414|      0|    Curl_safefree(data->state.url);
 1415|      0|    data->state.url_alloc = FALSE;
 1416|      0|  }
 1417|       |
 1418|  2.18k|  if(!data->state.url && data->set.uh) {
 1419|      0|    CURLUcode uc;
 1420|      0|    free(data->set.str[STRING_SET_URL]);
 1421|      0|    uc = curl_url_get(data->set.uh,
 1422|      0|                      CURLUPART_URL, &data->set.str[STRING_SET_URL], 0);
 1423|      0|    if(uc) {
 1424|      0|      failf(data, "No URL set!");
 1425|      0|      return CURLE_URL_MALFORMAT;
 1426|      0|    }
 1427|      0|  }
 1428|       |
 1429|  2.18k|  data->state.prefer_ascii = data->set.prefer_ascii;
 1430|  2.18k|  data->state.list_only = data->set.list_only;
 1431|  2.18k|  data->state.httpreq = data->set.method;
 1432|  2.18k|  data->state.url = data->set.str[STRING_SET_URL];
 1433|       |
 1434|       |  /* Init the SSL session ID cache here. We do it here since we want to do it
 1435|       |     after the *_setopt() calls (that could specify the size of the cache) but
 1436|       |     before any transfer takes place. */
 1437|  2.18k|  result = Curl_ssl_initsessions(data, data->set.general_ssl.max_ssl_sessions);
 1438|  2.18k|  if(result)
 1439|      0|    return result;
 1440|       |
 1441|  2.18k|  data->state.wildcardmatch = data->set.wildcard_enabled;
 1442|  2.18k|  data->state.followlocation = 0; /* reset the location-follow counter */
 1443|  2.18k|  data->state.this_is_a_follow = FALSE; /* reset this */
 1444|  2.18k|  data->state.errorbuf = FALSE; /* no error has occurred */
 1445|  2.18k|  data->state.httpwant = data->set.httpwant;
 1446|  2.18k|  data->state.httpversion = 0;
 1447|  2.18k|  data->state.authproblem = FALSE;
 1448|  2.18k|  data->state.authhost.want = data->set.httpauth;
 1449|  2.18k|  data->state.authproxy.want = data->set.proxyauth;
 1450|  2.18k|  Curl_safefree(data->info.wouldredirect);
 1451|       |
 1452|  2.18k|  if(data->state.httpreq == HTTPREQ_PUT)
 1453|     36|    data->state.infilesize = data->set.filesize;
 1454|  2.14k|  else if((data->state.httpreq != HTTPREQ_GET) &&
 1455|  2.14k|          (data->state.httpreq != HTTPREQ_HEAD)) {
 1456|    160|    data->state.infilesize = data->set.postfieldsize;
 1457|    160|    if(data->set.postfields && (data->state.infilesize == -1))
 1458|     24|      data->state.infilesize = (curl_off_t)strlen(data->set.postfields);
 1459|    160|  }
 1460|  1.98k|  else
 1461|  1.98k|    data->state.infilesize = 0;
 1462|       |
 1463|       |  /* If there is a list of cookie files to read, do it now! */
 1464|  2.18k|  if(data->state.cookielist)
 1465|      0|    Curl_cookie_loadfiles(data);
 1466|       |
 1467|       |  /* If there is a list of host pairs to deal with */
 1468|  2.18k|  if(data->state.resolve)
 1469|      0|    result = Curl_loadhostpairs(data);
 1470|       |
 1471|  2.18k|  if(!result) {
 1472|       |    /* Allow data->set.use_port to set which port to use. This needs to be
 1473|       |     * disabled for example when we follow Location: headers to URLs using
 1474|       |     * different ports! */
 1475|  2.18k|    data->state.allow_port = TRUE;
 1476|       |
 1477|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1478|       |    /*************************************************************
 1479|       |     * Tell signal handler to ignore SIGPIPE
 1480|       |     *************************************************************/
 1481|       |    if(!data->set.no_signal)
 1482|       |      data->state.prev_signal = signal(SIGPIPE, SIG_IGN);
 1483|       |#endif
 1484|       |
 1485|  2.18k|    Curl_initinfo(data); /* reset session-specific information "variables" */
 1486|  2.18k|    Curl_pgrsResetTransferSizes(data);
 1487|  2.18k|    Curl_pgrsStartNow(data);
 1488|       |
 1489|       |    /* In case the handle is re-used and an authentication method was picked
 1490|       |       in the session we need to make sure we only use the one(s) we now
 1491|       |       consider to be fine */
 1492|  2.18k|    data->state.authhost.picked &= data->state.authhost.want;
 1493|  2.18k|    data->state.authproxy.picked &= data->state.authproxy.want;
 1494|       |
 1495|  2.18k|#ifndef CURL_DISABLE_FTP
 1496|  2.18k|    if(data->state.wildcardmatch) {
 1497|      1|      struct WildcardData *wc = &data->wildcard;
 1498|      1|      if(wc->state < CURLWC_INIT) {
 1499|      1|        result = Curl_wildcard_init(wc); /* init wildcard structures */
 1500|      1|        if(result)
 1501|      0|          return CURLE_OUT_OF_MEMORY;
 1502|      1|      }
 1503|      1|    }
 1504|  2.18k|#endif
 1505|  2.18k|    Curl_http2_init_state(&data->state);
 1506|  2.18k|    result = Curl_hsts_loadcb(data, data->hsts);
 1507|  2.18k|  }
 1508|       |
 1509|       |  /*
 1510|       |   * Set user-agent. Used for HTTP, but since we can attempt to tunnel
 1511|       |   * basically anything through a http proxy we can't limit this based on
 1512|       |   * protocol.
 1513|       |   */
 1514|  2.18k|  if(data->set.str[STRING_USERAGENT]) {
 1515|      0|    Curl_safefree(data->state.aptr.uagent);
 1516|      0|    data->state.aptr.uagent =
 1517|      0|      aprintf("User-Agent: %s\r\n", data->set.str[STRING_USERAGENT]);
 1518|      0|    if(!data->state.aptr.uagent)
 1519|      0|      return CURLE_OUT_OF_MEMORY;
 1520|      0|  }
 1521|       |
 1522|  2.18k|  if(!result)
 1523|  2.18k|    result = Curl_setstropt(&data->state.aptr.user,
 1524|  2.18k|                            data->set.str[STRING_USERNAME]);
 1525|  2.18k|  if(!result)
 1526|  2.18k|    result = Curl_setstropt(&data->state.aptr.passwd,
 1527|  2.18k|                            data->set.str[STRING_PASSWORD]);
 1528|  2.18k|  if(!result)
 1529|  2.18k|    result = Curl_setstropt(&data->state.aptr.proxyuser,
 1530|  2.18k|                            data->set.str[STRING_PROXYUSERNAME]);
 1531|  2.18k|  if(!result)
 1532|  2.18k|    result = Curl_setstropt(&data->state.aptr.proxypasswd,
 1533|  2.18k|                            data->set.str[STRING_PROXYPASSWORD]);
 1534|       |
 1535|  2.18k|  data->req.headerbytecount = 0;
 1536|  2.18k|  return result;
 1537|  2.18k|}
Curl_posttransfer:
 1543|  2.42k|{
 1544|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1545|       |  /* restore the signal handler for SIGPIPE before we get back */
 1546|       |  if(!data->set.no_signal)
 1547|       |    signal(SIGPIPE, data->state.prev_signal);
 1548|       |#else
 1549|  2.42k|  (void)data; /* unused parameter */
 1550|  2.42k|#endif
 1551|       |
 1552|  2.42k|  return CURLE_OK;
 1553|  2.42k|}
Curl_follow:
 1564|    381|{
 1565|       |#ifdef CURL_DISABLE_HTTP
 1566|       |  (void)data;
 1567|       |  (void)newurl;
 1568|       |  (void)type;
 1569|       |  /* Location: following will not happen when HTTP is disabled */
 1570|       |  return CURLE_TOO_MANY_REDIRECTS;
 1571|       |#else
 1572|       |
 1573|       |  /* Location: redirect */
 1574|    381|  bool disallowport = FALSE;
 1575|    381|  bool reachedmax = FALSE;
 1576|    381|  CURLUcode uc;
 1577|       |
 1578|    381|  DEBUGASSERT(type != FOLLOW_NONE);
 1579|       |
 1580|    381|  if(type == FOLLOW_REDIR) {
 1581|    269|    if((data->set.maxredirs != -1) &&
 1582|    269|       (data->state.followlocation >= data->set.maxredirs)) {
 1583|      0|      reachedmax = TRUE;
 1584|      0|      type = FOLLOW_FAKE; /* switch to fake to store the would-be-redirected
 1585|       |                             to URL */
 1586|      0|    }
 1587|    269|    else {
 1588|       |      /* mark the next request as a followed location: */
 1589|    269|      data->state.this_is_a_follow = TRUE;
 1590|       |
 1591|    269|      data->state.followlocation++; /* count location-followers */
 1592|       |
 1593|    269|      if(data->set.http_auto_referer) {
 1594|      0|        CURLU *u;
 1595|      0|        char *referer = NULL;
 1596|       |
 1597|       |        /* We are asked to automatically set the previous URL as the referer
 1598|       |           when we get the next URL. We pick the ->url field, which may or may
 1599|       |           not be 100% correct */
 1600|       |
 1601|      0|        if(data->state.referer_alloc) {
 1602|      0|          Curl_safefree(data->state.referer);
 1603|      0|          data->state.referer_alloc = FALSE;
 1604|      0|        }
 1605|       |
 1606|       |        /* Make a copy of the URL without crenditals and fragment */
 1607|      0|        u = curl_url();
 1608|      0|        if(!u)
 1609|      0|          return CURLE_OUT_OF_MEMORY;
 1610|       |
 1611|      0|        uc = curl_url_set(u, CURLUPART_URL, data->state.url, 0);
 1612|      0|        if(!uc)
 1613|      0|          uc = curl_url_set(u, CURLUPART_FRAGMENT, NULL, 0);
 1614|      0|        if(!uc)
 1615|      0|          uc = curl_url_set(u, CURLUPART_USER, NULL, 0);
 1616|      0|        if(!uc)
 1617|      0|          uc = curl_url_set(u, CURLUPART_PASSWORD, NULL, 0);
 1618|      0|        if(!uc)
 1619|      0|          uc = curl_url_get(u, CURLUPART_URL, &referer, 0);
 1620|       |
 1621|      0|        curl_url_cleanup(u);
 1622|       |
 1623|      0|        if(uc || !referer)
 1624|      0|          return CURLE_OUT_OF_MEMORY;
 1625|       |
 1626|      0|        data->state.referer = referer;
 1627|      0|        data->state.referer_alloc = TRUE; /* yes, free this later */
 1628|      0|      }
 1629|    269|    }
 1630|    269|  }
 1631|       |
 1632|    381|  if((type != FOLLOW_RETRY) &&
 1633|    381|     (data->req.httpcode != 401) && (data->req.httpcode != 407) &&
 1634|    381|     Curl_is_absolute_url(newurl, NULL, MAX_SCHEME_LEN))
 1635|       |    /* If this is not redirect due to a 401 or 407 response and an absolute
 1636|       |       URL: don't allow a custom port number */
 1637|     22|    disallowport = TRUE;
 1638|       |
 1639|    381|  DEBUGASSERT(data->state.uh);
 1640|    381|  uc = curl_url_set(data->state.uh, CURLUPART_URL, newurl,
 1641|    381|                    (type == FOLLOW_FAKE) ? CURLU_NON_SUPPORT_SCHEME :
 1642|    381|                    ((type == FOLLOW_REDIR) ? CURLU_URLENCODE : 0) |
 1643|    269|                    CURLU_ALLOW_SPACE);
 1644|    381|  if(uc) {
 1645|     37|    if(type != FOLLOW_FAKE)
 1646|      8|      return Curl_uc_to_curlcode(uc);
 1647|       |
 1648|       |    /* the URL could not be parsed for some reason, but since this is FAKE
 1649|       |       mode, just duplicate the field as-is */
 1650|     29|    newurl = strdup(newurl);
 1651|     29|    if(!newurl)
 1652|      0|      return CURLE_OUT_OF_MEMORY;
 1653|     29|  }
 1654|    344|  else {
 1655|       |
 1656|    344|    uc = curl_url_get(data->state.uh, CURLUPART_URL, &newurl, 0);
 1657|    344|    if(uc)
 1658|      0|      return Curl_uc_to_curlcode(uc);
 1659|    344|  }
 1660|       |
 1661|    373|  if(type == FOLLOW_FAKE) {
 1662|       |    /* we're only figuring out the new url if we would've followed locations
 1663|       |       but now we're done so we can get out! */
 1664|    112|    data->info.wouldredirect = newurl;
 1665|       |
 1666|    112|    if(reachedmax) {
 1667|      0|      failf(data, "Maximum (%ld) redirects followed", data->set.maxredirs);
 1668|      0|      return CURLE_TOO_MANY_REDIRECTS;
 1669|      0|    }
 1670|    112|    return CURLE_OK;
 1671|    112|  }
 1672|       |
 1673|    261|  if(disallowport)
 1674|     16|    data->state.allow_port = FALSE;
 1675|       |
 1676|    261|  if(data->state.url_alloc)
 1677|    261|    Curl_safefree(data->state.url);
 1678|       |
 1679|    261|  data->state.url = newurl;
 1680|    261|  data->state.url_alloc = TRUE;
 1681|       |
 1682|    261|  infof(data, "Issue another request to this URL: '%s'", data->state.url);
 1683|       |
 1684|       |  /*
 1685|       |   * We get here when the HTTP code is 300-399 (and 401). We need to perform
 1686|       |   * differently based on exactly what return code there was.
 1687|       |   *
 1688|       |   * News from 7.10.6: we can also get here on a 401 or 407, in case we act on
 1689|       |   * a HTTP (proxy-) authentication scheme other than Basic.
 1690|       |   */
 1691|    261|  switch(data->info.httpcode) {
 1692|       |    /* 401 - Act on a WWW-Authenticate, we keep on moving and do the
 1693|       |       Authorization: XXXX header in the HTTP request code snippet */
 1694|       |    /* 407 - Act on a Proxy-Authenticate, we keep on moving and do the
 1695|       |       Proxy-Authorization: XXXX header in the HTTP request code snippet */
 1696|       |    /* 300 - Multiple Choices */
 1697|       |    /* 306 - Not used */
 1698|       |    /* 307 - Temporary Redirect */
 1699|    106|  default:  /* for all above (and the unknown ones) */
 1700|       |    /* Some codes are explicitly mentioned since I've checked RFC2616 and they
 1701|       |     * seem to be OK to POST to.
 1702|       |     */
 1703|    106|    break;
 1704|    144|  case 301: /* Moved Permanently */
 1705|       |    /* (quote from RFC7231, section 6.4.2)
 1706|       |     *
 1707|       |     * Note: For historical reasons, a user agent MAY change the request
 1708|       |     * method from POST to GET for the subsequent request.  If this
 1709|       |     * behavior is undesired, the 307 (Temporary Redirect) status code
 1710|       |     * can be used instead.
 1711|       |     *
 1712|       |     * ----
 1713|       |     *
 1714|       |     * Many webservers expect this, so these servers often answers to a POST
 1715|       |     * request with an error page. To be sure that libcurl gets the page that
 1716|       |     * most user agents would get, libcurl has to force GET.
 1717|       |     *
 1718|       |     * This behavior is forbidden by RFC1945 and the obsolete RFC2616, and
 1719|       |     * can be overridden with CURLOPT_POSTREDIR.
 1720|       |     */
 1721|    144|    if((data->state.httpreq == HTTPREQ_POST
 1722|    144|        || data->state.httpreq == HTTPREQ_POST_FORM
 1723|    144|        || data->state.httpreq == HTTPREQ_POST_MIME)
 1724|    144|       && !(data->set.keep_post & CURL_REDIR_POST_301)) {
 1725|      2|      infof(data, "Switch from POST to GET");
 1726|      2|      data->state.httpreq = HTTPREQ_GET;
 1727|      2|    }
 1728|    144|    break;
 1729|      3|  case 302: /* Found */
 1730|       |    /* (quote from RFC7231, section 6.4.3)
 1731|       |     *
 1732|       |     * Note: For historical reasons, a user agent MAY change the request
 1733|       |     * method from POST to GET for the subsequent request.  If this
 1734|       |     * behavior is undesired, the 307 (Temporary Redirect) status code
 1735|       |     * can be used instead.
 1736|       |     *
 1737|       |     * ----
 1738|       |     *
 1739|       |     * Many webservers expect this, so these servers often answers to a POST
 1740|       |     * request with an error page. To be sure that libcurl gets the page that
 1741|       |     * most user agents would get, libcurl has to force GET.
 1742|       |     *
 1743|       |     * This behavior is forbidden by RFC1945 and the obsolete RFC2616, and
 1744|       |     * can be overridden with CURLOPT_POSTREDIR.
 1745|       |     */
 1746|      3|    if((data->state.httpreq == HTTPREQ_POST
 1747|      3|        || data->state.httpreq == HTTPREQ_POST_FORM
 1748|      3|        || data->state.httpreq == HTTPREQ_POST_MIME)
 1749|      3|       && !(data->set.keep_post & CURL_REDIR_POST_302)) {
 1750|      2|      infof(data, "Switch from POST to GET");
 1751|      2|      data->state.httpreq = HTTPREQ_GET;
 1752|      2|    }
 1753|      3|    break;
 1754|       |
 1755|      5|  case 303: /* See Other */
 1756|       |    /* 'See Other' location is not the resource but a substitute for the
 1757|       |     * resource. In this case we switch the method to GET/HEAD, unless the
 1758|       |     * method is POST and the user specified to keep it as POST.
 1759|       |     * https://github.com/curl/curl/issues/5237#issuecomment-614641049
 1760|       |     */
 1761|      5|    if(data->state.httpreq != HTTPREQ_GET &&
 1762|      5|       ((data->state.httpreq != HTTPREQ_POST &&
 1763|      3|         data->state.httpreq != HTTPREQ_POST_FORM &&
 1764|      3|         data->state.httpreq != HTTPREQ_POST_MIME) ||
 1765|      3|        !(data->set.keep_post & CURL_REDIR_POST_303))) {
 1766|      3|      data->state.httpreq = HTTPREQ_GET;
 1767|      3|      data->set.upload = false;
 1768|      3|      infof(data, "Switch to %s",
 1769|      3|            data->set.opt_no_body?"HEAD":"GET");
 1770|      3|    }
 1771|      5|    break;
 1772|      2|  case 304: /* Not Modified */
 1773|       |    /* 304 means we did a conditional request and it was "Not modified".
 1774|       |     * We shouldn't get any Location: header in this response!
 1775|       |     */
 1776|      2|    break;
 1777|      1|  case 305: /* Use Proxy */
 1778|       |    /* (quote from RFC2616, section 10.3.6):
 1779|       |     * "The requested resource MUST be accessed through the proxy given
 1780|       |     * by the Location field. The Location field gives the URI of the
 1781|       |     * proxy.  The recipient is expected to repeat this single request
 1782|       |     * via the proxy. 305 responses MUST only be generated by origin
 1783|       |     * servers."
 1784|       |     */
 1785|      1|    break;
 1786|    261|  }
 1787|    261|  Curl_pgrsTime(data, TIMER_REDIRECT);
 1788|    261|  Curl_pgrsResetTransferSizes(data);
 1789|       |
 1790|    261|  return CURLE_OK;
 1791|    261|#endif /* CURL_DISABLE_HTTP */
 1792|    261|}
Curl_retry_request:
 1798|  1.57k|{
 1799|  1.57k|  struct connectdata *conn = data->conn;
 1800|  1.57k|  bool retry = FALSE;
 1801|  1.57k|  *url = NULL;
 1802|       |
 1803|       |  /* if we're talking upload, we can't do the checks below, unless the protocol
 1804|       |     is HTTP as when uploading over HTTP we will still get a response */
 1805|  1.57k|  if(data->set.upload &&
 1806|  1.57k|     !(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)))
 1807|      0|    return CURLE_OK;
 1808|       |
 1809|  1.57k|  if((data->req.bytecount + data->req.headerbytecount == 0) &&
 1810|  1.57k|      conn->bits.reuse &&
 1811|  1.57k|      (!data->set.opt_no_body
 1812|      0|        || (conn->handler->protocol & PROTO_FAMILY_HTTP)) &&
 1813|  1.57k|      (data->set.rtspreq != RTSPREQ_RECEIVE))
 1814|       |    /* We got no data, we attempted to re-use a connection. For HTTP this
 1815|       |       can be a retry so we try again regardless if we expected a body.
 1816|       |       For other protocols we only try again only if we expected a body.
 1817|       |
 1818|       |       This might happen if the connection was left alive when we were
 1819|       |       done using it before, but that was closed when we wanted to read from
 1820|       |       it again. Bad luck. Retry the same request on a fresh connect! */
 1821|      0|    retry = TRUE;
 1822|  1.57k|  else if(data->state.refused_stream &&
 1823|  1.57k|          (data->req.bytecount + data->req.headerbytecount == 0) ) {
 1824|       |    /* This was sent on a refused stream, safe to rerun. A refused stream
 1825|       |       error can typically only happen on HTTP/2 level if the stream is safe
 1826|       |       to issue again, but the nghttp2 API can deliver the message to other
 1827|       |       streams as well, which is why this adds the check the data counters
 1828|       |       too. */
 1829|      0|    infof(data, "REFUSED_STREAM, retrying a fresh connect");
 1830|      0|    data->state.refused_stream = FALSE; /* clear again */
 1831|      0|    retry = TRUE;
 1832|      0|  }
 1833|  1.57k|  if(retry) {
 1834|      0|#define CONN_MAX_RETRIES 5
 1835|      0|    if(data->state.retrycount++ >= CONN_MAX_RETRIES) {
 1836|      0|      failf(data, "Connection died, tried %d times before giving up",
 1837|      0|            CONN_MAX_RETRIES);
 1838|      0|      data->state.retrycount = 0;
 1839|      0|      return CURLE_SEND_ERROR;
 1840|      0|    }
 1841|      0|    infof(data, "Connection died, retrying a fresh connect (retry count: %d)",
 1842|      0|          data->state.retrycount);
 1843|      0|    *url = strdup(data->state.url);
 1844|      0|    if(!*url)
 1845|      0|      return CURLE_OUT_OF_MEMORY;
 1846|       |
 1847|      0|    connclose(conn, "retry"); /* close this connection */
 1848|      0|    conn->bits.retry = TRUE; /* mark this as a connection we're about
 1849|       |                                to retry. Marking it this way should
 1850|       |                                prevent i.e HTTP transfers to return
 1851|       |                                error just because nothing has been
 1852|       |                                transferred! */
 1853|       |
 1854|       |
 1855|      0|    if(conn->handler->protocol&PROTO_FAMILY_HTTP) {
 1856|      0|      if(data->req.writebytecount) {
 1857|      0|        CURLcode result = Curl_readrewind(data);
 1858|      0|        if(result) {
 1859|      0|          Curl_safefree(*url);
 1860|      0|          return result;
 1861|      0|        }
 1862|      0|      }
 1863|      0|    }
 1864|      0|  }
 1865|  1.57k|  return CURLE_OK;
 1866|  1.57k|}
Curl_setup_transfer:
 1881|  2.26k|{
 1882|  2.26k|  struct SingleRequest *k = &data->req;
 1883|  2.26k|  struct connectdata *conn = data->conn;
 1884|  2.26k|  struct HTTP *http = data->req.p.http;
 1885|  2.26k|  bool httpsending = ((conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1886|  2.26k|                      (http->sending == HTTPSEND_REQUEST));
 1887|  2.26k|  DEBUGASSERT(conn != NULL);
 1888|  2.26k|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
 1889|       |
 1890|  2.26k|  if(conn->bits.multiplex || conn->httpversion == 20 || httpsending) {
 1891|       |    /* when multiplexing, the read/write sockets need to be the same! */
 1892|    678|    conn->sockfd = sockindex == -1 ?
 1893|      0|      ((writesockindex == -1 ? CURL_SOCKET_BAD : conn->sock[writesockindex])) :
 1894|    678|      conn->sock[sockindex];
 1895|    678|    conn->writesockfd = conn->sockfd;
 1896|    678|    if(httpsending)
 1897|       |      /* special and very HTTP-specific */
 1898|      0|      writesockindex = FIRSTSOCKET;
 1899|    678|  }
 1900|  1.59k|  else {
 1901|  1.59k|    conn->sockfd = sockindex == -1 ?
 1902|  1.59k|      CURL_SOCKET_BAD : conn->sock[sockindex];
 1903|  1.59k|    conn->writesockfd = writesockindex == -1 ?
 1904|  1.44k|      CURL_SOCKET_BAD:conn->sock[writesockindex];
 1905|  1.59k|  }
 1906|  2.26k|  k->getheader = getheader;
 1907|       |
 1908|  2.26k|  k->size = size;
 1909|       |
 1910|       |  /* The code sequence below is placed in this function just because all
 1911|       |     necessary input is not always known in do_complete() as this function may
 1912|       |     be called after that */
 1913|       |
 1914|  2.26k|  if(!k->getheader) {
 1915|      0|    k->header = FALSE;
 1916|      0|    if(size > 0)
 1917|      0|      Curl_pgrsSetDownloadSize(data, size);
 1918|      0|  }
 1919|       |  /* we want header and/or body, if neither then don't do this! */
 1920|  2.26k|  if(k->getheader || !data->set.opt_no_body) {
 1921|       |
 1922|  2.26k|    if(sockindex != -1)
 1923|  2.26k|      k->keepon |= KEEP_RECV;
 1924|       |
 1925|  2.26k|    if(writesockindex != -1) {
 1926|       |      /* HTTP 1.1 magic:
 1927|       |
 1928|       |         Even if we require a 100-return code before uploading data, we might
 1929|       |         need to write data before that since the REQUEST may not have been
 1930|       |         finished sent off just yet.
 1931|       |
 1932|       |         Thus, we must check if the request has been sent before we set the
 1933|       |         state info where we wait for the 100-return code
 1934|       |      */
 1935|    174|      if((data->state.expect100header) &&
 1936|    174|         (conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1937|    174|         (http->sending == HTTPSEND_BODY)) {
 1938|       |        /* wait with write until we either got 100-continue or a timeout */
 1939|     28|        k->exp100 = EXP100_AWAITING_CONTINUE;
 1940|     28|        k->start100 = Curl_now();
 1941|       |
 1942|       |        /* Set a timeout for the multi interface. Add the inaccuracy margin so
 1943|       |           that we don't fire slightly too early and get denied to run. */
 1944|     28|        Curl_expire(data, data->set.expect_100_timeout, EXPIRE_100_TIMEOUT);
 1945|     28|      }
 1946|    146|      else {
 1947|    146|        if(data->state.expect100header)
 1948|       |          /* when we've sent off the rest of the headers, we must await a
 1949|       |             100-continue but first finish sending the request */
 1950|      0|          k->exp100 = EXP100_SENDING_REQUEST;
 1951|       |
 1952|       |        /* enable the write bit when we're not waiting for continue */
 1953|    146|        k->keepon |= KEEP_SEND;
 1954|    146|      }
 1955|    174|    } /* if(writesockindex != -1) */
 1956|  2.26k|  } /* if(k->getheader || !data->set.opt_no_body) */
 1957|       |
 1958|  2.26k|}
transfer.c:readwrite_data:
  564|  3.11k|{
  565|  3.11k|  CURLcode result = CURLE_OK;
  566|  3.11k|  ssize_t nread; /* number of bytes read */
  567|  3.11k|  size_t excess = 0; /* excess bytes read */
  568|  3.11k|  bool readmore = FALSE; /* used by RTP to signal for more data */
  569|  3.11k|  int maxloops = 100;
  570|  3.11k|  char *buf = data->state.buffer;
  571|  3.11k|  DEBUGASSERT(buf);
  572|       |
  573|  3.11k|  *done = FALSE;
  574|  3.11k|  *comeback = FALSE;
  575|       |
  576|       |  /* This is where we loop until we have read everything there is to
  577|       |     read or we get a CURLE_AGAIN */
  578|  25.4k|  do {
  579|  25.4k|    bool is_empty_data = FALSE;
  580|  25.4k|    size_t buffersize = data->set.buffer_size;
  581|  25.4k|    size_t bytestoread = buffersize;
  582|  25.4k|#ifdef USE_NGHTTP2
  583|  25.4k|    bool is_http2 = ((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  584|  25.4k|                     (conn->httpversion == 20));
  585|  25.4k|#endif
  586|       |
  587|  25.4k|    if(
  588|  25.4k|#ifdef USE_NGHTTP2
  589|       |       /* For HTTP/2, read data without caring about the content
  590|       |          length. This is safe because body in HTTP/2 is always
  591|       |          segmented thanks to its framing layer. Meanwhile, we have to
  592|       |          call Curl_read to ensure that http2_handle_stream_close is
  593|       |          called when we read all incoming bytes for a particular
  594|       |          stream. */
  595|  25.4k|       !is_http2 &&
  596|  25.4k|#endif
  597|  25.4k|       k->size != -1 && !k->header) {
  598|       |      /* make sure we don't read too much */
  599|     54|      curl_off_t totalleft = k->size - k->bytecount;
  600|     54|      if(totalleft < (curl_off_t)bytestoread)
  601|     51|        bytestoread = (size_t)totalleft;
  602|     54|    }
  603|       |
  604|  25.4k|    if(bytestoread) {
  605|       |      /* receive data from the network! */
  606|  25.4k|      result = Curl_read(data, conn->sockfd, buf, bytestoread, &nread);
  607|       |
  608|       |      /* read would've blocked */
  609|  25.4k|      if(CURLE_AGAIN == result)
  610|    106|        break; /* get out of loop */
  611|       |
  612|  25.3k|      if(result>0)
  613|    430|        return result;
  614|  25.3k|    }
  615|      6|    else {
  616|       |      /* read nothing but since we wanted nothing we consider this an OK
  617|       |         situation to proceed from */
  618|      6|      DEBUGF(infof(data, "readwrite_data: we're done!"));
  619|      6|      nread = 0;
  620|      6|    }
  621|       |
  622|  24.9k|    if(!k->bytecount) {
  623|  24.6k|      Curl_pgrsTime(data, TIMER_STARTTRANSFER);
  624|  24.6k|      if(k->exp100 > EXP100_SEND_DATA)
  625|       |        /* set time stamp to compare with when waiting for the 100 */
  626|    133|        k->start100 = Curl_now();
  627|  24.6k|    }
  628|       |
  629|  24.9k|    *didwhat |= KEEP_RECV;
  630|       |    /* indicates data of zero size, i.e. empty file */
  631|  24.9k|    is_empty_data = ((nread == 0) && (k->bodywrites == 0)) ? TRUE : FALSE;
  632|       |
  633|  24.9k|    if(0 < nread || is_empty_data) {
  634|  24.7k|      buf[nread] = 0;
  635|  24.7k|    }
  636|    241|    else {
  637|       |      /* if we receive 0 or less here, either the http2 stream is closed or the
  638|       |         server closed the connection and we bail out from this! */
  639|    241|#ifdef USE_NGHTTP2
  640|    241|      if(is_http2 && !nread)
  641|     35|        DEBUGF(infof(data, "nread == 0, stream closed, bailing"));
  642|    206|      else
  643|    206|#endif
  644|    206|        DEBUGF(infof(data, "nread <= 0, server closed connection, bailing"));
  645|    241|      k->keepon &= ~KEEP_RECV;
  646|    241|      break;
  647|    241|    }
  648|       |
  649|       |    /* Default buffer to use when we write the buffer, it may be changed
  650|       |       in the flow below before the actual storing is done. */
  651|  24.7k|    k->str = buf;
  652|       |
  653|  24.7k|    if(conn->handler->readwrite) {
  654|      0|      result = conn->handler->readwrite(data, conn, &nread, &readmore);
  655|      0|      if(result)
  656|      0|        return result;
  657|      0|      if(readmore)
  658|      0|        break;
  659|      0|    }
  660|       |
  661|  24.7k|#ifndef CURL_DISABLE_HTTP
  662|       |    /* Since this is a two-state thing, we check if we are parsing
  663|       |       headers at the moment or not. */
  664|  24.7k|    if(k->header) {
  665|       |      /* we are in parse-the-header-mode */
  666|  24.6k|      bool stop_reading = FALSE;
  667|  24.6k|      result = Curl_http_readwrite_headers(data, conn, &nread, &stop_reading);
  668|  24.6k|      if(result)
  669|     55|        return result;
  670|       |
  671|  24.5k|      if(conn->handler->readwrite &&
  672|  24.5k|         (k->maxdownload <= 0 && nread > 0)) {
  673|      0|        result = conn->handler->readwrite(data, conn, &nread, &readmore);
  674|      0|        if(result)
  675|      0|          return result;
  676|      0|        if(readmore)
  677|      0|          break;
  678|      0|      }
  679|       |
  680|  24.5k|      if(stop_reading) {
  681|       |        /* We've stopped dealing with input, get out of the do-while loop */
  682|       |
  683|     20|        if(nread > 0) {
  684|     16|          infof(data,
  685|     16|                "Excess found:"
  686|     16|                " excess = %zd"
  687|     16|                " url = %s (zero-length body)",
  688|     16|                nread, data->state.up.path);
  689|     16|        }
  690|       |
  691|     20|        break;
  692|     20|      }
  693|  24.5k|    }
  694|  24.6k|#endif /* CURL_DISABLE_HTTP */
  695|       |
  696|       |
  697|       |    /* This is not an 'else if' since it may be a rest from the header
  698|       |       parsing, where the beginning of the buffer is headers and the end
  699|       |       is non-headers. */
  700|  24.6k|    if(!k->header && (nread > 0 || is_empty_data)) {
  701|       |
  702|    619|      if(data->set.opt_no_body) {
  703|       |        /* data arrives although we want none, bail out */
  704|      0|        streamclose(conn, "ignoring body");
  705|      0|        *done = TRUE;
  706|      0|        return CURLE_WEIRD_SERVER_REPLY;
  707|      0|      }
  708|       |
  709|    619|#ifndef CURL_DISABLE_HTTP
  710|    619|      if(0 == k->bodywrites && !is_empty_data) {
  711|       |        /* These checks are only made the first time we are about to
  712|       |           write a piece of the body */
  713|    547|        if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  714|       |          /* HTTP-only checks */
  715|    547|          result = Curl_http_firstwrite(data, conn, done);
  716|    547|          if(result || *done)
  717|     96|            return result;
  718|    547|        }
  719|    547|      } /* this is the first time we write a body part */
  720|    523|#endif /* CURL_DISABLE_HTTP */
  721|       |
  722|    523|      k->bodywrites++;
  723|       |
  724|       |      /* pass data to the debug function before it gets "dechunked" */
  725|    523|      if(data->set.verbose) {
  726|      0|        if(k->badheader) {
  727|      0|          Curl_debug(data, CURLINFO_DATA_IN,
  728|      0|                     Curl_dyn_ptr(&data->state.headerb),
  729|      0|                     Curl_dyn_len(&data->state.headerb));
  730|      0|          if(k->badheader == HEADER_PARTHEADER)
  731|      0|            Curl_debug(data, CURLINFO_DATA_IN,
  732|      0|                       k->str, (size_t)nread);
  733|      0|        }
  734|      0|        else
  735|      0|          Curl_debug(data, CURLINFO_DATA_IN,
  736|      0|                     k->str, (size_t)nread);
  737|      0|      }
  738|       |
  739|    523|#ifndef CURL_DISABLE_HTTP
  740|    523|      if(k->chunk) {
  741|       |        /*
  742|       |         * Here comes a chunked transfer flying and we need to decode this
  743|       |         * properly.  While the name says read, this function both reads
  744|       |         * and writes away the data. The returned 'nread' holds the number
  745|       |         * of actual data it wrote to the client.
  746|       |         */
  747|      0|        CURLcode extra;
  748|      0|        CHUNKcode res =
  749|      0|          Curl_httpchunk_read(data, k->str, nread, &nread, &extra);
  750|       |
  751|      0|        if(CHUNKE_OK < res) {
  752|      0|          if(CHUNKE_PASSTHRU_ERROR == res) {
  753|      0|            failf(data, "Failed reading the chunked-encoded stream");
  754|      0|            return extra;
  755|      0|          }
  756|      0|          failf(data, "%s in chunked-encoding", Curl_chunked_strerror(res));
  757|      0|          return CURLE_RECV_ERROR;
  758|      0|        }
  759|      0|        if(CHUNKE_STOP == res) {
  760|       |          /* we're done reading chunks! */
  761|      0|          k->keepon &= ~KEEP_RECV; /* read no more */
  762|       |
  763|       |          /* N number of bytes at the end of the str buffer that weren't
  764|       |             written to the client. */
  765|      0|          if(conn->chunk.datasize) {
  766|      0|            infof(data, "Leftovers after chunking: % "
  767|      0|                  CURL_FORMAT_CURL_OFF_T "u bytes",
  768|      0|                  conn->chunk.datasize);
  769|      0|          }
  770|      0|        }
  771|       |        /* If it returned OK, we just keep going */
  772|      0|      }
  773|    523|#endif   /* CURL_DISABLE_HTTP */
  774|       |
  775|       |      /* Account for body content stored in the header buffer */
  776|    523|      if((k->badheader == HEADER_PARTHEADER) && !k->ignorebody) {
  777|      0|        size_t headlen = Curl_dyn_len(&data->state.headerb);
  778|      0|        DEBUGF(infof(data, "Increasing bytecount by %zu", headlen));
  779|      0|        k->bytecount += headlen;
  780|      0|      }
  781|       |
  782|    523|      if((-1 != k->maxdownload) &&
  783|    523|         (k->bytecount + nread >= k->maxdownload)) {
  784|       |
  785|    167|        excess = (size_t)(k->bytecount + nread - k->maxdownload);
  786|    167|        if(excess > 0 && !k->ignorebody) {
  787|     73|          infof(data,
  788|     73|                "Excess found in a read:"
  789|     73|                " excess = %zu"
  790|     73|                ", size = %" CURL_FORMAT_CURL_OFF_T
  791|     73|                ", maxdownload = %" CURL_FORMAT_CURL_OFF_T
  792|     73|                ", bytecount = %" CURL_FORMAT_CURL_OFF_T,
  793|     73|                excess, k->size, k->maxdownload, k->bytecount);
  794|     73|          connclose(conn, "excess found in a read");
  795|     73|        }
  796|       |
  797|    167|        nread = (ssize_t) (k->maxdownload - k->bytecount);
  798|    167|        if(nread < 0) /* this should be unusual */
  799|      0|          nread = 0;
  800|       |
  801|    167|        k->keepon &= ~KEEP_RECV; /* we're done reading */
  802|    167|      }
  803|       |
  804|    523|      k->bytecount += nread;
  805|       |
  806|    523|      Curl_pgrsSetDownloadCounter(data, k->bytecount);
  807|       |
  808|    523|      if(!k->chunk && (nread || k->badheader || is_empty_data)) {
  809|       |        /* If this is chunky transfer, it was already written */
  810|       |
  811|    522|        if(k->badheader && !k->ignorebody) {
  812|       |          /* we parsed a piece of data wrongly assuming it was a header
  813|       |             and now we output it as body instead */
  814|      0|          size_t headlen = Curl_dyn_len(&data->state.headerb);
  815|       |
  816|       |          /* Don't let excess data pollute body writes */
  817|      0|          if(k->maxdownload == -1 || (curl_off_t)headlen <= k->maxdownload)
  818|      0|            result = Curl_client_write(data, CLIENTWRITE_BODY,
  819|      0|                                       Curl_dyn_ptr(&data->state.headerb),
  820|      0|                                       headlen);
  821|      0|          else
  822|      0|            result = Curl_client_write(data, CLIENTWRITE_BODY,
  823|      0|                                       Curl_dyn_ptr(&data->state.headerb),
  824|      0|                                       (size_t)k->maxdownload);
  825|       |
  826|      0|          if(result)
  827|      0|            return result;
  828|      0|        }
  829|    522|        if(k->badheader < HEADER_ALLBAD) {
  830|       |          /* This switch handles various content encodings. If there's an
  831|       |             error here, be sure to check over the almost identical code
  832|       |             in http_chunks.c.
  833|       |             Make sure that ALL_CONTENT_ENCODINGS contains all the
  834|       |             encodings handled here. */
  835|    522|          if(data->set.http_ce_skip || !k->writer_stack) {
  836|    292|            if(!k->ignorebody && nread) {
  837|    197|#ifndef CURL_DISABLE_POP3
  838|    197|              if(conn->handler->protocol & PROTO_FAMILY_POP3)
  839|      0|                result = Curl_pop3_write(data, k->str, nread);
  840|    197|              else
  841|    197|#endif /* CURL_DISABLE_POP3 */
  842|    197|                result = Curl_client_write(data, CLIENTWRITE_BODY, k->str,
  843|    197|                                           nread);
  844|    197|            }
  845|    292|          }
  846|    230|          else if(!k->ignorebody && nread)
  847|    229|            result = Curl_unencode_write(data, k->writer_stack, k->str, nread);
  848|    522|        }
  849|    522|        k->badheader = HEADER_NORMAL; /* taken care of now */
  850|       |
  851|    522|        if(result)
  852|    103|          return result;
  853|    522|      }
  854|       |
  855|    523|    } /* if(!header and data to read) */
  856|       |
  857|  24.4k|    if(conn->handler->readwrite && excess) {
  858|       |      /* Parse the excess data */
  859|      0|      k->str += nread;
  860|       |
  861|      0|      if(&k->str[excess] > &buf[data->set.buffer_size]) {
  862|       |        /* the excess amount was too excessive(!), make sure
  863|       |           it doesn't read out of buffer */
  864|      0|        excess = &buf[data->set.buffer_size] - k->str;
  865|      0|      }
  866|      0|      nread = (ssize_t)excess;
  867|       |
  868|      0|      result = conn->handler->readwrite(data, conn, &nread, &readmore);
  869|      0|      if(result)
  870|      0|        return result;
  871|       |
  872|      0|      if(readmore)
  873|      0|        k->keepon |= KEEP_RECV; /* we're not done reading */
  874|      0|      break;
  875|      0|    }
  876|       |
  877|  24.4k|    if(is_empty_data) {
  878|       |      /* if we received nothing, the server closed the connection and we
  879|       |         are done */
  880|  23.4k|      k->keepon &= ~KEEP_RECV;
  881|  23.4k|    }
  882|       |
  883|  24.4k|    if(k->keepon & KEEP_RECV_PAUSE) {
  884|       |      /* this is a paused transfer */
  885|      0|      break;
  886|      0|    }
  887|       |
  888|  24.4k|  } while(data_pending(data) && maxloops--);
  889|       |
  890|  2.43k|  if(maxloops <= 0) {
  891|       |    /* we mark it as read-again-please */
  892|    223|    conn->cselect_bits = CURL_CSELECT_IN;
  893|    223|    *comeback = TRUE;
  894|    223|  }
  895|       |
  896|  2.43k|  if(((k->keepon & (KEEP_RECV|KEEP_SEND)) == KEEP_SEND) &&
  897|  2.43k|     conn->bits.close) {
  898|       |    /* When we've read the entire thing and the close bit is set, the server
  899|       |       may now close the connection. If there's now any kind of sending going
  900|       |       on from our side, we need to stop that immediately. */
  901|      9|    infof(data, "we are done reading and this is set to close, stop send");
  902|      9|    k->keepon &= ~KEEP_SEND; /* no writing anymore either */
  903|      9|  }
  904|       |
  905|  2.43k|  return CURLE_OK;
  906|  3.11k|}
transfer.c:data_pending:
  492|  24.4k|{
  493|  24.4k|  struct connectdata *conn = data->conn;
  494|       |
  495|       |#ifdef ENABLE_QUIC
  496|       |  if(conn->transport == TRNSPRT_QUIC)
  497|       |    return Curl_quic_data_pending(data);
  498|       |#endif
  499|       |
  500|  24.4k|  if(conn->handler->protocol&PROTO_FAMILY_FTP)
  501|      0|    return Curl_ssl_data_pending(conn, SECONDARYSOCKET);
  502|       |
  503|       |  /* in the case of libssh2, we can never be really sure that we have emptied
  504|       |     its internal buffers so we MUST always try until we get EAGAIN back */
  505|  24.4k|  return conn->handler->protocol&(CURLPROTO_SCP|CURLPROTO_SFTP) ||
  506|  24.4k|#if defined(USE_NGHTTP2)
  507|       |    /* For HTTP/2, we may read up everything including response body
  508|       |       with header fields in Curl_http_readwrite_headers. If no
  509|       |       content-length is provided, curl waits for the connection
  510|       |       close, which we emulate it using conn->proto.httpc.closed =
  511|       |       TRUE. The thing is if we read everything, then http2_recv won't
  512|       |       be called and we cannot signal the HTTP/2 stream has closed. As
  513|       |       a workaround, we return nonzero here to call http2_recv. */
  514|  24.4k|    ((conn->handler->protocol&PROTO_FAMILY_HTTP) && conn->httpversion >= 20) ||
  515|  24.4k|#endif
  516|  24.4k|    Curl_ssl_data_pending(conn, FIRSTSOCKET);
  517|  24.4k|}
transfer.c:readwrite_upload:
  953|    138|{
  954|    138|  ssize_t i, si;
  955|    138|  ssize_t bytes_written;
  956|    138|  CURLcode result;
  957|    138|  ssize_t nread; /* number of bytes read */
  958|    138|  bool sending_http_headers = FALSE;
  959|    138|  struct SingleRequest *k = &data->req;
  960|       |
  961|    138|  if((k->bytecount == 0) && (k->writebytecount == 0))
  962|    117|    Curl_pgrsTime(data, TIMER_STARTTRANSFER);
  963|       |
  964|    138|  *didwhat |= KEEP_SEND;
  965|       |
  966|    138|  do {
  967|    138|    curl_off_t nbody;
  968|       |
  969|       |    /* only read more data if there's no upload data already
  970|       |       present in the upload buffer */
  971|    138|    if(0 == k->upload_present) {
  972|    122|      result = Curl_get_upload_buffer(data);
  973|    122|      if(result)
  974|      0|        return result;
  975|       |      /* init the "upload from here" pointer */
  976|    122|      k->upload_fromhere = data->state.ulbuf;
  977|       |
  978|    122|      if(!k->upload_done) {
  979|       |        /* HTTP pollution, this should be written nicer to become more
  980|       |           protocol agnostic. */
  981|    121|        size_t fillcount;
  982|    121|        struct HTTP *http = k->p.http;
  983|       |
  984|    121|        if((k->exp100 == EXP100_SENDING_REQUEST) &&
  985|    121|           (http->sending == HTTPSEND_BODY)) {
  986|       |          /* If this call is to send body data, we must take some action:
  987|       |             We have sent off the full HTTP 1.1 request, and we shall now
  988|       |             go into the Expect: 100 state and await such a header */
  989|      0|          k->exp100 = EXP100_AWAITING_CONTINUE; /* wait for the header */
  990|      0|          k->keepon &= ~KEEP_SEND;         /* disable writing */
  991|      0|          k->start100 = Curl_now();       /* timeout count starts now */
  992|      0|          *didwhat &= ~KEEP_SEND;  /* we didn't write anything actually */
  993|       |          /* set a timeout for the multi interface */
  994|      0|          Curl_expire(data, data->set.expect_100_timeout, EXPIRE_100_TIMEOUT);
  995|      0|          break;
  996|      0|        }
  997|       |
  998|    121|        if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  999|    121|          if(http->sending == HTTPSEND_REQUEST)
 1000|       |            /* We're sending the HTTP request headers, not the data.
 1001|       |               Remember that so we don't change the line endings. */
 1002|      0|            sending_http_headers = TRUE;
 1003|    121|          else
 1004|    121|            sending_http_headers = FALSE;
 1005|    121|        }
 1006|       |
 1007|    121|        result = Curl_fillreadbuffer(data, data->set.upload_buffer_size,
 1008|    121|                                     &fillcount);
 1009|    121|        if(result)
 1010|      3|          return result;
 1011|       |
 1012|    118|        nread = fillcount;
 1013|    118|      }
 1014|      1|      else
 1015|      1|        nread = 0; /* we're done uploading/reading */
 1016|       |
 1017|    119|      if(!nread && (k->keepon & KEEP_SEND_PAUSE)) {
 1018|       |        /* this is a paused transfer */
 1019|      0|        break;
 1020|      0|      }
 1021|    119|      if(nread <= 0) {
 1022|      1|        result = Curl_done_sending(data, k);
 1023|      1|        if(result)
 1024|      0|          return result;
 1025|      1|        break;
 1026|      1|      }
 1027|       |
 1028|       |      /* store number of bytes available for upload */
 1029|    118|      k->upload_present = nread;
 1030|       |
 1031|       |      /* convert LF to CRLF if so asked */
 1032|    118|      if((!sending_http_headers) && (
 1033|    118|#ifdef CURL_DO_LINEEND_CONV
 1034|       |         /* always convert if we're FTPing in ASCII mode */
 1035|    118|         (data->state.prefer_ascii) ||
 1036|    118|#endif
 1037|    118|         (data->set.crlf))) {
 1038|       |        /* Do we need to allocate a scratch buffer? */
 1039|      0|        if(!data->state.scratch) {
 1040|      0|          data->state.scratch = malloc(2 * data->set.upload_buffer_size);
 1041|      0|          if(!data->state.scratch) {
 1042|      0|            failf(data, "Failed to alloc scratch buffer!");
 1043|       |
 1044|      0|            return CURLE_OUT_OF_MEMORY;
 1045|      0|          }
 1046|      0|        }
 1047|       |
 1048|       |        /*
 1049|       |         * ASCII/EBCDIC Note: This is presumably a text (not binary)
 1050|       |         * transfer so the data should already be in ASCII.
 1051|       |         * That means the hex values for ASCII CR (0x0d) & LF (0x0a)
 1052|       |         * must be used instead of the escape sequences \r & \n.
 1053|       |         */
 1054|      0|        for(i = 0, si = 0; i < nread; i++, si++) {
 1055|      0|          if(k->upload_fromhere[i] == 0x0a) {
 1056|      0|            data->state.scratch[si++] = 0x0d;
 1057|      0|            data->state.scratch[si] = 0x0a;
 1058|      0|            if(!data->set.crlf) {
 1059|       |              /* we're here only because FTP is in ASCII mode...
 1060|       |                 bump infilesize for the LF we just added */
 1061|      0|              if(data->state.infilesize != -1)
 1062|      0|                data->state.infilesize++;
 1063|      0|            }
 1064|      0|          }
 1065|      0|          else
 1066|      0|            data->state.scratch[si] = k->upload_fromhere[i];
 1067|      0|        }
 1068|       |
 1069|      0|        if(si != nread) {
 1070|       |          /* only perform the special operation if we really did replace
 1071|       |             anything */
 1072|      0|          nread = si;
 1073|       |
 1074|       |          /* upload from the new (replaced) buffer instead */
 1075|      0|          k->upload_fromhere = data->state.scratch;
 1076|       |
 1077|       |          /* set the new amount too */
 1078|      0|          k->upload_present = nread;
 1079|      0|        }
 1080|      0|      }
 1081|       |
 1082|    118|#ifndef CURL_DISABLE_SMTP
 1083|    118|      if(conn->handler->protocol & PROTO_FAMILY_SMTP) {
 1084|      0|        result = Curl_smtp_escape_eob(data, nread);
 1085|      0|        if(result)
 1086|      0|          return result;
 1087|      0|      }
 1088|    118|#endif /* CURL_DISABLE_SMTP */
 1089|    118|    } /* if 0 == k->upload_present */
 1090|     16|    else {
 1091|       |      /* We have a partial buffer left from a previous "round". Use
 1092|       |         that instead of reading more data */
 1093|     16|    }
 1094|       |
 1095|       |    /* write to socket (send away data) */
 1096|    134|    result = Curl_write(data,
 1097|    134|                        conn->writesockfd,  /* socket to send to */
 1098|    134|                        k->upload_fromhere, /* buffer pointer */
 1099|    134|                        k->upload_present,  /* buffer size */
 1100|    134|                        &bytes_written);    /* actually sent */
 1101|    134|    if(result)
 1102|      1|      return result;
 1103|       |
 1104|    133|    win_update_buffer_size(conn->writesockfd);
 1105|       |
 1106|    133|    if(k->pendingheader) {
 1107|       |      /* parts of what was sent was header */
 1108|      0|      curl_off_t n = CURLMIN(k->pendingheader, bytes_written);
 1109|       |      /* show the data before we change the pointer upload_fromhere */
 1110|      0|      Curl_debug(data, CURLINFO_HEADER_OUT, k->upload_fromhere, (size_t)n);
 1111|      0|      k->pendingheader -= n;
 1112|      0|      nbody = bytes_written - n; /* size of the written body part */
 1113|      0|    }
 1114|    133|    else
 1115|    133|      nbody = bytes_written;
 1116|       |
 1117|    133|    if(nbody) {
 1118|       |      /* show the data before we change the pointer upload_fromhere */
 1119|    114|      Curl_debug(data, CURLINFO_DATA_OUT,
 1120|    114|                 &k->upload_fromhere[bytes_written - nbody],
 1121|    114|                 (size_t)nbody);
 1122|       |
 1123|    114|      k->writebytecount += nbody;
 1124|    114|      Curl_pgrsSetUploadCounter(data, k->writebytecount);
 1125|    114|    }
 1126|       |
 1127|    133|    if((!k->upload_chunky || k->forbidchunk) &&
 1128|    133|       (k->writebytecount == data->state.infilesize)) {
 1129|       |      /* we have sent all data we were supposed to */
 1130|    103|      k->upload_done = TRUE;
 1131|    103|      infof(data, "We are completely uploaded and fine");
 1132|    103|    }
 1133|       |
 1134|    133|    if(k->upload_present != bytes_written) {
 1135|       |      /* we only wrote a part of the buffer (if anything), deal with it! */
 1136|       |
 1137|       |      /* store the amount of bytes left in the buffer to write */
 1138|     24|      k->upload_present -= bytes_written;
 1139|       |
 1140|       |      /* advance the pointer where to find the buffer when the next send
 1141|       |         is to happen */
 1142|     24|      k->upload_fromhere += bytes_written;
 1143|     24|    }
 1144|    109|    else {
 1145|       |      /* we've uploaded that buffer now */
 1146|    109|      result = Curl_get_upload_buffer(data);
 1147|    109|      if(result)
 1148|      0|        return result;
 1149|    109|      k->upload_fromhere = data->state.ulbuf;
 1150|    109|      k->upload_present = 0; /* no more bytes left */
 1151|       |
 1152|    109|      if(k->upload_done) {
 1153|    105|        result = Curl_done_sending(data, k);
 1154|    105|        if(result)
 1155|      0|          return result;
 1156|    105|      }
 1157|    109|    }
 1158|       |
 1159|       |
 1160|    133|  } while(0); /* just to break out from! */
 1161|       |
 1162|    134|  return CURLE_OK;
 1163|    138|}

Curl_freeset:
  310|  4.57k|{
  311|       |  /* Free all dynamic strings stored in the data->set substructure. */
  312|  4.57k|  enum dupstring i;
  313|  4.57k|  enum dupblob j;
  314|       |
  315|   374k|  for(i = (enum dupstring)0; i < STRING_LAST; i++) {
  316|   370k|    Curl_safefree(data->set.str[i]);
  317|   370k|  }
  318|       |
  319|  41.1k|  for(j = (enum dupblob)0; j < BLOB_LAST; j++) {
  320|  36.5k|    Curl_safefree(data->set.blobs[j]);
  321|  36.5k|  }
  322|       |
  323|  4.57k|  if(data->state.referer_alloc) {
  324|      0|    Curl_safefree(data->state.referer);
  325|      0|    data->state.referer_alloc = FALSE;
  326|      0|  }
  327|  4.57k|  data->state.referer = NULL;
  328|  4.57k|  if(data->state.url_alloc) {
  329|  2.13k|    Curl_safefree(data->state.url);
  330|  2.13k|    data->state.url_alloc = FALSE;
  331|  2.13k|  }
  332|  4.57k|  data->state.url = NULL;
  333|       |
  334|  4.57k|  Curl_mime_cleanpart(&data->set.mimepost);
  335|  4.57k|}
Curl_close:
  363|  4.57k|{
  364|  4.57k|  struct Curl_multi *m;
  365|  4.57k|  struct Curl_easy *data;
  366|       |
  367|  4.57k|  if(!datap || !*datap)
  368|      0|    return CURLE_OK;
  369|       |
  370|  4.57k|  data = *datap;
  371|  4.57k|  *datap = NULL;
  372|       |
  373|  4.57k|  Curl_expire_clear(data); /* shut off timers */
  374|       |
  375|       |  /* Detach connection if any is left. This should not be normal, but can be
  376|       |     the case for example with CONNECT_ONLY + recv/send (test 556) */
  377|  4.57k|  Curl_detach_connnection(data);
  378|  4.57k|  m = data->multi;
  379|  4.57k|  if(m)
  380|       |    /* This handle is still part of a multi handle, take care of this first
  381|       |       and detach this handle from there. */
  382|      0|    curl_multi_remove_handle(data->multi, data);
  383|       |
  384|  4.57k|  if(data->multi_easy) {
  385|       |    /* when curl_easy_perform() is used, it creates its own multi handle to
  386|       |       use and this is the one */
  387|      0|    curl_multi_cleanup(data->multi_easy);
  388|      0|    data->multi_easy = NULL;
  389|      0|  }
  390|       |
  391|       |  /* Destroy the timeout list that is held in the easy handle. It is
  392|       |     /normally/ done by curl_multi_remove_handle() but this is "just in
  393|       |     case" */
  394|  4.57k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  395|       |
  396|  4.57k|  data->magic = 0; /* force a clear AFTER the possibly enforced removal from
  397|       |                      the multi handle, since that function uses the magic
  398|       |                      field! */
  399|       |
  400|  4.57k|  if(data->state.rangestringalloc)
  401|     17|    free(data->state.range);
  402|       |
  403|       |  /* freed here just in case DONE wasn't called */
  404|  4.57k|  Curl_free_request_state(data);
  405|       |
  406|       |  /* Close down all open SSL info and sessions */
  407|  4.57k|  Curl_ssl_close_all(data);
  408|  4.57k|  Curl_safefree(data->state.first_host);
  409|  4.57k|  Curl_safefree(data->state.scratch);
  410|  4.57k|  Curl_ssl_free_certinfo(data);
  411|       |
  412|       |  /* Cleanup possible redirect junk */
  413|  4.57k|  free(data->req.newurl);
  414|  4.57k|  data->req.newurl = NULL;
  415|       |
  416|  4.57k|  if(data->state.referer_alloc) {
  417|      0|    Curl_safefree(data->state.referer);
  418|      0|    data->state.referer_alloc = FALSE;
  419|      0|  }
  420|  4.57k|  data->state.referer = NULL;
  421|       |
  422|  4.57k|  up_free(data);
  423|  4.57k|  Curl_safefree(data->state.buffer);
  424|  4.57k|  Curl_dyn_free(&data->state.headerb);
  425|  4.57k|  Curl_safefree(data->state.ulbuf);
  426|  4.57k|  Curl_flush_cookies(data, TRUE);
  427|  4.57k|  Curl_altsvc_save(data, data->asi, data->set.str[STRING_ALTSVC]);
  428|  4.57k|  Curl_altsvc_cleanup(&data->asi);
  429|  4.57k|  Curl_hsts_save(data, data->hsts, data->set.str[STRING_HSTS]);
  430|  4.57k|  Curl_hsts_cleanup(&data->hsts);
  431|  4.57k|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_CRYPTO_AUTH)
  432|  4.57k|  Curl_http_auth_cleanup_digest(data);
  433|  4.57k|#endif
  434|  4.57k|  Curl_safefree(data->info.contenttype);
  435|  4.57k|  Curl_safefree(data->info.wouldredirect);
  436|       |
  437|       |  /* this destroys the channel and we cannot use it anymore after this */
  438|  4.57k|  Curl_resolver_cleanup(data->state.async.resolver);
  439|       |
  440|  4.57k|  Curl_http2_cleanup_dependencies(data);
  441|  4.57k|  Curl_convert_close(data);
  442|       |
  443|       |  /* No longer a dirty share, if it exists */
  444|  4.57k|  if(data->share) {
  445|      0|    Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
  446|      0|    data->share->dirty--;
  447|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
  448|      0|  }
  449|       |
  450|  4.57k|  Curl_safefree(data->state.aptr.proxyuserpwd);
  451|  4.57k|  Curl_safefree(data->state.aptr.uagent);
  452|  4.57k|  Curl_safefree(data->state.aptr.userpwd);
  453|  4.57k|  Curl_safefree(data->state.aptr.accept_encoding);
  454|  4.57k|  Curl_safefree(data->state.aptr.te);
  455|  4.57k|  Curl_safefree(data->state.aptr.rangeline);
  456|  4.57k|  Curl_safefree(data->state.aptr.ref);
  457|  4.57k|  Curl_safefree(data->state.aptr.host);
  458|  4.57k|  Curl_safefree(data->state.aptr.cookiehost);
  459|  4.57k|  Curl_safefree(data->state.aptr.rtsp_transport);
  460|  4.57k|  Curl_safefree(data->state.aptr.user);
  461|  4.57k|  Curl_safefree(data->state.aptr.passwd);
  462|  4.57k|  Curl_safefree(data->state.aptr.proxyuser);
  463|  4.57k|  Curl_safefree(data->state.aptr.proxypasswd);
  464|       |
  465|  4.57k|#ifndef CURL_DISABLE_DOH
  466|  4.57k|  if(data->req.doh) {
  467|      0|    Curl_dyn_free(&data->req.doh->probe[0].serverdoh);
  468|      0|    Curl_dyn_free(&data->req.doh->probe[1].serverdoh);
  469|      0|    curl_slist_free_all(data->req.doh->headers);
  470|      0|    Curl_safefree(data->req.doh);
  471|      0|  }
  472|  4.57k|#endif
  473|       |
  474|       |  /* destruct wildcard structures if it is needed */
  475|  4.57k|  Curl_wildcard_dtor(&data->wildcard);
  476|  4.57k|  Curl_freeset(data);
  477|  4.57k|  free(data);
  478|  4.57k|  return CURLE_OK;
  479|  4.57k|}
Curl_init_userdefined:
  486|  4.57k|{
  487|  4.57k|  struct UserDefined *set = &data->set;
  488|  4.57k|  CURLcode result = CURLE_OK;
  489|       |
  490|  4.57k|  set->out = stdout; /* default output to stdout */
  491|  4.57k|  set->in_set = stdin;  /* default input from stdin */
  492|  4.57k|  set->err  = stderr;  /* default stderr to stderr */
  493|       |
  494|       |  /* use fwrite as default function to store output */
  495|  4.57k|  set->fwrite_func = (curl_write_callback)fwrite;
  496|       |
  497|       |  /* use fread as default function to read input */
  498|  4.57k|  set->fread_func_set = (curl_read_callback)fread;
  499|  4.57k|  set->is_fread_set = 0;
  500|  4.57k|  set->is_fwrite_set = 0;
  501|       |
  502|  4.57k|  set->seek_func = ZERO_NULL;
  503|  4.57k|  set->seek_client = ZERO_NULL;
  504|       |
  505|       |  /* conversion callbacks for non-ASCII hosts */
  506|  4.57k|  set->convfromnetwork = ZERO_NULL;
  507|  4.57k|  set->convtonetwork   = ZERO_NULL;
  508|  4.57k|  set->convfromutf8    = ZERO_NULL;
  509|       |
  510|  4.57k|  set->filesize = -1;        /* we don't know the size */
  511|  4.57k|  set->postfieldsize = -1;   /* unknown size */
  512|  4.57k|  set->maxredirs = -1;       /* allow any amount by default */
  513|       |
  514|  4.57k|  set->method = HTTPREQ_GET; /* Default HTTP request */
  515|  4.57k|  set->rtspreq = RTSPREQ_OPTIONS; /* Default RTSP request */
  516|  4.57k|#ifndef CURL_DISABLE_FTP
  517|  4.57k|  set->ftp_use_epsv = TRUE;   /* FTP defaults to EPSV operations */
  518|  4.57k|  set->ftp_use_eprt = TRUE;   /* FTP defaults to EPRT operations */
  519|  4.57k|  set->ftp_use_pret = FALSE;  /* mainly useful for drftpd servers */
  520|  4.57k|  set->ftp_filemethod = FTPFILE_MULTICWD;
  521|  4.57k|  set->ftp_skip_ip = TRUE;    /* skip PASV IP by default */
  522|  4.57k|#endif
  523|  4.57k|  set->dns_cache_timeout = 60; /* Timeout every 60 seconds by default */
  524|       |
  525|       |  /* Set the default size of the SSL session ID cache */
  526|  4.57k|  set->general_ssl.max_ssl_sessions = 5;
  527|       |
  528|  4.57k|  set->proxyport = 0;
  529|  4.57k|  set->proxytype = CURLPROXY_HTTP; /* defaults to HTTP proxy */
  530|  4.57k|  set->httpauth = CURLAUTH_BASIC;  /* defaults to basic */
  531|  4.57k|  set->proxyauth = CURLAUTH_BASIC; /* defaults to basic */
  532|       |
  533|       |  /* SOCKS5 proxy auth defaults to username/password + GSS-API */
  534|  4.57k|  set->socks5auth = CURLAUTH_BASIC | CURLAUTH_GSSAPI;
  535|       |
  536|       |  /* make libcurl quiet by default: */
  537|  4.57k|  set->hide_progress = TRUE;  /* CURLOPT_NOPROGRESS changes these */
  538|       |
  539|  4.57k|  Curl_mime_initpart(&set->mimepost, data);
  540|       |
  541|       |  /*
  542|       |   * libcurl 7.10 introduced SSL verification *by default*! This needs to be
  543|       |   * switched off unless wanted.
  544|       |   */
  545|  4.57k|  set->doh_verifyhost = TRUE;
  546|  4.57k|  set->doh_verifypeer = TRUE;
  547|  4.57k|  set->ssl.primary.verifypeer = TRUE;
  548|  4.57k|  set->ssl.primary.verifyhost = TRUE;
  549|  4.57k|#ifdef USE_TLS_SRP
  550|  4.57k|  set->ssl.authtype = CURL_TLSAUTH_NONE;
  551|  4.57k|#endif
  552|  4.57k|  set->ssh_auth_types = CURLSSH_AUTH_DEFAULT; /* defaults to any auth
  553|       |                                                      type */
  554|  4.57k|  set->ssl.primary.sessionid = TRUE; /* session ID caching enabled by
  555|       |                                        default */
  556|  4.57k|#ifndef CURL_DISABLE_PROXY
  557|  4.57k|  set->proxy_ssl = set->ssl;
  558|  4.57k|#endif
  559|       |
  560|  4.57k|  set->new_file_perms = 0644;    /* Default permissions */
  561|  4.57k|  set->new_directory_perms = 0755; /* Default permissions */
  562|       |
  563|       |  /* for the *protocols fields we don't use the CURLPROTO_ALL convenience
  564|       |     define since we internally only use the lower 16 bits for the passed
  565|       |     in bitmask to not conflict with the private bits */
  566|  4.57k|  set->allowed_protocols = CURLPROTO_ALL;
  567|  4.57k|  set->redir_protocols = CURLPROTO_HTTP | CURLPROTO_HTTPS | CURLPROTO_FTP |
  568|  4.57k|                         CURLPROTO_FTPS;
  569|       |
  570|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
  571|       |  /*
  572|       |   * disallow unprotected protection negotiation NEC reference implementation
  573|       |   * seem not to follow rfc1961 section 4.3/4.4
  574|       |   */
  575|       |  set->socks5_gssapi_nec = FALSE;
  576|       |#endif
  577|       |
  578|       |  /* Set the default CA cert bundle/path detected/specified at build time.
  579|       |   *
  580|       |   * If Schannel is the selected SSL backend then these locations are
  581|       |   * ignored. We allow setting CA location for schannel only when explicitly
  582|       |   * specified by the user via CURLOPT_CAINFO / --cacert.
  583|       |   */
  584|  4.57k|  if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL) {
  585|  4.57k|#if defined(CURL_CA_BUNDLE)
  586|  4.57k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
  587|  4.57k|    if(result)
  588|      0|      return result;
  589|       |
  590|  4.57k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
  591|  4.57k|                            CURL_CA_BUNDLE);
  592|  4.57k|    if(result)
  593|      0|      return result;
  594|  4.57k|#endif
  595|       |#if defined(CURL_CA_PATH)
  596|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
  597|       |    if(result)
  598|       |      return result;
  599|       |
  600|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
  601|       |    if(result)
  602|       |      return result;
  603|       |#endif
  604|  4.57k|  }
  605|       |
  606|  4.57k|  set->wildcard_enabled = FALSE;
  607|  4.57k|  set->chunk_bgn      = ZERO_NULL;
  608|  4.57k|  set->chunk_end      = ZERO_NULL;
  609|  4.57k|  set->tcp_keepalive = FALSE;
  610|  4.57k|  set->tcp_keepintvl = 60;
  611|  4.57k|  set->tcp_keepidle = 60;
  612|  4.57k|  set->tcp_fastopen = FALSE;
  613|  4.57k|  set->tcp_nodelay = TRUE;
  614|  4.57k|  set->ssl_enable_npn = TRUE;
  615|  4.57k|  set->ssl_enable_alpn = TRUE;
  616|  4.57k|  set->expect_100_timeout = 1000L; /* Wait for a second by default. */
  617|  4.57k|  set->sep_headers = TRUE; /* separated header lists by default */
  618|  4.57k|  set->buffer_size = READBUFFER_SIZE;
  619|  4.57k|  set->upload_buffer_size = UPLOADBUFFER_DEFAULT;
  620|  4.57k|  set->happy_eyeballs_timeout = CURL_HET_DEFAULT;
  621|  4.57k|  set->fnmatch = ZERO_NULL;
  622|  4.57k|  set->upkeep_interval_ms = CURL_UPKEEP_INTERVAL_DEFAULT;
  623|  4.57k|  set->maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */
  624|  4.57k|  set->maxage_conn = 118;
  625|  4.57k|  set->maxlifetime_conn = 0;
  626|  4.57k|  set->http09_allowed = FALSE;
  627|  4.57k|  set->httpwant =
  628|  4.57k|#ifdef USE_NGHTTP2
  629|  4.57k|    CURL_HTTP_VERSION_2TLS
  630|       |#else
  631|       |    CURL_HTTP_VERSION_1_1
  632|       |#endif
  633|  4.57k|    ;
  634|  4.57k|  Curl_http2_init_userset(set);
  635|  4.57k|  return result;
  636|  4.57k|}
Curl_open:
  647|  4.57k|{
  648|  4.57k|  CURLcode result;
  649|  4.57k|  struct Curl_easy *data;
  650|       |
  651|       |  /* Very simple start-up: alloc the struct, init it with zeroes and return */
  652|  4.57k|  data = calloc(1, sizeof(struct Curl_easy));
  653|  4.57k|  if(!data) {
  654|       |    /* this is a very serious error */
  655|      0|    DEBUGF(fprintf(stderr, "Error: calloc of Curl_easy failed\n"));
  656|      0|    return CURLE_OUT_OF_MEMORY;
  657|      0|  }
  658|       |
  659|  4.57k|  data->magic = CURLEASY_MAGIC_NUMBER;
  660|       |
  661|  4.57k|  result = Curl_resolver_init(data, &data->state.async.resolver);
  662|  4.57k|  if(result) {
  663|      0|    DEBUGF(fprintf(stderr, "Error: resolver_init failed\n"));
  664|      0|    free(data);
  665|      0|    return result;
  666|      0|  }
  667|       |
  668|  4.57k|  result = Curl_init_userdefined(data);
  669|  4.57k|  if(!result) {
  670|  4.57k|    Curl_dyn_init(&data->state.headerb, CURL_MAX_HTTP_HEADER);
  671|  4.57k|    Curl_convert_init(data);
  672|  4.57k|    Curl_initinfo(data);
  673|       |
  674|       |    /* most recent connection is not yet defined */
  675|  4.57k|    data->state.lastconnect_id = -1;
  676|       |
  677|  4.57k|    data->progress.flags |= PGRS_HIDE;
  678|  4.57k|    data->state.current_speed = -1; /* init to negative == impossible */
  679|  4.57k|  }
  680|       |
  681|  4.57k|  if(result) {
  682|      0|    Curl_resolver_cleanup(data->state.async.resolver);
  683|      0|    Curl_dyn_free(&data->state.headerb);
  684|      0|    Curl_freeset(data);
  685|      0|    free(data);
  686|      0|    data = NULL;
  687|      0|  }
  688|  4.57k|  else
  689|  4.57k|    *curl = data;
  690|       |
  691|  4.57k|  return result;
  692|  4.57k|}
Curl_disconnect:
  826|  2.44k|{
  827|       |  /* there must be a connection to close */
  828|  2.44k|  DEBUGASSERT(conn);
  829|       |
  830|       |  /* it must be removed from the connection cache */
  831|  2.44k|  DEBUGASSERT(!conn->bundle);
  832|       |
  833|       |  /* there must be an associated transfer */
  834|  2.44k|  DEBUGASSERT(data);
  835|       |
  836|       |  /* the transfer must be detached from the connection */
  837|  2.44k|  DEBUGASSERT(!data->conn);
  838|       |
  839|       |  /*
  840|       |   * If this connection isn't marked to force-close, leave it open if there
  841|       |   * are other users of it
  842|       |   */
  843|  2.44k|  if(CONN_INUSE(conn) && !dead_connection) {
  844|      0|    DEBUGF(infof(data, "Curl_disconnect when inuse: %zu", CONN_INUSE(conn)));
  845|      0|    return CURLE_OK;
  846|      0|  }
  847|       |
  848|  2.44k|  if(conn->dns_entry != NULL) {
  849|     49|    Curl_resolv_unlock(data, conn->dns_entry);
  850|     49|    conn->dns_entry = NULL;
  851|     49|  }
  852|       |
  853|       |  /* Cleanup NTLM connection-related data */
  854|  2.44k|  Curl_http_auth_cleanup_ntlm(conn);
  855|       |
  856|       |  /* Cleanup NEGOTIATE connection-related data */
  857|  2.44k|  Curl_http_auth_cleanup_negotiate(conn);
  858|       |
  859|  2.44k|  if(conn->bits.connect_only)
  860|       |    /* treat the connection as dead in CONNECT_ONLY situations */
  861|      0|    dead_connection = TRUE;
  862|       |
  863|       |  /* temporarily attach the connection to this transfer handle for the
  864|       |     disconnect and shutdown */
  865|  2.44k|  Curl_attach_connnection(data, conn);
  866|       |
  867|  2.44k|  if(conn->handler->disconnect)
  868|       |    /* This is set if protocol-specific cleanups should be made */
  869|    704|    conn->handler->disconnect(data, conn, dead_connection);
  870|       |
  871|  2.44k|  conn_shutdown(data, conn);
  872|       |
  873|       |  /* detach it again */
  874|  2.44k|  Curl_detach_connnection(data);
  875|       |
  876|  2.44k|  conn_free(conn);
  877|  2.44k|  return CURLE_OK;
  878|  2.44k|}
Curl_verboseconnect:
 1538|  2.30k|{
 1539|  2.30k|  if(data->set.verbose)
 1540|      0|    infof(data, "Connected to %s (%s) port %u (#%ld)",
 1541|      0|#ifndef CURL_DISABLE_PROXY
 1542|      0|          conn->bits.socksproxy ? conn->socks_proxy.host.dispname :
 1543|      0|          conn->bits.httpproxy ? conn->http_proxy.host.dispname :
 1544|      0|#endif
 1545|      0|          conn->bits.conn_to_host ? conn->conn_to_host.dispname :
 1546|      0|          conn->host.dispname,
 1547|      0|          conn->primary_ip, conn->port, conn->connection_id);
 1548|  2.30k|}
Curl_is_ASCII_name:
 1555|  4.71k|{
 1556|       |  /* get an UNSIGNED local version of the pointer */
 1557|  4.71k|  const unsigned char *ch = (const unsigned char *)hostname;
 1558|       |
 1559|  4.71k|  if(!hostname) /* bad input, consider it ASCII! */
 1560|      0|    return TRUE;
 1561|       |
 1562|  49.6k|  while(*ch) {
 1563|  45.1k|    if(*ch++ & 0x80)
 1564|    204|      return FALSE;
 1565|  45.1k|  }
 1566|  4.51k|  return TRUE;
 1567|  4.71k|}
Curl_idnconvert_hostname:
 1588|  4.71k|{
 1589|  4.71k|#ifndef USE_LIBIDN2
 1590|  4.71k|  (void)data;
 1591|  4.71k|  (void)data;
 1592|       |#elif defined(CURL_DISABLE_VERBOSE_STRINGS)
 1593|       |  (void)data;
 1594|       |#endif
 1595|       |
 1596|       |  /* set the name we use to display the host name */
 1597|  4.71k|  host->dispname = host->name;
 1598|       |
 1599|       |  /* Check name for non-ASCII and convert hostname to ACE form if we can */
 1600|  4.71k|  if(!Curl_is_ASCII_name(host->name)) {
 1601|       |#ifdef USE_LIBIDN2
 1602|       |    if(idn2_check_version(IDN2_VERSION)) {
 1603|       |      char *ace_hostname = NULL;
 1604|       |#if IDN2_VERSION_NUMBER >= 0x00140000
 1605|       |      /* IDN2_NFC_INPUT: Normalize input string using normalization form C.
 1606|       |         IDN2_NONTRANSITIONAL: Perform Unicode TR46 non-transitional
 1607|       |         processing. */
 1608|       |      int flags = IDN2_NFC_INPUT | IDN2_NONTRANSITIONAL;
 1609|       |#else
 1610|       |      int flags = IDN2_NFC_INPUT;
 1611|       |#endif
 1612|       |      int rc = IDN2_LOOKUP(host->name, &ace_hostname, flags);
 1613|       |      if(rc != IDN2_OK)
 1614|       |        /* fallback to TR46 Transitional mode for better IDNA2003
 1615|       |           compatibility */
 1616|       |        rc = IDN2_LOOKUP(host->name, &ace_hostname,
 1617|       |                         IDN2_TRANSITIONAL);
 1618|       |      if(rc == IDN2_OK) {
 1619|       |        host->encalloc = (char *)ace_hostname;
 1620|       |        /* change the name pointer to point to the encoded hostname */
 1621|       |        host->name = host->encalloc;
 1622|       |      }
 1623|       |      else {
 1624|       |        failf(data, "Failed to convert %s to ACE; %s", host->name,
 1625|       |              idn2_strerror(rc));
 1626|       |        return CURLE_URL_MALFORMAT;
 1627|       |      }
 1628|       |    }
 1629|       |#elif defined(USE_WIN32_IDN)
 1630|       |    char *ace_hostname = NULL;
 1631|       |
 1632|       |    if(curl_win32_idn_to_ascii(host->name, &ace_hostname)) {
 1633|       |      host->encalloc = ace_hostname;
 1634|       |      /* change the name pointer to point to the encoded hostname */
 1635|       |      host->name = host->encalloc;
 1636|       |    }
 1637|       |    else {
 1638|       |      char buffer[STRERROR_LEN];
 1639|       |      failf(data, "Failed to convert %s to ACE; %s", host->name,
 1640|       |            Curl_winapi_strerror(GetLastError(), buffer, sizeof(buffer)));
 1641|       |      return CURLE_URL_MALFORMAT;
 1642|       |    }
 1643|       |#else
 1644|    204|    infof(data, "IDN support not present, can't parse Unicode domains");
 1645|    204|#endif
 1646|    204|  }
 1647|  4.71k|  return CURLE_OK;
 1648|  4.71k|}
Curl_free_idnconverted_hostname:
 1654|  9.78k|{
 1655|       |#if defined(USE_LIBIDN2)
 1656|       |  if(host->encalloc) {
 1657|       |    idn2_free(host->encalloc); /* must be freed with idn2_free() since this was
 1658|       |                                 allocated by libidn */
 1659|       |    host->encalloc = NULL;
 1660|       |  }
 1661|       |#elif defined(USE_WIN32_IDN)
 1662|       |  free(host->encalloc); /* must be freed with free() since this was
 1663|       |                           allocated by curl_win32_idn_to_ascii */
 1664|       |  host->encalloc = NULL;
 1665|       |#else
 1666|  9.78k|  (void)host;
 1667|  9.78k|#endif
 1668|  9.78k|}
Curl_builtin_scheme:
 1816|  10.3k|{
 1817|  10.3k|  const struct Curl_handler * const *pp;
 1818|  10.3k|  const struct Curl_handler *p;
 1819|       |  /* Scan protocol handler table and match against 'scheme'. The handler may
 1820|       |     be changed later when the protocol specific setup function is called. */
 1821|  21.9k|  for(pp = protocols; (p = *pp) != NULL; pp++)
 1822|  21.9k|    if(strcasecompare(p->scheme, scheme))
 1823|       |      /* Protocol found in table. Check if allowed */
 1824|  10.2k|      return p;
 1825|     61|  return NULL; /* not found */
 1826|  10.3k|}
Curl_uc_to_curlcode:
 1864|     66|{
 1865|     66|  switch(uc) {
 1866|     65|  default:
 1867|     65|    return CURLE_URL_MALFORMAT;
 1868|      1|  case CURLUE_UNSUPPORTED_SCHEME:
 1869|      1|    return CURLE_UNSUPPORTED_PROTOCOL;
 1870|      0|  case CURLUE_OUT_OF_MEMORY:
 1871|      0|    return CURLE_OUT_OF_MEMORY;
 1872|      0|  case CURLUE_USER_NOT_ALLOWED:
 1873|      0|    return CURLE_LOGIN_DENIED;
 1874|     66|  }
 1875|     66|}
Curl_free_request_state:
 2204|  9.32k|{
 2205|  9.32k|  Curl_safefree(data->req.p.http);
 2206|  9.32k|  Curl_safefree(data->req.newurl);
 2207|       |
 2208|  9.32k|#ifndef CURL_DISABLE_DOH
 2209|  9.32k|  if(data->req.doh) {
 2210|      0|    Curl_close(&data->req.doh->probe[0].easy);
 2211|      0|    Curl_close(&data->req.doh->probe[1].easy);
 2212|      0|  }
 2213|  9.32k|#endif
 2214|  9.32k|}
Curl_parse_login_details:
 2777|    183|{
 2778|    183|  CURLcode result = CURLE_OK;
 2779|    183|  char *ubuf = NULL;
 2780|    183|  char *pbuf = NULL;
 2781|    183|  char *obuf = NULL;
 2782|    183|  const char *psep = NULL;
 2783|    183|  const char *osep = NULL;
 2784|    183|  size_t ulen;
 2785|    183|  size_t plen;
 2786|    183|  size_t olen;
 2787|       |
 2788|       |  /* the input length check is because this is called directly from setopt
 2789|       |     and isn't going through the regular string length check */
 2790|    183|  size_t llen = strlen(login);
 2791|    183|  if(llen > CURL_MAX_INPUT_LENGTH)
 2792|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 2793|       |
 2794|       |  /* Attempt to find the password separator */
 2795|    183|  if(passwdp) {
 2796|    183|    psep = strchr(login, ':');
 2797|       |
 2798|       |    /* Within the constraint of the login string */
 2799|    183|    if(psep >= login + len)
 2800|     73|      psep = NULL;
 2801|    183|  }
 2802|       |
 2803|       |  /* Attempt to find the options separator */
 2804|    183|  if(optionsp) {
 2805|      5|    osep = strchr(login, ';');
 2806|       |
 2807|       |    /* Within the constraint of the login string */
 2808|      5|    if(osep >= login + len)
 2809|      1|      osep = NULL;
 2810|      5|  }
 2811|       |
 2812|       |  /* Calculate the portion lengths */
 2813|    183|  ulen = (psep ?
 2814|     51|          (size_t)(osep && psep > osep ? osep - login : psep - login) :
 2815|    183|          (osep ? (size_t)(osep - login) : len));
 2816|    183|  plen = (psep ?
 2817|     51|          (osep && osep > psep ? (size_t)(osep - psep) :
 2818|    132|                                 (size_t)(login + len - psep)) - 1 : 0);
 2819|    183|  olen = (osep ?
 2820|      4|          (psep && psep > osep ? (size_t)(psep - osep) :
 2821|    179|                                 (size_t)(login + len - osep)) - 1 : 0);
 2822|       |
 2823|       |  /* Allocate the user portion buffer */
 2824|    183|  if(userp && ulen) {
 2825|    153|    ubuf = malloc(ulen + 1);
 2826|    153|    if(!ubuf)
 2827|      0|      result = CURLE_OUT_OF_MEMORY;
 2828|    153|  }
 2829|       |
 2830|       |  /* Allocate the password portion buffer */
 2831|    183|  if(!result && passwdp && plen) {
 2832|     41|    pbuf = malloc(plen + 1);
 2833|     41|    if(!pbuf) {
 2834|      0|      free(ubuf);
 2835|      0|      result = CURLE_OUT_OF_MEMORY;
 2836|      0|    }
 2837|     41|  }
 2838|       |
 2839|       |  /* Allocate the options portion buffer */
 2840|    183|  if(!result && optionsp && olen) {
 2841|      4|    obuf = malloc(olen + 1);
 2842|      4|    if(!obuf) {
 2843|      0|      free(pbuf);
 2844|      0|      free(ubuf);
 2845|      0|      result = CURLE_OUT_OF_MEMORY;
 2846|      0|    }
 2847|      4|  }
 2848|       |
 2849|    183|  if(!result) {
 2850|       |    /* Store the user portion if necessary */
 2851|    183|    if(ubuf) {
 2852|    153|      memcpy(ubuf, login, ulen);
 2853|    153|      ubuf[ulen] = '\0';
 2854|    153|      Curl_safefree(*userp);
 2855|    153|      *userp = ubuf;
 2856|    153|    }
 2857|       |
 2858|       |    /* Store the password portion if necessary */
 2859|    183|    if(pbuf) {
 2860|     41|      memcpy(pbuf, psep + 1, plen);
 2861|     41|      pbuf[plen] = '\0';
 2862|     41|      Curl_safefree(*passwdp);
 2863|     41|      *passwdp = pbuf;
 2864|     41|    }
 2865|       |
 2866|       |    /* Store the options portion if necessary */
 2867|    183|    if(obuf) {
 2868|      4|      memcpy(obuf, osep + 1, olen);
 2869|      4|      obuf[olen] = '\0';
 2870|      4|      Curl_safefree(*optionsp);
 2871|      4|      *optionsp = obuf;
 2872|      4|    }
 2873|    183|  }
 2874|       |
 2875|    183|  return result;
 2876|    183|}
Curl_setup_conn:
 4055|  2.35k|{
 4056|  2.35k|  CURLcode result = CURLE_OK;
 4057|  2.35k|  struct connectdata *conn = data->conn;
 4058|       |
 4059|  2.35k|  Curl_pgrsTime(data, TIMER_NAMELOOKUP);
 4060|       |
 4061|  2.35k|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 4062|       |    /* nothing to setup when not using a network */
 4063|      0|    *protocol_done = TRUE;
 4064|      0|    return result;
 4065|      0|  }
 4066|  2.35k|  *protocol_done = FALSE; /* default to not done */
 4067|       |
 4068|  2.35k|#ifndef CURL_DISABLE_PROXY
 4069|       |  /* set proxy_connect_closed to false unconditionally already here since it
 4070|       |     is used strictly to provide extra information to a parent function in the
 4071|       |     case of proxy CONNECT failures and we must make sure we don't have it
 4072|       |     lingering set from a previous invoke */
 4073|  2.35k|  conn->bits.proxy_connect_closed = FALSE;
 4074|  2.35k|#endif
 4075|       |
 4076|  2.35k|#ifdef CURL_DO_LINEEND_CONV
 4077|  2.35k|  data->state.crlf_conversions = 0; /* reset CRLF conversion counter */
 4078|  2.35k|#endif /* CURL_DO_LINEEND_CONV */
 4079|       |
 4080|       |  /* set start time here for timeout purposes in the connect procedure, it
 4081|       |     is later set again for the progress meter purpose */
 4082|  2.35k|  conn->now = Curl_now();
 4083|       |
 4084|  2.35k|  if(CURL_SOCKET_BAD == conn->sock[FIRSTSOCKET]) {
 4085|  2.35k|    conn->bits.tcpconnect[FIRSTSOCKET] = FALSE;
 4086|  2.35k|    result = Curl_connecthost(data, conn, conn->dns_entry);
 4087|  2.35k|    if(result)
 4088|     49|      return result;
 4089|  2.35k|  }
 4090|      0|  else {
 4091|      0|    Curl_pgrsTime(data, TIMER_CONNECT);    /* we're connected already */
 4092|      0|    if(conn->ssl[FIRSTSOCKET].use ||
 4093|      0|       (conn->handler->protocol & PROTO_FAMILY_SSH))
 4094|      0|      Curl_pgrsTime(data, TIMER_APPCONNECT); /* we're connected already */
 4095|      0|    conn->bits.tcpconnect[FIRSTSOCKET] = TRUE;
 4096|      0|    *protocol_done = TRUE;
 4097|      0|    Curl_updateconninfo(data, conn, conn->sock[FIRSTSOCKET]);
 4098|      0|    Curl_verboseconnect(data, conn);
 4099|      0|  }
 4100|       |
 4101|  2.30k|  conn->now = Curl_now(); /* time this *after* the connect is done, we set
 4102|       |                             this here perhaps a second time */
 4103|  2.30k|  return result;
 4104|  2.35k|}
Curl_connect:
 4109|  2.44k|{
 4110|  2.44k|  CURLcode result;
 4111|  2.44k|  struct connectdata *conn;
 4112|       |
 4113|  2.44k|  *asyncp = FALSE; /* assume synchronous resolves by default */
 4114|       |
 4115|       |  /* init the single-transfer specific data */
 4116|  2.44k|  Curl_free_request_state(data);
 4117|  2.44k|  memset(&data->req, 0, sizeof(struct SingleRequest));
 4118|  2.44k|  data->req.size = data->req.maxdownload = -1;
 4119|       |
 4120|       |  /* call the stuff that needs to be called */
 4121|  2.44k|  result = create_conn(data, &conn, asyncp);
 4122|       |
 4123|  2.44k|  if(!result) {
 4124|  2.35k|    if(CONN_INUSE(conn) > 1)
 4125|       |      /* multiplexed */
 4126|      0|      *protocol_done = TRUE;
 4127|  2.35k|    else if(!*asyncp) {
 4128|       |      /* DNS resolution is done: that's either because this is a reused
 4129|       |         connection, in which case DNS was unnecessary, or because DNS
 4130|       |         really did finish already (synch resolver/fast async resolve) */
 4131|  2.35k|      result = Curl_setup_conn(data, protocol_done);
 4132|  2.35k|    }
 4133|  2.35k|  }
 4134|       |
 4135|  2.44k|  if(result == CURLE_NO_CONNECTION_AVAILABLE) {
 4136|      0|    return result;
 4137|      0|  }
 4138|  2.44k|  else if(result && conn) {
 4139|       |    /* We're not allowed to return failure with memory left allocated in the
 4140|       |       connectdata struct, free those here */
 4141|    137|    Curl_detach_connnection(data);
 4142|    137|    Curl_conncache_remove_conn(data, conn, TRUE);
 4143|    137|    Curl_disconnect(data, conn, TRUE);
 4144|    137|  }
 4145|       |
 4146|  2.44k|  return result;
 4147|  2.44k|}
Curl_init_do:
 4160|  2.35k|{
 4161|  2.35k|  struct SingleRequest *k = &data->req;
 4162|       |
 4163|       |  /* if this is a pushed stream, we need this: */
 4164|  2.35k|  CURLcode result = Curl_preconnect(data);
 4165|  2.35k|  if(result)
 4166|      0|    return result;
 4167|       |
 4168|  2.35k|  if(conn) {
 4169|  2.35k|    conn->bits.do_more = FALSE; /* by default there's no curl_do_more() to
 4170|       |                                   use */
 4171|       |    /* if the protocol used doesn't support wildcards, switch it off */
 4172|  2.35k|    if(data->state.wildcardmatch &&
 4173|  2.35k|       !(conn->handler->flags & PROTOPT_WILDCARD))
 4174|      1|      data->state.wildcardmatch = FALSE;
 4175|  2.35k|  }
 4176|       |
 4177|  2.35k|  data->state.done = FALSE; /* *_done() is not called yet */
 4178|  2.35k|  data->state.expect100header = FALSE;
 4179|       |
 4180|  2.35k|  if(data->set.opt_no_body)
 4181|       |    /* in HTTP lingo, no body means using the HEAD request... */
 4182|      4|    data->state.httpreq = HTTPREQ_HEAD;
 4183|       |
 4184|  2.35k|  k->start = Curl_now(); /* start time */
 4185|  2.35k|  k->now = k->start;   /* current time is now */
 4186|  2.35k|  k->header = TRUE; /* assume header */
 4187|  2.35k|  k->bytecount = 0;
 4188|  2.35k|  k->ignorebody = FALSE;
 4189|       |
 4190|  2.35k|  Curl_speedinit(data);
 4191|  2.35k|  Curl_pgrsSetUploadCounter(data, 0);
 4192|  2.35k|  Curl_pgrsSetDownloadCounter(data, 0);
 4193|       |
 4194|  2.35k|  return CURLE_OK;
 4195|  2.35k|}
url.c:up_free:
  339|  7.01k|{
  340|  7.01k|  struct urlpieces *up = &data->state.up;
  341|  7.01k|  Curl_safefree(up->scheme);
  342|  7.01k|  Curl_safefree(up->hostname);
  343|  7.01k|  Curl_safefree(up->port);
  344|  7.01k|  Curl_safefree(up->user);
  345|  7.01k|  Curl_safefree(up->password);
  346|  7.01k|  Curl_safefree(up->options);
  347|  7.01k|  Curl_safefree(up->path);
  348|  7.01k|  Curl_safefree(up->query);
  349|  7.01k|  curl_url_cleanup(data->state.uh);
  350|  7.01k|  data->state.uh = NULL;
  351|  7.01k|}
url.c:conn_shutdown:
  734|  2.44k|{
  735|  2.44k|  DEBUGASSERT(conn);
  736|  2.44k|  DEBUGASSERT(data);
  737|  2.44k|  infof(data, "Closing connection %ld", conn->connection_id);
  738|       |
  739|  2.44k|#ifndef USE_HYPER
  740|  2.44k|  if(conn->connect_state && conn->connect_state->prot_save) {
  741|       |    /* If this was closed with a CONNECT in progress, cleanup this temporary
  742|       |       struct arrangement */
  743|      0|    data->req.p.http = NULL;
  744|      0|    Curl_safefree(conn->connect_state->prot_save);
  745|      0|  }
  746|  2.44k|#endif
  747|       |
  748|       |  /* possible left-overs from the async name resolvers */
  749|  2.44k|  Curl_resolver_cancel(data);
  750|       |
  751|       |  /* close the SSL stuff before we close any sockets since they will/may
  752|       |     write to the sockets */
  753|  2.44k|  Curl_ssl_close(data, conn, FIRSTSOCKET);
  754|  2.44k|  Curl_ssl_close(data, conn, SECONDARYSOCKET);
  755|       |
  756|       |  /* close possibly still open sockets */
  757|  2.44k|  if(CURL_SOCKET_BAD != conn->sock[SECONDARYSOCKET])
  758|      0|    Curl_closesocket(data, conn, conn->sock[SECONDARYSOCKET]);
  759|  2.44k|  if(CURL_SOCKET_BAD != conn->sock[FIRSTSOCKET])
  760|  2.30k|    Curl_closesocket(data, conn, conn->sock[FIRSTSOCKET]);
  761|  2.44k|  if(CURL_SOCKET_BAD != conn->tempsock[0])
  762|      0|    Curl_closesocket(data, conn, conn->tempsock[0]);
  763|  2.44k|  if(CURL_SOCKET_BAD != conn->tempsock[1])
  764|      0|    Curl_closesocket(data, conn, conn->tempsock[1]);
  765|  2.44k|}
url.c:conn_free:
  768|  2.44k|{
  769|  2.44k|  DEBUGASSERT(conn);
  770|       |
  771|  2.44k|  Curl_free_idnconverted_hostname(&conn->host);
  772|  2.44k|  Curl_free_idnconverted_hostname(&conn->conn_to_host);
  773|  2.44k|#ifndef CURL_DISABLE_PROXY
  774|  2.44k|  Curl_free_idnconverted_hostname(&conn->http_proxy.host);
  775|  2.44k|  Curl_free_idnconverted_hostname(&conn->socks_proxy.host);
  776|  2.44k|  Curl_safefree(conn->http_proxy.user);
  777|  2.44k|  Curl_safefree(conn->socks_proxy.user);
  778|  2.44k|  Curl_safefree(conn->http_proxy.passwd);
  779|  2.44k|  Curl_safefree(conn->socks_proxy.passwd);
  780|  2.44k|  Curl_safefree(conn->http_proxy.host.rawalloc); /* http proxy name buffer */
  781|  2.44k|  Curl_safefree(conn->socks_proxy.host.rawalloc); /* socks proxy name buffer */
  782|  2.44k|  Curl_free_primary_ssl_config(&conn->proxy_ssl_config);
  783|  2.44k|#endif
  784|  2.44k|  Curl_safefree(conn->user);
  785|  2.44k|  Curl_safefree(conn->passwd);
  786|  2.44k|  Curl_safefree(conn->sasl_authzid);
  787|  2.44k|  Curl_safefree(conn->options);
  788|  2.44k|  Curl_dyn_free(&conn->trailer);
  789|  2.44k|  Curl_safefree(conn->host.rawalloc); /* host name buffer */
  790|  2.44k|  Curl_safefree(conn->conn_to_host.rawalloc); /* host name buffer */
  791|  2.44k|  Curl_safefree(conn->hostname_resolve);
  792|  2.44k|  Curl_safefree(conn->secondaryhostname);
  793|  2.44k|  Curl_safefree(conn->connect_state);
  794|       |
  795|  2.44k|  conn_reset_all_postponed_data(conn);
  796|  2.44k|  Curl_llist_destroy(&conn->easyq, NULL);
  797|  2.44k|  Curl_safefree(conn->localdev);
  798|  2.44k|  Curl_free_primary_ssl_config(&conn->ssl_config);
  799|       |
  800|  2.44k|#ifdef USE_UNIX_SOCKETS
  801|  2.44k|  Curl_safefree(conn->unix_domain_socket);
  802|  2.44k|#endif
  803|       |
  804|  2.44k|#ifdef USE_SSL
  805|  2.44k|  Curl_safefree(conn->ssl_extra);
  806|  2.44k|#endif
  807|  2.44k|  free(conn); /* free all the connection oriented data */
  808|  2.44k|}
url.c:create_conn:
 3571|  2.44k|{
 3572|  2.44k|  CURLcode result = CURLE_OK;
 3573|  2.44k|  struct connectdata *conn;
 3574|  2.44k|  struct connectdata *conn_temp = NULL;
 3575|  2.44k|  bool reuse;
 3576|  2.44k|  bool connections_available = TRUE;
 3577|  2.44k|  bool force_reuse = FALSE;
 3578|  2.44k|  bool waitpipe = FALSE;
 3579|  2.44k|  size_t max_host_connections = Curl_multi_max_host_connections(data->multi);
 3580|  2.44k|  size_t max_total_connections = Curl_multi_max_total_connections(data->multi);
 3581|       |
 3582|  2.44k|  *async = FALSE;
 3583|  2.44k|  *in_connect = NULL;
 3584|       |
 3585|       |  /*************************************************************
 3586|       |   * Check input data
 3587|       |   *************************************************************/
 3588|  2.44k|  if(!data->state.url) {
 3589|      0|    result = CURLE_URL_MALFORMAT;
 3590|      0|    goto out;
 3591|      0|  }
 3592|       |
 3593|       |  /* First, split up the current URL in parts so that we can use the
 3594|       |     parts for checking against the already present connections. In order
 3595|       |     to not have to modify everything at once, we allocate a temporary
 3596|       |     connection data struct and fill in for comparison purposes. */
 3597|  2.44k|  conn = allocate_conn(data);
 3598|       |
 3599|  2.44k|  if(!conn) {
 3600|      0|    result = CURLE_OUT_OF_MEMORY;
 3601|      0|    goto out;
 3602|      0|  }
 3603|       |
 3604|       |  /* We must set the return variable as soon as possible, so that our
 3605|       |     parent can cleanup any possible allocs we may have done before
 3606|       |     any failure */
 3607|  2.44k|  *in_connect = conn;
 3608|       |
 3609|  2.44k|  result = parseurlandfillconn(data, conn);
 3610|  2.44k|  if(result)
 3611|     87|    goto out;
 3612|       |
 3613|  2.35k|  if(data->set.str[STRING_SASL_AUTHZID]) {
 3614|      0|    conn->sasl_authzid = strdup(data->set.str[STRING_SASL_AUTHZID]);
 3615|      0|    if(!conn->sasl_authzid) {
 3616|      0|      result = CURLE_OUT_OF_MEMORY;
 3617|      0|      goto out;
 3618|      0|    }
 3619|      0|  }
 3620|       |
 3621|  2.35k|#ifdef USE_UNIX_SOCKETS
 3622|  2.35k|  if(data->set.str[STRING_UNIX_SOCKET_PATH]) {
 3623|      0|    conn->unix_domain_socket = strdup(data->set.str[STRING_UNIX_SOCKET_PATH]);
 3624|      0|    if(!conn->unix_domain_socket) {
 3625|      0|      result = CURLE_OUT_OF_MEMORY;
 3626|      0|      goto out;
 3627|      0|    }
 3628|      0|    conn->bits.abstract_unix_socket = data->set.abstract_unix_socket;
 3629|      0|  }
 3630|  2.35k|#endif
 3631|       |
 3632|       |  /* After the unix socket init but before the proxy vars are used, parse and
 3633|       |     initialize the proxy vars */
 3634|  2.35k|#ifndef CURL_DISABLE_PROXY
 3635|  2.35k|  result = create_conn_helper_init_proxy(data, conn);
 3636|  2.35k|  if(result)
 3637|      0|    goto out;
 3638|       |
 3639|       |  /*************************************************************
 3640|       |   * If the protocol is using SSL and HTTP proxy is used, we set
 3641|       |   * the tunnel_proxy bit.
 3642|       |   *************************************************************/
 3643|  2.35k|  if((conn->given->flags&PROTOPT_SSL) && conn->bits.httpproxy)
 3644|      0|    conn->bits.tunnel_proxy = TRUE;
 3645|  2.35k|#endif
 3646|       |
 3647|       |  /*************************************************************
 3648|       |   * Figure out the remote port number and fix it in the URL
 3649|       |   *************************************************************/
 3650|  2.35k|  result = parse_remote_port(data, conn);
 3651|  2.35k|  if(result)
 3652|      0|    goto out;
 3653|       |
 3654|       |  /* Check for overridden login details and set them accordingly so that
 3655|       |     they are known when protocol->setup_connection is called! */
 3656|  2.35k|  result = override_login(data, conn);
 3657|  2.35k|  if(result)
 3658|      0|    goto out;
 3659|       |
 3660|  2.35k|  result = set_login(conn); /* default credentials */
 3661|  2.35k|  if(result)
 3662|      0|    goto out;
 3663|       |
 3664|       |  /*************************************************************
 3665|       |   * Process the "connect to" linked list of hostname/port mappings.
 3666|       |   * Do this after the remote port number has been fixed in the URL.
 3667|       |   *************************************************************/
 3668|  2.35k|  result = parse_connect_to_slist(data, conn, data->set.connect_to);
 3669|  2.35k|  if(result)
 3670|      0|    goto out;
 3671|       |
 3672|       |  /*************************************************************
 3673|       |   * IDN-convert the hostnames
 3674|       |   *************************************************************/
 3675|  2.35k|  result = Curl_idnconvert_hostname(data, &conn->host);
 3676|  2.35k|  if(result)
 3677|      0|    goto out;
 3678|  2.35k|  if(conn->bits.conn_to_host) {
 3679|  2.35k|    result = Curl_idnconvert_hostname(data, &conn->conn_to_host);
 3680|  2.35k|    if(result)
 3681|      0|      goto out;
 3682|  2.35k|  }
 3683|  2.35k|#ifndef CURL_DISABLE_PROXY
 3684|  2.35k|  if(conn->bits.httpproxy) {
 3685|      0|    result = Curl_idnconvert_hostname(data, &conn->http_proxy.host);
 3686|      0|    if(result)
 3687|      0|      goto out;
 3688|      0|  }
 3689|  2.35k|  if(conn->bits.socksproxy) {
 3690|      0|    result = Curl_idnconvert_hostname(data, &conn->socks_proxy.host);
 3691|      0|    if(result)
 3692|      0|      goto out;
 3693|      0|  }
 3694|  2.35k|#endif
 3695|       |
 3696|       |  /*************************************************************
 3697|       |   * Check whether the host and the "connect to host" are equal.
 3698|       |   * Do this after the hostnames have been IDN-converted.
 3699|       |   *************************************************************/
 3700|  2.35k|  if(conn->bits.conn_to_host &&
 3701|  2.35k|     strcasecompare(conn->conn_to_host.name, conn->host.name)) {
 3702|      4|    conn->bits.conn_to_host = FALSE;
 3703|      4|  }
 3704|       |
 3705|       |  /*************************************************************
 3706|       |   * Check whether the port and the "connect to port" are equal.
 3707|       |   * Do this after the remote port number has been fixed in the URL.
 3708|       |   *************************************************************/
 3709|  2.35k|  if(conn->bits.conn_to_port && conn->conn_to_port == conn->remote_port) {
 3710|      0|    conn->bits.conn_to_port = FALSE;
 3711|      0|  }
 3712|       |
 3713|  2.35k|#ifndef CURL_DISABLE_PROXY
 3714|       |  /*************************************************************
 3715|       |   * If the "connect to" feature is used with an HTTP proxy,
 3716|       |   * we set the tunnel_proxy bit.
 3717|       |   *************************************************************/
 3718|  2.35k|  if((conn->bits.conn_to_host || conn->bits.conn_to_port) &&
 3719|  2.35k|      conn->bits.httpproxy)
 3720|      0|    conn->bits.tunnel_proxy = TRUE;
 3721|  2.35k|#endif
 3722|       |
 3723|       |  /*************************************************************
 3724|       |   * Setup internals depending on protocol. Needs to be done after
 3725|       |   * we figured out what/if proxy to use.
 3726|       |   *************************************************************/
 3727|  2.35k|  result = setup_connection_internals(data, conn);
 3728|  2.35k|  if(result)
 3729|      1|    goto out;
 3730|       |
 3731|  2.35k|  conn->recv[FIRSTSOCKET] = Curl_recv_plain;
 3732|  2.35k|  conn->send[FIRSTSOCKET] = Curl_send_plain;
 3733|  2.35k|  conn->recv[SECONDARYSOCKET] = Curl_recv_plain;
 3734|  2.35k|  conn->send[SECONDARYSOCKET] = Curl_send_plain;
 3735|       |
 3736|  2.35k|  conn->bits.tcp_fastopen = data->set.tcp_fastopen;
 3737|       |
 3738|       |  /***********************************************************************
 3739|       |   * file: is a special case in that it doesn't need a network connection
 3740|       |   ***********************************************************************/
 3741|  2.35k|#ifndef CURL_DISABLE_FILE
 3742|  2.35k|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 3743|      0|    bool done;
 3744|       |    /* this is supposed to be the connect function so we better at least check
 3745|       |       that the file is present here! */
 3746|      0|    DEBUGASSERT(conn->handler->connect_it);
 3747|      0|    Curl_persistconninfo(data, conn, NULL, -1);
 3748|      0|    result = conn->handler->connect_it(data, &done);
 3749|       |
 3750|       |    /* Setup a "faked" transfer that'll do nothing */
 3751|      0|    if(!result) {
 3752|      0|      conn->bits.tcpconnect[FIRSTSOCKET] = TRUE; /* we are "connected */
 3753|       |
 3754|      0|      Curl_attach_connnection(data, conn);
 3755|      0|      result = Curl_conncache_add_conn(data);
 3756|      0|      if(result)
 3757|      0|        goto out;
 3758|       |
 3759|       |      /*
 3760|       |       * Setup whatever necessary for a resumed transfer
 3761|       |       */
 3762|      0|      result = setup_range(data);
 3763|      0|      if(result) {
 3764|      0|        DEBUGASSERT(conn->handler->done);
 3765|       |        /* we ignore the return code for the protocol-specific DONE */
 3766|      0|        (void)conn->handler->done(data, result, FALSE);
 3767|      0|        goto out;
 3768|      0|      }
 3769|      0|      Curl_setup_transfer(data, -1, -1, FALSE, -1);
 3770|      0|    }
 3771|       |
 3772|       |    /* since we skip do_init() */
 3773|      0|    Curl_init_do(data, conn);
 3774|       |
 3775|      0|    goto out;
 3776|      0|  }
 3777|  2.35k|#endif
 3778|       |
 3779|       |  /* Get a cloned copy of the SSL config situation stored in the
 3780|       |     connection struct. But to get this going nicely, we must first make
 3781|       |     sure that the strings in the master copy are pointing to the correct
 3782|       |     strings in the session handle strings array!
 3783|       |
 3784|       |     Keep in mind that the pointers in the master copy are pointing to strings
 3785|       |     that will be freed as part of the Curl_easy struct, but all cloned
 3786|       |     copies will be separately allocated.
 3787|       |  */
 3788|  2.35k|  data->set.ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH];
 3789|  2.35k|  data->set.ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE];
 3790|  2.35k|  data->set.ssl.primary.issuercert = data->set.str[STRING_SSL_ISSUERCERT];
 3791|  2.35k|  data->set.ssl.primary.issuercert_blob = data->set.blobs[BLOB_SSL_ISSUERCERT];
 3792|  2.35k|  data->set.ssl.primary.random_file = data->set.str[STRING_SSL_RANDOM_FILE];
 3793|  2.35k|  data->set.ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3794|  2.35k|  data->set.ssl.primary.cipher_list =
 3795|  2.35k|    data->set.str[STRING_SSL_CIPHER_LIST];
 3796|  2.35k|  data->set.ssl.primary.cipher_list13 =
 3797|  2.35k|    data->set.str[STRING_SSL_CIPHER13_LIST];
 3798|  2.35k|  data->set.ssl.primary.pinned_key =
 3799|  2.35k|    data->set.str[STRING_SSL_PINNEDPUBLICKEY];
 3800|  2.35k|  data->set.ssl.primary.cert_blob = data->set.blobs[BLOB_CERT];
 3801|  2.35k|  data->set.ssl.primary.ca_info_blob = data->set.blobs[BLOB_CAINFO];
 3802|  2.35k|  data->set.ssl.primary.curves = data->set.str[STRING_SSL_EC_CURVES];
 3803|       |
 3804|  2.35k|#ifndef CURL_DISABLE_PROXY
 3805|  2.35k|  data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];
 3806|  2.35k|  data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];
 3807|  2.35k|  data->set.proxy_ssl.primary.random_file =
 3808|  2.35k|    data->set.str[STRING_SSL_RANDOM_FILE];
 3809|  2.35k|  data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3810|  2.35k|  data->set.proxy_ssl.primary.cipher_list =
 3811|  2.35k|    data->set.str[STRING_SSL_CIPHER_LIST_PROXY];
 3812|  2.35k|  data->set.proxy_ssl.primary.cipher_list13 =
 3813|  2.35k|    data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];
 3814|  2.35k|  data->set.proxy_ssl.primary.pinned_key =
 3815|  2.35k|    data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY];
 3816|  2.35k|  data->set.proxy_ssl.primary.cert_blob = data->set.blobs[BLOB_CERT_PROXY];
 3817|  2.35k|  data->set.proxy_ssl.primary.ca_info_blob =
 3818|  2.35k|    data->set.blobs[BLOB_CAINFO_PROXY];
 3819|  2.35k|  data->set.proxy_ssl.primary.issuercert =
 3820|  2.35k|    data->set.str[STRING_SSL_ISSUERCERT_PROXY];
 3821|  2.35k|  data->set.proxy_ssl.primary.issuercert_blob =
 3822|  2.35k|    data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY];
 3823|  2.35k|  data->set.proxy_ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_PROXY];
 3824|  2.35k|  data->set.proxy_ssl.cert_type = data->set.str[STRING_CERT_TYPE_PROXY];
 3825|  2.35k|  data->set.proxy_ssl.key = data->set.str[STRING_KEY_PROXY];
 3826|  2.35k|  data->set.proxy_ssl.key_type = data->set.str[STRING_KEY_TYPE_PROXY];
 3827|  2.35k|  data->set.proxy_ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_PROXY];
 3828|  2.35k|  data->set.proxy_ssl.primary.clientcert = data->set.str[STRING_CERT_PROXY];
 3829|  2.35k|  data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];
 3830|  2.35k|#endif
 3831|  2.35k|  data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE];
 3832|  2.35k|  data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE];
 3833|  2.35k|  data->set.ssl.key = data->set.str[STRING_KEY];
 3834|  2.35k|  data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE];
 3835|  2.35k|  data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD];
 3836|  2.35k|  data->set.ssl.primary.clientcert = data->set.str[STRING_CERT];
 3837|  2.35k|#ifdef USE_TLS_SRP
 3838|  2.35k|  data->set.ssl.username = data->set.str[STRING_TLSAUTH_USERNAME];
 3839|  2.35k|  data->set.ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD];
 3840|  2.35k|#ifndef CURL_DISABLE_PROXY
 3841|  2.35k|  data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];
 3842|  2.35k|  data->set.proxy_ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_PROXY];
 3843|  2.35k|#endif
 3844|  2.35k|#endif
 3845|  2.35k|  data->set.ssl.key_blob = data->set.blobs[BLOB_KEY];
 3846|       |
 3847|  2.35k|  if(!Curl_clone_primary_ssl_config(&data->set.ssl.primary,
 3848|  2.35k|                                    &conn->ssl_config)) {
 3849|      0|    result = CURLE_OUT_OF_MEMORY;
 3850|      0|    goto out;
 3851|      0|  }
 3852|       |
 3853|  2.35k|#ifndef CURL_DISABLE_PROXY
 3854|  2.35k|  if(!Curl_clone_primary_ssl_config(&data->set.proxy_ssl.primary,
 3855|  2.35k|                                    &conn->proxy_ssl_config)) {
 3856|      0|    result = CURLE_OUT_OF_MEMORY;
 3857|      0|    goto out;
 3858|      0|  }
 3859|  2.35k|#endif
 3860|       |
 3861|  2.35k|  prune_dead_connections(data);
 3862|       |
 3863|       |  /*************************************************************
 3864|       |   * Check the current list of connections to see if we can
 3865|       |   * re-use an already existing one or if we have to create a
 3866|       |   * new one.
 3867|       |   *************************************************************/
 3868|       |
 3869|  2.35k|  DEBUGASSERT(conn->user);
 3870|  2.35k|  DEBUGASSERT(conn->passwd);
 3871|       |
 3872|       |  /* reuse_fresh is TRUE if we are told to use a new connection by force, but
 3873|       |     we only acknowledge this option if this is not a re-used connection
 3874|       |     already (which happens due to follow-location or during a HTTP
 3875|       |     authentication phase). CONNECT_ONLY transfers also refuse reuse. */
 3876|  2.35k|  if((data->set.reuse_fresh && !data->state.this_is_a_follow) ||
 3877|  2.35k|     data->set.connect_only)
 3878|      0|    reuse = FALSE;
 3879|  2.35k|  else
 3880|  2.35k|    reuse = ConnectionExists(data, conn, &conn_temp, &force_reuse, &waitpipe);
 3881|       |
 3882|  2.35k|  if(reuse) {
 3883|       |    /*
 3884|       |     * We already have a connection for this, we got the former connection in
 3885|       |     * the conn_temp variable and thus we need to cleanup the one we just
 3886|       |     * allocated before we can move along and use the previously existing one.
 3887|       |     */
 3888|      0|    reuse_conn(data, conn, conn_temp);
 3889|      0|#ifdef USE_SSL
 3890|      0|    free(conn->ssl_extra);
 3891|      0|#endif
 3892|      0|    free(conn);          /* we don't need this anymore */
 3893|      0|    conn = conn_temp;
 3894|      0|    *in_connect = conn;
 3895|       |
 3896|      0|#ifndef CURL_DISABLE_PROXY
 3897|      0|    infof(data, "Re-using existing connection! (#%ld) with %s %s",
 3898|      0|          conn->connection_id,
 3899|      0|          conn->bits.proxy?"proxy":"host",
 3900|      0|          conn->socks_proxy.host.name ? conn->socks_proxy.host.dispname :
 3901|      0|          conn->http_proxy.host.name ? conn->http_proxy.host.dispname :
 3902|      0|          conn->host.dispname);
 3903|       |#else
 3904|       |    infof(data, "Re-using existing connection! (#%ld) with host %s",
 3905|       |          conn->connection_id, conn->host.dispname);
 3906|       |#endif
 3907|      0|  }
 3908|  2.35k|  else {
 3909|       |    /* We have decided that we want a new connection. However, we may not
 3910|       |       be able to do that if we have reached the limit of how many
 3911|       |       connections we are allowed to open. */
 3912|       |
 3913|  2.35k|    if(conn->handler->flags & PROTOPT_ALPN_NPN) {
 3914|       |      /* The protocol wants it, so set the bits if enabled in the easy handle
 3915|       |         (default) */
 3916|      0|      if(data->set.ssl_enable_alpn)
 3917|      0|        conn->bits.tls_enable_alpn = TRUE;
 3918|      0|      if(data->set.ssl_enable_npn)
 3919|      0|        conn->bits.tls_enable_npn = TRUE;
 3920|      0|    }
 3921|       |
 3922|  2.35k|    if(waitpipe)
 3923|       |      /* There is a connection that *might* become usable for multiplexing
 3924|       |         "soon", and we wait for that */
 3925|      0|      connections_available = FALSE;
 3926|  2.35k|    else {
 3927|       |      /* this gets a lock on the conncache */
 3928|  2.35k|      const char *bundlehost;
 3929|  2.35k|      struct connectbundle *bundle =
 3930|  2.35k|        Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
 3931|  2.35k|                                   &bundlehost);
 3932|       |
 3933|  2.35k|      if(max_host_connections > 0 && bundle &&
 3934|  2.35k|         (bundle->num_connections >= max_host_connections)) {
 3935|      0|        struct connectdata *conn_candidate;
 3936|       |
 3937|       |        /* The bundle is full. Extract the oldest connection. */
 3938|      0|        conn_candidate = Curl_conncache_extract_bundle(data, bundle);
 3939|      0|        CONNCACHE_UNLOCK(data);
 3940|       |
 3941|      0|        if(conn_candidate)
 3942|      0|          (void)Curl_disconnect(data, conn_candidate, FALSE);
 3943|      0|        else {
 3944|      0|          infof(data, "No more connections allowed to host %s: %zu",
 3945|      0|                bundlehost, max_host_connections);
 3946|      0|          connections_available = FALSE;
 3947|      0|        }
 3948|      0|      }
 3949|  2.35k|      else
 3950|  2.35k|        CONNCACHE_UNLOCK(data);
 3951|       |
 3952|  2.35k|    }
 3953|       |
 3954|  2.35k|    if(connections_available &&
 3955|  2.35k|       (max_total_connections > 0) &&
 3956|  2.35k|       (Curl_conncache_size(data) >= max_total_connections)) {
 3957|      0|      struct connectdata *conn_candidate;
 3958|       |
 3959|       |      /* The cache is full. Let's see if we can kill a connection. */
 3960|      0|      conn_candidate = Curl_conncache_extract_oldest(data);
 3961|      0|      if(conn_candidate)
 3962|      0|        (void)Curl_disconnect(data, conn_candidate, FALSE);
 3963|      0|      else {
 3964|      0|        infof(data, "No connections available in cache");
 3965|      0|        connections_available = FALSE;
 3966|      0|      }
 3967|      0|    }
 3968|       |
 3969|  2.35k|    if(!connections_available) {
 3970|      0|      infof(data, "No connections available.");
 3971|       |
 3972|      0|      conn_free(conn);
 3973|      0|      *in_connect = NULL;
 3974|       |
 3975|      0|      result = CURLE_NO_CONNECTION_AVAILABLE;
 3976|      0|      goto out;
 3977|      0|    }
 3978|  2.35k|    else {
 3979|       |      /*
 3980|       |       * This is a brand new connection, so let's store it in the connection
 3981|       |       * cache of ours!
 3982|       |       */
 3983|  2.35k|      Curl_attach_connnection(data, conn);
 3984|  2.35k|      result = Curl_conncache_add_conn(data);
 3985|  2.35k|      if(result)
 3986|      0|        goto out;
 3987|  2.35k|    }
 3988|       |
 3989|  2.35k|#if defined(USE_NTLM)
 3990|       |    /* If NTLM is requested in a part of this connection, make sure we don't
 3991|       |       assume the state is fine as this is a fresh connection and NTLM is
 3992|       |       connection based. */
 3993|  2.35k|    if((data->state.authhost.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 3994|  2.35k|       data->state.authhost.done) {
 3995|      0|      infof(data, "NTLM picked AND auth done set, clear picked!");
 3996|      0|      data->state.authhost.picked = CURLAUTH_NONE;
 3997|      0|      data->state.authhost.done = FALSE;
 3998|      0|    }
 3999|       |
 4000|  2.35k|    if((data->state.authproxy.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 4001|  2.35k|       data->state.authproxy.done) {
 4002|      0|      infof(data, "NTLM-proxy picked AND auth done set, clear picked!");
 4003|      0|      data->state.authproxy.picked = CURLAUTH_NONE;
 4004|      0|      data->state.authproxy.done = FALSE;
 4005|      0|    }
 4006|  2.35k|#endif
 4007|  2.35k|  }
 4008|       |
 4009|       |  /* Setup and init stuff before DO starts, in preparing for the transfer. */
 4010|  2.35k|  Curl_init_do(data, conn);
 4011|       |
 4012|       |  /*
 4013|       |   * Setup whatever necessary for a resumed transfer
 4014|       |   */
 4015|  2.35k|  result = setup_range(data);
 4016|  2.35k|  if(result)
 4017|      0|    goto out;
 4018|       |
 4019|       |  /* Continue connectdata initialization here. */
 4020|       |
 4021|       |  /*
 4022|       |   * Inherit the proper values from the urldata struct AFTER we have arranged
 4023|       |   * the persistent connection stuff
 4024|       |   */
 4025|  2.35k|  conn->seek_func = data->set.seek_func;
 4026|  2.35k|  conn->seek_client = data->set.seek_client;
 4027|       |
 4028|       |  /*************************************************************
 4029|       |   * Resolve the address of the server or proxy
 4030|       |   *************************************************************/
 4031|  2.35k|  result = resolve_server(data, conn, async);
 4032|       |
 4033|       |  /* Strip trailing dots. resolve_server copied the name. */
 4034|  2.35k|  strip_trailing_dot(&conn->host);
 4035|  2.35k|#ifndef CURL_DISABLE_PROXY
 4036|  2.35k|  if(conn->bits.httpproxy)
 4037|      0|    strip_trailing_dot(&conn->http_proxy.host);
 4038|  2.35k|  if(conn->bits.socksproxy)
 4039|      0|    strip_trailing_dot(&conn->socks_proxy.host);
 4040|  2.35k|#endif
 4041|  2.35k|  if(conn->bits.conn_to_host)
 4042|  2.35k|    strip_trailing_dot(&conn->conn_to_host);
 4043|       |
 4044|  2.44k|out:
 4045|  2.44k|  return result;
 4046|  2.35k|}
url.c:allocate_conn:
 1674|  2.44k|{
 1675|  2.44k|  struct connectdata *conn = calloc(1, sizeof(struct connectdata));
 1676|  2.44k|  if(!conn)
 1677|      0|    return NULL;
 1678|       |
 1679|  2.44k|#ifdef USE_SSL
 1680|       |  /* The SSL backend-specific data (ssl_backend_data) objects are allocated as
 1681|       |     a separate array to ensure suitable alignment.
 1682|       |     Note that these backend pointers can be swapped by vtls (eg ssl backend
 1683|       |     data becomes proxy backend data). */
 1684|  2.44k|  {
 1685|  2.44k|    size_t sslsize = Curl_ssl->sizeof_ssl_backend_data;
 1686|  2.44k|    char *ssl = calloc(4, sslsize);
 1687|  2.44k|    if(!ssl) {
 1688|      0|      free(conn);
 1689|      0|      return NULL;
 1690|      0|    }
 1691|  2.44k|    conn->ssl_extra = ssl;
 1692|  2.44k|    conn->ssl[0].backend = (void *)ssl;
 1693|  2.44k|    conn->ssl[1].backend = (void *)(ssl + sslsize);
 1694|  2.44k|#ifndef CURL_DISABLE_PROXY
 1695|  2.44k|    conn->proxy_ssl[0].backend = (void *)(ssl + 2 * sslsize);
 1696|  2.44k|    conn->proxy_ssl[1].backend = (void *)(ssl + 3 * sslsize);
 1697|  2.44k|#endif
 1698|  2.44k|  }
 1699|      0|#endif
 1700|       |
 1701|      0|  conn->handler = &Curl_handler_dummy;  /* Be sure we have a handler defined
 1702|       |                                           already from start to avoid NULL
 1703|       |                                           situations and checks */
 1704|       |
 1705|       |  /* and we setup a few fields in case we end up actually using this struct */
 1706|       |
 1707|  2.44k|  conn->sock[FIRSTSOCKET] = CURL_SOCKET_BAD;     /* no file descriptor */
 1708|  2.44k|  conn->sock[SECONDARYSOCKET] = CURL_SOCKET_BAD; /* no file descriptor */
 1709|  2.44k|  conn->tempsock[0] = CURL_SOCKET_BAD; /* no file descriptor */
 1710|  2.44k|  conn->tempsock[1] = CURL_SOCKET_BAD; /* no file descriptor */
 1711|  2.44k|  conn->connection_id = -1;    /* no ID */
 1712|  2.44k|  conn->port = -1; /* unknown at this point */
 1713|  2.44k|  conn->remote_port = -1; /* unknown at this point */
 1714|       |#if defined(USE_RECV_BEFORE_SEND_WORKAROUND) && defined(DEBUGBUILD)
 1715|       |  conn->postponed[0].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1716|       |  conn->postponed[1].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1717|       |#endif /* USE_RECV_BEFORE_SEND_WORKAROUND && DEBUGBUILD */
 1718|       |
 1719|       |  /* Default protocol-independent behavior doesn't support persistent
 1720|       |     connections, so we set this to force-close. Protocols that support
 1721|       |     this need to set this to FALSE in their "curl_do" functions. */
 1722|  2.44k|  connclose(conn, "Default to force-close");
 1723|       |
 1724|       |  /* Store creation time to help future close decision making */
 1725|  2.44k|  conn->created = Curl_now();
 1726|       |
 1727|       |  /* Store current time to give a baseline to keepalive connection times. */
 1728|  2.44k|  conn->keepalive = Curl_now();
 1729|       |
 1730|  2.44k|#ifndef CURL_DISABLE_PROXY
 1731|  2.44k|  conn->http_proxy.proxytype = data->set.proxytype;
 1732|  2.44k|  conn->socks_proxy.proxytype = CURLPROXY_SOCKS4;
 1733|       |
 1734|       |  /* note that these two proxy bits are now just on what looks to be
 1735|       |     requested, they may be altered down the road */
 1736|  2.44k|  conn->bits.proxy = (data->set.str[STRING_PROXY] &&
 1737|  2.44k|                      *data->set.str[STRING_PROXY]) ? TRUE : FALSE;
 1738|  2.44k|  conn->bits.httpproxy = (conn->bits.proxy &&
 1739|  2.44k|                          (conn->http_proxy.proxytype == CURLPROXY_HTTP ||
 1740|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0 ||
 1741|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTPS)) ?
 1742|  2.44k|                           TRUE : FALSE;
 1743|  2.44k|  conn->bits.socksproxy = (conn->bits.proxy &&
 1744|  2.44k|                           !conn->bits.httpproxy) ? TRUE : FALSE;
 1745|       |
 1746|  2.44k|  if(data->set.str[STRING_PRE_PROXY] && *data->set.str[STRING_PRE_PROXY]) {
 1747|      0|    conn->bits.proxy = TRUE;
 1748|      0|    conn->bits.socksproxy = TRUE;
 1749|      0|  }
 1750|       |
 1751|  2.44k|  conn->bits.proxy_user_passwd =
 1752|  2.44k|    (data->state.aptr.proxyuser) ? TRUE : FALSE;
 1753|  2.44k|  conn->bits.tunnel_proxy = data->set.tunnel_thru_httpproxy;
 1754|  2.44k|#endif /* CURL_DISABLE_PROXY */
 1755|       |
 1756|  2.44k|  conn->bits.user_passwd = (data->state.aptr.user) ? TRUE : FALSE;
 1757|  2.44k|#ifndef CURL_DISABLE_FTP
 1758|  2.44k|  conn->bits.ftp_use_epsv = data->set.ftp_use_epsv;
 1759|  2.44k|  conn->bits.ftp_use_eprt = data->set.ftp_use_eprt;
 1760|  2.44k|#endif
 1761|  2.44k|  conn->ssl_config.verifystatus = data->set.ssl.primary.verifystatus;
 1762|  2.44k|  conn->ssl_config.verifypeer = data->set.ssl.primary.verifypeer;
 1763|  2.44k|  conn->ssl_config.verifyhost = data->set.ssl.primary.verifyhost;
 1764|  2.44k|#ifndef CURL_DISABLE_PROXY
 1765|  2.44k|  conn->proxy_ssl_config.verifystatus =
 1766|  2.44k|    data->set.proxy_ssl.primary.verifystatus;
 1767|  2.44k|  conn->proxy_ssl_config.verifypeer = data->set.proxy_ssl.primary.verifypeer;
 1768|  2.44k|  conn->proxy_ssl_config.verifyhost = data->set.proxy_ssl.primary.verifyhost;
 1769|  2.44k|#endif
 1770|  2.44k|  conn->ip_version = data->set.ipver;
 1771|  2.44k|  conn->bits.connect_only = data->set.connect_only;
 1772|  2.44k|  conn->transport = TRNSPRT_TCP; /* most of them are TCP streams */
 1773|       |
 1774|  2.44k|#if !defined(CURL_DISABLE_HTTP) && defined(USE_NTLM) && \
 1775|  2.44k|    defined(NTLM_WB_ENABLED)
 1776|  2.44k|  conn->ntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1777|  2.44k|  conn->proxyntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1778|  2.44k|#endif
 1779|       |
 1780|       |  /* Initialize the easy handle list */
 1781|  2.44k|  Curl_llist_init(&conn->easyq, NULL);
 1782|       |
 1783|       |#ifdef HAVE_GSSAPI
 1784|       |  conn->data_prot = PROT_CLEAR;
 1785|       |#endif
 1786|       |
 1787|       |  /* Store the local bind parameters that will be used for this connection */
 1788|  2.44k|  if(data->set.str[STRING_DEVICE]) {
 1789|      0|    conn->localdev = strdup(data->set.str[STRING_DEVICE]);
 1790|      0|    if(!conn->localdev)
 1791|      0|      goto error;
 1792|      0|  }
 1793|  2.44k|  conn->localportrange = data->set.localportrange;
 1794|  2.44k|  conn->localport = data->set.localport;
 1795|       |
 1796|       |  /* the close socket stuff needs to be copied to the connection struct as
 1797|       |     it may live on without (this specific) Curl_easy */
 1798|  2.44k|  conn->fclosesocket = data->set.fclosesocket;
 1799|  2.44k|  conn->closesocket_client = data->set.closesocket_client;
 1800|  2.44k|  conn->lastused = Curl_now(); /* used now */
 1801|       |
 1802|  2.44k|  return conn;
 1803|      0|  error:
 1804|       |
 1805|      0|  Curl_llist_destroy(&conn->easyq, NULL);
 1806|      0|  free(conn->localdev);
 1807|      0|#ifdef USE_SSL
 1808|      0|  free(conn->ssl_extra);
 1809|      0|#endif
 1810|      0|  free(conn);
 1811|      0|  return NULL;
 1812|  2.44k|}
url.c:parseurlandfillconn:
 1932|  2.44k|{
 1933|  2.44k|  CURLcode result;
 1934|  2.44k|  CURLU *uh;
 1935|  2.44k|  CURLUcode uc;
 1936|  2.44k|  char *hostname;
 1937|  2.44k|  bool use_set_uh = (data->set.uh && !data->state.this_is_a_follow);
 1938|       |
 1939|  2.44k|  up_free(data); /* cleanup previous leftovers first */
 1940|       |
 1941|       |  /* parse the URL */
 1942|  2.44k|  if(use_set_uh) {
 1943|      0|    uh = data->state.uh = curl_url_dup(data->set.uh);
 1944|      0|  }
 1945|  2.44k|  else {
 1946|  2.44k|    uh = data->state.uh = curl_url();
 1947|  2.44k|  }
 1948|       |
 1949|  2.44k|  if(!uh)
 1950|      0|    return CURLE_OUT_OF_MEMORY;
 1951|       |
 1952|  2.44k|  if(data->set.str[STRING_DEFAULT_PROTOCOL] &&
 1953|  2.44k|     !Curl_is_absolute_url(data->state.url, NULL, MAX_SCHEME_LEN)) {
 1954|      0|    char *url = aprintf("%s://%s", data->set.str[STRING_DEFAULT_PROTOCOL],
 1955|      0|                        data->state.url);
 1956|      0|    if(!url)
 1957|      0|      return CURLE_OUT_OF_MEMORY;
 1958|      0|    if(data->state.url_alloc)
 1959|      0|      free(data->state.url);
 1960|      0|    data->state.url = url;
 1961|      0|    data->state.url_alloc = TRUE;
 1962|      0|  }
 1963|       |
 1964|  2.44k|  if(!use_set_uh) {
 1965|  2.44k|    char *newurl;
 1966|  2.44k|    uc = curl_url_set(uh, CURLUPART_URL, data->state.url,
 1967|  2.44k|                    CURLU_GUESS_SCHEME |
 1968|  2.44k|                    CURLU_NON_SUPPORT_SCHEME |
 1969|  2.44k|                    (data->set.disallow_username_in_url ?
 1970|  2.44k|                     CURLU_DISALLOW_USER : 0) |
 1971|  2.44k|                    (data->set.path_as_is ? CURLU_PATH_AS_IS : 0));
 1972|  2.44k|    if(uc) {
 1973|     58|      DEBUGF(infof(data, "curl_url_set rejected %s: %s", data->state.url,
 1974|     58|                   curl_url_strerror(uc)));
 1975|     58|      return Curl_uc_to_curlcode(uc);
 1976|     58|    }
 1977|       |
 1978|       |    /* after it was parsed, get the generated normalized version */
 1979|  2.38k|    uc = curl_url_get(uh, CURLUPART_URL, &newurl, 0);
 1980|  2.38k|    if(uc)
 1981|      0|      return Curl_uc_to_curlcode(uc);
 1982|  2.38k|    if(data->state.url_alloc)
 1983|    256|      free(data->state.url);
 1984|  2.38k|    data->state.url = newurl;
 1985|  2.38k|    data->state.url_alloc = TRUE;
 1986|  2.38k|  }
 1987|       |
 1988|  2.38k|  uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 1989|  2.38k|  if(uc)
 1990|      0|    return Curl_uc_to_curlcode(uc);
 1991|       |
 1992|  2.38k|  uc = curl_url_get(uh, CURLUPART_HOST, &data->state.up.hostname, 0);
 1993|  2.38k|  if(uc) {
 1994|      0|    if(!strcasecompare("file", data->state.up.scheme))
 1995|      0|      return CURLE_OUT_OF_MEMORY;
 1996|      0|  }
 1997|       |
 1998|  2.38k|#ifndef CURL_DISABLE_HSTS
 1999|  2.38k|  if(data->hsts && strcasecompare("http", data->state.up.scheme)) {
 2000|      0|    if(Curl_hsts(data->hsts, data->state.up.hostname, TRUE)) {
 2001|      0|      char *url;
 2002|      0|      Curl_safefree(data->state.up.scheme);
 2003|      0|      uc = curl_url_set(uh, CURLUPART_SCHEME, "https", 0);
 2004|      0|      if(uc)
 2005|      0|        return Curl_uc_to_curlcode(uc);
 2006|      0|      if(data->state.url_alloc)
 2007|      0|        Curl_safefree(data->state.url);
 2008|       |      /* after update, get the updated version */
 2009|      0|      uc = curl_url_get(uh, CURLUPART_URL, &url, 0);
 2010|      0|      if(uc)
 2011|      0|        return Curl_uc_to_curlcode(uc);
 2012|      0|      uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 2013|      0|      if(uc) {
 2014|      0|        free(url);
 2015|      0|        return Curl_uc_to_curlcode(uc);
 2016|      0|      }
 2017|      0|      data->state.url = url;
 2018|      0|      data->state.url_alloc = TRUE;
 2019|      0|      infof(data, "Switched from HTTP to HTTPS due to HSTS => %s",
 2020|      0|            data->state.url);
 2021|      0|    }
 2022|      0|  }
 2023|  2.38k|#endif
 2024|       |
 2025|  2.38k|  result = findprotocol(data, conn, data->state.up.scheme);
 2026|  2.38k|  if(result)
 2027|     27|    return result;
 2028|       |
 2029|       |  /*
 2030|       |   * User name and password set with their own options override the
 2031|       |   * credentials possibly set in the URL.
 2032|       |   */
 2033|  2.36k|  if(!data->state.aptr.user) {
 2034|       |    /* we don't use the URL API's URL decoder option here since it rejects
 2035|       |       control codes and we want to allow them for some schemes in the user
 2036|       |       and password fields */
 2037|  2.09k|    uc = curl_url_get(uh, CURLUPART_USER, &data->state.up.user, 0);
 2038|  2.09k|    if(!uc) {
 2039|     82|      char *decoded;
 2040|     82|      result = Curl_urldecode(NULL, data->state.up.user, 0, &decoded, NULL,
 2041|     82|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2042|     82|                              REJECT_ZERO : REJECT_CTRL);
 2043|     82|      if(result)
 2044|      1|        return result;
 2045|     81|      conn->user = decoded;
 2046|     81|      conn->bits.user_passwd = TRUE;
 2047|     81|      result = Curl_setstropt(&data->state.aptr.user, decoded);
 2048|     81|      if(result)
 2049|      0|        return result;
 2050|     81|    }
 2051|  2.01k|    else if(uc != CURLUE_NO_USER)
 2052|      0|      return Curl_uc_to_curlcode(uc);
 2053|  2.09k|  }
 2054|       |
 2055|  2.36k|  if(!data->state.aptr.passwd) {
 2056|  2.30k|    uc = curl_url_get(uh, CURLUPART_PASSWORD, &data->state.up.password, 0);
 2057|  2.30k|    if(!uc) {
 2058|     17|      char *decoded;
 2059|     17|      result = Curl_urldecode(NULL, data->state.up.password, 0, &decoded, NULL,
 2060|     17|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2061|     17|                              REJECT_ZERO : REJECT_CTRL);
 2062|     17|      if(result)
 2063|      1|        return result;
 2064|     16|      conn->passwd = decoded;
 2065|     16|      conn->bits.user_passwd = TRUE;
 2066|     16|      result = Curl_setstropt(&data->state.aptr.passwd, decoded);
 2067|     16|      if(result)
 2068|      0|        return result;
 2069|     16|    }
 2070|  2.28k|    else if(uc != CURLUE_NO_PASSWORD)
 2071|      0|      return Curl_uc_to_curlcode(uc);
 2072|  2.30k|  }
 2073|       |
 2074|  2.35k|  uc = curl_url_get(uh, CURLUPART_OPTIONS, &data->state.up.options,
 2075|  2.35k|                    CURLU_URLDECODE);
 2076|  2.35k|  if(!uc) {
 2077|      0|    conn->options = strdup(data->state.up.options);
 2078|      0|    if(!conn->options)
 2079|      0|      return CURLE_OUT_OF_MEMORY;
 2080|      0|  }
 2081|  2.35k|  else if(uc != CURLUE_NO_OPTIONS)
 2082|      0|    return Curl_uc_to_curlcode(uc);
 2083|       |
 2084|  2.35k|  uc = curl_url_get(uh, CURLUPART_PATH, &data->state.up.path, 0);
 2085|  2.35k|  if(uc)
 2086|      0|    return Curl_uc_to_curlcode(uc);
 2087|       |
 2088|  2.35k|  uc = curl_url_get(uh, CURLUPART_PORT, &data->state.up.port,
 2089|  2.35k|                    CURLU_DEFAULT_PORT);
 2090|  2.35k|  if(uc) {
 2091|      0|    if(!strcasecompare("file", data->state.up.scheme))
 2092|      0|      return CURLE_OUT_OF_MEMORY;
 2093|      0|  }
 2094|  2.35k|  else {
 2095|  2.35k|    unsigned long port = strtoul(data->state.up.port, NULL, 10);
 2096|  2.35k|    conn->port = conn->remote_port =
 2097|  2.35k|      (data->set.use_port && data->state.allow_port) ?
 2098|  2.35k|      (int)data->set.use_port : curlx_ultous(port);
 2099|  2.35k|  }
 2100|       |
 2101|  2.35k|  (void)curl_url_get(uh, CURLUPART_QUERY, &data->state.up.query, 0);
 2102|       |
 2103|  2.35k|  hostname = data->state.up.hostname;
 2104|  2.35k|  if(hostname && hostname[0] == '[') {
 2105|       |    /* This looks like an IPv6 address literal. See if there is an address
 2106|       |       scope. */
 2107|     33|    size_t hlen;
 2108|     33|    conn->bits.ipv6_ip = TRUE;
 2109|       |    /* cut off the brackets! */
 2110|     33|    hostname++;
 2111|     33|    hlen = strlen(hostname);
 2112|     33|    hostname[hlen - 1] = 0;
 2113|       |
 2114|     33|    zonefrom_url(uh, data, conn);
 2115|     33|  }
 2116|       |
 2117|       |  /* make sure the connect struct gets its own copy of the host name */
 2118|  2.35k|  conn->host.rawalloc = strdup(hostname ? hostname : "");
 2119|  2.35k|  if(!conn->host.rawalloc)
 2120|      0|    return CURLE_OUT_OF_MEMORY;
 2121|  2.35k|  conn->host.name = conn->host.rawalloc;
 2122|       |
 2123|  2.35k|  if(data->set.scope_id)
 2124|       |    /* Override any scope that was set above.  */
 2125|      0|    conn->scope_id = data->set.scope_id;
 2126|       |
 2127|  2.35k|  return CURLE_OK;
 2128|  2.35k|}
url.c:findprotocol:
 1832|  2.38k|{
 1833|  2.38k|  const struct Curl_handler *p = Curl_builtin_scheme(protostr);
 1834|       |
 1835|  2.38k|  if(p && /* Protocol found in table. Check if allowed */
 1836|  2.38k|     (data->set.allowed_protocols & p->protocol)) {
 1837|       |
 1838|       |    /* it is allowed for "normal" request, now do an extra check if this is
 1839|       |       the result of a redirect */
 1840|  2.36k|    if(data->state.this_is_a_follow &&
 1841|  2.36k|       !(data->set.redir_protocols & p->protocol))
 1842|       |      /* nope, get out */
 1843|      0|      ;
 1844|  2.36k|    else {
 1845|       |      /* Perform setup complement if some. */
 1846|  2.36k|      conn->handler = conn->given = p;
 1847|       |
 1848|       |      /* 'port' and 'remote_port' are set in setup_connection_internals() */
 1849|  2.36k|      return CURLE_OK;
 1850|  2.36k|    }
 1851|  2.36k|  }
 1852|       |
 1853|       |  /* The protocol was not found in the table, but we don't have to assign it
 1854|       |     to anything since it is already assigned to a dummy-struct in the
 1855|       |     create_conn() function when the connectdata struct is allocated. */
 1856|     27|  failf(data, "Protocol \"%s\" not supported or disabled in " LIBCURL_NAME,
 1857|     27|        protostr);
 1858|       |
 1859|     27|  return CURLE_UNSUPPORTED_PROTOCOL;
 1860|  2.38k|}
url.c:zonefrom_url:
 1884|     33|{
 1885|     33|  char *zoneid;
 1886|     33|  CURLUcode uc = curl_url_get(uh, CURLUPART_ZONEID, &zoneid, 0);
 1887|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
 1888|       |  (void)data;
 1889|       |#endif
 1890|       |
 1891|     33|  if(!uc && zoneid) {
 1892|      3|    char *endp;
 1893|      3|    unsigned long scope = strtoul(zoneid, &endp, 10);
 1894|      3|    if(!*endp && (scope < UINT_MAX))
 1895|       |      /* A plain number, use it directly as a scope id. */
 1896|      1|      conn->scope_id = (unsigned int)scope;
 1897|      2|#if defined(HAVE_IF_NAMETOINDEX)
 1898|      2|    else {
 1899|       |#elif defined(WIN32)
 1900|       |    else if(Curl_if_nametoindex) {
 1901|       |#endif
 1902|       |
 1903|      2|#if defined(HAVE_IF_NAMETOINDEX) || defined(WIN32)
 1904|       |      /* Zone identifier is not numeric */
 1905|      2|      unsigned int scopeidx = 0;
 1906|       |#if defined(WIN32)
 1907|       |      scopeidx = Curl_if_nametoindex(zoneid);
 1908|       |#else
 1909|      2|      scopeidx = if_nametoindex(zoneid);
 1910|      2|#endif
 1911|      2|      if(!scopeidx) {
 1912|      2|#ifndef CURL_DISABLE_VERBOSE_STRINGS
 1913|      2|        char buffer[STRERROR_LEN];
 1914|      2|        infof(data, "Invalid zoneid: %s; %s", zoneid,
 1915|      2|              Curl_strerror(errno, buffer, sizeof(buffer)));
 1916|      2|#endif
 1917|      2|      }
 1918|      0|      else
 1919|      0|        conn->scope_id = scopeidx;
 1920|      2|    }
 1921|      3|#endif /* HAVE_IF_NAMETOINDEX || WIN32 */
 1922|       |
 1923|      3|    free(zoneid);
 1924|      3|  }
 1925|     33|}
url.c:create_conn_helper_init_proxy:
 2575|  2.35k|{
 2576|  2.35k|  char *proxy = NULL;
 2577|  2.35k|  char *socksproxy = NULL;
 2578|  2.35k|  char *no_proxy = NULL;
 2579|  2.35k|  CURLcode result = CURLE_OK;
 2580|       |
 2581|       |  /*************************************************************
 2582|       |   * Extract the user and password from the authentication string
 2583|       |   *************************************************************/
 2584|  2.35k|  if(conn->bits.proxy_user_passwd) {
 2585|      0|    result = parse_proxy_auth(data, conn);
 2586|      0|    if(result)
 2587|      0|      goto out;
 2588|      0|  }
 2589|       |
 2590|       |  /*************************************************************
 2591|       |   * Detect what (if any) proxy to use
 2592|       |   *************************************************************/
 2593|  2.35k|  if(data->set.str[STRING_PROXY]) {
 2594|      0|    proxy = strdup(data->set.str[STRING_PROXY]);
 2595|       |    /* if global proxy is set, this is it */
 2596|      0|    if(NULL == proxy) {
 2597|      0|      failf(data, "memory shortage");
 2598|      0|      result = CURLE_OUT_OF_MEMORY;
 2599|      0|      goto out;
 2600|      0|    }
 2601|      0|  }
 2602|       |
 2603|  2.35k|  if(data->set.str[STRING_PRE_PROXY]) {
 2604|      0|    socksproxy = strdup(data->set.str[STRING_PRE_PROXY]);
 2605|       |    /* if global socks proxy is set, this is it */
 2606|      0|    if(NULL == socksproxy) {
 2607|      0|      failf(data, "memory shortage");
 2608|      0|      result = CURLE_OUT_OF_MEMORY;
 2609|      0|      goto out;
 2610|      0|    }
 2611|      0|  }
 2612|       |
 2613|  2.35k|  if(!data->set.str[STRING_NOPROXY]) {
 2614|  2.35k|    const char *p = "no_proxy";
 2615|  2.35k|    no_proxy = curl_getenv(p);
 2616|  2.35k|    if(!no_proxy) {
 2617|  2.35k|      p = "NO_PROXY";
 2618|  2.35k|      no_proxy = curl_getenv(p);
 2619|  2.35k|    }
 2620|  2.35k|    if(no_proxy) {
 2621|      0|      infof(data, "Uses proxy env variable %s == '%s'", p, no_proxy);
 2622|      0|    }
 2623|  2.35k|  }
 2624|       |
 2625|  2.35k|  if(check_noproxy(conn->host.name, data->set.str[STRING_NOPROXY] ?
 2626|  2.35k|      data->set.str[STRING_NOPROXY] : no_proxy)) {
 2627|      0|    Curl_safefree(proxy);
 2628|      0|    Curl_safefree(socksproxy);
 2629|      0|  }
 2630|  2.35k|#ifndef CURL_DISABLE_HTTP
 2631|  2.35k|  else if(!proxy && !socksproxy)
 2632|       |    /* if the host is not in the noproxy list, detect proxy. */
 2633|  2.35k|    proxy = detect_proxy(data, conn);
 2634|  2.35k|#endif /* CURL_DISABLE_HTTP */
 2635|       |
 2636|  2.35k|  Curl_safefree(no_proxy);
 2637|       |
 2638|  2.35k|#ifdef USE_UNIX_SOCKETS
 2639|       |  /* For the time being do not mix proxy and unix domain sockets. See #1274 */
 2640|  2.35k|  if(proxy && conn->unix_domain_socket) {
 2641|      0|    free(proxy);
 2642|      0|    proxy = NULL;
 2643|      0|  }
 2644|  2.35k|#endif
 2645|       |
 2646|  2.35k|  if(proxy && (!*proxy || (conn->handler->flags & PROTOPT_NONETWORK))) {
 2647|      0|    free(proxy);  /* Don't bother with an empty proxy string or if the
 2648|       |                     protocol doesn't work with network */
 2649|      0|    proxy = NULL;
 2650|      0|  }
 2651|  2.35k|  if(socksproxy && (!*socksproxy ||
 2652|      0|                    (conn->handler->flags & PROTOPT_NONETWORK))) {
 2653|      0|    free(socksproxy);  /* Don't bother with an empty socks proxy string or if
 2654|       |                          the protocol doesn't work with network */
 2655|      0|    socksproxy = NULL;
 2656|      0|  }
 2657|       |
 2658|       |  /***********************************************************************
 2659|       |   * If this is supposed to use a proxy, we need to figure out the proxy host
 2660|       |   * name, proxy type and port number, so that we can re-use an existing
 2661|       |   * connection that may exist registered to the same proxy host.
 2662|       |   ***********************************************************************/
 2663|  2.35k|  if(proxy || socksproxy) {
 2664|      0|    if(proxy) {
 2665|      0|      result = parse_proxy(data, conn, proxy, conn->http_proxy.proxytype);
 2666|      0|      Curl_safefree(proxy); /* parse_proxy copies the proxy string */
 2667|      0|      if(result)
 2668|      0|        goto out;
 2669|      0|    }
 2670|       |
 2671|      0|    if(socksproxy) {
 2672|      0|      result = parse_proxy(data, conn, socksproxy,
 2673|      0|                           conn->socks_proxy.proxytype);
 2674|       |      /* parse_proxy copies the socks proxy string */
 2675|      0|      Curl_safefree(socksproxy);
 2676|      0|      if(result)
 2677|      0|        goto out;
 2678|      0|    }
 2679|       |
 2680|      0|    if(conn->http_proxy.host.rawalloc) {
 2681|       |#ifdef CURL_DISABLE_HTTP
 2682|       |      /* asking for a HTTP proxy is a bit funny when HTTP is disabled... */
 2683|       |      result = CURLE_UNSUPPORTED_PROTOCOL;
 2684|       |      goto out;
 2685|       |#else
 2686|       |      /* force this connection's protocol to become HTTP if compatible */
 2687|      0|      if(!(conn->handler->protocol & PROTO_FAMILY_HTTP)) {
 2688|      0|        if((conn->handler->flags & PROTOPT_PROXY_AS_HTTP) &&
 2689|      0|           !conn->bits.tunnel_proxy)
 2690|      0|          conn->handler = &Curl_handler_http;
 2691|      0|        else
 2692|       |          /* if not converting to HTTP over the proxy, enforce tunneling */
 2693|      0|          conn->bits.tunnel_proxy = TRUE;
 2694|      0|      }
 2695|      0|      conn->bits.httpproxy = TRUE;
 2696|      0|#endif
 2697|      0|    }
 2698|      0|    else {
 2699|      0|      conn->bits.httpproxy = FALSE; /* not a HTTP proxy */
 2700|      0|      conn->bits.tunnel_proxy = FALSE; /* no tunneling if not HTTP */
 2701|      0|    }
 2702|       |
 2703|      0|    if(conn->socks_proxy.host.rawalloc) {
 2704|      0|      if(!conn->http_proxy.host.rawalloc) {
 2705|       |        /* once a socks proxy */
 2706|      0|        if(!conn->socks_proxy.user) {
 2707|      0|          conn->socks_proxy.user = conn->http_proxy.user;
 2708|      0|          conn->http_proxy.user = NULL;
 2709|      0|          Curl_safefree(conn->socks_proxy.passwd);
 2710|      0|          conn->socks_proxy.passwd = conn->http_proxy.passwd;
 2711|      0|          conn->http_proxy.passwd = NULL;
 2712|      0|        }
 2713|      0|      }
 2714|      0|      conn->bits.socksproxy = TRUE;
 2715|      0|    }
 2716|      0|    else
 2717|      0|      conn->bits.socksproxy = FALSE; /* not a socks proxy */
 2718|      0|  }
 2719|  2.35k|  else {
 2720|  2.35k|    conn->bits.socksproxy = FALSE;
 2721|  2.35k|    conn->bits.httpproxy = FALSE;
 2722|  2.35k|  }
 2723|  2.35k|  conn->bits.proxy = conn->bits.httpproxy || conn->bits.socksproxy;
 2724|       |
 2725|  2.35k|  if(!conn->bits.proxy) {
 2726|       |    /* we aren't using the proxy after all... */
 2727|  2.35k|    conn->bits.proxy = FALSE;
 2728|  2.35k|    conn->bits.httpproxy = FALSE;
 2729|  2.35k|    conn->bits.socksproxy = FALSE;
 2730|  2.35k|    conn->bits.proxy_user_passwd = FALSE;
 2731|  2.35k|    conn->bits.tunnel_proxy = FALSE;
 2732|       |    /* CURLPROXY_HTTPS does not have its own flag in conn->bits, yet we need
 2733|       |       to signal that CURLPROXY_HTTPS is not used for this connection */
 2734|  2.35k|    conn->http_proxy.proxytype = CURLPROXY_HTTP;
 2735|  2.35k|  }
 2736|       |
 2737|  2.35k|out:
 2738|       |
 2739|  2.35k|  free(socksproxy);
 2740|  2.35k|  free(proxy);
 2741|  2.35k|  return result;
 2742|  2.35k|}
url.c:check_noproxy:
 2223|  2.35k|{
 2224|       |  /* no_proxy=domain1.dom,host.domain2.dom
 2225|       |   *   (a comma-separated list of hosts which should
 2226|       |   *   not be proxied, or an asterisk to override
 2227|       |   *   all proxy variables)
 2228|       |   */
 2229|  2.35k|  if(no_proxy && no_proxy[0]) {
 2230|      0|    size_t tok_start;
 2231|      0|    size_t tok_end;
 2232|      0|    const char *separator = ", ";
 2233|      0|    size_t no_proxy_len;
 2234|      0|    size_t namelen;
 2235|      0|    char *endptr;
 2236|      0|    if(strcasecompare("*", no_proxy)) {
 2237|      0|      return TRUE;
 2238|      0|    }
 2239|       |
 2240|       |    /* NO_PROXY was specified and it wasn't just an asterisk */
 2241|       |
 2242|      0|    no_proxy_len = strlen(no_proxy);
 2243|      0|    if(name[0] == '[') {
 2244|       |      /* IPv6 numerical address */
 2245|      0|      endptr = strchr(name, ']');
 2246|      0|      if(!endptr)
 2247|      0|        return FALSE;
 2248|      0|      name++;
 2249|      0|      namelen = endptr - name;
 2250|      0|    }
 2251|      0|    else
 2252|      0|      namelen = strlen(name);
 2253|       |
 2254|      0|    for(tok_start = 0; tok_start < no_proxy_len; tok_start = tok_end + 1) {
 2255|      0|      while(tok_start < no_proxy_len &&
 2256|      0|            strchr(separator, no_proxy[tok_start]) != NULL) {
 2257|       |        /* Look for the beginning of the token. */
 2258|      0|        ++tok_start;
 2259|      0|      }
 2260|       |
 2261|      0|      if(tok_start == no_proxy_len)
 2262|      0|        break; /* It was all trailing separator chars, no more tokens. */
 2263|       |
 2264|      0|      for(tok_end = tok_start; tok_end < no_proxy_len &&
 2265|      0|            strchr(separator, no_proxy[tok_end]) == NULL; ++tok_end)
 2266|       |        /* Look for the end of the token. */
 2267|      0|        ;
 2268|       |
 2269|       |      /* To match previous behavior, where it was necessary to specify
 2270|       |       * ".local.com" to prevent matching "notlocal.com", we will leave
 2271|       |       * the '.' off.
 2272|       |       */
 2273|      0|      if(no_proxy[tok_start] == '.')
 2274|      0|        ++tok_start;
 2275|       |
 2276|      0|      if((tok_end - tok_start) <= namelen) {
 2277|       |        /* Match the last part of the name to the domain we are checking. */
 2278|      0|        const char *checkn = name + namelen - (tok_end - tok_start);
 2279|      0|        if(strncasecompare(no_proxy + tok_start, checkn,
 2280|      0|                           tok_end - tok_start)) {
 2281|      0|          if((tok_end - tok_start) == namelen || *(checkn - 1) == '.') {
 2282|       |            /* We either have an exact match, or the previous character is a .
 2283|       |             * so it is within the same domain, so no proxy for this host.
 2284|       |             */
 2285|      0|            return TRUE;
 2286|      0|          }
 2287|      0|        }
 2288|      0|      } /* if((tok_end - tok_start) <= namelen) */
 2289|      0|    } /* for(tok_start = 0; tok_start < no_proxy_len;
 2290|       |         tok_start = tok_end + 1) */
 2291|      0|  } /* NO_PROXY was specified and it wasn't just an asterisk */
 2292|       |
 2293|  2.35k|  return FALSE;
 2294|  2.35k|}
url.c:detect_proxy:
 2304|  2.35k|{
 2305|  2.35k|  char *proxy = NULL;
 2306|       |
 2307|       |  /* If proxy was not specified, we check for default proxy environment
 2308|       |   * variables, to enable i.e Lynx compliance:
 2309|       |   *
 2310|       |   * http_proxy=http://some.server.dom:port/
 2311|       |   * https_proxy=http://some.server.dom:port/
 2312|       |   * ftp_proxy=http://some.server.dom:port/
 2313|       |   * no_proxy=domain1.dom,host.domain2.dom
 2314|       |   *   (a comma-separated list of hosts which should
 2315|       |   *   not be proxied, or an asterisk to override
 2316|       |   *   all proxy variables)
 2317|       |   * all_proxy=http://some.server.dom:port/
 2318|       |   *   (seems to exist for the CERN www lib. Probably
 2319|       |   *   the first to check for.)
 2320|       |   *
 2321|       |   * For compatibility, the all-uppercase versions of these variables are
 2322|       |   * checked if the lowercase versions don't exist.
 2323|       |   */
 2324|  2.35k|  char proxy_env[128];
 2325|  2.35k|  const char *protop = conn->handler->scheme;
 2326|  2.35k|  char *envp = proxy_env;
 2327|  2.35k|  char *prox;
 2328|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
 2329|       |  (void)data;
 2330|       |#endif
 2331|       |
 2332|       |  /* Now, build <protocol>_proxy and check for such a one to use */
 2333|  11.7k|  while(*protop)
 2334|  9.43k|    *envp++ = (char)tolower((int)*protop++);
 2335|       |
 2336|       |  /* append _proxy */
 2337|  2.35k|  strcpy(envp, "_proxy");
 2338|       |
 2339|       |  /* read the protocol proxy: */
 2340|  2.35k|  prox = curl_getenv(proxy_env);
 2341|       |
 2342|       |  /*
 2343|       |   * We don't try the uppercase version of HTTP_PROXY because of
 2344|       |   * security reasons:
 2345|       |   *
 2346|       |   * When curl is used in a webserver application
 2347|       |   * environment (cgi or php), this environment variable can
 2348|       |   * be controlled by the web server user by setting the
 2349|       |   * http header 'Proxy:' to some value.
 2350|       |   *
 2351|       |   * This can cause 'internal' http/ftp requests to be
 2352|       |   * arbitrarily redirected by any external attacker.
 2353|       |   */
 2354|  2.35k|  if(!prox && !strcasecompare("http_proxy", proxy_env)) {
 2355|       |    /* There was no lowercase variable, try the uppercase version: */
 2356|      0|    Curl_strntoupper(proxy_env, proxy_env, sizeof(proxy_env));
 2357|      0|    prox = curl_getenv(proxy_env);
 2358|      0|  }
 2359|       |
 2360|  2.35k|  envp = proxy_env;
 2361|  2.35k|  if(prox) {
 2362|      0|    proxy = prox; /* use this */
 2363|      0|  }
 2364|  2.35k|  else {
 2365|  2.35k|    envp = (char *)"all_proxy";
 2366|  2.35k|    proxy = curl_getenv(envp); /* default proxy to use */
 2367|  2.35k|    if(!proxy) {
 2368|  2.35k|      envp = (char *)"ALL_PROXY";
 2369|  2.35k|      proxy = curl_getenv(envp);
 2370|  2.35k|    }
 2371|  2.35k|  }
 2372|  2.35k|  if(proxy)
 2373|      0|    infof(data, "Uses proxy env variable %s == '%s'", envp, proxy);
 2374|       |
 2375|  2.35k|  return proxy;
 2376|  2.35k|}
url.c:parse_remote_port:
 2888|  2.35k|{
 2889|       |
 2890|  2.35k|  if(data->set.use_port && data->state.allow_port) {
 2891|       |    /* if set, we use this instead of the port possibly given in the URL */
 2892|      0|    char portbuf[16];
 2893|      0|    CURLUcode uc;
 2894|      0|    conn->remote_port = (unsigned short)data->set.use_port;
 2895|      0|    msnprintf(portbuf, sizeof(portbuf), "%d", conn->remote_port);
 2896|      0|    uc = curl_url_set(data->state.uh, CURLUPART_PORT, portbuf, 0);
 2897|      0|    if(uc)
 2898|      0|      return CURLE_OUT_OF_MEMORY;
 2899|      0|  }
 2900|       |
 2901|  2.35k|  return CURLE_OK;
 2902|  2.35k|}
url.c:override_login:
 2910|  2.35k|{
 2911|  2.35k|  CURLUcode uc;
 2912|  2.35k|  char **userp = &conn->user;
 2913|  2.35k|  char **passwdp = &conn->passwd;
 2914|  2.35k|  char **optionsp = &conn->options;
 2915|       |
 2916|  2.35k|#ifndef CURL_DISABLE_NETRC
 2917|  2.35k|  if(data->set.use_netrc == CURL_NETRC_REQUIRED && conn->bits.user_passwd) {
 2918|      0|    Curl_safefree(*userp);
 2919|      0|    Curl_safefree(*passwdp);
 2920|      0|    conn->bits.user_passwd = FALSE; /* disable user+password */
 2921|      0|  }
 2922|  2.35k|#endif
 2923|       |
 2924|  2.35k|  if(data->set.str[STRING_OPTIONS]) {
 2925|      0|    free(*optionsp);
 2926|      0|    *optionsp = strdup(data->set.str[STRING_OPTIONS]);
 2927|      0|    if(!*optionsp)
 2928|      0|      return CURLE_OUT_OF_MEMORY;
 2929|      0|  }
 2930|       |
 2931|  2.35k|#ifndef CURL_DISABLE_NETRC
 2932|  2.35k|  conn->bits.netrc = FALSE;
 2933|  2.35k|  if(data->set.use_netrc && !data->set.str[STRING_USERNAME]) {
 2934|      0|    bool netrc_user_changed = FALSE;
 2935|      0|    bool netrc_passwd_changed = FALSE;
 2936|      0|    int ret;
 2937|       |
 2938|      0|    ret = Curl_parsenetrc(conn->host.name,
 2939|      0|                          userp, passwdp,
 2940|      0|                          &netrc_user_changed, &netrc_passwd_changed,
 2941|      0|                          data->set.str[STRING_NETRC_FILE]);
 2942|      0|    if(ret > 0) {
 2943|      0|      infof(data, "Couldn't find host %s in the %s file; using defaults",
 2944|      0|            conn->host.name, data->set.str[STRING_NETRC_FILE]);
 2945|      0|    }
 2946|      0|    else if(ret < 0) {
 2947|      0|      return CURLE_OUT_OF_MEMORY;
 2948|      0|    }
 2949|      0|    else {
 2950|       |      /* set bits.netrc TRUE to remember that we got the name from a .netrc
 2951|       |         file, so that it is safe to use even if we followed a Location: to a
 2952|       |         different host or similar. */
 2953|      0|      conn->bits.netrc = TRUE;
 2954|      0|      conn->bits.user_passwd = TRUE; /* enable user+password */
 2955|      0|    }
 2956|      0|  }
 2957|  2.35k|#endif
 2958|       |
 2959|       |  /* for updated strings, we update them in the URL */
 2960|  2.35k|  if(*userp) {
 2961|     80|    CURLcode result = Curl_setstropt(&data->state.aptr.user, *userp);
 2962|     80|    if(result)
 2963|      0|      return result;
 2964|     80|  }
 2965|  2.35k|  if(data->state.aptr.user) {
 2966|    344|    uc = curl_url_set(data->state.uh, CURLUPART_USER, data->state.aptr.user,
 2967|    344|                      CURLU_URLENCODE);
 2968|    344|    if(uc)
 2969|      0|      return Curl_uc_to_curlcode(uc);
 2970|    344|    if(!*userp) {
 2971|    264|      *userp = strdup(data->state.aptr.user);
 2972|    264|      if(!*userp)
 2973|      0|        return CURLE_OUT_OF_MEMORY;
 2974|    264|    }
 2975|    344|  }
 2976|       |
 2977|  2.35k|  if(*passwdp) {
 2978|     16|    CURLcode result = Curl_setstropt(&data->state.aptr.passwd, *passwdp);
 2979|     16|    if(result)
 2980|      0|      return result;
 2981|     16|  }
 2982|  2.35k|  if(data->state.aptr.passwd) {
 2983|     71|    uc = curl_url_set(data->state.uh, CURLUPART_PASSWORD,
 2984|     71|                      data->state.aptr.passwd, CURLU_URLENCODE);
 2985|     71|    if(uc)
 2986|      0|      return Curl_uc_to_curlcode(uc);
 2987|     71|    if(!*passwdp) {
 2988|     55|      *passwdp = strdup(data->state.aptr.passwd);
 2989|     55|      if(!*passwdp)
 2990|      0|        return CURLE_OUT_OF_MEMORY;
 2991|     55|    }
 2992|     71|  }
 2993|       |
 2994|  2.35k|  return CURLE_OK;
 2995|  2.35k|}
url.c:set_login:
 3001|  2.35k|{
 3002|  2.35k|  CURLcode result = CURLE_OK;
 3003|  2.35k|  const char *setuser = CURL_DEFAULT_USER;
 3004|  2.35k|  const char *setpasswd = CURL_DEFAULT_PASSWORD;
 3005|       |
 3006|       |  /* If our protocol needs a password and we have none, use the defaults */
 3007|  2.35k|  if((conn->handler->flags & PROTOPT_NEEDSPWD) && !conn->bits.user_passwd)
 3008|      0|    ;
 3009|  2.35k|  else {
 3010|  2.35k|    setuser = "";
 3011|  2.35k|    setpasswd = "";
 3012|  2.35k|  }
 3013|       |  /* Store the default user */
 3014|  2.35k|  if(!conn->user) {
 3015|  2.01k|    conn->user = strdup(setuser);
 3016|  2.01k|    if(!conn->user)
 3017|      0|      return CURLE_OUT_OF_MEMORY;
 3018|  2.01k|  }
 3019|       |
 3020|       |  /* Store the default password */
 3021|  2.35k|  if(!conn->passwd) {
 3022|  2.28k|    conn->passwd = strdup(setpasswd);
 3023|  2.28k|    if(!conn->passwd)
 3024|      0|      result = CURLE_OUT_OF_MEMORY;
 3025|  2.28k|  }
 3026|       |
 3027|  2.35k|  return result;
 3028|  2.35k|}
url.c:parse_connect_to_slist:
 3211|  2.35k|{
 3212|  2.35k|  CURLcode result = CURLE_OK;
 3213|  2.35k|  char *host = NULL;
 3214|  2.35k|  int port = -1;
 3215|       |
 3216|  4.71k|  while(conn_to_host && !host && port == -1) {
 3217|  2.35k|    result = parse_connect_to_string(data, conn, conn_to_host->data,
 3218|  2.35k|                                     &host, &port);
 3219|  2.35k|    if(result)
 3220|      0|      return result;
 3221|       |
 3222|  2.35k|    if(host && *host) {
 3223|  2.35k|      conn->conn_to_host.rawalloc = host;
 3224|  2.35k|      conn->conn_to_host.name = host;
 3225|  2.35k|      conn->bits.conn_to_host = TRUE;
 3226|       |
 3227|  2.35k|      infof(data, "Connecting to hostname: %s", host);
 3228|  2.35k|    }
 3229|      0|    else {
 3230|       |      /* no "connect to host" */
 3231|      0|      conn->bits.conn_to_host = FALSE;
 3232|      0|      Curl_safefree(host);
 3233|      0|    }
 3234|       |
 3235|  2.35k|    if(port >= 0) {
 3236|      0|      conn->conn_to_port = port;
 3237|      0|      conn->bits.conn_to_port = TRUE;
 3238|      0|      infof(data, "Connecting to port: %d", port);
 3239|      0|    }
 3240|  2.35k|    else {
 3241|       |      /* no "connect to port" */
 3242|  2.35k|      conn->bits.conn_to_port = FALSE;
 3243|  2.35k|      port = -1;
 3244|  2.35k|    }
 3245|       |
 3246|  2.35k|    conn_to_host = conn_to_host->next;
 3247|  2.35k|  }
 3248|       |
 3249|  2.35k|#ifndef CURL_DISABLE_ALTSVC
 3250|  2.35k|  if(data->asi && !host && (port == -1) &&
 3251|  2.35k|     ((conn->handler->protocol == CURLPROTO_HTTPS) ||
 3252|      0|#ifdef CURLDEBUG
 3253|       |      /* allow debug builds to circumvent the HTTPS restriction */
 3254|      0|      getenv("CURL_ALTSVC_HTTP")
 3255|       |#else
 3256|       |      0
 3257|       |#endif
 3258|      0|       )) {
 3259|       |    /* no connect_to match, try alt-svc! */
 3260|      0|    enum alpnid srcalpnid;
 3261|      0|    bool hit;
 3262|      0|    struct altsvc *as;
 3263|      0|    const int allowed_versions = ( ALPN_h1
 3264|      0|#ifdef USE_NGHTTP2
 3265|      0|      | ALPN_h2
 3266|      0|#endif
 3267|       |#ifdef ENABLE_QUIC
 3268|       |      | ALPN_h3
 3269|       |#endif
 3270|      0|      ) & data->asi->flags;
 3271|       |
 3272|      0|    host = conn->host.rawalloc;
 3273|      0|#ifdef USE_NGHTTP2
 3274|       |    /* with h2 support, check that first */
 3275|      0|    srcalpnid = ALPN_h2;
 3276|      0|    hit = Curl_altsvc_lookup(data->asi,
 3277|      0|                             srcalpnid, host, conn->remote_port, /* from */
 3278|      0|                             &as /* to */,
 3279|      0|                             allowed_versions);
 3280|      0|    if(!hit)
 3281|      0|#endif
 3282|      0|    {
 3283|      0|      srcalpnid = ALPN_h1;
 3284|      0|      hit = Curl_altsvc_lookup(data->asi,
 3285|      0|                               srcalpnid, host, conn->remote_port, /* from */
 3286|      0|                               &as /* to */,
 3287|      0|                               allowed_versions);
 3288|      0|    }
 3289|      0|    if(hit) {
 3290|      0|      char *hostd = strdup((char *)as->dst.host);
 3291|      0|      if(!hostd)
 3292|      0|        return CURLE_OUT_OF_MEMORY;
 3293|      0|      conn->conn_to_host.rawalloc = hostd;
 3294|      0|      conn->conn_to_host.name = hostd;
 3295|      0|      conn->bits.conn_to_host = TRUE;
 3296|      0|      conn->conn_to_port = as->dst.port;
 3297|      0|      conn->bits.conn_to_port = TRUE;
 3298|      0|      conn->bits.altused = TRUE;
 3299|      0|      infof(data, "Alt-svc connecting from [%s]%s:%d to [%s]%s:%d",
 3300|      0|            Curl_alpnid2str(srcalpnid), host, conn->remote_port,
 3301|      0|            Curl_alpnid2str(as->dst.alpnid), hostd, as->dst.port);
 3302|      0|      if(srcalpnid != as->dst.alpnid) {
 3303|       |        /* protocol version switch */
 3304|      0|        switch(as->dst.alpnid) {
 3305|      0|        case ALPN_h1:
 3306|      0|          conn->httpversion = 11;
 3307|      0|          break;
 3308|      0|        case ALPN_h2:
 3309|      0|          conn->httpversion = 20;
 3310|      0|          break;
 3311|      0|        case ALPN_h3:
 3312|      0|          conn->transport = TRNSPRT_QUIC;
 3313|      0|          conn->httpversion = 30;
 3314|      0|          break;
 3315|      0|        default: /* shouldn't be possible */
 3316|      0|          break;
 3317|      0|        }
 3318|      0|      }
 3319|      0|    }
 3320|      0|  }
 3321|  2.35k|#endif
 3322|       |
 3323|  2.35k|  return result;
 3324|  2.35k|}
url.c:parse_connect_to_string:
 3143|  2.35k|{
 3144|  2.35k|  CURLcode result = CURLE_OK;
 3145|  2.35k|  const char *ptr = conn_to_host;
 3146|  2.35k|  int host_match = FALSE;
 3147|  2.35k|  int port_match = FALSE;
 3148|       |
 3149|  2.35k|  *host_result = NULL;
 3150|  2.35k|  *port_result = -1;
 3151|       |
 3152|  2.35k|  if(*ptr == ':') {
 3153|       |    /* an empty hostname always matches */
 3154|  2.35k|    host_match = TRUE;
 3155|  2.35k|    ptr++;
 3156|  2.35k|  }
 3157|      0|  else {
 3158|       |    /* check whether the URL's hostname matches */
 3159|      0|    size_t hostname_to_match_len;
 3160|      0|    char *hostname_to_match = aprintf("%s%s%s",
 3161|      0|                                      conn->bits.ipv6_ip ? "[" : "",
 3162|      0|                                      conn->host.name,
 3163|      0|                                      conn->bits.ipv6_ip ? "]" : "");
 3164|      0|    if(!hostname_to_match)
 3165|      0|      return CURLE_OUT_OF_MEMORY;
 3166|      0|    hostname_to_match_len = strlen(hostname_to_match);
 3167|      0|    host_match = strncasecompare(ptr, hostname_to_match,
 3168|      0|                                 hostname_to_match_len);
 3169|      0|    free(hostname_to_match);
 3170|      0|    ptr += hostname_to_match_len;
 3171|       |
 3172|      0|    host_match = host_match && *ptr == ':';
 3173|      0|    ptr++;
 3174|      0|  }
 3175|       |
 3176|  2.35k|  if(host_match) {
 3177|  2.35k|    if(*ptr == ':') {
 3178|       |      /* an empty port always matches */
 3179|  2.35k|      port_match = TRUE;
 3180|  2.35k|      ptr++;
 3181|  2.35k|    }
 3182|      0|    else {
 3183|       |      /* check whether the URL's port matches */
 3184|      0|      char *ptr_next = strchr(ptr, ':');
 3185|      0|      if(ptr_next) {
 3186|      0|        char *endp = NULL;
 3187|      0|        long port_to_match = strtol(ptr, &endp, 10);
 3188|      0|        if((endp == ptr_next) && (port_to_match == conn->remote_port)) {
 3189|      0|          port_match = TRUE;
 3190|      0|          ptr = ptr_next + 1;
 3191|      0|        }
 3192|      0|      }
 3193|      0|    }
 3194|  2.35k|  }
 3195|       |
 3196|  2.35k|  if(host_match && port_match) {
 3197|       |    /* parse the hostname and port to connect to */
 3198|  2.35k|    result = parse_connect_to_host_port(data, ptr, host_result, port_result);
 3199|  2.35k|  }
 3200|       |
 3201|  2.35k|  return result;
 3202|  2.35k|}
url.c:parse_connect_to_host_port:
 3039|  2.35k|{
 3040|  2.35k|  char *host_dup;
 3041|  2.35k|  char *hostptr;
 3042|  2.35k|  char *host_portno;
 3043|  2.35k|  char *portptr;
 3044|  2.35k|  int port = -1;
 3045|  2.35k|  CURLcode result = CURLE_OK;
 3046|       |
 3047|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
 3048|       |  (void) data;
 3049|       |#endif
 3050|       |
 3051|  2.35k|  *hostname_result = NULL;
 3052|  2.35k|  *port_result = -1;
 3053|       |
 3054|  2.35k|  if(!host || !*host)
 3055|      0|    return CURLE_OK;
 3056|       |
 3057|  2.35k|  host_dup = strdup(host);
 3058|  2.35k|  if(!host_dup)
 3059|      0|    return CURLE_OUT_OF_MEMORY;
 3060|       |
 3061|  2.35k|  hostptr = host_dup;
 3062|       |
 3063|       |  /* start scanning for port number at this point */
 3064|  2.35k|  portptr = hostptr;
 3065|       |
 3066|       |  /* detect and extract RFC6874-style IPv6-addresses */
 3067|  2.35k|  if(*hostptr == '[') {
 3068|      0|#ifdef ENABLE_IPV6
 3069|      0|    char *ptr = ++hostptr; /* advance beyond the initial bracket */
 3070|      0|    while(*ptr && (ISXDIGIT(*ptr) || (*ptr == ':') || (*ptr == '.')))
 3071|      0|      ptr++;
 3072|      0|    if(*ptr == '%') {
 3073|       |      /* There might be a zone identifier */
 3074|      0|      if(strncmp("%25", ptr, 3))
 3075|      0|        infof(data, "Please URL encode %% as %%25, see RFC 6874.");
 3076|      0|      ptr++;
 3077|       |      /* Allow unreserved characters as defined in RFC 3986 */
 3078|      0|      while(*ptr && (ISALPHA(*ptr) || ISXDIGIT(*ptr) || (*ptr == '-') ||
 3079|      0|                     (*ptr == '.') || (*ptr == '_') || (*ptr == '~')))
 3080|      0|        ptr++;
 3081|      0|    }
 3082|      0|    if(*ptr == ']')
 3083|       |      /* yeps, it ended nicely with a bracket as well */
 3084|      0|      *ptr++ = '\0';
 3085|      0|    else
 3086|      0|      infof(data, "Invalid IPv6 address format");
 3087|      0|    portptr = ptr;
 3088|       |    /* Note that if this didn't end with a bracket, we still advanced the
 3089|       |     * hostptr first, but I can't see anything wrong with that as no host
 3090|       |     * name nor a numeric can legally start with a bracket.
 3091|       |     */
 3092|       |#else
 3093|       |    failf(data, "Use of IPv6 in *_CONNECT_TO without IPv6 support built-in!");
 3094|       |    result = CURLE_NOT_BUILT_IN;
 3095|       |    goto error;
 3096|       |#endif
 3097|      0|  }
 3098|       |
 3099|       |  /* Get port number off server.com:1080 */
 3100|  2.35k|  host_portno = strchr(portptr, ':');
 3101|  2.35k|  if(host_portno) {
 3102|  2.35k|    char *endp = NULL;
 3103|  2.35k|    *host_portno = '\0'; /* cut off number from host name */
 3104|  2.35k|    host_portno++;
 3105|  2.35k|    if(*host_portno) {
 3106|      0|      long portparse = strtol(host_portno, &endp, 10);
 3107|      0|      if((endp && *endp) || (portparse < 0) || (portparse > 65535)) {
 3108|      0|        failf(data, "No valid port number in connect to host string (%s)",
 3109|      0|              host_portno);
 3110|      0|        result = CURLE_SETOPT_OPTION_SYNTAX;
 3111|      0|        goto error;
 3112|      0|      }
 3113|      0|      else
 3114|      0|        port = (int)portparse; /* we know it will fit */
 3115|      0|    }
 3116|  2.35k|  }
 3117|       |
 3118|       |  /* now, clone the cleaned host name */
 3119|  2.35k|  if(hostptr) {
 3120|  2.35k|    *hostname_result = strdup(hostptr);
 3121|  2.35k|    if(!*hostname_result) {
 3122|      0|      result = CURLE_OUT_OF_MEMORY;
 3123|      0|      goto error;
 3124|      0|    }
 3125|  2.35k|  }
 3126|       |
 3127|  2.35k|  *port_result = port;
 3128|       |
 3129|  2.35k|  error:
 3130|  2.35k|  free(host_dup);
 3131|  2.35k|  return result;
 3132|  2.35k|}
url.c:setup_connection_internals:
 2174|  2.35k|{
 2175|  2.35k|  const struct Curl_handler *p;
 2176|  2.35k|  CURLcode result;
 2177|       |
 2178|       |  /* Perform setup complement if some. */
 2179|  2.35k|  p = conn->handler;
 2180|       |
 2181|  2.35k|  if(p->setup_connection) {
 2182|  2.35k|    result = (*p->setup_connection)(data, conn);
 2183|       |
 2184|  2.35k|    if(result)
 2185|      1|      return result;
 2186|       |
 2187|  2.35k|    p = conn->handler;              /* May have changed. */
 2188|  2.35k|  }
 2189|       |
 2190|  2.35k|  if(conn->port < 0)
 2191|       |    /* we check for -1 here since if proxy was detected already, this
 2192|       |       was very likely already set to the proxy port */
 2193|      0|    conn->port = p->defport;
 2194|       |
 2195|  2.35k|  return CURLE_OK;
 2196|  2.35k|}
url.c:setup_range:
 2136|  2.35k|{
 2137|  2.35k|  struct UrlState *s = &data->state;
 2138|  2.35k|  s->resume_from = data->set.set_resume_from;
 2139|  2.35k|  if(s->resume_from || data->set.str[STRING_SET_RANGE]) {
 2140|     27|    if(s->rangestringalloc)
 2141|     10|      free(s->range);
 2142|       |
 2143|     27|    if(s->resume_from)
 2144|      0|      s->range = aprintf("%" CURL_FORMAT_CURL_OFF_T "-", s->resume_from);
 2145|     27|    else
 2146|     27|      s->range = strdup(data->set.str[STRING_SET_RANGE]);
 2147|       |
 2148|     27|    s->rangestringalloc = (s->range) ? TRUE : FALSE;
 2149|       |
 2150|     27|    if(!s->range)
 2151|      0|      return CURLE_OUT_OF_MEMORY;
 2152|       |
 2153|       |    /* tell ourselves to fetch this range */
 2154|     27|    s->use_range = TRUE;        /* enable range download */
 2155|     27|  }
 2156|  2.33k|  else
 2157|  2.33k|    s->use_range = FALSE; /* disable range download */
 2158|       |
 2159|  2.35k|  return CURLE_OK;
 2160|  2.35k|}
url.c:prune_dead_connections:
 1077|  2.35k|{
 1078|  2.35k|  struct curltime now = Curl_now();
 1079|  2.35k|  timediff_t elapsed;
 1080|       |
 1081|  2.35k|  DEBUGASSERT(!data->conn); /* no connection */
 1082|  2.35k|  CONNCACHE_LOCK(data);
 1083|  2.35k|  elapsed =
 1084|  2.35k|    Curl_timediff(now, data->state.conn_cache->last_cleanup);
 1085|  2.35k|  CONNCACHE_UNLOCK(data);
 1086|       |
 1087|  2.35k|  if(elapsed >= 1000L) {
 1088|  2.10k|    struct prunedead prune;
 1089|  2.10k|    prune.data = data;
 1090|  2.10k|    prune.extracted = NULL;
 1091|  2.10k|    while(Curl_conncache_foreach(data, data->state.conn_cache, &prune,
 1092|  2.10k|                                 call_extract_if_dead)) {
 1093|       |      /* unlocked */
 1094|       |
 1095|       |      /* remove connection from cache */
 1096|      0|      Curl_conncache_remove_conn(data, prune.extracted, TRUE);
 1097|       |
 1098|       |      /* disconnect it */
 1099|      0|      (void)Curl_disconnect(data, prune.extracted, TRUE);
 1100|      0|    }
 1101|  2.10k|    CONNCACHE_LOCK(data);
 1102|  2.10k|    data->state.conn_cache->last_cleanup = now;
 1103|  2.10k|    CONNCACHE_UNLOCK(data);
 1104|  2.10k|  }
 1105|  2.35k|}
url.c:extract_if_dead:
 1010|    133|{
 1011|    133|  if(!CONN_INUSE(conn)) {
 1012|       |    /* The check for a dead socket makes sense only if the connection isn't in
 1013|       |       use */
 1014|    133|    bool dead;
 1015|    133|    struct curltime now = Curl_now();
 1016|    133|    if(conn_maxage(data, conn, now)) {
 1017|       |      /* avoid check if already too old */
 1018|      0|      dead = TRUE;
 1019|      0|    }
 1020|    133|    else if(conn->handler->connection_check) {
 1021|       |      /* The protocol has a special method for checking the state of the
 1022|       |         connection. Use it to check if the connection is dead. */
 1023|      0|      unsigned int state;
 1024|       |
 1025|       |      /* briefly attach the connection to this transfer for the purpose of
 1026|       |         checking it */
 1027|      0|      Curl_attach_connnection(data, conn);
 1028|       |
 1029|      0|      state = conn->handler->connection_check(data, conn, CONNCHECK_ISDEAD);
 1030|      0|      dead = (state & CONNRESULT_DEAD);
 1031|       |      /* detach the connection again */
 1032|      0|      Curl_detach_connnection(data);
 1033|       |
 1034|      0|    }
 1035|    133|    else {
 1036|       |      /* Use the general method for determining the death of a connection */
 1037|    133|      dead = SocketIsDead(conn->sock[FIRSTSOCKET]);
 1038|    133|    }
 1039|       |
 1040|    133|    if(dead) {
 1041|    132|      infof(data, "Connection %ld seems to be dead!", conn->connection_id);
 1042|    132|      Curl_conncache_remove_conn(data, conn, FALSE);
 1043|    132|      return TRUE;
 1044|    132|    }
 1045|    133|  }
 1046|      1|  return FALSE;
 1047|    133|}
url.c:conn_maxage:
  973|    133|{
  974|    133|  timediff_t idletime, lifetime;
  975|       |
  976|    133|  idletime = Curl_timediff(now, conn->lastused);
  977|    133|  idletime /= 1000; /* integer seconds is fine */
  978|       |
  979|    133|  if(idletime > data->set.maxage_conn) {
  980|      0|    infof(data, "Too old connection (%ld seconds idle), disconnect it",
  981|      0|          idletime);
  982|      0|    return TRUE;
  983|      0|  }
  984|       |
  985|    133|  lifetime = Curl_timediff(now, conn->created);
  986|    133|  lifetime /= 1000; /* integer seconds is fine */
  987|       |
  988|    133|  if(data->set.maxlifetime_conn && lifetime > data->set.maxlifetime_conn) {
  989|      0|    infof(data,
  990|      0|          "Too old connection (%ld seconds since creation), disconnect it",
  991|      0|          lifetime);
  992|      0|    return TRUE;
  993|      0|  }
  994|       |
  995|       |
  996|    133|  return FALSE;
  997|    133|}
url.c:SocketIsDead:
  886|    133|{
  887|    133|  int sval;
  888|    133|  bool ret_val = TRUE;
  889|       |
  890|    133|  sval = SOCKET_READABLE(sock, 0);
  891|    133|  if(sval == 0)
  892|       |    /* timeout */
  893|      1|    ret_val = FALSE;
  894|       |
  895|    133|  return ret_val;
  896|    133|}
url.c:ConnectionExists:
 1124|  2.35k|{
 1125|  2.35k|  struct connectdata *check;
 1126|  2.35k|  struct connectdata *chosen = 0;
 1127|  2.35k|  bool foundPendingCandidate = FALSE;
 1128|  2.35k|  bool canmultiplex = IsMultiplexingPossible(data, needle);
 1129|  2.35k|  struct connectbundle *bundle;
 1130|  2.35k|  const char *hostbundle;
 1131|       |
 1132|  2.35k|#ifdef USE_NTLM
 1133|  2.35k|  bool wantNTLMhttp = ((data->state.authhost.want &
 1134|  2.35k|                        (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1135|  2.35k|                       (needle->handler->protocol & PROTO_FAMILY_HTTP));
 1136|  2.35k|#ifndef CURL_DISABLE_PROXY
 1137|  2.35k|  bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&
 1138|  2.35k|                            ((data->state.authproxy.want &
 1139|      0|                              (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1140|      0|                             (needle->handler->protocol & PROTO_FAMILY_HTTP)));
 1141|       |#else
 1142|       |  bool wantProxyNTLMhttp = FALSE;
 1143|       |#endif
 1144|  2.35k|#endif
 1145|       |
 1146|  2.35k|  *force_reuse = FALSE;
 1147|  2.35k|  *waitpipe = FALSE;
 1148|       |
 1149|       |  /* Look up the bundle with all the connections to this particular host.
 1150|       |     Locks the connection cache, beware of early returns! */
 1151|  2.35k|  bundle = Curl_conncache_find_bundle(data, needle, data->state.conn_cache,
 1152|  2.35k|                                      &hostbundle);
 1153|  2.35k|  if(bundle) {
 1154|       |    /* Max pipe length is zero (unlimited) for multiplexed connections */
 1155|    133|    struct Curl_llist_element *curr;
 1156|       |
 1157|    133|    infof(data, "Found bundle for host %s: %p [%s]",
 1158|    133|          hostbundle, (void *)bundle, (bundle->multiuse == BUNDLE_MULTIPLEX ?
 1159|    127|                                       "can multiplex" : "serially"));
 1160|       |
 1161|       |    /* We can't multiplex if we don't know anything about the server */
 1162|    133|    if(canmultiplex) {
 1163|    133|      if(bundle->multiuse == BUNDLE_UNKNOWN) {
 1164|      0|        if(data->set.pipewait) {
 1165|      0|          infof(data, "Server doesn't support multiplex yet, wait");
 1166|      0|          *waitpipe = TRUE;
 1167|      0|          CONNCACHE_UNLOCK(data);
 1168|      0|          return FALSE; /* no re-use */
 1169|      0|        }
 1170|       |
 1171|      0|        infof(data, "Server doesn't support multiplex (yet)");
 1172|      0|        canmultiplex = FALSE;
 1173|      0|      }
 1174|    133|      if((bundle->multiuse == BUNDLE_MULTIPLEX) &&
 1175|    133|         !Curl_multiplex_wanted(data->multi)) {
 1176|      0|        infof(data, "Could multiplex, but not asked to!");
 1177|      0|        canmultiplex = FALSE;
 1178|      0|      }
 1179|    133|      if(bundle->multiuse == BUNDLE_NO_MULTIUSE) {
 1180|    127|        infof(data, "Can not multiplex, even if we wanted to!");
 1181|    127|        canmultiplex = FALSE;
 1182|    127|      }
 1183|    133|    }
 1184|       |
 1185|    133|    curr = bundle->conn_list.head;
 1186|    266|    while(curr) {
 1187|    133|      bool match = FALSE;
 1188|    133|      size_t multiplexed = 0;
 1189|       |
 1190|       |      /*
 1191|       |       * Note that if we use a HTTP proxy in normal mode (no tunneling), we
 1192|       |       * check connections to that proxy and not to the actual remote server.
 1193|       |       */
 1194|    133|      check = curr->ptr;
 1195|    133|      curr = curr->next;
 1196|       |
 1197|    133|      if(check->bits.connect_only || check->bits.close)
 1198|       |        /* connect-only or to-be-closed connections will not be reused */
 1199|      0|        continue;
 1200|       |
 1201|    133|      if(extract_if_dead(check, data)) {
 1202|       |        /* disconnect it */
 1203|    132|        (void)Curl_disconnect(data, check, TRUE);
 1204|    132|        continue;
 1205|    132|      }
 1206|       |
 1207|      1|      if(data->set.ipver != CURL_IPRESOLVE_WHATEVER
 1208|      1|          && data->set.ipver != check->ip_version) {
 1209|       |        /* skip because the connection is not via the requested IP version */
 1210|      0|        continue;
 1211|      0|      }
 1212|       |
 1213|      1|      if(bundle->multiuse == BUNDLE_MULTIPLEX)
 1214|      0|        multiplexed = CONN_INUSE(check);
 1215|       |
 1216|      1|      if(!canmultiplex) {
 1217|      1|        if(multiplexed) {
 1218|       |          /* can only happen within multi handles, and means that another easy
 1219|       |             handle is using this connection */
 1220|      0|          continue;
 1221|      0|        }
 1222|       |
 1223|      1|        if(Curl_resolver_asynch()) {
 1224|       |          /* primary_ip[0] is NUL only if the resolving of the name hasn't
 1225|       |             completed yet and until then we don't re-use this connection */
 1226|      1|          if(!check->primary_ip[0]) {
 1227|      1|            infof(data,
 1228|      1|                  "Connection #%ld is still name resolving, can't reuse",
 1229|      1|                  check->connection_id);
 1230|      1|            continue;
 1231|      1|          }
 1232|      1|        }
 1233|       |
 1234|      0|        if(check->sock[FIRSTSOCKET] == CURL_SOCKET_BAD) {
 1235|      0|          foundPendingCandidate = TRUE;
 1236|       |          /* Don't pick a connection that hasn't connected yet */
 1237|      0|          infof(data, "Connection #%ld isn't open enough, can't reuse",
 1238|      0|                check->connection_id);
 1239|      0|          continue;
 1240|      0|        }
 1241|      0|      }
 1242|       |
 1243|      0|#ifdef USE_UNIX_SOCKETS
 1244|      0|      if(needle->unix_domain_socket) {
 1245|      0|        if(!check->unix_domain_socket)
 1246|      0|          continue;
 1247|      0|        if(strcmp(needle->unix_domain_socket, check->unix_domain_socket))
 1248|      0|          continue;
 1249|      0|        if(needle->bits.abstract_unix_socket !=
 1250|      0|           check->bits.abstract_unix_socket)
 1251|      0|          continue;
 1252|      0|      }
 1253|      0|      else if(check->unix_domain_socket)
 1254|      0|        continue;
 1255|      0|#endif
 1256|       |
 1257|      0|      if((needle->handler->flags&PROTOPT_SSL) !=
 1258|      0|         (check->handler->flags&PROTOPT_SSL))
 1259|       |        /* don't do mixed SSL and non-SSL connections */
 1260|      0|        if(get_protocol_family(check->handler) !=
 1261|      0|           needle->handler->protocol || !check->bits.tls_upgraded)
 1262|       |          /* except protocols that have been upgraded via TLS */
 1263|      0|          continue;
 1264|       |
 1265|      0|#ifndef CURL_DISABLE_PROXY
 1266|      0|      if(needle->bits.httpproxy != check->bits.httpproxy ||
 1267|      0|         needle->bits.socksproxy != check->bits.socksproxy)
 1268|      0|        continue;
 1269|       |
 1270|      0|      if(needle->bits.socksproxy &&
 1271|      0|        !socks_proxy_info_matches(&needle->socks_proxy,
 1272|      0|                                  &check->socks_proxy))
 1273|      0|        continue;
 1274|      0|#endif
 1275|      0|      if(needle->bits.conn_to_host != check->bits.conn_to_host)
 1276|       |        /* don't mix connections that use the "connect to host" feature and
 1277|       |         * connections that don't use this feature */
 1278|      0|        continue;
 1279|       |
 1280|      0|      if(needle->bits.conn_to_port != check->bits.conn_to_port)
 1281|       |        /* don't mix connections that use the "connect to port" feature and
 1282|       |         * connections that don't use this feature */
 1283|      0|        continue;
 1284|       |
 1285|      0|#ifndef CURL_DISABLE_PROXY
 1286|      0|      if(needle->bits.httpproxy) {
 1287|      0|        if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))
 1288|      0|          continue;
 1289|       |
 1290|      0|        if(needle->bits.tunnel_proxy != check->bits.tunnel_proxy)
 1291|      0|          continue;
 1292|       |
 1293|      0|        if(needle->http_proxy.proxytype == CURLPROXY_HTTPS) {
 1294|       |          /* use https proxy */
 1295|      0|          if(needle->handler->flags&PROTOPT_SSL) {
 1296|       |            /* use double layer ssl */
 1297|      0|            if(!Curl_ssl_config_matches(&needle->proxy_ssl_config,
 1298|      0|                                        &check->proxy_ssl_config))
 1299|      0|              continue;
 1300|      0|            if(check->proxy_ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1301|      0|              continue;
 1302|      0|          }
 1303|      0|          else {
 1304|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1305|      0|                                        &check->ssl_config))
 1306|      0|              continue;
 1307|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1308|      0|              continue;
 1309|      0|          }
 1310|      0|        }
 1311|      0|      }
 1312|      0|#endif
 1313|       |
 1314|      0|      if(!canmultiplex && CONN_INUSE(check))
 1315|       |        /* this request can't be multiplexed but the checked connection is
 1316|       |           already in use so we skip it */
 1317|      0|        continue;
 1318|       |
 1319|      0|      if(CONN_INUSE(check)) {
 1320|       |        /* Subject for multiplex use if 'checks' belongs to the same multi
 1321|       |           handle as 'data' is. */
 1322|      0|        struct Curl_llist_element *e = check->easyq.head;
 1323|      0|        struct Curl_easy *entry = e->ptr;
 1324|      0|        if(entry->multi != data->multi)
 1325|      0|          continue;
 1326|      0|      }
 1327|       |
 1328|      0|      if(needle->localdev || needle->localport) {
 1329|       |        /* If we are bound to a specific local end (IP+port), we must not
 1330|       |           re-use a random other one, although if we didn't ask for a
 1331|       |           particular one we can reuse one that was bound.
 1332|       |
 1333|       |           This comparison is a bit rough and too strict. Since the input
 1334|       |           parameters can be specified in numerous ways and still end up the
 1335|       |           same it would take a lot of processing to make it really accurate.
 1336|       |           Instead, this matching will assume that re-uses of bound connections
 1337|       |           will most likely also re-use the exact same binding parameters and
 1338|       |           missing out a few edge cases shouldn't hurt anyone very much.
 1339|       |        */
 1340|      0|        if((check->localport != needle->localport) ||
 1341|      0|           (check->localportrange != needle->localportrange) ||
 1342|      0|           (needle->localdev &&
 1343|      0|            (!check->localdev || strcmp(check->localdev, needle->localdev))))
 1344|      0|          continue;
 1345|      0|      }
 1346|       |
 1347|      0|      if(!(needle->handler->flags & PROTOPT_CREDSPERREQUEST)) {
 1348|       |        /* This protocol requires credentials per connection,
 1349|       |           so verify that we're using the same name and password as well */
 1350|      0|        if(strcmp(needle->user, check->user) ||
 1351|      0|           strcmp(needle->passwd, check->passwd)) {
 1352|       |          /* one of them was different */
 1353|      0|          continue;
 1354|      0|        }
 1355|      0|      }
 1356|       |
 1357|       |      /* If multiplexing isn't enabled on the h2 connection and h1 is
 1358|       |         explicitly requested, handle it: */
 1359|      0|      if((needle->handler->protocol & PROTO_FAMILY_HTTP) &&
 1360|      0|         (check->httpversion >= 20) &&
 1361|      0|         (data->state.httpwant < CURL_HTTP_VERSION_2_0))
 1362|      0|        continue;
 1363|       |
 1364|      0|      if((needle->handler->flags&PROTOPT_SSL)
 1365|      0|#ifndef CURL_DISABLE_PROXY
 1366|      0|         || !needle->bits.httpproxy || needle->bits.tunnel_proxy
 1367|      0|#endif
 1368|      0|        ) {
 1369|       |        /* The requested connection does not use a HTTP proxy or it uses SSL or
 1370|       |           it is a non-SSL protocol tunneled or it is a non-SSL protocol which
 1371|       |           is allowed to be upgraded via TLS */
 1372|       |
 1373|      0|        if((strcasecompare(needle->handler->scheme, check->handler->scheme) ||
 1374|      0|            (get_protocol_family(check->handler) ==
 1375|      0|             needle->handler->protocol && check->bits.tls_upgraded)) &&
 1376|      0|           (!needle->bits.conn_to_host || strcasecompare(
 1377|      0|            needle->conn_to_host.name, check->conn_to_host.name)) &&
 1378|      0|           (!needle->bits.conn_to_port ||
 1379|      0|             needle->conn_to_port == check->conn_to_port) &&
 1380|      0|           strcasecompare(needle->host.name, check->host.name) &&
 1381|      0|           needle->remote_port == check->remote_port) {
 1382|       |          /* The schemes match or the protocol family is the same and the
 1383|       |             previous connection was TLS upgraded, and the hostname and host
 1384|       |             port match */
 1385|      0|          if(needle->handler->flags & PROTOPT_SSL) {
 1386|       |            /* This is a SSL connection so verify that we're using the same
 1387|       |               SSL options as well */
 1388|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1389|      0|                                        &check->ssl_config)) {
 1390|      0|              DEBUGF(infof(data,
 1391|      0|                           "Connection #%ld has different SSL parameters, "
 1392|      0|                           "can't reuse",
 1393|      0|                           check->connection_id));
 1394|      0|              continue;
 1395|      0|            }
 1396|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete) {
 1397|      0|              foundPendingCandidate = TRUE;
 1398|      0|              DEBUGF(infof(data,
 1399|      0|                           "Connection #%ld has not started SSL connect, "
 1400|      0|                           "can't reuse",
 1401|      0|                           check->connection_id));
 1402|      0|              continue;
 1403|      0|            }
 1404|      0|          }
 1405|      0|          match = TRUE;
 1406|      0|        }
 1407|      0|      }
 1408|      0|      else {
 1409|       |        /* The requested connection is using the same HTTP proxy in normal
 1410|       |           mode (no tunneling) */
 1411|      0|        match = TRUE;
 1412|      0|      }
 1413|       |
 1414|      0|      if(match) {
 1415|      0|#if defined(USE_NTLM)
 1416|       |        /* If we are looking for an HTTP+NTLM connection, check if this is
 1417|       |           already authenticating with the right credentials. If not, keep
 1418|       |           looking so that we can reuse NTLM connections if
 1419|       |           possible. (Especially we must not reuse the same connection if
 1420|       |           partway through a handshake!) */
 1421|      0|        if(wantNTLMhttp) {
 1422|      0|          if(strcmp(needle->user, check->user) ||
 1423|      0|             strcmp(needle->passwd, check->passwd)) {
 1424|       |
 1425|       |            /* we prefer a credential match, but this is at least a connection
 1426|       |               that can be reused and "upgraded" to NTLM */
 1427|      0|            if(check->http_ntlm_state == NTLMSTATE_NONE)
 1428|      0|              chosen = check;
 1429|      0|            continue;
 1430|      0|          }
 1431|      0|        }
 1432|      0|        else if(check->http_ntlm_state != NTLMSTATE_NONE) {
 1433|       |          /* Connection is using NTLM auth but we don't want NTLM */
 1434|      0|          continue;
 1435|      0|        }
 1436|       |
 1437|      0|#ifndef CURL_DISABLE_PROXY
 1438|       |        /* Same for Proxy NTLM authentication */
 1439|      0|        if(wantProxyNTLMhttp) {
 1440|       |          /* Both check->http_proxy.user and check->http_proxy.passwd can be
 1441|       |           * NULL */
 1442|      0|          if(!check->http_proxy.user || !check->http_proxy.passwd)
 1443|      0|            continue;
 1444|       |
 1445|      0|          if(strcmp(needle->http_proxy.user, check->http_proxy.user) ||
 1446|      0|             strcmp(needle->http_proxy.passwd, check->http_proxy.passwd))
 1447|      0|            continue;
 1448|      0|        }
 1449|      0|        else if(check->proxy_ntlm_state != NTLMSTATE_NONE) {
 1450|       |          /* Proxy connection is using NTLM auth but we don't want NTLM */
 1451|      0|          continue;
 1452|      0|        }
 1453|      0|#endif
 1454|      0|        if(wantNTLMhttp || wantProxyNTLMhttp) {
 1455|       |          /* Credentials are already checked, we can use this connection */
 1456|      0|          chosen = check;
 1457|       |
 1458|      0|          if((wantNTLMhttp &&
 1459|      0|             (check->http_ntlm_state != NTLMSTATE_NONE)) ||
 1460|      0|              (wantProxyNTLMhttp &&
 1461|      0|               (check->proxy_ntlm_state != NTLMSTATE_NONE))) {
 1462|       |            /* We must use this connection, no other */
 1463|      0|            *force_reuse = TRUE;
 1464|      0|            break;
 1465|      0|          }
 1466|       |
 1467|       |          /* Continue look up for a better connection */
 1468|      0|          continue;
 1469|      0|        }
 1470|      0|#endif
 1471|      0|        if(canmultiplex) {
 1472|       |          /* We can multiplex if we want to. Let's continue looking for
 1473|       |             the optimal connection to use. */
 1474|       |
 1475|      0|          if(!multiplexed) {
 1476|       |            /* We have the optimal connection. Let's stop looking. */
 1477|      0|            chosen = check;
 1478|      0|            break;
 1479|      0|          }
 1480|       |
 1481|      0|#ifdef USE_NGHTTP2
 1482|       |          /* If multiplexed, make sure we don't go over concurrency limit */
 1483|      0|          if(check->bits.multiplex) {
 1484|       |            /* Multiplexed connections can only be HTTP/2 for now */
 1485|      0|            struct http_conn *httpc = &check->proto.httpc;
 1486|      0|            if(multiplexed >= httpc->settings.max_concurrent_streams) {
 1487|      0|              infof(data, "MAX_CONCURRENT_STREAMS reached, skip (%zu)",
 1488|      0|                    multiplexed);
 1489|      0|              continue;
 1490|      0|            }
 1491|      0|            else if(multiplexed >=
 1492|      0|                    Curl_multi_max_concurrent_streams(data->multi)) {
 1493|      0|              infof(data, "client side MAX_CONCURRENT_STREAMS reached"
 1494|      0|                    ", skip (%zu)",
 1495|      0|                    multiplexed);
 1496|      0|              continue;
 1497|      0|            }
 1498|      0|          }
 1499|      0|#endif
 1500|       |          /* When not multiplexed, we have a match here! */
 1501|      0|          chosen = check;
 1502|      0|          infof(data, "Multiplexed connection found!");
 1503|      0|          break;
 1504|      0|        }
 1505|      0|        else {
 1506|       |          /* We have found a connection. Let's stop searching. */
 1507|      0|          chosen = check;
 1508|      0|          break;
 1509|      0|        }
 1510|      0|      }
 1511|      0|    }
 1512|    133|  }
 1513|       |
 1514|  2.35k|  if(chosen) {
 1515|       |    /* mark it as used before releasing the lock */
 1516|      0|    Curl_attach_connnection(data, chosen);
 1517|      0|    CONNCACHE_UNLOCK(data);
 1518|      0|    *usethis = chosen;
 1519|      0|    return TRUE; /* yes, we found one to use! */
 1520|      0|  }
 1521|  2.35k|  CONNCACHE_UNLOCK(data);
 1522|       |
 1523|  2.35k|  if(foundPendingCandidate && data->set.pipewait) {
 1524|      0|    infof(data,
 1525|      0|          "Found pending candidate for reuse and CURLOPT_PIPEWAIT is set");
 1526|      0|    *waitpipe = TRUE;
 1527|      0|  }
 1528|       |
 1529|  2.35k|  return FALSE; /* no matching connecting exists */
 1530|  2.35k|}
url.c:IsMultiplexingPossible:
  906|  2.35k|{
  907|  2.35k|  int avail = 0;
  908|       |
  909|       |  /* If a HTTP protocol and multiplexing is enabled */
  910|  2.35k|  if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  911|  2.35k|     (!conn->bits.protoconnstart || !conn->bits.close)) {
  912|       |
  913|  2.35k|    if(Curl_multiplex_wanted(handle->multi) &&
  914|  2.35k|       (handle->state.httpwant >= CURL_HTTP_VERSION_2))
  915|       |      /* allows HTTP/2 */
  916|  2.35k|      avail |= CURLPIPE_MULTIPLEX;
  917|  2.35k|  }
  918|  2.35k|  return avail;
  919|  2.35k|}
url.c:resolve_server:
 3332|  2.35k|{
 3333|  2.35k|  CURLcode result = CURLE_OK;
 3334|  2.35k|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 3335|       |
 3336|  2.35k|  DEBUGASSERT(conn);
 3337|  2.35k|  DEBUGASSERT(data);
 3338|       |  /*************************************************************
 3339|       |   * Resolve the name of the server or proxy
 3340|       |   *************************************************************/
 3341|  2.35k|  if(conn->bits.reuse)
 3342|       |    /* We're reusing the connection - no need to resolve anything, and
 3343|       |       idnconvert_hostname() was called already in create_conn() for the re-use
 3344|       |       case. */
 3345|      0|    *async = FALSE;
 3346|       |
 3347|  2.35k|  else {
 3348|       |    /* this is a fresh connect */
 3349|  2.35k|    int rc;
 3350|  2.35k|    struct Curl_dns_entry *hostaddr = NULL;
 3351|       |
 3352|  2.35k|#ifdef USE_UNIX_SOCKETS
 3353|  2.35k|    if(conn->unix_domain_socket) {
 3354|       |      /* Unix domain sockets are local. The host gets ignored, just use the
 3355|       |       * specified domain socket address. Do not cache "DNS entries". There is
 3356|       |       * no DNS involved and we already have the filesystem path available */
 3357|      0|      const char *path = conn->unix_domain_socket;
 3358|       |
 3359|      0|      hostaddr = calloc(1, sizeof(struct Curl_dns_entry));
 3360|      0|      if(!hostaddr)
 3361|      0|        result = CURLE_OUT_OF_MEMORY;
 3362|      0|      else {
 3363|      0|        bool longpath = FALSE;
 3364|      0|        hostaddr->addr = Curl_unix2addr(path, &longpath,
 3365|      0|                                        conn->bits.abstract_unix_socket);
 3366|      0|        if(hostaddr->addr)
 3367|      0|          hostaddr->inuse++;
 3368|      0|        else {
 3369|       |          /* Long paths are not supported for now */
 3370|      0|          if(longpath) {
 3371|      0|            failf(data, "Unix socket path too long: '%s'", path);
 3372|      0|            result = CURLE_COULDNT_RESOLVE_HOST;
 3373|      0|          }
 3374|      0|          else
 3375|      0|            result = CURLE_OUT_OF_MEMORY;
 3376|      0|          free(hostaddr);
 3377|      0|          hostaddr = NULL;
 3378|      0|        }
 3379|      0|      }
 3380|      0|    }
 3381|  2.35k|    else
 3382|  2.35k|#endif
 3383|       |
 3384|  2.35k|    if(!conn->bits.proxy) {
 3385|  2.35k|      struct hostname *connhost;
 3386|  2.35k|      if(conn->bits.conn_to_host)
 3387|  2.35k|        connhost = &conn->conn_to_host;
 3388|      4|      else
 3389|      4|        connhost = &conn->host;
 3390|       |
 3391|       |      /* If not connecting via a proxy, extract the port from the URL, if it is
 3392|       |       * there, thus overriding any defaults that might have been set above. */
 3393|  2.35k|      if(conn->bits.conn_to_port)
 3394|      0|        conn->port = conn->conn_to_port;
 3395|  2.35k|      else
 3396|  2.35k|        conn->port = conn->remote_port;
 3397|       |
 3398|       |      /* Resolve target host right on */
 3399|  2.35k|      conn->hostname_resolve = strdup(connhost->name);
 3400|  2.35k|      if(!conn->hostname_resolve)
 3401|      0|        return CURLE_OUT_OF_MEMORY;
 3402|  2.35k|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3403|  2.35k|                               &hostaddr, timeout_ms);
 3404|  2.35k|      if(rc == CURLRESOLV_PENDING)
 3405|      0|        *async = TRUE;
 3406|       |
 3407|  2.35k|      else if(rc == CURLRESOLV_TIMEDOUT) {
 3408|      0|        failf(data, "Failed to resolve host '%s' with timeout after %ld ms",
 3409|      0|              connhost->dispname,
 3410|      0|              Curl_timediff(Curl_now(), data->progress.t_startsingle));
 3411|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3412|      0|      }
 3413|  2.35k|      else if(!hostaddr) {
 3414|      0|        failf(data, "Could not resolve host: %s", connhost->dispname);
 3415|      0|        result = CURLE_COULDNT_RESOLVE_HOST;
 3416|       |        /* don't return yet, we need to clean up the timeout first */
 3417|      0|      }
 3418|  2.35k|    }
 3419|      0|#ifndef CURL_DISABLE_PROXY
 3420|      0|    else {
 3421|       |      /* This is a proxy that hasn't been resolved yet. */
 3422|       |
 3423|      0|      struct hostname * const host = conn->bits.socksproxy ?
 3424|      0|        &conn->socks_proxy.host : &conn->http_proxy.host;
 3425|       |
 3426|       |      /* resolve proxy */
 3427|      0|      conn->hostname_resolve = strdup(host->name);
 3428|      0|      if(!conn->hostname_resolve)
 3429|      0|        return CURLE_OUT_OF_MEMORY;
 3430|      0|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3431|      0|                               &hostaddr, timeout_ms);
 3432|       |
 3433|      0|      if(rc == CURLRESOLV_PENDING)
 3434|      0|        *async = TRUE;
 3435|       |
 3436|      0|      else if(rc == CURLRESOLV_TIMEDOUT)
 3437|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3438|       |
 3439|      0|      else if(!hostaddr) {
 3440|      0|        failf(data, "Couldn't resolve proxy '%s'", host->dispname);
 3441|      0|        result = CURLE_COULDNT_RESOLVE_PROXY;
 3442|       |        /* don't return yet, we need to clean up the timeout first */
 3443|      0|      }
 3444|      0|    }
 3445|  2.35k|#endif
 3446|  2.35k|    DEBUGASSERT(conn->dns_entry == NULL);
 3447|  2.35k|    conn->dns_entry = hostaddr;
 3448|  2.35k|  }
 3449|       |
 3450|  2.35k|  return result;
 3451|  2.35k|}
url.c:strip_trailing_dot:
 1574|  4.71k|{
 1575|  4.71k|  size_t len;
 1576|  4.71k|  if(!host || !host->name)
 1577|      0|    return;
 1578|  4.71k|  len = strlen(host->name);
 1579|  4.71k|  if(len && (host->name[len-1] == '.'))
 1580|    134|    host->name[len-1] = 0;
 1581|  4.71k|}

Curl_is_absolute_url:
  236|  5.97k|{
  237|  5.97k|  size_t i;
  238|       |#ifdef WIN32
  239|       |  if(STARTS_WITH_DRIVE_PREFIX(url))
  240|       |    return FALSE;
  241|       |#endif
  242|  30.6k|  for(i = 0; i < buflen && url[i]; ++i) {
  243|  30.4k|    char s = url[i];
  244|  30.4k|    if((s == ':') && (url[i + 1] == '/')) {
  245|  4.51k|      if(buf)
  246|  2.39k|        buf[i] = 0;
  247|  4.51k|      return TRUE;
  248|  4.51k|    }
  249|       |    /* RFC 3986 3.1 explains:
  250|       |      scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  251|       |    */
  252|  25.9k|    else if(ISALNUM(s) || (s == '+') || (s == '-') || (s == '.') ) {
  253|  24.7k|      if(buf)
  254|  11.3k|        buf[i] = (char)TOLOWER(s);
  255|  24.7k|    }
  256|  1.25k|    else
  257|  1.25k|      break;
  258|  30.4k|  }
  259|  1.46k|  return FALSE;
  260|  5.97k|}
Curl_parse_port:
  500|  2.76k|{
  501|  2.76k|  char *portptr = NULL;
  502|  2.76k|  char endbracket;
  503|  2.76k|  int len;
  504|       |
  505|       |  /*
  506|       |   * Find the end of an IPv6 address, either on the ']' ending bracket or
  507|       |   * a percent-encoded zone index.
  508|       |   */
  509|  2.76k|  if(1 == sscanf(hostname, "[%*45[0123456789abcdefABCDEF:.]%c%n",
  510|  2.76k|                 &endbracket, &len)) {
  511|     53|    if(']' == endbracket)
  512|     44|      portptr = &hostname[len];
  513|      9|    else if('%' == endbracket) {
  514|      8|      int zonelen = len;
  515|      8|      if(1 == sscanf(hostname + zonelen, "%*[^]]%c%n", &endbracket, &len)) {
  516|      7|        if(']' != endbracket)
  517|      0|          return CURLUE_MALFORMED_INPUT;
  518|      7|        portptr = &hostname[--zonelen + len + 1];
  519|      7|      }
  520|      1|      else
  521|      1|        return CURLUE_MALFORMED_INPUT;
  522|      8|    }
  523|      1|    else
  524|      1|      return CURLUE_MALFORMED_INPUT;
  525|       |
  526|       |    /* this is a RFC2732-style specified IP-address */
  527|     51|    if(portptr && *portptr) {
  528|     17|      if(*portptr != ':')
  529|      1|        return CURLUE_MALFORMED_INPUT;
  530|     17|    }
  531|     34|    else
  532|     34|      portptr = NULL;
  533|     51|  }
  534|  2.70k|  else
  535|  2.70k|    portptr = strchr(hostname, ':');
  536|       |
  537|  2.75k|  if(portptr) {
  538|    930|    char *rest;
  539|    930|    long port;
  540|    930|    char portbuf[7];
  541|       |
  542|       |    /* Browser behavior adaptation. If there's a colon with no digits after,
  543|       |       just cut off the name there which makes us ignore the colon and just
  544|       |       use the default port. Firefox, Chrome and Safari all do that.
  545|       |
  546|       |       Don't do it if the URL has no scheme, to make something that looks like
  547|       |       a scheme not work!
  548|       |    */
  549|    930|    if(!portptr[1]) {
  550|     20|      *portptr = '\0';
  551|     20|      return has_scheme ? CURLUE_OK : CURLUE_BAD_PORT_NUMBER;
  552|     20|    }
  553|       |
  554|    910|    if(!ISDIGIT(portptr[1]))
  555|      2|      return CURLUE_BAD_PORT_NUMBER;
  556|       |
  557|    908|    port = strtol(portptr + 1, &rest, 10);  /* Port number must be decimal */
  558|       |
  559|    908|    if((port <= 0) || (port > 0xffff))
  560|       |      /* Single unix standard says port numbers are 16 bits long, but we don't
  561|       |         treat port zero as OK. */
  562|      3|      return CURLUE_BAD_PORT_NUMBER;
  563|       |
  564|    905|    if(rest[0])
  565|      3|      return CURLUE_BAD_PORT_NUMBER;
  566|       |
  567|    902|    *portptr++ = '\0'; /* cut off the name there */
  568|    902|    *rest = 0;
  569|       |    /* generate a new port number string to get rid of leading zeroes etc */
  570|    902|    msnprintf(portbuf, sizeof(portbuf), "%ld", port);
  571|    902|    u->portnum = port;
  572|    902|    u->port = strdup(portbuf);
  573|    902|    if(!u->port)
  574|      0|      return CURLUE_OUT_OF_MEMORY;
  575|    902|  }
  576|       |
  577|  2.73k|  return CURLUE_OK;
  578|  2.75k|}
curl_url:
 1117|  5.27k|{
 1118|  5.27k|  return calloc(sizeof(struct Curl_URL), 1);
 1119|  5.27k|}
curl_url_cleanup:
 1122|  7.11k|{
 1123|  7.11k|  if(u) {
 1124|  2.54k|    free_urlhandle(u);
 1125|  2.54k|    free(u);
 1126|  2.54k|  }
 1127|  7.11k|}
curl_url_get:
 1161|  22.1k|{
 1162|  22.1k|  char *ptr;
 1163|  22.1k|  CURLUcode ifmissing = CURLUE_UNKNOWN_PART;
 1164|  22.1k|  char portbuf[7];
 1165|  22.1k|  bool urldecode = (flags & CURLU_URLDECODE)?1:0;
 1166|  22.1k|  bool urlencode = (flags & CURLU_URLENCODE)?1:0;
 1167|  22.1k|  bool plusdecode = FALSE;
 1168|  22.1k|  (void)flags;
 1169|  22.1k|  if(!u)
 1170|      0|    return CURLUE_BAD_HANDLE;
 1171|  22.1k|  if(!part)
 1172|      0|    return CURLUE_BAD_PARTPOINTER;
 1173|  22.1k|  *part = NULL;
 1174|       |
 1175|  22.1k|  switch(what) {
 1176|  2.38k|  case CURLUPART_SCHEME:
 1177|  2.38k|    ptr = u->scheme;
 1178|  2.38k|    ifmissing = CURLUE_NO_SCHEME;
 1179|  2.38k|    urldecode = FALSE; /* never for schemes */
 1180|  2.38k|    break;
 1181|  2.09k|  case CURLUPART_USER:
 1182|  2.09k|    ptr = u->user;
 1183|  2.09k|    ifmissing = CURLUE_NO_USER;
 1184|  2.09k|    break;
 1185|  2.30k|  case CURLUPART_PASSWORD:
 1186|  2.30k|    ptr = u->password;
 1187|  2.30k|    ifmissing = CURLUE_NO_PASSWORD;
 1188|  2.30k|    break;
 1189|  2.35k|  case CURLUPART_OPTIONS:
 1190|  2.35k|    ptr = u->options;
 1191|  2.35k|    ifmissing = CURLUE_NO_OPTIONS;
 1192|  2.35k|    break;
 1193|  2.38k|  case CURLUPART_HOST:
 1194|  2.38k|    ptr = u->host;
 1195|  2.38k|    ifmissing = CURLUE_NO_HOST;
 1196|  2.38k|    break;
 1197|     33|  case CURLUPART_ZONEID:
 1198|     33|    ptr = u->zoneid;
 1199|     33|    break;
 1200|  2.35k|  case CURLUPART_PORT:
 1201|  2.35k|    ptr = u->port;
 1202|  2.35k|    ifmissing = CURLUE_NO_PORT;
 1203|  2.35k|    urldecode = FALSE; /* never for port */
 1204|  2.35k|    if(!ptr && (flags & CURLU_DEFAULT_PORT) && u->scheme) {
 1205|       |      /* there's no stored port number, but asked to deliver
 1206|       |         a default one for the scheme */
 1207|  1.59k|      const struct Curl_handler *h =
 1208|  1.59k|        Curl_builtin_scheme(u->scheme);
 1209|  1.59k|      if(h) {
 1210|  1.59k|        msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1211|  1.59k|        ptr = portbuf;
 1212|  1.59k|      }
 1213|  1.59k|    }
 1214|    762|    else if(ptr && u->scheme) {
 1215|       |      /* there is a stored port number, but ask to inhibit if
 1216|       |         it matches the default one for the scheme */
 1217|    762|      const struct Curl_handler *h =
 1218|    762|        Curl_builtin_scheme(u->scheme);
 1219|    762|      if(h && (h->defport == u->portnum) &&
 1220|    762|         (flags & CURLU_NO_DEFAULT_PORT))
 1221|      0|        ptr = NULL;
 1222|    762|    }
 1223|  2.35k|    break;
 1224|  2.35k|  case CURLUPART_PATH:
 1225|  2.35k|    ptr = u->path;
 1226|  2.35k|    if(!ptr) {
 1227|  1.15k|      ptr = u->path = strdup("/");
 1228|  1.15k|      if(!u->path)
 1229|      0|        return CURLUE_OUT_OF_MEMORY;
 1230|  1.15k|    }
 1231|  2.35k|    break;
 1232|  2.35k|  case CURLUPART_QUERY:
 1233|  2.35k|    ptr = u->query;
 1234|  2.35k|    ifmissing = CURLUE_NO_QUERY;
 1235|  2.35k|    plusdecode = urldecode;
 1236|  2.35k|    break;
 1237|      0|  case CURLUPART_FRAGMENT:
 1238|      0|    ptr = u->fragment;
 1239|      0|    ifmissing = CURLUE_NO_FRAGMENT;
 1240|      0|    break;
 1241|  3.46k|  case CURLUPART_URL: {
 1242|  3.46k|    char *url;
 1243|  3.46k|    char *scheme;
 1244|  3.46k|    char *options = u->options;
 1245|  3.46k|    char *port = u->port;
 1246|  3.46k|    char *allochost = NULL;
 1247|  3.46k|    if(u->scheme && strcasecompare("file", u->scheme)) {
 1248|      0|      url = aprintf("file://%s%s%s",
 1249|      0|                    u->path,
 1250|      0|                    u->fragment? "#": "",
 1251|      0|                    u->fragment? u->fragment : "");
 1252|      0|    }
 1253|  3.46k|    else if(!u->host)
 1254|    430|      return CURLUE_NO_HOST;
 1255|  3.03k|    else {
 1256|  3.03k|      const struct Curl_handler *h = NULL;
 1257|  3.03k|      if(u->scheme)
 1258|  3.03k|        scheme = u->scheme;
 1259|      0|      else if(flags & CURLU_DEFAULT_SCHEME)
 1260|      0|        scheme = (char *) DEFAULT_SCHEME;
 1261|      0|      else
 1262|      0|        return CURLUE_NO_SCHEME;
 1263|       |
 1264|  3.03k|      h = Curl_builtin_scheme(scheme);
 1265|  3.03k|      if(!port && (flags & CURLU_DEFAULT_PORT)) {
 1266|       |        /* there's no stored port number, but asked to deliver
 1267|       |           a default one for the scheme */
 1268|      0|        if(h) {
 1269|      0|          msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1270|      0|          port = portbuf;
 1271|      0|        }
 1272|      0|      }
 1273|  3.03k|      else if(port) {
 1274|       |        /* there is a stored port number, but asked to inhibit if it matches
 1275|       |           the default one for the scheme */
 1276|    994|        if(h && (h->defport == u->portnum) &&
 1277|    994|           (flags & CURLU_NO_DEFAULT_PORT))
 1278|      0|          port = NULL;
 1279|    994|      }
 1280|       |
 1281|  3.03k|      if(h && !(h->flags & PROTOPT_URLOPTIONS))
 1282|  3.00k|        options = NULL;
 1283|       |
 1284|  3.03k|      if(u->host[0] == '[') {
 1285|     62|        if(u->zoneid) {
 1286|       |          /* make it '[ host %25 zoneid ]' */
 1287|      5|          size_t hostlen = strlen(u->host);
 1288|      5|          size_t alen = hostlen + 3 + strlen(u->zoneid) + 1;
 1289|      5|          allochost = malloc(alen);
 1290|      5|          if(!allochost)
 1291|      0|            return CURLUE_OUT_OF_MEMORY;
 1292|      5|          memcpy(allochost, u->host, hostlen - 1);
 1293|      5|          msnprintf(&allochost[hostlen - 1], alen - hostlen + 1,
 1294|      5|                    "%%25%s]", u->zoneid);
 1295|      5|        }
 1296|     62|      }
 1297|  2.97k|      else if(urlencode) {
 1298|    192|        allochost = curl_easy_escape(NULL, u->host, 0);
 1299|    192|        if(!allochost)
 1300|      0|          return CURLUE_OUT_OF_MEMORY;
 1301|    192|      }
 1302|  2.78k|      else {
 1303|       |        /* only encode '%' in output host name */
 1304|  2.78k|        char *host = u->host;
 1305|  2.78k|        size_t pcount = 0;
 1306|       |        /* first, count number of percents present in the name */
 1307|  29.3k|        while(*host) {
 1308|  26.5k|          if(*host == '%')
 1309|    584|            pcount++;
 1310|  26.5k|          host++;
 1311|  26.5k|        }
 1312|       |        /* if there were percents, encode the host name */
 1313|  2.78k|        if(pcount) {
 1314|     70|          size_t hostlen = strlen(u->host);
 1315|     70|          size_t alen = hostlen + 2 * pcount + 1;
 1316|     70|          char *o = allochost = malloc(alen);
 1317|     70|          if(!allochost)
 1318|      0|            return CURLUE_OUT_OF_MEMORY;
 1319|       |
 1320|     70|          host = u->host;
 1321|  1.21k|          while(*host) {
 1322|  1.14k|            if(*host == '%') {
 1323|    584|              memcpy(o, "%25", 3);
 1324|    584|              o += 3;
 1325|    584|              host++;
 1326|    584|              continue;
 1327|    584|            }
 1328|    558|            *o++ = *host++;
 1329|    558|          }
 1330|     70|          *o = '\0';
 1331|     70|        }
 1332|  2.78k|      }
 1333|       |
 1334|  3.03k|      url = aprintf("%s://%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
 1335|  3.03k|                    scheme,
 1336|  3.03k|                    u->user ? u->user : "",
 1337|  3.03k|                    u->password ? ":": "",
 1338|  3.03k|                    u->password ? u->password : "",
 1339|  3.03k|                    options ? ";" : "",
 1340|  3.03k|                    options ? options : "",
 1341|  3.03k|                    (u->user || u->password || options) ? "@": "",
 1342|  3.03k|                    allochost ? allochost : u->host,
 1343|  3.03k|                    port ? ":": "",
 1344|  3.03k|                    port ? port : "",
 1345|  3.03k|                    (u->path && (u->path[0] != '/')) ? "/": "",
 1346|  3.03k|                    u->path ? u->path : "/",
 1347|  3.03k|                    (u->query && u->query[0]) ? "?": "",
 1348|  3.03k|                    (u->query && u->query[0]) ? u->query : "",
 1349|  3.03k|                    u->fragment? "#": "",
 1350|  3.03k|                    u->fragment? u->fragment : "");
 1351|  3.03k|      free(allochost);
 1352|  3.03k|    }
 1353|  3.03k|    if(!url)
 1354|      0|      return CURLUE_OUT_OF_MEMORY;
 1355|  3.03k|    *part = url;
 1356|  3.03k|    return CURLUE_OK;
 1357|  3.03k|  }
 1358|      0|  default:
 1359|      0|    ptr = NULL;
 1360|      0|    break;
 1361|  22.1k|  }
 1362|  18.6k|  if(ptr) {
 1363|  9.69k|    *part = strdup(ptr);
 1364|  9.69k|    if(!*part)
 1365|      0|      return CURLUE_OUT_OF_MEMORY;
 1366|  9.69k|    if(plusdecode) {
 1367|       |      /* convert + to space */
 1368|      0|      char *plus;
 1369|      0|      for(plus = *part; *plus; ++plus) {
 1370|      0|        if(*plus == '+')
 1371|      0|          *plus = ' ';
 1372|      0|      }
 1373|      0|    }
 1374|  9.69k|    if(urldecode) {
 1375|      0|      char *decoded;
 1376|      0|      size_t dlen;
 1377|       |      /* this unconditional rejection of control bytes is documented
 1378|       |         API behavior */
 1379|      0|      CURLcode res = Curl_urldecode(NULL, *part, 0, &decoded, &dlen,
 1380|      0|                                    REJECT_CTRL);
 1381|      0|      free(*part);
 1382|      0|      if(res) {
 1383|      0|        *part = NULL;
 1384|      0|        return CURLUE_URLDECODE;
 1385|      0|      }
 1386|      0|      *part = decoded;
 1387|      0|    }
 1388|  9.69k|    return CURLUE_OK;
 1389|  9.69k|  }
 1390|  8.94k|  else
 1391|  8.94k|    return ifmissing;
 1392|  18.6k|}
curl_url_set:
 1396|  3.24k|{
 1397|  3.24k|  char **storep = NULL;
 1398|  3.24k|  long port = 0;
 1399|  3.24k|  bool urlencode = (flags & CURLU_URLENCODE)? 1 : 0;
 1400|  3.24k|  bool plusencode = FALSE;
 1401|  3.24k|  bool urlskipslash = FALSE;
 1402|  3.24k|  bool appendquery = FALSE;
 1403|  3.24k|  bool equalsencode = FALSE;
 1404|       |
 1405|  3.24k|  if(!u)
 1406|      0|    return CURLUE_BAD_HANDLE;
 1407|  3.24k|  if(!part) {
 1408|       |    /* setting a part to NULL clears it */
 1409|      0|    switch(what) {
 1410|      0|    case CURLUPART_URL:
 1411|      0|      break;
 1412|      0|    case CURLUPART_SCHEME:
 1413|      0|      storep = &u->scheme;
 1414|      0|      break;
 1415|      0|    case CURLUPART_USER:
 1416|      0|      storep = &u->user;
 1417|      0|      break;
 1418|      0|    case CURLUPART_PASSWORD:
 1419|      0|      storep = &u->password;
 1420|      0|      break;
 1421|      0|    case CURLUPART_OPTIONS:
 1422|      0|      storep = &u->options;
 1423|      0|      break;
 1424|      0|    case CURLUPART_HOST:
 1425|      0|      storep = &u->host;
 1426|      0|      break;
 1427|      0|    case CURLUPART_ZONEID:
 1428|      0|      storep = &u->zoneid;
 1429|      0|      break;
 1430|      0|    case CURLUPART_PORT:
 1431|      0|      u->portnum = 0;
 1432|      0|      storep = &u->port;
 1433|      0|      break;
 1434|      0|    case CURLUPART_PATH:
 1435|      0|      storep = &u->path;
 1436|      0|      break;
 1437|      0|    case CURLUPART_QUERY:
 1438|      0|      storep = &u->query;
 1439|      0|      break;
 1440|      0|    case CURLUPART_FRAGMENT:
 1441|      0|      storep = &u->fragment;
 1442|      0|      break;
 1443|      0|    default:
 1444|      0|      return CURLUE_UNKNOWN_PART;
 1445|      0|    }
 1446|      0|    if(storep && *storep) {
 1447|      0|      Curl_safefree(*storep);
 1448|      0|    }
 1449|      0|    return CURLUE_OK;
 1450|      0|  }
 1451|       |
 1452|  3.24k|  switch(what) {
 1453|      0|  case CURLUPART_SCHEME:
 1454|      0|    if(strlen(part) > MAX_SCHEME_LEN)
 1455|       |      /* too long */
 1456|      0|      return CURLUE_MALFORMED_INPUT;
 1457|      0|    if(!(flags & CURLU_NON_SUPPORT_SCHEME) &&
 1458|       |       /* verify that it is a fine scheme */
 1459|      0|       !Curl_builtin_scheme(part))
 1460|      0|      return CURLUE_UNSUPPORTED_SCHEME;
 1461|      0|    storep = &u->scheme;
 1462|      0|    urlencode = FALSE; /* never */
 1463|      0|    break;
 1464|    344|  case CURLUPART_USER:
 1465|    344|    storep = &u->user;
 1466|    344|    break;
 1467|     71|  case CURLUPART_PASSWORD:
 1468|     71|    storep = &u->password;
 1469|     71|    break;
 1470|      0|  case CURLUPART_OPTIONS:
 1471|      0|    storep = &u->options;
 1472|      0|    break;
 1473|      0|  case CURLUPART_HOST: {
 1474|      0|    size_t len = strcspn(part, " \r\n");
 1475|      0|    if(strlen(part) != len)
 1476|       |      /* hostname with bad content */
 1477|      0|      return CURLUE_MALFORMED_INPUT;
 1478|      0|    storep = &u->host;
 1479|      0|    Curl_safefree(u->zoneid);
 1480|      0|    break;
 1481|      0|  }
 1482|      0|  case CURLUPART_ZONEID:
 1483|      0|    storep = &u->zoneid;
 1484|      0|    break;
 1485|      0|  case CURLUPART_PORT:
 1486|      0|  {
 1487|      0|    char *endp;
 1488|      0|    urlencode = FALSE; /* never */
 1489|      0|    port = strtol(part, &endp, 10);  /* Port number must be decimal */
 1490|      0|    if((port <= 0) || (port > 0xffff))
 1491|      0|      return CURLUE_BAD_PORT_NUMBER;
 1492|      0|    if(*endp)
 1493|       |      /* weirdly provided number, not good! */
 1494|      0|      return CURLUE_MALFORMED_INPUT;
 1495|      0|    storep = &u->port;
 1496|      0|  }
 1497|      0|  break;
 1498|      0|  case CURLUPART_PATH:
 1499|      0|    urlskipslash = TRUE;
 1500|      0|    storep = &u->path;
 1501|      0|    break;
 1502|      0|  case CURLUPART_QUERY:
 1503|      0|    plusencode = urlencode;
 1504|      0|    appendquery = (flags & CURLU_APPENDQUERY)?1:0;
 1505|      0|    equalsencode = appendquery;
 1506|      0|    storep = &u->query;
 1507|      0|    break;
 1508|      0|  case CURLUPART_FRAGMENT:
 1509|      0|    storep = &u->fragment;
 1510|      0|    break;
 1511|  2.82k|  case CURLUPART_URL: {
 1512|       |    /*
 1513|       |     * Allow a new URL to replace the existing (if any) contents.
 1514|       |     *
 1515|       |     * If the existing contents is enough for a URL, allow a relative URL to
 1516|       |     * replace it.
 1517|       |     */
 1518|  2.82k|    CURLUcode result;
 1519|  2.82k|    char *oldurl;
 1520|  2.82k|    char *redired_url;
 1521|  2.82k|    CURLU *handle2;
 1522|       |
 1523|  2.82k|    if(Curl_is_absolute_url(part, NULL, MAX_SCHEME_LEN + 1)) {
 1524|  2.09k|      handle2 = curl_url();
 1525|  2.09k|      if(!handle2)
 1526|      0|        return CURLUE_OUT_OF_MEMORY;
 1527|  2.09k|      result = parseurl(part, handle2, flags);
 1528|  2.09k|      if(!result)
 1529|  2.06k|        mv_urlhandle(handle2, u);
 1530|     28|      else
 1531|     28|        curl_url_cleanup(handle2);
 1532|  2.09k|      return result;
 1533|  2.09k|    }
 1534|       |    /* extract the full "old" URL to do the redirect on */
 1535|    732|    result = curl_url_get(u, CURLUPART_URL, &oldurl, flags);
 1536|    732|    if(result) {
 1537|       |      /* couldn't get the old URL, just use the new! */
 1538|    430|      handle2 = curl_url();
 1539|    430|      if(!handle2)
 1540|      0|        return CURLUE_OUT_OF_MEMORY;
 1541|    430|      result = parseurl(part, handle2, flags);
 1542|    430|      if(!result)
 1543|    398|        mv_urlhandle(handle2, u);
 1544|     32|      else
 1545|     32|        curl_url_cleanup(handle2);
 1546|    430|      return result;
 1547|    430|    }
 1548|       |
 1549|       |    /* apply the relative part to create a new URL */
 1550|    302|    redired_url = concat_url(oldurl, part);
 1551|    302|    free(oldurl);
 1552|    302|    if(!redired_url)
 1553|      0|      return CURLUE_OUT_OF_MEMORY;
 1554|       |
 1555|       |    /* now parse the new URL */
 1556|    302|    handle2 = curl_url();
 1557|    302|    if(!handle2) {
 1558|      0|      free(redired_url);
 1559|      0|      return CURLUE_OUT_OF_MEMORY;
 1560|      0|    }
 1561|    302|    result = parseurl(redired_url, handle2, flags);
 1562|    302|    free(redired_url);
 1563|    302|    if(!result)
 1564|    267|      mv_urlhandle(handle2, u);
 1565|     35|    else
 1566|     35|      curl_url_cleanup(handle2);
 1567|    302|    return result;
 1568|    302|  }
 1569|      0|  default:
 1570|      0|    return CURLUE_UNKNOWN_PART;
 1571|  3.24k|  }
 1572|    415|  DEBUGASSERT(storep);
 1573|    415|  {
 1574|    415|    const char *newp = part;
 1575|    415|    size_t nalloc = strlen(part);
 1576|       |
 1577|    415|    if(nalloc > CURL_MAX_INPUT_LENGTH)
 1578|       |      /* excessive input length */
 1579|      0|      return CURLUE_MALFORMED_INPUT;
 1580|       |
 1581|    415|    if(urlencode) {
 1582|    415|      const unsigned char *i;
 1583|    415|      char *o;
 1584|    415|      char *enc = malloc(nalloc * 3 + 1); /* for worst case! */
 1585|    415|      if(!enc)
 1586|      0|        return CURLUE_OUT_OF_MEMORY;
 1587|   103k|      for(i = (const unsigned char *)part, o = enc; *i; i++) {
 1588|   103k|        if((*i == ' ') && plusencode) {
 1589|      0|          *o = '+';
 1590|      0|          o++;
 1591|      0|        }
 1592|   103k|        else if(Curl_isunreserved(*i) ||
 1593|   103k|                ((*i == '/') && urlskipslash) ||
 1594|   103k|                ((*i == '=') && equalsencode)) {
 1595|  81.3k|          if((*i == '=') && equalsencode)
 1596|       |            /* only skip the first equals sign */
 1597|      0|            equalsencode = FALSE;
 1598|  81.3k|          *o = *i;
 1599|  81.3k|          o++;
 1600|  81.3k|        }
 1601|  21.7k|        else {
 1602|  21.7k|          msnprintf(o, 4, "%%%02x", *i);
 1603|  21.7k|          o += 3;
 1604|  21.7k|        }
 1605|   103k|      }
 1606|    415|      *o = 0; /* null-terminate */
 1607|    415|      newp = enc;
 1608|    415|    }
 1609|      0|    else {
 1610|      0|      char *p;
 1611|      0|      newp = strdup(part);
 1612|      0|      if(!newp)
 1613|      0|        return CURLUE_OUT_OF_MEMORY;
 1614|      0|      p = (char *)newp;
 1615|      0|      while(*p) {
 1616|       |        /* make sure percent encoded are lower case */
 1617|      0|        if((*p == '%') && ISXDIGIT(p[1]) && ISXDIGIT(p[2]) &&
 1618|      0|           (ISUPPER(p[1]) || ISUPPER(p[2]))) {
 1619|      0|          p[1] = (char)TOLOWER(p[1]);
 1620|      0|          p[2] = (char)TOLOWER(p[2]);
 1621|      0|          p += 3;
 1622|      0|        }
 1623|      0|        else
 1624|      0|          p++;
 1625|      0|      }
 1626|      0|    }
 1627|       |
 1628|    415|    if(appendquery) {
 1629|       |      /* Append the string onto the old query. Add a '&' separator if none is
 1630|       |         present at the end of the exsting query already */
 1631|      0|      size_t querylen = u->query ? strlen(u->query) : 0;
 1632|      0|      bool addamperand = querylen && (u->query[querylen -1] != '&');
 1633|      0|      if(querylen) {
 1634|      0|        size_t newplen = strlen(newp);
 1635|      0|        char *p = malloc(querylen + addamperand + newplen + 1);
 1636|      0|        if(!p) {
 1637|      0|          free((char *)newp);
 1638|      0|          return CURLUE_OUT_OF_MEMORY;
 1639|      0|        }
 1640|      0|        strcpy(p, u->query); /* original query */
 1641|      0|        if(addamperand)
 1642|      0|          p[querylen] = '&'; /* ampersand */
 1643|      0|        strcpy(&p[querylen + addamperand], newp); /* new suffix */
 1644|      0|        free((char *)newp);
 1645|      0|        free(*storep);
 1646|      0|        *storep = p;
 1647|      0|        return CURLUE_OK;
 1648|      0|      }
 1649|      0|    }
 1650|       |
 1651|    415|    if(what == CURLUPART_HOST) {
 1652|      0|      if(0 == strlen(newp) && (flags & CURLU_NO_AUTHORITY)) {
 1653|       |        /* Skip hostname check, it's allowed to be empty. */
 1654|      0|      }
 1655|      0|      else {
 1656|      0|        if(hostname_check(u, (char *)newp)) {
 1657|      0|          free((char *)newp);
 1658|      0|          return CURLUE_MALFORMED_INPUT;
 1659|      0|        }
 1660|      0|      }
 1661|      0|    }
 1662|       |
 1663|    415|    free(*storep);
 1664|    415|    *storep = (char *)newp;
 1665|    415|  }
 1666|       |  /* set after the string, to make it not assigned if the allocation above
 1667|       |     fails */
 1668|    415|  if(port)
 1669|      0|    u->portnum = port;
 1670|    415|  return CURLUE_OK;
 1671|    415|}
urlapi.c:free_urlhandle:
   74|  5.36k|{
   75|  5.36k|  free(u->scheme);
   76|  5.36k|  free(u->user);
   77|  5.36k|  free(u->password);
   78|  5.36k|  free(u->options);
   79|  5.36k|  free(u->host);
   80|  5.36k|  free(u->zoneid);
   81|  5.36k|  free(u->port);
   82|  5.36k|  free(u->path);
   83|  5.36k|  free(u->query);
   84|  5.36k|  free(u->fragment);
   85|  5.36k|  free(u->scratch);
   86|  5.36k|  free(u->temppath);
   87|  5.36k|}
urlapi.c:parseurl:
 1105|  2.82k|{
 1106|  2.82k|  CURLUcode result = seturl(url, u, flags);
 1107|  2.82k|  if(result) {
 1108|     95|    free_urlhandle(u);
 1109|     95|    memset(u, 0, sizeof(struct Curl_URL));
 1110|     95|  }
 1111|  2.82k|  return result;
 1112|  2.82k|}
urlapi.c:seturl:
  782|  2.82k|{
  783|  2.82k|  char *path;
  784|  2.82k|  bool path_alloced = FALSE;
  785|  2.82k|  bool uncpath = FALSE;
  786|  2.82k|  char *hostname;
  787|  2.82k|  char *query = NULL;
  788|  2.82k|  char *fragment = NULL;
  789|  2.82k|  CURLUcode result;
  790|  2.82k|  bool url_has_scheme = FALSE;
  791|  2.82k|  char schemebuf[MAX_SCHEME_LEN + 1];
  792|  2.82k|  const char *schemep = NULL;
  793|  2.82k|  size_t schemelen = 0;
  794|  2.82k|  size_t urllen;
  795|       |
  796|  2.82k|  DEBUGASSERT(url);
  797|       |
  798|       |  /*************************************************************
  799|       |   * Parse the URL.
  800|       |   ************************************************************/
  801|       |  /* allocate scratch area */
  802|  2.82k|  urllen = strlen(url);
  803|  2.82k|  if(urllen > CURL_MAX_INPUT_LENGTH)
  804|       |    /* excessive input length */
  805|      0|    return CURLUE_MALFORMED_INPUT;
  806|       |
  807|  2.82k|  path = u->scratch = malloc(urllen * 2 + 2);
  808|  2.82k|  if(!path)
  809|      0|    return CURLUE_OUT_OF_MEMORY;
  810|       |
  811|  2.82k|  hostname = &path[urllen + 1];
  812|  2.82k|  hostname[0] = 0;
  813|       |
  814|  2.82k|  if(Curl_is_absolute_url(url, schemebuf, sizeof(schemebuf))) {
  815|  2.39k|    url_has_scheme = TRUE;
  816|  2.39k|    schemelen = strlen(schemebuf);
  817|  2.39k|  }
  818|       |
  819|       |  /* handle the file: scheme */
  820|  2.82k|  if(url_has_scheme && strcasecompare(schemebuf, "file")) {
  821|       |    /* path has been allocated large enough to hold this */
  822|      0|    strcpy(path, &url[5]);
  823|       |
  824|      0|    u->scheme = strdup("file");
  825|      0|    if(!u->scheme)
  826|      0|      return CURLUE_OUT_OF_MEMORY;
  827|       |
  828|       |    /* Extra handling URLs with an authority component (i.e. that start with
  829|       |     * "file://")
  830|       |     *
  831|       |     * We allow omitted hostname (e.g. file:/<path>) -- valid according to
  832|       |     * RFC 8089, but not the (current) WHAT-WG URL spec.
  833|       |     */
  834|      0|    if(path[0] == '/' && path[1] == '/') {
  835|       |      /* swallow the two slashes */
  836|      0|      char *ptr = &path[2];
  837|       |
  838|       |      /*
  839|       |       * According to RFC 8089, a file: URL can be reliably dereferenced if:
  840|       |       *
  841|       |       *  o it has no/blank hostname, or
  842|       |       *
  843|       |       *  o the hostname matches "localhost" (case-insensitively), or
  844|       |       *
  845|       |       *  o the hostname is a FQDN that resolves to this machine, or
  846|       |       *
  847|       |       *  o it is an UNC String transformed to an URI (Windows only, RFC 8089
  848|       |       *    Appendix E.3).
  849|       |       *
  850|       |       * For brevity, we only consider URLs with empty, "localhost", or
  851|       |       * "127.0.0.1" hostnames as local, otherwise as an UNC String.
  852|       |       *
  853|       |       * Additionally, there is an exception for URLs with a Windows drive
  854|       |       * letter in the authority (which was accidentally omitted from RFC 8089
  855|       |       * Appendix E, but believe me, it was meant to be there. --MK)
  856|       |       */
  857|      0|      if(ptr[0] != '/' && !STARTS_WITH_URL_DRIVE_PREFIX(ptr)) {
  858|       |        /* the URL includes a host name, it must match "localhost" or
  859|       |           "127.0.0.1" to be valid */
  860|      0|        if(checkprefix("localhost/", ptr) ||
  861|      0|           checkprefix("127.0.0.1/", ptr)) {
  862|      0|          ptr += 9; /* now points to the slash after the host */
  863|      0|        }
  864|      0|        else {
  865|       |#if defined(WIN32)
  866|       |          size_t len;
  867|       |
  868|       |          /* the host name, NetBIOS computer name, can not contain disallowed
  869|       |             chars, and the delimiting slash character must be appended to the
  870|       |             host name */
  871|       |          path = strpbrk(ptr, "/\\:*?\"<>|");
  872|       |          if(!path || *path != '/')
  873|       |            return CURLUE_MALFORMED_INPUT;
  874|       |
  875|       |          len = path - ptr;
  876|       |          if(len) {
  877|       |            memcpy(hostname, ptr, len);
  878|       |            hostname[len] = 0;
  879|       |            uncpath = TRUE;
  880|       |          }
  881|       |
  882|       |          ptr -= 2; /* now points to the // before the host in UNC */
  883|       |#else
  884|       |          /* Invalid file://hostname/, expected localhost or 127.0.0.1 or
  885|       |             none */
  886|      0|          return CURLUE_MALFORMED_INPUT;
  887|      0|#endif
  888|      0|        }
  889|      0|      }
  890|       |
  891|      0|      path = ptr;
  892|      0|    }
  893|       |
  894|      0|    if(!uncpath)
  895|      0|        hostname = NULL; /* no host for file: URLs by default */
  896|       |
  897|      0|#if !defined(MSDOS) && !defined(WIN32) && !defined(__CYGWIN__)
  898|       |    /* Don't allow Windows drive letters when not in Windows.
  899|       |     * This catches both "file:/c:" and "file:c:" */
  900|      0|    if(('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) ||
  901|      0|       STARTS_WITH_URL_DRIVE_PREFIX(path)) {
  902|       |      /* File drive letters are only accepted in MSDOS/Windows */
  903|      0|      return CURLUE_MALFORMED_INPUT;
  904|      0|    }
  905|       |#else
  906|       |    /* If the path starts with a slash and a drive letter, ditch the slash */
  907|       |    if('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) {
  908|       |      /* This cannot be done with strcpy, as the memory chunks overlap! */
  909|       |      memmove(path, &path[1], strlen(&path[1]) + 1);
  910|       |    }
  911|       |#endif
  912|       |
  913|      0|  }
  914|  2.82k|  else {
  915|       |    /* clear path */
  916|  2.82k|    const char *p;
  917|  2.82k|    const char *hostp;
  918|  2.82k|    size_t len;
  919|  2.82k|    path[0] = 0;
  920|       |
  921|  2.82k|    if(url_has_scheme) {
  922|  2.39k|      int i = 0;
  923|  2.39k|      p = &url[schemelen + 1];
  924|  7.05k|      while(p && (*p == '/') && (i < 4)) {
  925|  4.65k|        p++;
  926|  4.65k|        i++;
  927|  4.65k|      }
  928|  2.39k|      if((i < 1) || (i>3))
  929|       |        /* less than one or more than three slashes */
  930|      1|        return CURLUE_MALFORMED_INPUT;
  931|       |
  932|  2.39k|      schemep = schemebuf;
  933|  2.39k|      if(!Curl_builtin_scheme(schemep) &&
  934|  2.39k|         !(flags & CURLU_NON_SUPPORT_SCHEME))
  935|      1|        return CURLUE_UNSUPPORTED_SCHEME;
  936|       |
  937|  2.39k|      if(junkscan(schemep, flags))
  938|      0|        return CURLUE_MALFORMED_INPUT;
  939|  2.39k|    }
  940|    430|    else {
  941|       |      /* no scheme! */
  942|       |
  943|    430|      if(!(flags & (CURLU_DEFAULT_SCHEME|CURLU_GUESS_SCHEME)))
  944|      0|        return CURLUE_MALFORMED_INPUT;
  945|    430|      if(flags & CURLU_DEFAULT_SCHEME)
  946|      0|        schemep = DEFAULT_SCHEME;
  947|       |
  948|       |      /*
  949|       |       * The URL was badly formatted, let's try without scheme specified.
  950|       |       */
  951|    430|      p = url;
  952|    430|    }
  953|  2.82k|    hostp = p; /* host name starts here */
  954|       |
  955|  37.9k|    while(*p && !HOSTNAME_END(*p)) /* find end of host name */
  956|  35.0k|      p++;
  957|       |
  958|  2.82k|    len = p - hostp;
  959|  2.82k|    if(len) {
  960|  2.82k|      memcpy(hostname, hostp, len);
  961|  2.82k|      hostname[len] = 0;
  962|  2.82k|    }
  963|      3|    else {
  964|      3|      if(!(flags & CURLU_NO_AUTHORITY))
  965|      3|        return CURLUE_MALFORMED_INPUT;
  966|      3|    }
  967|       |
  968|  2.82k|    len = strlen(p);
  969|  2.82k|    memcpy(path, p, len);
  970|  2.82k|    path[len] = 0;
  971|       |
  972|  2.82k|    if(schemep) {
  973|  2.39k|      u->scheme = strdup(schemep);
  974|  2.39k|      if(!u->scheme)
  975|      0|        return CURLUE_OUT_OF_MEMORY;
  976|  2.39k|    }
  977|  2.82k|  }
  978|       |
  979|  2.82k|  if(junkscan(path, flags))
  980|     40|    return CURLUE_MALFORMED_INPUT;
  981|       |
  982|  2.78k|  if((flags & CURLU_URLENCODE) && path[0]) {
  983|       |    /* worst case output length is 3x the original! */
  984|    235|    char *newp = malloc(strlen(path) * 3);
  985|    235|    if(!newp)
  986|      0|      return CURLUE_OUT_OF_MEMORY;
  987|    235|    path_alloced = TRUE;
  988|    235|    strcpy_url(newp, path, TRUE); /* consider it relative */
  989|    235|    u->temppath = path = newp;
  990|    235|  }
  991|       |
  992|  2.78k|  fragment = strchr(path, '#');
  993|  2.78k|  if(fragment) {
  994|     30|    *fragment++ = 0;
  995|     30|    if(fragment[0]) {
  996|     29|      u->fragment = strdup(fragment);
  997|     29|      if(!u->fragment)
  998|      0|        return CURLUE_OUT_OF_MEMORY;
  999|     29|    }
 1000|     30|  }
 1001|       |
 1002|  2.78k|  query = strchr(path, '?');
 1003|  2.78k|  if(query) {
 1004|    141|    *query++ = 0;
 1005|       |    /* done even if the query part is a blank string */
 1006|    141|    u->query = strdup(query);
 1007|    141|    if(!u->query)
 1008|      0|      return CURLUE_OUT_OF_MEMORY;
 1009|    141|  }
 1010|       |
 1011|  2.78k|  if(!path[0])
 1012|       |    /* if there's no path left set, unset */
 1013|  1.23k|    path = NULL;
 1014|  1.54k|  else {
 1015|  1.54k|    if(!(flags & CURLU_PATH_AS_IS)) {
 1016|       |      /* remove ../ and ./ sequences according to RFC3986 */
 1017|  1.54k|      char *newp = Curl_dedotdotify(path);
 1018|  1.54k|      if(!newp)
 1019|      0|        return CURLUE_OUT_OF_MEMORY;
 1020|       |
 1021|  1.54k|      if(strcmp(newp, path)) {
 1022|       |        /* if we got a new version */
 1023|     81|        if(path_alloced)
 1024|     26|          Curl_safefree(u->temppath);
 1025|     81|        u->temppath = path = newp;
 1026|     81|        path_alloced = TRUE;
 1027|     81|      }
 1028|  1.46k|      else
 1029|  1.46k|        free(newp);
 1030|  1.54k|    }
 1031|       |
 1032|  1.54k|    u->path = path_alloced?path:strdup(path);
 1033|  1.54k|    if(!u->path)
 1034|      0|      return CURLUE_OUT_OF_MEMORY;
 1035|  1.54k|    u->temppath = NULL; /* used now */
 1036|  1.54k|  }
 1037|       |
 1038|  2.78k|  if(hostname) {
 1039|  2.78k|    char normalized_ipv4[sizeof("255.255.255.255") + 1];
 1040|       |    /*
 1041|       |     * Parse the login details and strip them out of the host name.
 1042|       |     */
 1043|  2.78k|    if(junkscan(hostname, flags))
 1044|     20|      return CURLUE_MALFORMED_INPUT;
 1045|       |
 1046|  2.76k|    result = parse_hostname_login(u, &hostname, flags);
 1047|  2.76k|    if(result)
 1048|      0|      return result;
 1049|       |
 1050|  2.76k|    result = Curl_parse_port(u, hostname, url_has_scheme);
 1051|  2.76k|    if(result)
 1052|     12|      return result;
 1053|       |
 1054|  2.75k|    if(0 == strlen(hostname) && (flags & CURLU_NO_AUTHORITY)) {
 1055|       |      /* Skip hostname check, it's allowed to be empty. */
 1056|      0|      u->host = strdup("");
 1057|      0|    }
 1058|  2.75k|    else {
 1059|  2.75k|      if(ipv4_normalize(hostname, normalized_ipv4, sizeof(normalized_ipv4)))
 1060|  1.33k|        u->host = strdup(normalized_ipv4);
 1061|  1.41k|      else {
 1062|  1.41k|        result = decode_host(hostname, &u->host);
 1063|  1.41k|        if(result)
 1064|      2|          return result;
 1065|  1.41k|        result = hostname_check(u, u->host);
 1066|  1.41k|        if(result)
 1067|     16|          return result;
 1068|  1.41k|      }
 1069|  2.75k|    }
 1070|  2.73k|    if(!u->host)
 1071|      0|      return CURLUE_OUT_OF_MEMORY;
 1072|  2.73k|    if((flags & CURLU_GUESS_SCHEME) && !schemep) {
 1073|       |      /* legacy curl-style guess based on host name */
 1074|    398|      if(checkprefix("ftp.", hostname))
 1075|      1|        schemep = "ftp";
 1076|    397|      else if(checkprefix("dict.", hostname))
 1077|      0|        schemep = "dict";
 1078|    397|      else if(checkprefix("ldap.", hostname))
 1079|      0|        schemep = "ldap";
 1080|    397|      else if(checkprefix("imap.", hostname))
 1081|      1|        schemep = "imap";
 1082|    396|      else if(checkprefix("smtp.", hostname))
 1083|      1|        schemep = "smtp";
 1084|    395|      else if(checkprefix("pop3.", hostname))
 1085|      0|        schemep = "pop3";
 1086|    395|      else
 1087|    395|        schemep = "http";
 1088|       |
 1089|    398|      u->scheme = strdup(schemep);
 1090|    398|      if(!u->scheme)
 1091|      0|        return CURLUE_OUT_OF_MEMORY;
 1092|    398|    }
 1093|  2.73k|  }
 1094|       |
 1095|  2.73k|  Curl_safefree(u->scratch);
 1096|  2.73k|  Curl_safefree(u->temppath);
 1097|       |
 1098|  2.73k|  return CURLUE_OK;
 1099|  2.78k|}
urlapi.c:junkscan:
  582|  7.99k|{
  583|  7.99k|  if(part) {
  584|  7.99k|    static const char badbytes[]={
  585|  7.99k|      /* */ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  586|  7.99k|      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  587|  7.99k|      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  588|  7.99k|      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  589|  7.99k|      0x7f, 0x00 /* null-terminate */
  590|  7.99k|    };
  591|  7.99k|    size_t n = strlen(part);
  592|  7.99k|    size_t nfine = strcspn(part, badbytes);
  593|  7.99k|    if(nfine != n)
  594|       |      /* since we don't know which part is scanned, return a generic error
  595|       |         code */
  596|     57|      return TRUE;
  597|  7.94k|    if(!(flags & CURLU_ALLOW_SPACE) && strchr(part, ' '))
  598|      3|      return TRUE;
  599|  7.94k|  }
  600|  7.93k|  return FALSE;
  601|  7.99k|}
urlapi.c:strcpy_url:
  186|    537|{
  187|       |  /* we must add this with whitespace-replacing */
  188|    537|  bool left = TRUE;
  189|    537|  const unsigned char *iptr;
  190|    537|  char *optr = output;
  191|    537|  const unsigned char *host_sep = (const unsigned char *) url;
  192|       |
  193|    537|  if(!relative)
  194|     26|    host_sep = (const unsigned char *) find_host_sep(url);
  195|       |
  196|    537|  for(iptr = (unsigned char *)url;    /* read from here */
  197|  14.2k|      *iptr;         /* until zero byte */
  198|  13.7k|      iptr++) {
  199|       |
  200|  13.7k|    if(iptr < host_sep) {
  201|    139|      *optr++ = *iptr;
  202|    139|      continue;
  203|    139|    }
  204|       |
  205|  13.6k|    if(*iptr == ' ') {
  206|    584|      if(left) {
  207|    457|        *optr++='%'; /* add a '%' */
  208|    457|        *optr++='2'; /* add a '2' */
  209|    457|        *optr++='0'; /* add a '0' */
  210|    457|      }
  211|    127|      else
  212|    127|        *optr++='+'; /* add a '+' here */
  213|    584|      continue;
  214|    584|    }
  215|       |
  216|  13.0k|    if(*iptr == '?')
  217|    284|      left = FALSE;
  218|       |
  219|  13.0k|    if(urlchar_needs_escaping(*iptr)) {
  220|    530|      msnprintf(optr, 4, "%%%02x", *iptr);
  221|    530|      optr += 3;
  222|    530|    }
  223|  12.5k|    else
  224|  12.5k|      *optr++ = *iptr;
  225|  13.0k|  }
  226|    537|  *optr = 0; /* null-terminate output buffer */
  227|       |
  228|    537|}
urlapi.c:find_host_sep:
  104|     52|{
  105|     52|  const char *sep;
  106|     52|  const char *query;
  107|       |
  108|       |  /* Find the start of the hostname */
  109|     52|  sep = strstr(url, "//");
  110|     52|  if(!sep)
  111|     50|    sep = url;
  112|      2|  else
  113|      2|    sep += 2;
  114|       |
  115|     52|  query = strchr(sep, '?');
  116|     52|  sep = strchr(sep, '/');
  117|       |
  118|     52|  if(!sep)
  119|     36|    sep = url + strlen(url);
  120|       |
  121|     52|  if(!query)
  122|     50|    query = url + strlen(url);
  123|       |
  124|     52|  return sep < query ? sep : query;
  125|     52|}
urlapi.c:urlchar_needs_escaping:
  133|  20.5k|{
  134|  20.5k|  return !(ISCNTRL(c) || ISSPACE(c) || ISGRAPH(c));
  135|  20.5k|}
urlapi.c:parse_hostname_login:
  431|  2.76k|{
  432|  2.76k|  CURLUcode result = CURLUE_OK;
  433|  2.76k|  CURLcode ccode;
  434|  2.76k|  char *userp = NULL;
  435|  2.76k|  char *passwdp = NULL;
  436|  2.76k|  char *optionsp = NULL;
  437|  2.76k|  const struct Curl_handler *h = NULL;
  438|       |
  439|       |  /* At this point, we're hoping all the other special cases have
  440|       |   * been taken care of, so conn->host.name is at most
  441|       |   *    [user[:password][;options]]@]hostname
  442|       |   *
  443|       |   * We need somewhere to put the embedded details, so do that first.
  444|       |   */
  445|       |
  446|  2.76k|  char *ptr = strchr(*hostname, '@');
  447|  2.76k|  char *login = *hostname;
  448|       |
  449|  2.76k|  if(!ptr)
  450|  2.57k|    goto out;
  451|       |
  452|       |  /* We will now try to extract the
  453|       |   * possible login information in a string like:
  454|       |   * ftp://user:password@ftp.my.site:8021/README */
  455|    183|  *hostname = ++ptr;
  456|       |
  457|       |  /* if this is a known scheme, get some details */
  458|    183|  if(u->scheme)
  459|    152|    h = Curl_builtin_scheme(u->scheme);
  460|       |
  461|       |  /* We could use the login information in the URL so extract it. Only parse
  462|       |     options if the handler says we should. Note that 'h' might be NULL! */
  463|    183|  ccode = Curl_parse_login_details(login, ptr - login - 1,
  464|    183|                                   &userp, &passwdp,
  465|    183|                                   (h && (h->flags & PROTOPT_URLOPTIONS)) ?
  466|      5|                                   &optionsp:NULL);
  467|    183|  if(ccode) {
  468|      0|    result = CURLUE_MALFORMED_INPUT;
  469|      0|    goto out;
  470|      0|  }
  471|       |
  472|    183|  if(userp) {
  473|    153|    if(flags & CURLU_DISALLOW_USER) {
  474|       |      /* Option DISALLOW_USER is set and url contains username. */
  475|      0|      result = CURLUE_USER_NOT_ALLOWED;
  476|      0|      goto out;
  477|      0|    }
  478|       |
  479|    153|    u->user = userp;
  480|    153|  }
  481|       |
  482|    183|  if(passwdp)
  483|     41|    u->password = passwdp;
  484|       |
  485|    183|  if(optionsp)
  486|      4|    u->options = optionsp;
  487|       |
  488|    183|  return CURLUE_OK;
  489|  2.57k|  out:
  490|       |
  491|  2.57k|  free(userp);
  492|  2.57k|  free(passwdp);
  493|  2.57k|  free(optionsp);
  494|       |
  495|  2.57k|  return result;
  496|    183|}
urlapi.c:ipv4_normalize:
  680|  2.75k|{
  681|  2.75k|  bool done = FALSE;
  682|  2.75k|  int n = 0;
  683|  2.75k|  const char *c = hostname;
  684|  2.75k|  unsigned long parts[4] = {0, 0, 0, 0};
  685|       |
  686|  8.90k|  while(!done) {
  687|  7.35k|    char *endp;
  688|  7.35k|    unsigned long l;
  689|  7.35k|    if((*c < '0') || (*c > '9'))
  690|       |      /* most importantly this doesn't allow a leading plus or minus */
  691|  1.05k|      return FALSE;
  692|  6.29k|    l = strtoul(c, &endp, 0);
  693|       |
  694|       |    /* overflow or nothing parsed at all */
  695|  6.29k|    if(((l == ULONG_MAX) && (errno == ERANGE)) ||  (endp == c))
  696|      1|      return FALSE;
  697|       |
  698|  6.29k|#if SIZEOF_LONG > 4
  699|       |    /* a value larger than 32 bits */
  700|  6.29k|    if(l > UINT_MAX)
  701|     11|      return FALSE;
  702|  6.28k|#endif
  703|       |
  704|  6.28k|    parts[n] = l;
  705|  6.28k|    c = endp;
  706|       |
  707|  6.28k|    switch (*c) {
  708|  4.62k|    case '.' :
  709|  4.62k|      if(n == 3)
  710|     15|        return FALSE;
  711|  4.60k|      n++;
  712|  4.60k|      c++;
  713|  4.60k|      break;
  714|       |
  715|  1.54k|    case '\0':
  716|  1.54k|      done = TRUE;
  717|  1.54k|      break;
  718|       |
  719|    118|    default:
  720|    118|      return FALSE;
  721|  6.28k|    }
  722|  6.28k|  }
  723|       |
  724|       |  /* this is deemed a valid IPv4 numerical address */
  725|       |
  726|  1.54k|  switch(n) {
  727|     80|  case 0: /* a -- 32 bits */
  728|     80|    msnprintf(outp, olen, "%u.%u.%u.%u",
  729|     80|              parts[0] >> 24, (parts[0] >> 16) & 0xff,
  730|     80|              (parts[0] >> 8) & 0xff, parts[0] & 0xff);
  731|     80|    break;
  732|     54|  case 1: /* a.b -- 8.24 bits */
  733|     54|    if((parts[0] > 0xff) || (parts[1] > 0xffffff))
  734|     28|      return FALSE;
  735|     26|    msnprintf(outp, olen, "%u.%u.%u.%u",
  736|     26|              parts[0], (parts[1] >> 16) & 0xff,
  737|     26|              (parts[1] >> 8) & 0xff, parts[1] & 0xff);
  738|     26|    break;
  739|     75|  case 2: /* a.b.c -- 8.8.16 bits */
  740|     75|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xffff))
  741|     66|      return FALSE;
  742|      9|    msnprintf(outp, olen, "%u.%u.%u.%u",
  743|      9|              parts[0], parts[1], (parts[2] >> 8) & 0xff,
  744|      9|              parts[2] & 0xff);
  745|      9|    break;
  746|  1.33k|  case 3: /* a.b.c.d -- 8.8.8.8 bits */
  747|  1.33k|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff) ||
  748|  1.33k|       (parts[3] > 0xff))
  749|    117|      return FALSE;
  750|  1.22k|    msnprintf(outp, olen, "%u.%u.%u.%u",
  751|  1.22k|              parts[0], parts[1], parts[2], parts[3]);
  752|  1.22k|    break;
  753|  1.54k|  }
  754|  1.33k|  return TRUE;
  755|  1.54k|}
urlapi.c:decode_host:
  759|  1.41k|{
  760|  1.41k|  char *per = NULL;
  761|  1.41k|  if(hostname[0] != '[')
  762|       |    /* only decode if not an ipv6 numerical */
  763|  1.35k|    per = strchr(hostname, '%');
  764|  1.41k|  if(!per) {
  765|  1.29k|    *outp = strdup(hostname);
  766|  1.29k|    if(!*outp)
  767|      0|      return CURLUE_OUT_OF_MEMORY;
  768|  1.29k|  }
  769|    121|  else {
  770|       |    /* might be encoded */
  771|    121|    size_t dlen;
  772|    121|    CURLcode result = Curl_urldecode(NULL, hostname, 0,
  773|    121|                                     outp, &dlen, REJECT_CTRL);
  774|    121|    if(result)
  775|      2|      return CURLUE_MALFORMED_INPUT;
  776|    121|  }
  777|       |
  778|  1.41k|  return CURLUE_OK;
  779|  1.41k|}
urlapi.c:mv_urlhandle:
   93|  2.73k|{
   94|  2.73k|  free_urlhandle(to);
   95|  2.73k|  *to = *from;
   96|  2.73k|  free(from);
   97|  2.73k|}
urlapi.c:concat_url:
  269|    302|{
  270|       |  /***
  271|       |   TRY to append this new path to the old URL
  272|       |   to the right of the host part. Oh crap, this is doomed to cause
  273|       |   problems in the future...
  274|       |  */
  275|    302|  char *newest;
  276|    302|  char *protsep;
  277|    302|  char *pathsep;
  278|    302|  size_t newlen;
  279|    302|  bool host_changed = FALSE;
  280|       |
  281|    302|  const char *useurl = relurl;
  282|    302|  size_t urllen;
  283|       |
  284|       |  /* we must make our own copy of the URL to play with, as it may
  285|       |     point to read-only data */
  286|    302|  char *url_clone = strdup(base);
  287|       |
  288|    302|  if(!url_clone)
  289|      0|    return NULL; /* skip out of this NOW */
  290|       |
  291|       |  /* protsep points to the start of the host name */
  292|    302|  protsep = strstr(url_clone, "//");
  293|    302|  if(!protsep)
  294|      0|    protsep = url_clone;
  295|    302|  else
  296|    302|    protsep += 2; /* pass the slashes */
  297|       |
  298|    302|  if('/' != relurl[0]) {
  299|    264|    int level = 0;
  300|       |
  301|       |    /* First we need to find out if there's a ?-letter in the URL,
  302|       |       and cut it and the right-side of that off */
  303|    264|    pathsep = strchr(protsep, '?');
  304|    264|    if(pathsep)
  305|     47|      *pathsep = 0;
  306|       |
  307|       |    /* we have a relative path to append to the last slash if there's one
  308|       |       available, or if the new URL is just a query string (starts with a
  309|       |       '?')  we append the new one at the end of the entire currently worked
  310|       |       out URL */
  311|    264|    if(useurl[0] != '?') {
  312|    247|      pathsep = strrchr(protsep, '/');
  313|    247|      if(pathsep)
  314|    247|        *pathsep = 0;
  315|    247|    }
  316|       |
  317|       |    /* Check if there's any slash after the host name, and if so, remember
  318|       |       that position instead */
  319|    264|    pathsep = strchr(protsep, '/');
  320|    264|    if(pathsep)
  321|     84|      protsep = pathsep + 1;
  322|    180|    else
  323|    180|      protsep = NULL;
  324|       |
  325|       |    /* now deal with one "./" or any amount of "../" in the newurl
  326|       |       and act accordingly */
  327|       |
  328|    264|    if((useurl[0] == '.') && (useurl[1] == '/'))
  329|      3|      useurl += 2; /* just skip the "./" */
  330|       |
  331|    366|    while((useurl[0] == '.') &&
  332|    366|          (useurl[1] == '.') &&
  333|    366|          (useurl[2] == '/')) {
  334|    102|      level++;
  335|    102|      useurl += 3; /* pass the "../" */
  336|    102|    }
  337|       |
  338|    264|    if(protsep) {
  339|    114|      while(level--) {
  340|       |        /* cut off one more level from the right of the original URL */
  341|     43|        pathsep = strrchr(protsep, '/');
  342|     43|        if(pathsep)
  343|     30|          *pathsep = 0;
  344|     13|        else {
  345|     13|          *protsep = 0;
  346|     13|          break;
  347|     13|        }
  348|     43|      }
  349|     84|    }
  350|    264|  }
  351|     38|  else {
  352|       |    /* We got a new absolute path for this server */
  353|       |
  354|     38|    if(relurl[1] == '/') {
  355|       |      /* the new URL starts with //, just keep the protocol part from the
  356|       |         original one */
  357|     26|      *protsep = 0;
  358|     26|      useurl = &relurl[2]; /* we keep the slashes from the original, so we
  359|       |                              skip the new ones */
  360|     26|      host_changed = TRUE;
  361|     26|    }
  362|     12|    else {
  363|       |      /* cut off the original URL from the first slash, or deal with URLs
  364|       |         without slash */
  365|     12|      pathsep = strchr(protsep, '/');
  366|     12|      if(pathsep) {
  367|       |        /* When people use badly formatted URLs, such as
  368|       |           "http://www.url.com?dir=/home/daniel" we must not use the first
  369|       |           slash, if there's a ?-letter before it! */
  370|     12|        char *sep = strchr(protsep, '?');
  371|     12|        if(sep && (sep < pathsep))
  372|      0|          pathsep = sep;
  373|     12|        *pathsep = 0;
  374|     12|      }
  375|      0|      else {
  376|       |        /* There was no slash. Now, since we might be operating on a badly
  377|       |           formatted URL, such as "http://www.url.com?id=2380" which doesn't
  378|       |           use a slash separator as it is supposed to, we need to check for a
  379|       |           ?-letter as well! */
  380|      0|        pathsep = strchr(protsep, '?');
  381|      0|        if(pathsep)
  382|      0|          *pathsep = 0;
  383|      0|      }
  384|     12|    }
  385|     38|  }
  386|       |
  387|       |  /* If the new part contains a space, this is a mighty stupid redirect
  388|       |     but we still make an effort to do "right". To the left of a '?'
  389|       |     letter we replace each space with %20 while it is replaced with '+'
  390|       |     on the right side of the '?' letter.
  391|       |  */
  392|    302|  newlen = strlen_url(useurl, !host_changed);
  393|       |
  394|    302|  urllen = strlen(url_clone);
  395|       |
  396|    302|  newest = malloc(urllen + 1 + /* possible slash */
  397|    302|                  newlen + 1 /* zero byte */);
  398|       |
  399|    302|  if(!newest) {
  400|      0|    free(url_clone); /* don't leak this */
  401|      0|    return NULL;
  402|      0|  }
  403|       |
  404|       |  /* copy over the root url part */
  405|    302|  memcpy(newest, url_clone, urllen);
  406|       |
  407|       |  /* check if we need to append a slash */
  408|    302|  if(('/' == useurl[0]) || (protsep && !*protsep) || ('?' == useurl[0]))
  409|     94|    ;
  410|    208|  else
  411|    208|    newest[urllen++]='/';
  412|       |
  413|       |  /* then append the new piece on the right side */
  414|    302|  strcpy_url(&newest[urllen], useurl, !host_changed);
  415|       |
  416|    302|  free(url_clone);
  417|       |
  418|    302|  return newest;
  419|    302|}
urlapi.c:strlen_url:
  144|    302|{
  145|    302|  const unsigned char *ptr;
  146|    302|  size_t newlen = 0;
  147|    302|  bool left = TRUE; /* left side of the ? */
  148|    302|  const unsigned char *host_sep = (const unsigned char *) url;
  149|       |
  150|    302|  if(!relative)
  151|     26|    host_sep = (const unsigned char *) find_host_sep(url);
  152|       |
  153|  8.49k|  for(ptr = (unsigned char *)url; *ptr; ptr++) {
  154|       |
  155|  8.18k|    if(ptr < host_sep) {
  156|    139|      ++newlen;
  157|    139|      continue;
  158|    139|    }
  159|       |
  160|  8.05k|    if(*ptr == ' ') {
  161|    581|      if(left)
  162|    454|        newlen += 3;
  163|    127|      else
  164|    127|        newlen++;
  165|    581|      continue;
  166|    581|    }
  167|       |
  168|  7.46k|    if (*ptr == '?')
  169|    186|      left = FALSE;
  170|       |
  171|  7.46k|    if(urlchar_needs_escaping(*ptr))
  172|    523|      newlen += 2;
  173|       |
  174|  7.46k|    newlen++;
  175|  7.46k|  }
  176|       |
  177|    302|  return newlen;
  178|    302|}
urlapi.c:hostname_check:
  604|  1.41k|{
  605|  1.41k|  size_t len;
  606|  1.41k|  size_t hlen = strlen(hostname);
  607|       |
  608|  1.41k|  if(hostname[0] == '[') {
  609|     56|#ifdef ENABLE_IPV6
  610|     56|    char dest[16]; /* fits a binary IPv6 address */
  611|     56|#endif
  612|     56|    const char *l = "0123456789abcdefABCDEF:.";
  613|     56|    if(hlen < 4) /* '[::]' is the shortest possible valid string */
  614|      1|      return CURLUE_MALFORMED_INPUT;
  615|     55|    hostname++;
  616|     55|    hlen -= 2;
  617|       |
  618|     55|    if(hostname[hlen] != ']')
  619|      1|      return CURLUE_MALFORMED_INPUT;
  620|       |
  621|       |    /* only valid letters are ok */
  622|     54|    len = strspn(hostname, l);
  623|     54|    if(hlen != len) {
  624|     11|      hlen = len;
  625|     11|      if(hostname[len] == '%') {
  626|       |        /* this could now be '%[zone id]' */
  627|     10|        char zoneid[16];
  628|     10|        int i = 0;
  629|     10|        char *h = &hostname[len + 1];
  630|       |        /* pass '25' if present and is a url encoded percent sign */
  631|     10|        if(!strncmp(h, "25", 2) && h[2] && (h[2] != ']'))
  632|      1|          h += 2;
  633|     47|        while(*h && (*h != ']') && (i < 15))
  634|     37|          zoneid[i++] = *h++;
  635|     10|        if(!i || (']' != *h))
  636|      2|          return CURLUE_MALFORMED_INPUT;
  637|      8|        zoneid[i] = 0;
  638|      8|        u->zoneid = strdup(zoneid);
  639|      8|        if(!u->zoneid)
  640|      0|          return CURLUE_OUT_OF_MEMORY;
  641|      8|        hostname[len] = ']'; /* insert end bracket */
  642|      8|        hostname[len + 1] = 0; /* terminate the hostname */
  643|      8|      }
  644|      1|      else
  645|      1|        return CURLUE_MALFORMED_INPUT;
  646|       |      /* hostname is fine */
  647|     11|    }
  648|     51|#ifdef ENABLE_IPV6
  649|     51|    hostname[hlen] = 0; /* end the address there */
  650|     51|    if(1 != Curl_inet_pton(AF_INET6, hostname, dest))
  651|      3|      return CURLUE_MALFORMED_INPUT;
  652|     48|    hostname[hlen] = ']'; /* restore ending bracket */
  653|     48|#endif
  654|     48|  }
  655|  1.35k|  else {
  656|       |    /* letters from the second string is not ok */
  657|  1.35k|    len = strcspn(hostname, " \r\n");
  658|  1.35k|    if(hlen != len)
  659|       |      /* hostname with bad content */
  660|      1|      return CURLUE_MALFORMED_INPUT;
  661|  1.35k|  }
  662|  1.40k|  if(!hostname[0])
  663|      7|    return CURLUE_NO_HOST;
  664|  1.39k|  return CURLUE_OK;
  665|  1.40k|}

Curl_auth_digest_get_pair:
   76|    372|{
   77|    372|  int c;
   78|    372|  bool starts_with_quote = FALSE;
   79|    372|  bool escape = FALSE;
   80|       |
   81|  2.35k|  for(c = DIGEST_MAX_VALUE_LENGTH - 1; (*str && (*str != '=') && c--);)
   82|  1.97k|    *value++ = *str++;
   83|    372|  *value = 0;
   84|       |
   85|    372|  if('=' != *str++)
   86|       |    /* eek, no match */
   87|    110|    return FALSE;
   88|       |
   89|    262|  if('\"' == *str) {
   90|       |    /* This starts with a quote so it must end with one as well! */
   91|    184|    str++;
   92|    184|    starts_with_quote = TRUE;
   93|    184|  }
   94|       |
   95|  5.40k|  for(c = DIGEST_MAX_CONTENT_LENGTH - 1; *str && c--; str++) {
   96|  5.13k|    switch(*str) {
   97|     86|    case '\\':
   98|     86|      if(!escape) {
   99|       |        /* possibly the start of an escaped quote */
  100|     56|        escape = TRUE;
  101|     56|        *content++ = '\\'; /* Even though this is an escape character, we still
  102|       |                              store it as-is in the target buffer */
  103|     56|        continue;
  104|     56|      }
  105|     30|      break;
  106|       |
  107|    174|    case ',':
  108|    174|      if(!starts_with_quote) {
  109|       |        /* This signals the end of the content if we didn't get a starting
  110|       |           quote and then we do "sloppy" parsing */
  111|     69|        c = 0; /* the end */
  112|     69|        continue;
  113|     69|      }
  114|    105|      break;
  115|       |
  116|    105|    case '\r':
  117|      0|    case '\n':
  118|       |      /* end of string */
  119|      0|      c = 0;
  120|      0|      continue;
  121|       |
  122|    278|    case '\"':
  123|    278|      if(!escape && starts_with_quote) {
  124|       |        /* end of string */
  125|    128|        c = 0;
  126|    128|        continue;
  127|    128|      }
  128|    150|      break;
  129|  5.13k|    }
  130|       |
  131|  4.88k|    escape = FALSE;
  132|  4.88k|    *content++ = *str;
  133|  4.88k|  }
  134|       |
  135|    262|  *content = 0;
  136|    262|  *endptr = str;
  137|       |
  138|    262|  return TRUE;
  139|    262|}
Curl_auth_is_digest_supported:
  312|    118|{
  313|    118|  return TRUE;
  314|    118|}
Curl_auth_decode_digest_http_message:
  502|    110|{
  503|    110|  bool before = FALSE; /* got a nonce before */
  504|    110|  bool foundAuth = FALSE;
  505|    110|  bool foundAuthInt = FALSE;
  506|    110|  char *token = NULL;
  507|    110|  char *tmp = NULL;
  508|       |
  509|       |  /* If we already have received a nonce, keep that in mind */
  510|    110|  if(digest->nonce)
  511|      0|    before = TRUE;
  512|       |
  513|       |  /* Clean up any former leftovers and initialise to defaults */
  514|    110|  Curl_auth_digest_cleanup(digest);
  515|       |
  516|    372|  for(;;) {
  517|    372|    char value[DIGEST_MAX_VALUE_LENGTH];
  518|    372|    char content[DIGEST_MAX_CONTENT_LENGTH];
  519|       |
  520|       |    /* Pass all additional spaces here */
  521|    510|    while(*chlg && ISSPACE(*chlg))
  522|    138|      chlg++;
  523|       |
  524|       |    /* Extract a value=content pair */
  525|    372|    if(Curl_auth_digest_get_pair(chlg, value, content, &chlg)) {
  526|    262|      if(strcasecompare(value, "nonce")) {
  527|     72|        free(digest->nonce);
  528|     72|        digest->nonce = strdup(content);
  529|     72|        if(!digest->nonce)
  530|      0|          return CURLE_OUT_OF_MEMORY;
  531|     72|      }
  532|    190|      else if(strcasecompare(value, "stale")) {
  533|      0|        if(strcasecompare(content, "true")) {
  534|      0|          digest->stale = TRUE;
  535|      0|          digest->nc = 1; /* we make a new nonce now */
  536|      0|        }
  537|      0|      }
  538|    190|      else if(strcasecompare(value, "realm")) {
  539|     67|        free(digest->realm);
  540|     67|        digest->realm = strdup(content);
  541|     67|        if(!digest->realm)
  542|      0|          return CURLE_OUT_OF_MEMORY;
  543|     67|      }
  544|    123|      else if(strcasecompare(value, "opaque")) {
  545|      0|        free(digest->opaque);
  546|      0|        digest->opaque = strdup(content);
  547|      0|        if(!digest->opaque)
  548|      0|          return CURLE_OUT_OF_MEMORY;
  549|      0|      }
  550|    123|      else if(strcasecompare(value, "qop")) {
  551|      0|        char *tok_buf = NULL;
  552|       |        /* Tokenize the list and choose auth if possible, use a temporary
  553|       |           clone of the buffer since strtok_r() ruins it */
  554|      0|        tmp = strdup(content);
  555|      0|        if(!tmp)
  556|      0|          return CURLE_OUT_OF_MEMORY;
  557|       |
  558|      0|        token = strtok_r(tmp, ",", &tok_buf);
  559|      0|        while(token != NULL) {
  560|      0|          if(strcasecompare(token, DIGEST_QOP_VALUE_STRING_AUTH)) {
  561|      0|            foundAuth = TRUE;
  562|      0|          }
  563|      0|          else if(strcasecompare(token, DIGEST_QOP_VALUE_STRING_AUTH_INT)) {
  564|      0|            foundAuthInt = TRUE;
  565|      0|          }
  566|      0|          token = strtok_r(NULL, ",", &tok_buf);
  567|      0|        }
  568|       |
  569|      0|        free(tmp);
  570|       |
  571|       |        /* Select only auth or auth-int. Otherwise, ignore */
  572|      0|        if(foundAuth) {
  573|      0|          free(digest->qop);
  574|      0|          digest->qop = strdup(DIGEST_QOP_VALUE_STRING_AUTH);
  575|      0|          if(!digest->qop)
  576|      0|            return CURLE_OUT_OF_MEMORY;
  577|      0|        }
  578|      0|        else if(foundAuthInt) {
  579|      0|          free(digest->qop);
  580|      0|          digest->qop = strdup(DIGEST_QOP_VALUE_STRING_AUTH_INT);
  581|      0|          if(!digest->qop)
  582|      0|            return CURLE_OUT_OF_MEMORY;
  583|      0|        }
  584|      0|      }
  585|    123|      else if(strcasecompare(value, "algorithm")) {
  586|      0|        free(digest->algorithm);
  587|      0|        digest->algorithm = strdup(content);
  588|      0|        if(!digest->algorithm)
  589|      0|          return CURLE_OUT_OF_MEMORY;
  590|       |
  591|      0|        if(strcasecompare(content, "MD5-sess"))
  592|      0|          digest->algo = CURLDIGESTALGO_MD5SESS;
  593|      0|        else if(strcasecompare(content, "MD5"))
  594|      0|          digest->algo = CURLDIGESTALGO_MD5;
  595|      0|        else if(strcasecompare(content, "SHA-256"))
  596|      0|          digest->algo = CURLDIGESTALGO_SHA256;
  597|      0|        else if(strcasecompare(content, "SHA-256-SESS"))
  598|      0|          digest->algo = CURLDIGESTALGO_SHA256SESS;
  599|      0|        else if(strcasecompare(content, "SHA-512-256"))
  600|      0|          digest->algo = CURLDIGESTALGO_SHA512_256;
  601|      0|        else if(strcasecompare(content, "SHA-512-256-SESS"))
  602|      0|          digest->algo = CURLDIGESTALGO_SHA512_256SESS;
  603|      0|        else
  604|      0|          return CURLE_BAD_CONTENT_ENCODING;
  605|      0|      }
  606|    123|      else if(strcasecompare(value, "userhash")) {
  607|      0|        if(strcasecompare(content, "true")) {
  608|      0|          digest->userhash = TRUE;
  609|      0|        }
  610|      0|      }
  611|    123|      else {
  612|       |        /* Unknown specifier, ignore it! */
  613|    123|      }
  614|    262|    }
  615|    110|    else
  616|    110|      break; /* We're done here */
  617|       |
  618|       |    /* Pass all additional spaces here */
  619|    432|    while(*chlg && ISSPACE(*chlg))
  620|    170|      chlg++;
  621|       |
  622|       |    /* Allow the list to be comma-separated */
  623|    262|    if(',' == *chlg)
  624|     69|      chlg++;
  625|    262|  }
  626|       |
  627|       |  /* We had a nonce since before, and we got another one now without
  628|       |     'stale=true'. This means we provided bad credentials in the previous
  629|       |     request */
  630|    110|  if(before && !digest->stale)
  631|      0|    return CURLE_BAD_CONTENT_ENCODING;
  632|       |
  633|       |  /* We got this header without a nonce, that's a bad Digest line! */
  634|    110|  if(!digest->nonce)
  635|     44|    return CURLE_BAD_CONTENT_ENCODING;
  636|       |
  637|     66|  return CURLE_OK;
  638|    110|}
Curl_auth_create_digest_http_message:
  924|     56|{
  925|     56|  switch(digest->algo) {
  926|     56|  case CURLDIGESTALGO_MD5:
  927|     56|  case CURLDIGESTALGO_MD5SESS:
  928|     56|    return auth_create_digest_http_message(data, userp, passwdp,
  929|     56|                                           request, uripath, digest,
  930|     56|                                           outptr, outlen,
  931|     56|                                           auth_digest_md5_to_ascii,
  932|     56|                                           Curl_md5it);
  933|       |
  934|      0|  case CURLDIGESTALGO_SHA256:
  935|      0|  case CURLDIGESTALGO_SHA256SESS:
  936|      0|  case CURLDIGESTALGO_SHA512_256:
  937|      0|  case CURLDIGESTALGO_SHA512_256SESS:
  938|      0|    return auth_create_digest_http_message(data, userp, passwdp,
  939|      0|                                           request, uripath, digest,
  940|      0|                                           outptr, outlen,
  941|      0|                                           auth_digest_sha256_to_ascii,
  942|      0|                                           Curl_sha256it);
  943|       |
  944|      0|  default:
  945|      0|    return CURLE_UNSUPPORTED_PROTOCOL;
  946|     56|  }
  947|     56|}
Curl_auth_digest_cleanup:
  960|  9.25k|{
  961|  9.25k|  Curl_safefree(digest->nonce);
  962|  9.25k|  Curl_safefree(digest->cnonce);
  963|  9.25k|  Curl_safefree(digest->realm);
  964|  9.25k|  Curl_safefree(digest->opaque);
  965|  9.25k|  Curl_safefree(digest->qop);
  966|  9.25k|  Curl_safefree(digest->algorithm);
  967|       |
  968|  9.25k|  digest->nc = 0;
  969|  9.25k|  digest->algo = CURLDIGESTALGO_MD5; /* default algorithm */
  970|  9.25k|  digest->stale = FALSE; /* default means normal, not stale */
  971|  9.25k|  digest->userhash = FALSE;
  972|  9.25k|}
digest.c:auth_create_digest_http_message:
  671|     56|{
  672|     56|  CURLcode result;
  673|     56|  unsigned char hashbuf[32]; /* 32 bytes/256 bits */
  674|     56|  unsigned char request_digest[65];
  675|     56|  unsigned char ha1[65];    /* 64 digits and 1 zero byte */
  676|     56|  unsigned char ha2[65];    /* 64 digits and 1 zero byte */
  677|     56|  char userh[65];
  678|     56|  char *cnonce = NULL;
  679|     56|  size_t cnonce_sz = 0;
  680|     56|  char *userp_quoted;
  681|     56|  char *response = NULL;
  682|     56|  char *hashthis = NULL;
  683|     56|  char *tmp = NULL;
  684|       |
  685|     56|  if(!digest->nc)
  686|     56|    digest->nc = 1;
  687|       |
  688|     56|  if(!digest->cnonce) {
  689|     56|    char cnoncebuf[33];
  690|     56|    result = Curl_rand_hex(data, (unsigned char *)cnoncebuf,
  691|     56|                           sizeof(cnoncebuf));
  692|     56|    if(result)
  693|      0|      return result;
  694|       |
  695|     56|    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
  696|     56|                                &cnonce, &cnonce_sz);
  697|     56|    if(result)
  698|      0|      return result;
  699|       |
  700|     56|    digest->cnonce = cnonce;
  701|     56|  }
  702|       |
  703|     56|  if(digest->userhash) {
  704|      0|    hashthis = aprintf("%s:%s", userp, digest->realm);
  705|      0|    if(!hashthis)
  706|      0|      return CURLE_OUT_OF_MEMORY;
  707|       |
  708|      0|    CURL_OUTPUT_DIGEST_CONV(data, hashthis);
  709|      0|    hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  710|      0|    free(hashthis);
  711|      0|    convert_to_ascii(hashbuf, (unsigned char *)userh);
  712|      0|  }
  713|       |
  714|       |  /*
  715|       |    If the algorithm is "MD5" or unspecified (which then defaults to MD5):
  716|       |
  717|       |      A1 = unq(username-value) ":" unq(realm-value) ":" passwd
  718|       |
  719|       |    If the algorithm is "MD5-sess" then:
  720|       |
  721|       |      A1 = H(unq(username-value) ":" unq(realm-value) ":" passwd) ":"
  722|       |           unq(nonce-value) ":" unq(cnonce-value)
  723|       |  */
  724|       |
  725|     56|  hashthis = aprintf("%s:%s:%s", digest->userhash ? userh : userp,
  726|     56|                                 digest->realm, passwdp);
  727|     56|  if(!hashthis)
  728|      0|    return CURLE_OUT_OF_MEMORY;
  729|       |
  730|     56|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  731|     56|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  732|     56|  free(hashthis);
  733|     56|  convert_to_ascii(hashbuf, ha1);
  734|       |
  735|     56|  if(digest->algo == CURLDIGESTALGO_MD5SESS ||
  736|     56|     digest->algo == CURLDIGESTALGO_SHA256SESS ||
  737|     56|     digest->algo == CURLDIGESTALGO_SHA512_256SESS) {
  738|       |    /* nonce and cnonce are OUTSIDE the hash */
  739|      0|    tmp = aprintf("%s:%s:%s", ha1, digest->nonce, digest->cnonce);
  740|      0|    if(!tmp)
  741|      0|      return CURLE_OUT_OF_MEMORY;
  742|       |
  743|      0|    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* Convert on non-ASCII machines */
  744|      0|    hash(hashbuf, (unsigned char *) tmp, strlen(tmp));
  745|      0|    free(tmp);
  746|      0|    convert_to_ascii(hashbuf, ha1);
  747|      0|  }
  748|       |
  749|       |  /*
  750|       |    If the "qop" directive's value is "auth" or is unspecified, then A2 is:
  751|       |
  752|       |      A2 = Method ":" digest-uri-value
  753|       |
  754|       |    If the "qop" value is "auth-int", then A2 is:
  755|       |
  756|       |      A2 = Method ":" digest-uri-value ":" H(entity-body)
  757|       |
  758|       |    (The "Method" value is the HTTP request method as specified in section
  759|       |    5.1.1 of RFC 2616)
  760|       |  */
  761|       |
  762|     56|  hashthis = aprintf("%s:%s", request, uripath);
  763|     56|  if(!hashthis)
  764|      0|    return CURLE_OUT_OF_MEMORY;
  765|       |
  766|     56|  if(digest->qop && strcasecompare(digest->qop, "auth-int")) {
  767|       |    /* We don't support auth-int for PUT or POST */
  768|      0|    char hashed[65];
  769|      0|    char *hashthis2;
  770|       |
  771|      0|    hash(hashbuf, (const unsigned char *)"", 0);
  772|      0|    convert_to_ascii(hashbuf, (unsigned char *)hashed);
  773|       |
  774|      0|    hashthis2 = aprintf("%s:%s", hashthis, hashed);
  775|      0|    free(hashthis);
  776|      0|    hashthis = hashthis2;
  777|      0|  }
  778|       |
  779|     56|  if(!hashthis)
  780|      0|    return CURLE_OUT_OF_MEMORY;
  781|       |
  782|     56|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  783|     56|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  784|     56|  free(hashthis);
  785|     56|  convert_to_ascii(hashbuf, ha2);
  786|       |
  787|     56|  if(digest->qop) {
  788|      0|    hashthis = aprintf("%s:%s:%08x:%s:%s:%s", ha1, digest->nonce, digest->nc,
  789|      0|                       digest->cnonce, digest->qop, ha2);
  790|      0|  }
  791|     56|  else {
  792|     56|    hashthis = aprintf("%s:%s:%s", ha1, digest->nonce, ha2);
  793|     56|  }
  794|       |
  795|     56|  if(!hashthis)
  796|      0|    return CURLE_OUT_OF_MEMORY;
  797|       |
  798|     56|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  799|     56|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  800|     56|  free(hashthis);
  801|     56|  convert_to_ascii(hashbuf, request_digest);
  802|       |
  803|       |  /* For test case 64 (snooped from a Mozilla 1.3a request)
  804|       |
  805|       |     Authorization: Digest username="testuser", realm="testrealm", \
  806|       |     nonce="1053604145", uri="/64", response="c55f7f30d83d774a3d2dcacf725abaca"
  807|       |
  808|       |     Digest parameters are all quoted strings.  Username which is provided by
  809|       |     the user will need double quotes and backslashes within it escaped.  For
  810|       |     the other fields, this shouldn't be an issue.  realm, nonce, and opaque
  811|       |     are copied as is from the server, escapes and all.  cnonce is generated
  812|       |     with web-safe characters.  uri is already percent encoded.  nc is 8 hex
  813|       |     characters.  algorithm and qop with standard values only contain web-safe
  814|       |     characters.
  815|       |  */
  816|     56|  userp_quoted = auth_digest_string_quoted(digest->userhash ? userh : userp);
  817|     56|  if(!userp_quoted)
  818|      0|    return CURLE_OUT_OF_MEMORY;
  819|       |
  820|     56|  if(digest->qop) {
  821|      0|    response = aprintf("username=\"%s\", "
  822|      0|                       "realm=\"%s\", "
  823|      0|                       "nonce=\"%s\", "
  824|      0|                       "uri=\"%s\", "
  825|      0|                       "cnonce=\"%s\", "
  826|      0|                       "nc=%08x, "
  827|      0|                       "qop=%s, "
  828|      0|                       "response=\"%s\"",
  829|      0|                       userp_quoted,
  830|      0|                       digest->realm,
  831|      0|                       digest->nonce,
  832|      0|                       uripath,
  833|      0|                       digest->cnonce,
  834|      0|                       digest->nc,
  835|      0|                       digest->qop,
  836|      0|                       request_digest);
  837|       |
  838|      0|    if(strcasecompare(digest->qop, "auth"))
  839|      0|      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
  840|       |                       padded which tells to the server how many times you are
  841|       |                       using the same nonce in the qop=auth mode */
  842|      0|  }
  843|     56|  else {
  844|     56|    response = aprintf("username=\"%s\", "
  845|     56|                       "realm=\"%s\", "
  846|     56|                       "nonce=\"%s\", "
  847|     56|                       "uri=\"%s\", "
  848|     56|                       "response=\"%s\"",
  849|     56|                       userp_quoted,
  850|     56|                       digest->realm,
  851|     56|                       digest->nonce,
  852|     56|                       uripath,
  853|     56|                       request_digest);
  854|     56|  }
  855|     56|  free(userp_quoted);
  856|     56|  if(!response)
  857|      0|    return CURLE_OUT_OF_MEMORY;
  858|       |
  859|       |  /* Add the optional fields */
  860|     56|  if(digest->opaque) {
  861|       |    /* Append the opaque */
  862|      0|    tmp = aprintf("%s, opaque=\"%s\"", response, digest->opaque);
  863|      0|    free(response);
  864|      0|    if(!tmp)
  865|      0|      return CURLE_OUT_OF_MEMORY;
  866|       |
  867|      0|    response = tmp;
  868|      0|  }
  869|       |
  870|     56|  if(digest->algorithm) {
  871|       |    /* Append the algorithm */
  872|      0|    tmp = aprintf("%s, algorithm=%s", response, digest->algorithm);
  873|      0|    free(response);
  874|      0|    if(!tmp)
  875|      0|      return CURLE_OUT_OF_MEMORY;
  876|       |
  877|      0|    response = tmp;
  878|      0|  }
  879|       |
  880|     56|  if(digest->userhash) {
  881|       |    /* Append the userhash */
  882|      0|    tmp = aprintf("%s, userhash=true", response);
  883|      0|    free(response);
  884|      0|    if(!tmp)
  885|      0|      return CURLE_OUT_OF_MEMORY;
  886|       |
  887|      0|    response = tmp;
  888|      0|  }
  889|       |
  890|       |  /* Return the output */
  891|     56|  *outptr = response;
  892|     56|  *outlen = strlen(response);
  893|       |
  894|     56|  return CURLE_OK;
  895|     56|}
digest.c:auth_digest_string_quoted:
  162|     56|{
  163|     56|  char *dest;
  164|     56|  const char *s = source;
  165|     56|  size_t n = 1; /* null terminator */
  166|       |
  167|       |  /* Calculate size needed */
  168|  3.62k|  while(*s) {
  169|  3.56k|    ++n;
  170|  3.56k|    if(*s == '"' || *s == '\\') {
  171|    264|      ++n;
  172|    264|    }
  173|  3.56k|    ++s;
  174|  3.56k|  }
  175|       |
  176|     56|  dest = malloc(n);
  177|     56|  if(dest) {
  178|     56|    char *d = dest;
  179|     56|    s = source;
  180|  3.62k|    while(*s) {
  181|  3.56k|      if(*s == '"' || *s == '\\') {
  182|    264|        *d++ = '\\';
  183|    264|      }
  184|  3.56k|      *d++ = *s++;
  185|  3.56k|    }
  186|     56|    *d = 0;
  187|     56|  }
  188|       |
  189|     56|  return dest;
  190|     56|}
digest.c:auth_digest_md5_to_ascii:
  145|    168|{
  146|    168|  int i;
  147|  2.85k|  for(i = 0; i < 16; i++)
  148|  2.68k|    msnprintf((char *) &dest[i * 2], 3, "%02x", source[i]);
  149|    168|}

Curl_auth_create_ntlm_type1_message:
  352|      2|{
  353|       |  /* NTLM type-1 message structure:
  354|       |
  355|       |       Index  Description            Content
  356|       |         0    NTLMSSP Signature      Null-terminated ASCII "NTLMSSP"
  357|       |                                     (0x4e544c4d53535000)
  358|       |         8    NTLM Message Type      long (0x01000000)
  359|       |        12    Flags                  long
  360|       |       (16)   Supplied Domain        security buffer (*)
  361|       |       (24)   Supplied Workstation   security buffer (*)
  362|       |       (32)   OS Version Structure   8 bytes (*)
  363|       |  (32) (40)   Start of data block    (*)
  364|       |                                     (*) -> Optional
  365|       |  */
  366|       |
  367|      2|  size_t size;
  368|       |
  369|      2|  char *ntlmbuf;
  370|      2|  const char *host = "";              /* empty */
  371|      2|  const char *domain = "";            /* empty */
  372|      2|  size_t hostlen = 0;
  373|      2|  size_t domlen = 0;
  374|      2|  size_t hostoff = 0;
  375|      2|  size_t domoff = hostoff + hostlen;  /* This is 0: remember that host and
  376|       |                                         domain are empty */
  377|      2|  (void)data;
  378|      2|  (void)userp;
  379|      2|  (void)passwdp;
  380|      2|  (void)service,
  381|      2|  (void)hostname,
  382|       |
  383|       |  /* Clean up any former leftovers and initialise to defaults */
  384|      2|  Curl_auth_cleanup_ntlm(ntlm);
  385|       |
  386|      2|#if defined(USE_NTRESPONSES) && \
  387|      2|    (defined(USE_NTLM2SESSION) || defined(USE_NTLM_V2))
  388|      2|#define NTLM2FLAG NTLMFLAG_NEGOTIATE_NTLM2_KEY
  389|       |#else
  390|       |#define NTLM2FLAG 0
  391|       |#endif
  392|      2|  ntlmbuf = aprintf(NTLMSSP_SIGNATURE "%c"
  393|      2|                    "\x01%c%c%c" /* 32-bit type = 1 */
  394|      2|                    "%c%c%c%c"   /* 32-bit NTLM flag field */
  395|      2|                    "%c%c"       /* domain length */
  396|      2|                    "%c%c"       /* domain allocated space */
  397|      2|                    "%c%c"       /* domain name offset */
  398|      2|                    "%c%c"       /* 2 zeroes */
  399|      2|                    "%c%c"       /* host length */
  400|      2|                    "%c%c"       /* host allocated space */
  401|      2|                    "%c%c"       /* host name offset */
  402|      2|                    "%c%c"       /* 2 zeroes */
  403|      2|                    "%s"         /* host name */
  404|      2|                    "%s",        /* domain string */
  405|      2|                    0,           /* trailing zero */
  406|      2|                    0, 0, 0,     /* part of type-1 long */
  407|       |
  408|      2|                    LONGQUARTET(NTLMFLAG_NEGOTIATE_OEM |
  409|      2|                                NTLMFLAG_REQUEST_TARGET |
  410|      2|                                NTLMFLAG_NEGOTIATE_NTLM_KEY |
  411|      2|                                NTLM2FLAG |
  412|      2|                                NTLMFLAG_NEGOTIATE_ALWAYS_SIGN),
  413|      2|                    SHORTPAIR(domlen),
  414|      2|                    SHORTPAIR(domlen),
  415|      2|                    SHORTPAIR(domoff),
  416|      2|                    0, 0,
  417|      2|                    SHORTPAIR(hostlen),
  418|      2|                    SHORTPAIR(hostlen),
  419|      2|                    SHORTPAIR(hostoff),
  420|      2|                    0, 0,
  421|      2|                    host,  /* this is empty */
  422|      2|                    domain /* this is empty */);
  423|       |
  424|      2|  if(!ntlmbuf)
  425|      0|    return CURLE_OUT_OF_MEMORY;
  426|       |
  427|       |  /* Initial packet length */
  428|      2|  size = 32 + hostlen + domlen;
  429|       |
  430|      2|  DEBUG_OUT({
  431|      2|    fprintf(stderr, "* TYPE1 header flags=0x%02.2x%02.2x%02.2x%02.2x "
  432|      2|            "0x%08.8x ",
  433|      2|            LONGQUARTET(NTLMFLAG_NEGOTIATE_OEM |
  434|      2|                        NTLMFLAG_REQUEST_TARGET |
  435|      2|                        NTLMFLAG_NEGOTIATE_NTLM_KEY |
  436|      2|                        NTLM2FLAG |
  437|      2|                        NTLMFLAG_NEGOTIATE_ALWAYS_SIGN),
  438|      2|            NTLMFLAG_NEGOTIATE_OEM |
  439|      2|            NTLMFLAG_REQUEST_TARGET |
  440|      2|            NTLMFLAG_NEGOTIATE_NTLM_KEY |
  441|      2|            NTLM2FLAG |
  442|      2|            NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
  443|      2|    ntlm_print_flags(stderr,
  444|      2|                     NTLMFLAG_NEGOTIATE_OEM |
  445|      2|                     NTLMFLAG_REQUEST_TARGET |
  446|      2|                     NTLMFLAG_NEGOTIATE_NTLM_KEY |
  447|      2|                     NTLM2FLAG |
  448|      2|                     NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
  449|      2|    fprintf(stderr, "\n****\n");
  450|      2|  });
  451|       |
  452|      2|  Curl_bufref_set(out, ntlmbuf, size, curl_free);
  453|      2|  return CURLE_OK;
  454|      2|}
Curl_auth_cleanup_ntlm:
  849|  4.89k|{
  850|       |  /* Free the target info */
  851|  4.89k|  Curl_safefree(ntlm->target_info);
  852|       |
  853|       |  /* Reset any variables */
  854|  4.89k|  ntlm->target_info_len = 0;
  855|  4.89k|}

Curl_tls_keylog_open:
   47|      1|{
   48|      1|  char *keylog_file_name;
   49|       |
   50|      1|  if(!keylog_file_fp) {
   51|      1|    keylog_file_name = curl_getenv("SSLKEYLOGFILE");
   52|      1|    if(keylog_file_name) {
   53|      0|      keylog_file_fp = fopen(keylog_file_name, FOPEN_APPENDTEXT);
   54|      0|      if(keylog_file_fp) {
   55|       |#ifdef WIN32
   56|       |        if(setvbuf(keylog_file_fp, NULL, _IONBF, 0))
   57|       |#else
   58|      0|        if(setvbuf(keylog_file_fp, NULL, _IOLBF, 4096))
   59|      0|#endif
   60|      0|        {
   61|      0|          fclose(keylog_file_fp);
   62|      0|          keylog_file_fp = NULL;
   63|      0|        }
   64|      0|      }
   65|      0|      Curl_safefree(keylog_file_name);
   66|      0|    }
   67|      1|  }
   68|      1|}

openssl.c:ossl_init:
 1172|      1|{
 1173|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) &&  \
 1174|       |  !defined(LIBRESSL_VERSION_NUMBER)
 1175|       |  const uint64_t flags =
 1176|       |#ifdef OPENSSL_INIT_ENGINE_ALL_BUILTIN
 1177|       |    /* not present in BoringSSL */
 1178|       |    OPENSSL_INIT_ENGINE_ALL_BUILTIN |
 1179|       |#endif
 1180|       |#ifdef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1181|       |    OPENSSL_INIT_NO_LOAD_CONFIG |
 1182|       |#else
 1183|       |    OPENSSL_INIT_LOAD_CONFIG |
 1184|       |#endif
 1185|       |    0;
 1186|       |  OPENSSL_init_ssl(flags, NULL);
 1187|       |#else
 1188|      1|  OPENSSL_load_builtin_modules();
 1189|       |
 1190|      1|#ifdef USE_OPENSSL_ENGINE
 1191|      1|  ENGINE_load_builtin_engines();
 1192|      1|#endif
 1193|       |
 1194|       |/* CONF_MFLAGS_DEFAULT_SECTION was introduced some time between 0.9.8b and
 1195|       |   0.9.8e */
 1196|       |#ifndef CONF_MFLAGS_DEFAULT_SECTION
 1197|       |#define CONF_MFLAGS_DEFAULT_SECTION 0x0
 1198|       |#endif
 1199|       |
 1200|      1|#ifndef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1201|      1|  CONF_modules_load_file(NULL, NULL,
 1202|      1|                         CONF_MFLAGS_DEFAULT_SECTION|
 1203|      1|                         CONF_MFLAGS_IGNORE_MISSING_FILE);
 1204|      1|#endif
 1205|       |
 1206|       |  /* Let's get nice error messages */
 1207|      1|  SSL_load_error_strings();
 1208|       |
 1209|       |  /* Init the global ciphers and digests */
 1210|      1|  if(!SSLeay_add_ssl_algorithms())
 1211|      0|    return 0;
 1212|       |
 1213|      1|  OpenSSL_add_all_algorithms();
 1214|      1|#endif
 1215|       |
 1216|      1|  Curl_tls_keylog_open();
 1217|       |
 1218|       |  /* Initialize the extra data indexes */
 1219|      1|  if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||
 1220|      1|     ossl_get_ssl_sockindex_index() < 0 || ossl_get_proxy_index() < 0)
 1221|      0|    return 0;
 1222|       |
 1223|      1|  return 1;
 1224|      1|}
openssl.c:ossl_get_ssl_data_index:
  373|      1|{
  374|      1|  static int ssl_ex_data_data_index = -1;
  375|      1|  if(ssl_ex_data_data_index < 0) {
  376|      1|    ssl_ex_data_data_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  377|      1|  }
  378|      1|  return ssl_ex_data_data_index;
  379|      1|}
openssl.c:ossl_get_ssl_conn_index:
  385|      1|{
  386|      1|  static int ssl_ex_data_conn_index = -1;
  387|      1|  if(ssl_ex_data_conn_index < 0) {
  388|      1|    ssl_ex_data_conn_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  389|      1|  }
  390|      1|  return ssl_ex_data_conn_index;
  391|      1|}
openssl.c:ossl_get_ssl_sockindex_index:
  397|      1|{
  398|      1|  static int sockindex_index = -1;
  399|      1|  if(sockindex_index < 0) {
  400|      1|    sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  401|      1|  }
  402|      1|  return sockindex_index;
  403|      1|}
openssl.c:ossl_get_proxy_index:
  409|      1|{
  410|      1|  static int proxy_index = -1;
  411|      1|  if(proxy_index < 0) {
  412|      1|    proxy_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  413|      1|  }
  414|      1|  return proxy_index;
  415|      1|}
openssl.c:ossl_data_pending:
 4167|  1.84k|{
 4168|  1.84k|  const struct ssl_connect_data *connssl = &conn->ssl[connindex];
 4169|  1.84k|  if(connssl->backend->handle && SSL_pending(connssl->backend->handle))
 4170|      0|    return TRUE;
 4171|  1.84k|#ifndef CURL_DISABLE_PROXY
 4172|  1.84k|  {
 4173|  1.84k|    const struct ssl_connect_data *proxyssl = &conn->proxy_ssl[connindex];
 4174|  1.84k|    if(proxyssl->backend->handle && SSL_pending(proxyssl->backend->handle))
 4175|      0|      return TRUE;
 4176|  1.84k|  }
 4177|  1.84k|#endif
 4178|  1.84k|  return FALSE;
 4179|  1.84k|}
openssl.c:ossl_random:
 4427|  2.82k|{
 4428|  2.82k|  int rc;
 4429|  2.82k|  if(data) {
 4430|  2.82k|    if(ossl_seed(data)) /* Initiate the seed if not already done */
 4431|      0|      return CURLE_FAILED_INIT; /* couldn't seed for some reason */
 4432|  2.82k|  }
 4433|      0|  else {
 4434|      0|    if(!rand_enough())
 4435|      0|      return CURLE_FAILED_INIT;
 4436|      0|  }
 4437|       |  /* RAND_bytes() returns 1 on success, 0 otherwise.  */
 4438|  2.82k|  rc = RAND_bytes(entropy, curlx_uztosi(length));
 4439|  2.82k|  return (rc == 1 ? CURLE_OK : CURLE_FAILED_INIT);
 4440|  2.82k|}
openssl.c:ossl_seed:
  441|  2.82k|{
  442|       |  /* This might get called before it has been added to a multi handle */
  443|  2.82k|  if(data->multi && data->multi->ssl_seeded)
  444|    168|    return CURLE_OK;
  445|       |
  446|  2.65k|  if(rand_enough()) {
  447|       |    /* OpenSSL 1.1.0+ should return here */
  448|  2.65k|    if(data->multi)
  449|     56|      data->multi->ssl_seeded = TRUE;
  450|  2.65k|    return CURLE_OK;
  451|  2.65k|  }
  452|       |#ifdef HAVE_RANDOM_INIT_BY_DEFAULT
  453|       |  /* with OpenSSL 1.1.0+, a failed RAND_status is a showstopper */
  454|       |  failf(data, "Insufficient randomness");
  455|       |  return CURLE_SSL_CONNECT_ERROR;
  456|       |#else
  457|       |
  458|       |#ifndef RANDOM_FILE
  459|       |  /* if RANDOM_FILE isn't defined, we only perform this if an option tells
  460|       |     us to! */
  461|       |  if(data->set.str[STRING_SSL_RANDOM_FILE])
  462|       |#define RANDOM_FILE "" /* doesn't matter won't be used */
  463|       |#endif
  464|      0|  {
  465|       |    /* let the option override the define */
  466|      0|    RAND_load_file((data->set.str[STRING_SSL_RANDOM_FILE]?
  467|      0|                    data->set.str[STRING_SSL_RANDOM_FILE]:
  468|      0|                    RANDOM_FILE),
  469|      0|                   RAND_LOAD_LENGTH);
  470|      0|    if(rand_enough())
  471|      0|      return CURLE_OK;
  472|      0|  }
  473|       |
  474|      0|#if defined(HAVE_RAND_EGD)
  475|       |  /* only available in OpenSSL 0.9.5 and later */
  476|       |  /* EGD_SOCKET is set at configure time or not at all */
  477|      0|#ifndef EGD_SOCKET
  478|       |  /* If we don't have the define set, we only do this if the egd-option
  479|       |     is set */
  480|      0|  if(data->set.str[STRING_SSL_EGDSOCKET])
  481|      0|#define EGD_SOCKET "" /* doesn't matter won't be used */
  482|      0|#endif
  483|      0|  {
  484|       |    /* If there's an option and a define, the option overrides the
  485|       |       define */
  486|      0|    int ret = RAND_egd(data->set.str[STRING_SSL_EGDSOCKET]?
  487|      0|                       data->set.str[STRING_SSL_EGDSOCKET]:EGD_SOCKET);
  488|      0|    if(-1 != ret) {
  489|      0|      if(rand_enough())
  490|      0|        return CURLE_OK;
  491|      0|    }
  492|      0|  }
  493|      0|#endif
  494|       |
  495|       |  /* fallback to a custom seeding of the PRNG using a hash based on a current
  496|       |     time */
  497|      0|  do {
  498|      0|    unsigned char randb[64];
  499|      0|    size_t len = sizeof(randb);
  500|      0|    size_t i, i_max;
  501|      0|    for(i = 0, i_max = len / sizeof(struct curltime); i < i_max; ++i) {
  502|      0|      struct curltime tv = Curl_now();
  503|      0|      Curl_wait_ms(1);
  504|      0|      tv.tv_sec *= i + 1;
  505|      0|      tv.tv_usec *= (unsigned int)i + 2;
  506|      0|      tv.tv_sec ^= ((Curl_now().tv_sec + Curl_now().tv_usec) *
  507|      0|                    (i + 3)) << 8;
  508|      0|      tv.tv_usec ^= (unsigned int) ((Curl_now().tv_sec +
  509|      0|                                     Curl_now().tv_usec) *
  510|      0|                                    (i + 4)) << 16;
  511|      0|      memcpy(&randb[i * sizeof(struct curltime)], &tv,
  512|      0|             sizeof(struct curltime));
  513|      0|    }
  514|      0|    RAND_add(randb, (int)len, (double)len/2);
  515|      0|  } while(!rand_enough());
  516|       |
  517|      0|  {
  518|       |    /* generates a default path for the random seed file */
  519|      0|    char fname[256];
  520|      0|    fname[0] = 0; /* blank it first */
  521|      0|    RAND_file_name(fname, sizeof(fname));
  522|      0|    if(fname[0]) {
  523|       |      /* we got a file name to try */
  524|      0|      RAND_load_file(fname, RAND_LOAD_LENGTH);
  525|      0|      if(rand_enough())
  526|      0|        return CURLE_OK;
  527|      0|    }
  528|      0|  }
  529|       |
  530|      0|  infof(data, "libcurl is now using a weak random seed!");
  531|      0|  return (rand_enough() ? CURLE_OK :
  532|      0|          CURLE_SSL_CONNECT_ERROR /* confusing error code */);
  533|      0|#endif
  534|      0|}
openssl.c:rand_enough:
  436|  2.65k|{
  437|  2.65k|  return (0 != RAND_status()) ? TRUE : FALSE;
  438|  2.65k|}
openssl.c:ossl_close:
 1437|  4.89k|{
 1438|  4.89k|  ossl_closeone(data, conn, &conn->ssl[sockindex]);
 1439|  4.89k|#ifndef CURL_DISABLE_PROXY
 1440|  4.89k|  ossl_closeone(data, conn, &conn->proxy_ssl[sockindex]);
 1441|  4.89k|#endif
 1442|  4.89k|}
openssl.c:ossl_closeone:
 1410|  9.78k|{
 1411|  9.78k|  struct ssl_backend_data *backend = connssl->backend;
 1412|  9.78k|  if(backend->handle) {
 1413|      0|    char buf[32];
 1414|      0|    set_logger(conn, data);
 1415|       |
 1416|       |    /* Maybe the server has already sent a close notify alert.
 1417|       |       Read it to avoid an RST on the TCP connection. */
 1418|      0|    (void)SSL_read(backend->handle, buf, (int)sizeof(buf));
 1419|       |
 1420|      0|    (void)SSL_shutdown(backend->handle);
 1421|      0|    SSL_set_connect_state(backend->handle);
 1422|       |
 1423|      0|    SSL_free(backend->handle);
 1424|      0|    backend->handle = NULL;
 1425|      0|  }
 1426|  9.78k|  if(backend->ctx) {
 1427|      0|    SSL_CTX_free(backend->ctx);
 1428|      0|    backend->ctx = NULL;
 1429|      0|  }
 1430|  9.78k|}
openssl.c:ossl_close_all:
 1561|  4.57k|{
 1562|  4.57k|#ifdef USE_OPENSSL_ENGINE
 1563|  4.57k|  if(data->state.engine) {
 1564|      0|    ENGINE_finish(data->state.engine);
 1565|      0|    ENGINE_free(data->state.engine);
 1566|      0|    data->state.engine = NULL;
 1567|      0|  }
 1568|       |#else
 1569|       |  (void)data;
 1570|       |#endif
 1571|  4.57k|#if !defined(HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED) && \
 1572|  4.57k|  defined(HAVE_ERR_REMOVE_THREAD_STATE)
 1573|       |  /* OpenSSL 1.0.1 and 1.0.2 build an error queue that is stored per-thread
 1574|       |     so we need to clean it here in case the thread will be killed. All OpenSSL
 1575|       |     code should extract the error in association with the error so clearing
 1576|       |     this queue here should be harmless at worst. */
 1577|  4.57k|  ERR_remove_thread_state(NULL);
 1578|  4.57k|#endif
 1579|  4.57k|}
openssl.c:ossl_associate_connection:
 4485|  4.80k|{
 4486|  4.80k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4487|  4.80k|  struct ssl_backend_data *backend = connssl->backend;
 4488|       |
 4489|       |  /* If we don't have SSL context, do nothing. */
 4490|  4.80k|  if(!backend->handle)
 4491|  4.80k|    return;
 4492|       |
 4493|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4494|      0|    int data_idx = ossl_get_ssl_data_index();
 4495|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4496|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4497|      0|    int proxy_idx = ossl_get_proxy_index();
 4498|       |
 4499|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4500|      0|       proxy_idx >= 0) {
 4501|       |      /* Store the data needed for the "new session" callback.
 4502|       |       * The sockindex is stored as a pointer to an array element. */
 4503|      0|      SSL_set_ex_data(backend->handle, data_idx, data);
 4504|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, conn);
 4505|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
 4506|      0|#ifndef CURL_DISABLE_PROXY
 4507|      0|      SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:
 4508|      0|                      NULL);
 4509|       |#else
 4510|       |      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4511|       |#endif
 4512|      0|    }
 4513|      0|  }
 4514|      0|}
openssl.c:ossl_disassociate_connection:
 4526|  4.80k|{
 4527|  4.80k|  struct connectdata *conn = data->conn;
 4528|  4.80k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4529|  4.80k|  struct ssl_backend_data *backend = connssl->backend;
 4530|       |
 4531|       |  /* If we don't have SSL context, do nothing. */
 4532|  4.80k|  if(!backend->handle)
 4533|  4.80k|    return;
 4534|       |
 4535|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4536|      0|    int data_idx = ossl_get_ssl_data_index();
 4537|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4538|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4539|      0|    int proxy_idx = ossl_get_proxy_index();
 4540|       |
 4541|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4542|      0|       proxy_idx >= 0) {
 4543|       |      /* Disable references to data in "new session" callback to avoid
 4544|       |       * accessing a stale pointer. */
 4545|      0|      SSL_set_ex_data(backend->handle, data_idx, NULL);
 4546|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
 4547|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
 4548|      0|      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4549|      0|    }
 4550|      0|  }
 4551|      0|}

Curl_clone_primary_ssl_config:
  168|  4.71k|{
  169|  4.71k|  dest->version = source->version;
  170|  4.71k|  dest->version_max = source->version_max;
  171|  4.71k|  dest->verifypeer = source->verifypeer;
  172|  4.71k|  dest->verifyhost = source->verifyhost;
  173|  4.71k|  dest->verifystatus = source->verifystatus;
  174|  4.71k|  dest->sessionid = source->sessionid;
  175|       |
  176|  4.71k|  CLONE_BLOB(cert_blob);
  177|  4.71k|  CLONE_BLOB(ca_info_blob);
  178|  4.71k|  CLONE_BLOB(issuercert_blob);
  179|  4.71k|  CLONE_STRING(CApath);
  180|  4.71k|  CLONE_STRING(CAfile);
  181|  4.71k|  CLONE_STRING(issuercert);
  182|  4.71k|  CLONE_STRING(clientcert);
  183|  4.71k|  CLONE_STRING(random_file);
  184|  4.71k|  CLONE_STRING(egdsocket);
  185|  4.71k|  CLONE_STRING(cipher_list);
  186|  4.71k|  CLONE_STRING(cipher_list13);
  187|  4.71k|  CLONE_STRING(pinned_key);
  188|  4.71k|  CLONE_STRING(curves);
  189|       |
  190|  4.71k|  return TRUE;
  191|  4.71k|}
Curl_free_primary_ssl_config:
  194|  4.89k|{
  195|  4.89k|  Curl_safefree(sslc->CApath);
  196|  4.89k|  Curl_safefree(sslc->CAfile);
  197|  4.89k|  Curl_safefree(sslc->issuercert);
  198|  4.89k|  Curl_safefree(sslc->clientcert);
  199|  4.89k|  Curl_safefree(sslc->random_file);
  200|  4.89k|  Curl_safefree(sslc->egdsocket);
  201|  4.89k|  Curl_safefree(sslc->cipher_list);
  202|  4.89k|  Curl_safefree(sslc->cipher_list13);
  203|  4.89k|  Curl_safefree(sslc->pinned_key);
  204|  4.89k|  Curl_safefree(sslc->cert_blob);
  205|  4.89k|  Curl_safefree(sslc->ca_info_blob);
  206|  4.89k|  Curl_safefree(sslc->issuercert_blob);
  207|  4.89k|  Curl_safefree(sslc->curves);
  208|  4.89k|}
Curl_ssl_backend:
  215|  4.57k|{
  216|  4.57k|#ifdef USE_SSL
  217|  4.57k|  multissl_setup(NULL);
  218|  4.57k|  return Curl_ssl->info.id;
  219|       |#else
  220|       |  return (int)CURLSSLBACKEND_NONE;
  221|       |#endif
  222|  4.57k|}
Curl_ssl_init:
  236|      1|{
  237|       |  /* make sure this is only done once */
  238|      1|  if(init_ssl)
  239|      0|    return 1;
  240|      1|  init_ssl = TRUE; /* never again */
  241|       |
  242|      1|  return Curl_ssl->init();
  243|      1|}
Curl_ssl_kill_session:
  474|  10.9k|{
  475|  10.9k|  if(session->sessionid) {
  476|       |    /* defensive check */
  477|       |
  478|       |    /* free the ID the SSL-layer specific way */
  479|      0|    Curl_ssl->session_free(session->sessionid);
  480|       |
  481|      0|    session->sessionid = NULL;
  482|      0|    session->age = 0; /* fresh */
  483|       |
  484|      0|    Curl_free_primary_ssl_config(&session->ssl_config);
  485|       |
  486|      0|    Curl_safefree(session->name);
  487|      0|    Curl_safefree(session->conn_to_host);
  488|      0|  }
  489|  10.9k|}
Curl_ssl_associate_conn:
  628|  4.80k|{
  629|  4.80k|  if(Curl_ssl->associate_connection) {
  630|  4.80k|    Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);
  631|  4.80k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  632|      0|      Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);
  633|  4.80k|  }
  634|  4.80k|}
Curl_ssl_detach_conn:
  638|  4.80k|{
  639|  4.80k|  if(Curl_ssl->disassociate_connection) {
  640|  4.80k|    Curl_ssl->disassociate_connection(data, FIRSTSOCKET);
  641|  4.80k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  642|      0|      Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);
  643|  4.80k|  }
  644|  4.80k|}
Curl_ssl_close_all:
  647|  4.57k|{
  648|       |  /* kill the session ID cache if not shared */
  649|  4.57k|  if(data->state.session && !SSLSESSION_SHARED(data)) {
  650|  2.18k|    size_t i;
  651|  13.1k|    for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++)
  652|       |      /* the single-killer function handles empty table slots */
  653|  10.9k|      Curl_ssl_kill_session(&data->state.session[i]);
  654|       |
  655|       |    /* free the cache data */
  656|  2.18k|    Curl_safefree(data->state.session);
  657|  2.18k|  }
  658|       |
  659|  4.57k|  Curl_ssl->close_all(data);
  660|  4.57k|}
Curl_ssl_close:
  682|  4.89k|{
  683|  4.89k|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
  684|  4.89k|  Curl_ssl->close_one(data, conn, sockindex);
  685|  4.89k|  conn->ssl[sockindex].state = ssl_connection_none;
  686|  4.89k|}
Curl_ssl_initsessions:
  728|  2.18k|{
  729|  2.18k|  struct Curl_ssl_session *session;
  730|       |
  731|  2.18k|  if(data->state.session)
  732|       |    /* this is just a precaution to prevent multiple inits */
  733|      0|    return CURLE_OK;
  734|       |
  735|  2.18k|  session = calloc(amount, sizeof(struct Curl_ssl_session));
  736|  2.18k|  if(!session)
  737|      0|    return CURLE_OUT_OF_MEMORY;
  738|       |
  739|       |  /* store the info in the SSL section */
  740|  2.18k|  data->set.general_ssl.max_ssl_sessions = amount;
  741|  2.18k|  data->state.session = session;
  742|  2.18k|  data->state.sessionage = 1; /* this is brand new */
  743|  2.18k|  return CURLE_OK;
  744|  2.18k|}
Curl_ssl_data_pending:
  772|  1.84k|{
  773|  1.84k|  return Curl_ssl->data_pending(conn, connindex);
  774|  1.84k|}
Curl_ssl_free_certinfo:
  777|  11.3k|{
  778|  11.3k|  struct curl_certinfo *ci = &data->info.certs;
  779|       |
  780|  11.3k|  if(ci->num_of_certs) {
  781|       |    /* free all individual lists used */
  782|      0|    int i;
  783|      0|    for(i = 0; i<ci->num_of_certs; i++) {
  784|      0|      curl_slist_free_all(ci->certinfo[i]);
  785|      0|      ci->certinfo[i] = NULL;
  786|      0|    }
  787|       |
  788|      0|    free(ci->certinfo); /* free the actual array too */
  789|      0|    ci->certinfo = NULL;
  790|      0|    ci->num_of_certs = 0;
  791|      0|  }
  792|  11.3k|}
Curl_ssl_random:
  870|  2.82k|{
  871|  2.82k|  return Curl_ssl->random(data, entropy, length);
  872|  2.82k|}
vtls.c:blobdup:
   96|  14.1k|{
   97|  14.1k|  DEBUGASSERT(dest);
   98|  14.1k|  DEBUGASSERT(!*dest);
   99|  14.1k|  if(src) {
  100|       |    /* only if there's data to dupe! */
  101|      0|    struct curl_blob *d;
  102|      0|    d = malloc(sizeof(struct curl_blob) + src->len);
  103|      0|    if(!d)
  104|      0|      return CURLE_OUT_OF_MEMORY;
  105|      0|    d->len = src->len;
  106|       |    /* Always duplicate because the connection may survive longer than the
  107|       |       handle that passed in the blob. */
  108|      0|    d->flags = CURL_BLOB_COPY;
  109|      0|    d->data = (void *)((char *)d + sizeof(struct curl_blob));
  110|      0|    memcpy(d->data, src->data, src->len);
  111|      0|    *dest = d;
  112|      0|  }
  113|  14.1k|  return CURLE_OK;
  114|  14.1k|}
vtls.c:multissl_setup:
 1389|  4.57k|{
 1390|  4.57k|  const char *env;
 1391|  4.57k|  char *env_tmp;
 1392|       |
 1393|  4.57k|  if(Curl_ssl != &Curl_ssl_multi)
 1394|  4.57k|    return 1;
 1395|       |
 1396|      0|  if(backend) {
 1397|      0|    Curl_ssl = backend;
 1398|      0|    return 0;
 1399|      0|  }
 1400|       |
 1401|      0|  if(!available_backends[0])
 1402|      0|    return 1;
 1403|       |
 1404|      0|  env = env_tmp = curl_getenv("CURL_SSL_BACKEND");
 1405|       |#ifdef CURL_DEFAULT_SSL_BACKEND
 1406|       |  if(!env)
 1407|       |    env = CURL_DEFAULT_SSL_BACKEND;
 1408|       |#endif
 1409|      0|  if(env) {
 1410|      0|    int i;
 1411|      0|    for(i = 0; available_backends[i]; i++) {
 1412|      0|      if(strcasecompare(env, available_backends[i]->info.name)) {
 1413|      0|        Curl_ssl = available_backends[i];
 1414|      0|        free(env_tmp);
 1415|      0|        return 0;
 1416|      0|      }
 1417|      0|    }
 1418|      0|  }
 1419|       |
 1420|       |  /* Fall back to first available backend */
 1421|      0|  Curl_ssl = available_backends[0];
 1422|      0|  free(env_tmp);
 1423|      0|  return 0;
 1424|      0|}

curlx_ultous:
   63|  2.35k|{
   64|       |#ifdef __INTEL_COMPILER
   65|       |#  pragma warning(push)
   66|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   67|       |#endif
   68|       |
   69|  2.35k|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_USHORT);
   70|  2.35k|  return (unsigned short)(ulnum & (unsigned long) CURL_MASK_USHORT);
   71|       |
   72|       |#ifdef __INTEL_COMPILER
   73|       |#  pragma warning(pop)
   74|       |#endif
   75|  2.35k|}
curlx_ultouc:
   82|    798|{
   83|       |#ifdef __INTEL_COMPILER
   84|       |#  pragma warning(push)
   85|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   86|       |#endif
   87|       |
   88|    798|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_UCHAR);
   89|    798|  return (unsigned char)(ulnum & (unsigned long) CURL_MASK_UCHAR);
   90|       |
   91|       |#ifdef __INTEL_COMPILER
   92|       |#  pragma warning(pop)
   93|       |#endif
   94|    798|}
curlx_uztosi:
  123|  2.82k|{
  124|       |#ifdef __INTEL_COMPILER
  125|       |#  pragma warning(push)
  126|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  127|       |#endif
  128|       |
  129|  2.82k|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_SINT);
  130|  2.82k|  return (int)(uznum & (size_t) CURL_MASK_SINT);
  131|       |
  132|       |#ifdef __INTEL_COMPILER
  133|       |#  pragma warning(pop)
  134|       |#endif
  135|  2.82k|}
curlx_uztoui:
  163|    348|{
  164|       |#ifdef __INTEL_COMPILER
  165|       |# pragma warning(push)
  166|       |# pragma warning(disable:810) /* conversion may lose significant bits */
  167|       |#endif
  168|       |
  169|    348|#if UINT_MAX < SIZE_T_MAX
  170|    348|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_UINT);
  171|    348|#endif
  172|    348|  return (unsigned int)(uznum & (size_t) CURL_MASK_UINT);
  173|       |
  174|       |#ifdef __INTEL_COMPILER
  175|       |# pragma warning(pop)
  176|       |#endif
  177|    348|}
curlx_sltosi:
  184|  2.53k|{
  185|       |#ifdef __INTEL_COMPILER
  186|       |#  pragma warning(push)
  187|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  188|       |#endif
  189|       |
  190|  2.53k|  DEBUGASSERT(slnum >= 0);
  191|  2.53k|#if INT_MAX < LONG_MAX
  192|  2.53k|  DEBUGASSERT((unsigned long) slnum <= (unsigned long) CURL_MASK_SINT);
  193|  2.53k|#endif
  194|  2.53k|  return (int)(slnum & (long) CURL_MASK_SINT);
  195|       |
  196|       |#ifdef __INTEL_COMPILER
  197|       |#  pragma warning(pop)
  198|       |#endif
  199|  2.53k|}
curlx_sotouz:
  267|  23.7k|{
  268|       |#ifdef __INTEL_COMPILER
  269|       |#  pragma warning(push)
  270|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  271|       |#endif
  272|       |
  273|  23.7k|  DEBUGASSERT(sonum >= 0);
  274|  23.7k|  return (size_t)(sonum & (curl_off_t) CURL_MASK_USIZE_T);
  275|       |
  276|       |#ifdef __INTEL_COMPILER
  277|       |#  pragma warning(pop)
  278|       |#endif
  279|  23.7k|}

Curl_wildcard_init:
   42|      1|{
   43|      1|  Curl_llist_init(&wc->filelist, fileinfo_dtor);
   44|      1|  wc->state = CURLWC_INIT;
   45|       |
   46|      1|  return CURLE_OK;
   47|      1|}
Curl_wildcard_dtor:
   50|  6.82k|{
   51|  6.82k|  if(!wc)
   52|      0|    return;
   53|       |
   54|  6.82k|  if(wc->dtor) {
   55|      0|    wc->dtor(wc->protdata);
   56|      0|    wc->dtor = ZERO_NULL;
   57|      0|    wc->protdata = NULL;
   58|      0|  }
   59|  6.82k|  DEBUGASSERT(wc->protdata == NULL);
   60|       |
   61|  6.82k|  Curl_llist_destroy(&wc->filelist, NULL);
   62|       |
   63|       |
   64|  6.82k|  free(wc->path);
   65|  6.82k|  wc->path = NULL;
   66|  6.82k|  free(wc->pattern);
   67|  6.82k|  wc->pattern = NULL;
   68|       |
   69|  6.82k|  wc->customptr = NULL;
   70|  6.82k|  wc->state = CURLWC_INIT;
   71|  6.82k|}

LLVMFuzzerTestOneInput:
   35|  2.31k|{
   36|  2.31k|  int rc = 0;
   37|  2.31k|  int tlv_rc;
   38|  2.31k|  FUZZ_DATA fuzz;
   39|  2.31k|  TLV tlv;
   40|       |
   41|       |  /* Ignore SIGPIPE errors. We'll handle the errors ourselves. */
   42|  2.31k|  signal(SIGPIPE, SIG_IGN);
   43|       |
   44|       |  /* Have to set all fields to zero before getting to the terminate function */
   45|  2.31k|  memset(&fuzz, 0, sizeof(FUZZ_DATA));
   46|       |
   47|  2.31k|  if(size < sizeof(TLV_RAW)) {
   48|       |    /* Not enough data for a single TLV - don't continue */
   49|      1|    goto EXIT_LABEL;
   50|      1|  }
   51|       |
   52|       |  /* Try to initialize the fuzz data */
   53|  2.31k|  FTRY(fuzz_initialize_fuzz_data(&fuzz, data, size));
   54|       |
   55|  2.31k|  for(tlv_rc = fuzz_get_first_tlv(&fuzz, &tlv);
   56|  14.1k|      tlv_rc == 0;
   57|  11.8k|      tlv_rc = fuzz_get_next_tlv(&fuzz, &tlv)) {
   58|       |
   59|       |    /* Have the TLV in hand. Parse the TLV. */
   60|  11.8k|    rc = fuzz_parse_tlv(&fuzz, &tlv);
   61|       |
   62|  11.8k|    if(rc != 0) {
   63|       |      /* Failed to parse the TLV. Can't continue. */
   64|     33|      goto EXIT_LABEL;
   65|     33|    }
   66|  11.8k|  }
   67|       |
   68|  2.28k|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
   69|       |    /* A TLV call failed. Can't continue. */
   70|     27|    goto EXIT_LABEL;
   71|     27|  }
   72|       |
   73|       |  /* Set up the standard easy options. */
   74|  2.25k|  FTRY(fuzz_set_easy_options(&fuzz));
   75|       |
   76|       |  /**
   77|       |   * Add in more curl options that have been accumulated over possibly
   78|       |   * multiple TLVs.
   79|       |   */
   80|  2.25k|  if(fuzz.header_list != NULL) {
   81|     99|    curl_easy_setopt(fuzz.easy, CURLOPT_HTTPHEADER, fuzz.header_list);
   82|     99|  }
   83|       |
   84|  2.25k|  if(fuzz.mail_recipients_list != NULL) {
   85|      7|    curl_easy_setopt(fuzz.easy, CURLOPT_MAIL_RCPT, fuzz.mail_recipients_list);
   86|      7|  }
   87|       |
   88|  2.25k|  if(fuzz.mime != NULL) {
   89|    159|    curl_easy_setopt(fuzz.easy, CURLOPT_MIMEPOST, fuzz.mime);
   90|    159|  }
   91|       |
   92|       |  /* Run the transfer. */
   93|  2.25k|  fuzz_handle_transfer(&fuzz);
   94|       |
   95|  2.31k|EXIT_LABEL:
   96|       |
   97|  2.31k|  fuzz_terminate_fuzz_data(&fuzz);
   98|       |
   99|       |  /* This function must always return 0. Non-zero codes are reserved. */
  100|  2.31k|  return 0;
  101|  2.25k|}
_Z6to_u32PKh:
  107|  17.7k|{
  108|  17.7k|  uint32_t u;
  109|  17.7k|  u = (b[0] << 24) + (b[1] << 16) + (b[2] << 8) + b[3];
  110|  17.7k|  return u;
  111|  17.7k|}
_Z6to_u16PKh:
  117|  16.7k|{
  118|  16.7k|  uint16_t u;
  119|  16.7k|  u = (b[0] << 8) + b[1];
  120|  16.7k|  return u;
  121|  16.7k|}
_Z25fuzz_initialize_fuzz_dataP9fuzz_dataPKhm:
  129|  2.31k|{
  130|  2.31k|  int rc = 0;
  131|  2.31k|  int ii;
  132|       |
  133|       |  /* Initialize the fuzz data. */
  134|  2.31k|  memset(fuzz, 0, sizeof(FUZZ_DATA));
  135|       |
  136|       |  /* Create an easy handle. This will have all of the settings configured on
  137|       |     it. */
  138|  2.31k|  fuzz->easy = curl_easy_init();
  139|  2.31k|  FCHECK(fuzz->easy != NULL);
  140|       |
  141|       |  /* Set up the state parser */
  142|  2.31k|  fuzz->state.data = data;
  143|  2.31k|  fuzz->state.data_len = data_len;
  144|       |
  145|       |  /* Set up the state of the server sockets. */
  146|  6.94k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  147|  4.63k|    fuzz->sockman[ii].index = ii;
  148|  4.63k|    fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  149|  4.63k|  }
  150|       |
  151|       |  /* Check for verbose mode. */
  152|  2.31k|  fuzz->verbose = (getenv("FUZZ_VERBOSE") != NULL);
  153|       |
  154|  2.31k|EXIT_LABEL:
  155|       |
  156|  2.31k|  return rc;
  157|  2.31k|}
_Z21fuzz_set_easy_optionsP9fuzz_data:
  163|  2.25k|{
  164|  2.25k|  int rc = 0;
  165|  2.25k|  unsigned long allowed_protocols;
  166|       |
  167|       |  /* Set some standard options on the CURL easy handle. We need to override the
  168|       |     socket function so that we create our own sockets to present to CURL. */
  169|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy,
  170|  2.25k|                        CURLOPT_OPENSOCKETFUNCTION,
  171|  2.25k|                        fuzz_open_socket));
  172|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_OPENSOCKETDATA, fuzz));
  173|       |
  174|       |  /* In case something tries to set a socket option, intercept this. */
  175|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy,
  176|  2.25k|                        CURLOPT_SOCKOPTFUNCTION,
  177|  2.25k|                        fuzz_sockopt_callback));
  178|       |
  179|       |  /* Set the standard read function callback. */
  180|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy,
  181|  2.25k|                        CURLOPT_READFUNCTION,
  182|  2.25k|                        fuzz_read_callback));
  183|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_READDATA, fuzz));
  184|       |
  185|       |  /* Set the standard write function callback. */
  186|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy,
  187|  2.25k|                        CURLOPT_WRITEFUNCTION,
  188|  2.25k|                        fuzz_write_callback));
  189|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_WRITEDATA, fuzz));
  190|       |
  191|       |  /* Set the cookie jar so cookies are tested. */
  192|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_COOKIEJAR, FUZZ_COOKIE_JAR_PATH));
  193|       |
  194|       |  /* Time out requests quickly. */
  195|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_TIMEOUT_MS, 200L));
  196|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_SERVER_RESPONSE_TIMEOUT, 1L));
  197|       |
  198|       |  /* Can enable verbose mode by having the environment variable FUZZ_VERBOSE. */
  199|  2.25k|  if(fuzz->verbose) {
  200|      0|    FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_VERBOSE, 1L));
  201|      0|  }
  202|       |
  203|       |  /* Force resolution of all addresses to a specific IP address. */
  204|  2.25k|  fuzz->connect_to_list = curl_slist_append(NULL, "::127.0.1.127:");
  205|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_CONNECT_TO, fuzz->connect_to_list));
  206|       |
  207|       |  /* Limit the protocols in use by this fuzzer. */
  208|  2.25k|  FTRY(fuzz_set_allowed_protocols(fuzz));
  209|       |
  210|  2.25k|EXIT_LABEL:
  211|       |
  212|  2.25k|  return rc;
  213|  2.25k|}
_Z24fuzz_terminate_fuzz_dataP9fuzz_data:
  219|  2.31k|{
  220|  2.31k|  int ii;
  221|       |
  222|  2.31k|  fuzz_free((void **)&fuzz->postfields);
  223|       |
  224|  6.94k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  225|  4.63k|    if(fuzz->sockman[ii].fd_state != FUZZ_SOCK_CLOSED) {
  226|  2.30k|      close(fuzz->sockman[ii].fd);
  227|  2.30k|      fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  228|  2.30k|    }
  229|  4.63k|  }
  230|       |
  231|  2.31k|  if(fuzz->connect_to_list != NULL) {
  232|  2.25k|    curl_slist_free_all(fuzz->connect_to_list);
  233|  2.25k|    fuzz->connect_to_list = NULL;
  234|  2.25k|  }
  235|       |
  236|  2.31k|  if(fuzz->header_list != NULL) {
  237|    100|    curl_slist_free_all(fuzz->header_list);
  238|    100|    fuzz->header_list = NULL;
  239|    100|  }
  240|       |
  241|  2.31k|  if(fuzz->mail_recipients_list != NULL) {
  242|      7|    curl_slist_free_all(fuzz->mail_recipients_list);
  243|      7|    fuzz->mail_recipients_list = NULL;
  244|      7|  }
  245|       |
  246|  2.31k|  if(fuzz->mime != NULL) {
  247|    174|    curl_mime_free(fuzz->mime);
  248|    174|    fuzz->mime = NULL;
  249|    174|  }
  250|       |
  251|  2.31k|  if(fuzz->easy != NULL) {
  252|  2.31k|    curl_easy_cleanup(fuzz->easy);
  253|  2.31k|    fuzz->easy = NULL;
  254|  2.31k|  }
  255|  2.31k|}
_Z9fuzz_freePPv:
  261|  14.4k|{
  262|  14.4k|  if(*ptr != NULL) {
  263|  5.36k|    free(*ptr);
  264|  5.36k|    *ptr = NULL;
  265|  5.36k|  }
  266|  14.4k|}
_Z20fuzz_handle_transferP9fuzz_data:
  273|  2.25k|{
  274|  2.25k|  int rc = 0;
  275|  2.25k|  CURLM *multi_handle;
  276|  2.25k|  int still_running; /* keep number of running handles */
  277|  2.25k|  CURLMsg *msg; /* for picking up messages with the transfer status */
  278|  2.25k|  int msgs_left; /* how many messages are left */
  279|  2.25k|  int double_timeout = 0;
  280|  2.25k|  fd_set fdread;
  281|  2.25k|  fd_set fdwrite;
  282|  2.25k|  fd_set fdexcep;
  283|  2.25k|  struct timeval timeout;
  284|  2.25k|  int select_rc;
  285|  2.25k|  CURLMcode mc;
  286|  2.25k|  int maxfd = -1;
  287|  2.25k|  long curl_timeo = -1;
  288|  2.25k|  int ii;
  289|  2.25k|  FUZZ_SOCKET_MANAGER *sman[FUZZ_NUM_CONNECTIONS];
  290|       |
  291|  6.76k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  292|  4.51k|    sman[ii] = &fuzz->sockman[ii];
  293|       |
  294|       |    /* Set up the starting index for responses. */
  295|  4.51k|    sman[ii]->response_index = 1;
  296|  4.51k|  }
  297|       |
  298|       |  /* init a multi stack */
  299|  2.25k|  multi_handle = curl_multi_init();
  300|       |
  301|       |  /* add the individual transfers */
  302|  2.25k|  curl_multi_add_handle(multi_handle, fuzz->easy);
  303|       |
  304|       |  /* Do an initial process. This might end the transfer immediately. */
  305|  2.25k|  curl_multi_perform(multi_handle, &still_running);
  306|  2.25k|  FV_PRINTF(fuzz,
  307|  2.25k|            "FUZZ: Initial perform; still running? %d \n",
  308|  2.25k|            still_running);
  309|       |
  310|  3.24k|  while(still_running) {
  311|       |    /* Reset the sets of file descriptors. */
  312|  1.01k|    FD_ZERO(&fdread);
  313|  1.01k|    FD_ZERO(&fdwrite);
  314|  1.01k|    FD_ZERO(&fdexcep);
  315|       |
  316|       |    /* Set a timeout of 10ms. This is lower than recommended by the multi guide
  317|       |       but we're not going to any remote servers, so everything should complete
  318|       |       very quickly. */
  319|  1.01k|    timeout.tv_sec = 0;
  320|  1.01k|    timeout.tv_usec = 10000;
  321|       |
  322|       |    /* get file descriptors from the transfers */
  323|  1.01k|    mc = curl_multi_fdset(multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);
  324|  1.01k|    if(mc != CURLM_OK) {
  325|      0|      fprintf(stderr, "curl_multi_fdset() failed, code %d.\n", mc);
  326|      0|      rc = -1;
  327|      0|      break;
  328|      0|    }
  329|       |
  330|  3.03k|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  331|       |      /* Add the socket FD into the readable set if connected. */
  332|  2.02k|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN) {
  333|    283|        FD_SET(sman[ii]->fd, &fdread);
  334|       |
  335|       |        /* Work out the maximum FD between the cURL file descriptors and the
  336|       |           server FD. */
  337|    283|        maxfd = FUZZ_MAX(sman[ii]->fd, maxfd);
  338|    283|      }
  339|  2.02k|    }
  340|       |
  341|       |    /* Work out what file descriptors need work. */
  342|  1.01k|    rc = fuzz_select(maxfd + 1, &fdread, &fdwrite, &fdexcep, &timeout);
  343|       |
  344|  1.01k|    if(rc == -1) {
  345|       |      /* Had an issue while selecting a file descriptor. Let's just exit. */
  346|      0|      FV_PRINTF(fuzz, "FUZZ: select failed, exiting \n");
  347|      0|      break;
  348|      0|    }
  349|  1.01k|    else if(rc == 0) {
  350|     36|      FV_PRINTF(fuzz,
  351|     36|                "FUZZ: Timed out; double timeout? %d \n",
  352|     36|                double_timeout);
  353|       |
  354|       |      /* Timed out. */
  355|     36|      if(double_timeout == 1) {
  356|       |        /* We don't expect multiple timeouts in a row. If there are double
  357|       |           timeouts then exit. */
  358|     18|        break;
  359|     18|      }
  360|     18|      else {
  361|       |        /* Set the timeout flag for the next time we select(). */
  362|     18|        double_timeout = 1;
  363|     18|      }
  364|     36|    }
  365|    976|    else {
  366|       |      /* There's an active file descriptor. Reset the timeout flag. */
  367|    976|      double_timeout = 0;
  368|    976|    }
  369|       |
  370|       |    /* Check to see if a server file descriptor is readable. If it is,
  371|       |       then send the next response from the fuzzing data. */
  372|  2.98k|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  373|  1.98k|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN &&
  374|  1.98k|         FD_ISSET(sman[ii]->fd, &fdread)) {
  375|    246|        rc = fuzz_send_next_response(fuzz, sman[ii]);
  376|    246|        if(rc != 0) {
  377|       |          /* Failed to send a response. Break out here. */
  378|      1|          break;
  379|      1|        }
  380|    246|      }
  381|  1.98k|    }
  382|       |
  383|    994|    curl_multi_perform(multi_handle, &still_running);
  384|    994|  }
  385|       |
  386|       |  /* Remove the easy handle from the multi stack. */
  387|  2.25k|  curl_multi_remove_handle(multi_handle, fuzz->easy);
  388|       |
  389|       |  /* Clean up the multi handle - the top level function will handle the easy
  390|       |     handle. */
  391|  2.25k|  curl_multi_cleanup(multi_handle);
  392|       |
  393|  2.25k|  return(rc);
  394|  2.25k|}
_Z23fuzz_send_next_responseP9fuzz_dataP19fuzz_socket_manager:
  400|    246|{
  401|    246|  int rc = 0;
  402|    246|  ssize_t ret_in;
  403|    246|  ssize_t ret_out;
  404|    246|  char buffer[8192];
  405|    246|  const uint8_t *data;
  406|    246|  size_t data_len;
  407|       |
  408|       |  /* Need to read all data sent by the client so the file descriptor becomes
  409|       |     unreadable. Because the file descriptor is non-blocking we won't just
  410|       |     hang here. */
  411|    499|  do {
  412|    499|    ret_in = read(sman->fd, buffer, sizeof(buffer));
  413|    499|    if(fuzz->verbose && ret_in > 0) {
  414|      0|      printf("FUZZ[%d]: Received %zu bytes \n==>\n", sman->index, ret_in);
  415|      0|      fwrite(buffer, ret_in, 1, stdout);
  416|      0|      printf("\n<==\n");
  417|      0|    }
  418|    499|  } while (ret_in > 0);
  419|       |
  420|       |  /* Now send a response to the request that the client just made. */
  421|    246|  FV_PRINTF(fuzz,
  422|    246|            "FUZZ[%d]: Sending next response: %d \n",
  423|    246|            sman->index,
  424|    246|            sman->response_index);
  425|    246|  data = sman->responses[sman->response_index].data;
  426|    246|  data_len = sman->responses[sman->response_index].data_len;
  427|       |
  428|    246|  if(data != NULL) {
  429|    246|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  430|       |      /* Failed to write the data back to the client. Prevent any further
  431|       |         testing. */
  432|      1|      rc = -1;
  433|      1|    }
  434|    246|  }
  435|       |
  436|       |  /* Work out if there are any more responses. If not, then shut down the
  437|       |     server. */
  438|    246|  sman->response_index++;
  439|       |
  440|    246|  if(sman->response_index >= TLV_MAX_NUM_RESPONSES ||
  441|    246|     sman->responses[sman->response_index].data == NULL) {
  442|    200|    FV_PRINTF(fuzz,
  443|    200|              "FUZZ[%d]: Shutting down server socket: %d \n",
  444|    200|              sman->index,
  445|    200|              sman->fd);
  446|    200|    shutdown(sman->fd, SHUT_WR);
  447|    200|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  448|    200|  }
  449|       |
  450|    246|  return(rc);
  451|    246|}
_Z11fuzz_selectiP6fd_setS0_S0_P7timeval:
  460|  1.01k|                struct timeval *timeout) {
  461|  1.01k|  return select(nfds, readfds, writefds, exceptfds, timeout);
  462|  1.01k|}
_Z26fuzz_set_allowed_protocolsP9fuzz_data:
  468|  2.25k|{
  469|  2.25k|  int rc = 0;
  470|  2.25k|  unsigned long allowed_protocols = 0;
  471|       |
  472|       |#ifdef FUZZ_PROTOCOLS_ALL
  473|       |  /* Do not allow telnet currently as it accepts input from stdin. */
  474|       |  allowed_protocols |= CURLPROTO_ALL & ~CURLPROTO_TELNET;
  475|       |#endif
  476|       |#ifdef FUZZ_PROTOCOLS_DICT
  477|       |  allowed_protocols |= CURLPROTO_DICT;
  478|       |#endif
  479|       |#ifdef FUZZ_PROTOCOLS_FILE
  480|       |  allowed_protocols |= CURLPROTO_FILE;
  481|       |#endif
  482|       |#ifdef FUZZ_PROTOCOLS_FTP
  483|       |  allowed_protocols |= CURLPROTO_FTP;
  484|       |  allowed_protocols |= CURLPROTO_FTPS;
  485|       |#endif
  486|       |#ifdef FUZZ_PROTOCOLS_GOPHER
  487|       |  allowed_protocols |= CURLPROTO_GOPHER;
  488|       |#endif
  489|  2.25k|#ifdef FUZZ_PROTOCOLS_HTTP
  490|  2.25k|  allowed_protocols |= CURLPROTO_HTTP;
  491|  2.25k|#endif
  492|       |#ifdef FUZZ_PROTOCOLS_HTTPS
  493|       |  allowed_protocols |= CURLPROTO_HTTPS;
  494|       |#endif
  495|       |#ifdef FUZZ_PROTOCOLS_IMAP
  496|       |  allowed_protocols |= CURLPROTO_IMAP;
  497|       |  allowed_protocols |= CURLPROTO_IMAPS;
  498|       |#endif
  499|       |#ifdef FUZZ_PROTOCOLS_LDAP
  500|       |  allowed_protocols |= CURLPROTO_LDAP;
  501|       |  allowed_protocols |= CURLPROTO_LDAPS;
  502|       |#endif
  503|       |#ifdef FUZZ_PROTOCOLS_MQTT
  504|       |  allowed_protocols |= CURLPROTO_MQTT;
  505|       |#endif
  506|       |#ifdef FUZZ_PROTOCOLS_POP3
  507|       |  allowed_protocols |= CURLPROTO_POP3;
  508|       |  allowed_protocols |= CURLPROTO_POP3S;
  509|       |#endif
  510|       |#ifdef FUZZ_PROTOCOLS_RTMP
  511|       |  allowed_protocols |= CURLPROTO_RTMP;
  512|       |  allowed_protocols |= CURLPROTO_RTMPE;
  513|       |  allowed_protocols |= CURLPROTO_RTMPS;
  514|       |  allowed_protocols |= CURLPROTO_RTMPT;
  515|       |  allowed_protocols |= CURLPROTO_RTMPTE;
  516|       |  allowed_protocols |= CURLPROTO_RTMPTS;
  517|       |#endif
  518|       |#ifdef FUZZ_PROTOCOLS_RTSP
  519|       |  allowed_protocols |= CURLPROTO_RTSP;
  520|       |#endif
  521|       |#ifdef FUZZ_PROTOCOLS_SCP
  522|       |  allowed_protocols |= CURLPROTO_SCP;
  523|       |#endif
  524|       |#ifdef FUZZ_PROTOCOLS_SFTP
  525|       |  allowed_protocols |= CURLPROTO_SFTP;
  526|       |#endif
  527|       |#ifdef FUZZ_PROTOCOLS_SMB
  528|       |  allowed_protocols |= CURLPROTO_SMB;
  529|       |  allowed_protocols |= CURLPROTO_SMBS;
  530|       |#endif
  531|       |#ifdef FUZZ_PROTOCOLS_SMTP
  532|       |  allowed_protocols |= CURLPROTO_SMTP;
  533|       |  allowed_protocols |= CURLPROTO_SMTPS;
  534|       |#endif
  535|       |#ifdef FUZZ_PROTOCOLS_TFTP
  536|       |  allowed_protocols |= CURLPROTO_TFTP;
  537|       |#endif
  538|       |
  539|  2.25k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_PROTOCOLS, allowed_protocols));
  540|       |
  541|  2.25k|EXIT_LABEL:
  542|       |
  543|  2.25k|  return rc;
  544|  2.25k|}

_Z16fuzz_open_socketPv12curlsocktypeP13curl_sockaddr:
   42|  2.35k|{
   43|  2.35k|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
   44|  2.35k|  int fds[2];
   45|  2.35k|  int flags;
   46|  2.35k|  int status;
   47|  2.35k|  const uint8_t *data;
   48|  2.35k|  size_t data_len;
   49|  2.35k|  struct sockaddr_un client_addr;
   50|  2.35k|  FUZZ_SOCKET_MANAGER *sman;
   51|       |
   52|       |  /* Handle unused parameters */
   53|  2.35k|  (void)purpose;
   54|  2.35k|  (void)address;
   55|       |
   56|  2.35k|  if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED &&
   57|  2.35k|     fuzz->sockman[1].fd_state != FUZZ_SOCK_CLOSED) {
   58|       |    /* Both sockets have already been opened. */
   59|     49|    return CURL_SOCKET_BAD;
   60|     49|  }
   61|  2.30k|  else if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED) {
   62|    207|    sman = &fuzz->sockman[1];
   63|    207|  }
   64|  2.10k|  else {
   65|  2.10k|    FV_PRINTF(fuzz, "FUZZ: Using socket manager 0 \n");
   66|  2.10k|    sman = &fuzz->sockman[0];
   67|  2.10k|  }
   68|  2.30k|  FV_PRINTF(fuzz, "FUZZ[%d]: Using socket manager %d \n",
   69|  2.30k|            sman->index,
   70|  2.30k|            sman->index);
   71|       |
   72|  2.30k|  if(socketpair(AF_UNIX, SOCK_STREAM, 0, fds)) {
   73|       |    /* Failed to create a pair of sockets. */
   74|      0|    return CURL_SOCKET_BAD;
   75|      0|  }
   76|       |
   77|  2.30k|  if(!FUZZ_VALID_SOCK(fds[0]) || !FUZZ_VALID_SOCK(fds[1])) {
   78|       |    /* One or more of the file descriptors is too large to fit in an fd_set,
   79|       |       so reject it here. Print out a message because this ought to be quite
   80|       |       rare. */
   81|      0|    printf("FUZZ[%d]: Not using file descriptors %d,%d as FD_SETSIZE is %d\n",
   82|      0|           sman->index,
   83|      0|           fds[0],
   84|      0|           fds[1],
   85|      0|           FD_SETSIZE);
   86|       |
   87|       |    /* Close the file descriptors so they don't leak. */
   88|      0|    close(fds[0]);
   89|      0|    close(fds[1]);
   90|       |
   91|      0|    return CURL_SOCKET_BAD;
   92|      0|  }
   93|       |
   94|       |  /* Make the server non-blocking. */
   95|  2.30k|  flags = fcntl(fds[0], F_GETFL, 0);
   96|  2.30k|  status = fcntl(fds[0], F_SETFL, flags | O_NONBLOCK);
   97|       |
   98|  2.30k|  if(status == -1) {
   99|       |    /* Close the file descriptors so they don't leak. */
  100|      0|    close(fds[0]);
  101|      0|    close(fds[1]);
  102|       |
  103|       |    /* Setting non-blocking failed. Return a negative response code. */
  104|      0|    return CURL_SOCKET_BAD;
  105|      0|  }
  106|       |
  107|       |  /* At this point, the file descriptors in hand should be good enough to
  108|       |     work with. */
  109|  2.30k|  sman->fd = fds[0];
  110|  2.30k|  sman->fd_state = FUZZ_SOCK_OPEN;
  111|       |
  112|       |  /* If the server should be sending data immediately, send it here. */
  113|  2.30k|  data = sman->responses[0].data;
  114|  2.30k|  data_len = sman->responses[0].data_len;
  115|       |
  116|  2.30k|  if(data != NULL) {
  117|  1.35k|    FV_PRINTF(fuzz, "FUZZ[%d]: Sending initial response \n", sman->index);
  118|       |
  119|  1.35k|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  120|       |      /* Close the file descriptors so they don't leak. */
  121|      0|      close(sman->fd);
  122|      0|      sman->fd = -1;
  123|       |
  124|      0|      close(fds[1]);
  125|       |
  126|       |      /* Failed to write all of the response data. */
  127|      0|      return CURL_SOCKET_BAD;
  128|      0|    }
  129|  1.35k|  }
  130|       |
  131|       |  /* Check to see if the socket should be shut down immediately. */
  132|  2.30k|  if(sman->responses[1].data == NULL) {
  133|  2.08k|    FV_PRINTF(fuzz,
  134|  2.08k|              "FUZZ[%d]: Shutting down server socket: %d \n",
  135|  2.08k|              sman->index,
  136|  2.08k|              sman->fd);
  137|  2.08k|    shutdown(sman->fd, SHUT_WR);
  138|  2.08k|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  139|  2.08k|  }
  140|       |
  141|       |  /* Return the other half of the socket pair. */
  142|  2.30k|  return fds[1];
  143|  2.30k|}
_Z21fuzz_sockopt_callbackPvi12curlsocktype:
  152|  2.30k|{
  153|  2.30k|  (void)ptr;
  154|  2.30k|  (void)curlfd;
  155|  2.30k|  (void)purpose;
  156|       |
  157|  2.30k|  return CURL_SOCKOPT_ALREADY_CONNECTED;
  158|  2.30k|}
_Z18fuzz_read_callbackPcmmPv:
  167|     23|{
  168|     23|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
  169|     23|  size_t remaining_data;
  170|     23|  size_t buffer_size = size * nitems;
  171|       |
  172|       |  /* If no upload data has been specified, then return an error code. */
  173|     23|  if(fuzz->upload1_data_len == 0) {
  174|       |    /* No data to upload */
  175|      3|    return CURL_READFUNC_ABORT;
  176|      3|  }
  177|       |
  178|       |  /* Work out how much data is remaining to upload. */
  179|     20|  remaining_data = fuzz->upload1_data_len - fuzz->upload1_data_written;
  180|       |
  181|       |  /* Respect the buffer size that libcurl is giving us! */
  182|     20|  if(remaining_data > buffer_size) {
  183|      0|    remaining_data = buffer_size;
  184|      0|  }
  185|       |
  186|     20|  if(remaining_data > 0) {
  187|     18|    FV_PRINTF(fuzz,
  188|     18|              "FUZZ: Uploading %zu bytes from position %zu \n",
  189|     18|              remaining_data,
  190|     18|              fuzz->upload1_data_written);
  191|       |
  192|       |    /* Send the upload data. */
  193|     18|    memcpy(buffer,
  194|     18|           &fuzz->upload1_data[fuzz->upload1_data_written],
  195|     18|           remaining_data);
  196|       |
  197|       |    /* Increase the count of written data */
  198|     18|    fuzz->upload1_data_written += remaining_data;
  199|     18|  }
  200|       |
  201|     20|  return(remaining_data);
  202|     23|}
_Z19fuzz_write_callbackPvmmS_:
  211|    532|{
  212|    532|  size_t total = size * nmemb;
  213|    532|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
  214|    532|  size_t copy_len = total;
  215|       |
  216|       |  /* Restrict copy_len to at most TEMP_WRITE_ARRAY_SIZE. */
  217|    532|  if(copy_len > TEMP_WRITE_ARRAY_SIZE) {
  218|    430|    copy_len = TEMP_WRITE_ARRAY_SIZE;
  219|    430|  }
  220|       |
  221|       |  /* Copy bytes to the temp store just to ensure the parameters are
  222|       |     exercised. */
  223|    532|  memcpy(fuzz->write_array, contents, copy_len);
  224|       |
  225|       |  /* Add on the total to the count. If it exceeds the maximum then return
  226|       |     zero to the caller so that the transfer is terminated early. */
  227|    532|  fuzz->written_data += total;
  228|       |
  229|    532|  if(fuzz->written_data > MAXIMUM_WRITE_LENGTH) {
  230|      0|    FV_PRINTF(fuzz,
  231|      0|              "FUZZ: Exceeded maximum write length (%lu) \n",
  232|      0|              fuzz->written_data);
  233|      0|    total = 0;
  234|      0|  }
  235|       |
  236|    532|  return total;
  237|    532|}

_Z18fuzz_get_first_tlvP9fuzz_dataP3tlv:
   32|  5.09k|{
   33|       |  /* Reset the cursor. */
   34|  5.09k|  fuzz->state.data_pos = 0;
   35|  5.09k|  return fuzz_get_tlv_comn(fuzz, tlv);
   36|  5.09k|}
_Z17fuzz_get_next_tlvP9fuzz_dataP3tlv:
   43|  14.7k|{
   44|       |  /* Advance the cursor by the full length of the previous TLV. */
   45|  14.7k|  fuzz->state.data_pos += sizeof(TLV_RAW) + tlv->length;
   46|       |
   47|       |  /* Work out if there's a TLV's worth of data to read */
   48|  14.7k|  if(fuzz->state.data_pos + sizeof(TLV_RAW) > fuzz->state.data_len) {
   49|       |    /* No more TLVs to parse */
   50|  3.14k|    return TLV_RC_NO_MORE_TLVS;
   51|  3.14k|  }
   52|       |
   53|  11.6k|  return fuzz_get_tlv_comn(fuzz, tlv);
   54|  14.7k|}
_Z17fuzz_get_tlv_comnP9fuzz_dataP3tlv:
   61|  16.7k|{
   62|  16.7k|  int rc = 0;
   63|  16.7k|  size_t data_offset;
   64|  16.7k|  TLV_RAW *raw;
   65|       |
   66|       |  /* Start by casting the data stream to a TLV. */
   67|  16.7k|  raw = (TLV_RAW *)&fuzz->state.data[fuzz->state.data_pos];
   68|  16.7k|  data_offset = fuzz->state.data_pos + sizeof(TLV_RAW);
   69|       |
   70|       |  /* Set the TLV values. */
   71|  16.7k|  tlv->type = to_u16(raw->raw_type);
   72|  16.7k|  tlv->length = to_u32(raw->raw_length);
   73|  16.7k|  tlv->value = &fuzz->state.data[data_offset];
   74|       |
   75|  16.7k|  FV_PRINTF(fuzz, "TLV: type %x length %u\n", tlv->type, tlv->length);
   76|       |
   77|       |  /* Use uint64s to verify lengths of TLVs so that overflow problems don't
   78|       |     matter. */
   79|  16.7k|  uint64_t check_length = data_offset;
   80|  16.7k|  check_length += tlv->length;
   81|       |
   82|  16.7k|  uint64_t remaining_len = fuzz->state.data_len;
   83|  16.7k|  FV_PRINTF(fuzz, "Check length of data: %lu \n", check_length);
   84|  16.7k|  FV_PRINTF(fuzz, "Remaining length of data: %lu \n", remaining_len);
   85|       |
   86|       |  /* Sanity check that the TLV length is ok. */
   87|  16.7k|  if(check_length > remaining_len) {
   88|  1.78k|    FV_PRINTF(fuzz, "Returning TLV_RC_SIZE_ERROR\n");
   89|  1.78k|    rc = TLV_RC_SIZE_ERROR;
   90|  1.78k|  }
   91|       |
   92|  16.7k|  return rc;
   93|  16.7k|}
_Z14fuzz_parse_tlvP9fuzz_dataP3tlv:
   99|  11.8k|{
  100|  11.8k|  int rc;
  101|  11.8k|  char *tmp = NULL;
  102|  11.8k|  uint32_t tmp_u32;
  103|       |
  104|  11.8k|  switch(tlv->type) {
  105|       |    /* The pointers in response TLVs will always be valid as long as the fuzz
  106|       |       data is in scope, which is the entirety of this file. */
  107|  1.58k|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE0, 0);
  108|    199|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE1, 1);
  109|    154|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE2, 2);
  110|     92|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE3, 3);
  111|    126|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE4, 4);
  112|     71|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE5, 5);
  113|     84|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE6, 6);
  114|     83|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE7, 7);
  115|     92|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE8, 8);
  116|     68|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE9, 9);
  117|     66|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE10, 10);
  118|       |
  119|     82|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE0, 0);
  120|    124|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE1, 1);
  121|       |
  122|     54|    case TLV_TYPE_UPLOAD1:
  123|       |      /* The pointers in the TLV will always be valid as long as the fuzz data
  124|       |         is in scope, which is the entirety of this file. */
  125|       |
  126|     54|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_UPLOAD);
  127|       |
  128|     53|      fuzz->upload1_data = tlv->value;
  129|     53|      fuzz->upload1_data_len = tlv->length;
  130|       |
  131|     53|      FSET_OPTION(fuzz, CURLOPT_UPLOAD, 1L);
  132|     53|      FSET_OPTION(fuzz,
  133|     53|                  CURLOPT_INFILESIZE_LARGE,
  134|     53|                  (curl_off_t)fuzz->upload1_data_len);
  135|     53|      break;
  136|       |
  137|  2.02k|    case TLV_TYPE_HEADER:
  138|       |      /* Limit the number of headers that can be added to a message to prevent
  139|       |         timeouts. */
  140|  2.02k|      if(fuzz->header_list_count >= TLV_MAX_NUM_CURLOPT_HEADER) {
  141|      0|        rc = 255;
  142|      0|        goto EXIT_LABEL;
  143|      0|      }
  144|       |
  145|  2.02k|      tmp = fuzz_tlv_to_string(tlv);
  146|  2.02k|      fuzz->header_list = curl_slist_append(fuzz->header_list, tmp);
  147|  2.02k|      fuzz->header_list_count++;
  148|  2.02k|      break;
  149|       |
  150|     35|    case TLV_TYPE_MAIL_RECIPIENT:
  151|     35|      tmp = fuzz_tlv_to_string(tlv);
  152|     35|      fuzz->mail_recipients_list =
  153|     35|                            curl_slist_append(fuzz->mail_recipients_list, tmp);
  154|     35|      break;
  155|       |
  156|  2.84k|    case TLV_TYPE_MIME_PART:
  157|  2.84k|      if(fuzz->mime == NULL) {
  158|    174|        fuzz->mime = curl_mime_init(fuzz->easy);
  159|    174|      }
  160|       |
  161|  2.84k|      fuzz->part = curl_mime_addpart(fuzz->mime);
  162|       |
  163|       |      /* This TLV may have sub TLVs. */
  164|  2.84k|      fuzz_add_mime_part(tlv, fuzz->part);
  165|  2.84k|      break;
  166|       |
  167|     27|    case TLV_TYPE_POSTFIELDS:
  168|     27|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_POSTFIELDS);
  169|     26|      fuzz->postfields = fuzz_tlv_to_string(tlv);
  170|     26|      FSET_OPTION(fuzz, CURLOPT_POSTFIELDS, fuzz->postfields);
  171|     26|      break;
  172|       |
  173|       |    /* Define a set of u32 options. */
  174|    288|    FU32TLV(fuzz, TLV_TYPE_HTTPAUTH, CURLOPT_HTTPAUTH);
  175|     16|    FU32TLV(fuzz, TLV_TYPE_OPTHEADER, CURLOPT_HEADER);
  176|     13|    FU32TLV(fuzz, TLV_TYPE_NOBODY, CURLOPT_NOBODY);
  177|    498|    FU32TLV(fuzz, TLV_TYPE_FOLLOWLOCATION, CURLOPT_FOLLOWLOCATION);
  178|      9|    FU32TLV(fuzz, TLV_TYPE_WILDCARDMATCH, CURLOPT_WILDCARDMATCH);
  179|     12|    FU32TLV(fuzz, TLV_TYPE_RTSP_REQUEST, CURLOPT_RTSP_REQUEST);
  180|     12|    FU32TLV(fuzz, TLV_TYPE_RTSP_CLIENT_CSEQ, CURLOPT_RTSP_CLIENT_CSEQ);
  181|  2.13k|    FU32TLV(fuzz, TLV_TYPE_HTTP_VERSION, CURLOPT_HTTP_VERSION);
  182|       |
  183|       |    /* Define a set of singleton TLVs - they can only have their value set once
  184|       |       and all follow the same pattern. */
  185|  4.41k|    FSINGLETONTLV(fuzz, TLV_TYPE_URL, CURLOPT_URL);
  186|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_DOH_URL, CURLOPT_DOH_URL);
  187|    393|    FSINGLETONTLV(fuzz, TLV_TYPE_USERNAME, CURLOPT_USERNAME);
  188|     75|    FSINGLETONTLV(fuzz, TLV_TYPE_PASSWORD, CURLOPT_PASSWORD);
  189|     15|    FSINGLETONTLV(fuzz, TLV_TYPE_COOKIE, CURLOPT_COOKIE);
  190|     39|    FSINGLETONTLV(fuzz, TLV_TYPE_RANGE, CURLOPT_RANGE);
  191|    677|    FSINGLETONTLV(fuzz, TLV_TYPE_CUSTOMREQUEST, CURLOPT_CUSTOMREQUEST);
  192|      7|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_FROM, CURLOPT_MAIL_FROM);
  193|    443|    FSINGLETONTLV(fuzz, TLV_TYPE_ACCEPTENCODING, CURLOPT_ACCEPT_ENCODING);
  194|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_SESSION_ID, CURLOPT_RTSP_SESSION_ID);
  195|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_STREAM_URI, CURLOPT_RTSP_STREAM_URI);
  196|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_TRANSPORT, CURLOPT_RTSP_TRANSPORT);
  197|      5|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_AUTH, CURLOPT_MAIL_AUTH);
  198|       |
  199|      2|    default:
  200|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  201|       |         corpus so we reject any unknown TLVs. */
  202|      2|      rc = 127;
  203|      2|      goto EXIT_LABEL;
  204|      0|      break;
  205|  11.8k|  }
  206|       |
  207|  11.8k|  rc = 0;
  208|       |
  209|  11.8k|EXIT_LABEL:
  210|       |
  211|  11.8k|  fuzz_free((void **)&tmp);
  212|       |
  213|  11.8k|  return rc;
  214|  11.8k|}
_Z18fuzz_tlv_to_stringP3tlv:
  220|  5.36k|{
  221|  5.36k|  char *tlvstr;
  222|       |
  223|       |  /* Allocate enough space, plus a null terminator */
  224|  5.36k|  tlvstr = (char *)malloc(tlv->length + 1);
  225|       |
  226|  5.36k|  if(tlvstr != NULL) {
  227|  5.36k|    memcpy(tlvstr, tlv->value, tlv->length);
  228|  5.36k|    tlvstr[tlv->length] = 0;
  229|  5.36k|  }
  230|       |
  231|  5.36k|  return tlvstr;
  232|  5.36k|}
_Z18fuzz_add_mime_partP3tlvP13curl_mimepart:
  238|  2.84k|{
  239|  2.84k|  FUZZ_DATA part_fuzz;
  240|  2.84k|  TLV tlv;
  241|  2.84k|  int rc = 0;
  242|  2.84k|  int tlv_rc;
  243|       |
  244|  2.84k|  memset(&part_fuzz, 0, sizeof(FUZZ_DATA));
  245|       |
  246|  2.84k|  if(src_tlv->length < sizeof(TLV_RAW)) {
  247|       |    /* Not enough data for a single TLV - don't continue */
  248|     62|    goto EXIT_LABEL;
  249|     62|  }
  250|       |
  251|       |  /* Set up the state parser */
  252|  2.78k|  part_fuzz.state.data = src_tlv->value;
  253|  2.78k|  part_fuzz.state.data_len = src_tlv->length;
  254|       |
  255|  2.78k|  for(tlv_rc = fuzz_get_first_tlv(&part_fuzz, &tlv);
  256|  5.73k|      tlv_rc == 0;
  257|  3.09k|      tlv_rc = fuzz_get_next_tlv(&part_fuzz, &tlv)) {
  258|       |
  259|       |    /* Have the TLV in hand. Parse the TLV. */
  260|  3.09k|    rc = fuzz_parse_mime_tlv(part, &tlv);
  261|       |
  262|  3.09k|    if(rc != 0) {
  263|       |      /* Failed to parse the TLV. Can't continue. */
  264|    136|      goto EXIT_LABEL;
  265|    136|    }
  266|  3.09k|  }
  267|       |
  268|  2.64k|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
  269|       |    /* A TLV call failed. Can't continue. */
  270|  1.76k|    goto EXIT_LABEL;
  271|  1.76k|  }
  272|       |
  273|  2.84k|EXIT_LABEL:
  274|       |
  275|  2.84k|  return(rc);
  276|  2.64k|}
_Z19fuzz_parse_mime_tlvP13curl_mimepartP3tlv:
  282|  3.09k|{
  283|  3.09k|  int rc;
  284|  3.09k|  char *tmp;
  285|       |
  286|  3.09k|  switch(tlv->type) {
  287|    234|    case TLV_TYPE_MIME_PART_NAME:
  288|    234|      tmp = fuzz_tlv_to_string(tlv);
  289|    234|      curl_mime_name(part, tmp);
  290|    234|      fuzz_free((void **)&tmp);
  291|    234|      break;
  292|       |
  293|  2.72k|    case TLV_TYPE_MIME_PART_DATA:
  294|  2.72k|      curl_mime_data(part, (const char *)tlv->value, tlv->length);
  295|  2.72k|      break;
  296|       |
  297|    136|    default:
  298|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  299|       |         corpus so we reject any unknown TLVs. */
  300|    136|      rc = 255;
  301|    136|      goto EXIT_LABEL;
  302|      0|      break;
  303|  3.09k|  }
  304|       |
  305|  2.95k|  rc = 0;
  306|       |
  307|  3.09k|EXIT_LABEL:
  308|       |
  309|  3.09k|  return rc;
  310|  2.95k|}

nghttp2_buf_init:
   32|  2.11k|void nghttp2_buf_init(nghttp2_buf *buf) {
   33|  2.11k|  buf->begin = NULL;
   34|  2.11k|  buf->end = NULL;
   35|  2.11k|  buf->pos = NULL;
   36|  2.11k|  buf->last = NULL;
   37|  2.11k|  buf->mark = NULL;
   38|  2.11k|}
nghttp2_buf_init2:
   40|    704|int nghttp2_buf_init2(nghttp2_buf *buf, size_t initial, nghttp2_mem *mem) {
   41|    704|  nghttp2_buf_init(buf);
   42|    704|  return nghttp2_buf_reserve(buf, initial, mem);
   43|    704|}
nghttp2_buf_free:
   45|  2.82k|void nghttp2_buf_free(nghttp2_buf *buf, nghttp2_mem *mem) {
   46|  2.82k|  if (buf == NULL) {
   47|      0|    return;
   48|      0|  }
   49|       |
   50|  2.82k|  nghttp2_mem_free(mem, buf->begin);
   51|  2.82k|  buf->begin = NULL;
   52|  2.82k|}
nghttp2_buf_reserve:
   54|    704|int nghttp2_buf_reserve(nghttp2_buf *buf, size_t new_cap, nghttp2_mem *mem) {
   55|    704|  uint8_t *ptr;
   56|    704|  size_t cap;
   57|       |
   58|    704|  cap = nghttp2_buf_cap(buf);
   59|       |
   60|    704|  if (cap >= new_cap) {
   61|      0|    return 0;
   62|      0|  }
   63|       |
   64|    704|  new_cap = nghttp2_max(new_cap, cap * 2);
   65|       |
   66|    704|  ptr = nghttp2_mem_realloc(mem, buf->begin, new_cap);
   67|    704|  if (ptr == NULL) {
   68|      0|    return NGHTTP2_ERR_NOMEM;
   69|      0|  }
   70|       |
   71|    704|  buf->pos = ptr + (buf->pos - buf->begin);
   72|    704|  buf->last = ptr + (buf->last - buf->begin);
   73|    704|  buf->mark = ptr + (buf->mark - buf->begin);
   74|    704|  buf->begin = ptr;
   75|    704|  buf->end = ptr + new_cap;
   76|       |
   77|    704|  return 0;
   78|    704|}
nghttp2_buf_reset:
   80|  8.35k|void nghttp2_buf_reset(nghttp2_buf *buf) {
   81|  8.35k|  buf->pos = buf->last = buf->mark = buf->begin;
   82|  8.35k|}
nghttp2_buf_wrap_init:
   84|  10.5k|void nghttp2_buf_wrap_init(nghttp2_buf *buf, uint8_t *begin, size_t len) {
   85|  10.5k|  buf->begin = buf->pos = buf->last = buf->mark = begin;
   86|  10.5k|  buf->end = begin + len;
   87|  10.5k|}
nghttp2_bufs_init3:
  127|    704|                       nghttp2_mem *mem) {
  128|    704|  int rv;
  129|    704|  nghttp2_buf_chain *chain;
  130|       |
  131|    704|  if (chunk_keep == 0 || max_chunk < chunk_keep || chunk_length < offset) {
  132|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
  133|      0|  }
  134|       |
  135|    704|  rv = buf_chain_new(&chain, chunk_length, mem);
  136|    704|  if (rv != 0) {
  137|      0|    return rv;
  138|      0|  }
  139|       |
  140|    704|  bufs->mem = mem;
  141|    704|  bufs->offset = offset;
  142|       |
  143|    704|  bufs->head = chain;
  144|    704|  bufs->cur = bufs->head;
  145|       |
  146|    704|  nghttp2_buf_shift_right(&bufs->cur->buf, offset);
  147|       |
  148|    704|  bufs->chunk_length = chunk_length;
  149|    704|  bufs->chunk_used = 1;
  150|    704|  bufs->max_chunk = max_chunk;
  151|    704|  bufs->chunk_keep = chunk_keep;
  152|       |
  153|    704|  return 0;
  154|    704|}
nghttp2_bufs_free:
  182|    704|void nghttp2_bufs_free(nghttp2_bufs *bufs) {
  183|    704|  nghttp2_buf_chain *chain, *next_chain;
  184|       |
  185|    704|  if (bufs == NULL) {
  186|      0|    return;
  187|      0|  }
  188|       |
  189|  1.40k|  for (chain = bufs->head; chain;) {
  190|    704|    next_chain = chain->next;
  191|       |
  192|    704|    buf_chain_del(chain, bufs->mem);
  193|       |
  194|    704|    chain = next_chain;
  195|    704|  }
  196|       |
  197|    704|  bufs->head = NULL;
  198|    704|}
nghttp2_bufs_len:
  289|    678|size_t nghttp2_bufs_len(nghttp2_bufs *bufs) {
  290|    678|  nghttp2_buf_chain *ci;
  291|    678|  size_t len;
  292|       |
  293|    678|  len = 0;
  294|  1.35k|  for (ci = bufs->head; ci; ci = ci->next) {
  295|    678|    len += nghttp2_buf_len(&ci->buf);
  296|    678|  }
  297|       |
  298|    678|  return len;
  299|    678|}
nghttp2_bufs_add:
  333|  13.7k|int nghttp2_bufs_add(nghttp2_bufs *bufs, const void *data, size_t len) {
  334|  13.7k|  int rv;
  335|  13.7k|  size_t nwrite;
  336|  13.7k|  nghttp2_buf *buf;
  337|  13.7k|  const uint8_t *p;
  338|       |
  339|  13.7k|  p = data;
  340|       |
  341|  27.3k|  while (len) {
  342|  13.5k|    buf = &bufs->cur->buf;
  343|       |
  344|  13.5k|    nwrite = nghttp2_min(nghttp2_buf_avail(buf), len);
  345|  13.5k|    if (nwrite == 0) {
  346|      0|      rv = bufs_alloc_chain(bufs);
  347|      0|      if (rv != 0) {
  348|      0|        return rv;
  349|      0|      }
  350|      0|      continue;
  351|      0|    }
  352|       |
  353|  13.5k|    buf->last = nghttp2_cpymem(buf->last, p, nwrite);
  354|  13.5k|    p += nwrite;
  355|  13.5k|    len -= nwrite;
  356|  13.5k|  }
  357|       |
  358|  13.7k|  return 0;
  359|  13.7k|}
nghttp2_bufs_addb:
  379|  11.1k|int nghttp2_bufs_addb(nghttp2_bufs *bufs, uint8_t b) {
  380|  11.1k|  int rv;
  381|       |
  382|  11.1k|  rv = bufs_ensure_addb(bufs);
  383|  11.1k|  if (rv != 0) {
  384|      0|    return rv;
  385|      0|  }
  386|       |
  387|  11.1k|  *bufs->cur->buf.last++ = b;
  388|       |
  389|  11.1k|  return 0;
  390|  11.1k|}
nghttp2_bufs_reset:
  484|  5.65k|void nghttp2_bufs_reset(nghttp2_bufs *bufs) {
  485|  5.65k|  nghttp2_buf_chain *chain, *ci;
  486|  5.65k|  size_t k;
  487|       |
  488|  5.65k|  k = bufs->chunk_keep;
  489|       |
  490|  5.65k|  for (ci = bufs->head; ci; ci = ci->next) {
  491|  5.65k|    nghttp2_buf_reset(&ci->buf);
  492|  5.65k|    nghttp2_buf_shift_right(&ci->buf, bufs->offset);
  493|       |
  494|  5.65k|    if (--k == 0) {
  495|  5.65k|      break;
  496|  5.65k|    }
  497|  5.65k|  }
  498|       |
  499|  5.65k|  if (ci) {
  500|  5.65k|    chain = ci->next;
  501|  5.65k|    ci->next = NULL;
  502|       |
  503|  5.65k|    for (ci = chain; ci;) {
  504|      0|      chain = ci->next;
  505|       |
  506|      0|      buf_chain_del(ci, bufs->mem);
  507|       |
  508|      0|      ci = chain;
  509|      0|    }
  510|       |
  511|  5.65k|    bufs->chunk_used = bufs->chunk_keep;
  512|  5.65k|  }
  513|       |
  514|  5.65k|  bufs->cur = bufs->head;
  515|  5.65k|}
nghttp2_bufs_next_present:
  519|  1.35k|int nghttp2_bufs_next_present(nghttp2_bufs *bufs) {
  520|  1.35k|  nghttp2_buf_chain *chain;
  521|       |
  522|  1.35k|  chain = bufs->cur->next;
  523|       |
  524|  1.35k|  return chain && nghttp2_buf_len(&chain->buf);
  525|  1.35k|}
nghttp2_buf.c:buf_chain_new:
   90|    704|                         nghttp2_mem *mem) {
   91|    704|  int rv;
   92|       |
   93|    704|  *chain = nghttp2_mem_malloc(mem, sizeof(nghttp2_buf_chain));
   94|    704|  if (*chain == NULL) {
   95|      0|    return NGHTTP2_ERR_NOMEM;
   96|      0|  }
   97|       |
   98|    704|  (*chain)->next = NULL;
   99|       |
  100|    704|  rv = nghttp2_buf_init2(&(*chain)->buf, chunk_length, mem);
  101|    704|  if (rv != 0) {
  102|      0|    nghttp2_mem_free(mem, *chain);
  103|      0|    return NGHTTP2_ERR_NOMEM;
  104|      0|  }
  105|       |
  106|    704|  return 0;
  107|    704|}
nghttp2_buf.c:buf_chain_del:
  109|    704|static void buf_chain_del(nghttp2_buf_chain *chain, nghttp2_mem *mem) {
  110|    704|  nghttp2_buf_free(&chain->buf, mem);
  111|    704|  nghttp2_mem_free(mem, chain);
  112|    704|}
nghttp2_buf.c:bufs_ensure_addb:
  361|  11.1k|static int bufs_ensure_addb(nghttp2_bufs *bufs) {
  362|  11.1k|  int rv;
  363|  11.1k|  nghttp2_buf *buf;
  364|       |
  365|  11.1k|  buf = &bufs->cur->buf;
  366|       |
  367|  11.1k|  if (nghttp2_buf_avail(buf) > 0) {
  368|  11.1k|    return 0;
  369|  11.1k|  }
  370|       |
  371|      0|  rv = bufs_alloc_chain(bufs);
  372|      0|  if (rv != 0) {
  373|      0|    return rv;
  374|      0|  }
  375|       |
  376|      0|  return 0;
  377|      0|}

nghttp2_session_callbacks_new:
   29|    704|int nghttp2_session_callbacks_new(nghttp2_session_callbacks **callbacks_ptr) {
   30|    704|  *callbacks_ptr = calloc(1, sizeof(nghttp2_session_callbacks));
   31|       |
   32|    704|  if (*callbacks_ptr == NULL) {
   33|      0|    return NGHTTP2_ERR_NOMEM;
   34|      0|  }
   35|       |
   36|    704|  return 0;
   37|    704|}
nghttp2_session_callbacks_del:
   39|    704|void nghttp2_session_callbacks_del(nghttp2_session_callbacks *callbacks) {
   40|    704|  free(callbacks);
   41|    704|}
nghttp2_session_callbacks_set_send_callback:
   44|    704|    nghttp2_session_callbacks *cbs, nghttp2_send_callback send_callback) {
   45|    704|  cbs->send_callback = send_callback;
   46|    704|}
nghttp2_session_callbacks_set_on_frame_recv_callback:
   55|    704|    nghttp2_on_frame_recv_callback on_frame_recv_callback) {
   56|    704|  cbs->on_frame_recv_callback = on_frame_recv_callback;
   57|    704|}
nghttp2_session_callbacks_set_on_data_chunk_recv_callback:
   67|    704|    nghttp2_on_data_chunk_recv_callback on_data_chunk_recv_callback) {
   68|    704|  cbs->on_data_chunk_recv_callback = on_data_chunk_recv_callback;
   69|    704|}
nghttp2_session_callbacks_set_on_stream_close_callback:
   91|    704|    nghttp2_on_stream_close_callback on_stream_close_callback) {
   92|    704|  cbs->on_stream_close_callback = on_stream_close_callback;
   93|    704|}
nghttp2_session_callbacks_set_on_begin_headers_callback:
   97|    704|    nghttp2_on_begin_headers_callback on_begin_headers_callback) {
   98|    704|  cbs->on_begin_headers_callback = on_begin_headers_callback;
   99|    704|}
nghttp2_session_callbacks_set_on_header_callback:
  103|    704|    nghttp2_on_header_callback on_header_callback) {
  104|    704|  cbs->on_header_callback = on_header_callback;
  105|    704|}
nghttp2_session_callbacks_set_error_callback:
  168|    704|    nghttp2_session_callbacks *cbs, nghttp2_error_callback error_callback) {
  169|    704|  cbs->error_callback = error_callback;
  170|    704|}

nghttp2_frame_pack_frame_hd:
   37|  2.99k|void nghttp2_frame_pack_frame_hd(uint8_t *buf, const nghttp2_frame_hd *hd) {
   38|  2.99k|  nghttp2_put_uint32be(&buf[0], (uint32_t)(hd->length << 8));
   39|  2.99k|  buf[3] = hd->type;
   40|  2.99k|  buf[4] = hd->flags;
   41|  2.99k|  nghttp2_put_uint32be(&buf[5], (uint32_t)hd->stream_id);
   42|       |  /* ignore hd->reserved for now */
   43|  2.99k|}
nghttp2_frame_unpack_frame_hd:
   45|  1.04k|void nghttp2_frame_unpack_frame_hd(nghttp2_frame_hd *hd, const uint8_t *buf) {
   46|  1.04k|  hd->length = nghttp2_get_uint32(&buf[0]) >> 8;
   47|  1.04k|  hd->type = buf[3];
   48|  1.04k|  hd->flags = buf[4];
   49|  1.04k|  hd->stream_id = nghttp2_get_uint32(&buf[5]) & NGHTTP2_STREAM_ID_MASK;
   50|  1.04k|  hd->reserved = 0;
   51|  1.04k|}
nghttp2_frame_hd_init:
   54|  3.49k|                           uint8_t flags, int32_t stream_id) {
   55|  3.49k|  hd->length = length;
   56|  3.49k|  hd->type = type;
   57|  3.49k|  hd->flags = flags;
   58|  3.49k|  hd->stream_id = stream_id;
   59|  3.49k|  hd->reserved = 0;
   60|  3.49k|}
nghttp2_frame_headers_init:
   65|    678|                                nghttp2_nv *nva, size_t nvlen) {
   66|    678|  nghttp2_frame_hd_init(&frame->hd, 0, NGHTTP2_HEADERS, flags, stream_id);
   67|    678|  frame->padlen = 0;
   68|    678|  frame->nva = nva;
   69|    678|  frame->nvlen = nvlen;
   70|    678|  frame->cat = cat;
   71|       |
   72|    678|  if (pri_spec) {
   73|    678|    frame->pri_spec = *pri_spec;
   74|    678|  } else {
   75|      0|    nghttp2_priority_spec_default_init(&frame->pri_spec);
   76|      0|  }
   77|    678|}
nghttp2_frame_headers_free:
   79|    933|void nghttp2_frame_headers_free(nghttp2_headers *frame, nghttp2_mem *mem) {
   80|    933|  nghttp2_nv_array_del(frame->nva, mem);
   81|    933|}
nghttp2_frame_priority_free:
   90|      5|void nghttp2_frame_priority_free(nghttp2_priority *frame) { (void)frame; }
nghttp2_frame_rst_stream_init:
   93|    587|                                   uint32_t error_code) {
   94|    587|  nghttp2_frame_hd_init(&frame->hd, 4, NGHTTP2_RST_STREAM, NGHTTP2_FLAG_NONE,
   95|    587|                        stream_id);
   96|    587|  frame->error_code = error_code;
   97|    587|}
nghttp2_frame_rst_stream_free:
   99|    594|void nghttp2_frame_rst_stream_free(nghttp2_rst_stream *frame) { (void)frame; }
nghttp2_frame_settings_init:
  102|  1.26k|                                 nghttp2_settings_entry *iv, size_t niv) {
  103|  1.26k|  nghttp2_frame_hd_init(&frame->hd, niv * NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH,
  104|  1.26k|                        NGHTTP2_SETTINGS, flags, 0);
  105|  1.26k|  frame->niv = niv;
  106|  1.26k|  frame->iv = iv;
  107|  1.26k|}
nghttp2_frame_settings_free:
  109|  1.84k|void nghttp2_frame_settings_free(nghttp2_settings *frame, nghttp2_mem *mem) {
  110|  1.84k|  nghttp2_mem_free(mem, frame->iv);
  111|  1.84k|}
nghttp2_frame_push_promise_free:
  126|     25|                                     nghttp2_mem *mem) {
  127|     25|  nghttp2_nv_array_del(frame->nva, mem);
  128|     25|}
nghttp2_frame_ping_free:
  140|      1|void nghttp2_frame_ping_free(nghttp2_ping *frame) { (void)frame; }
nghttp2_frame_goaway_init:
  144|    231|                               size_t opaque_data_len) {
  145|    231|  nghttp2_frame_hd_init(&frame->hd, 8 + opaque_data_len, NGHTTP2_GOAWAY,
  146|    231|                        NGHTTP2_FLAG_NONE, 0);
  147|    231|  frame->last_stream_id = last_stream_id;
  148|    231|  frame->error_code = error_code;
  149|    231|  frame->opaque_data = opaque_data;
  150|    231|  frame->opaque_data_len = opaque_data_len;
  151|    231|  frame->reserved = 0;
  152|    231|}
nghttp2_frame_goaway_free:
  154|    259|void nghttp2_frame_goaway_free(nghttp2_goaway *frame, nghttp2_mem *mem) {
  155|    259|  nghttp2_mem_free(mem, frame->opaque_data);
  156|    259|}
nghttp2_frame_window_update_init:
  160|    704|                                      int32_t window_size_increment) {
  161|    704|  nghttp2_frame_hd_init(&frame->hd, 4, NGHTTP2_WINDOW_UPDATE, flags, stream_id);
  162|    704|  frame->window_size_increment = window_size_increment;
  163|    704|  frame->reserved = 0;
  164|    704|}
nghttp2_frame_window_update_free:
  166|    705|void nghttp2_frame_window_update_free(nghttp2_window_update *frame) {
  167|    705|  (void)frame;
  168|    705|}
nghttp2_frame_trail_padlen:
  170|    955|size_t nghttp2_frame_trail_padlen(nghttp2_frame *frame, size_t padlen) {
  171|       |  /* We have iframe->padlen == 0, but iframe->frame.hd.flags may have
  172|       |     NGHTTP2_FLAG_PADDED set.  This happens when receiving
  173|       |     CONTINUATION frame, since we don't reset flags after HEADERS was
  174|       |     received. */
  175|    955|  if (padlen == 0) {
  176|    885|    return 0;
  177|    885|  }
  178|     70|  return padlen - ((frame->hd.flags & NGHTTP2_FLAG_PADDED) > 0);
  179|    955|}
nghttp2_frame_data_init:
  182|     31|                             int32_t stream_id) {
  183|       |  /* At this moment, the length of DATA frame is unknown */
  184|     31|  nghttp2_frame_hd_init(&frame->hd, 0, NGHTTP2_DATA, flags, stream_id);
  185|     31|  frame->padlen = 0;
  186|     31|}
nghttp2_frame_data_free:
  188|     31|void nghttp2_frame_data_free(nghttp2_data *frame) { (void)frame; }
nghttp2_frame_priority_len:
  256|    928|size_t nghttp2_frame_priority_len(uint8_t flags) {
  257|    928|  if (flags & NGHTTP2_FLAG_PRIORITY) {
  258|     40|    return NGHTTP2_PRIORITY_SPECLEN;
  259|     40|  }
  260|       |
  261|    888|  return 0;
  262|    928|}
nghttp2_frame_headers_payload_nv_offset:
  264|    678|size_t nghttp2_frame_headers_payload_nv_offset(nghttp2_headers *frame) {
  265|    678|  return nghttp2_frame_priority_len(frame->hd.flags);
  266|    678|}
nghttp2_frame_pack_headers:
  337|    678|                               nghttp2_hd_deflater *deflater) {
  338|    678|  size_t nv_offset;
  339|    678|  int rv;
  340|    678|  nghttp2_buf *buf;
  341|       |
  342|    678|  assert(bufs->head == bufs->cur);
  343|       |
  344|    678|  nv_offset = nghttp2_frame_headers_payload_nv_offset(frame);
  345|       |
  346|    678|  buf = &bufs->cur->buf;
  347|       |
  348|    678|  buf->pos += nv_offset;
  349|    678|  buf->last = buf->pos;
  350|       |
  351|       |  /* This call will adjust buf->last to the correct position */
  352|    678|  rv = nghttp2_hd_deflate_hd_bufs(deflater, bufs, frame->nva, frame->nvlen);
  353|       |
  354|    678|  if (rv == NGHTTP2_ERR_BUFFER_ERROR) {
  355|      0|    rv = NGHTTP2_ERR_HEADER_COMP;
  356|      0|  }
  357|       |
  358|    678|  buf->pos -= nv_offset;
  359|       |
  360|    678|  if (rv != 0) {
  361|      0|    return rv;
  362|      0|  }
  363|       |
  364|    678|  if (frame->hd.flags & NGHTTP2_FLAG_PRIORITY) {
  365|      0|    nghttp2_frame_pack_priority_spec(buf->pos, &frame->pri_spec);
  366|      0|  }
  367|       |
  368|    678|  frame->padlen = 0;
  369|    678|  frame->hd.length = nghttp2_bufs_len(bufs);
  370|       |
  371|    678|  return frame_pack_headers_shared(bufs, &frame->hd);
  372|    678|}
nghttp2_frame_unpack_priority_spec:
  384|     39|                                        const uint8_t *payload) {
  385|     39|  int32_t dep_stream_id;
  386|     39|  uint8_t exclusive;
  387|     39|  int32_t weight;
  388|       |
  389|     39|  dep_stream_id = nghttp2_get_uint32(payload) & NGHTTP2_STREAM_ID_MASK;
  390|     39|  exclusive = (payload[0] & 0x80) > 0;
  391|     39|  weight = payload[4] + 1;
  392|       |
  393|     39|  nghttp2_priority_spec_init(pri_spec, dep_stream_id, weight, exclusive);
  394|     39|}
nghttp2_frame_unpack_headers_payload:
  397|    246|                                         const uint8_t *payload) {
  398|    246|  if (frame->hd.flags & NGHTTP2_FLAG_PRIORITY) {
  399|     36|    nghttp2_frame_unpack_priority_spec(&frame->pri_spec, payload);
  400|    210|  } else {
  401|    210|    nghttp2_priority_spec_default_init(&frame->pri_spec);
  402|    210|  }
  403|       |
  404|    246|  frame->nva = NULL;
  405|    246|  frame->nvlen = 0;
  406|       |
  407|    246|  return 0;
  408|    246|}
nghttp2_frame_unpack_priority_payload:
  431|      3|                                           const uint8_t *payload) {
  432|      3|  nghttp2_frame_unpack_priority_spec(&frame->pri_spec, payload);
  433|      3|}
nghttp2_frame_pack_rst_stream:
  436|    440|                                  nghttp2_rst_stream *frame) {
  437|    440|  nghttp2_buf *buf;
  438|       |
  439|    440|  assert(bufs->head == bufs->cur);
  440|       |
  441|    440|  buf = &bufs->head->buf;
  442|       |
  443|    440|  assert(nghttp2_buf_avail(buf) >= 4);
  444|       |
  445|    440|  buf->pos -= NGHTTP2_FRAME_HDLEN;
  446|       |
  447|    440|  nghttp2_frame_pack_frame_hd(buf->pos, &frame->hd);
  448|       |
  449|    440|  nghttp2_put_uint32be(buf->last, frame->error_code);
  450|    440|  buf->last += 4;
  451|       |
  452|    440|  return 0;
  453|    440|}
nghttp2_frame_unpack_rst_stream_payload:
  456|      6|                                             const uint8_t *payload) {
  457|      6|  frame->error_code = nghttp2_get_uint32(payload);
  458|      6|}
nghttp2_frame_pack_settings:
  460|    923|int nghttp2_frame_pack_settings(nghttp2_bufs *bufs, nghttp2_settings *frame) {
  461|    923|  nghttp2_buf *buf;
  462|       |
  463|    923|  assert(bufs->head == bufs->cur);
  464|       |
  465|    923|  buf = &bufs->head->buf;
  466|       |
  467|    923|  if (nghttp2_buf_avail(buf) < frame->hd.length) {
  468|      0|    return NGHTTP2_ERR_FRAME_SIZE_ERROR;
  469|      0|  }
  470|       |
  471|    923|  buf->pos -= NGHTTP2_FRAME_HDLEN;
  472|       |
  473|    923|  nghttp2_frame_pack_frame_hd(buf->pos, &frame->hd);
  474|       |
  475|    923|  buf->last +=
  476|    923|      nghttp2_frame_pack_settings_payload(buf->last, frame->iv, frame->niv);
  477|       |
  478|    923|  return 0;
  479|    923|}
nghttp2_frame_pack_settings_payload:
  483|    924|                                           size_t niv) {
  484|    924|  size_t i;
  485|  3.03k|  for (i = 0; i < niv; ++i, buf += NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH) {
  486|  2.11k|    nghttp2_put_uint16be(buf, (uint16_t)iv[i].settings_id);
  487|  2.11k|    nghttp2_put_uint32be(buf + 2, iv[i].value);
  488|  2.11k|  }
  489|    924|  return NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH * niv;
  490|    924|}
nghttp2_frame_unpack_settings_payload:
  494|    578|                                           size_t niv) {
  495|    578|  frame->iv = iv;
  496|    578|  frame->niv = niv;
  497|    578|}
nghttp2_frame_unpack_settings_entry:
  500|  2.55k|                                         const uint8_t *payload) {
  501|  2.55k|  iv->settings_id = nghttp2_get_uint16(&payload[0]);
  502|  2.55k|  iv->value = nghttp2_get_uint32(&payload[2]);
  503|  2.55k|}
nghttp2_frame_unpack_push_promise_payload:
  571|     21|                                              const uint8_t *payload) {
  572|     21|  frame->promised_stream_id =
  573|     21|      nghttp2_get_uint32(payload) & NGHTTP2_STREAM_ID_MASK;
  574|     21|  frame->nva = NULL;
  575|     21|  frame->nvlen = 0;
  576|     21|  return 0;
  577|     21|}
nghttp2_frame_pack_goaway:
  603|    231|int nghttp2_frame_pack_goaway(nghttp2_bufs *bufs, nghttp2_goaway *frame) {
  604|    231|  int rv;
  605|    231|  nghttp2_buf *buf;
  606|       |
  607|    231|  assert(bufs->head == bufs->cur);
  608|       |
  609|    231|  buf = &bufs->head->buf;
  610|       |
  611|    231|  buf->pos -= NGHTTP2_FRAME_HDLEN;
  612|       |
  613|    231|  nghttp2_frame_pack_frame_hd(buf->pos, &frame->hd);
  614|       |
  615|    231|  nghttp2_put_uint32be(buf->last, (uint32_t)frame->last_stream_id);
  616|    231|  buf->last += 4;
  617|       |
  618|    231|  nghttp2_put_uint32be(buf->last, frame->error_code);
  619|    231|  buf->last += 4;
  620|       |
  621|    231|  rv = nghttp2_bufs_add(bufs, frame->opaque_data, frame->opaque_data_len);
  622|       |
  623|    231|  if (rv == NGHTTP2_ERR_BUFFER_ERROR) {
  624|      0|    return NGHTTP2_ERR_FRAME_SIZE_ERROR;
  625|      0|  }
  626|       |
  627|    231|  if (rv != 0) {
  628|      0|    return rv;
  629|      0|  }
  630|       |
  631|    231|  return 0;
  632|    231|}
nghttp2_frame_unpack_goaway_payload:
  637|     25|                                         size_t var_gift_payloadlen) {
  638|     25|  frame->last_stream_id = nghttp2_get_uint32(payload) & NGHTTP2_STREAM_ID_MASK;
  639|     25|  frame->error_code = nghttp2_get_uint32(payload + 4);
  640|       |
  641|     25|  frame->opaque_data = var_gift_payload;
  642|     25|  frame->opaque_data_len = var_gift_payloadlen;
  643|     25|}
nghttp2_frame_pack_window_update:
  678|    704|                                     nghttp2_window_update *frame) {
  679|    704|  nghttp2_buf *buf;
  680|       |
  681|    704|  assert(bufs->head == bufs->cur);
  682|       |
  683|    704|  buf = &bufs->head->buf;
  684|       |
  685|    704|  assert(nghttp2_buf_avail(buf) >= 4);
  686|       |
  687|    704|  buf->pos -= NGHTTP2_FRAME_HDLEN;
  688|       |
  689|    704|  nghttp2_frame_pack_frame_hd(buf->pos, &frame->hd);
  690|       |
  691|    704|  nghttp2_put_uint32be(buf->last, (uint32_t)frame->window_size_increment);
  692|    704|  buf->last += 4;
  693|       |
  694|    704|  return 0;
  695|    704|}
nghttp2_frame_iv_copy:
  880|  1.40k|                                              size_t niv, nghttp2_mem *mem) {
  881|  1.40k|  nghttp2_settings_entry *iv_copy;
  882|  1.40k|  size_t len = niv * sizeof(nghttp2_settings_entry);
  883|       |
  884|  1.40k|  if (len == 0) {
  885|      0|    return NULL;
  886|      0|  }
  887|       |
  888|  1.40k|  iv_copy = nghttp2_mem_malloc(mem, len);
  889|       |
  890|  1.40k|  if (iv_copy == NULL) {
  891|      0|    return NULL;
  892|      0|  }
  893|       |
  894|  1.40k|  memcpy(iv_copy, iv, len);
  895|       |
  896|  1.40k|  return iv_copy;
  897|  1.40k|}
nghttp2_nv_array_del:
  905|    958|void nghttp2_nv_array_del(nghttp2_nv *nva, nghttp2_mem *mem) {
  906|    958|  nghttp2_mem_free(mem, nva);
  907|    958|}
nghttp2_nv_array_copy:
  959|    678|                          size_t nvlen, nghttp2_mem *mem) {
  960|    678|  size_t i;
  961|    678|  uint8_t *data = NULL;
  962|    678|  size_t buflen = 0;
  963|    678|  nghttp2_nv *p;
  964|       |
  965|    678|  if (nvlen == 0) {
  966|      0|    *nva_ptr = NULL;
  967|       |
  968|      0|    return 0;
  969|      0|  }
  970|       |
  971|  7.17k|  for (i = 0; i < nvlen; ++i) {
  972|       |    /* + 1 for null-termination */
  973|  6.49k|    if ((nva[i].flags & NGHTTP2_NV_FLAG_NO_COPY_NAME) == 0) {
  974|  6.49k|      buflen += nva[i].namelen + 1;
  975|  6.49k|    }
  976|  6.49k|    if ((nva[i].flags & NGHTTP2_NV_FLAG_NO_COPY_VALUE) == 0) {
  977|  6.49k|      buflen += nva[i].valuelen + 1;
  978|  6.49k|    }
  979|  6.49k|  }
  980|       |
  981|    678|  buflen += sizeof(nghttp2_nv) * nvlen;
  982|       |
  983|    678|  *nva_ptr = nghttp2_mem_malloc(mem, buflen);
  984|       |
  985|    678|  if (*nva_ptr == NULL) {
  986|      0|    return NGHTTP2_ERR_NOMEM;
  987|      0|  }
  988|       |
  989|    678|  p = *nva_ptr;
  990|    678|  data = (uint8_t *)(*nva_ptr) + sizeof(nghttp2_nv) * nvlen;
  991|       |
  992|  7.17k|  for (i = 0; i < nvlen; ++i) {
  993|  6.49k|    p->flags = nva[i].flags;
  994|       |
  995|  6.49k|    if (nva[i].flags & NGHTTP2_NV_FLAG_NO_COPY_NAME) {
  996|      0|      p->name = nva[i].name;
  997|      0|      p->namelen = nva[i].namelen;
  998|  6.49k|    } else {
  999|  6.49k|      if (nva[i].namelen) {
 1000|  6.49k|        memcpy(data, nva[i].name, nva[i].namelen);
 1001|  6.49k|      }
 1002|  6.49k|      p->name = data;
 1003|  6.49k|      p->namelen = nva[i].namelen;
 1004|  6.49k|      data[p->namelen] = '\0';
 1005|  6.49k|      nghttp2_downcase(p->name, p->namelen);
 1006|  6.49k|      data += nva[i].namelen + 1;
 1007|  6.49k|    }
 1008|       |
 1009|  6.49k|    if (nva[i].flags & NGHTTP2_NV_FLAG_NO_COPY_VALUE) {
 1010|      0|      p->value = nva[i].value;
 1011|      0|      p->valuelen = nva[i].valuelen;
 1012|  6.49k|    } else {
 1013|  6.49k|      if (nva[i].valuelen) {
 1014|  6.46k|        memcpy(data, nva[i].value, nva[i].valuelen);
 1015|  6.46k|      }
 1016|  6.49k|      p->value = data;
 1017|  6.49k|      p->valuelen = nva[i].valuelen;
 1018|  6.49k|      data[p->valuelen] = '\0';
 1019|  6.49k|      data += nva[i].valuelen + 1;
 1020|  6.49k|    }
 1021|       |
 1022|  6.49k|    ++p;
 1023|  6.49k|  }
 1024|    678|  return 0;
 1025|    678|}
nghttp2_iv_check:
 1027|  1.26k|int nghttp2_iv_check(const nghttp2_settings_entry *iv, size_t niv) {
 1028|  1.26k|  size_t i;
 1029|  3.37k|  for (i = 0; i < niv; ++i) {
 1030|  2.11k|    switch (iv[i].settings_id) {
 1031|      0|    case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 1032|      0|      break;
 1033|    705|    case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:
 1034|    705|      break;
 1035|    705|    case NGHTTP2_SETTINGS_ENABLE_PUSH:
 1036|    705|      if (iv[i].value != 0 && iv[i].value != 1) {
 1037|      0|        return 0;
 1038|      0|      }
 1039|    705|      break;
 1040|    705|    case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 1041|    705|      if (iv[i].value > (uint32_t)NGHTTP2_MAX_WINDOW_SIZE) {
 1042|      0|        return 0;
 1043|      0|      }
 1044|    705|      break;
 1045|    705|    case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:
 1046|      0|      if (iv[i].value < NGHTTP2_MAX_FRAME_SIZE_MIN ||
 1047|      0|          iv[i].value > NGHTTP2_MAX_FRAME_SIZE_MAX) {
 1048|      0|        return 0;
 1049|      0|      }
 1050|      0|      break;
 1051|      0|    case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:
 1052|      0|      break;
 1053|      0|    case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:
 1054|      0|      if (iv[i].value != 0 && iv[i].value != 1) {
 1055|      0|        return 0;
 1056|      0|      }
 1057|      0|      break;
 1058|  2.11k|    }
 1059|  2.11k|  }
 1060|  1.26k|  return 1;
 1061|  1.26k|}
nghttp2_frame_add_pad:
 1093|    696|                          size_t padlen, int framehd_only) {
 1094|    696|  nghttp2_buf *buf;
 1095|       |
 1096|    696|  if (padlen == 0) {
 1097|    696|    DEBUGF("send: padlen = 0, nothing to do\n");
 1098|       |
 1099|    696|    return 0;
 1100|    696|  }
 1101|       |
 1102|       |  /*
 1103|       |   * We have arranged bufs like this:
 1104|       |   *
 1105|       |   *  0                   1                   2                   3
 1106|       |   *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 1107|       |   * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 1108|       |   * | |Frame header     | Frame payload...                          :
 1109|       |   * +-+-----------------+-------------------------------------------+
 1110|       |   * | |Frame header     | Frame payload...                          :
 1111|       |   * +-+-----------------+-------------------------------------------+
 1112|       |   * | |Frame header     | Frame payload...                          :
 1113|       |   * +-+-----------------+-------------------------------------------+
 1114|       |   *
 1115|       |   * We arranged padding so that it is included in the first frame
 1116|       |   * completely.  For padded frame, we are going to adjust buf->pos of
 1117|       |   * frame which includes padding and serialize (memmove) frame header
 1118|       |   * in the correct position.  Also extends buf->last to include
 1119|       |   * padding.
 1120|       |   */
 1121|       |
 1122|      0|  buf = &bufs->head->buf;
 1123|       |
 1124|      0|  assert(nghttp2_buf_avail(buf) >= padlen - 1);
 1125|       |
 1126|      0|  frame_set_pad(buf, padlen, framehd_only);
 1127|       |
 1128|      0|  hd->length += padlen;
 1129|      0|  hd->flags |= NGHTTP2_FLAG_PADDED;
 1130|       |
 1131|      0|  DEBUGF("send: final payloadlen=%zu, padlen=%zu\n", hd->length, padlen);
 1132|       |
 1133|      0|  return 0;
 1134|      0|}
nghttp2_frame.c:frame_pack_headers_shared:
  281|    678|                                     nghttp2_frame_hd *frame_hd) {
  282|    678|  nghttp2_buf *buf;
  283|    678|  nghttp2_buf_chain *ci, *ce;
  284|    678|  nghttp2_frame_hd hd;
  285|       |
  286|    678|  buf = &bufs->head->buf;
  287|       |
  288|    678|  hd = *frame_hd;
  289|    678|  hd.length = nghttp2_buf_len(buf);
  290|       |
  291|    678|  DEBUGF("send: HEADERS/PUSH_PROMISE, payloadlen=%zu\n", hd.length);
  292|       |
  293|       |  /* We have multiple frame buffers, which means one or more
  294|       |     CONTINUATION frame is involved. Remove END_HEADERS flag from the
  295|       |     first frame. */
  296|    678|  if (bufs->head != bufs->cur) {
  297|      0|    hd.flags = (uint8_t)(hd.flags & ~NGHTTP2_FLAG_END_HEADERS);
  298|      0|  }
  299|       |
  300|    678|  buf->pos -= NGHTTP2_FRAME_HDLEN;
  301|    678|  nghttp2_frame_pack_frame_hd(buf->pos, &hd);
  302|       |
  303|    678|  if (bufs->head != bufs->cur) {
  304|       |    /* 2nd and later frames are CONTINUATION frames. */
  305|      0|    hd.type = NGHTTP2_CONTINUATION;
  306|       |    /* We don't have no flags except for last CONTINUATION */
  307|      0|    hd.flags = NGHTTP2_FLAG_NONE;
  308|       |
  309|      0|    ce = bufs->cur;
  310|       |
  311|      0|    for (ci = bufs->head->next; ci != ce; ci = ci->next) {
  312|      0|      buf = &ci->buf;
  313|       |
  314|      0|      hd.length = nghttp2_buf_len(buf);
  315|       |
  316|      0|      DEBUGF("send: int CONTINUATION, payloadlen=%zu\n", hd.length);
  317|       |
  318|      0|      buf->pos -= NGHTTP2_FRAME_HDLEN;
  319|      0|      nghttp2_frame_pack_frame_hd(buf->pos, &hd);
  320|      0|    }
  321|       |
  322|      0|    buf = &ci->buf;
  323|      0|    hd.length = nghttp2_buf_len(buf);
  324|       |    /* Set END_HEADERS flag for last CONTINUATION */
  325|      0|    hd.flags = NGHTTP2_FLAG_END_HEADERS;
  326|       |
  327|      0|    DEBUGF("send: last CONTINUATION, payloadlen=%zu\n", hd.length);
  328|       |
  329|      0|    buf->pos -= NGHTTP2_FRAME_HDLEN;
  330|      0|    nghttp2_frame_pack_frame_hd(buf->pos, &hd);
  331|      0|  }
  332|       |
  333|    678|  return 0;
  334|    678|}

nghttp2_hd_entry_init:
  482|  4.80k|void nghttp2_hd_entry_init(nghttp2_hd_entry *ent, nghttp2_hd_nv *nv) {
  483|  4.80k|  ent->nv = *nv;
  484|  4.80k|  ent->cnv.name = nv->name->base;
  485|  4.80k|  ent->cnv.namelen = nv->name->len;
  486|  4.80k|  ent->cnv.value = nv->value->base;
  487|  4.80k|  ent->cnv.valuelen = nv->value->len;
  488|  4.80k|  ent->cnv.flags = nv->flags;
  489|  4.80k|  ent->next = NULL;
  490|  4.80k|  ent->hash = 0;
  491|       |
  492|  4.80k|  nghttp2_rcbuf_incref(ent->nv.name);
  493|  4.80k|  nghttp2_rcbuf_incref(ent->nv.value);
  494|  4.80k|}
nghttp2_hd_entry_free:
  496|  4.80k|void nghttp2_hd_entry_free(nghttp2_hd_entry *ent) {
  497|  4.80k|  nghttp2_rcbuf_decref(ent->nv.value);
  498|  4.80k|  nghttp2_rcbuf_decref(ent->nv.name);
  499|  4.80k|}
nghttp2_hd_deflate_init2:
  698|    704|                             nghttp2_mem *mem) {
  699|    704|  int rv;
  700|    704|  rv = hd_context_init(&deflater->ctx, mem);
  701|    704|  if (rv != 0) {
  702|      0|    return rv;
  703|      0|  }
  704|       |
  705|    704|  hd_map_init(&deflater->map);
  706|       |
  707|    704|  if (max_deflate_dynamic_table_size < NGHTTP2_HD_DEFAULT_MAX_BUFFER_SIZE) {
  708|      0|    deflater->notify_table_size_change = 1;
  709|      0|    deflater->ctx.hd_table_bufsize_max = max_deflate_dynamic_table_size;
  710|    704|  } else {
  711|    704|    deflater->notify_table_size_change = 0;
  712|    704|  }
  713|       |
  714|    704|  deflater->deflate_hd_table_bufsize_max = max_deflate_dynamic_table_size;
  715|    704|  deflater->min_hd_table_bufsize_max = UINT32_MAX;
  716|       |
  717|    704|  return 0;
  718|    704|}
nghttp2_hd_inflate_init:
  720|    704|int nghttp2_hd_inflate_init(nghttp2_hd_inflater *inflater, nghttp2_mem *mem) {
  721|    704|  int rv;
  722|       |
  723|    704|  rv = hd_context_init(&inflater->ctx, mem);
  724|    704|  if (rv != 0) {
  725|      0|    goto fail;
  726|      0|  }
  727|       |
  728|    704|  inflater->settings_hd_table_bufsize_max = NGHTTP2_HD_DEFAULT_MAX_BUFFER_SIZE;
  729|    704|  inflater->min_hd_table_bufsize_max = UINT32_MAX;
  730|       |
  731|    704|  inflater->nv_name_keep = NULL;
  732|    704|  inflater->nv_value_keep = NULL;
  733|       |
  734|    704|  inflater->opcode = NGHTTP2_HD_OPCODE_NONE;
  735|    704|  inflater->state = NGHTTP2_HD_STATE_INFLATE_START;
  736|       |
  737|    704|  nghttp2_buf_init(&inflater->namebuf);
  738|    704|  nghttp2_buf_init(&inflater->valuebuf);
  739|       |
  740|    704|  inflater->namercbuf = NULL;
  741|    704|  inflater->valuercbuf = NULL;
  742|       |
  743|    704|  inflater->huffman_encoded = 0;
  744|    704|  inflater->index = 0;
  745|    704|  inflater->left = 0;
  746|    704|  inflater->shift = 0;
  747|    704|  inflater->index_required = 0;
  748|    704|  inflater->no_index = 0;
  749|       |
  750|    704|  return 0;
  751|       |
  752|      0|fail:
  753|      0|  return rv;
  754|    704|}
nghttp2_hd_deflate_free:
  764|    704|void nghttp2_hd_deflate_free(nghttp2_hd_deflater *deflater) {
  765|    704|  hd_context_free(&deflater->ctx);
  766|    704|}
nghttp2_hd_inflate_free:
  768|    704|void nghttp2_hd_inflate_free(nghttp2_hd_inflater *inflater) {
  769|    704|  hd_inflate_keep_free(inflater);
  770|       |
  771|    704|  nghttp2_rcbuf_decref(inflater->valuercbuf);
  772|    704|  nghttp2_rcbuf_decref(inflater->namercbuf);
  773|       |
  774|    704|  hd_context_free(&inflater->ctx);
  775|    704|}
nghttp2_hd_deflate_change_table_size:
 1241|    522|    nghttp2_hd_deflater *deflater, size_t settings_max_dynamic_table_size) {
 1242|    522|  size_t next_bufsize = nghttp2_min(settings_max_dynamic_table_size,
 1243|    522|                                    deflater->deflate_hd_table_bufsize_max);
 1244|       |
 1245|    522|  deflater->ctx.hd_table_bufsize_max = next_bufsize;
 1246|       |
 1247|    522|  deflater->min_hd_table_bufsize_max =
 1248|    522|      nghttp2_min(deflater->min_hd_table_bufsize_max, next_bufsize);
 1249|       |
 1250|    522|  deflater->notify_table_size_change = 1;
 1251|       |
 1252|    522|  hd_context_shrink_table_size(&deflater->ctx, &deflater->map);
 1253|    522|  return 0;
 1254|    522|}
nghttp2_hd_table_get:
 1295|  5.01k|nghttp2_hd_nv nghttp2_hd_table_get(nghttp2_hd_context *context, size_t idx) {
 1296|  5.01k|  assert(INDEX_RANGE_VALID(context, idx));
 1297|  5.01k|  if (idx >= NGHTTP2_STATIC_TABLE_LENGTH) {
 1298|    556|    return hd_ringbuf_get(&context->hd_table, idx - NGHTTP2_STATIC_TABLE_LENGTH)
 1299|    556|        ->nv;
 1300|  4.45k|  } else {
 1301|  4.45k|    const nghttp2_hd_static_entry *ent = &static_table[idx];
 1302|  4.45k|    nghttp2_hd_nv nv = {(nghttp2_rcbuf *)&ent->name,
 1303|  4.45k|                        (nghttp2_rcbuf *)&ent->value, ent->token,
 1304|  4.45k|                        NGHTTP2_NV_FLAG_NONE};
 1305|  4.45k|    return nv;
 1306|  4.45k|  }
 1307|  5.01k|}
nghttp2_hd_deflate_hd_bufs:
 1436|    678|                               size_t nvlen) {
 1437|    678|  size_t i;
 1438|    678|  int rv = 0;
 1439|       |
 1440|    678|  if (deflater->ctx.bad) {
 1441|      0|    return NGHTTP2_ERR_HEADER_COMP;
 1442|      0|  }
 1443|       |
 1444|    678|  if (deflater->notify_table_size_change) {
 1445|      0|    size_t min_hd_table_bufsize_max;
 1446|       |
 1447|      0|    min_hd_table_bufsize_max = deflater->min_hd_table_bufsize_max;
 1448|       |
 1449|      0|    deflater->notify_table_size_change = 0;
 1450|      0|    deflater->min_hd_table_bufsize_max = UINT32_MAX;
 1451|       |
 1452|      0|    if (deflater->ctx.hd_table_bufsize_max > min_hd_table_bufsize_max) {
 1453|       |
 1454|      0|      rv = emit_table_size(bufs, min_hd_table_bufsize_max);
 1455|       |
 1456|      0|      if (rv != 0) {
 1457|      0|        goto fail;
 1458|      0|      }
 1459|      0|    }
 1460|       |
 1461|      0|    rv = emit_table_size(bufs, deflater->ctx.hd_table_bufsize_max);
 1462|       |
 1463|      0|    if (rv != 0) {
 1464|      0|      goto fail;
 1465|      0|    }
 1466|      0|  }
 1467|       |
 1468|  7.17k|  for (i = 0; i < nvlen; ++i) {
 1469|  6.49k|    rv = deflate_nv(deflater, bufs, &nv[i]);
 1470|  6.49k|    if (rv != 0) {
 1471|      0|      goto fail;
 1472|      0|    }
 1473|  6.49k|  }
 1474|       |
 1475|    678|  DEBUGF("deflatehd: all input name/value pairs were deflated\n");
 1476|       |
 1477|    678|  return 0;
 1478|      0|fail:
 1479|      0|  DEBUGF("deflatehd: error return %d\n", rv);
 1480|       |
 1481|      0|  deflater->ctx.bad = 1;
 1482|      0|  return rv;
 1483|    678|}
nghttp2_hd_deflate_bound:
 1551|    678|                                const nghttp2_nv *nva, size_t nvlen) {
 1552|    678|  size_t n = 0;
 1553|    678|  size_t i;
 1554|    678|  (void)deflater;
 1555|       |
 1556|       |  /* Possible Maximum Header Table Size Change.  Encoding (1u << 31) -
 1557|       |     1 using 4 bit prefix requires 6 bytes.  We may emit this at most
 1558|       |     twice. */
 1559|    678|  n += 12;
 1560|       |
 1561|       |  /* Use Literal Header Field without indexing - New Name, since it is
 1562|       |     most space consuming format.  Also we choose the less one between
 1563|       |     non-huffman and huffman, so using literal byte count is
 1564|       |     sufficient for upper bound.
 1565|       |
 1566|       |     Encoding (1u << 31) - 1 using 7 bit prefix requires 6 bytes.  We
 1567|       |     need 2 of this for |nvlen| header fields. */
 1568|    678|  n += 6 * 2 * nvlen;
 1569|       |
 1570|  7.17k|  for (i = 0; i < nvlen; ++i) {
 1571|  6.49k|    n += nva[i].namelen + nva[i].valuelen;
 1572|  6.49k|  }
 1573|       |
 1574|    678|  return n;
 1575|    678|}
nghttp2_hd_inflate_hd_nv:
 1866|  5.28k|                                 int in_final) {
 1867|  5.28k|  ssize_t rv = 0;
 1868|  5.28k|  const uint8_t *first = in;
 1869|  5.28k|  const uint8_t *last = in + inlen;
 1870|  5.28k|  int rfin = 0;
 1871|  5.28k|  int busy = 0;
 1872|  5.28k|  nghttp2_mem *mem;
 1873|       |
 1874|  5.28k|  mem = inflater->ctx.mem;
 1875|       |
 1876|  5.28k|  if (inflater->ctx.bad) {
 1877|      0|    return NGHTTP2_ERR_HEADER_COMP;
 1878|      0|  }
 1879|       |
 1880|  5.28k|  DEBUGF("inflatehd: start state=%d\n", inflater->state);
 1881|  5.28k|  hd_inflate_keep_free(inflater);
 1882|  5.28k|  *inflate_flags = NGHTTP2_HD_INFLATE_NONE;
 1883|  21.0k|  for (; in != last || busy;) {
 1884|  20.9k|    busy = 0;
 1885|  20.9k|    switch (inflater->state) {
 1886|      0|    case NGHTTP2_HD_STATE_EXPECT_TABLE_SIZE:
 1887|      0|      if ((*in & 0xe0u) != 0x20u) {
 1888|      0|        DEBUGF("inflatehd: header table size change was expected, but saw "
 1889|      0|               "0x%02x as first byte",
 1890|      0|               *in);
 1891|      0|        rv = NGHTTP2_ERR_HEADER_COMP;
 1892|      0|        goto fail;
 1893|      0|      }
 1894|       |    /* fall through */
 1895|    537|    case NGHTTP2_HD_STATE_INFLATE_START:
 1896|  5.48k|    case NGHTTP2_HD_STATE_OPCODE:
 1897|  5.48k|      if ((*in & 0xe0u) == 0x20u) {
 1898|    324|        DEBUGF("inflatehd: header table size change\n");
 1899|    324|        if (inflater->state == NGHTTP2_HD_STATE_OPCODE) {
 1900|     29|          DEBUGF("inflatehd: header table size change must appear at the head "
 1901|     29|                 "of header block\n");
 1902|     29|          rv = NGHTTP2_ERR_HEADER_COMP;
 1903|     29|          goto fail;
 1904|     29|        }
 1905|    295|        inflater->opcode = NGHTTP2_HD_OPCODE_INDEXED;
 1906|    295|        inflater->state = NGHTTP2_HD_STATE_READ_TABLE_SIZE;
 1907|  5.16k|      } else if (*in & 0x80u) {
 1908|  1.37k|        DEBUGF("inflatehd: indexed repr\n");
 1909|  1.37k|        inflater->opcode = NGHTTP2_HD_OPCODE_INDEXED;
 1910|  1.37k|        inflater->state = NGHTTP2_HD_STATE_READ_INDEX;
 1911|  3.78k|      } else {
 1912|  3.78k|        if (*in == 0x40u || *in == 0 || *in == 0x10u) {
 1913|  2.57k|          DEBUGF("inflatehd: literal header repr - new name\n");
 1914|  2.57k|          inflater->opcode = NGHTTP2_HD_OPCODE_NEWNAME;
 1915|  2.57k|          inflater->state = NGHTTP2_HD_STATE_NEWNAME_CHECK_NAMELEN;
 1916|  2.57k|        } else {
 1917|  1.20k|          DEBUGF("inflatehd: literal header repr - indexed name\n");
 1918|  1.20k|          inflater->opcode = NGHTTP2_HD_OPCODE_INDNAME;
 1919|  1.20k|          inflater->state = NGHTTP2_HD_STATE_READ_INDEX;
 1920|  1.20k|        }
 1921|  3.78k|        inflater->index_required = (*in & 0x40) != 0;
 1922|  3.78k|        inflater->no_index = (*in & 0xf0u) == 0x10u;
 1923|  3.78k|        DEBUGF("inflatehd: indexing required=%d, no_index=%d\n",
 1924|  3.78k|               inflater->index_required, inflater->no_index);
 1925|  3.78k|        if (inflater->opcode == NGHTTP2_HD_OPCODE_NEWNAME) {
 1926|  2.57k|          ++in;
 1927|  2.57k|        }
 1928|  3.78k|      }
 1929|  5.45k|      inflater->left = 0;
 1930|  5.45k|      inflater->shift = 0;
 1931|  5.45k|      break;
 1932|    295|    case NGHTTP2_HD_STATE_READ_TABLE_SIZE:
 1933|    295|      rfin = 0;
 1934|    295|      rv = hd_inflate_read_len(
 1935|    295|          inflater, &rfin, in, last, 5,
 1936|    295|          nghttp2_min(inflater->min_hd_table_bufsize_max,
 1937|    295|                      inflater->settings_hd_table_bufsize_max));
 1938|    295|      if (rv < 0) {
 1939|      6|        goto fail;
 1940|      6|      }
 1941|    289|      in += rv;
 1942|    289|      if (!rfin) {
 1943|      1|        goto almost_ok;
 1944|      1|      }
 1945|    288|      DEBUGF("inflatehd: table_size=%zu\n", inflater->left);
 1946|    288|      inflater->min_hd_table_bufsize_max = UINT32_MAX;
 1947|    288|      inflater->ctx.hd_table_bufsize_max = inflater->left;
 1948|    288|      hd_context_shrink_table_size(&inflater->ctx, NULL);
 1949|    288|      inflater->state = NGHTTP2_HD_STATE_INFLATE_START;
 1950|    288|      break;
 1951|  2.58k|    case NGHTTP2_HD_STATE_READ_INDEX: {
 1952|  2.58k|      size_t prefixlen;
 1953|       |
 1954|  2.58k|      if (inflater->opcode == NGHTTP2_HD_OPCODE_INDEXED) {
 1955|  1.37k|        prefixlen = 7;
 1956|  1.37k|      } else if (inflater->index_required) {
 1957|    801|        prefixlen = 6;
 1958|    801|      } else {
 1959|    406|        prefixlen = 4;
 1960|    406|      }
 1961|       |
 1962|  2.58k|      rfin = 0;
 1963|  2.58k|      rv = hd_inflate_read_len(inflater, &rfin, in, last, prefixlen,
 1964|  2.58k|                               get_max_index(&inflater->ctx));
 1965|  2.58k|      if (rv < 0) {
 1966|     33|        goto fail;
 1967|     33|      }
 1968|       |
 1969|  2.55k|      in += rv;
 1970|       |
 1971|  2.55k|      if (!rfin) {
 1972|      1|        goto almost_ok;
 1973|      1|      }
 1974|       |
 1975|  2.55k|      if (inflater->left == 0) {
 1976|      2|        rv = NGHTTP2_ERR_HEADER_COMP;
 1977|      2|        goto fail;
 1978|      2|      }
 1979|       |
 1980|  2.54k|      DEBUGF("inflatehd: index=%zu\n", inflater->left);
 1981|  2.54k|      if (inflater->opcode == NGHTTP2_HD_OPCODE_INDEXED) {
 1982|  1.35k|        inflater->index = inflater->left;
 1983|  1.35k|        --inflater->index;
 1984|       |
 1985|  1.35k|        hd_inflate_commit_indexed(inflater, nv_out);
 1986|       |
 1987|  1.35k|        inflater->state = NGHTTP2_HD_STATE_OPCODE;
 1988|  1.35k|        *inflate_flags |= NGHTTP2_HD_INFLATE_EMIT;
 1989|  1.35k|        return (ssize_t)(in - first);
 1990|  1.35k|      } else {
 1991|  1.19k|        inflater->index = inflater->left;
 1992|  1.19k|        --inflater->index;
 1993|       |
 1994|  1.19k|        inflater->state = NGHTTP2_HD_STATE_CHECK_VALUELEN;
 1995|  1.19k|      }
 1996|  1.19k|      break;
 1997|  2.54k|    }
 1998|  2.57k|    case NGHTTP2_HD_STATE_NEWNAME_CHECK_NAMELEN:
 1999|  2.57k|      hd_inflate_set_huffman_encoded(inflater, in);
 2000|  2.57k|      inflater->state = NGHTTP2_HD_STATE_NEWNAME_READ_NAMELEN;
 2001|  2.57k|      inflater->left = 0;
 2002|  2.57k|      inflater->shift = 0;
 2003|  2.57k|      DEBUGF("inflatehd: huffman encoded=%d\n", inflater->huffman_encoded != 0);
 2004|       |    /* Fall through */
 2005|  2.57k|    case NGHTTP2_HD_STATE_NEWNAME_READ_NAMELEN:
 2006|  2.57k|      rfin = 0;
 2007|  2.57k|      rv = hd_inflate_read_len(inflater, &rfin, in, last, 7, NGHTTP2_HD_MAX_NV);
 2008|  2.57k|      if (rv < 0) {
 2009|      5|        goto fail;
 2010|      5|      }
 2011|  2.56k|      in += rv;
 2012|  2.56k|      if (!rfin) {
 2013|      2|        DEBUGF("inflatehd: integer not fully decoded. current=%zu\n",
 2014|      2|               inflater->left);
 2015|       |
 2016|      2|        goto almost_ok;
 2017|      2|      }
 2018|       |
 2019|  2.56k|      if (inflater->huffman_encoded) {
 2020|    410|        nghttp2_hd_huff_decode_context_init(&inflater->huff_decode_ctx);
 2021|       |
 2022|    410|        inflater->state = NGHTTP2_HD_STATE_NEWNAME_READ_NAMEHUFF;
 2023|       |
 2024|    410|        rv = nghttp2_rcbuf_new(&inflater->namercbuf, inflater->left * 2 + 1,
 2025|    410|                               mem);
 2026|  2.15k|      } else {
 2027|  2.15k|        inflater->state = NGHTTP2_HD_STATE_NEWNAME_READ_NAME;
 2028|  2.15k|        rv = nghttp2_rcbuf_new(&inflater->namercbuf, inflater->left + 1, mem);
 2029|  2.15k|      }
 2030|       |
 2031|  2.56k|      if (rv != 0) {
 2032|      0|        goto fail;
 2033|      0|      }
 2034|       |
 2035|  2.56k|      nghttp2_buf_wrap_init(&inflater->namebuf, inflater->namercbuf->base,
 2036|  2.56k|                            inflater->namercbuf->len);
 2037|       |
 2038|  2.56k|      break;
 2039|    411|    case NGHTTP2_HD_STATE_NEWNAME_READ_NAMEHUFF:
 2040|    411|      rv = hd_inflate_read_huff(inflater, &inflater->namebuf, in, last);
 2041|    411|      if (rv < 0) {
 2042|      5|        goto fail;
 2043|      5|      }
 2044|       |
 2045|    406|      in += rv;
 2046|       |
 2047|    406|      DEBUGF("inflatehd: %zd bytes read\n", rv);
 2048|       |
 2049|    406|      if (inflater->left) {
 2050|      7|        DEBUGF("inflatehd: still %zu bytes to go\n", inflater->left);
 2051|       |
 2052|      7|        goto almost_ok;
 2053|      7|      }
 2054|       |
 2055|    399|      *inflater->namebuf.last = '\0';
 2056|    399|      inflater->namercbuf->len = nghttp2_buf_len(&inflater->namebuf);
 2057|       |
 2058|    399|      inflater->state = NGHTTP2_HD_STATE_CHECK_VALUELEN;
 2059|       |
 2060|    399|      break;
 2061|  2.15k|    case NGHTTP2_HD_STATE_NEWNAME_READ_NAME:
 2062|  2.15k|      rv = hd_inflate_read(inflater, &inflater->namebuf, in, last);
 2063|  2.15k|      if (rv < 0) {
 2064|      0|        goto fail;
 2065|      0|      }
 2066|       |
 2067|  2.15k|      in += rv;
 2068|       |
 2069|  2.15k|      DEBUGF("inflatehd: %zd bytes read\n", rv);
 2070|  2.15k|      if (inflater->left) {
 2071|     11|        DEBUGF("inflatehd: still %zu bytes to go\n", inflater->left);
 2072|       |
 2073|     11|        goto almost_ok;
 2074|     11|      }
 2075|       |
 2076|  2.14k|      *inflater->namebuf.last = '\0';
 2077|  2.14k|      inflater->namercbuf->len = nghttp2_buf_len(&inflater->namebuf);
 2078|       |
 2079|  2.14k|      inflater->state = NGHTTP2_HD_STATE_CHECK_VALUELEN;
 2080|       |
 2081|  2.14k|      break;
 2082|  3.73k|    case NGHTTP2_HD_STATE_CHECK_VALUELEN:
 2083|  3.73k|      hd_inflate_set_huffman_encoded(inflater, in);
 2084|  3.73k|      inflater->state = NGHTTP2_HD_STATE_READ_VALUELEN;
 2085|  3.73k|      inflater->left = 0;
 2086|  3.73k|      inflater->shift = 0;
 2087|  3.73k|      DEBUGF("inflatehd: huffman encoded=%d\n", inflater->huffman_encoded != 0);
 2088|       |    /* Fall through */
 2089|  3.73k|    case NGHTTP2_HD_STATE_READ_VALUELEN:
 2090|  3.73k|      rfin = 0;
 2091|  3.73k|      rv = hd_inflate_read_len(inflater, &rfin, in, last, 7, NGHTTP2_HD_MAX_NV);
 2092|  3.73k|      if (rv < 0) {
 2093|      5|        goto fail;
 2094|      5|      }
 2095|       |
 2096|  3.73k|      in += rv;
 2097|       |
 2098|  3.73k|      if (!rfin) {
 2099|      2|        goto almost_ok;
 2100|      2|      }
 2101|       |
 2102|  3.73k|      DEBUGF("inflatehd: valuelen=%zu\n", inflater->left);
 2103|       |
 2104|  3.73k|      if (inflater->huffman_encoded) {
 2105|  1.08k|        nghttp2_hd_huff_decode_context_init(&inflater->huff_decode_ctx);
 2106|       |
 2107|  1.08k|        inflater->state = NGHTTP2_HD_STATE_READ_VALUEHUFF;
 2108|       |
 2109|  1.08k|        rv = nghttp2_rcbuf_new(&inflater->valuercbuf, inflater->left * 2 + 1,
 2110|  1.08k|                               mem);
 2111|  2.64k|      } else {
 2112|  2.64k|        inflater->state = NGHTTP2_HD_STATE_READ_VALUE;
 2113|       |
 2114|  2.64k|        rv = nghttp2_rcbuf_new(&inflater->valuercbuf, inflater->left + 1, mem);
 2115|  2.64k|      }
 2116|       |
 2117|  3.73k|      if (rv != 0) {
 2118|      0|        goto fail;
 2119|      0|      }
 2120|       |
 2121|  3.73k|      nghttp2_buf_wrap_init(&inflater->valuebuf, inflater->valuercbuf->base,
 2122|  3.73k|                            inflater->valuercbuf->len);
 2123|       |
 2124|  3.73k|      busy = 1;
 2125|       |
 2126|  3.73k|      break;
 2127|  1.08k|    case NGHTTP2_HD_STATE_READ_VALUEHUFF:
 2128|  1.08k|      rv = hd_inflate_read_huff(inflater, &inflater->valuebuf, in, last);
 2129|  1.08k|      if (rv < 0) {
 2130|     13|        goto fail;
 2131|     13|      }
 2132|       |
 2133|  1.07k|      in += rv;
 2134|       |
 2135|  1.07k|      DEBUGF("inflatehd: %zd bytes read\n", rv);
 2136|       |
 2137|  1.07k|      if (inflater->left) {
 2138|     14|        DEBUGF("inflatehd: still %zu bytes to go\n", inflater->left);
 2139|       |
 2140|     14|        goto almost_ok;
 2141|     14|      }
 2142|       |
 2143|  1.06k|      *inflater->valuebuf.last = '\0';
 2144|  1.06k|      inflater->valuercbuf->len = nghttp2_buf_len(&inflater->valuebuf);
 2145|       |
 2146|  1.06k|      if (inflater->opcode == NGHTTP2_HD_OPCODE_NEWNAME) {
 2147|    406|        rv = hd_inflate_commit_newname(inflater, nv_out);
 2148|    655|      } else {
 2149|    655|        rv = hd_inflate_commit_indname(inflater, nv_out);
 2150|    655|      }
 2151|       |
 2152|  1.06k|      if (rv != 0) {
 2153|      0|        goto fail;
 2154|      0|      }
 2155|       |
 2156|  1.06k|      inflater->state = NGHTTP2_HD_STATE_OPCODE;
 2157|  1.06k|      *inflate_flags |= NGHTTP2_HD_INFLATE_EMIT;
 2158|       |
 2159|  1.06k|      return (ssize_t)(in - first);
 2160|  2.64k|    case NGHTTP2_HD_STATE_READ_VALUE:
 2161|  2.64k|      rv = hd_inflate_read(inflater, &inflater->valuebuf, in, last);
 2162|  2.64k|      if (rv < 0) {
 2163|      0|        DEBUGF("inflatehd: value read failure %zd: %s\n", rv,
 2164|      0|               nghttp2_strerror((int)rv));
 2165|      0|        goto fail;
 2166|      0|      }
 2167|       |
 2168|  2.64k|      in += rv;
 2169|       |
 2170|  2.64k|      DEBUGF("inflatehd: %zd bytes read\n", rv);
 2171|       |
 2172|  2.64k|      if (inflater->left) {
 2173|     41|        DEBUGF("inflatehd: still %zu bytes to go\n", inflater->left);
 2174|     41|        goto almost_ok;
 2175|     41|      }
 2176|       |
 2177|  2.60k|      *inflater->valuebuf.last = '\0';
 2178|  2.60k|      inflater->valuercbuf->len = nghttp2_buf_len(&inflater->valuebuf);
 2179|       |
 2180|  2.60k|      if (inflater->opcode == NGHTTP2_HD_OPCODE_NEWNAME) {
 2181|  2.10k|        rv = hd_inflate_commit_newname(inflater, nv_out);
 2182|  2.10k|      } else {
 2183|    505|        rv = hd_inflate_commit_indname(inflater, nv_out);
 2184|    505|      }
 2185|       |
 2186|  2.60k|      if (rv != 0) {
 2187|      0|        goto fail;
 2188|      0|      }
 2189|       |
 2190|  2.60k|      inflater->state = NGHTTP2_HD_STATE_OPCODE;
 2191|  2.60k|      *inflate_flags |= NGHTTP2_HD_INFLATE_EMIT;
 2192|       |
 2193|  2.60k|      return (ssize_t)(in - first);
 2194|  20.9k|    }
 2195|  20.9k|  }
 2196|       |
 2197|     84|  assert(in == last);
 2198|       |
 2199|     84|  DEBUGF("inflatehd: all input bytes were processed\n");
 2200|       |
 2201|     84|  if (in_final) {
 2202|     73|    DEBUGF("inflatehd: in_final set\n");
 2203|       |
 2204|     73|    if (inflater->state != NGHTTP2_HD_STATE_OPCODE &&
 2205|     73|        inflater->state != NGHTTP2_HD_STATE_INFLATE_START) {
 2206|      1|      DEBUGF("inflatehd: unacceptable state=%d\n", inflater->state);
 2207|      1|      rv = NGHTTP2_ERR_HEADER_COMP;
 2208|       |
 2209|      1|      goto fail;
 2210|      1|    }
 2211|     72|    *inflate_flags |= NGHTTP2_HD_INFLATE_FINAL;
 2212|     72|  }
 2213|     83|  return (ssize_t)(in - first);
 2214|       |
 2215|     79|almost_ok:
 2216|     79|  if (in_final) {
 2217|     26|    DEBUGF("inflatehd: input ended prematurely\n");
 2218|       |
 2219|     26|    rv = NGHTTP2_ERR_HEADER_COMP;
 2220|       |
 2221|     26|    goto fail;
 2222|     26|  }
 2223|     53|  return (ssize_t)(in - first);
 2224|       |
 2225|    125|fail:
 2226|    125|  DEBUGF("inflatehd: error return %zd\n", rv);
 2227|       |
 2228|    125|  inflater->ctx.bad = 1;
 2229|    125|  return rv;
 2230|     79|}
nghttp2_hd_inflate_end_headers:
 2232|     72|int nghttp2_hd_inflate_end_headers(nghttp2_hd_inflater *inflater) {
 2233|     72|  hd_inflate_keep_free(inflater);
 2234|     72|  inflater->state = NGHTTP2_HD_STATE_INFLATE_START;
 2235|     72|  return 0;
 2236|     72|}
nghttp2_hd.c:hd_context_init:
  669|  1.40k|static int hd_context_init(nghttp2_hd_context *context, nghttp2_mem *mem) {
  670|  1.40k|  int rv;
  671|  1.40k|  context->mem = mem;
  672|  1.40k|  context->bad = 0;
  673|  1.40k|  context->hd_table_bufsize_max = NGHTTP2_HD_DEFAULT_MAX_BUFFER_SIZE;
  674|  1.40k|  rv = hd_ringbuf_init(
  675|  1.40k|      &context->hd_table,
  676|  1.40k|      context->hd_table_bufsize_max / NGHTTP2_HD_ENTRY_OVERHEAD, mem);
  677|  1.40k|  if (rv != 0) {
  678|      0|    return rv;
  679|      0|  }
  680|       |
  681|  1.40k|  context->hd_table_bufsize = 0;
  682|  1.40k|  context->next_seq = 0;
  683|       |
  684|  1.40k|  return 0;
  685|  1.40k|}
nghttp2_hd.c:hd_ringbuf_init:
  589|  1.40k|                           nghttp2_mem *mem) {
  590|  1.40k|  size_t size;
  591|  11.2k|  for (size = 1; size < bufsize; size <<= 1)
  592|  9.85k|    ;
  593|  1.40k|  ringbuf->buffer = nghttp2_mem_malloc(mem, sizeof(nghttp2_hd_entry *) * size);
  594|  1.40k|  if (ringbuf->buffer == NULL) {
  595|      0|    return NGHTTP2_ERR_NOMEM;
  596|      0|  }
  597|  1.40k|  ringbuf->mask = size - 1;
  598|  1.40k|  ringbuf->first = 0;
  599|  1.40k|  ringbuf->len = 0;
  600|  1.40k|  return 0;
  601|  1.40k|}
nghttp2_hd.c:hd_map_init:
  524|    704|static void hd_map_init(nghttp2_hd_map *map) {
  525|    704|  memset(map, 0, sizeof(nghttp2_hd_map));
  526|    704|}
nghttp2_hd.c:hd_context_free:
  687|  1.40k|static void hd_context_free(nghttp2_hd_context *context) {
  688|  1.40k|  hd_ringbuf_free(&context->hd_table, context->mem);
  689|  1.40k|}
nghttp2_hd.c:hd_ringbuf_free:
  634|  1.40k|static void hd_ringbuf_free(nghttp2_hd_ringbuf *ringbuf, nghttp2_mem *mem) {
  635|  1.40k|  size_t i;
  636|  1.40k|  if (ringbuf == NULL) {
  637|      0|    return;
  638|      0|  }
  639|  6.02k|  for (i = 0; i < ringbuf->len; ++i) {
  640|  4.61k|    nghttp2_hd_entry *ent = hd_ringbuf_get(ringbuf, i);
  641|       |
  642|  4.61k|    nghttp2_hd_entry_free(ent);
  643|  4.61k|    nghttp2_mem_free(mem, ent);
  644|  4.61k|  }
  645|  1.40k|  nghttp2_mem_free(mem, ringbuf->buffer);
  646|  1.40k|}
nghttp2_hd.c:hd_inflate_keep_free:
  756|  6.05k|static void hd_inflate_keep_free(nghttp2_hd_inflater *inflater) {
  757|  6.05k|  nghttp2_rcbuf_decref(inflater->nv_value_keep);
  758|  6.05k|  nghttp2_rcbuf_decref(inflater->nv_name_keep);
  759|       |
  760|  6.05k|  inflater->nv_value_keep = NULL;
  761|  6.05k|  inflater->nv_name_keep = NULL;
  762|  6.05k|}
nghttp2_hd.c:hd_context_shrink_table_size:
 1219|    810|                                         nghttp2_hd_map *map) {
 1220|    810|  nghttp2_mem *mem;
 1221|       |
 1222|    810|  mem = context->mem;
 1223|       |
 1224|    979|  while (context->hd_table_bufsize > context->hd_table_bufsize_max &&
 1225|    979|         context->hd_table.len > 0) {
 1226|    169|    size_t idx = context->hd_table.len - 1;
 1227|    169|    nghttp2_hd_entry *ent = hd_ringbuf_get(&context->hd_table, idx);
 1228|    169|    context->hd_table_bufsize -=
 1229|    169|        entry_room(ent->nv.name->len, ent->nv.value->len);
 1230|    169|    hd_ringbuf_pop_back(&context->hd_table);
 1231|    169|    if (map) {
 1232|    125|      hd_map_remove(map, ent);
 1233|    125|    }
 1234|       |
 1235|    169|    nghttp2_hd_entry_free(ent);
 1236|    169|    nghttp2_mem_free(mem, ent);
 1237|    169|  }
 1238|    810|}
nghttp2_hd.c:entry_room:
  777|  10.4k|static size_t entry_room(size_t namelen, size_t valuelen) {
  778|  10.4k|  return NGHTTP2_HD_ENTRY_OVERHEAD + namelen + valuelen;
  779|  10.4k|}
nghttp2_hd.c:hd_ringbuf_pop_back:
  664|    189|static void hd_ringbuf_pop_back(nghttp2_hd_ringbuf *ringbuf) {
  665|    189|  assert(ringbuf->len > 0);
  666|    189|  --ringbuf->len;
  667|    189|}
nghttp2_hd.c:hd_map_remove:
  572|    125|static void hd_map_remove(nghttp2_hd_map *map, nghttp2_hd_entry *ent) {
  573|    125|  nghttp2_hd_entry **dst;
  574|       |
  575|    125|  dst = &map->table[ent->hash & (HD_MAP_SIZE - 1)];
  576|       |
  577|    240|  for (; *dst; dst = &(*dst)->next) {
  578|    240|    if (*dst != ent) {
  579|    115|      continue;
  580|    115|    }
  581|       |
  582|    125|    *dst = ent->next;
  583|    125|    ent->next = NULL;
  584|    125|    return;
  585|    240|  }
  586|    125|}
nghttp2_hd.c:hd_ringbuf_get:
  604|  5.35k|                                        size_t idx) {
  605|  5.35k|  assert(idx < ringbuf->len);
  606|  5.35k|  return ringbuf->buffer[(ringbuf->first + idx) & ringbuf->mask];
  607|  5.35k|}
nghttp2_hd.c:count_encoded_length:
  789|  11.0k|static size_t count_encoded_length(size_t n, size_t prefix) {
  790|  11.0k|  size_t k = (size_t)((1 << prefix) - 1);
  791|  11.0k|  size_t len = 0;
  792|       |
  793|  11.0k|  if (n < k) {
  794|  10.3k|    return 1;
  795|  10.3k|  }
  796|       |
  797|    699|  n -= k;
  798|    699|  ++len;
  799|       |
  800|    700|  for (; n >= 128; n >>= 7, ++len)
  801|      1|    ;
  802|       |
  803|    699|  return len + 1;
  804|  11.0k|}
nghttp2_hd.c:encode_length:
  806|  11.0k|static size_t encode_length(uint8_t *buf, size_t n, size_t prefix) {
  807|  11.0k|  size_t k = (size_t)((1 << prefix) - 1);
  808|  11.0k|  uint8_t *begin = buf;
  809|       |
  810|  11.0k|  *buf = (uint8_t)(*buf & ~k);
  811|       |
  812|  11.0k|  if (n < k) {
  813|  10.3k|    *buf = (uint8_t)(*buf | n);
  814|  10.3k|    return 1;
  815|  10.3k|  }
  816|       |
  817|    699|  *buf = (uint8_t)(*buf | k);
  818|    699|  ++buf;
  819|       |
  820|    699|  n -= k;
  821|       |
  822|    700|  for (; n >= 128; n >>= 7) {
  823|      1|    *buf++ = (uint8_t)((1 << 7) | (n & 0x7f));
  824|      1|  }
  825|       |
  826|    699|  *buf++ = (uint8_t)n;
  827|       |
  828|    699|  return (size_t)(buf - begin);
  829|  11.0k|}
nghttp2_hd.c:deflate_nv:
 1337|  6.49k|                      const nghttp2_nv *nv) {
 1338|  6.49k|  int rv;
 1339|  6.49k|  search_result res;
 1340|  6.49k|  ssize_t idx;
 1341|  6.49k|  int indexing_mode;
 1342|  6.49k|  int32_t token;
 1343|  6.49k|  nghttp2_mem *mem;
 1344|  6.49k|  uint32_t hash = 0;
 1345|       |
 1346|  6.49k|  DEBUGF("deflatehd: deflating %.*s: %.*s\n", (int)nv->namelen, nv->name,
 1347|  6.49k|         (int)nv->valuelen, nv->value);
 1348|       |
 1349|  6.49k|  mem = deflater->ctx.mem;
 1350|       |
 1351|  6.49k|  token = lookup_token(nv->name, nv->namelen);
 1352|  6.49k|  if (token == -1) {
 1353|  2.12k|    hash = name_hash(nv);
 1354|  4.37k|  } else if (token <= NGHTTP2_TOKEN_WWW_AUTHENTICATE) {
 1355|  4.37k|    hash = static_table[token].hash;
 1356|  4.37k|  }
 1357|       |
 1358|       |  /* Don't index authorization header field since it may contain low
 1359|       |     entropy secret data (e.g., id/password).  Also cookie header
 1360|       |     field with less than 20 bytes value is also never indexed.  This
 1361|       |     is the same criteria used in Firefox codebase. */
 1362|  6.49k|  indexing_mode =
 1363|  6.49k|      token == NGHTTP2_TOKEN_AUTHORIZATION ||
 1364|  6.49k|              (token == NGHTTP2_TOKEN_COOKIE && nv->valuelen < 20) ||
 1365|  6.49k|              (nv->flags & NGHTTP2_NV_FLAG_NO_INDEX)
 1366|  6.49k|          ? NGHTTP2_HD_NEVER_INDEXING
 1367|  6.49k|          : hd_deflate_decide_indexing(deflater, nv, token);
 1368|       |
 1369|  6.49k|  res = search_hd_table(&deflater->ctx, nv, token, indexing_mode,
 1370|  6.49k|                        &deflater->map, hash);
 1371|       |
 1372|  6.49k|  idx = res.index;
 1373|       |
 1374|  6.49k|  if (res.name_value_match) {
 1375|       |
 1376|  1.98k|    DEBUGF("deflatehd: name/value match index=%zd\n", idx);
 1377|       |
 1378|  1.98k|    rv = emit_indexed_block(bufs, (size_t)idx);
 1379|  1.98k|    if (rv != 0) {
 1380|      0|      return rv;
 1381|      0|    }
 1382|       |
 1383|  1.98k|    return 0;
 1384|  1.98k|  }
 1385|       |
 1386|  4.51k|  if (res.index != -1) {
 1387|  3.30k|    DEBUGF("deflatehd: name match index=%zd\n", res.index);
 1388|  3.30k|  }
 1389|       |
 1390|  4.51k|  if (indexing_mode == NGHTTP2_HD_WITH_INDEXING) {
 1391|  3.71k|    nghttp2_hd_nv hd_nv;
 1392|       |
 1393|  3.71k|    if (idx != -1) {
 1394|  2.50k|      hd_nv.name = nghttp2_hd_table_get(&deflater->ctx, (size_t)idx).name;
 1395|  2.50k|      nghttp2_rcbuf_incref(hd_nv.name);
 1396|  2.50k|    } else {
 1397|  1.20k|      rv = nghttp2_rcbuf_new2(&hd_nv.name, nv->name, nv->namelen, mem);
 1398|  1.20k|      if (rv != 0) {
 1399|      0|        return rv;
 1400|      0|      }
 1401|  1.20k|    }
 1402|       |
 1403|  3.71k|    rv = nghttp2_rcbuf_new2(&hd_nv.value, nv->value, nv->valuelen, mem);
 1404|       |
 1405|  3.71k|    if (rv != 0) {
 1406|      0|      nghttp2_rcbuf_decref(hd_nv.name);
 1407|      0|      return rv;
 1408|      0|    }
 1409|       |
 1410|  3.71k|    hd_nv.token = token;
 1411|  3.71k|    hd_nv.flags = NGHTTP2_NV_FLAG_NONE;
 1412|       |
 1413|  3.71k|    rv = add_hd_table_incremental(&deflater->ctx, &hd_nv, &deflater->map, hash);
 1414|       |
 1415|  3.71k|    nghttp2_rcbuf_decref(hd_nv.value);
 1416|  3.71k|    nghttp2_rcbuf_decref(hd_nv.name);
 1417|       |
 1418|  3.71k|    if (rv != 0) {
 1419|      0|      return NGHTTP2_ERR_HEADER_COMP;
 1420|      0|    }
 1421|  3.71k|  }
 1422|  4.51k|  if (idx == -1) {
 1423|  1.20k|    rv = emit_newname_block(bufs, nv, indexing_mode);
 1424|  3.30k|  } else {
 1425|  3.30k|    rv = emit_indname_block(bufs, (size_t)idx, nv, indexing_mode);
 1426|  3.30k|  }
 1427|  4.51k|  if (rv != 0) {
 1428|      0|    return rv;
 1429|      0|  }
 1430|       |
 1431|  4.51k|  return 0;
 1432|  4.51k|}
nghttp2_hd.c:lookup_token:
  120|  9.00k|static int32_t lookup_token(const uint8_t *name, size_t namelen) {
  121|  9.00k|  switch (namelen) {
  122|     38|  case 2:
  123|     38|    switch (name[1]) {
  124|     13|    case 'e':
  125|     13|      if (memeq("t", name, 1)) {
  126|      3|        return NGHTTP2_TOKEN_TE;
  127|      3|      }
  128|     10|      break;
  129|     38|    }
  130|     35|    break;
  131|     97|  case 3:
  132|     97|    switch (name[2]) {
  133|     15|    case 'a':
  134|     15|      if (memeq("vi", name, 2)) {
  135|      0|        return NGHTTP2_TOKEN_VIA;
  136|      0|      }
  137|     15|      break;
  138|     40|    case 'e':
  139|     40|      if (memeq("ag", name, 2)) {
  140|     29|        return NGHTTP2_TOKEN_AGE;
  141|     29|      }
  142|     11|      break;
  143|     97|    }
  144|     68|    break;
  145|    445|  case 4:
  146|    445|    switch (name[3]) {
  147|    173|    case 'e':
  148|    173|      if (memeq("dat", name, 3)) {
  149|     87|        return NGHTTP2_TOKEN_DATE;
  150|     87|      }
  151|     86|      break;
  152|    161|    case 'g':
  153|    161|      if (memeq("eta", name, 3)) {
  154|    137|        return NGHTTP2_TOKEN_ETAG;
  155|    137|      }
  156|     24|      break;
  157|     24|    case 'k':
  158|     10|      if (memeq("lin", name, 3)) {
  159|      0|        return NGHTTP2_TOKEN_LINK;
  160|      0|      }
  161|     10|      break;
  162|     20|    case 'm':
  163|     20|      if (memeq("fro", name, 3)) {
  164|     10|        return NGHTTP2_TOKEN_FROM;
  165|     10|      }
  166|     10|      break;
  167|     10|    case 't':
  168|     10|      if (memeq("hos", name, 3)) {
  169|      0|        return NGHTTP2_TOKEN_HOST;
  170|      0|      }
  171|     10|      break;
  172|     11|    case 'y':
  173|     11|      if (memeq("var", name, 3)) {
  174|      0|        return NGHTTP2_TOKEN_VARY;
  175|      0|      }
  176|     11|      break;
  177|    445|    }
  178|    211|    break;
  179|    736|  case 5:
  180|    736|    switch (name[4]) {
  181|     16|    case 'e':
  182|     16|      if (memeq("rang", name, 4)) {
  183|      2|        return NGHTTP2_TOKEN_RANGE;
  184|      2|      }
  185|     14|      break;
  186|    688|    case 'h':
  187|    688|      if (memeq(":pat", name, 4)) {
  188|    678|        return NGHTTP2_TOKEN__PATH;
  189|    678|      }
  190|     10|      break;
  191|     13|    case 'w':
  192|     13|      if (memeq("allo", name, 4)) {
  193|     10|        return NGHTTP2_TOKEN_ALLOW;
  194|     10|      }
  195|      3|      break;
  196|    736|    }
  197|     46|    break;
  198|  1.01k|  case 6:
  199|  1.01k|    switch (name[5]) {
  200|     75|    case 'e':
  201|     75|      if (memeq("cooki", name, 5)) {
  202|     45|        return NGHTTP2_TOKEN_COOKIE;
  203|     45|      }
  204|     30|      break;
  205|    262|    case 'r':
  206|    262|      if (memeq("serve", name, 5)) {
  207|    240|        return NGHTTP2_TOKEN_SERVER;
  208|    240|      }
  209|     22|      break;
  210|    638|    case 't':
  211|    638|      if (memeq("accep", name, 5)) {
  212|    567|        return NGHTTP2_TOKEN_ACCEPT;
  213|    567|      }
  214|     71|      if (memeq("expec", name, 5)) {
  215|      0|        return NGHTTP2_TOKEN_EXPECT;
  216|      0|      }
  217|     71|      break;
  218|  1.01k|    }
  219|    160|    break;
  220|  1.62k|  case 7:
  221|  1.62k|    switch (name[6]) {
  222|    697|    case 'd':
  223|    697|      if (memeq(":metho", name, 6)) {
  224|    678|        return NGHTTP2_TOKEN__METHOD;
  225|    678|      }
  226|     19|      break;
  227|    714|    case 'e':
  228|    714|      if (memeq(":schem", name, 6)) {
  229|    678|        return NGHTTP2_TOKEN__SCHEME;
  230|    678|      }
  231|     36|      if (memeq("upgrad", name, 6)) {
  232|      0|        return NGHTTP2_TOKEN_UPGRADE;
  233|      0|      }
  234|     36|      break;
  235|     36|    case 'h':
  236|     18|      if (memeq("refres", name, 6)) {
  237|      0|        return NGHTTP2_TOKEN_REFRESH;
  238|      0|      }
  239|     18|      break;
  240|     18|    case 'r':
  241|     10|      if (memeq("refere", name, 6)) {
  242|      0|        return NGHTTP2_TOKEN_REFERER;
  243|      0|      }
  244|     10|      break;
  245|     33|    case 's':
  246|     33|      if (memeq(":statu", name, 6)) {
  247|      0|        return NGHTTP2_TOKEN__STATUS;
  248|      0|      }
  249|     33|      if (memeq("expire", name, 6)) {
  250|     14|        return NGHTTP2_TOKEN_EXPIRES;
  251|     14|      }
  252|     19|      break;
  253|  1.62k|    }
  254|    254|    break;
  255|    254|  case 8:
  256|    108|    switch (name[7]) {
  257|     16|    case 'e':
  258|     16|      if (memeq("if-rang", name, 7)) {
  259|      6|        return NGHTTP2_TOKEN_IF_RANGE;
  260|      6|      }
  261|     10|      break;
  262|     10|    case 'h':
  263|     10|      if (memeq("if-matc", name, 7)) {
  264|      0|        return NGHTTP2_TOKEN_IF_MATCH;
  265|      0|      }
  266|     10|      break;
  267|     29|    case 'n':
  268|     29|      if (memeq("locatio", name, 7)) {
  269|     17|        return NGHTTP2_TOKEN_LOCATION;
  270|     17|      }
  271|     12|      break;
  272|    108|    }
  273|     85|    break;
  274|     85|  case 9:
  275|     37|    switch (name[8]) {
  276|     11|    case 'l':
  277|     11|      if (memeq(":protoco", name, 8)) {
  278|      0|        return NGHTTP2_TOKEN__PROTOCOL;
  279|      0|      }
  280|     11|      break;
  281|     37|    }
  282|     37|    break;
  283|    967|  case 10:
  284|    967|    switch (name[9]) {
  285|    248|    case 'e':
  286|    248|      if (memeq("keep-aliv", name, 9)) {
  287|      0|        return NGHTTP2_TOKEN_KEEP_ALIVE;
  288|      0|      }
  289|    248|      if (memeq("set-cooki", name, 9)) {
  290|    124|        return NGHTTP2_TOKEN_SET_COOKIE;
  291|    124|      }
  292|    124|      break;
  293|    124|    case 'n':
  294|     33|      if (memeq("connectio", name, 9)) {
  295|      0|        return NGHTTP2_TOKEN_CONNECTION;
  296|      0|      }
  297|     33|      break;
  298|     33|    case 't':
  299|     10|      if (memeq("user-agen", name, 9)) {
  300|      0|        return NGHTTP2_TOKEN_USER_AGENT;
  301|      0|      }
  302|     10|      break;
  303|    615|    case 'y':
  304|    615|      if (memeq(":authorit", name, 9)) {
  305|    605|        return NGHTTP2_TOKEN__AUTHORITY;
  306|    605|      }
  307|     10|      break;
  308|    967|    }
  309|    238|    break;
  310|    238|  case 11:
  311|     90|    switch (name[10]) {
  312|     11|    case 'r':
  313|     11|      if (memeq("retry-afte", name, 10)) {
  314|      0|        return NGHTTP2_TOKEN_RETRY_AFTER;
  315|      0|      }
  316|     11|      break;
  317|     90|    }
  318|     90|    break;
  319|    140|  case 12:
  320|    140|    switch (name[11]) {
  321|     58|    case 'e':
  322|     58|      if (memeq("content-typ", name, 11)) {
  323|     43|        return NGHTTP2_TOKEN_CONTENT_TYPE;
  324|     43|      }
  325|     15|      break;
  326|     26|    case 's':
  327|     26|      if (memeq("max-forward", name, 11)) {
  328|      0|        return NGHTTP2_TOKEN_MAX_FORWARDS;
  329|      0|      }
  330|     26|      break;
  331|    140|    }
  332|     97|    break;
  333|    359|  case 13:
  334|    359|    switch (name[12]) {
  335|     48|    case 'd':
  336|     48|      if (memeq("last-modifie", name, 12)) {
  337|     21|        return NGHTTP2_TOKEN_LAST_MODIFIED;
  338|     21|      }
  339|     27|      break;
  340|    105|    case 'e':
  341|    105|      if (memeq("content-rang", name, 12)) {
  342|     91|        return NGHTTP2_TOKEN_CONTENT_RANGE;
  343|     91|      }
  344|     14|      break;
  345|     14|    case 'h':
  346|     11|      if (memeq("if-none-matc", name, 12)) {
  347|      0|        return NGHTTP2_TOKEN_IF_NONE_MATCH;
  348|      0|      }
  349|     11|      break;
  350|     21|    case 'l':
  351|     21|      if (memeq("cache-contro", name, 12)) {
  352|     10|        return NGHTTP2_TOKEN_CACHE_CONTROL;
  353|     10|      }
  354|     11|      break;
  355|     12|    case 'n':
  356|     12|      if (memeq("authorizatio", name, 12)) {
  357|      2|        return NGHTTP2_TOKEN_AUTHORIZATION;
  358|      2|      }
  359|     10|      break;
  360|    130|    case 's':
  361|    130|      if (memeq("accept-range", name, 12)) {
  362|     79|        return NGHTTP2_TOKEN_ACCEPT_RANGES;
  363|     79|      }
  364|     51|      break;
  365|    359|    }
  366|    156|    break;
  367|    200|  case 14:
  368|    200|    switch (name[13]) {
  369|    155|    case 'h':
  370|    155|      if (memeq("content-lengt", name, 13)) {
  371|    125|        return NGHTTP2_TOKEN_CONTENT_LENGTH;
  372|    125|      }
  373|     30|      break;
  374|     30|    case 't':
  375|     11|      if (memeq("accept-charse", name, 13)) {
  376|      0|        return NGHTTP2_TOKEN_ACCEPT_CHARSET;
  377|      0|      }
  378|     11|      break;
  379|    200|    }
  380|     75|    break;
  381|    146|  case 15:
  382|    146|    switch (name[14]) {
  383|     10|    case 'e':
  384|     10|      if (memeq("accept-languag", name, 14)) {
  385|      0|        return NGHTTP2_TOKEN_ACCEPT_LANGUAGE;
  386|      0|      }
  387|     10|      break;
  388|     11|    case 'g':
  389|     11|      if (memeq("accept-encodin", name, 14)) {
  390|      1|        return NGHTTP2_TOKEN_ACCEPT_ENCODING;
  391|      1|      }
  392|     10|      break;
  393|    146|    }
  394|    145|    break;
  395|    170|  case 16:
  396|    170|    switch (name[15]) {
  397|     49|    case 'e':
  398|     49|      if (memeq("content-languag", name, 15)) {
  399|      0|        return NGHTTP2_TOKEN_CONTENT_LANGUAGE;
  400|      0|      }
  401|     49|      if (memeq("www-authenticat", name, 15)) {
  402|     21|        return NGHTTP2_TOKEN_WWW_AUTHENTICATE;
  403|     21|      }
  404|     28|      break;
  405|     39|    case 'g':
  406|     39|      if (memeq("content-encodin", name, 15)) {
  407|     12|        return NGHTTP2_TOKEN_CONTENT_ENCODING;
  408|     12|      }
  409|     27|      break;
  410|     62|    case 'n':
  411|     62|      if (memeq("content-locatio", name, 15)) {
  412|     10|        return NGHTTP2_TOKEN_CONTENT_LOCATION;
  413|     10|      }
  414|     52|      if (memeq("proxy-connectio", name, 15)) {
  415|      0|        return NGHTTP2_TOKEN_PROXY_CONNECTION;
  416|      0|      }
  417|     52|      break;
  418|    170|    }
  419|    127|    break;
  420|    129|  case 17:
  421|    129|    switch (name[16]) {
  422|     33|    case 'e':
  423|     33|      if (memeq("if-modified-sinc", name, 16)) {
  424|     14|        return NGHTTP2_TOKEN_IF_MODIFIED_SINCE;
  425|     14|      }
  426|     19|      break;
  427|     19|    case 'g':
  428|      3|      if (memeq("transfer-encodin", name, 16)) {
  429|      0|        return NGHTTP2_TOKEN_TRANSFER_ENCODING;
  430|      0|      }
  431|      3|      break;
  432|    129|    }
  433|    115|    break;
  434|    115|  case 18:
  435|     60|    switch (name[17]) {
  436|     10|    case 'e':
  437|     10|      if (memeq("proxy-authenticat", name, 17)) {
  438|      0|        return NGHTTP2_TOKEN_PROXY_AUTHENTICATE;
  439|      0|      }
  440|     10|      break;
  441|     60|    }
  442|     60|    break;
  443|     75|  case 19:
  444|     75|    switch (name[18]) {
  445|     11|    case 'e':
  446|     11|      if (memeq("if-unmodified-sinc", name, 18)) {
  447|      0|        return NGHTTP2_TOKEN_IF_UNMODIFIED_SINCE;
  448|      0|      }
  449|     11|      break;
  450|     45|    case 'n':
  451|     45|      if (memeq("content-dispositio", name, 18)) {
  452|     11|        return NGHTTP2_TOKEN_CONTENT_DISPOSITION;
  453|     11|      }
  454|     34|      if (memeq("proxy-authorizatio", name, 18)) {
  455|     16|        return NGHTTP2_TOKEN_PROXY_AUTHORIZATION;
  456|     16|      }
  457|     18|      break;
  458|     75|    }
  459|     48|    break;
  460|     48|  case 25:
  461|     41|    switch (name[24]) {
  462|     10|    case 'y':
  463|     10|      if (memeq("strict-transport-securit", name, 24)) {
  464|      0|        return NGHTTP2_TOKEN_STRICT_TRANSPORT_SECURITY;
  465|      0|      }
  466|     10|      break;
  467|     41|    }
  468|     41|    break;
  469|     41|  case 27:
  470|     37|    switch (name[26]) {
  471|     10|    case 'n':
  472|     10|      if (memeq("access-control-allow-origi", name, 26)) {
  473|      0|        return NGHTTP2_TOKEN_ACCESS_CONTROL_ALLOW_ORIGIN;
  474|      0|      }
  475|     10|      break;
  476|     37|    }
  477|     37|    break;
  478|  9.00k|  }
  479|  4.62k|  return -1;
  480|  9.00k|}
nghttp2_hd.c:memeq:
  112|  8.46k|static int memeq(const void *s1, const void *s2, size_t n) {
  113|  8.46k|  return memcmp(s1, s2, n) == 0;
  114|  8.46k|}
nghttp2_hd.c:name_hash:
  511|  2.12k|static uint32_t name_hash(const nghttp2_nv *nv) {
  512|       |  /* 32 bit FNV-1a: http://isthe.com/chongo/tech/comp/fnv/ */
  513|  2.12k|  uint32_t h = 2166136261u;
  514|  2.12k|  size_t i;
  515|       |
  516|  29.7k|  for (i = 0; i < nv->namelen; ++i) {
  517|  27.6k|    h ^= nv->name[i];
  518|  27.6k|    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);
  519|  27.6k|  }
  520|       |
  521|  2.12k|  return h;
  522|  2.12k|}
nghttp2_hd.c:hd_deflate_decide_indexing:
 1322|  6.48k|                                      const nghttp2_nv *nv, int32_t token) {
 1323|  6.48k|  if (token == NGHTTP2_TOKEN__PATH || token == NGHTTP2_TOKEN_AGE ||
 1324|  6.48k|      token == NGHTTP2_TOKEN_CONTENT_LENGTH || token == NGHTTP2_TOKEN_ETAG ||
 1325|  6.48k|      token == NGHTTP2_TOKEN_IF_MODIFIED_SINCE ||
 1326|  6.48k|      token == NGHTTP2_TOKEN_IF_NONE_MATCH || token == NGHTTP2_TOKEN_LOCATION ||
 1327|  6.48k|      token == NGHTTP2_TOKEN_SET_COOKIE ||
 1328|  6.48k|      entry_room(nv->namelen, nv->valuelen) >
 1329|  5.35k|          deflater->ctx.hd_table_bufsize_max * 3 / 4) {
 1330|  1.12k|    return NGHTTP2_HD_WITHOUT_INDEXING;
 1331|  1.12k|  }
 1332|       |
 1333|  5.35k|  return NGHTTP2_HD_WITH_INDEXING;
 1334|  6.48k|}
nghttp2_hd.c:search_hd_table:
 1194|  6.49k|                                     uint32_t hash) {
 1195|  6.49k|  search_result res = {-1, 0};
 1196|  6.49k|  const nghttp2_hd_entry *ent;
 1197|  6.49k|  int exact_match;
 1198|  6.49k|  int name_only = indexing_mode == NGHTTP2_HD_NEVER_INDEXING;
 1199|       |
 1200|  6.49k|  exact_match = 0;
 1201|  6.49k|  ent = hd_map_find(map, &exact_match, nv, token, hash, name_only);
 1202|       |
 1203|  6.49k|  if (!exact_match && token >= 0 && token <= NGHTTP2_TOKEN_WWW_AUTHENTICATE) {
 1204|  4.22k|    return search_static_table(nv, token, name_only);
 1205|  4.22k|  }
 1206|       |
 1207|  2.27k|  if (ent == NULL) {
 1208|  1.20k|    return res;
 1209|  1.20k|  }
 1210|       |
 1211|  1.06k|  res.index =
 1212|  1.06k|      (ssize_t)(context->next_seq - 1 - ent->seq + NGHTTP2_STATIC_TABLE_LENGTH);
 1213|  1.06k|  res.name_value_match = exact_match;
 1214|       |
 1215|  1.06k|  return res;
 1216|  2.27k|}
nghttp2_hd.c:hd_map_find:
  545|  6.49k|                                     uint32_t hash, int name_only) {
  546|  6.49k|  nghttp2_hd_entry *p;
  547|  6.49k|  nghttp2_hd_entry *res = NULL;
  548|       |
  549|  6.49k|  *exact_match = 0;
  550|       |
  551|  8.34k|  for (p = map->table[hash & (HD_MAP_SIZE - 1)]; p; p = p->next) {
  552|  2.47k|    if (token != p->nv.token ||
  553|  2.47k|        (token == -1 && (hash != p->hash || !name_eq(&p->nv, nv)))) {
  554|    186|      continue;
  555|    186|    }
  556|  2.29k|    if (!res) {
  557|  1.29k|      res = p;
  558|  1.29k|      if (name_only) {
  559|     15|        break;
  560|     15|      }
  561|  1.29k|    }
  562|  2.27k|    if (value_eq(&p->nv, nv)) {
  563|    613|      res = p;
  564|    613|      *exact_match = 1;
  565|    613|      break;
  566|    613|    }
  567|  2.27k|  }
  568|       |
  569|  6.49k|  return res;
  570|  6.49k|}
nghttp2_hd.c:name_eq:
  501|  1.64k|static int name_eq(const nghttp2_hd_nv *a, const nghttp2_nv *b) {
  502|  1.64k|  return a->name->len == b->namelen &&
  503|  1.64k|         memeq(a->name->base, b->name, b->namelen);
  504|  1.64k|}
nghttp2_hd.c:value_eq:
  506|  2.27k|static int value_eq(const nghttp2_hd_nv *a, const nghttp2_nv *b) {
  507|  2.27k|  return a->value->len == b->valuelen &&
  508|  2.27k|         memeq(a->value->base, b->value, b->valuelen);
  509|  2.27k|}
nghttp2_hd.c:search_static_table:
 1168|  4.22k|                                         int name_only) {
 1169|  4.22k|  search_result res = {token, 0};
 1170|  4.22k|  int i;
 1171|  4.22k|  const nghttp2_hd_static_entry *ent;
 1172|       |
 1173|  4.22k|  if (name_only) {
 1174|     17|    return res;
 1175|     17|  }
 1176|       |
 1177|  4.21k|  for (i = token;
 1178|  7.73k|       i <= NGHTTP2_TOKEN_WWW_AUTHENTICATE && static_table[i].token == token;
 1179|  4.89k|       ++i) {
 1180|  4.89k|    ent = &static_table[i];
 1181|  4.89k|    if (ent->value.len == nv->valuelen &&
 1182|  4.89k|        memcmp(ent->value.base, nv->value, nv->valuelen) == 0) {
 1183|  1.36k|      res.index = i;
 1184|  1.36k|      res.name_value_match = 1;
 1185|  1.36k|      return res;
 1186|  1.36k|    }
 1187|  4.89k|  }
 1188|  2.84k|  return res;
 1189|  4.21k|}
nghttp2_hd.c:emit_indexed_block:
  940|  1.98k|static int emit_indexed_block(nghttp2_bufs *bufs, size_t idx) {
  941|  1.98k|  int rv;
  942|  1.98k|  size_t blocklen;
  943|  1.98k|  uint8_t sb[16];
  944|  1.98k|  uint8_t *bufp;
  945|       |
  946|  1.98k|  blocklen = count_encoded_length(idx + 1, 7);
  947|       |
  948|  1.98k|  DEBUGF("deflatehd: emit indexed index=%zu, %zu bytes\n", idx, blocklen);
  949|       |
  950|  1.98k|  if (sizeof(sb) < blocklen) {
  951|      0|    return NGHTTP2_ERR_HEADER_COMP;
  952|      0|  }
  953|       |
  954|  1.98k|  bufp = sb;
  955|  1.98k|  *bufp = 0x80u;
  956|  1.98k|  encode_length(bufp, idx + 1, 7);
  957|       |
  958|  1.98k|  rv = nghttp2_bufs_add(bufs, sb, blocklen);
  959|  1.98k|  if (rv != 0) {
  960|      0|    return rv;
  961|      0|  }
  962|       |
  963|  1.98k|  return 0;
  964|  1.98k|}
nghttp2_hd.c:add_hd_table_incremental:
 1097|  4.87k|                                    uint32_t hash) {
 1098|  4.87k|  int rv;
 1099|  4.87k|  nghttp2_hd_entry *new_ent;
 1100|  4.87k|  size_t room;
 1101|  4.87k|  nghttp2_mem *mem;
 1102|       |
 1103|  4.87k|  mem = context->mem;
 1104|  4.87k|  room = entry_room(nv->name->len, nv->value->len);
 1105|       |
 1106|  4.89k|  while (context->hd_table_bufsize + room > context->hd_table_bufsize_max &&
 1107|  4.89k|         context->hd_table.len > 0) {
 1108|       |
 1109|     20|    size_t idx = context->hd_table.len - 1;
 1110|     20|    nghttp2_hd_entry *ent = hd_ringbuf_get(&context->hd_table, idx);
 1111|       |
 1112|     20|    context->hd_table_bufsize -=
 1113|     20|        entry_room(ent->nv.name->len, ent->nv.value->len);
 1114|       |
 1115|     20|    DEBUGF("hpack: remove item from header table: %s: %s\n",
 1116|     20|           (char *)ent->nv.name->base, (char *)ent->nv.value->base);
 1117|       |
 1118|     20|    hd_ringbuf_pop_back(&context->hd_table);
 1119|     20|    if (map) {
 1120|      0|      hd_map_remove(map, ent);
 1121|      0|    }
 1122|       |
 1123|     20|    nghttp2_hd_entry_free(ent);
 1124|     20|    nghttp2_mem_free(mem, ent);
 1125|     20|  }
 1126|       |
 1127|  4.87k|  if (room > context->hd_table_bufsize_max) {
 1128|       |    /* The entry taking more than NGHTTP2_HD_MAX_BUFFER_SIZE is
 1129|       |       immediately evicted.  So we don't allocate memory for it. */
 1130|     78|    return 0;
 1131|     78|  }
 1132|       |
 1133|  4.80k|  new_ent = nghttp2_mem_malloc(mem, sizeof(nghttp2_hd_entry));
 1134|  4.80k|  if (new_ent == NULL) {
 1135|      0|    return NGHTTP2_ERR_NOMEM;
 1136|      0|  }
 1137|       |
 1138|  4.80k|  nghttp2_hd_entry_init(new_ent, nv);
 1139|       |
 1140|  4.80k|  rv = hd_ringbuf_push_front(&context->hd_table, new_ent, mem);
 1141|       |
 1142|  4.80k|  if (rv != 0) {
 1143|      0|    nghttp2_hd_entry_free(new_ent);
 1144|      0|    nghttp2_mem_free(mem, new_ent);
 1145|       |
 1146|      0|    return rv;
 1147|      0|  }
 1148|       |
 1149|  4.80k|  new_ent->seq = context->next_seq++;
 1150|  4.80k|  new_ent->hash = hash;
 1151|       |
 1152|  4.80k|  if (map) {
 1153|  3.71k|    hd_map_insert(map, new_ent);
 1154|  3.71k|  }
 1155|       |
 1156|  4.80k|  context->hd_table_bufsize += room;
 1157|       |
 1158|  4.80k|  return 0;
 1159|  4.80k|}
nghttp2_hd.c:hd_ringbuf_push_front:
  649|  4.80k|                                 nghttp2_hd_entry *ent, nghttp2_mem *mem) {
  650|  4.80k|  int rv;
  651|       |
  652|  4.80k|  rv = hd_ringbuf_reserve(ringbuf, ringbuf->len + 1, mem);
  653|       |
  654|  4.80k|  if (rv != 0) {
  655|      0|    return rv;
  656|      0|  }
  657|       |
  658|  4.80k|  ringbuf->buffer[--ringbuf->first & ringbuf->mask] = ent;
  659|  4.80k|  ++ringbuf->len;
  660|       |
  661|  4.80k|  return 0;
  662|  4.80k|}
nghttp2_hd.c:hd_ringbuf_reserve:
  610|  4.80k|                              nghttp2_mem *mem) {
  611|  4.80k|  size_t i;
  612|  4.80k|  size_t size;
  613|  4.80k|  nghttp2_hd_entry **buffer;
  614|       |
  615|  4.80k|  if (ringbuf->mask + 1 >= bufsize) {
  616|  4.80k|    return 0;
  617|  4.80k|  }
  618|      0|  for (size = 1; size < bufsize; size <<= 1)
  619|      0|    ;
  620|      0|  buffer = nghttp2_mem_malloc(mem, sizeof(nghttp2_hd_entry *) * size);
  621|      0|  if (buffer == NULL) {
  622|      0|    return NGHTTP2_ERR_NOMEM;
  623|      0|  }
  624|      0|  for (i = 0; i < ringbuf->len; ++i) {
  625|      0|    buffer[i] = hd_ringbuf_get(ringbuf, i);
  626|      0|  }
  627|      0|  nghttp2_mem_free(mem, ringbuf->buffer);
  628|      0|  ringbuf->buffer = buffer;
  629|      0|  ringbuf->mask = size - 1;
  630|      0|  ringbuf->first = 0;
  631|      0|  return 0;
  632|      0|}
nghttp2_hd.c:hd_map_insert:
  528|  3.71k|static void hd_map_insert(nghttp2_hd_map *map, nghttp2_hd_entry *ent) {
  529|  3.71k|  nghttp2_hd_entry **bucket;
  530|       |
  531|  3.71k|  bucket = &map->table[ent->hash & (HD_MAP_SIZE - 1)];
  532|       |
  533|  3.71k|  if (*bucket == NULL) {
  534|  2.96k|    *bucket = ent;
  535|  2.96k|    return;
  536|  2.96k|  }
  537|       |
  538|       |  /* lower index is linked near the root */
  539|    752|  ent->next = *bucket;
  540|    752|  *bucket = ent;
  541|    752|}
nghttp2_hd.c:hd_inflate_read_len:
 1642|  9.19k|                                   size_t prefix, size_t maxlen) {
 1643|  9.19k|  ssize_t rv;
 1644|  9.19k|  uint32_t out;
 1645|       |
 1646|  9.19k|  *rfin = 0;
 1647|       |
 1648|  9.19k|  rv = decode_length(&out, &inflater->shift, rfin, (uint32_t)inflater->left,
 1649|  9.19k|                     inflater->shift, in, last, prefix);
 1650|       |
 1651|  9.19k|  if (rv == -1) {
 1652|     12|    DEBUGF("inflatehd: integer decoding failed\n");
 1653|     12|    return NGHTTP2_ERR_HEADER_COMP;
 1654|     12|  }
 1655|       |
 1656|  9.17k|  if (out > maxlen) {
 1657|     37|    DEBUGF("inflatehd: integer exceeded the maximum value %zu\n", maxlen);
 1658|     37|    return NGHTTP2_ERR_HEADER_COMP;
 1659|     37|  }
 1660|       |
 1661|  9.14k|  inflater->left = out;
 1662|       |
 1663|  9.14k|  DEBUGF("inflatehd: decoded integer is %u\n", out);
 1664|       |
 1665|  9.14k|  return rv;
 1666|  9.17k|}
nghttp2_hd.c:get_max_index:
 1291|  2.58k|static size_t get_max_index(nghttp2_hd_context *context) {
 1292|  2.58k|  return context->hd_table.len + NGHTTP2_STATIC_TABLE_LENGTH;
 1293|  2.58k|}
nghttp2_hd.c:hd_inflate_commit_indexed:
 1733|  1.35k|                                      nghttp2_hd_nv *nv_out) {
 1734|  1.35k|  nghttp2_hd_nv nv = nghttp2_hd_table_get(&inflater->ctx, inflater->index);
 1735|       |
 1736|  1.35k|  emit_header(nv_out, &nv);
 1737|  1.35k|}
nghttp2_hd.c:emit_header:
  781|  5.01k|static void emit_header(nghttp2_hd_nv *nv_out, nghttp2_hd_nv *nv) {
  782|  5.01k|  DEBUGF("inflatehd: header emission: %s: %s\n", nv->name->base,
  783|  5.01k|         nv->value->base);
  784|       |  /* ent->ref may be 0. This happens if the encoder emits literal
  785|       |     block larger than header table capacity with indexing. */
  786|  5.01k|  *nv_out = *nv;
  787|  5.01k|}
nghttp2_hd.c:hd_inflate_set_huffman_encoded:
 1623|  6.31k|                                           const uint8_t *in) {
 1624|  6.31k|  inflater->huffman_encoded = (*in & (1 << 7)) != 0;
 1625|  6.31k|}
nghttp2_hd.c:hd_inflate_read_huff:
 1683|  1.49k|                                    const uint8_t *last) {
 1684|  1.49k|  ssize_t readlen;
 1685|  1.49k|  int fin = 0;
 1686|  1.49k|  if ((size_t)(last - in) >= inflater->left) {
 1687|  1.47k|    last = in + inflater->left;
 1688|  1.47k|    fin = 1;
 1689|  1.47k|  }
 1690|  1.49k|  readlen = nghttp2_hd_huff_decode(&inflater->huff_decode_ctx, buf, in,
 1691|  1.49k|                                   (size_t)(last - in), fin);
 1692|       |
 1693|  1.49k|  if (readlen < 0) {
 1694|     16|    DEBUGF("inflatehd: huffman decoding failed\n");
 1695|     16|    return readlen;
 1696|     16|  }
 1697|  1.48k|  if (nghttp2_hd_huff_decode_failure_state(&inflater->huff_decode_ctx)) {
 1698|      2|    DEBUGF("inflatehd: huffman decoding failed\n");
 1699|      2|    return NGHTTP2_ERR_HEADER_COMP;
 1700|      2|  }
 1701|       |
 1702|  1.48k|  inflater->left -= (size_t)readlen;
 1703|  1.48k|  return readlen;
 1704|  1.48k|}
nghttp2_hd.c:hd_inflate_read:
 1719|  4.80k|                               const uint8_t *in, const uint8_t *last) {
 1720|  4.80k|  size_t len = nghttp2_min((size_t)(last - in), inflater->left);
 1721|       |
 1722|  4.80k|  buf->last = nghttp2_cpymem(buf->last, in, len);
 1723|       |
 1724|  4.80k|  inflater->left -= len;
 1725|  4.80k|  return (ssize_t)len;
 1726|  4.80k|}
nghttp2_hd.c:hd_inflate_commit_newname:
 1751|  2.50k|                                     nghttp2_hd_nv *nv_out) {
 1752|  2.50k|  nghttp2_hd_nv nv;
 1753|  2.50k|  int rv;
 1754|       |
 1755|  2.50k|  if (inflater->no_index) {
 1756|     28|    nv.flags = NGHTTP2_NV_FLAG_NO_INDEX;
 1757|  2.48k|  } else {
 1758|  2.48k|    nv.flags = NGHTTP2_NV_FLAG_NONE;
 1759|  2.48k|  }
 1760|       |
 1761|  2.50k|  nv.name = inflater->namercbuf;
 1762|  2.50k|  nv.value = inflater->valuercbuf;
 1763|  2.50k|  nv.token = lookup_token(inflater->namercbuf->base, inflater->namercbuf->len);
 1764|       |
 1765|  2.50k|  if (inflater->index_required) {
 1766|    402|    rv = add_hd_table_incremental(&inflater->ctx, &nv, NULL, 0);
 1767|       |
 1768|    402|    if (rv != 0) {
 1769|      0|      return rv;
 1770|      0|    }
 1771|    402|  }
 1772|       |
 1773|  2.50k|  emit_header(nv_out, &nv);
 1774|       |
 1775|  2.50k|  inflater->nv_name_keep = nv.name;
 1776|  2.50k|  inflater->nv_value_keep = nv.value;
 1777|       |
 1778|  2.50k|  inflater->namercbuf = NULL;
 1779|  2.50k|  inflater->valuercbuf = NULL;
 1780|       |
 1781|  2.50k|  return 0;
 1782|  2.50k|}
nghttp2_hd.c:hd_inflate_commit_indname:
 1796|  1.16k|                                     nghttp2_hd_nv *nv_out) {
 1797|  1.16k|  nghttp2_hd_nv nv;
 1798|  1.16k|  int rv;
 1799|       |
 1800|  1.16k|  nv = nghttp2_hd_table_get(&inflater->ctx, inflater->index);
 1801|       |
 1802|  1.16k|  if (inflater->no_index) {
 1803|     36|    nv.flags = NGHTTP2_NV_FLAG_NO_INDEX;
 1804|  1.12k|  } else {
 1805|  1.12k|    nv.flags = NGHTTP2_NV_FLAG_NONE;
 1806|  1.12k|  }
 1807|       |
 1808|  1.16k|  nghttp2_rcbuf_incref(nv.name);
 1809|       |
 1810|  1.16k|  nv.value = inflater->valuercbuf;
 1811|       |
 1812|  1.16k|  if (inflater->index_required) {
 1813|    765|    rv = add_hd_table_incremental(&inflater->ctx, &nv, NULL, 0);
 1814|    765|    if (rv != 0) {
 1815|      0|      nghttp2_rcbuf_decref(nv.name);
 1816|      0|      return NGHTTP2_ERR_NOMEM;
 1817|      0|    }
 1818|    765|  }
 1819|       |
 1820|  1.16k|  emit_header(nv_out, &nv);
 1821|       |
 1822|  1.16k|  inflater->nv_name_keep = nv.name;
 1823|  1.16k|  inflater->nv_value_keep = nv.value;
 1824|       |
 1825|  1.16k|  inflater->valuercbuf = NULL;
 1826|       |
 1827|  1.16k|  return 0;
 1828|  1.16k|}
nghttp2_hd.c:emit_indname_block:
 1028|  3.30k|                              const nghttp2_nv *nv, int indexing_mode) {
 1029|  3.30k|  int rv;
 1030|  3.30k|  uint8_t *bufp;
 1031|  3.30k|  size_t blocklen;
 1032|  3.30k|  uint8_t sb[16];
 1033|  3.30k|  size_t prefixlen;
 1034|       |
 1035|  3.30k|  if (indexing_mode == NGHTTP2_HD_WITH_INDEXING) {
 1036|  2.50k|    prefixlen = 6;
 1037|  2.50k|  } else {
 1038|    805|    prefixlen = 4;
 1039|    805|  }
 1040|       |
 1041|  3.30k|  DEBUGF("deflatehd: emit indname index=%zu, valuelen=%zu, indexing_mode=%d\n",
 1042|  3.30k|         idx, nv->valuelen, indexing_mode);
 1043|       |
 1044|  3.30k|  blocklen = count_encoded_length(idx + 1, prefixlen);
 1045|       |
 1046|  3.30k|  if (sizeof(sb) < blocklen) {
 1047|      0|    return NGHTTP2_ERR_HEADER_COMP;
 1048|      0|  }
 1049|       |
 1050|  3.30k|  bufp = sb;
 1051|       |
 1052|  3.30k|  *bufp = pack_first_byte(indexing_mode);
 1053|       |
 1054|  3.30k|  encode_length(bufp, idx + 1, prefixlen);
 1055|       |
 1056|  3.30k|  rv = nghttp2_bufs_add(bufs, sb, blocklen);
 1057|  3.30k|  if (rv != 0) {
 1058|      0|    return rv;
 1059|      0|  }
 1060|       |
 1061|  3.30k|  rv = emit_string(bufs, nv->value, nv->valuelen);
 1062|  3.30k|  if (rv != 0) {
 1063|      0|    return rv;
 1064|      0|  }
 1065|       |
 1066|  3.30k|  return 0;
 1067|  3.30k|}
nghttp2_hd.c:pack_first_byte:
 1011|  4.51k|static uint8_t pack_first_byte(int indexing_mode) {
 1012|  4.51k|  switch (indexing_mode) {
 1013|  3.71k|  case NGHTTP2_HD_WITH_INDEXING:
 1014|  3.71k|    return 0x40u;
 1015|    788|  case NGHTTP2_HD_WITHOUT_INDEXING:
 1016|    788|    return 0;
 1017|     17|  case NGHTTP2_HD_NEVER_INDEXING:
 1018|     17|    return 0x10u;
 1019|      0|  default:
 1020|      0|    assert(0);
 1021|  4.51k|  }
 1022|       |  /* This is required to compile with android NDK r10d +
 1023|       |     --enable-werror */
 1024|      0|  return 0;
 1025|  4.51k|}
nghttp2_hd.c:emit_string:
  966|  5.72k|static int emit_string(nghttp2_bufs *bufs, const uint8_t *str, size_t len) {
  967|  5.72k|  int rv;
  968|  5.72k|  uint8_t sb[16];
  969|  5.72k|  uint8_t *bufp;
  970|  5.72k|  size_t blocklen;
  971|  5.72k|  size_t enclen;
  972|  5.72k|  int huffman = 0;
  973|       |
  974|  5.72k|  enclen = nghttp2_hd_huff_encode_count(str, len);
  975|       |
  976|  5.72k|  if (enclen < len) {
  977|  3.92k|    huffman = 1;
  978|  3.92k|  } else {
  979|  1.79k|    enclen = len;
  980|  1.79k|  }
  981|       |
  982|  5.72k|  blocklen = count_encoded_length(enclen, 7);
  983|       |
  984|  5.72k|  DEBUGF("deflatehd: emit string str=%.*s, length=%zu, huffman=%d, "
  985|  5.72k|         "encoded_length=%zu\n",
  986|  5.72k|         (int)len, (const char *)str, len, huffman, enclen);
  987|       |
  988|  5.72k|  if (sizeof(sb) < blocklen) {
  989|      0|    return NGHTTP2_ERR_HEADER_COMP;
  990|      0|  }
  991|       |
  992|  5.72k|  bufp = sb;
  993|  5.72k|  *bufp = huffman ? 1 << 7 : 0;
  994|  5.72k|  encode_length(bufp, enclen, 7);
  995|       |
  996|  5.72k|  rv = nghttp2_bufs_add(bufs, sb, blocklen);
  997|  5.72k|  if (rv != 0) {
  998|      0|    return rv;
  999|      0|  }
 1000|       |
 1001|  5.72k|  if (huffman) {
 1002|  3.92k|    rv = nghttp2_hd_huff_encode(bufs, str, len);
 1003|  3.92k|  } else {
 1004|  1.79k|    assert(enclen == len);
 1005|  1.79k|    rv = nghttp2_bufs_add(bufs, str, len);
 1006|  1.79k|  }
 1007|       |
 1008|  5.72k|  return rv;
 1009|  5.72k|}
nghttp2_hd.c:emit_newname_block:
 1070|  1.20k|                              int indexing_mode) {
 1071|  1.20k|  int rv;
 1072|       |
 1073|  1.20k|  DEBUGF(
 1074|  1.20k|      "deflatehd: emit newname namelen=%zu, valuelen=%zu, indexing_mode=%d\n",
 1075|  1.20k|      nv->namelen, nv->valuelen, indexing_mode);
 1076|       |
 1077|  1.20k|  rv = nghttp2_bufs_addb(bufs, pack_first_byte(indexing_mode));
 1078|  1.20k|  if (rv != 0) {
 1079|      0|    return rv;
 1080|      0|  }
 1081|       |
 1082|  1.20k|  rv = emit_string(bufs, nv->name, nv->namelen);
 1083|  1.20k|  if (rv != 0) {
 1084|      0|    return rv;
 1085|      0|  }
 1086|       |
 1087|  1.20k|  rv = emit_string(bufs, nv->value, nv->valuelen);
 1088|  1.20k|  if (rv != 0) {
 1089|      0|    return rv;
 1090|      0|  }
 1091|       |
 1092|  1.20k|  return 0;
 1093|  1.20k|}
nghttp2_hd.c:decode_length:
  850|  9.19k|                             const uint8_t *last, size_t prefix) {
  851|  9.19k|  uint32_t k = (uint8_t)((1 << prefix) - 1);
  852|  9.19k|  uint32_t n = initial;
  853|  9.19k|  const uint8_t *start = in;
  854|       |
  855|  9.19k|  *shift_ptr = 0;
  856|  9.19k|  *fin = 0;
  857|       |
  858|  9.19k|  if (n == 0) {
  859|  9.19k|    if ((*in & k) != k) {
  860|  9.01k|      *res = (*in) & k;
  861|  9.01k|      *fin = 1;
  862|  9.01k|      return 1;
  863|  9.01k|    }
  864|       |
  865|    180|    n = k;
  866|       |
  867|    180|    if (++in == last) {
  868|      4|      *res = n;
  869|      4|      return (ssize_t)(in - start);
  870|      4|    }
  871|    180|  }
  872|       |
  873|    275|  for (; in != last; ++in, shift += 7) {
  874|    271|    uint32_t add = *in & 0x7f;
  875|       |
  876|    271|    if (shift >= 32) {
  877|      4|      DEBUGF("inflate: shift exponent overflow\n");
  878|      4|      return -1;
  879|      4|    }
  880|       |
  881|    267|    if ((UINT32_MAX >> shift) < add) {
  882|      5|      DEBUGF("inflate: integer overflow on shift\n");
  883|      5|      return -1;
  884|      5|    }
  885|       |
  886|    262|    add <<= shift;
  887|       |
  888|    262|    if (UINT32_MAX - add < n) {
  889|      3|      DEBUGF("inflate: integer overflow on addition\n");
  890|      3|      return -1;
  891|      3|    }
  892|       |
  893|    259|    n += add;
  894|       |
  895|    259|    if ((*in & (1 << 7)) == 0) {
  896|    160|      break;
  897|    160|    }
  898|    259|  }
  899|       |
  900|    164|  *shift_ptr = shift;
  901|       |
  902|    164|  if (in == last) {
  903|      4|    *res = n;
  904|      4|    return (ssize_t)(in - start);
  905|      4|  }
  906|       |
  907|    160|  *res = n;
  908|    160|  *fin = 1;
  909|    160|  return (ssize_t)(in + 1 - start);
  910|    164|}

nghttp2_hd_huff_encode_count:
   34|  5.72k|size_t nghttp2_hd_huff_encode_count(const uint8_t *src, size_t len) {
   35|  5.72k|  size_t i;
   36|  5.72k|  size_t nbits = 0;
   37|       |
   38|   101k|  for (i = 0; i < len; ++i) {
   39|  95.9k|    nbits += huff_sym_table[src[i]].nbits;
   40|  95.9k|  }
   41|       |  /* pad the prefix of EOS (256) */
   42|  5.72k|  return (nbits + 7) / 8;
   43|  5.72k|}
nghttp2_hd_huff_encode:
   46|  3.92k|                           size_t srclen) {
   47|  3.92k|  const nghttp2_huff_sym *sym;
   48|  3.92k|  const uint8_t *end = src + srclen;
   49|  3.92k|  uint64_t code = 0;
   50|  3.92k|  uint32_t x;
   51|  3.92k|  size_t nbits = 0;
   52|  3.92k|  size_t avail;
   53|  3.92k|  int rv;
   54|       |
   55|  3.92k|  avail = nghttp2_bufs_cur_avail(bufs);
   56|       |
   57|  78.6k|  for (; src != end;) {
   58|  74.6k|    sym = &huff_sym_table[*src++];
   59|  74.6k|    code |= (uint64_t)sym->code << (32 - nbits);
   60|  74.6k|    nbits += sym->nbits;
   61|  74.6k|    if (nbits < 32) {
   62|  61.9k|      continue;
   63|  61.9k|    }
   64|  12.6k|    if (avail >= 4) {
   65|  12.6k|      x = htonl((uint32_t)(code >> 32));
   66|  12.6k|      memcpy(bufs->cur->buf.last, &x, 4);
   67|  12.6k|      bufs->cur->buf.last += 4;
   68|  12.6k|      avail -= 4;
   69|  12.6k|      code <<= 32;
   70|  12.6k|      nbits -= 32;
   71|  12.6k|      continue;
   72|  12.6k|    }
   73|       |
   74|      0|    for (; nbits >= 8;) {
   75|      0|      rv = nghttp2_bufs_addb(bufs, (uint8_t)(code >> 56));
   76|      0|      if (rv != 0) {
   77|      0|        return rv;
   78|      0|      }
   79|      0|      code <<= 8;
   80|      0|      nbits -= 8;
   81|      0|    }
   82|       |
   83|      0|    avail = nghttp2_bufs_cur_avail(bufs);
   84|      0|  }
   85|       |
   86|  10.4k|  for (; nbits >= 8;) {
   87|  6.49k|    rv = nghttp2_bufs_addb(bufs, (uint8_t)(code >> 56));
   88|  6.49k|    if (rv != 0) {
   89|      0|      return rv;
   90|      0|    }
   91|  6.49k|    code <<= 8;
   92|  6.49k|    nbits -= 8;
   93|  6.49k|  }
   94|       |
   95|  3.92k|  if (nbits) {
   96|  3.48k|    rv = nghttp2_bufs_addb(
   97|  3.48k|        bufs, (uint8_t)((uint8_t)(code >> 56) | ((1 << (8 - nbits)) - 1)));
   98|  3.48k|    if (rv != 0) {
   99|      0|      return rv;
  100|      0|    }
  101|  3.48k|  }
  102|       |
  103|  3.92k|  return 0;
  104|  3.92k|}
nghttp2_hd_huff_decode_context_init:
  106|  1.49k|void nghttp2_hd_huff_decode_context_init(nghttp2_hd_huff_decode_context *ctx) {
  107|  1.49k|  ctx->fstate = NGHTTP2_HUFF_ACCEPTED;
  108|  1.49k|}
nghttp2_hd_huff_decode:
  112|  1.49k|                               size_t srclen, int final) {
  113|  1.49k|  const uint8_t *end = src + srclen;
  114|  1.49k|  nghttp2_huff_decode node = {ctx->fstate, 0};
  115|  1.49k|  const nghttp2_huff_decode *t = &node;
  116|  1.49k|  uint8_t c;
  117|       |
  118|       |  /* We use the decoding algorithm described in
  119|       |     http://graphics.ics.uci.edu/pub/Prefix.pdf */
  120|  24.4k|  for (; src != end;) {
  121|  22.9k|    c = *src++;
  122|  22.9k|    t = &huff_decode_table[t->fstate & 0x1ff][c >> 4];
  123|  22.9k|    if (t->fstate & NGHTTP2_HUFF_SYM) {
  124|  15.0k|      *buf->last++ = t->sym;
  125|  15.0k|    }
  126|       |
  127|  22.9k|    t = &huff_decode_table[t->fstate & 0x1ff][c & 0xf];
  128|  22.9k|    if (t->fstate & NGHTTP2_HUFF_SYM) {
  129|  15.5k|      *buf->last++ = t->sym;
  130|  15.5k|    }
  131|  22.9k|  }
  132|       |
  133|  1.49k|  ctx->fstate = t->fstate;
  134|       |
  135|  1.49k|  if (final && !(ctx->fstate & NGHTTP2_HUFF_ACCEPTED)) {
  136|     16|    return NGHTTP2_ERR_HEADER_COMP;
  137|     16|  }
  138|       |
  139|  1.48k|  return (ssize_t)srclen;
  140|  1.49k|}
nghttp2_hd_huff_decode_failure_state:
  142|  1.48k|int nghttp2_hd_huff_decode_failure_state(nghttp2_hd_huff_decode_context *ctx) {
  143|  1.48k|  return ctx->fstate == 0x100;
  144|  1.48k|}

nghttp2_put_uint16be:
   32|  2.11k|void nghttp2_put_uint16be(uint8_t *buf, uint16_t n) {
   33|  2.11k|  uint16_t x = htons(n);
   34|  2.11k|  memcpy(buf, &x, sizeof(uint16_t));
   35|  2.11k|}
nghttp2_put_uint32be:
   37|  9.70k|void nghttp2_put_uint32be(uint8_t *buf, uint32_t n) {
   38|  9.70k|  uint32_t x = htonl(n);
   39|  9.70k|  memcpy(buf, &x, sizeof(uint32_t));
   40|  9.70k|}
nghttp2_get_uint16:
   42|  2.55k|uint16_t nghttp2_get_uint16(const uint8_t *data) {
   43|  2.55k|  uint16_t n;
   44|  2.55k|  memcpy(&n, data, sizeof(uint16_t));
   45|  2.55k|  return ntohs(n);
   46|  2.55k|}
nghttp2_get_uint32:
   48|  4.75k|uint32_t nghttp2_get_uint32(const uint8_t *data) {
   49|  4.75k|  uint32_t n;
   50|  4.75k|  memcpy(&n, data, sizeof(uint32_t));
   51|  4.75k|  return ntohl(n);
   52|  4.75k|}
nghttp2_downcase:
  122|  6.49k|void nghttp2_downcase(uint8_t *s, size_t len) {
  123|  6.49k|  size_t i;
  124|  67.0k|  for (i = 0; i < len; ++i) {
  125|  60.5k|    s[i] = DOWNCASE_TBL[s[i]];
  126|  60.5k|  }
  127|  6.49k|}
nghttp2_increase_local_window_size:
  219|    704|                                       int32_t *delta_ptr) {
  220|    704|  int32_t recv_reduction_delta;
  221|    704|  int32_t delta;
  222|       |
  223|    704|  delta = *delta_ptr;
  224|       |
  225|    704|  assert(delta >= 0);
  226|       |
  227|       |  /* The delta size is strictly more than received bytes. Increase
  228|       |     local_window_size by that difference |delta|. */
  229|    704|  if (*local_window_size_ptr > NGHTTP2_MAX_WINDOW_SIZE - delta) {
  230|      0|    return NGHTTP2_ERR_FLOW_CONTROL;
  231|      0|  }
  232|       |
  233|    704|  *local_window_size_ptr += delta;
  234|       |  /* If there is recv_reduction due to earlier window_size
  235|       |     reduction, we have to adjust it too. */
  236|    704|  recv_reduction_delta = nghttp2_min(*recv_reduction_ptr, delta);
  237|    704|  *recv_reduction_ptr -= recv_reduction_delta;
  238|       |
  239|    704|  *recv_window_size_ptr += recv_reduction_delta;
  240|       |
  241|       |  /* recv_reduction_delta must be paid from *delta_ptr, since it was
  242|       |     added in window size reduction (see below). */
  243|    704|  *delta_ptr -= recv_reduction_delta;
  244|       |
  245|    704|  return 0;
  246|    704|}
nghttp2_should_send_window_update:
  249|    754|                                      int32_t recv_window_size) {
  250|    754|  return recv_window_size > 0 && recv_window_size >= local_window_size / 2;
  251|    754|}
nghttp2_check_header_name:
  412|  1.44k|int nghttp2_check_header_name(const uint8_t *name, size_t len) {
  413|  1.44k|  const uint8_t *last;
  414|  1.44k|  if (len == 0) {
  415|     19|    return 0;
  416|     19|  }
  417|  1.42k|  if (*name == ':') {
  418|    221|    if (len == 1) {
  419|      1|      return 0;
  420|      1|    }
  421|    220|    ++name;
  422|    220|    --len;
  423|    220|  }
  424|  17.4k|  for (last = name + len; name != last; ++name) {
  425|  16.0k|    if (!VALID_HD_NAME_CHARS[*name]) {
  426|     47|      return 0;
  427|     47|    }
  428|  16.0k|  }
  429|  1.37k|  return 1;
  430|  1.42k|}
nghttp2_check_header_value:
  500|  1.33k|int nghttp2_check_header_value(const uint8_t *value, size_t len) {
  501|  1.33k|  const uint8_t *last;
  502|  15.7k|  for (last = value + len; value != last; ++value) {
  503|  14.5k|    if (!VALID_HD_VALUE_CHARS[*value]) {
  504|     43|      return 0;
  505|     43|    }
  506|  14.5k|  }
  507|  1.29k|  return 1;
  508|  1.33k|}
nghttp2_check_authority:
  578|     18|int nghttp2_check_authority(const uint8_t *value, size_t len) {
  579|     18|  const uint8_t *last;
  580|    244|  for (last = value + len; value != last; ++value) {
  581|    233|    if (!VALID_AUTHORITY_CHARS[*value]) {
  582|      7|      return 0;
  583|      7|    }
  584|    233|  }
  585|     11|  return 1;
  586|     18|}
nghttp2_cpymem:
  588|  28.1k|uint8_t *nghttp2_cpymem(uint8_t *dest, const void *src, size_t len) {
  589|  28.1k|  if (len == 0) {
  590|  5.27k|    return dest;
  591|  5.27k|  }
  592|       |
  593|  22.8k|  memcpy(dest, src, len);
  594|       |
  595|  22.8k|  return dest + len;
  596|  28.1k|}
nghttp2_http2_strerror:
  598|     49|const char *nghttp2_http2_strerror(uint32_t error_code) {
  599|     49|  switch (error_code) {
  600|      0|  case NGHTTP2_NO_ERROR:
  601|      0|    return "NO_ERROR";
  602|     48|  case NGHTTP2_PROTOCOL_ERROR:
  603|     48|    return "PROTOCOL_ERROR";
  604|      0|  case NGHTTP2_INTERNAL_ERROR:
  605|      0|    return "INTERNAL_ERROR";
  606|      0|  case NGHTTP2_FLOW_CONTROL_ERROR:
  607|      0|    return "FLOW_CONTROL_ERROR";
  608|      0|  case NGHTTP2_SETTINGS_TIMEOUT:
  609|      0|    return "SETTINGS_TIMEOUT";
  610|      0|  case NGHTTP2_STREAM_CLOSED:
  611|      0|    return "STREAM_CLOSED";
  612|      0|  case NGHTTP2_FRAME_SIZE_ERROR:
  613|      0|    return "FRAME_SIZE_ERROR";
  614|      0|  case NGHTTP2_REFUSED_STREAM:
  615|      0|    return "REFUSED_STREAM";
  616|      0|  case NGHTTP2_CANCEL:
  617|      0|    return "CANCEL";
  618|      0|  case NGHTTP2_COMPRESSION_ERROR:
  619|      0|    return "COMPRESSION_ERROR";
  620|      0|  case NGHTTP2_CONNECT_ERROR:
  621|      0|    return "CONNECT_ERROR";
  622|      0|  case NGHTTP2_ENHANCE_YOUR_CALM:
  623|      0|    return "ENHANCE_YOUR_CALM";
  624|      0|  case NGHTTP2_INADEQUATE_SECURITY:
  625|      0|    return "INADEQUATE_SECURITY";
  626|      0|  case NGHTTP2_HTTP_1_1_REQUIRED:
  627|      0|    return "HTTP_1_1_REQUIRED";
  628|      1|  default:
  629|      1|    return "unknown";
  630|     49|  }
  631|     49|}

nghttp2_http_on_header:
  334|  1.44k|                           int trailer) {
  335|  1.44k|  int rv;
  336|       |
  337|       |  /* We are strict for pseudo header field.  One bad character should
  338|       |     lead to fail.  OTOH, we should be a bit forgiving for regular
  339|       |     headers, since existing public internet has so much illegal
  340|       |     headers floating around and if we kill the stream because of
  341|       |     this, we may disrupt many web sites and/or libraries.  So we
  342|       |     become conservative here, and just ignore those illegal regular
  343|       |     headers. */
  344|  1.44k|  if (!nghttp2_check_header_name(nv->name->base, nv->name->len)) {
  345|     67|    size_t i;
  346|     67|    if (nv->name->len > 0 && nv->name->base[0] == ':') {
  347|      2|      return NGHTTP2_ERR_HTTP_HEADER;
  348|      2|    }
  349|       |    /* header field name must be lower-cased without exception */
  350|    899|    for (i = 0; i < nv->name->len; ++i) {
  351|    871|      uint8_t c = nv->name->base[i];
  352|    871|      if ('A' <= c && c <= 'Z') {
  353|     37|        return NGHTTP2_ERR_HTTP_HEADER;
  354|     37|      }
  355|    871|    }
  356|       |    /* When ignoring regular headers, we set this flag so that we
  357|       |       still enforce header field ordering rule for pseudo header
  358|       |       fields. */
  359|     28|    stream->http_flags |= NGHTTP2_HTTP_FLAG_PSEUDO_HEADER_DISALLOWED;
  360|     28|    return NGHTTP2_ERR_IGN_HTTP_HEADER;
  361|     65|  }
  362|       |
  363|  1.37k|  if (nv->token == NGHTTP2_TOKEN__AUTHORITY ||
  364|  1.37k|      nv->token == NGHTTP2_TOKEN_HOST) {
  365|     18|    rv = nghttp2_check_authority(nv->value->base, nv->value->len);
  366|  1.35k|  } else if (nv->token == NGHTTP2_TOKEN__SCHEME) {
  367|     18|    rv = check_scheme(nv->value->base, nv->value->len);
  368|  1.33k|  } else {
  369|  1.33k|    rv = nghttp2_check_header_value(nv->value->base, nv->value->len);
  370|  1.33k|  }
  371|       |
  372|  1.37k|  if (rv == 0) {
  373|     63|    assert(nv->name->len > 0);
  374|     63|    if (nv->name->base[0] == ':') {
  375|     36|      return NGHTTP2_ERR_HTTP_HEADER;
  376|     36|    }
  377|       |    /* When ignoring regular headers, we set this flag so that we
  378|       |       still enforce header field ordering rule for pseudo header
  379|       |       fields. */
  380|     27|    stream->http_flags |= NGHTTP2_HTTP_FLAG_PSEUDO_HEADER_DISALLOWED;
  381|     27|    return NGHTTP2_ERR_IGN_HTTP_HEADER;
  382|     63|  }
  383|       |
  384|  1.31k|  if (session->server || frame->hd.type == NGHTTP2_PUSH_PROMISE) {
  385|      0|    return http_request_on_header(stream, nv, trailer,
  386|      0|                                  session->server &&
  387|      0|                                      session->pending_enable_connect_protocol);
  388|      0|  }
  389|       |
  390|  1.31k|  return http_response_on_header(stream, nv, trailer);
  391|  1.31k|}
nghttp2_http_on_response_headers:
  430|     35|int nghttp2_http_on_response_headers(nghttp2_stream *stream) {
  431|     35|  if ((stream->http_flags & NGHTTP2_HTTP_FLAG__STATUS) == 0) {
  432|      3|    return -1;
  433|      3|  }
  434|       |
  435|     32|  if (stream->status_code / 100 == 1) {
  436|       |    /* non-final response */
  437|      0|    stream->http_flags =
  438|      0|        (uint16_t)((stream->http_flags & NGHTTP2_HTTP_FLAG_METH_ALL) |
  439|      0|                   NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE);
  440|      0|    stream->content_length = -1;
  441|      0|    stream->status_code = -1;
  442|      0|    return 0;
  443|      0|  }
  444|       |
  445|     32|  stream->http_flags =
  446|     32|      (uint16_t)(stream->http_flags & ~NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE);
  447|       |
  448|     32|  if (!expect_response_body(stream)) {
  449|      8|    stream->content_length = 0;
  450|     24|  } else if (stream->http_flags & (NGHTTP2_HTTP_FLAG_METH_CONNECT |
  451|     24|                                   NGHTTP2_HTTP_FLAG_METH_UPGRADE_WORKAROUND)) {
  452|      0|    stream->content_length = -1;
  453|      0|  }
  454|       |
  455|     32|  return 0;
  456|     32|}
nghttp2_http_on_trailer_headers:
  459|      3|                                    nghttp2_frame *frame) {
  460|      3|  (void)stream;
  461|       |
  462|      3|  if ((frame->hd.flags & NGHTTP2_FLAG_END_STREAM) == 0) {
  463|      1|    return -1;
  464|      1|  }
  465|       |
  466|      2|  return 0;
  467|      3|}
nghttp2_http_on_remote_end_stream:
  469|     10|int nghttp2_http_on_remote_end_stream(nghttp2_stream *stream) {
  470|     10|  if (stream->http_flags & NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE) {
  471|      0|    return -1;
  472|      0|  }
  473|       |
  474|     10|  if (stream->content_length != -1 &&
  475|     10|      stream->content_length != stream->recv_content_length) {
  476|      1|    return -1;
  477|      1|  }
  478|       |
  479|      9|  return 0;
  480|     10|}
nghttp2_http_on_data_chunk:
  482|     14|int nghttp2_http_on_data_chunk(nghttp2_stream *stream, size_t n) {
  483|     14|  stream->recv_content_length += (int64_t)n;
  484|       |
  485|     14|  if ((stream->http_flags & NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE) ||
  486|     14|      (stream->content_length != -1 &&
  487|     14|       stream->recv_content_length > stream->content_length)) {
  488|      3|    return -1;
  489|      3|  }
  490|       |
  491|     11|  return 0;
  492|     14|}
nghttp2_http_record_request_method:
  495|    678|                                        nghttp2_frame *frame) {
  496|    678|  const nghttp2_nv *nva;
  497|    678|  size_t nvlen;
  498|    678|  size_t i;
  499|       |
  500|    678|  switch (frame->hd.type) {
  501|    678|  case NGHTTP2_HEADERS:
  502|    678|    nva = frame->headers.nva;
  503|    678|    nvlen = frame->headers.nvlen;
  504|    678|    break;
  505|      0|  case NGHTTP2_PUSH_PROMISE:
  506|      0|    nva = frame->push_promise.nva;
  507|      0|    nvlen = frame->push_promise.nvlen;
  508|      0|    break;
  509|      0|  default:
  510|      0|    return;
  511|    678|  }
  512|       |
  513|       |  /* TODO we should do this strictly. */
  514|    678|  for (i = 0; i < nvlen; ++i) {
  515|    678|    const nghttp2_nv *nv = &nva[i];
  516|    678|    if (!(nv->namelen == 7 && nv->name[6] == 'd' &&
  517|    678|          memcmp(":metho", nv->name, nv->namelen - 1) == 0)) {
  518|      0|      continue;
  519|      0|    }
  520|    678|    if (lstreq("CONNECT", nv->value, nv->valuelen)) {
  521|      1|      stream->http_flags |= NGHTTP2_HTTP_FLAG_METH_CONNECT;
  522|      1|      return;
  523|      1|    }
  524|    677|    if (lstreq("HEAD", nv->value, nv->valuelen)) {
  525|      1|      stream->http_flags |= NGHTTP2_HTTP_FLAG_METH_HEAD;
  526|      1|      return;
  527|      1|    }
  528|    676|    return;
  529|    677|  }
  530|    678|}
nghttp2_http.c:check_scheme:
  308|     18|static int check_scheme(const uint8_t *value, size_t len) {
  309|     18|  const uint8_t *last;
  310|     18|  if (len == 0) {
  311|      1|    return 0;
  312|      1|  }
  313|       |
  314|     17|  if (!(('A' <= *value && *value <= 'Z') || ('a' <= *value && *value <= 'z'))) {
  315|      2|    return 0;
  316|      2|  }
  317|       |
  318|     15|  last = value + len;
  319|     15|  ++value;
  320|       |
  321|    433|  for (; value != last; ++value) {
  322|    428|    if (!(('A' <= *value && *value <= 'Z') ||
  323|    428|          ('a' <= *value && *value <= 'z') ||
  324|    428|          ('0' <= *value && *value <= '9') || *value == '+' || *value == '-' ||
  325|    428|          *value == '.')) {
  326|     10|      return 0;
  327|     10|    }
  328|    428|  }
  329|      5|  return 1;
  330|     15|}
nghttp2_http.c:check_pseudo_header:
   86|    167|                               int flag) {
   87|    167|  if (stream->http_flags & flag) {
   88|      1|    return 0;
   89|      1|  }
   90|    166|  if (lws(nv->value->base, nv->value->len)) {
   91|      1|    return 0;
   92|      1|  }
   93|    165|  stream->http_flags = (uint16_t)(stream->http_flags | flag);
   94|    165|  return 1;
   95|    166|}
nghttp2_http.c:lws:
   75|    166|static int lws(const uint8_t *s, size_t n) {
   76|    166|  size_t i;
   77|    176|  for (i = 0; i < n; ++i) {
   78|    175|    if (s[i] != ' ' && s[i] != '\t') {
   79|    165|      return 0;
   80|    165|    }
   81|    175|  }
   82|      1|  return 1;
   83|    166|}
nghttp2_http.c:memieq:
   38|      3|static int memieq(const void *a, const void *b, size_t n) {
   39|      3|  size_t i;
   40|      3|  const uint8_t *aa = a, *bb = b;
   41|       |
   42|      4|  for (i = 0; i < n; ++i) {
   43|      3|    if (downcase(aa[i]) != downcase(bb[i])) {
   44|      2|      return 0;
   45|      2|    }
   46|      3|  }
   47|      1|  return 1;
   48|      3|}
nghttp2_http.c:downcase:
   34|      6|static uint8_t downcase(uint8_t c) {
   35|      6|  return 'A' <= c && c <= 'Z' ? (uint8_t)(c - 'A' + 'a') : c;
   36|      6|}
nghttp2_http.c:parse_uint:
   52|    240|static int64_t parse_uint(const uint8_t *s, size_t len) {
   53|    240|  int64_t n = 0;
   54|    240|  size_t i;
   55|    240|  if (len == 0) {
   56|      1|    return -1;
   57|      1|  }
   58|    975|  for (i = 0; i < len; ++i) {
   59|    743|    if ('0' <= s[i] && s[i] <= '9') {
   60|    736|      if (n > INT64_MAX / 10) {
   61|      0|        return -1;
   62|      0|      }
   63|    736|      n *= 10;
   64|    736|      if (n > INT64_MAX - (s[i] - '0')) {
   65|      0|        return -1;
   66|      0|      }
   67|    736|      n += s[i] - '0';
   68|    736|      continue;
   69|    736|    }
   70|      7|    return -1;
   71|    743|  }
   72|    232|  return n;
   73|    239|}
nghttp2_http.c:http_response_on_header:
  229|  1.31k|                                   int trailer) {
  230|  1.31k|  if (nv->name->base[0] == ':') {
  231|    183|    if (trailer ||
  232|    183|        (stream->http_flags & NGHTTP2_HTTP_FLAG_PSEUDO_HEADER_DISALLOWED)) {
  233|     13|      return NGHTTP2_ERR_HTTP_HEADER;
  234|     13|    }
  235|    183|  }
  236|       |
  237|  1.29k|  switch (nv->token) {
  238|    167|  case NGHTTP2_TOKEN__STATUS: {
  239|    167|    if (!check_pseudo_header(stream, nv, NGHTTP2_HTTP_FLAG__STATUS)) {
  240|      2|      return NGHTTP2_ERR_HTTP_HEADER;
  241|      2|    }
  242|    165|    if (nv->value->len != 3) {
  243|      4|      return NGHTTP2_ERR_HTTP_HEADER;
  244|      4|    }
  245|    161|    stream->status_code = (int16_t)parse_uint(nv->value->base, nv->value->len);
  246|    161|    if (stream->status_code == -1 || stream->status_code == 101) {
  247|      1|      return NGHTTP2_ERR_HTTP_HEADER;
  248|      1|    }
  249|    160|    break;
  250|    161|  }
  251|    160|  case NGHTTP2_TOKEN_CONTENT_LENGTH: {
  252|     86|    if (stream->status_code == 204) {
  253|       |      /* content-length header field in 204 response is prohibited by
  254|       |         RFC 7230.  But some widely used servers send content-length:
  255|       |         0.  Until they get fixed, we ignore it. */
  256|      5|      if (stream->content_length != -1) {
  257|       |        /* Found multiple content-length field */
  258|      1|        return NGHTTP2_ERR_HTTP_HEADER;
  259|      1|      }
  260|      4|      if (!lstrieq("0", nv->value->base, nv->value->len)) {
  261|      3|        return NGHTTP2_ERR_HTTP_HEADER;
  262|      3|      }
  263|      1|      stream->content_length = 0;
  264|      1|      return NGHTTP2_ERR_REMOVE_HTTP_HEADER;
  265|      4|    }
  266|     81|    if (stream->status_code / 100 == 1) {
  267|      0|      return NGHTTP2_ERR_HTTP_HEADER;
  268|      0|    }
  269|       |    /* https://tools.ietf.org/html/rfc7230#section-3.3.3 */
  270|     81|    if (stream->status_code / 100 == 2 &&
  271|     81|        (stream->http_flags & NGHTTP2_HTTP_FLAG_METH_CONNECT)) {
  272|      0|      return NGHTTP2_ERR_REMOVE_HTTP_HEADER;
  273|      0|    }
  274|     81|    if (stream->content_length != -1) {
  275|      2|      return NGHTTP2_ERR_HTTP_HEADER;
  276|      2|    }
  277|     79|    stream->content_length = parse_uint(nv->value->base, nv->value->len);
  278|     79|    if (stream->content_length == -1) {
  279|      7|      return NGHTTP2_ERR_HTTP_HEADER;
  280|      7|    }
  281|     72|    break;
  282|     79|  }
  283|       |  /* disallowed header fields */
  284|     72|  case NGHTTP2_TOKEN_CONNECTION:
  285|      0|  case NGHTTP2_TOKEN_KEEP_ALIVE:
  286|      0|  case NGHTTP2_TOKEN_PROXY_CONNECTION:
  287|      1|  case NGHTTP2_TOKEN_TRANSFER_ENCODING:
  288|      1|  case NGHTTP2_TOKEN_UPGRADE:
  289|      1|    return NGHTTP2_ERR_HTTP_HEADER;
  290|      0|  case NGHTTP2_TOKEN_TE:
  291|      0|    if (!lstrieq("trailers", nv->value->base, nv->value->len)) {
  292|      0|      return NGHTTP2_ERR_HTTP_HEADER;
  293|      0|    }
  294|      0|    break;
  295|  1.04k|  default:
  296|  1.04k|    if (nv->name->base[0] == ':') {
  297|      3|      return NGHTTP2_ERR_HTTP_HEADER;
  298|      3|    }
  299|  1.29k|  }
  300|       |
  301|  1.27k|  if (nv->name->base[0] != ':') {
  302|  1.11k|    stream->http_flags |= NGHTTP2_HTTP_FLAG_PSEUDO_HEADER_DISALLOWED;
  303|  1.11k|  }
  304|       |
  305|  1.27k|  return 0;
  306|  1.29k|}
nghttp2_http.c:expect_response_body:
   97|     32|static int expect_response_body(nghttp2_stream *stream) {
   98|     32|  return (stream->http_flags & NGHTTP2_HTTP_FLAG_METH_HEAD) == 0 &&
   99|     32|         stream->status_code / 100 != 1 && stream->status_code != 304 &&
  100|     32|         stream->status_code != 204;
  101|     32|}

nghttp2_map_init:
   31|    704|int nghttp2_map_init(nghttp2_map *map, nghttp2_mem *mem) {
   32|    704|  map->mem = mem;
   33|    704|  map->tablelen = INITIAL_TABLE_LENGTH;
   34|    704|  map->table =
   35|    704|      nghttp2_mem_calloc(mem, map->tablelen, sizeof(nghttp2_map_entry *));
   36|    704|  if (map->table == NULL) {
   37|      0|    return NGHTTP2_ERR_NOMEM;
   38|      0|  }
   39|       |
   40|    704|  map->size = 0;
   41|       |
   42|    704|  return 0;
   43|    704|}
nghttp2_map_free:
   45|    704|void nghttp2_map_free(nghttp2_map *map) {
   46|    704|  nghttp2_mem_free(map->mem, map->table);
   47|    704|}
nghttp2_map_each_free:
   51|    704|                           void *ptr) {
   52|    704|  uint32_t i;
   53|   180k|  for (i = 0; i < map->tablelen; ++i) {
   54|   180k|    nghttp2_map_entry *entry;
   55|   180k|    for (entry = map->table[i]; entry;) {
   56|    221|      nghttp2_map_entry *next = entry->next;
   57|    221|      func(entry, ptr);
   58|    221|      entry = next;
   59|    221|    }
   60|   180k|    map->table[i] = NULL;
   61|   180k|  }
   62|    704|}
nghttp2_map_each:
   66|    682|                     void *ptr) {
   67|    682|  int rv;
   68|    682|  uint32_t i;
   69|   175k|  for (i = 0; i < map->tablelen; ++i) {
   70|   174k|    nghttp2_map_entry *entry;
   71|   175k|    for (entry = map->table[i]; entry; entry = entry->next) {
   72|    650|      rv = func(entry, ptr);
   73|    650|      if (rv != 0) {
   74|      0|        return rv;
   75|      0|      }
   76|    650|    }
   77|   174k|  }
   78|    682|  return 0;
   79|    682|}
nghttp2_map_entry_init:
   81|  1.38k|void nghttp2_map_entry_init(nghttp2_map_entry *entry, key_type key) {
   82|  1.38k|  entry->key = key;
   83|  1.38k|  entry->next = NULL;
   84|  1.38k|}
nghttp2_map_insert:
  142|    678|int nghttp2_map_insert(nghttp2_map *map, nghttp2_map_entry *new_entry) {
  143|    678|  int rv;
  144|       |  /* Load factor is 0.75 */
  145|    678|  if ((map->size + 1) * 4 > map->tablelen * 3) {
  146|      0|    rv = resize(map, map->tablelen * 2);
  147|      0|    if (rv != 0) {
  148|      0|      return rv;
  149|      0|    }
  150|      0|  }
  151|    678|  rv = insert(map->table, map->tablelen, new_entry);
  152|    678|  if (rv != 0) {
  153|      0|    return rv;
  154|      0|  }
  155|    678|  ++map->size;
  156|    678|  return 0;
  157|    678|}
nghttp2_map_find:
  159|  10.4k|nghttp2_map_entry *nghttp2_map_find(nghttp2_map *map, key_type key) {
  160|  10.4k|  uint32_t h;
  161|  10.4k|  nghttp2_map_entry *entry;
  162|  10.4k|  h = hash(key, map->tablelen);
  163|  10.4k|  for (entry = map->table[h]; entry; entry = entry->next) {
  164|  6.85k|    if (entry->key == key) {
  165|  6.85k|      return entry;
  166|  6.85k|    }
  167|  6.85k|  }
  168|  3.63k|  return NULL;
  169|  10.4k|}
nghttp2_map_remove:
  171|    457|int nghttp2_map_remove(nghttp2_map *map, key_type key) {
  172|    457|  uint32_t h;
  173|    457|  nghttp2_map_entry **dst;
  174|       |
  175|    457|  h = hash(key, map->tablelen);
  176|       |
  177|    457|  for (dst = &map->table[h]; *dst; dst = &(*dst)->next) {
  178|    457|    if ((*dst)->key != key) {
  179|      0|      continue;
  180|      0|    }
  181|       |
  182|    457|    *dst = (*dst)->next;
  183|    457|    --map->size;
  184|    457|    return 0;
  185|    457|  }
  186|      0|  return NGHTTP2_ERR_INVALID_ARGUMENT;
  187|    457|}
nghttp2_map_size:
  189|  7.12k|size_t nghttp2_map_size(nghttp2_map *map) { return map->size; }
nghttp2_map.c:insert:
   96|    678|                  nghttp2_map_entry *entry) {
   97|    678|  uint32_t h = hash(entry->key, tablelen);
   98|    678|  if (table[h] == NULL) {
   99|    678|    table[h] = entry;
  100|    678|  } else {
  101|      0|    nghttp2_map_entry *p;
  102|       |    /* We won't allow duplicated key, so check it out. */
  103|      0|    for (p = table[h]; p; p = p->next) {
  104|      0|      if (p->key == entry->key) {
  105|      0|        return NGHTTP2_ERR_INVALID_ARGUMENT;
  106|      0|      }
  107|      0|    }
  108|      0|    entry->next = table[h];
  109|      0|    table[h] = entry;
  110|      0|  }
  111|    678|  return 0;
  112|    678|}
nghttp2_map.c:hash:
   88|  11.6k|static uint32_t hash(int32_t key, uint32_t mod) {
   89|  11.6k|  uint32_t h = (uint32_t)key;
   90|  11.6k|  h ^= (h >> 20) ^ (h >> 12);
   91|  11.6k|  h ^= (h >> 7) ^ (h >> 4);
   92|  11.6k|  return h & (mod - 1);
   93|  11.6k|}

nghttp2_mem_default:
   54|    704|nghttp2_mem *nghttp2_mem_default(void) { return &mem_default; }
nghttp2_mem_malloc:
   56|  25.9k|void *nghttp2_mem_malloc(nghttp2_mem *mem, size_t size) {
   57|  25.9k|  return mem->malloc(size, mem->mem_user_data);
   58|  25.9k|}
nghttp2_mem_free:
   60|  24.5k|void nghttp2_mem_free(nghttp2_mem *mem, void *ptr) {
   61|  24.5k|  mem->free(ptr, mem->mem_user_data);
   62|  24.5k|}
nghttp2_mem_free2:
   64|  11.2k|void nghttp2_mem_free2(nghttp2_free free_func, void *ptr, void *mem_user_data) {
   65|  11.2k|  free_func(ptr, mem_user_data);
   66|  11.2k|}
nghttp2_mem_calloc:
   68|  1.40k|void *nghttp2_mem_calloc(nghttp2_mem *mem, size_t nmemb, size_t size) {
   69|  1.40k|  return mem->calloc(nmemb, size, mem->mem_user_data);
   70|  1.40k|}
nghttp2_mem_realloc:
   72|    735|void *nghttp2_mem_realloc(nghttp2_mem *mem, void *ptr, size_t size) {
   73|    735|  return mem->realloc(ptr, size, mem->mem_user_data);
   74|    735|}
nghttp2_mem.c:default_malloc:
   27|  25.9k|static void *default_malloc(size_t size, void *mem_user_data) {
   28|  25.9k|  (void)mem_user_data;
   29|       |
   30|  25.9k|  return malloc(size);
   31|  25.9k|}
nghttp2_mem.c:default_free:
   33|  35.8k|static void default_free(void *ptr, void *mem_user_data) {
   34|  35.8k|  (void)mem_user_data;
   35|       |
   36|  35.8k|  free(ptr);
   37|  35.8k|}
nghttp2_mem.c:default_calloc:
   39|  1.40k|static void *default_calloc(size_t nmemb, size_t size, void *mem_user_data) {
   40|  1.40k|  (void)mem_user_data;
   41|       |
   42|  1.40k|  return calloc(nmemb, size);
   43|  1.40k|}
nghttp2_mem.c:default_realloc:
   45|    735|static void *default_realloc(void *ptr, size_t size, void *mem_user_data) {
   46|    735|  (void)mem_user_data;
   47|       |
   48|    735|  return realloc(ptr, size);
   49|    735|}

nghttp2_outbound_item_init:
   30|  3.49k|void nghttp2_outbound_item_init(nghttp2_outbound_item *item) {
   31|  3.49k|  item->cycle = 0;
   32|  3.49k|  item->qnext = NULL;
   33|  3.49k|  item->queued = 0;
   34|       |
   35|  3.49k|  memset(&item->aux_data, 0, sizeof(nghttp2_aux_data));
   36|  3.49k|}
nghttp2_outbound_item_free:
   38|  6.15k|void nghttp2_outbound_item_free(nghttp2_outbound_item *item, nghttp2_mem *mem) {
   39|  6.15k|  nghttp2_frame *frame;
   40|       |
   41|  6.15k|  if (item == NULL) {
   42|  2.66k|    return;
   43|  2.66k|  }
   44|       |
   45|  3.49k|  frame = &item->frame;
   46|       |
   47|  3.49k|  switch (frame->hd.type) {
   48|     31|  case NGHTTP2_DATA:
   49|     31|    nghttp2_frame_data_free(&frame->data);
   50|     31|    break;
   51|    678|  case NGHTTP2_HEADERS:
   52|    678|    nghttp2_frame_headers_free(&frame->headers, mem);
   53|    678|    break;
   54|      0|  case NGHTTP2_PRIORITY:
   55|      0|    nghttp2_frame_priority_free(&frame->priority);
   56|      0|    break;
   57|    587|  case NGHTTP2_RST_STREAM:
   58|    587|    nghttp2_frame_rst_stream_free(&frame->rst_stream);
   59|    587|    break;
   60|  1.26k|  case NGHTTP2_SETTINGS:
   61|  1.26k|    nghttp2_frame_settings_free(&frame->settings, mem);
   62|  1.26k|    break;
   63|      0|  case NGHTTP2_PUSH_PROMISE:
   64|      0|    nghttp2_frame_push_promise_free(&frame->push_promise, mem);
   65|      0|    break;
   66|      0|  case NGHTTP2_PING:
   67|      0|    nghttp2_frame_ping_free(&frame->ping);
   68|      0|    break;
   69|    231|  case NGHTTP2_GOAWAY:
   70|    231|    nghttp2_frame_goaway_free(&frame->goaway, mem);
   71|    231|    break;
   72|    704|  case NGHTTP2_WINDOW_UPDATE:
   73|    704|    nghttp2_frame_window_update_free(&frame->window_update);
   74|    704|    break;
   75|      0|  default: {
   76|      0|    nghttp2_ext_aux_data *aux_data;
   77|       |
   78|      0|    aux_data = &item->aux_data.ext;
   79|       |
   80|      0|    if (aux_data->builtin == 0) {
   81|      0|      nghttp2_frame_extension_free(&frame->ext);
   82|      0|      break;
   83|      0|    }
   84|       |
   85|      0|    switch (frame->hd.type) {
   86|      0|    case NGHTTP2_ALTSVC:
   87|      0|      nghttp2_frame_altsvc_free(&frame->ext, mem);
   88|      0|      break;
   89|      0|    case NGHTTP2_ORIGIN:
   90|      0|      nghttp2_frame_origin_free(&frame->ext, mem);
   91|      0|      break;
   92|      0|    default:
   93|      0|      assert(0);
   94|      0|      break;
   95|      0|    }
   96|      0|  }
   97|  3.49k|  }
   98|  3.49k|}
nghttp2_outbound_queue_push:
  106|  3.46k|                                 nghttp2_outbound_item *item) {
  107|  3.46k|  if (q->tail) {
  108|    355|    q->tail = q->tail->qnext = item;
  109|  3.10k|  } else {
  110|  3.10k|    q->head = q->tail = item;
  111|  3.10k|  }
  112|  3.46k|  ++q->n;
  113|  3.46k|}
nghttp2_outbound_queue_pop:
  115|  3.46k|void nghttp2_outbound_queue_pop(nghttp2_outbound_queue *q) {
  116|  3.46k|  nghttp2_outbound_item *item;
  117|  3.46k|  if (!q->head) {
  118|      0|    return;
  119|      0|  }
  120|  3.46k|  item = q->head;
  121|  3.46k|  q->head = q->head->qnext;
  122|  3.46k|  item->qnext = NULL;
  123|  3.46k|  if (!q->head) {
  124|  3.10k|    q->tail = NULL;
  125|  3.10k|  }
  126|  3.46k|  --q->n;
  127|  3.46k|}

nghttp2_pq_init:
   32|  1.38k|int nghttp2_pq_init(nghttp2_pq *pq, nghttp2_less less, nghttp2_mem *mem) {
   33|  1.38k|  pq->mem = mem;
   34|  1.38k|  pq->capacity = 0;
   35|  1.38k|  pq->q = NULL;
   36|  1.38k|  pq->length = 0;
   37|  1.38k|  pq->less = less;
   38|  1.38k|  return 0;
   39|  1.38k|}
nghttp2_pq_free:
   41|  1.38k|void nghttp2_pq_free(nghttp2_pq *pq) {
   42|  1.38k|  nghttp2_mem_free(pq->mem, pq->q);
   43|  1.38k|  pq->q = NULL;
   44|  1.38k|}
nghttp2_pq_push:
   68|     95|int nghttp2_pq_push(nghttp2_pq *pq, nghttp2_pq_entry *item) {
   69|     95|  if (pq->capacity <= pq->length) {
   70|     31|    void *nq;
   71|     31|    size_t ncapacity;
   72|       |
   73|     31|    ncapacity = nghttp2_max(4, (pq->capacity * 2));
   74|       |
   75|     31|    nq = nghttp2_mem_realloc(pq->mem, pq->q,
   76|     31|                             ncapacity * sizeof(nghttp2_pq_entry *));
   77|     31|    if (nq == NULL) {
   78|      0|      return NGHTTP2_ERR_NOMEM;
   79|      0|    }
   80|     31|    pq->capacity = ncapacity;
   81|     31|    pq->q = nq;
   82|     31|  }
   83|     95|  pq->q[pq->length] = item;
   84|     95|  item->index = pq->length;
   85|     95|  ++pq->length;
   86|     95|  bubble_up(pq, pq->length - 1);
   87|     95|  return 0;
   88|     95|}
nghttp2_pq_top:
   90|  2.34k|nghttp2_pq_entry *nghttp2_pq_top(nghttp2_pq *pq) {
   91|  2.34k|  if (pq->length == 0) {
   92|  2.27k|    return NULL;
   93|  2.27k|  } else {
   94|     76|    return pq->q[0];
   95|     76|  }
   96|  2.34k|}
nghttp2_pq_pop:
  119|     95|void nghttp2_pq_pop(nghttp2_pq *pq) {
  120|     95|  if (pq->length > 0) {
  121|     95|    pq->q[0] = pq->q[pq->length - 1];
  122|     95|    pq->q[0]->index = 0;
  123|     95|    --pq->length;
  124|     95|    bubble_down(pq, 0);
  125|     95|  }
  126|     95|}
nghttp2_pq_remove:
  128|     95|void nghttp2_pq_remove(nghttp2_pq *pq, nghttp2_pq_entry *item) {
  129|     95|  assert(pq->q[item->index] == item);
  130|       |
  131|     95|  if (item->index == 0) {
  132|     95|    nghttp2_pq_pop(pq);
  133|     95|    return;
  134|     95|  }
  135|       |
  136|      0|  if (item->index == pq->length - 1) {
  137|      0|    --pq->length;
  138|      0|    return;
  139|      0|  }
  140|       |
  141|      0|  pq->q[item->index] = pq->q[pq->length - 1];
  142|      0|  pq->q[item->index]->index = item->index;
  143|      0|  --pq->length;
  144|       |
  145|      0|  if (pq->less(item, pq->q[item->index])) {
  146|      0|    bubble_down(pq, item->index);
  147|      0|  } else {
  148|      0|    bubble_up(pq, item->index);
  149|      0|  }
  150|      0|}
nghttp2_pq_empty:
  152|    323|int nghttp2_pq_empty(nghttp2_pq *pq) { return pq->length == 0; }
nghttp2_pq.c:bubble_up:
   56|     95|static void bubble_up(nghttp2_pq *pq, size_t index) {
   57|     95|  size_t parent;
   58|     95|  while (index != 0) {
   59|      0|    parent = (index - 1) / 2;
   60|      0|    if (!pq->less(pq->q[index], pq->q[parent])) {
   61|      0|      return;
   62|      0|    }
   63|      0|    swap(pq, parent, index);
   64|      0|    index = parent;
   65|      0|  }
   66|     95|}
nghttp2_pq.c:bubble_down:
   98|     95|static void bubble_down(nghttp2_pq *pq, size_t index) {
   99|     95|  size_t i, j, minindex;
  100|     95|  for (;;) {
  101|     95|    j = index * 2 + 1;
  102|     95|    minindex = index;
  103|     95|    for (i = 0; i < 2; ++i, ++j) {
  104|     95|      if (j >= pq->length) {
  105|     95|        break;
  106|     95|      }
  107|      0|      if (pq->less(pq->q[j], pq->q[minindex])) {
  108|      0|        minindex = j;
  109|      0|      }
  110|      0|    }
  111|     95|    if (minindex == index) {
  112|     95|      return;
  113|     95|    }
  114|      0|    swap(pq, index, minindex);
  115|      0|    index = minindex;
  116|      0|  }
  117|     95|}

nghttp2_priority_spec_init:
   29|    717|                                int exclusive) {
   30|    717|  pri_spec->stream_id = stream_id;
   31|    717|  pri_spec->weight = weight;
   32|    717|  pri_spec->exclusive = exclusive != 0;
   33|    717|}
nghttp2_priority_spec_default_init:
   35|    888|void nghttp2_priority_spec_default_init(nghttp2_priority_spec *pri_spec) {
   36|    888|  pri_spec->stream_id = 0;
   37|    888|  pri_spec->weight = NGHTTP2_DEFAULT_WEIGHT;
   38|    888|  pri_spec->exclusive = 0;
   39|    888|}
nghttp2_priority_spec_check_default:
   41|    678|int nghttp2_priority_spec_check_default(const nghttp2_priority_spec *pri_spec) {
   42|    678|  return pri_spec->stream_id == 0 &&
   43|    678|         pri_spec->weight == NGHTTP2_DEFAULT_WEIGHT && pri_spec->exclusive == 0;
   44|    678|}

nghttp2_rcbuf_new:
   34|  11.2k|                      nghttp2_mem *mem) {
   35|  11.2k|  uint8_t *p;
   36|       |
   37|  11.2k|  p = nghttp2_mem_malloc(mem, sizeof(nghttp2_rcbuf) + size);
   38|  11.2k|  if (p == NULL) {
   39|      0|    return NGHTTP2_ERR_NOMEM;
   40|      0|  }
   41|       |
   42|  11.2k|  *rcbuf_ptr = (void *)p;
   43|       |
   44|  11.2k|  (*rcbuf_ptr)->mem_user_data = mem->mem_user_data;
   45|  11.2k|  (*rcbuf_ptr)->free = mem->free;
   46|  11.2k|  (*rcbuf_ptr)->base = p + sizeof(nghttp2_rcbuf);
   47|  11.2k|  (*rcbuf_ptr)->len = size;
   48|  11.2k|  (*rcbuf_ptr)->ref = 1;
   49|       |
   50|  11.2k|  return 0;
   51|  11.2k|}
nghttp2_rcbuf_new2:
   54|  4.92k|                       size_t srclen, nghttp2_mem *mem) {
   55|  4.92k|  int rv;
   56|       |
   57|  4.92k|  rv = nghttp2_rcbuf_new(rcbuf_ptr, srclen + 1, mem);
   58|  4.92k|  if (rv != 0) {
   59|      0|    return rv;
   60|      0|  }
   61|       |
   62|  4.92k|  (*rcbuf_ptr)->len = srclen;
   63|  4.92k|  *nghttp2_cpymem((*rcbuf_ptr)->base, src, srclen) = '\0';
   64|       |
   65|  4.92k|  return 0;
   66|  4.92k|}
nghttp2_rcbuf_del:
   71|  11.2k|void nghttp2_rcbuf_del(nghttp2_rcbuf *rcbuf) {
   72|  11.2k|  nghttp2_mem_free2(rcbuf->free, rcbuf, rcbuf->mem_user_data);
   73|  11.2k|}
nghttp2_rcbuf_incref:
   75|  13.2k|void nghttp2_rcbuf_incref(nghttp2_rcbuf *rcbuf) {
   76|  13.2k|  if (rcbuf->ref == -1) {
   77|  5.97k|    return;
   78|  5.97k|  }
   79|       |
   80|  7.29k|  ++rcbuf->ref;
   81|  7.29k|}
nghttp2_rcbuf_decref:
   83|  30.5k|void nghttp2_rcbuf_decref(nghttp2_rcbuf *rcbuf) {
   84|  30.5k|  if (rcbuf == NULL || rcbuf->ref == -1) {
   85|  12.0k|    return;
   86|  12.0k|  }
   87|       |
   88|  18.5k|  assert(rcbuf->ref > 0);
   89|       |
   90|  18.5k|  if (--rcbuf->ref == 0) {
   91|  11.2k|    nghttp2_rcbuf_del(rcbuf);
   92|  11.2k|  }
   93|  18.5k|}

nghttp2_is_fatal:
   81|  25.4k|int nghttp2_is_fatal(int lib_error_code) {
   82|  25.4k|  return lib_error_code < NGHTTP2_ERR_FATAL;
   83|  25.4k|}
nghttp2_session_terminate_session:
  248|    135|                                      uint32_t error_code) {
  249|    135|  return session_terminate_session(session, session->last_proc_stream_id,
  250|    135|                                   error_code, NULL);
  251|    135|}
nghttp2_session_terminate_session_with_reason:
  261|     96|                                                  const char *reason) {
  262|     96|  return session_terminate_session(session, session->last_proc_stream_id,
  263|     96|                                   error_code, reason);
  264|     96|}
nghttp2_session_is_my_stream_id:
  267|  2.84k|                                    int32_t stream_id) {
  268|  2.84k|  int rem;
  269|  2.84k|  if (stream_id == 0) {
  270|    231|    return 0;
  271|    231|  }
  272|  2.61k|  rem = stream_id & 0x1;
  273|  2.61k|  if (session->server) {
  274|      0|    return rem == 0;
  275|      0|  }
  276|  2.61k|  return rem == 1;
  277|  2.61k|}
nghttp2_session_get_stream:
  280|  9.79k|                                           int32_t stream_id) {
  281|  9.79k|  nghttp2_stream *stream;
  282|       |
  283|  9.79k|  stream = (nghttp2_stream *)nghttp2_map_find(&session->streams, stream_id);
  284|       |
  285|  9.79k|  if (stream == NULL || (stream->flags & NGHTTP2_STREAM_FLAG_CLOSED) ||
  286|  9.79k|      stream->state == NGHTTP2_STREAM_IDLE) {
  287|  2.95k|    return NULL;
  288|  2.95k|  }
  289|       |
  290|  6.84k|  return stream;
  291|  9.79k|}
nghttp2_session_get_stream_raw:
  294|    683|                                               int32_t stream_id) {
  295|    683|  return (nghttp2_stream *)nghttp2_map_find(&session->streams, stream_id);
  296|    683|}
nghttp2_session_client_new:
  603|    704|                               void *user_data) {
  604|    704|  return nghttp2_session_client_new3(session_ptr, callbacks, user_data, NULL,
  605|    704|                                     NULL);
  606|    704|}
nghttp2_session_client_new3:
  618|    704|                                nghttp2_mem *mem) {
  619|    704|  int rv;
  620|    704|  nghttp2_session *session;
  621|       |
  622|    704|  rv = session_new(&session, callbacks, user_data, 0, option, mem);
  623|       |
  624|    704|  if (rv != 0) {
  625|      0|    return rv;
  626|      0|  }
  627|       |  /* IDs for use in client */
  628|    704|  session->next_stream_id = 1;
  629|       |
  630|    704|  *session_ptr = session;
  631|       |
  632|    704|  return 0;
  633|    704|}
nghttp2_session_del:
  735|    704|void nghttp2_session_del(nghttp2_session *session) {
  736|    704|  nghttp2_mem *mem;
  737|    704|  nghttp2_inflight_settings *settings;
  738|       |
  739|    704|  if (session == NULL) {
  740|      0|    return;
  741|      0|  }
  742|       |
  743|    704|  mem = &session->mem;
  744|       |
  745|  1.40k|  for (settings = session->inflight_settings_head; settings;) {
  746|    702|    nghttp2_inflight_settings *next = settings->next;
  747|    702|    inflight_settings_del(settings, mem);
  748|    702|    settings = next;
  749|    702|  }
  750|       |
  751|    704|  nghttp2_stream_free(&session->root);
  752|       |
  753|       |  /* Have to free streams first, so that we can check
  754|       |     stream->item->queued */
  755|    704|  nghttp2_map_each_free(&session->streams, free_streams, session);
  756|    704|  nghttp2_map_free(&session->streams);
  757|       |
  758|    704|  ob_q_free(&session->ob_urgent, mem);
  759|    704|  ob_q_free(&session->ob_reg, mem);
  760|    704|  ob_q_free(&session->ob_syn, mem);
  761|       |
  762|    704|  active_outbound_item_reset(&session->aob, mem);
  763|    704|  session_inbound_frame_reset(session);
  764|    704|  nghttp2_hd_deflate_free(&session->hd_deflater);
  765|    704|  nghttp2_hd_inflate_free(&session->hd_inflater);
  766|    704|  nghttp2_bufs_free(&session->aob.framebufs);
  767|    704|  nghttp2_mem_free(mem, session);
  768|    704|}
nghttp2_session_add_item:
  846|  3.49k|                             nghttp2_outbound_item *item) {
  847|       |  /* TODO Return error if stream is not found for the frame requiring
  848|       |     stream presence. */
  849|  3.49k|  int rv = 0;
  850|  3.49k|  nghttp2_stream *stream;
  851|  3.49k|  nghttp2_frame *frame;
  852|       |
  853|  3.49k|  frame = &item->frame;
  854|  3.49k|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
  855|       |
  856|  3.49k|  switch (frame->hd.type) {
  857|     31|  case NGHTTP2_DATA:
  858|     31|    if (!stream) {
  859|      0|      return NGHTTP2_ERR_STREAM_CLOSED;
  860|      0|    }
  861|       |
  862|     31|    if (stream->item) {
  863|      0|      return NGHTTP2_ERR_DATA_EXIST;
  864|      0|    }
  865|       |
  866|     31|    rv = nghttp2_stream_attach_item(stream, item);
  867|       |
  868|     31|    if (rv != 0) {
  869|      0|      return rv;
  870|      0|    }
  871|       |
  872|     31|    return 0;
  873|    678|  case NGHTTP2_HEADERS:
  874|       |    /* We push request HEADERS and push response HEADERS to
  875|       |       dedicated queue because their transmission is affected by
  876|       |       SETTINGS_MAX_CONCURRENT_STREAMS */
  877|       |    /* TODO If 2 HEADERS are submitted for reserved stream, then
  878|       |       both of them are queued into ob_syn, which is not
  879|       |       desirable. */
  880|    678|    if (frame->headers.cat == NGHTTP2_HCAT_REQUEST ||
  881|    678|        (stream && stream->state == NGHTTP2_STREAM_RESERVED)) {
  882|    678|      nghttp2_outbound_queue_push(&session->ob_syn, item);
  883|    678|      item->queued = 1;
  884|    678|      return 0;
  885|      0|      ;
  886|      0|    }
  887|       |
  888|      0|    nghttp2_outbound_queue_push(&session->ob_reg, item);
  889|      0|    item->queued = 1;
  890|      0|    return 0;
  891|  1.26k|  case NGHTTP2_SETTINGS:
  892|  1.26k|  case NGHTTP2_PING:
  893|  1.26k|    nghttp2_outbound_queue_push(&session->ob_urgent, item);
  894|  1.26k|    item->queued = 1;
  895|  1.26k|    return 0;
  896|    587|  case NGHTTP2_RST_STREAM:
  897|    587|    if (stream) {
  898|    571|      stream->state = NGHTTP2_STREAM_CLOSING;
  899|    571|    }
  900|    587|    nghttp2_outbound_queue_push(&session->ob_reg, item);
  901|    587|    item->queued = 1;
  902|    587|    return 0;
  903|      0|  case NGHTTP2_PUSH_PROMISE: {
  904|      0|    nghttp2_headers_aux_data *aux_data;
  905|      0|    nghttp2_priority_spec pri_spec;
  906|       |
  907|      0|    aux_data = &item->aux_data.headers;
  908|       |
  909|      0|    if (!stream) {
  910|      0|      return NGHTTP2_ERR_STREAM_CLOSED;
  911|      0|    }
  912|       |
  913|      0|    nghttp2_priority_spec_init(&pri_spec, stream->stream_id,
  914|      0|                               NGHTTP2_DEFAULT_WEIGHT, 0);
  915|       |
  916|      0|    if (!nghttp2_session_open_stream(
  917|      0|            session, frame->push_promise.promised_stream_id,
  918|      0|            NGHTTP2_STREAM_FLAG_NONE, &pri_spec, NGHTTP2_STREAM_RESERVED,
  919|      0|            aux_data->stream_user_data)) {
  920|      0|      return NGHTTP2_ERR_NOMEM;
  921|      0|    }
  922|       |
  923|       |    /* We don't have to call nghttp2_session_adjust_closed_stream()
  924|       |       here, since stream->stream_id is local stream_id, and it does
  925|       |       not affect closed stream count. */
  926|       |
  927|      0|    nghttp2_outbound_queue_push(&session->ob_reg, item);
  928|      0|    item->queued = 1;
  929|       |
  930|      0|    return 0;
  931|      0|  }
  932|    704|  case NGHTTP2_WINDOW_UPDATE:
  933|    704|    if (stream) {
  934|      0|      stream->window_update_queued = 1;
  935|    704|    } else if (frame->hd.stream_id == 0) {
  936|    704|      session->window_update_queued = 1;
  937|    704|    }
  938|    704|    nghttp2_outbound_queue_push(&session->ob_reg, item);
  939|    704|    item->queued = 1;
  940|    704|    return 0;
  941|    231|  default:
  942|    231|    nghttp2_outbound_queue_push(&session->ob_reg, item);
  943|    231|    item->queued = 1;
  944|    231|    return 0;
  945|  3.49k|  }
  946|  3.49k|}
nghttp2_session_add_rst_stream:
  949|    756|                                   uint32_t error_code) {
  950|    756|  int rv;
  951|    756|  nghttp2_outbound_item *item;
  952|    756|  nghttp2_frame *frame;
  953|    756|  nghttp2_stream *stream;
  954|    756|  nghttp2_mem *mem;
  955|       |
  956|    756|  mem = &session->mem;
  957|    756|  stream = nghttp2_session_get_stream(session, stream_id);
  958|    756|  if (stream && stream->state == NGHTTP2_STREAM_CLOSING) {
  959|    169|    return 0;
  960|    169|  }
  961|       |
  962|       |  /* Cancel pending request HEADERS in ob_syn if this RST_STREAM
  963|       |     refers to that stream. */
  964|    587|  if (!session->server && nghttp2_session_is_my_stream_id(session, stream_id) &&
  965|    587|      nghttp2_outbound_queue_top(&session->ob_syn)) {
  966|      0|    nghttp2_headers_aux_data *aux_data;
  967|      0|    nghttp2_frame *headers_frame;
  968|       |
  969|      0|    headers_frame = &nghttp2_outbound_queue_top(&session->ob_syn)->frame;
  970|      0|    assert(headers_frame->hd.type == NGHTTP2_HEADERS);
  971|       |
  972|      0|    if (headers_frame->hd.stream_id <= stream_id &&
  973|      0|        (uint32_t)stream_id < session->next_stream_id) {
  974|       |
  975|      0|      for (item = session->ob_syn.head; item; item = item->qnext) {
  976|      0|        aux_data = &item->aux_data.headers;
  977|       |
  978|      0|        if (item->frame.hd.stream_id < stream_id) {
  979|      0|          continue;
  980|      0|        }
  981|       |
  982|       |        /* stream_id in ob_syn queue must be strictly increasing.  If
  983|       |           we found larger ID, then we can break here. */
  984|      0|        if (item->frame.hd.stream_id > stream_id || aux_data->canceled) {
  985|      0|          break;
  986|      0|        }
  987|       |
  988|      0|        aux_data->error_code = error_code;
  989|      0|        aux_data->canceled = 1;
  990|       |
  991|      0|        return 0;
  992|      0|      }
  993|      0|    }
  994|      0|  }
  995|       |
  996|    587|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
  997|    587|  if (item == NULL) {
  998|      0|    return NGHTTP2_ERR_NOMEM;
  999|      0|  }
 1000|       |
 1001|    587|  nghttp2_outbound_item_init(item);
 1002|       |
 1003|    587|  frame = &item->frame;
 1004|       |
 1005|    587|  nghttp2_frame_rst_stream_init(&frame->rst_stream, stream_id, error_code);
 1006|    587|  rv = nghttp2_session_add_item(session, item);
 1007|    587|  if (rv != 0) {
 1008|      0|    nghttp2_frame_rst_stream_free(&frame->rst_stream);
 1009|      0|    nghttp2_mem_free(mem, item);
 1010|      0|    return rv;
 1011|      0|  }
 1012|    587|  return 0;
 1013|    587|}
nghttp2_session_open_stream:
 1019|    678|                                            void *stream_user_data) {
 1020|    678|  int rv;
 1021|    678|  nghttp2_stream *stream;
 1022|    678|  nghttp2_stream *dep_stream = NULL;
 1023|    678|  int stream_alloc = 0;
 1024|    678|  nghttp2_priority_spec pri_spec_default;
 1025|    678|  nghttp2_priority_spec *pri_spec = pri_spec_in;
 1026|    678|  nghttp2_mem *mem;
 1027|       |
 1028|    678|  mem = &session->mem;
 1029|    678|  stream = nghttp2_session_get_stream_raw(session, stream_id);
 1030|       |
 1031|    678|  if (stream) {
 1032|      0|    assert(stream->state == NGHTTP2_STREAM_IDLE);
 1033|      0|    assert(nghttp2_stream_in_dep_tree(stream));
 1034|      0|    nghttp2_session_detach_idle_stream(session, stream);
 1035|      0|    rv = nghttp2_stream_dep_remove(stream);
 1036|      0|    if (rv != 0) {
 1037|      0|      return NULL;
 1038|      0|    }
 1039|    678|  } else {
 1040|    678|    stream = nghttp2_mem_malloc(mem, sizeof(nghttp2_stream));
 1041|    678|    if (stream == NULL) {
 1042|      0|      return NULL;
 1043|      0|    }
 1044|       |
 1045|    678|    stream_alloc = 1;
 1046|    678|  }
 1047|       |
 1048|    678|  if (pri_spec->stream_id != 0) {
 1049|      0|    dep_stream = nghttp2_session_get_stream_raw(session, pri_spec->stream_id);
 1050|       |
 1051|      0|    if (!dep_stream &&
 1052|      0|        session_detect_idle_stream(session, pri_spec->stream_id)) {
 1053|       |      /* Depends on idle stream, which does not exist in memory.
 1054|       |         Assign default priority for it. */
 1055|      0|      nghttp2_priority_spec_default_init(&pri_spec_default);
 1056|       |
 1057|      0|      dep_stream = nghttp2_session_open_stream(
 1058|      0|          session, pri_spec->stream_id, NGHTTP2_FLAG_NONE, &pri_spec_default,
 1059|      0|          NGHTTP2_STREAM_IDLE, NULL);
 1060|       |
 1061|      0|      if (dep_stream == NULL) {
 1062|      0|        if (stream_alloc) {
 1063|      0|          nghttp2_mem_free(mem, stream);
 1064|      0|        }
 1065|       |
 1066|      0|        return NULL;
 1067|      0|      }
 1068|      0|    } else if (!dep_stream || !nghttp2_stream_in_dep_tree(dep_stream)) {
 1069|       |      /* If dep_stream is not part of dependency tree, stream will get
 1070|       |         default priority.  This handles the case when
 1071|       |         pri_spec->stream_id == stream_id.  This happens because we
 1072|       |         don't check pri_spec->stream_id against new stream ID in
 1073|       |         nghttp2_submit_request.  This also handles the case when idle
 1074|       |         stream created by PRIORITY frame was opened.  Somehow we
 1075|       |         first remove the idle stream from dependency tree.  This is
 1076|       |         done to simplify code base, but ideally we should retain old
 1077|       |         dependency.  But I'm not sure this adds values. */
 1078|      0|      nghttp2_priority_spec_default_init(&pri_spec_default);
 1079|      0|      pri_spec = &pri_spec_default;
 1080|      0|    }
 1081|      0|  }
 1082|       |
 1083|    678|  if (initial_state == NGHTTP2_STREAM_RESERVED) {
 1084|      0|    flags |= NGHTTP2_STREAM_FLAG_PUSH;
 1085|      0|  }
 1086|       |
 1087|    678|  if (stream_alloc) {
 1088|    678|    nghttp2_stream_init(stream, stream_id, flags, initial_state,
 1089|    678|                        pri_spec->weight,
 1090|    678|                        (int32_t)session->remote_settings.initial_window_size,
 1091|    678|                        (int32_t)session->local_settings.initial_window_size,
 1092|    678|                        stream_user_data, mem);
 1093|       |
 1094|    678|    rv = nghttp2_map_insert(&session->streams, &stream->map_entry);
 1095|    678|    if (rv != 0) {
 1096|      0|      nghttp2_stream_free(stream);
 1097|      0|      nghttp2_mem_free(mem, stream);
 1098|      0|      return NULL;
 1099|      0|    }
 1100|    678|  } else {
 1101|      0|    stream->flags = flags;
 1102|      0|    stream->state = initial_state;
 1103|      0|    stream->weight = pri_spec->weight;
 1104|      0|    stream->stream_user_data = stream_user_data;
 1105|      0|  }
 1106|       |
 1107|    678|  switch (initial_state) {
 1108|      0|  case NGHTTP2_STREAM_RESERVED:
 1109|      0|    if (nghttp2_session_is_my_stream_id(session, stream_id)) {
 1110|       |      /* reserved (local) */
 1111|      0|      nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 1112|      0|    } else {
 1113|       |      /* reserved (remote) */
 1114|      0|      nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_WR);
 1115|      0|      ++session->num_incoming_reserved_streams;
 1116|      0|    }
 1117|       |    /* Reserved stream does not count in the concurrent streams
 1118|       |       limit. That is one of the DOS vector. */
 1119|      0|    break;
 1120|      0|  case NGHTTP2_STREAM_IDLE:
 1121|       |    /* Idle stream does not count toward the concurrent streams limit.
 1122|       |       This is used as anchor node in dependency tree. */
 1123|      0|    nghttp2_session_keep_idle_stream(session, stream);
 1124|      0|    break;
 1125|    678|  default:
 1126|    678|    if (nghttp2_session_is_my_stream_id(session, stream_id)) {
 1127|    678|      ++session->num_outgoing_streams;
 1128|    678|    } else {
 1129|      0|      ++session->num_incoming_streams;
 1130|      0|    }
 1131|    678|  }
 1132|       |
 1133|    678|  if (pri_spec->stream_id == 0) {
 1134|    678|    dep_stream = &session->root;
 1135|    678|  }
 1136|       |
 1137|    678|  assert(dep_stream);
 1138|       |
 1139|    678|  if (pri_spec->exclusive) {
 1140|      0|    rv = nghttp2_stream_dep_insert(dep_stream, stream);
 1141|      0|    if (rv != 0) {
 1142|      0|      return NULL;
 1143|      0|    }
 1144|    678|  } else {
 1145|    678|    nghttp2_stream_dep_add(dep_stream, stream);
 1146|    678|  }
 1147|       |
 1148|    678|  return stream;
 1149|    678|}
nghttp2_session_close_stream:
 1152|    463|                                 uint32_t error_code) {
 1153|    463|  int rv;
 1154|    463|  nghttp2_stream *stream;
 1155|    463|  nghttp2_mem *mem;
 1156|    463|  int is_my_stream_id;
 1157|       |
 1158|    463|  mem = &session->mem;
 1159|    463|  stream = nghttp2_session_get_stream(session, stream_id);
 1160|       |
 1161|    463|  if (!stream) {
 1162|      6|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 1163|      6|  }
 1164|       |
 1165|    457|  DEBUGF("stream: stream(%p)=%d close\n", stream, stream->stream_id);
 1166|       |
 1167|    457|  if (stream->item) {
 1168|     16|    nghttp2_outbound_item *item;
 1169|       |
 1170|     16|    item = stream->item;
 1171|       |
 1172|     16|    rv = nghttp2_stream_detach_item(stream);
 1173|       |
 1174|     16|    if (rv != 0) {
 1175|      0|      return rv;
 1176|      0|    }
 1177|       |
 1178|       |    /* If item is queued, it will be deleted when it is popped
 1179|       |       (nghttp2_session_prep_frame() will fail).  If session->aob.item
 1180|       |       points to this item, let active_outbound_item_reset()
 1181|       |       free the item. */
 1182|     16|    if (!item->queued && item != session->aob.item) {
 1183|     16|      nghttp2_outbound_item_free(item, mem);
 1184|     16|      nghttp2_mem_free(mem, item);
 1185|     16|    }
 1186|     16|  }
 1187|       |
 1188|       |  /* We call on_stream_close_callback even if stream->state is
 1189|       |     NGHTTP2_STREAM_INITIAL. This will happen while sending request
 1190|       |     HEADERS, a local endpoint receives RST_STREAM for that stream. It
 1191|       |     may be PROTOCOL_ERROR, but without notifying stream closure will
 1192|       |     hang the stream in a local endpoint.
 1193|       |  */
 1194|       |
 1195|    457|  if (session->callbacks.on_stream_close_callback) {
 1196|    457|    if (session->callbacks.on_stream_close_callback(
 1197|    457|            session, stream_id, error_code, session->user_data) != 0) {
 1198|       |
 1199|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1200|      0|    }
 1201|    457|  }
 1202|       |
 1203|    457|  is_my_stream_id = nghttp2_session_is_my_stream_id(session, stream_id);
 1204|       |
 1205|       |  /* pushed streams which is not opened yet is not counted toward max
 1206|       |     concurrent limits */
 1207|    457|  if ((stream->flags & NGHTTP2_STREAM_FLAG_PUSH)) {
 1208|      0|    if (!is_my_stream_id) {
 1209|      0|      --session->num_incoming_reserved_streams;
 1210|      0|    }
 1211|    457|  } else {
 1212|    457|    if (is_my_stream_id) {
 1213|    457|      --session->num_outgoing_streams;
 1214|    457|    } else {
 1215|      0|      --session->num_incoming_streams;
 1216|      0|    }
 1217|    457|  }
 1218|       |
 1219|       |  /* Closes both directions just in case they are not closed yet */
 1220|    457|  stream->flags |= NGHTTP2_STREAM_FLAG_CLOSED;
 1221|       |
 1222|    457|  if ((session->opt_flags & NGHTTP2_OPTMASK_NO_CLOSED_STREAMS) == 0 &&
 1223|    457|      session->server && !is_my_stream_id &&
 1224|    457|      nghttp2_stream_in_dep_tree(stream)) {
 1225|       |    /* On server side, retain stream at most MAX_CONCURRENT_STREAMS
 1226|       |       combined with the current active incoming streams to make
 1227|       |       dependency tree work better. */
 1228|      0|    nghttp2_session_keep_closed_stream(session, stream);
 1229|    457|  } else {
 1230|    457|    rv = nghttp2_session_destroy_stream(session, stream);
 1231|    457|    if (rv != 0) {
 1232|      0|      return rv;
 1233|      0|    }
 1234|    457|  }
 1235|       |
 1236|    457|  return 0;
 1237|    457|}
nghttp2_session_destroy_stream:
 1240|    457|                                   nghttp2_stream *stream) {
 1241|    457|  nghttp2_mem *mem;
 1242|    457|  int rv;
 1243|       |
 1244|    457|  DEBUGF("stream: destroy closed stream(%p)=%d\n", stream, stream->stream_id);
 1245|       |
 1246|    457|  mem = &session->mem;
 1247|       |
 1248|    457|  if (nghttp2_stream_in_dep_tree(stream)) {
 1249|    457|    rv = nghttp2_stream_dep_remove(stream);
 1250|    457|    if (rv != 0) {
 1251|      0|      return rv;
 1252|      0|    }
 1253|    457|  }
 1254|       |
 1255|    457|  nghttp2_map_remove(&session->streams, stream->stream_id);
 1256|    457|  nghttp2_stream_free(stream);
 1257|    457|  nghttp2_mem_free(mem, stream);
 1258|       |
 1259|    457|  return 0;
 1260|    457|}
nghttp2_session_adjust_idle_stream:
 1371|  7.14k|int nghttp2_session_adjust_idle_stream(nghttp2_session *session) {
 1372|  7.14k|  size_t max;
 1373|  7.14k|  int rv;
 1374|       |
 1375|       |  /* Make minimum number of idle streams 16, and maximum 100, which
 1376|       |     are arbitrary chosen numbers. */
 1377|  7.14k|  max = nghttp2_min(
 1378|  7.14k|      100, nghttp2_max(
 1379|  7.14k|               16, nghttp2_min(session->local_settings.max_concurrent_streams,
 1380|  7.14k|                               session->pending_local_max_concurrent_stream)));
 1381|       |
 1382|  7.14k|  DEBUGF("stream: adjusting kept idle streams num_idle_streams=%zu, max=%zu\n",
 1383|  7.14k|         session->num_idle_streams, max);
 1384|       |
 1385|  7.14k|  while (session->num_idle_streams > max) {
 1386|      0|    nghttp2_stream *head;
 1387|      0|    nghttp2_stream *next;
 1388|       |
 1389|      0|    head = session->idle_stream_head;
 1390|      0|    assert(head);
 1391|       |
 1392|      0|    next = head->closed_next;
 1393|       |
 1394|      0|    rv = nghttp2_session_destroy_stream(session, head);
 1395|      0|    if (rv != 0) {
 1396|      0|      return rv;
 1397|      0|    }
 1398|       |
 1399|       |    /* head is now destroyed */
 1400|       |
 1401|      0|    session->idle_stream_head = next;
 1402|       |
 1403|      0|    if (session->idle_stream_head) {
 1404|      0|      session->idle_stream_head->closed_prev = NULL;
 1405|      0|    } else {
 1406|      0|      session->idle_stream_tail = NULL;
 1407|      0|    }
 1408|       |
 1409|      0|    --session->num_idle_streams;
 1410|      0|  }
 1411|       |
 1412|  7.14k|  return 0;
 1413|  7.14k|}
nghttp2_session_close_stream_if_shut_rdwr:
 1429|    698|                                              nghttp2_stream *stream) {
 1430|    698|  if ((stream->shut_flags & NGHTTP2_SHUT_RDWR) == NGHTTP2_SHUT_RDWR) {
 1431|      8|    return nghttp2_session_close_stream(session, stream->stream_id,
 1432|      8|                                        NGHTTP2_NO_ERROR);
 1433|      8|  }
 1434|    690|  return 0;
 1435|    698|}
nghttp2_session_check_request_allowed:
 1481|  1.17k|int nghttp2_session_check_request_allowed(nghttp2_session *session) {
 1482|  1.17k|  return !session->server && session->next_stream_id <= INT32_MAX &&
 1483|  1.17k|         (session->goaway_flags & NGHTTP2_GOAWAY_RECV) == 0 &&
 1484|  1.17k|         !session_is_closing(session);
 1485|  1.17k|}
nghttp2_session_pop_next_ob_item:
 2353|  5.80k|nghttp2_session_pop_next_ob_item(nghttp2_session *session) {
 2354|  5.80k|  nghttp2_outbound_item *item;
 2355|       |
 2356|  5.80k|  item = nghttp2_outbound_queue_top(&session->ob_urgent);
 2357|  5.80k|  if (item) {
 2358|  1.26k|    nghttp2_outbound_queue_pop(&session->ob_urgent);
 2359|  1.26k|    item->queued = 0;
 2360|  1.26k|    return item;
 2361|  1.26k|  }
 2362|       |
 2363|  4.54k|  item = nghttp2_outbound_queue_top(&session->ob_reg);
 2364|  4.54k|  if (item) {
 2365|  1.52k|    nghttp2_outbound_queue_pop(&session->ob_reg);
 2366|  1.52k|    item->queued = 0;
 2367|  1.52k|    return item;
 2368|  1.52k|  }
 2369|       |
 2370|  3.02k|  if (!session_is_outgoing_concurrent_streams_max(session)) {
 2371|  2.98k|    item = nghttp2_outbound_queue_top(&session->ob_syn);
 2372|  2.98k|    if (item) {
 2373|    678|      nghttp2_outbound_queue_pop(&session->ob_syn);
 2374|    678|      item->queued = 0;
 2375|    678|      return item;
 2376|    678|    }
 2377|  2.98k|  }
 2378|       |
 2379|  2.34k|  if (session->remote_window_size > 0) {
 2380|  2.34k|    return nghttp2_stream_next_outbound_item(&session->root);
 2381|  2.34k|  }
 2382|       |
 2383|      0|  return NULL;
 2384|  2.34k|}
nghttp2_session_send:
 3234|  2.27k|int nghttp2_session_send(nghttp2_session *session) {
 3235|  2.27k|  const uint8_t *data = NULL;
 3236|  2.27k|  ssize_t datalen;
 3237|  2.27k|  ssize_t sentlen;
 3238|  2.27k|  nghttp2_bufs *framebufs;
 3239|       |
 3240|  2.27k|  framebufs = &session->aob.framebufs;
 3241|       |
 3242|  5.96k|  for (;;) {
 3243|  5.96k|    datalen = nghttp2_session_mem_send_internal(session, &data, 0);
 3244|  5.96k|    if (datalen <= 0) {
 3245|  2.27k|      return (int)datalen;
 3246|  2.27k|    }
 3247|  3.69k|    sentlen = session->callbacks.send_callback(session, data, (size_t)datalen,
 3248|  3.69k|                                               0, session->user_data);
 3249|  3.69k|    if (sentlen < 0) {
 3250|      0|      if (sentlen == NGHTTP2_ERR_WOULDBLOCK) {
 3251|       |        /* Transmission canceled. Rewind the offset */
 3252|      0|        framebufs->cur->buf.pos -= datalen;
 3253|       |
 3254|      0|        return 0;
 3255|      0|      }
 3256|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3257|      0|    }
 3258|       |    /* Rewind the offset to the amount of unsent bytes */
 3259|  3.69k|    framebufs->cur->buf.pos -= datalen - sentlen;
 3260|  3.69k|  }
 3261|  2.27k|}
nghttp2_session_on_request_headers_received:
 3819|      9|                                                nghttp2_frame *frame) {
 3820|      9|  int rv = 0;
 3821|      9|  nghttp2_stream *stream;
 3822|      9|  if (frame->hd.stream_id == 0) {
 3823|      1|    return session_inflate_handle_invalid_connection(
 3824|      1|        session, frame, NGHTTP2_ERR_PROTO, "request HEADERS: stream_id == 0");
 3825|      1|  }
 3826|       |
 3827|       |  /* If client receives idle stream from server, it is invalid
 3828|       |     regardless stream ID is even or odd.  This is because client is
 3829|       |     not expected to receive request from server. */
 3830|      8|  if (!session->server) {
 3831|      8|    if (session_detect_idle_stream(session, frame->hd.stream_id)) {
 3832|      3|      return session_inflate_handle_invalid_connection(
 3833|      3|          session, frame, NGHTTP2_ERR_PROTO,
 3834|      3|          "request HEADERS: client received request");
 3835|      3|    }
 3836|       |
 3837|      5|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 3838|      8|  }
 3839|       |
 3840|      0|  assert(session->server);
 3841|       |
 3842|      0|  if (!session_is_new_peer_stream_id(session, frame->hd.stream_id)) {
 3843|      0|    if (frame->hd.stream_id == 0 ||
 3844|      0|        nghttp2_session_is_my_stream_id(session, frame->hd.stream_id)) {
 3845|      0|      return session_inflate_handle_invalid_connection(
 3846|      0|          session, frame, NGHTTP2_ERR_PROTO,
 3847|      0|          "request HEADERS: invalid stream_id");
 3848|      0|    }
 3849|       |
 3850|       |    /* RFC 7540 says if an endpoint receives a HEADERS with invalid
 3851|       |     * stream ID (e.g, numerically smaller than previous), it MUST
 3852|       |     * issue connection error with error code PROTOCOL_ERROR.  It is a
 3853|       |     * bit hard to detect this, since we cannot remember all streams
 3854|       |     * we observed so far.
 3855|       |     *
 3856|       |     * You might imagine this is really easy.  But no.  HTTP/2 is
 3857|       |     * asynchronous protocol, and usually client and server do not
 3858|       |     * share the complete picture of open/closed stream status.  For
 3859|       |     * example, after server sends RST_STREAM for a stream, client may
 3860|       |     * send trailer HEADERS for that stream.  If naive server detects
 3861|       |     * that, and issued connection error, then it is a bug of server
 3862|       |     * implementation since client is not wrong if it did not get
 3863|       |     * RST_STREAM when it issued trailer HEADERS.
 3864|       |     *
 3865|       |     * At the moment, we are very conservative here.  We only use
 3866|       |     * connection error if stream ID refers idle stream, or we are
 3867|       |     * sure that stream is half-closed(remote) or closed.  Otherwise
 3868|       |     * we just ignore HEADERS for now.
 3869|       |     */
 3870|      0|    stream = nghttp2_session_get_stream_raw(session, frame->hd.stream_id);
 3871|      0|    if (stream && (stream->shut_flags & NGHTTP2_SHUT_RD)) {
 3872|      0|      return session_inflate_handle_invalid_connection(
 3873|      0|          session, frame, NGHTTP2_ERR_STREAM_CLOSED, "HEADERS: stream closed");
 3874|      0|    }
 3875|       |
 3876|      0|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 3877|      0|  }
 3878|      0|  session->last_recv_stream_id = frame->hd.stream_id;
 3879|       |
 3880|      0|  if (session_is_incoming_concurrent_streams_max(session)) {
 3881|      0|    return session_inflate_handle_invalid_connection(
 3882|      0|        session, frame, NGHTTP2_ERR_PROTO,
 3883|      0|        "request HEADERS: max concurrent streams exceeded");
 3884|      0|  }
 3885|       |
 3886|      0|  if (!session_allow_incoming_new_stream(session)) {
 3887|       |    /* We just ignore stream after GOAWAY was sent */
 3888|      0|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 3889|      0|  }
 3890|       |
 3891|      0|  if (frame->headers.pri_spec.stream_id == frame->hd.stream_id) {
 3892|      0|    return session_inflate_handle_invalid_connection(
 3893|      0|        session, frame, NGHTTP2_ERR_PROTO, "request HEADERS: depend on itself");
 3894|      0|  }
 3895|       |
 3896|      0|  if (session_is_incoming_concurrent_streams_pending_max(session)) {
 3897|      0|    return session_inflate_handle_invalid_stream(session, frame,
 3898|      0|                                                 NGHTTP2_ERR_REFUSED_STREAM);
 3899|      0|  }
 3900|       |
 3901|      0|  stream = nghttp2_session_open_stream(
 3902|      0|      session, frame->hd.stream_id, NGHTTP2_STREAM_FLAG_NONE,
 3903|      0|      &frame->headers.pri_spec, NGHTTP2_STREAM_OPENING, NULL);
 3904|      0|  if (!stream) {
 3905|      0|    return NGHTTP2_ERR_NOMEM;
 3906|      0|  }
 3907|       |
 3908|      0|  rv = nghttp2_session_adjust_closed_stream(session);
 3909|      0|  if (nghttp2_is_fatal(rv)) {
 3910|      0|    return rv;
 3911|      0|  }
 3912|       |
 3913|      0|  session->last_proc_stream_id = session->last_recv_stream_id;
 3914|       |
 3915|      0|  rv = session_call_on_begin_headers(session, frame);
 3916|      0|  if (rv != 0) {
 3917|      0|    return rv;
 3918|      0|  }
 3919|      0|  return 0;
 3920|      0|}
nghttp2_session_on_response_headers_received:
 3924|    213|                                                 nghttp2_stream *stream) {
 3925|    213|  int rv;
 3926|       |  /* This function is only called if stream->state ==
 3927|       |     NGHTTP2_STREAM_OPENING and stream_id is local side initiated. */
 3928|    213|  assert(stream->state == NGHTTP2_STREAM_OPENING &&
 3929|    213|         nghttp2_session_is_my_stream_id(session, frame->hd.stream_id));
 3930|    213|  if (frame->hd.stream_id == 0) {
 3931|      0|    return session_inflate_handle_invalid_connection(
 3932|      0|        session, frame, NGHTTP2_ERR_PROTO, "response HEADERS: stream_id == 0");
 3933|      0|  }
 3934|    213|  if (stream->shut_flags & NGHTTP2_SHUT_RD) {
 3935|       |    /* half closed (remote): from the spec:
 3936|       |
 3937|       |       If an endpoint receives additional frames for a stream that is
 3938|       |       in this state it MUST respond with a stream error (Section
 3939|       |       5.4.2) of type STREAM_CLOSED.
 3940|       |
 3941|       |       We go further, and make it connection error.
 3942|       |    */
 3943|      0|    return session_inflate_handle_invalid_connection(
 3944|      0|        session, frame, NGHTTP2_ERR_STREAM_CLOSED, "HEADERS: stream closed");
 3945|      0|  }
 3946|    213|  stream->state = NGHTTP2_STREAM_OPENED;
 3947|    213|  rv = session_call_on_begin_headers(session, frame);
 3948|    213|  if (rv != 0) {
 3949|      0|    return rv;
 3950|      0|  }
 3951|    213|  return 0;
 3952|    213|}
nghttp2_session_on_headers_received:
 4001|     24|                                        nghttp2_stream *stream) {
 4002|     24|  int rv = 0;
 4003|     24|  if (frame->hd.stream_id == 0) {
 4004|      0|    return session_inflate_handle_invalid_connection(
 4005|      0|        session, frame, NGHTTP2_ERR_PROTO, "HEADERS: stream_id == 0");
 4006|      0|  }
 4007|     24|  if ((stream->shut_flags & NGHTTP2_SHUT_RD)) {
 4008|       |    /* half closed (remote): from the spec:
 4009|       |
 4010|       |       If an endpoint receives additional frames for a stream that is
 4011|       |       in this state it MUST respond with a stream error (Section
 4012|       |       5.4.2) of type STREAM_CLOSED.
 4013|       |
 4014|       |       we go further, and make it connection error.
 4015|       |    */
 4016|      2|    return session_inflate_handle_invalid_connection(
 4017|      2|        session, frame, NGHTTP2_ERR_STREAM_CLOSED, "HEADERS: stream closed");
 4018|      2|  }
 4019|     22|  if (nghttp2_session_is_my_stream_id(session, frame->hd.stream_id)) {
 4020|     22|    if (stream->state == NGHTTP2_STREAM_OPENED) {
 4021|     13|      rv = session_call_on_begin_headers(session, frame);
 4022|     13|      if (rv != 0) {
 4023|      0|        return rv;
 4024|      0|      }
 4025|     13|      return 0;
 4026|     13|    }
 4027|       |
 4028|      9|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 4029|     22|  }
 4030|       |  /* If this is remote peer initiated stream, it is OK unless it
 4031|       |     has sent END_STREAM frame already. But if stream is in
 4032|       |     NGHTTP2_STREAM_CLOSING, we discard the frame. This is a race
 4033|       |     condition. */
 4034|      0|  if (stream->state != NGHTTP2_STREAM_CLOSING) {
 4035|      0|    rv = session_call_on_begin_headers(session, frame);
 4036|      0|    if (rv != 0) {
 4037|      0|      return rv;
 4038|      0|    }
 4039|      0|    return 0;
 4040|      0|  }
 4041|      0|  return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 4042|      0|}
nghttp2_session_on_priority_received:
 4079|      3|                                         nghttp2_frame *frame) {
 4080|      3|  int rv;
 4081|      3|  nghttp2_stream *stream;
 4082|       |
 4083|      3|  if (frame->hd.stream_id == 0) {
 4084|      1|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4085|      1|                                             "PRIORITY: stream_id == 0");
 4086|      1|  }
 4087|       |
 4088|      2|  if (frame->priority.pri_spec.stream_id == frame->hd.stream_id) {
 4089|      1|    return nghttp2_session_terminate_session_with_reason(
 4090|      1|        session, NGHTTP2_PROTOCOL_ERROR, "depend on itself");
 4091|      1|  }
 4092|       |
 4093|      1|  if (!session->server) {
 4094|       |    /* Re-prioritization works only in server */
 4095|      1|    return session_call_on_frame_received(session, frame);
 4096|      1|  }
 4097|       |
 4098|      0|  stream = nghttp2_session_get_stream_raw(session, frame->hd.stream_id);
 4099|       |
 4100|      0|  if (!stream) {
 4101|       |    /* PRIORITY against idle stream can create anchor node in
 4102|       |       dependency tree. */
 4103|      0|    if (!session_detect_idle_stream(session, frame->hd.stream_id)) {
 4104|      0|      return 0;
 4105|      0|    }
 4106|       |
 4107|      0|    stream = nghttp2_session_open_stream(
 4108|      0|        session, frame->hd.stream_id, NGHTTP2_STREAM_FLAG_NONE,
 4109|      0|        &frame->priority.pri_spec, NGHTTP2_STREAM_IDLE, NULL);
 4110|       |
 4111|      0|    if (stream == NULL) {
 4112|      0|      return NGHTTP2_ERR_NOMEM;
 4113|      0|    }
 4114|       |
 4115|      0|    rv = nghttp2_session_adjust_idle_stream(session);
 4116|      0|    if (nghttp2_is_fatal(rv)) {
 4117|      0|      return rv;
 4118|      0|    }
 4119|      0|  } else {
 4120|      0|    rv = nghttp2_session_reprioritize_stream(session, stream,
 4121|      0|                                             &frame->priority.pri_spec);
 4122|       |
 4123|      0|    if (nghttp2_is_fatal(rv)) {
 4124|      0|      return rv;
 4125|      0|    }
 4126|       |
 4127|      0|    rv = nghttp2_session_adjust_idle_stream(session);
 4128|      0|    if (nghttp2_is_fatal(rv)) {
 4129|      0|      return rv;
 4130|      0|    }
 4131|      0|  }
 4132|       |
 4133|      0|  return session_call_on_frame_received(session, frame);
 4134|      0|}
nghttp2_session_on_rst_stream_received:
 4146|      6|                                           nghttp2_frame *frame) {
 4147|      6|  int rv;
 4148|      6|  nghttp2_stream *stream;
 4149|      6|  if (frame->hd.stream_id == 0) {
 4150|      1|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4151|      1|                                             "RST_STREAM: stream_id == 0");
 4152|      1|  }
 4153|       |
 4154|      5|  if (session_detect_idle_stream(session, frame->hd.stream_id)) {
 4155|      2|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4156|      2|                                             "RST_STREAM: stream in idle");
 4157|      2|  }
 4158|       |
 4159|      3|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 4160|      3|  if (stream) {
 4161|       |    /* We may use stream->shut_flags for strict error checking. */
 4162|      3|    nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 4163|      3|  }
 4164|       |
 4165|      3|  rv = session_call_on_frame_received(session, frame);
 4166|      3|  if (rv != 0) {
 4167|      0|    return rv;
 4168|      0|  }
 4169|      3|  rv = nghttp2_session_close_stream(session, frame->hd.stream_id,
 4170|      3|                                    frame->rst_stream.error_code);
 4171|      3|  if (nghttp2_is_fatal(rv)) {
 4172|      0|    return rv;
 4173|      0|  }
 4174|      3|  return 0;
 4175|      3|}
nghttp2_session_update_local_settings:
 4307|      2|                                          size_t niv) {
 4308|      2|  int rv;
 4309|      2|  size_t i;
 4310|      2|  int32_t new_initial_window_size = -1;
 4311|      2|  uint32_t header_table_size = 0;
 4312|      2|  uint32_t min_header_table_size = UINT32_MAX;
 4313|      2|  uint8_t header_table_size_seen = 0;
 4314|       |  /* For NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE, use the value last
 4315|       |     seen.  For NGHTTP2_SETTINGS_HEADER_TABLE_SIZE, use both minimum
 4316|       |     value and last seen value. */
 4317|      8|  for (i = 0; i < niv; ++i) {
 4318|      6|    switch (iv[i].settings_id) {
 4319|      0|    case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 4320|      0|      header_table_size_seen = 1;
 4321|      0|      header_table_size = iv[i].value;
 4322|      0|      min_header_table_size = nghttp2_min(min_header_table_size, iv[i].value);
 4323|      0|      break;
 4324|      2|    case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 4325|      2|      new_initial_window_size = (int32_t)iv[i].value;
 4326|      2|      break;
 4327|      6|    }
 4328|      6|  }
 4329|      2|  if (header_table_size_seen) {
 4330|      0|    if (min_header_table_size < header_table_size) {
 4331|      0|      rv = nghttp2_hd_inflate_change_table_size(&session->hd_inflater,
 4332|      0|                                                min_header_table_size);
 4333|      0|      if (rv != 0) {
 4334|      0|        return rv;
 4335|      0|      }
 4336|      0|    }
 4337|       |
 4338|      0|    rv = nghttp2_hd_inflate_change_table_size(&session->hd_inflater,
 4339|      0|                                              header_table_size);
 4340|      0|    if (rv != 0) {
 4341|      0|      return rv;
 4342|      0|    }
 4343|      0|  }
 4344|      2|  if (new_initial_window_size != -1) {
 4345|      2|    rv = session_update_local_initial_window_size(
 4346|      2|        session, new_initial_window_size,
 4347|      2|        (int32_t)session->local_settings.initial_window_size);
 4348|      2|    if (rv != 0) {
 4349|      0|      return rv;
 4350|      0|    }
 4351|      2|  }
 4352|       |
 4353|      8|  for (i = 0; i < niv; ++i) {
 4354|      6|    switch (iv[i].settings_id) {
 4355|      0|    case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 4356|      0|      session->local_settings.header_table_size = iv[i].value;
 4357|      0|      break;
 4358|      2|    case NGHTTP2_SETTINGS_ENABLE_PUSH:
 4359|      2|      session->local_settings.enable_push = iv[i].value;
 4360|      2|      break;
 4361|      2|    case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:
 4362|      2|      session->local_settings.max_concurrent_streams = iv[i].value;
 4363|      2|      break;
 4364|      2|    case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 4365|      2|      session->local_settings.initial_window_size = iv[i].value;
 4366|      2|      break;
 4367|      0|    case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:
 4368|      0|      session->local_settings.max_frame_size = iv[i].value;
 4369|      0|      break;
 4370|      0|    case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:
 4371|      0|      session->local_settings.max_header_list_size = iv[i].value;
 4372|      0|      break;
 4373|      0|    case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:
 4374|      0|      session->local_settings.enable_connect_protocol = iv[i].value;
 4375|      0|      break;
 4376|      6|    }
 4377|      6|  }
 4378|       |
 4379|      2|  return 0;
 4380|      2|}
nghttp2_session_on_settings_received:
 4383|    578|                                         nghttp2_frame *frame, int noack) {
 4384|    578|  int rv;
 4385|    578|  size_t i;
 4386|    578|  nghttp2_mem *mem;
 4387|    578|  nghttp2_inflight_settings *settings;
 4388|       |
 4389|    578|  mem = &session->mem;
 4390|       |
 4391|    578|  if (frame->hd.stream_id != 0) {
 4392|      4|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4393|      4|                                             "SETTINGS: stream_id != 0");
 4394|      4|  }
 4395|    574|  if (frame->hd.flags & NGHTTP2_FLAG_ACK) {
 4396|      3|    if (frame->settings.niv != 0) {
 4397|      0|      return session_handle_invalid_connection(
 4398|      0|          session, frame, NGHTTP2_ERR_FRAME_SIZE_ERROR,
 4399|      0|          "SETTINGS: ACK and payload != 0");
 4400|      0|    }
 4401|       |
 4402|      3|    settings = session->inflight_settings_head;
 4403|       |
 4404|      3|    if (!settings) {
 4405|      1|      return session_handle_invalid_connection(
 4406|      1|          session, frame, NGHTTP2_ERR_PROTO, "SETTINGS: unexpected ACK");
 4407|      1|    }
 4408|       |
 4409|      2|    rv = nghttp2_session_update_local_settings(session, settings->iv,
 4410|      2|                                               settings->niv);
 4411|       |
 4412|      2|    session->inflight_settings_head = settings->next;
 4413|       |
 4414|      2|    inflight_settings_del(settings, mem);
 4415|       |
 4416|      2|    if (rv != 0) {
 4417|      0|      if (nghttp2_is_fatal(rv)) {
 4418|      0|        return rv;
 4419|      0|      }
 4420|      0|      return session_handle_invalid_connection(session, frame, rv, NULL);
 4421|      0|    }
 4422|      2|    return session_call_on_frame_received(session, frame);
 4423|      2|  }
 4424|       |
 4425|    571|  if (!session->remote_settings_received) {
 4426|    345|    session->remote_settings.max_concurrent_streams =
 4427|    345|        NGHTTP2_DEFAULT_MAX_CONCURRENT_STREAMS;
 4428|    345|    session->remote_settings_received = 1;
 4429|    345|  }
 4430|       |
 4431|  2.89k|  for (i = 0; i < frame->settings.niv; ++i) {
 4432|  2.33k|    nghttp2_settings_entry *entry = &frame->settings.iv[i];
 4433|       |
 4434|  2.33k|    switch (entry->settings_id) {
 4435|    522|    case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 4436|       |
 4437|    522|      rv = nghttp2_hd_deflate_change_table_size(&session->hd_deflater,
 4438|    522|                                                entry->value);
 4439|    522|      if (rv != 0) {
 4440|      0|        if (nghttp2_is_fatal(rv)) {
 4441|      0|          return rv;
 4442|      0|        } else {
 4443|      0|          return session_handle_invalid_connection(
 4444|      0|              session, frame, NGHTTP2_ERR_HEADER_COMP, NULL);
 4445|      0|        }
 4446|      0|      }
 4447|       |
 4448|    522|      session->remote_settings.header_table_size = entry->value;
 4449|       |
 4450|    522|      break;
 4451|      6|    case NGHTTP2_SETTINGS_ENABLE_PUSH:
 4452|       |
 4453|      6|      if (entry->value != 0 && entry->value != 1) {
 4454|      4|        return session_handle_invalid_connection(
 4455|      4|            session, frame, NGHTTP2_ERR_PROTO,
 4456|      4|            "SETTINGS: invalid SETTINGS_ENBLE_PUSH");
 4457|      4|      }
 4458|       |
 4459|      2|      if (!session->server && entry->value != 0) {
 4460|      1|        return session_handle_invalid_connection(
 4461|      1|            session, frame, NGHTTP2_ERR_PROTO,
 4462|      1|            "SETTINGS: server attempted to enable push");
 4463|      1|      }
 4464|       |
 4465|      1|      session->remote_settings.enable_push = entry->value;
 4466|       |
 4467|      1|      break;
 4468|    502|    case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:
 4469|       |
 4470|    502|      session->remote_settings.max_concurrent_streams = entry->value;
 4471|       |
 4472|    502|      break;
 4473|    428|    case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 4474|       |
 4475|       |      /* Update the initial window size of the all active streams */
 4476|       |      /* Check that initial_window_size < (1u << 31) */
 4477|    428|      if (entry->value > NGHTTP2_MAX_WINDOW_SIZE) {
 4478|      1|        return session_handle_invalid_connection(
 4479|      1|            session, frame, NGHTTP2_ERR_FLOW_CONTROL,
 4480|      1|            "SETTINGS: too large SETTINGS_INITIAL_WINDOW_SIZE");
 4481|      1|      }
 4482|       |
 4483|    427|      rv = session_update_remote_initial_window_size(session,
 4484|    427|                                                     (int32_t)entry->value);
 4485|       |
 4486|    427|      if (nghttp2_is_fatal(rv)) {
 4487|      0|        return rv;
 4488|      0|      }
 4489|       |
 4490|    427|      if (rv != 0) {
 4491|      0|        return session_handle_invalid_connection(
 4492|      0|            session, frame, NGHTTP2_ERR_FLOW_CONTROL, NULL);
 4493|      0|      }
 4494|       |
 4495|    427|      session->remote_settings.initial_window_size = entry->value;
 4496|       |
 4497|    427|      break;
 4498|     13|    case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:
 4499|       |
 4500|     13|      if (entry->value < NGHTTP2_MAX_FRAME_SIZE_MIN ||
 4501|     13|          entry->value > NGHTTP2_MAX_FRAME_SIZE_MAX) {
 4502|      2|        return session_handle_invalid_connection(
 4503|      2|            session, frame, NGHTTP2_ERR_PROTO,
 4504|      2|            "SETTINGS: invalid SETTINGS_MAX_FRAME_SIZE");
 4505|      2|      }
 4506|       |
 4507|     11|      session->remote_settings.max_frame_size = entry->value;
 4508|       |
 4509|     11|      break;
 4510|     10|    case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:
 4511|       |
 4512|     10|      session->remote_settings.max_header_list_size = entry->value;
 4513|       |
 4514|     10|      break;
 4515|    451|    case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:
 4516|       |
 4517|    451|      if (entry->value != 0 && entry->value != 1) {
 4518|      3|        return session_handle_invalid_connection(
 4519|      3|            session, frame, NGHTTP2_ERR_PROTO,
 4520|      3|            "SETTINGS: invalid SETTINGS_ENABLE_CONNECT_PROTOCOL");
 4521|      3|      }
 4522|       |
 4523|    448|      if (!session->server &&
 4524|    448|          session->remote_settings.enable_connect_protocol &&
 4525|    448|          entry->value == 0) {
 4526|      2|        return session_handle_invalid_connection(
 4527|      2|            session, frame, NGHTTP2_ERR_PROTO,
 4528|      2|            "SETTINGS: server attempted to disable "
 4529|      2|            "SETTINGS_ENABLE_CONNECT_PROTOCOL");
 4530|      2|      }
 4531|       |
 4532|    446|      session->remote_settings.enable_connect_protocol = entry->value;
 4533|       |
 4534|    446|      break;
 4535|  2.33k|    }
 4536|  2.33k|  }
 4537|       |
 4538|    558|  if (!noack && !session_is_closing(session)) {
 4539|    558|    rv = nghttp2_session_add_settings(session, NGHTTP2_FLAG_ACK, NULL, 0);
 4540|       |
 4541|    558|    if (rv != 0) {
 4542|      0|      if (nghttp2_is_fatal(rv)) {
 4543|      0|        return rv;
 4544|      0|      }
 4545|       |
 4546|      0|      return session_handle_invalid_connection(session, frame,
 4547|      0|                                               NGHTTP2_ERR_INTERNAL, NULL);
 4548|      0|    }
 4549|    558|  }
 4550|       |
 4551|    558|  return session_call_on_frame_received(session, frame);
 4552|    558|}
nghttp2_session_on_push_promise_received:
 4592|     21|                                             nghttp2_frame *frame) {
 4593|     21|  int rv;
 4594|     21|  nghttp2_stream *stream;
 4595|     21|  nghttp2_stream *promised_stream;
 4596|     21|  nghttp2_priority_spec pri_spec;
 4597|       |
 4598|     21|  if (frame->hd.stream_id == 0) {
 4599|      1|    return session_inflate_handle_invalid_connection(
 4600|      1|        session, frame, NGHTTP2_ERR_PROTO, "PUSH_PROMISE: stream_id == 0");
 4601|      1|  }
 4602|     20|  if (session->server || session->local_settings.enable_push == 0) {
 4603|      0|    return session_inflate_handle_invalid_connection(
 4604|      0|        session, frame, NGHTTP2_ERR_PROTO, "PUSH_PROMISE: push disabled");
 4605|      0|  }
 4606|       |
 4607|     20|  if (!nghttp2_session_is_my_stream_id(session, frame->hd.stream_id)) {
 4608|      1|    return session_inflate_handle_invalid_connection(
 4609|      1|        session, frame, NGHTTP2_ERR_PROTO, "PUSH_PROMISE: invalid stream_id");
 4610|      1|  }
 4611|       |
 4612|     19|  if (!session_allow_incoming_new_stream(session)) {
 4613|       |    /* We just discard PUSH_PROMISE after GOAWAY was sent */
 4614|      0|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 4615|      0|  }
 4616|       |
 4617|     19|  if (!session_is_new_peer_stream_id(session,
 4618|     19|                                     frame->push_promise.promised_stream_id)) {
 4619|       |    /* The spec says if an endpoint receives a PUSH_PROMISE with
 4620|       |       illegal stream ID is subject to a connection error of type
 4621|       |       PROTOCOL_ERROR. */
 4622|      2|    return session_inflate_handle_invalid_connection(
 4623|      2|        session, frame, NGHTTP2_ERR_PROTO,
 4624|      2|        "PUSH_PROMISE: invalid promised_stream_id");
 4625|      2|  }
 4626|       |
 4627|     17|  if (session_detect_idle_stream(session, frame->hd.stream_id)) {
 4628|      1|    return session_inflate_handle_invalid_connection(
 4629|      1|        session, frame, NGHTTP2_ERR_PROTO, "PUSH_PROMISE: stream in idle");
 4630|      1|  }
 4631|       |
 4632|     16|  session->last_recv_stream_id = frame->push_promise.promised_stream_id;
 4633|     16|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 4634|     16|  if (!stream || stream->state == NGHTTP2_STREAM_CLOSING ||
 4635|     16|      !session->pending_enable_push ||
 4636|     16|      session->num_incoming_reserved_streams >=
 4637|     16|          session->max_incoming_reserved_streams) {
 4638|       |    /* Currently, client does not retain closed stream, so we don't
 4639|       |       check NGHTTP2_SHUT_RD condition here. */
 4640|       |
 4641|     16|    rv = nghttp2_session_add_rst_stream(
 4642|     16|        session, frame->push_promise.promised_stream_id, NGHTTP2_CANCEL);
 4643|     16|    if (rv != 0) {
 4644|      0|      return rv;
 4645|      0|    }
 4646|     16|    return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 4647|     16|  }
 4648|       |
 4649|      0|  if (stream->shut_flags & NGHTTP2_SHUT_RD) {
 4650|      0|    return session_inflate_handle_invalid_connection(
 4651|      0|        session, frame, NGHTTP2_ERR_STREAM_CLOSED,
 4652|      0|        "PUSH_PROMISE: stream closed");
 4653|      0|  }
 4654|       |
 4655|      0|  nghttp2_priority_spec_init(&pri_spec, stream->stream_id,
 4656|      0|                             NGHTTP2_DEFAULT_WEIGHT, 0);
 4657|       |
 4658|      0|  promised_stream = nghttp2_session_open_stream(
 4659|      0|      session, frame->push_promise.promised_stream_id, NGHTTP2_STREAM_FLAG_NONE,
 4660|      0|      &pri_spec, NGHTTP2_STREAM_RESERVED, NULL);
 4661|       |
 4662|      0|  if (!promised_stream) {
 4663|      0|    return NGHTTP2_ERR_NOMEM;
 4664|      0|  }
 4665|       |
 4666|       |  /* We don't call nghttp2_session_adjust_closed_stream(), since we
 4667|       |     don't keep closed stream in client side */
 4668|       |
 4669|      0|  session->last_proc_stream_id = session->last_recv_stream_id;
 4670|      0|  rv = session_call_on_begin_headers(session, frame);
 4671|      0|  if (rv != 0) {
 4672|      0|    return rv;
 4673|      0|  }
 4674|      0|  return 0;
 4675|      0|}
nghttp2_session_on_goaway_received:
 4723|     25|                                       nghttp2_frame *frame) {
 4724|     25|  int rv;
 4725|       |
 4726|     25|  if (frame->hd.stream_id != 0) {
 4727|      1|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4728|      1|                                             "GOAWAY: stream_id != 0");
 4729|      1|  }
 4730|       |  /* Spec says Endpoints MUST NOT increase the value they send in the
 4731|       |     last stream identifier. */
 4732|     24|  if ((frame->goaway.last_stream_id > 0 &&
 4733|     24|       !nghttp2_session_is_my_stream_id(session,
 4734|      6|                                        frame->goaway.last_stream_id)) ||
 4735|     24|      session->remote_last_stream_id < frame->goaway.last_stream_id) {
 4736|      2|    return session_handle_invalid_connection(session, frame, NGHTTP2_ERR_PROTO,
 4737|      2|                                             "GOAWAY: invalid last_stream_id");
 4738|      2|  }
 4739|       |
 4740|     22|  session->goaway_flags |= NGHTTP2_GOAWAY_RECV;
 4741|       |
 4742|     22|  session->remote_last_stream_id = frame->goaway.last_stream_id;
 4743|       |
 4744|     22|  rv = session_call_on_frame_received(session, frame);
 4745|       |
 4746|     22|  if (nghttp2_is_fatal(rv)) {
 4747|      0|    return rv;
 4748|      0|  }
 4749|       |
 4750|     22|  return session_close_stream_on_goaway(session, frame->goaway.last_stream_id,
 4751|     22|                                        0);
 4752|     22|}
nghttp2_session_on_data_received:
 4945|      5|                                     nghttp2_frame *frame) {
 4946|      5|  int rv = 0;
 4947|      5|  nghttp2_stream *stream;
 4948|       |
 4949|       |  /* We don't call on_frame_recv_callback if stream has been closed
 4950|       |     already or being closed. */
 4951|      5|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 4952|      5|  if (!stream || stream->state == NGHTTP2_STREAM_CLOSING) {
 4953|       |    /* This should be treated as stream error, but it results in lots
 4954|       |       of RST_STREAM. So just ignore frame against nonexistent stream
 4955|       |       for now. */
 4956|      0|    return 0;
 4957|      0|  }
 4958|       |
 4959|      5|  if (session_enforce_http_messaging(session) &&
 4960|      5|      (frame->hd.flags & NGHTTP2_FLAG_END_STREAM)) {
 4961|      4|    if (nghttp2_http_on_remote_end_stream(stream) != 0) {
 4962|      1|      rv = nghttp2_session_add_rst_stream(session, stream->stream_id,
 4963|      1|                                          NGHTTP2_PROTOCOL_ERROR);
 4964|      1|      if (nghttp2_is_fatal(rv)) {
 4965|      0|        return rv;
 4966|      0|      }
 4967|       |
 4968|      1|      nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 4969|       |      /* Don't call nghttp2_session_close_stream_if_shut_rdwr because
 4970|       |         RST_STREAM has been submitted. */
 4971|      1|      return 0;
 4972|      1|    }
 4973|      4|  }
 4974|       |
 4975|      4|  rv = session_call_on_frame_received(session, frame);
 4976|      4|  if (nghttp2_is_fatal(rv)) {
 4977|      0|    return rv;
 4978|      0|  }
 4979|       |
 4980|      4|  if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
 4981|      3|    nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 4982|      3|    rv = nghttp2_session_close_stream_if_shut_rdwr(session, stream);
 4983|      3|    if (nghttp2_is_fatal(rv)) {
 4984|      0|      return rv;
 4985|      0|    }
 4986|      3|  }
 4987|      4|  return 0;
 4988|      4|}
nghttp2_session_update_recv_stream_window_size:
 5024|     25|                                                   int send_window_update) {
 5025|     25|  int rv;
 5026|     25|  rv = adjust_recv_window_size(&stream->recv_window_size, delta_size,
 5027|     25|                               stream->local_window_size);
 5028|     25|  if (rv != 0) {
 5029|      0|    return nghttp2_session_add_rst_stream(session, stream->stream_id,
 5030|      0|                                          NGHTTP2_FLOW_CONTROL_ERROR);
 5031|      0|  }
 5032|       |  /* We don't have to send WINDOW_UPDATE if the data received is the
 5033|       |     last chunk in the incoming stream. */
 5034|       |  /* We have to use local_settings here because it is the constraint
 5035|       |     the remote endpoint should honor. */
 5036|     25|  if (send_window_update &&
 5037|     25|      !(session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) &&
 5038|     25|      stream->window_update_queued == 0 &&
 5039|     25|      nghttp2_should_send_window_update(stream->local_window_size,
 5040|     20|                                        stream->recv_window_size)) {
 5041|      0|    rv = nghttp2_session_add_window_update(session, NGHTTP2_FLAG_NONE,
 5042|      0|                                           stream->stream_id,
 5043|      0|                                           stream->recv_window_size);
 5044|      0|    if (rv != 0) {
 5045|      0|      return rv;
 5046|      0|    }
 5047|       |
 5048|      0|    stream->recv_window_size = 0;
 5049|      0|  }
 5050|     25|  return 0;
 5051|     25|}
nghttp2_session_update_recv_connection_window_size:
 5054|    732|                                                       size_t delta_size) {
 5055|    732|  int rv;
 5056|    732|  rv = adjust_recv_window_size(&session->recv_window_size, delta_size,
 5057|    732|                               session->local_window_size);
 5058|    732|  if (rv != 0) {
 5059|      0|    return nghttp2_session_terminate_session(session,
 5060|      0|                                             NGHTTP2_FLOW_CONTROL_ERROR);
 5061|      0|  }
 5062|    732|  if (!(session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) &&
 5063|    732|      session->window_update_queued == 0 &&
 5064|    732|      nghttp2_should_send_window_update(session->local_window_size,
 5065|    732|                                        session->recv_window_size)) {
 5066|       |    /* Use stream ID 0 to update connection-level flow control
 5067|       |       window */
 5068|      0|    rv = nghttp2_session_add_window_update(session, NGHTTP2_FLAG_NONE, 0,
 5069|      0|                                           session->recv_window_size);
 5070|      0|    if (rv != 0) {
 5071|      0|      return rv;
 5072|      0|    }
 5073|       |
 5074|      0|    session->recv_window_size = 0;
 5075|      0|  }
 5076|    732|  return 0;
 5077|    732|}
nghttp2_session_mem_recv:
 5357|  1.17k|                                 size_t inlen) {
 5358|  1.17k|  const uint8_t *first = in, *last = in + inlen;
 5359|  1.17k|  nghttp2_inbound_frame *iframe = &session->iframe;
 5360|  1.17k|  size_t readlen;
 5361|  1.17k|  ssize_t padlen;
 5362|  1.17k|  int rv;
 5363|  1.17k|  int busy = 0;
 5364|  1.17k|  nghttp2_frame_hd cont_hd;
 5365|  1.17k|  nghttp2_stream *stream;
 5366|  1.17k|  size_t pri_fieldlen;
 5367|  1.17k|  nghttp2_mem *mem;
 5368|       |
 5369|  1.17k|  DEBUGF("recv: connection recv_window_size=%d, local_window=%d\n",
 5370|  1.17k|         session->recv_window_size, session->local_window_size);
 5371|       |
 5372|  1.17k|  mem = &session->mem;
 5373|       |
 5374|       |  /* We may have idle streams more than we expect (e.g.,
 5375|       |     nghttp2_session_change_stream_priority() or
 5376|       |     nghttp2_session_create_idle_stream()).  Adjust them here. */
 5377|  1.17k|  rv = nghttp2_session_adjust_idle_stream(session);
 5378|  1.17k|  if (nghttp2_is_fatal(rv)) {
 5379|      0|    return rv;
 5380|      0|  }
 5381|       |
 5382|  1.17k|  if (!nghttp2_session_want_read(session)) {
 5383|     15|    return (ssize_t)inlen;
 5384|     15|  }
 5385|       |
 5386|  5.07k|  for (;;) {
 5387|  5.07k|    switch (iframe->state) {
 5388|      0|    case NGHTTP2_IB_READ_CLIENT_MAGIC:
 5389|      0|      readlen = nghttp2_min(inlen, iframe->payloadleft);
 5390|       |
 5391|      0|      if (memcmp(&NGHTTP2_CLIENT_MAGIC[NGHTTP2_CLIENT_MAGIC_LEN -
 5392|      0|                                       iframe->payloadleft],
 5393|      0|                 in, readlen) != 0) {
 5394|      0|        return NGHTTP2_ERR_BAD_CLIENT_MAGIC;
 5395|      0|      }
 5396|       |
 5397|      0|      iframe->payloadleft -= readlen;
 5398|      0|      in += readlen;
 5399|       |
 5400|      0|      if (iframe->payloadleft == 0) {
 5401|      0|        session_inbound_frame_reset(session);
 5402|      0|        iframe->state = NGHTTP2_IB_READ_FIRST_SETTINGS;
 5403|      0|      }
 5404|       |
 5405|      0|      break;
 5406|  1.06k|    case NGHTTP2_IB_READ_FIRST_SETTINGS:
 5407|  1.06k|      DEBUGF("recv: [IB_READ_FIRST_SETTINGS]\n");
 5408|       |
 5409|  1.06k|      readlen = inbound_frame_buf_read(iframe, in, last);
 5410|  1.06k|      in += readlen;
 5411|       |
 5412|  1.06k|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 5413|    711|        return in - first;
 5414|    711|      }
 5415|       |
 5416|    353|      if (iframe->sbuf.pos[3] != NGHTTP2_SETTINGS ||
 5417|    353|          (iframe->sbuf.pos[4] & NGHTTP2_FLAG_ACK)) {
 5418|      4|        rv = session_call_error_callback(
 5419|      4|            session, NGHTTP2_ERR_SETTINGS_EXPECTED,
 5420|      4|            "Remote peer returned unexpected data while we expected "
 5421|      4|            "SETTINGS frame.  Perhaps, peer does not support HTTP/2 "
 5422|      4|            "properly.");
 5423|       |
 5424|      4|        if (nghttp2_is_fatal(rv)) {
 5425|      0|          return rv;
 5426|      0|        }
 5427|       |
 5428|      4|        rv = nghttp2_session_terminate_session_with_reason(
 5429|      4|            session, NGHTTP2_PROTOCOL_ERROR, "SETTINGS expected");
 5430|       |
 5431|      4|        if (nghttp2_is_fatal(rv)) {
 5432|      0|          return rv;
 5433|      0|        }
 5434|       |
 5435|      4|        return (ssize_t)inlen;
 5436|      4|      }
 5437|       |
 5438|    349|      iframe->state = NGHTTP2_IB_READ_HEAD;
 5439|       |
 5440|       |    /* Fall through */
 5441|  1.04k|    case NGHTTP2_IB_READ_HEAD: {
 5442|  1.04k|      int on_begin_frame_called = 0;
 5443|       |
 5444|  1.04k|      DEBUGF("recv: [IB_READ_HEAD]\n");
 5445|       |
 5446|  1.04k|      readlen = inbound_frame_buf_read(iframe, in, last);
 5447|  1.04k|      in += readlen;
 5448|       |
 5449|  1.04k|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 5450|      7|        return in - first;
 5451|      7|      }
 5452|       |
 5453|  1.03k|      nghttp2_frame_unpack_frame_hd(&iframe->frame.hd, iframe->sbuf.pos);
 5454|  1.03k|      iframe->payloadleft = iframe->frame.hd.length;
 5455|       |
 5456|  1.03k|      DEBUGF("recv: payloadlen=%zu, type=%u, flags=0x%02x, stream_id=%d\n",
 5457|  1.03k|             iframe->frame.hd.length, iframe->frame.hd.type,
 5458|  1.03k|             iframe->frame.hd.flags, iframe->frame.hd.stream_id);
 5459|       |
 5460|  1.03k|      if (iframe->frame.hd.length > session->local_settings.max_frame_size) {
 5461|     26|        DEBUGF("recv: length is too large %zu > %u\n", iframe->frame.hd.length,
 5462|     26|               session->local_settings.max_frame_size);
 5463|       |
 5464|     26|        rv = nghttp2_session_terminate_session_with_reason(
 5465|     26|            session, NGHTTP2_FRAME_SIZE_ERROR, "too large frame size");
 5466|       |
 5467|     26|        if (nghttp2_is_fatal(rv)) {
 5468|      0|          return rv;
 5469|      0|        }
 5470|       |
 5471|     26|        return (ssize_t)inlen;
 5472|     26|      }
 5473|       |
 5474|  1.01k|      switch (iframe->frame.hd.type) {
 5475|     30|      case NGHTTP2_DATA: {
 5476|     30|        DEBUGF("recv: DATA\n");
 5477|       |
 5478|     30|        iframe->frame.hd.flags &=
 5479|     30|            (NGHTTP2_FLAG_END_STREAM | NGHTTP2_FLAG_PADDED);
 5480|       |        /* Check stream is open. If it is not open or closing,
 5481|       |           ignore payload. */
 5482|     30|        busy = 1;
 5483|       |
 5484|     30|        rv = session_on_data_received_fail_fast(session);
 5485|     30|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 5486|     13|          return (ssize_t)inlen;
 5487|     13|        }
 5488|     17|        if (rv == NGHTTP2_ERR_IGN_PAYLOAD) {
 5489|      3|          DEBUGF("recv: DATA not allowed stream_id=%d\n",
 5490|      3|                 iframe->frame.hd.stream_id);
 5491|      3|          iframe->state = NGHTTP2_IB_IGN_DATA;
 5492|      3|          break;
 5493|      3|        }
 5494|       |
 5495|     14|        if (nghttp2_is_fatal(rv)) {
 5496|      0|          return rv;
 5497|      0|        }
 5498|       |
 5499|     14|        rv = inbound_frame_handle_pad(iframe, &iframe->frame.hd);
 5500|     14|        if (rv < 0) {
 5501|      1|          rv = nghttp2_session_terminate_session_with_reason(
 5502|      1|              session, NGHTTP2_PROTOCOL_ERROR,
 5503|      1|              "DATA: insufficient padding space");
 5504|       |
 5505|      1|          if (nghttp2_is_fatal(rv)) {
 5506|      0|            return rv;
 5507|      0|          }
 5508|      1|          return (ssize_t)inlen;
 5509|      1|        }
 5510|       |
 5511|     13|        if (rv == 1) {
 5512|     10|          iframe->state = NGHTTP2_IB_READ_PAD_DATA;
 5513|     10|          break;
 5514|     10|        }
 5515|       |
 5516|      3|        iframe->state = NGHTTP2_IB_READ_DATA;
 5517|      3|        break;
 5518|     13|      }
 5519|    251|      case NGHTTP2_HEADERS:
 5520|       |
 5521|    251|        DEBUGF("recv: HEADERS\n");
 5522|       |
 5523|    251|        iframe->frame.hd.flags &=
 5524|    251|            (NGHTTP2_FLAG_END_STREAM | NGHTTP2_FLAG_END_HEADERS |
 5525|    251|             NGHTTP2_FLAG_PADDED | NGHTTP2_FLAG_PRIORITY);
 5526|       |
 5527|    251|        rv = inbound_frame_handle_pad(iframe, &iframe->frame.hd);
 5528|    251|        if (rv < 0) {
 5529|      1|          rv = nghttp2_session_terminate_session_with_reason(
 5530|      1|              session, NGHTTP2_PROTOCOL_ERROR,
 5531|      1|              "HEADERS: insufficient padding space");
 5532|      1|          if (nghttp2_is_fatal(rv)) {
 5533|      0|            return rv;
 5534|      0|          }
 5535|      1|          return (ssize_t)inlen;
 5536|      1|        }
 5537|       |
 5538|    250|        if (rv == 1) {
 5539|     13|          iframe->state = NGHTTP2_IB_READ_NBYTE;
 5540|     13|          break;
 5541|     13|        }
 5542|       |
 5543|    237|        pri_fieldlen = nghttp2_frame_priority_len(iframe->frame.hd.flags);
 5544|       |
 5545|    237|        if (pri_fieldlen > 0) {
 5546|     31|          if (iframe->payloadleft < pri_fieldlen) {
 5547|      1|            busy = 1;
 5548|      1|            iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5549|      1|            break;
 5550|      1|          }
 5551|       |
 5552|     30|          iframe->state = NGHTTP2_IB_READ_NBYTE;
 5553|       |
 5554|     30|          inbound_frame_set_mark(iframe, pri_fieldlen);
 5555|       |
 5556|     30|          break;
 5557|     31|        }
 5558|       |
 5559|       |        /* Call on_begin_frame_callback here because
 5560|       |           session_process_headers_frame() may call
 5561|       |           on_begin_headers_callback */
 5562|    206|        rv = session_call_on_begin_frame(session, &iframe->frame.hd);
 5563|       |
 5564|    206|        if (nghttp2_is_fatal(rv)) {
 5565|      0|          return rv;
 5566|      0|        }
 5567|       |
 5568|    206|        on_begin_frame_called = 1;
 5569|       |
 5570|    206|        rv = session_process_headers_frame(session);
 5571|    206|        if (nghttp2_is_fatal(rv)) {
 5572|      0|          return rv;
 5573|      0|        }
 5574|       |
 5575|    206|        busy = 1;
 5576|       |
 5577|    206|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 5578|      5|          return (ssize_t)inlen;
 5579|      5|        }
 5580|       |
 5581|    201|        if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 5582|      0|          rv = nghttp2_session_add_rst_stream(
 5583|      0|              session, iframe->frame.hd.stream_id, NGHTTP2_INTERNAL_ERROR);
 5584|      0|          if (nghttp2_is_fatal(rv)) {
 5585|      0|            return rv;
 5586|      0|          }
 5587|      0|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 5588|      0|          break;
 5589|      0|        }
 5590|       |
 5591|    201|        if (rv == NGHTTP2_ERR_IGN_HEADER_BLOCK) {
 5592|     12|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 5593|     12|          break;
 5594|     12|        }
 5595|       |
 5596|    189|        iframe->state = NGHTTP2_IB_READ_HEADER_BLOCK;
 5597|       |
 5598|    189|        break;
 5599|      5|      case NGHTTP2_PRIORITY:
 5600|      5|        DEBUGF("recv: PRIORITY\n");
 5601|       |
 5602|      5|        iframe->frame.hd.flags = NGHTTP2_FLAG_NONE;
 5603|       |
 5604|      5|        if (iframe->payloadleft != NGHTTP2_PRIORITY_SPECLEN) {
 5605|      2|          busy = 1;
 5606|       |
 5607|      2|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5608|       |
 5609|      2|          break;
 5610|      2|        }
 5611|       |
 5612|      3|        iframe->state = NGHTTP2_IB_READ_NBYTE;
 5613|       |
 5614|      3|        inbound_frame_set_mark(iframe, NGHTTP2_PRIORITY_SPECLEN);
 5615|       |
 5616|      3|        break;
 5617|      7|      case NGHTTP2_RST_STREAM:
 5618|      8|      case NGHTTP2_WINDOW_UPDATE:
 5619|       |#ifdef DEBUGBUILD
 5620|       |        switch (iframe->frame.hd.type) {
 5621|       |        case NGHTTP2_RST_STREAM:
 5622|       |          DEBUGF("recv: RST_STREAM\n");
 5623|       |          break;
 5624|       |        case NGHTTP2_WINDOW_UPDATE:
 5625|       |          DEBUGF("recv: WINDOW_UPDATE\n");
 5626|       |          break;
 5627|       |        }
 5628|       |#endif /* DEBUGBUILD */
 5629|       |
 5630|      8|        iframe->frame.hd.flags = NGHTTP2_FLAG_NONE;
 5631|       |
 5632|      8|        if (iframe->payloadleft != 4) {
 5633|      2|          busy = 1;
 5634|      2|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5635|      2|          break;
 5636|      2|        }
 5637|       |
 5638|      6|        iframe->state = NGHTTP2_IB_READ_NBYTE;
 5639|       |
 5640|      6|        inbound_frame_set_mark(iframe, 4);
 5641|       |
 5642|      6|        break;
 5643|    585|      case NGHTTP2_SETTINGS:
 5644|    585|        DEBUGF("recv: SETTINGS\n");
 5645|       |
 5646|    585|        iframe->frame.hd.flags &= NGHTTP2_FLAG_ACK;
 5647|       |
 5648|    585|        if ((iframe->frame.hd.length % NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH) ||
 5649|    585|            ((iframe->frame.hd.flags & NGHTTP2_FLAG_ACK) &&
 5650|    584|             iframe->payloadleft > 0)) {
 5651|      2|          busy = 1;
 5652|      2|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5653|      2|          break;
 5654|      2|        }
 5655|       |
 5656|       |        /* Check the settings flood counter early to be safe */
 5657|    583|        if (session->obq_flood_counter_ >= session->max_outbound_ack &&
 5658|    583|            !(iframe->frame.hd.flags & NGHTTP2_FLAG_ACK)) {
 5659|      0|          return NGHTTP2_ERR_FLOODED;
 5660|      0|        }
 5661|       |
 5662|    583|        iframe->state = NGHTTP2_IB_READ_SETTINGS;
 5663|       |
 5664|    583|        if (iframe->payloadleft) {
 5665|    579|          nghttp2_settings_entry *min_header_table_size_entry;
 5666|       |
 5667|       |          /* We allocate iv with additional one entry, to store the
 5668|       |             minimum header table size. */
 5669|    579|          iframe->max_niv =
 5670|    579|              iframe->frame.hd.length / NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH + 1;
 5671|       |
 5672|    579|          if (iframe->max_niv - 1 > session->max_settings) {
 5673|      1|            rv = nghttp2_session_terminate_session_with_reason(
 5674|      1|                session, NGHTTP2_ENHANCE_YOUR_CALM,
 5675|      1|                "SETTINGS: too many setting entries");
 5676|      1|            if (nghttp2_is_fatal(rv)) {
 5677|      0|              return rv;
 5678|      0|            }
 5679|      1|            return (ssize_t)inlen;
 5680|      1|          }
 5681|       |
 5682|    578|          iframe->iv = nghttp2_mem_malloc(mem, sizeof(nghttp2_settings_entry) *
 5683|    578|                                                   iframe->max_niv);
 5684|       |
 5685|    578|          if (!iframe->iv) {
 5686|      0|            return NGHTTP2_ERR_NOMEM;
 5687|      0|          }
 5688|       |
 5689|    578|          min_header_table_size_entry = &iframe->iv[iframe->max_niv - 1];
 5690|    578|          min_header_table_size_entry->settings_id =
 5691|    578|              NGHTTP2_SETTINGS_HEADER_TABLE_SIZE;
 5692|    578|          min_header_table_size_entry->value = UINT32_MAX;
 5693|       |
 5694|    578|          inbound_frame_set_mark(iframe, NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH);
 5695|    578|          break;
 5696|    578|        }
 5697|       |
 5698|      4|        busy = 1;
 5699|       |
 5700|      4|        inbound_frame_set_mark(iframe, 0);
 5701|       |
 5702|      4|        break;
 5703|     25|      case NGHTTP2_PUSH_PROMISE:
 5704|     25|        DEBUGF("recv: PUSH_PROMISE\n");
 5705|       |
 5706|     25|        iframe->frame.hd.flags &=
 5707|     25|            (NGHTTP2_FLAG_END_HEADERS | NGHTTP2_FLAG_PADDED);
 5708|       |
 5709|     25|        rv = inbound_frame_handle_pad(iframe, &iframe->frame.hd);
 5710|     25|        if (rv < 0) {
 5711|      1|          rv = nghttp2_session_terminate_session_with_reason(
 5712|      1|              session, NGHTTP2_PROTOCOL_ERROR,
 5713|      1|              "PUSH_PROMISE: insufficient padding space");
 5714|      1|          if (nghttp2_is_fatal(rv)) {
 5715|      0|            return rv;
 5716|      0|          }
 5717|      1|          return (ssize_t)inlen;
 5718|      1|        }
 5719|       |
 5720|     24|        if (rv == 1) {
 5721|      7|          iframe->state = NGHTTP2_IB_READ_NBYTE;
 5722|      7|          break;
 5723|      7|        }
 5724|       |
 5725|     17|        if (iframe->payloadleft < 4) {
 5726|      1|          busy = 1;
 5727|      1|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5728|      1|          break;
 5729|      1|        }
 5730|       |
 5731|     16|        iframe->state = NGHTTP2_IB_READ_NBYTE;
 5732|       |
 5733|     16|        inbound_frame_set_mark(iframe, 4);
 5734|       |
 5735|     16|        break;
 5736|      1|      case NGHTTP2_PING:
 5737|      1|        DEBUGF("recv: PING\n");
 5738|       |
 5739|      1|        iframe->frame.hd.flags &= NGHTTP2_FLAG_ACK;
 5740|       |
 5741|      1|        if (iframe->payloadleft != 8) {
 5742|      1|          busy = 1;
 5743|      1|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5744|      1|          break;
 5745|      1|        }
 5746|       |
 5747|      0|        iframe->state = NGHTTP2_IB_READ_NBYTE;
 5748|      0|        inbound_frame_set_mark(iframe, 8);
 5749|       |
 5750|      0|        break;
 5751|     28|      case NGHTTP2_GOAWAY:
 5752|     28|        DEBUGF("recv: GOAWAY\n");
 5753|       |
 5754|     28|        iframe->frame.hd.flags = NGHTTP2_FLAG_NONE;
 5755|       |
 5756|     28|        if (iframe->payloadleft < 8) {
 5757|      1|          busy = 1;
 5758|      1|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5759|      1|          break;
 5760|      1|        }
 5761|       |
 5762|     27|        iframe->state = NGHTTP2_IB_READ_NBYTE;
 5763|     27|        inbound_frame_set_mark(iframe, 8);
 5764|       |
 5765|     27|        break;
 5766|      1|      case NGHTTP2_CONTINUATION:
 5767|      1|        DEBUGF("recv: unexpected CONTINUATION\n");
 5768|       |
 5769|       |        /* Receiving CONTINUATION in this state are subject to
 5770|       |           connection error of type PROTOCOL_ERROR */
 5771|      1|        rv = nghttp2_session_terminate_session_with_reason(
 5772|      1|            session, NGHTTP2_PROTOCOL_ERROR, "CONTINUATION: unexpected");
 5773|      1|        if (nghttp2_is_fatal(rv)) {
 5774|      0|          return rv;
 5775|      0|        }
 5776|       |
 5777|      1|        return (ssize_t)inlen;
 5778|     76|      default:
 5779|     76|        DEBUGF("recv: extension frame\n");
 5780|       |
 5781|     76|        if (check_ext_type_set(session->user_recv_ext_types,
 5782|     76|                               iframe->frame.hd.type)) {
 5783|      0|          if (!session->callbacks.unpack_extension_callback) {
 5784|       |            /* Silently ignore unknown frame type. */
 5785|       |
 5786|      0|            busy = 1;
 5787|       |
 5788|      0|            iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5789|       |
 5790|      0|            break;
 5791|      0|          }
 5792|       |
 5793|      0|          busy = 1;
 5794|       |
 5795|      0|          iframe->state = NGHTTP2_IB_READ_EXTENSION_PAYLOAD;
 5796|       |
 5797|      0|          break;
 5798|     76|        } else {
 5799|     76|          switch (iframe->frame.hd.type) {
 5800|      6|          case NGHTTP2_ALTSVC:
 5801|      6|            if ((session->builtin_recv_ext_types & NGHTTP2_TYPEMASK_ALTSVC) ==
 5802|      6|                0) {
 5803|      6|              busy = 1;
 5804|      6|              iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5805|      6|              break;
 5806|      6|            }
 5807|       |
 5808|      0|            DEBUGF("recv: ALTSVC\n");
 5809|       |
 5810|      0|            iframe->frame.hd.flags = NGHTTP2_FLAG_NONE;
 5811|      0|            iframe->frame.ext.payload = &iframe->ext_frame_payload.altsvc;
 5812|       |
 5813|      0|            if (session->server) {
 5814|      0|              busy = 1;
 5815|      0|              iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5816|      0|              break;
 5817|      0|            }
 5818|       |
 5819|      0|            if (iframe->payloadleft < 2) {
 5820|      0|              busy = 1;
 5821|      0|              iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5822|      0|              break;
 5823|      0|            }
 5824|       |
 5825|      0|            busy = 1;
 5826|       |
 5827|      0|            iframe->state = NGHTTP2_IB_READ_NBYTE;
 5828|      0|            inbound_frame_set_mark(iframe, 2);
 5829|       |
 5830|      0|            break;
 5831|     11|          case NGHTTP2_ORIGIN:
 5832|     11|            if (!(session->builtin_recv_ext_types & NGHTTP2_TYPEMASK_ORIGIN)) {
 5833|     11|              busy = 1;
 5834|     11|              iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5835|     11|              break;
 5836|     11|            }
 5837|       |
 5838|      0|            DEBUGF("recv: ORIGIN\n");
 5839|       |
 5840|      0|            iframe->frame.ext.payload = &iframe->ext_frame_payload.origin;
 5841|       |
 5842|      0|            if (session->server || iframe->frame.hd.stream_id ||
 5843|      0|                (iframe->frame.hd.flags & 0xf0)) {
 5844|      0|              busy = 1;
 5845|      0|              iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5846|      0|              break;
 5847|      0|            }
 5848|       |
 5849|      0|            iframe->frame.hd.flags = NGHTTP2_FLAG_NONE;
 5850|       |
 5851|      0|            if (iframe->payloadleft) {
 5852|      0|              iframe->raw_lbuf = nghttp2_mem_malloc(mem, iframe->payloadleft);
 5853|       |
 5854|      0|              if (iframe->raw_lbuf == NULL) {
 5855|      0|                return NGHTTP2_ERR_NOMEM;
 5856|      0|              }
 5857|       |
 5858|      0|              nghttp2_buf_wrap_init(&iframe->lbuf, iframe->raw_lbuf,
 5859|      0|                                    iframe->payloadleft);
 5860|      0|            } else {
 5861|      0|              busy = 1;
 5862|      0|            }
 5863|       |
 5864|      0|            iframe->state = NGHTTP2_IB_READ_ORIGIN_PAYLOAD;
 5865|       |
 5866|      0|            break;
 5867|     59|          default:
 5868|     59|            busy = 1;
 5869|       |
 5870|     59|            iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 5871|       |
 5872|     59|            break;
 5873|     76|          }
 5874|     76|        }
 5875|  1.01k|      }
 5876|       |
 5877|    987|      if (!on_begin_frame_called) {
 5878|    786|        switch (iframe->state) {
 5879|      0|        case NGHTTP2_IB_IGN_HEADER_BLOCK:
 5880|     76|        case NGHTTP2_IB_IGN_PAYLOAD:
 5881|     86|        case NGHTTP2_IB_FRAME_SIZE_ERROR:
 5882|     89|        case NGHTTP2_IB_IGN_DATA:
 5883|     89|        case NGHTTP2_IB_IGN_ALL:
 5884|     89|          break;
 5885|    697|        default:
 5886|    697|          rv = session_call_on_begin_frame(session, &iframe->frame.hd);
 5887|       |
 5888|    697|          if (nghttp2_is_fatal(rv)) {
 5889|      0|            return rv;
 5890|      0|          }
 5891|    786|        }
 5892|    786|      }
 5893|       |
 5894|    987|      break;
 5895|    987|    }
 5896|    987|    case NGHTTP2_IB_READ_NBYTE:
 5897|    114|      DEBUGF("recv: [IB_READ_NBYTE]\n");
 5898|       |
 5899|    114|      readlen = inbound_frame_buf_read(iframe, in, last);
 5900|    114|      in += readlen;
 5901|    114|      iframe->payloadleft -= readlen;
 5902|       |
 5903|    114|      DEBUGF("recv: readlen=%zu, payloadleft=%zu, left=%zd\n", readlen,
 5904|    114|             iframe->payloadleft, nghttp2_buf_mark_avail(&iframe->sbuf));
 5905|       |
 5906|    114|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 5907|      1|        return in - first;
 5908|      1|      }
 5909|       |
 5910|    113|      switch (iframe->frame.hd.type) {
 5911|     49|      case NGHTTP2_HEADERS:
 5912|     49|        if (iframe->padlen == 0 &&
 5913|     49|            (iframe->frame.hd.flags & NGHTTP2_FLAG_PADDED)) {
 5914|     13|          pri_fieldlen = nghttp2_frame_priority_len(iframe->frame.hd.flags);
 5915|     13|          padlen = inbound_frame_compute_pad(iframe);
 5916|     13|          if (padlen < 0 ||
 5917|     13|              (size_t)padlen + pri_fieldlen > 1 + iframe->payloadleft) {
 5918|      2|            rv = nghttp2_session_terminate_session_with_reason(
 5919|      2|                session, NGHTTP2_PROTOCOL_ERROR, "HEADERS: invalid padding");
 5920|      2|            if (nghttp2_is_fatal(rv)) {
 5921|      0|              return rv;
 5922|      0|            }
 5923|      2|            return (ssize_t)inlen;
 5924|      2|          }
 5925|     11|          iframe->frame.headers.padlen = (size_t)padlen;
 5926|       |
 5927|     11|          if (pri_fieldlen > 0) {
 5928|      7|            if (iframe->payloadleft < pri_fieldlen) {
 5929|      0|              busy = 1;
 5930|      0|              iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 5931|      0|              break;
 5932|      0|            }
 5933|      7|            iframe->state = NGHTTP2_IB_READ_NBYTE;
 5934|      7|            inbound_frame_set_mark(iframe, pri_fieldlen);
 5935|      7|            break;
 5936|      7|          } else {
 5937|       |            /* Truncate buffers used for padding spec */
 5938|      4|            inbound_frame_set_mark(iframe, 0);
 5939|      4|          }
 5940|     11|        }
 5941|       |
 5942|     40|        rv = session_process_headers_frame(session);
 5943|     40|        if (nghttp2_is_fatal(rv)) {
 5944|      0|          return rv;
 5945|      0|        }
 5946|       |
 5947|     40|        busy = 1;
 5948|       |
 5949|     40|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 5950|      1|          return (ssize_t)inlen;
 5951|      1|        }
 5952|       |
 5953|     39|        if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 5954|      0|          rv = nghttp2_session_add_rst_stream(
 5955|      0|              session, iframe->frame.hd.stream_id, NGHTTP2_INTERNAL_ERROR);
 5956|      0|          if (nghttp2_is_fatal(rv)) {
 5957|      0|            return rv;
 5958|      0|          }
 5959|      0|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 5960|      0|          break;
 5961|      0|        }
 5962|       |
 5963|     39|        if (rv == NGHTTP2_ERR_IGN_HEADER_BLOCK) {
 5964|      2|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 5965|      2|          break;
 5966|      2|        }
 5967|       |
 5968|     37|        iframe->state = NGHTTP2_IB_READ_HEADER_BLOCK;
 5969|       |
 5970|     37|        break;
 5971|      3|      case NGHTTP2_PRIORITY:
 5972|      3|        rv = session_process_priority_frame(session);
 5973|      3|        if (nghttp2_is_fatal(rv)) {
 5974|      0|          return rv;
 5975|      0|        }
 5976|       |
 5977|      3|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 5978|      2|          return (ssize_t)inlen;
 5979|      2|        }
 5980|       |
 5981|      1|        session_inbound_frame_reset(session);
 5982|       |
 5983|      1|        break;
 5984|      6|      case NGHTTP2_RST_STREAM:
 5985|      6|        rv = session_process_rst_stream_frame(session);
 5986|      6|        if (nghttp2_is_fatal(rv)) {
 5987|      0|          return rv;
 5988|      0|        }
 5989|       |
 5990|      6|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 5991|      3|          return (ssize_t)inlen;
 5992|      3|        }
 5993|       |
 5994|      3|        session_inbound_frame_reset(session);
 5995|       |
 5996|      3|        break;
 5997|     28|      case NGHTTP2_PUSH_PROMISE:
 5998|     28|        if (iframe->padlen == 0 &&
 5999|     28|            (iframe->frame.hd.flags & NGHTTP2_FLAG_PADDED)) {
 6000|      7|          padlen = inbound_frame_compute_pad(iframe);
 6001|      7|          if (padlen < 0 || (size_t)padlen + 4 /* promised stream id */
 6002|      6|                                > 1 + iframe->payloadleft) {
 6003|      2|            rv = nghttp2_session_terminate_session_with_reason(
 6004|      2|                session, NGHTTP2_PROTOCOL_ERROR,
 6005|      2|                "PUSH_PROMISE: invalid padding");
 6006|      2|            if (nghttp2_is_fatal(rv)) {
 6007|      0|              return rv;
 6008|      0|            }
 6009|      2|            return (ssize_t)inlen;
 6010|      2|          }
 6011|       |
 6012|      5|          iframe->frame.push_promise.padlen = (size_t)padlen;
 6013|       |
 6014|      5|          if (iframe->payloadleft < 4) {
 6015|      0|            busy = 1;
 6016|      0|            iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 6017|      0|            break;
 6018|      0|          }
 6019|       |
 6020|      5|          iframe->state = NGHTTP2_IB_READ_NBYTE;
 6021|       |
 6022|      5|          inbound_frame_set_mark(iframe, 4);
 6023|       |
 6024|      5|          break;
 6025|      5|        }
 6026|       |
 6027|     21|        rv = session_process_push_promise_frame(session);
 6028|     21|        if (nghttp2_is_fatal(rv)) {
 6029|      0|          return rv;
 6030|      0|        }
 6031|       |
 6032|     21|        busy = 1;
 6033|       |
 6034|     21|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6035|      5|          return (ssize_t)inlen;
 6036|      5|        }
 6037|       |
 6038|     16|        if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 6039|      0|          rv = nghttp2_session_add_rst_stream(
 6040|      0|              session, iframe->frame.push_promise.promised_stream_id,
 6041|      0|              NGHTTP2_INTERNAL_ERROR);
 6042|      0|          if (nghttp2_is_fatal(rv)) {
 6043|      0|            return rv;
 6044|      0|          }
 6045|      0|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 6046|      0|          break;
 6047|      0|        }
 6048|       |
 6049|     16|        if (rv == NGHTTP2_ERR_IGN_HEADER_BLOCK) {
 6050|     16|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 6051|     16|          break;
 6052|     16|        }
 6053|       |
 6054|      0|        iframe->state = NGHTTP2_IB_READ_HEADER_BLOCK;
 6055|       |
 6056|      0|        break;
 6057|      0|      case NGHTTP2_PING:
 6058|      0|        rv = session_process_ping_frame(session);
 6059|      0|        if (nghttp2_is_fatal(rv)) {
 6060|      0|          return rv;
 6061|      0|        }
 6062|       |
 6063|      0|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6064|      0|          return (ssize_t)inlen;
 6065|      0|        }
 6066|       |
 6067|      0|        session_inbound_frame_reset(session);
 6068|       |
 6069|      0|        break;
 6070|     27|      case NGHTTP2_GOAWAY: {
 6071|     27|        size_t debuglen;
 6072|       |
 6073|       |        /* 8 is Last-stream-ID + Error Code */
 6074|     27|        debuglen = iframe->frame.hd.length - 8;
 6075|       |
 6076|     27|        if (debuglen > 0) {
 6077|     26|          iframe->raw_lbuf = nghttp2_mem_malloc(mem, debuglen);
 6078|       |
 6079|     26|          if (iframe->raw_lbuf == NULL) {
 6080|      0|            return NGHTTP2_ERR_NOMEM;
 6081|      0|          }
 6082|       |
 6083|     26|          nghttp2_buf_wrap_init(&iframe->lbuf, iframe->raw_lbuf, debuglen);
 6084|     26|        }
 6085|       |
 6086|     27|        busy = 1;
 6087|       |
 6088|     27|        iframe->state = NGHTTP2_IB_READ_GOAWAY_DEBUG;
 6089|       |
 6090|     27|        break;
 6091|     27|      }
 6092|      0|      case NGHTTP2_WINDOW_UPDATE:
 6093|      0|        rv = session_process_window_update_frame(session);
 6094|      0|        if (nghttp2_is_fatal(rv)) {
 6095|      0|          return rv;
 6096|      0|        }
 6097|       |
 6098|      0|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6099|      0|          return (ssize_t)inlen;
 6100|      0|        }
 6101|       |
 6102|      0|        session_inbound_frame_reset(session);
 6103|       |
 6104|      0|        break;
 6105|      0|      case NGHTTP2_ALTSVC: {
 6106|      0|        size_t origin_len;
 6107|       |
 6108|      0|        origin_len = nghttp2_get_uint16(iframe->sbuf.pos);
 6109|       |
 6110|      0|        DEBUGF("recv: origin_len=%zu\n", origin_len);
 6111|       |
 6112|      0|        if (origin_len > iframe->payloadleft) {
 6113|      0|          busy = 1;
 6114|      0|          iframe->state = NGHTTP2_IB_FRAME_SIZE_ERROR;
 6115|      0|          break;
 6116|      0|        }
 6117|       |
 6118|      0|        if (iframe->frame.hd.length > 2) {
 6119|      0|          iframe->raw_lbuf =
 6120|      0|              nghttp2_mem_malloc(mem, iframe->frame.hd.length - 2);
 6121|       |
 6122|      0|          if (iframe->raw_lbuf == NULL) {
 6123|      0|            return NGHTTP2_ERR_NOMEM;
 6124|      0|          }
 6125|       |
 6126|      0|          nghttp2_buf_wrap_init(&iframe->lbuf, iframe->raw_lbuf,
 6127|      0|                                iframe->frame.hd.length);
 6128|      0|        }
 6129|       |
 6130|      0|        busy = 1;
 6131|       |
 6132|      0|        iframe->state = NGHTTP2_IB_READ_ALTSVC_PAYLOAD;
 6133|       |
 6134|      0|        break;
 6135|      0|      }
 6136|      0|      default:
 6137|       |        /* This is unknown frame */
 6138|      0|        session_inbound_frame_reset(session);
 6139|       |
 6140|      0|        break;
 6141|    113|      }
 6142|     98|      break;
 6143|    232|    case NGHTTP2_IB_READ_HEADER_BLOCK:
 6144|    470|    case NGHTTP2_IB_IGN_HEADER_BLOCK: {
 6145|    470|      ssize_t data_readlen;
 6146|    470|      size_t trail_padlen;
 6147|    470|      int final;
 6148|       |#ifdef DEBUGBUILD
 6149|       |      if (iframe->state == NGHTTP2_IB_READ_HEADER_BLOCK) {
 6150|       |        DEBUGF("recv: [IB_READ_HEADER_BLOCK]\n");
 6151|       |      } else {
 6152|       |        DEBUGF("recv: [IB_IGN_HEADER_BLOCK]\n");
 6153|       |      }
 6154|       |#endif /* DEBUGBUILD */
 6155|       |
 6156|    470|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6157|       |
 6158|    470|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6159|    470|             iframe->payloadleft - readlen);
 6160|       |
 6161|    470|      data_readlen = inbound_frame_effective_readlen(
 6162|    470|          iframe, iframe->payloadleft - readlen, readlen);
 6163|       |
 6164|    470|      if (data_readlen == -1) {
 6165|       |        /* everything is padding */
 6166|      2|        data_readlen = 0;
 6167|      2|      }
 6168|       |
 6169|    470|      trail_padlen = nghttp2_frame_trail_padlen(&iframe->frame, iframe->padlen);
 6170|       |
 6171|    470|      final = (iframe->frame.hd.flags & NGHTTP2_FLAG_END_HEADERS) &&
 6172|    470|              iframe->payloadleft - (size_t)data_readlen == trail_padlen;
 6173|       |
 6174|    470|      if (data_readlen > 0 || (data_readlen == 0 && final)) {
 6175|    428|        size_t hd_proclen = 0;
 6176|       |
 6177|    428|        DEBUGF("recv: block final=%d\n", final);
 6178|       |
 6179|    428|        rv =
 6180|    428|            inflate_header_block(session, &iframe->frame, &hd_proclen,
 6181|    428|                                 (uint8_t *)in, (size_t)data_readlen, final,
 6182|    428|                                 iframe->state == NGHTTP2_IB_READ_HEADER_BLOCK);
 6183|       |
 6184|    428|        if (nghttp2_is_fatal(rv)) {
 6185|      0|          return rv;
 6186|      0|        }
 6187|       |
 6188|    428|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6189|    125|          return (ssize_t)inlen;
 6190|    125|        }
 6191|       |
 6192|    303|        if (rv == NGHTTP2_ERR_PAUSE) {
 6193|      0|          in += hd_proclen;
 6194|      0|          iframe->payloadleft -= hd_proclen;
 6195|       |
 6196|      0|          return in - first;
 6197|      0|        }
 6198|       |
 6199|    303|        if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 6200|       |          /* The application says no more headers. We decompress the
 6201|       |             rest of the header block but not invoke on_header_callback
 6202|       |             and on_frame_recv_callback. */
 6203|    167|          in += hd_proclen;
 6204|    167|          iframe->payloadleft -= hd_proclen;
 6205|       |
 6206|       |          /* Use promised stream ID for PUSH_PROMISE */
 6207|    167|          rv = nghttp2_session_add_rst_stream(
 6208|    167|              session,
 6209|    167|              iframe->frame.hd.type == NGHTTP2_PUSH_PROMISE
 6210|    167|                  ? iframe->frame.push_promise.promised_stream_id
 6211|    167|                  : iframe->frame.hd.stream_id,
 6212|    167|              NGHTTP2_INTERNAL_ERROR);
 6213|    167|          if (nghttp2_is_fatal(rv)) {
 6214|      0|            return rv;
 6215|      0|          }
 6216|    167|          busy = 1;
 6217|    167|          iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 6218|    167|          break;
 6219|    167|        }
 6220|       |
 6221|    136|        in += readlen;
 6222|    136|        iframe->payloadleft -= readlen;
 6223|       |
 6224|    136|        if (rv == NGHTTP2_ERR_HEADER_COMP) {
 6225|       |          /* GOAWAY is already issued */
 6226|      0|          if (iframe->payloadleft == 0) {
 6227|      0|            session_inbound_frame_reset(session);
 6228|      0|          } else {
 6229|      0|            busy = 1;
 6230|      0|            iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 6231|      0|          }
 6232|      0|          break;
 6233|      0|        }
 6234|    136|      } else {
 6235|     42|        in += readlen;
 6236|     42|        iframe->payloadleft -= readlen;
 6237|     42|      }
 6238|       |
 6239|    178|      if (iframe->payloadleft) {
 6240|     92|        break;
 6241|     92|      }
 6242|       |
 6243|     86|      if ((iframe->frame.hd.flags & NGHTTP2_FLAG_END_HEADERS) == 0) {
 6244|       |
 6245|     14|        inbound_frame_set_mark(iframe, NGHTTP2_FRAME_HDLEN);
 6246|       |
 6247|     14|        iframe->padlen = 0;
 6248|       |
 6249|     14|        if (iframe->state == NGHTTP2_IB_READ_HEADER_BLOCK) {
 6250|      4|          iframe->state = NGHTTP2_IB_EXPECT_CONTINUATION;
 6251|     10|        } else {
 6252|     10|          iframe->state = NGHTTP2_IB_IGN_CONTINUATION;
 6253|     10|        }
 6254|     72|      } else {
 6255|     72|        if (iframe->state == NGHTTP2_IB_READ_HEADER_BLOCK) {
 6256|     38|          rv = session_after_header_block_received(session);
 6257|     38|          if (nghttp2_is_fatal(rv)) {
 6258|      0|            return rv;
 6259|      0|          }
 6260|     38|        }
 6261|     72|        session_inbound_frame_reset(session);
 6262|     72|      }
 6263|     86|      break;
 6264|     86|    }
 6265|     86|    case NGHTTP2_IB_IGN_PAYLOAD:
 6266|     85|      DEBUGF("recv: [IB_IGN_PAYLOAD]\n");
 6267|       |
 6268|     85|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6269|     85|      iframe->payloadleft -= readlen;
 6270|     85|      in += readlen;
 6271|       |
 6272|     85|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6273|     85|             iframe->payloadleft);
 6274|       |
 6275|     85|      if (iframe->payloadleft) {
 6276|     43|        break;
 6277|     43|      }
 6278|       |
 6279|     42|      switch (iframe->frame.hd.type) {
 6280|      0|      case NGHTTP2_HEADERS:
 6281|      0|      case NGHTTP2_PUSH_PROMISE:
 6282|      0|      case NGHTTP2_CONTINUATION:
 6283|       |        /* Mark inflater bad so that we won't perform further decoding */
 6284|      0|        session->hd_inflater.ctx.bad = 1;
 6285|      0|        break;
 6286|     42|      default:
 6287|     42|        break;
 6288|     42|      }
 6289|       |
 6290|     42|      session_inbound_frame_reset(session);
 6291|       |
 6292|     42|      break;
 6293|     10|    case NGHTTP2_IB_FRAME_SIZE_ERROR:
 6294|     10|      DEBUGF("recv: [IB_FRAME_SIZE_ERROR]\n");
 6295|       |
 6296|     10|      rv = session_handle_frame_size_error(session);
 6297|     10|      if (nghttp2_is_fatal(rv)) {
 6298|      0|        return rv;
 6299|      0|      }
 6300|       |
 6301|     10|      assert(iframe->state == NGHTTP2_IB_IGN_ALL);
 6302|       |
 6303|     10|      return (ssize_t)inlen;
 6304|  2.56k|    case NGHTTP2_IB_READ_SETTINGS:
 6305|  2.56k|      DEBUGF("recv: [IB_READ_SETTINGS]\n");
 6306|       |
 6307|  2.56k|      readlen = inbound_frame_buf_read(iframe, in, last);
 6308|  2.56k|      iframe->payloadleft -= readlen;
 6309|  2.56k|      in += readlen;
 6310|       |
 6311|  2.56k|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6312|  2.56k|             iframe->payloadleft);
 6313|       |
 6314|  2.56k|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 6315|      5|        break;
 6316|      5|      }
 6317|       |
 6318|  2.56k|      if (readlen > 0) {
 6319|  2.55k|        inbound_frame_set_settings_entry(iframe);
 6320|  2.55k|      }
 6321|  2.56k|      if (iframe->payloadleft) {
 6322|  1.98k|        inbound_frame_set_mark(iframe, NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH);
 6323|  1.98k|        break;
 6324|  1.98k|      }
 6325|       |
 6326|    578|      rv = session_process_settings_frame(session);
 6327|       |
 6328|    578|      if (nghttp2_is_fatal(rv)) {
 6329|      0|        return rv;
 6330|      0|      }
 6331|       |
 6332|    578|      if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6333|     18|        return (ssize_t)inlen;
 6334|     18|      }
 6335|       |
 6336|    560|      session_inbound_frame_reset(session);
 6337|       |
 6338|    560|      break;
 6339|     28|    case NGHTTP2_IB_READ_GOAWAY_DEBUG:
 6340|     28|      DEBUGF("recv: [IB_READ_GOAWAY_DEBUG]\n");
 6341|       |
 6342|     28|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6343|       |
 6344|     28|      if (readlen > 0) {
 6345|     27|        iframe->lbuf.last = nghttp2_cpymem(iframe->lbuf.last, in, readlen);
 6346|       |
 6347|     27|        iframe->payloadleft -= readlen;
 6348|     27|        in += readlen;
 6349|     27|      }
 6350|       |
 6351|     28|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6352|     28|             iframe->payloadleft);
 6353|       |
 6354|     28|      if (iframe->payloadleft) {
 6355|      3|        assert(nghttp2_buf_avail(&iframe->lbuf) > 0);
 6356|       |
 6357|      3|        break;
 6358|      3|      }
 6359|       |
 6360|     25|      rv = session_process_goaway_frame(session);
 6361|       |
 6362|     25|      if (nghttp2_is_fatal(rv)) {
 6363|      0|        return rv;
 6364|      0|      }
 6365|       |
 6366|     25|      if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6367|      3|        return (ssize_t)inlen;
 6368|      3|      }
 6369|       |
 6370|     22|      session_inbound_frame_reset(session);
 6371|       |
 6372|     22|      break;
 6373|      4|    case NGHTTP2_IB_EXPECT_CONTINUATION:
 6374|     12|    case NGHTTP2_IB_IGN_CONTINUATION:
 6375|       |#ifdef DEBUGBUILD
 6376|       |      if (iframe->state == NGHTTP2_IB_EXPECT_CONTINUATION) {
 6377|       |        fprintf(stderr, "recv: [IB_EXPECT_CONTINUATION]\n");
 6378|       |      } else {
 6379|       |        fprintf(stderr, "recv: [IB_IGN_CONTINUATION]\n");
 6380|       |      }
 6381|       |#endif /* DEBUGBUILD */
 6382|       |
 6383|     12|      readlen = inbound_frame_buf_read(iframe, in, last);
 6384|     12|      in += readlen;
 6385|       |
 6386|     12|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 6387|      6|        return in - first;
 6388|      6|      }
 6389|       |
 6390|      6|      nghttp2_frame_unpack_frame_hd(&cont_hd, iframe->sbuf.pos);
 6391|      6|      iframe->payloadleft = cont_hd.length;
 6392|       |
 6393|      6|      DEBUGF("recv: payloadlen=%zu, type=%u, flags=0x%02x, stream_id=%d\n",
 6394|      6|             cont_hd.length, cont_hd.type, cont_hd.flags, cont_hd.stream_id);
 6395|       |
 6396|      6|      if (cont_hd.type != NGHTTP2_CONTINUATION ||
 6397|      6|          cont_hd.stream_id != iframe->frame.hd.stream_id) {
 6398|      6|        DEBUGF("recv: expected stream_id=%d, type=%d, but got stream_id=%d, "
 6399|      6|               "type=%u\n",
 6400|      6|               iframe->frame.hd.stream_id, NGHTTP2_CONTINUATION,
 6401|      6|               cont_hd.stream_id, cont_hd.type);
 6402|      6|        rv = nghttp2_session_terminate_session_with_reason(
 6403|      6|            session, NGHTTP2_PROTOCOL_ERROR,
 6404|      6|            "unexpected non-CONTINUATION frame or stream_id is invalid");
 6405|      6|        if (nghttp2_is_fatal(rv)) {
 6406|      0|          return rv;
 6407|      0|        }
 6408|       |
 6409|      6|        return (ssize_t)inlen;
 6410|      6|      }
 6411|       |
 6412|       |      /* CONTINUATION won't bear NGHTTP2_PADDED flag */
 6413|       |
 6414|      0|      iframe->frame.hd.flags = (uint8_t)(
 6415|      0|          iframe->frame.hd.flags | (cont_hd.flags & NGHTTP2_FLAG_END_HEADERS));
 6416|      0|      iframe->frame.hd.length += cont_hd.length;
 6417|       |
 6418|      0|      busy = 1;
 6419|       |
 6420|      0|      if (iframe->state == NGHTTP2_IB_EXPECT_CONTINUATION) {
 6421|      0|        iframe->state = NGHTTP2_IB_READ_HEADER_BLOCK;
 6422|       |
 6423|      0|        rv = session_call_on_begin_frame(session, &cont_hd);
 6424|       |
 6425|      0|        if (nghttp2_is_fatal(rv)) {
 6426|      0|          return rv;
 6427|      0|        }
 6428|      0|      } else {
 6429|      0|        iframe->state = NGHTTP2_IB_IGN_HEADER_BLOCK;
 6430|      0|      }
 6431|       |
 6432|      0|      break;
 6433|     10|    case NGHTTP2_IB_READ_PAD_DATA:
 6434|     10|      DEBUGF("recv: [IB_READ_PAD_DATA]\n");
 6435|       |
 6436|     10|      readlen = inbound_frame_buf_read(iframe, in, last);
 6437|     10|      in += readlen;
 6438|     10|      iframe->payloadleft -= readlen;
 6439|       |
 6440|     10|      DEBUGF("recv: readlen=%zu, payloadleft=%zu, left=%zu\n", readlen,
 6441|     10|             iframe->payloadleft, nghttp2_buf_mark_avail(&iframe->sbuf));
 6442|       |
 6443|     10|      if (nghttp2_buf_mark_avail(&iframe->sbuf)) {
 6444|      0|        return in - first;
 6445|      0|      }
 6446|       |
 6447|       |      /* Pad Length field is subject to flow control */
 6448|     10|      rv = nghttp2_session_update_recv_connection_window_size(session, readlen);
 6449|     10|      if (nghttp2_is_fatal(rv)) {
 6450|      0|        return rv;
 6451|      0|      }
 6452|       |
 6453|     10|      if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6454|      0|        return (ssize_t)inlen;
 6455|      0|      }
 6456|       |
 6457|       |      /* Pad Length field is consumed immediately */
 6458|     10|      rv =
 6459|     10|          nghttp2_session_consume(session, iframe->frame.hd.stream_id, readlen);
 6460|       |
 6461|     10|      if (nghttp2_is_fatal(rv)) {
 6462|      0|        return rv;
 6463|      0|      }
 6464|       |
 6465|     10|      if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6466|      0|        return (ssize_t)inlen;
 6467|      0|      }
 6468|       |
 6469|     10|      stream = nghttp2_session_get_stream(session, iframe->frame.hd.stream_id);
 6470|     10|      if (stream) {
 6471|     10|        rv = nghttp2_session_update_recv_stream_window_size(
 6472|     10|            session, stream, readlen,
 6473|     10|            iframe->payloadleft ||
 6474|     10|                (iframe->frame.hd.flags & NGHTTP2_FLAG_END_STREAM) == 0);
 6475|     10|        if (nghttp2_is_fatal(rv)) {
 6476|      0|          return rv;
 6477|      0|        }
 6478|     10|      }
 6479|       |
 6480|     10|      busy = 1;
 6481|       |
 6482|     10|      padlen = inbound_frame_compute_pad(iframe);
 6483|     10|      if (padlen < 0) {
 6484|      1|        rv = nghttp2_session_terminate_session_with_reason(
 6485|      1|            session, NGHTTP2_PROTOCOL_ERROR, "DATA: invalid padding");
 6486|      1|        if (nghttp2_is_fatal(rv)) {
 6487|      0|          return rv;
 6488|      0|        }
 6489|      1|        return (ssize_t)inlen;
 6490|      1|      }
 6491|       |
 6492|      9|      iframe->frame.data.padlen = (size_t)padlen;
 6493|       |
 6494|      9|      iframe->state = NGHTTP2_IB_READ_DATA;
 6495|       |
 6496|      9|      break;
 6497|     16|    case NGHTTP2_IB_READ_DATA:
 6498|     16|      stream = nghttp2_session_get_stream(session, iframe->frame.hd.stream_id);
 6499|       |
 6500|     16|      if (!stream) {
 6501|      0|        busy = 1;
 6502|      0|        iframe->state = NGHTTP2_IB_IGN_DATA;
 6503|      0|        break;
 6504|      0|      }
 6505|       |
 6506|     16|      DEBUGF("recv: [IB_READ_DATA]\n");
 6507|       |
 6508|     16|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6509|     16|      iframe->payloadleft -= readlen;
 6510|     16|      in += readlen;
 6511|       |
 6512|     16|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6513|     16|             iframe->payloadleft);
 6514|       |
 6515|     16|      if (readlen > 0) {
 6516|     15|        ssize_t data_readlen;
 6517|       |
 6518|     15|        rv = nghttp2_session_update_recv_connection_window_size(session,
 6519|     15|                                                                readlen);
 6520|     15|        if (nghttp2_is_fatal(rv)) {
 6521|      0|          return rv;
 6522|      0|        }
 6523|       |
 6524|     15|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6525|      0|          return (ssize_t)inlen;
 6526|      0|        }
 6527|       |
 6528|     15|        rv = nghttp2_session_update_recv_stream_window_size(
 6529|     15|            session, stream, readlen,
 6530|     15|            iframe->payloadleft ||
 6531|     15|                (iframe->frame.hd.flags & NGHTTP2_FLAG_END_STREAM) == 0);
 6532|     15|        if (nghttp2_is_fatal(rv)) {
 6533|      0|          return rv;
 6534|      0|        }
 6535|       |
 6536|     15|        data_readlen = inbound_frame_effective_readlen(
 6537|     15|            iframe, iframe->payloadleft, readlen);
 6538|       |
 6539|     15|        if (data_readlen == -1) {
 6540|       |          /* everything is padding */
 6541|      1|          data_readlen = 0;
 6542|      1|        }
 6543|       |
 6544|     15|        padlen = (ssize_t)readlen - data_readlen;
 6545|       |
 6546|     15|        if (padlen > 0) {
 6547|       |          /* Padding is considered as "consumed" immediately */
 6548|      4|          rv = nghttp2_session_consume(session, iframe->frame.hd.stream_id,
 6549|      4|                                       (size_t)padlen);
 6550|       |
 6551|      4|          if (nghttp2_is_fatal(rv)) {
 6552|      0|            return rv;
 6553|      0|          }
 6554|       |
 6555|      4|          if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6556|      0|            return (ssize_t)inlen;
 6557|      0|          }
 6558|      4|        }
 6559|       |
 6560|     15|        DEBUGF("recv: data_readlen=%zd\n", data_readlen);
 6561|       |
 6562|     15|        if (data_readlen > 0) {
 6563|     14|          if (session_enforce_http_messaging(session)) {
 6564|     14|            if (nghttp2_http_on_data_chunk(stream, (size_t)data_readlen) != 0) {
 6565|      3|              if (session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) {
 6566|       |                /* Consume all data for connection immediately here */
 6567|      0|                rv = session_update_connection_consumed_size(
 6568|      0|                    session, (size_t)data_readlen);
 6569|       |
 6570|      0|                if (nghttp2_is_fatal(rv)) {
 6571|      0|                  return rv;
 6572|      0|                }
 6573|       |
 6574|      0|                if (iframe->state == NGHTTP2_IB_IGN_DATA) {
 6575|      0|                  return (ssize_t)inlen;
 6576|      0|                }
 6577|      0|              }
 6578|       |
 6579|      3|              rv = nghttp2_session_add_rst_stream(
 6580|      3|                  session, iframe->frame.hd.stream_id, NGHTTP2_PROTOCOL_ERROR);
 6581|      3|              if (nghttp2_is_fatal(rv)) {
 6582|      0|                return rv;
 6583|      0|              }
 6584|      3|              busy = 1;
 6585|      3|              iframe->state = NGHTTP2_IB_IGN_DATA;
 6586|      3|              break;
 6587|      3|            }
 6588|     14|          }
 6589|     11|          if (session->callbacks.on_data_chunk_recv_callback) {
 6590|     11|            rv = session->callbacks.on_data_chunk_recv_callback(
 6591|     11|                session, iframe->frame.hd.flags, iframe->frame.hd.stream_id,
 6592|     11|                in - readlen, (size_t)data_readlen, session->user_data);
 6593|     11|            if (rv == NGHTTP2_ERR_PAUSE) {
 6594|      0|              return in - first;
 6595|      0|            }
 6596|       |
 6597|     11|            if (nghttp2_is_fatal(rv)) {
 6598|      0|              return NGHTTP2_ERR_CALLBACK_FAILURE;
 6599|      0|            }
 6600|     11|          }
 6601|     11|        }
 6602|     15|      }
 6603|       |
 6604|     13|      if (iframe->payloadleft) {
 6605|      8|        break;
 6606|      8|      }
 6607|       |
 6608|      5|      rv = session_process_data_frame(session);
 6609|      5|      if (nghttp2_is_fatal(rv)) {
 6610|      0|        return rv;
 6611|      0|      }
 6612|       |
 6613|      5|      session_inbound_frame_reset(session);
 6614|       |
 6615|      5|      break;
 6616|      8|    case NGHTTP2_IB_IGN_DATA:
 6617|      8|      DEBUGF("recv: [IB_IGN_DATA]\n");
 6618|       |
 6619|      8|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6620|      8|      iframe->payloadleft -= readlen;
 6621|      8|      in += readlen;
 6622|       |
 6623|      8|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6624|      8|             iframe->payloadleft);
 6625|       |
 6626|      8|      if (readlen > 0) {
 6627|       |        /* Update connection-level flow control window for ignored
 6628|       |           DATA frame too */
 6629|      3|        rv = nghttp2_session_update_recv_connection_window_size(session,
 6630|      3|                                                                readlen);
 6631|      3|        if (nghttp2_is_fatal(rv)) {
 6632|      0|          return rv;
 6633|      0|        }
 6634|       |
 6635|      3|        if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6636|      0|          return (ssize_t)inlen;
 6637|      0|        }
 6638|       |
 6639|      3|        if (session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) {
 6640|       |
 6641|       |          /* Ignored DATA is considered as "consumed" immediately. */
 6642|      0|          rv = session_update_connection_consumed_size(session, readlen);
 6643|       |
 6644|      0|          if (nghttp2_is_fatal(rv)) {
 6645|      0|            return rv;
 6646|      0|          }
 6647|       |
 6648|      0|          if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6649|      0|            return (ssize_t)inlen;
 6650|      0|          }
 6651|      0|        }
 6652|      3|      }
 6653|       |
 6654|      8|      if (iframe->payloadleft) {
 6655|      5|        break;
 6656|      5|      }
 6657|       |
 6658|      3|      session_inbound_frame_reset(session);
 6659|       |
 6660|      3|      break;
 6661|      0|    case NGHTTP2_IB_IGN_ALL:
 6662|      0|      return (ssize_t)inlen;
 6663|      0|    case NGHTTP2_IB_READ_EXTENSION_PAYLOAD:
 6664|      0|      DEBUGF("recv: [IB_READ_EXTENSION_PAYLOAD]\n");
 6665|       |
 6666|      0|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6667|      0|      iframe->payloadleft -= readlen;
 6668|      0|      in += readlen;
 6669|       |
 6670|      0|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6671|      0|             iframe->payloadleft);
 6672|       |
 6673|      0|      if (readlen > 0) {
 6674|      0|        rv = session_call_on_extension_chunk_recv_callback(
 6675|      0|            session, in - readlen, readlen);
 6676|      0|        if (nghttp2_is_fatal(rv)) {
 6677|      0|          return rv;
 6678|      0|        }
 6679|       |
 6680|      0|        if (rv != 0) {
 6681|      0|          busy = 1;
 6682|       |
 6683|      0|          iframe->state = NGHTTP2_IB_IGN_PAYLOAD;
 6684|       |
 6685|      0|          break;
 6686|      0|        }
 6687|      0|      }
 6688|       |
 6689|      0|      if (iframe->payloadleft > 0) {
 6690|      0|        break;
 6691|      0|      }
 6692|       |
 6693|      0|      rv = session_process_extension_frame(session);
 6694|      0|      if (nghttp2_is_fatal(rv)) {
 6695|      0|        return rv;
 6696|      0|      }
 6697|       |
 6698|      0|      session_inbound_frame_reset(session);
 6699|       |
 6700|      0|      break;
 6701|      0|    case NGHTTP2_IB_READ_ALTSVC_PAYLOAD:
 6702|      0|      DEBUGF("recv: [IB_READ_ALTSVC_PAYLOAD]\n");
 6703|       |
 6704|      0|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6705|      0|      if (readlen > 0) {
 6706|      0|        iframe->lbuf.last = nghttp2_cpymem(iframe->lbuf.last, in, readlen);
 6707|       |
 6708|      0|        iframe->payloadleft -= readlen;
 6709|      0|        in += readlen;
 6710|      0|      }
 6711|       |
 6712|      0|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6713|      0|             iframe->payloadleft);
 6714|       |
 6715|      0|      if (iframe->payloadleft) {
 6716|      0|        assert(nghttp2_buf_avail(&iframe->lbuf) > 0);
 6717|       |
 6718|      0|        break;
 6719|      0|      }
 6720|       |
 6721|      0|      rv = session_process_altsvc_frame(session);
 6722|      0|      if (nghttp2_is_fatal(rv)) {
 6723|      0|        return rv;
 6724|      0|      }
 6725|       |
 6726|      0|      session_inbound_frame_reset(session);
 6727|       |
 6728|      0|      break;
 6729|      0|    case NGHTTP2_IB_READ_ORIGIN_PAYLOAD:
 6730|      0|      DEBUGF("recv: [IB_READ_ORIGIN_PAYLOAD]\n");
 6731|       |
 6732|      0|      readlen = inbound_frame_payload_readlen(iframe, in, last);
 6733|       |
 6734|      0|      if (readlen > 0) {
 6735|      0|        iframe->lbuf.last = nghttp2_cpymem(iframe->lbuf.last, in, readlen);
 6736|       |
 6737|      0|        iframe->payloadleft -= readlen;
 6738|      0|        in += readlen;
 6739|      0|      }
 6740|       |
 6741|      0|      DEBUGF("recv: readlen=%zu, payloadleft=%zu\n", readlen,
 6742|      0|             iframe->payloadleft);
 6743|       |
 6744|      0|      if (iframe->payloadleft) {
 6745|      0|        assert(nghttp2_buf_avail(&iframe->lbuf) > 0);
 6746|       |
 6747|      0|        break;
 6748|      0|      }
 6749|       |
 6750|      0|      rv = session_process_origin_frame(session);
 6751|       |
 6752|      0|      if (nghttp2_is_fatal(rv)) {
 6753|      0|        return rv;
 6754|      0|      }
 6755|       |
 6756|      0|      if (iframe->state == NGHTTP2_IB_IGN_ALL) {
 6757|      0|        return (ssize_t)inlen;
 6758|      0|      }
 6759|       |
 6760|      0|      session_inbound_frame_reset(session);
 6761|       |
 6762|      0|      break;
 6763|  5.07k|    }
 6764|       |
 6765|  4.12k|    if (!busy && in == last) {
 6766|    205|      break;
 6767|    205|    }
 6768|       |
 6769|  3.91k|    busy = 0;
 6770|  3.91k|  }
 6771|       |
 6772|    205|  assert(in == last);
 6773|       |
 6774|    205|  return in - first;
 6775|    205|}
nghttp2_session_want_read:
 6807|  28.1k|int nghttp2_session_want_read(nghttp2_session *session) {
 6808|  28.1k|  size_t num_active_streams;
 6809|       |
 6810|       |  /* If this flag is set, we don't want to read. The application
 6811|       |     should drop the connection. */
 6812|  28.1k|  if (session->goaway_flags & NGHTTP2_GOAWAY_TERM_SENT) {
 6813|  21.0k|    return 0;
 6814|  21.0k|  }
 6815|       |
 6816|  7.12k|  num_active_streams = session_get_num_active_streams(session);
 6817|       |
 6818|       |  /* Unless termination GOAWAY is sent or received, we always want to
 6819|       |     read incoming frames. */
 6820|       |
 6821|  7.12k|  if (num_active_streams > 0) {
 6822|  4.01k|    return 1;
 6823|  4.01k|  }
 6824|       |
 6825|       |  /* If there is no active streams and GOAWAY has been sent or
 6826|       |     received, we are done with this session. */
 6827|  3.11k|  return (session->goaway_flags &
 6828|  3.11k|          (NGHTTP2_GOAWAY_SENT | NGHTTP2_GOAWAY_RECV)) == 0;
 6829|  7.12k|}
nghttp2_session_want_write:
 6831|  21.2k|int nghttp2_session_want_write(nghttp2_session *session) {
 6832|       |  /* If these flag is set, we don't want to write any data. The
 6833|       |     application should drop the connection. */
 6834|  21.2k|  if (session->goaway_flags & NGHTTP2_GOAWAY_TERM_SENT) {
 6835|  21.0k|    return 0;
 6836|  21.0k|  }
 6837|       |
 6838|       |  /*
 6839|       |   * Unless termination GOAWAY is sent or received, we want to write
 6840|       |   * frames if there is pending ones. If pending frame is request/push
 6841|       |   * response HEADERS and concurrent stream limit is reached, we don't
 6842|       |   * want to write them.
 6843|       |   */
 6844|    213|  return session->aob.item || nghttp2_outbound_queue_top(&session->ob_urgent) ||
 6845|    213|         nghttp2_outbound_queue_top(&session->ob_reg) ||
 6846|    213|         (!nghttp2_pq_empty(&session->root.obq) &&
 6847|    161|          session->remote_window_size > 0) ||
 6848|    213|         (nghttp2_outbound_queue_top(&session->ob_syn) &&
 6849|    161|          !session_is_outgoing_concurrent_streams_max(session));
 6850|  21.2k|}
nghttp2_session_add_goaway:
 6894|    231|                               size_t opaque_data_len, uint8_t aux_flags) {
 6895|    231|  int rv;
 6896|    231|  nghttp2_outbound_item *item;
 6897|    231|  nghttp2_frame *frame;
 6898|    231|  uint8_t *opaque_data_copy = NULL;
 6899|    231|  nghttp2_goaway_aux_data *aux_data;
 6900|    231|  nghttp2_mem *mem;
 6901|       |
 6902|    231|  mem = &session->mem;
 6903|       |
 6904|    231|  if (nghttp2_session_is_my_stream_id(session, last_stream_id)) {
 6905|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 6906|      0|  }
 6907|       |
 6908|    231|  if (opaque_data_len) {
 6909|     96|    if (opaque_data_len + 8 > NGHTTP2_MAX_PAYLOADLEN) {
 6910|      0|      return NGHTTP2_ERR_INVALID_ARGUMENT;
 6911|      0|    }
 6912|     96|    opaque_data_copy = nghttp2_mem_malloc(mem, opaque_data_len);
 6913|     96|    if (opaque_data_copy == NULL) {
 6914|      0|      return NGHTTP2_ERR_NOMEM;
 6915|      0|    }
 6916|     96|    memcpy(opaque_data_copy, opaque_data, opaque_data_len);
 6917|     96|  }
 6918|       |
 6919|    231|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
 6920|    231|  if (item == NULL) {
 6921|      0|    nghttp2_mem_free(mem, opaque_data_copy);
 6922|      0|    return NGHTTP2_ERR_NOMEM;
 6923|      0|  }
 6924|       |
 6925|    231|  nghttp2_outbound_item_init(item);
 6926|       |
 6927|    231|  frame = &item->frame;
 6928|       |
 6929|       |  /* last_stream_id must not be increased from the value previously
 6930|       |     sent */
 6931|    231|  last_stream_id = nghttp2_min(last_stream_id, session->local_last_stream_id);
 6932|       |
 6933|    231|  nghttp2_frame_goaway_init(&frame->goaway, last_stream_id, error_code,
 6934|    231|                            opaque_data_copy, opaque_data_len);
 6935|       |
 6936|    231|  aux_data = &item->aux_data.goaway;
 6937|    231|  aux_data->flags = aux_flags;
 6938|       |
 6939|    231|  rv = nghttp2_session_add_item(session, item);
 6940|    231|  if (rv != 0) {
 6941|      0|    nghttp2_frame_goaway_free(&frame->goaway, mem);
 6942|      0|    nghttp2_mem_free(mem, item);
 6943|      0|    return rv;
 6944|      0|  }
 6945|    231|  return 0;
 6946|    231|}
nghttp2_session_add_window_update:
 6950|    704|                                      int32_t window_size_increment) {
 6951|    704|  int rv;
 6952|    704|  nghttp2_outbound_item *item;
 6953|    704|  nghttp2_frame *frame;
 6954|    704|  nghttp2_mem *mem;
 6955|       |
 6956|    704|  mem = &session->mem;
 6957|    704|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
 6958|    704|  if (item == NULL) {
 6959|      0|    return NGHTTP2_ERR_NOMEM;
 6960|      0|  }
 6961|       |
 6962|    704|  nghttp2_outbound_item_init(item);
 6963|       |
 6964|    704|  frame = &item->frame;
 6965|       |
 6966|    704|  nghttp2_frame_window_update_init(&frame->window_update, flags, stream_id,
 6967|    704|                                   window_size_increment);
 6968|       |
 6969|    704|  rv = nghttp2_session_add_item(session, item);
 6970|       |
 6971|    704|  if (rv != 0) {
 6972|      0|    nghttp2_frame_window_update_free(&frame->window_update);
 6973|      0|    nghttp2_mem_free(mem, item);
 6974|      0|    return rv;
 6975|      0|  }
 6976|    704|  return 0;
 6977|    704|}
nghttp2_session_add_settings:
 6991|  1.26k|                                 const nghttp2_settings_entry *iv, size_t niv) {
 6992|  1.26k|  nghttp2_outbound_item *item;
 6993|  1.26k|  nghttp2_frame *frame;
 6994|  1.26k|  nghttp2_settings_entry *iv_copy;
 6995|  1.26k|  size_t i;
 6996|  1.26k|  int rv;
 6997|  1.26k|  nghttp2_mem *mem;
 6998|  1.26k|  nghttp2_inflight_settings *inflight_settings = NULL;
 6999|       |
 7000|  1.26k|  mem = &session->mem;
 7001|       |
 7002|  1.26k|  if (flags & NGHTTP2_FLAG_ACK) {
 7003|    558|    if (niv != 0) {
 7004|      0|      return NGHTTP2_ERR_INVALID_ARGUMENT;
 7005|      0|    }
 7006|       |
 7007|    558|    if (session->obq_flood_counter_ >= session->max_outbound_ack) {
 7008|      0|      return NGHTTP2_ERR_FLOODED;
 7009|      0|    }
 7010|    558|  }
 7011|       |
 7012|  1.26k|  if (!nghttp2_iv_check(iv, niv)) {
 7013|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 7014|      0|  }
 7015|       |
 7016|  1.26k|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
 7017|  1.26k|  if (item == NULL) {
 7018|      0|    return NGHTTP2_ERR_NOMEM;
 7019|      0|  }
 7020|       |
 7021|  1.26k|  if (niv > 0) {
 7022|    704|    iv_copy = nghttp2_frame_iv_copy(iv, niv, mem);
 7023|    704|    if (iv_copy == NULL) {
 7024|      0|      nghttp2_mem_free(mem, item);
 7025|      0|      return NGHTTP2_ERR_NOMEM;
 7026|      0|    }
 7027|    704|  } else {
 7028|    558|    iv_copy = NULL;
 7029|    558|  }
 7030|       |
 7031|  1.26k|  if ((flags & NGHTTP2_FLAG_ACK) == 0) {
 7032|    704|    rv = inflight_settings_new(&inflight_settings, iv, niv, mem);
 7033|    704|    if (rv != 0) {
 7034|      0|      assert(nghttp2_is_fatal(rv));
 7035|      0|      nghttp2_mem_free(mem, iv_copy);
 7036|      0|      nghttp2_mem_free(mem, item);
 7037|      0|      return rv;
 7038|      0|    }
 7039|    704|  }
 7040|       |
 7041|  1.26k|  nghttp2_outbound_item_init(item);
 7042|       |
 7043|  1.26k|  frame = &item->frame;
 7044|       |
 7045|  1.26k|  nghttp2_frame_settings_init(&frame->settings, flags, iv_copy, niv);
 7046|  1.26k|  rv = nghttp2_session_add_item(session, item);
 7047|  1.26k|  if (rv != 0) {
 7048|       |    /* The only expected error is fatal one */
 7049|      0|    assert(nghttp2_is_fatal(rv));
 7050|       |
 7051|      0|    inflight_settings_del(inflight_settings, mem);
 7052|       |
 7053|      0|    nghttp2_frame_settings_free(&frame->settings, mem);
 7054|      0|    nghttp2_mem_free(mem, item);
 7055|       |
 7056|      0|    return rv;
 7057|      0|  }
 7058|       |
 7059|  1.26k|  if (flags & NGHTTP2_FLAG_ACK) {
 7060|    558|    ++session->obq_flood_counter_;
 7061|    704|  } else {
 7062|    704|    session_append_inflight_settings(session, inflight_settings);
 7063|    704|  }
 7064|       |
 7065|       |  /* Extract NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS and ENABLE_PUSH
 7066|       |     here.  We use it to refuse the incoming stream and PUSH_PROMISE
 7067|       |     with RST_STREAM. */
 7068|       |
 7069|  2.67k|  for (i = niv; i > 0; --i) {
 7070|  2.11k|    if (iv[i - 1].settings_id == NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS) {
 7071|    704|      session->pending_local_max_concurrent_stream = iv[i - 1].value;
 7072|    704|      break;
 7073|    704|    }
 7074|  2.11k|  }
 7075|       |
 7076|  1.26k|  for (i = niv; i > 0; --i) {
 7077|    704|    if (iv[i - 1].settings_id == NGHTTP2_SETTINGS_ENABLE_PUSH) {
 7078|    704|      session->pending_enable_push = (uint8_t)iv[i - 1].value;
 7079|    704|      break;
 7080|    704|    }
 7081|    704|  }
 7082|       |
 7083|  3.37k|  for (i = niv; i > 0; --i) {
 7084|  2.11k|    if (iv[i - 1].settings_id == NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL) {
 7085|      0|      session->pending_enable_connect_protocol = (uint8_t)iv[i - 1].value;
 7086|      0|      break;
 7087|      0|    }
 7088|  2.11k|  }
 7089|       |
 7090|  1.26k|  return 0;
 7091|  1.26k|}
nghttp2_session_pack_data:
 7096|     64|                              nghttp2_stream *stream) {
 7097|     64|  int rv;
 7098|     64|  uint32_t data_flags;
 7099|     64|  ssize_t payloadlen;
 7100|     64|  ssize_t padded_payloadlen;
 7101|     64|  nghttp2_buf *buf;
 7102|     64|  size_t max_payloadlen;
 7103|       |
 7104|     64|  assert(bufs->head == bufs->cur);
 7105|       |
 7106|     64|  buf = &bufs->cur->buf;
 7107|       |
 7108|     64|  if (session->callbacks.read_length_callback) {
 7109|       |
 7110|      0|    payloadlen = session->callbacks.read_length_callback(
 7111|      0|        session, frame->hd.type, stream->stream_id, session->remote_window_size,
 7112|      0|        stream->remote_window_size, session->remote_settings.max_frame_size,
 7113|      0|        session->user_data);
 7114|       |
 7115|      0|    DEBUGF("send: read_length_callback=%zd\n", payloadlen);
 7116|       |
 7117|      0|    payloadlen = nghttp2_session_enforce_flow_control_limits(session, stream,
 7118|      0|                                                             payloadlen);
 7119|       |
 7120|      0|    DEBUGF("send: read_length_callback after flow control=%zd\n", payloadlen);
 7121|       |
 7122|      0|    if (payloadlen <= 0) {
 7123|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 7124|      0|    }
 7125|       |
 7126|      0|    if ((size_t)payloadlen > nghttp2_buf_avail(buf)) {
 7127|       |      /* Resize the current buffer(s).  The reason why we do +1 for
 7128|       |         buffer size is for possible padding field. */
 7129|      0|      rv = nghttp2_bufs_realloc(&session->aob.framebufs,
 7130|      0|                                (size_t)(NGHTTP2_FRAME_HDLEN + 1 + payloadlen));
 7131|       |
 7132|      0|      if (rv != 0) {
 7133|      0|        DEBUGF("send: realloc buffer failed rv=%d", rv);
 7134|       |        /* If reallocation failed, old buffers are still in tact.  So
 7135|       |           use safe limit. */
 7136|      0|        payloadlen = (ssize_t)datamax;
 7137|       |
 7138|      0|        DEBUGF("send: use safe limit payloadlen=%zd", payloadlen);
 7139|      0|      } else {
 7140|      0|        assert(&session->aob.framebufs == bufs);
 7141|       |
 7142|      0|        buf = &bufs->cur->buf;
 7143|      0|      }
 7144|      0|    }
 7145|      0|    datamax = (size_t)payloadlen;
 7146|      0|  }
 7147|       |
 7148|       |  /* Current max DATA length is less then buffer chunk size */
 7149|     64|  assert(nghttp2_buf_avail(buf) >= datamax);
 7150|       |
 7151|     64|  data_flags = NGHTTP2_DATA_FLAG_NONE;
 7152|     64|  payloadlen = aux_data->data_prd.read_callback(
 7153|     64|      session, frame->hd.stream_id, buf->pos, datamax, &data_flags,
 7154|     64|      &aux_data->data_prd.source, session->user_data);
 7155|       |
 7156|     64|  if (payloadlen == NGHTTP2_ERR_DEFERRED ||
 7157|     64|      payloadlen == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE ||
 7158|     64|      payloadlen == NGHTTP2_ERR_PAUSE) {
 7159|     46|    DEBUGF("send: DATA postponed due to %s\n",
 7160|     46|           nghttp2_strerror((int)payloadlen));
 7161|       |
 7162|     46|    return (int)payloadlen;
 7163|     46|  }
 7164|       |
 7165|     18|  if (payloadlen < 0 || datamax < (size_t)payloadlen) {
 7166|       |    /* This is the error code when callback is failed. */
 7167|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 7168|      0|  }
 7169|       |
 7170|     18|  buf->last = buf->pos + payloadlen;
 7171|     18|  buf->pos -= NGHTTP2_FRAME_HDLEN;
 7172|       |
 7173|       |  /* Clear flags, because this may contain previous flags of previous
 7174|       |     DATA */
 7175|     18|  frame->hd.flags = NGHTTP2_FLAG_NONE;
 7176|       |
 7177|     18|  if (data_flags & NGHTTP2_DATA_FLAG_EOF) {
 7178|     11|    aux_data->eof = 1;
 7179|       |    /* If NGHTTP2_DATA_FLAG_NO_END_STREAM is set, don't set
 7180|       |       NGHTTP2_FLAG_END_STREAM */
 7181|     11|    if ((aux_data->flags & NGHTTP2_FLAG_END_STREAM) &&
 7182|     11|        (data_flags & NGHTTP2_DATA_FLAG_NO_END_STREAM) == 0) {
 7183|     11|      frame->hd.flags |= NGHTTP2_FLAG_END_STREAM;
 7184|     11|    }
 7185|     11|  }
 7186|       |
 7187|     18|  if (data_flags & NGHTTP2_DATA_FLAG_NO_COPY) {
 7188|      0|    if (session->callbacks.send_data_callback == NULL) {
 7189|      0|      DEBUGF("NGHTTP2_DATA_FLAG_NO_COPY requires send_data_callback set\n");
 7190|       |
 7191|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 7192|      0|    }
 7193|      0|    aux_data->no_copy = 1;
 7194|      0|  }
 7195|       |
 7196|     18|  frame->hd.length = (size_t)payloadlen;
 7197|     18|  frame->data.padlen = 0;
 7198|       |
 7199|     18|  max_payloadlen = nghttp2_min(datamax, frame->hd.length + NGHTTP2_MAX_PADLEN);
 7200|       |
 7201|     18|  padded_payloadlen =
 7202|     18|      session_call_select_padding(session, frame, max_payloadlen);
 7203|       |
 7204|     18|  if (nghttp2_is_fatal((int)padded_payloadlen)) {
 7205|      0|    return (int)padded_payloadlen;
 7206|      0|  }
 7207|       |
 7208|     18|  frame->data.padlen = (size_t)(padded_payloadlen - payloadlen);
 7209|       |
 7210|     18|  nghttp2_frame_pack_frame_hd(buf->pos, &frame->hd);
 7211|       |
 7212|     18|  rv = nghttp2_frame_add_pad(bufs, &frame->hd, frame->data.padlen,
 7213|     18|                             aux_data->no_copy);
 7214|     18|  if (rv != 0) {
 7215|      0|    return rv;
 7216|      0|  }
 7217|       |
 7218|     18|  reschedule_stream(stream);
 7219|       |
 7220|     18|  if (frame->hd.length == 0 && (data_flags & NGHTTP2_DATA_FLAG_EOF) &&
 7221|     18|      (data_flags & NGHTTP2_DATA_FLAG_NO_END_STREAM)) {
 7222|       |    /* DATA payload length is 0, and DATA frame does not bear
 7223|       |       END_STREAM.  In this case, there is no point to send 0 length
 7224|       |       DATA frame. */
 7225|      0|    return NGHTTP2_ERR_CANCEL;
 7226|      0|  }
 7227|       |
 7228|     18|  return 0;
 7229|     18|}
nghttp2_session_get_stream_user_data:
 7232|  2.07k|                                           int32_t stream_id) {
 7233|  2.07k|  nghttp2_stream *stream;
 7234|  2.07k|  stream = nghttp2_session_get_stream(session, stream_id);
 7235|  2.07k|  if (stream) {
 7236|  2.07k|    return stream->stream_user_data;
 7237|  2.07k|  } else {
 7238|      1|    return NULL;
 7239|      1|  }
 7240|  2.07k|}
nghttp2_session_set_stream_user_data:
 7244|    678|                                         void *stream_user_data) {
 7245|    678|  nghttp2_stream *stream;
 7246|    678|  nghttp2_frame *frame;
 7247|    678|  nghttp2_outbound_item *item;
 7248|       |
 7249|    678|  stream = nghttp2_session_get_stream(session, stream_id);
 7250|    678|  if (stream) {
 7251|    678|    stream->stream_user_data = stream_user_data;
 7252|    678|    return 0;
 7253|    678|  }
 7254|       |
 7255|      0|  if (session->server || !nghttp2_session_is_my_stream_id(session, stream_id) ||
 7256|      0|      !nghttp2_outbound_queue_top(&session->ob_syn)) {
 7257|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 7258|      0|  }
 7259|       |
 7260|      0|  frame = &nghttp2_outbound_queue_top(&session->ob_syn)->frame;
 7261|      0|  assert(frame->hd.type == NGHTTP2_HEADERS);
 7262|       |
 7263|      0|  if (frame->hd.stream_id > stream_id ||
 7264|      0|      (uint32_t)stream_id >= session->next_stream_id) {
 7265|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 7266|      0|  }
 7267|       |
 7268|      0|  for (item = session->ob_syn.head; item; item = item->qnext) {
 7269|      0|    if (item->frame.hd.stream_id < stream_id) {
 7270|      0|      continue;
 7271|      0|    }
 7272|       |
 7273|      0|    if (item->frame.hd.stream_id > stream_id) {
 7274|      0|      break;
 7275|      0|    }
 7276|       |
 7277|      0|    item->aux_data.headers.stream_user_data = stream_user_data;
 7278|      0|    return 0;
 7279|      0|  }
 7280|       |
 7281|      0|  return NGHTTP2_ERR_INVALID_ARGUMENT;
 7282|      0|}
nghttp2_session_resume_data:
 7284|    740|int nghttp2_session_resume_data(nghttp2_session *session, int32_t stream_id) {
 7285|    740|  int rv;
 7286|    740|  nghttp2_stream *stream;
 7287|    740|  stream = nghttp2_session_get_stream(session, stream_id);
 7288|    740|  if (stream == NULL || !nghttp2_stream_check_deferred_item(stream)) {
 7289|    651|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 7290|    651|  }
 7291|       |
 7292|     89|  rv = nghttp2_stream_resume_deferred_item(stream,
 7293|     89|                                           NGHTTP2_STREAM_FLAG_DEFERRED_USER);
 7294|       |
 7295|     89|  if (nghttp2_is_fatal(rv)) {
 7296|      0|    return rv;
 7297|      0|  }
 7298|       |
 7299|     89|  return 0;
 7300|     89|}
nghttp2_session_get_stream_remote_window_size:
 7366|     18|                                                      int32_t stream_id) {
 7367|     18|  nghttp2_stream *stream;
 7368|       |
 7369|     18|  stream = nghttp2_session_get_stream(session, stream_id);
 7370|     18|  if (stream == NULL) {
 7371|      0|    return -1;
 7372|      0|  }
 7373|       |
 7374|       |  /* stream->remote_window_size can be negative when
 7375|       |     SETTINGS_INITIAL_WINDOW_SIZE is changed. */
 7376|     18|  return nghttp2_max(0, stream->remote_window_size);
 7377|     18|}
nghttp2_session_get_remote_window_size:
 7379|     18|int32_t nghttp2_session_get_remote_window_size(nghttp2_session *session) {
 7380|     18|  return session->remote_window_size;
 7381|     18|}
nghttp2_session_get_remote_settings:
 7384|  1.12k|                                             nghttp2_settings_id id) {
 7385|  1.12k|  switch (id) {
 7386|      0|  case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 7387|      0|    return session->remote_settings.header_table_size;
 7388|    560|  case NGHTTP2_SETTINGS_ENABLE_PUSH:
 7389|    560|    return session->remote_settings.enable_push;
 7390|    560|  case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:
 7391|    560|    return session->remote_settings.max_concurrent_streams;
 7392|      0|  case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 7393|      0|    return session->remote_settings.initial_window_size;
 7394|      0|  case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:
 7395|      0|    return session->remote_settings.max_frame_size;
 7396|      0|  case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:
 7397|      0|    return session->remote_settings.max_header_list_size;
 7398|      0|  case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:
 7399|      0|    return session->remote_settings.enable_connect_protocol;
 7400|  1.12k|  }
 7401|       |
 7402|      0|  assert(0);
 7403|      0|  abort(); /* if NDEBUG is set */
 7404|      0|}
nghttp2_session_consume:
 7578|     14|                            size_t size) {
 7579|     14|  int rv;
 7580|     14|  nghttp2_stream *stream;
 7581|       |
 7582|     14|  if (stream_id == 0) {
 7583|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
 7584|      0|  }
 7585|       |
 7586|     14|  if (!(session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE)) {
 7587|     14|    return NGHTTP2_ERR_INVALID_STATE;
 7588|     14|  }
 7589|       |
 7590|      0|  rv = session_update_connection_consumed_size(session, size);
 7591|       |
 7592|      0|  if (nghttp2_is_fatal(rv)) {
 7593|      0|    return rv;
 7594|      0|  }
 7595|       |
 7596|      0|  stream = nghttp2_session_get_stream(session, stream_id);
 7597|       |
 7598|      0|  if (!stream) {
 7599|      0|    return 0;
 7600|      0|  }
 7601|       |
 7602|      0|  rv = session_update_stream_consumed_size(session, stream, size);
 7603|       |
 7604|      0|  if (nghttp2_is_fatal(rv)) {
 7605|      0|    return rv;
 7606|      0|  }
 7607|       |
 7608|      0|  return 0;
 7609|      0|}
nghttp2_session.c:session_terminate_session:
  213|    231|                                     uint32_t error_code, const char *reason) {
  214|    231|  int rv;
  215|    231|  const uint8_t *debug_data;
  216|    231|  size_t debug_datalen;
  217|       |
  218|    231|  if (session->goaway_flags & NGHTTP2_GOAWAY_TERM_ON_SEND) {
  219|      0|    return 0;
  220|      0|  }
  221|       |
  222|       |  /* Ignore all incoming frames because we are going to tear down the
  223|       |     session. */
  224|    231|  session->iframe.state = NGHTTP2_IB_IGN_ALL;
  225|       |
  226|    231|  if (reason == NULL) {
  227|    135|    debug_data = NULL;
  228|    135|    debug_datalen = 0;
  229|    135|  } else {
  230|     96|    debug_data = (const uint8_t *)reason;
  231|     96|    debug_datalen = strlen(reason);
  232|     96|  }
  233|       |
  234|    231|  rv = nghttp2_session_add_goaway(session, last_stream_id, error_code,
  235|    231|                                  debug_data, debug_datalen,
  236|    231|                                  NGHTTP2_GOAWAY_AUX_TERM_ON_SEND);
  237|       |
  238|    231|  if (rv != 0) {
  239|      0|    return rv;
  240|      0|  }
  241|       |
  242|    231|  session->goaway_flags |= NGHTTP2_GOAWAY_TERM_ON_SEND;
  243|       |
  244|    231|  return 0;
  245|    231|}
nghttp2_session.c:session_new:
  406|    704|                       const nghttp2_option *option, nghttp2_mem *mem) {
  407|    704|  int rv;
  408|    704|  size_t nbuffer;
  409|    704|  size_t max_deflate_dynamic_table_size =
  410|    704|      NGHTTP2_HD_DEFAULT_MAX_DEFLATE_BUFFER_SIZE;
  411|       |
  412|    704|  if (mem == NULL) {
  413|    704|    mem = nghttp2_mem_default();
  414|    704|  }
  415|       |
  416|    704|  *session_ptr = nghttp2_mem_calloc(mem, 1, sizeof(nghttp2_session));
  417|    704|  if (*session_ptr == NULL) {
  418|      0|    rv = NGHTTP2_ERR_NOMEM;
  419|      0|    goto fail_session;
  420|      0|  }
  421|       |
  422|    704|  (*session_ptr)->mem = *mem;
  423|    704|  mem = &(*session_ptr)->mem;
  424|       |
  425|       |  /* next_stream_id is initialized in either
  426|       |     nghttp2_session_client_new2 or nghttp2_session_server_new2 */
  427|       |
  428|    704|  nghttp2_stream_init(&(*session_ptr)->root, 0, NGHTTP2_STREAM_FLAG_NONE,
  429|    704|                      NGHTTP2_STREAM_IDLE, NGHTTP2_DEFAULT_WEIGHT, 0, 0, NULL,
  430|    704|                      mem);
  431|       |
  432|    704|  (*session_ptr)->remote_window_size = NGHTTP2_INITIAL_CONNECTION_WINDOW_SIZE;
  433|    704|  (*session_ptr)->recv_window_size = 0;
  434|    704|  (*session_ptr)->consumed_size = 0;
  435|    704|  (*session_ptr)->recv_reduction = 0;
  436|    704|  (*session_ptr)->local_window_size = NGHTTP2_INITIAL_CONNECTION_WINDOW_SIZE;
  437|       |
  438|    704|  (*session_ptr)->goaway_flags = NGHTTP2_GOAWAY_NONE;
  439|    704|  (*session_ptr)->local_last_stream_id = (1u << 31) - 1;
  440|    704|  (*session_ptr)->remote_last_stream_id = (1u << 31) - 1;
  441|       |
  442|    704|  (*session_ptr)->pending_local_max_concurrent_stream =
  443|    704|      NGHTTP2_DEFAULT_MAX_CONCURRENT_STREAMS;
  444|    704|  (*session_ptr)->pending_enable_push = 1;
  445|       |
  446|    704|  if (server) {
  447|      0|    (*session_ptr)->server = 1;
  448|      0|  }
  449|       |
  450|    704|  init_settings(&(*session_ptr)->remote_settings);
  451|    704|  init_settings(&(*session_ptr)->local_settings);
  452|       |
  453|    704|  (*session_ptr)->max_incoming_reserved_streams =
  454|    704|      NGHTTP2_MAX_INCOMING_RESERVED_STREAMS;
  455|       |
  456|       |  /* Limit max outgoing concurrent streams to sensible value */
  457|    704|  (*session_ptr)->remote_settings.max_concurrent_streams = 100;
  458|       |
  459|    704|  (*session_ptr)->max_send_header_block_length = NGHTTP2_MAX_HEADERSLEN;
  460|    704|  (*session_ptr)->max_outbound_ack = NGHTTP2_DEFAULT_MAX_OBQ_FLOOD_ITEM;
  461|    704|  (*session_ptr)->max_settings = NGHTTP2_DEFAULT_MAX_SETTINGS;
  462|       |
  463|    704|  if (option) {
  464|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_NO_AUTO_WINDOW_UPDATE) &&
  465|      0|        option->no_auto_window_update) {
  466|       |
  467|      0|      (*session_ptr)->opt_flags |= NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE;
  468|      0|    }
  469|       |
  470|      0|    if (option->opt_set_mask & NGHTTP2_OPT_PEER_MAX_CONCURRENT_STREAMS) {
  471|       |
  472|      0|      (*session_ptr)->remote_settings.max_concurrent_streams =
  473|      0|          option->peer_max_concurrent_streams;
  474|      0|    }
  475|       |
  476|      0|    if (option->opt_set_mask & NGHTTP2_OPT_MAX_RESERVED_REMOTE_STREAMS) {
  477|       |
  478|      0|      (*session_ptr)->max_incoming_reserved_streams =
  479|      0|          option->max_reserved_remote_streams;
  480|      0|    }
  481|       |
  482|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_NO_RECV_CLIENT_MAGIC) &&
  483|      0|        option->no_recv_client_magic) {
  484|       |
  485|      0|      (*session_ptr)->opt_flags |= NGHTTP2_OPTMASK_NO_RECV_CLIENT_MAGIC;
  486|      0|    }
  487|       |
  488|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_NO_HTTP_MESSAGING) &&
  489|      0|        option->no_http_messaging) {
  490|       |
  491|      0|      (*session_ptr)->opt_flags |= NGHTTP2_OPTMASK_NO_HTTP_MESSAGING;
  492|      0|    }
  493|       |
  494|      0|    if (option->opt_set_mask & NGHTTP2_OPT_USER_RECV_EXT_TYPES) {
  495|      0|      memcpy((*session_ptr)->user_recv_ext_types, option->user_recv_ext_types,
  496|      0|             sizeof((*session_ptr)->user_recv_ext_types));
  497|      0|    }
  498|       |
  499|      0|    if (option->opt_set_mask & NGHTTP2_OPT_BUILTIN_RECV_EXT_TYPES) {
  500|      0|      (*session_ptr)->builtin_recv_ext_types = option->builtin_recv_ext_types;
  501|      0|    }
  502|       |
  503|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_NO_AUTO_PING_ACK) &&
  504|      0|        option->no_auto_ping_ack) {
  505|      0|      (*session_ptr)->opt_flags |= NGHTTP2_OPTMASK_NO_AUTO_PING_ACK;
  506|      0|    }
  507|       |
  508|      0|    if (option->opt_set_mask & NGHTTP2_OPT_MAX_SEND_HEADER_BLOCK_LENGTH) {
  509|      0|      (*session_ptr)->max_send_header_block_length =
  510|      0|          option->max_send_header_block_length;
  511|      0|    }
  512|       |
  513|      0|    if (option->opt_set_mask & NGHTTP2_OPT_MAX_DEFLATE_DYNAMIC_TABLE_SIZE) {
  514|      0|      max_deflate_dynamic_table_size = option->max_deflate_dynamic_table_size;
  515|      0|    }
  516|       |
  517|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_NO_CLOSED_STREAMS) &&
  518|      0|        option->no_closed_streams) {
  519|      0|      (*session_ptr)->opt_flags |= NGHTTP2_OPTMASK_NO_CLOSED_STREAMS;
  520|      0|    }
  521|       |
  522|      0|    if (option->opt_set_mask & NGHTTP2_OPT_MAX_OUTBOUND_ACK) {
  523|      0|      (*session_ptr)->max_outbound_ack = option->max_outbound_ack;
  524|      0|    }
  525|       |
  526|      0|    if ((option->opt_set_mask & NGHTTP2_OPT_MAX_SETTINGS) &&
  527|      0|        option->max_settings) {
  528|      0|      (*session_ptr)->max_settings = option->max_settings;
  529|      0|    }
  530|      0|  }
  531|       |
  532|    704|  rv = nghttp2_hd_deflate_init2(&(*session_ptr)->hd_deflater,
  533|    704|                                max_deflate_dynamic_table_size, mem);
  534|    704|  if (rv != 0) {
  535|      0|    goto fail_hd_deflater;
  536|      0|  }
  537|    704|  rv = nghttp2_hd_inflate_init(&(*session_ptr)->hd_inflater, mem);
  538|    704|  if (rv != 0) {
  539|      0|    goto fail_hd_inflater;
  540|      0|  }
  541|    704|  rv = nghttp2_map_init(&(*session_ptr)->streams, mem);
  542|    704|  if (rv != 0) {
  543|      0|    goto fail_map;
  544|      0|  }
  545|       |
  546|    704|  nbuffer = ((*session_ptr)->max_send_header_block_length +
  547|    704|             NGHTTP2_FRAMEBUF_CHUNKLEN - 1) /
  548|    704|            NGHTTP2_FRAMEBUF_CHUNKLEN;
  549|       |
  550|    704|  if (nbuffer == 0) {
  551|      0|    nbuffer = 1;
  552|      0|  }
  553|       |
  554|       |  /* 1 for Pad Field. */
  555|    704|  rv = nghttp2_bufs_init3(&(*session_ptr)->aob.framebufs,
  556|    704|                          NGHTTP2_FRAMEBUF_CHUNKLEN, nbuffer, 1,
  557|    704|                          NGHTTP2_FRAME_HDLEN + 1, mem);
  558|    704|  if (rv != 0) {
  559|      0|    goto fail_aob_framebuf;
  560|      0|  }
  561|       |
  562|    704|  active_outbound_item_reset(&(*session_ptr)->aob, mem);
  563|       |
  564|    704|  (*session_ptr)->callbacks = *callbacks;
  565|    704|  (*session_ptr)->user_data = user_data;
  566|       |
  567|    704|  session_inbound_frame_reset(*session_ptr);
  568|       |
  569|    704|  if (nghttp2_enable_strict_preface) {
  570|    704|    nghttp2_inbound_frame *iframe = &(*session_ptr)->iframe;
  571|       |
  572|    704|    if (server && ((*session_ptr)->opt_flags &
  573|      0|                   NGHTTP2_OPTMASK_NO_RECV_CLIENT_MAGIC) == 0) {
  574|      0|      iframe->state = NGHTTP2_IB_READ_CLIENT_MAGIC;
  575|      0|      iframe->payloadleft = NGHTTP2_CLIENT_MAGIC_LEN;
  576|    704|    } else {
  577|    704|      iframe->state = NGHTTP2_IB_READ_FIRST_SETTINGS;
  578|    704|    }
  579|       |
  580|    704|    if (!server) {
  581|    704|      (*session_ptr)->aob.state = NGHTTP2_OB_SEND_CLIENT_MAGIC;
  582|    704|      nghttp2_bufs_add(&(*session_ptr)->aob.framebufs, NGHTTP2_CLIENT_MAGIC,
  583|    704|                       NGHTTP2_CLIENT_MAGIC_LEN);
  584|    704|    }
  585|    704|  }
  586|       |
  587|    704|  return 0;
  588|       |
  589|      0|fail_aob_framebuf:
  590|      0|  nghttp2_map_free(&(*session_ptr)->streams);
  591|      0|fail_map:
  592|      0|  nghttp2_hd_inflate_free(&(*session_ptr)->hd_inflater);
  593|      0|fail_hd_inflater:
  594|      0|  nghttp2_hd_deflate_free(&(*session_ptr)->hd_deflater);
  595|      0|fail_hd_deflater:
  596|      0|  nghttp2_mem_free(mem, *session_ptr);
  597|      0|fail_session:
  598|      0|  return rv;
  599|      0|}
nghttp2_session.c:init_settings:
  381|  1.40k|static void init_settings(nghttp2_settings_storage *settings) {
  382|  1.40k|  settings->header_table_size = NGHTTP2_HD_DEFAULT_MAX_BUFFER_SIZE;
  383|  1.40k|  settings->enable_push = 1;
  384|  1.40k|  settings->max_concurrent_streams = NGHTTP2_DEFAULT_MAX_CONCURRENT_STREAMS;
  385|  1.40k|  settings->initial_window_size = NGHTTP2_INITIAL_WINDOW_SIZE;
  386|  1.40k|  settings->max_frame_size = NGHTTP2_MAX_FRAME_SIZE_MIN;
  387|  1.40k|  settings->max_header_list_size = UINT32_MAX;
  388|  1.40k|}
nghttp2_session.c:inflight_settings_del:
  726|    704|                                  nghttp2_mem *mem) {
  727|    704|  if (!settings) {
  728|      0|    return;
  729|      0|  }
  730|       |
  731|    704|  nghttp2_mem_free(mem, settings->iv);
  732|    704|  nghttp2_mem_free(mem, settings);
  733|    704|}
nghttp2_session.c:free_streams:
  669|    221|static int free_streams(nghttp2_map_entry *entry, void *ptr) {
  670|    221|  nghttp2_session *session;
  671|    221|  nghttp2_stream *stream;
  672|    221|  nghttp2_outbound_item *item;
  673|    221|  nghttp2_mem *mem;
  674|       |
  675|    221|  session = (nghttp2_session *)ptr;
  676|    221|  mem = &session->mem;
  677|    221|  stream = (nghttp2_stream *)entry;
  678|    221|  item = stream->item;
  679|       |
  680|    221|  if (item && !item->queued && item != session->aob.item) {
  681|      0|    nghttp2_outbound_item_free(item, mem);
  682|      0|    nghttp2_mem_free(mem, item);
  683|      0|  }
  684|       |
  685|    221|  nghttp2_stream_free(stream);
  686|    221|  nghttp2_mem_free(mem, stream);
  687|       |
  688|    221|  return 0;
  689|    221|}
nghttp2_session.c:ob_q_free:
  691|  2.11k|static void ob_q_free(nghttp2_outbound_queue *q, nghttp2_mem *mem) {
  692|  2.11k|  nghttp2_outbound_item *item, *next;
  693|  2.11k|  for (item = q->head; item;) {
  694|      0|    next = item->qnext;
  695|      0|    nghttp2_outbound_item_free(item, mem);
  696|      0|    nghttp2_mem_free(mem, item);
  697|      0|    item = next;
  698|      0|  }
  699|  2.11k|}
nghttp2_session.c:active_outbound_item_reset:
  391|  5.65k|                                       nghttp2_mem *mem) {
  392|  5.65k|  DEBUGF("send: reset nghttp2_active_outbound_item\n");
  393|  5.65k|  DEBUGF("send: aob->item = %p\n", aob->item);
  394|  5.65k|  nghttp2_outbound_item_free(aob->item, mem);
  395|  5.65k|  nghttp2_mem_free(mem, aob->item);
  396|  5.65k|  aob->item = NULL;
  397|  5.65k|  nghttp2_bufs_reset(&aob->framebufs);
  398|  5.65k|  aob->state = NGHTTP2_OB_POP_ITEM;
  399|  5.65k|}
nghttp2_session.c:session_inbound_frame_reset:
  298|  2.11k|static void session_inbound_frame_reset(nghttp2_session *session) {
  299|  2.11k|  nghttp2_inbound_frame *iframe = &session->iframe;
  300|  2.11k|  nghttp2_mem *mem = &session->mem;
  301|       |  /* A bit risky code, since if this function is called from
  302|       |     nghttp2_session_new(), we rely on the fact that
  303|       |     iframe->frame.hd.type is 0, so that no free is performed. */
  304|  2.11k|  switch (iframe->frame.hd.type) {
  305|  1.11k|  case NGHTTP2_DATA:
  306|  1.11k|    break;
  307|    255|  case NGHTTP2_HEADERS:
  308|    255|    nghttp2_frame_headers_free(&iframe->frame.headers, mem);
  309|    255|    break;
  310|      5|  case NGHTTP2_PRIORITY:
  311|      5|    nghttp2_frame_priority_free(&iframe->frame.priority);
  312|      5|    break;
  313|      7|  case NGHTTP2_RST_STREAM:
  314|      7|    nghttp2_frame_rst_stream_free(&iframe->frame.rst_stream);
  315|      7|    break;
  316|    587|  case NGHTTP2_SETTINGS:
  317|    587|    nghttp2_frame_settings_free(&iframe->frame.settings, mem);
  318|       |
  319|    587|    nghttp2_mem_free(mem, iframe->iv);
  320|       |
  321|    587|    iframe->iv = NULL;
  322|    587|    iframe->niv = 0;
  323|    587|    iframe->max_niv = 0;
  324|       |
  325|    587|    break;
  326|     25|  case NGHTTP2_PUSH_PROMISE:
  327|     25|    nghttp2_frame_push_promise_free(&iframe->frame.push_promise, mem);
  328|     25|    break;
  329|      1|  case NGHTTP2_PING:
  330|      1|    nghttp2_frame_ping_free(&iframe->frame.ping);
  331|      1|    break;
  332|     28|  case NGHTTP2_GOAWAY:
  333|     28|    nghttp2_frame_goaway_free(&iframe->frame.goaway, mem);
  334|     28|    break;
  335|      1|  case NGHTTP2_WINDOW_UPDATE:
  336|      1|    nghttp2_frame_window_update_free(&iframe->frame.window_update);
  337|      1|    break;
  338|     92|  default:
  339|       |    /* extension frame */
  340|     92|    if (check_ext_type_set(session->user_recv_ext_types,
  341|     92|                           iframe->frame.hd.type)) {
  342|      0|      nghttp2_frame_extension_free(&iframe->frame.ext);
  343|     92|    } else {
  344|     92|      switch (iframe->frame.hd.type) {
  345|      6|      case NGHTTP2_ALTSVC:
  346|      6|        if ((session->builtin_recv_ext_types & NGHTTP2_TYPEMASK_ALTSVC) == 0) {
  347|      6|          break;
  348|      6|        }
  349|      0|        nghttp2_frame_altsvc_free(&iframe->frame.ext, mem);
  350|      0|        break;
  351|     11|      case NGHTTP2_ORIGIN:
  352|     11|        if ((session->builtin_recv_ext_types & NGHTTP2_TYPEMASK_ORIGIN) == 0) {
  353|     11|          break;
  354|     11|        }
  355|      0|        nghttp2_frame_origin_free(&iframe->frame.ext, mem);
  356|      0|        break;
  357|     92|      }
  358|     92|    }
  359|       |
  360|     92|    break;
  361|  2.11k|  }
  362|       |
  363|  2.11k|  memset(&iframe->frame, 0, sizeof(nghttp2_frame));
  364|  2.11k|  memset(&iframe->ext_frame_payload, 0, sizeof(nghttp2_ext_frame_payload));
  365|       |
  366|  2.11k|  iframe->state = NGHTTP2_IB_READ_HEAD;
  367|       |
  368|  2.11k|  nghttp2_buf_wrap_init(&iframe->sbuf, iframe->raw_sbuf,
  369|  2.11k|                        sizeof(iframe->raw_sbuf));
  370|  2.11k|  iframe->sbuf.mark += NGHTTP2_FRAME_HDLEN;
  371|       |
  372|  2.11k|  nghttp2_buf_free(&iframe->lbuf, mem);
  373|  2.11k|  nghttp2_buf_wrap_init(&iframe->lbuf, NULL, 0);
  374|       |
  375|  2.11k|  iframe->raw_lbuf = NULL;
  376|       |
  377|  2.11k|  iframe->payloadleft = 0;
  378|  2.11k|  iframe->padlen = 0;
  379|  2.11k|}
nghttp2_session.c:session_detect_idle_stream:
  132|     56|                                      int32_t stream_id) {
  133|       |  /* Assume that stream object with stream_id does not exist */
  134|     56|  if (nghttp2_session_is_my_stream_id(session, stream_id)) {
  135|     48|    if (session->last_sent_stream_id < stream_id) {
  136|      5|      return 1;
  137|      5|    }
  138|     43|    return 0;
  139|     48|  }
  140|      8|  if (session_is_new_peer_stream_id(session, stream_id)) {
  141|      8|    return 1;
  142|      8|  }
  143|      0|  return 0;
  144|      8|}
nghttp2_session.c:session_is_closing:
 1449|  4.31k|static int session_is_closing(nghttp2_session *session) {
 1450|  4.31k|  return (session->goaway_flags & NGHTTP2_GOAWAY_TERM_ON_SEND) != 0 ||
 1451|  4.31k|         (nghttp2_session_want_read(session) == 0 &&
 1452|  3.60k|          nghttp2_session_want_write(session) == 0);
 1453|  4.31k|}
nghttp2_session.c:session_is_outgoing_concurrent_streams_max:
   47|  3.02k|session_is_outgoing_concurrent_streams_max(nghttp2_session *session) {
   48|  3.02k|  return session->remote_settings.max_concurrent_streams <=
   49|  3.02k|         session->num_outgoing_streams;
   50|  3.02k|}
nghttp2_session.c:nghttp2_session_mem_send_internal:
 2893|  5.96k|                                                 int fast_cb) {
 2894|  5.96k|  int rv;
 2895|  5.96k|  nghttp2_active_outbound_item *aob;
 2896|  5.96k|  nghttp2_bufs *framebufs;
 2897|  5.96k|  nghttp2_mem *mem;
 2898|       |
 2899|  5.96k|  mem = &session->mem;
 2900|  5.96k|  aob = &session->aob;
 2901|  5.96k|  framebufs = &aob->framebufs;
 2902|       |
 2903|       |  /* We may have idle streams more than we expect (e.g.,
 2904|       |     nghttp2_session_change_stream_priority() or
 2905|       |     nghttp2_session_create_idle_stream()).  Adjust them here. */
 2906|  5.96k|  rv = nghttp2_session_adjust_idle_stream(session);
 2907|  5.96k|  if (nghttp2_is_fatal(rv)) {
 2908|      0|    return rv;
 2909|      0|  }
 2910|       |
 2911|  13.2k|  for (;;) {
 2912|  13.2k|    switch (aob->state) {
 2913|  5.80k|    case NGHTTP2_OB_POP_ITEM: {
 2914|  5.80k|      nghttp2_outbound_item *item;
 2915|       |
 2916|  5.80k|      item = nghttp2_session_pop_next_ob_item(session);
 2917|  5.80k|      if (item == NULL) {
 2918|  2.27k|        return 0;
 2919|  2.27k|      }
 2920|       |
 2921|  3.53k|      rv = session_prep_frame(session, item);
 2922|  3.53k|      if (rv == NGHTTP2_ERR_PAUSE) {
 2923|      0|        return 0;
 2924|      0|      }
 2925|  3.53k|      if (rv == NGHTTP2_ERR_DEFERRED) {
 2926|     54|        DEBUGF("send: frame transmission deferred\n");
 2927|     54|        break;
 2928|     54|      }
 2929|  3.48k|      if (rv < 0) {
 2930|    490|        int32_t opened_stream_id = 0;
 2931|    490|        uint32_t error_code = NGHTTP2_INTERNAL_ERROR;
 2932|       |
 2933|    490|        DEBUGF("send: frame preparation failed with %s\n",
 2934|    490|               nghttp2_strerror(rv));
 2935|       |        /* TODO If the error comes from compressor, the connection
 2936|       |           must be closed. */
 2937|    490|        if (item->frame.hd.type != NGHTTP2_DATA &&
 2938|    490|            session->callbacks.on_frame_not_send_callback && is_non_fatal(rv)) {
 2939|      0|          nghttp2_frame *frame = &item->frame;
 2940|       |          /* The library is responsible for the transmission of
 2941|       |             WINDOW_UPDATE frame, so we don't call error callback for
 2942|       |             it. */
 2943|      0|          if (frame->hd.type != NGHTTP2_WINDOW_UPDATE &&
 2944|      0|              session->callbacks.on_frame_not_send_callback(
 2945|      0|                  session, frame, rv, session->user_data) != 0) {
 2946|       |
 2947|      0|            nghttp2_outbound_item_free(item, mem);
 2948|      0|            nghttp2_mem_free(mem, item);
 2949|       |
 2950|      0|            return NGHTTP2_ERR_CALLBACK_FAILURE;
 2951|      0|          }
 2952|      0|        }
 2953|       |        /* We have to close stream opened by failed request HEADERS
 2954|       |           or PUSH_PROMISE. */
 2955|    490|        switch (item->frame.hd.type) {
 2956|      0|        case NGHTTP2_HEADERS:
 2957|      0|          if (item->frame.headers.cat == NGHTTP2_HCAT_REQUEST) {
 2958|      0|            opened_stream_id = item->frame.hd.stream_id;
 2959|      0|            if (item->aux_data.headers.canceled) {
 2960|      0|              error_code = item->aux_data.headers.error_code;
 2961|      0|            } else {
 2962|       |              /* Set error_code to REFUSED_STREAM so that application
 2963|       |                 can send request again. */
 2964|      0|              error_code = NGHTTP2_REFUSED_STREAM;
 2965|      0|            }
 2966|      0|          }
 2967|      0|          break;
 2968|      0|        case NGHTTP2_PUSH_PROMISE:
 2969|      0|          opened_stream_id = item->frame.push_promise.promised_stream_id;
 2970|      0|          break;
 2971|    490|        }
 2972|    490|        if (opened_stream_id) {
 2973|       |          /* careful not to override rv */
 2974|      0|          int rv2;
 2975|      0|          rv2 = nghttp2_session_close_stream(session, opened_stream_id,
 2976|      0|                                             error_code);
 2977|       |
 2978|      0|          if (nghttp2_is_fatal(rv2)) {
 2979|      0|            return rv2;
 2980|      0|          }
 2981|      0|        }
 2982|       |
 2983|    490|        nghttp2_outbound_item_free(item, mem);
 2984|    490|        nghttp2_mem_free(mem, item);
 2985|    490|        active_outbound_item_reset(aob, mem);
 2986|       |
 2987|    490|        if (rv == NGHTTP2_ERR_HEADER_COMP) {
 2988|       |          /* If header compression error occurred, should terminiate
 2989|       |             connection. */
 2990|      0|          rv = nghttp2_session_terminate_session(session,
 2991|      0|                                                 NGHTTP2_INTERNAL_ERROR);
 2992|      0|        }
 2993|    490|        if (nghttp2_is_fatal(rv)) {
 2994|      0|          return rv;
 2995|      0|        }
 2996|    490|        break;
 2997|    490|      }
 2998|       |
 2999|  2.99k|      aob->item = item;
 3000|       |
 3001|  2.99k|      nghttp2_bufs_rewind(framebufs);
 3002|       |
 3003|  2.99k|      if (item->frame.hd.type != NGHTTP2_DATA) {
 3004|  2.97k|        nghttp2_frame *frame;
 3005|       |
 3006|  2.97k|        frame = &item->frame;
 3007|       |
 3008|  2.97k|        DEBUGF("send: next frame: payloadlen=%zu, type=%u, flags=0x%02x, "
 3009|  2.97k|               "stream_id=%d\n",
 3010|  2.97k|               frame->hd.length, frame->hd.type, frame->hd.flags,
 3011|  2.97k|               frame->hd.stream_id);
 3012|       |
 3013|  2.97k|        rv = session_call_before_frame_send(session, frame);
 3014|  2.97k|        if (nghttp2_is_fatal(rv)) {
 3015|      0|          return rv;
 3016|      0|        }
 3017|       |
 3018|  2.97k|        if (rv == NGHTTP2_ERR_CANCEL) {
 3019|      0|          int32_t opened_stream_id = 0;
 3020|      0|          uint32_t error_code = NGHTTP2_INTERNAL_ERROR;
 3021|       |
 3022|      0|          if (session->callbacks.on_frame_not_send_callback) {
 3023|      0|            if (session->callbacks.on_frame_not_send_callback(
 3024|      0|                    session, frame, rv, session->user_data) != 0) {
 3025|      0|              return NGHTTP2_ERR_CALLBACK_FAILURE;
 3026|      0|            }
 3027|      0|          }
 3028|       |
 3029|       |          /* We have to close stream opened by canceled request
 3030|       |             HEADERS or PUSH_PROMISE. */
 3031|      0|          switch (item->frame.hd.type) {
 3032|      0|          case NGHTTP2_HEADERS:
 3033|      0|            if (item->frame.headers.cat == NGHTTP2_HCAT_REQUEST) {
 3034|      0|              opened_stream_id = item->frame.hd.stream_id;
 3035|       |              /* We don't have to check
 3036|       |                 item->aux_data.headers.canceled since it has already
 3037|       |                 been checked. */
 3038|       |              /* Set error_code to REFUSED_STREAM so that application
 3039|       |                 can send request again. */
 3040|      0|              error_code = NGHTTP2_REFUSED_STREAM;
 3041|      0|            }
 3042|      0|            break;
 3043|      0|          case NGHTTP2_PUSH_PROMISE:
 3044|      0|            opened_stream_id = item->frame.push_promise.promised_stream_id;
 3045|      0|            break;
 3046|      0|          }
 3047|      0|          if (opened_stream_id) {
 3048|       |            /* careful not to override rv */
 3049|      0|            int rv2;
 3050|      0|            rv2 = nghttp2_session_close_stream(session, opened_stream_id,
 3051|      0|                                               error_code);
 3052|       |
 3053|      0|            if (nghttp2_is_fatal(rv2)) {
 3054|      0|              return rv2;
 3055|      0|            }
 3056|      0|          }
 3057|       |
 3058|      0|          active_outbound_item_reset(aob, mem);
 3059|       |
 3060|      0|          break;
 3061|      0|        }
 3062|  2.97k|      } else {
 3063|     18|        DEBUGF("send: next frame: DATA\n");
 3064|       |
 3065|     18|        if (item->aux_data.data.no_copy) {
 3066|      0|          aob->state = NGHTTP2_OB_SEND_NO_COPY;
 3067|      0|          break;
 3068|      0|        }
 3069|     18|      }
 3070|       |
 3071|  2.99k|      DEBUGF("send: start transmitting frame type=%u, length=%zd\n",
 3072|  2.99k|             framebufs->cur->buf.pos[3],
 3073|  2.99k|             framebufs->cur->buf.last - framebufs->cur->buf.pos);
 3074|       |
 3075|  2.99k|      aob->state = NGHTTP2_OB_SEND_DATA;
 3076|       |
 3077|  2.99k|      break;
 3078|  2.99k|    }
 3079|  5.98k|    case NGHTTP2_OB_SEND_DATA: {
 3080|  5.98k|      size_t datalen;
 3081|  5.98k|      nghttp2_buf *buf;
 3082|       |
 3083|  5.98k|      buf = &framebufs->cur->buf;
 3084|       |
 3085|  5.98k|      if (buf->pos == buf->last) {
 3086|  2.99k|        DEBUGF("send: end transmission of a frame\n");
 3087|       |
 3088|       |        /* Frame has completely sent */
 3089|  2.99k|        if (fast_cb) {
 3090|      0|          rv = session_after_frame_sent2(session);
 3091|  2.99k|        } else {
 3092|  2.99k|          rv = session_after_frame_sent1(session);
 3093|  2.99k|          if (rv < 0) {
 3094|       |            /* FATAL */
 3095|      0|            assert(nghttp2_is_fatal(rv));
 3096|      0|            return rv;
 3097|      0|          }
 3098|  2.99k|          rv = session_after_frame_sent2(session);
 3099|  2.99k|        }
 3100|  2.99k|        if (rv < 0) {
 3101|       |          /* FATAL */
 3102|      0|          assert(nghttp2_is_fatal(rv));
 3103|      0|          return rv;
 3104|      0|        }
 3105|       |        /* We have already adjusted the next state */
 3106|  2.99k|        break;
 3107|  2.99k|      }
 3108|       |
 3109|  2.99k|      *data_ptr = buf->pos;
 3110|  2.99k|      datalen = nghttp2_buf_len(buf);
 3111|       |
 3112|       |      /* We increment the offset here. If send_callback does not send
 3113|       |         everything, we will adjust it. */
 3114|  2.99k|      buf->pos += datalen;
 3115|       |
 3116|  2.99k|      return (ssize_t)datalen;
 3117|  5.98k|    }
 3118|      0|    case NGHTTP2_OB_SEND_NO_COPY: {
 3119|      0|      nghttp2_stream *stream;
 3120|      0|      nghttp2_frame *frame;
 3121|      0|      int pause;
 3122|       |
 3123|      0|      DEBUGF("send: no copy DATA\n");
 3124|       |
 3125|      0|      frame = &aob->item->frame;
 3126|       |
 3127|      0|      stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 3128|      0|      if (stream == NULL) {
 3129|      0|        DEBUGF("send: no copy DATA cancelled because stream was closed\n");
 3130|       |
 3131|      0|        active_outbound_item_reset(aob, mem);
 3132|       |
 3133|      0|        break;
 3134|      0|      }
 3135|       |
 3136|      0|      rv = session_call_send_data(session, aob->item, framebufs);
 3137|      0|      if (nghttp2_is_fatal(rv)) {
 3138|      0|        return rv;
 3139|      0|      }
 3140|       |
 3141|      0|      if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 3142|      0|        rv = nghttp2_stream_detach_item(stream);
 3143|       |
 3144|      0|        if (nghttp2_is_fatal(rv)) {
 3145|      0|          return rv;
 3146|      0|        }
 3147|       |
 3148|      0|        rv = nghttp2_session_add_rst_stream(session, frame->hd.stream_id,
 3149|      0|                                            NGHTTP2_INTERNAL_ERROR);
 3150|      0|        if (nghttp2_is_fatal(rv)) {
 3151|      0|          return rv;
 3152|      0|        }
 3153|       |
 3154|      0|        active_outbound_item_reset(aob, mem);
 3155|       |
 3156|      0|        break;
 3157|      0|      }
 3158|       |
 3159|      0|      if (rv == NGHTTP2_ERR_WOULDBLOCK) {
 3160|      0|        return 0;
 3161|      0|      }
 3162|       |
 3163|      0|      pause = (rv == NGHTTP2_ERR_PAUSE);
 3164|       |
 3165|      0|      rv = session_after_frame_sent1(session);
 3166|      0|      if (rv < 0) {
 3167|      0|        assert(nghttp2_is_fatal(rv));
 3168|      0|        return rv;
 3169|      0|      }
 3170|      0|      rv = session_after_frame_sent2(session);
 3171|      0|      if (rv < 0) {
 3172|      0|        assert(nghttp2_is_fatal(rv));
 3173|      0|        return rv;
 3174|      0|      }
 3175|       |
 3176|       |      /* We have already adjusted the next state */
 3177|       |
 3178|      0|      if (pause) {
 3179|      0|        return 0;
 3180|      0|      }
 3181|       |
 3182|      0|      break;
 3183|      0|    }
 3184|  1.40k|    case NGHTTP2_OB_SEND_CLIENT_MAGIC: {
 3185|  1.40k|      size_t datalen;
 3186|  1.40k|      nghttp2_buf *buf;
 3187|       |
 3188|  1.40k|      buf = &framebufs->cur->buf;
 3189|       |
 3190|  1.40k|      if (buf->pos == buf->last) {
 3191|    704|        DEBUGF("send: end transmission of client magic\n");
 3192|    704|        active_outbound_item_reset(aob, mem);
 3193|    704|        break;
 3194|    704|      }
 3195|       |
 3196|    704|      *data_ptr = buf->pos;
 3197|    704|      datalen = nghttp2_buf_len(buf);
 3198|       |
 3199|    704|      buf->pos += datalen;
 3200|       |
 3201|    704|      return (ssize_t)datalen;
 3202|  1.40k|    }
 3203|  13.2k|    }
 3204|  13.2k|  }
 3205|  5.96k|}
nghttp2_session.c:session_prep_frame:
 1977|  3.53k|                              nghttp2_outbound_item *item) {
 1978|  3.53k|  int rv;
 1979|  3.53k|  nghttp2_frame *frame;
 1980|  3.53k|  nghttp2_mem *mem;
 1981|       |
 1982|  3.53k|  mem = &session->mem;
 1983|  3.53k|  frame = &item->frame;
 1984|       |
 1985|  3.53k|  switch (frame->hd.type) {
 1986|     76|  case NGHTTP2_DATA: {
 1987|     76|    size_t next_readmax;
 1988|     76|    nghttp2_stream *stream;
 1989|       |
 1990|     76|    stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 1991|       |
 1992|     76|    if (stream) {
 1993|     76|      assert(stream->item == item);
 1994|     76|    }
 1995|       |
 1996|     76|    rv = nghttp2_session_predicate_data_send(session, stream);
 1997|     76|    if (rv != 0) {
 1998|       |      // If stream was already closed, nghttp2_session_get_stream()
 1999|       |      // returns NULL, but item is still attached to the stream.
 2000|       |      // Search stream including closed again.
 2001|      4|      stream = nghttp2_session_get_stream_raw(session, frame->hd.stream_id);
 2002|      4|      if (stream) {
 2003|      4|        int rv2;
 2004|       |
 2005|      4|        rv2 = nghttp2_stream_detach_item(stream);
 2006|       |
 2007|      4|        if (nghttp2_is_fatal(rv2)) {
 2008|      0|          return rv2;
 2009|      0|        }
 2010|      4|      }
 2011|       |
 2012|      4|      return rv;
 2013|      4|    }
 2014|       |    /* Assuming stream is not NULL */
 2015|     72|    assert(stream);
 2016|     72|    next_readmax = nghttp2_session_next_data_read(session, stream);
 2017|       |
 2018|     72|    if (next_readmax == 0) {
 2019|       |
 2020|       |      /* This must be true since we only pop DATA frame item from
 2021|       |         queue when session->remote_window_size > 0 */
 2022|      8|      assert(session->remote_window_size > 0);
 2023|       |
 2024|      8|      rv = nghttp2_stream_defer_item(stream,
 2025|      8|                                     NGHTTP2_STREAM_FLAG_DEFERRED_FLOW_CONTROL);
 2026|       |
 2027|      8|      if (nghttp2_is_fatal(rv)) {
 2028|      0|        return rv;
 2029|      0|      }
 2030|       |
 2031|      8|      session->aob.item = NULL;
 2032|      8|      active_outbound_item_reset(&session->aob, mem);
 2033|      8|      return NGHTTP2_ERR_DEFERRED;
 2034|      8|    }
 2035|       |
 2036|     64|    rv = nghttp2_session_pack_data(session, &session->aob.framebufs,
 2037|     64|                                   next_readmax, frame, &item->aux_data.data,
 2038|     64|                                   stream);
 2039|     64|    if (rv == NGHTTP2_ERR_PAUSE) {
 2040|      0|      return rv;
 2041|      0|    }
 2042|     64|    if (rv == NGHTTP2_ERR_DEFERRED) {
 2043|     46|      rv = nghttp2_stream_defer_item(stream, NGHTTP2_STREAM_FLAG_DEFERRED_USER);
 2044|       |
 2045|     46|      if (nghttp2_is_fatal(rv)) {
 2046|      0|        return rv;
 2047|      0|      }
 2048|       |
 2049|     46|      session->aob.item = NULL;
 2050|     46|      active_outbound_item_reset(&session->aob, mem);
 2051|     46|      return NGHTTP2_ERR_DEFERRED;
 2052|     46|    }
 2053|     18|    if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 2054|      0|      rv = nghttp2_stream_detach_item(stream);
 2055|       |
 2056|      0|      if (nghttp2_is_fatal(rv)) {
 2057|      0|        return rv;
 2058|      0|      }
 2059|       |
 2060|      0|      rv = nghttp2_session_add_rst_stream(session, frame->hd.stream_id,
 2061|      0|                                          NGHTTP2_INTERNAL_ERROR);
 2062|      0|      if (nghttp2_is_fatal(rv)) {
 2063|      0|        return rv;
 2064|      0|      }
 2065|      0|      return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
 2066|      0|    }
 2067|     18|    if (rv != 0) {
 2068|      0|      int rv2;
 2069|       |
 2070|      0|      rv2 = nghttp2_stream_detach_item(stream);
 2071|       |
 2072|      0|      if (nghttp2_is_fatal(rv2)) {
 2073|      0|        return rv2;
 2074|      0|      }
 2075|       |
 2076|      0|      return rv;
 2077|      0|    }
 2078|     18|    return 0;
 2079|     18|  }
 2080|    678|  case NGHTTP2_HEADERS: {
 2081|    678|    nghttp2_headers_aux_data *aux_data;
 2082|    678|    size_t estimated_payloadlen;
 2083|       |
 2084|    678|    aux_data = &item->aux_data.headers;
 2085|       |
 2086|    678|    if (frame->headers.cat == NGHTTP2_HCAT_REQUEST) {
 2087|       |      /* initial HEADERS, which opens stream */
 2088|    678|      nghttp2_stream *stream;
 2089|       |
 2090|    678|      stream = nghttp2_session_open_stream(
 2091|    678|          session, frame->hd.stream_id, NGHTTP2_STREAM_FLAG_NONE,
 2092|    678|          &frame->headers.pri_spec, NGHTTP2_STREAM_INITIAL,
 2093|    678|          aux_data->stream_user_data);
 2094|       |
 2095|    678|      if (stream == NULL) {
 2096|      0|        return NGHTTP2_ERR_NOMEM;
 2097|      0|      }
 2098|       |
 2099|       |      /* We don't call nghttp2_session_adjust_closed_stream() here,
 2100|       |         since we don't keep closed stream in client side */
 2101|       |
 2102|    678|      rv = session_predicate_request_headers_send(session, item);
 2103|    678|      if (rv != 0) {
 2104|      0|        return rv;
 2105|      0|      }
 2106|       |
 2107|    678|      if (session_enforce_http_messaging(session)) {
 2108|    678|        nghttp2_http_record_request_method(stream, frame);
 2109|    678|      }
 2110|    678|    } else {
 2111|      0|      nghttp2_stream *stream;
 2112|       |
 2113|      0|      stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2114|       |
 2115|      0|      if (stream && stream->state == NGHTTP2_STREAM_RESERVED) {
 2116|      0|        rv = session_predicate_push_response_headers_send(session, stream);
 2117|      0|        if (rv == 0) {
 2118|      0|          frame->headers.cat = NGHTTP2_HCAT_PUSH_RESPONSE;
 2119|       |
 2120|      0|          if (aux_data->stream_user_data) {
 2121|      0|            stream->stream_user_data = aux_data->stream_user_data;
 2122|      0|          }
 2123|      0|        }
 2124|      0|      } else if (session_predicate_response_headers_send(session, stream) ==
 2125|      0|                 0) {
 2126|      0|        frame->headers.cat = NGHTTP2_HCAT_RESPONSE;
 2127|      0|        rv = 0;
 2128|      0|      } else {
 2129|      0|        frame->headers.cat = NGHTTP2_HCAT_HEADERS;
 2130|       |
 2131|      0|        rv = session_predicate_headers_send(session, stream);
 2132|      0|      }
 2133|       |
 2134|      0|      if (rv != 0) {
 2135|      0|        return rv;
 2136|      0|      }
 2137|      0|    }
 2138|       |
 2139|    678|    estimated_payloadlen = session_estimate_headers_payload(
 2140|    678|        session, frame->headers.nva, frame->headers.nvlen,
 2141|    678|        NGHTTP2_PRIORITY_SPECLEN);
 2142|       |
 2143|    678|    if (estimated_payloadlen > session->max_send_header_block_length) {
 2144|      0|      return NGHTTP2_ERR_FRAME_SIZE_ERROR;
 2145|      0|    }
 2146|       |
 2147|    678|    rv = nghttp2_frame_pack_headers(&session->aob.framebufs, &frame->headers,
 2148|    678|                                    &session->hd_deflater);
 2149|       |
 2150|    678|    if (rv != 0) {
 2151|      0|      return rv;
 2152|      0|    }
 2153|       |
 2154|    678|    DEBUGF("send: before padding, HEADERS serialized in %zd bytes\n",
 2155|    678|           nghttp2_bufs_len(&session->aob.framebufs));
 2156|       |
 2157|    678|    rv = session_headers_add_pad(session, frame);
 2158|       |
 2159|    678|    if (rv != 0) {
 2160|      0|      return rv;
 2161|      0|    }
 2162|       |
 2163|    678|    DEBUGF("send: HEADERS finally serialized in %zd bytes\n",
 2164|    678|           nghttp2_bufs_len(&session->aob.framebufs));
 2165|       |
 2166|    678|    if (frame->headers.cat == NGHTTP2_HCAT_REQUEST) {
 2167|    678|      assert(session->last_sent_stream_id < frame->hd.stream_id);
 2168|    678|      session->last_sent_stream_id = frame->hd.stream_id;
 2169|    678|    }
 2170|       |
 2171|    678|    return 0;
 2172|    678|  }
 2173|      0|  case NGHTTP2_PRIORITY: {
 2174|      0|    if (session_is_closing(session)) {
 2175|      0|      return NGHTTP2_ERR_SESSION_CLOSING;
 2176|      0|    }
 2177|       |    /* PRIORITY frame can be sent at any time and to any stream
 2178|       |       ID. */
 2179|      0|    nghttp2_frame_pack_priority(&session->aob.framebufs, &frame->priority);
 2180|       |
 2181|       |    /* Peer can send PRIORITY frame against idle stream to create
 2182|       |       "anchor" in dependency tree.  Only client can do this in
 2183|       |       nghttp2.  In nghttp2, only server retains non-active (closed
 2184|       |       or idle) streams in memory, so we don't open stream here. */
 2185|      0|    return 0;
 2186|      0|  }
 2187|    587|  case NGHTTP2_RST_STREAM:
 2188|    587|    if (session_is_closing(session)) {
 2189|    147|      return NGHTTP2_ERR_SESSION_CLOSING;
 2190|    147|    }
 2191|    440|    nghttp2_frame_pack_rst_stream(&session->aob.framebufs, &frame->rst_stream);
 2192|    440|    return 0;
 2193|  1.26k|  case NGHTTP2_SETTINGS: {
 2194|  1.26k|    if (frame->hd.flags & NGHTTP2_FLAG_ACK) {
 2195|    558|      assert(session->obq_flood_counter_ > 0);
 2196|    558|      --session->obq_flood_counter_;
 2197|       |      /* When session is about to close, don't send SETTINGS ACK.
 2198|       |         We are required to send SETTINGS without ACK though; for
 2199|       |         example, we have to send SETTINGS as a part of connection
 2200|       |         preface. */
 2201|    558|      if (session_is_closing(session)) {
 2202|    339|        return NGHTTP2_ERR_SESSION_CLOSING;
 2203|    339|      }
 2204|    558|    }
 2205|       |
 2206|    923|    rv = nghttp2_frame_pack_settings(&session->aob.framebufs, &frame->settings);
 2207|    923|    if (rv != 0) {
 2208|      0|      return rv;
 2209|      0|    }
 2210|    923|    return 0;
 2211|    923|  }
 2212|      0|  case NGHTTP2_PUSH_PROMISE: {
 2213|      0|    nghttp2_stream *stream;
 2214|      0|    size_t estimated_payloadlen;
 2215|       |
 2216|       |    /* stream could be NULL if associated stream was already
 2217|       |       closed. */
 2218|      0|    stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2219|       |
 2220|       |    /* predicate should fail if stream is NULL. */
 2221|      0|    rv = session_predicate_push_promise_send(session, stream);
 2222|      0|    if (rv != 0) {
 2223|      0|      return rv;
 2224|      0|    }
 2225|       |
 2226|      0|    assert(stream);
 2227|       |
 2228|      0|    estimated_payloadlen = session_estimate_headers_payload(
 2229|      0|        session, frame->push_promise.nva, frame->push_promise.nvlen, 0);
 2230|       |
 2231|      0|    if (estimated_payloadlen > session->max_send_header_block_length) {
 2232|      0|      return NGHTTP2_ERR_FRAME_SIZE_ERROR;
 2233|      0|    }
 2234|       |
 2235|      0|    rv = nghttp2_frame_pack_push_promise(
 2236|      0|        &session->aob.framebufs, &frame->push_promise, &session->hd_deflater);
 2237|      0|    if (rv != 0) {
 2238|      0|      return rv;
 2239|      0|    }
 2240|      0|    rv = session_headers_add_pad(session, frame);
 2241|      0|    if (rv != 0) {
 2242|      0|      return rv;
 2243|      0|    }
 2244|       |
 2245|      0|    assert(session->last_sent_stream_id + 2 <=
 2246|      0|           frame->push_promise.promised_stream_id);
 2247|      0|    session->last_sent_stream_id = frame->push_promise.promised_stream_id;
 2248|       |
 2249|      0|    return 0;
 2250|      0|  }
 2251|      0|  case NGHTTP2_PING:
 2252|      0|    if (frame->hd.flags & NGHTTP2_FLAG_ACK) {
 2253|      0|      assert(session->obq_flood_counter_ > 0);
 2254|      0|      --session->obq_flood_counter_;
 2255|      0|    }
 2256|       |    /* PING frame is allowed to be sent unless termination GOAWAY is
 2257|       |       sent */
 2258|      0|    if (session->goaway_flags & NGHTTP2_GOAWAY_TERM_ON_SEND) {
 2259|      0|      return NGHTTP2_ERR_SESSION_CLOSING;
 2260|      0|    }
 2261|      0|    nghttp2_frame_pack_ping(&session->aob.framebufs, &frame->ping);
 2262|      0|    return 0;
 2263|    231|  case NGHTTP2_GOAWAY:
 2264|    231|    rv = nghttp2_frame_pack_goaway(&session->aob.framebufs, &frame->goaway);
 2265|    231|    if (rv != 0) {
 2266|      0|      return rv;
 2267|      0|    }
 2268|    231|    session->local_last_stream_id = frame->goaway.last_stream_id;
 2269|       |
 2270|    231|    return 0;
 2271|    704|  case NGHTTP2_WINDOW_UPDATE:
 2272|    704|    rv = session_predicate_window_update_send(session, frame->hd.stream_id);
 2273|    704|    if (rv != 0) {
 2274|      0|      return rv;
 2275|      0|    }
 2276|    704|    nghttp2_frame_pack_window_update(&session->aob.framebufs,
 2277|    704|                                     &frame->window_update);
 2278|    704|    return 0;
 2279|      0|  case NGHTTP2_CONTINUATION:
 2280|       |    /* We never handle CONTINUATION here. */
 2281|      0|    assert(0);
 2282|      0|    return 0;
 2283|      0|  default: {
 2284|      0|    nghttp2_ext_aux_data *aux_data;
 2285|       |
 2286|       |    /* extension frame */
 2287|       |
 2288|      0|    aux_data = &item->aux_data.ext;
 2289|       |
 2290|      0|    if (aux_data->builtin == 0) {
 2291|      0|      if (session_is_closing(session)) {
 2292|      0|        return NGHTTP2_ERR_SESSION_CLOSING;
 2293|      0|      }
 2294|       |
 2295|      0|      return session_pack_extension(session, &session->aob.framebufs, frame);
 2296|      0|    }
 2297|       |
 2298|      0|    switch (frame->hd.type) {
 2299|      0|    case NGHTTP2_ALTSVC:
 2300|      0|      rv = session_predicate_altsvc_send(session, frame->hd.stream_id);
 2301|      0|      if (rv != 0) {
 2302|      0|        return rv;
 2303|      0|      }
 2304|       |
 2305|      0|      nghttp2_frame_pack_altsvc(&session->aob.framebufs, &frame->ext);
 2306|       |
 2307|      0|      return 0;
 2308|      0|    case NGHTTP2_ORIGIN:
 2309|      0|      rv = session_predicate_origin_send(session);
 2310|      0|      if (rv != 0) {
 2311|      0|        return rv;
 2312|      0|      }
 2313|       |
 2314|      0|      rv = nghttp2_frame_pack_origin(&session->aob.framebufs, &frame->ext);
 2315|      0|      if (rv != 0) {
 2316|      0|        return rv;
 2317|      0|      }
 2318|       |
 2319|      0|      return 0;
 2320|      0|    default:
 2321|       |      /* Unreachable here */
 2322|      0|      assert(0);
 2323|      0|      return 0;
 2324|      0|    }
 2325|      0|  }
 2326|  3.53k|  }
 2327|  3.53k|}
nghttp2_session.c:nghttp2_session_predicate_data_send:
 1831|     83|                                               nghttp2_stream *stream) {
 1832|     83|  int rv;
 1833|     83|  rv = session_predicate_for_stream_send(session, stream);
 1834|     83|  if (rv != 0) {
 1835|      4|    return rv;
 1836|      4|  }
 1837|     79|  assert(stream);
 1838|     79|  if (nghttp2_session_is_my_stream_id(session, stream->stream_id)) {
 1839|       |    /* Request body data */
 1840|       |    /* If stream->state is NGHTTP2_STREAM_CLOSING, RST_STREAM was
 1841|       |       queued but not yet sent. In this case, we won't send DATA
 1842|       |       frames. */
 1843|     79|    if (stream->state == NGHTTP2_STREAM_CLOSING) {
 1844|      0|      return NGHTTP2_ERR_STREAM_CLOSING;
 1845|      0|    }
 1846|     79|    if (stream->state == NGHTTP2_STREAM_RESERVED) {
 1847|      0|      return NGHTTP2_ERR_INVALID_STREAM_STATE;
 1848|      0|    }
 1849|     79|    return 0;
 1850|     79|  }
 1851|       |  /* Response body data */
 1852|      0|  if (stream->state == NGHTTP2_STREAM_OPENED) {
 1853|      0|    return 0;
 1854|      0|  }
 1855|      0|  if (stream->state == NGHTTP2_STREAM_CLOSING) {
 1856|      0|    return NGHTTP2_ERR_STREAM_CLOSING;
 1857|      0|  }
 1858|      0|  return NGHTTP2_ERR_INVALID_STREAM_STATE;
 1859|      0|}
nghttp2_session.c:session_predicate_for_stream_send:
 1468|     83|                                             nghttp2_stream *stream) {
 1469|     83|  if (stream == NULL) {
 1470|      0|    return NGHTTP2_ERR_STREAM_CLOSED;
 1471|      0|  }
 1472|     83|  if (session_is_closing(session)) {
 1473|      4|    return NGHTTP2_ERR_SESSION_CLOSING;
 1474|      4|  }
 1475|     79|  if (stream->shut_flags & NGHTTP2_SHUT_WR) {
 1476|      0|    return NGHTTP2_ERR_STREAM_SHUT_WR;
 1477|      0|  }
 1478|     79|  return 0;
 1479|     79|}
nghttp2_session.c:nghttp2_session_next_data_read:
 1800|     72|                                             nghttp2_stream *stream) {
 1801|     72|  ssize_t window_size;
 1802|       |
 1803|     72|  window_size = nghttp2_session_enforce_flow_control_limits(
 1804|     72|      session, stream, NGHTTP2_DATA_PAYLOADLEN);
 1805|       |
 1806|     72|  DEBUGF("send: available window=%zd\n", window_size);
 1807|       |
 1808|     72|  return window_size > 0 ? (size_t)window_size : 0;
 1809|     72|}
nghttp2_session.c:session_predicate_request_headers_send:
 1502|    678|                                                  nghttp2_outbound_item *item) {
 1503|    678|  if (item->aux_data.headers.canceled) {
 1504|      0|    return NGHTTP2_ERR_STREAM_CLOSING;
 1505|      0|  }
 1506|       |  /* If we are terminating session (NGHTTP2_GOAWAY_TERM_ON_SEND),
 1507|       |     GOAWAY was received from peer, or session is about to close, new
 1508|       |     request is not allowed. */
 1509|    678|  if ((session->goaway_flags & NGHTTP2_GOAWAY_RECV) ||
 1510|    678|      session_is_closing(session)) {
 1511|      0|    return NGHTTP2_ERR_START_STREAM_NOT_ALLOWED;
 1512|      0|  }
 1513|    678|  return 0;
 1514|    678|}
nghttp2_session.c:session_estimate_headers_payload:
 1930|    678|                                               size_t additional) {
 1931|    678|  return nghttp2_hd_deflate_bound(&session->hd_deflater, nva, nvlen) +
 1932|    678|         additional;
 1933|    678|}
nghttp2_session.c:session_headers_add_pad:
 1890|    678|                                   nghttp2_frame *frame) {
 1891|    678|  int rv;
 1892|    678|  ssize_t padded_payloadlen;
 1893|    678|  nghttp2_active_outbound_item *aob;
 1894|    678|  nghttp2_bufs *framebufs;
 1895|    678|  size_t padlen;
 1896|    678|  size_t max_payloadlen;
 1897|       |
 1898|    678|  aob = &session->aob;
 1899|    678|  framebufs = &aob->framebufs;
 1900|       |
 1901|    678|  max_payloadlen = nghttp2_min(NGHTTP2_MAX_PAYLOADLEN,
 1902|    678|                               frame->hd.length + NGHTTP2_MAX_PADLEN);
 1903|       |
 1904|    678|  padded_payloadlen =
 1905|    678|      session_call_select_padding(session, frame, max_payloadlen);
 1906|       |
 1907|    678|  if (nghttp2_is_fatal((int)padded_payloadlen)) {
 1908|      0|    return (int)padded_payloadlen;
 1909|      0|  }
 1910|       |
 1911|    678|  padlen = (size_t)padded_payloadlen - frame->hd.length;
 1912|       |
 1913|    678|  DEBUGF("send: padding selected: payloadlen=%zd, padlen=%zu\n",
 1914|    678|         padded_payloadlen, padlen);
 1915|       |
 1916|    678|  rv = nghttp2_frame_add_pad(framebufs, &frame->hd, padlen, 0);
 1917|       |
 1918|    678|  if (rv != 0) {
 1919|      0|    return rv;
 1920|      0|  }
 1921|       |
 1922|    678|  frame->headers.padlen = padlen;
 1923|       |
 1924|    678|  return 0;
 1925|    678|}
nghttp2_session.c:session_predicate_window_update_send:
 1722|    704|                                                int32_t stream_id) {
 1723|    704|  nghttp2_stream *stream;
 1724|       |
 1725|    704|  if (session_is_closing(session)) {
 1726|      0|    return NGHTTP2_ERR_SESSION_CLOSING;
 1727|      0|  }
 1728|       |
 1729|    704|  if (stream_id == 0) {
 1730|       |    /* Connection-level window update */
 1731|    704|    return 0;
 1732|    704|  }
 1733|      0|  stream = nghttp2_session_get_stream(session, stream_id);
 1734|      0|  if (stream == NULL) {
 1735|      0|    return NGHTTP2_ERR_STREAM_CLOSED;
 1736|      0|  }
 1737|      0|  if (stream->state == NGHTTP2_STREAM_CLOSING) {
 1738|      0|    return NGHTTP2_ERR_STREAM_CLOSING;
 1739|      0|  }
 1740|      0|  if (state_reserved_local(session, stream)) {
 1741|      0|    return NGHTTP2_ERR_INVALID_STREAM_STATE;
 1742|      0|  }
 1743|      0|  return 0;
 1744|      0|}
nghttp2_session.c:session_call_before_frame_send:
 2387|  2.97k|                                          nghttp2_frame *frame) {
 2388|  2.97k|  int rv;
 2389|  2.97k|  if (session->callbacks.before_frame_send_callback) {
 2390|      0|    rv = session->callbacks.before_frame_send_callback(session, frame,
 2391|      0|                                                       session->user_data);
 2392|      0|    if (rv == NGHTTP2_ERR_CANCEL) {
 2393|      0|      return rv;
 2394|      0|    }
 2395|       |
 2396|      0|    if (rv != 0) {
 2397|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 2398|      0|    }
 2399|      0|  }
 2400|  2.97k|  return 0;
 2401|  2.97k|}
nghttp2_session.c:session_after_frame_sent2:
 2788|  2.99k|static int session_after_frame_sent2(nghttp2_session *session) {
 2789|  2.99k|  int rv;
 2790|  2.99k|  nghttp2_active_outbound_item *aob = &session->aob;
 2791|  2.99k|  nghttp2_outbound_item *item = aob->item;
 2792|  2.99k|  nghttp2_bufs *framebufs = &aob->framebufs;
 2793|  2.99k|  nghttp2_frame *frame;
 2794|  2.99k|  nghttp2_mem *mem;
 2795|  2.99k|  nghttp2_stream *stream;
 2796|  2.99k|  nghttp2_data_aux_data *aux_data;
 2797|       |
 2798|  2.99k|  mem = &session->mem;
 2799|  2.99k|  frame = &item->frame;
 2800|       |
 2801|  2.99k|  if (frame->hd.type != NGHTTP2_DATA) {
 2802|       |
 2803|  2.97k|    if (frame->hd.type == NGHTTP2_HEADERS ||
 2804|  2.97k|        frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 2805|       |
 2806|    678|      if (nghttp2_bufs_next_present(framebufs)) {
 2807|      0|        framebufs->cur = framebufs->cur->next;
 2808|       |
 2809|      0|        DEBUGF("send: next CONTINUATION frame, %zu bytes\n",
 2810|      0|               nghttp2_buf_len(&framebufs->cur->buf));
 2811|       |
 2812|      0|        return 0;
 2813|      0|      }
 2814|    678|    }
 2815|       |
 2816|  2.97k|    active_outbound_item_reset(&session->aob, mem);
 2817|       |
 2818|  2.97k|    return 0;
 2819|  2.97k|  }
 2820|       |
 2821|       |  /* DATA frame */
 2822|       |
 2823|     18|  aux_data = &item->aux_data.data;
 2824|       |
 2825|       |  /* On EOF, we have already detached data.  Please note that
 2826|       |     application may issue nghttp2_submit_data() in
 2827|       |     on_frame_send_callback (call from session_after_frame_sent1),
 2828|       |     which attach data to stream.  We don't want to detach it. */
 2829|     18|  if (aux_data->eof) {
 2830|     11|    active_outbound_item_reset(aob, mem);
 2831|       |
 2832|     11|    return 0;
 2833|     11|  }
 2834|       |
 2835|       |  /* Reset no_copy here because next write may not use this. */
 2836|      7|  aux_data->no_copy = 0;
 2837|       |
 2838|      7|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2839|       |
 2840|       |  /* If session is closed or RST_STREAM was queued, we won't send
 2841|       |     further data. */
 2842|      7|  if (nghttp2_session_predicate_data_send(session, stream) != 0) {
 2843|      0|    if (stream) {
 2844|      0|      rv = nghttp2_stream_detach_item(stream);
 2845|       |
 2846|      0|      if (nghttp2_is_fatal(rv)) {
 2847|      0|        return rv;
 2848|      0|      }
 2849|      0|    }
 2850|       |
 2851|      0|    active_outbound_item_reset(aob, mem);
 2852|       |
 2853|      0|    return 0;
 2854|      0|  }
 2855|       |
 2856|      7|  aob->item = NULL;
 2857|      7|  active_outbound_item_reset(&session->aob, mem);
 2858|       |
 2859|      7|  return 0;
 2860|      7|}
nghttp2_session.c:session_after_frame_sent1:
 2517|  2.99k|static int session_after_frame_sent1(nghttp2_session *session) {
 2518|  2.99k|  int rv;
 2519|  2.99k|  nghttp2_active_outbound_item *aob = &session->aob;
 2520|  2.99k|  nghttp2_outbound_item *item = aob->item;
 2521|  2.99k|  nghttp2_bufs *framebufs = &aob->framebufs;
 2522|  2.99k|  nghttp2_frame *frame;
 2523|  2.99k|  nghttp2_stream *stream;
 2524|       |
 2525|  2.99k|  frame = &item->frame;
 2526|       |
 2527|  2.99k|  if (frame->hd.type == NGHTTP2_DATA) {
 2528|     18|    nghttp2_data_aux_data *aux_data;
 2529|       |
 2530|     18|    aux_data = &item->aux_data.data;
 2531|       |
 2532|     18|    stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2533|       |    /* We update flow control window after a frame was completely
 2534|       |       sent. This is possible because we choose payload length not to
 2535|       |       exceed the window */
 2536|     18|    session->remote_window_size -= (int32_t)frame->hd.length;
 2537|     18|    if (stream) {
 2538|     18|      stream->remote_window_size -= (int32_t)frame->hd.length;
 2539|     18|    }
 2540|       |
 2541|     18|    if (stream && aux_data->eof) {
 2542|     11|      rv = nghttp2_stream_detach_item(stream);
 2543|     11|      if (nghttp2_is_fatal(rv)) {
 2544|      0|        return rv;
 2545|      0|      }
 2546|       |
 2547|       |      /* Call on_frame_send_callback after
 2548|       |         nghttp2_stream_detach_item(), so that application can issue
 2549|       |         nghttp2_submit_data() in the callback. */
 2550|     11|      if (session->callbacks.on_frame_send_callback) {
 2551|      0|        rv = session_call_on_frame_send(session, frame);
 2552|      0|        if (nghttp2_is_fatal(rv)) {
 2553|      0|          return rv;
 2554|      0|        }
 2555|      0|      }
 2556|       |
 2557|     11|      if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
 2558|     11|        int stream_closed;
 2559|       |
 2560|     11|        stream_closed =
 2561|     11|            (stream->shut_flags & NGHTTP2_SHUT_RDWR) == NGHTTP2_SHUT_RDWR;
 2562|       |
 2563|     11|        nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_WR);
 2564|       |
 2565|     11|        rv = nghttp2_session_close_stream_if_shut_rdwr(session, stream);
 2566|     11|        if (nghttp2_is_fatal(rv)) {
 2567|      0|          return rv;
 2568|      0|        }
 2569|       |        /* stream may be NULL if it was closed */
 2570|     11|        if (stream_closed) {
 2571|      0|          stream = NULL;
 2572|      0|        }
 2573|     11|      }
 2574|     11|      return 0;
 2575|     11|    }
 2576|       |
 2577|      7|    if (session->callbacks.on_frame_send_callback) {
 2578|      0|      rv = session_call_on_frame_send(session, frame);
 2579|      0|      if (nghttp2_is_fatal(rv)) {
 2580|      0|        return rv;
 2581|      0|      }
 2582|      0|    }
 2583|       |
 2584|      7|    return 0;
 2585|      7|  }
 2586|       |
 2587|       |  /* non-DATA frame */
 2588|       |
 2589|  2.97k|  if (frame->hd.type == NGHTTP2_HEADERS ||
 2590|  2.97k|      frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 2591|    678|    if (nghttp2_bufs_next_present(framebufs)) {
 2592|      0|      DEBUGF("send: CONTINUATION exists, just return\n");
 2593|      0|      return 0;
 2594|      0|    }
 2595|    678|  }
 2596|  2.97k|  rv = session_call_on_frame_send(session, frame);
 2597|  2.97k|  if (nghttp2_is_fatal(rv)) {
 2598|      0|    return rv;
 2599|      0|  }
 2600|  2.97k|  switch (frame->hd.type) {
 2601|    678|  case NGHTTP2_HEADERS: {
 2602|    678|    nghttp2_headers_aux_data *aux_data;
 2603|       |
 2604|    678|    stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2605|    678|    if (!stream) {
 2606|      0|      return 0;
 2607|      0|    }
 2608|       |
 2609|    678|    switch (frame->headers.cat) {
 2610|    678|    case NGHTTP2_HCAT_REQUEST: {
 2611|    678|      stream->state = NGHTTP2_STREAM_OPENING;
 2612|    678|      if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
 2613|    647|        nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_WR);
 2614|    647|      }
 2615|    678|      rv = nghttp2_session_close_stream_if_shut_rdwr(session, stream);
 2616|    678|      if (nghttp2_is_fatal(rv)) {
 2617|      0|        return rv;
 2618|      0|      }
 2619|       |      /* We assume aux_data is a pointer to nghttp2_headers_aux_data */
 2620|    678|      aux_data = &item->aux_data.headers;
 2621|    678|      if (aux_data->data_prd.read_callback) {
 2622|       |        /* nghttp2_submit_data() makes a copy of aux_data->data_prd */
 2623|     31|        rv = nghttp2_submit_data(session, NGHTTP2_FLAG_END_STREAM,
 2624|     31|                                 frame->hd.stream_id, &aux_data->data_prd);
 2625|     31|        if (nghttp2_is_fatal(rv)) {
 2626|      0|          return rv;
 2627|      0|        }
 2628|       |        /* TODO nghttp2_submit_data() may fail if stream has already
 2629|       |           DATA frame item.  We might have to handle it here. */
 2630|     31|      }
 2631|    678|      return 0;
 2632|    678|    }
 2633|      0|    case NGHTTP2_HCAT_PUSH_RESPONSE:
 2634|      0|      stream->flags = (uint8_t)(stream->flags & ~NGHTTP2_STREAM_FLAG_PUSH);
 2635|      0|      ++session->num_outgoing_streams;
 2636|       |    /* Fall through */
 2637|      0|    case NGHTTP2_HCAT_RESPONSE:
 2638|      0|      stream->state = NGHTTP2_STREAM_OPENED;
 2639|       |    /* Fall through */
 2640|      0|    case NGHTTP2_HCAT_HEADERS:
 2641|      0|      if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
 2642|      0|        nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_WR);
 2643|      0|      }
 2644|      0|      rv = nghttp2_session_close_stream_if_shut_rdwr(session, stream);
 2645|      0|      if (nghttp2_is_fatal(rv)) {
 2646|      0|        return rv;
 2647|      0|      }
 2648|       |      /* We assume aux_data is a pointer to nghttp2_headers_aux_data */
 2649|      0|      aux_data = &item->aux_data.headers;
 2650|      0|      if (aux_data->data_prd.read_callback) {
 2651|      0|        rv = nghttp2_submit_data(session, NGHTTP2_FLAG_END_STREAM,
 2652|      0|                                 frame->hd.stream_id, &aux_data->data_prd);
 2653|      0|        if (nghttp2_is_fatal(rv)) {
 2654|      0|          return rv;
 2655|      0|        }
 2656|       |        /* TODO nghttp2_submit_data() may fail if stream has already
 2657|       |           DATA frame item.  We might have to handle it here. */
 2658|      0|      }
 2659|      0|      return 0;
 2660|      0|    default:
 2661|       |      /* Unreachable */
 2662|      0|      assert(0);
 2663|      0|      return 0;
 2664|    678|    }
 2665|    678|  }
 2666|      0|  case NGHTTP2_PRIORITY:
 2667|      0|    if (session->server) {
 2668|      0|      return 0;
 2669|      0|      ;
 2670|      0|    }
 2671|       |
 2672|      0|    stream = nghttp2_session_get_stream_raw(session, frame->hd.stream_id);
 2673|       |
 2674|      0|    if (!stream) {
 2675|      0|      if (!session_detect_idle_stream(session, frame->hd.stream_id)) {
 2676|      0|        return 0;
 2677|      0|      }
 2678|       |
 2679|      0|      stream = nghttp2_session_open_stream(
 2680|      0|          session, frame->hd.stream_id, NGHTTP2_FLAG_NONE,
 2681|      0|          &frame->priority.pri_spec, NGHTTP2_STREAM_IDLE, NULL);
 2682|      0|      if (!stream) {
 2683|      0|        return NGHTTP2_ERR_NOMEM;
 2684|      0|      }
 2685|      0|    } else {
 2686|      0|      rv = nghttp2_session_reprioritize_stream(session, stream,
 2687|      0|                                               &frame->priority.pri_spec);
 2688|      0|      if (nghttp2_is_fatal(rv)) {
 2689|      0|        return rv;
 2690|      0|      }
 2691|      0|    }
 2692|       |
 2693|      0|    rv = nghttp2_session_adjust_idle_stream(session);
 2694|       |
 2695|      0|    if (nghttp2_is_fatal(rv)) {
 2696|      0|      return rv;
 2697|      0|    }
 2698|       |
 2699|      0|    return 0;
 2700|    440|  case NGHTTP2_RST_STREAM:
 2701|    440|    rv = nghttp2_session_close_stream(session, frame->hd.stream_id,
 2702|    440|                                      frame->rst_stream.error_code);
 2703|    440|    if (nghttp2_is_fatal(rv)) {
 2704|      0|      return rv;
 2705|      0|    }
 2706|    440|    return 0;
 2707|    231|  case NGHTTP2_GOAWAY: {
 2708|    231|    nghttp2_goaway_aux_data *aux_data;
 2709|       |
 2710|    231|    aux_data = &item->aux_data.goaway;
 2711|       |
 2712|    231|    if ((aux_data->flags & NGHTTP2_GOAWAY_AUX_SHUTDOWN_NOTICE) == 0) {
 2713|       |
 2714|    231|      if (aux_data->flags & NGHTTP2_GOAWAY_AUX_TERM_ON_SEND) {
 2715|    231|        session->goaway_flags |= NGHTTP2_GOAWAY_TERM_SENT;
 2716|    231|      }
 2717|       |
 2718|    231|      session->goaway_flags |= NGHTTP2_GOAWAY_SENT;
 2719|       |
 2720|    231|      rv = session_close_stream_on_goaway(session, frame->goaway.last_stream_id,
 2721|    231|                                          1);
 2722|       |
 2723|    231|      if (nghttp2_is_fatal(rv)) {
 2724|      0|        return rv;
 2725|      0|      }
 2726|    231|    }
 2727|       |
 2728|    231|    return 0;
 2729|    231|  }
 2730|    704|  case NGHTTP2_WINDOW_UPDATE:
 2731|    704|    if (frame->hd.stream_id == 0) {
 2732|    704|      session->window_update_queued = 0;
 2733|    704|      if (session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) {
 2734|      0|        rv = session_update_connection_consumed_size(session, 0);
 2735|    704|      } else {
 2736|    704|        rv = nghttp2_session_update_recv_connection_window_size(session, 0);
 2737|    704|      }
 2738|       |
 2739|    704|      if (nghttp2_is_fatal(rv)) {
 2740|      0|        return rv;
 2741|      0|      }
 2742|       |
 2743|    704|      return 0;
 2744|    704|    }
 2745|       |
 2746|      0|    stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 2747|      0|    if (!stream) {
 2748|      0|      return 0;
 2749|      0|    }
 2750|       |
 2751|      0|    stream->window_update_queued = 0;
 2752|       |
 2753|       |    /* We don't have to send WINDOW_UPDATE if END_STREAM from peer
 2754|       |       is seen. */
 2755|      0|    if (stream->shut_flags & NGHTTP2_SHUT_RD) {
 2756|      0|      return 0;
 2757|      0|    }
 2758|       |
 2759|      0|    if (session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) {
 2760|      0|      rv = session_update_stream_consumed_size(session, stream, 0);
 2761|      0|    } else {
 2762|      0|      rv =
 2763|      0|          nghttp2_session_update_recv_stream_window_size(session, stream, 0, 1);
 2764|      0|    }
 2765|       |
 2766|      0|    if (nghttp2_is_fatal(rv)) {
 2767|      0|      return rv;
 2768|      0|    }
 2769|       |
 2770|      0|    return 0;
 2771|    923|  default:
 2772|    923|    return 0;
 2773|  2.97k|  }
 2774|  2.97k|}
nghttp2_session.c:session_call_on_frame_send:
 2404|  2.97k|                                      nghttp2_frame *frame) {
 2405|  2.97k|  int rv;
 2406|  2.97k|  if (session->callbacks.on_frame_send_callback) {
 2407|      0|    rv = session->callbacks.on_frame_send_callback(session, frame,
 2408|      0|                                                   session->user_data);
 2409|      0|    if (rv != 0) {
 2410|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 2411|      0|    }
 2412|      0|  }
 2413|  2.97k|  return 0;
 2414|  2.97k|}
nghttp2_session.c:session_inflate_handle_invalid_connection:
 3529|     11|                                                     const char *reason) {
 3530|     11|  int rv;
 3531|     11|  rv =
 3532|     11|      session_handle_invalid_connection(session, frame, lib_error_code, reason);
 3533|     11|  if (nghttp2_is_fatal(rv)) {
 3534|      0|    return rv;
 3535|      0|  }
 3536|     11|  return NGHTTP2_ERR_IGN_HEADER_BLOCK;
 3537|     11|}
nghttp2_session.c:session_is_new_peer_stream_id:
  125|     27|                                         int32_t stream_id) {
  126|     27|  return stream_id != 0 &&
  127|     27|         !nghttp2_session_is_my_stream_id(session, stream_id) &&
  128|     27|         session->last_recv_stream_id < stream_id;
  129|     27|}
nghttp2_session.c:session_allow_incoming_new_stream:
 1441|     19|static int session_allow_incoming_new_stream(nghttp2_session *session) {
 1442|     19|  return (session->goaway_flags &
 1443|     19|          (NGHTTP2_GOAWAY_TERM_ON_SEND | NGHTTP2_GOAWAY_SENT)) == 0;
 1444|     19|}
nghttp2_session.c:session_handle_invalid_stream2:
 3475|    171|                                          int lib_error_code) {
 3476|    171|  int rv;
 3477|    171|  rv = nghttp2_session_add_rst_stream(
 3478|    171|      session, stream_id, get_error_code_from_lib_error_code(lib_error_code));
 3479|    171|  if (rv != 0) {
 3480|      0|    return rv;
 3481|      0|  }
 3482|    171|  if (session->callbacks.on_invalid_frame_recv_callback) {
 3483|      0|    if (session->callbacks.on_invalid_frame_recv_callback(
 3484|      0|            session, frame, lib_error_code, session->user_data) != 0) {
 3485|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3486|      0|    }
 3487|      0|  }
 3488|    171|  return 0;
 3489|    171|}
nghttp2_session.c:get_error_code_from_lib_error_code:
 3430|    207|static uint32_t get_error_code_from_lib_error_code(int lib_error_code) {
 3431|    207|  switch (lib_error_code) {
 3432|      2|  case NGHTTP2_ERR_STREAM_CLOSED:
 3433|      2|    return NGHTTP2_STREAM_CLOSED;
 3434|      0|  case NGHTTP2_ERR_HEADER_COMP:
 3435|      0|    return NGHTTP2_COMPRESSION_ERROR;
 3436|      0|  case NGHTTP2_ERR_FRAME_SIZE_ERROR:
 3437|      0|    return NGHTTP2_FRAME_SIZE_ERROR;
 3438|      1|  case NGHTTP2_ERR_FLOW_CONTROL:
 3439|      1|    return NGHTTP2_FLOW_CONTROL_ERROR;
 3440|      0|  case NGHTTP2_ERR_REFUSED_STREAM:
 3441|      0|    return NGHTTP2_REFUSED_STREAM;
 3442|     33|  case NGHTTP2_ERR_PROTO:
 3443|    200|  case NGHTTP2_ERR_HTTP_HEADER:
 3444|    204|  case NGHTTP2_ERR_HTTP_MESSAGING:
 3445|    204|    return NGHTTP2_PROTOCOL_ERROR;
 3446|      0|  default:
 3447|      0|    return NGHTTP2_INTERNAL_ERROR;
 3448|    207|  }
 3449|    207|}
nghttp2_session.c:session_call_on_begin_headers:
 3309|    226|                                         nghttp2_frame *frame) {
 3310|    226|  int rv;
 3311|    226|  DEBUGF("recv: call on_begin_headers callback stream_id=%d\n",
 3312|    226|         frame->hd.stream_id);
 3313|    226|  if (session->callbacks.on_begin_headers_callback) {
 3314|    226|    rv = session->callbacks.on_begin_headers_callback(session, frame,
 3315|    226|                                                      session->user_data);
 3316|    226|    if (rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 3317|      0|      return rv;
 3318|      0|    }
 3319|    226|    if (rv != 0) {
 3320|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3321|      0|    }
 3322|    226|  }
 3323|    226|  return 0;
 3324|    226|}
nghttp2_session.c:session_handle_invalid_connection:
 3515|     36|                                             const char *reason) {
 3516|     36|  if (session->callbacks.on_invalid_frame_recv_callback) {
 3517|      0|    if (session->callbacks.on_invalid_frame_recv_callback(
 3518|      0|            session, frame, lib_error_code, session->user_data) != 0) {
 3519|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3520|      0|    }
 3521|      0|  }
 3522|     36|  return nghttp2_session_terminate_session_with_reason(
 3523|     36|      session, get_error_code_from_lib_error_code(lib_error_code), reason);
 3524|     36|}
nghttp2_session.c:session_call_on_frame_received:
 3296|    624|                                          nghttp2_frame *frame) {
 3297|    624|  int rv;
 3298|    624|  if (session->callbacks.on_frame_recv_callback) {
 3299|    624|    rv = session->callbacks.on_frame_recv_callback(session, frame,
 3300|    624|                                                   session->user_data);
 3301|    624|    if (rv != 0) {
 3302|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3303|      0|    }
 3304|    624|  }
 3305|    624|  return 0;
 3306|    624|}
nghttp2_session.c:session_update_local_initial_window_size:
 4283|      2|                                         int32_t old_initial_window_size) {
 4284|      2|  nghttp2_update_window_size_arg arg;
 4285|      2|  arg.session = session;
 4286|      2|  arg.new_window_size = new_initial_window_size;
 4287|      2|  arg.old_window_size = old_initial_window_size;
 4288|      2|  return nghttp2_map_each(&session->streams,
 4289|      2|                          update_local_initial_window_size_func, &arg);
 4290|      2|}
nghttp2_session.c:update_local_initial_window_size_func:
 4241|      2|                                                 void *ptr) {
 4242|      2|  int rv;
 4243|      2|  nghttp2_update_window_size_arg *arg;
 4244|      2|  nghttp2_stream *stream;
 4245|      2|  arg = (nghttp2_update_window_size_arg *)ptr;
 4246|      2|  stream = (nghttp2_stream *)entry;
 4247|      2|  rv = nghttp2_stream_update_local_initial_window_size(
 4248|      2|      stream, arg->new_window_size, arg->old_window_size);
 4249|      2|  if (rv != 0) {
 4250|      0|    return nghttp2_session_add_rst_stream(arg->session, stream->stream_id,
 4251|      0|                                          NGHTTP2_FLOW_CONTROL_ERROR);
 4252|      0|  }
 4253|      2|  if (!(arg->session->opt_flags & NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE) &&
 4254|      2|      stream->window_update_queued == 0 &&
 4255|      2|      nghttp2_should_send_window_update(stream->local_window_size,
 4256|      2|                                        stream->recv_window_size)) {
 4257|       |
 4258|      0|    rv = nghttp2_session_add_window_update(arg->session, NGHTTP2_FLAG_NONE,
 4259|      0|                                           stream->stream_id,
 4260|      0|                                           stream->recv_window_size);
 4261|      0|    if (rv != 0) {
 4262|      0|      return rv;
 4263|      0|    }
 4264|       |
 4265|      0|    stream->recv_window_size = 0;
 4266|      0|  }
 4267|      2|  return 0;
 4268|      2|}
nghttp2_session.c:session_update_remote_initial_window_size:
 4229|    427|                                          int32_t new_initial_window_size) {
 4230|    427|  nghttp2_update_window_size_arg arg;
 4231|       |
 4232|    427|  arg.session = session;
 4233|    427|  arg.new_window_size = new_initial_window_size;
 4234|    427|  arg.old_window_size = (int32_t)session->remote_settings.initial_window_size;
 4235|       |
 4236|    427|  return nghttp2_map_each(&session->streams,
 4237|    427|                          update_remote_initial_window_size_func, &arg);
 4238|    427|}
nghttp2_session.c:update_remote_initial_window_size_func:
 4187|    411|                                                  void *ptr) {
 4188|    411|  int rv;
 4189|    411|  nghttp2_update_window_size_arg *arg;
 4190|    411|  nghttp2_stream *stream;
 4191|       |
 4192|    411|  arg = (nghttp2_update_window_size_arg *)ptr;
 4193|    411|  stream = (nghttp2_stream *)entry;
 4194|       |
 4195|    411|  rv = nghttp2_stream_update_remote_initial_window_size(
 4196|    411|      stream, arg->new_window_size, arg->old_window_size);
 4197|    411|  if (rv != 0) {
 4198|      0|    return nghttp2_session_add_rst_stream(arg->session, stream->stream_id,
 4199|      0|                                          NGHTTP2_FLOW_CONTROL_ERROR);
 4200|      0|  }
 4201|       |
 4202|       |  /* If window size gets positive, push deferred DATA frame to
 4203|       |     outbound queue. */
 4204|    411|  if (stream->remote_window_size > 0 &&
 4205|    411|      nghttp2_stream_check_deferred_by_flow_control(stream)) {
 4206|       |
 4207|      0|    rv = nghttp2_stream_resume_deferred_item(
 4208|      0|        stream, NGHTTP2_STREAM_FLAG_DEFERRED_FLOW_CONTROL);
 4209|       |
 4210|      0|    if (nghttp2_is_fatal(rv)) {
 4211|      0|      return rv;
 4212|      0|    }
 4213|      0|  }
 4214|    411|  return 0;
 4215|    411|}
nghttp2_session.c:session_close_stream_on_goaway:
 2456|    253|                                          int incoming) {
 2457|    253|  int rv;
 2458|    253|  nghttp2_stream *stream, *next_stream;
 2459|    253|  nghttp2_close_stream_on_goaway_arg arg = {session, NULL, last_stream_id,
 2460|    253|                                            incoming};
 2461|       |
 2462|    253|  rv = nghttp2_map_each(&session->streams, find_stream_on_goaway_func, &arg);
 2463|    253|  assert(rv == 0);
 2464|       |
 2465|    253|  stream = arg.head;
 2466|    265|  while (stream) {
 2467|     12|    next_stream = stream->closed_next;
 2468|     12|    stream->closed_next = NULL;
 2469|     12|    rv = nghttp2_session_close_stream(session, stream->stream_id,
 2470|     12|                                      NGHTTP2_REFUSED_STREAM);
 2471|       |
 2472|       |    /* stream may be deleted here */
 2473|       |
 2474|     12|    stream = next_stream;
 2475|       |
 2476|     12|    if (nghttp2_is_fatal(rv)) {
 2477|       |      /* Clean up closed_next member just in case */
 2478|      0|      while (stream) {
 2479|      0|        next_stream = stream->closed_next;
 2480|      0|        stream->closed_next = NULL;
 2481|      0|        stream = next_stream;
 2482|      0|      }
 2483|      0|      return rv;
 2484|      0|    }
 2485|     12|  }
 2486|       |
 2487|    253|  return 0;
 2488|    253|}
nghttp2_session.c:find_stream_on_goaway_func:
 2416|    237|static int find_stream_on_goaway_func(nghttp2_map_entry *entry, void *ptr) {
 2417|    237|  nghttp2_close_stream_on_goaway_arg *arg;
 2418|    237|  nghttp2_stream *stream;
 2419|       |
 2420|    237|  arg = (nghttp2_close_stream_on_goaway_arg *)ptr;
 2421|    237|  stream = (nghttp2_stream *)entry;
 2422|       |
 2423|    237|  if (nghttp2_session_is_my_stream_id(arg->session, stream->stream_id)) {
 2424|    237|    if (arg->incoming) {
 2425|    221|      return 0;
 2426|    221|    }
 2427|    237|  } else if (!arg->incoming) {
 2428|      0|    return 0;
 2429|      0|  }
 2430|       |
 2431|     16|  if (stream->state != NGHTTP2_STREAM_IDLE &&
 2432|     16|      (stream->flags & NGHTTP2_STREAM_FLAG_CLOSED) == 0 &&
 2433|     16|      stream->stream_id > arg->last_stream_id) {
 2434|       |    /* We are collecting streams to close because we cannot call
 2435|       |       nghttp2_session_close_stream() inside nghttp2_map_each().
 2436|       |       Reuse closed_next member.. bad choice? */
 2437|     12|    assert(stream->closed_next == NULL);
 2438|     12|    assert(stream->closed_prev == NULL);
 2439|       |
 2440|     12|    if (arg->head) {
 2441|      0|      stream->closed_next = arg->head;
 2442|      0|      arg->head = stream;
 2443|     12|    } else {
 2444|     12|      arg->head = stream;
 2445|     12|    }
 2446|     12|  }
 2447|       |
 2448|     16|  return 0;
 2449|     16|}
nghttp2_session.c:session_enforce_http_messaging:
   85|  2.17k|static int session_enforce_http_messaging(nghttp2_session *session) {
   86|  2.17k|  return (session->opt_flags & NGHTTP2_OPTMASK_NO_HTTP_MESSAGING) == 0;
   87|  2.17k|}
nghttp2_session.c:adjust_recv_window_size:
 5012|    757|                                   int32_t local_window_size) {
 5013|    757|  if (*recv_window_size_ptr > local_window_size - (int32_t)delta ||
 5014|    757|      *recv_window_size_ptr > NGHTTP2_MAX_WINDOW_SIZE - (int32_t)delta) {
 5015|      0|    return -1;
 5016|      0|  }
 5017|    757|  *recv_window_size_ptr += (int32_t)delta;
 5018|    757|  return 0;
 5019|    757|}
nghttp2_session.c:inbound_frame_buf_read:
 5234|  4.81k|                                     const uint8_t *in, const uint8_t *last) {
 5235|  4.81k|  size_t readlen;
 5236|       |
 5237|  4.81k|  readlen =
 5238|  4.81k|      nghttp2_min((size_t)(last - in), nghttp2_buf_mark_avail(&iframe->sbuf));
 5239|       |
 5240|  4.81k|  iframe->sbuf.last = nghttp2_cpymem(iframe->sbuf.last, in, readlen);
 5241|       |
 5242|  4.81k|  return readlen;
 5243|  4.81k|}
nghttp2_session.c:session_call_error_callback:
  152|    171|                                       ...) {
  153|    171|  size_t bufsize;
  154|    171|  va_list ap;
  155|    171|  char *buf;
  156|    171|  int rv;
  157|    171|  nghttp2_mem *mem;
  158|       |
  159|    171|  if (!session->callbacks.error_callback &&
  160|    171|      !session->callbacks.error_callback2) {
  161|      0|    return 0;
  162|      0|  }
  163|       |
  164|    171|  mem = &session->mem;
  165|       |
  166|    171|  va_start(ap, fmt);
  167|    171|  rv = vsnprintf(NULL, 0, fmt, ap);
  168|    171|  va_end(ap);
  169|       |
  170|    171|  if (rv < 0) {
  171|      0|    return NGHTTP2_ERR_NOMEM;
  172|      0|  }
  173|       |
  174|    171|  bufsize = (size_t)(rv + 1);
  175|       |
  176|    171|  buf = nghttp2_mem_malloc(mem, bufsize);
  177|    171|  if (buf == NULL) {
  178|      0|    return NGHTTP2_ERR_NOMEM;
  179|      0|  }
  180|       |
  181|    171|  va_start(ap, fmt);
  182|    171|  rv = vsnprintf(buf, bufsize, fmt, ap);
  183|    171|  va_end(ap);
  184|       |
  185|    171|  if (rv < 0) {
  186|      0|    nghttp2_mem_free(mem, buf);
  187|       |    /* vsnprintf may return error because of various things we can
  188|       |       imagine, but typically we don't want to drop session just for
  189|       |       debug callback. */
  190|      0|    DEBUGF("error_callback: vsnprintf failed. The template was %s\n", fmt);
  191|      0|    return 0;
  192|      0|  }
  193|       |
  194|    171|  if (session->callbacks.error_callback2) {
  195|      0|    rv = session->callbacks.error_callback2(session, lib_error_code, buf,
  196|      0|                                            (size_t)rv, session->user_data);
  197|    171|  } else {
  198|    171|    rv = session->callbacks.error_callback(session, buf, (size_t)rv,
  199|    171|                                           session->user_data);
  200|    171|  }
  201|       |
  202|    171|  nghttp2_mem_free(mem, buf);
  203|       |
  204|    171|  if (rv != 0) {
  205|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
  206|      0|  }
  207|       |
  208|    171|  return 0;
  209|    171|}
nghttp2_session.c:session_on_data_received_fail_fast:
 5150|     30|static int session_on_data_received_fail_fast(nghttp2_session *session) {
 5151|     30|  int rv;
 5152|     30|  nghttp2_stream *stream;
 5153|     30|  nghttp2_inbound_frame *iframe;
 5154|     30|  int32_t stream_id;
 5155|     30|  const char *failure_reason;
 5156|     30|  uint32_t error_code = NGHTTP2_PROTOCOL_ERROR;
 5157|       |
 5158|     30|  iframe = &session->iframe;
 5159|     30|  stream_id = iframe->frame.hd.stream_id;
 5160|       |
 5161|     30|  if (stream_id == 0) {
 5162|       |    /* The spec says that if a DATA frame is received whose stream ID
 5163|       |       is 0, the recipient MUST respond with a connection error of
 5164|       |       type PROTOCOL_ERROR. */
 5165|      4|    failure_reason = "DATA: stream_id == 0";
 5166|      4|    goto fail;
 5167|      4|  }
 5168|       |
 5169|     26|  if (session_detect_idle_stream(session, stream_id)) {
 5170|      7|    failure_reason = "DATA: stream in idle";
 5171|      7|    error_code = NGHTTP2_PROTOCOL_ERROR;
 5172|      7|    goto fail;
 5173|      7|  }
 5174|       |
 5175|     19|  stream = nghttp2_session_get_stream(session, stream_id);
 5176|     19|  if (!stream) {
 5177|      1|    stream = nghttp2_session_get_stream_raw(session, stream_id);
 5178|      1|    if (stream && (stream->shut_flags & NGHTTP2_SHUT_RD)) {
 5179|      0|      failure_reason = "DATA: stream closed";
 5180|      0|      error_code = NGHTTP2_STREAM_CLOSED;
 5181|      0|      goto fail;
 5182|      0|    }
 5183|       |
 5184|      1|    return NGHTTP2_ERR_IGN_PAYLOAD;
 5185|      1|  }
 5186|     18|  if (stream->shut_flags & NGHTTP2_SHUT_RD) {
 5187|      1|    failure_reason = "DATA: stream in half-closed(remote)";
 5188|      1|    error_code = NGHTTP2_STREAM_CLOSED;
 5189|      1|    goto fail;
 5190|      1|  }
 5191|       |
 5192|     17|  if (nghttp2_session_is_my_stream_id(session, stream_id)) {
 5193|     17|    if (stream->state == NGHTTP2_STREAM_CLOSING) {
 5194|      2|      return NGHTTP2_ERR_IGN_PAYLOAD;
 5195|      2|    }
 5196|     15|    if (stream->state != NGHTTP2_STREAM_OPENED) {
 5197|      1|      failure_reason = "DATA: stream not opened";
 5198|      1|      goto fail;
 5199|      1|    }
 5200|     14|    return 0;
 5201|     15|  }
 5202|      0|  if (stream->state == NGHTTP2_STREAM_RESERVED) {
 5203|      0|    failure_reason = "DATA: stream in reserved";
 5204|      0|    goto fail;
 5205|      0|  }
 5206|      0|  if (stream->state == NGHTTP2_STREAM_CLOSING) {
 5207|      0|    return NGHTTP2_ERR_IGN_PAYLOAD;
 5208|      0|  }
 5209|      0|  return 0;
 5210|     13|fail:
 5211|     13|  rv = nghttp2_session_terminate_session_with_reason(session, error_code,
 5212|     13|                                                     failure_reason);
 5213|     13|  if (nghttp2_is_fatal(rv)) {
 5214|      0|    return rv;
 5215|      0|  }
 5216|     13|  return NGHTTP2_ERR_IGN_PAYLOAD;
 5217|     13|}
nghttp2_session.c:inbound_frame_handle_pad:
 5299|    290|                                    nghttp2_frame_hd *hd) {
 5300|    290|  if (hd->flags & NGHTTP2_FLAG_PADDED) {
 5301|     33|    if (hd->length < 1) {
 5302|      3|      return -1;
 5303|      3|    }
 5304|     30|    inbound_frame_set_mark(iframe, 1);
 5305|     30|    return 1;
 5306|     33|  }
 5307|    257|  DEBUGF("recv: no padding in payload\n");
 5308|    257|  return 0;
 5309|    290|}
nghttp2_session.c:inbound_frame_set_mark:
 5228|  2.70k|static void inbound_frame_set_mark(nghttp2_inbound_frame *iframe, size_t left) {
 5229|  2.70k|  nghttp2_buf_reset(&iframe->sbuf);
 5230|  2.70k|  iframe->sbuf.mark += left;
 5231|  2.70k|}
nghttp2_session.c:session_call_on_begin_frame:
 3279|    903|                                       const nghttp2_frame_hd *hd) {
 3280|    903|  int rv;
 3281|       |
 3282|    903|  if (session->callbacks.on_begin_frame_callback) {
 3283|       |
 3284|      0|    rv = session->callbacks.on_begin_frame_callback(session, hd,
 3285|      0|                                                    session->user_data);
 3286|       |
 3287|      0|    if (rv != 0) {
 3288|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 3289|      0|    }
 3290|      0|  }
 3291|       |
 3292|    903|  return 0;
 3293|    903|}
nghttp2_session.c:session_process_headers_frame:
 4044|    246|static int session_process_headers_frame(nghttp2_session *session) {
 4045|    246|  int rv;
 4046|    246|  nghttp2_inbound_frame *iframe = &session->iframe;
 4047|    246|  nghttp2_frame *frame = &iframe->frame;
 4048|    246|  nghttp2_stream *stream;
 4049|       |
 4050|    246|  rv = nghttp2_frame_unpack_headers_payload(&frame->headers, iframe->sbuf.pos);
 4051|       |
 4052|    246|  if (rv != 0) {
 4053|      0|    return nghttp2_session_terminate_session_with_reason(
 4054|      0|        session, NGHTTP2_PROTOCOL_ERROR, "HEADERS: could not unpack");
 4055|      0|  }
 4056|    246|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 4057|    246|  if (!stream) {
 4058|      9|    frame->headers.cat = NGHTTP2_HCAT_REQUEST;
 4059|      9|    return nghttp2_session_on_request_headers_received(session, frame);
 4060|      9|  }
 4061|       |
 4062|    237|  if (stream->state == NGHTTP2_STREAM_RESERVED) {
 4063|      0|    frame->headers.cat = NGHTTP2_HCAT_PUSH_RESPONSE;
 4064|      0|    return nghttp2_session_on_push_response_headers_received(session, frame,
 4065|      0|                                                             stream);
 4066|      0|  }
 4067|       |
 4068|    237|  if (stream->state == NGHTTP2_STREAM_OPENING &&
 4069|    237|      nghttp2_session_is_my_stream_id(session, frame->hd.stream_id)) {
 4070|    213|    frame->headers.cat = NGHTTP2_HCAT_RESPONSE;
 4071|    213|    return nghttp2_session_on_response_headers_received(session, frame, stream);
 4072|    213|  }
 4073|       |
 4074|     24|  frame->headers.cat = NGHTTP2_HCAT_HEADERS;
 4075|     24|  return nghttp2_session_on_headers_received(session, frame, stream);
 4076|    237|}
nghttp2_session.c:check_ext_type_set:
  146|    168|static int check_ext_type_set(const uint8_t *ext_types, uint8_t type) {
  147|    168|  return (ext_types[type / 8] & (1 << (type & 0x7))) > 0;
  148|    168|}
nghttp2_session.c:inbound_frame_compute_pad:
 5315|     30|static ssize_t inbound_frame_compute_pad(nghttp2_inbound_frame *iframe) {
 5316|     30|  size_t padlen;
 5317|       |
 5318|       |  /* 1 for Pad Length field */
 5319|     30|  padlen = (size_t)(iframe->sbuf.pos[0] + 1);
 5320|       |
 5321|     30|  DEBUGF("recv: padlen=%zu\n", padlen);
 5322|       |
 5323|       |  /* We cannot use iframe->frame.hd.length because of CONTINUATION */
 5324|     30|  if (padlen - 1 > iframe->payloadleft) {
 5325|      3|    return -1;
 5326|      3|  }
 5327|       |
 5328|     27|  iframe->padlen = padlen;
 5329|       |
 5330|     27|  return (ssize_t)padlen;
 5331|     30|}
nghttp2_session.c:session_process_priority_frame:
 4136|      3|static int session_process_priority_frame(nghttp2_session *session) {
 4137|      3|  nghttp2_inbound_frame *iframe = &session->iframe;
 4138|      3|  nghttp2_frame *frame = &iframe->frame;
 4139|       |
 4140|      3|  nghttp2_frame_unpack_priority_payload(&frame->priority, iframe->sbuf.pos);
 4141|       |
 4142|      3|  return nghttp2_session_on_priority_received(session, frame);
 4143|      3|}
nghttp2_session.c:session_process_rst_stream_frame:
 4177|      6|static int session_process_rst_stream_frame(nghttp2_session *session) {
 4178|      6|  nghttp2_inbound_frame *iframe = &session->iframe;
 4179|      6|  nghttp2_frame *frame = &iframe->frame;
 4180|       |
 4181|      6|  nghttp2_frame_unpack_rst_stream_payload(&frame->rst_stream, iframe->sbuf.pos);
 4182|       |
 4183|      6|  return nghttp2_session_on_rst_stream_received(session, frame);
 4184|      6|}
nghttp2_session.c:session_process_push_promise_frame:
 4677|     21|static int session_process_push_promise_frame(nghttp2_session *session) {
 4678|     21|  int rv;
 4679|     21|  nghttp2_inbound_frame *iframe = &session->iframe;
 4680|     21|  nghttp2_frame *frame = &iframe->frame;
 4681|       |
 4682|     21|  rv = nghttp2_frame_unpack_push_promise_payload(&frame->push_promise,
 4683|     21|                                                 iframe->sbuf.pos);
 4684|       |
 4685|     21|  if (rv != 0) {
 4686|      0|    return nghttp2_session_terminate_session_with_reason(
 4687|      0|        session, NGHTTP2_PROTOCOL_ERROR, "PUSH_PROMISE: could not unpack");
 4688|      0|  }
 4689|       |
 4690|     21|  return nghttp2_session_on_push_promise_received(session, frame);
 4691|     21|}
nghttp2_session.c:inbound_frame_payload_readlen:
 5221|    607|                                            const uint8_t *last) {
 5222|    607|  return nghttp2_min((size_t)(last - in), iframe->payloadleft);
 5223|    607|}
nghttp2_session.c:inbound_frame_effective_readlen:
 5341|    485|                                               size_t readlen) {
 5342|    485|  size_t trail_padlen =
 5343|    485|      nghttp2_frame_trail_padlen(&iframe->frame, iframe->padlen);
 5344|       |
 5345|    485|  if (trail_padlen > payloadleft) {
 5346|     13|    size_t padlen;
 5347|     13|    padlen = trail_padlen - payloadleft;
 5348|     13|    if (readlen < padlen) {
 5349|      3|      return -1;
 5350|      3|    }
 5351|     10|    return (ssize_t)(readlen - padlen);
 5352|     13|  }
 5353|    472|  return (ssize_t)(readlen);
 5354|    485|}
nghttp2_session.c:inflate_header_block:
 3568|    428|                                int final, int call_header_cb) {
 3569|    428|  ssize_t proclen;
 3570|    428|  int rv;
 3571|    428|  int inflate_flags;
 3572|    428|  nghttp2_hd_nv nv;
 3573|    428|  nghttp2_stream *stream;
 3574|    428|  nghttp2_stream *subject_stream;
 3575|    428|  int trailer = 0;
 3576|       |
 3577|    428|  *readlen_ptr = 0;
 3578|    428|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 3579|       |
 3580|    428|  if (frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 3581|     17|    subject_stream = nghttp2_session_get_stream(
 3582|     17|        session, frame->push_promise.promised_stream_id);
 3583|    411|  } else {
 3584|    411|    subject_stream = stream;
 3585|    411|    trailer = session_trailer_headers(session, stream, frame);
 3586|    411|  }
 3587|       |
 3588|    428|  DEBUGF("recv: decoding header block %zu bytes\n", inlen);
 3589|  5.28k|  for (;;) {
 3590|  5.28k|    inflate_flags = 0;
 3591|  5.28k|    proclen = nghttp2_hd_inflate_hd_nv(&session->hd_inflater, &nv,
 3592|  5.28k|                                       &inflate_flags, in, inlen, final);
 3593|  5.28k|    if (nghttp2_is_fatal((int)proclen)) {
 3594|      0|      return (int)proclen;
 3595|      0|    }
 3596|  5.28k|    if (proclen < 0) {
 3597|    125|      if (session->iframe.state == NGHTTP2_IB_READ_HEADER_BLOCK) {
 3598|     14|        if (subject_stream && subject_stream->state != NGHTTP2_STREAM_CLOSING) {
 3599|       |          /* Adding RST_STREAM here is very important. It prevents
 3600|       |             from invoking subsequent callbacks for the same stream
 3601|       |             ID. */
 3602|     14|          rv = nghttp2_session_add_rst_stream(
 3603|     14|              session, subject_stream->stream_id, NGHTTP2_COMPRESSION_ERROR);
 3604|       |
 3605|     14|          if (nghttp2_is_fatal(rv)) {
 3606|      0|            return rv;
 3607|      0|          }
 3608|     14|        }
 3609|     14|      }
 3610|    125|      rv =
 3611|    125|          nghttp2_session_terminate_session(session, NGHTTP2_COMPRESSION_ERROR);
 3612|    125|      if (nghttp2_is_fatal(rv)) {
 3613|      0|        return rv;
 3614|      0|      }
 3615|       |
 3616|    125|      return NGHTTP2_ERR_HEADER_COMP;
 3617|    125|    }
 3618|  5.15k|    in += proclen;
 3619|  5.15k|    inlen -= (size_t)proclen;
 3620|  5.15k|    *readlen_ptr += (size_t)proclen;
 3621|       |
 3622|  5.15k|    DEBUGF("recv: proclen=%zd\n", proclen);
 3623|       |
 3624|  5.15k|    if (call_header_cb && (inflate_flags & NGHTTP2_HD_INFLATE_EMIT)) {
 3625|  1.44k|      rv = 0;
 3626|  1.44k|      if (subject_stream) {
 3627|  1.44k|        if (session_enforce_http_messaging(session)) {
 3628|  1.44k|          rv = nghttp2_http_on_header(session, subject_stream, frame, &nv,
 3629|  1.44k|                                      trailer);
 3630|       |
 3631|  1.44k|          if (rv == NGHTTP2_ERR_IGN_HTTP_HEADER) {
 3632|       |            /* Don't overwrite rv here */
 3633|     55|            int rv2;
 3634|       |
 3635|     55|            rv2 = session_call_on_invalid_header(session, frame, &nv);
 3636|     55|            if (rv2 == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 3637|     55|              rv = NGHTTP2_ERR_HTTP_HEADER;
 3638|     55|            } else {
 3639|      0|              if (rv2 != 0) {
 3640|      0|                return rv2;
 3641|      0|              }
 3642|       |
 3643|       |              /* header is ignored */
 3644|      0|              DEBUGF("recv: HTTP ignored: type=%u, id=%d, header %.*s: %.*s\n",
 3645|      0|                     frame->hd.type, frame->hd.stream_id, (int)nv.name->len,
 3646|      0|                     nv.name->base, (int)nv.value->len, nv.value->base);
 3647|       |
 3648|      0|              rv2 = session_call_error_callback(
 3649|      0|                  session, NGHTTP2_ERR_HTTP_HEADER,
 3650|      0|                  "Ignoring received invalid HTTP header field: frame type: "
 3651|      0|                  "%u, stream: %d, name: [%.*s], value: [%.*s]",
 3652|      0|                  frame->hd.type, frame->hd.stream_id, (int)nv.name->len,
 3653|      0|                  nv.name->base, (int)nv.value->len, nv.value->base);
 3654|       |
 3655|      0|              if (nghttp2_is_fatal(rv2)) {
 3656|      0|                return rv2;
 3657|      0|              }
 3658|      0|            }
 3659|     55|          }
 3660|       |
 3661|  1.44k|          if (rv == NGHTTP2_ERR_HTTP_HEADER) {
 3662|    167|            DEBUGF("recv: HTTP error: type=%u, id=%d, header %.*s: %.*s\n",
 3663|    167|                   frame->hd.type, frame->hd.stream_id, (int)nv.name->len,
 3664|    167|                   nv.name->base, (int)nv.value->len, nv.value->base);
 3665|       |
 3666|    167|            rv = session_call_error_callback(
 3667|    167|                session, NGHTTP2_ERR_HTTP_HEADER,
 3668|    167|                "Invalid HTTP header field was received: frame type: "
 3669|    167|                "%u, stream: %d, name: [%.*s], value: [%.*s]",
 3670|    167|                frame->hd.type, frame->hd.stream_id, (int)nv.name->len,
 3671|    167|                nv.name->base, (int)nv.value->len, nv.value->base);
 3672|       |
 3673|    167|            if (nghttp2_is_fatal(rv)) {
 3674|      0|              return rv;
 3675|      0|            }
 3676|       |
 3677|    167|            rv = session_handle_invalid_stream2(session,
 3678|    167|                                                subject_stream->stream_id,
 3679|    167|                                                frame, NGHTTP2_ERR_HTTP_HEADER);
 3680|    167|            if (nghttp2_is_fatal(rv)) {
 3681|      0|              return rv;
 3682|      0|            }
 3683|    167|            return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
 3684|    167|          }
 3685|  1.44k|        }
 3686|  1.27k|        if (rv == 0) {
 3687|  1.27k|          rv = session_call_on_header(session, frame, &nv);
 3688|       |          /* This handles NGHTTP2_ERR_PAUSE and
 3689|       |             NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE as well */
 3690|  1.27k|          if (rv != 0) {
 3691|      0|            return rv;
 3692|      0|          }
 3693|  1.27k|        }
 3694|  1.27k|      }
 3695|  1.44k|    }
 3696|  4.98k|    if (inflate_flags & NGHTTP2_HD_INFLATE_FINAL) {
 3697|     72|      nghttp2_hd_inflate_end_headers(&session->hd_inflater);
 3698|     72|      break;
 3699|     72|    }
 3700|  4.91k|    if ((inflate_flags & NGHTTP2_HD_INFLATE_EMIT) == 0 && inlen == 0) {
 3701|     64|      break;
 3702|     64|    }
 3703|  4.91k|  }
 3704|    136|  return 0;
 3705|    428|}
nghttp2_session.c:session_trailer_headers:
   94|    411|                                   nghttp2_frame *frame) {
   95|    411|  if (!stream || frame->hd.type != NGHTTP2_HEADERS) {
   96|      5|    return 0;
   97|      5|  }
   98|    406|  if (session->server) {
   99|      0|    return frame->headers.cat == NGHTTP2_HCAT_HEADERS;
  100|      0|  }
  101|       |
  102|    406|  return frame->headers.cat == NGHTTP2_HCAT_HEADERS &&
  103|    406|         (stream->http_flags & NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE) == 0;
  104|    406|}
nghttp2_session.c:session_call_on_invalid_header:
 3351|     55|                                          const nghttp2_hd_nv *nv) {
 3352|     55|  int rv;
 3353|     55|  if (session->callbacks.on_invalid_header_callback2) {
 3354|      0|    rv = session->callbacks.on_invalid_header_callback2(
 3355|      0|        session, frame, nv->name, nv->value, nv->flags, session->user_data);
 3356|     55|  } else if (session->callbacks.on_invalid_header_callback) {
 3357|      0|    rv = session->callbacks.on_invalid_header_callback(
 3358|      0|        session, frame, nv->name->base, nv->name->len, nv->value->base,
 3359|      0|        nv->value->len, nv->flags, session->user_data);
 3360|     55|  } else {
 3361|     55|    return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
 3362|     55|  }
 3363|       |
 3364|      0|  if (rv == NGHTTP2_ERR_PAUSE || rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 3365|      0|    return rv;
 3366|      0|  }
 3367|      0|  if (rv != 0) {
 3368|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 3369|      0|  }
 3370|       |
 3371|      0|  return 0;
 3372|      0|}
nghttp2_session.c:session_call_on_header:
 3328|  1.27k|                                  const nghttp2_hd_nv *nv) {
 3329|  1.27k|  int rv = 0;
 3330|  1.27k|  if (session->callbacks.on_header_callback2) {
 3331|      0|    rv = session->callbacks.on_header_callback2(
 3332|      0|        session, frame, nv->name, nv->value, nv->flags, session->user_data);
 3333|  1.27k|  } else if (session->callbacks.on_header_callback) {
 3334|  1.27k|    rv = session->callbacks.on_header_callback(
 3335|  1.27k|        session, frame, nv->name->base, nv->name->len, nv->value->base,
 3336|  1.27k|        nv->value->len, nv->flags, session->user_data);
 3337|  1.27k|  }
 3338|       |
 3339|  1.27k|  if (rv == NGHTTP2_ERR_PAUSE || rv == NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE) {
 3340|      0|    return rv;
 3341|      0|  }
 3342|  1.27k|  if (rv != 0) {
 3343|      0|    return NGHTTP2_ERR_CALLBACK_FAILURE;
 3344|      0|  }
 3345|       |
 3346|  1.27k|  return 0;
 3347|  1.27k|}
nghttp2_session.c:session_after_header_block_received:
 3735|     38|static int session_after_header_block_received(nghttp2_session *session) {
 3736|     38|  int rv = 0;
 3737|     38|  nghttp2_frame *frame = &session->iframe.frame;
 3738|     38|  nghttp2_stream *stream;
 3739|       |
 3740|       |  /* We don't call on_frame_recv_callback if stream has been closed
 3741|       |     already or being closed. */
 3742|     38|  stream = nghttp2_session_get_stream(session, frame->hd.stream_id);
 3743|     38|  if (!stream || stream->state == NGHTTP2_STREAM_CLOSING) {
 3744|      0|    return 0;
 3745|      0|  }
 3746|       |
 3747|     38|  if (session_enforce_http_messaging(session)) {
 3748|     38|    if (frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 3749|      0|      nghttp2_stream *subject_stream;
 3750|       |
 3751|      0|      subject_stream = nghttp2_session_get_stream(
 3752|      0|          session, frame->push_promise.promised_stream_id);
 3753|      0|      if (subject_stream) {
 3754|      0|        rv = nghttp2_http_on_request_headers(subject_stream, frame);
 3755|      0|      }
 3756|     38|    } else {
 3757|     38|      assert(frame->hd.type == NGHTTP2_HEADERS);
 3758|     38|      switch (frame->headers.cat) {
 3759|      0|      case NGHTTP2_HCAT_REQUEST:
 3760|      0|        rv = nghttp2_http_on_request_headers(stream, frame);
 3761|      0|        break;
 3762|     35|      case NGHTTP2_HCAT_RESPONSE:
 3763|     35|      case NGHTTP2_HCAT_PUSH_RESPONSE:
 3764|     35|        rv = nghttp2_http_on_response_headers(stream);
 3765|     35|        break;
 3766|      3|      case NGHTTP2_HCAT_HEADERS:
 3767|      3|        if (stream->http_flags & NGHTTP2_HTTP_FLAG_EXPECT_FINAL_RESPONSE) {
 3768|      0|          assert(!session->server);
 3769|      0|          rv = nghttp2_http_on_response_headers(stream);
 3770|      3|        } else {
 3771|      3|          rv = nghttp2_http_on_trailer_headers(stream, frame);
 3772|      3|        }
 3773|      3|        break;
 3774|      3|      default:
 3775|      0|        assert(0);
 3776|     38|      }
 3777|     38|      if (rv == 0 && (frame->hd.flags & NGHTTP2_FLAG_END_STREAM)) {
 3778|      6|        rv = nghttp2_http_on_remote_end_stream(stream);
 3779|      6|      }
 3780|     38|    }
 3781|     38|    if (rv != 0) {
 3782|      4|      int32_t stream_id;
 3783|       |
 3784|      4|      if (frame->hd.type == NGHTTP2_PUSH_PROMISE) {
 3785|      0|        stream_id = frame->push_promise.promised_stream_id;
 3786|      4|      } else {
 3787|      4|        stream_id = frame->hd.stream_id;
 3788|      4|      }
 3789|       |
 3790|      4|      rv = session_handle_invalid_stream2(session, stream_id, frame,
 3791|      4|                                          NGHTTP2_ERR_HTTP_MESSAGING);
 3792|      4|      if (nghttp2_is_fatal(rv)) {
 3793|      0|        return rv;
 3794|      0|      }
 3795|       |
 3796|      4|      if (frame->hd.type == NGHTTP2_HEADERS &&
 3797|      4|          (frame->hd.flags & NGHTTP2_FLAG_END_STREAM)) {
 3798|      2|        nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 3799|       |        /* Don't call nghttp2_session_close_stream_if_shut_rdwr
 3800|       |           because RST_STREAM has been submitted. */
 3801|      2|      }
 3802|      4|      return 0;
 3803|      4|    }
 3804|     38|  }
 3805|       |
 3806|     34|  rv = session_call_on_frame_received(session, frame);
 3807|     34|  if (nghttp2_is_fatal(rv)) {
 3808|      0|    return rv;
 3809|      0|  }
 3810|       |
 3811|     34|  if (frame->hd.type != NGHTTP2_HEADERS) {
 3812|      0|    return 0;
 3813|      0|  }
 3814|       |
 3815|     34|  return session_end_stream_headers_received(session, frame, stream);
 3816|     34|}
nghttp2_session.c:session_end_stream_headers_received:
 3720|     34|                                               nghttp2_stream *stream) {
 3721|     34|  int rv;
 3722|     34|  if ((frame->hd.flags & NGHTTP2_FLAG_END_STREAM) == 0) {
 3723|     28|    return 0;
 3724|     28|  }
 3725|       |
 3726|      6|  nghttp2_stream_shutdown(stream, NGHTTP2_SHUT_RD);
 3727|      6|  rv = nghttp2_session_close_stream_if_shut_rdwr(session, stream);
 3728|      6|  if (nghttp2_is_fatal(rv)) {
 3729|      0|    return rv;
 3730|      0|  }
 3731|       |
 3732|      6|  return 0;
 3733|      6|}
nghttp2_session.c:session_handle_frame_size_error:
 3424|     10|static int session_handle_frame_size_error(nghttp2_session *session) {
 3425|       |  /* TODO Currently no callback is called for this error, because we
 3426|       |     call this callback before reading any payload */
 3427|     10|  return nghttp2_session_terminate_session(session, NGHTTP2_FRAME_SIZE_ERROR);
 3428|     10|}
nghttp2_session.c:inbound_frame_set_settings_entry:
 5248|  2.55k|static void inbound_frame_set_settings_entry(nghttp2_inbound_frame *iframe) {
 5249|  2.55k|  nghttp2_settings_entry iv;
 5250|  2.55k|  nghttp2_settings_entry *min_header_table_size_entry;
 5251|  2.55k|  size_t i;
 5252|       |
 5253|  2.55k|  nghttp2_frame_unpack_settings_entry(&iv, iframe->sbuf.pos);
 5254|       |
 5255|  2.55k|  switch (iv.settings_id) {
 5256|    563|  case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:
 5257|    576|  case NGHTTP2_SETTINGS_ENABLE_PUSH:
 5258|  1.08k|  case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:
 5259|  1.52k|  case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:
 5260|  1.53k|  case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:
 5261|  1.55k|  case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:
 5262|  2.01k|  case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:
 5263|  2.01k|    break;
 5264|    546|  default:
 5265|    546|    DEBUGF("recv: unknown settings id=0x%02x\n", iv.settings_id);
 5266|       |
 5267|    546|    iframe->iv[iframe->niv++] = iv;
 5268|       |
 5269|    546|    return;
 5270|  2.55k|  }
 5271|       |
 5272|  5.15k|  for (i = 0; i < iframe->niv; ++i) {
 5273|  3.22k|    if (iframe->iv[i].settings_id == iv.settings_id) {
 5274|     85|      iframe->iv[i] = iv;
 5275|     85|      break;
 5276|     85|    }
 5277|  3.22k|  }
 5278|       |
 5279|  2.01k|  if (i == iframe->niv) {
 5280|  1.92k|    iframe->iv[iframe->niv++] = iv;
 5281|  1.92k|  }
 5282|       |
 5283|  2.01k|  if (iv.settings_id == NGHTTP2_SETTINGS_HEADER_TABLE_SIZE) {
 5284|       |    /* Keep track of minimum value of SETTINGS_HEADER_TABLE_SIZE */
 5285|    563|    min_header_table_size_entry = &iframe->iv[iframe->max_niv - 1];
 5286|       |
 5287|    563|    if (iv.value < min_header_table_size_entry->value) {
 5288|    521|      min_header_table_size_entry->value = iv.value;
 5289|    521|    }
 5290|    563|  }
 5291|  2.01k|}
nghttp2_session.c:session_process_settings_frame:
 4554|    578|static int session_process_settings_frame(nghttp2_session *session) {
 4555|    578|  nghttp2_inbound_frame *iframe = &session->iframe;
 4556|    578|  nghttp2_frame *frame = &iframe->frame;
 4557|    578|  size_t i;
 4558|    578|  nghttp2_settings_entry min_header_size_entry;
 4559|       |
 4560|    578|  if (iframe->max_niv) {
 4561|    574|    min_header_size_entry = iframe->iv[iframe->max_niv - 1];
 4562|       |
 4563|    574|    if (min_header_size_entry.value < UINT32_MAX) {
 4564|       |      /* If we have less value, then we must have
 4565|       |         SETTINGS_HEADER_TABLE_SIZE in i < iframe->niv */
 4566|  1.99k|      for (i = 0; i < iframe->niv; ++i) {
 4567|  1.99k|        if (iframe->iv[i].settings_id == NGHTTP2_SETTINGS_HEADER_TABLE_SIZE) {
 4568|    504|          break;
 4569|    504|        }
 4570|  1.99k|      }
 4571|       |
 4572|    504|      assert(i < iframe->niv);
 4573|       |
 4574|    504|      if (min_header_size_entry.value != iframe->iv[i].value) {
 4575|     26|        iframe->iv[iframe->niv++] = iframe->iv[i];
 4576|     26|        iframe->iv[i] = min_header_size_entry;
 4577|     26|      }
 4578|    504|    }
 4579|    574|  }
 4580|       |
 4581|    578|  nghttp2_frame_unpack_settings_payload(&frame->settings, iframe->iv,
 4582|    578|                                        iframe->niv);
 4583|       |
 4584|    578|  iframe->iv = NULL;
 4585|    578|  iframe->niv = 0;
 4586|    578|  iframe->max_niv = 0;
 4587|       |
 4588|    578|  return nghttp2_session_on_settings_received(session, frame, 0 /* ACK */);
 4589|    578|}
nghttp2_session.c:session_process_goaway_frame:
 4754|     25|static int session_process_goaway_frame(nghttp2_session *session) {
 4755|     25|  nghttp2_inbound_frame *iframe = &session->iframe;
 4756|     25|  nghttp2_frame *frame = &iframe->frame;
 4757|       |
 4758|     25|  nghttp2_frame_unpack_goaway_payload(&frame->goaway, iframe->sbuf.pos,
 4759|     25|                                      iframe->lbuf.pos,
 4760|     25|                                      nghttp2_buf_len(&iframe->lbuf));
 4761|       |
 4762|     25|  nghttp2_buf_wrap_init(&iframe->lbuf, NULL, 0);
 4763|       |
 4764|     25|  return nghttp2_session_on_goaway_received(session, frame);
 4765|     25|}
nghttp2_session.c:session_process_data_frame:
 4991|      5|static int session_process_data_frame(nghttp2_session *session) {
 4992|      5|  int rv;
 4993|      5|  nghttp2_frame *public_data_frame = &session->iframe.frame;
 4994|      5|  rv = nghttp2_session_on_data_received(session, public_data_frame);
 4995|      5|  if (nghttp2_is_fatal(rv)) {
 4996|      0|    return rv;
 4997|      0|  }
 4998|      5|  return 0;
 4999|      5|}
nghttp2_session.c:session_get_num_active_streams:
 6802|  7.12k|static size_t session_get_num_active_streams(nghttp2_session *session) {
 6803|  7.12k|  return nghttp2_map_size(&session->streams) - session->num_closed_streams -
 6804|  7.12k|         session->num_idle_streams;
 6805|  7.12k|}
nghttp2_session.c:inflight_settings_new:
  703|    704|                                 nghttp2_mem *mem) {
  704|    704|  *settings_ptr = nghttp2_mem_malloc(mem, sizeof(nghttp2_inflight_settings));
  705|    704|  if (!*settings_ptr) {
  706|      0|    return NGHTTP2_ERR_NOMEM;
  707|      0|  }
  708|       |
  709|    704|  if (niv > 0) {
  710|    704|    (*settings_ptr)->iv = nghttp2_frame_iv_copy(iv, niv, mem);
  711|    704|    if (!(*settings_ptr)->iv) {
  712|      0|      nghttp2_mem_free(mem, *settings_ptr);
  713|      0|      return NGHTTP2_ERR_NOMEM;
  714|      0|    }
  715|    704|  } else {
  716|      0|    (*settings_ptr)->iv = NULL;
  717|      0|  }
  718|       |
  719|    704|  (*settings_ptr)->niv = niv;
  720|    704|  (*settings_ptr)->next = NULL;
  721|       |
  722|    704|  return 0;
  723|    704|}
nghttp2_session.c:session_append_inflight_settings:
 6981|    704|                                 nghttp2_inflight_settings *settings) {
 6982|    704|  nghttp2_inflight_settings **i;
 6983|       |
 6984|    704|  for (i = &session->inflight_settings_head; *i; i = &(*i)->next)
 6985|      0|    ;
 6986|       |
 6987|    704|  *i = settings;
 6988|    704|}
nghttp2_session.c:nghttp2_session_enforce_flow_control_limits:
 1781|     72|                                            ssize_t requested_window_size) {
 1782|     72|  DEBUGF("send: remote windowsize connection=%d, remote maxframsize=%u, "
 1783|     72|         "stream(id %d)=%d\n",
 1784|     72|         session->remote_window_size, session->remote_settings.max_frame_size,
 1785|     72|         stream->stream_id, stream->remote_window_size);
 1786|       |
 1787|     72|  return nghttp2_min(nghttp2_min(nghttp2_min(requested_window_size,
 1788|     72|                                             stream->remote_window_size),
 1789|     72|                                 session->remote_window_size),
 1790|     72|                     (int32_t)session->remote_settings.max_frame_size);
 1791|     72|}
nghttp2_session.c:session_call_select_padding:
 1863|    696|                                           size_t max_payloadlen) {
 1864|    696|  ssize_t rv;
 1865|       |
 1866|    696|  if (frame->hd.length >= max_payloadlen) {
 1867|      5|    return (ssize_t)frame->hd.length;
 1868|      5|  }
 1869|       |
 1870|    691|  if (session->callbacks.select_padding_callback) {
 1871|      0|    size_t max_paddedlen;
 1872|       |
 1873|      0|    max_paddedlen =
 1874|      0|        nghttp2_min(frame->hd.length + NGHTTP2_MAX_PADLEN, max_payloadlen);
 1875|       |
 1876|      0|    rv = session->callbacks.select_padding_callback(
 1877|      0|        session, frame, max_paddedlen, session->user_data);
 1878|      0|    if (rv < (ssize_t)frame->hd.length || rv > (ssize_t)max_paddedlen) {
 1879|      0|      return NGHTTP2_ERR_CALLBACK_FAILURE;
 1880|      0|    }
 1881|      0|    return rv;
 1882|      0|  }
 1883|    691|  return (ssize_t)frame->hd.length;
 1884|    691|}
nghttp2_session.c:reschedule_stream:
 2490|     18|static void reschedule_stream(nghttp2_stream *stream) {
 2491|     18|  stream->last_writelen = stream->item->frame.hd.length;
 2492|       |
 2493|     18|  nghttp2_stream_reschedule(stream);
 2494|     18|}

nghttp2_stream_init:
   64|  1.38k|                         void *stream_user_data, nghttp2_mem *mem) {
   65|  1.38k|  nghttp2_map_entry_init(&stream->map_entry, (key_type)stream_id);
   66|  1.38k|  nghttp2_pq_init(&stream->obq, stream_less, mem);
   67|       |
   68|  1.38k|  stream->stream_id = stream_id;
   69|  1.38k|  stream->flags = flags;
   70|  1.38k|  stream->state = initial_state;
   71|  1.38k|  stream->shut_flags = NGHTTP2_SHUT_NONE;
   72|  1.38k|  stream->stream_user_data = stream_user_data;
   73|  1.38k|  stream->item = NULL;
   74|  1.38k|  stream->remote_window_size = remote_initial_window_size;
   75|  1.38k|  stream->local_window_size = local_initial_window_size;
   76|  1.38k|  stream->recv_window_size = 0;
   77|  1.38k|  stream->consumed_size = 0;
   78|  1.38k|  stream->recv_reduction = 0;
   79|  1.38k|  stream->window_update_queued = 0;
   80|       |
   81|  1.38k|  stream->dep_prev = NULL;
   82|  1.38k|  stream->dep_next = NULL;
   83|  1.38k|  stream->sib_prev = NULL;
   84|  1.38k|  stream->sib_next = NULL;
   85|       |
   86|  1.38k|  stream->closed_prev = NULL;
   87|  1.38k|  stream->closed_next = NULL;
   88|       |
   89|  1.38k|  stream->weight = weight;
   90|  1.38k|  stream->sum_dep_weight = 0;
   91|       |
   92|  1.38k|  stream->http_flags = NGHTTP2_HTTP_FLAG_NONE;
   93|  1.38k|  stream->content_length = -1;
   94|  1.38k|  stream->recv_content_length = 0;
   95|  1.38k|  stream->status_code = -1;
   96|       |
   97|  1.38k|  stream->queued = 0;
   98|  1.38k|  stream->descendant_last_cycle = 0;
   99|  1.38k|  stream->cycle = 0;
  100|  1.38k|  stream->pending_penalty = 0;
  101|  1.38k|  stream->descendant_next_seq = 0;
  102|  1.38k|  stream->seq = 0;
  103|  1.38k|  stream->last_writelen = 0;
  104|  1.38k|}
nghttp2_stream_free:
  106|  1.38k|void nghttp2_stream_free(nghttp2_stream *stream) {
  107|  1.38k|  nghttp2_pq_free(&stream->obq);
  108|       |  /* We don't free stream->item.  If it is assigned to aob, then
  109|       |     active_outbound_item_reset() will delete it.  Otherwise,
  110|       |     nghttp2_stream_close() or session_del() will delete it. */
  111|  1.38k|}
nghttp2_stream_shutdown:
  113|    673|void nghttp2_stream_shutdown(nghttp2_stream *stream, nghttp2_shut_flag flag) {
  114|    673|  stream->shut_flags = (uint8_t)(stream->shut_flags | flag);
  115|    673|}
nghttp2_stream_reschedule:
  225|     18|void nghttp2_stream_reschedule(nghttp2_stream *stream) {
  226|     18|  nghttp2_stream *dep_stream;
  227|       |
  228|     18|  assert(stream->queued);
  229|       |
  230|     18|  dep_stream = stream->dep_prev;
  231|       |
  232|     36|  for (; dep_stream; stream = dep_stream, dep_stream = dep_stream->dep_prev) {
  233|     18|    nghttp2_pq_remove(&dep_stream->obq, &stream->pq_entry);
  234|       |
  235|     18|    stream_next_cycle(stream, dep_stream->descendant_last_cycle);
  236|     18|    stream->seq = dep_stream->descendant_next_seq++;
  237|       |
  238|     18|    nghttp2_pq_push(&dep_stream->obq, &stream->pq_entry);
  239|       |
  240|     18|    DEBUGF("stream: stream=%d obq resched cycle=%lu\n", stream->stream_id,
  241|     18|           stream->cycle);
  242|       |
  243|     18|    dep_stream->last_writelen = stream->last_writelen;
  244|     18|  }
  245|     18|}
nghttp2_stream_attach_item:
  478|     31|                               nghttp2_outbound_item *item) {
  479|     31|  int rv;
  480|       |
  481|     31|  assert((stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_ALL) == 0);
  482|     31|  assert(stream->item == NULL);
  483|       |
  484|     31|  DEBUGF("stream: stream=%d attach item=%p\n", stream->stream_id, item);
  485|       |
  486|     31|  stream->item = item;
  487|       |
  488|     31|  rv = stream_update_dep_on_attach_item(stream);
  489|     31|  if (rv != 0) {
  490|       |    /* This may relave stream->queued == 1, but stream->item == NULL.
  491|       |       But only consequence of this error is fatal one, and session
  492|       |       destruction.  In that execution path, these inconsistency does
  493|       |       not matter. */
  494|      0|    stream->item = NULL;
  495|      0|    return rv;
  496|      0|  }
  497|       |
  498|     31|  return 0;
  499|     31|}
nghttp2_stream_detach_item:
  501|     31|int nghttp2_stream_detach_item(nghttp2_stream *stream) {
  502|     31|  DEBUGF("stream: stream=%d detach item=%p\n", stream->stream_id, stream->item);
  503|       |
  504|     31|  stream->item = NULL;
  505|     31|  stream->flags = (uint8_t)(stream->flags & ~NGHTTP2_STREAM_FLAG_DEFERRED_ALL);
  506|       |
  507|     31|  return stream_update_dep_on_detach_item(stream);
  508|     31|}
nghttp2_stream_defer_item:
  510|     54|int nghttp2_stream_defer_item(nghttp2_stream *stream, uint8_t flags) {
  511|     54|  assert(stream->item);
  512|       |
  513|     54|  DEBUGF("stream: stream=%d defer item=%p cause=%02x\n", stream->stream_id,
  514|     54|         stream->item, flags);
  515|       |
  516|     54|  stream->flags |= flags;
  517|       |
  518|     54|  return stream_update_dep_on_detach_item(stream);
  519|     54|}
nghttp2_stream_resume_deferred_item:
  521|     89|int nghttp2_stream_resume_deferred_item(nghttp2_stream *stream, uint8_t flags) {
  522|     89|  assert(stream->item);
  523|       |
  524|     89|  DEBUGF("stream: stream=%d resume item=%p flags=%02x\n", stream->stream_id,
  525|     89|         stream->item, flags);
  526|       |
  527|     89|  stream->flags = (uint8_t)(stream->flags & ~flags);
  528|       |
  529|     89|  if (stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_ALL) {
  530|     43|    return 0;
  531|     43|  }
  532|       |
  533|     46|  return stream_update_dep_on_attach_item(stream);
  534|     89|}
nghttp2_stream_check_deferred_item:
  536|    739|int nghttp2_stream_check_deferred_item(nghttp2_stream *stream) {
  537|    739|  return stream->item && (stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_ALL);
  538|    739|}
nghttp2_stream_check_deferred_by_flow_control:
  540|    405|int nghttp2_stream_check_deferred_by_flow_control(nghttp2_stream *stream) {
  541|    405|  return stream->item &&
  542|    405|         (stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_FLOW_CONTROL);
  543|    405|}
nghttp2_stream_update_remote_initial_window_size:
  560|    411|    int32_t old_initial_window_size) {
  561|    411|  return update_initial_window_size(&stream->remote_window_size,
  562|    411|                                    new_initial_window_size,
  563|    411|                                    old_initial_window_size);
  564|    411|}
nghttp2_stream_update_local_initial_window_size:
  568|      2|    int32_t old_initial_window_size) {
  569|      2|  return update_initial_window_size(&stream->local_window_size,
  570|      2|                                    new_initial_window_size,
  571|      2|                                    old_initial_window_size);
  572|      2|}
nghttp2_stream_dep_add:
  739|    678|                            nghttp2_stream *stream) {
  740|    678|  DEBUGF("stream: dep_add dep_stream(%p)=%d, stream(%p)=%d\n", dep_stream,
  741|    678|         dep_stream->stream_id, stream, stream->stream_id);
  742|       |
  743|    678|  dep_stream->sum_dep_weight += stream->weight;
  744|       |
  745|    678|  if (dep_stream->dep_next == NULL) {
  746|    678|    link_dep(dep_stream, stream);
  747|    678|  } else {
  748|      0|    insert_link_dep(dep_stream, stream);
  749|      0|  }
  750|       |
  751|    678|  validate_tree(stream);
  752|    678|}
nghttp2_stream_dep_remove:
  754|    457|int nghttp2_stream_dep_remove(nghttp2_stream *stream) {
  755|    457|  nghttp2_stream *dep_prev, *si;
  756|    457|  int32_t sum_dep_weight_delta;
  757|    457|  int rv;
  758|       |
  759|    457|  DEBUGF("stream: dep_remove stream(%p)=%d\n", stream, stream->stream_id);
  760|       |
  761|       |  /* Distribute weight of |stream| to direct descendants */
  762|    457|  sum_dep_weight_delta = -stream->weight;
  763|       |
  764|    457|  for (si = stream->dep_next; si; si = si->sib_next) {
  765|      0|    si->weight = nghttp2_stream_dep_distributed_weight(stream, si->weight);
  766|       |
  767|      0|    sum_dep_weight_delta += si->weight;
  768|       |
  769|      0|    if (si->queued) {
  770|      0|      rv = stream_obq_move(stream->dep_prev, stream, si);
  771|      0|      if (rv != 0) {
  772|      0|        return rv;
  773|      0|      }
  774|      0|    }
  775|      0|  }
  776|       |
  777|    457|  assert(stream->dep_prev);
  778|       |
  779|    457|  dep_prev = stream->dep_prev;
  780|       |
  781|    457|  dep_prev->sum_dep_weight += sum_dep_weight_delta;
  782|       |
  783|    457|  if (stream->queued) {
  784|      0|    stream_obq_remove(stream);
  785|      0|  }
  786|       |
  787|    457|  if (stream->sib_prev) {
  788|      0|    unlink_sib(stream);
  789|    457|  } else {
  790|    457|    unlink_dep(stream);
  791|    457|  }
  792|       |
  793|    457|  stream->sum_dep_weight = 0;
  794|       |
  795|    457|  stream->dep_prev = NULL;
  796|    457|  stream->dep_next = NULL;
  797|    457|  stream->sib_prev = NULL;
  798|    457|  stream->sib_next = NULL;
  799|       |
  800|    457|  validate_tree(dep_prev);
  801|       |
  802|    457|  return 0;
  803|    457|}
nghttp2_stream_in_dep_tree:
  918|    457|int nghttp2_stream_in_dep_tree(nghttp2_stream *stream) {
  919|    457|  return stream->dep_prev || stream->dep_next || stream->sib_prev ||
  920|    457|         stream->sib_next;
  921|    457|}
nghttp2_stream_next_outbound_item:
  924|  2.34k|nghttp2_stream_next_outbound_item(nghttp2_stream *stream) {
  925|  2.34k|  nghttp2_pq_entry *ent;
  926|  2.34k|  nghttp2_stream *si;
  927|       |
  928|  2.42k|  for (;;) {
  929|  2.42k|    if (stream_active(stream)) {
  930|       |      /* Update ascendant's descendant_last_cycle here, so that we can
  931|       |         assure that new stream is scheduled based on it. */
  932|    152|      for (si = stream; si->dep_prev; si = si->dep_prev) {
  933|     76|        si->dep_prev->descendant_last_cycle = si->cycle;
  934|     76|      }
  935|     76|      return stream->item;
  936|     76|    }
  937|  2.34k|    ent = nghttp2_pq_top(&stream->obq);
  938|  2.34k|    if (!ent) {
  939|  2.27k|      return NULL;
  940|  2.27k|    }
  941|     76|    stream = nghttp2_struct_of(ent, nghttp2_stream, pq_entry);
  942|     76|  }
  943|  2.34k|}
nghttp2_stream.c:stream_next_cycle:
  136|     95|static void stream_next_cycle(nghttp2_stream *stream, uint64_t last_cycle) {
  137|     95|  uint64_t penalty;
  138|       |
  139|     95|  penalty = (uint64_t)stream->last_writelen * NGHTTP2_MAX_WEIGHT +
  140|     95|            stream->pending_penalty;
  141|       |
  142|     95|  stream->cycle = last_cycle + penalty / (uint32_t)stream->weight;
  143|     95|  stream->pending_penalty = (uint32_t)(penalty % (uint32_t)stream->weight);
  144|     95|}
nghttp2_stream.c:stream_update_dep_on_attach_item:
  455|     77|static int stream_update_dep_on_attach_item(nghttp2_stream *stream) {
  456|     77|  int rv;
  457|       |
  458|     77|  rv = stream_obq_push(stream->dep_prev, stream);
  459|     77|  if (rv != 0) {
  460|      0|    return rv;
  461|      0|  }
  462|       |
  463|     77|  validate_tree(stream);
  464|     77|  return 0;
  465|     77|}
nghttp2_stream.c:stream_update_dep_on_detach_item:
  467|     85|static int stream_update_dep_on_detach_item(nghttp2_stream *stream) {
  468|     85|  if (nghttp2_pq_empty(&stream->obq)) {
  469|     85|    stream_obq_remove(stream);
  470|     85|  }
  471|       |
  472|     85|  validate_tree(stream);
  473|       |
  474|     85|  return 0;
  475|     85|}
nghttp2_stream.c:update_initial_window_size:
  547|    413|                                      int32_t old_initial_window_size) {
  548|    413|  int64_t new_window_size = (int64_t)(*window_size_ptr) +
  549|    413|                            new_initial_window_size - old_initial_window_size;
  550|    413|  if (INT32_MIN > new_window_size ||
  551|    413|      new_window_size > NGHTTP2_MAX_WINDOW_SIZE) {
  552|      0|    return -1;
  553|      0|  }
  554|    413|  *window_size_ptr = (int32_t)new_window_size;
  555|    413|  return 0;
  556|    413|}
nghttp2_stream.c:stream_subtree_active:
  129|     77|static int stream_subtree_active(nghttp2_stream *stream) {
  130|     77|  return stream_active(stream) || !nghttp2_pq_empty(&stream->obq);
  131|     77|}
nghttp2_stream.c:stream_obq_push:
  146|     77|static int stream_obq_push(nghttp2_stream *dep_stream, nghttp2_stream *stream) {
  147|     77|  int rv;
  148|       |
  149|    154|  for (; dep_stream && !stream->queued;
  150|     77|       stream = dep_stream, dep_stream = dep_stream->dep_prev) {
  151|     77|    stream_next_cycle(stream, dep_stream->descendant_last_cycle);
  152|     77|    stream->seq = dep_stream->descendant_next_seq++;
  153|       |
  154|     77|    DEBUGF("stream: stream=%d obq push cycle=%lu\n", stream->stream_id,
  155|     77|           stream->cycle);
  156|       |
  157|     77|    DEBUGF("stream: push stream %d to stream %d\n", stream->stream_id,
  158|     77|           dep_stream->stream_id);
  159|       |
  160|     77|    rv = nghttp2_pq_push(&dep_stream->obq, &stream->pq_entry);
  161|     77|    if (rv != 0) {
  162|      0|      return rv;
  163|      0|    }
  164|     77|    stream->queued = 1;
  165|     77|  }
  166|       |
  167|     77|  return 0;
  168|     77|}
nghttp2_stream.c:validate_tree:
  452|  1.29k|static void validate_tree(nghttp2_stream *stream) { (void)stream; }
nghttp2_stream.c:link_dep:
  635|    678|static void link_dep(nghttp2_stream *dep_stream, nghttp2_stream *stream) {
  636|    678|  dep_stream->dep_next = stream;
  637|    678|  if (stream) {
  638|    678|    stream->dep_prev = dep_stream;
  639|    678|  }
  640|    678|}
nghttp2_stream.c:stream_obq_remove:
  175|     85|static void stream_obq_remove(nghttp2_stream *stream) {
  176|     85|  nghttp2_stream *dep_stream;
  177|       |
  178|     85|  dep_stream = stream->dep_prev;
  179|       |
  180|     85|  if (!stream->queued) {
  181|      8|    return;
  182|      8|  }
  183|       |
  184|    154|  for (; dep_stream; stream = dep_stream, dep_stream = dep_stream->dep_prev) {
  185|     77|    DEBUGF("stream: remove stream %d from stream %d\n", stream->stream_id,
  186|     77|           dep_stream->stream_id);
  187|       |
  188|     77|    nghttp2_pq_remove(&dep_stream->obq, &stream->pq_entry);
  189|       |
  190|     77|    assert(stream->queued);
  191|       |
  192|     77|    stream->queued = 0;
  193|     77|    stream->cycle = 0;
  194|     77|    stream->pending_penalty = 0;
  195|     77|    stream->descendant_last_cycle = 0;
  196|     77|    stream->last_writelen = 0;
  197|       |
  198|     77|    if (stream_subtree_active(dep_stream)) {
  199|      0|      return;
  200|      0|    }
  201|     77|  }
  202|     77|}
nghttp2_stream.c:unlink_dep:
  698|    457|static void unlink_dep(nghttp2_stream *stream) {
  699|    457|  nghttp2_stream *prev, *next, *dep_next;
  700|       |
  701|    457|  prev = stream->dep_prev;
  702|    457|  dep_next = stream->dep_next;
  703|       |
  704|    457|  assert(prev);
  705|       |
  706|    457|  if (dep_next) {
  707|       |    /*
  708|       |     * prev
  709|       |     *   |
  710|       |     * stream(--sib_next--...)
  711|       |     *   |
  712|       |     * dep_next
  713|       |     */
  714|      0|    link_dep(prev, dep_next);
  715|       |
  716|      0|    set_dep_prev(dep_next, stream->dep_prev);
  717|       |
  718|      0|    if (stream->sib_next) {
  719|      0|      link_sib(stream_last_sib(dep_next), stream->sib_next);
  720|      0|    }
  721|       |
  722|    457|  } else if (stream->sib_next) {
  723|       |    /*
  724|       |     * prev
  725|       |     *   |
  726|       |     * stream--sib_next
  727|       |     */
  728|      0|    next = stream->sib_next;
  729|       |
  730|      0|    next->sib_prev = NULL;
  731|       |
  732|      0|    link_dep(prev, next);
  733|    457|  } else {
  734|    457|    prev->dep_next = NULL;
  735|    457|  }
  736|    457|}
nghttp2_stream.c:stream_active:
  121|  2.50k|static int stream_active(nghttp2_stream *stream) {
  122|  2.50k|  return stream->item &&
  123|  2.50k|         (stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_ALL) == 0;
  124|  2.50k|}

nghttp2_submit_rst_stream:
  269|    449|                              int32_t stream_id, uint32_t error_code) {
  270|    449|  (void)flags;
  271|       |
  272|    449|  if (stream_id == 0) {
  273|     65|    return NGHTTP2_ERR_INVALID_ARGUMENT;
  274|     65|  }
  275|       |
  276|    384|  return nghttp2_session_add_rst_stream(session, stream_id, error_code);
  277|    449|}
nghttp2_submit_settings:
  305|    704|                            const nghttp2_settings_entry *iv, size_t niv) {
  306|    704|  (void)flags;
  307|    704|  return nghttp2_session_add_settings(session, NGHTTP2_FLAG_NONE, iv, niv);
  308|    704|}
nghttp2_session_set_local_window_size:
  423|    704|                                          int32_t window_size) {
  424|    704|  int32_t window_size_increment;
  425|    704|  nghttp2_stream *stream;
  426|    704|  int rv;
  427|    704|  (void)flags;
  428|       |
  429|    704|  if (window_size < 0) {
  430|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
  431|      0|  }
  432|       |
  433|    704|  if (stream_id == 0) {
  434|    704|    window_size_increment = window_size - session->local_window_size;
  435|       |
  436|    704|    if (window_size_increment == 0) {
  437|      0|      return 0;
  438|      0|    }
  439|       |
  440|    704|    if (window_size_increment < 0) {
  441|      0|      return nghttp2_adjust_local_window_size(
  442|      0|          &session->local_window_size, &session->recv_window_size,
  443|      0|          &session->recv_reduction, &window_size_increment);
  444|      0|    }
  445|       |
  446|    704|    rv = nghttp2_increase_local_window_size(
  447|    704|        &session->local_window_size, &session->recv_window_size,
  448|    704|        &session->recv_reduction, &window_size_increment);
  449|       |
  450|    704|    if (rv != 0) {
  451|      0|      return rv;
  452|      0|    }
  453|       |
  454|    704|    if (window_size_increment > 0) {
  455|    704|      return nghttp2_session_add_window_update(session, 0, stream_id,
  456|    704|                                               window_size_increment);
  457|    704|    }
  458|       |
  459|      0|    return nghttp2_session_update_recv_connection_window_size(session, 0);
  460|    704|  } else {
  461|      0|    stream = nghttp2_session_get_stream(session, stream_id);
  462|       |
  463|      0|    if (stream == NULL) {
  464|      0|      return 0;
  465|      0|    }
  466|       |
  467|      0|    window_size_increment = window_size - stream->local_window_size;
  468|       |
  469|      0|    if (window_size_increment == 0) {
  470|      0|      return 0;
  471|      0|    }
  472|       |
  473|      0|    if (window_size_increment < 0) {
  474|      0|      return nghttp2_adjust_local_window_size(
  475|      0|          &stream->local_window_size, &stream->recv_window_size,
  476|      0|          &stream->recv_reduction, &window_size_increment);
  477|      0|    }
  478|       |
  479|      0|    rv = nghttp2_increase_local_window_size(
  480|      0|        &stream->local_window_size, &stream->recv_window_size,
  481|      0|        &stream->recv_reduction, &window_size_increment);
  482|       |
  483|      0|    if (rv != 0) {
  484|      0|      return rv;
  485|      0|    }
  486|       |
  487|      0|    if (window_size_increment > 0) {
  488|      0|      return nghttp2_session_add_window_update(session, 0, stream_id,
  489|      0|                                               window_size_increment);
  490|      0|    }
  491|       |
  492|      0|    return nghttp2_session_update_recv_stream_window_size(session, stream, 0,
  493|      0|                                                          1);
  494|      0|  }
  495|       |
  496|      0|  return 0;
  497|    704|}
nghttp2_submit_request:
  685|    678|                               void *stream_user_data) {
  686|    678|  uint8_t flags;
  687|    678|  int rv;
  688|       |
  689|    678|  if (session->server) {
  690|      0|    return NGHTTP2_ERR_PROTO;
  691|      0|  }
  692|       |
  693|    678|  if (pri_spec && !nghttp2_priority_spec_check_default(pri_spec)) {
  694|      0|    rv = detect_self_dependency(session, -1, pri_spec);
  695|      0|    if (rv != 0) {
  696|      0|      return rv;
  697|      0|    }
  698|    678|  } else {
  699|    678|    pri_spec = NULL;
  700|    678|  }
  701|       |
  702|    678|  flags = set_request_flags(pri_spec, data_prd);
  703|       |
  704|    678|  return submit_headers_shared_nva(session, flags, -1, pri_spec, nva, nvlen,
  705|    678|                                   data_prd, stream_user_data);
  706|    678|}
nghttp2_submit_data:
  736|     31|                        const nghttp2_data_provider *data_prd) {
  737|     31|  int rv;
  738|     31|  nghttp2_outbound_item *item;
  739|     31|  nghttp2_frame *frame;
  740|     31|  nghttp2_data_aux_data *aux_data;
  741|     31|  uint8_t nflags = flags & NGHTTP2_FLAG_END_STREAM;
  742|     31|  nghttp2_mem *mem;
  743|       |
  744|     31|  mem = &session->mem;
  745|       |
  746|     31|  if (stream_id == 0) {
  747|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
  748|      0|  }
  749|       |
  750|     31|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
  751|     31|  if (item == NULL) {
  752|      0|    return NGHTTP2_ERR_NOMEM;
  753|      0|  }
  754|       |
  755|     31|  nghttp2_outbound_item_init(item);
  756|       |
  757|     31|  frame = &item->frame;
  758|     31|  aux_data = &item->aux_data.data;
  759|     31|  aux_data->data_prd = *data_prd;
  760|     31|  aux_data->eof = 0;
  761|     31|  aux_data->flags = nflags;
  762|       |
  763|       |  /* flags are sent on transmission */
  764|     31|  nghttp2_frame_data_init(&frame->data, NGHTTP2_FLAG_NONE, stream_id);
  765|       |
  766|     31|  rv = nghttp2_session_add_item(session, item);
  767|     31|  if (rv != 0) {
  768|      0|    nghttp2_frame_data_free(&frame->data);
  769|      0|    nghttp2_mem_free(mem, item);
  770|      0|    return rv;
  771|      0|  }
  772|     31|  return 0;
  773|     31|}
nghttp2_pack_settings_payload:
  777|      1|                                      size_t niv) {
  778|      1|  if (!nghttp2_iv_check(iv, niv)) {
  779|      0|    return NGHTTP2_ERR_INVALID_ARGUMENT;
  780|      0|  }
  781|       |
  782|      1|  if (buflen < (niv * NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH)) {
  783|      0|    return NGHTTP2_ERR_INSUFF_BUFSIZE;
  784|      0|  }
  785|       |
  786|      1|  return (ssize_t)nghttp2_frame_pack_settings_payload(buf, iv, niv);
  787|      1|}
nghttp2_submit.c:submit_headers_shared_nva:
  147|    678|                                         void *stream_user_data) {
  148|    678|  int rv;
  149|    678|  nghttp2_nv *nva_copy;
  150|    678|  nghttp2_priority_spec copy_pri_spec;
  151|    678|  nghttp2_mem *mem;
  152|       |
  153|    678|  mem = &session->mem;
  154|       |
  155|    678|  if (pri_spec) {
  156|      0|    copy_pri_spec = *pri_spec;
  157|      0|    nghttp2_priority_spec_normalize_weight(&copy_pri_spec);
  158|    678|  } else {
  159|    678|    nghttp2_priority_spec_default_init(&copy_pri_spec);
  160|    678|  }
  161|       |
  162|    678|  rv = nghttp2_nv_array_copy(&nva_copy, nva, nvlen, mem);
  163|    678|  if (rv < 0) {
  164|      0|    return rv;
  165|      0|  }
  166|       |
  167|    678|  return submit_headers_shared(session, flags, stream_id, &copy_pri_spec,
  168|    678|                               nva_copy, nvlen, data_prd, stream_user_data);
  169|    678|}
nghttp2_submit.c:submit_headers_shared:
   72|    678|                                     void *stream_user_data) {
   73|    678|  int rv;
   74|    678|  uint8_t flags_copy;
   75|    678|  nghttp2_outbound_item *item = NULL;
   76|    678|  nghttp2_frame *frame = NULL;
   77|    678|  nghttp2_headers_category hcat;
   78|    678|  nghttp2_mem *mem;
   79|       |
   80|    678|  mem = &session->mem;
   81|       |
   82|    678|  item = nghttp2_mem_malloc(mem, sizeof(nghttp2_outbound_item));
   83|    678|  if (item == NULL) {
   84|      0|    rv = NGHTTP2_ERR_NOMEM;
   85|      0|    goto fail;
   86|      0|  }
   87|       |
   88|    678|  nghttp2_outbound_item_init(item);
   89|       |
   90|    678|  if (data_prd != NULL && data_prd->read_callback != NULL) {
   91|     31|    item->aux_data.headers.data_prd = *data_prd;
   92|     31|  }
   93|       |
   94|    678|  item->aux_data.headers.stream_user_data = stream_user_data;
   95|       |
   96|    678|  flags_copy =
   97|    678|      (uint8_t)((flags & (NGHTTP2_FLAG_END_STREAM | NGHTTP2_FLAG_PRIORITY)) |
   98|    678|                NGHTTP2_FLAG_END_HEADERS);
   99|       |
  100|    678|  if (stream_id == -1) {
  101|    678|    if (session->next_stream_id > INT32_MAX) {
  102|      0|      rv = NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE;
  103|      0|      goto fail;
  104|      0|    }
  105|       |
  106|    678|    stream_id = (int32_t)session->next_stream_id;
  107|    678|    session->next_stream_id += 2;
  108|       |
  109|    678|    hcat = NGHTTP2_HCAT_REQUEST;
  110|    678|  } else {
  111|       |    /* More specific categorization will be done later. */
  112|      0|    hcat = NGHTTP2_HCAT_HEADERS;
  113|      0|  }
  114|       |
  115|    678|  frame = &item->frame;
  116|       |
  117|    678|  nghttp2_frame_headers_init(&frame->headers, flags_copy, stream_id, hcat,
  118|    678|                             pri_spec, nva_copy, nvlen);
  119|       |
  120|    678|  rv = nghttp2_session_add_item(session, item);
  121|       |
  122|    678|  if (rv != 0) {
  123|      0|    nghttp2_frame_headers_free(&frame->headers, mem);
  124|      0|    goto fail2;
  125|      0|  }
  126|       |
  127|    678|  if (hcat == NGHTTP2_HCAT_REQUEST) {
  128|    678|    return stream_id;
  129|    678|  }
  130|       |
  131|      0|  return 0;
  132|       |
  133|      0|fail:
  134|       |  /* nghttp2_frame_headers_init() takes ownership of nva_copy. */
  135|      0|  nghttp2_nv_array_del(nva_copy, mem);
  136|      0|fail2:
  137|      0|  nghttp2_mem_free(mem, item);
  138|       |
  139|      0|  return rv;
  140|      0|}
nghttp2_submit.c:set_request_flags:
  668|    678|                                 const nghttp2_data_provider *data_prd) {
  669|    678|  uint8_t flags = NGHTTP2_FLAG_NONE;
  670|    678|  if (data_prd == NULL || data_prd->read_callback == NULL) {
  671|    647|    flags |= NGHTTP2_FLAG_END_STREAM;
  672|    647|  }
  673|       |
  674|    678|  if (pri_spec) {
  675|      0|    flags |= NGHTTP2_FLAG_PRIORITY;
  676|      0|  }
  677|       |
  678|    678|  return flags;
  679|    678|}

ex_data.c:ex_class_item_LHASH_HASH:
  105|     19|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|     19|                const o_type *a = arg; \
  107|     19|                return name##_hash(a); }
ex_data.c:ex_class_item_LHASH_COMP:
  114|     15|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     15|                const o_type *a = arg1;             \
  116|     15|                const o_type *b = arg2; \
  117|     15|                return name##_cmp(a,b); }

EVP_PKEY_asn1_get_count:
  133|     13|{
  134|     13|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  135|     13|    if (app_methods)
  136|      0|        num += sk_EVP_PKEY_ASN1_METHOD_num(app_methods);
  137|     13|    return num;
  138|     13|}
EVP_PKEY_asn1_get0:
  141|     12|{
  142|     12|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  143|     12|    if (idx < 0)
  144|      0|        return NULL;
  145|     12|    if (idx < num)
  146|     12|        return standard_methods[idx];
  147|      0|    idx -= num;
  148|      0|    return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
  149|     12|}
EVP_PKEY_asn1_find_str:
  202|      1|{
  203|      1|    int i;
  204|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  205|      1|    if (len == -1)
  206|      1|        len = strlen(str);
  207|      1|    if (pe) {
  208|      1|#ifndef OPENSSL_NO_ENGINE
  209|      1|        ENGINE *e;
  210|      1|        ameth = ENGINE_pkey_asn1_find_str(&e, str, len);
  211|      1|        if (ameth) {
  212|       |            /*
  213|       |             * Convert structural into functional reference
  214|       |             */
  215|      0|            if (!ENGINE_init(e))
  216|      0|                ameth = NULL;
  217|      0|            ENGINE_free(e);
  218|      0|            *pe = e;
  219|      0|            return ameth;
  220|      0|        }
  221|      1|#endif
  222|      1|        *pe = NULL;
  223|      1|    }
  224|     13|    for (i = 0; i < EVP_PKEY_asn1_get_count(); i++) {
  225|     12|        ameth = EVP_PKEY_asn1_get0(i);
  226|     12|        if (ameth->pkey_flags & ASN1_PKEY_ALIAS)
  227|      5|            continue;
  228|      7|        if (((int)strlen(ameth->pem_str) == len) &&
  229|      7|            !strncasecmp(ameth->pem_str, str, len))
  230|      0|            return ameth;
  231|      7|    }
  232|      1|    return NULL;
  233|      1|}
EVP_PKEY_asn1_new:
  289|      3|{
  290|      3|    EVP_PKEY_ASN1_METHOD *ameth;
  291|      3|    ameth = OPENSSL_malloc(sizeof(EVP_PKEY_ASN1_METHOD));
  292|      3|    if (!ameth)
  293|      0|        return NULL;
  294|       |
  295|      3|    memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));
  296|       |
  297|      3|    ameth->pkey_id = id;
  298|      3|    ameth->pkey_base_id = id;
  299|      3|    ameth->pkey_flags = flags | ASN1_PKEY_DYNAMIC;
  300|       |
  301|      3|    if (info) {
  302|      3|        ameth->info = BUF_strdup(info);
  303|      3|        if (!ameth->info)
  304|      0|            goto err;
  305|      3|    } else
  306|      0|        ameth->info = NULL;
  307|       |
  308|      3|    if (pem_str) {
  309|      3|        ameth->pem_str = BUF_strdup(pem_str);
  310|      3|        if (!ameth->pem_str)
  311|      0|            goto err;
  312|      3|    } else
  313|      0|        ameth->pem_str = NULL;
  314|       |
  315|      3|    ameth->pub_decode = 0;
  316|      3|    ameth->pub_encode = 0;
  317|      3|    ameth->pub_cmp = 0;
  318|      3|    ameth->pub_print = 0;
  319|       |
  320|      3|    ameth->priv_decode = 0;
  321|      3|    ameth->priv_encode = 0;
  322|      3|    ameth->priv_print = 0;
  323|       |
  324|      3|    ameth->old_priv_encode = 0;
  325|      3|    ameth->old_priv_decode = 0;
  326|       |
  327|      3|    ameth->item_verify = 0;
  328|      3|    ameth->item_sign = 0;
  329|       |
  330|      3|    ameth->pkey_size = 0;
  331|      3|    ameth->pkey_bits = 0;
  332|       |
  333|      3|    ameth->param_decode = 0;
  334|      3|    ameth->param_encode = 0;
  335|      3|    ameth->param_missing = 0;
  336|      3|    ameth->param_copy = 0;
  337|      3|    ameth->param_cmp = 0;
  338|      3|    ameth->param_print = 0;
  339|       |
  340|      3|    ameth->pkey_free = 0;
  341|      3|    ameth->pkey_ctrl = 0;
  342|       |
  343|      3|    return ameth;
  344|       |
  345|      0| err:
  346|       |
  347|      0|    EVP_PKEY_asn1_free(ameth);
  348|      0|    return NULL;
  349|       |
  350|      3|}
EVP_PKEY_asn1_set_public:
  409|      2|{
  410|      2|    ameth->pub_decode = pub_decode;
  411|      2|    ameth->pub_encode = pub_encode;
  412|      2|    ameth->pub_cmp = pub_cmp;
  413|      2|    ameth->pub_print = pub_print;
  414|      2|    ameth->pkey_size = pkey_size;
  415|      2|    ameth->pkey_bits = pkey_bits;
  416|      2|}
EVP_PKEY_asn1_set_private:
  428|      2|{
  429|      2|    ameth->priv_decode = priv_decode;
  430|      2|    ameth->priv_encode = priv_encode;
  431|      2|    ameth->priv_print = priv_print;
  432|      2|}
EVP_PKEY_asn1_set_param:
  448|      2|{
  449|      2|    ameth->param_decode = param_decode;
  450|      2|    ameth->param_encode = param_encode;
  451|      2|    ameth->param_missing = param_missing;
  452|      2|    ameth->param_copy = param_copy;
  453|      2|    ameth->param_cmp = param_cmp;
  454|      2|    ameth->param_print = param_print;
  455|      2|}
EVP_PKEY_asn1_set_free:
  459|      3|{
  460|      3|    ameth->pkey_free = pkey_free;
  461|      3|}
EVP_PKEY_asn1_set_ctrl:
  466|      3|{
  467|      3|    ameth->pkey_ctrl = pkey_ctrl;
  468|      3|}

ERR_load_ASN1_strings:
  346|      1|{
  347|      1|#ifndef OPENSSL_NO_ERR
  348|       |
  349|      1|    if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
  350|      1|        ERR_load_strings(0, ASN1_str_functs);
  351|      1|        ERR_load_strings(0, ASN1_str_reasons);
  352|      1|    }
  353|      1|#endif
  354|      1|}

ASN1_add_oid_module:
   99|      1|{
  100|      1|    CONF_module_add("oid_section", oid_module_init, oid_module_finish);
  101|      1|}

ERR_load_BIO_strings:
  149|      1|{
  150|      1|#ifndef OPENSSL_NO_ERR
  151|       |
  152|      1|    if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
  153|      1|        ERR_load_strings(0, BIO_str_functs);
  154|      1|        ERR_load_strings(0, BIO_str_reasons);
  155|      1|    }
  156|      1|#endif
  157|      1|}

BIO_new_file:
  170|      1|{
  171|      1|    BIO  *ret;
  172|      1|    FILE *file = file_fopen(filename, mode);
  173|       |
  174|      1|    if (file == NULL) {
  175|      1|        SYSerr(SYS_F_FOPEN, get_last_sys_error());
  176|      1|        ERR_add_error_data(5, "fopen('", filename, "','", mode, "')");
  177|      1|        if (errno == ENOENT
  178|      1|# ifdef ENXIO
  179|      1|            || errno == ENXIO
  180|      1|# endif
  181|      1|            )
  182|      1|            BIOerr(BIO_F_BIO_NEW_FILE, BIO_R_NO_SUCH_FILE);
  183|      0|        else
  184|      1|            BIOerr(BIO_F_BIO_NEW_FILE, ERR_R_SYS_LIB);
  185|      1|        return (NULL);
  186|      1|    }
  187|      0|    if ((ret = BIO_new(BIO_s_file())) == NULL) {
  188|      0|        fclose(file);
  189|      0|        return (NULL);
  190|      0|    }
  191|       |
  192|      0|    BIO_clear_flags(ret, BIO_FLAGS_UPLINK); /* we did fopen -> we disengage
  193|       |                                             * UPLINK */
  194|      0|    BIO_set_fp(ret, file, BIO_CLOSE);
  195|      0|    return (ret);
  196|      0|}
bss_file.c:file_fopen:
  119|      1|{
  120|      1|    FILE *file = NULL;
  121|       |
  122|       |#  if defined(_WIN32) && defined(CP_UTF8)
  123|       |    int sz, len_0 = (int)strlen(filename) + 1;
  124|       |    DWORD flags;
  125|       |
  126|       |    /*
  127|       |     * Basically there are three cases to cover: a) filename is
  128|       |     * pure ASCII string; b) actual UTF-8 encoded string and
  129|       |     * c) locale-ized string, i.e. one containing 8-bit
  130|       |     * characters that are meaningful in current system locale.
  131|       |     * If filename is pure ASCII or real UTF-8 encoded string,
  132|       |     * MultiByteToWideChar succeeds and _wfopen works. If
  133|       |     * filename is locale-ized string, chances are that
  134|       |     * MultiByteToWideChar fails reporting
  135|       |     * ERROR_NO_UNICODE_TRANSLATION, in which case we fall
  136|       |     * back to fopen...
  137|       |     */
  138|       |    if ((sz = MultiByteToWideChar(CP_UTF8, (flags = MB_ERR_INVALID_CHARS),
  139|       |                                  filename, len_0, NULL, 0)) > 0 ||
  140|       |        (GetLastError() == ERROR_INVALID_FLAGS &&
  141|       |         (sz = MultiByteToWideChar(CP_UTF8, (flags = 0),
  142|       |                                   filename, len_0, NULL, 0)) > 0)
  143|       |        ) {
  144|       |        WCHAR wmode[8];
  145|       |        WCHAR *wfilename = _alloca(sz * sizeof(WCHAR));
  146|       |
  147|       |        if (MultiByteToWideChar(CP_UTF8, flags,
  148|       |                                filename, len_0, wfilename, sz) &&
  149|       |            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
  150|       |                                wmode, sizeof(wmode) / sizeof(wmode[0])) &&
  151|       |            (file = _wfopen(wfilename, wmode)) == NULL &&
  152|       |            (errno == ENOENT || errno == EBADF)
  153|       |            ) {
  154|       |            /*
  155|       |             * UTF-8 decode succeeded, but no file, filename
  156|       |             * could still have been locale-ized...
  157|       |             */
  158|       |            file = fopen(filename, mode);
  159|       |        }
  160|       |    } else if (GetLastError() == ERROR_NO_UNICODE_TRANSLATION) {
  161|       |        file = fopen(filename, mode);
  162|       |    }
  163|       |#  else
  164|      1|    file = fopen(filename, mode);
  165|      1|#  endif
  166|      1|    return (file);
  167|      1|}

ERR_load_BN_strings:
  146|      1|{
  147|      1|#ifndef OPENSSL_NO_ERR
  148|       |
  149|      1|    if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
  150|      1|        ERR_load_strings(0, BN_str_functs);
  151|      1|        ERR_load_strings(0, BN_str_reasons);
  152|      1|    }
  153|      1|#endif
  154|      1|}

ERR_load_BUF_strings:
   89|      1|{
   90|      1|#ifndef OPENSSL_NO_ERR
   91|       |
   92|      1|    if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
   93|      1|        ERR_load_strings(0, BUF_str_functs);
   94|      1|        ERR_load_strings(0, BUF_str_reasons);
   95|      1|    }
   96|      1|#endif
   97|      1|}

BUF_strnlen:
   65|      9|{
   66|      9|    const char *p;
   67|       |
   68|    109|    for (p = str; maxlen-- != 0 && *p != '\0'; ++p) ;
   69|       |
   70|      9|    return p - str;
   71|      9|}
BUF_strdup:
   74|      9|{
   75|      9|    if (str == NULL)
   76|      0|        return NULL;
   77|      9|    return BUF_strndup(str, strlen(str));
   78|      9|}
BUF_strndup:
   81|      9|{
   82|      9|    char *ret;
   83|       |
   84|      9|    if (str == NULL)
   85|      0|        return NULL;
   86|       |
   87|      9|    siz = BUF_strnlen(str, siz);
   88|       |
   89|      9|    if (siz >= INT_MAX)
   90|      0|        return NULL;
   91|       |
   92|      9|    ret = OPENSSL_malloc(siz + 1);
   93|      9|    if (ret == NULL) {
   94|      0|        BUFerr(BUF_F_BUF_STRNDUP, ERR_R_MALLOC_FAILURE);
   95|      0|        return NULL;
   96|      0|    }
   97|       |
   98|      9|    memcpy(ret, str, siz);
   99|      9|    ret[siz] = '\0';
  100|       |
  101|      9|    return (ret);
  102|      9|}
BUF_strlcpy:
  120|     28|{
  121|     28|    size_t l = 0;
  122|    539|    for (; size > 1 && *src; size--) {
  123|    511|        *dst++ = *src++;
  124|    511|        l++;
  125|    511|    }
  126|     28|    if (size)
  127|     28|        *dst = '\0';
  128|     28|    return l + strlen(src);
  129|     28|}
BUF_strlcat:
  132|     23|{
  133|     23|    size_t l = 0;
  134|    435|    for (; size > 0 && *dst; size--, dst++)
  135|    412|        l++;
  136|     23|    return l + BUF_strlcpy(dst, src, size);
  137|     23|}

ERR_load_CMS_strings:
  301|      1|{
  302|      1|#ifndef OPENSSL_NO_ERR
  303|       |
  304|      1|    if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
  305|      1|        ERR_load_strings(0, CMS_str_functs);
  306|      1|        ERR_load_strings(0, CMS_str_reasons);
  307|      1|    }
  308|      1|#endif
  309|      1|}

COMP_zlib:
  344|      1|{
  345|      1|    COMP_METHOD *meth = &zlib_method_nozlib;
  346|       |
  347|       |#ifdef ZLIB_SHARED
  348|       |    if (!zlib_loaded) {
  349|       |# if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)
  350|       |        zlib_dso = DSO_load(NULL, "ZLIB1", NULL, 0);
  351|       |# else
  352|       |        zlib_dso = DSO_load(NULL, "z", NULL, 0);
  353|       |# endif
  354|       |        if (zlib_dso != NULL) {
  355|       |            p_compress = (compress_ft) DSO_bind_func(zlib_dso, "compress");
  356|       |            p_inflateEnd
  357|       |                = (inflateEnd_ft) DSO_bind_func(zlib_dso, "inflateEnd");
  358|       |            p_inflate = (inflate_ft) DSO_bind_func(zlib_dso, "inflate");
  359|       |            p_inflateInit_
  360|       |                = (inflateInit__ft) DSO_bind_func(zlib_dso, "inflateInit_");
  361|       |            p_deflateEnd
  362|       |                = (deflateEnd_ft) DSO_bind_func(zlib_dso, "deflateEnd");
  363|       |            p_deflate = (deflate_ft) DSO_bind_func(zlib_dso, "deflate");
  364|       |            p_deflateInit_
  365|       |                = (deflateInit__ft) DSO_bind_func(zlib_dso, "deflateInit_");
  366|       |            p_zError = (zError__ft) DSO_bind_func(zlib_dso, "zError");
  367|       |
  368|       |            if (p_compress && p_inflateEnd && p_inflate
  369|       |                && p_inflateInit_ && p_deflateEnd
  370|       |                && p_deflate && p_deflateInit_ && p_zError)
  371|       |                zlib_loaded++;
  372|       |        }
  373|       |    }
  374|       |#endif
  375|       |#ifdef ZLIB_SHARED
  376|       |    if (zlib_loaded)
  377|       |#endif
  378|       |#if defined(ZLIB) || defined(ZLIB_SHARED)
  379|       |    {
  380|       |        /*
  381|       |         * init zlib_stateful_ex_idx here so that in a multi-process
  382|       |         * application it's enough to intialize openssl before forking (idx
  383|       |         * will be inherited in all the children)
  384|       |         */
  385|       |        if (zlib_stateful_ex_idx == -1) {
  386|       |            CRYPTO_w_lock(CRYPTO_LOCK_COMP);
  387|       |            if (zlib_stateful_ex_idx == -1)
  388|       |                zlib_stateful_ex_idx =
  389|       |                    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_COMP,
  390|       |                                            0, NULL, NULL, NULL, NULL);
  391|       |            CRYPTO_w_unlock(CRYPTO_LOCK_COMP);
  392|       |            if (zlib_stateful_ex_idx == -1)
  393|       |                goto err;
  394|       |        }
  395|       |
  396|       |        meth = &zlib_stateful_method;
  397|       |    }
  398|       | err:
  399|       |#endif
  400|       |
  401|      1|    return (meth);
  402|      1|}

ERR_load_COMP_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, COMP_str_functs);
   95|      1|        ERR_load_strings(0, COMP_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

_CONF_free_data:
  223|      1|{
  224|      1|    if (conf == NULL || conf->data == NULL)
  225|      1|        return;
  226|       |
  227|      0|    lh_CONF_VALUE_down_load(conf->data) = 0; /* evil thing to make * sure the
  228|       |                                              * 'OPENSSL_free()' works as *
  229|       |                                              * expected */
  230|      0|    lh_CONF_VALUE_doall_arg(conf->data,
  231|      0|                            LHASH_DOALL_ARG_FN(value_free_hash),
  232|      0|                            LHASH_OF(CONF_VALUE), conf->data);
  233|       |
  234|       |    /*
  235|       |     * We now have only 'section' entries in the hash table. Due to problems
  236|       |     * with
  237|       |     */
  238|       |
  239|      0|    lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
  240|      0|    lh_CONF_VALUE_free(conf->data);
  241|      0|}

NCONF_default:
  126|      1|{
  127|      1|    return &default_method;
  128|      1|}
conf_def.c:def_create:
  136|      1|{
  137|      1|    CONF *ret;
  138|       |
  139|      1|    ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
  140|      1|    if (ret)
  141|      1|        if (meth->init(ret) == 0) {
  142|      0|            OPENSSL_free(ret);
  143|      0|            ret = NULL;
  144|      0|        }
  145|      1|    return ret;
  146|      1|}
conf_def.c:def_init_default:
  149|      1|{
  150|      1|    if (conf == NULL)
  151|      0|        return 0;
  152|       |
  153|      1|    conf->meth = &default_method;
  154|      1|    conf->meth_data = CONF_type_default;
  155|      1|    conf->data = NULL;
  156|       |
  157|      1|    return 1;
  158|      1|}
conf_def.c:def_destroy:
  173|      1|{
  174|      1|    if (def_destroy_data(conf)) {
  175|      1|        OPENSSL_free(conf);
  176|      1|        return 1;
  177|      1|    }
  178|      0|    return 0;
  179|      1|}
conf_def.c:def_destroy_data:
  182|      1|{
  183|      1|    if (conf == NULL)
  184|      0|        return 0;
  185|      1|    _CONF_free_data(conf);
  186|      1|    return 1;
  187|      1|}
conf_def.c:def_load:
  190|      1|{
  191|      1|    int ret;
  192|      1|    BIO *in = NULL;
  193|       |
  194|       |#ifdef OPENSSL_SYS_VMS
  195|       |    in = BIO_new_file(name, "r");
  196|       |#else
  197|      1|    in = BIO_new_file(name, "rb");
  198|      1|#endif
  199|      1|    if (in == NULL) {
  200|      1|        if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
  201|      1|            CONFerr(CONF_F_DEF_LOAD, CONF_R_NO_SUCH_FILE);
  202|      0|        else
  203|      1|            CONFerr(CONF_F_DEF_LOAD, ERR_R_SYS_LIB);
  204|      1|        return 0;
  205|      1|    }
  206|       |
  207|      0|    ret = def_load_bio(conf, in, line);
  208|      0|    BIO_free(in);
  209|       |
  210|      0|    return ret;
  211|      1|}

ERR_load_CONF_strings:
  127|      1|{
  128|      1|#ifndef OPENSSL_NO_ERR
  129|       |
  130|      1|    if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
  131|      1|        ERR_load_strings(0, CONF_str_functs);
  132|      1|        ERR_load_strings(0, CONF_str_reasons);
  133|      1|    }
  134|      1|#endif
  135|      1|}

NCONF_new:
  229|      1|{
  230|      1|    CONF *ret;
  231|       |
  232|      1|    if (meth == NULL)
  233|      1|        meth = NCONF_default();
  234|       |
  235|      1|    ret = meth->create(meth);
  236|      1|    if (ret == NULL) {
  237|      0|        CONFerr(CONF_F_NCONF_NEW, ERR_R_MALLOC_FAILURE);
  238|      0|        return (NULL);
  239|      0|    }
  240|       |
  241|      1|    return ret;
  242|      1|}
NCONF_free:
  245|      1|{
  246|      1|    if (conf == NULL)
  247|      0|        return;
  248|      1|    conf->meth->destroy(conf);
  249|      1|}
NCONF_load:
  259|      1|{
  260|      1|    if (conf == NULL) {
  261|      0|        CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
  262|      0|        return 0;
  263|      0|    }
  264|       |
  265|      1|    return conf->meth->load(conf, file, eline);
  266|      1|}

OPENSSL_load_builtin_modules:
   74|      1|{
   75|       |    /* Add builtin modules here */
   76|      1|    ASN1_add_oid_module();
   77|      1|#ifndef OPENSSL_NO_ENGINE
   78|      1|    ENGINE_add_conf_module();
   79|      1|#endif
   80|      1|    EVP_add_alg_module();
   81|      1|}

CONF_modules_load_file:
  164|      1|{
  165|      1|    char *file = NULL;
  166|      1|    CONF *conf = NULL;
  167|      1|    int ret = 0;
  168|      1|    conf = NCONF_new(NULL);
  169|      1|    if (!conf)
  170|      0|        goto err;
  171|       |
  172|      1|    if (filename == NULL) {
  173|      1|        file = CONF_get1_default_config_file();
  174|      1|        if (!file)
  175|      0|            goto err;
  176|      1|    } else
  177|      0|        file = (char *)filename;
  178|       |
  179|      1|    if (NCONF_load(conf, file, NULL) <= 0) {
  180|      1|        if ((flags & CONF_MFLAGS_IGNORE_MISSING_FILE) &&
  181|      1|            (ERR_GET_REASON(ERR_peek_last_error()) == CONF_R_NO_SUCH_FILE)) {
  182|      1|            ERR_clear_error();
  183|      1|            ret = 1;
  184|      1|        }
  185|      1|        goto err;
  186|      1|    }
  187|       |
  188|      0|    ret = CONF_modules_load(conf, appname, flags);
  189|       |
  190|      1| err:
  191|      1|    if (filename == NULL)
  192|      1|        OPENSSL_free(file);
  193|      1|    NCONF_free(conf);
  194|       |
  195|      1|    return ret;
  196|      0|}
CONF_module_add:
  466|      3|{
  467|      3|    if (module_add(NULL, name, ifunc, ffunc))
  468|      3|        return 1;
  469|      0|    else
  470|      0|        return 0;
  471|      3|}
CONF_get1_default_config_file:
  529|      1|{
  530|      1|    char *file;
  531|      1|    int len;
  532|       |
  533|      1|    file = getenv("OPENSSL_CONF");
  534|      1|    if (file)
  535|      0|        return BUF_strdup(file);
  536|       |
  537|      1|    len = strlen(X509_get_default_cert_area());
  538|      1|#ifndef OPENSSL_SYS_VMS
  539|      1|    len++;
  540|      1|#endif
  541|      1|    len += strlen(OPENSSL_CONF);
  542|       |
  543|      1|    file = OPENSSL_malloc(len + 1);
  544|       |
  545|      1|    if (!file)
  546|      0|        return NULL;
  547|      1|    BUF_strlcpy(file, X509_get_default_cert_area(), len + 1);
  548|      1|#ifndef OPENSSL_SYS_VMS
  549|      1|    BUF_strlcat(file, "/", len + 1);
  550|      1|#endif
  551|      1|    BUF_strlcat(file, OPENSSL_CONF, len + 1);
  552|       |
  553|      1|    return file;
  554|      1|}
conf_mod.c:module_add:
  279|      3|{
  280|      3|    CONF_MODULE *tmod = NULL;
  281|      3|    if (supported_modules == NULL)
  282|      1|        supported_modules = sk_CONF_MODULE_new_null();
  283|      3|    if (supported_modules == NULL)
  284|      0|        return NULL;
  285|      3|    tmod = OPENSSL_malloc(sizeof(CONF_MODULE));
  286|      3|    if (tmod == NULL)
  287|      0|        return NULL;
  288|       |
  289|      3|    tmod->dso = dso;
  290|      3|    tmod->name = BUF_strdup(name);
  291|      3|    if (tmod->name == NULL) {
  292|      0|        OPENSSL_free(tmod);
  293|      0|        return NULL;
  294|      0|    }
  295|      3|    tmod->init = ifunc;
  296|      3|    tmod->finish = ffunc;
  297|      3|    tmod->links = 0;
  298|       |
  299|      3|    if (!sk_CONF_MODULE_push(supported_modules, tmod)) {
  300|      0|        OPENSSL_free(tmod);
  301|      0|        return NULL;
  302|      0|    }
  303|       |
  304|      3|    return tmod;
  305|      3|}

ERR_load_CRYPTO_strings:
   96|      1|{
   97|      1|#ifndef OPENSSL_NO_ERR
   98|       |
   99|      1|    if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
  100|      1|        ERR_load_strings(0, CRYPTO_str_functs);
  101|      1|        ERR_load_strings(0, CRYPTO_str_reasons);
  102|      1|    }
  103|      1|#endif
  104|      1|}

CRYPTO_THREADID_set_pointer:
  436|  21.9k|{
  437|  21.9k|    unsigned char *dest = (void *)&id->val;
  438|  21.9k|    unsigned int accum = 0;
  439|  21.9k|    unsigned char dnum = sizeof(id->val);
  440|       |
  441|  21.9k|    memset(id, 0, sizeof(*id));
  442|  21.9k|    id->ptr = ptr;
  443|  21.9k|    if (sizeof(id->val) >= sizeof(id->ptr)) {
  444|       |        /*
  445|       |         * 'ptr' can be embedded in 'val' without loss of uniqueness
  446|       |         */
  447|  21.9k|        id->val = (unsigned long)id->ptr;
  448|  21.9k|        return;
  449|  21.9k|    }
  450|       |    /*
  451|       |     * hash ptr ==> val. Each byte of 'val' gets the mod-256 total of a
  452|       |     * linear function over the bytes in 'ptr', the co-efficients of which
  453|       |     * are a sequence of low-primes (hash_coeffs is an 8-element cycle) - the
  454|       |     * starting prime for the sequence varies for each byte of 'val' (unique
  455|       |     * polynomials unless pointers are >64-bit). For added spice, the totals
  456|       |     * accumulate rather than restarting from zero, and the index of the
  457|       |     * 'val' byte is added each time (position dependence). If I was a
  458|       |     * black-belt, I'd scan big-endian pointers in reverse to give low-order
  459|       |     * bits more play, but this isn't crypto and I'd prefer nobody mistake it
  460|       |     * as such. Plus I'm lazy.
  461|       |     */
  462|      0|    while (dnum--) {
  463|      0|        const unsigned char *src = (void *)&id->ptr;
  464|      0|        unsigned char snum = sizeof(id->ptr);
  465|      0|        while (snum--)
  466|      0|            accum += *(src++) * hash_coeffs[(snum + dnum) & 7];
  467|      0|        accum += dnum;
  468|      0|        *(dest++) = accum & 255;
  469|      0|    }
  470|      0|}
CRYPTO_THREADID_current:
  492|  21.9k|{
  493|  21.9k|    if (threadid_callback) {
  494|      0|        threadid_callback(id);
  495|      0|        return;
  496|      0|    }
  497|  21.9k|#ifndef OPENSSL_NO_DEPRECATED
  498|       |    /* If the deprecated callback was set, fall back to that */
  499|  21.9k|    if (id_callback) {
  500|      0|        CRYPTO_THREADID_set_numeric(id, id_callback());
  501|      0|        return;
  502|      0|    }
  503|  21.9k|#endif
  504|       |    /* Else pick a backup */
  505|       |#ifdef OPENSSL_SYS_WIN16
  506|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentTask());
  507|       |#elif defined(OPENSSL_SYS_WIN32)
  508|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentThreadId());
  509|       |#elif defined(OPENSSL_SYS_BEOS)
  510|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)find_thread(NULL));
  511|       |#else
  512|       |    /* For everything else, default to using the address of 'errno' */
  513|  21.9k|    CRYPTO_THREADID_set_pointer(id, (void *)&errno);
  514|  21.9k|#endif
  515|  21.9k|}
CRYPTO_THREADID_cmp:
  518|  14.1k|{
  519|  14.1k|    return memcmp(a, b, sizeof(*a));
  520|  14.1k|}
CRYPTO_THREADID_cpy:
  523|  16.7k|{
  524|  16.7k|    memcpy(dest, src, sizeof(*src));
  525|  16.7k|}
CRYPTO_THREADID_hash:
  528|  16.3k|{
  529|  16.3k|    return id->val;
  530|  16.3k|}
CRYPTO_lock:
  565|   223k|{
  566|       |#ifdef LOCK_DEBUG
  567|       |    {
  568|       |        CRYPTO_THREADID id;
  569|       |        char *rw_text, *operation_text;
  570|       |
  571|       |        if (mode & CRYPTO_LOCK)
  572|       |            operation_text = "lock  ";
  573|       |        else if (mode & CRYPTO_UNLOCK)
  574|       |            operation_text = "unlock";
  575|       |        else
  576|       |            operation_text = "ERROR ";
  577|       |
  578|       |        if (mode & CRYPTO_READ)
  579|       |            rw_text = "r";
  580|       |        else if (mode & CRYPTO_WRITE)
  581|       |            rw_text = "w";
  582|       |        else
  583|       |            rw_text = "ERROR";
  584|       |
  585|       |        CRYPTO_THREADID_current(&id);
  586|       |        fprintf(stderr, "lock:%08lx:(%s)%s %-18s %s:%d\n",
  587|       |                CRYPTO_THREADID_hash(&id), rw_text, operation_text,
  588|       |                CRYPTO_get_lock_name(type), file, line);
  589|       |    }
  590|       |#endif
  591|   223k|    if (type < 0) {
  592|      0|        if (dynlock_lock_callback != NULL) {
  593|      0|            struct CRYPTO_dynlock_value *pointer
  594|      0|                = CRYPTO_get_dynlock_value(type);
  595|       |
  596|      0|            OPENSSL_assert(pointer != NULL);
  597|       |
  598|      0|            dynlock_lock_callback(mode, pointer, file, line);
  599|       |
  600|      0|            CRYPTO_destroy_dynlockid(type);
  601|      0|        }
  602|   223k|    } else if (locking_callback != NULL)
  603|      0|        locking_callback(mode, type, file, line);
  604|   223k|}
CRYPTO_add_lock:
  608|  16.3k|{
  609|  16.3k|    int ret = 0;
  610|       |
  611|  16.3k|    if (add_lock_callback != NULL) {
  612|       |#ifdef LOCK_DEBUG
  613|       |        int before = *pointer;
  614|       |#endif
  615|       |
  616|      0|        ret = add_lock_callback(pointer, amount, type, file, line);
  617|       |#ifdef LOCK_DEBUG
  618|       |        {
  619|       |            CRYPTO_THREADID id;
  620|       |            CRYPTO_THREADID_current(&id);
  621|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  622|       |                    CRYPTO_THREADID_hash(&id), before, amount, ret,
  623|       |                    CRYPTO_get_lock_name(type), file, line);
  624|       |        }
  625|       |#endif
  626|  16.3k|    } else {
  627|  16.3k|        CRYPTO_lock(CRYPTO_LOCK | CRYPTO_WRITE, type, file, line);
  628|       |
  629|  16.3k|        ret = *pointer + amount;
  630|       |#ifdef LOCK_DEBUG
  631|       |        {
  632|       |            CRYPTO_THREADID id;
  633|       |            CRYPTO_THREADID_current(&id);
  634|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  635|       |                    CRYPTO_THREADID_hash(&id),
  636|       |                    *pointer, amount, ret,
  637|       |                    CRYPTO_get_lock_name(type), file, line);
  638|       |        }
  639|       |#endif
  640|  16.3k|        *pointer = ret;
  641|  16.3k|        CRYPTO_lock(CRYPTO_UNLOCK | CRYPTO_WRITE, type, file, line);
  642|  16.3k|    }
  643|  16.3k|    return (ret);
  644|  16.3k|}
OPENSSL_cpuid_setup:
  687|      4|{
  688|      4|    static int trigger = 0;
  689|      4|    IA32CAP OPENSSL_ia32_cpuid(unsigned int *);
  690|      4|    IA32CAP vec;
  691|      4|    char *env;
  692|       |
  693|      4|    if (trigger)
  694|      2|        return;
  695|       |
  696|      2|    trigger = 1;
  697|      2|    if ((env = getenv("OPENSSL_ia32cap"))) {
  698|      0|        int off = (env[0] == '~') ? 1 : 0;
  699|       |#  if defined(_WIN32)
  700|       |        if (!sscanf(env + off, "%I64i", &vec))
  701|       |            vec = strtoul(env + off, NULL, 0);
  702|       |#  else
  703|      0|        if (!sscanf(env + off, "%lli", (long long *)&vec))
  704|      0|            vec = strtoul(env + off, NULL, 0);
  705|      0|#  endif
  706|      0|        if (off)
  707|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~vec;
  708|      0|        else if (env[0] == ':')
  709|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  710|       |
  711|      0|        OPENSSL_ia32cap_P[2] = 0;
  712|      0|        if ((env = strchr(env, ':'))) {
  713|      0|            unsigned int vecx;
  714|      0|            env++;
  715|      0|            off = (env[0] == '~') ? 1 : 0;
  716|      0|            vecx = strtoul(env + off, NULL, 0);
  717|      0|            if (off)
  718|      0|                OPENSSL_ia32cap_P[2] &= ~vecx;
  719|      0|            else
  720|      0|                OPENSSL_ia32cap_P[2] = vecx;
  721|      0|        }
  722|      0|    } else
  723|      2|        vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  724|       |
  725|       |    /*
  726|       |     * |(1<<10) sets a reserved bit to signal that variable
  727|       |     * was initialized already... This is to avoid interference
  728|       |     * with cpuid snippets in ELF .init segment.
  729|       |     */
  730|      2|    OPENSSL_ia32cap_P[0] = (unsigned int)vec | (1 << 10);
  731|      2|    OPENSSL_ia32cap_P[1] = (unsigned int)(vec >> 32);
  732|      2|}

ERR_load_DH_strings:
  118|      1|{
  119|      1|#ifndef OPENSSL_NO_ERR
  120|       |
  121|      1|    if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
  122|      1|        ERR_load_strings(0, DH_str_functs);
  123|      1|        ERR_load_strings(0, DH_str_reasons);
  124|      1|    }
  125|      1|#endif
  126|      1|}

DH_OpenSSL:
  124|      7|{
  125|      7|    return &dh_ossl;
  126|      7|}

ERR_load_DSA_strings:
  125|      1|{
  126|      1|#ifndef OPENSSL_NO_ERR
  127|       |
  128|      1|    if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
  129|      1|        ERR_load_strings(0, DSA_str_functs);
  130|      1|        ERR_load_strings(0, DSA_str_reasons);
  131|      1|    }
  132|      1|#endif
  133|      1|}

DSA_get_default_method:
   87|      1|{
   88|      1|    if (!default_DSA_method) {
   89|       |#ifdef OPENSSL_FIPS
   90|       |        if (FIPS_mode())
   91|       |            return FIPS_dsa_openssl();
   92|       |        else
   93|       |            return DSA_OpenSSL();
   94|       |#else
   95|      1|        default_DSA_method = DSA_OpenSSL();
   96|      1|#endif
   97|      1|    }
   98|      1|    return default_DSA_method;
   99|      1|}

DSA_OpenSSL:
  129|      5|{
  130|      5|    return &openssl_dsa_meth;
  131|      5|}

DSO_METHOD_dlfcn:
  135|      1|{
  136|      1|    return (&dso_meth_dlfcn);
  137|      1|}
dso_dlfcn.c:dlfcn_load:
  171|      4|{
  172|      4|    void *ptr = NULL;
  173|       |    /* See applicable comments in dso_dl.c */
  174|      4|    char *filename = DSO_convert_filename(dso, NULL);
  175|      4|    int flags = DLOPEN_FLAG;
  176|       |
  177|      4|    if (filename == NULL) {
  178|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);
  179|      0|        goto err;
  180|      0|    }
  181|      4|# ifdef RTLD_GLOBAL
  182|      4|    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)
  183|      0|        flags |= RTLD_GLOBAL;
  184|      4|# endif
  185|      4|    ptr = dlopen(filename, flags);
  186|      4|    if (ptr == NULL) {
  187|      4|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);
  188|      4|        ERR_add_error_data(4, "filename(", filename, "): ", dlerror());
  189|      4|        goto err;
  190|      4|    }
  191|      0|    if (!sk_void_push(dso->meth_data, (char *)ptr)) {
  192|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);
  193|      0|        goto err;
  194|      0|    }
  195|       |    /* Success */
  196|      0|    dso->loaded_filename = filename;
  197|      0|    return (1);
  198|      4| err:
  199|       |    /* Cleanup! */
  200|      4|    if (filename != NULL)
  201|      4|        OPENSSL_free(filename);
  202|      4|    if (ptr != NULL)
  203|      0|        dlclose(ptr);
  204|      4|    return (0);
  205|      0|}
dso_dlfcn.c:dlfcn_unload:
  208|      4|{
  209|      4|    void *ptr;
  210|      4|    if (dso == NULL) {
  211|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);
  212|      0|        return (0);
  213|      0|    }
  214|      4|    if (sk_void_num(dso->meth_data) < 1)
  215|      4|        return (1);
  216|      0|    ptr = sk_void_pop(dso->meth_data);
  217|      0|    if (ptr == NULL) {
  218|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);
  219|       |        /*
  220|       |         * Should push the value back onto the stack in case of a retry.
  221|       |         */
  222|      0|        sk_void_push(dso->meth_data, ptr);
  223|      0|        return (0);
  224|      0|    }
  225|       |    /* For now I'm not aware of any errors associated with dlclose() */
  226|      0|    dlclose(ptr);
  227|      0|    return (1);
  228|      0|}
dso_dlfcn.c:dlfcn_name_converter:
  355|      4|{
  356|      4|    char *translated;
  357|      4|    int len, rsize, transform;
  358|       |
  359|      4|    len = strlen(filename);
  360|      4|    rsize = len + 1;
  361|      4|    transform = (strstr(filename, "/") == NULL);
  362|      4|    if (transform) {
  363|       |        /* We will convert this to "%s.so" or "lib%s.so" etc */
  364|      4|        rsize += DSO_extlen;    /* The length of ".so" */
  365|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  366|      4|            rsize += 3;         /* The length of "lib" */
  367|      4|    }
  368|      4|    translated = OPENSSL_malloc(rsize);
  369|      4|    if (translated == NULL) {
  370|      0|        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);
  371|      0|        return (NULL);
  372|      0|    }
  373|      4|    if (transform) {
  374|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  375|      4|            sprintf(translated, "lib%s" DSO_ext, filename);
  376|      0|        else
  377|      0|            sprintf(translated, "%s" DSO_ext, filename);
  378|      4|    } else
  379|      0|        sprintf(translated, "%s", filename);
  380|      4|    return (translated);
  381|      4|}

ERR_load_DSO_strings:
  150|      1|{
  151|      1|#ifndef OPENSSL_NO_ERR
  152|       |
  153|      1|    if (ERR_func_error_string(DSO_str_functs[0].error) == NULL) {
  154|      1|        ERR_load_strings(0, DSO_str_functs);
  155|      1|        ERR_load_strings(0, DSO_str_reasons);
  156|      1|    }
  157|      1|#endif
  158|      1|}

DSO_new_method:
   96|      4|{
   97|      4|    DSO *ret;
   98|       |
   99|      4|    if (default_DSO_meth == NULL)
  100|       |        /*
  101|       |         * We default to DSO_METH_openssl() which in turn defaults to
  102|       |         * stealing the "best available" method. Will fallback to
  103|       |         * DSO_METH_null() in the worst case.
  104|       |         */
  105|      1|        default_DSO_meth = DSO_METHOD_openssl();
  106|      4|    ret = (DSO *)OPENSSL_malloc(sizeof(DSO));
  107|      4|    if (ret == NULL) {
  108|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  109|      0|        return (NULL);
  110|      0|    }
  111|      4|    memset(ret, 0, sizeof(DSO));
  112|      4|    ret->meth_data = sk_void_new_null();
  113|      4|    if (ret->meth_data == NULL) {
  114|       |        /* sk_new doesn't generate any errors so we do */
  115|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  116|      0|        OPENSSL_free(ret);
  117|      0|        return (NULL);
  118|      0|    }
  119|      4|    if (meth == NULL)
  120|      4|        ret->meth = default_DSO_meth;
  121|      0|    else
  122|      0|        ret->meth = meth;
  123|      4|    ret->references = 1;
  124|      4|    if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {
  125|      0|        sk_void_free(ret->meth_data);
  126|      0|        OPENSSL_free(ret);
  127|      0|        ret = NULL;
  128|      0|    }
  129|      4|    return (ret);
  130|      4|}
DSO_free:
  133|      4|{
  134|      4|    int i;
  135|       |
  136|      4|    if (dso == NULL) {
  137|      0|        DSOerr(DSO_F_DSO_FREE, ERR_R_PASSED_NULL_PARAMETER);
  138|      0|        return (0);
  139|      0|    }
  140|       |
  141|      4|    i = CRYPTO_add(&dso->references, -1, CRYPTO_LOCK_DSO);
  142|       |#ifdef REF_PRINT
  143|       |    REF_PRINT("DSO", dso);
  144|       |#endif
  145|      4|    if (i > 0)
  146|      0|        return (1);
  147|       |#ifdef REF_CHECK
  148|       |    if (i < 0) {
  149|       |        fprintf(stderr, "DSO_free, bad reference count\n");
  150|       |        abort();
  151|       |    }
  152|       |#endif
  153|       |
  154|      4|    if ((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso)) {
  155|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_UNLOAD_FAILED);
  156|      0|        return (0);
  157|      0|    }
  158|       |
  159|      4|    if ((dso->meth->finish != NULL) && !dso->meth->finish(dso)) {
  160|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_FINISH_FAILED);
  161|      0|        return (0);
  162|      0|    }
  163|       |
  164|      4|    sk_void_free(dso->meth_data);
  165|      4|    if (dso->filename != NULL)
  166|      4|        OPENSSL_free(dso->filename);
  167|      4|    if (dso->loaded_filename != NULL)
  168|      0|        OPENSSL_free(dso->loaded_filename);
  169|       |
  170|      4|    OPENSSL_free(dso);
  171|      4|    return (1);
  172|      4|}
DSO_flags:
  175|      8|{
  176|      8|    return ((dso == NULL) ? 0 : dso->flags);
  177|      8|}
DSO_load:
  191|      4|{
  192|      4|    DSO *ret;
  193|      4|    int allocated = 0;
  194|       |
  195|      4|    if (dso == NULL) {
  196|      4|        ret = DSO_new_method(meth);
  197|      4|        if (ret == NULL) {
  198|      0|            DSOerr(DSO_F_DSO_LOAD, ERR_R_MALLOC_FAILURE);
  199|      0|            goto err;
  200|      0|        }
  201|      4|        allocated = 1;
  202|       |        /* Pass the provided flags to the new DSO object */
  203|      4|        if (DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0) {
  204|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_CTRL_FAILED);
  205|      0|            goto err;
  206|      0|        }
  207|      4|    } else
  208|      0|        ret = dso;
  209|       |    /* Don't load if we're currently already loaded */
  210|      4|    if (ret->filename != NULL) {
  211|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_DSO_ALREADY_LOADED);
  212|      0|        goto err;
  213|      0|    }
  214|       |    /*
  215|       |     * filename can only be NULL if we were passed a dso that already has one
  216|       |     * set.
  217|       |     */
  218|      4|    if (filename != NULL)
  219|      4|        if (!DSO_set_filename(ret, filename)) {
  220|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_SET_FILENAME_FAILED);
  221|      0|            goto err;
  222|      0|        }
  223|      4|    filename = ret->filename;
  224|      4|    if (filename == NULL) {
  225|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_NO_FILENAME);
  226|      0|        goto err;
  227|      0|    }
  228|      4|    if (ret->meth->dso_load == NULL) {
  229|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_UNSUPPORTED);
  230|      0|        goto err;
  231|      0|    }
  232|      4|    if (!ret->meth->dso_load(ret)) {
  233|      4|        DSOerr(DSO_F_DSO_LOAD, DSO_R_LOAD_FAILED);
  234|      4|        goto err;
  235|      4|    }
  236|       |    /* Load succeeded */
  237|      0|    return (ret);
  238|      4| err:
  239|      4|    if (allocated)
  240|      4|        DSO_free(ret);
  241|      4|    return (NULL);
  242|      4|}
DSO_ctrl:
  294|      4|{
  295|      4|    if (dso == NULL) {
  296|      0|        DSOerr(DSO_F_DSO_CTRL, ERR_R_PASSED_NULL_PARAMETER);
  297|      0|        return (-1);
  298|      0|    }
  299|       |    /*
  300|       |     * We should intercept certain generic commands and only pass control to
  301|       |     * the method-specific ctrl() function if it's something we don't handle.
  302|       |     */
  303|      4|    switch (cmd) {
  304|      0|    case DSO_CTRL_GET_FLAGS:
  305|      0|        return dso->flags;
  306|      4|    case DSO_CTRL_SET_FLAGS:
  307|      4|        dso->flags = (int)larg;
  308|      4|        return (0);
  309|      0|    case DSO_CTRL_OR_FLAGS:
  310|      0|        dso->flags |= (int)larg;
  311|      0|        return (0);
  312|      0|    default:
  313|      0|        break;
  314|      4|    }
  315|      0|    if ((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL)) {
  316|      0|        DSOerr(DSO_F_DSO_CTRL, DSO_R_UNSUPPORTED);
  317|      0|        return (-1);
  318|      0|    }
  319|      0|    return (dso->meth->dso_ctrl(dso, cmd, larg, parg));
  320|      0|}
DSO_set_filename:
  345|      4|{
  346|      4|    char *copied;
  347|       |
  348|      4|    if ((dso == NULL) || (filename == NULL)) {
  349|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  350|      0|        return (0);
  351|      0|    }
  352|      4|    if (dso->loaded_filename) {
  353|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, DSO_R_DSO_ALREADY_LOADED);
  354|      0|        return (0);
  355|      0|    }
  356|       |    /* We'll duplicate filename */
  357|      4|    copied = OPENSSL_malloc(strlen(filename) + 1);
  358|      4|    if (copied == NULL) {
  359|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_MALLOC_FAILURE);
  360|      0|        return (0);
  361|      0|    }
  362|      4|    BUF_strlcpy(copied, filename, strlen(filename) + 1);
  363|      4|    if (dso->filename)
  364|      0|        OPENSSL_free(dso->filename);
  365|      4|    dso->filename = copied;
  366|      4|    return (1);
  367|      4|}
DSO_convert_filename:
  387|      4|{
  388|      4|    char *result = NULL;
  389|       |
  390|      4|    if (dso == NULL) {
  391|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  392|      0|        return (NULL);
  393|      0|    }
  394|      4|    if (filename == NULL)
  395|      4|        filename = dso->filename;
  396|      4|    if (filename == NULL) {
  397|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, DSO_R_NO_FILENAME);
  398|      0|        return (NULL);
  399|      0|    }
  400|      4|    if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
  401|      4|        if (dso->name_converter != NULL)
  402|      0|            result = dso->name_converter(dso, filename);
  403|      4|        else if (dso->meth->dso_name_converter != NULL)
  404|      4|            result = dso->meth->dso_name_converter(dso, filename);
  405|      4|    }
  406|      4|    if (result == NULL) {
  407|      0|        result = OPENSSL_malloc(strlen(filename) + 1);
  408|      0|        if (result == NULL) {
  409|      0|            DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_MALLOC_FAILURE);
  410|      0|            return (NULL);
  411|      0|        }
  412|      0|        BUF_strlcpy(result, filename, strlen(filename) + 1);
  413|      0|    }
  414|      4|    return (result);
  415|      4|}

DSO_METHOD_openssl:
   67|      1|{
   68|       |#ifdef DEF_DSO_METHOD
   69|       |    return (DEF_DSO_METHOD());
   70|       |#elif defined(DSO_DLFCN)
   71|      1|    return (DSO_METHOD_dlfcn());
   72|       |#elif defined(DSO_DL)
   73|       |    return (DSO_METHOD_dl());
   74|       |#elif defined(DSO_WIN32)
   75|       |    return (DSO_METHOD_win32());
   76|       |#elif defined(DSO_VMS)
   77|       |    return (DSO_METHOD_vms());
   78|       |#elif defined(DSO_BEOS)
   79|       |    return (DSO_METHOD_beos());
   80|       |#else
   81|       |    return (DSO_METHOD_null());
   82|       |#endif
   83|      1|}

ERR_load_EC_strings:
  324|      1|{
  325|      1|#ifndef OPENSSL_NO_ERR
  326|       |
  327|      1|    if (ERR_func_error_string(EC_str_functs[0].error) == NULL) {
  328|      1|        ERR_load_strings(0, EC_str_functs);
  329|      1|        ERR_load_strings(0, EC_str_reasons);
  330|      1|    }
  331|      1|#endif
  332|      1|}

ERR_load_ECDH_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(ECDH_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, ECDH_str_functs);
   95|      1|        ERR_load_strings(0, ECDH_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

ERR_load_ECDSA_strings:
   99|      1|{
  100|      1|#ifndef OPENSSL_NO_ERR
  101|       |
  102|      1|    if (ERR_func_error_string(ECDSA_str_functs[0].error) == NULL) {
  103|      1|        ERR_load_strings(0, ECDSA_str_functs);
  104|      1|        ERR_load_strings(0, ECDSA_str_reasons);
  105|      1|    }
  106|      1|#endif
  107|      1|}

eng_table.c:engine_pile_LHASH_HASH:
  105|  5.94k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  5.94k|                const o_type *a = arg; \
  107|  5.94k|                return name##_hash(a); }
eng_table.c:engine_pile_LHASH_COMP:
  114|     29|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     29|                const o_type *a = arg1;             \
  116|     29|                const o_type *b = arg2; \
  117|     29|                return name##_cmp(a,b); }

ENGINE_load_builtin_engines:
   64|      1|{
   65|       |    /* Some ENGINEs need this */
   66|      1|    OPENSSL_cpuid_setup();
   67|       |#if 0
   68|       |    /*
   69|       |     * There's no longer any need for an "openssl" ENGINE unless, one day, it
   70|       |     * is the *only* way for standard builtin implementations to be be
   71|       |     * accessed (ie. it would be possible to statically link binaries with
   72|       |     * *no* builtin implementations).
   73|       |     */
   74|       |    ENGINE_load_openssl();
   75|       |#endif
   76|       |#if !defined(OPENSSL_NO_HW) && (defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV))
   77|       |    ENGINE_load_cryptodev();
   78|       |#endif
   79|      1|#ifndef OPENSSL_NO_RDRAND
   80|      1|    ENGINE_load_rdrand();
   81|      1|#endif
   82|      1|    ENGINE_load_dynamic();
   83|      1|#ifndef OPENSSL_NO_STATIC_ENGINE
   84|      1|# ifndef OPENSSL_NO_HW
   85|      1|#  ifndef OPENSSL_NO_HW_4758_CCA
   86|      1|    ENGINE_load_4758cca();
   87|      1|#  endif
   88|      1|#  ifndef OPENSSL_NO_HW_AEP
   89|      1|    ENGINE_load_aep();
   90|      1|#  endif
   91|      1|#  ifndef OPENSSL_NO_HW_ATALLA
   92|      1|    ENGINE_load_atalla();
   93|      1|#  endif
   94|      1|#  ifndef OPENSSL_NO_HW_CSWIFT
   95|      1|    ENGINE_load_cswift();
   96|      1|#  endif
   97|      1|#  ifndef OPENSSL_NO_HW_NCIPHER
   98|      1|    ENGINE_load_chil();
   99|      1|#  endif
  100|      1|#  ifndef OPENSSL_NO_HW_NURON
  101|      1|    ENGINE_load_nuron();
  102|      1|#  endif
  103|      1|#  ifndef OPENSSL_NO_HW_SUREWARE
  104|      1|    ENGINE_load_sureware();
  105|      1|#  endif
  106|      1|#  ifndef OPENSSL_NO_HW_UBSEC
  107|      1|    ENGINE_load_ubsec();
  108|      1|#  endif
  109|      1|#  ifndef OPENSSL_NO_HW_PADLOCK
  110|      1|    ENGINE_load_padlock();
  111|      1|#  endif
  112|      1|# endif
  113|      1|# ifndef OPENSSL_NO_GOST
  114|      1|    ENGINE_load_gost();
  115|      1|# endif
  116|       |# ifndef OPENSSL_NO_GMP
  117|       |    ENGINE_load_gmp();
  118|       |# endif
  119|       |# if defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_NO_CAPIENG)
  120|       |    ENGINE_load_capi();
  121|       |# endif
  122|      1|#endif
  123|      1|    ENGINE_register_all_complete();
  124|      1|}

ENGINE_add_conf_module:
  239|      1|{
  240|      1|    CONF_module_add("engines",
  241|      1|                    int_engine_module_init, int_engine_module_finish);
  242|      1|}

ENGINE_load_dynamic:
  312|      1|{
  313|      1|    ENGINE *toadd = engine_dynamic();
  314|      1|    if (!toadd)
  315|      0|        return;
  316|      1|    ENGINE_add(toadd);
  317|       |    /*
  318|       |     * If the "add" worked, it gets a structural reference. So either way, we
  319|       |     * release our just-created reference.
  320|       |     */
  321|      1|    ENGINE_free(toadd);
  322|       |    /*
  323|       |     * If the "add" didn't work, it was probably a conflict because it was
  324|       |     * already added (eg. someone calling ENGINE_load_blah then calling
  325|       |     * ENGINE_load_builtin_engines() perhaps).
  326|       |     */
  327|      1|    ERR_clear_error();
  328|      1|}
eng_dyn.c:engine_dynamic:
  294|      1|{
  295|      1|    ENGINE *ret = ENGINE_new();
  296|      1|    if (!ret)
  297|      0|        return NULL;
  298|      1|    if (!ENGINE_set_id(ret, engine_dynamic_id) ||
  299|      1|        !ENGINE_set_name(ret, engine_dynamic_name) ||
  300|      1|        !ENGINE_set_init_function(ret, dynamic_init) ||
  301|      1|        !ENGINE_set_finish_function(ret, dynamic_finish) ||
  302|      1|        !ENGINE_set_ctrl_function(ret, dynamic_ctrl) ||
  303|      1|        !ENGINE_set_flags(ret, ENGINE_FLAGS_BY_ID_COPY) ||
  304|      1|        !ENGINE_set_cmd_defns(ret, dynamic_cmd_defns)) {
  305|      0|        ENGINE_free(ret);
  306|      0|        return NULL;
  307|      0|    }
  308|      1|    return ret;
  309|      1|}

ERR_load_ENGINE_strings:
  173|      1|{
  174|      1|#ifndef OPENSSL_NO_ERR
  175|       |
  176|      1|    if (ERR_func_error_string(ENGINE_str_functs[0].error) == NULL) {
  177|      1|        ERR_load_strings(0, ENGINE_str_functs);
  178|      1|        ERR_load_strings(0, ENGINE_str_reasons);
  179|      1|    }
  180|      1|#endif
  181|      1|}

ENGINE_register_complete:
  150|     10|{
  151|     10|    ENGINE_register_ciphers(e);
  152|     10|    ENGINE_register_digests(e);
  153|     10|#ifndef OPENSSL_NO_RSA
  154|     10|    ENGINE_register_RSA(e);
  155|     10|#endif
  156|     10|#ifndef OPENSSL_NO_DSA
  157|     10|    ENGINE_register_DSA(e);
  158|     10|#endif
  159|     10|#ifndef OPENSSL_NO_DH
  160|     10|    ENGINE_register_DH(e);
  161|     10|#endif
  162|     10|#ifndef OPENSSL_NO_ECDH
  163|     10|    ENGINE_register_ECDH(e);
  164|     10|#endif
  165|     10|#ifndef OPENSSL_NO_ECDSA
  166|     10|    ENGINE_register_ECDSA(e);
  167|     10|#endif
  168|     10|    ENGINE_register_RAND(e);
  169|     10|    ENGINE_register_pkey_meths(e);
  170|     10|    return 1;
  171|     10|}
ENGINE_register_all_complete:
  174|      1|{
  175|      1|    ENGINE *e;
  176|       |
  177|     12|    for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
  178|     11|        if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
  179|     10|            ENGINE_register_complete(e);
  180|      1|    return 1;
  181|      1|}

engine_unlocked_init:
   63|      4|{
   64|      4|    int to_return = 1;
   65|       |
   66|      4|    if ((e->funct_ref == 0) && e->init)
   67|       |        /*
   68|       |         * This is the first functional reference and the engine requires
   69|       |         * initialisation so we do it now.
   70|       |         */
   71|      4|        to_return = e->init(e);
   72|      4|    if (to_return) {
   73|       |        /*
   74|       |         * OK, we return a functional reference which is also a structural
   75|       |         * reference.
   76|       |         */
   77|      0|        e->struct_ref++;
   78|      0|        e->funct_ref++;
   79|      0|        engine_ref_debug(e, 0, 1)
   80|      0|            engine_ref_debug(e, 1, 1)
   81|      0|    }
   82|      4|    return to_return;
   83|      4|}

ENGINE_new:
   66|     11|{
   67|     11|    ENGINE *ret;
   68|       |
   69|     11|    ret = (ENGINE *)OPENSSL_malloc(sizeof(ENGINE));
   70|     11|    if (ret == NULL) {
   71|      0|        ENGINEerr(ENGINE_F_ENGINE_NEW, ERR_R_MALLOC_FAILURE);
   72|      0|        return NULL;
   73|      0|    }
   74|     11|    memset(ret, 0, sizeof(ENGINE));
   75|     11|    ret->struct_ref = 1;
   76|     11|    engine_ref_debug(ret, 0, 1)
   77|     11|        CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ENGINE, ret, &ret->ex_data);
   78|     11|    return ret;
   79|     11|}
engine_free_util:
  108|     22|{
  109|     22|    int i;
  110|       |
  111|     22|    if (e == NULL) {
  112|      0|        ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL, ERR_R_PASSED_NULL_PARAMETER);
  113|      0|        return 0;
  114|      0|    }
  115|     22|    if (locked)
  116|     22|        i = CRYPTO_add(&e->struct_ref, -1, CRYPTO_LOCK_ENGINE);
  117|      0|    else
  118|      0|        i = --e->struct_ref;
  119|     22|    engine_ref_debug(e, 0, -1)
  120|     22|        if (i > 0)
  121|     22|        return 1;
  122|       |#ifdef REF_CHECK
  123|       |    if (i < 0) {
  124|       |        fprintf(stderr, "ENGINE_free, bad structural reference count\n");
  125|       |        abort();
  126|       |    }
  127|       |#endif
  128|       |    /* Free up any dynamically allocated public key methods */
  129|      0|    engine_pkey_meths_free(e);
  130|      0|    engine_pkey_asn1_meths_free(e);
  131|       |    /*
  132|       |     * Give the ENGINE a chance to do any structural cleanup corresponding to
  133|       |     * allocation it did in its constructor (eg. unload error strings)
  134|       |     */
  135|      0|    if (e->destroy)
  136|      0|        e->destroy(e);
  137|      0|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ENGINE, e, &e->ex_data);
  138|      0|    OPENSSL_free(e);
  139|      0|    return 1;
  140|     22|}
ENGINE_free:
  143|     22|{
  144|     22|    return engine_free_util(e, 1);
  145|     22|}
engine_cleanup_add_first:
  176|      7|{
  177|      7|    ENGINE_CLEANUP_ITEM *item;
  178|      7|    if (!int_cleanup_check(1))
  179|      0|        return;
  180|      7|    item = int_cleanup_item(cb);
  181|      7|    if (item)
  182|      7|        sk_ENGINE_CLEANUP_ITEM_insert(cleanup_stack, item, 0);
  183|      7|}
engine_cleanup_add_last:
  186|      1|{
  187|      1|    ENGINE_CLEANUP_ITEM *item;
  188|      1|    if (!int_cleanup_check(1))
  189|      0|        return;
  190|      1|    item = int_cleanup_item(cb);
  191|      1|    if (item)
  192|      1|        sk_ENGINE_CLEANUP_ITEM_push(cleanup_stack, item);
  193|      1|}
ENGINE_set_id:
  242|     11|{
  243|     11|    if (id == NULL) {
  244|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_ID, ERR_R_PASSED_NULL_PARAMETER);
  245|      0|        return 0;
  246|      0|    }
  247|     11|    e->id = id;
  248|     11|    return 1;
  249|     11|}
ENGINE_set_name:
  252|     11|{
  253|     11|    if (name == NULL) {
  254|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_NAME, ERR_R_PASSED_NULL_PARAMETER);
  255|      0|        return 0;
  256|      0|    }
  257|     11|    e->name = name;
  258|     11|    return 1;
  259|     11|}
ENGINE_set_destroy_function:
  262|      9|{
  263|      9|    e->destroy = destroy_f;
  264|      9|    return 1;
  265|      9|}
ENGINE_set_init_function:
  268|     11|{
  269|     11|    e->init = init_f;
  270|     11|    return 1;
  271|     11|}
ENGINE_set_finish_function:
  274|     10|{
  275|     10|    e->finish = finish_f;
  276|     10|    return 1;
  277|     10|}
ENGINE_set_ctrl_function:
  280|     10|{
  281|     10|    e->ctrl = ctrl_f;
  282|     10|    return 1;
  283|     10|}
ENGINE_set_flags:
  286|      2|{
  287|      2|    e->flags = flags;
  288|      2|    return 1;
  289|      2|}
ENGINE_set_cmd_defns:
  292|      9|{
  293|      9|    e->cmd_defns = defns;
  294|      9|    return 1;
  295|      9|}
eng_lib.c:int_cleanup_check:
  157|      8|{
  158|      8|    if (cleanup_stack)
  159|      7|        return 1;
  160|      1|    if (!create)
  161|      0|        return 0;
  162|      1|    cleanup_stack = sk_ENGINE_CLEANUP_ITEM_new_null();
  163|      1|    return (cleanup_stack ? 1 : 0);
  164|      1|}
eng_lib.c:int_cleanup_item:
  167|      8|{
  168|      8|    ENGINE_CLEANUP_ITEM *item = OPENSSL_malloc(sizeof(ENGINE_CLEANUP_ITEM));
  169|      8|    if (!item)
  170|      0|        return NULL;
  171|      8|    item->cb = cb;
  172|      8|    return item;
  173|      8|}

ENGINE_get_first:
  185|      1|{
  186|      1|    ENGINE *ret;
  187|       |
  188|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  189|      1|    ret = engine_list_head;
  190|      1|    if (ret) {
  191|      1|        ret->struct_ref++;
  192|      1|        engine_ref_debug(ret, 0, 1)
  193|      1|    }
  194|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  195|      1|    return ret;
  196|      1|}
ENGINE_get_next:
  214|     11|{
  215|     11|    ENGINE *ret = NULL;
  216|     11|    if (e == NULL) {
  217|      0|        ENGINEerr(ENGINE_F_ENGINE_GET_NEXT, ERR_R_PASSED_NULL_PARAMETER);
  218|      0|        return 0;
  219|      0|    }
  220|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  221|     11|    ret = e->next;
  222|     11|    if (ret) {
  223|       |        /* Return a valid structural refernce to the next ENGINE */
  224|     10|        ret->struct_ref++;
  225|     10|        engine_ref_debug(ret, 0, 1)
  226|     10|    }
  227|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  228|       |    /* Release the structural reference to the previous ENGINE */
  229|     11|    ENGINE_free(e);
  230|     11|    return ret;
  231|     11|}
ENGINE_add:
  255|     11|{
  256|     11|    int to_return = 1;
  257|     11|    if (e == NULL) {
  258|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ERR_R_PASSED_NULL_PARAMETER);
  259|      0|        return 0;
  260|      0|    }
  261|     11|    if ((e->id == NULL) || (e->name == NULL)) {
  262|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_ID_OR_NAME_MISSING);
  263|      0|        return 0;
  264|      0|    }
  265|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  266|     11|    if (!engine_list_add(e)) {
  267|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  268|      0|        to_return = 0;
  269|      0|    }
  270|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  271|     11|    return to_return;
  272|     11|}
eng_list.c:engine_list_add:
  103|     11|{
  104|     11|    int conflict = 0;
  105|     11|    ENGINE *iterator = NULL;
  106|       |
  107|     11|    if (e == NULL) {
  108|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ERR_R_PASSED_NULL_PARAMETER);
  109|      0|        return 0;
  110|      0|    }
  111|     11|    iterator = engine_list_head;
  112|     66|    while (iterator && !conflict) {
  113|     55|        conflict = (strcmp(iterator->id, e->id) == 0);
  114|     55|        iterator = iterator->next;
  115|     55|    }
  116|     11|    if (conflict) {
  117|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_CONFLICTING_ENGINE_ID);
  118|      0|        return 0;
  119|      0|    }
  120|     11|    if (engine_list_head == NULL) {
  121|       |        /* We are adding to an empty list. */
  122|      1|        if (engine_list_tail) {
  123|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  124|      0|            return 0;
  125|      0|        }
  126|      1|        engine_list_head = e;
  127|      1|        e->prev = NULL;
  128|       |        /*
  129|       |         * The first time the list allocates, we should register the cleanup.
  130|       |         */
  131|      1|        engine_cleanup_add_last(engine_list_cleanup);
  132|     10|    } else {
  133|       |        /* We are adding to the tail of an existing list. */
  134|     10|        if ((engine_list_tail == NULL) || (engine_list_tail->next != NULL)) {
  135|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  136|      0|            return 0;
  137|      0|        }
  138|     10|        engine_list_tail->next = e;
  139|     10|        e->prev = engine_list_tail;
  140|     10|    }
  141|       |    /*
  142|       |     * Having the engine in the list assumes a structural reference.
  143|       |     */
  144|     11|    e->struct_ref++;
  145|     11|    engine_ref_debug(e, 0, 1)
  146|       |        /* However it came to be, e is the last item in the list. */
  147|     11|        engine_list_tail = e;
  148|     11|    e->next = NULL;
  149|     11|    return 1;
  150|     11|}

ENGINE_set_load_privkey_function:
   62|      3|{
   63|      3|    e->load_privkey = loadpriv_f;
   64|      3|    return 1;
   65|      3|}
ENGINE_set_load_pubkey_function:
   68|      3|{
   69|      3|    e->load_pubkey = loadpub_f;
   70|      3|    return 1;
   71|      3|}

ENGINE_load_rdrand:
  133|      1|{
  134|      1|    extern unsigned int OPENSSL_ia32cap_P[];
  135|       |
  136|      1|    if (OPENSSL_ia32cap_P[1] & (1 << (62 - 32))) {
  137|      1|        ENGINE *toadd = ENGINE_rdrand();
  138|      1|        if (!toadd)
  139|      0|            return;
  140|      1|        ENGINE_add(toadd);
  141|      1|        ENGINE_free(toadd);
  142|      1|        ERR_clear_error();
  143|      1|    }
  144|      1|}
eng_rdrand.c:ENGINE_rdrand:
  121|      1|{
  122|      1|    ENGINE *ret = ENGINE_new();
  123|      1|    if (!ret)
  124|      0|        return NULL;
  125|      1|    if (!bind_helper(ret)) {
  126|      0|        ENGINE_free(ret);
  127|      0|        return NULL;
  128|      0|    }
  129|      1|    return ret;
  130|      1|}
eng_rdrand.c:bind_helper:
  109|      1|{
  110|      1|    if (!ENGINE_set_id(e, engine_e_rdrand_id) ||
  111|      1|        !ENGINE_set_name(e, engine_e_rdrand_name) ||
  112|      1|        !ENGINE_set_flags(e, ENGINE_FLAGS_NO_REGISTER_ALL) ||
  113|      1|        !ENGINE_set_init_function(e, rdrand_init) ||
  114|      1|        !ENGINE_set_RAND(e, &rdrand_meth))
  115|      0|        return 0;
  116|       |
  117|      1|    return 1;
  118|      1|}

engine_table_register:
  135|     31|{
  136|     31|    int ret = 0, added = 0;
  137|     31|    ENGINE_PILE tmplate, *fnd;
  138|     31|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  139|     31|    if (!(*table))
  140|      7|        added = 1;
  141|     31|    if (!int_table_check(table, 1))
  142|      0|        goto end;
  143|     31|    if (added)
  144|       |        /* The cleanup callback needs to be added */
  145|      7|        engine_cleanup_add_first(cleanup);
  146|     70|    while (num_nids--) {
  147|     39|        tmplate.nid = *nids;
  148|     39|        fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  149|     39|        if (!fnd) {
  150|     11|            fnd = OPENSSL_malloc(sizeof(ENGINE_PILE));
  151|     11|            if (!fnd)
  152|      0|                goto end;
  153|     11|            fnd->uptodate = 1;
  154|     11|            fnd->nid = *nids;
  155|     11|            fnd->sk = sk_ENGINE_new_null();
  156|     11|            if (!fnd->sk) {
  157|      0|                OPENSSL_free(fnd);
  158|      0|                goto end;
  159|      0|            }
  160|     11|            fnd->funct = NULL;
  161|     11|            (void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
  162|     11|        }
  163|       |        /* A registration shouldn't add duplciate entries */
  164|     39|        (void)sk_ENGINE_delete_ptr(fnd->sk, e);
  165|       |        /*
  166|       |         * if 'setdefault', this ENGINE goes to the head of the list
  167|       |         */
  168|     39|        if (!sk_ENGINE_push(fnd->sk, e))
  169|      0|            goto end;
  170|       |        /* "touch" this ENGINE_PILE */
  171|     39|        fnd->uptodate = 0;
  172|     39|        if (setdefault) {
  173|      0|            if (!engine_unlocked_init(e)) {
  174|      0|                ENGINEerr(ENGINE_F_ENGINE_TABLE_REGISTER,
  175|      0|                          ENGINE_R_INIT_FAILED);
  176|      0|                goto end;
  177|      0|            }
  178|      0|            if (fnd->funct)
  179|      0|                engine_unlocked_finish(fnd->funct, 0);
  180|      0|            fnd->funct = e;
  181|      0|            fnd->uptodate = 1;
  182|      0|        }
  183|     39|        nids++;
  184|     39|    }
  185|     31|    ret = 1;
  186|     31| end:
  187|     31|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  188|     31|    return ret;
  189|     31|}
engine_table_select:
  246|  5.89k|{
  247|  5.89k|    ENGINE *ret = NULL;
  248|  5.89k|    ENGINE_PILE tmplate, *fnd = NULL;
  249|  5.89k|    int initres, loop = 0;
  250|       |
  251|  5.89k|    if (!(*table)) {
  252|       |#ifdef ENGINE_TABLE_DEBUG
  253|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
  254|       |                "registered!\n", f, l, nid);
  255|       |#endif
  256|      0|        return NULL;
  257|      0|    }
  258|  5.89k|    ERR_set_mark();
  259|  5.89k|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  260|       |    /*
  261|       |     * Check again inside the lock otherwise we could race against cleanup
  262|       |     * operations. But don't worry about a fprintf(stderr).
  263|       |     */
  264|  5.89k|    if (!int_table_check(table, 0))
  265|      0|        goto end;
  266|  5.89k|    tmplate.nid = nid;
  267|  5.89k|    fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  268|  5.89k|    if (!fnd)
  269|  5.89k|        goto end;
  270|      1|    if (fnd->funct && engine_unlocked_init(fnd->funct)) {
  271|       |#ifdef ENGINE_TABLE_DEBUG
  272|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  273|       |                "ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
  274|       |#endif
  275|      0|        ret = fnd->funct;
  276|      0|        goto end;
  277|      0|    }
  278|      1|    if (fnd->uptodate) {
  279|      0|        ret = fnd->funct;
  280|      0|        goto end;
  281|      0|    }
  282|      5| trynext:
  283|      5|    ret = sk_ENGINE_value(fnd->sk, loop++);
  284|      5|    if (!ret) {
  285|       |#ifdef ENGINE_TABLE_DEBUG
  286|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
  287|       |                "registered implementations would initialise\n", f, l, nid);
  288|       |#endif
  289|      1|        goto end;
  290|      1|    }
  291|       |    /* Try to initialise the ENGINE? */
  292|      4|    if ((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
  293|      4|        initres = engine_unlocked_init(ret);
  294|      0|    else
  295|      0|        initres = 0;
  296|      4|    if (initres) {
  297|       |        /* Update 'funct' */
  298|      0|        if ((fnd->funct != ret) && engine_unlocked_init(ret)) {
  299|       |            /* If there was a previous default we release it. */
  300|      0|            if (fnd->funct)
  301|      0|                engine_unlocked_finish(fnd->funct, 0);
  302|      0|            fnd->funct = ret;
  303|       |#ifdef ENGINE_TABLE_DEBUG
  304|       |            fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, "
  305|       |                    "setting default to '%s'\n", f, l, nid, ret->id);
  306|       |#endif
  307|      0|        }
  308|       |#ifdef ENGINE_TABLE_DEBUG
  309|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  310|       |                "newly initialised '%s'\n", f, l, nid, ret->id);
  311|       |#endif
  312|      0|        goto end;
  313|      0|    }
  314|      4|    goto trynext;
  315|  5.89k| end:
  316|       |    /*
  317|       |     * If it failed, it is unlikely to succeed again until some future
  318|       |     * registrations have taken place. In all cases, we cache.
  319|       |     */
  320|  5.89k|    if (fnd)
  321|      1|        fnd->uptodate = 1;
  322|       |#ifdef ENGINE_TABLE_DEBUG
  323|       |    if (ret)
  324|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  325|       |                "ENGINE '%s'\n", f, l, nid, ret->id);
  326|       |    else
  327|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  328|       |                "'no matching ENGINE'\n", f, l, nid);
  329|       |#endif
  330|  5.89k|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  331|       |    /*
  332|       |     * Whatever happened, any failed init()s are not failures in this
  333|       |     * context, so clear our error state.
  334|       |     */
  335|  5.89k|    ERR_pop_to_mark();
  336|  5.89k|    return ret;
  337|      4|}
engine_table_doall:
  350|      1|{
  351|      1|    ENGINE_PILE_DOALL dall;
  352|      1|    dall.cb = cb;
  353|      1|    dall.arg = arg;
  354|      1|    if (table)
  355|      1|        lh_ENGINE_PILE_doall_arg(&table->piles,
  356|      1|                                 LHASH_DOALL_ARG_FN(int_cb),
  357|      1|                                 ENGINE_PILE_DOALL, &dall);
  358|      1|}
eng_table.c:int_table_check:
  115|  5.92k|{
  116|  5.92k|    LHASH_OF(ENGINE_PILE) *lh;
  117|       |
  118|  5.92k|    if (*t)
  119|  5.92k|        return 1;
  120|      7|    if (!create)
  121|      0|        return 0;
  122|      7|    if ((lh = lh_ENGINE_PILE_new()) == NULL)
  123|      0|        return 0;
  124|      7|    *t = (ENGINE_TABLE *)lh;
  125|      7|    return 1;
  126|      7|}
eng_table.c:engine_pile_hash:
  102|  5.94k|{
  103|  5.94k|    return c->nid;
  104|  5.94k|}
eng_table.c:engine_pile_cmp:
  107|     29|{
  108|     29|    return a->nid - b->nid;
  109|     29|}

ENGINE_set_pkey_asn1_meths:
  147|      1|{
  148|      1|    e->pkey_asn1_meths = f;
  149|      1|    return 1;
  150|      1|}
ENGINE_pkey_asn1_find_str:
  230|      1|{
  231|      1|    ENGINE_FIND_STR fstr;
  232|      1|    fstr.e = NULL;
  233|      1|    fstr.ameth = NULL;
  234|      1|    fstr.str = str;
  235|      1|    fstr.len = len;
  236|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  237|      1|    engine_table_doall(pkey_asn1_meth_table, look_str_cb, &fstr);
  238|       |    /* If found obtain a structural reference to engine */
  239|      1|    if (fstr.e) {
  240|      0|        fstr.e->struct_ref++;
  241|      0|        engine_ref_debug(fstr.e, 0, 1)
  242|      0|    }
  243|      1|    *pe = fstr.e;
  244|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  245|      1|    return fstr.ameth;
  246|      1|}

ENGINE_register_ciphers:
   77|     11|{
   78|     11|    if (e->ciphers) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->ciphers(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&cipher_table,
   83|      2|                                         engine_unregister_all_ciphers, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_set_ciphers:
  140|      1|{
  141|      1|    e->ciphers = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DH:
   78|     10|{
   79|     10|    if (e->dh_meth)
   80|      7|        return engine_table_register(&dh_table,
   81|      7|                                     engine_unregister_all_DH, e, &dummy_nid,
   82|      7|                                     1, 0);
   83|      3|    return 1;
   84|     10|}
ENGINE_set_DH:
  121|      7|{
  122|      7|    e->dh_meth = dh_meth;
  123|      7|    return 1;
  124|      7|}

ENGINE_register_digests:
   77|     11|{
   78|     11|    if (e->digests) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->digests(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&digest_table,
   83|      2|                                         engine_unregister_all_digests, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_get_digest_engine:
  116|  5.89k|{
  117|  5.89k|    return engine_table_select(&digest_table, nid);
  118|  5.89k|}
ENGINE_set_digests:
  140|      1|{
  141|      1|    e->digests = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DSA:
   78|     10|{
   79|     10|    if (e->dsa_meth)
   80|      6|        return engine_table_register(&dsa_table,
   81|      6|                                     engine_unregister_all_DSA, e, &dummy_nid,
   82|      6|                                     1, 0);
   83|      4|    return 1;
   84|     10|}
ENGINE_set_DSA:
  121|      6|{
  122|      6|    e->dsa_meth = dsa_meth;
  123|      6|    return 1;
  124|      6|}

ENGINE_register_ECDH:
   93|     10|{
   94|     10|    if (e->ecdh_meth)
   95|      0|        return engine_table_register(&ecdh_table,
   96|      0|                                     engine_unregister_all_ECDH, e,
   97|      0|                                     &dummy_nid, 1, 0);
   98|     10|    return 1;
   99|     10|}

ENGINE_register_ECDSA:
   78|     10|{
   79|     10|    if (e->ecdsa_meth)
   80|      0|        return engine_table_register(&ecdsa_table,
   81|      0|                                     engine_unregister_all_ECDSA, e,
   82|      0|                                     &dummy_nid, 1, 0);
   83|     10|    return 1;
   84|     10|}

ENGINE_register_pkey_meths:
   78|     11|{
   79|     11|    if (e->pkey_meths) {
   80|      2|        const int *nids;
   81|      2|        int num_nids = e->pkey_meths(e, NULL, &nids, 0);
   82|      2|        if (num_nids > 0)
   83|      2|            return engine_table_register(&pkey_meth_table,
   84|      2|                                         engine_unregister_all_pkey_meths, e,
   85|      2|                                         nids, num_nids, 0);
   86|      2|    }
   87|      9|    return 1;
   88|     11|}
ENGINE_set_pkey_meths:
  142|      1|{
  143|      1|    e->pkey_meths = f;
  144|      1|    return 1;
  145|      1|}

ENGINE_register_RAND:
   78|     10|{
   79|     10|    if (e->rand_meth)
   80|      4|        return engine_table_register(&rand_table,
   81|      4|                                     engine_unregister_all_RAND, e,
   82|      4|                                     &dummy_nid, 1, 0);
   83|      6|    return 1;
   84|     10|}
ENGINE_get_default_RAND:
  109|      1|{
  110|      1|    return engine_table_select(&rand_table, dummy_nid);
  111|      1|}
ENGINE_set_RAND:
  121|      5|{
  122|      5|    e->rand_meth = rand_meth;
  123|      5|    return 1;
  124|      5|}

ENGINE_register_RSA:
   78|     10|{
   79|     10|    if (e->rsa_meth)
   80|      8|        return engine_table_register(&rsa_table,
   81|      8|                                     engine_unregister_all_RSA, e, &dummy_nid,
   82|      8|                                     1, 0);
   83|      2|    return 1;
   84|     10|}
ENGINE_set_RSA:
  121|      8|{
  122|      8|    e->rsa_meth = rsa_meth;
  123|      8|    return 1;
  124|      8|}

err.c:err_string_data_LHASH_HASH:
  105|  19.0k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  19.0k|                const o_type *a = arg; \
  107|  19.0k|                return name##_hash(a); }
err.c:err_string_data_LHASH_COMP:
  114|  17.2k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  17.2k|                const o_type *a = arg1;             \
  116|  17.2k|                const o_type *b = arg2; \
  117|  17.2k|                return name##_cmp(a,b); }
err.c:err_state_LHASH_HASH:
  105|  16.3k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  16.3k|                const o_type *a = arg; \
  107|  16.3k|                return name##_hash(a); }
err.c:err_state_LHASH_COMP:
  114|  14.0k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  14.0k|                const o_type *a = arg1;             \
  116|  14.0k|                const o_type *b = arg2; \
  117|  14.0k|                return name##_cmp(a,b); }

ERR_load_ERR_strings:
  659|     81|{
  660|     81|    err_fns_check();
  661|     81|#ifndef OPENSSL_NO_ERR
  662|     81|    err_load_strings(0, ERR_str_libraries);
  663|     81|    err_load_strings(0, ERR_str_reasons);
  664|     81|    err_load_strings(ERR_LIB_SYS, ERR_str_functs);
  665|     81|    build_SYS_str_reasons();
  666|     81|    err_load_strings(ERR_LIB_SYS, SYS_str_reasons);
  667|     81|#endif
  668|     81|}
ERR_load_strings:
  681|     80|{
  682|     80|    ERR_load_ERR_strings();
  683|     80|    err_load_strings(lib, str);
  684|     80|}
ERR_put_error:
  705|     15|{
  706|     15|    ERR_STATE *es;
  707|       |
  708|       |#ifdef _OSD_POSIX
  709|       |    /*
  710|       |     * In the BS2000-OSD POSIX subsystem, the compiler generates path names
  711|       |     * in the form "*POSIX(/etc/passwd)". This dirty hack strips them to
  712|       |     * something sensible. @@@ We shouldn't modify a const string, though.
  713|       |     */
  714|       |    if (strncmp(file, "*POSIX(", sizeof("*POSIX(") - 1) == 0) {
  715|       |        char *end;
  716|       |
  717|       |        /* Skip the "*POSIX(" prefix */
  718|       |        file += sizeof("*POSIX(") - 1;
  719|       |        end = &file[strlen(file) - 1];
  720|       |        if (*end == ')')
  721|       |            *end = '\0';
  722|       |        /* Optional: use the basename of the path only. */
  723|       |        if ((end = strrchr(file, '/')) != NULL)
  724|       |            file = &end[1];
  725|       |    }
  726|       |#endif
  727|     15|    es = ERR_get_state();
  728|     15|    if (es == NULL)
  729|      0|        return;
  730|       |
  731|     15|    es->top = (es->top + 1) % ERR_NUM_ERRORS;
  732|     15|    if (es->top == es->bottom)
  733|      0|        es->bottom = (es->bottom + 1) % ERR_NUM_ERRORS;
  734|     15|    es->err_flags[es->top] = 0;
  735|     15|    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
  736|     15|    es->err_file[es->top] = file;
  737|     15|    es->err_line[es->top] = line;
  738|     15|    err_clear_data(es, es->top);
  739|     15|}
ERR_clear_error:
  742|     12|{
  743|     12|    int i;
  744|     12|    ERR_STATE *es;
  745|       |
  746|     12|    es = ERR_get_state();
  747|     12|    if (es == NULL)
  748|      0|        return;
  749|       |
  750|    204|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  751|    192|        err_clear(es, i);
  752|    192|    }
  753|     12|    es->top = es->bottom = 0;
  754|     12|}
ERR_peek_last_error:
  789|      2|{
  790|      2|    return (get_error_values(0, 1, NULL, NULL, NULL, NULL));
  791|      2|}
ERR_func_error_string:
  971|     28|{
  972|     28|    ERR_STRING_DATA d, *p;
  973|     28|    unsigned long l, f;
  974|       |
  975|     28|    err_fns_check();
  976|     28|    l = ERR_GET_LIB(e);
  977|     28|    f = ERR_GET_FUNC(e);
  978|     28|    d.error = ERR_PACK(l, f, 0);
  979|     28|    p = ERRFN(err_get_item) (&d);
  980|     28|    return ((p == NULL) ? NULL : p->string);
  981|     28|}
ERR_remove_thread_state:
 1001|  4.57k|{
 1002|  4.57k|    ERR_STATE tmp;
 1003|       |
 1004|  4.57k|    if (id)
 1005|      0|        CRYPTO_THREADID_cpy(&tmp.tid, id);
 1006|  4.57k|    else
 1007|  4.57k|        CRYPTO_THREADID_current(&tmp.tid);
 1008|  4.57k|    err_fns_check();
 1009|       |    /*
 1010|       |     * thread_del_item automatically destroys the LHASH if the number of
 1011|       |     * items reaches zero.
 1012|       |     */
 1013|  4.57k|    ERRFN(thread_del_item) (&tmp);
 1014|  4.57k|}
ERR_get_state:
 1024|  11.8k|{
 1025|  11.8k|    ERR_STATE *ret, tmp, *tmpp = NULL;
 1026|  11.8k|    int i;
 1027|  11.8k|    CRYPTO_THREADID tid;
 1028|       |
 1029|  11.8k|    err_fns_check();
 1030|  11.8k|    CRYPTO_THREADID_current(&tid);
 1031|  11.8k|    CRYPTO_THREADID_cpy(&tmp.tid, &tid);
 1032|  11.8k|    ret = ERRFN(thread_get_item) (&tmp);
 1033|       |
 1034|       |    /* ret == the error state, if NULL, make a new one */
 1035|  11.8k|    if (ret == NULL) {
 1036|  2.27k|        ret = (ERR_STATE *)OPENSSL_malloc(sizeof(ERR_STATE));
 1037|  2.27k|        if (ret == NULL)
 1038|      0|            return NULL;
 1039|  2.27k|        CRYPTO_THREADID_cpy(&ret->tid, &tid);
 1040|  2.27k|        ret->top = 0;
 1041|  2.27k|        ret->bottom = 0;
 1042|  38.5k|        for (i = 0; i < ERR_NUM_ERRORS; i++) {
 1043|  36.3k|            ret->err_data[i] = NULL;
 1044|  36.3k|            ret->err_data_flags[i] = 0;
 1045|  36.3k|        }
 1046|  2.27k|        tmpp = ERRFN(thread_set_item) (ret);
 1047|       |        /* To check if insertion failed, do a get. */
 1048|  2.27k|        if (ERRFN(thread_get_item) (ret) != ret) {
 1049|      0|            ERR_STATE_free(ret); /* could not insert it */
 1050|      0|            return NULL;
 1051|      0|        }
 1052|       |        /*
 1053|       |         * If a race occured in this function and we came second, tmpp is the
 1054|       |         * first one that we just replaced.
 1055|       |         */
 1056|  2.27k|        if (tmpp)
 1057|      0|            ERR_STATE_free(tmpp);
 1058|  2.27k|    }
 1059|  11.8k|    return ret;
 1060|  11.8k|}
ERR_get_next_error_library:
 1063|      9|{
 1064|      9|    err_fns_check();
 1065|      9|    return ERRFN(get_next_lib) ();
 1066|      9|}
ERR_set_error_data:
 1069|      5|{
 1070|      5|    ERR_STATE *es;
 1071|      5|    int i;
 1072|       |
 1073|      5|    es = ERR_get_state();
 1074|      5|    if (es == NULL)
 1075|      0|        return;
 1076|       |
 1077|      5|    i = es->top;
 1078|       |
 1079|      5|    err_clear_data(es, i);
 1080|      5|    es->err_data[i] = data;
 1081|      5|    es->err_data_flags[i] = flags;
 1082|      5|}
ERR_add_error_data:
 1085|      5|{
 1086|      5|    va_list args;
 1087|      5|    va_start(args, num);
 1088|      5|    ERR_add_error_vdata(num, args);
 1089|      5|    va_end(args);
 1090|      5|}
ERR_add_error_vdata:
 1093|      5|{
 1094|      5|    int i, n, s;
 1095|      5|    char *str, *p, *a;
 1096|       |
 1097|      5|    s = 80;
 1098|      5|    str = OPENSSL_malloc(s + 1);
 1099|      5|    if (str == NULL)
 1100|      0|        return;
 1101|      5|    str[0] = '\0';
 1102|       |
 1103|      5|    n = 0;
 1104|     26|    for (i = 0; i < num; i++) {
 1105|     21|        a = va_arg(args, char *);
 1106|       |        /* ignore NULLs, thanks to Bob Beck <beck@obtuse.com> */
 1107|     21|        if (a != NULL) {
 1108|     21|            n += strlen(a);
 1109|     21|            if (n > s) {
 1110|      4|                s = n + 20;
 1111|      4|                p = OPENSSL_realloc(str, s + 1);
 1112|      4|                if (p == NULL) {
 1113|      0|                    OPENSSL_free(str);
 1114|      0|                    return;
 1115|      0|                } else
 1116|      4|                    str = p;
 1117|      4|            }
 1118|     21|            BUF_strlcat(str, a, (size_t)s + 1);
 1119|     21|        }
 1120|     21|    }
 1121|      5|    ERR_set_error_data(str, ERR_TXT_MALLOCED | ERR_TXT_STRING);
 1122|      5|}
ERR_set_mark:
 1125|  5.89k|{
 1126|  5.89k|    ERR_STATE *es;
 1127|       |
 1128|  5.89k|    es = ERR_get_state();
 1129|  5.89k|    if (es == NULL)
 1130|      0|        return 0;
 1131|       |
 1132|  5.89k|    if (es->bottom == es->top)
 1133|  5.89k|        return 0;
 1134|      0|    es->err_flags[es->top] |= ERR_FLAG_MARK;
 1135|      0|    return 1;
 1136|  5.89k|}
ERR_pop_to_mark:
 1139|  5.89k|{
 1140|  5.89k|    ERR_STATE *es;
 1141|       |
 1142|  5.89k|    es = ERR_get_state();
 1143|  5.89k|    if (es == NULL)
 1144|      0|        return 0;
 1145|       |
 1146|  5.90k|    while (es->bottom != es->top
 1147|  5.90k|           && (es->err_flags[es->top] & ERR_FLAG_MARK) == 0) {
 1148|     12|        err_clear(es, es->top);
 1149|     12|        es->top -= 1;
 1150|     12|        if (es->top == -1)
 1151|      0|            es->top = ERR_NUM_ERRORS - 1;
 1152|     12|    }
 1153|       |
 1154|  5.89k|    if (es->bottom == es->top)
 1155|  5.89k|        return 0;
 1156|      0|    es->err_flags[es->top] &= ~ERR_FLAG_MARK;
 1157|      0|    return 1;
 1158|  5.89k|}
err.c:err_fns_check:
  292|  56.5k|{
  293|  56.5k|    if (err_fns)
  294|  56.5k|        return;
  295|       |
  296|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  297|      1|    if (!err_fns)
  298|      1|        err_fns = &err_defaults;
  299|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  300|      1|}
err.c:int_err_get:
  358|  19.0k|{
  359|  19.0k|    LHASH_OF(ERR_STRING_DATA) *ret = NULL;
  360|       |
  361|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  362|  19.0k|    if (!int_error_hash && create) {
  363|      1|        CRYPTO_push_info("int_err_get (err.c)");
  364|      1|        int_error_hash = lh_ERR_STRING_DATA_new();
  365|      1|        CRYPTO_pop_info();
  366|      1|    }
  367|  19.0k|    if (int_error_hash)
  368|  19.0k|        ret = int_error_hash;
  369|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  370|       |
  371|  19.0k|    return ret;
  372|  19.0k|}
err.c:err_string_data_hash:
  339|  19.0k|{
  340|  19.0k|    unsigned long ret, l;
  341|       |
  342|  19.0k|    l = a->error;
  343|  19.0k|    ret = l ^ ERR_GET_LIB(l) ^ ERR_GET_FUNC(l);
  344|  19.0k|    return (ret ^ ret % 19 * 13);
  345|  19.0k|}
err.c:err_string_data_cmp:
  351|  17.2k|{
  352|  17.2k|    return (int)(a->error - b->error);
  353|  17.2k|}
err.c:int_err_get_item:
  385|     28|{
  386|     28|    ERR_STRING_DATA *p;
  387|     28|    LHASH_OF(ERR_STRING_DATA) *hash;
  388|       |
  389|     28|    err_fns_check();
  390|     28|    hash = ERRFN(err_get) (0);
  391|     28|    if (!hash)
  392|      0|        return NULL;
  393|       |
  394|     28|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  395|     28|    p = lh_ERR_STRING_DATA_retrieve(hash, d);
  396|     28|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  397|       |
  398|     28|    return p;
  399|     28|}
err.c:int_err_set_item:
  402|  19.0k|{
  403|  19.0k|    ERR_STRING_DATA *p;
  404|  19.0k|    LHASH_OF(ERR_STRING_DATA) *hash;
  405|       |
  406|  19.0k|    err_fns_check();
  407|  19.0k|    hash = ERRFN(err_get) (1);
  408|  19.0k|    if (!hash)
  409|      0|        return NULL;
  410|       |
  411|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  412|  19.0k|    p = lh_ERR_STRING_DATA_insert(hash, d);
  413|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  414|       |
  415|  19.0k|    return p;
  416|  19.0k|}
err.c:int_thread_get:
  450|  20.9k|{
  451|  20.9k|    LHASH_OF(ERR_STATE) *ret = NULL;
  452|       |
  453|  20.9k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  454|  20.9k|    if (!int_thread_hash && create) {
  455|  2.27k|        CRYPTO_push_info("int_thread_get (err.c)");
  456|  2.27k|        int_thread_hash = lh_ERR_STATE_new();
  457|  2.27k|        CRYPTO_pop_info();
  458|  2.27k|    }
  459|  20.9k|    if (int_thread_hash) {
  460|  16.3k|        int_thread_hash_references++;
  461|  16.3k|        ret = int_thread_hash;
  462|  16.3k|    }
  463|  20.9k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  464|  20.9k|    return ret;
  465|  20.9k|}
err.c:err_state_hash:
  436|  16.3k|{
  437|  16.3k|    return CRYPTO_THREADID_hash(&a->tid) * 13;
  438|  16.3k|}
err.c:err_state_cmp:
  443|  14.0k|{
  444|  14.0k|    return CRYPTO_THREADID_cmp(&a->tid, &b->tid);
  445|  14.0k|}
err.c:int_thread_release:
  468|  16.3k|{
  469|  16.3k|    int i;
  470|       |
  471|  16.3k|    if (hash == NULL || *hash == NULL)
  472|      0|        return;
  473|       |
  474|  16.3k|    i = CRYPTO_add(&int_thread_hash_references, -1, CRYPTO_LOCK_ERR);
  475|       |
  476|       |#ifdef REF_PRINT
  477|       |    fprintf(stderr, "%4d:%s\n", int_thread_hash_references, "ERR");
  478|       |#endif
  479|  16.3k|    if (i > 0)
  480|      0|        return;
  481|       |#ifdef REF_CHECK
  482|       |    if (i < 0) {
  483|       |        fprintf(stderr, "int_thread_release, bad reference count\n");
  484|       |        abort();                /* ok */
  485|       |    }
  486|       |#endif
  487|  16.3k|    *hash = NULL;
  488|  16.3k|}
err.c:int_thread_get_item:
  491|  14.0k|{
  492|  14.0k|    ERR_STATE *p;
  493|  14.0k|    LHASH_OF(ERR_STATE) *hash;
  494|       |
  495|  14.0k|    err_fns_check();
  496|  14.0k|    hash = ERRFN(thread_get) (0);
  497|  14.0k|    if (!hash)
  498|  2.27k|        return NULL;
  499|       |
  500|  11.8k|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  501|  11.8k|    p = lh_ERR_STATE_retrieve(hash, d);
  502|  11.8k|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  503|       |
  504|  11.8k|    ERRFN(thread_release) (&hash);
  505|  11.8k|    return p;
  506|  14.0k|}
err.c:int_thread_set_item:
  509|  2.27k|{
  510|  2.27k|    ERR_STATE *p;
  511|  2.27k|    LHASH_OF(ERR_STATE) *hash;
  512|       |
  513|  2.27k|    err_fns_check();
  514|  2.27k|    hash = ERRFN(thread_get) (1);
  515|  2.27k|    if (!hash)
  516|      0|        return NULL;
  517|       |
  518|  2.27k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  519|  2.27k|    p = lh_ERR_STATE_insert(hash, d);
  520|  2.27k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  521|       |
  522|  2.27k|    ERRFN(thread_release) (&hash);
  523|  2.27k|    return p;
  524|  2.27k|}
err.c:int_thread_del_item:
  527|  4.57k|{
  528|  4.57k|    ERR_STATE *p;
  529|  4.57k|    LHASH_OF(ERR_STATE) *hash;
  530|       |
  531|  4.57k|    err_fns_check();
  532|  4.57k|    hash = ERRFN(thread_get) (0);
  533|  4.57k|    if (!hash)
  534|  2.30k|        return;
  535|       |
  536|  2.26k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  537|  2.26k|    p = lh_ERR_STATE_delete(hash, d);
  538|       |    /* make sure we don't leak memory */
  539|  2.26k|    if (int_thread_hash_references == 1
  540|  2.26k|        && int_thread_hash && lh_ERR_STATE_num_items(int_thread_hash) == 0) {
  541|  2.26k|        lh_ERR_STATE_free(int_thread_hash);
  542|  2.26k|        int_thread_hash = NULL;
  543|  2.26k|    }
  544|  2.26k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  545|       |
  546|  2.26k|    ERRFN(thread_release) (&hash);
  547|  2.26k|    if (p)
  548|  2.26k|        ERR_STATE_free(p);
  549|  2.26k|}
err.c:int_err_get_next_lib:
  552|      9|{
  553|      9|    int ret;
  554|       |
  555|      9|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  556|      9|    ret = int_err_library_number++;
  557|      9|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  558|       |
  559|      9|    return ret;
  560|      9|}
err.c:build_SYS_str_reasons:
  578|     81|{
  579|       |    /* OPENSSL_malloc cannot be used here, use static storage instead */
  580|     81|    static char strerror_tab[NUM_SYS_STR_REASONS][LEN_SYS_STR_REASON];
  581|     81|    int i;
  582|     81|    static int init = 1;
  583|       |
  584|     81|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  585|     81|    if (!init) {
  586|     80|        CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  587|     80|        return;
  588|     80|    }
  589|       |
  590|      1|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  591|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  592|      1|    if (!init) {
  593|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  594|      0|        return;
  595|      0|    }
  596|       |
  597|    128|    for (i = 1; i <= NUM_SYS_STR_REASONS; i++) {
  598|    127|        ERR_STRING_DATA *str = &SYS_str_reasons[i - 1];
  599|       |
  600|    127|        str->error = (unsigned long)i;
  601|    127|        if (str->string == NULL) {
  602|    127|            char (*dest)[LEN_SYS_STR_REASON] = &(strerror_tab[i - 1]);
  603|    127|            char *src = strerror(i);
  604|    127|            if (src != NULL) {
  605|    127|                strncpy(*dest, src, sizeof *dest);
  606|    127|                (*dest)[sizeof *dest - 1] = '\0';
  607|    127|                str->string = *dest;
  608|    127|            }
  609|    127|        }
  610|    127|        if (str->string == NULL)
  611|      0|            str->string = "unknown";
  612|    127|    }
  613|       |
  614|       |    /*
  615|       |     * Now we still have SYS_str_reasons[NUM_SYS_STR_REASONS] = {0, NULL}, as
  616|       |     * required by ERR_load_strings.
  617|       |     */
  618|       |
  619|      1|    init = 0;
  620|       |
  621|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  622|      1|}
err.c:err_load_strings:
  671|    404|{
  672|  19.4k|    while (str->error) {
  673|  19.0k|        if (lib)
  674|  11.4k|            str->error |= ERR_PACK(lib, 0, 0);
  675|  19.0k|        ERRFN(err_set_item) (str);
  676|  19.0k|        str++;
  677|  19.0k|    }
  678|    404|}
err.c:get_error_values:
  807|      2|{
  808|      2|    int i = 0;
  809|      2|    ERR_STATE *es;
  810|      2|    unsigned long ret;
  811|       |
  812|      2|    es = ERR_get_state();
  813|      2|    if (es == NULL)
  814|      0|        return 0;
  815|       |
  816|      2|    if (inc && top) {
  817|      0|        if (file)
  818|      0|            *file = "";
  819|      0|        if (line)
  820|      0|            *line = 0;
  821|      0|        if (data)
  822|      0|            *data = "";
  823|      0|        if (flags)
  824|      0|            *flags = 0;
  825|       |
  826|      0|        return ERR_R_INTERNAL_ERROR;
  827|      0|    }
  828|       |
  829|      2|    if (es->bottom == es->top)
  830|      0|        return 0;
  831|      2|    if (top)
  832|      2|        i = es->top;            /* last error */
  833|      0|    else
  834|      0|        i = (es->bottom + 1) % ERR_NUM_ERRORS; /* first error */
  835|       |
  836|      2|    ret = es->err_buffer[i];
  837|      2|    if (inc) {
  838|      0|        es->bottom = i;
  839|      0|        es->err_buffer[i] = 0;
  840|      0|    }
  841|       |
  842|      2|    if ((file != NULL) && (line != NULL)) {
  843|      0|        if (es->err_file[i] == NULL) {
  844|      0|            *file = "NA";
  845|      0|            if (line != NULL)
  846|      0|                *line = 0;
  847|      0|        } else {
  848|      0|            *file = es->err_file[i];
  849|      0|            if (line != NULL)
  850|      0|                *line = es->err_line[i];
  851|      0|        }
  852|      0|    }
  853|       |
  854|      2|    if (data == NULL) {
  855|      2|        if (inc) {
  856|      0|            err_clear_data(es, i);
  857|      0|        }
  858|      2|    } else {
  859|      0|        if (es->err_data[i] == NULL) {
  860|      0|            *data = "";
  861|      0|            if (flags != NULL)
  862|      0|                *flags = 0;
  863|      0|        } else {
  864|      0|            *data = es->err_data[i];
  865|      0|            if (flags != NULL)
  866|      0|                *flags = es->err_data_flags[i];
  867|      0|        }
  868|      0|    }
  869|      2|    return ret;
  870|      2|}
err.c:ERR_STATE_free:
  646|  2.26k|{
  647|  2.26k|    int i;
  648|       |
  649|  2.26k|    if (s == NULL)
  650|      0|        return;
  651|       |
  652|  38.5k|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  653|  36.3k|        err_clear_data(s, i);
  654|  36.3k|    }
  655|  2.26k|    OPENSSL_free(s);
  656|  2.26k|}

ERR_load_crypto_strings:
  112|      1|{
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|    ERR_load_ERR_strings();     /* include error strings for SYSerr */
  115|      1|    ERR_load_BN_strings();
  116|      1|# ifndef OPENSSL_NO_RSA
  117|      1|    ERR_load_RSA_strings();
  118|      1|# endif
  119|      1|# ifndef OPENSSL_NO_DH
  120|      1|    ERR_load_DH_strings();
  121|      1|# endif
  122|      1|    ERR_load_EVP_strings();
  123|      1|    ERR_load_BUF_strings();
  124|      1|    ERR_load_OBJ_strings();
  125|      1|    ERR_load_PEM_strings();
  126|      1|# ifndef OPENSSL_NO_DSA
  127|      1|    ERR_load_DSA_strings();
  128|      1|# endif
  129|      1|    ERR_load_X509_strings();
  130|      1|    ERR_load_ASN1_strings();
  131|      1|    ERR_load_CONF_strings();
  132|      1|    ERR_load_CRYPTO_strings();
  133|      1|# ifndef OPENSSL_NO_COMP
  134|      1|    ERR_load_COMP_strings();
  135|      1|# endif
  136|      1|# ifndef OPENSSL_NO_EC
  137|      1|    ERR_load_EC_strings();
  138|      1|# endif
  139|      1|# ifndef OPENSSL_NO_ECDSA
  140|      1|    ERR_load_ECDSA_strings();
  141|      1|# endif
  142|      1|# ifndef OPENSSL_NO_ECDH
  143|      1|    ERR_load_ECDH_strings();
  144|      1|# endif
  145|       |    /* skip ERR_load_SSL_strings() because it is not in this library */
  146|      1|    ERR_load_BIO_strings();
  147|      1|    ERR_load_PKCS7_strings();
  148|      1|    ERR_load_X509V3_strings();
  149|      1|    ERR_load_PKCS12_strings();
  150|      1|    ERR_load_RAND_strings();
  151|      1|    ERR_load_DSO_strings();
  152|      1|    ERR_load_TS_strings();
  153|      1|# ifndef OPENSSL_NO_ENGINE
  154|      1|    ERR_load_ENGINE_strings();
  155|      1|# endif
  156|      1|    ERR_load_OCSP_strings();
  157|      1|    ERR_load_UI_strings();
  158|       |# ifdef OPENSSL_FIPS
  159|       |    ERR_load_FIPS_strings();
  160|       |# endif
  161|      1|# ifndef OPENSSL_NO_CMS
  162|      1|    ERR_load_CMS_strings();
  163|      1|# endif
  164|       |# ifndef OPENSSL_NO_JPAKE
  165|       |    ERR_load_JPAKE_strings();
  166|       |# endif
  167|      1|#endif
  168|      1|}

EVP_des_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cfb128:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }

OPENSSL_add_all_algorithms_noconf:
   76|      1|{
   77|       |    /*
   78|       |     * For the moment OPENSSL_cpuid_setup does something
   79|       |     * only on IA-32, but we reserve the option for all
   80|       |     * platforms...
   81|       |     */
   82|      1|    OPENSSL_cpuid_setup();
   83|      1|    OpenSSL_add_all_ciphers();
   84|      1|    OpenSSL_add_all_digests();
   85|      1|}

OpenSSL_add_all_ciphers:
   66|      1|{
   67|       |
   68|      1|#ifndef OPENSSL_NO_DES
   69|      1|    EVP_add_cipher(EVP_des_cfb());
   70|      1|    EVP_add_cipher(EVP_des_cfb1());
   71|      1|    EVP_add_cipher(EVP_des_cfb8());
   72|      1|    EVP_add_cipher(EVP_des_ede_cfb());
   73|      1|    EVP_add_cipher(EVP_des_ede3_cfb());
   74|      1|    EVP_add_cipher(EVP_des_ede3_cfb1());
   75|      1|    EVP_add_cipher(EVP_des_ede3_cfb8());
   76|       |
   77|      1|    EVP_add_cipher(EVP_des_ofb());
   78|      1|    EVP_add_cipher(EVP_des_ede_ofb());
   79|      1|    EVP_add_cipher(EVP_des_ede3_ofb());
   80|       |
   81|      1|    EVP_add_cipher(EVP_desx_cbc());
   82|      1|    EVP_add_cipher_alias(SN_desx_cbc, "DESX");
   83|      1|    EVP_add_cipher_alias(SN_desx_cbc, "desx");
   84|       |
   85|      1|    EVP_add_cipher(EVP_des_cbc());
   86|      1|    EVP_add_cipher_alias(SN_des_cbc, "DES");
   87|      1|    EVP_add_cipher_alias(SN_des_cbc, "des");
   88|      1|    EVP_add_cipher(EVP_des_ede_cbc());
   89|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   90|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "DES3");
   91|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "des3");
   92|       |
   93|      1|    EVP_add_cipher(EVP_des_ecb());
   94|      1|    EVP_add_cipher(EVP_des_ede());
   95|      1|    EVP_add_cipher(EVP_des_ede3());
   96|      1|    EVP_add_cipher(EVP_des_ede3_wrap());
   97|      1|#endif
   98|       |
   99|      1|#ifndef OPENSSL_NO_RC4
  100|      1|    EVP_add_cipher(EVP_rc4());
  101|      1|    EVP_add_cipher(EVP_rc4_40());
  102|      1|# ifndef OPENSSL_NO_MD5
  103|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
  104|      1|# endif
  105|      1|#endif
  106|       |
  107|      1|#ifndef OPENSSL_NO_IDEA
  108|      1|    EVP_add_cipher(EVP_idea_ecb());
  109|      1|    EVP_add_cipher(EVP_idea_cfb());
  110|      1|    EVP_add_cipher(EVP_idea_ofb());
  111|      1|    EVP_add_cipher(EVP_idea_cbc());
  112|      1|    EVP_add_cipher_alias(SN_idea_cbc, "IDEA");
  113|      1|    EVP_add_cipher_alias(SN_idea_cbc, "idea");
  114|      1|#endif
  115|       |
  116|      1|#ifndef OPENSSL_NO_SEED
  117|      1|    EVP_add_cipher(EVP_seed_ecb());
  118|      1|    EVP_add_cipher(EVP_seed_cfb());
  119|      1|    EVP_add_cipher(EVP_seed_ofb());
  120|      1|    EVP_add_cipher(EVP_seed_cbc());
  121|      1|    EVP_add_cipher_alias(SN_seed_cbc, "SEED");
  122|      1|    EVP_add_cipher_alias(SN_seed_cbc, "seed");
  123|      1|#endif
  124|       |
  125|      1|#ifndef OPENSSL_NO_RC2
  126|      1|    EVP_add_cipher(EVP_rc2_ecb());
  127|      1|    EVP_add_cipher(EVP_rc2_cfb());
  128|      1|    EVP_add_cipher(EVP_rc2_ofb());
  129|      1|    EVP_add_cipher(EVP_rc2_cbc());
  130|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
  131|      1|    EVP_add_cipher(EVP_rc2_64_cbc());
  132|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "RC2");
  133|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "rc2");
  134|      1|#endif
  135|       |
  136|      1|#ifndef OPENSSL_NO_BF
  137|      1|    EVP_add_cipher(EVP_bf_ecb());
  138|      1|    EVP_add_cipher(EVP_bf_cfb());
  139|      1|    EVP_add_cipher(EVP_bf_ofb());
  140|      1|    EVP_add_cipher(EVP_bf_cbc());
  141|      1|    EVP_add_cipher_alias(SN_bf_cbc, "BF");
  142|      1|    EVP_add_cipher_alias(SN_bf_cbc, "bf");
  143|      1|    EVP_add_cipher_alias(SN_bf_cbc, "blowfish");
  144|      1|#endif
  145|       |
  146|      1|#ifndef OPENSSL_NO_CAST
  147|      1|    EVP_add_cipher(EVP_cast5_ecb());
  148|      1|    EVP_add_cipher(EVP_cast5_cfb());
  149|      1|    EVP_add_cipher(EVP_cast5_ofb());
  150|      1|    EVP_add_cipher(EVP_cast5_cbc());
  151|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST");
  152|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast");
  153|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST-cbc");
  154|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast-cbc");
  155|      1|#endif
  156|       |
  157|      1|#ifndef OPENSSL_NO_RC5
  158|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ecb());
  159|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cfb());
  160|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ofb());
  161|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cbc());
  162|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "rc5");
  163|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "RC5");
  164|      1|#endif
  165|       |
  166|      1|#ifndef OPENSSL_NO_AES
  167|      1|    EVP_add_cipher(EVP_aes_128_ecb());
  168|      1|    EVP_add_cipher(EVP_aes_128_cbc());
  169|      1|    EVP_add_cipher(EVP_aes_128_cfb());
  170|      1|    EVP_add_cipher(EVP_aes_128_cfb1());
  171|      1|    EVP_add_cipher(EVP_aes_128_cfb8());
  172|      1|    EVP_add_cipher(EVP_aes_128_ofb());
  173|      1|    EVP_add_cipher(EVP_aes_128_ctr());
  174|      1|    EVP_add_cipher(EVP_aes_128_gcm());
  175|      1|    EVP_add_cipher(EVP_aes_128_xts());
  176|      1|    EVP_add_cipher(EVP_aes_128_ccm());
  177|      1|    EVP_add_cipher(EVP_aes_128_wrap());
  178|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "AES128");
  179|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "aes128");
  180|      1|    EVP_add_cipher(EVP_aes_192_ecb());
  181|      1|    EVP_add_cipher(EVP_aes_192_cbc());
  182|      1|    EVP_add_cipher(EVP_aes_192_cfb());
  183|      1|    EVP_add_cipher(EVP_aes_192_cfb1());
  184|      1|    EVP_add_cipher(EVP_aes_192_cfb8());
  185|      1|    EVP_add_cipher(EVP_aes_192_ofb());
  186|      1|    EVP_add_cipher(EVP_aes_192_ctr());
  187|      1|    EVP_add_cipher(EVP_aes_192_gcm());
  188|      1|    EVP_add_cipher(EVP_aes_192_ccm());
  189|      1|    EVP_add_cipher(EVP_aes_192_wrap());
  190|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "AES192");
  191|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "aes192");
  192|      1|    EVP_add_cipher(EVP_aes_256_ecb());
  193|      1|    EVP_add_cipher(EVP_aes_256_cbc());
  194|      1|    EVP_add_cipher(EVP_aes_256_cfb());
  195|      1|    EVP_add_cipher(EVP_aes_256_cfb1());
  196|      1|    EVP_add_cipher(EVP_aes_256_cfb8());
  197|      1|    EVP_add_cipher(EVP_aes_256_ofb());
  198|      1|    EVP_add_cipher(EVP_aes_256_ctr());
  199|      1|    EVP_add_cipher(EVP_aes_256_gcm());
  200|      1|    EVP_add_cipher(EVP_aes_256_xts());
  201|      1|    EVP_add_cipher(EVP_aes_256_ccm());
  202|      1|    EVP_add_cipher(EVP_aes_256_wrap());
  203|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "AES256");
  204|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "aes256");
  205|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
  206|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
  207|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
  208|      1|# endif
  209|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
  210|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  211|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  212|      1|# endif
  213|      1|#endif
  214|       |
  215|      1|#ifndef OPENSSL_NO_CAMELLIA
  216|      1|    EVP_add_cipher(EVP_camellia_128_ecb());
  217|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  218|      1|    EVP_add_cipher(EVP_camellia_128_cfb());
  219|      1|    EVP_add_cipher(EVP_camellia_128_cfb1());
  220|      1|    EVP_add_cipher(EVP_camellia_128_cfb8());
  221|      1|    EVP_add_cipher(EVP_camellia_128_ofb());
  222|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "CAMELLIA128");
  223|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "camellia128");
  224|      1|    EVP_add_cipher(EVP_camellia_192_ecb());
  225|      1|    EVP_add_cipher(EVP_camellia_192_cbc());
  226|      1|    EVP_add_cipher(EVP_camellia_192_cfb());
  227|      1|    EVP_add_cipher(EVP_camellia_192_cfb1());
  228|      1|    EVP_add_cipher(EVP_camellia_192_cfb8());
  229|      1|    EVP_add_cipher(EVP_camellia_192_ofb());
  230|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "CAMELLIA192");
  231|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "camellia192");
  232|      1|    EVP_add_cipher(EVP_camellia_256_ecb());
  233|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  234|      1|    EVP_add_cipher(EVP_camellia_256_cfb());
  235|      1|    EVP_add_cipher(EVP_camellia_256_cfb1());
  236|      1|    EVP_add_cipher(EVP_camellia_256_cfb8());
  237|      1|    EVP_add_cipher(EVP_camellia_256_ofb());
  238|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "CAMELLIA256");
  239|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "camellia256");
  240|      1|#endif
  241|      1|}

OpenSSL_add_all_digests:
   66|      1|{
   67|      1|#ifndef OPENSSL_NO_MD4
   68|      1|    EVP_add_digest(EVP_md4());
   69|      1|#endif
   70|      1|#ifndef OPENSSL_NO_MD5
   71|      1|    EVP_add_digest(EVP_md5());
   72|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
   73|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
   74|      1|#endif
   75|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA0)
   76|      1|    EVP_add_digest(EVP_sha());
   77|      1|# ifndef OPENSSL_NO_DSA
   78|      1|    EVP_add_digest(EVP_dss());
   79|      1|# endif
   80|      1|#endif
   81|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   82|      1|    EVP_add_digest(EVP_sha1());
   83|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
   84|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
   85|      1|# ifndef OPENSSL_NO_DSA
   86|      1|    EVP_add_digest(EVP_dss1());
   87|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
   88|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
   89|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
   90|      1|# endif
   91|      1|# ifndef OPENSSL_NO_ECDSA
   92|      1|    EVP_add_digest(EVP_ecdsa());
   93|      1|# endif
   94|      1|#endif
   95|      1|#if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)
   96|      1|    EVP_add_digest(EVP_mdc2());
   97|      1|#endif
   98|      1|#ifndef OPENSSL_NO_RIPEMD
   99|      1|    EVP_add_digest(EVP_ripemd160());
  100|      1|    EVP_add_digest_alias(SN_ripemd160, "ripemd");
  101|      1|    EVP_add_digest_alias(SN_ripemd160, "rmd160");
  102|      1|#endif
  103|      1|#ifndef OPENSSL_NO_SHA256
  104|      1|    EVP_add_digest(EVP_sha224());
  105|      1|    EVP_add_digest(EVP_sha256());
  106|      1|#endif
  107|      1|#ifndef OPENSSL_NO_SHA512
  108|      1|    EVP_add_digest(EVP_sha384());
  109|      1|    EVP_add_digest(EVP_sha512());
  110|      1|#endif
  111|      1|#ifndef OPENSSL_NO_WHIRLPOOL
  112|      1|    EVP_add_digest(EVP_whirlpool());
  113|      1|#endif
  114|      1|}

EVP_MD_CTX_init:
  126|  3.06k|{
  127|  3.06k|    memset(ctx, '\0', sizeof *ctx);
  128|  3.06k|}
EVP_MD_CTX_create:
  131|    185|{
  132|    185|    EVP_MD_CTX *ctx = OPENSSL_malloc(sizeof *ctx);
  133|       |
  134|    185|    if (ctx)
  135|    185|        EVP_MD_CTX_init(ctx);
  136|       |
  137|    185|    return ctx;
  138|    185|}
EVP_DigestInit_ex:
  147|  5.89k|{
  148|  5.89k|    EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  149|       |#ifdef OPENSSL_FIPS
  150|       |    /* If FIPS mode switch to approved implementation if possible */
  151|       |    if (FIPS_mode()) {
  152|       |        const EVP_MD *fipsmd;
  153|       |        if (type) {
  154|       |            fipsmd = evp_get_fips_md(type);
  155|       |            if (fipsmd)
  156|       |                type = fipsmd;
  157|       |        }
  158|       |    }
  159|       |#endif
  160|  5.89k|#ifndef OPENSSL_NO_ENGINE
  161|       |    /*
  162|       |     * Whether it's nice or not, "Inits" can be used on "Final"'d contexts so
  163|       |     * this context may already have an ENGINE! Try to avoid releasing the
  164|       |     * previous handle, re-querying for an ENGINE, and having a
  165|       |     * reinitialisation, when it may all be unecessary.
  166|       |     */
  167|  5.89k|    if (ctx->engine && ctx->digest && (!type ||
  168|      0|                                       (type
  169|      0|                                        && (type->type ==
  170|      0|                                            ctx->digest->type))))
  171|      0|        goto skip_to_init;
  172|  5.89k|    if (type) {
  173|       |        /*
  174|       |         * Ensure an ENGINE left lying around from last time is cleared (the
  175|       |         * previous check attempted to avoid this if the same ENGINE and
  176|       |         * EVP_MD could be used).
  177|       |         */
  178|  5.89k|        if (ctx->engine)
  179|      0|            ENGINE_finish(ctx->engine);
  180|  5.89k|        if (impl) {
  181|      0|            if (!ENGINE_init(impl)) {
  182|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  183|      0|                return 0;
  184|      0|            }
  185|      0|        } else
  186|       |            /* Ask if an ENGINE is reserved for this job */
  187|  5.89k|            impl = ENGINE_get_digest_engine(type->type);
  188|  5.89k|        if (impl) {
  189|       |            /* There's an ENGINE for this job ... (apparently) */
  190|      0|            const EVP_MD *d = ENGINE_get_digest(impl, type->type);
  191|      0|            if (!d) {
  192|       |                /* Same comment from evp_enc.c */
  193|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  194|      0|                ENGINE_finish(impl);
  195|      0|                return 0;
  196|      0|            }
  197|       |            /* We'll use the ENGINE's private digest definition */
  198|      0|            type = d;
  199|       |            /*
  200|       |             * Store the ENGINE functional reference so we know 'type' came
  201|       |             * from an ENGINE and we need to release it when done.
  202|       |             */
  203|      0|            ctx->engine = impl;
  204|      0|        } else
  205|  5.89k|            ctx->engine = NULL;
  206|  5.89k|    } else {
  207|      0|        if (!ctx->digest) {
  208|      0|            EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_NO_DIGEST_SET);
  209|      0|            return 0;
  210|      0|        }
  211|      0|        type = ctx->digest;
  212|      0|    }
  213|  5.89k|#endif
  214|  5.89k|    if (ctx->digest != type) {
  215|  3.06k|        if (ctx->digest && ctx->digest->ctx_size) {
  216|      0|            OPENSSL_free(ctx->md_data);
  217|      0|            ctx->md_data = NULL;
  218|      0|        }
  219|  3.06k|        ctx->digest = type;
  220|  3.06k|        if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size) {
  221|  3.06k|            ctx->update = type->update;
  222|  3.06k|            ctx->md_data = OPENSSL_malloc(type->ctx_size);
  223|  3.06k|            if (ctx->md_data == NULL) {
  224|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, ERR_R_MALLOC_FAILURE);
  225|      0|                return 0;
  226|      0|            }
  227|  3.06k|        }
  228|  3.06k|    }
  229|  5.89k|#ifndef OPENSSL_NO_ENGINE
  230|  5.89k| skip_to_init:
  231|  5.89k|#endif
  232|  5.89k|    if (ctx->pctx) {
  233|      0|        int r;
  234|      0|        r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
  235|      0|                              EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
  236|      0|        if (r <= 0 && (r != -2))
  237|      0|            return 0;
  238|      0|    }
  239|  5.89k|    if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
  240|      0|        return 1;
  241|       |#ifdef OPENSSL_FIPS
  242|       |    if (FIPS_mode()) {
  243|       |        if (FIPS_digestinit(ctx, type))
  244|       |            return 1;
  245|       |        OPENSSL_free(ctx->md_data);
  246|       |        ctx->md_data = NULL;
  247|       |        return 0;
  248|       |    }
  249|       |#endif
  250|  5.89k|    return ctx->digest->init(ctx);
  251|  5.89k|}
EVP_DigestUpdate:
  254|  32.6k|{
  255|       |#ifdef OPENSSL_FIPS
  256|       |    if (FIPS_mode())
  257|       |        return FIPS_digestupdate(ctx, data, count);
  258|       |#endif
  259|  32.6k|    return ctx->update(ctx, data, count);
  260|  32.6k|}
EVP_DigestFinal_ex:
  273|  5.89k|{
  274|  5.89k|    int ret;
  275|       |#ifdef OPENSSL_FIPS
  276|       |    if (FIPS_mode())
  277|       |        return FIPS_digestfinal(ctx, md, size);
  278|       |#endif
  279|       |
  280|  5.89k|    OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
  281|  5.89k|    ret = ctx->digest->final(ctx, md);
  282|  5.89k|    if (size != NULL)
  283|      0|        *size = ctx->digest->md_size;
  284|  5.89k|    if (ctx->digest->cleanup) {
  285|      0|        ctx->digest->cleanup(ctx);
  286|      0|        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  287|      0|    }
  288|  5.89k|    OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  289|  5.89k|    return ret;
  290|  5.89k|}
EVP_MD_CTX_destroy:
  368|    185|{
  369|    185|    if (ctx) {
  370|    185|        EVP_MD_CTX_cleanup(ctx);
  371|    185|        OPENSSL_free(ctx);
  372|    185|    }
  373|    185|}
EVP_MD_CTX_cleanup:
  377|  3.06k|{
  378|  3.06k|#ifndef OPENSSL_FIPS
  379|       |    /*
  380|       |     * Don't assume ctx->md_data was cleaned in EVP_Digest_Final, because
  381|       |     * sometimes only copies of the context are ever finalised.
  382|       |     */
  383|  3.06k|    if (ctx->digest && ctx->digest->cleanup
  384|  3.06k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_CLEANED))
  385|      0|        ctx->digest->cleanup(ctx);
  386|  3.06k|    if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
  387|  3.06k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
  388|  3.06k|        OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  389|  3.06k|        OPENSSL_free(ctx->md_data);
  390|  3.06k|    }
  391|  3.06k|#endif
  392|  3.06k|    if (ctx->pctx)
  393|      0|        EVP_PKEY_CTX_free(ctx->pctx);
  394|  3.06k|#ifndef OPENSSL_NO_ENGINE
  395|  3.06k|    if (ctx->engine)
  396|       |        /*
  397|       |         * The EVP_MD we used belongs to an ENGINE, release the functional
  398|       |         * reference we held for this reason.
  399|       |         */
  400|      0|        ENGINE_finish(ctx->engine);
  401|  3.06k|#endif
  402|       |#ifdef OPENSSL_FIPS
  403|       |    FIPS_md_ctx_cleanup(ctx);
  404|       |#endif
  405|  3.06k|    memset(ctx, '\0', sizeof *ctx);
  406|       |
  407|  3.06k|    return 1;
  408|  3.06k|}

EVP_aes_128_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_gcm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_wrap:
 2001|      1|{
 2002|      1|    return &aes_128_wrap;
 2003|      1|}
EVP_aes_192_wrap:
 2015|      1|{
 2016|      1|    return &aes_192_wrap;
 2017|      1|}
EVP_aes_256_wrap:
 2029|      1|{
 2030|      1|    return &aes_256_wrap;
 2031|      1|}

EVP_aes_128_cbc_hmac_sha1:
  994|      2|{
  995|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
  996|      2|            &aesni_128_cbc_hmac_sha1_cipher : NULL);
  997|      2|}
EVP_aes_256_cbc_hmac_sha1:
 1000|      2|{
 1001|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
 1002|      2|            &aesni_256_cbc_hmac_sha1_cipher : NULL);
 1003|      2|}

EVP_aes_128_cbc_hmac_sha256:
  973|      2|{
  974|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  975|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  976|      0|            &aesni_128_cbc_hmac_sha256_cipher : NULL);
  977|      2|}
EVP_aes_256_cbc_hmac_sha256:
  980|      2|{
  981|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  982|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  983|      0|            &aesni_256_cbc_hmac_sha256_cipher : NULL);
  984|      2|}

EVP_camellia_128_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cbc:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }

EVP_des_ede:
  378|      1|{
  379|      1|    return &des_ede_ecb;
  380|      1|}
EVP_des_ede3:
  383|      1|{
  384|      1|    return &des_ede3_ecb;
  385|      1|}
EVP_des_ede3_wrap:
  492|      1|{
  493|      1|    return &des3_wrap;
  494|      1|}

EVP_rc2_64_cbc:
  123|      1|{
  124|      1|    return (&r2_64_cbc_cipher);
  125|      1|}
EVP_rc2_40_cbc:
  128|      2|{
  129|      2|    return (&r2_40_cbc_cipher);
  130|      2|}

EVP_rc4:
  111|      2|{
  112|      2|    return (&r4_cipher);
  113|      2|}
EVP_rc4_40:
  116|      1|{
  117|      1|    return (&r4_40_cipher);
  118|      1|}

EVP_rc4_hmac_md5:
  309|      2|{
  310|      2|    return (&r4_hmac_md5_cipher);
  311|      2|}

EVP_desx_cbc:
   97|      1|{
   98|      1|    return (&d_xcbc_cipher);
   99|      1|}

EVP_add_alg_module:
  116|      1|{
  117|      1|    CONF_module_add("alg_section", alg_module_init, 0);
  118|      1|}

ERR_load_EVP_strings:
  247|      1|{
  248|      1|#ifndef OPENSSL_NO_ERR
  249|       |
  250|      1|    if (ERR_func_error_string(EVP_str_functs[0].error) == NULL) {
  251|      1|        ERR_load_strings(0, EVP_str_functs);
  252|      1|        ERR_load_strings(0, EVP_str_reasons);
  253|      1|    }
  254|      1|#endif
  255|      1|}

EVP_MD_size:
  311|      5|{
  312|      5|    if (!md) {
  313|      0|        EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
  314|      0|        return -1;
  315|      0|    }
  316|      5|    return md->md_size;
  317|      5|}
EVP_MD_CTX_clear_flags:
  369|  5.89k|{
  370|  5.89k|    ctx->flags &= ~flags;
  371|  5.89k|}
EVP_MD_CTX_test_flags:
  374|  3.06k|{
  375|  3.06k|    return (ctx->flags & flags);
  376|  3.06k|}

EVP_dss:
  101|      1|{
  102|      1|    return (&dsa_md);
  103|      1|}

EVP_dss1:
  102|      2|{
  103|      2|    return (&dss1_md);
  104|      2|}

EVP_ecdsa:
  151|      2|{
  152|      2|    return (&ecdsa_md);
  153|      2|}

EVP_md4:
  105|      1|{
  106|      1|    return (&md4_md);
  107|      1|}

EVP_md5:
  104|      2|{
  105|      2|    return (&md5_md);
  106|      2|}

EVP_mdc2:
  105|      1|{
  106|      1|    return (&mdc2_md);
  107|      1|}

EVP_ripemd160:
  104|      1|{
  105|      1|    return (&ripemd160_md);
  106|      1|}

EVP_sha:
  103|      1|{
  104|      1|    return (&sha_md);
  105|      1|}

EVP_sha1:
  102|  5.71k|{
  103|  5.71k|    return (&sha1_md);
  104|  5.71k|}
EVP_sha224:
  149|      2|{
  150|      2|    return (&sha224_md);
  151|      2|}
EVP_sha256:
  169|    187|{
  170|    187|    return (&sha256_md);
  171|    187|}
EVP_sha384:
  212|      2|{
  213|      2|    return (&sha384_md);
  214|      2|}
EVP_sha512:
  232|      2|{
  233|      2|    return (&sha512_md);
  234|      2|}
m_sha1.c:init:
   72|  5.71k|{
   73|  5.71k|    return SHA1_Init(ctx->md_data);
   74|  5.71k|}
m_sha1.c:update:
   77|  22.8k|{
   78|  22.8k|    return SHA1_Update(ctx->md_data, data, count);
   79|  22.8k|}
m_sha1.c:final:
   82|  5.71k|{
   83|  5.71k|    return SHA1_Final(md, ctx->md_data);
   84|  5.71k|}
m_sha1.c:update256:
  124|  9.78k|{
  125|  9.78k|    return SHA256_Update(ctx->md_data, data, count);
  126|  9.78k|}
m_sha1.c:final256:
  129|    185|{
  130|    185|    return SHA256_Final(md, ctx->md_data);
  131|    185|}
m_sha1.c:init256:
  114|    185|{
  115|    185|    return SHA256_Init(ctx->md_data);
  116|    185|}

EVP_whirlpool:
   45|      1|{
   46|      1|    return (&whirlpool_md);
   47|      1|}

EVP_add_cipher:
   66|    122|{
   67|    122|    int r;
   68|       |
   69|    122|    if (c == NULL)
   70|      4|        return 0;
   71|       |
   72|    118|    OPENSSL_init();
   73|       |
   74|    118|    r = OBJ_NAME_add(OBJ_nid2sn(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   75|    118|                     (const char *)c);
   76|    118|    if (r == 0)
   77|      0|        return (0);
   78|    118|    check_defer(c->nid);
   79|    118|    r = OBJ_NAME_add(OBJ_nid2ln(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   80|    118|                     (const char *)c);
   81|    118|    return (r);
   82|    118|}
EVP_add_digest:
   85|     24|{
   86|     24|    int r;
   87|     24|    const char *name;
   88|     24|    OPENSSL_init();
   89|       |
   90|     24|    name = OBJ_nid2sn(md->type);
   91|     24|    r = OBJ_NAME_add(name, OBJ_NAME_TYPE_MD_METH, (const char *)md);
   92|     24|    if (r == 0)
   93|      0|        return (0);
   94|     24|    check_defer(md->type);
   95|     24|    r = OBJ_NAME_add(OBJ_nid2ln(md->type), OBJ_NAME_TYPE_MD_METH,
   96|     24|                     (const char *)md);
   97|     24|    if (r == 0)
   98|      0|        return (0);
   99|       |
  100|     24|    if (md->pkey_type && md->type != md->pkey_type) {
  101|     18|        r = OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
  102|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  103|     18|        if (r == 0)
  104|      0|            return (0);
  105|     18|        check_defer(md->pkey_type);
  106|     18|        r = OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
  107|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  108|     18|    }
  109|     24|    return (r);
  110|     24|}
EVP_get_cipherbyname:
  113|     13|{
  114|     13|    const EVP_CIPHER *cp;
  115|       |
  116|     13|    cp = (const EVP_CIPHER *)OBJ_NAME_get(name, OBJ_NAME_TYPE_CIPHER_METH);
  117|     13|    return (cp);
  118|     13|}
EVP_get_digestbyname:
  121|      6|{
  122|      6|    const EVP_MD *cp;
  123|       |
  124|      6|    cp = (const EVP_MD *)OBJ_NAME_get(name, OBJ_NAME_TYPE_MD_METH);
  125|      6|    return (cp);
  126|      6|}

EVP_PKEY_meth_new:
  201|      3|{
  202|      3|    EVP_PKEY_METHOD *pmeth;
  203|       |
  204|      3|    pmeth = OPENSSL_malloc(sizeof(EVP_PKEY_METHOD));
  205|      3|    if (!pmeth)
  206|      0|        return NULL;
  207|       |
  208|      3|    memset(pmeth, 0, sizeof(EVP_PKEY_METHOD));
  209|       |
  210|      3|    pmeth->pkey_id = id;
  211|      3|    pmeth->flags = flags | EVP_PKEY_FLAG_DYNAMIC;
  212|      3|    return pmeth;
  213|      3|}
EVP_PKEY_meth_set_init:
  450|      3|{
  451|      3|    pmeth->init = init;
  452|      3|}
EVP_PKEY_meth_set_copy:
  457|      3|{
  458|      3|    pmeth->copy = copy;
  459|      3|}
EVP_PKEY_meth_set_cleanup:
  463|      3|{
  464|      3|    pmeth->cleanup = cleanup;
  465|      3|}
EVP_PKEY_meth_set_paramgen:
  471|      2|{
  472|      2|    pmeth->paramgen_init = paramgen_init;
  473|      2|    pmeth->paramgen = paramgen;
  474|      2|}
EVP_PKEY_meth_set_keygen:
  480|      3|{
  481|      3|    pmeth->keygen_init = keygen_init;
  482|      3|    pmeth->keygen = keygen;
  483|      3|}
EVP_PKEY_meth_set_sign:
  491|      2|{
  492|      2|    pmeth->sign_init = sign_init;
  493|      2|    pmeth->sign = sign;
  494|      2|}
EVP_PKEY_meth_set_verify:
  503|      2|{
  504|      2|    pmeth->verify_init = verify_init;
  505|      2|    pmeth->verify = verify;
  506|      2|}
EVP_PKEY_meth_set_signctx:
  531|      1|{
  532|      1|    pmeth->signctx_init = signctx_init;
  533|      1|    pmeth->signctx = signctx;
  534|      1|}
EVP_PKEY_meth_set_encrypt:
  555|      2|{
  556|      2|    pmeth->encrypt_init = encrypt_init;
  557|      2|    pmeth->encrypt = encryptfn;
  558|      2|}
EVP_PKEY_meth_set_decrypt:
  567|      2|{
  568|      2|    pmeth->decrypt_init = decrypt_init;
  569|      2|    pmeth->decrypt = decrypt;
  570|      2|}
EVP_PKEY_meth_set_derive:
  577|      2|{
  578|      2|    pmeth->derive_init = derive_init;
  579|      2|    pmeth->derive = derive;
  580|      2|}
EVP_PKEY_meth_set_ctrl:
  588|      3|{
  589|      3|    pmeth->ctrl = ctrl;
  590|      3|    pmeth->ctrl_str = ctrl_str;
  591|      3|}

CRYPTO_get_ex_new_index:
  581|      4|{
  582|      4|    int ret = -1;
  583|       |
  584|      4|    IMPL_CHECK
  585|      4|        ret = EX_IMPL(get_new_index) (class_index,
  586|      4|                                      argl, argp, new_func, dup_func,
  587|      4|                                      free_func);
  588|      4|    return ret;
  589|      4|}
CRYPTO_new_ex_data:
  596|     11|{
  597|     11|    IMPL_CHECK return EX_IMPL(new_ex_data) (class_index, obj, ad);
  598|     11|}
ex_data.c:impl_check:
  200|      1|{
  201|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  202|      1|    if (!impl)
  203|      1|        impl = &impl_default;
  204|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  205|      1|}
ex_data.c:ex_data_check:
  276|      1|{
  277|      1|    int toret = 1;
  278|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  279|      1|    if (!ex_data && (ex_data = lh_EX_CLASS_ITEM_new()) == NULL)
  280|      0|        toret = 0;
  281|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  282|      1|    return toret;
  283|      1|}
ex_data.c:ex_class_item_hash:
  258|     19|{
  259|     19|    return a->class_index;
  260|     19|}
ex_data.c:ex_class_item_cmp:
  265|     15|{
  266|     15|    return a->class_index - b->class_index;
  267|     15|}
ex_data.c:int_get_new_index:
  407|      4|{
  408|      4|    EX_CLASS_ITEM *item = def_get_class(class_index);
  409|      4|    if (!item)
  410|      0|        return -1;
  411|      4|    return def_add_index(item, argl, argp, new_func, dup_func, free_func);
  412|      4|}
ex_data.c:def_get_class:
  314|     15|{
  315|     15|    EX_CLASS_ITEM d, *p, *gen;
  316|     15|    EX_DATA_CHECK(return NULL;)
  317|     15|        d.class_index = class_index;
  318|     15|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  319|     15|    p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  320|     15|    if (!p) {
  321|      2|        gen = OPENSSL_malloc(sizeof(EX_CLASS_ITEM));
  322|      2|        if (gen) {
  323|      2|            gen->class_index = class_index;
  324|      2|            gen->meth_num = 0;
  325|      2|            gen->meth = sk_CRYPTO_EX_DATA_FUNCS_new_null();
  326|      2|            if (!gen->meth)
  327|      0|                OPENSSL_free(gen);
  328|      2|            else {
  329|       |                /*
  330|       |                 * Because we're inside the ex_data lock, the return value
  331|       |                 * from the insert will be NULL
  332|       |                 */
  333|      2|                (void)lh_EX_CLASS_ITEM_insert(ex_data, gen);
  334|      2|                p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  335|      2|                if (p != gen) {
  336|      0|                    sk_CRYPTO_EX_DATA_FUNCS_free(gen->meth);
  337|      0|                    OPENSSL_free(gen);
  338|      0|                }
  339|      2|            }
  340|      2|        }
  341|      2|    }
  342|     15|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  343|     15|    if (!p)
  344|     15|        CRYPTOerr(CRYPTO_F_DEF_GET_CLASS, ERR_R_MALLOC_FAILURE);
  345|     15|    return p;
  346|     15|}
ex_data.c:def_add_index:
  355|      4|{
  356|      4|    int toret = -1;
  357|      4|    CRYPTO_EX_DATA_FUNCS *a =
  358|      4|        (CRYPTO_EX_DATA_FUNCS *)OPENSSL_malloc(sizeof(CRYPTO_EX_DATA_FUNCS));
  359|      4|    if (!a) {
  360|      0|        CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  361|      0|        return -1;
  362|      0|    }
  363|      4|    a->argl = argl;
  364|      4|    a->argp = argp;
  365|      4|    a->new_func = new_func;
  366|      4|    a->dup_func = dup_func;
  367|      4|    a->free_func = free_func;
  368|      4|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  369|      8|    while (sk_CRYPTO_EX_DATA_FUNCS_num(item->meth) <= item->meth_num) {
  370|      4|        if (!sk_CRYPTO_EX_DATA_FUNCS_push(item->meth, NULL)) {
  371|      0|            CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  372|      0|            OPENSSL_free(a);
  373|      0|            goto err;
  374|      0|        }
  375|      4|    }
  376|      4|    toret = item->meth_num++;
  377|      4|    (void)sk_CRYPTO_EX_DATA_FUNCS_set(item->meth, toret, a);
  378|      4| err:
  379|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  380|      4|    return toret;
  381|      4|}
ex_data.c:int_new_ex_data:
  421|     11|{
  422|     11|    int mx, i;
  423|     11|    void *ptr;
  424|     11|    CRYPTO_EX_DATA_FUNCS **storage = NULL;
  425|     11|    EX_CLASS_ITEM *item = def_get_class(class_index);
  426|     11|    if (!item)
  427|       |        /* error is already set */
  428|      0|        return 0;
  429|     11|    ad->sk = NULL;
  430|     11|    CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  431|     11|    mx = sk_CRYPTO_EX_DATA_FUNCS_num(item->meth);
  432|     11|    if (mx > 0) {
  433|      0|        storage = OPENSSL_malloc(mx * sizeof(CRYPTO_EX_DATA_FUNCS *));
  434|      0|        if (!storage)
  435|      0|            goto skip;
  436|      0|        for (i = 0; i < mx; i++)
  437|      0|            storage[i] = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  438|      0|    }
  439|     11| skip:
  440|     11|    CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  441|     11|    if ((mx > 0) && !storage) {
  442|      0|        CRYPTOerr(CRYPTO_F_INT_NEW_EX_DATA, ERR_R_MALLOC_FAILURE);
  443|      0|        return 0;
  444|      0|    }
  445|     11|    for (i = 0; i < mx; i++) {
  446|      0|        if (storage[i] && storage[i]->new_func) {
  447|      0|            ptr = CRYPTO_get_ex_data(ad, i);
  448|      0|            storage[i]->new_func(obj, ptr, ad, i,
  449|      0|                                 storage[i]->argl, storage[i]->argp);
  450|      0|        }
  451|      0|    }
  452|     11|    if (storage)
  453|      0|        OPENSSL_free(storage);
  454|     11|    return 1;
  455|     11|}

lh_new:
  134|  2.28k|{
  135|  2.28k|    _LHASH *ret;
  136|  2.28k|    int i;
  137|       |
  138|  2.28k|    if ((ret = OPENSSL_malloc(sizeof(_LHASH))) == NULL)
  139|      0|        goto err0;
  140|  2.28k|    if ((ret->b = OPENSSL_malloc(sizeof(LHASH_NODE *) * MIN_NODES)) == NULL)
  141|      0|        goto err1;
  142|  38.7k|    for (i = 0; i < MIN_NODES; i++)
  143|  36.4k|        ret->b[i] = NULL;
  144|  2.28k|    ret->comp = ((c == NULL) ? (LHASH_COMP_FN_TYPE)strcmp : c);
  145|  2.28k|    ret->hash = ((h == NULL) ? (LHASH_HASH_FN_TYPE)lh_strhash : h);
  146|  2.28k|    ret->num_nodes = MIN_NODES / 2;
  147|  2.28k|    ret->num_alloc_nodes = MIN_NODES;
  148|  2.28k|    ret->p = 0;
  149|  2.28k|    ret->pmax = MIN_NODES / 2;
  150|  2.28k|    ret->up_load = UP_LOAD;
  151|  2.28k|    ret->down_load = DOWN_LOAD;
  152|  2.28k|    ret->num_items = 0;
  153|       |
  154|  2.28k|    ret->num_expands = 0;
  155|  2.28k|    ret->num_expand_reallocs = 0;
  156|  2.28k|    ret->num_contracts = 0;
  157|  2.28k|    ret->num_contract_reallocs = 0;
  158|  2.28k|    ret->num_hash_calls = 0;
  159|  2.28k|    ret->num_comp_calls = 0;
  160|  2.28k|    ret->num_insert = 0;
  161|  2.28k|    ret->num_replace = 0;
  162|  2.28k|    ret->num_delete = 0;
  163|  2.28k|    ret->num_no_delete = 0;
  164|  2.28k|    ret->num_retrieve = 0;
  165|  2.28k|    ret->num_retrieve_miss = 0;
  166|  2.28k|    ret->num_hash_comps = 0;
  167|       |
  168|  2.28k|    ret->error = 0;
  169|  2.28k|    return (ret);
  170|      0| err1:
  171|      0|    OPENSSL_free(ret);
  172|      0| err0:
  173|      0|    return (NULL);
  174|      0|}
lh_free:
  177|  2.26k|{
  178|  2.26k|    unsigned int i;
  179|  2.26k|    LHASH_NODE *n, *nn;
  180|       |
  181|  2.26k|    if (lh == NULL)
  182|      0|        return;
  183|       |
  184|  20.4k|    for (i = 0; i < lh->num_nodes; i++) {
  185|  18.1k|        n = lh->b[i];
  186|  18.1k|        while (n != NULL) {
  187|      0|            nn = n->next;
  188|      0|            OPENSSL_free(n);
  189|      0|            n = nn;
  190|      0|        }
  191|  18.1k|    }
  192|  2.26k|    OPENSSL_free(lh->b);
  193|  2.26k|    OPENSSL_free(lh);
  194|  2.26k|}
lh_insert:
  197|  21.7k|{
  198|  21.7k|    unsigned long hash;
  199|  21.7k|    LHASH_NODE *nn, **rn;
  200|  21.7k|    void *ret;
  201|       |
  202|  21.7k|    lh->error = 0;
  203|  21.7k|    if (lh->up_load <= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)
  204|  21.7k|            && !expand(lh))
  205|      0|        return NULL;
  206|       |
  207|  21.7k|    rn = getrn(lh, data, &hash);
  208|       |
  209|  21.7k|    if (*rn == NULL) {
  210|  5.48k|        if ((nn = (LHASH_NODE *)OPENSSL_malloc(sizeof(LHASH_NODE))) == NULL) {
  211|      0|            lh->error++;
  212|      0|            return (NULL);
  213|      0|        }
  214|  5.48k|        nn->data = data;
  215|  5.48k|        nn->next = NULL;
  216|  5.48k|#ifndef OPENSSL_NO_HASH_COMP
  217|  5.48k|        nn->hash = hash;
  218|  5.48k|#endif
  219|  5.48k|        *rn = nn;
  220|  5.48k|        ret = NULL;
  221|  5.48k|        lh->num_insert++;
  222|  5.48k|        lh->num_items++;
  223|  16.2k|    } else {                    /* replace same key */
  224|       |
  225|  16.2k|        ret = (*rn)->data;
  226|  16.2k|        (*rn)->data = data;
  227|  16.2k|        lh->num_replace++;
  228|  16.2k|    }
  229|  21.7k|    return (ret);
  230|  21.7k|}
lh_delete:
  233|  2.26k|{
  234|  2.26k|    unsigned long hash;
  235|  2.26k|    LHASH_NODE *nn, **rn;
  236|  2.26k|    void *ret;
  237|       |
  238|  2.26k|    lh->error = 0;
  239|  2.26k|    rn = getrn(lh, data, &hash);
  240|       |
  241|  2.26k|    if (*rn == NULL) {
  242|      0|        lh->num_no_delete++;
  243|      0|        return (NULL);
  244|  2.26k|    } else {
  245|  2.26k|        nn = *rn;
  246|  2.26k|        *rn = nn->next;
  247|  2.26k|        ret = nn->data;
  248|  2.26k|        OPENSSL_free(nn);
  249|  2.26k|        lh->num_delete++;
  250|  2.26k|    }
  251|       |
  252|  2.26k|    lh->num_items--;
  253|  2.26k|    if ((lh->num_nodes > MIN_NODES) &&
  254|  2.26k|        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))
  255|      0|        contract(lh);
  256|       |
  257|  2.26k|    return (ret);
  258|  2.26k|}
lh_retrieve:
  261|  17.8k|{
  262|  17.8k|    unsigned long hash;
  263|  17.8k|    LHASH_NODE **rn;
  264|  17.8k|    void *ret;
  265|       |
  266|  17.8k|    lh->error = 0;
  267|  17.8k|    rn = getrn(lh, data, &hash);
  268|       |
  269|  17.8k|    if (*rn == NULL) {
  270|  5.93k|        lh->num_retrieve_miss++;
  271|  5.93k|        return (NULL);
  272|  11.8k|    } else {
  273|  11.8k|        ret = (*rn)->data;
  274|  11.8k|        lh->num_retrieve++;
  275|  11.8k|    }
  276|  11.8k|    return (ret);
  277|  17.8k|}
lh_strhash:
  447|    388|{
  448|    388|    unsigned long ret = 0;
  449|    388|    long n;
  450|    388|    unsigned long v;
  451|    388|    int r;
  452|       |
  453|    388|    if ((c == NULL) || (*c == '\0'))
  454|      0|        return (ret);
  455|       |/*-
  456|       |    unsigned char b[16];
  457|       |    MD5(c,strlen(c),b);
  458|       |    return(b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<24));
  459|       |*/
  460|       |
  461|    388|    n = 0x100;
  462|  4.39k|    while (*c) {
  463|  4.00k|        v = n | (*c);
  464|  4.00k|        n += 0x100;
  465|  4.00k|        r = (int)((v >> 2) ^ v) & 0x0f;
  466|  4.00k|        ret = (ret << r) | (ret >> (32 - r));
  467|  4.00k|        ret &= 0xFFFFFFFFL;
  468|  4.00k|        ret ^= v * v;
  469|  4.00k|        c++;
  470|  4.00k|    }
  471|    388|    return ((ret >> 16) ^ ret);
  472|    388|}
lh_num_items:
  475|  2.26k|{
  476|  2.26k|    return lh ? lh->num_items : 0;
  477|  2.26k|}
lhash.c:expand:
  323|  1.58k|{
  324|  1.58k|    LHASH_NODE **n, **n1, **n2, *np;
  325|  1.58k|    unsigned int p, pmax, nni, j;
  326|  1.58k|    unsigned long hash;
  327|       |
  328|  1.58k|    nni = lh->num_alloc_nodes;
  329|  1.58k|    p = lh->p;
  330|  1.58k|    pmax = lh->pmax;
  331|  1.58k|    if (p + 1 >= pmax) {
  332|     11|        j = nni * 2;
  333|     11|        n = OPENSSL_realloc(lh->b, (int)(sizeof(LHASH_NODE *) * j));
  334|     11|        if (n == NULL) {
  335|      0|            lh->error++;
  336|      0|            return 0;
  337|      0|        }
  338|     11|        lh->b = n;
  339|     11|        memset(n + nni, 0, sizeof(*n) * (j - nni));
  340|     11|        lh->pmax = nni;
  341|     11|        lh->num_alloc_nodes = j;
  342|     11|        lh->num_expand_reallocs++;
  343|     11|        lh->p = 0;
  344|  1.57k|    } else {
  345|  1.57k|        lh->p++;
  346|  1.57k|    }
  347|       |
  348|  1.58k|    lh->num_nodes++;
  349|  1.58k|    lh->num_expands++;
  350|  1.58k|    n1 = &(lh->b[p]);
  351|  1.58k|    n2 = &(lh->b[p + pmax]);
  352|  1.58k|    *n2 = NULL;
  353|       |
  354|  7.20k|    for (np = *n1; np != NULL;) {
  355|  5.61k|#ifndef OPENSSL_NO_HASH_COMP
  356|  5.61k|        hash = np->hash;
  357|       |#else
  358|       |        hash = lh->hash(np->data);
  359|       |        lh->num_hash_calls++;
  360|       |#endif
  361|  5.61k|        if ((hash % nni) != p) { /* move it */
  362|    558|            *n1 = (*n1)->next;
  363|    558|            np->next = *n2;
  364|    558|            *n2 = np;
  365|    558|        } else
  366|  5.05k|            n1 = &((*n1)->next);
  367|  5.61k|        np = *n1;
  368|  5.61k|    }
  369|       |
  370|  1.58k|    return 1;
  371|  1.58k|}
lhash.c:getrn:
  410|  41.8k|{
  411|  41.8k|    LHASH_NODE **ret, *n1;
  412|  41.8k|    unsigned long hash, nn;
  413|  41.8k|    LHASH_COMP_FN_TYPE cf;
  414|       |
  415|  41.8k|    hash = (*(lh->hash)) (data);
  416|  41.8k|    lh->num_hash_calls++;
  417|  41.8k|    *rhash = hash;
  418|       |
  419|  41.8k|    nn = hash % lh->pmax;
  420|  41.8k|    if (nn < lh->p)
  421|  11.6k|        nn = hash % lh->num_alloc_nodes;
  422|       |
  423|  41.8k|    cf = lh->comp;
  424|  41.8k|    ret = &(lh->b[(int)nn]);
  425|  67.0k|    for (n1 = *ret; n1 != NULL; n1 = n1->next) {
  426|  55.5k|#ifndef OPENSSL_NO_HASH_COMP
  427|  55.5k|        lh->num_hash_comps++;
  428|  55.5k|        if (n1->hash != hash) {
  429|  24.1k|            ret = &(n1->next);
  430|  24.1k|            continue;
  431|  24.1k|        }
  432|  31.4k|#endif
  433|  31.4k|        lh->num_comp_calls++;
  434|  31.4k|        if (cf(n1->data, data) == 0)
  435|  30.3k|            break;
  436|  1.06k|        ret = &(n1->next);
  437|  1.06k|    }
  438|  41.8k|    return (ret);
  439|  41.8k|}

MD5_Update:
  303|    168|{
  304|    168|    const unsigned char *data = data_;
  305|    168|    unsigned char *p;
  306|    168|    HASH_LONG l;
  307|    168|    size_t n;
  308|       |
  309|    168|    if (len == 0)
  310|      0|        return 1;
  311|       |
  312|    168|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|    168|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|    168|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|    168|    c->Nl = l;
  322|       |
  323|    168|    n = c->num;
  324|    168|    if (n != 0) {
  325|      0|        p = (unsigned char *)c->data;
  326|       |
  327|      0|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|      0|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|      0|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|      0|            n = HASH_CBLOCK - n;
  331|      0|            data += n;
  332|      0|            len -= n;
  333|      0|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|      0|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|      0|        } else {
  342|      0|            memcpy(p + n, data, len);
  343|      0|            c->num += (unsigned int)len;
  344|      0|            return 1;
  345|      0|        }
  346|      0|    }
  347|       |
  348|    168|    n = len / HASH_CBLOCK;
  349|    168|    if (n > 0) {
  350|     68|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|     68|        n *= HASH_CBLOCK;
  352|     68|        data += n;
  353|     68|        len -= n;
  354|     68|    }
  355|       |
  356|    168|    if (len != 0) {
  357|    166|        p = (unsigned char *)c->data;
  358|    166|        c->num = (unsigned int)len;
  359|    166|        memcpy(p, data, len);
  360|    166|    }
  361|    168|    return 1;
  362|    168|}
MD5_Final:
  370|    168|{
  371|    168|    unsigned char *p = (unsigned char *)c->data;
  372|    168|    size_t n = c->num;
  373|       |
  374|    168|    p[n] = 0x80;                /* there is always room for one */
  375|    168|    n++;
  376|       |
  377|    168|    if (n > (HASH_CBLOCK - 8)) {
  378|     14|        memset(p + n, 0, HASH_CBLOCK - n);
  379|     14|        n = 0;
  380|     14|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|     14|    }
  382|    168|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|    168|    p += HASH_CBLOCK - 8;
  385|       |#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|       |    (void)HOST_l2c(c->Nh, p);
  387|       |    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|    168|    (void)HOST_l2c(c->Nl, p);
  390|    168|    (void)HOST_l2c(c->Nh, p);
  391|    168|#endif
  392|    168|    p -= HASH_CBLOCK;
  393|    168|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|    168|    c->num = 0;
  395|    168|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|    168|    HASH_MAKE_STRING(c, md);
  401|    168|#endif
  402|       |
  403|    168|    return 1;
  404|    168|}

MD5_Init:
   76|    168|{
   77|    168|    memset(c, 0, sizeof(*c));
   78|    168|    c->A = INIT_DATA_A;
   79|    168|    c->B = INIT_DATA_B;
   80|    168|    c->C = INIT_DATA_C;
   81|    168|    c->D = INIT_DATA_D;
   82|    168|    return 1;
   83|    168|}

CRYPTO_malloc:
  333|  16.0k|{
  334|  16.0k|    void *ret = NULL;
  335|       |
  336|  16.0k|    if (num <= 0)
  337|      0|        return NULL;
  338|       |
  339|  16.0k|    if (allow_customize)
  340|      1|        allow_customize = 0;
  341|  16.0k|    if (malloc_debug_func != NULL) {
  342|      0|        if (allow_customize_debug)
  343|      0|            allow_customize_debug = 0;
  344|      0|        malloc_debug_func(NULL, num, file, line, 0);
  345|      0|    }
  346|  16.0k|    ret = malloc_ex_func(num, file, line);
  347|       |#ifdef LEVITTE_DEBUG_MEM
  348|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         > 0x%p (%d)\n", ret, num);
  349|       |#endif
  350|  16.0k|    if (malloc_debug_func != NULL)
  351|      0|        malloc_debug_func(ret, num, file, line, 1);
  352|       |
  353|  16.0k|    return ret;
  354|  16.0k|}
CRYPTO_realloc:
  368|     23|{
  369|     23|    void *ret = NULL;
  370|       |
  371|     23|    if (str == NULL)
  372|      0|        return CRYPTO_malloc(num, file, line);
  373|       |
  374|     23|    if (num <= 0)
  375|      0|        return NULL;
  376|       |
  377|     23|    if (realloc_debug_func != NULL)
  378|      0|        realloc_debug_func(str, NULL, num, file, line, 0);
  379|     23|    ret = realloc_ex_func(str, num, file, line);
  380|       |#ifdef LEVITTE_DEBUG_MEM
  381|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         | 0x%p -> 0x%p (%d)\n", str,
  382|       |            ret, num);
  383|       |#endif
  384|     23|    if (realloc_debug_func != NULL)
  385|      0|        realloc_debug_func(str, ret, num, file, line, 1);
  386|       |
  387|     23|    return ret;
  388|     23|}
CRYPTO_free:
  428|  12.4k|{
  429|  12.4k|    if (free_debug_func != NULL)
  430|      0|        free_debug_func(str, 0);
  431|       |#ifdef LEVITTE_DEBUG_MEM
  432|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         < 0x%p\n", str);
  433|       |#endif
  434|  12.4k|    free_func(str);
  435|  12.4k|    if (free_debug_func != NULL)
  436|      0|        free_debug_func(NULL, 1);
  437|  12.4k|}
mem.c:default_malloc_ex:
   78|  16.0k|{
   79|  16.0k|    return malloc_func(num);
   80|  16.0k|}
mem.c:default_realloc_ex:
   96|     23|{
   97|     23|    return realloc_func(str, num);
   98|     23|}

CRYPTO_mem_ctrl:
  209|      4|{
  210|      4|    int ret = mh_mode;
  211|       |
  212|      4|    CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  213|      4|    switch (mode) {
  214|       |        /*
  215|       |         * for applications (not to be called while multiple threads use the
  216|       |         * library):
  217|       |         */
  218|      0|    case CRYPTO_MEM_CHECK_ON:  /* aka MemCheck_start() */
  219|      0|        mh_mode = CRYPTO_MEM_CHECK_ON | CRYPTO_MEM_CHECK_ENABLE;
  220|      0|        num_disable = 0;
  221|      0|        break;
  222|      0|    case CRYPTO_MEM_CHECK_OFF: /* aka MemCheck_stop() */
  223|      0|        mh_mode = 0;
  224|      0|        num_disable = 0;        /* should be true *before* MemCheck_stop is
  225|       |                                 * used, or there'll be a lot of confusion */
  226|      0|        break;
  227|       |
  228|       |        /* switch off temporarily (for library-internal use): */
  229|      2|    case CRYPTO_MEM_CHECK_DISABLE: /* aka MemCheck_off() */
  230|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  231|      0|            CRYPTO_THREADID cur;
  232|      0|            CRYPTO_THREADID_current(&cur);
  233|       |            /* see if we don't have the MALLOC2 lock already */
  234|      0|            if (!num_disable
  235|      0|                || CRYPTO_THREADID_cmp(&disabling_threadid, &cur)) {
  236|       |                /*
  237|       |                 * Long-time lock CRYPTO_LOCK_MALLOC2 must not be claimed
  238|       |                 * while we're holding CRYPTO_LOCK_MALLOC, or we'll deadlock
  239|       |                 * if somebody else holds CRYPTO_LOCK_MALLOC2 (and cannot
  240|       |                 * release it because we block entry to this function). Give
  241|       |                 * them a chance, first, and then claim the locks in
  242|       |                 * appropriate order (long-time lock first).
  243|       |                 */
  244|      0|                CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  245|       |                /*
  246|       |                 * Note that after we have waited for CRYPTO_LOCK_MALLOC2 and
  247|       |                 * CRYPTO_LOCK_MALLOC, we'll still be in the right "case" and
  248|       |                 * "if" branch because MemCheck_start and MemCheck_stop may
  249|       |                 * never be used while there are multiple OpenSSL threads.
  250|       |                 */
  251|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC2);
  252|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  253|      0|                mh_mode &= ~CRYPTO_MEM_CHECK_ENABLE;
  254|      0|                CRYPTO_THREADID_cpy(&disabling_threadid, &cur);
  255|      0|            }
  256|      0|            num_disable++;
  257|      0|        }
  258|      2|        break;
  259|      2|    case CRYPTO_MEM_CHECK_ENABLE: /* aka MemCheck_on() */
  260|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  261|      0|            if (num_disable) {  /* always true, or something is going wrong */
  262|      0|                num_disable--;
  263|      0|                if (num_disable == 0) {
  264|      0|                    mh_mode |= CRYPTO_MEM_CHECK_ENABLE;
  265|      0|                    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC2);
  266|      0|                }
  267|      0|            }
  268|      0|        }
  269|      2|        break;
  270|       |
  271|      0|    default:
  272|      0|        break;
  273|      4|    }
  274|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  275|      4|    return (ret);
  276|      4|}
CRYPTO_is_mem_check_on:
  279|  4.54k|{
  280|  4.54k|    int ret = 0;
  281|       |
  282|  4.54k|    if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  283|      0|        CRYPTO_THREADID cur;
  284|      0|        CRYPTO_THREADID_current(&cur);
  285|      0|        CRYPTO_r_lock(CRYPTO_LOCK_MALLOC);
  286|       |
  287|      0|        ret = (mh_mode & CRYPTO_MEM_CHECK_ENABLE)
  288|      0|            || CRYPTO_THREADID_cmp(&disabling_threadid, &cur);
  289|       |
  290|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_MALLOC);
  291|      0|    }
  292|  4.54k|    return (ret);
  293|  4.54k|}
CRYPTO_push_info_:
  390|  2.27k|{
  391|  2.27k|    APP_INFO *ami, *amim;
  392|  2.27k|    int ret = 0;
  393|       |
  394|  2.27k|    if (is_MemCheck_on()) {
  395|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  396|       |
  397|      0|        if ((ami = (APP_INFO *)OPENSSL_malloc(sizeof(APP_INFO))) == NULL) {
  398|      0|            ret = 0;
  399|      0|            goto err;
  400|      0|        }
  401|      0|        if (amih == NULL) {
  402|      0|            if ((amih = lh_APP_INFO_new()) == NULL) {
  403|      0|                OPENSSL_free(ami);
  404|      0|                ret = 0;
  405|      0|                goto err;
  406|      0|            }
  407|      0|        }
  408|       |
  409|      0|        CRYPTO_THREADID_current(&ami->threadid);
  410|      0|        ami->file = file;
  411|      0|        ami->line = line;
  412|      0|        ami->info = info;
  413|      0|        ami->references = 1;
  414|      0|        ami->next = NULL;
  415|       |
  416|      0|        if ((amim = lh_APP_INFO_insert(amih, ami)) != NULL) {
  417|       |#ifdef LEVITTE_DEBUG_MEM
  418|       |            if (CRYPTO_THREADID_cmp(&ami->threadid, &amim->threadid)) {
  419|       |                fprintf(stderr,
  420|       |                        "CRYPTO_push_info(): previous info has other thread ID (%lu) than the current thread (%lu)!!!!\n",
  421|       |                        CRYPTO_THREADID_hash(&amim->threadid),
  422|       |                        CRYPTO_THREADID_hash(&ami->threadid));
  423|       |                abort();
  424|       |            }
  425|       |#endif
  426|      0|            ami->next = amim;
  427|      0|        }
  428|      0| err:
  429|      0|        MemCheck_on();          /* release MALLOC2 lock */
  430|      0|    }
  431|       |
  432|  2.27k|    return (ret);
  433|  2.27k|}
CRYPTO_pop_info:
  436|  2.27k|{
  437|  2.27k|    int ret = 0;
  438|       |
  439|  2.27k|    if (is_MemCheck_on()) {     /* _must_ be true, or something went severely
  440|       |                                 * wrong */
  441|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  442|       |
  443|      0|        ret = (pop_info() != NULL);
  444|       |
  445|      0|        MemCheck_on();          /* release MALLOC2 lock */
  446|      0|    }
  447|  2.27k|    return (ret);
  448|  2.27k|}

OPENSSL_init:
   69|    142|{
   70|    142|    static int done = 0;
   71|    142|    if (done)
   72|    141|        return;
   73|      1|    done = 1;
   74|       |#ifdef OPENSSL_FIPS
   75|       |    FIPS_set_locking_callbacks(CRYPTO_lock, CRYPTO_add_lock);
   76|       |# ifndef OPENSSL_NO_DEPRECATED
   77|       |    FIPS_crypto_set_id_callback(CRYPTO_thread_id);
   78|       |# endif
   79|       |    FIPS_set_error_callbacks(ERR_put_error, ERR_add_error_vdata);
   80|       |    FIPS_set_malloc_callbacks(CRYPTO_malloc, CRYPTO_free);
   81|       |    RAND_init_fips();
   82|       |#endif
   83|       |#if 0
   84|       |    fprintf(stderr, "Called OPENSSL_init\n");
   85|       |#endif
   86|      1|}

o_names.c:obj_name_LHASH_HASH:
  105|    388|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|    388|                const o_type *a = arg; \
  107|    388|                return name##_hash(a); }
o_names.c:obj_name_LHASH_COMP:
  114|     97|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     97|                const o_type *a = arg1;             \
  116|     97|                const o_type *b = arg2; \
  117|     97|                return name##_cmp(a,b); }

OBJ_NAME_init:
   57|      1|{
   58|      1|    if (names_lh != NULL)
   59|      0|        return (1);
   60|      1|    MemCheck_off();
   61|      1|    names_lh = lh_OBJ_NAME_new();
   62|      1|    MemCheck_on();
   63|      1|    return (names_lh != NULL);
   64|      1|}
OBJ_NAME_get:
  151|     19|{
  152|     19|    OBJ_NAME on, *ret;
  153|     19|    int num = 0, alias;
  154|       |
  155|     19|    if (name == NULL)
  156|      0|        return (NULL);
  157|     19|    if ((names_lh == NULL) && !OBJ_NAME_init())
  158|      0|        return (NULL);
  159|       |
  160|     19|    alias = type & OBJ_NAME_ALIAS;
  161|     19|    type &= ~OBJ_NAME_ALIAS;
  162|       |
  163|     19|    on.name = name;
  164|     19|    on.type = type;
  165|       |
  166|     19|    for (;;) {
  167|     19|        ret = lh_OBJ_NAME_retrieve(names_lh, &on);
  168|     19|        if (ret == NULL)
  169|      0|            return (NULL);
  170|     19|        if ((ret->alias) && !alias) {
  171|      0|            if (++num > 10)
  172|      0|                return (NULL);
  173|      0|            on.name = ret->data;
  174|     19|        } else {
  175|     19|            return (ret->data);
  176|     19|        }
  177|     19|    }
  178|     19|}
OBJ_NAME_add:
  181|    369|{
  182|    369|    OBJ_NAME *onp, *ret;
  183|    369|    int alias;
  184|       |
  185|    369|    if ((names_lh == NULL) && !OBJ_NAME_init())
  186|      0|        return (0);
  187|       |
  188|    369|    alias = type & OBJ_NAME_ALIAS;
  189|    369|    type &= ~OBJ_NAME_ALIAS;
  190|       |
  191|    369|    onp = (OBJ_NAME *)OPENSSL_malloc(sizeof(OBJ_NAME));
  192|    369|    if (onp == NULL) {
  193|       |        /* ERROR */
  194|      0|        return 0;
  195|      0|    }
  196|       |
  197|    369|    onp->name = name;
  198|    369|    onp->alias = alias;
  199|    369|    onp->type = type;
  200|    369|    onp->data = data;
  201|       |
  202|    369|    ret = lh_OBJ_NAME_insert(names_lh, onp);
  203|    369|    if (ret != NULL) {
  204|       |        /* free things */
  205|     78|        if ((name_funcs_stack != NULL)
  206|     78|            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {
  207|       |            /*
  208|       |             * XXX: I'm not sure I understand why the free function should
  209|       |             * get three arguments... -- Richard Levitte
  210|       |             */
  211|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  212|      0|                                ret->type)->free_func(ret->name, ret->type,
  213|      0|                                                      ret->data);
  214|      0|        }
  215|     78|        OPENSSL_free(ret);
  216|    291|    } else {
  217|    291|        if (lh_OBJ_NAME_error(names_lh)) {
  218|       |            /* ERROR */
  219|      0|            OPENSSL_free(onp);
  220|      0|            return 0;
  221|      0|        }
  222|    291|    }
  223|    369|    return 1;
  224|    369|}
o_names.c:obj_name_hash:
  134|    388|{
  135|    388|    unsigned long ret;
  136|    388|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  137|       |
  138|    388|    if ((name_funcs_stack != NULL)
  139|    388|        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  140|      0|        ret =
  141|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  142|      0|                                a->type)->hash_func(a->name);
  143|    388|    } else {
  144|    388|        ret = lh_strhash(a->name);
  145|    388|    }
  146|    388|    ret ^= a->type;
  147|    388|    return (ret);
  148|    388|}
o_names.c:obj_name_cmp:
  115|     97|{
  116|     97|    int ret;
  117|     97|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  118|     97|    const OBJ_NAME *b = (const OBJ_NAME *)b_void;
  119|       |
  120|     97|    ret = a->type - b->type;
  121|     97|    if (ret == 0) {
  122|     97|        if ((name_funcs_stack != NULL)
  123|     97|            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  124|      0|            ret = sk_NAME_FUNCS_value(name_funcs_stack,
  125|      0|                                      a->type)->cmp_func(a->name, b->name);
  126|      0|        } else
  127|     97|            ret = strcmp(a->name, b->name);
  128|     97|    }
  129|     97|    return (ret);
  130|     97|}

check_defer:
  229|    160|{
  230|    160|    if (!obj_cleanup_defer && nid >= NUM_NID)
  231|      0|        obj_cleanup_defer = 1;
  232|    160|}
OBJ_nid2sn:
  341|    160|{
  342|    160|    ADDED_OBJ ad, *adp;
  343|    160|    ASN1_OBJECT ob;
  344|       |
  345|    160|    if ((n >= 0) && (n < NUM_NID)) {
  346|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  347|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  348|      0|            return (NULL);
  349|      0|        }
  350|    160|        return (nid_objs[n].sn);
  351|    160|    } else if (added == NULL)
  352|      0|        return (NULL);
  353|      0|    else {
  354|      0|        ad.type = ADDED_NID;
  355|      0|        ad.obj = &ob;
  356|      0|        ob.nid = n;
  357|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  358|      0|        if (adp != NULL)
  359|      0|            return (adp->obj->sn);
  360|      0|        else {
  361|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  362|      0|            return (NULL);
  363|      0|        }
  364|      0|    }
  365|    160|}
OBJ_nid2ln:
  368|    160|{
  369|    160|    ADDED_OBJ ad, *adp;
  370|    160|    ASN1_OBJECT ob;
  371|       |
  372|    160|    if ((n >= 0) && (n < NUM_NID)) {
  373|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  374|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  375|      0|            return (NULL);
  376|      0|        }
  377|    160|        return (nid_objs[n].ln);
  378|    160|    } else if (added == NULL)
  379|      0|        return (NULL);
  380|      0|    else {
  381|      0|        ad.type = ADDED_NID;
  382|      0|        ad.obj = &ob;
  383|      0|        ob.nid = n;
  384|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  385|      0|        if (adp != NULL)
  386|      0|            return (adp->obj->ln);
  387|      0|        else {
  388|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  389|      0|            return (NULL);
  390|      0|        }
  391|      0|    }
  392|    160|}

ERR_load_OBJ_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(OBJ_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, OBJ_str_functs);
   97|      1|        ERR_load_strings(0, OBJ_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

ERR_load_OCSP_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(OCSP_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, OCSP_str_functs);
  146|      1|        ERR_load_strings(0, OCSP_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PEM_strings:
  161|      1|{
  162|      1|#ifndef OPENSSL_NO_ERR
  163|       |
  164|      1|    if (ERR_func_error_string(PEM_str_functs[0].error) == NULL) {
  165|      1|        ERR_load_strings(0, PEM_str_functs);
  166|      1|        ERR_load_strings(0, PEM_str_reasons);
  167|      1|    }
  168|      1|#endif
  169|      1|}

ERR_load_PKCS12_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(PKCS12_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, PKCS12_str_functs);
  146|      1|        ERR_load_strings(0, PKCS12_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PKCS7_strings:
  199|      1|{
  200|      1|#ifndef OPENSSL_NO_ERR
  201|       |
  202|      1|    if (ERR_func_error_string(PKCS7_str_functs[0].error) == NULL) {
  203|      1|        ERR_load_strings(0, PKCS7_str_functs);
  204|      1|        ERR_load_strings(0, PKCS7_str_reasons);
  205|      1|    }
  206|      1|#endif
  207|      1|}

RAND_SSLeay:
  177|      1|{
  178|      1|    return (&rand_ssleay_meth);
  179|      1|}
ssleay_rand_bytes:
  344|  2.82k|{
  345|  2.82k|    static volatile int stirred_pool = 0;
  346|  2.82k|    int i, j, k;
  347|  2.82k|    size_t num_ceil, st_idx, st_num;
  348|  2.82k|    int ok;
  349|  2.82k|    long md_c[2];
  350|  2.82k|    unsigned char local_md[MD_DIGEST_LENGTH];
  351|  2.82k|    EVP_MD_CTX m;
  352|  2.82k|#ifndef GETPID_IS_MEANINGLESS
  353|  2.82k|    pid_t curr_pid = getpid();
  354|  2.82k|#endif
  355|  2.82k|    int do_stir_pool = 0;
  356|       |
  357|       |#ifdef PREDICT
  358|       |    if (rand_predictable) {
  359|       |        static unsigned char val = 0;
  360|       |
  361|       |        for (i = 0; i < num; i++)
  362|       |            buf[i] = val++;
  363|       |        return (1);
  364|       |    }
  365|       |#endif
  366|       |
  367|  2.82k|    if (num <= 0)
  368|      0|        return 1;
  369|       |
  370|  2.82k|    EVP_MD_CTX_init(&m);
  371|       |    /* round upwards to multiple of MD_DIGEST_LENGTH/2 */
  372|  2.82k|    num_ceil =
  373|  2.82k|        (1 + (num - 1) / (MD_DIGEST_LENGTH / 2)) * (MD_DIGEST_LENGTH / 2);
  374|       |
  375|       |    /*
  376|       |     * (Based on the rand(3) manpage:)
  377|       |     *
  378|       |     * For each group of 10 bytes (or less), we do the following:
  379|       |     *
  380|       |     * Input into the hash function the local 'md' (which is initialized from
  381|       |     * the global 'md' before any bytes are generated), the bytes that are to
  382|       |     * be overwritten by the random bytes, and bytes from the 'state'
  383|       |     * (incrementing looping index). From this digest output (which is kept
  384|       |     * in 'md'), the top (up to) 10 bytes are returned to the caller and the
  385|       |     * bottom 10 bytes are xored into the 'state'.
  386|       |     *
  387|       |     * Finally, after we have finished 'num' random bytes for the
  388|       |     * caller, 'count' (which is incremented) and the local and global 'md'
  389|       |     * are fed into the hash function and the results are kept in the
  390|       |     * global 'md'.
  391|       |     */
  392|  2.82k|    if (lock)
  393|  2.82k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  394|       |
  395|       |    /* prevent ssleay_rand_bytes() from trying to obtain the lock again */
  396|  2.82k|    CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  397|  2.82k|    CRYPTO_THREADID_current(&locking_threadid);
  398|  2.82k|    CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  399|  2.82k|    crypto_lock_rand = 1;
  400|       |
  401|  2.82k|    if (!initialized) {
  402|      0|        RAND_poll();
  403|      0|        initialized = 1;
  404|      0|    }
  405|       |
  406|  2.82k|    if (!stirred_pool)
  407|      1|        do_stir_pool = 1;
  408|       |
  409|  2.82k|    ok = (entropy >= ENTROPY_NEEDED);
  410|  2.82k|    if (!ok) {
  411|       |        /*
  412|       |         * If the PRNG state is not yet unpredictable, then seeing the PRNG
  413|       |         * output may help attackers to determine the new state; thus we have
  414|       |         * to decrease the entropy estimate. Once we've had enough initial
  415|       |         * seeding we don't bother to adjust the entropy count, though,
  416|       |         * because we're not ambitious to provide *information-theoretic*
  417|       |         * randomness. NOTE: This approach fails if the program forks before
  418|       |         * we have enough entropy. Entropy should be collected in a separate
  419|       |         * input pool and be transferred to the output pool only when the
  420|       |         * entropy limit has been reached.
  421|       |         */
  422|      0|        entropy -= num;
  423|      0|        if (entropy < 0)
  424|      0|            entropy = 0;
  425|      0|    }
  426|       |
  427|  2.82k|    if (do_stir_pool) {
  428|       |        /*
  429|       |         * In the output function only half of 'md' remains secret, so we
  430|       |         * better make sure that the required entropy gets 'evenly
  431|       |         * distributed' through 'state', our randomness pool. The input
  432|       |         * function (ssleay_rand_add) chains all of 'md', which makes it more
  433|       |         * suitable for this purpose.
  434|       |         */
  435|       |
  436|      1|        int n = STATE_SIZE;     /* so that the complete pool gets accessed */
  437|     53|        while (n > 0) {
  438|       |#if MD_DIGEST_LENGTH > 20
  439|       |# error "Please adjust DUMMY_SEED."
  440|       |#endif
  441|     52|#define DUMMY_SEED "...................." /* at least MD_DIGEST_LENGTH */
  442|       |            /*
  443|       |             * Note that the seed does not matter, it's just that
  444|       |             * ssleay_rand_add expects to have something to hash.
  445|       |             */
  446|     52|            ssleay_rand_add(DUMMY_SEED, MD_DIGEST_LENGTH, 0.0);
  447|     52|            n -= MD_DIGEST_LENGTH;
  448|     52|        }
  449|      1|        if (ok)
  450|      1|            stirred_pool = 1;
  451|      1|    }
  452|       |
  453|  2.82k|    st_idx = state_index;
  454|  2.82k|    st_num = state_num;
  455|  2.82k|    md_c[0] = md_count[0];
  456|  2.82k|    md_c[1] = md_count[1];
  457|  2.82k|    memcpy(local_md, md, sizeof md);
  458|       |
  459|  2.82k|    state_index += num_ceil;
  460|  2.82k|    if (state_index > state_num)
  461|     27|        state_index %= state_num;
  462|       |
  463|       |    /*
  464|       |     * state[st_idx], ..., state[(st_idx + num_ceil - 1) % st_num] are now
  465|       |     * ours (but other threads may use them too)
  466|       |     */
  467|       |
  468|  2.82k|    md_count[0] += 1;
  469|       |
  470|       |    /* before unlocking, we must clear 'crypto_lock_rand' */
  471|  2.82k|    crypto_lock_rand = 0;
  472|  2.82k|    if (lock)
  473|  2.82k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  474|       |
  475|  5.65k|    while (num > 0) {
  476|       |        /* num_ceil -= MD_DIGEST_LENGTH/2 */
  477|  2.82k|        j = (num >= MD_DIGEST_LENGTH / 2) ? MD_DIGEST_LENGTH / 2 : num;
  478|  2.82k|        num -= j;
  479|  2.82k|        if (!MD_Init(&m))
  480|      0|           goto err;
  481|  2.82k|#ifndef GETPID_IS_MEANINGLESS
  482|  2.82k|        if (curr_pid) {         /* just in the first iteration to save time */
  483|  2.82k|            if (!MD_Update(&m, (unsigned char *)&curr_pid, sizeof curr_pid))
  484|      0|                goto err;
  485|  2.82k|            curr_pid = 0;
  486|  2.82k|        }
  487|  2.82k|#endif
  488|  2.82k|        if (!MD_Update(&m, local_md, MD_DIGEST_LENGTH) ||
  489|  2.82k|            !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)))
  490|      0|            goto err;
  491|       |
  492|  2.82k|#ifndef PURIFY                  /* purify complains */
  493|       |        /*
  494|       |         * The following line uses the supplied buffer as a small source of
  495|       |         * entropy: since this buffer is often uninitialised it may cause
  496|       |         * programs such as purify or valgrind to complain. So for those
  497|       |         * builds it is not used: the removal of such a small source of
  498|       |         * entropy has negligible impact on security.
  499|       |         */
  500|  2.82k|        if (!MD_Update(&m, buf, j))
  501|      0|            goto err;
  502|  2.82k|#endif
  503|       |
  504|  2.82k|        k = (st_idx + MD_DIGEST_LENGTH / 2) - st_num;
  505|  2.82k|        if (k > 0) {
  506|     27|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2 - k) ||
  507|     27|                !MD_Update(&m, &(state[0]), k))
  508|      0|                goto err;
  509|  2.80k|        } else {
  510|  2.80k|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2))
  511|      0|                goto err;
  512|  2.80k|        }
  513|  2.82k|        if (!MD_Final(&m, local_md))
  514|      0|            goto err;
  515|       |
  516|  31.0k|        for (i = 0; i < MD_DIGEST_LENGTH / 2; i++) {
  517|       |            /* may compete with other threads */
  518|  28.2k|            state[st_idx++] ^= local_md[i];
  519|  28.2k|            if (st_idx >= st_num)
  520|     30|                st_idx = 0;
  521|  28.2k|            if (i < j)
  522|  11.3k|                *(buf++) = local_md[i + MD_DIGEST_LENGTH / 2];
  523|  28.2k|        }
  524|  2.82k|    }
  525|       |
  526|  2.82k|    if (!MD_Init(&m) ||
  527|  2.82k|        !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  528|  2.82k|        !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  529|      0|        goto err;
  530|  2.82k|    if (lock)
  531|  2.82k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  532|  2.82k|    if (!MD_Update(&m, md, MD_DIGEST_LENGTH) ||
  533|  2.82k|        !MD_Final(&m, md)) {
  534|      0|        if (lock)
  535|      0|            CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  536|      0|        goto err;
  537|      0|    }
  538|  2.82k|    if (lock)
  539|  2.82k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  540|       |
  541|  2.82k|    EVP_MD_CTX_cleanup(&m);
  542|  2.82k|    if (ok)
  543|  2.82k|        return (1);
  544|      0|    else if (pseudo)
  545|      0|        return 0;
  546|      0|    else {
  547|      0|        RANDerr(RAND_F_SSLEAY_RAND_BYTES, RAND_R_PRNG_NOT_SEEDED);
  548|      0|        ERR_add_error_data(1, "You need to read the OpenSSL FAQ, "
  549|      0|                           "http://www.openssl.org/support/faq.html");
  550|      0|        return (0);
  551|      0|    }
  552|       |
  553|      0| err:
  554|      0|    EVP_MD_CTX_cleanup(&m);
  555|      0|    return (0);
  556|  2.82k|}
md_rand.c:ssleay_rand_add:
  194|     56|{
  195|     56|    int i, j, k, st_idx;
  196|     56|    long md_c[2];
  197|     56|    unsigned char local_md[MD_DIGEST_LENGTH];
  198|     56|    EVP_MD_CTX m;
  199|     56|    int do_not_lock;
  200|       |
  201|     56|    if (!num)
  202|      0|        return;
  203|       |
  204|       |    /*
  205|       |     * (Based on the rand(3) manpage)
  206|       |     *
  207|       |     * The input is chopped up into units of 20 bytes (or less for
  208|       |     * the last block).  Each of these blocks is run through the hash
  209|       |     * function as follows:  The data passed to the hash function
  210|       |     * is the current 'md', the same number of bytes from the 'state'
  211|       |     * (the location determined by in incremented looping index) as
  212|       |     * the current 'block', the new key data 'block', and 'count'
  213|       |     * (which is incremented after each use).
  214|       |     * The result of this is kept in 'md' and also xored into the
  215|       |     * 'state' at the same locations that were used as input into the
  216|       |     * hash function.
  217|       |     */
  218|       |
  219|       |    /* check if we already have the lock */
  220|     56|    if (crypto_lock_rand) {
  221|     56|        CRYPTO_THREADID cur;
  222|     56|        CRYPTO_THREADID_current(&cur);
  223|     56|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  224|     56|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  225|     56|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  226|     56|    } else
  227|      0|        do_not_lock = 0;
  228|       |
  229|     56|    if (!do_not_lock)
  230|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  231|     56|    st_idx = state_index;
  232|       |
  233|       |    /*
  234|       |     * use our own copies of the counters so that even if a concurrent thread
  235|       |     * seeds with exactly the same data and uses the same subarray there's
  236|       |     * _some_ difference
  237|       |     */
  238|     56|    md_c[0] = md_count[0];
  239|     56|    md_c[1] = md_count[1];
  240|       |
  241|     56|    memcpy(local_md, md, sizeof md);
  242|       |
  243|       |    /* state_index <= state_num <= STATE_SIZE */
  244|     56|    state_index += num;
  245|     56|    if (state_index >= STATE_SIZE) {
  246|      1|        state_index %= STATE_SIZE;
  247|      1|        state_num = STATE_SIZE;
  248|     55|    } else if (state_num < STATE_SIZE) {
  249|     52|        if (state_index > state_num)
  250|     52|            state_num = state_index;
  251|     52|    }
  252|       |    /* state_index <= state_num <= STATE_SIZE */
  253|       |
  254|       |    /*
  255|       |     * state[st_idx], ..., state[(st_idx + num - 1) % STATE_SIZE] are what we
  256|       |     * will use now, but other threads may use them as well
  257|       |     */
  258|       |
  259|     56|    md_count[1] += (num / MD_DIGEST_LENGTH) + (num % MD_DIGEST_LENGTH > 0);
  260|       |
  261|     56|    if (!do_not_lock)
  262|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  263|       |
  264|     56|    EVP_MD_CTX_init(&m);
  265|    113|    for (i = 0; i < num; i += MD_DIGEST_LENGTH) {
  266|     57|        j = (num - i);
  267|     57|        j = (j > MD_DIGEST_LENGTH) ? MD_DIGEST_LENGTH : j;
  268|       |
  269|     57|        if (!MD_Init(&m) ||
  270|     57|            !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  271|      0|            goto err;
  272|     57|        k = (st_idx + j) - STATE_SIZE;
  273|     57|        if (k > 0) {
  274|      1|            if (!MD_Update(&m, &(state[st_idx]), j - k) ||
  275|      1|                !MD_Update(&m, &(state[0]), k))
  276|      0|                goto err;
  277|      1|        } else
  278|     56|            if (!MD_Update(&m, &(state[st_idx]), j))
  279|      0|                goto err;
  280|       |
  281|       |        /* DO NOT REMOVE THE FOLLOWING CALL TO MD_Update()! */
  282|     57|        if (!MD_Update(&m, buf, j))
  283|      0|            goto err;
  284|       |        /*
  285|       |         * We know that line may cause programs such as purify and valgrind
  286|       |         * to complain about use of uninitialized data.  The problem is not,
  287|       |         * it's with the caller.  Removing that line will make sure you get
  288|       |         * really bad randomness and thereby other problems such as very
  289|       |         * insecure keys.
  290|       |         */
  291|       |
  292|     57|        if (!MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  293|     57|            !MD_Final(&m, local_md))
  294|      0|            goto err;
  295|     57|        md_c[1]++;
  296|       |
  297|     57|        buf = (const char *)buf + j;
  298|       |
  299|  1.15k|        for (k = 0; k < j; k++) {
  300|       |            /*
  301|       |             * Parallel threads may interfere with this, but always each byte
  302|       |             * of the new state is the XOR of some previous value of its and
  303|       |             * local_md (itermediate values may be lost). Alway using locking
  304|       |             * could hurt performance more than necessary given that
  305|       |             * conflicts occur only when the total seeding is longer than the
  306|       |             * random state.
  307|       |             */
  308|  1.09k|            state[st_idx++] ^= local_md[k];
  309|  1.09k|            if (st_idx >= STATE_SIZE)
  310|      1|                st_idx = 0;
  311|  1.09k|        }
  312|     57|    }
  313|       |
  314|     56|    if (!do_not_lock)
  315|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  316|       |    /*
  317|       |     * Don't just copy back local_md into md -- this could mean that other
  318|       |     * thread's seeding remains without effect (except for the incremented
  319|       |     * counter).  By XORing it we keep at least as much entropy as fits into
  320|       |     * md.
  321|       |     */
  322|  1.17k|    for (k = 0; k < (int)sizeof(md); k++) {
  323|  1.12k|        md[k] ^= local_md[k];
  324|  1.12k|    }
  325|     56|    if (entropy < ENTROPY_NEEDED) /* stop counting when we have enough */
  326|      1|        entropy += add;
  327|     56|    if (!do_not_lock)
  328|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  329|       |
  330|       |#if !defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32)
  331|       |    assert(md_c[1] == md_count[1]);
  332|       |#endif
  333|       |
  334|     56| err:
  335|     56|    EVP_MD_CTX_cleanup(&m);
  336|     56|}
md_rand.c:ssleay_rand_nopseudo_bytes:
  559|  2.82k|{
  560|  2.82k|    return ssleay_rand_bytes(buf, num, 0, 1);
  561|  2.82k|}
md_rand.c:ssleay_rand_status:
  572|  2.65k|{
  573|  2.65k|    CRYPTO_THREADID cur;
  574|  2.65k|    int ret;
  575|  2.65k|    int do_not_lock;
  576|       |
  577|  2.65k|    CRYPTO_THREADID_current(&cur);
  578|       |    /*
  579|       |     * check if we already have the lock (could happen if a RAND_poll()
  580|       |     * implementation calls RAND_status())
  581|       |     */
  582|  2.65k|    if (crypto_lock_rand) {
  583|      0|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  584|      0|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  585|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  586|      0|    } else
  587|  2.65k|        do_not_lock = 0;
  588|       |
  589|  2.65k|    if (!do_not_lock) {
  590|  2.65k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  591|       |
  592|       |        /*
  593|       |         * prevent ssleay_rand_bytes() from trying to obtain the lock again
  594|       |         */
  595|  2.65k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  596|  2.65k|        CRYPTO_THREADID_cpy(&locking_threadid, &cur);
  597|  2.65k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  598|  2.65k|        crypto_lock_rand = 1;
  599|  2.65k|    }
  600|       |
  601|  2.65k|    if (!initialized) {
  602|      1|        RAND_poll();
  603|      1|        initialized = 1;
  604|      1|    }
  605|       |
  606|  2.65k|    ret = entropy >= ENTROPY_NEEDED;
  607|       |
  608|  2.65k|    if (!do_not_lock) {
  609|       |        /* before unlocking, we must clear 'crypto_lock_rand' */
  610|  2.65k|        crypto_lock_rand = 0;
  611|       |
  612|  2.65k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  613|  2.65k|    }
  614|       |
  615|  2.65k|    return ret;
  616|  2.65k|}

ERR_load_RAND_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(RAND_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, RAND_str_functs);
   97|      1|        ERR_load_strings(0, RAND_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

RAND_get_rand_method:
   93|  5.49k|{
   94|  5.49k|    if (!default_RAND_meth) {
   95|      1|#ifndef OPENSSL_NO_ENGINE
   96|      1|        ENGINE *e = ENGINE_get_default_RAND();
   97|      1|        if (e) {
   98|      0|            default_RAND_meth = ENGINE_get_RAND(e);
   99|      0|            if (!default_RAND_meth) {
  100|      0|                ENGINE_finish(e);
  101|      0|                e = NULL;
  102|      0|            }
  103|      0|        }
  104|      1|        if (e)
  105|      0|            funct_ref = e;
  106|      1|        else
  107|      1|#endif
  108|      1|            default_RAND_meth = RAND_SSLeay();
  109|      1|    }
  110|  5.49k|    return default_RAND_meth;
  111|  5.49k|}
RAND_add:
  149|      4|{
  150|      4|    const RAND_METHOD *meth = RAND_get_rand_method();
  151|      4|    if (meth && meth->add)
  152|      4|        meth->add(buf, num, entropy);
  153|      4|}
RAND_bytes:
  156|  2.82k|{
  157|  2.82k|    const RAND_METHOD *meth = RAND_get_rand_method();
  158|  2.82k|    if (meth && meth->bytes)
  159|  2.82k|        return meth->bytes(buf, num);
  160|      0|    return (-1);
  161|  2.82k|}
RAND_status:
  172|  2.65k|{
  173|  2.65k|    const RAND_METHOD *meth = RAND_get_rand_method();
  174|  2.65k|    if (meth && meth->status)
  175|  2.65k|        return meth->status();
  176|      0|    return 0;
  177|  2.65k|}

RAND_poll:
  244|      1|{
  245|      1|    unsigned long l;
  246|      1|    pid_t curr_pid = getpid();
  247|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  248|      1|    unsigned char tmpbuf[ENTROPY_NEEDED];
  249|      1|    int n = 0;
  250|      1|#  endif
  251|      1|#  ifdef DEVRANDOM
  252|      1|    static const char *randomfiles[] = { DEVRANDOM };
  253|      1|    struct stat randomstats[sizeof(randomfiles) / sizeof(randomfiles[0])];
  254|      1|    int fd;
  255|      1|    unsigned int i;
  256|      1|#  endif
  257|      1|#  ifdef DEVRANDOM_EGD
  258|      1|    static const char *egdsockets[] = { DEVRANDOM_EGD, NULL };
  259|      1|    const char **egdsocket = NULL;
  260|      1|#  endif
  261|       |
  262|      1|#  ifdef DEVRANDOM
  263|      1|    memset(randomstats, 0, sizeof(randomstats));
  264|       |    /*
  265|       |     * Use a random entropy pool device. Linux, FreeBSD and OpenBSD have
  266|       |     * this. Use /dev/urandom if you can as /dev/random may block if it runs
  267|       |     * out of random entries.
  268|       |     */
  269|       |
  270|      2|    for (i = 0; (i < sizeof(randomfiles) / sizeof(randomfiles[0])) &&
  271|      2|         (n < ENTROPY_NEEDED); i++) {
  272|      1|        if ((fd = open(randomfiles[i], O_RDONLY
  273|      1|#   ifdef O_NONBLOCK
  274|      1|                       | O_NONBLOCK
  275|      1|#   endif
  276|       |#   ifdef O_BINARY
  277|       |                       | O_BINARY
  278|       |#   endif
  279|      1|#   ifdef O_NOCTTY              /* If it happens to be a TTY (god forbid), do
  280|       |                                 * not make it our controlling tty */
  281|      1|                       | O_NOCTTY
  282|      1|#   endif
  283|      1|             )) >= 0) {
  284|      1|            int usec = 10 * 1000; /* spend 10ms on each file */
  285|      1|            int r;
  286|      1|            unsigned int j;
  287|      1|            struct stat *st = &randomstats[i];
  288|       |
  289|       |            /*
  290|       |             * Avoid using same input... Used to be O_NOFOLLOW above, but
  291|       |             * it's not universally appropriate...
  292|       |             */
  293|      1|            if (fstat(fd, st) != 0) {
  294|      0|                close(fd);
  295|      0|                continue;
  296|      0|            }
  297|      1|            for (j = 0; j < i; j++) {
  298|      0|                if (randomstats[j].st_ino == st->st_ino &&
  299|      0|                    randomstats[j].st_dev == st->st_dev)
  300|      0|                    break;
  301|      0|            }
  302|      1|            if (j < i) {
  303|      0|                close(fd);
  304|      0|                continue;
  305|      0|            }
  306|       |
  307|      1|            do {
  308|      1|                int try_read = 0;
  309|       |
  310|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  311|       |                /*
  312|       |                 * select() is broken in BeOS R5, so we simply try to read
  313|       |                 * something and snooze if we couldn't
  314|       |                 */
  315|       |                try_read = 1;
  316|       |
  317|       |#   elif defined(OPENSSL_SYS_LINUX)
  318|       |                /* use poll() */
  319|      1|                struct pollfd pset;
  320|       |
  321|      1|                pset.fd = fd;
  322|      1|                pset.events = POLLIN;
  323|      1|                pset.revents = 0;
  324|       |
  325|      1|                if (poll(&pset, 1, usec / 1000) < 0)
  326|      0|                    usec = 0;
  327|      1|                else
  328|      1|                    try_read = (pset.revents & POLLIN) != 0;
  329|       |
  330|       |#   else
  331|       |                /* use select() */
  332|       |                fd_set fset;
  333|       |                struct timeval t;
  334|       |
  335|       |                t.tv_sec = 0;
  336|       |                t.tv_usec = usec;
  337|       |
  338|       |                if (FD_SETSIZE > 0 && (unsigned)fd >= FD_SETSIZE) {
  339|       |                    /*
  340|       |                     * can't use select, so just try to read once anyway
  341|       |                     */
  342|       |                    try_read = 1;
  343|       |                } else {
  344|       |                    FD_ZERO(&fset);
  345|       |                    FD_SET(fd, &fset);
  346|       |
  347|       |                    if (select(fd + 1, &fset, NULL, NULL, &t) >= 0) {
  348|       |                        usec = t.tv_usec;
  349|       |                        if (FD_ISSET(fd, &fset))
  350|       |                            try_read = 1;
  351|       |                    } else
  352|       |                        usec = 0;
  353|       |                }
  354|       |#   endif
  355|       |
  356|      1|                if (try_read) {
  357|      1|                    r = read(fd, (unsigned char *)tmpbuf + n,
  358|      1|                             ENTROPY_NEEDED - n);
  359|      1|                    if (r > 0)
  360|      1|                        n += r;
  361|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  362|       |                    if (r == 0)
  363|       |                        snooze(t.tv_usec);
  364|       |#   endif
  365|      1|                } else
  366|      0|                    r = -1;
  367|       |
  368|       |                /*
  369|       |                 * Some Unixen will update t in select(), some won't.  For
  370|       |                 * those who won't, or if we didn't use select() in the first
  371|       |                 * place, give up here, otherwise, we will do this once again
  372|       |                 * for the remaining time.
  373|       |                 */
  374|      1|                if (usec == 10 * 1000)
  375|      1|                    usec = 0;
  376|      1|            }
  377|      1|            while ((r > 0 ||
  378|      1|                    (errno == EINTR || errno == EAGAIN)) && usec != 0
  379|      1|                   && n < ENTROPY_NEEDED);
  380|       |
  381|      1|            close(fd);
  382|      1|        }
  383|      1|    }
  384|      1|#  endif                        /* defined(DEVRANDOM) */
  385|       |
  386|      1|#  ifdef DEVRANDOM_EGD
  387|       |    /*
  388|       |     * Use an EGD socket to read entropy from an EGD or PRNGD entropy
  389|       |     * collecting daemon.
  390|       |     */
  391|       |
  392|      1|    for (egdsocket = egdsockets; *egdsocket && n < ENTROPY_NEEDED;
  393|      1|         egdsocket++) {
  394|      0|        int r;
  395|       |
  396|      0|        r = RAND_query_egd_bytes(*egdsocket, (unsigned char *)tmpbuf + n,
  397|      0|                                 ENTROPY_NEEDED - n);
  398|      0|        if (r > 0)
  399|      0|            n += r;
  400|      0|    }
  401|      1|#  endif                        /* defined(DEVRANDOM_EGD) */
  402|       |
  403|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  404|      1|    if (n > 0) {
  405|      1|        RAND_add(tmpbuf, sizeof tmpbuf, (double)n);
  406|      1|        OPENSSL_cleanse(tmpbuf, n);
  407|      1|    }
  408|      1|#  endif
  409|       |
  410|       |    /* put in some default random data, we need more than just this */
  411|      1|    l = curr_pid;
  412|      1|    RAND_add(&l, sizeof(l), 0.0);
  413|      1|    l = getuid();
  414|      1|    RAND_add(&l, sizeof(l), 0.0);
  415|       |
  416|      1|    l = time(NULL);
  417|      1|    RAND_add(&l, sizeof(l), 0.0);
  418|       |
  419|       |#  if defined(OPENSSL_SYS_BEOS)
  420|       |    {
  421|       |        system_info sysInfo;
  422|       |        get_system_info(&sysInfo);
  423|       |        RAND_add(&sysInfo, sizeof(sysInfo), 0);
  424|       |    }
  425|       |#  endif
  426|       |
  427|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  428|      1|    return 1;
  429|       |#  else
  430|       |    return 0;
  431|       |#  endif
  432|      1|}

RSA_PKCS1_SSLeay:
  151|      7|{
  152|      7|    return (&rsa_pkcs1_eay_meth);
  153|      7|}

ERR_load_RSA_strings:
  239|      1|{
  240|      1|#ifndef OPENSSL_NO_ERR
  241|       |
  242|      1|    if (ERR_func_error_string(RSA_str_functs[0].error) == NULL) {
  243|      1|        ERR_load_strings(0, RSA_str_functs);
  244|      1|        ERR_load_strings(0, RSA_str_reasons);
  245|      1|    }
  246|      1|#endif
  247|      1|}

SHA1_Update:
  303|  22.8k|{
  304|  22.8k|    const unsigned char *data = data_;
  305|  22.8k|    unsigned char *p;
  306|  22.8k|    HASH_LONG l;
  307|  22.8k|    size_t n;
  308|       |
  309|  22.8k|    if (len == 0)
  310|      3|        return 1;
  311|       |
  312|  22.8k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  22.8k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  22.8k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  22.8k|    c->Nl = l;
  322|       |
  323|  22.8k|    n = c->num;
  324|  22.8k|    if (n != 0) {
  325|  17.1k|        p = (unsigned char *)c->data;
  326|       |
  327|  17.1k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|     53|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|     53|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|     53|            n = HASH_CBLOCK - n;
  331|     53|            data += n;
  332|     53|            len -= n;
  333|     53|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|     53|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  17.1k|        } else {
  342|  17.1k|            memcpy(p + n, data, len);
  343|  17.1k|            c->num += (unsigned int)len;
  344|  17.1k|            return 1;
  345|  17.1k|        }
  346|  17.1k|    }
  347|       |
  348|  5.76k|    n = len / HASH_CBLOCK;
  349|  5.76k|    if (n > 0) {
  350|      0|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|      0|        n *= HASH_CBLOCK;
  352|      0|        data += n;
  353|      0|        len -= n;
  354|      0|    }
  355|       |
  356|  5.76k|    if (len != 0) {
  357|  5.76k|        p = (unsigned char *)c->data;
  358|  5.76k|        c->num = (unsigned int)len;
  359|  5.76k|        memcpy(p, data, len);
  360|  5.76k|    }
  361|  5.76k|    return 1;
  362|  22.8k|}
SHA1_Final:
  370|  5.71k|{
  371|  5.71k|    unsigned char *p = (unsigned char *)c->data;
  372|  5.71k|    size_t n = c->num;
  373|       |
  374|  5.71k|    p[n] = 0x80;                /* there is always room for one */
  375|  5.71k|    n++;
  376|       |
  377|  5.71k|    if (n > (HASH_CBLOCK - 8)) {
  378|  2.82k|        memset(p + n, 0, HASH_CBLOCK - n);
  379|  2.82k|        n = 0;
  380|  2.82k|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|  2.82k|    }
  382|  5.71k|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|  5.71k|    p += HASH_CBLOCK - 8;
  385|  5.71k|#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|  5.71k|    (void)HOST_l2c(c->Nh, p);
  387|  5.71k|    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|       |    (void)HOST_l2c(c->Nl, p);
  390|       |    (void)HOST_l2c(c->Nh, p);
  391|       |#endif
  392|  5.71k|    p -= HASH_CBLOCK;
  393|  5.71k|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|  5.71k|    c->num = 0;
  395|  5.71k|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|  5.71k|    HASH_MAKE_STRING(c, md);
  401|  5.71k|#endif
  402|       |
  403|  5.71k|    return 1;
  404|  5.71k|}
SHA256_Update:
  303|  9.78k|{
  304|  9.78k|    const unsigned char *data = data_;
  305|  9.78k|    unsigned char *p;
  306|  9.78k|    HASH_LONG l;
  307|  9.78k|    size_t n;
  308|       |
  309|  9.78k|    if (len == 0)
  310|     12|        return 1;
  311|       |
  312|  9.77k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  9.77k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  9.77k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  9.77k|    c->Nl = l;
  322|       |
  323|  9.77k|    n = c->num;
  324|  9.77k|    if (n != 0) {
  325|  9.45k|        p = (unsigned char *)c->data;
  326|       |
  327|  9.45k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|    150|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|    150|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|    150|            n = HASH_CBLOCK - n;
  331|    150|            data += n;
  332|    150|            len -= n;
  333|    150|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|    150|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  9.30k|        } else {
  342|  9.30k|            memcpy(p + n, data, len);
  343|  9.30k|            c->num += (unsigned int)len;
  344|  9.30k|            return 1;
  345|  9.30k|        }
  346|  9.45k|    }
  347|       |
  348|    473|    n = len / HASH_CBLOCK;
  349|    473|    if (n > 0) {
  350|     39|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|     39|        n *= HASH_CBLOCK;
  352|     39|        data += n;
  353|     39|        len -= n;
  354|     39|    }
  355|       |
  356|    473|    if (len != 0) {
  357|    322|        p = (unsigned char *)c->data;
  358|    322|        c->num = (unsigned int)len;
  359|    322|        memcpy(p, data, len);
  360|    322|    }
  361|    473|    return 1;
  362|  9.77k|}
SHA256_Final:
  370|    185|{
  371|    185|    unsigned char *p = (unsigned char *)c->data;
  372|    185|    size_t n = c->num;
  373|       |
  374|    185|    p[n] = 0x80;                /* there is always room for one */
  375|    185|    n++;
  376|       |
  377|    185|    if (n > (HASH_CBLOCK - 8)) {
  378|     19|        memset(p + n, 0, HASH_CBLOCK - n);
  379|     19|        n = 0;
  380|     19|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|     19|    }
  382|    185|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|    185|    p += HASH_CBLOCK - 8;
  385|    185|#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|    185|    (void)HOST_l2c(c->Nh, p);
  387|    185|    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|       |    (void)HOST_l2c(c->Nl, p);
  390|       |    (void)HOST_l2c(c->Nh, p);
  391|       |#endif
  392|    185|    p -= HASH_CBLOCK;
  393|    185|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|    185|    c->num = 0;
  395|    185|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|    185|    HASH_MAKE_STRING(c, md);
  401|    185|#endif
  402|       |
  403|    185|    return 1;
  404|    185|}

SHA256_Init:
   35|    185|{
   36|    185|    memset(c, 0, sizeof(*c));
   37|    185|    c->h[0] = 0x6a09e667UL;
   38|    185|    c->h[1] = 0xbb67ae85UL;
   39|    185|    c->h[2] = 0x3c6ef372UL;
   40|    185|    c->h[3] = 0xa54ff53aUL;
   41|    185|    c->h[4] = 0x510e527fUL;
   42|    185|    c->h[5] = 0x9b05688cUL;
   43|    185|    c->h[6] = 0x1f83d9abUL;
   44|    185|    c->h[7] = 0x5be0cd19UL;
   45|    185|    c->md_len = SHA256_DIGEST_LENGTH;
   46|    185|    return 1;
   47|    185|}

SHA1_Init:
  130|  5.71k|{
  131|  5.71k|    memset(c, 0, sizeof(*c));
  132|  5.71k|    c->h0 = INIT_DATA_h0;
  133|  5.71k|    c->h1 = INIT_DATA_h1;
  134|  5.71k|    c->h2 = INIT_DATA_h2;
  135|  5.71k|    c->h3 = INIT_DATA_h3;
  136|  5.71k|    c->h4 = INIT_DATA_h4;
  137|  5.71k|    return 1;
  138|  5.71k|}

sk_new_null:
  153|     19|{
  154|     19|    return sk_new((int (*)(const void *, const void *))0);
  155|     19|}
sk_new:
  158|     20|{
  159|     20|    _STACK *ret;
  160|     20|    int i;
  161|       |
  162|     20|    if ((ret = OPENSSL_malloc(sizeof(_STACK))) == NULL)
  163|      0|        goto err;
  164|     20|    if ((ret->data = OPENSSL_malloc(sizeof(char *) * MIN_NODES)) == NULL)
  165|      0|        goto err;
  166|    100|    for (i = 0; i < MIN_NODES; i++)
  167|     80|        ret->data[i] = NULL;
  168|     20|    ret->comp = c;
  169|     20|    ret->num_alloc = MIN_NODES;
  170|     20|    ret->num = 0;
  171|     20|    ret->sorted = 0;
  172|     20|    return (ret);
  173|      0| err:
  174|      0|    if (ret)
  175|      0|        OPENSSL_free(ret);
  176|      0|    return (NULL);
  177|     20|}
sk_insert:
  180|     54|{
  181|     54|    char **s;
  182|       |
  183|     54|    if (st == NULL)
  184|      0|        return 0;
  185|     54|    if (st->num_alloc <= st->num + 1) {
  186|      8|        s = OPENSSL_realloc((char *)st->data,
  187|      8|                            (unsigned int)sizeof(char *) * st->num_alloc * 2);
  188|      8|        if (s == NULL)
  189|      0|            return (0);
  190|      8|        st->data = s;
  191|      8|        st->num_alloc *= 2;
  192|      8|    }
  193|     54|    if ((loc >= (int)st->num) || (loc < 0))
  194|     47|        st->data[st->num] = data;
  195|      7|    else {
  196|      7|        int i;
  197|      7|        char **f, **t;
  198|       |
  199|      7|        f = st->data;
  200|      7|        t = &(st->data[1]);
  201|     42|        for (i = st->num; i >= loc; i--)
  202|     35|            t[i] = f[i];
  203|       |
  204|       |#ifdef undef                    /* no memmove on sunos :-( */
  205|       |        memmove(&(st->data[loc + 1]),
  206|       |                &(st->data[loc]), sizeof(char *) * (st->num - loc));
  207|       |#endif
  208|      7|        st->data[loc] = data;
  209|      7|    }
  210|     54|    st->num++;
  211|     54|    st->sorted = 0;
  212|     54|    return (st->num);
  213|     54|}
sk_delete_ptr:
  216|     39|{
  217|     39|    int i;
  218|       |
  219|    109|    for (i = 0; i < st->num; i++)
  220|     77|        if (st->data[i] == p)
  221|      7|            return (sk_delete(st, i));
  222|     32|    return (NULL);
  223|     39|}
sk_delete:
  226|      7|{
  227|      7|    char *ret;
  228|      7|    int i, j;
  229|       |
  230|      7|    if (!st || (loc < 0) || (loc >= st->num))
  231|      0|        return NULL;
  232|       |
  233|      7|    ret = st->data[loc];
  234|      7|    if (loc != st->num - 1) {
  235|      0|        j = st->num - 1;
  236|      0|        for (i = loc; i < j; i++)
  237|      0|            st->data[i] = st->data[i + 1];
  238|       |        /*
  239|       |         * In theory memcpy is not safe for this memcpy( &(st->data[loc]),
  240|       |         * &(st->data[loc+1]), sizeof(char *)*(st->num-loc-1));
  241|       |         */
  242|      0|    }
  243|      7|    st->num--;
  244|      7|    return (ret);
  245|      7|}
sk_push:
  282|     47|{
  283|     47|    return (sk_insert(st, data, st->num));
  284|     47|}
sk_free:
  332|      4|{
  333|      4|    if (st == NULL)
  334|      0|        return;
  335|      4|    if (st->data != NULL)
  336|      4|        OPENSSL_free(st->data);
  337|      4|    OPENSSL_free(st);
  338|      4|}
sk_num:
  341|     23|{
  342|     23|    if (st == NULL)
  343|      0|        return -1;
  344|     23|    return st->num;
  345|     23|}
sk_value:
  348|      5|{
  349|      5|    if (!st || (i < 0) || (i >= st->num))
  350|      1|        return NULL;
  351|      4|    return st->data[i];
  352|      5|}
sk_set:
  355|      4|{
  356|      4|    if (!st || (i < 0) || (i >= st->num))
  357|      0|        return NULL;
  358|      4|    return (st->data[i] = value);
  359|      4|}
sk_sort:
  362|      1|{
  363|      1|    if (st && !st->sorted && st->comp != NULL) {
  364|      1|        int (*comp_func) (const void *, const void *);
  365|       |
  366|       |        /*
  367|       |         * same comment as in sk_find ... previously st->comp was declared as
  368|       |         * a (void*,void*) callback type, but this made the population of the
  369|       |         * callback pointer illogical - our callbacks compare type** with
  370|       |         * type**, so we leave the casting until absolutely necessary (ie.
  371|       |         * "now").
  372|       |         */
  373|      1|        comp_func = (int (*)(const void *, const void *))(st->comp);
  374|      1|        qsort(st->data, st->num, sizeof(char *), comp_func);
  375|      1|        st->sorted = 1;
  376|      1|    }
  377|      1|}

ERR_load_TS_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(TS_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, TS_str_functs);
  185|      1|        ERR_load_strings(0, TS_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_UI_strings:
  103|      1|{
  104|      1|#ifndef OPENSSL_NO_ERR
  105|       |
  106|      1|    if (ERR_func_error_string(UI_str_functs[0].error) == NULL) {
  107|      1|        ERR_load_strings(0, UI_str_functs);
  108|      1|        ERR_load_strings(0, UI_str_reasons);
  109|      1|    }
  110|      1|#endif
  111|      1|}

X509_get_default_cert_area:
   70|      2|{
   71|      2|    return (X509_CERT_AREA);
   72|      2|}

ERR_load_X509_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(X509_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, X509_str_functs);
  185|      1|        ERR_load_strings(0, X509_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_X509V3_strings:
  241|      1|{
  242|      1|#ifndef OPENSSL_NO_ERR
  243|       |
  244|      1|    if (ERR_func_error_string(X509V3_str_functs[0].error) == NULL) {
  245|      1|        ERR_load_strings(0, X509V3_str_functs);
  246|      1|        ERR_load_strings(0, X509V3_str_reasons);
  247|      1|    }
  248|      1|#endif
  249|      1|}

ERR_load_GOST_strings:
  183|      1|{
  184|      1|    if (GOST_lib_error_code == 0)
  185|      1|        GOST_lib_error_code = ERR_get_next_error_library();
  186|       |
  187|      1|    if (GOST_error_init) {
  188|      1|        GOST_error_init = 0;
  189|      1|#ifndef OPENSSL_NO_ERR
  190|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_functs);
  191|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_reasons);
  192|      1|#endif
  193|       |
  194|       |#ifdef GOST_LIB_NAME
  195|       |        GOST_lib_name->error = ERR_PACK(GOST_lib_error_code, 0, 0);
  196|       |        ERR_load_strings(0, GOST_lib_name);
  197|       |#endif
  198|      1|    }
  199|      1|}

register_ameth_gost:
  912|      3|{
  913|      3|    *ameth = EVP_PKEY_asn1_new(nid, ASN1_PKEY_SIGPARAM_NULL, pemstr, info);
  914|      3|    if (!*ameth)
  915|      0|        return 0;
  916|      3|    switch (nid) {
  917|      1|    case NID_id_GostR3410_94:
  918|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost94);
  919|      1|        EVP_PKEY_asn1_set_private(*ameth,
  920|      1|                                  priv_decode_gost, priv_encode_gost,
  921|      1|                                  priv_print_gost94);
  922|       |
  923|      1|        EVP_PKEY_asn1_set_param(*ameth,
  924|      1|                                gost94_param_decode, gost94_param_encode,
  925|      1|                                param_missing_gost94, param_copy_gost94,
  926|      1|                                param_cmp_gost94, param_print_gost94);
  927|      1|        EVP_PKEY_asn1_set_public(*ameth,
  928|      1|                                 pub_decode_gost94, pub_encode_gost94,
  929|      1|                                 pub_cmp_gost94, pub_print_gost94,
  930|      1|                                 pkey_size_gost, pkey_bits_gost);
  931|       |
  932|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  933|      1|        break;
  934|      1|    case NID_id_GostR3410_2001:
  935|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost01);
  936|      1|        EVP_PKEY_asn1_set_private(*ameth,
  937|      1|                                  priv_decode_gost, priv_encode_gost,
  938|      1|                                  priv_print_gost01);
  939|       |
  940|      1|        EVP_PKEY_asn1_set_param(*ameth,
  941|      1|                                gost2001_param_decode, gost2001_param_encode,
  942|      1|                                param_missing_gost01, param_copy_gost01,
  943|      1|                                param_cmp_gost01, param_print_gost01);
  944|      1|        EVP_PKEY_asn1_set_public(*ameth,
  945|      1|                                 pub_decode_gost01, pub_encode_gost01,
  946|      1|                                 pub_cmp_gost01, pub_print_gost01,
  947|      1|                                 pkey_size_gost, pkey_bits_gost);
  948|       |
  949|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  950|      1|        break;
  951|      1|    case NID_id_Gost28147_89_MAC:
  952|      1|        EVP_PKEY_asn1_set_free(*ameth, mackey_free_gost);
  953|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, mac_ctrl_gost);
  954|      1|        break;
  955|      3|    }
  956|      3|    return 1;
  957|      3|}

ENGINE_load_gost:
  270|      1|{
  271|      1|    ENGINE *toadd;
  272|      1|    if (pmeth_GostR3410_94)
  273|      0|        return;
  274|      1|    toadd = engine_gost();
  275|      1|    if (!toadd)
  276|      0|        return;
  277|      1|    ENGINE_add(toadd);
  278|      1|    ENGINE_free(toadd);
  279|      1|    ERR_clear_error();
  280|      1|}
gost_eng.c:engine_gost:
  258|      1|{
  259|      1|    ENGINE *ret = ENGINE_new();
  260|      1|    if (!ret)
  261|      0|        return NULL;
  262|      1|    if (!bind_gost(ret, engine_gost_id)) {
  263|      0|        ENGINE_free(ret);
  264|      0|        return NULL;
  265|      0|    }
  266|      1|    return ret;
  267|      1|}
gost_eng.c:bind_gost:
   75|      1|{
   76|      1|    int ret = 0;
   77|      1|    if (id && strcmp(id, engine_gost_id))
   78|      0|        return 0;
   79|      1|    if (ameth_GostR3410_94) {
   80|      0|        printf("GOST engine already loaded\n");
   81|      0|        goto end;
   82|      0|    }
   83|       |
   84|      1|    if (!ENGINE_set_id(e, engine_gost_id)) {
   85|      0|        printf("ENGINE_set_id failed\n");
   86|      0|        goto end;
   87|      0|    }
   88|      1|    if (!ENGINE_set_name(e, engine_gost_name)) {
   89|      0|        printf("ENGINE_set_name failed\n");
   90|      0|        goto end;
   91|      0|    }
   92|      1|    if (!ENGINE_set_digests(e, gost_digests)) {
   93|      0|        printf("ENGINE_set_digests failed\n");
   94|      0|        goto end;
   95|      0|    }
   96|      1|    if (!ENGINE_set_ciphers(e, gost_ciphers)) {
   97|      0|        printf("ENGINE_set_ciphers failed\n");
   98|      0|        goto end;
   99|      0|    }
  100|      1|    if (!ENGINE_set_pkey_meths(e, gost_pkey_meths)) {
  101|      0|        printf("ENGINE_set_pkey_meths failed\n");
  102|      0|        goto end;
  103|      0|    }
  104|      1|    if (!ENGINE_set_pkey_asn1_meths(e, gost_pkey_asn1_meths)) {
  105|      0|        printf("ENGINE_set_pkey_asn1_meths failed\n");
  106|      0|        goto end;
  107|      0|    }
  108|       |    /* Control function and commands */
  109|      1|    if (!ENGINE_set_cmd_defns(e, gost_cmds)) {
  110|      0|        fprintf(stderr, "ENGINE_set_cmd_defns failed\n");
  111|      0|        goto end;
  112|      0|    }
  113|      1|    if (!ENGINE_set_ctrl_function(e, gost_control_func)) {
  114|      0|        fprintf(stderr, "ENGINE_set_ctrl_func failed\n");
  115|      0|        goto end;
  116|      0|    }
  117|      1|    if (!ENGINE_set_destroy_function(e, gost_engine_destroy)
  118|      1|        || !ENGINE_set_init_function(e, gost_engine_init)
  119|      1|        || !ENGINE_set_finish_function(e, gost_engine_finish)) {
  120|      0|        goto end;
  121|      0|    }
  122|       |
  123|      1|    if (!register_ameth_gost
  124|      1|        (NID_id_GostR3410_94, &ameth_GostR3410_94, "GOST94",
  125|      1|         "GOST R 34.10-94"))
  126|      0|        goto end;
  127|      1|    if (!register_ameth_gost
  128|      1|        (NID_id_GostR3410_2001, &ameth_GostR3410_2001, "GOST2001",
  129|      1|         "GOST R 34.10-2001"))
  130|      0|        goto end;
  131|      1|    if (!register_ameth_gost(NID_id_Gost28147_89_MAC, &ameth_Gost28147_MAC,
  132|      1|                             "GOST-MAC", "GOST 28147-89 MAC"))
  133|      0|        goto end;
  134|       |
  135|      1|    if (!register_pmeth_gost(NID_id_GostR3410_94, &pmeth_GostR3410_94, 0))
  136|      0|        goto end;
  137|      1|    if (!register_pmeth_gost(NID_id_GostR3410_2001, &pmeth_GostR3410_2001, 0))
  138|      0|        goto end;
  139|      1|    if (!register_pmeth_gost
  140|      1|        (NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))
  141|      0|        goto end;
  142|      1|    if (!ENGINE_register_ciphers(e)
  143|      1|        || !ENGINE_register_digests(e)
  144|      1|        || !ENGINE_register_pkey_meths(e)
  145|       |        /* These two actually should go in LIST_ADD command */
  146|      1|        || !EVP_add_cipher(&cipher_gost)
  147|      1|        || !EVP_add_cipher(&cipher_gost_cpacnt)
  148|      1|        || !EVP_add_digest(&digest_gost)
  149|      1|        || !EVP_add_digest(&imit_gost_cpa)
  150|      1|        ) {
  151|      0|        goto end;
  152|      0|    }
  153|       |
  154|      1|    ERR_load_GOST_strings();
  155|      1|    ret = 1;
  156|      1| end:
  157|      1|    return ret;
  158|      1|}
gost_eng.c:gost_digests:
  166|      2|{
  167|      2|    int ok = 1;
  168|      2|    if (!digest) {
  169|      2|        *nids = gost_digest_nids;
  170|      2|        return 2;
  171|      2|    }
  172|       |    /*
  173|       |     * printf("Digest no %d requested\n",nid);
  174|       |     */
  175|      0|    if (nid == NID_id_GostR3411_94) {
  176|      0|        *digest = &digest_gost;
  177|      0|    } else if (nid == NID_id_Gost28147_89_MAC) {
  178|      0|        *digest = &imit_gost_cpa;
  179|      0|    } else {
  180|      0|        ok = 0;
  181|      0|        *digest = NULL;
  182|      0|    }
  183|      0|    return ok;
  184|      2|}
gost_eng.c:gost_ciphers:
  188|      2|{
  189|      2|    int ok = 1;
  190|      2|    if (!cipher) {
  191|      2|        *nids = gost_cipher_nids;
  192|      2|        return 2;               /* two ciphers are supported */
  193|      2|    }
  194|       |
  195|      0|    if (nid == NID_id_Gost28147_89) {
  196|      0|        *cipher = &cipher_gost;
  197|      0|    } else if (nid == NID_gost89_cnt) {
  198|      0|        *cipher = &cipher_gost_cpacnt;
  199|      0|    } else {
  200|      0|        ok = 0;
  201|      0|        *cipher = NULL;
  202|      0|    }
  203|      0|    return ok;
  204|      2|}
gost_eng.c:gost_pkey_meths:
  208|      2|{
  209|      2|    if (!pmeth) {
  210|      2|        *nids = gost_pkey_meth_nids;
  211|      2|        return 3;
  212|      2|    }
  213|       |
  214|      0|    switch (nid) {
  215|      0|    case NID_id_GostR3410_94:
  216|      0|        *pmeth = pmeth_GostR3410_94;
  217|      0|        return 1;
  218|      0|    case NID_id_GostR3410_2001:
  219|      0|        *pmeth = pmeth_GostR3410_2001;
  220|      0|        return 1;
  221|      0|    case NID_id_Gost28147_89_MAC:
  222|      0|        *pmeth = pmeth_Gost28147_MAC;
  223|      0|        return 1;
  224|      0|    default:;
  225|      0|    }
  226|       |
  227|      0|    *pmeth = NULL;
  228|      0|    return 0;
  229|      0|}

register_pmeth_gost:
  567|      3|{
  568|      3|    *pmeth = EVP_PKEY_meth_new(id, flags);
  569|      3|    if (!*pmeth)
  570|      0|        return 0;
  571|       |
  572|      3|    switch (id) {
  573|      1|    case NID_id_GostR3410_94:
  574|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl94_str);
  575|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost94cp_keygen);
  576|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost94_cp_sign);
  577|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost94_cp_verify);
  578|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  579|      1|                                  pkey_gost_encrypt_init,
  580|      1|                                  pkey_GOST94cp_encrypt);
  581|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST94cp_decrypt);
  582|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  583|      1|                                 pkey_gost_derive_init, pkey_gost94_derive);
  584|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  585|      1|                                   pkey_gost94_paramgen);
  586|      1|        break;
  587|      1|    case NID_id_GostR3410_2001:
  588|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl01_str);
  589|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost01_cp_sign);
  590|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost01_cp_verify);
  591|       |
  592|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost01cp_keygen);
  593|       |
  594|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  595|      1|                                  pkey_gost_encrypt_init,
  596|      1|                                  pkey_GOST01cp_encrypt);
  597|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST01cp_decrypt);
  598|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  599|      1|                                 pkey_gost_derive_init, pkey_gost2001_derive);
  600|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  601|      1|                                   pkey_gost01_paramgen);
  602|      1|        break;
  603|      1|    case NID_id_Gost28147_89_MAC:
  604|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_mac_ctrl,
  605|      1|                               pkey_gost_mac_ctrl_str);
  606|      1|        EVP_PKEY_meth_set_signctx(*pmeth, pkey_gost_mac_signctx_init,
  607|      1|                                  pkey_gost_mac_signctx);
  608|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost_mac_keygen);
  609|      1|        EVP_PKEY_meth_set_init(*pmeth, pkey_gost_mac_init);
  610|      1|        EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_mac_cleanup);
  611|      1|        EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_mac_copy);
  612|      1|        return 1;
  613|      0|    default:                   /* Unsupported method */
  614|      0|        return 0;
  615|      3|    }
  616|      2|    EVP_PKEY_meth_set_init(*pmeth, pkey_gost_init);
  617|      2|    EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_cleanup);
  618|       |
  619|      2|    EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_copy);
  620|       |    /*
  621|       |     * FIXME derive etc...
  622|       |     */
  623|       |
  624|      2|    return 1;
  625|      3|}

ENGINE_load_4758cca:
  264|      1|{
  265|      1|    ENGINE *e_4758 = engine_4758_cca();
  266|      1|    if (!e_4758)
  267|      0|        return;
  268|      1|    ENGINE_add(e_4758);
  269|      1|    ENGINE_free(e_4758);
  270|      1|    ERR_clear_error();
  271|      1|}
e_4758cca.c:engine_4758_cca:
  252|      1|{
  253|      1|    ENGINE *ret = ENGINE_new();
  254|      1|    if (!ret)
  255|      0|        return NULL;
  256|      1|    if (!bind_helper(ret)) {
  257|      0|        ENGINE_free(ret);
  258|      0|        return NULL;
  259|      0|    }
  260|      1|    return ret;
  261|      1|}
e_4758cca.c:bind_helper:
  228|      1|{
  229|      1|    if (!ENGINE_set_id(e, engine_4758_cca_id) ||
  230|      1|        !ENGINE_set_name(e, engine_4758_cca_name) ||
  231|      1|#  ifndef OPENSSL_NO_RSA
  232|      1|        !ENGINE_set_RSA(e, &ibm_4758_cca_rsa) ||
  233|      1|#  endif
  234|      1|        !ENGINE_set_RAND(e, &ibm_4758_cca_rand) ||
  235|      1|        !ENGINE_set_destroy_function(e, ibm_4758_cca_destroy) ||
  236|      1|        !ENGINE_set_init_function(e, ibm_4758_cca_init) ||
  237|      1|        !ENGINE_set_finish_function(e, ibm_4758_cca_finish) ||
  238|      1|        !ENGINE_set_ctrl_function(e, ibm_4758_cca_ctrl) ||
  239|      1|#  ifndef OPENSSL_NO_RSA
  240|      1|        !ENGINE_set_load_privkey_function(e, ibm_4758_load_privkey) ||
  241|      1|        !ENGINE_set_load_pubkey_function(e, ibm_4758_load_pubkey) ||
  242|      1|#  endif
  243|      1|        !ENGINE_set_cmd_defns(e, cca4758_cmd_defns))
  244|      0|        return 0;
  245|       |    /* Ensure the error handling is set up */
  246|      1|    ERR_load_CCA4758_strings();
  247|      1|    return 1;
  248|      1|}
e_4758cca.c:ibm_4758_cca_init:
  282|      1|{
  283|      1|    if (dso) {
  284|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_ALREADY_LOADED);
  285|      0|        goto err;
  286|      0|    }
  287|       |
  288|      1|    dso = DSO_load(NULL, get_CCA4758_LIB_NAME(), NULL, 0);
  289|      1|    if (!dso) {
  290|      1|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  291|      1|        goto err;
  292|      1|    }
  293|      0|#  ifndef OPENSSL_NO_RSA
  294|      0|    if (!(keyRecordRead = (F_KEYRECORDREAD)
  295|      0|          DSO_bind_func(dso, n_keyRecordRead)) ||
  296|      0|        !(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  297|      0|          DSO_bind_func(dso, n_randomNumberGenerate)) ||
  298|      0|        !(digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE)
  299|      0|          DSO_bind_func(dso, n_digitalSignatureGenerate)) ||
  300|      0|        !(digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)
  301|      0|          DSO_bind_func(dso, n_digitalSignatureVerify)) ||
  302|      0|        !(publicKeyExtract = (F_PUBLICKEYEXTRACT)
  303|      0|          DSO_bind_func(dso, n_publicKeyExtract)) ||
  304|      0|        !(pkaEncrypt = (F_PKAENCRYPT)
  305|      0|          DSO_bind_func(dso, n_pkaEncrypt)) || !(pkaDecrypt = (F_PKADECRYPT)
  306|      0|                                                 DSO_bind_func(dso,
  307|      0|                                                               n_pkaDecrypt)))
  308|      0|    {
  309|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  310|      0|        goto err;
  311|      0|    }
  312|       |#  else
  313|       |    if (!(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  314|       |          DSO_bind_func(dso, n_randomNumberGenerate))) {
  315|       |        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  316|       |        goto err;
  317|       |    }
  318|       |#  endif
  319|       |
  320|      0|#  ifndef OPENSSL_NO_RSA
  321|      0|    hndidx = RSA_get_ex_new_index(0, "IBM 4758 CCA RSA key handle",
  322|      0|                                  NULL, NULL, cca_ex_free);
  323|      0|#  endif
  324|       |
  325|      0|    return 1;
  326|      1| err:
  327|      1|    if (dso)
  328|      0|        DSO_free(dso);
  329|      1|    dso = NULL;
  330|       |
  331|      1|#  ifndef OPENSSL_NO_RSA
  332|      1|    keyRecordRead = (F_KEYRECORDREAD) 0;
  333|      1|    digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE) 0;
  334|      1|    digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)0;
  335|      1|    publicKeyExtract = (F_PUBLICKEYEXTRACT)0;
  336|      1|    pkaEncrypt = (F_PKAENCRYPT) 0;
  337|      1|    pkaDecrypt = (F_PKADECRYPT) 0;
  338|      1|#  endif
  339|      1|    randomNumberGenerate = (F_RANDOMNUMBERGENERATE) 0;
  340|      1|    return 0;
  341|      0|}
e_4758cca.c:get_CCA4758_LIB_NAME:
  142|      1|{
  143|      1|    if (CCA4758_LIB_NAME)
  144|      0|        return CCA4758_LIB_NAME;
  145|      1|    return CCA_LIB_NAME;
  146|      1|}

e_4758cca.c:ERR_CCA4758_error:
  149|      1|{
  150|      1|    if (CCA4758_lib_error_code == 0)
  151|      0|        CCA4758_lib_error_code = ERR_get_next_error_library();
  152|      1|    ERR_PUT_error(CCA4758_lib_error_code, function, reason, file, line);
  153|      1|}
e_4758cca.c:ERR_load_CCA4758_strings:
  115|      1|{
  116|      1|    if (CCA4758_lib_error_code == 0)
  117|      1|        CCA4758_lib_error_code = ERR_get_next_error_library();
  118|       |
  119|      1|    if (CCA4758_error_init) {
  120|      1|        CCA4758_error_init = 0;
  121|      1|#ifndef OPENSSL_NO_ERR
  122|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_functs);
  123|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_reasons);
  124|      1|#endif
  125|       |
  126|       |#ifdef CCA4758_LIB_NAME
  127|       |        CCA4758_lib_name->error = ERR_PACK(CCA4758_lib_error_code, 0, 0);
  128|       |        ERR_load_strings(0, CCA4758_lib_name);
  129|       |#endif
  130|      1|    }
  131|      1|}

ENGINE_load_aep:
  373|      1|{
  374|       |    /* Copied from eng_[openssl|dyn].c */
  375|      1|    ENGINE *toadd = engine_aep();
  376|      1|    if (!toadd)
  377|      0|        return;
  378|      1|    ENGINE_add(toadd);
  379|      1|    ENGINE_free(toadd);
  380|      1|    ERR_clear_error();
  381|      1|}
e_aep.c:engine_aep:
  361|      1|{
  362|      1|    ENGINE *ret = ENGINE_new();
  363|      1|    if (!ret)
  364|      0|        return NULL;
  365|      1|    if (!bind_aep(ret)) {
  366|      0|        ENGINE_free(ret);
  367|      0|        return NULL;
  368|      0|    }
  369|      1|    return ret;
  370|      1|}
e_aep.c:bind_aep:
  271|      1|{
  272|      1|#  ifndef OPENSSL_NO_RSA
  273|      1|    const RSA_METHOD *meth1;
  274|      1|#  endif
  275|      1|#  ifndef OPENSSL_NO_DSA
  276|      1|    const DSA_METHOD *meth2;
  277|      1|#  endif
  278|      1|#  ifndef OPENSSL_NO_DH
  279|      1|    const DH_METHOD *meth3;
  280|      1|#  endif
  281|       |
  282|      1|    if (!ENGINE_set_id(e, engine_aep_id) ||
  283|      1|        !ENGINE_set_name(e, engine_aep_name) ||
  284|      1|#  ifndef OPENSSL_NO_RSA
  285|      1|        !ENGINE_set_RSA(e, &aep_rsa) ||
  286|      1|#  endif
  287|      1|#  ifndef OPENSSL_NO_DSA
  288|      1|        !ENGINE_set_DSA(e, &aep_dsa) ||
  289|      1|#  endif
  290|      1|#  ifndef OPENSSL_NO_DH
  291|      1|        !ENGINE_set_DH(e, &aep_dh) ||
  292|      1|#  endif
  293|       |#  ifdef AEPRAND
  294|       |        !ENGINE_set_RAND(e, &aep_random) ||
  295|       |#  endif
  296|      1|        !ENGINE_set_init_function(e, aep_init) ||
  297|      1|        !ENGINE_set_destroy_function(e, aep_destroy) ||
  298|      1|        !ENGINE_set_finish_function(e, aep_finish) ||
  299|      1|        !ENGINE_set_ctrl_function(e, aep_ctrl) ||
  300|      1|        !ENGINE_set_cmd_defns(e, aep_cmd_defns))
  301|      0|        return 0;
  302|       |
  303|      1|#  ifndef OPENSSL_NO_RSA
  304|       |    /*
  305|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  306|       |     * aep-specific mod_exp and mod_exp_crt so we use those functions. NB: We
  307|       |     * don't use ENGINE_openssl() or anything "more generic" because
  308|       |     * something like the RSAref code may not hook properly, and if you own
  309|       |     * one of these cards then you have the right to do RSA operations on it
  310|       |     * anyway!
  311|       |     */
  312|      1|    meth1 = RSA_PKCS1_SSLeay();
  313|      1|    aep_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  314|      1|    aep_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  315|      1|    aep_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  316|      1|    aep_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  317|      1|#  endif
  318|       |
  319|      1|#  ifndef OPENSSL_NO_DSA
  320|       |    /*
  321|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  322|       |     */
  323|      1|    meth2 = DSA_OpenSSL();
  324|      1|    aep_dsa.dsa_do_sign = meth2->dsa_do_sign;
  325|      1|    aep_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  326|      1|    aep_dsa.dsa_do_verify = meth2->dsa_do_verify;
  327|       |
  328|      1|    aep_dsa = *DSA_get_default_method();
  329|      1|    aep_dsa.dsa_mod_exp = aep_dsa_mod_exp;
  330|      1|    aep_dsa.bn_mod_exp = aep_mod_exp_dsa;
  331|      1|#  endif
  332|       |
  333|      1|#  ifndef OPENSSL_NO_DH
  334|       |    /* Much the same for Diffie-Hellman */
  335|      1|    meth3 = DH_OpenSSL();
  336|      1|    aep_dh.generate_key = meth3->generate_key;
  337|      1|    aep_dh.compute_key = meth3->compute_key;
  338|      1|    aep_dh.bn_mod_exp = meth3->bn_mod_exp;
  339|      1|#  endif
  340|       |
  341|       |    /* Ensure the aep error handling is set up */
  342|      1|    ERR_load_AEPHK_strings();
  343|       |
  344|      1|    return 1;
  345|      1|}

e_aep.c:ERR_load_AEPHK_strings:
  121|      1|{
  122|      1|    if (AEPHK_lib_error_code == 0)
  123|      1|        AEPHK_lib_error_code = ERR_get_next_error_library();
  124|       |
  125|      1|    if (AEPHK_error_init) {
  126|      1|        AEPHK_error_init = 0;
  127|      1|#ifndef OPENSSL_NO_ERR
  128|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_functs);
  129|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_reasons);
  130|      1|#endif
  131|       |
  132|       |#ifdef AEPHK_LIB_NAME
  133|       |        AEPHK_lib_name->error = ERR_PACK(AEPHK_lib_error_code, 0, 0);
  134|       |        ERR_load_strings(0, AEPHK_lib_name);
  135|       |#endif
  136|      1|    }
  137|      1|}

ENGINE_load_atalla:
  279|      1|{
  280|       |    /* Copied from eng_[openssl|dyn].c */
  281|      1|    ENGINE *toadd = engine_atalla();
  282|      1|    if (!toadd)
  283|      0|        return;
  284|      1|    ENGINE_add(toadd);
  285|      1|    ENGINE_free(toadd);
  286|      1|    ERR_clear_error();
  287|      1|}
e_atalla.c:engine_atalla:
  267|      1|{
  268|      1|    ENGINE *ret = ENGINE_new();
  269|      1|    if (!ret)
  270|      0|        return NULL;
  271|      1|    if (!bind_helper(ret)) {
  272|      0|        ENGINE_free(ret);
  273|      0|        return NULL;
  274|      0|    }
  275|      1|    return ret;
  276|      1|}
e_atalla.c:bind_helper:
  199|      1|{
  200|      1|#  ifndef OPENSSL_NO_RSA
  201|      1|    const RSA_METHOD *meth1;
  202|      1|#  endif
  203|      1|#  ifndef OPENSSL_NO_DSA
  204|      1|    const DSA_METHOD *meth2;
  205|      1|#  endif
  206|      1|#  ifndef OPENSSL_NO_DH
  207|      1|    const DH_METHOD *meth3;
  208|      1|#  endif
  209|      1|    if (!ENGINE_set_id(e, engine_atalla_id) ||
  210|      1|        !ENGINE_set_name(e, engine_atalla_name) ||
  211|      1|#  ifndef OPENSSL_NO_RSA
  212|      1|        !ENGINE_set_RSA(e, &atalla_rsa) ||
  213|      1|#  endif
  214|      1|#  ifndef OPENSSL_NO_DSA
  215|      1|        !ENGINE_set_DSA(e, &atalla_dsa) ||
  216|      1|#  endif
  217|      1|#  ifndef OPENSSL_NO_DH
  218|      1|        !ENGINE_set_DH(e, &atalla_dh) ||
  219|      1|#  endif
  220|      1|        !ENGINE_set_destroy_function(e, atalla_destroy) ||
  221|      1|        !ENGINE_set_init_function(e, atalla_init) ||
  222|      1|        !ENGINE_set_finish_function(e, atalla_finish) ||
  223|      1|        !ENGINE_set_ctrl_function(e, atalla_ctrl) ||
  224|      1|        !ENGINE_set_cmd_defns(e, atalla_cmd_defns))
  225|      0|        return 0;
  226|       |
  227|      1|#  ifndef OPENSSL_NO_RSA
  228|       |    /*
  229|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  230|       |     * atalla-specific mod_exp and mod_exp_crt so we use those functions. NB:
  231|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  232|       |     * something like the RSAref code may not hook properly, and if you own
  233|       |     * one of these cards then you have the right to do RSA operations on it
  234|       |     * anyway!
  235|       |     */
  236|      1|    meth1 = RSA_PKCS1_SSLeay();
  237|      1|    atalla_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  238|      1|    atalla_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  239|      1|    atalla_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  240|      1|    atalla_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  241|      1|#  endif
  242|       |
  243|      1|#  ifndef OPENSSL_NO_DSA
  244|       |    /*
  245|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  246|       |     */
  247|      1|    meth2 = DSA_OpenSSL();
  248|      1|    atalla_dsa.dsa_do_sign = meth2->dsa_do_sign;
  249|      1|    atalla_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  250|      1|    atalla_dsa.dsa_do_verify = meth2->dsa_do_verify;
  251|      1|#  endif
  252|       |
  253|      1|#  ifndef OPENSSL_NO_DH
  254|       |    /* Much the same for Diffie-Hellman */
  255|      1|    meth3 = DH_OpenSSL();
  256|      1|    atalla_dh.generate_key = meth3->generate_key;
  257|      1|    atalla_dh.compute_key = meth3->compute_key;
  258|      1|#  endif
  259|       |
  260|       |    /* Ensure the atalla error handling is set up */
  261|      1|    ERR_load_ATALLA_strings();
  262|      1|    return 1;
  263|      1|}

e_atalla.c:ERR_load_ATALLA_strings:
  107|      1|{
  108|      1|    if (ATALLA_lib_error_code == 0)
  109|      1|        ATALLA_lib_error_code = ERR_get_next_error_library();
  110|       |
  111|      1|    if (ATALLA_error_init) {
  112|      1|        ATALLA_error_init = 0;
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_functs);
  115|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_reasons);
  116|      1|#endif
  117|       |
  118|      1|#ifdef ATALLA_LIB_NAME
  119|      1|        ATALLA_lib_name->error = ERR_PACK(ATALLA_lib_error_code, 0, 0);
  120|      1|        ERR_load_strings(0, ATALLA_lib_name);
  121|      1|#endif
  122|      1|    }
  123|      1|}

ENGINE_load_chil:
  419|      1|{
  420|       |    /* Copied from eng_[openssl|dyn].c */
  421|      1|    ENGINE *toadd = engine_chil();
  422|      1|    if (!toadd)
  423|      0|        return;
  424|      1|    ENGINE_add(toadd);
  425|      1|    ENGINE_free(toadd);
  426|      1|    ERR_clear_error();
  427|      1|}
e_chil.c:engine_chil:
  407|      1|{
  408|      1|    ENGINE *ret = ENGINE_new();
  409|      1|    if (!ret)
  410|      0|        return NULL;
  411|      1|    if (!bind_helper(ret)) {
  412|      0|        ENGINE_free(ret);
  413|      0|        return NULL;
  414|      0|    }
  415|      1|    return ret;
  416|      1|}
e_chil.c:bind_helper:
  352|      1|{
  353|      1|#  ifndef OPENSSL_NO_RSA
  354|      1|    const RSA_METHOD *meth1;
  355|      1|#  endif
  356|      1|#  ifndef OPENSSL_NO_DH
  357|      1|    const DH_METHOD *meth2;
  358|      1|#  endif
  359|      1|    if (!ENGINE_set_id(e, engine_hwcrhk_id) ||
  360|      1|        !ENGINE_set_name(e, engine_hwcrhk_name) ||
  361|      1|#  ifndef OPENSSL_NO_RSA
  362|      1|        !ENGINE_set_RSA(e, &hwcrhk_rsa) ||
  363|      1|#  endif
  364|      1|#  ifndef OPENSSL_NO_DH
  365|      1|        !ENGINE_set_DH(e, &hwcrhk_dh) ||
  366|      1|#  endif
  367|      1|        !ENGINE_set_RAND(e, &hwcrhk_rand) ||
  368|      1|        !ENGINE_set_destroy_function(e, hwcrhk_destroy) ||
  369|      1|        !ENGINE_set_init_function(e, hwcrhk_init) ||
  370|      1|        !ENGINE_set_finish_function(e, hwcrhk_finish) ||
  371|      1|        !ENGINE_set_ctrl_function(e, hwcrhk_ctrl) ||
  372|      1|        !ENGINE_set_load_privkey_function(e, hwcrhk_load_privkey) ||
  373|      1|        !ENGINE_set_load_pubkey_function(e, hwcrhk_load_pubkey) ||
  374|      1|        !ENGINE_set_cmd_defns(e, hwcrhk_cmd_defns))
  375|      0|        return 0;
  376|       |
  377|      1|#  ifndef OPENSSL_NO_RSA
  378|       |    /*
  379|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  380|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  381|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  382|       |     * something like the RSAref code may not hook properly, and if you own
  383|       |     * one of these cards then you have the right to do RSA operations on it
  384|       |     * anyway!
  385|       |     */
  386|      1|    meth1 = RSA_PKCS1_SSLeay();
  387|      1|    hwcrhk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  388|      1|    hwcrhk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  389|      1|    hwcrhk_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  390|      1|    hwcrhk_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  391|      1|#  endif
  392|       |
  393|      1|#  ifndef OPENSSL_NO_DH
  394|       |    /* Much the same for Diffie-Hellman */
  395|      1|    meth2 = DH_OpenSSL();
  396|      1|    hwcrhk_dh.generate_key = meth2->generate_key;
  397|      1|    hwcrhk_dh.compute_key = meth2->compute_key;
  398|      1|#  endif
  399|       |
  400|       |    /* Ensure the hwcrhk error handling is set up */
  401|      1|    ERR_load_HWCRHK_strings();
  402|      1|    return 1;
  403|      1|}
e_chil.c:hwcrhk_init:
  536|      1|{
  537|      1|    HWCryptoHook_Init_t *p1;
  538|      1|    HWCryptoHook_Finish_t *p2;
  539|      1|    HWCryptoHook_ModExp_t *p3;
  540|      1|#  ifndef OPENSSL_NO_RSA
  541|      1|    HWCryptoHook_RSA_t *p4;
  542|      1|    HWCryptoHook_RSALoadKey_t *p5;
  543|      1|    HWCryptoHook_RSAGetPublicKey_t *p6;
  544|      1|    HWCryptoHook_RSAUnloadKey_t *p7;
  545|      1|#  endif
  546|      1|    HWCryptoHook_RandomBytes_t *p8;
  547|      1|    HWCryptoHook_ModExpCRT_t *p9;
  548|       |
  549|      1|    if (hwcrhk_dso != NULL) {
  550|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_ALREADY_LOADED);
  551|      0|        goto err;
  552|      0|    }
  553|       |    /* Attempt to load libnfhwcrhk.so/nfhwcrhk.dll/whatever. */
  554|      1|    hwcrhk_dso = DSO_load(NULL, get_HWCRHK_LIBNAME(), NULL, 0);
  555|      1|    if (hwcrhk_dso == NULL) {
  556|      1|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  557|      1|        goto err;
  558|      1|    }
  559|      0|    if (!(p1 = (HWCryptoHook_Init_t *)
  560|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Init)) ||
  561|      0|        !(p2 = (HWCryptoHook_Finish_t *)
  562|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Finish)) ||
  563|      0|        !(p3 = (HWCryptoHook_ModExp_t *)
  564|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExp)) ||
  565|      0|#  ifndef OPENSSL_NO_RSA
  566|      0|        !(p4 = (HWCryptoHook_RSA_t *)
  567|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSA)) ||
  568|      0|        !(p5 = (HWCryptoHook_RSALoadKey_t *)
  569|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSALoadKey)) ||
  570|      0|        !(p6 = (HWCryptoHook_RSAGetPublicKey_t *)
  571|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAGetPublicKey)) ||
  572|      0|        !(p7 = (HWCryptoHook_RSAUnloadKey_t *)
  573|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAUnloadKey)) ||
  574|      0|#  endif
  575|      0|        !(p8 = (HWCryptoHook_RandomBytes_t *)
  576|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RandomBytes)) ||
  577|      0|        !(p9 = (HWCryptoHook_ModExpCRT_t *)
  578|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExpCRT))) {
  579|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  580|      0|        goto err;
  581|      0|    }
  582|       |    /* Copy the pointers */
  583|      0|    p_hwcrhk_Init = p1;
  584|      0|    p_hwcrhk_Finish = p2;
  585|      0|    p_hwcrhk_ModExp = p3;
  586|      0|#  ifndef OPENSSL_NO_RSA
  587|      0|    p_hwcrhk_RSA = p4;
  588|      0|    p_hwcrhk_RSALoadKey = p5;
  589|      0|    p_hwcrhk_RSAGetPublicKey = p6;
  590|      0|    p_hwcrhk_RSAUnloadKey = p7;
  591|      0|#  endif
  592|      0|    p_hwcrhk_RandomBytes = p8;
  593|      0|    p_hwcrhk_ModExpCRT = p9;
  594|       |
  595|       |    /*
  596|       |     * Check if the application decided to support dynamic locks, and if it
  597|       |     * does, use them.
  598|       |     */
  599|      0|    if (disable_mutex_callbacks == 0) {
  600|      0|        if (CRYPTO_get_dynlock_create_callback() != NULL &&
  601|      0|            CRYPTO_get_dynlock_lock_callback() != NULL &&
  602|      0|            CRYPTO_get_dynlock_destroy_callback() != NULL) {
  603|      0|            hwcrhk_globals.mutex_init = hwcrhk_mutex_init;
  604|      0|            hwcrhk_globals.mutex_acquire = hwcrhk_mutex_lock;
  605|      0|            hwcrhk_globals.mutex_release = hwcrhk_mutex_unlock;
  606|      0|            hwcrhk_globals.mutex_destroy = hwcrhk_mutex_destroy;
  607|      0|        }
  608|      0|    }
  609|       |
  610|       |    /*
  611|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  612|       |     */
  613|      0|    if (!get_context(&hwcrhk_context, &password_context)) {
  614|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_UNIT_FAILURE);
  615|      0|        goto err;
  616|      0|    }
  617|       |    /* Everything's fine. */
  618|      0|#  ifndef OPENSSL_NO_RSA
  619|      0|    if (hndidx_rsa == -1)
  620|      0|        hndidx_rsa = RSA_get_ex_new_index(0,
  621|      0|                                          "nFast HWCryptoHook RSA key handle",
  622|      0|                                          NULL, NULL, NULL);
  623|      0|#  endif
  624|      0|    return 1;
  625|      1| err:
  626|      1|    if (hwcrhk_dso)
  627|      0|        DSO_free(hwcrhk_dso);
  628|      1|    hwcrhk_dso = NULL;
  629|      1|    p_hwcrhk_Init = NULL;
  630|      1|    p_hwcrhk_Finish = NULL;
  631|      1|    p_hwcrhk_ModExp = NULL;
  632|      1|#  ifndef OPENSSL_NO_RSA
  633|      1|    p_hwcrhk_RSA = NULL;
  634|      1|    p_hwcrhk_RSALoadKey = NULL;
  635|      1|    p_hwcrhk_RSAGetPublicKey = NULL;
  636|      1|    p_hwcrhk_RSAUnloadKey = NULL;
  637|      1|#  endif
  638|      1|    p_hwcrhk_ModExpCRT = NULL;
  639|      1|    p_hwcrhk_RandomBytes = NULL;
  640|      1|    return 0;
  641|      0|}
e_chil.c:get_HWCRHK_LIBNAME:
  471|      1|{
  472|      1|    if (HWCRHK_LIBNAME)
  473|      0|        return HWCRHK_LIBNAME;
  474|      1|    return "nfhwcrhk";
  475|      1|}

e_chil.c:ERR_HWCRHK_error:
  153|      1|{
  154|      1|    if (HWCRHK_lib_error_code == 0)
  155|      0|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  156|      1|    ERR_PUT_error(HWCRHK_lib_error_code, function, reason, file, line);
  157|      1|}
e_chil.c:ERR_load_HWCRHK_strings:
  119|      1|{
  120|      1|    if (HWCRHK_lib_error_code == 0)
  121|      1|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  122|       |
  123|      1|    if (HWCRHK_error_init) {
  124|      1|        HWCRHK_error_init = 0;
  125|      1|#ifndef OPENSSL_NO_ERR
  126|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_functs);
  127|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_reasons);
  128|      1|#endif
  129|       |
  130|      1|#ifdef HWCRHK_LIB_NAME
  131|      1|        HWCRHK_lib_name->error = ERR_PACK(HWCRHK_lib_error_code, 0, 0);
  132|      1|        ERR_load_strings(0, HWCRHK_lib_name);
  133|      1|#endif
  134|      1|    }
  135|      1|}

ENGINE_load_cswift:
  302|      1|{
  303|       |    /* Copied from eng_[openssl|dyn].c */
  304|      1|    ENGINE *toadd = engine_cswift();
  305|      1|    if (!toadd)
  306|      0|        return;
  307|      1|    ENGINE_add(toadd);
  308|      1|    ENGINE_free(toadd);
  309|      1|    ERR_clear_error();
  310|      1|}
e_cswift.c:engine_cswift:
  290|      1|{
  291|      1|    ENGINE *ret = ENGINE_new();
  292|      1|    if (!ret)
  293|      0|        return NULL;
  294|      1|    if (!bind_helper(ret)) {
  295|      0|        ENGINE_free(ret);
  296|      0|        return NULL;
  297|      0|    }
  298|      1|    return ret;
  299|      1|}
e_cswift.c:bind_helper:
  234|      1|{
  235|      1|#  ifndef OPENSSL_NO_RSA
  236|      1|    const RSA_METHOD *meth1;
  237|      1|#  endif
  238|      1|#  ifndef OPENSSL_NO_DH
  239|      1|    const DH_METHOD *meth2;
  240|      1|#  endif
  241|      1|    if (!ENGINE_set_id(e, engine_cswift_id) ||
  242|      1|        !ENGINE_set_name(e, engine_cswift_name) ||
  243|      1|#  ifndef OPENSSL_NO_RSA
  244|      1|        !ENGINE_set_RSA(e, &cswift_rsa) ||
  245|      1|#  endif
  246|      1|#  ifndef OPENSSL_NO_DSA
  247|      1|        !ENGINE_set_DSA(e, &cswift_dsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DH
  250|      1|        !ENGINE_set_DH(e, &cswift_dh) ||
  251|      1|#  endif
  252|      1|        !ENGINE_set_RAND(e, &cswift_random) ||
  253|      1|        !ENGINE_set_destroy_function(e, cswift_destroy) ||
  254|      1|        !ENGINE_set_init_function(e, cswift_init) ||
  255|      1|        !ENGINE_set_finish_function(e, cswift_finish) ||
  256|      1|        !ENGINE_set_ctrl_function(e, cswift_ctrl) ||
  257|      1|        !ENGINE_set_cmd_defns(e, cswift_cmd_defns))
  258|      0|        return 0;
  259|       |
  260|      1|#  ifndef OPENSSL_NO_RSA
  261|       |    /*
  262|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  263|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  264|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  265|       |     * something like the RSAref code may not hook properly, and if you own
  266|       |     * one of these cards then you have the right to do RSA operations on it
  267|       |     * anyway!
  268|       |     */
  269|      1|    meth1 = RSA_PKCS1_SSLeay();
  270|      1|    cswift_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  271|      1|    cswift_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  272|      1|    cswift_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  273|      1|    cswift_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  274|      1|#  endif
  275|       |
  276|      1|#  ifndef OPENSSL_NO_DH
  277|       |    /* Much the same for Diffie-Hellman */
  278|      1|    meth2 = DH_OpenSSL();
  279|      1|    cswift_dh.generate_key = meth2->generate_key;
  280|      1|    cswift_dh.compute_key = meth2->compute_key;
  281|      1|#  endif
  282|       |
  283|       |    /* Ensure the cswift error handling is set up */
  284|      1|    ERR_load_CSWIFT_strings();
  285|      1|    return 1;
  286|      1|}
e_cswift.c:cswift_init:
  391|      1|{
  392|      1|    SW_CONTEXT_HANDLE hac;
  393|      1|    t_swAcquireAccContext *p1;
  394|      1|    t_swAttachKeyParam *p2;
  395|      1|    t_swSimpleRequest *p3;
  396|      1|    t_swReleaseAccContext *p4;
  397|       |
  398|      1|    if (cswift_dso != NULL) {
  399|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_ALREADY_LOADED);
  400|      0|        goto err;
  401|      0|    }
  402|       |    /* Attempt to load libswift.so/swift.dll/whatever. */
  403|      1|    cswift_dso = DSO_load(NULL, get_CSWIFT_LIBNAME(), NULL, 0);
  404|      1|    if (cswift_dso == NULL) {
  405|      1|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  406|      1|        goto err;
  407|      1|    }
  408|      0|    if (!(p1 = (t_swAcquireAccContext *)
  409|      0|          DSO_bind_func(cswift_dso, CSWIFT_F1)) ||
  410|      0|        !(p2 = (t_swAttachKeyParam *)
  411|      0|          DSO_bind_func(cswift_dso, CSWIFT_F2)) ||
  412|      0|        !(p3 = (t_swSimpleRequest *)
  413|      0|          DSO_bind_func(cswift_dso, CSWIFT_F3)) ||
  414|      0|        !(p4 = (t_swReleaseAccContext *)
  415|      0|          DSO_bind_func(cswift_dso, CSWIFT_F4))) {
  416|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  417|      0|        goto err;
  418|      0|    }
  419|       |    /* Copy the pointers */
  420|      0|    p_CSwift_AcquireAccContext = p1;
  421|      0|    p_CSwift_AttachKeyParam = p2;
  422|      0|    p_CSwift_SimpleRequest = p3;
  423|      0|    p_CSwift_ReleaseAccContext = p4;
  424|       |    /*
  425|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  426|       |     */
  427|      0|    if (!get_context(&hac)) {
  428|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_UNIT_FAILURE);
  429|      0|        goto err;
  430|      0|    }
  431|      0|    release_context(hac);
  432|       |    /* Everything's fine. */
  433|      0|    return 1;
  434|      1| err:
  435|      1|    if (cswift_dso) {
  436|      0|        DSO_free(cswift_dso);
  437|      0|        cswift_dso = NULL;
  438|      0|    }
  439|      1|    p_CSwift_AcquireAccContext = NULL;
  440|      1|    p_CSwift_AttachKeyParam = NULL;
  441|      1|    p_CSwift_SimpleRequest = NULL;
  442|      1|    p_CSwift_ReleaseAccContext = NULL;
  443|      1|    return 0;
  444|      0|}
e_cswift.c:get_CSWIFT_LIBNAME:
  333|      1|{
  334|      1|    if (CSWIFT_LIBNAME)
  335|      0|        return CSWIFT_LIBNAME;
  336|      1|    return "swift";
  337|      1|}

e_cswift.c:ERR_CSWIFT_error:
  146|      1|{
  147|      1|    if (CSWIFT_lib_error_code == 0)
  148|      0|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  149|      1|    ERR_PUT_error(CSWIFT_lib_error_code, function, reason, file, line);
  150|      1|}
e_cswift.c:ERR_load_CSWIFT_strings:
  112|      1|{
  113|      1|    if (CSWIFT_lib_error_code == 0)
  114|      1|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  115|       |
  116|      1|    if (CSWIFT_error_init) {
  117|      1|        CSWIFT_error_init = 0;
  118|      1|#ifndef OPENSSL_NO_ERR
  119|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_functs);
  120|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_reasons);
  121|      1|#endif
  122|       |
  123|      1|#ifdef CSWIFT_LIB_NAME
  124|      1|        CSWIFT_lib_name->error = ERR_PACK(CSWIFT_lib_error_code, 0, 0);
  125|      1|        ERR_load_strings(0, CSWIFT_lib_name);
  126|      1|#endif
  127|      1|    }
  128|      1|}

ENGINE_load_nuron:
  407|      1|{
  408|       |    /* Copied from eng_[openssl|dyn].c */
  409|      1|    ENGINE *toadd = engine_nuron();
  410|      1|    if (!toadd)
  411|      0|        return;
  412|      1|    ENGINE_add(toadd);
  413|      1|    ENGINE_free(toadd);
  414|      1|    ERR_clear_error();
  415|      1|}
e_nuron.c:engine_nuron:
  395|      1|{
  396|      1|    ENGINE *ret = ENGINE_new();
  397|      1|    if (!ret)
  398|      0|        return NULL;
  399|      1|    if (!bind_helper(ret)) {
  400|      0|        ENGINE_free(ret);
  401|      0|        return NULL;
  402|      0|    }
  403|      1|    return ret;
  404|      1|}
e_nuron.c:bind_helper:
  327|      1|{
  328|      1|#  ifndef OPENSSL_NO_RSA
  329|      1|    const RSA_METHOD *meth1;
  330|      1|#  endif
  331|      1|#  ifndef OPENSSL_NO_DSA
  332|      1|    const DSA_METHOD *meth2;
  333|      1|#  endif
  334|      1|#  ifndef OPENSSL_NO_DH
  335|      1|    const DH_METHOD *meth3;
  336|      1|#  endif
  337|      1|    if (!ENGINE_set_id(e, engine_nuron_id) ||
  338|      1|        !ENGINE_set_name(e, engine_nuron_name) ||
  339|      1|#  ifndef OPENSSL_NO_RSA
  340|      1|        !ENGINE_set_RSA(e, &nuron_rsa) ||
  341|      1|#  endif
  342|      1|#  ifndef OPENSSL_NO_DSA
  343|      1|        !ENGINE_set_DSA(e, &nuron_dsa) ||
  344|      1|#  endif
  345|      1|#  ifndef OPENSSL_NO_DH
  346|      1|        !ENGINE_set_DH(e, &nuron_dh) ||
  347|      1|#  endif
  348|      1|        !ENGINE_set_destroy_function(e, nuron_destroy) ||
  349|      1|        !ENGINE_set_init_function(e, nuron_init) ||
  350|      1|        !ENGINE_set_finish_function(e, nuron_finish) ||
  351|      1|        !ENGINE_set_ctrl_function(e, nuron_ctrl) ||
  352|      1|        !ENGINE_set_cmd_defns(e, nuron_cmd_defns))
  353|      0|        return 0;
  354|       |
  355|      1|#  ifndef OPENSSL_NO_RSA
  356|       |    /*
  357|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  358|       |     * nuron-specific mod_exp and mod_exp_crt so we use those functions. NB:
  359|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  360|       |     * something like the RSAref code may not hook properly, and if you own
  361|       |     * one of these cards then you have the right to do RSA operations on it
  362|       |     * anyway!
  363|       |     */
  364|      1|    meth1 = RSA_PKCS1_SSLeay();
  365|      1|    nuron_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  366|      1|    nuron_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  367|      1|    nuron_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  368|      1|    nuron_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  369|      1|#  endif
  370|       |
  371|      1|#  ifndef OPENSSL_NO_DSA
  372|       |    /*
  373|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  374|       |     */
  375|      1|    meth2 = DSA_OpenSSL();
  376|      1|    nuron_dsa.dsa_do_sign = meth2->dsa_do_sign;
  377|      1|    nuron_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  378|      1|    nuron_dsa.dsa_do_verify = meth2->dsa_do_verify;
  379|      1|#  endif
  380|       |
  381|      1|#  ifndef OPENSSL_NO_DH
  382|       |    /* Much the same for Diffie-Hellman */
  383|      1|    meth3 = DH_OpenSSL();
  384|      1|    nuron_dh.generate_key = meth3->generate_key;
  385|      1|    nuron_dh.compute_key = meth3->compute_key;
  386|      1|#  endif
  387|       |
  388|       |    /* Ensure the nuron error handling is set up */
  389|      1|    ERR_load_NURON_strings();
  390|      1|    return 1;
  391|      1|}

e_nuron.c:ERR_load_NURON_strings:
  104|      1|{
  105|      1|    if (NURON_lib_error_code == 0)
  106|      1|        NURON_lib_error_code = ERR_get_next_error_library();
  107|       |
  108|      1|    if (NURON_error_init) {
  109|      1|        NURON_error_init = 0;
  110|      1|#ifndef OPENSSL_NO_ERR
  111|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_functs);
  112|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_reasons);
  113|      1|#endif
  114|       |
  115|      1|#ifdef NURON_LIB_NAME
  116|      1|        NURON_lib_name->error = ERR_PACK(NURON_lib_error_code, 0, 0);
  117|      1|        ERR_load_strings(0, NURON_lib_name);
  118|      1|#endif
  119|      1|    }
  120|      1|}

ENGINE_load_padlock:
  116|      1|{
  117|       |/* On non-x86 CPUs it just returns. */
  118|       |#   ifdef COMPILE_HW_PADLOCK
  119|       |    ENGINE *toadd = ENGINE_padlock();
  120|       |    if (!toadd)
  121|       |        return;
  122|       |    ENGINE_add(toadd);
  123|       |    ENGINE_free(toadd);
  124|       |    ERR_clear_error();
  125|       |#   endif
  126|      1|}

ENGINE_load_sureware:
  330|      1|{
  331|       |    /* Copied from eng_[openssl|dyn].c */
  332|      1|    ENGINE *toadd = engine_sureware();
  333|      1|    if (!toadd)
  334|      0|        return;
  335|      1|    ENGINE_add(toadd);
  336|      1|    ENGINE_free(toadd);
  337|      1|    ERR_clear_error();
  338|      1|}
e_sureware.c:engine_sureware:
  318|      1|{
  319|      1|    ENGINE *ret = ENGINE_new();
  320|      1|    if (!ret)
  321|      0|        return NULL;
  322|      1|    if (!bind_sureware(ret)) {
  323|      0|        ENGINE_free(ret);
  324|      0|        return NULL;
  325|      0|    }
  326|      1|    return ret;
  327|      1|}
e_sureware.c:bind_sureware:
  233|      1|{
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|      1|    const RSA_METHOD *meth1;
  236|      1|#  endif
  237|      1|#  ifndef OPENSSL_NO_DSA
  238|      1|    const DSA_METHOD *meth2;
  239|      1|#  endif
  240|      1|#  ifndef OPENSSL_NO_DH
  241|      1|    const DH_METHOD *meth3;
  242|      1|#  endif
  243|       |
  244|      1|    if (!ENGINE_set_id(e, engine_sureware_id) ||
  245|      1|        !ENGINE_set_name(e, engine_sureware_name) ||
  246|      1|#  ifndef OPENSSL_NO_RSA
  247|      1|        !ENGINE_set_RSA(e, &surewarehk_rsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DSA
  250|      1|        !ENGINE_set_DSA(e, &surewarehk_dsa) ||
  251|      1|#  endif
  252|      1|#  ifndef OPENSSL_NO_DH
  253|      1|        !ENGINE_set_DH(e, &surewarehk_dh) ||
  254|      1|#  endif
  255|      1|        !ENGINE_set_RAND(e, &surewarehk_rand) ||
  256|      1|        !ENGINE_set_destroy_function(e, surewarehk_destroy) ||
  257|      1|        !ENGINE_set_init_function(e, surewarehk_init) ||
  258|      1|        !ENGINE_set_finish_function(e, surewarehk_finish) ||
  259|      1|        !ENGINE_set_ctrl_function(e, surewarehk_ctrl) ||
  260|      1|        !ENGINE_set_load_privkey_function(e, surewarehk_load_privkey) ||
  261|      1|        !ENGINE_set_load_pubkey_function(e, surewarehk_load_pubkey))
  262|      0|        return 0;
  263|       |
  264|      1|#  ifndef OPENSSL_NO_RSA
  265|       |    /*
  266|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  267|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  268|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  269|       |     * something like the RSAref code may not hook properly, and if you own
  270|       |     * one of these cards then you have the right to do RSA operations on it
  271|       |     * anyway!
  272|       |     */
  273|      1|    meth1 = RSA_PKCS1_SSLeay();
  274|      1|    if (meth1) {
  275|      1|        surewarehk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  276|      1|        surewarehk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  277|      1|    }
  278|      1|#  endif
  279|       |
  280|      1|#  ifndef OPENSSL_NO_DSA
  281|       |    /*
  282|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  283|       |     */
  284|      1|    meth2 = DSA_OpenSSL();
  285|      1|    if (meth2) {
  286|      1|        surewarehk_dsa.dsa_do_verify = meth2->dsa_do_verify;
  287|      1|    }
  288|      1|#  endif
  289|       |
  290|      1|#  ifndef OPENSSL_NO_DH
  291|       |    /* Much the same for Diffie-Hellman */
  292|      1|    meth3 = DH_OpenSSL();
  293|      1|    if (meth3) {
  294|      1|        surewarehk_dh.generate_key = meth3->generate_key;
  295|      1|        surewarehk_dh.compute_key = meth3->compute_key;
  296|      1|    }
  297|      1|#  endif
  298|       |
  299|       |    /* Ensure the sureware error handling is set up */
  300|      1|    ERR_load_SUREWARE_strings();
  301|      1|    return 1;
  302|      1|}
e_sureware.c:surewarehk_init:
  456|      1|{
  457|      1|    char msg[64] = "ENGINE_init";
  458|      1|    SureWareHook_Init_t *p1 = NULL;
  459|      1|    SureWareHook_Finish_t *p2 = NULL;
  460|      1|    SureWareHook_Rand_Bytes_t *p3 = NULL;
  461|      1|    SureWareHook_Rand_Seed_t *p4 = NULL;
  462|      1|    SureWareHook_Load_Privkey_t *p5 = NULL;
  463|      1|    SureWareHook_Load_Rsa_Pubkey_t *p6 = NULL;
  464|      1|    SureWareHook_Free_t *p7 = NULL;
  465|      1|    SureWareHook_Rsa_Priv_Dec_t *p8 = NULL;
  466|      1|    SureWareHook_Rsa_Sign_t *p9 = NULL;
  467|      1|    SureWareHook_Dsa_Sign_t *p12 = NULL;
  468|      1|    SureWareHook_Info_Pubkey_t *p13 = NULL;
  469|      1|    SureWareHook_Load_Dsa_Pubkey_t *p14 = NULL;
  470|      1|    SureWareHook_Mod_Exp_t *p15 = NULL;
  471|       |
  472|      1|    if (surewarehk_dso != NULL) {
  473|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_ALREADY_LOADED);
  474|      0|        goto err;
  475|      0|    }
  476|       |    /* Attempt to load libsurewarehk.so/surewarehk.dll/whatever. */
  477|      1|    surewarehk_dso = DSO_load(NULL, surewarehk_LIBNAME, NULL, 0);
  478|      1|    if (surewarehk_dso == NULL) {
  479|      1|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  480|      1|        goto err;
  481|      1|    }
  482|      0|    if (!
  483|      0|        (p1 =
  484|      0|         (SureWareHook_Init_t *) DSO_bind_func(surewarehk_dso,
  485|      0|                                               n_surewarehk_Init))
  486|      0||| !(p2 =
  487|      0|     (SureWareHook_Finish_t *) DSO_bind_func(surewarehk_dso,
  488|      0|                                             n_surewarehk_Finish))
  489|      0||| !(p3 =
  490|      0|     (SureWareHook_Rand_Bytes_t *) DSO_bind_func(surewarehk_dso,
  491|      0|                                                 n_surewarehk_Rand_Bytes))
  492|      0||| !(p4 =
  493|      0|     (SureWareHook_Rand_Seed_t *) DSO_bind_func(surewarehk_dso,
  494|      0|                                                n_surewarehk_Rand_Seed))
  495|      0||| !(p5 =
  496|      0|     (SureWareHook_Load_Privkey_t *) DSO_bind_func(surewarehk_dso,
  497|      0|                                                   n_surewarehk_Load_Privkey))
  498|      0||| !(p6 =
  499|      0|     (SureWareHook_Load_Rsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  500|      0|                                                      n_surewarehk_Load_Rsa_Pubkey))
  501|      0||| !(p7 =
  502|      0|     (SureWareHook_Free_t *) DSO_bind_func(surewarehk_dso, n_surewarehk_Free))
  503|      0||| !(p8 =
  504|      0|     (SureWareHook_Rsa_Priv_Dec_t *) DSO_bind_func(surewarehk_dso,
  505|      0|                                                   n_surewarehk_Rsa_Priv_Dec))
  506|      0||| !(p9 =
  507|      0|     (SureWareHook_Rsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  508|      0|                                               n_surewarehk_Rsa_Sign))
  509|      0||| !(p12 =
  510|      0|     (SureWareHook_Dsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  511|      0|                                               n_surewarehk_Dsa_Sign))
  512|      0||| !(p13 =
  513|      0|     (SureWareHook_Info_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  514|      0|                                                  n_surewarehk_Info_Pubkey))
  515|      0||| !(p14 =
  516|      0|     (SureWareHook_Load_Dsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  517|      0|                                                      n_surewarehk_Load_Dsa_Pubkey))
  518|      0||| !(p15 =
  519|      0|     (SureWareHook_Mod_Exp_t *) DSO_bind_func(surewarehk_dso,
  520|      0|                                              n_surewarehk_Mod_Exp))) {
  521|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  522|      0|        goto err;
  523|      0|    }
  524|       |    /* Copy the pointers */
  525|      0|    p_surewarehk_Init = p1;
  526|      0|    p_surewarehk_Finish = p2;
  527|      0|    p_surewarehk_Rand_Bytes = p3;
  528|      0|    p_surewarehk_Rand_Seed = p4;
  529|      0|    p_surewarehk_Load_Privkey = p5;
  530|      0|    p_surewarehk_Load_Rsa_Pubkey = p6;
  531|      0|    p_surewarehk_Free = p7;
  532|      0|    p_surewarehk_Rsa_Priv_Dec = p8;
  533|      0|    p_surewarehk_Rsa_Sign = p9;
  534|      0|    p_surewarehk_Dsa_Sign = p12;
  535|      0|    p_surewarehk_Info_Pubkey = p13;
  536|      0|    p_surewarehk_Load_Dsa_Pubkey = p14;
  537|      0|    p_surewarehk_Mod_Exp = p15;
  538|       |    /* Contact the hardware and initialises it. */
  539|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  540|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  541|      0|        goto err;
  542|      0|    }
  543|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  544|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  545|      0|        goto err;
  546|      0|    }
  547|       |    /*
  548|       |     * try to load the default private key, if failed does not return a
  549|       |     * failure but wait for an explicit ENGINE_load_privakey
  550|       |     */
  551|      0|    surewarehk_load_privkey(e, NULL, NULL, NULL);
  552|       |
  553|       |    /* Everything's fine. */
  554|      0|#  ifndef OPENSSL_NO_RSA
  555|      0|    if (rsaHndidx == -1)
  556|      0|        rsaHndidx = RSA_get_ex_new_index(0,
  557|      0|                                         "SureWareHook RSA key handle",
  558|      0|                                         NULL, NULL, surewarehk_ex_free);
  559|      0|#  endif
  560|      0|#  ifndef OPENSSL_NO_DSA
  561|      0|    if (dsaHndidx == -1)
  562|      0|        dsaHndidx = DSA_get_ex_new_index(0,
  563|      0|                                         "SureWareHook DSA key handle",
  564|      0|                                         NULL, NULL, surewarehk_ex_free);
  565|      0|#  endif
  566|       |
  567|      0|    return 1;
  568|      1| err:
  569|      1|    if (surewarehk_dso)
  570|      0|        DSO_free(surewarehk_dso);
  571|      1|    surewarehk_dso = NULL;
  572|      1|    p_surewarehk_Init = NULL;
  573|      1|    p_surewarehk_Finish = NULL;
  574|      1|    p_surewarehk_Rand_Bytes = NULL;
  575|      1|    p_surewarehk_Rand_Seed = NULL;
  576|      1|    p_surewarehk_Load_Privkey = NULL;
  577|      1|    p_surewarehk_Load_Rsa_Pubkey = NULL;
  578|      1|    p_surewarehk_Free = NULL;
  579|      1|    p_surewarehk_Rsa_Priv_Dec = NULL;
  580|      1|    p_surewarehk_Rsa_Sign = NULL;
  581|      1|    p_surewarehk_Dsa_Sign = NULL;
  582|      1|    p_surewarehk_Info_Pubkey = NULL;
  583|      1|    p_surewarehk_Load_Dsa_Pubkey = NULL;
  584|      1|    p_surewarehk_Mod_Exp = NULL;
  585|      1|    return 0;
  586|      0|}

e_sureware.c:ERR_SUREWARE_error:
  150|      1|{
  151|      1|    if (SUREWARE_lib_error_code == 0)
  152|      0|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  153|      1|    ERR_PUT_error(SUREWARE_lib_error_code, function, reason, file, line);
  154|      1|}
e_sureware.c:ERR_load_SUREWARE_strings:
  116|      1|{
  117|      1|    if (SUREWARE_lib_error_code == 0)
  118|      1|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (SUREWARE_error_init) {
  121|      1|        SUREWARE_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_functs);
  124|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef SUREWARE_LIB_NAME
  128|      1|        SUREWARE_lib_name->error = ERR_PACK(SUREWARE_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, SUREWARE_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

ENGINE_load_ubsec:
  278|      1|{
  279|       |    /* Copied from eng_[openssl|dyn].c */
  280|      1|    ENGINE *toadd = engine_ubsec();
  281|      1|    if (!toadd)
  282|      0|        return;
  283|      1|    ENGINE_add(toadd);
  284|      1|    ENGINE_free(toadd);
  285|      1|    ERR_clear_error();
  286|      1|}
e_ubsec.c:engine_ubsec:
  266|      1|{
  267|      1|    ENGINE *ret = ENGINE_new();
  268|      1|    if (!ret)
  269|      0|        return NULL;
  270|      1|    if (!bind_helper(ret)) {
  271|      0|        ENGINE_free(ret);
  272|      0|        return NULL;
  273|      0|    }
  274|      1|    return ret;
  275|      1|}
e_ubsec.c:bind_helper:
  207|      1|{
  208|      1|#  ifndef OPENSSL_NO_RSA
  209|      1|    const RSA_METHOD *meth1;
  210|      1|#  endif
  211|      1|#  ifndef OPENSSL_NO_DH
  212|      1|#   ifndef HAVE_UBSEC_DH
  213|      1|    const DH_METHOD *meth3;
  214|      1|#   endif                       /* HAVE_UBSEC_DH */
  215|      1|#  endif
  216|      1|    if (!ENGINE_set_id(e, engine_ubsec_id) ||
  217|      1|        !ENGINE_set_name(e, engine_ubsec_name) ||
  218|      1|#  ifndef OPENSSL_NO_RSA
  219|      1|        !ENGINE_set_RSA(e, &ubsec_rsa) ||
  220|      1|#  endif
  221|      1|#  ifndef OPENSSL_NO_DSA
  222|      1|        !ENGINE_set_DSA(e, &ubsec_dsa) ||
  223|      1|#  endif
  224|      1|#  ifndef OPENSSL_NO_DH
  225|      1|        !ENGINE_set_DH(e, &ubsec_dh) ||
  226|      1|#  endif
  227|      1|        !ENGINE_set_destroy_function(e, ubsec_destroy) ||
  228|      1|        !ENGINE_set_init_function(e, ubsec_init) ||
  229|      1|        !ENGINE_set_finish_function(e, ubsec_finish) ||
  230|      1|        !ENGINE_set_ctrl_function(e, ubsec_ctrl) ||
  231|      1|        !ENGINE_set_cmd_defns(e, ubsec_cmd_defns))
  232|      0|        return 0;
  233|       |
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|       |    /*
  236|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  237|       |     * Broadcom-specific mod_exp and mod_exp_crt so we use those functions.
  238|       |     * NB: We don't use ENGINE_openssl() or anything "more generic" because
  239|       |     * something like the RSAref code may not hook properly, and if you own
  240|       |     * one of these cards then you have the right to do RSA operations on it
  241|       |     * anyway!
  242|       |     */
  243|      1|    meth1 = RSA_PKCS1_SSLeay();
  244|      1|    ubsec_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  245|      1|    ubsec_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  246|      1|    ubsec_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  247|      1|    ubsec_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  248|      1|#  endif
  249|       |
  250|      1|#  ifndef OPENSSL_NO_DH
  251|      1|#   ifndef HAVE_UBSEC_DH
  252|       |    /* Much the same for Diffie-Hellman */
  253|      1|    meth3 = DH_OpenSSL();
  254|      1|    ubsec_dh.generate_key = meth3->generate_key;
  255|      1|    ubsec_dh.compute_key = meth3->compute_key;
  256|      1|#   endif                       /* HAVE_UBSEC_DH */
  257|      1|#  endif
  258|       |
  259|       |    /* Ensure the ubsec error handling is set up */
  260|      1|    ERR_load_UBSEC_strings();
  261|      1|    return 1;
  262|      1|}

e_ubsec.c:ERR_load_UBSEC_strings:
  116|      1|{
  117|      1|    if (UBSEC_lib_error_code == 0)
  118|      1|        UBSEC_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (UBSEC_error_init) {
  121|      1|        UBSEC_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_functs);
  124|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef UBSEC_LIB_NAME
  128|      1|        UBSEC_lib_name->error = ERR_PACK(UBSEC_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, UBSEC_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

SSL_library_init:
   65|      1|{
   66|       |
   67|      1|#ifndef OPENSSL_NO_DES
   68|      1|    EVP_add_cipher(EVP_des_cbc());
   69|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   70|      1|#endif
   71|      1|#ifndef OPENSSL_NO_IDEA
   72|      1|    EVP_add_cipher(EVP_idea_cbc());
   73|      1|#endif
   74|      1|#ifndef OPENSSL_NO_RC4
   75|      1|    EVP_add_cipher(EVP_rc4());
   76|      1|# if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
   77|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
   78|      1|# endif
   79|      1|#endif
   80|      1|#ifndef OPENSSL_NO_RC2
   81|      1|    EVP_add_cipher(EVP_rc2_cbc());
   82|       |    /*
   83|       |     * Not actually used for SSL/TLS but this makes PKCS#12 work if an
   84|       |     * application only calls SSL_library_init().
   85|       |     */
   86|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
   87|      1|#endif
   88|      1|#ifndef OPENSSL_NO_AES
   89|      1|    EVP_add_cipher(EVP_aes_128_cbc());
   90|      1|    EVP_add_cipher(EVP_aes_192_cbc());
   91|      1|    EVP_add_cipher(EVP_aes_256_cbc());
   92|      1|    EVP_add_cipher(EVP_aes_128_gcm());
   93|      1|    EVP_add_cipher(EVP_aes_256_gcm());
   94|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   95|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
   96|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
   97|      1|# endif
   98|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
   99|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  100|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  101|      1|# endif
  102|       |
  103|      1|#endif
  104|      1|#ifndef OPENSSL_NO_CAMELLIA
  105|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  106|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  107|      1|#endif
  108|       |
  109|      1|#ifndef OPENSSL_NO_SEED
  110|      1|    EVP_add_cipher(EVP_seed_cbc());
  111|      1|#endif
  112|       |
  113|      1|#ifndef OPENSSL_NO_MD5
  114|      1|    EVP_add_digest(EVP_md5());
  115|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
  116|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
  117|      1|#endif
  118|      1|#ifndef OPENSSL_NO_SHA
  119|      1|    EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
  120|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
  121|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
  122|      1|#endif
  123|      1|#ifndef OPENSSL_NO_SHA256
  124|      1|    EVP_add_digest(EVP_sha224());
  125|      1|    EVP_add_digest(EVP_sha256());
  126|      1|#endif
  127|      1|#ifndef OPENSSL_NO_SHA512
  128|      1|    EVP_add_digest(EVP_sha384());
  129|      1|    EVP_add_digest(EVP_sha512());
  130|      1|#endif
  131|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
  132|      1|    EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
  133|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
  134|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
  135|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
  136|      1|#endif
  137|      1|#ifndef OPENSSL_NO_ECDSA
  138|      1|    EVP_add_digest(EVP_ecdsa());
  139|      1|#endif
  140|       |    /* If you want support for phased out ciphers, add the following */
  141|       |#if 0
  142|       |    EVP_add_digest(EVP_sha());
  143|       |    EVP_add_digest(EVP_dss());
  144|       |#endif
  145|      1|#ifndef OPENSSL_NO_COMP
  146|       |    /*
  147|       |     * This will initialise the built-in compression algorithms. The value
  148|       |     * returned is a STACK_OF(SSL_COMP), but that can be discarded safely
  149|       |     */
  150|      1|    (void)SSL_COMP_get_compression_methods();
  151|      1|#endif
  152|       |    /* initialize cipher/digest methods table */
  153|      1|    ssl_load_ciphers();
  154|      1|    return (1);
  155|      1|}

ssl_load_ciphers:
  406|      1|{
  407|      1|    ssl_cipher_methods[SSL_ENC_DES_IDX] = EVP_get_cipherbyname(SN_des_cbc);
  408|      1|    ssl_cipher_methods[SSL_ENC_3DES_IDX] =
  409|      1|        EVP_get_cipherbyname(SN_des_ede3_cbc);
  410|      1|    ssl_cipher_methods[SSL_ENC_RC4_IDX] = EVP_get_cipherbyname(SN_rc4);
  411|      1|    ssl_cipher_methods[SSL_ENC_RC2_IDX] = EVP_get_cipherbyname(SN_rc2_cbc);
  412|      1|#ifndef OPENSSL_NO_IDEA
  413|      1|    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = EVP_get_cipherbyname(SN_idea_cbc);
  414|       |#else
  415|       |    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = NULL;
  416|       |#endif
  417|      1|    ssl_cipher_methods[SSL_ENC_AES128_IDX] =
  418|      1|        EVP_get_cipherbyname(SN_aes_128_cbc);
  419|      1|    ssl_cipher_methods[SSL_ENC_AES256_IDX] =
  420|      1|        EVP_get_cipherbyname(SN_aes_256_cbc);
  421|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA128_IDX] =
  422|      1|        EVP_get_cipherbyname(SN_camellia_128_cbc);
  423|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA256_IDX] =
  424|      1|        EVP_get_cipherbyname(SN_camellia_256_cbc);
  425|      1|    ssl_cipher_methods[SSL_ENC_GOST89_IDX] =
  426|      1|        EVP_get_cipherbyname(SN_gost89_cnt);
  427|      1|    ssl_cipher_methods[SSL_ENC_SEED_IDX] = EVP_get_cipherbyname(SN_seed_cbc);
  428|       |
  429|      1|    ssl_cipher_methods[SSL_ENC_AES128GCM_IDX] =
  430|      1|        EVP_get_cipherbyname(SN_aes_128_gcm);
  431|      1|    ssl_cipher_methods[SSL_ENC_AES256GCM_IDX] =
  432|      1|        EVP_get_cipherbyname(SN_aes_256_gcm);
  433|       |
  434|      1|    ssl_digest_methods[SSL_MD_MD5_IDX] = EVP_get_digestbyname(SN_md5);
  435|      1|    ssl_mac_secret_size[SSL_MD_MD5_IDX] =
  436|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_MD5_IDX]);
  437|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0);
  438|      1|    ssl_digest_methods[SSL_MD_SHA1_IDX] = EVP_get_digestbyname(SN_sha1);
  439|      1|    ssl_mac_secret_size[SSL_MD_SHA1_IDX] =
  440|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA1_IDX]);
  441|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0);
  442|      1|    ssl_digest_methods[SSL_MD_GOST94_IDX] =
  443|      1|        EVP_get_digestbyname(SN_id_GostR3411_94);
  444|      1|    if (ssl_digest_methods[SSL_MD_GOST94_IDX]) {
  445|      1|        ssl_mac_secret_size[SSL_MD_GOST94_IDX] =
  446|      1|            EVP_MD_size(ssl_digest_methods[SSL_MD_GOST94_IDX]);
  447|      1|        OPENSSL_assert(ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0);
  448|      1|    }
  449|      1|    ssl_digest_methods[SSL_MD_GOST89MAC_IDX] =
  450|      1|        EVP_get_digestbyname(SN_id_Gost28147_89_MAC);
  451|      1|    ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX] = get_optional_pkey_id("gost-mac");
  452|      1|    if (ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX]) {
  453|      0|        ssl_mac_secret_size[SSL_MD_GOST89MAC_IDX] = 32;
  454|      0|    }
  455|       |
  456|      1|    ssl_digest_methods[SSL_MD_SHA256_IDX] = EVP_get_digestbyname(SN_sha256);
  457|      1|    ssl_mac_secret_size[SSL_MD_SHA256_IDX] =
  458|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA256_IDX]);
  459|      1|    ssl_digest_methods[SSL_MD_SHA384_IDX] = EVP_get_digestbyname(SN_sha384);
  460|      1|    ssl_mac_secret_size[SSL_MD_SHA384_IDX] =
  461|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA384_IDX]);
  462|      1|}
SSL_COMP_get_compression_methods:
 1961|      1|{
 1962|      1|    load_builtin_compressions();
 1963|      1|    return (ssl_comp_methods);
 1964|      1|}
ssl_ciph.c:get_optional_pkey_id:
  388|      1|{
  389|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  390|      1|    ENGINE *tmpeng = NULL;
  391|      1|    int pkey_id = 0;
  392|      1|    ameth = EVP_PKEY_asn1_find_str(&tmpeng, pkey_name, -1);
  393|      1|    if (ameth) {
  394|      0|        if (EVP_PKEY_asn1_get0_info(&pkey_id, NULL, NULL, NULL, NULL,
  395|      0|                                    ameth) <= 0)
  396|      0|            pkey_id = 0;
  397|      0|    }
  398|      1|    if (tmpeng)
  399|      0|        ENGINE_finish(tmpeng);
  400|      1|    return pkey_id;
  401|      1|}
ssl_ciph.c:load_builtin_compressions:
  472|      1|{
  473|      1|    int got_write_lock = 0;
  474|       |
  475|      1|    CRYPTO_r_lock(CRYPTO_LOCK_SSL);
  476|      1|    if (ssl_comp_methods == NULL) {
  477|      1|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  478|      1|        CRYPTO_w_lock(CRYPTO_LOCK_SSL);
  479|      1|        got_write_lock = 1;
  480|       |
  481|      1|        if (ssl_comp_methods == NULL) {
  482|      1|            SSL_COMP *comp = NULL;
  483|       |
  484|      1|            MemCheck_off();
  485|      1|            ssl_comp_methods = sk_SSL_COMP_new(sk_comp_cmp);
  486|      1|            if (ssl_comp_methods != NULL) {
  487|      1|                comp = (SSL_COMP *)OPENSSL_malloc(sizeof(SSL_COMP));
  488|      1|                if (comp != NULL) {
  489|      1|                    comp->method = COMP_zlib();
  490|      1|                    if (comp->method && comp->method->type == NID_undef)
  491|      1|                        OPENSSL_free(comp);
  492|      0|                    else {
  493|      0|                        comp->id = SSL_COMP_ZLIB_IDX;
  494|      0|                        comp->name = comp->method->name;
  495|      0|                        sk_SSL_COMP_push(ssl_comp_methods, comp);
  496|      0|                    }
  497|      1|                }
  498|      1|                sk_SSL_COMP_sort(ssl_comp_methods);
  499|      1|            }
  500|      1|            MemCheck_on();
  501|      1|        }
  502|      1|    }
  503|       |
  504|      1|    if (got_write_lock)
  505|      1|        CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
  506|      0|    else
  507|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  508|      1|}

ERR_load_SSL_strings:
  832|      1|{
  833|      1|#ifndef OPENSSL_NO_ERR
  834|       |
  835|      1|    if (ERR_func_error_string(SSL_str_functs[0].error) == NULL) {
  836|      1|        ERR_load_strings(0, SSL_str_functs);
  837|      1|        ERR_load_strings(0, SSL_str_reasons);
  838|      1|    }
  839|      1|#endif
  840|      1|}

SSL_load_error_strings:
   64|      1|{
   65|      1|#ifndef OPENSSL_NO_ERR
   66|      1|    ERR_load_crypto_strings();
   67|      1|    ERR_load_SSL_strings();
   68|      1|#endif
   69|      1|}

SSL_get_ex_new_index:
 3286|      4|{
 3287|      4|    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, argl, argp,
 3288|      4|                                   new_func, dup_func, free_func);
 3289|      4|}

adler32_z:
   67|      4|{
   68|      4|    unsigned long sum2;
   69|      4|    unsigned n;
   70|       |
   71|       |    /* split Adler-32 into component sums */
   72|      4|    sum2 = (adler >> 16) & 0xffff;
   73|      4|    adler &= 0xffff;
   74|       |
   75|       |    /* in case user likes doing a byte at a time, keep it fast */
   76|      4|    if (len == 1) {
   77|      0|        adler += buf[0];
   78|      0|        if (adler >= BASE)
   79|      0|            adler -= BASE;
   80|      0|        sum2 += adler;
   81|      0|        if (sum2 >= BASE)
   82|      0|            sum2 -= BASE;
   83|      0|        return adler | (sum2 << 16);
   84|      0|    }
   85|       |
   86|       |    /* initial Adler-32 value (deferred check for len == 1 speed) */
   87|      4|    if (buf == Z_NULL)
   88|      4|        return 1L;
   89|       |
   90|       |    /* in case short lengths are provided, keep it somewhat fast */
   91|      0|    if (len < 16) {
   92|      0|        while (len--) {
   93|      0|            adler += *buf++;
   94|      0|            sum2 += adler;
   95|      0|        }
   96|      0|        if (adler >= BASE)
   97|      0|            adler -= BASE;
   98|      0|        MOD28(sum2);            /* only added so many BASE's */
   99|      0|        return adler | (sum2 << 16);
  100|      0|    }
  101|       |
  102|       |    /* do length NMAX blocks -- requires just one modulo operation */
  103|      0|    while (len >= NMAX) {
  104|      0|        len -= NMAX;
  105|      0|        n = NMAX / 16;          /* NMAX is divisible by 16 */
  106|      0|        do {
  107|      0|            DO16(buf);          /* 16 sums unrolled */
  108|      0|            buf += 16;
  109|      0|        } while (--n);
  110|      0|        MOD(adler);
  111|      0|        MOD(sum2);
  112|      0|    }
  113|       |
  114|       |    /* do remaining bytes (less than NMAX, still just one modulo) */
  115|      0|    if (len) {                  /* avoid modulos if none remaining */
  116|      0|        while (len >= 16) {
  117|      0|            len -= 16;
  118|      0|            DO16(buf);
  119|      0|            buf += 16;
  120|      0|        }
  121|      0|        while (len--) {
  122|      0|            adler += *buf++;
  123|      0|            sum2 += adler;
  124|      0|        }
  125|      0|        MOD(adler);
  126|      0|        MOD(sum2);
  127|      0|    }
  128|       |
  129|       |    /* return recombined sums */
  130|      0|    return adler | (sum2 << 16);
  131|      0|}
adler32:
  138|      4|{
  139|      4|    return adler32_z(adler, buf, len);
  140|      4|}

crc32_z:
  743|    974|{
  744|       |    /* Return initial CRC, if requested. */
  745|    974|    if (buf == Z_NULL) return 0;
  746|       |
  747|       |#ifdef DYNAMIC_CRC_TABLE
  748|       |    once(&made, make_crc_table);
  749|       |#endif /* DYNAMIC_CRC_TABLE */
  750|       |
  751|       |    /* Pre-condition the CRC */
  752|    629|    crc ^= 0xffffffff;
  753|       |
  754|    629|#ifdef W
  755|       |
  756|       |    /* If provided enough bytes, do a braided CRC calculation. */
  757|    629|    if (len >= N * W + W - 1) {
  758|    148|        z_size_t blks;
  759|    148|        z_word_t const *words;
  760|    148|        unsigned endian;
  761|    148|        int k;
  762|       |
  763|       |        /* Compute the CRC up to a z_word_t boundary. */
  764|    176|        while (len && ((z_size_t)buf & (W - 1)) != 0) {
  765|     28|            len--;
  766|     28|            crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
  767|     28|        }
  768|       |
  769|       |        /* Compute the CRC on as many N z_word_t blocks as are available. */
  770|    148|        blks = len / (N * W);
  771|    148|        len -= blks * N * W;
  772|    148|        words = (z_word_t const *)buf;
  773|       |
  774|       |        /* Do endian check at execution time instead of compile time, since ARM
  775|       |           processors can change the endianess at execution time. If the
  776|       |           compiler knows what the endianess will be, it can optimize out the
  777|       |           check and the unused branch. */
  778|    148|        endian = 1;
  779|    148|        if (*(unsigned char *)&endian) {
  780|       |            /* Little endian. */
  781|       |
  782|    148|            z_crc_t crc0;
  783|    148|            z_word_t word0;
  784|    148|#if N > 1
  785|    148|            z_crc_t crc1;
  786|    148|            z_word_t word1;
  787|    148|#if N > 2
  788|    148|            z_crc_t crc2;
  789|    148|            z_word_t word2;
  790|    148|#if N > 3
  791|    148|            z_crc_t crc3;
  792|    148|            z_word_t word3;
  793|    148|#if N > 4
  794|    148|            z_crc_t crc4;
  795|    148|            z_word_t word4;
  796|       |#if N > 5
  797|       |            z_crc_t crc5;
  798|       |            z_word_t word5;
  799|       |#endif
  800|    148|#endif
  801|    148|#endif
  802|    148|#endif
  803|    148|#endif
  804|       |
  805|       |            /* Initialize the CRC for each braid. */
  806|    148|            crc0 = crc;
  807|    148|#if N > 1
  808|    148|            crc1 = 0;
  809|    148|#if N > 2
  810|    148|            crc2 = 0;
  811|    148|#if N > 3
  812|    148|            crc3 = 0;
  813|    148|#if N > 4
  814|    148|            crc4 = 0;
  815|       |#if N > 5
  816|       |            crc5 = 0;
  817|       |#endif
  818|    148|#endif
  819|    148|#endif
  820|    148|#endif
  821|    148|#endif
  822|       |
  823|       |            /*
  824|       |              Process the first blks-1 blocks, computing the CRCs on each braid
  825|       |              independently.
  826|       |             */
  827|    561|            while (--blks) {
  828|       |                /* Load the word for each braid into registers. */
  829|    413|                word0 = crc0 ^ words[0];
  830|    413|#if N > 1
  831|    413|                word1 = crc1 ^ words[1];
  832|    413|#if N > 2
  833|    413|                word2 = crc2 ^ words[2];
  834|    413|#if N > 3
  835|    413|                word3 = crc3 ^ words[3];
  836|    413|#if N > 4
  837|    413|                word4 = crc4 ^ words[4];
  838|       |#if N > 5
  839|       |                word5 = crc5 ^ words[5];
  840|       |#endif
  841|    413|#endif
  842|    413|#endif
  843|    413|#endif
  844|    413|#endif
  845|    413|                words += N;
  846|       |
  847|       |                /* Compute and update the CRC for each word. The loop should
  848|       |                   get unrolled. */
  849|    413|                crc0 = crc_braid_table[0][word0 & 0xff];
  850|    413|#if N > 1
  851|    413|                crc1 = crc_braid_table[0][word1 & 0xff];
  852|    413|#if N > 2
  853|    413|                crc2 = crc_braid_table[0][word2 & 0xff];
  854|    413|#if N > 3
  855|    413|                crc3 = crc_braid_table[0][word3 & 0xff];
  856|    413|#if N > 4
  857|    413|                crc4 = crc_braid_table[0][word4 & 0xff];
  858|       |#if N > 5
  859|       |                crc5 = crc_braid_table[0][word5 & 0xff];
  860|       |#endif
  861|    413|#endif
  862|    413|#endif
  863|    413|#endif
  864|    413|#endif
  865|  3.30k|                for (k = 1; k < W; k++) {
  866|  2.89k|                    crc0 ^= crc_braid_table[k][(word0 >> (k << 3)) & 0xff];
  867|  2.89k|#if N > 1
  868|  2.89k|                    crc1 ^= crc_braid_table[k][(word1 >> (k << 3)) & 0xff];
  869|  2.89k|#if N > 2
  870|  2.89k|                    crc2 ^= crc_braid_table[k][(word2 >> (k << 3)) & 0xff];
  871|  2.89k|#if N > 3
  872|  2.89k|                    crc3 ^= crc_braid_table[k][(word3 >> (k << 3)) & 0xff];
  873|  2.89k|#if N > 4
  874|  2.89k|                    crc4 ^= crc_braid_table[k][(word4 >> (k << 3)) & 0xff];
  875|       |#if N > 5
  876|       |                    crc5 ^= crc_braid_table[k][(word5 >> (k << 3)) & 0xff];
  877|       |#endif
  878|  2.89k|#endif
  879|  2.89k|#endif
  880|  2.89k|#endif
  881|  2.89k|#endif
  882|  2.89k|                }
  883|    413|            }
  884|       |
  885|       |            /*
  886|       |              Process the last block, combining the CRCs of the N braids at the
  887|       |              same time.
  888|       |             */
  889|    148|            crc = crc_word(crc0 ^ words[0]);
  890|    148|#if N > 1
  891|    148|            crc = crc_word(crc1 ^ words[1] ^ crc);
  892|    148|#if N > 2
  893|    148|            crc = crc_word(crc2 ^ words[2] ^ crc);
  894|    148|#if N > 3
  895|    148|            crc = crc_word(crc3 ^ words[3] ^ crc);
  896|    148|#if N > 4
  897|    148|            crc = crc_word(crc4 ^ words[4] ^ crc);
  898|       |#if N > 5
  899|       |            crc = crc_word(crc5 ^ words[5] ^ crc);
  900|       |#endif
  901|    148|#endif
  902|    148|#endif
  903|    148|#endif
  904|    148|#endif
  905|    148|            words += N;
  906|    148|        }
  907|      0|        else {
  908|       |            /* Big endian. */
  909|       |
  910|      0|            z_word_t crc0, word0, comb;
  911|      0|#if N > 1
  912|      0|            z_word_t crc1, word1;
  913|      0|#if N > 2
  914|      0|            z_word_t crc2, word2;
  915|      0|#if N > 3
  916|      0|            z_word_t crc3, word3;
  917|      0|#if N > 4
  918|      0|            z_word_t crc4, word4;
  919|       |#if N > 5
  920|       |            z_word_t crc5, word5;
  921|       |#endif
  922|      0|#endif
  923|      0|#endif
  924|      0|#endif
  925|      0|#endif
  926|       |
  927|       |            /* Initialize the CRC for each braid. */
  928|      0|            crc0 = byte_swap(crc);
  929|      0|#if N > 1
  930|      0|            crc1 = 0;
  931|      0|#if N > 2
  932|      0|            crc2 = 0;
  933|      0|#if N > 3
  934|      0|            crc3 = 0;
  935|      0|#if N > 4
  936|      0|            crc4 = 0;
  937|       |#if N > 5
  938|       |            crc5 = 0;
  939|       |#endif
  940|      0|#endif
  941|      0|#endif
  942|      0|#endif
  943|      0|#endif
  944|       |
  945|       |            /*
  946|       |              Process the first blks-1 blocks, computing the CRCs on each braid
  947|       |              independently.
  948|       |             */
  949|      0|            while (--blks) {
  950|       |                /* Load the word for each braid into registers. */
  951|      0|                word0 = crc0 ^ words[0];
  952|      0|#if N > 1
  953|      0|                word1 = crc1 ^ words[1];
  954|      0|#if N > 2
  955|      0|                word2 = crc2 ^ words[2];
  956|      0|#if N > 3
  957|      0|                word3 = crc3 ^ words[3];
  958|      0|#if N > 4
  959|      0|                word4 = crc4 ^ words[4];
  960|       |#if N > 5
  961|       |                word5 = crc5 ^ words[5];
  962|       |#endif
  963|      0|#endif
  964|      0|#endif
  965|      0|#endif
  966|      0|#endif
  967|      0|                words += N;
  968|       |
  969|       |                /* Compute and update the CRC for each word. The loop should
  970|       |                   get unrolled. */
  971|      0|                crc0 = crc_braid_big_table[0][word0 & 0xff];
  972|      0|#if N > 1
  973|      0|                crc1 = crc_braid_big_table[0][word1 & 0xff];
  974|      0|#if N > 2
  975|      0|                crc2 = crc_braid_big_table[0][word2 & 0xff];
  976|      0|#if N > 3
  977|      0|                crc3 = crc_braid_big_table[0][word3 & 0xff];
  978|      0|#if N > 4
  979|      0|                crc4 = crc_braid_big_table[0][word4 & 0xff];
  980|       |#if N > 5
  981|       |                crc5 = crc_braid_big_table[0][word5 & 0xff];
  982|       |#endif
  983|      0|#endif
  984|      0|#endif
  985|      0|#endif
  986|      0|#endif
  987|      0|                for (k = 1; k < W; k++) {
  988|      0|                    crc0 ^= crc_braid_big_table[k][(word0 >> (k << 3)) & 0xff];
  989|      0|#if N > 1
  990|      0|                    crc1 ^= crc_braid_big_table[k][(word1 >> (k << 3)) & 0xff];
  991|      0|#if N > 2
  992|      0|                    crc2 ^= crc_braid_big_table[k][(word2 >> (k << 3)) & 0xff];
  993|      0|#if N > 3
  994|      0|                    crc3 ^= crc_braid_big_table[k][(word3 >> (k << 3)) & 0xff];
  995|      0|#if N > 4
  996|      0|                    crc4 ^= crc_braid_big_table[k][(word4 >> (k << 3)) & 0xff];
  997|       |#if N > 5
  998|       |                    crc5 ^= crc_braid_big_table[k][(word5 >> (k << 3)) & 0xff];
  999|       |#endif
 1000|      0|#endif
 1001|      0|#endif
 1002|      0|#endif
 1003|      0|#endif
 1004|      0|                }
 1005|      0|            }
 1006|       |
 1007|       |            /*
 1008|       |              Process the last block, combining the CRCs of the N braids at the
 1009|       |              same time.
 1010|       |             */
 1011|      0|            comb = crc_word_big(crc0 ^ words[0]);
 1012|      0|#if N > 1
 1013|      0|            comb = crc_word_big(crc1 ^ words[1] ^ comb);
 1014|      0|#if N > 2
 1015|      0|            comb = crc_word_big(crc2 ^ words[2] ^ comb);
 1016|      0|#if N > 3
 1017|      0|            comb = crc_word_big(crc3 ^ words[3] ^ comb);
 1018|      0|#if N > 4
 1019|      0|            comb = crc_word_big(crc4 ^ words[4] ^ comb);
 1020|       |#if N > 5
 1021|       |            comb = crc_word_big(crc5 ^ words[5] ^ comb);
 1022|       |#endif
 1023|      0|#endif
 1024|      0|#endif
 1025|      0|#endif
 1026|      0|#endif
 1027|      0|            words += N;
 1028|      0|            crc = byte_swap(comb);
 1029|      0|        }
 1030|       |
 1031|       |        /*
 1032|       |          Update the pointer to the remaining bytes to process.
 1033|       |         */
 1034|    148|        buf = (unsigned char const *)words;
 1035|    148|    }
 1036|       |
 1037|    629|#endif /* W */
 1038|       |
 1039|       |    /* Complete the computation of the CRC on any remaining bytes. */
 1040|  1.20k|    while (len >= 8) {
 1041|    575|        len -= 8;
 1042|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1043|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1044|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1045|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1046|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1047|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1048|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1049|    575|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1050|    575|    }
 1051|  2.47k|    while (len) {
 1052|  1.84k|        len--;
 1053|  1.84k|        crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
 1054|  1.84k|    }
 1055|       |
 1056|       |    /* Return the CRC, post-conditioned. */
 1057|    629|    return crc ^ 0xffffffff;
 1058|    974|}
crc32:
 1067|    974|{
 1068|    974|    return crc32_z(crc, buf, len);
 1069|    974|}
crc32.c:crc_word:
  719|    740|{
  720|    740|    int k;
  721|  6.66k|    for (k = 0; k < W; k++)
  722|  5.92k|        data = (data >> 8) ^ crc_table[data & 0xff];
  723|    740|    return (z_crc_t)data;
  724|    740|}

inflate_fast:
   53|    369|{
   54|    369|    struct inflate_state FAR *state;
   55|    369|    z_const unsigned char FAR *in;      /* local strm->next_in */
   56|    369|    z_const unsigned char FAR *last;    /* have enough input while in < last */
   57|    369|    unsigned char FAR *out;     /* local strm->next_out */
   58|    369|    unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
   59|    369|    unsigned char FAR *end;     /* while out < end, enough space available */
   60|       |#ifdef INFLATE_STRICT
   61|       |    unsigned dmax;              /* maximum distance from zlib header */
   62|       |#endif
   63|    369|    unsigned wsize;             /* window size or zero if not using window */
   64|    369|    unsigned whave;             /* valid bytes in the window */
   65|    369|    unsigned wnext;             /* window write index */
   66|    369|    unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
   67|    369|    unsigned long hold;         /* local strm->hold */
   68|    369|    unsigned bits;              /* local strm->bits */
   69|    369|    code const FAR *lcode;      /* local strm->lencode */
   70|    369|    code const FAR *dcode;      /* local strm->distcode */
   71|    369|    unsigned lmask;             /* mask for first level of length codes */
   72|    369|    unsigned dmask;             /* mask for first level of distance codes */
   73|    369|    code const *here;           /* retrieved table entry */
   74|    369|    unsigned op;                /* code bits, operation, extra bits, or */
   75|       |                                /*  window position, window bytes to copy */
   76|    369|    unsigned len;               /* match length, unused bytes */
   77|    369|    unsigned dist;              /* match distance */
   78|    369|    unsigned char FAR *from;    /* where to copy match from */
   79|       |
   80|       |    /* copy state to local variables */
   81|    369|    state = (struct inflate_state FAR *)strm->state;
   82|    369|    in = strm->next_in;
   83|    369|    last = in + (strm->avail_in - 5);
   84|    369|    out = strm->next_out;
   85|    369|    beg = out - (start - strm->avail_out);
   86|    369|    end = out + (strm->avail_out - 257);
   87|       |#ifdef INFLATE_STRICT
   88|       |    dmax = state->dmax;
   89|       |#endif
   90|    369|    wsize = state->wsize;
   91|    369|    whave = state->whave;
   92|    369|    wnext = state->wnext;
   93|    369|    window = state->window;
   94|    369|    hold = state->hold;
   95|    369|    bits = state->bits;
   96|    369|    lcode = state->lencode;
   97|    369|    dcode = state->distcode;
   98|    369|    lmask = (1U << state->lenbits) - 1;
   99|    369|    dmask = (1U << state->distbits) - 1;
  100|       |
  101|       |    /* decode literals and length/distances until end-of-block or not enough
  102|       |       input data or output space */
  103|  6.49k|    do {
  104|  6.49k|        if (bits < 15) {
  105|  3.43k|            hold += (unsigned long)(*in++) << bits;
  106|  3.43k|            bits += 8;
  107|  3.43k|            hold += (unsigned long)(*in++) << bits;
  108|  3.43k|            bits += 8;
  109|  3.43k|        }
  110|  6.49k|        here = lcode + (hold & lmask);
  111|  6.49k|      dolen:
  112|  6.49k|        op = (unsigned)(here->bits);
  113|  6.49k|        hold >>= op;
  114|  6.49k|        bits -= op;
  115|  6.49k|        op = (unsigned)(here->op);
  116|  6.49k|        if (op == 0) {                          /* literal */
  117|  5.28k|            Tracevv((stderr, here->val >= 0x20 && here->val < 0x7f ?
  118|  5.28k|                    "inflate:         literal '%c'\n" :
  119|  5.28k|                    "inflate:         literal 0x%02x\n", here->val));
  120|  5.28k|            *out++ = (unsigned char)(here->val);
  121|  5.28k|        }
  122|  1.20k|        else if (op & 16) {                     /* length base */
  123|    939|            len = (unsigned)(here->val);
  124|    939|            op &= 15;                           /* number of extra bits */
  125|    939|            if (op) {
  126|    272|                if (bits < op) {
  127|      0|                    hold += (unsigned long)(*in++) << bits;
  128|      0|                    bits += 8;
  129|      0|                }
  130|    272|                len += (unsigned)hold & ((1U << op) - 1);
  131|    272|                hold >>= op;
  132|    272|                bits -= op;
  133|    272|            }
  134|    939|            Tracevv((stderr, "inflate:         length %u\n", len));
  135|    939|            if (bits < 15) {
  136|    448|                hold += (unsigned long)(*in++) << bits;
  137|    448|                bits += 8;
  138|    448|                hold += (unsigned long)(*in++) << bits;
  139|    448|                bits += 8;
  140|    448|            }
  141|    939|            here = dcode + (hold & dmask);
  142|    939|          dodist:
  143|    939|            op = (unsigned)(here->bits);
  144|    939|            hold >>= op;
  145|    939|            bits -= op;
  146|    939|            op = (unsigned)(here->op);
  147|    939|            if (op & 16) {                      /* distance base */
  148|    938|                dist = (unsigned)(here->val);
  149|    938|                op &= 15;                       /* number of extra bits */
  150|    938|                if (bits < op) {
  151|      1|                    hold += (unsigned long)(*in++) << bits;
  152|      1|                    bits += 8;
  153|      1|                    if (bits < op) {
  154|      0|                        hold += (unsigned long)(*in++) << bits;
  155|      0|                        bits += 8;
  156|      0|                    }
  157|      1|                }
  158|    938|                dist += (unsigned)hold & ((1U << op) - 1);
  159|       |#ifdef INFLATE_STRICT
  160|       |                if (dist > dmax) {
  161|       |                    strm->msg = (char *)"invalid distance too far back";
  162|       |                    state->mode = BAD;
  163|       |                    break;
  164|       |                }
  165|       |#endif
  166|    938|                hold >>= op;
  167|    938|                bits -= op;
  168|    938|                Tracevv((stderr, "inflate:         distance %u\n", dist));
  169|    938|                op = (unsigned)(out - beg);     /* max distance in output */
  170|    938|                if (dist > op) {                /* see if copy from window */
  171|    244|                    op = dist - op;             /* distance back in window */
  172|    244|                    if (op > whave) {
  173|      9|                        if (state->sane) {
  174|      9|                            strm->msg =
  175|      9|                                (char *)"invalid distance too far back";
  176|      9|                            state->mode = BAD;
  177|      9|                            break;
  178|      9|                        }
  179|       |#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  180|       |                        if (len <= op - whave) {
  181|       |                            do {
  182|       |                                *out++ = 0;
  183|       |                            } while (--len);
  184|       |                            continue;
  185|       |                        }
  186|       |                        len -= op - whave;
  187|       |                        do {
  188|       |                            *out++ = 0;
  189|       |                        } while (--op > whave);
  190|       |                        if (op == 0) {
  191|       |                            from = out - dist;
  192|       |                            do {
  193|       |                                *out++ = *from++;
  194|       |                            } while (--len);
  195|       |                            continue;
  196|       |                        }
  197|       |#endif
  198|      9|                    }
  199|    235|                    from = window;
  200|    235|                    if (wnext == 0) {           /* very common case */
  201|      0|                        from += wsize - op;
  202|      0|                        if (op < len) {         /* some from window */
  203|      0|                            len -= op;
  204|      0|                            do {
  205|      0|                                *out++ = *from++;
  206|      0|                            } while (--op);
  207|      0|                            from = out - dist;  /* rest from output */
  208|      0|                        }
  209|      0|                    }
  210|    235|                    else if (wnext < op) {      /* wrap around window */
  211|      0|                        from += wsize + wnext - op;
  212|      0|                        op -= wnext;
  213|      0|                        if (op < len) {         /* some from end of window */
  214|      0|                            len -= op;
  215|      0|                            do {
  216|      0|                                *out++ = *from++;
  217|      0|                            } while (--op);
  218|      0|                            from = window;
  219|      0|                            if (wnext < len) {  /* some from start of window */
  220|      0|                                op = wnext;
  221|      0|                                len -= op;
  222|      0|                                do {
  223|      0|                                    *out++ = *from++;
  224|      0|                                } while (--op);
  225|      0|                                from = out - dist;      /* rest from output */
  226|      0|                            }
  227|      0|                        }
  228|      0|                    }
  229|    235|                    else {                      /* contiguous in window */
  230|    235|                        from += wnext - op;
  231|    235|                        if (op < len) {         /* some from window */
  232|    169|                            len -= op;
  233|  1.39k|                            do {
  234|  1.39k|                                *out++ = *from++;
  235|  1.39k|                            } while (--op);
  236|    169|                            from = out - dist;  /* rest from output */
  237|    169|                        }
  238|    235|                    }
  239|  3.20k|                    while (len > 2) {
  240|  2.97k|                        *out++ = *from++;
  241|  2.97k|                        *out++ = *from++;
  242|  2.97k|                        *out++ = *from++;
  243|  2.97k|                        len -= 3;
  244|  2.97k|                    }
  245|    235|                    if (len) {
  246|    152|                        *out++ = *from++;
  247|    152|                        if (len > 1)
  248|     34|                            *out++ = *from++;
  249|    152|                    }
  250|    235|                }
  251|    694|                else {
  252|    694|                    from = out - dist;          /* copy direct from output */
  253|  3.03k|                    do {                        /* minimum length is three */
  254|  3.03k|                        *out++ = *from++;
  255|  3.03k|                        *out++ = *from++;
  256|  3.03k|                        *out++ = *from++;
  257|  3.03k|                        len -= 3;
  258|  3.03k|                    } while (len > 2);
  259|    694|                    if (len) {
  260|    297|                        *out++ = *from++;
  261|    297|                        if (len > 1)
  262|    131|                            *out++ = *from++;
  263|    297|                    }
  264|    694|                }
  265|    938|            }
  266|      1|            else if ((op & 64) == 0) {          /* 2nd level distance code */
  267|      0|                here = dcode + here->val + (hold & ((1U << op) - 1));
  268|      0|                goto dodist;
  269|      0|            }
  270|      1|            else {
  271|      1|                strm->msg = (char *)"invalid distance code";
  272|      1|                state->mode = BAD;
  273|      1|                break;
  274|      1|            }
  275|    939|        }
  276|    265|        else if ((op & 64) == 0) {              /* 2nd level length code */
  277|      0|            here = lcode + here->val + (hold & ((1U << op) - 1));
  278|      0|            goto dolen;
  279|      0|        }
  280|    265|        else if (op & 32) {                     /* end-of-block */
  281|    264|            Tracevv((stderr, "inflate:         end of block\n"));
  282|    264|            state->mode = TYPE;
  283|    264|            break;
  284|    264|        }
  285|      1|        else {
  286|      1|            strm->msg = (char *)"invalid literal/length code";
  287|      1|            state->mode = BAD;
  288|      1|            break;
  289|      1|        }
  290|  6.49k|    } while (in < last && out < end);
  291|       |
  292|       |    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  293|    369|    len = bits >> 3;
  294|    369|    in -= len;
  295|    369|    bits -= len << 3;
  296|    369|    hold &= (1U << bits) - 1;
  297|       |
  298|       |    /* update state and return */
  299|    369|    strm->next_in = in;
  300|    369|    strm->next_out = out;
  301|    369|    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  302|    369|    strm->avail_out = (unsigned)(out < end ?
  303|    369|                                 257 + (end - out) : 257 - (out - end));
  304|    369|    state->hold = hold;
  305|    369|    state->bits = bits;
  306|    369|    return;
  307|    369|}

inflateResetKeep:
  121|    209|{
  122|    209|    struct inflate_state FAR *state;
  123|       |
  124|    209|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  125|    209|    state = (struct inflate_state FAR *)strm->state;
  126|    209|    strm->total_in = strm->total_out = state->total = 0;
  127|    209|    strm->msg = Z_NULL;
  128|    209|    if (state->wrap)        /* to support ill-conceived Java test suite */
  129|    209|        strm->adler = state->wrap & 1;
  130|    209|    state->mode = HEAD;
  131|    209|    state->last = 0;
  132|    209|    state->havedict = 0;
  133|    209|    state->flags = -1;
  134|    209|    state->dmax = 32768U;
  135|    209|    state->head = Z_NULL;
  136|    209|    state->hold = 0;
  137|    209|    state->bits = 0;
  138|    209|    state->lencode = state->distcode = state->next = state->codes;
  139|    209|    state->sane = 1;
  140|    209|    state->back = -1;
  141|    209|    Tracev((stderr, "inflate: reset\n"));
  142|    209|    return Z_OK;
  143|    209|}
inflateReset:
  147|    209|{
  148|    209|    struct inflate_state FAR *state;
  149|       |
  150|    209|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  151|    209|    state = (struct inflate_state FAR *)strm->state;
  152|    209|    state->wsize = 0;
  153|    209|    state->whave = 0;
  154|    209|    state->wnext = 0;
  155|    209|    return inflateResetKeep(strm);
  156|    209|}
inflateReset2:
  161|    209|{
  162|    209|    int wrap;
  163|    209|    struct inflate_state FAR *state;
  164|       |
  165|       |    /* get the state */
  166|    209|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  167|    209|    state = (struct inflate_state FAR *)strm->state;
  168|       |
  169|       |    /* extract wrap request from windowBits parameter */
  170|    209|    if (windowBits < 0) {
  171|      0|        wrap = 0;
  172|      0|        windowBits = -windowBits;
  173|      0|    }
  174|    209|    else {
  175|    209|        wrap = (windowBits >> 4) + 5;
  176|    209|#ifdef GUNZIP
  177|    209|        if (windowBits < 48)
  178|    209|            windowBits &= 15;
  179|    209|#endif
  180|    209|    }
  181|       |
  182|       |    /* set number of window bits, free window if different */
  183|    209|    if (windowBits && (windowBits < 8 || windowBits > 15))
  184|      0|        return Z_STREAM_ERROR;
  185|    209|    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
  186|      0|        ZFREE(strm, state->window);
  187|      0|        state->window = Z_NULL;
  188|      0|    }
  189|       |
  190|       |    /* update state and reset the rest of it */
  191|    209|    state->wrap = wrap;
  192|    209|    state->wbits = (unsigned)windowBits;
  193|    209|    return inflateReset(strm);
  194|    209|}
inflateInit2_:
  201|    209|{
  202|    209|    int ret;
  203|    209|    struct inflate_state FAR *state;
  204|       |
  205|    209|    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  206|    209|        stream_size != (int)(sizeof(z_stream)))
  207|      0|        return Z_VERSION_ERROR;
  208|    209|    if (strm == Z_NULL) return Z_STREAM_ERROR;
  209|    209|    strm->msg = Z_NULL;                 /* in case we return an error */
  210|    209|    if (strm->zalloc == (alloc_func)0) {
  211|       |#ifdef Z_SOLO
  212|       |        return Z_STREAM_ERROR;
  213|       |#else
  214|      0|        strm->zalloc = zcalloc;
  215|      0|        strm->opaque = (voidpf)0;
  216|      0|#endif
  217|      0|    }
  218|    209|    if (strm->zfree == (free_func)0)
  219|       |#ifdef Z_SOLO
  220|       |        return Z_STREAM_ERROR;
  221|       |#else
  222|      0|        strm->zfree = zcfree;
  223|    209|#endif
  224|    209|    state = (struct inflate_state FAR *)
  225|    209|            ZALLOC(strm, 1, sizeof(struct inflate_state));
  226|    209|    if (state == Z_NULL) return Z_MEM_ERROR;
  227|    209|    Tracev((stderr, "inflate: allocated\n"));
  228|    209|    strm->state = (struct internal_state FAR *)state;
  229|    209|    state->strm = strm;
  230|    209|    state->window = Z_NULL;
  231|    209|    state->mode = HEAD;     /* to pass state test in inflateReset2() */
  232|    209|    ret = inflateReset2(strm, windowBits);
  233|    209|    if (ret != Z_OK) {
  234|      0|        ZFREE(strm, state);
  235|      0|        strm->state = Z_NULL;
  236|      0|    }
  237|    209|    return ret;
  238|    209|}
inflate:
  626|    825|{
  627|    825|    struct inflate_state FAR *state;
  628|    825|    z_const unsigned char FAR *next;    /* next input */
  629|    825|    unsigned char FAR *put;     /* next output */
  630|    825|    unsigned have, left;        /* available input and output */
  631|    825|    unsigned long hold;         /* bit buffer */
  632|    825|    unsigned bits;              /* bits in bit buffer */
  633|    825|    unsigned in, out;           /* save starting available input and output */
  634|    825|    unsigned copy;              /* number of stored or match bytes to copy */
  635|    825|    unsigned char FAR *from;    /* where to copy match bytes from */
  636|    825|    code here;                  /* current decoding table entry */
  637|    825|    code last;                  /* parent table entry */
  638|    825|    unsigned len;               /* length to copy for repeats, bits to drop */
  639|    825|    int ret;                    /* return code */
  640|    825|#ifdef GUNZIP
  641|    825|    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
  642|    825|#endif
  643|    825|    static const unsigned short order[19] = /* permutation of code lengths */
  644|    825|        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
  645|       |
  646|    825|    if (inflateStateCheck(strm) || strm->next_out == Z_NULL ||
  647|    825|        (strm->next_in == Z_NULL && strm->avail_in != 0))
  648|      0|        return Z_STREAM_ERROR;
  649|       |
  650|    825|    state = (struct inflate_state FAR *)strm->state;
  651|    825|    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  652|    825|    LOAD();
  653|    825|    in = have;
  654|    825|    out = left;
  655|    825|    ret = Z_OK;
  656|    825|    for (;;)
  657|  2.39k|        switch (state->mode) {
  658|    202|        case HEAD:
  659|    202|            if (state->wrap == 0) {
  660|      0|                state->mode = TYPEDO;
  661|      0|                break;
  662|      0|            }
  663|    202|            NEEDBITS(16);
  664|    196|#ifdef GUNZIP
  665|    196|            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  666|    189|                if (state->wbits == 0)
  667|      0|                    state->wbits = 15;
  668|    189|                state->check = crc32(0L, Z_NULL, 0);
  669|    189|                CRC2(state->check, hold);
  670|    189|                INITBITS();
  671|    189|                state->mode = FLAGS;
  672|    189|                break;
  673|    189|            }
  674|      7|            if (state->head != Z_NULL)
  675|      0|                state->head->done = -1;
  676|      7|            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  677|       |#else
  678|       |            if (
  679|       |#endif
  680|      7|                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  681|      2|                strm->msg = (char *)"incorrect header check";
  682|      2|                state->mode = BAD;
  683|      2|                break;
  684|      2|            }
  685|      5|            if (BITS(4) != Z_DEFLATED) {
  686|      1|                strm->msg = (char *)"unknown compression method";
  687|      1|                state->mode = BAD;
  688|      1|                break;
  689|      1|            }
  690|      4|            DROPBITS(4);
  691|      4|            len = BITS(4) + 8;
  692|      4|            if (state->wbits == 0)
  693|      0|                state->wbits = len;
  694|      4|            if (len > 15 || len > state->wbits) {
  695|      0|                strm->msg = (char *)"invalid window size";
  696|      0|                state->mode = BAD;
  697|      0|                break;
  698|      0|            }
  699|      4|            state->dmax = 1U << len;
  700|      4|            state->flags = 0;               /* indicate zlib header */
  701|      4|            Tracev((stderr, "inflate:   zlib header ok\n"));
  702|      4|            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  703|      4|            state->mode = hold & 0x200 ? DICTID : TYPE;
  704|      4|            INITBITS();
  705|      4|            break;
  706|      0|#ifdef GUNZIP
  707|    190|        case FLAGS:
  708|    190|            NEEDBITS(16);
  709|    188|            state->flags = (int)(hold);
  710|    188|            if ((state->flags & 0xff) != Z_DEFLATED) {
  711|      1|                strm->msg = (char *)"unknown compression method";
  712|      1|                state->mode = BAD;
  713|      1|                break;
  714|      1|            }
  715|    187|            if (state->flags & 0xe000) {
  716|      1|                strm->msg = (char *)"unknown header flags set";
  717|      1|                state->mode = BAD;
  718|      1|                break;
  719|      1|            }
  720|    186|            if (state->head != Z_NULL)
  721|      0|                state->head->text = (int)((hold >> 8) & 1);
  722|    186|            if ((state->flags & 0x0200) && (state->wrap & 4))
  723|     21|                CRC2(state->check, hold);
  724|    186|            INITBITS();
  725|    186|            state->mode = TIME;
  726|       |                /* fallthrough */
  727|    192|        case TIME:
  728|    192|            NEEDBITS(32);
  729|    184|            if (state->head != Z_NULL)
  730|      0|                state->head->time = hold;
  731|    184|            if ((state->flags & 0x0200) && (state->wrap & 4))
  732|     21|                CRC4(state->check, hold);
  733|    184|            INITBITS();
  734|    184|            state->mode = OS;
  735|       |                /* fallthrough */
  736|    190|        case OS:
  737|    190|            NEEDBITS(16);
  738|    182|            if (state->head != Z_NULL) {
  739|      0|                state->head->xflags = (int)(hold & 0xff);
  740|      0|                state->head->os = (int)(hold >> 8);
  741|      0|            }
  742|    182|            if ((state->flags & 0x0200) && (state->wrap & 4))
  743|     21|                CRC2(state->check, hold);
  744|    182|            INITBITS();
  745|    182|            state->mode = EXLEN;
  746|       |                /* fallthrough */
  747|    187|        case EXLEN:
  748|    187|            if (state->flags & 0x0400) {
  749|     20|                NEEDBITS(16);
  750|     14|                state->length = (unsigned)(hold);
  751|     14|                if (state->head != Z_NULL)
  752|      0|                    state->head->extra_len = (unsigned)hold;
  753|     14|                if ((state->flags & 0x0200) && (state->wrap & 4))
  754|     12|                    CRC2(state->check, hold);
  755|     14|                INITBITS();
  756|     14|            }
  757|    167|            else if (state->head != Z_NULL)
  758|      0|                state->head->extra = Z_NULL;
  759|    181|            state->mode = EXTRA;
  760|       |                /* fallthrough */
  761|    194|        case EXTRA:
  762|    194|            if (state->flags & 0x0400) {
  763|     27|                copy = state->length;
  764|     27|                if (copy > have) copy = have;
  765|     27|                if (copy) {
  766|     14|                    if (state->head != Z_NULL &&
  767|     14|                        state->head->extra != Z_NULL) {
  768|      0|                        len = state->head->extra_len - state->length;
  769|      0|                        zmemcpy(state->head->extra + len, next,
  770|      0|                                len + copy > state->head->extra_max ?
  771|      0|                                state->head->extra_max - len : copy);
  772|      0|                    }
  773|     14|                    if ((state->flags & 0x0200) && (state->wrap & 4))
  774|     11|                        state->check = crc32(state->check, next, copy);
  775|     14|                    have -= copy;
  776|     14|                    next += copy;
  777|     14|                    state->length -= copy;
  778|     14|                }
  779|     27|                if (state->length) goto inf_leave;
  780|     27|            }
  781|    174|            state->length = 0;
  782|    174|            state->mode = NAME;
  783|       |                /* fallthrough */
  784|    187|        case NAME:
  785|    187|            if (state->flags & 0x0800) {
  786|     34|                if (have == 0) goto inf_leave;
  787|     23|                copy = 0;
  788|    799|                do {
  789|    799|                    len = (unsigned)(next[copy++]);
  790|    799|                    if (state->head != Z_NULL &&
  791|    799|                            state->head->name != Z_NULL &&
  792|    799|                            state->length < state->head->name_max)
  793|      0|                        state->head->name[state->length++] = (Bytef)len;
  794|    799|                } while (len && copy < have);
  795|     23|                if ((state->flags & 0x0200) && (state->wrap & 4))
  796|     10|                    state->check = crc32(state->check, next, copy);
  797|     23|                have -= copy;
  798|     23|                next += copy;
  799|     23|                if (len) goto inf_leave;
  800|     23|            }
  801|    153|            else if (state->head != Z_NULL)
  802|      0|                state->head->name = Z_NULL;
  803|    169|            state->length = 0;
  804|    169|            state->mode = COMMENT;
  805|       |                /* fallthrough */
  806|    177|        case COMMENT:
  807|    177|            if (state->flags & 0x1000) {
  808|     54|                if (have == 0) goto inf_leave;
  809|     48|                copy = 0;
  810|  2.70k|                do {
  811|  2.70k|                    len = (unsigned)(next[copy++]);
  812|  2.70k|                    if (state->head != Z_NULL &&
  813|  2.70k|                            state->head->comment != Z_NULL &&
  814|  2.70k|                            state->length < state->head->comm_max)
  815|      0|                        state->head->comment[state->length++] = (Bytef)len;
  816|  2.70k|                } while (len && copy < have);
  817|     48|                if ((state->flags & 0x0200) && (state->wrap & 4))
  818|      7|                    state->check = crc32(state->check, next, copy);
  819|     48|                have -= copy;
  820|     48|                next += copy;
  821|     48|                if (len) goto inf_leave;
  822|     48|            }
  823|    123|            else if (state->head != Z_NULL)
  824|      0|                state->head->comment = Z_NULL;
  825|    167|            state->mode = HCRC;
  826|       |                /* fallthrough */
  827|    170|        case HCRC:
  828|    170|            if (state->flags & 0x0200) {
  829|     15|                NEEDBITS(16);
  830|     11|                if ((state->wrap & 4) && hold != (state->check & 0xffff)) {
  831|     10|                    strm->msg = (char *)"header crc mismatch";
  832|     10|                    state->mode = BAD;
  833|     10|                    break;
  834|     10|                }
  835|      1|                INITBITS();
  836|      1|            }
  837|    156|            if (state->head != Z_NULL) {
  838|      0|                state->head->hcrc = (int)((state->flags >> 9) & 1);
  839|      0|                state->head->done = 1;
  840|      0|            }
  841|    156|            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  842|    156|            state->mode = TYPE;
  843|    156|            break;
  844|      0|#endif
  845|     13|        case DICTID:
  846|     13|            NEEDBITS(32);
  847|      1|            strm->adler = state->check = ZSWAP32(hold);
  848|      1|            INITBITS();
  849|      1|            state->mode = DICT;
  850|       |                /* fallthrough */
  851|      1|        case DICT:
  852|      1|            if (state->havedict == 0) {
  853|      1|                RESTORE();
  854|      1|                return Z_NEED_DICT;
  855|      1|            }
  856|      0|            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  857|      0|            state->mode = TYPE;
  858|       |                /* fallthrough */
  859|    471|        case TYPE:
  860|    471|            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
  861|       |                /* fallthrough */
  862|    470|        case TYPEDO:
  863|    470|            if (state->last) {
  864|     13|                BYTEBITS();
  865|     13|                state->mode = CHECK;
  866|     13|                break;
  867|     13|            }
  868|    457|            NEEDBITS(3);
  869|    450|            state->last = BITS(1);
  870|    450|            DROPBITS(1);
  871|    450|            switch (BITS(2)) {
  872|     48|            case 0:                             /* stored block */
  873|     48|                Tracev((stderr, "inflate:     stored block%s\n",
  874|     48|                        state->last ? " (last)" : ""));
  875|     48|                state->mode = STORED;
  876|     48|                break;
  877|    337|            case 1:                             /* fixed block */
  878|    337|                fixedtables(state);
  879|    337|                Tracev((stderr, "inflate:     fixed codes block%s\n",
  880|    337|                        state->last ? " (last)" : ""));
  881|    337|                state->mode = LEN_;             /* decode codes */
  882|    337|                if (flush == Z_TREES) {
  883|      0|                    DROPBITS(2);
  884|      0|                    goto inf_leave;
  885|      0|                }
  886|    337|                break;
  887|    337|            case 2:                             /* dynamic block */
  888|     62|                Tracev((stderr, "inflate:     dynamic codes block%s\n",
  889|     62|                        state->last ? " (last)" : ""));
  890|     62|                state->mode = TABLE;
  891|     62|                break;
  892|      3|            case 3:
  893|      3|                strm->msg = (char *)"invalid block type";
  894|      3|                state->mode = BAD;
  895|    450|            }
  896|    450|            DROPBITS(2);
  897|    450|            break;
  898|     62|        case STORED:
  899|     62|            BYTEBITS();                         /* go to byte boundary */
  900|     62|            NEEDBITS(32);
  901|     38|            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  902|     16|                strm->msg = (char *)"invalid stored block lengths";
  903|     16|                state->mode = BAD;
  904|     16|                break;
  905|     16|            }
  906|     22|            state->length = (unsigned)hold & 0xffff;
  907|     22|            Tracev((stderr, "inflate:       stored length %u\n",
  908|     22|                    state->length));
  909|     22|            INITBITS();
  910|     22|            state->mode = COPY_;
  911|     22|            if (flush == Z_TREES) goto inf_leave;
  912|       |                /* fallthrough */
  913|     22|        case COPY_:
  914|     22|            state->mode = COPY;
  915|       |                /* fallthrough */
  916|     25|        case COPY:
  917|     25|            copy = state->length;
  918|     25|            if (copy) {
  919|      5|                if (copy > have) copy = have;
  920|      5|                if (copy > left) copy = left;
  921|      5|                if (copy == 0) goto inf_leave;
  922|      2|                zmemcpy(put, next, copy);
  923|      2|                have -= copy;
  924|      2|                next += copy;
  925|      2|                left -= copy;
  926|      2|                put += copy;
  927|      2|                state->length -= copy;
  928|      2|                break;
  929|      5|            }
  930|     20|            Tracev((stderr, "inflate:       stored end\n"));
  931|     20|            state->mode = TYPE;
  932|     20|            break;
  933|     68|        case TABLE:
  934|     68|            NEEDBITS(14);
  935|     58|            state->nlen = BITS(5) + 257;
  936|     58|            DROPBITS(5);
  937|     58|            state->ndist = BITS(5) + 1;
  938|     58|            DROPBITS(5);
  939|     58|            state->ncode = BITS(4) + 4;
  940|     58|            DROPBITS(4);
  941|     58|#ifndef PKZIP_BUG_WORKAROUND
  942|     58|            if (state->nlen > 286 || state->ndist > 30) {
  943|      2|                strm->msg = (char *)"too many length or distance symbols";
  944|      2|                state->mode = BAD;
  945|      2|                break;
  946|      2|            }
  947|     56|#endif
  948|     56|            Tracev((stderr, "inflate:       table sizes ok\n"));
  949|     56|            state->have = 0;
  950|     56|            state->mode = LENLENS;
  951|       |                /* fallthrough */
  952|     63|        case LENLENS:
  953|    592|            while (state->have < state->ncode) {
  954|    539|                NEEDBITS(3);
  955|    529|                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  956|    529|                DROPBITS(3);
  957|    529|            }
  958|    541|            while (state->have < 19)
  959|    488|                state->lens[order[state->have++]] = 0;
  960|     53|            state->next = state->codes;
  961|     53|            state->lencode = (const code FAR *)(state->next);
  962|     53|            state->lenbits = 7;
  963|     53|            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  964|     53|                                &(state->lenbits), state->work);
  965|     53|            if (ret) {
  966|     11|                strm->msg = (char *)"invalid code lengths set";
  967|     11|                state->mode = BAD;
  968|     11|                break;
  969|     11|            }
  970|     42|            Tracev((stderr, "inflate:       code lengths ok\n"));
  971|     42|            state->have = 0;
  972|     42|            state->mode = CODELENS;
  973|       |                /* fallthrough */
  974|     61|        case CODELENS:
  975|  5.13k|            while (state->have < state->nlen + state->ndist) {
  976|  6.18k|                for (;;) {
  977|  6.18k|                    here = state->lencode[BITS(state->lenbits)];
  978|  6.18k|                    if ((unsigned)(here.bits) <= bits) break;
  979|  1.08k|                    PULLBYTE();
  980|  1.08k|                }
  981|  5.09k|                if (here.val < 16) {
  982|  4.60k|                    DROPBITS(here.bits);
  983|  4.60k|                    state->lens[state->have++] = here.val;
  984|  4.60k|                }
  985|    496|                else {
  986|    496|                    if (here.val == 16) {
  987|    223|                        NEEDBITS(here.bits + 2);
  988|    221|                        DROPBITS(here.bits);
  989|    221|                        if (state->have == 0) {
  990|      1|                            strm->msg = (char *)"invalid bit length repeat";
  991|      1|                            state->mode = BAD;
  992|      1|                            break;
  993|      1|                        }
  994|    220|                        len = state->lens[state->have - 1];
  995|    220|                        copy = 3 + BITS(2);
  996|    220|                        DROPBITS(2);
  997|    220|                    }
  998|    273|                    else if (here.val == 17) {
  999|    234|                        NEEDBITS(here.bits + 3);
 1000|    232|                        DROPBITS(here.bits);
 1001|    232|                        len = 0;
 1002|    232|                        copy = 3 + BITS(3);
 1003|    232|                        DROPBITS(3);
 1004|    232|                    }
 1005|     39|                    else {
 1006|     39|                        NEEDBITS(here.bits + 7);
 1007|     37|                        DROPBITS(here.bits);
 1008|     37|                        len = 0;
 1009|     37|                        copy = 11 + BITS(7);
 1010|     37|                        DROPBITS(7);
 1011|     37|                    }
 1012|    489|                    if (state->have + copy > state->nlen + state->ndist) {
 1013|     13|                        strm->msg = (char *)"invalid bit length repeat";
 1014|     13|                        state->mode = BAD;
 1015|     13|                        break;
 1016|     13|                    }
 1017|  4.57k|                    while (copy--)
 1018|  4.09k|                        state->lens[state->have++] = (unsigned short)len;
 1019|    476|                }
 1020|  5.09k|            }
 1021|       |
 1022|       |            /* handle error breaks in while */
 1023|     27|            if (state->mode == BAD) break;
 1024|       |
 1025|       |            /* check for end-of-block code (better have one) */
 1026|     13|            if (state->lens[256] == 0) {
 1027|      4|                strm->msg = (char *)"invalid code -- missing end-of-block";
 1028|      4|                state->mode = BAD;
 1029|      4|                break;
 1030|      4|            }
 1031|       |
 1032|       |            /* build code tables -- note: do not change the lenbits or distbits
 1033|       |               values here (9 and 6) without reading the comments in inftrees.h
 1034|       |               concerning the ENOUGH constants, which depend on those values */
 1035|      9|            state->next = state->codes;
 1036|      9|            state->lencode = (const code FAR *)(state->next);
 1037|      9|            state->lenbits = 9;
 1038|      9|            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
 1039|      9|                                &(state->lenbits), state->work);
 1040|      9|            if (ret) {
 1041|      5|                strm->msg = (char *)"invalid literal/lengths set";
 1042|      5|                state->mode = BAD;
 1043|      5|                break;
 1044|      5|            }
 1045|      4|            state->distcode = (const code FAR *)(state->next);
 1046|      4|            state->distbits = 6;
 1047|      4|            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
 1048|      4|                            &(state->next), &(state->distbits), state->work);
 1049|      4|            if (ret) {
 1050|      4|                strm->msg = (char *)"invalid distances set";
 1051|      4|                state->mode = BAD;
 1052|      4|                break;
 1053|      4|            }
 1054|      0|            Tracev((stderr, "inflate:       codes ok\n"));
 1055|      0|            state->mode = LEN_;
 1056|      0|            if (flush == Z_TREES) goto inf_leave;
 1057|       |                /* fallthrough */
 1058|    337|        case LEN_:
 1059|    337|            state->mode = LEN;
 1060|       |                /* fallthrough */
 1061|    591|        case LEN:
 1062|    591|            if (have >= 6 && left >= 258) {
 1063|    369|                RESTORE();
 1064|    369|                inflate_fast(strm, out);
 1065|    369|                LOAD();
 1066|    369|                if (state->mode == TYPE)
 1067|    264|                    state->back = -1;
 1068|    369|                break;
 1069|    369|            }
 1070|    222|            state->back = 0;
 1071|    395|            for (;;) {
 1072|    395|                here = state->lencode[BITS(state->lenbits)];
 1073|    395|                if ((unsigned)(here.bits) <= bits) break;
 1074|    207|                PULLBYTE();
 1075|    207|            }
 1076|    188|            if (here.op && (here.op & 0xf0) == 0) {
 1077|      0|                last = here;
 1078|      0|                for (;;) {
 1079|      0|                    here = state->lencode[last.val +
 1080|      0|                            (BITS(last.bits + last.op) >> last.bits)];
 1081|      0|                    if ((unsigned)(last.bits + here.bits) <= bits) break;
 1082|      0|                    PULLBYTE();
 1083|      0|                }
 1084|      0|                DROPBITS(last.bits);
 1085|      0|                state->back += last.bits;
 1086|      0|            }
 1087|    188|            DROPBITS(here.bits);
 1088|    188|            state->back += here.bits;
 1089|    188|            state->length = (unsigned)here.val;
 1090|    188|            if ((int)(here.op) == 0) {
 1091|    106|                Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
 1092|    106|                        "inflate:         literal '%c'\n" :
 1093|    106|                        "inflate:         literal 0x%02x\n", here.val));
 1094|    106|                state->mode = LIT;
 1095|    106|                break;
 1096|    106|            }
 1097|     82|            if (here.op & 32) {
 1098|     31|                Tracevv((stderr, "inflate:         end of block\n"));
 1099|     31|                state->back = -1;
 1100|     31|                state->mode = TYPE;
 1101|     31|                break;
 1102|     31|            }
 1103|     51|            if (here.op & 64) {
 1104|      1|                strm->msg = (char *)"invalid literal/length code";
 1105|      1|                state->mode = BAD;
 1106|      1|                break;
 1107|      1|            }
 1108|     50|            state->extra = (unsigned)(here.op) & 15;
 1109|     50|            state->mode = LENEXT;
 1110|       |                /* fallthrough */
 1111|     53|        case LENEXT:
 1112|     53|            if (state->extra) {
 1113|     31|                NEEDBITS(state->extra);
 1114|     26|                state->length += BITS(state->extra);
 1115|     26|                DROPBITS(state->extra);
 1116|     26|                state->back += state->extra;
 1117|     26|            }
 1118|     48|            Tracevv((stderr, "inflate:         length %u\n", state->length));
 1119|     48|            state->was = state->length;
 1120|     48|            state->mode = DIST;
 1121|       |                /* fallthrough */
 1122|     51|        case DIST:
 1123|     75|            for (;;) {
 1124|     75|                here = state->distcode[BITS(state->distbits)];
 1125|     75|                if ((unsigned)(here.bits) <= bits) break;
 1126|     29|                PULLBYTE();
 1127|     29|            }
 1128|     46|            if ((here.op & 0xf0) == 0) {
 1129|      0|                last = here;
 1130|      0|                for (;;) {
 1131|      0|                    here = state->distcode[last.val +
 1132|      0|                            (BITS(last.bits + last.op) >> last.bits)];
 1133|      0|                    if ((unsigned)(last.bits + here.bits) <= bits) break;
 1134|      0|                    PULLBYTE();
 1135|      0|                }
 1136|      0|                DROPBITS(last.bits);
 1137|      0|                state->back += last.bits;
 1138|      0|            }
 1139|     46|            DROPBITS(here.bits);
 1140|     46|            state->back += here.bits;
 1141|     46|            if (here.op & 64) {
 1142|      1|                strm->msg = (char *)"invalid distance code";
 1143|      1|                state->mode = BAD;
 1144|      1|                break;
 1145|      1|            }
 1146|     45|            state->offset = (unsigned)here.val;
 1147|     45|            state->extra = (unsigned)(here.op) & 15;
 1148|     45|            state->mode = DISTEXT;
 1149|       |                /* fallthrough */
 1150|     53|        case DISTEXT:
 1151|     53|            if (state->extra) {
 1152|     38|                NEEDBITS(state->extra);
 1153|     25|                state->offset += BITS(state->extra);
 1154|     25|                DROPBITS(state->extra);
 1155|     25|                state->back += state->extra;
 1156|     25|            }
 1157|       |#ifdef INFLATE_STRICT
 1158|       |            if (state->offset > state->dmax) {
 1159|       |                strm->msg = (char *)"invalid distance too far back";
 1160|       |                state->mode = BAD;
 1161|       |                break;
 1162|       |            }
 1163|       |#endif
 1164|     40|            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
 1165|     40|            state->mode = MATCH;
 1166|       |                /* fallthrough */
 1167|     44|        case MATCH:
 1168|     44|            if (left == 0) goto inf_leave;
 1169|     44|            copy = out - left;
 1170|     44|            if (state->offset > copy) {         /* copy from window */
 1171|     12|                copy = state->offset - copy;
 1172|     12|                if (copy > state->whave) {
 1173|      4|                    if (state->sane) {
 1174|      4|                        strm->msg = (char *)"invalid distance too far back";
 1175|      4|                        state->mode = BAD;
 1176|      4|                        break;
 1177|      4|                    }
 1178|       |#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
 1179|       |                    Trace((stderr, "inflate.c too far\n"));
 1180|       |                    copy -= state->whave;
 1181|       |                    if (copy > state->length) copy = state->length;
 1182|       |                    if (copy > left) copy = left;
 1183|       |                    left -= copy;
 1184|       |                    state->length -= copy;
 1185|       |                    do {
 1186|       |                        *put++ = 0;
 1187|       |                    } while (--copy);
 1188|       |                    if (state->length == 0) state->mode = LEN;
 1189|       |                    break;
 1190|       |#endif
 1191|      4|                }
 1192|      8|                if (copy > state->wnext) {
 1193|      0|                    copy -= state->wnext;
 1194|      0|                    from = state->window + (state->wsize - copy);
 1195|      0|                }
 1196|      8|                else
 1197|      8|                    from = state->window + (state->wnext - copy);
 1198|      8|                if (copy > state->length) copy = state->length;
 1199|      8|            }
 1200|     32|            else {                              /* copy from output */
 1201|     32|                from = put - state->offset;
 1202|     32|                copy = state->length;
 1203|     32|            }
 1204|     40|            if (copy > left) copy = left;
 1205|     40|            left -= copy;
 1206|     40|            state->length -= copy;
 1207|  1.51k|            do {
 1208|  1.51k|                *put++ = *from++;
 1209|  1.51k|            } while (--copy);
 1210|     40|            if (state->length == 0) state->mode = LEN;
 1211|     40|            break;
 1212|    106|        case LIT:
 1213|    106|            if (left == 0) goto inf_leave;
 1214|    106|            *put++ = (unsigned char)(state->length);
 1215|    106|            left--;
 1216|    106|            state->mode = LEN;
 1217|    106|            break;
 1218|     20|        case CHECK:
 1219|     20|            if (state->wrap) {
 1220|     20|                NEEDBITS(32);
 1221|      8|                out -= left;
 1222|      8|                strm->total_out += out;
 1223|      8|                state->total += out;
 1224|      8|                if ((state->wrap & 4) && out)
 1225|      0|                    strm->adler = state->check =
 1226|      0|                        UPDATE_CHECK(state->check, put - out, out);
 1227|      8|                out = left;
 1228|      8|                if ((state->wrap & 4) && (
 1229|      8|#ifdef GUNZIP
 1230|      8|                     state->flags ? hold :
 1231|      8|#endif
 1232|      8|                     ZSWAP32(hold)) != state->check) {
 1233|      2|                    strm->msg = (char *)"incorrect data check";
 1234|      2|                    state->mode = BAD;
 1235|      2|                    break;
 1236|      2|                }
 1237|      6|                INITBITS();
 1238|      6|                Tracev((stderr, "inflate:   check matches trailer\n"));
 1239|      6|            }
 1240|      6|#ifdef GUNZIP
 1241|      6|            state->mode = LENGTH;
 1242|       |                /* fallthrough */
 1243|      9|        case LENGTH:
 1244|      9|            if (state->wrap && state->flags) {
 1245|      9|                NEEDBITS(32);
 1246|      3|                if ((state->wrap & 4) && hold != (state->total & 0xffffffff)) {
 1247|      1|                    strm->msg = (char *)"incorrect length check";
 1248|      1|                    state->mode = BAD;
 1249|      1|                    break;
 1250|      1|                }
 1251|      2|                INITBITS();
 1252|      2|                Tracev((stderr, "inflate:   length matches trailer\n"));
 1253|      2|            }
 1254|      2|#endif
 1255|      2|            state->mode = DONE;
 1256|       |                /* fallthrough */
 1257|      2|        case DONE:
 1258|      2|            ret = Z_STREAM_END;
 1259|      2|            goto inf_leave;
 1260|     94|        case BAD:
 1261|     94|            ret = Z_DATA_ERROR;
 1262|     94|            goto inf_leave;
 1263|      0|        case MEM:
 1264|      0|            return Z_MEM_ERROR;
 1265|      0|        case SYNC:
 1266|       |                /* fallthrough */
 1267|      0|        default:
 1268|      0|            return Z_STREAM_ERROR;
 1269|  2.39k|        }
 1270|       |
 1271|       |    /*
 1272|       |       Return from inflate(), updating the total counts and the check value.
 1273|       |       If there was no progress during the inflate() call, return a buffer
 1274|       |       error.  Call updatewindow() to create and/or update the window state.
 1275|       |       Note: a memory error from inflate() is non-recoverable.
 1276|       |     */
 1277|    824|  inf_leave:
 1278|    824|    RESTORE();
 1279|    824|    if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
 1280|    453|            (state->mode < CHECK || flush != Z_FINISH)))
 1281|    467|        if (updatewindow(strm, strm->next_out, out - strm->avail_out)) {
 1282|      0|            state->mode = MEM;
 1283|      0|            return Z_MEM_ERROR;
 1284|      0|        }
 1285|    824|    in -= strm->avail_in;
 1286|    824|    out -= strm->avail_out;
 1287|    824|    strm->total_in += in;
 1288|    824|    strm->total_out += out;
 1289|    824|    state->total += out;
 1290|    824|    if ((state->wrap & 4) && out)
 1291|    337|        strm->adler = state->check =
 1292|    337|            UPDATE_CHECK(state->check, strm->next_out - out, out);
 1293|    824|    strm->data_type = (int)state->bits + (state->last ? 64 : 0) +
 1294|    824|                      (state->mode == TYPE ? 128 : 0) +
 1295|    824|                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
 1296|    824|    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
 1297|    133|        ret = Z_BUF_ERROR;
 1298|    824|    return ret;
 1299|    824|}
inflateEnd:
 1303|    209|{
 1304|    209|    struct inflate_state FAR *state;
 1305|    209|    if (inflateStateCheck(strm))
 1306|      0|        return Z_STREAM_ERROR;
 1307|    209|    state = (struct inflate_state FAR *)strm->state;
 1308|    209|    if (state->window != Z_NULL) ZFREE(strm, state->window);
 1309|    209|    ZFREE(strm, strm->state);
 1310|    209|    strm->state = Z_NULL;
 1311|    209|    Tracev((stderr, "inflate: end\n"));
 1312|    209|    return Z_OK;
 1313|    209|}
inflate.c:inflateStateCheck:
  107|  1.66k|{
  108|  1.66k|    struct inflate_state FAR *state;
  109|  1.66k|    if (strm == Z_NULL ||
  110|  1.66k|        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)
  111|      0|        return 1;
  112|  1.66k|    state = (struct inflate_state FAR *)strm->state;
  113|  1.66k|    if (state == Z_NULL || state->strm != strm ||
  114|  1.66k|        state->mode < HEAD || state->mode > SYNC)
  115|      0|        return 1;
  116|  1.66k|    return 0;
  117|  1.66k|}
inflate.c:fixedtables:
  281|    337|{
  282|       |#ifdef BUILDFIXED
  283|       |    static int virgin = 1;
  284|       |    static code *lenfix, *distfix;
  285|       |    static code fixed[544];
  286|       |
  287|       |    /* build fixed huffman tables if first call (may not be thread safe) */
  288|       |    if (virgin) {
  289|       |        unsigned sym, bits;
  290|       |        static code *next;
  291|       |
  292|       |        /* literal/length table */
  293|       |        sym = 0;
  294|       |        while (sym < 144) state->lens[sym++] = 8;
  295|       |        while (sym < 256) state->lens[sym++] = 9;
  296|       |        while (sym < 280) state->lens[sym++] = 7;
  297|       |        while (sym < 288) state->lens[sym++] = 8;
  298|       |        next = fixed;
  299|       |        lenfix = next;
  300|       |        bits = 9;
  301|       |        inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
  302|       |
  303|       |        /* distance table */
  304|       |        sym = 0;
  305|       |        while (sym < 32) state->lens[sym++] = 5;
  306|       |        distfix = next;
  307|       |        bits = 5;
  308|       |        inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
  309|       |
  310|       |        /* do this just once */
  311|       |        virgin = 0;
  312|       |    }
  313|       |#else /* !BUILDFIXED */
  314|    337|#   include "inffixed.h"
  315|    337|#endif /* BUILDFIXED */
  316|    337|    state->lencode = lenfix;
  317|    337|    state->lenbits = 9;
  318|    337|    state->distcode = distfix;
  319|    337|    state->distbits = 5;
  320|    337|}
inflate.c:updatewindow:
  401|    467|{
  402|    467|    struct inflate_state FAR *state;
  403|    467|    unsigned dist;
  404|       |
  405|    467|    state = (struct inflate_state FAR *)strm->state;
  406|       |
  407|       |    /* if it hasn't been done already, allocate space for the window */
  408|    467|    if (state->window == Z_NULL) {
  409|     96|        state->window = (unsigned char FAR *)
  410|     96|                        ZALLOC(strm, 1U << state->wbits,
  411|     96|                               sizeof(unsigned char));
  412|     96|        if (state->window == Z_NULL) return 1;
  413|     96|    }
  414|       |
  415|       |    /* if window not in use yet, initialize */
  416|    467|    if (state->wsize == 0) {
  417|     96|        state->wsize = 1U << state->wbits;
  418|     96|        state->wnext = 0;
  419|     96|        state->whave = 0;
  420|     96|    }
  421|       |
  422|       |    /* copy state->wsize or less output bytes into the circular window */
  423|    467|    if (copy >= state->wsize) {
  424|      0|        zmemcpy(state->window, end - state->wsize, state->wsize);
  425|      0|        state->wnext = 0;
  426|      0|        state->whave = state->wsize;
  427|      0|    }
  428|    467|    else {
  429|    467|        dist = state->wsize - state->wnext;
  430|    467|        if (dist > copy) dist = copy;
  431|    467|        zmemcpy(state->window + state->wnext, end - copy, dist);
  432|    467|        copy -= dist;
  433|    467|        if (copy) {
  434|      0|            zmemcpy(state->window, end - copy, copy);
  435|      0|            state->wnext = copy;
  436|      0|            state->whave = state->wsize;
  437|      0|        }
  438|    467|        else {
  439|    467|            state->wnext += dist;
  440|    467|            if (state->wnext == state->wsize) state->wnext = 0;
  441|    467|            if (state->whave < state->wsize) state->whave += dist;
  442|    467|        }
  443|    467|    }
  444|    467|    return 0;
  445|    467|}

inflate_table:
   39|     66|{
   40|     66|    unsigned len;               /* a code's length in bits */
   41|     66|    unsigned sym;               /* index of code symbols */
   42|     66|    unsigned min, max;          /* minimum and maximum code lengths */
   43|     66|    unsigned root;              /* number of index bits for root table */
   44|     66|    unsigned curr;              /* number of index bits for current table */
   45|     66|    unsigned drop;              /* code bits to drop for sub-table */
   46|     66|    int left;                   /* number of prefix codes available */
   47|     66|    unsigned used;              /* code entries in table used */
   48|     66|    unsigned huff;              /* Huffman code */
   49|     66|    unsigned incr;              /* for incrementing code, index */
   50|     66|    unsigned fill;              /* index for replicating entries */
   51|     66|    unsigned low;               /* low bits for current root entry */
   52|     66|    unsigned mask;              /* mask for low root bits */
   53|     66|    code here;                  /* table entry for duplication */
   54|     66|    code FAR *next;             /* next available space in table */
   55|     66|    const unsigned short FAR *base;     /* base value table to use */
   56|     66|    const unsigned short FAR *extra;    /* extra bits table to use */
   57|     66|    unsigned match;             /* use base and extra for symbol >= match */
   58|     66|    unsigned short count[MAXBITS+1];    /* number of codes of each length */
   59|     66|    unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
   60|     66|    static const unsigned short lbase[31] = { /* Length codes 257..285 base */
   61|     66|        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
   62|     66|        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
   63|     66|    static const unsigned short lext[31] = { /* Length codes 257..285 extra */
   64|     66|        16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
   65|     66|        19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 199, 202};
   66|     66|    static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
   67|     66|        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
   68|     66|        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
   69|     66|        8193, 12289, 16385, 24577, 0, 0};
   70|     66|    static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
   71|     66|        16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
   72|     66|        23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
   73|     66|        28, 28, 29, 29, 64, 64};
   74|       |
   75|       |    /*
   76|       |       Process a set of code lengths to create a canonical Huffman code.  The
   77|       |       code lengths are lens[0..codes-1].  Each length corresponds to the
   78|       |       symbols 0..codes-1.  The Huffman code is generated by first sorting the
   79|       |       symbols by length from short to long, and retaining the symbol order
   80|       |       for codes with equal lengths.  Then the code starts with all zero bits
   81|       |       for the first code of the shortest length, and the codes are integer
   82|       |       increments for the same length, and zeros are appended as the length
   83|       |       increases.  For the deflate format, these bits are stored backwards
   84|       |       from their more natural integer increment ordering, and so when the
   85|       |       decoding tables are built in the large loop below, the integer codes
   86|       |       are incremented backwards.
   87|       |
   88|       |       This routine assumes, but does not check, that all of the entries in
   89|       |       lens[] are in the range 0..MAXBITS.  The caller must assure this.
   90|       |       1..MAXBITS is interpreted as that code length.  zero means that that
   91|       |       symbol does not occur in this code.
   92|       |
   93|       |       The codes are sorted by computing a count of codes for each length,
   94|       |       creating from that a table of starting indices for each length in the
   95|       |       sorted table, and then entering the symbols in order in the sorted
   96|       |       table.  The sorted table is work[], with that space being provided by
   97|       |       the caller.
   98|       |
   99|       |       The length counts are used for other purposes as well, i.e. finding
  100|       |       the minimum and maximum length codes, determining if there are any
  101|       |       codes at all, checking for a valid set of lengths, and looking ahead
  102|       |       at length counts to determine sub-table sizes when building the
  103|       |       decoding tables.
  104|       |     */
  105|       |
  106|       |    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  107|  1.12k|    for (len = 0; len <= MAXBITS; len++)
  108|  1.05k|        count[len] = 0;
  109|  3.56k|    for (sym = 0; sym < codes; sym++)
  110|  3.49k|        count[lens[sym]]++;
  111|       |
  112|       |    /* bound code lengths, force root to be within code lengths */
  113|     66|    root = *bits;
  114|    706|    for (max = MAXBITS; max >= 1; max--)
  115|    699|        if (count[max] != 0) break;
  116|     66|    if (root > max) root = max;
  117|     66|    if (max == 0) {                     /* no symbols to code at all */
  118|      7|        here.op = (unsigned char)64;    /* invalid code marker */
  119|      7|        here.bits = (unsigned char)1;
  120|      7|        here.val = (unsigned short)0;
  121|      7|        *(*table)++ = here;             /* make a table to force an error */
  122|      7|        *(*table)++ = here;
  123|      7|        *bits = 1;
  124|      7|        return 0;     /* no symbols, but wait for decoding to report error */
  125|      7|    }
  126|    133|    for (min = 1; min < max; min++)
  127|    123|        if (count[min] != 0) break;
  128|     59|    if (root < min) root = min;
  129|       |
  130|       |    /* check for an over-subscribed or incomplete set of lengths */
  131|     59|    left = 1;
  132|    780|    for (len = 1; len <= MAXBITS; len++) {
  133|    733|        left <<= 1;
  134|    733|        left -= count[len];
  135|    733|        if (left < 0) return -1;        /* over-subscribed */
  136|    733|    }
  137|     47|    if (left > 0 && (type == CODES || max != 1))
  138|      8|        return -1;                      /* incomplete set */
  139|       |
  140|       |    /* generate offsets into symbol table for each length for sorting */
  141|     39|    offs[1] = 0;
  142|    585|    for (len = 1; len < MAXBITS; len++)
  143|    546|        offs[len + 1] = offs[len] + count[len];
  144|       |
  145|       |    /* sort symbols by length, by symbol order within each length */
  146|  1.74k|    for (sym = 0; sym < codes; sym++)
  147|  1.70k|        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  148|       |
  149|       |    /*
  150|       |       Create and fill in decoding tables.  In this loop, the table being
  151|       |       filled is at next and has curr index bits.  The code being used is huff
  152|       |       with length len.  That code is converted to an index by dropping drop
  153|       |       bits off of the bottom.  For codes where len is less than drop + curr,
  154|       |       those top drop + curr - len bits are incremented through all values to
  155|       |       fill the table with replicated entries.
  156|       |
  157|       |       root is the number of index bits for the root table.  When len exceeds
  158|       |       root, sub-tables are created pointed to by the root entry with an index
  159|       |       of the low root bits of huff.  This is saved in low to check for when a
  160|       |       new sub-table should be started.  drop is zero when the root table is
  161|       |       being filled, and drop is root when sub-tables are being filled.
  162|       |
  163|       |       When a new sub-table is needed, it is necessary to look ahead in the
  164|       |       code lengths to determine what size sub-table is needed.  The length
  165|       |       counts are used for this, and so count[] is decremented as codes are
  166|       |       entered in the tables.
  167|       |
  168|       |       used keeps track of how many table entries have been allocated from the
  169|       |       provided *table space.  It is checked for LENS and DIST tables against
  170|       |       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
  171|       |       the initial root table size constants.  See the comments in inftrees.h
  172|       |       for more information.
  173|       |
  174|       |       sym increments through all symbols, and the loop terminates when
  175|       |       all codes of length max, i.e. all codes, have been processed.  This
  176|       |       routine permits incomplete codes, so another loop after this one fills
  177|       |       in the rest of the decoding tables with invalid code markers.
  178|       |     */
  179|       |
  180|       |    /* set up for code type */
  181|     39|    switch (type) {
  182|     35|    case CODES:
  183|     35|        base = extra = work;    /* dummy value--not used */
  184|     35|        match = 20;
  185|     35|        break;
  186|      4|    case LENS:
  187|      4|        base = lbase;
  188|      4|        extra = lext;
  189|      4|        match = 257;
  190|      4|        break;
  191|      0|    default:    /* DISTS */
  192|      0|        base = dbase;
  193|      0|        extra = dext;
  194|      0|        match = 0;
  195|     39|    }
  196|       |
  197|       |    /* initialize state for loop */
  198|     39|    huff = 0;                   /* starting code */
  199|     39|    sym = 0;                    /* starting code symbol */
  200|     39|    len = min;                  /* starting code length */
  201|     39|    next = *table;              /* current table to fill in */
  202|     39|    curr = root;                /* current table index bits */
  203|     39|    drop = 0;                   /* current bits to drop from code for index */
  204|     39|    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
  205|     39|    used = 1U << root;          /* use root table entries */
  206|     39|    mask = used - 1;            /* mask for comparing low */
  207|       |
  208|       |    /* check available table space */
  209|     39|    if ((type == LENS && used > ENOUGH_LENS) ||
  210|     39|        (type == DISTS && used > ENOUGH_DISTS))
  211|      0|        return 1;
  212|       |
  213|       |    /* process all codes and make table entries */
  214|  1.16k|    for (;;) {
  215|       |        /* create table entry */
  216|  1.16k|        here.bits = (unsigned char)(len - drop);
  217|  1.16k|        if (work[sym] + 1U < match) {
  218|  1.15k|            here.op = (unsigned char)0;
  219|  1.15k|            here.val = work[sym];
  220|  1.15k|        }
  221|     12|        else if (work[sym] >= match) {
  222|      8|            here.op = (unsigned char)(extra[work[sym] - match]);
  223|      8|            here.val = base[work[sym] - match];
  224|      8|        }
  225|      4|        else {
  226|      4|            here.op = (unsigned char)(32 + 64);         /* end of block */
  227|      4|            here.val = 0;
  228|      4|        }
  229|       |
  230|       |        /* replicate for those indices with low len bits equal to huff */
  231|  1.16k|        incr = 1U << (len - drop);
  232|  1.16k|        fill = 1U << curr;
  233|  1.16k|        min = fill;                 /* save offset to next table */
  234|  2.83k|        do {
  235|  2.83k|            fill -= incr;
  236|  2.83k|            next[(huff >> drop) + fill] = here;
  237|  2.83k|        } while (fill != 0);
  238|       |
  239|       |        /* backwards increment the len-bit code huff */
  240|  1.16k|        incr = 1U << (len - 1);
  241|  2.29k|        while (huff & incr)
  242|  1.12k|            incr >>= 1;
  243|  1.16k|        if (incr != 0) {
  244|  1.12k|            huff &= incr - 1;
  245|  1.12k|            huff += incr;
  246|  1.12k|        }
  247|     39|        else
  248|     39|            huff = 0;
  249|       |
  250|       |        /* go to next symbol, update count, len */
  251|  1.16k|        sym++;
  252|  1.16k|        if (--(count[len]) == 0) {
  253|    138|            if (len == max) break;
  254|     99|            len = lens[work[sym]];
  255|     99|        }
  256|       |
  257|       |        /* create new sub-table if needed */
  258|  1.12k|        if (len > root && (huff & mask) != low) {
  259|       |            /* if first time, transition to sub-tables */
  260|      0|            if (drop == 0)
  261|      0|                drop = root;
  262|       |
  263|       |            /* increment past last table */
  264|      0|            next += min;            /* here min is 1 << curr */
  265|       |
  266|       |            /* determine length of next table */
  267|      0|            curr = len - drop;
  268|      0|            left = (int)(1 << curr);
  269|      0|            while (curr + drop < max) {
  270|      0|                left -= count[curr + drop];
  271|      0|                if (left <= 0) break;
  272|      0|                curr++;
  273|      0|                left <<= 1;
  274|      0|            }
  275|       |
  276|       |            /* check for enough space */
  277|      0|            used += 1U << curr;
  278|      0|            if ((type == LENS && used > ENOUGH_LENS) ||
  279|      0|                (type == DISTS && used > ENOUGH_DISTS))
  280|      0|                return 1;
  281|       |
  282|       |            /* point entry in root table to sub-table */
  283|      0|            low = huff & mask;
  284|      0|            (*table)[low].op = (unsigned char)curr;
  285|      0|            (*table)[low].bits = (unsigned char)root;
  286|      0|            (*table)[low].val = (unsigned short)(next - *table);
  287|      0|        }
  288|  1.12k|    }
  289|       |
  290|       |    /* fill in remaining table entry if code is incomplete (guaranteed to have
  291|       |       at most one remaining entry, since if the code is incomplete, the
  292|       |       maximum code length that was allowed to get this far is one bit) */
  293|     39|    if (huff != 0) {
  294|      0|        here.op = (unsigned char)64;            /* invalid code marker */
  295|      0|        here.bits = (unsigned char)(len - drop);
  296|      0|        here.val = (unsigned short)0;
  297|      0|        next[huff] = here;
  298|      0|    }
  299|       |
  300|       |    /* set return parameters */
  301|     39|    *table += used;
  302|     39|    *bits = root;
  303|     39|    return 0;
  304|     39|}

zlibVersion:
   28|    209|{
   29|    209|    return ZLIB_VERSION;
   30|    209|}

