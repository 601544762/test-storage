easy.c:sigpipe_ignore:
   44|  3.08k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  3.08k|  ig->no_signal = data->set.no_signal;
   48|  3.08k|  if(!data->set.no_signal) {
   49|  3.08k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  3.08k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  3.08k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  3.08k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  3.08k|    action.sa_handler = SIG_IGN;
   56|  3.08k|    sigaction(SIGPIPE, &action, NULL);
   57|  3.08k|  }
   58|  3.08k|}
easy.c:sigpipe_restore:
   66|  3.08k|{
   67|  3.08k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  3.08k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  3.08k|}
multi.c:sigpipe_ignore:
   44|  4.74M|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  4.74M|  ig->no_signal = data->set.no_signal;
   48|  4.74M|  if(!data->set.no_signal) {
   49|  4.74M|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  4.74M|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  4.74M|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  4.74M|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  4.74M|    action.sa_handler = SIG_IGN;
   56|  4.74M|    sigaction(SIGPIPE, &action, NULL);
   57|  4.74M|  }
   58|  4.74M|}
multi.c:sigpipe_restore:
   66|  4.74M|{
   67|  4.74M|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  4.74M|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  4.74M|}
conncache.c:sigpipe_ignore:
   44|  3.45k|{
   45|       |  /* get a local copy of no_signal because the Curl_easy might not be
   46|       |     around when we restore */
   47|  3.45k|  ig->no_signal = data->set.no_signal;
   48|  3.45k|  if(!data->set.no_signal) {
   49|  3.45k|    struct sigaction action;
   50|       |    /* first, extract the existing situation */
   51|  3.45k|    memset(&ig->old_pipe_act, 0, sizeof(struct sigaction));
   52|  3.45k|    sigaction(SIGPIPE, NULL, &ig->old_pipe_act);
   53|  3.45k|    action = ig->old_pipe_act;
   54|       |    /* ignore this signal */
   55|  3.45k|    action.sa_handler = SIG_IGN;
   56|  3.45k|    sigaction(SIGPIPE, &action, NULL);
   57|  3.45k|  }
   58|  3.45k|}
conncache.c:sigpipe_restore:
   66|  3.45k|{
   67|  3.45k|  if(!ig->no_signal)
   68|       |    /* restore the outside state */
   69|  3.45k|    sigaction(SIGPIPE, &ig->old_pipe_act, NULL);
   70|  3.45k|}

Curl_altsvc_cleanup:
  306|  6.05k|{
  307|  6.05k|  struct Curl_llist_element *e;
  308|  6.05k|  struct Curl_llist_element *n;
  309|  6.05k|  if(*altsvcp) {
  310|      0|    struct altsvcinfo *altsvc = *altsvcp;
  311|      0|    for(e = altsvc->list.head; e; e = n) {
  312|      0|      struct altsvc *as = e->ptr;
  313|      0|      n = e->next;
  314|      0|      altsvc_free(as);
  315|      0|    }
  316|      0|    free(altsvc->filename);
  317|      0|    free(altsvc);
  318|      0|    *altsvcp = NULL; /* clear the pointer */
  319|      0|  }
  320|  6.05k|}
Curl_altsvc_save:
  327|  6.05k|{
  328|  6.05k|  struct Curl_llist_element *e;
  329|  6.05k|  struct Curl_llist_element *n;
  330|  6.05k|  CURLcode result = CURLE_OK;
  331|  6.05k|  FILE *out;
  332|  6.05k|  char *tempstore;
  333|  6.05k|  unsigned char randsuffix[9];
  334|       |
  335|  6.05k|  if(!altsvc)
  336|       |    /* no cache activated */
  337|  6.05k|    return CURLE_OK;
  338|       |
  339|       |  /* if not new name is given, use the one we stored from the load */
  340|      0|  if(!file && altsvc->filename)
  341|      0|    file = altsvc->filename;
  342|       |
  343|      0|  if((altsvc->flags & CURLALTSVC_READONLYFILE) || !file || !file[0])
  344|       |    /* marked as read-only, no file or zero length file name */
  345|      0|    return CURLE_OK;
  346|       |
  347|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  348|      0|    return CURLE_FAILED_INIT;
  349|       |
  350|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  351|      0|  if(!tempstore)
  352|      0|    return CURLE_OUT_OF_MEMORY;
  353|       |
  354|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  355|      0|  if(!out)
  356|      0|    result = CURLE_WRITE_ERROR;
  357|      0|  else {
  358|      0|    fputs("# Your alt-svc cache. https://curl.se/docs/alt-svc.html\n"
  359|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  360|      0|          out);
  361|      0|    for(e = altsvc->list.head; e; e = n) {
  362|      0|      struct altsvc *as = e->ptr;
  363|      0|      n = e->next;
  364|      0|      result = altsvc_out(as, out);
  365|      0|      if(result)
  366|      0|        break;
  367|      0|    }
  368|      0|    fclose(out);
  369|      0|    if(!result && Curl_rename(tempstore, file))
  370|      0|      result = CURLE_WRITE_ERROR;
  371|       |
  372|      0|    if(result)
  373|      0|      unlink(tempstore);
  374|      0|  }
  375|      0|  free(tempstore);
  376|      0|  return result;
  377|      0|}

Curl_resolver_global_init:
   92|      1|{
   93|      1|  return CURLE_OK;
   94|      1|}
Curl_resolver_init:
  112|  6.05k|{
  113|  6.05k|  (void)easy;
  114|  6.05k|  *resolver = calloc(1, sizeof(struct resdata));
  115|  6.05k|  if(!*resolver)
  116|      0|    return CURLE_OUT_OF_MEMORY;
  117|  6.05k|  return CURLE_OK;
  118|  6.05k|}
Curl_resolver_cleanup:
  127|  6.05k|{
  128|  6.05k|  free(resolver);
  129|  6.05k|}
Curl_resolver_cancel:
  148|  5.76k|{
  149|  5.76k|  destroy_async_data(&data->state.async);
  150|  5.76k|}
Curl_resolver_kill:
  531|  2.84k|{
  532|  2.84k|  struct thread_data *td = data->state.async.tdata;
  533|       |
  534|       |  /* If we're still resolving, we must wait for the threads to fully clean up,
  535|       |     unfortunately.  Otherwise, we can simply cancel to clean up any resolver
  536|       |     data. */
  537|  2.84k|  if(td && td->thread_hnd != curl_thread_t_null)
  538|      0|    (void)thread_wait_resolv(data, NULL, FALSE);
  539|  2.84k|  else
  540|  2.84k|    Curl_resolver_cancel(data);
  541|  2.84k|}
Curl_resolver_wait_resolv:
  558|     11|{
  559|     11|  return thread_wait_resolv(data, entry, TRUE);
  560|     11|}
Curl_resolver_is_resolved:
  569|     11|{
  570|     11|  struct thread_data *td = data->state.async.tdata;
  571|     11|  int done = 0;
  572|       |
  573|     11|  DEBUGASSERT(entry);
  574|     11|  *entry = NULL;
  575|       |
  576|     11|  if(!td) {
  577|      0|    DEBUGASSERT(td);
  578|      0|    return CURLE_COULDNT_RESOLVE_HOST;
  579|      0|  }
  580|       |
  581|     11|  Curl_mutex_acquire(td->tsd.mtx);
  582|     11|  done = td->tsd.done;
  583|     11|  Curl_mutex_release(td->tsd.mtx);
  584|       |
  585|     11|  if(done) {
  586|      0|    getaddrinfo_complete(data);
  587|       |
  588|      0|    if(!data->state.async.dns) {
  589|      0|      CURLcode result = Curl_resolver_error(data);
  590|      0|      destroy_async_data(&data->state.async);
  591|      0|      return result;
  592|      0|    }
  593|      0|    destroy_async_data(&data->state.async);
  594|      0|    *entry = data->state.async.dns;
  595|      0|  }
  596|     11|  else {
  597|       |    /* poll for name lookup done with exponential backoff up to 250ms */
  598|       |    /* should be fine even if this converts to 32 bit */
  599|     11|    timediff_t elapsed = Curl_timediff(Curl_now(),
  600|     11|                                       data->progress.t_startsingle);
  601|     11|    if(elapsed < 0)
  602|      0|      elapsed = 0;
  603|       |
  604|     11|    if(td->poll_interval == 0)
  605|       |      /* Start at 1ms poll interval */
  606|     11|      td->poll_interval = 1;
  607|      0|    else if(elapsed >= td->interval_end)
  608|       |      /* Back-off exponentially if last interval expired  */
  609|      0|      td->poll_interval *= 2;
  610|       |
  611|     11|    if(td->poll_interval > 250)
  612|      0|      td->poll_interval = 250;
  613|       |
  614|     11|    td->interval_end = elapsed + td->poll_interval;
  615|     11|    Curl_expire(data, td->poll_interval, EXPIRE_ASYNC_NAME);
  616|     11|  }
  617|       |
  618|     11|  return CURLE_OK;
  619|     11|}
Curl_resolver_getaddrinfo:
  695|     11|{
  696|     11|  struct addrinfo hints;
  697|     11|  int pf = PF_INET;
  698|     11|  struct resdata *reslv = (struct resdata *)data->state.async.resolver;
  699|       |
  700|     11|  *waitp = 0; /* default to synchronous response */
  701|       |
  702|     11|#ifdef CURLRES_IPV6
  703|     11|  if(Curl_ipv6works(data))
  704|       |    /* The stack seems to be IPv6-enabled */
  705|     11|    pf = PF_UNSPEC;
  706|     11|#endif /* CURLRES_IPV6 */
  707|       |
  708|     11|  memset(&hints, 0, sizeof(hints));
  709|     11|  hints.ai_family = pf;
  710|     11|  hints.ai_socktype = (data->conn->transport == TRNSPRT_TCP)?
  711|     11|    SOCK_STREAM : SOCK_DGRAM;
  712|       |
  713|     11|  reslv->start = Curl_now();
  714|       |  /* fire up a new resolver thread! */
  715|     11|  if(init_resolve_thread(data, hostname, port, &hints)) {
  716|     11|    *waitp = 1; /* expect asynchronous response */
  717|     11|    return NULL;
  718|     11|  }
  719|       |
  720|      0|  failf(data, "getaddrinfo() thread failed to start");
  721|      0|  return NULL;
  722|       |
  723|     11|}
asyn-thread.c:destroy_async_data:
  380|  5.77k|{
  381|  5.77k|  if(async->tdata) {
  382|     11|    struct thread_data *td = async->tdata;
  383|     11|    int done;
  384|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  385|     11|    curl_socket_t sock_rd = td->tsd.sock_pair[0];
  386|     11|    struct Curl_easy *data = td->tsd.data;
  387|     11|#endif
  388|       |
  389|       |    /*
  390|       |     * if the thread is still blocking in the resolve syscall, detach it and
  391|       |     * let the thread do the cleanup...
  392|       |     */
  393|     11|    Curl_mutex_acquire(td->tsd.mtx);
  394|     11|    done = td->tsd.done;
  395|     11|    td->tsd.done = 1;
  396|     11|    Curl_mutex_release(td->tsd.mtx);
  397|       |
  398|     11|    if(!done) {
  399|      0|      Curl_thread_destroy(td->thread_hnd);
  400|      0|    }
  401|     11|    else {
  402|     11|      if(td->thread_hnd != curl_thread_t_null)
  403|      0|        Curl_thread_join(&td->thread_hnd);
  404|       |
  405|     11|      destroy_thread_sync_data(&td->tsd);
  406|       |
  407|     11|      free(async->tdata);
  408|     11|    }
  409|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  410|       |    /*
  411|       |     * ensure CURLMOPT_SOCKETFUNCTION fires CURL_POLL_REMOVE
  412|       |     * before the FD is invalidated to avoid EBADF on EPOLL_CTL_DEL
  413|       |     */
  414|     11|    Curl_multi_closed(data, sock_rd);
  415|     11|    sclose(sock_rd);
  416|     11|#endif
  417|     11|  }
  418|  5.77k|  async->tdata = NULL;
  419|       |
  420|  5.77k|  free(async->hostname);
  421|  5.77k|  async->hostname = NULL;
  422|  5.77k|}
asyn-thread.c:destroy_thread_sync_data:
  192|     11|{
  193|     11|  if(tsd->mtx) {
  194|     11|    Curl_mutex_destroy(tsd->mtx);
  195|     11|    free(tsd->mtx);
  196|     11|  }
  197|       |
  198|     11|  free(tsd->hostname);
  199|       |
  200|     11|  if(tsd->res)
  201|      0|    Curl_freeaddrinfo(tsd->res);
  202|       |
  203|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  204|       |  /*
  205|       |   * close one end of the socket pair (may be done in resolver thread);
  206|       |   * the other end (for reading) is always closed in the parent thread.
  207|       |   */
  208|     11|  if(tsd->sock_pair[1] != CURL_SOCKET_BAD) {
  209|     11|    sclose(tsd->sock_pair[1]);
  210|     11|  }
  211|     11|#endif
  212|     11|  memset(tsd, 0, sizeof(*tsd));
  213|     11|}
asyn-thread.c:thread_wait_resolv:
  491|     11|{
  492|     11|  struct thread_data *td;
  493|     11|  CURLcode result = CURLE_OK;
  494|       |
  495|     11|  DEBUGASSERT(data);
  496|     11|  td = data->state.async.tdata;
  497|     11|  DEBUGASSERT(td);
  498|     11|  DEBUGASSERT(td->thread_hnd != curl_thread_t_null);
  499|       |
  500|       |  /* wait for the thread to resolve the name */
  501|     11|  if(Curl_thread_join(&td->thread_hnd)) {
  502|     11|    if(entry)
  503|     11|      result = getaddrinfo_complete(data);
  504|     11|  }
  505|      0|  else
  506|     11|    DEBUGASSERT(0);
  507|       |
  508|     11|  data->state.async.done = TRUE;
  509|       |
  510|     11|  if(entry)
  511|     11|    *entry = data->state.async.dns;
  512|       |
  513|     11|  if(!data->state.async.dns && report)
  514|       |    /* a name was not resolved, report error */
  515|     11|    result = Curl_resolver_error(data);
  516|       |
  517|     11|  destroy_async_data(&data->state.async);
  518|       |
  519|     11|  if(!data->state.async.dns && report)
  520|     11|    connclose(data->conn, "asynch resolve failed");
  521|       |
  522|     11|  return result;
  523|     11|}
asyn-thread.c:getaddrinfo_complete:
  271|     11|{
  272|     11|  struct thread_sync_data *tsd = conn_thread_sync_data(data);
  273|     11|  int rc;
  274|       |
  275|     11|  rc = Curl_addrinfo_callback(data, tsd->sock_error, tsd->res);
  276|       |  /* The tsd->res structure has been copied to async.dns and perhaps the DNS
  277|       |     cache.  Set our copy to NULL so destroy_thread_sync_data doesn't free it.
  278|       |  */
  279|     11|  tsd->res = NULL;
  280|       |
  281|     11|  return rc;
  282|     11|}
asyn-thread.c:conn_thread_sync_data:
  185|     11|{
  186|     11|  return &(data->state.async.tdata->tsd);
  187|     11|}
asyn-thread.c:init_resolve_thread:
  433|     11|{
  434|     11|  struct thread_data *td = calloc(1, sizeof(struct thread_data));
  435|     11|  int err = ENOMEM;
  436|     11|  struct Curl_async *asp = &data->state.async;
  437|       |
  438|     11|  data->state.async.tdata = td;
  439|     11|  if(!td)
  440|      0|    goto errno_exit;
  441|       |
  442|     11|  asp->port = port;
  443|     11|  asp->done = FALSE;
  444|     11|  asp->status = 0;
  445|     11|  asp->dns = NULL;
  446|     11|  td->thread_hnd = curl_thread_t_null;
  447|       |
  448|     11|  if(!init_thread_sync_data(td, hostname, port, hints)) {
  449|      0|    asp->tdata = NULL;
  450|      0|    free(td);
  451|      0|    goto errno_exit;
  452|      0|  }
  453|       |
  454|     11|  free(asp->hostname);
  455|     11|  asp->hostname = strdup(hostname);
  456|     11|  if(!asp->hostname)
  457|      0|    goto err_exit;
  458|       |
  459|       |  /* The thread will set this to 1 when complete. */
  460|     11|  td->tsd.done = 0;
  461|       |
  462|     11|#ifdef HAVE_GETADDRINFO
  463|     11|  td->thread_hnd = Curl_thread_create(getaddrinfo_thread, &td->tsd);
  464|       |#else
  465|       |  td->thread_hnd = Curl_thread_create(gethostbyname_thread, &td->tsd);
  466|       |#endif
  467|       |
  468|     11|  if(!td->thread_hnd) {
  469|       |    /* The thread never started, so mark it as done here for proper cleanup. */
  470|      0|    td->tsd.done = 1;
  471|      0|    err = errno;
  472|      0|    goto err_exit;
  473|      0|  }
  474|       |
  475|     11|  return TRUE;
  476|       |
  477|      0| err_exit:
  478|      0|  destroy_async_data(asp);
  479|       |
  480|      0| errno_exit:
  481|      0|  errno = err;
  482|      0|  return FALSE;
  483|      0|}
asyn-thread.c:init_thread_sync_data:
  221|     11|{
  222|     11|  struct thread_sync_data *tsd = &td->tsd;
  223|       |
  224|     11|  memset(tsd, 0, sizeof(*tsd));
  225|       |
  226|     11|  tsd->td = td;
  227|     11|  tsd->port = port;
  228|       |  /* Treat the request as done until the thread actually starts so any early
  229|       |   * cleanup gets done properly.
  230|       |   */
  231|     11|  tsd->done = 1;
  232|     11|#ifdef HAVE_GETADDRINFO
  233|     11|  DEBUGASSERT(hints);
  234|     11|  tsd->hints = *hints;
  235|       |#else
  236|       |  (void) hints;
  237|       |#endif
  238|       |
  239|     11|  tsd->mtx = malloc(sizeof(curl_mutex_t));
  240|     11|  if(!tsd->mtx)
  241|      0|    goto err_exit;
  242|       |
  243|     11|  Curl_mutex_init(tsd->mtx);
  244|       |
  245|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  246|       |  /* create socket pair, avoid AF_LOCAL since it doesn't build on Solaris */
  247|     11|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, &tsd->sock_pair[0]) < 0) {
  248|      0|    tsd->sock_pair[0] = CURL_SOCKET_BAD;
  249|      0|    tsd->sock_pair[1] = CURL_SOCKET_BAD;
  250|      0|    goto err_exit;
  251|      0|  }
  252|     11|#endif
  253|     11|  tsd->sock_error = CURL_ASYNC_SUCCESS;
  254|       |
  255|       |  /* Copying hostname string because original can be destroyed by parent
  256|       |   * thread during gethostbyname execution.
  257|       |   */
  258|     11|  tsd->hostname = strdup(hostname);
  259|     11|  if(!tsd->hostname)
  260|      0|    goto err_exit;
  261|       |
  262|     11|  return 1;
  263|       |
  264|      0| err_exit:
  265|       |  /* Memory allocation failed */
  266|      0|  destroy_thread_sync_data(tsd);
  267|      0|  return 0;
  268|     11|}
asyn-thread.c:getaddrinfo_thread:
  294|     11|{
  295|     11|  struct thread_sync_data *tsd = (struct thread_sync_data *)arg;
  296|     11|  struct thread_data *td = tsd->td;
  297|     11|  char service[12];
  298|     11|  int rc;
  299|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  300|     11|  char buf[1];
  301|     11|#endif
  302|       |
  303|     11|  msnprintf(service, sizeof(service), "%d", tsd->port);
  304|       |
  305|     11|  rc = Curl_getaddrinfo_ex(tsd->hostname, service, &tsd->hints, &tsd->res);
  306|       |
  307|     11|  if(rc) {
  308|     11|    tsd->sock_error = SOCKERRNO?SOCKERRNO:rc;
  309|     11|    if(tsd->sock_error == 0)
  310|      0|      tsd->sock_error = RESOLVER_ENOMEM;
  311|     11|  }
  312|      0|  else {
  313|      0|    Curl_addrinfo_set_port(tsd->res, tsd->port);
  314|      0|  }
  315|       |
  316|     11|  Curl_mutex_acquire(tsd->mtx);
  317|     11|  if(tsd->done) {
  318|       |    /* too late, gotta clean up the mess */
  319|      0|    Curl_mutex_release(tsd->mtx);
  320|      0|    destroy_thread_sync_data(tsd);
  321|      0|    free(td);
  322|      0|  }
  323|     11|  else {
  324|     11|#ifndef CURL_DISABLE_SOCKETPAIR
  325|     11|    if(tsd->sock_pair[1] != CURL_SOCKET_BAD) {
  326|       |      /* DNS has been resolved, signal client task */
  327|     11|      buf[0] = 1;
  328|     11|      if(swrite(tsd->sock_pair[1],  buf, sizeof(buf)) < 0) {
  329|       |        /* update sock_erro to errno */
  330|      0|        tsd->sock_error = SOCKERRNO;
  331|      0|      }
  332|     11|    }
  333|     11|#endif
  334|     11|    tsd->done = 1;
  335|     11|    Curl_mutex_release(tsd->mtx);
  336|     11|  }
  337|       |
  338|     11|  return 0;
  339|     11|}

Curl_base64_decode:
  109|     71|{
  110|     71|  size_t srclen = 0;
  111|     71|  size_t length = 0;
  112|     71|  size_t padding = 0;
  113|     71|  size_t i;
  114|     71|  size_t numQuantums;
  115|     71|  size_t rawlen = 0;
  116|     71|  unsigned char *pos;
  117|     71|  unsigned char *newstr;
  118|       |
  119|     71|  *outptr = NULL;
  120|     71|  *outlen = 0;
  121|     71|  srclen = strlen(src);
  122|       |
  123|       |  /* Check the length of the input string is valid */
  124|     71|  if(!srclen || srclen % 4)
  125|     29|    return CURLE_BAD_CONTENT_ENCODING;
  126|       |
  127|       |  /* Find the position of any = padding characters */
  128|  1.02k|  while((src[length] != '=') && src[length])
  129|    978|    length++;
  130|       |
  131|       |  /* A maximum of two = padding characters is allowed */
  132|     42|  if(src[length] == '=') {
  133|      5|    padding++;
  134|      5|    if(src[length + 1] == '=')
  135|      0|      padding++;
  136|      5|  }
  137|       |
  138|       |  /* Check the = padding characters weren't part way through the input */
  139|     42|  if(length + padding != srclen)
  140|      4|    return CURLE_BAD_CONTENT_ENCODING;
  141|       |
  142|       |  /* Calculate the number of quantums */
  143|     38|  numQuantums = srclen / 4;
  144|       |
  145|       |  /* Calculate the size of the decoded string */
  146|     38|  rawlen = (numQuantums * 3) - padding;
  147|       |
  148|       |  /* Allocate our buffer including room for a zero terminator */
  149|     38|  newstr = malloc(rawlen + 1);
  150|     38|  if(!newstr)
  151|      0|    return CURLE_OUT_OF_MEMORY;
  152|       |
  153|     38|  pos = newstr;
  154|       |
  155|       |  /* Decode the quantums */
  156|    216|  for(i = 0; i < numQuantums; i++) {
  157|    195|    size_t result = decodeQuantum(pos, src);
  158|    195|    if(!result) {
  159|     17|      free(newstr);
  160|       |
  161|     17|      return CURLE_BAD_CONTENT_ENCODING;
  162|     17|    }
  163|       |
  164|    178|    pos += result;
  165|    178|    src += 4;
  166|    178|  }
  167|       |
  168|       |  /* Zero terminate */
  169|     21|  *pos = '\0';
  170|       |
  171|       |  /* Return the decoded data */
  172|     21|  *outptr = newstr;
  173|     21|  *outlen = rawlen;
  174|       |
  175|     21|  return CURLE_OK;
  176|     38|}
Curl_base64_encode:
  301|    240|{
  302|    240|  return base64_encode(base64, data, inputbuff, insize, outptr, outlen);
  303|    240|}
base64.c:decodeQuantum:
   54|    195|{
   55|    195|  size_t padding = 0;
   56|    195|  const char *s, *p;
   57|    195|  unsigned long i, x = 0;
   58|       |
   59|    927|  for(i = 0, s = src; i < 4; i++, s++) {
   60|    749|    if(*s == '=') {
   61|      1|      x = (x << 6);
   62|      1|      padding++;
   63|      1|    }
   64|    748|    else {
   65|    748|      unsigned long v = 0;
   66|    748|      p = base64;
   67|       |
   68|  28.2k|      while(*p && (*p != *s)) {
   69|  27.5k|        v++;
   70|  27.5k|        p++;
   71|  27.5k|      }
   72|       |
   73|    748|      if(*p == *s)
   74|    731|        x = (x << 6) + v;
   75|     17|      else
   76|     17|        return 0;
   77|    748|    }
   78|    749|  }
   79|       |
   80|    178|  if(padding < 1)
   81|    177|    dest[2] = curlx_ultouc(x & 0xFFUL);
   82|       |
   83|    178|  x >>= 8;
   84|    178|  if(padding < 2)
   85|    178|    dest[1] = curlx_ultouc(x & 0xFFUL);
   86|       |
   87|    178|  x >>= 8;
   88|    178|  dest[0] = curlx_ultouc(x & 0xFFUL);
   89|       |
   90|    178|  return 3 - padding;
   91|    195|}
base64.c:base64_encode:
  182|    240|{
  183|    240|  CURLcode result;
  184|    240|  unsigned char ibuf[3];
  185|    240|  unsigned char obuf[4];
  186|    240|  int i;
  187|    240|  int inputparts;
  188|    240|  char *output;
  189|    240|  char *base64data;
  190|    240|  char *convbuf = NULL;
  191|       |
  192|    240|  const char *indata = inputbuff;
  193|       |
  194|    240|  *outptr = NULL;
  195|    240|  *outlen = 0;
  196|       |
  197|    240|  if(!insize)
  198|      0|    insize = strlen(indata);
  199|       |
  200|       |#if SIZEOF_SIZE_T == 4
  201|       |  if(insize > UINT_MAX/4)
  202|       |    return CURLE_OUT_OF_MEMORY;
  203|       |#endif
  204|       |
  205|    240|  base64data = output = malloc(insize * 4 / 3 + 4);
  206|    240|  if(!output)
  207|      0|    return CURLE_OUT_OF_MEMORY;
  208|       |
  209|       |  /*
  210|       |   * The base64 data needs to be created using the network encoding
  211|       |   * not the host encoding.  And we can't change the actual input
  212|       |   * so we copy it to a buffer, translate it, and use that instead.
  213|       |   */
  214|    240|  result = Curl_convert_clone(data, indata, insize, &convbuf);
  215|    240|  if(result) {
  216|      0|    free(output);
  217|      0|    return result;
  218|      0|  }
  219|       |
  220|    240|  if(convbuf)
  221|      0|    indata = (char *)convbuf;
  222|       |
  223|  6.78k|  while(insize > 0) {
  224|  26.1k|    for(i = inputparts = 0; i < 3; i++) {
  225|  19.6k|      if(insize > 0) {
  226|  19.3k|        inputparts++;
  227|  19.3k|        ibuf[i] = (unsigned char) *indata;
  228|  19.3k|        indata++;
  229|  19.3k|        insize--;
  230|  19.3k|      }
  231|    248|      else
  232|    248|        ibuf[i] = 0;
  233|  19.6k|    }
  234|       |
  235|  6.54k|    obuf[0] = (unsigned char)  ((ibuf[0] & 0xFC) >> 2);
  236|  6.54k|    obuf[1] = (unsigned char) (((ibuf[0] & 0x03) << 4) | \
  237|  6.54k|                               ((ibuf[1] & 0xF0) >> 4));
  238|  6.54k|    obuf[2] = (unsigned char) (((ibuf[1] & 0x0F) << 2) | \
  239|  6.54k|                               ((ibuf[2] & 0xC0) >> 6));
  240|  6.54k|    obuf[3] = (unsigned char)   (ibuf[2] & 0x3F);
  241|       |
  242|  6.54k|    switch(inputparts) {
  243|     65|    case 1: /* only one byte read */
  244|     65|      msnprintf(output, 5, "%c%c==",
  245|     65|                table64[obuf[0]],
  246|     65|                table64[obuf[1]]);
  247|     65|      break;
  248|       |
  249|    118|    case 2: /* two bytes read */
  250|    118|      msnprintf(output, 5, "%c%c%c=",
  251|    118|                table64[obuf[0]],
  252|    118|                table64[obuf[1]],
  253|    118|                table64[obuf[2]]);
  254|    118|      break;
  255|       |
  256|  6.36k|    default:
  257|  6.36k|      msnprintf(output, 5, "%c%c%c%c",
  258|  6.36k|                table64[obuf[0]],
  259|  6.36k|                table64[obuf[1]],
  260|  6.36k|                table64[obuf[2]],
  261|  6.36k|                table64[obuf[3]]);
  262|  6.36k|      break;
  263|  6.54k|    }
  264|  6.54k|    output += 4;
  265|  6.54k|  }
  266|       |
  267|       |  /* Zero terminate */
  268|    240|  *output = '\0';
  269|       |
  270|       |  /* Return the pointer to the new data (allocated memory) */
  271|    240|  *outptr = base64data;
  272|       |
  273|    240|  free(convbuf);
  274|       |
  275|       |  /* Return the length of the new data */
  276|    240|  *outlen = strlen(base64data);
  277|       |
  278|    240|  return CURLE_OK;
  279|    240|}

Curl_bufref_init:
   36|    596|{
   37|    596|  DEBUGASSERT(br);
   38|    596|  br->dtor = NULL;
   39|    596|  br->ptr = NULL;
   40|    596|  br->len = 0;
   41|       |
   42|    596|#ifdef DEBUGBUILD
   43|    596|  br->signature = SIGNATURE;
   44|    596|#endif
   45|    596|}
Curl_bufref_free:
   53|    588|{
   54|    588|  DEBUGASSERT(br);
   55|    588|  DEBUGASSERT(br->signature == SIGNATURE);
   56|    588|  DEBUGASSERT(br->ptr || !br->len);
   57|       |
   58|    588|  if(br->ptr && br->dtor)
   59|    103|    br->dtor((void *) br->ptr);
   60|       |
   61|    588|  br->dtor = NULL;
   62|    588|  br->ptr = NULL;
   63|    588|  br->len = 0;
   64|    588|}
Curl_bufref_set:
   72|    228|{
   73|    228|  DEBUGASSERT(ptr || !len);
   74|    228|  DEBUGASSERT(len <= CURL_MAX_INPUT_LENGTH);
   75|       |
   76|    228|  Curl_bufref_free(br);
   77|    228|  br->ptr = (const unsigned char *) ptr;
   78|    228|  br->len = len;
   79|    228|  br->dtor = dtor;
   80|    228|}
Curl_bufref_ptr:
   86|    569|{
   87|    569|  DEBUGASSERT(br);
   88|    569|  DEBUGASSERT(br->signature == SIGNATURE);
   89|    569|  DEBUGASSERT(br->ptr || !br->len);
   90|       |
   91|    569|  return br->ptr;
   92|    569|}
Curl_bufref_len:
   98|    257|{
   99|    257|  DEBUGASSERT(br);
  100|    257|  DEBUGASSERT(br->signature == SIGNATURE);
  101|    257|  DEBUGASSERT(br->ptr || !br->len);
  102|       |
  103|    257|  return br->len;
  104|    257|}

Curl_conncache_init:
  115|  2.97k|{
  116|  2.97k|  int rc;
  117|       |
  118|       |  /* allocate a new easy handle to use when closing cached connections */
  119|  2.97k|  connc->closure_handle = curl_easy_init();
  120|  2.97k|  if(!connc->closure_handle)
  121|      0|    return 1; /* bad */
  122|       |
  123|  2.97k|  rc = Curl_hash_init(&connc->hash, size, Curl_hash_str,
  124|  2.97k|                      Curl_str_key_compare, free_bundle_hash_entry);
  125|  2.97k|  if(rc)
  126|      0|    Curl_close(&connc->closure_handle);
  127|  2.97k|  else
  128|  2.97k|    connc->closure_handle->state.conn_cache = connc;
  129|       |
  130|  2.97k|  return rc;
  131|  2.97k|}
Curl_conncache_destroy:
  134|  2.97k|{
  135|  2.97k|  if(connc)
  136|  2.97k|    Curl_hash_destroy(&connc->hash);
  137|  2.97k|}
Curl_conncache_size:
  172|    533|{
  173|    533|  size_t num;
  174|    533|  CONNCACHE_LOCK(data);
  175|    533|  num = data->state.conn_cache->num_conn;
  176|    533|  CONNCACHE_UNLOCK(data);
  177|    533|  return num;
  178|    533|}
Curl_conncache_find_bundle:
  189|  8.46k|{
  190|  8.46k|  struct connectbundle *bundle = NULL;
  191|  8.46k|  CONNCACHE_LOCK(data);
  192|  8.46k|  if(connc) {
  193|  8.46k|    char key[HASHKEY_SIZE];
  194|  8.46k|    hashkey(conn, key, sizeof(key), hostp);
  195|  8.46k|    bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
  196|  8.46k|  }
  197|       |
  198|  8.46k|  return bundle;
  199|  8.46k|}
Curl_conncache_add_conn:
  235|  2.84k|{
  236|  2.84k|  CURLcode result = CURLE_OK;
  237|  2.84k|  struct connectbundle *bundle = NULL;
  238|  2.84k|  struct connectdata *conn = data->conn;
  239|  2.84k|  struct conncache *connc = data->state.conn_cache;
  240|  2.84k|  DEBUGASSERT(conn);
  241|       |
  242|       |  /* *find_bundle() locks the connection cache */
  243|  2.84k|  bundle = Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
  244|  2.84k|                                      NULL);
  245|  2.84k|  if(!bundle) {
  246|  2.83k|    int rc;
  247|  2.83k|    char key[HASHKEY_SIZE];
  248|       |
  249|  2.83k|    result = bundle_create(&bundle);
  250|  2.83k|    if(result) {
  251|      0|      goto unlock;
  252|      0|    }
  253|       |
  254|  2.83k|    hashkey(conn, key, sizeof(key), NULL);
  255|  2.83k|    rc = conncache_add_bundle(data->state.conn_cache, key, bundle);
  256|       |
  257|  2.83k|    if(!rc) {
  258|      0|      bundle_destroy(bundle);
  259|      0|      result = CURLE_OUT_OF_MEMORY;
  260|      0|      goto unlock;
  261|      0|    }
  262|  2.83k|  }
  263|       |
  264|  2.84k|  bundle_add_conn(bundle, conn);
  265|  2.84k|  conn->connection_id = connc->next_connection_id++;
  266|  2.84k|  connc->num_conn++;
  267|       |
  268|  2.84k|  DEBUGF(infof(data, "Added connection %ld. "
  269|  2.84k|               "The cache now contains %zu members",
  270|  2.84k|               conn->connection_id, connc->num_conn));
  271|       |
  272|  2.84k|  unlock:
  273|  2.84k|  CONNCACHE_UNLOCK(data);
  274|       |
  275|  2.84k|  return result;
  276|  2.84k|}
Curl_conncache_remove_conn:
  287|  2.92k|{
  288|  2.92k|  struct connectbundle *bundle = conn->bundle;
  289|  2.92k|  struct conncache *connc = data->state.conn_cache;
  290|       |
  291|       |  /* The bundle pointer can be NULL, since this function can be called
  292|       |     due to a failed connection attempt, before being added to a bundle */
  293|  2.92k|  if(bundle) {
  294|  2.84k|    if(lock) {
  295|    488|      CONNCACHE_LOCK(data);
  296|    488|    }
  297|  2.84k|    bundle_remove_conn(bundle, conn);
  298|  2.84k|    if(bundle->num_connections == 0)
  299|  2.83k|      conncache_remove_bundle(connc, bundle);
  300|  2.84k|    conn->bundle = NULL; /* removed from it */
  301|  2.84k|    if(connc) {
  302|  2.84k|      connc->num_conn--;
  303|  2.84k|      DEBUGF(infof(data, "The cache now contains %zu members",
  304|  2.84k|                   connc->num_conn));
  305|  2.84k|    }
  306|  2.84k|    if(lock) {
  307|    488|      CONNCACHE_UNLOCK(data);
  308|    488|    }
  309|  2.84k|  }
  310|  2.92k|}
Curl_conncache_foreach:
  329|  3.22k|{
  330|  3.22k|  struct Curl_hash_iterator iter;
  331|  3.22k|  struct Curl_llist_element *curr;
  332|  3.22k|  struct Curl_hash_element *he;
  333|       |
  334|  3.22k|  if(!connc)
  335|      0|    return FALSE;
  336|       |
  337|  3.22k|  CONNCACHE_LOCK(data);
  338|  3.22k|  Curl_hash_start_iterate(&connc->hash, &iter);
  339|       |
  340|  3.22k|  he = Curl_hash_next_element(&iter);
  341|  3.22k|  while(he) {
  342|    479|    struct connectbundle *bundle;
  343|       |
  344|    479|    bundle = he->ptr;
  345|    479|    he = Curl_hash_next_element(&iter);
  346|       |
  347|    479|    curr = bundle->conn_list.head;
  348|    479|    while(curr) {
  349|       |      /* Yes, we need to update curr before calling func(), because func()
  350|       |         might decide to remove the connection */
  351|    479|      struct connectdata *conn = curr->ptr;
  352|    479|      curr = curr->next;
  353|       |
  354|    479|      if(1 == func(data, conn, param)) {
  355|    479|        CONNCACHE_UNLOCK(data);
  356|    479|        return TRUE;
  357|    479|      }
  358|    479|    }
  359|    479|  }
  360|  2.74k|  CONNCACHE_UNLOCK(data);
  361|  2.74k|  return FALSE;
  362|  2.74k|}
Curl_conncache_return_conn:
  403|    533|{
  404|       |  /* data->multi->maxconnects can be negative, deal with it. */
  405|    533|  size_t maxconnects =
  406|    533|    (data->multi->maxconnects < 0) ? data->multi->num_easy * 4:
  407|    533|    data->multi->maxconnects;
  408|    533|  struct connectdata *conn_candidate = NULL;
  409|       |
  410|    533|  conn->lastused = Curl_now(); /* it was used up until now */
  411|    533|  if(maxconnects > 0 &&
  412|    533|     Curl_conncache_size(data) > maxconnects) {
  413|      0|    infof(data, "Connection cache is full, closing the oldest one");
  414|       |
  415|      0|    conn_candidate = Curl_conncache_extract_oldest(data);
  416|      0|    if(conn_candidate) {
  417|       |      /* the winner gets the honour of being disconnected */
  418|      0|      (void)Curl_disconnect(data, conn_candidate, /* dead_connection */ FALSE);
  419|      0|    }
  420|      0|  }
  421|       |
  422|    533|  return (conn_candidate == conn) ? FALSE : TRUE;
  423|       |
  424|    533|}
Curl_conncache_close_all_connections:
  540|  2.97k|{
  541|  2.97k|  struct connectdata *conn;
  542|  2.97k|  char buffer[READBUFFER_MIN + 1];
  543|  2.97k|  if(!connc->closure_handle)
  544|      0|    return;
  545|  2.97k|  connc->closure_handle->state.buffer = buffer;
  546|  2.97k|  connc->closure_handle->set.buffer_size = READBUFFER_MIN;
  547|       |
  548|  2.97k|  conn = conncache_find_first_connection(connc);
  549|  3.45k|  while(conn) {
  550|    479|    SIGPIPE_VARIABLE(pipe_st);
  551|    479|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  552|       |    /* This will remove the connection from the cache */
  553|    479|    connclose(conn, "kill all");
  554|    479|    Curl_conncache_remove_conn(connc->closure_handle, conn, TRUE);
  555|    479|    (void)Curl_disconnect(connc->closure_handle, conn, FALSE);
  556|    479|    sigpipe_restore(&pipe_st);
  557|       |
  558|    479|    conn = conncache_find_first_connection(connc);
  559|    479|  }
  560|       |
  561|  2.97k|  connc->closure_handle->state.buffer = NULL;
  562|  2.97k|  if(connc->closure_handle) {
  563|  2.97k|    SIGPIPE_VARIABLE(pipe_st);
  564|  2.97k|    sigpipe_ignore(connc->closure_handle, &pipe_st);
  565|       |
  566|  2.97k|    Curl_hostcache_clean(connc->closure_handle,
  567|  2.97k|                         connc->closure_handle->dns.hostcache);
  568|  2.97k|    Curl_close(&connc->closure_handle);
  569|  2.97k|    sigpipe_restore(&pipe_st);
  570|  2.97k|  }
  571|  2.97k|}
conncache.c:free_bundle_hash_entry:
  108|  2.83k|{
  109|  2.83k|  struct connectbundle *b = (struct connectbundle *) freethis;
  110|       |
  111|  2.83k|  bundle_destroy(b);
  112|  2.83k|}
conncache.c:hashkey:
  143|  11.3k|{
  144|  11.3k|  const char *hostname;
  145|  11.3k|  long port = conn->remote_port;
  146|       |
  147|  11.3k|#ifndef CURL_DISABLE_PROXY
  148|  11.3k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
  149|      0|    hostname = conn->http_proxy.host.name;
  150|      0|    port = conn->port;
  151|      0|  }
  152|  11.3k|  else
  153|  11.3k|#endif
  154|  11.3k|    if(conn->bits.conn_to_host)
  155|  11.2k|      hostname = conn->conn_to_host.name;
  156|      4|  else
  157|      4|    hostname = conn->host.name;
  158|       |
  159|  11.3k|  if(hostp)
  160|       |    /* report back which name we used */
  161|  5.61k|    *hostp = hostname;
  162|       |
  163|       |  /* put the number first so that the hostname gets cut off if too long */
  164|  11.3k|  msnprintf(buf, len, "%ld%s", port, hostname);
  165|  11.3k|  Curl_strntolower(buf, buf, len);
  166|  11.3k|}
conncache.c:bundle_create:
   54|  2.83k|{
   55|  2.83k|  DEBUGASSERT(*bundlep == NULL);
   56|  2.83k|  *bundlep = malloc(sizeof(struct connectbundle));
   57|  2.83k|  if(!*bundlep)
   58|      0|    return CURLE_OUT_OF_MEMORY;
   59|       |
   60|  2.83k|  (*bundlep)->num_connections = 0;
   61|  2.83k|  (*bundlep)->multiuse = BUNDLE_UNKNOWN;
   62|       |
   63|  2.83k|  Curl_llist_init(&(*bundlep)->conn_list, (Curl_llist_dtor) conn_llist_dtor);
   64|  2.83k|  return CURLE_OK;
   65|  2.83k|}
conncache.c:conn_llist_dtor:
   47|  2.84k|{
   48|  2.84k|  struct connectdata *conn = element;
   49|  2.84k|  (void)user;
   50|  2.84k|  conn->bundle = NULL;
   51|  2.84k|}
conncache.c:conncache_add_bundle:
  204|  2.83k|{
  205|  2.83k|  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
  206|       |
  207|  2.83k|  return p?TRUE:FALSE;
  208|  2.83k|}
conncache.c:bundle_destroy:
   68|  2.83k|{
   69|  2.83k|  if(!bundle)
   70|      0|    return;
   71|       |
   72|  2.83k|  Curl_llist_destroy(&bundle->conn_list, NULL);
   73|       |
   74|  2.83k|  free(bundle);
   75|  2.83k|}
conncache.c:bundle_add_conn:
   80|  2.84k|{
   81|  2.84k|  Curl_llist_insert_next(&bundle->conn_list, bundle->conn_list.tail, conn,
   82|  2.84k|                         &conn->bundle_node);
   83|  2.84k|  conn->bundle = bundle;
   84|  2.84k|  bundle->num_connections++;
   85|  2.84k|}
conncache.c:bundle_remove_conn:
   90|  2.84k|{
   91|  2.84k|  struct Curl_llist_element *curr;
   92|       |
   93|  2.84k|  curr = bundle->conn_list.head;
   94|  2.86k|  while(curr) {
   95|  2.86k|    if(curr->ptr == conn) {
   96|  2.84k|      Curl_llist_remove(&bundle->conn_list, curr, NULL);
   97|  2.84k|      bundle->num_connections--;
   98|  2.84k|      conn->bundle = NULL;
   99|  2.84k|      return 1; /* we removed a handle */
  100|  2.84k|    }
  101|     11|    curr = curr->next;
  102|     11|  }
  103|      0|  DEBUGASSERT(0);
  104|      0|  return 0;
  105|      0|}
conncache.c:conncache_remove_bundle:
  212|  2.83k|{
  213|  2.83k|  struct Curl_hash_iterator iter;
  214|  2.83k|  struct Curl_hash_element *he;
  215|       |
  216|  2.83k|  if(!connc)
  217|      0|    return;
  218|       |
  219|  2.83k|  Curl_hash_start_iterate(&connc->hash, &iter);
  220|       |
  221|  2.83k|  he = Curl_hash_next_element(&iter);
  222|  2.84k|  while(he) {
  223|  2.84k|    if(he->ptr == bundle) {
  224|       |      /* The bundle is destroyed by the hash destructor function,
  225|       |         free_bundle_hash_entry() */
  226|  2.83k|      Curl_hash_delete(&connc->hash, he->key, he->key_len);
  227|  2.83k|      return;
  228|  2.83k|    }
  229|       |
  230|      2|    he = Curl_hash_next_element(&iter);
  231|      2|  }
  232|  2.83k|}
conncache.c:conncache_find_first_connection:
  372|  3.45k|{
  373|  3.45k|  struct Curl_hash_iterator iter;
  374|  3.45k|  struct Curl_hash_element *he;
  375|  3.45k|  struct connectbundle *bundle;
  376|       |
  377|  3.45k|  Curl_hash_start_iterate(&connc->hash, &iter);
  378|       |
  379|  3.45k|  he = Curl_hash_next_element(&iter);
  380|  3.45k|  while(he) {
  381|    479|    struct Curl_llist_element *curr;
  382|    479|    bundle = he->ptr;
  383|       |
  384|    479|    curr = bundle->conn_list.head;
  385|    479|    if(curr) {
  386|    479|      return curr->ptr;
  387|    479|    }
  388|       |
  389|      0|    he = Curl_hash_next_element(&iter);
  390|      0|  }
  391|       |
  392|  2.97k|  return NULL;
  393|  3.45k|}

Curl_timeleft:
  187|  9.49M|{
  188|  9.49M|  unsigned int timeout_set = 0;
  189|  9.49M|  timediff_t connect_timeout_ms = 0;
  190|  9.49M|  timediff_t maxtime_timeout_ms = 0;
  191|  9.49M|  timediff_t timeout_ms = 0;
  192|  9.49M|  struct curltime now;
  193|       |
  194|       |  /* The duration of a connect and the total transfer are calculated from two
  195|       |     different time-stamps. It can end up with the total timeout being reached
  196|       |     before the connect timeout expires and we must acknowledge whichever
  197|       |     timeout that is reached first. The total timeout is set per entire
  198|       |     operation, while the connect timeout is set per connect. */
  199|       |
  200|  9.49M|  if(data->set.timeout > 0) {
  201|  9.49M|    timeout_set = TIMEOUT_MAXTIME;
  202|  9.49M|    maxtime_timeout_ms = data->set.timeout;
  203|  9.49M|  }
  204|  9.49M|  if(duringconnect) {
  205|  7.11k|    timeout_set |= TIMEOUT_CONNECT;
  206|  7.11k|    connect_timeout_ms = (data->set.connecttimeout > 0) ?
  207|  7.11k|      data->set.connecttimeout : DEFAULT_CONNECT_TIMEOUT;
  208|  7.11k|  }
  209|  9.49M|  if(!timeout_set)
  210|       |    /* no timeout  */
  211|      0|    return 0;
  212|       |
  213|  9.49M|  if(!nowp) {
  214|  5.61k|    now = Curl_now();
  215|  5.61k|    nowp = &now;
  216|  5.61k|  }
  217|       |
  218|  9.49M|  if(timeout_set & TIMEOUT_MAXTIME) {
  219|  9.49M|    maxtime_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startop);
  220|  9.49M|    timeout_ms = maxtime_timeout_ms;
  221|  9.49M|  }
  222|       |
  223|  9.49M|  if(timeout_set & TIMEOUT_CONNECT) {
  224|  7.11k|    connect_timeout_ms -= Curl_timediff(*nowp, data->progress.t_startsingle);
  225|       |
  226|  7.11k|    if(!(timeout_set & TIMEOUT_MAXTIME) ||
  227|  7.11k|       (connect_timeout_ms < maxtime_timeout_ms))
  228|      0|      timeout_ms = connect_timeout_ms;
  229|  7.11k|  }
  230|       |
  231|  9.49M|  if(!timeout_ms)
  232|       |    /* avoid returning 0 as that means no timeout! */
  233|    102|    return -1;
  234|       |
  235|  9.49M|  return timeout_ms;
  236|  9.49M|}
Curl_persistconninfo:
  611|  2.84k|{
  612|  2.84k|  memcpy(data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
  613|  2.84k|  if(local_ip && local_ip[0])
  614|      0|    memcpy(data->info.conn_local_ip, local_ip, MAX_IPADR_LEN);
  615|  2.84k|  else
  616|  2.84k|    data->info.conn_local_ip[0] = 0;
  617|  2.84k|  data->info.conn_scheme = conn->handler->scheme;
  618|  2.84k|  data->info.conn_protocol = conn->handler->protocol;
  619|  2.84k|  data->info.conn_primary_port = conn->port;
  620|  2.84k|  data->info.conn_local_port = local_port;
  621|  2.84k|}
Curl_addr2string:
  627|  8.38k|{
  628|  8.38k|  struct sockaddr_in *si = NULL;
  629|  8.38k|#ifdef ENABLE_IPV6
  630|  8.38k|  struct sockaddr_in6 *si6 = NULL;
  631|  8.38k|#endif
  632|  8.38k|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  633|  8.38k|  struct sockaddr_un *su = NULL;
  634|       |#else
  635|       |  (void)salen;
  636|       |#endif
  637|       |
  638|  8.38k|  switch(sa->sa_family) {
  639|  2.79k|    case AF_INET:
  640|  2.79k|      si = (struct sockaddr_in *)(void *) sa;
  641|  2.79k|      if(Curl_inet_ntop(sa->sa_family, &si->sin_addr,
  642|  2.79k|                        addr, MAX_IPADR_LEN)) {
  643|  2.79k|        unsigned short us_port = ntohs(si->sin_port);
  644|  2.79k|        *port = us_port;
  645|  2.79k|        return TRUE;
  646|  2.79k|      }
  647|      0|      break;
  648|      0|#ifdef ENABLE_IPV6
  649|      0|    case AF_INET6:
  650|      0|      si6 = (struct sockaddr_in6 *)(void *) sa;
  651|      0|      if(Curl_inet_ntop(sa->sa_family, &si6->sin6_addr,
  652|      0|                        addr, MAX_IPADR_LEN)) {
  653|      0|        unsigned short us_port = ntohs(si6->sin6_port);
  654|      0|        *port = us_port;
  655|      0|        return TRUE;
  656|      0|      }
  657|      0|      break;
  658|      0|#endif
  659|      0|#if (defined(HAVE_SYS_UN_H) || defined(WIN32_SOCKADDR_UN)) && defined(AF_UNIX)
  660|  5.58k|    case AF_UNIX:
  661|  5.58k|      if(salen > (curl_socklen_t)sizeof(CURL_SA_FAMILY_T)) {
  662|      0|        su = (struct sockaddr_un*)sa;
  663|      0|        msnprintf(addr, MAX_IPADR_LEN, "%s", su->sun_path);
  664|      0|      }
  665|  5.58k|      else
  666|  5.58k|        addr[0] = 0; /* socket with no name */
  667|  5.58k|      *port = 0;
  668|  5.58k|      return TRUE;
  669|      0|#endif
  670|      0|    default:
  671|      0|      break;
  672|  8.38k|  }
  673|       |
  674|      0|  addr[0] = '\0';
  675|      0|  *port = 0;
  676|      0|  errno = EAFNOSUPPORT;
  677|      0|  return FALSE;
  678|  8.38k|}
Curl_conninfo_remote:
  684|  2.79k|{
  685|  2.79k|#ifdef HAVE_GETPEERNAME
  686|  2.79k|  char buffer[STRERROR_LEN];
  687|  2.79k|  struct Curl_sockaddr_storage ssrem;
  688|  2.79k|  curl_socklen_t plen;
  689|  2.79k|  int port;
  690|  2.79k|  plen = sizeof(struct Curl_sockaddr_storage);
  691|  2.79k|  memset(&ssrem, 0, sizeof(ssrem));
  692|  2.79k|  if(getpeername(sockfd, (struct sockaddr*) &ssrem, &plen)) {
  693|      0|    int error = SOCKERRNO;
  694|      0|    failf(data, "getpeername() failed with errno %d: %s",
  695|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  696|      0|    return;
  697|      0|  }
  698|  2.79k|  if(!Curl_addr2string((struct sockaddr*)&ssrem, plen,
  699|  2.79k|                       conn->primary_ip, &port)) {
  700|      0|    failf(data, "ssrem inet_ntop() failed with errno %d: %s",
  701|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  702|      0|    return;
  703|      0|  }
  704|       |#else
  705|       |  (void)data;
  706|       |  (void)conn;
  707|       |  (void)sockfd;
  708|       |#endif
  709|  2.79k|}
Curl_conninfo_local:
  715|  2.79k|{
  716|  2.79k|#ifdef HAVE_GETSOCKNAME
  717|  2.79k|  char buffer[STRERROR_LEN];
  718|  2.79k|  struct Curl_sockaddr_storage ssloc;
  719|  2.79k|  curl_socklen_t slen;
  720|  2.79k|  slen = sizeof(struct Curl_sockaddr_storage);
  721|  2.79k|  memset(&ssloc, 0, sizeof(ssloc));
  722|  2.79k|  if(getsockname(sockfd, (struct sockaddr*) &ssloc, &slen)) {
  723|      0|    int error = SOCKERRNO;
  724|      0|    failf(data, "getsockname() failed with errno %d: %s",
  725|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  726|      0|    return;
  727|      0|  }
  728|  2.79k|  if(!Curl_addr2string((struct sockaddr*)&ssloc, slen,
  729|  2.79k|                       local_ip, local_port)) {
  730|      0|    failf(data, "ssloc inet_ntop() failed with errno %d: %s",
  731|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
  732|      0|    return;
  733|      0|  }
  734|       |#else
  735|       |  (void)data;
  736|       |  (void)sockfd;
  737|       |  (void)local_ip;
  738|       |  (void)local_port;
  739|       |#endif
  740|  2.79k|}
Curl_updateconninfo:
  746|  2.79k|{
  747|       |  /* 'local_ip' and 'local_port' get filled with local's numerical
  748|       |     ip address and port number whenever an outgoing connection is
  749|       |     **established** from the primary socket to a remote address. */
  750|  2.79k|  char local_ip[MAX_IPADR_LEN] = "";
  751|  2.79k|  int local_port = -1;
  752|       |
  753|  2.79k|  if(conn->transport == TRNSPRT_TCP) {
  754|  2.79k|    if(!conn->bits.reuse && !conn->bits.tcp_fastopen)
  755|  2.79k|      Curl_conninfo_remote(data, conn, sockfd);
  756|  2.79k|    Curl_conninfo_local(data, sockfd, local_ip, &local_port);
  757|  2.79k|  } /* end of TCP-only section */
  758|       |
  759|       |  /* persist connection info in session handle */
  760|  2.79k|  Curl_persistconninfo(data, conn, local_ip, local_port);
  761|  2.79k|}
Curl_is_connected:
  852|  2.79k|{
  853|  2.79k|  CURLcode result = CURLE_OK;
  854|  2.79k|  timediff_t allow;
  855|  2.79k|  int error = 0;
  856|  2.79k|  struct curltime now;
  857|  2.79k|  int rc = 0;
  858|  2.79k|  unsigned int i;
  859|       |
  860|  2.79k|  DEBUGASSERT(sockindex >= FIRSTSOCKET && sockindex <= SECONDARYSOCKET);
  861|       |
  862|  2.79k|  *connected = FALSE; /* a very negative world view is best */
  863|       |
  864|  2.79k|  if(conn->bits.tcpconnect[sockindex]) {
  865|       |    /* we are connected already! */
  866|      0|    *connected = TRUE;
  867|      0|    return CURLE_OK;
  868|      0|  }
  869|       |
  870|  2.79k|  now = Curl_now();
  871|       |
  872|  2.79k|  if(SOCKS_STATE(conn->cnnct.state)) {
  873|       |    /* still doing SOCKS */
  874|      0|    result = connect_SOCKS(data, sockindex, connected);
  875|      0|    if(!result && *connected)
  876|      0|      post_SOCKS(data, conn, sockindex, connected);
  877|      0|    return result;
  878|      0|  }
  879|       |
  880|  2.79k|  for(i = 0; i<2; i++) {
  881|  2.79k|    const int other = i ^ 1;
  882|  2.79k|    if(conn->tempsock[i] == CURL_SOCKET_BAD)
  883|      0|      continue;
  884|  2.79k|    error = 0;
  885|       |#ifdef ENABLE_QUIC
  886|       |    if(conn->transport == TRNSPRT_QUIC) {
  887|       |      result = Curl_quic_is_connected(data, conn, i, connected);
  888|       |      if(!result && *connected) {
  889|       |        /* use this socket from now on */
  890|       |        conn->sock[sockindex] = conn->tempsock[i];
  891|       |        conn->ip_addr = conn->tempaddr[i];
  892|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  893|       |        post_SOCKS(data, conn, sockindex, connected);
  894|       |        connkeep(conn, "HTTP/3 default");
  895|       |        return CURLE_OK;
  896|       |      }
  897|       |      if(result) {
  898|       |        conn->tempsock[i] = CURL_SOCKET_BAD;
  899|       |        error = SOCKERRNO;
  900|       |      }
  901|       |    }
  902|       |    else
  903|       |#endif
  904|  2.79k|    {
  905|       |#ifdef mpeix
  906|       |      /* Call this function once now, and ignore the results. We do this to
  907|       |         "clear" the error state on the socket so that we can later read it
  908|       |         reliably. This is reported necessary on the MPE/iX operating
  909|       |         system. */
  910|       |      (void)verifyconnect(conn->tempsock[i], NULL);
  911|       |#endif
  912|       |
  913|       |      /* check socket for connect */
  914|  2.79k|      rc = SOCKET_WRITABLE(conn->tempsock[i], 0);
  915|  2.79k|    }
  916|       |
  917|  2.79k|    if(rc == 0) { /* no connection yet */
  918|      0|      if(Curl_timediff(now, conn->connecttime) >=
  919|      0|         conn->timeoutms_per_addr[i]) {
  920|      0|        infof(data, "After %" CURL_FORMAT_TIMEDIFF_T
  921|      0|              "ms connect time, move on!", conn->timeoutms_per_addr[i]);
  922|      0|        error = ETIMEDOUT;
  923|      0|      }
  924|       |
  925|       |      /* should we try another protocol family? */
  926|      0|      if(i == 0 && !conn->bits.parallel_connect &&
  927|      0|         (Curl_timediff(now, conn->connecttime) >=
  928|      0|          data->set.happy_eyeballs_timeout)) {
  929|      0|        conn->bits.parallel_connect = TRUE; /* starting now */
  930|      0|        trynextip(data, conn, sockindex, 1);
  931|      0|      }
  932|      0|    }
  933|  2.79k|    else if(rc == CURL_CSELECT_OUT || conn->bits.tcp_fastopen) {
  934|  2.79k|      if(verifyconnect(conn->tempsock[i], &error)) {
  935|       |        /* we are connected with TCP, awesome! */
  936|       |
  937|       |        /* use this socket from now on */
  938|  2.79k|        conn->sock[sockindex] = conn->tempsock[i];
  939|  2.79k|        conn->ip_addr = conn->tempaddr[i];
  940|  2.79k|        conn->tempsock[i] = CURL_SOCKET_BAD;
  941|  2.79k|#ifdef ENABLE_IPV6
  942|  2.79k|        conn->bits.ipv6 = (conn->ip_addr->ai_family == AF_INET6)?TRUE:FALSE;
  943|  2.79k|#endif
  944|       |
  945|       |        /* close the other socket, if open */
  946|  2.79k|        if(conn->tempsock[other] != CURL_SOCKET_BAD) {
  947|      0|          Curl_closesocket(data, conn, conn->tempsock[other]);
  948|      0|          conn->tempsock[other] = CURL_SOCKET_BAD;
  949|      0|        }
  950|       |
  951|       |        /* see if we need to kick off any SOCKS proxy magic once we
  952|       |           connected */
  953|  2.79k|        result = connect_SOCKS(data, sockindex, connected);
  954|  2.79k|        if(result || !*connected)
  955|      0|          return result;
  956|       |
  957|  2.79k|        post_SOCKS(data, conn, sockindex, connected);
  958|       |
  959|  2.79k|        return CURLE_OK;
  960|  2.79k|      }
  961|  2.79k|    }
  962|      0|    else if(rc & CURL_CSELECT_ERR) {
  963|      0|      (void)verifyconnect(conn->tempsock[i], &error);
  964|      0|    }
  965|       |
  966|       |    /*
  967|       |     * The connection failed here, we should attempt to connect to the "next
  968|       |     * address" for the given host. But first remember the latest error.
  969|       |     */
  970|      0|    if(error) {
  971|      0|      data->state.os_errno = error;
  972|      0|      SET_SOCKERRNO(error);
  973|      0|      if(conn->tempaddr[i]) {
  974|      0|        CURLcode status;
  975|      0|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  976|      0|        char ipaddress[MAX_IPADR_LEN];
  977|      0|        char buffer[STRERROR_LEN];
  978|      0|        Curl_printable_address(conn->tempaddr[i], ipaddress,
  979|      0|                               sizeof(ipaddress));
  980|      0|        infof(data, "connect to %s port %u failed: %s",
  981|      0|              ipaddress, conn->port,
  982|      0|              Curl_strerror(error, buffer, sizeof(buffer)));
  983|      0|#endif
  984|       |
  985|      0|        allow = Curl_timeleft(data, &now, TRUE);
  986|      0|        conn->timeoutms_per_addr[i] = conn->tempaddr[i]->ai_next == NULL ?
  987|      0|          allow : allow / 2;
  988|      0|        ainext(conn, i, TRUE);
  989|      0|        status = trynextip(data, conn, sockindex, i);
  990|      0|        if((status != CURLE_COULDNT_CONNECT) ||
  991|      0|           conn->tempsock[other] == CURL_SOCKET_BAD)
  992|       |          /* the last attempt failed and no other sockets remain open */
  993|      0|          result = status;
  994|      0|      }
  995|      0|    }
  996|      0|  }
  997|       |
  998|       |  /*
  999|       |   * Now that we've checked whether we are connected, check whether we've
 1000|       |   * already timed out.
 1001|       |   *
 1002|       |   * First figure out how long time we have left to connect */
 1003|       |
 1004|      0|  allow = Curl_timeleft(data, &now, TRUE);
 1005|       |
 1006|      0|  if(allow < 0) {
 1007|       |    /* time-out, bail out, go home */
 1008|      0|    failf(data, "Connection timeout after %ld ms",
 1009|      0|          Curl_timediff(now, data->progress.t_startsingle));
 1010|      0|    return CURLE_OPERATION_TIMEDOUT;
 1011|      0|  }
 1012|       |
 1013|      0|  if(result &&
 1014|      0|     (conn->tempsock[0] == CURL_SOCKET_BAD) &&
 1015|      0|     (conn->tempsock[1] == CURL_SOCKET_BAD)) {
 1016|       |    /* no more addresses to try */
 1017|      0|    const char *hostname;
 1018|      0|    char buffer[STRERROR_LEN];
 1019|       |
 1020|       |    /* if the first address family runs out of addresses to try before the
 1021|       |       happy eyeball timeout, go ahead and try the next family now */
 1022|      0|    result = trynextip(data, conn, sockindex, 1);
 1023|      0|    if(!result)
 1024|      0|      return result;
 1025|       |
 1026|      0|#ifndef CURL_DISABLE_PROXY
 1027|      0|    if(conn->bits.socksproxy)
 1028|      0|      hostname = conn->socks_proxy.host.name;
 1029|      0|    else if(conn->bits.httpproxy)
 1030|      0|      hostname = conn->http_proxy.host.name;
 1031|      0|    else
 1032|      0|#endif
 1033|      0|      if(conn->bits.conn_to_host)
 1034|      0|        hostname = conn->conn_to_host.name;
 1035|      0|    else
 1036|      0|      hostname = conn->host.name;
 1037|       |
 1038|      0|    failf(data, "Failed to connect to %s port %u after "
 1039|      0|                "%" CURL_FORMAT_TIMEDIFF_T " ms: %s",
 1040|      0|        hostname, conn->port,
 1041|      0|        Curl_timediff(now, data->progress.t_startsingle),
 1042|      0|        Curl_strerror(error, buffer, sizeof(buffer)));
 1043|       |
 1044|      0|    Curl_quic_disconnect(data, conn, 0);
 1045|      0|    Curl_quic_disconnect(data, conn, 1);
 1046|       |
 1047|       |#ifdef WSAETIMEDOUT
 1048|       |    if(WSAETIMEDOUT == data->state.os_errno)
 1049|       |      result = CURLE_OPERATION_TIMEDOUT;
 1050|       |#elif defined(ETIMEDOUT)
 1051|      0|    if(ETIMEDOUT == data->state.os_errno)
 1052|      0|      result = CURLE_OPERATION_TIMEDOUT;
 1053|      0|#endif
 1054|      0|  }
 1055|      0|  else
 1056|      0|    result = CURLE_OK; /* still trying */
 1057|       |
 1058|      0|  return result;
 1059|      0|}
Curl_connecthost:
 1357|  2.80k|{
 1358|  2.80k|  CURLcode result = CURLE_COULDNT_CONNECT;
 1359|  2.80k|  int i;
 1360|  2.80k|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 1361|       |
 1362|  2.80k|  if(timeout_ms < 0) {
 1363|       |    /* a precaution, no need to continue if time already is up */
 1364|      0|    failf(data, "Connection time-out");
 1365|      0|    return CURLE_OPERATION_TIMEDOUT;
 1366|      0|  }
 1367|       |
 1368|  2.80k|  conn->num_addr = Curl_num_addresses(remotehost->addr);
 1369|  2.80k|  conn->tempaddr[0] = conn->tempaddr[1] = remotehost->addr;
 1370|  2.80k|  conn->tempsock[0] = conn->tempsock[1] = CURL_SOCKET_BAD;
 1371|       |
 1372|       |  /* Max time for the next connection attempt */
 1373|  2.80k|  conn->timeoutms_per_addr[0] =
 1374|  2.80k|    conn->tempaddr[0]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1375|  2.80k|  conn->timeoutms_per_addr[1] =
 1376|  2.80k|    conn->tempaddr[1]->ai_next == NULL ? timeout_ms : timeout_ms / 2;
 1377|       |
 1378|  2.80k|  if(conn->ip_version == CURL_IPRESOLVE_WHATEVER) {
 1379|       |    /* any IP version is allowed */
 1380|  2.80k|    conn->tempfamily[0] = conn->tempaddr[0]?
 1381|  2.80k|      conn->tempaddr[0]->ai_family:0;
 1382|  2.80k|#ifdef ENABLE_IPV6
 1383|  2.80k|    conn->tempfamily[1] = conn->tempfamily[0] == AF_INET6 ?
 1384|      0|      AF_INET : AF_INET6;
 1385|       |#else
 1386|       |    conn->tempfamily[1] = AF_UNSPEC;
 1387|       |#endif
 1388|  2.80k|  }
 1389|      0|  else {
 1390|       |    /* only one IP version is allowed */
 1391|      0|    conn->tempfamily[0] = (conn->ip_version == CURL_IPRESOLVE_V4) ?
 1392|      0|      AF_INET :
 1393|      0|#ifdef ENABLE_IPV6
 1394|      0|      AF_INET6;
 1395|       |#else
 1396|       |      AF_UNSPEC;
 1397|       |#endif
 1398|      0|    conn->tempfamily[1] = AF_UNSPEC;
 1399|       |
 1400|      0|    ainext(conn, 0, FALSE); /* find first address of the right type */
 1401|      0|  }
 1402|       |
 1403|  2.80k|  ainext(conn, 1, FALSE); /* assigns conn->tempaddr[1] accordingly */
 1404|       |
 1405|  2.80k|  DEBUGF(infof(data, "family0 == %s, family1 == %s",
 1406|  2.80k|               conn->tempfamily[0] == AF_INET ? "v4" : "v6",
 1407|  2.80k|               conn->tempfamily[1] == AF_INET ? "v4" : "v6"));
 1408|       |
 1409|       |  /* get through the list in family order in case of quick failures */
 1410|  5.62k|  for(i = 0; (i < 2) && result; i++) {
 1411|  2.82k|    while(conn->tempaddr[i]) {
 1412|  2.80k|      result = singleipconnect(data, conn, conn->tempaddr[i], i);
 1413|  2.80k|      if(!result)
 1414|  2.79k|        break;
 1415|      9|      ainext(conn, i, TRUE);
 1416|      9|    }
 1417|  2.81k|  }
 1418|  2.80k|  if(result)
 1419|      9|    return result;
 1420|       |
 1421|  2.79k|  Curl_expire(data, data->set.happy_eyeballs_timeout,
 1422|  2.79k|              EXPIRE_HAPPY_EYEBALLS);
 1423|       |
 1424|  2.79k|  return CURLE_OK;
 1425|  2.80k|}
Curl_closesocket:
 1518|  2.79k|{
 1519|  2.79k|  if(conn && conn->fclosesocket) {
 1520|      0|    if((sock == conn->sock[SECONDARYSOCKET]) && conn->bits.sock_accepted)
 1521|       |      /* if this socket matches the second socket, and that was created with
 1522|       |         accept, then we MUST NOT call the callback but clear the accepted
 1523|       |         status */
 1524|      0|      conn->bits.sock_accepted = FALSE;
 1525|      0|    else {
 1526|      0|      int rc;
 1527|      0|      Curl_multi_closed(data, sock);
 1528|      0|      Curl_set_in_callback(data, true);
 1529|      0|      rc = conn->fclosesocket(conn->closesocket_client, sock);
 1530|      0|      Curl_set_in_callback(data, false);
 1531|      0|      return rc;
 1532|      0|    }
 1533|      0|  }
 1534|       |
 1535|  2.79k|  if(conn)
 1536|       |    /* tell the multi-socket code about this */
 1537|  2.79k|    Curl_multi_closed(data, sock);
 1538|       |
 1539|  2.79k|  sclose(sock);
 1540|       |
 1541|  2.79k|  return 0;
 1542|  2.79k|}
Curl_socket:
 1557|  2.80k|{
 1558|  2.80k|  struct connectdata *conn = data->conn;
 1559|  2.80k|  struct Curl_sockaddr_ex dummy;
 1560|       |
 1561|  2.80k|  if(!addr)
 1562|       |    /* if the caller doesn't want info back, use a local temp copy */
 1563|      0|    addr = &dummy;
 1564|       |
 1565|       |  /*
 1566|       |   * The Curl_sockaddr_ex structure is basically libcurl's external API
 1567|       |   * curl_sockaddr structure with enough space available to directly hold
 1568|       |   * any protocol-specific address structures. The variable declared here
 1569|       |   * will be used to pass / receive data to/from the fopensocket callback
 1570|       |   * if this has been set, before that, it is initialized from parameters.
 1571|       |   */
 1572|       |
 1573|  2.80k|  addr->family = ai->ai_family;
 1574|  2.80k|  addr->socktype = (conn->transport == TRNSPRT_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 1575|  2.80k|  addr->protocol = conn->transport != TRNSPRT_TCP ? IPPROTO_UDP :
 1576|  2.80k|    ai->ai_protocol;
 1577|  2.80k|  addr->addrlen = ai->ai_addrlen;
 1578|       |
 1579|  2.80k|  if(addr->addrlen > sizeof(struct Curl_sockaddr_storage))
 1580|      0|     addr->addrlen = sizeof(struct Curl_sockaddr_storage);
 1581|  2.80k|  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
 1582|       |
 1583|  2.80k|  if(data->set.fopensocket) {
 1584|       |   /*
 1585|       |    * If the opensocket callback is set, all the destination address
 1586|       |    * information is passed to the callback. Depending on this information the
 1587|       |    * callback may opt to abort the connection, this is indicated returning
 1588|       |    * CURL_SOCKET_BAD; otherwise it will return a not-connected socket. When
 1589|       |    * the callback returns a valid socket the destination address information
 1590|       |    * might have been changed and this 'new' address will actually be used
 1591|       |    * here to connect.
 1592|       |    */
 1593|  2.80k|    Curl_set_in_callback(data, true);
 1594|  2.80k|    *sockfd = data->set.fopensocket(data->set.opensocket_client,
 1595|  2.80k|                                    CURLSOCKTYPE_IPCXN,
 1596|  2.80k|                                    (struct curl_sockaddr *)addr);
 1597|  2.80k|    Curl_set_in_callback(data, false);
 1598|  2.80k|  }
 1599|      0|  else
 1600|       |    /* opensocket callback not set, so simply create the socket now */
 1601|      0|    *sockfd = socket(addr->family, addr->socktype, addr->protocol);
 1602|       |
 1603|  2.80k|  if(*sockfd == CURL_SOCKET_BAD)
 1604|       |    /* no socket, no connection */
 1605|      9|    return CURLE_COULDNT_CONNECT;
 1606|       |
 1607|  2.79k|  if(conn->transport == TRNSPRT_QUIC) {
 1608|       |    /* QUIC sockets need to be nonblocking */
 1609|      0|    (void)curlx_nonblock(*sockfd, TRUE);
 1610|      0|  }
 1611|       |
 1612|  2.79k|#if defined(ENABLE_IPV6) && defined(HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID)
 1613|  2.79k|  if(conn->scope_id && (addr->family == AF_INET6)) {
 1614|      0|    struct sockaddr_in6 * const sa6 = (void *)&addr->sa_addr;
 1615|      0|    sa6->sin6_scope_id = conn->scope_id;
 1616|      0|  }
 1617|  2.79k|#endif
 1618|       |
 1619|  2.79k|#if defined(__linux__) && defined(IP_RECVERR)
 1620|  2.79k|  if(addr->socktype == SOCK_DGRAM) {
 1621|      4|    int one = 1;
 1622|      4|    switch(addr->family) {
 1623|      4|    case AF_INET:
 1624|      4|      (void)setsockopt(*sockfd, SOL_IP, IP_RECVERR, &one, sizeof(one));
 1625|      4|      break;
 1626|      0|    case AF_INET6:
 1627|      0|      (void)setsockopt(*sockfd, SOL_IPV6, IPV6_RECVERR, &one, sizeof(one));
 1628|      0|      break;
 1629|      4|    }
 1630|      4|  }
 1631|  2.79k|#endif
 1632|       |
 1633|  2.79k|  return CURLE_OK;
 1634|  2.79k|}
Curl_conncontrol:
 1645|  11.5k|{
 1646|       |  /* close if a connection, or a stream that isn't multiplexed. */
 1647|       |  /* This function will be called both before and after this connection is
 1648|       |     associated with a transfer. */
 1649|  11.5k|  bool closeit;
 1650|  11.5k|  DEBUGASSERT(conn);
 1651|  11.5k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1652|  11.5k|  (void)reason; /* useful for debugging */
 1653|  11.5k|#endif
 1654|  11.5k|  closeit = (ctrl == CONNCTRL_CONNECTION) ||
 1655|  11.5k|    ((ctrl == CONNCTRL_STREAM) && !(conn->handler->flags & PROTOPT_STREAM));
 1656|  11.5k|  if((ctrl == CONNCTRL_STREAM) &&
 1657|  11.5k|     (conn->handler->flags & PROTOPT_STREAM))
 1658|      0|    ;
 1659|  11.5k|  else if((bit)closeit != conn->bits.close) {
 1660|  8.35k|    conn->bits.close = closeit; /* the only place in the source code that
 1661|       |                                   should assign this bit */
 1662|  8.35k|  }
 1663|  11.5k|}
connect.c:connect_SOCKS:
  772|  2.79k|{
  773|  2.79k|  CURLcode result = CURLE_OK;
  774|  2.79k|#ifndef CURL_DISABLE_PROXY
  775|  2.79k|  CURLproxycode pxresult = CURLPX_OK;
  776|  2.79k|  struct connectdata *conn = data->conn;
  777|  2.79k|  if(conn->bits.socksproxy) {
  778|       |    /* for the secondary socket (FTP), use the "connect to host"
  779|       |     * but ignore the "connect to port" (use the secondary port)
  780|       |     */
  781|      0|    const char * const host =
  782|      0|      conn->bits.httpproxy ?
  783|      0|      conn->http_proxy.host.name :
  784|      0|      conn->bits.conn_to_host ?
  785|      0|      conn->conn_to_host.name :
  786|      0|      sockindex == SECONDARYSOCKET ?
  787|      0|      conn->secondaryhostname : conn->host.name;
  788|      0|    const int port =
  789|      0|      conn->bits.httpproxy ? (int)conn->http_proxy.port :
  790|      0|      sockindex == SECONDARYSOCKET ? conn->secondary_port :
  791|      0|      conn->bits.conn_to_port ? conn->conn_to_port :
  792|      0|      conn->remote_port;
  793|      0|    switch(conn->socks_proxy.proxytype) {
  794|      0|    case CURLPROXY_SOCKS5:
  795|      0|    case CURLPROXY_SOCKS5_HOSTNAME:
  796|      0|      pxresult = Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd,
  797|      0|                             host, port, sockindex, data, done);
  798|      0|      break;
  799|       |
  800|      0|    case CURLPROXY_SOCKS4:
  801|      0|    case CURLPROXY_SOCKS4A:
  802|      0|      pxresult = Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex,
  803|      0|                             data, done);
  804|      0|      break;
  805|       |
  806|      0|    default:
  807|      0|      failf(data, "unknown proxytype option given");
  808|      0|      result = CURLE_COULDNT_CONNECT;
  809|      0|    } /* switch proxytype */
  810|      0|    if(pxresult) {
  811|      0|      result = CURLE_PROXY;
  812|      0|      data->info.pxcode = pxresult;
  813|      0|    }
  814|      0|  }
  815|  2.79k|  else
  816|       |#else
  817|       |    (void)data;
  818|       |    (void)sockindex;
  819|       |#endif /* CURL_DISABLE_PROXY */
  820|  2.79k|    *done = TRUE; /* no SOCKS proxy, so consider us connected */
  821|       |
  822|  2.79k|  return result;
  823|  2.79k|}
connect.c:post_SOCKS:
  833|  2.79k|{
  834|  2.79k|  conn->bits.tcpconnect[sockindex] = TRUE;
  835|       |
  836|  2.79k|  *connected = TRUE;
  837|  2.79k|  if(sockindex == FIRSTSOCKET)
  838|  2.79k|    Curl_pgrsTime(data, TIMER_CONNECT); /* connect done */
  839|  2.79k|  Curl_updateconninfo(data, conn, conn->sock[sockindex]);
  840|  2.79k|  Curl_verboseconnect(data, conn);
  841|  2.79k|  data->info.numconnects++; /* to track the number of connections made */
  842|  2.79k|}
connect.c:verifyconnect:
  494|  2.79k|{
  495|  2.79k|  bool rc = TRUE;
  496|  2.79k|#ifdef SO_ERROR
  497|  2.79k|  int err = 0;
  498|  2.79k|  curl_socklen_t errSize = sizeof(err);
  499|       |
  500|       |#ifdef WIN32
  501|       |  /*
  502|       |   * In October 2003 we effectively nullified this function on Windows due to
  503|       |   * problems with it using all CPU in multi-threaded cases.
  504|       |   *
  505|       |   * In May 2004, we bring it back to offer more info back on connect failures.
  506|       |   * Gisle Vanem could reproduce the former problems with this function, but
  507|       |   * could avoid them by adding this SleepEx() call below:
  508|       |   *
  509|       |   *    "I don't have Rational Quantify, but the hint from his post was
  510|       |   *    ntdll::NtRemoveIoCompletion(). So I'd assume the SleepEx (or maybe
  511|       |   *    just Sleep(0) would be enough?) would release whatever
  512|       |   *    mutex/critical-section the ntdll call is waiting on.
  513|       |   *
  514|       |   *    Someone got to verify this on Win-NT 4.0, 2000."
  515|       |   */
  516|       |
  517|       |#ifdef _WIN32_WCE
  518|       |  Sleep(0);
  519|       |#else
  520|       |  SleepEx(0, FALSE);
  521|       |#endif
  522|       |
  523|       |#endif
  524|       |
  525|  2.79k|  if(0 != getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void *)&err, &errSize))
  526|      0|    err = SOCKERRNO;
  527|       |#ifdef _WIN32_WCE
  528|       |  /* Old WinCE versions don't support SO_ERROR */
  529|       |  if(WSAENOPROTOOPT == err) {
  530|       |    SET_SOCKERRNO(0);
  531|       |    err = 0;
  532|       |  }
  533|       |#endif
  534|       |#if defined(EBADIOCTL) && defined(__minix)
  535|       |  /* Minix 3.1.x doesn't support getsockopt on UDP sockets */
  536|       |  if(EBADIOCTL == err) {
  537|       |    SET_SOCKERRNO(0);
  538|       |    err = 0;
  539|       |  }
  540|       |#endif
  541|  2.79k|  if((0 == err) || (EISCONN == err))
  542|       |    /* we are connected, awesome! */
  543|  2.79k|    rc = TRUE;
  544|      0|  else
  545|       |    /* This wasn't a successful connect */
  546|      0|    rc = FALSE;
  547|  2.79k|  if(error)
  548|  2.79k|    *error = err;
  549|       |#else
  550|       |  (void)sockfd;
  551|       |  if(error)
  552|       |    *error = SOCKERRNO;
  553|       |#endif
  554|  2.79k|  return rc;
  555|  2.79k|}
connect.c:ainext:
  562|  2.81k|{
  563|  2.81k|  struct Curl_addrinfo *ai = conn->tempaddr[tempindex];
  564|  2.81k|  if(ai && next)
  565|      9|    ai = ai->ai_next;
  566|  5.62k|  while(ai && (ai->ai_family != conn->tempfamily[tempindex]))
  567|  2.80k|    ai = ai->ai_next;
  568|  2.81k|  conn->tempaddr[tempindex] = ai;
  569|  2.81k|  return ai;
  570|  2.81k|}
connect.c:singleipconnect:
 1161|  2.80k|{
 1162|  2.80k|  struct Curl_sockaddr_ex addr;
 1163|  2.80k|  int rc = -1;
 1164|  2.80k|  int error = 0;
 1165|  2.80k|  bool isconnected = FALSE;
 1166|  2.80k|  curl_socket_t sockfd;
 1167|  2.80k|  CURLcode result;
 1168|  2.80k|  char ipaddress[MAX_IPADR_LEN];
 1169|  2.80k|  int port;
 1170|  2.80k|  bool is_tcp;
 1171|  2.80k|#ifdef TCP_FASTOPEN_CONNECT
 1172|  2.80k|  int optval = 1;
 1173|  2.80k|#endif
 1174|  2.80k|  char buffer[STRERROR_LEN];
 1175|  2.80k|  curl_socket_t *sockp = &conn->tempsock[tempindex];
 1176|  2.80k|  *sockp = CURL_SOCKET_BAD;
 1177|       |
 1178|  2.80k|  result = Curl_socket(data, ai, &addr, &sockfd);
 1179|  2.80k|  if(result)
 1180|      9|    return result;
 1181|       |
 1182|       |  /* store remote address and port used in this connection attempt */
 1183|  2.79k|  if(!Curl_addr2string((struct sockaddr*)&addr.sa_addr, addr.addrlen,
 1184|  2.79k|                       ipaddress, &port)) {
 1185|       |    /* malformed address or bug in inet_ntop, try next address */
 1186|      0|    failf(data, "sa_addr inet_ntop() failed with errno %d: %s",
 1187|      0|          errno, Curl_strerror(errno, buffer, sizeof(buffer)));
 1188|      0|    Curl_closesocket(data, conn, sockfd);
 1189|      0|    return CURLE_OK;
 1190|      0|  }
 1191|  2.79k|  infof(data, "  Trying %s:%d...", ipaddress, port);
 1192|       |
 1193|  2.79k|#ifdef ENABLE_IPV6
 1194|  2.79k|  is_tcp = (addr.family == AF_INET || addr.family == AF_INET6) &&
 1195|  2.79k|    addr.socktype == SOCK_STREAM;
 1196|       |#else
 1197|       |  is_tcp = (addr.family == AF_INET) && addr.socktype == SOCK_STREAM;
 1198|       |#endif
 1199|  2.79k|  if(is_tcp && data->set.tcp_nodelay)
 1200|  2.79k|    tcpnodelay(data, sockfd);
 1201|       |
 1202|  2.79k|  nosigpipe(data, sockfd);
 1203|       |
 1204|  2.79k|  Curl_sndbufset(sockfd);
 1205|       |
 1206|  2.79k|  if(is_tcp && data->set.tcp_keepalive)
 1207|      0|    tcpkeepalive(data, sockfd);
 1208|       |
 1209|  2.79k|  if(data->set.fsockopt) {
 1210|       |    /* activate callback for setting socket options */
 1211|  2.79k|    Curl_set_in_callback(data, true);
 1212|  2.79k|    error = data->set.fsockopt(data->set.sockopt_client,
 1213|  2.79k|                               sockfd,
 1214|  2.79k|                               CURLSOCKTYPE_IPCXN);
 1215|  2.79k|    Curl_set_in_callback(data, false);
 1216|       |
 1217|  2.79k|    if(error == CURL_SOCKOPT_ALREADY_CONNECTED)
 1218|  2.79k|      isconnected = TRUE;
 1219|      0|    else if(error) {
 1220|      0|      Curl_closesocket(data, conn, sockfd); /* close the socket and bail out */
 1221|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1222|      0|    }
 1223|  2.79k|  }
 1224|       |
 1225|       |  /* possibly bind the local end to an IP, interface or port */
 1226|  2.79k|  if(addr.family == AF_INET
 1227|  2.79k|#ifdef ENABLE_IPV6
 1228|  2.79k|     || addr.family == AF_INET6
 1229|  2.79k|#endif
 1230|  2.79k|    ) {
 1231|  2.79k|    result = bindlocal(data, sockfd, addr.family,
 1232|  2.79k|                       Curl_ipv6_scope((struct sockaddr*)&addr.sa_addr));
 1233|  2.79k|    if(result) {
 1234|      0|      Curl_closesocket(data, conn, sockfd); /* close socket and bail out */
 1235|      0|      if(result == CURLE_UNSUPPORTED_PROTOCOL) {
 1236|       |        /* The address family is not supported on this interface.
 1237|       |           We can continue trying addresses */
 1238|      0|        return CURLE_COULDNT_CONNECT;
 1239|      0|      }
 1240|      0|      return result;
 1241|      0|    }
 1242|  2.79k|  }
 1243|       |
 1244|       |  /* set socket non-blocking */
 1245|  2.79k|  (void)curlx_nonblock(sockfd, TRUE);
 1246|       |
 1247|  2.79k|  conn->connecttime = Curl_now();
 1248|  2.79k|  if(conn->num_addr > 1) {
 1249|      0|    Curl_expire(data, conn->timeoutms_per_addr[0], EXPIRE_DNS_PER_NAME);
 1250|      0|    Curl_expire(data, conn->timeoutms_per_addr[1], EXPIRE_DNS_PER_NAME2);
 1251|      0|  }
 1252|       |
 1253|       |  /* Connect TCP and QUIC sockets */
 1254|  2.79k|  if(!isconnected && (conn->transport != TRNSPRT_UDP)) {
 1255|      0|    if(conn->bits.tcp_fastopen) {
 1256|       |#if defined(CONNECT_DATA_IDEMPOTENT) /* Darwin */
 1257|       |#  if defined(HAVE_BUILTIN_AVAILABLE)
 1258|       |      /* while connectx function is available since macOS 10.11 / iOS 9,
 1259|       |         it did not have the interface declared correctly until
 1260|       |         Xcode 9 / macOS SDK 10.13 */
 1261|       |      if(__builtin_available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *)) {
 1262|       |        sa_endpoints_t endpoints;
 1263|       |        endpoints.sae_srcif = 0;
 1264|       |        endpoints.sae_srcaddr = NULL;
 1265|       |        endpoints.sae_srcaddrlen = 0;
 1266|       |        endpoints.sae_dstaddr = &addr.sa_addr;
 1267|       |        endpoints.sae_dstaddrlen = addr.addrlen;
 1268|       |
 1269|       |        rc = connectx(sockfd, &endpoints, SAE_ASSOCID_ANY,
 1270|       |                      CONNECT_RESUME_ON_READ_WRITE | CONNECT_DATA_IDEMPOTENT,
 1271|       |                      NULL, 0, NULL, NULL);
 1272|       |      }
 1273|       |      else {
 1274|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1275|       |      }
 1276|       |#  else
 1277|       |      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1278|       |#  endif /* HAVE_BUILTIN_AVAILABLE */
 1279|       |#elif defined(TCP_FASTOPEN_CONNECT) /* Linux >= 4.11 */
 1280|      0|      if(setsockopt(sockfd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT,
 1281|      0|                    (void *)&optval, sizeof(optval)) < 0)
 1282|      0|        infof(data, "Failed to enable TCP Fast Open on fd %d", sockfd);
 1283|       |
 1284|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1285|       |#elif defined(MSG_FASTOPEN) /* old Linux */
 1286|       |      if(conn->given->flags & PROTOPT_SSL)
 1287|       |        rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1288|       |      else
 1289|       |        rc = 0; /* Do nothing */
 1290|       |#endif
 1291|      0|    }
 1292|      0|    else {
 1293|      0|      rc = connect(sockfd, &addr.sa_addr, addr.addrlen);
 1294|      0|    }
 1295|       |
 1296|      0|    if(-1 == rc)
 1297|      0|      error = SOCKERRNO;
 1298|       |#ifdef ENABLE_QUIC
 1299|       |    else if(conn->transport == TRNSPRT_QUIC) {
 1300|       |      /* pass in 'sockfd' separately since it hasn't been put into the
 1301|       |         tempsock array at this point */
 1302|       |      result = Curl_quic_connect(data, conn, sockfd, tempindex,
 1303|       |                                 &addr.sa_addr, addr.addrlen);
 1304|       |      if(result)
 1305|       |        error = SOCKERRNO;
 1306|       |    }
 1307|       |#endif
 1308|      0|  }
 1309|  2.79k|  else {
 1310|  2.79k|    *sockp = sockfd;
 1311|  2.79k|    return CURLE_OK;
 1312|  2.79k|  }
 1313|       |
 1314|      0|  if(-1 == rc) {
 1315|      0|    switch(error) {
 1316|      0|    case EINPROGRESS:
 1317|      0|    case EWOULDBLOCK:
 1318|      0|#if defined(EAGAIN)
 1319|       |#if (EAGAIN) != (EWOULDBLOCK)
 1320|       |      /* On some platforms EAGAIN and EWOULDBLOCK are the
 1321|       |       * same value, and on others they are different, hence
 1322|       |       * the odd #if
 1323|       |       */
 1324|       |    case EAGAIN:
 1325|       |#endif
 1326|      0|#endif
 1327|      0|      result = CURLE_OK;
 1328|      0|      break;
 1329|       |
 1330|      0|    default:
 1331|       |      /* unknown error, fallthrough and try another address! */
 1332|      0|      infof(data, "Immediate connect fail for %s: %s",
 1333|      0|            ipaddress, Curl_strerror(error, buffer, sizeof(buffer)));
 1334|      0|      data->state.os_errno = error;
 1335|       |
 1336|       |      /* connect failed */
 1337|      0|      Curl_closesocket(data, conn, sockfd);
 1338|      0|      result = CURLE_COULDNT_CONNECT;
 1339|      0|    }
 1340|      0|  }
 1341|       |
 1342|      0|  if(!result)
 1343|      0|    *sockp = sockfd;
 1344|       |
 1345|      0|  return result;
 1346|      0|}
connect.c:tcpnodelay:
 1062|  2.79k|{
 1063|  2.79k|#if defined(TCP_NODELAY)
 1064|  2.79k|  curl_socklen_t onoff = (curl_socklen_t) 1;
 1065|  2.79k|  int level = IPPROTO_TCP;
 1066|  2.79k|#if !defined(CURL_DISABLE_VERBOSE_STRINGS)
 1067|  2.79k|  char buffer[STRERROR_LEN];
 1068|       |#else
 1069|       |  (void) data;
 1070|       |#endif
 1071|       |
 1072|  2.79k|  if(setsockopt(sockfd, level, TCP_NODELAY, (void *)&onoff,
 1073|  2.79k|                sizeof(onoff)) < 0)
 1074|  2.79k|    infof(data, "Could not set TCP_NODELAY: %s",
 1075|  2.79k|          Curl_strerror(SOCKERRNO, buffer, sizeof(buffer)));
 1076|       |#else
 1077|       |  (void)data;
 1078|       |  (void)sockfd;
 1079|       |#endif
 1080|  2.79k|}
connect.c:bindlocal:
  240|  2.79k|{
  241|  2.79k|  struct connectdata *conn = data->conn;
  242|  2.79k|  struct Curl_sockaddr_storage sa;
  243|  2.79k|  struct sockaddr *sock = (struct sockaddr *)&sa;  /* bind to this address */
  244|  2.79k|  curl_socklen_t sizeof_sa = 0; /* size of the data sock points to */
  245|  2.79k|  struct sockaddr_in *si4 = (struct sockaddr_in *)&sa;
  246|  2.79k|#ifdef ENABLE_IPV6
  247|  2.79k|  struct sockaddr_in6 *si6 = (struct sockaddr_in6 *)&sa;
  248|  2.79k|#endif
  249|       |
  250|  2.79k|  struct Curl_dns_entry *h = NULL;
  251|  2.79k|  unsigned short port = data->set.localport; /* use this port number, 0 for
  252|       |                                                "random" */
  253|       |  /* how many port numbers to try to bind to, increasing one at a time */
  254|  2.79k|  int portnum = data->set.localportrange;
  255|  2.79k|  const char *dev = data->set.str[STRING_DEVICE];
  256|  2.79k|  int error;
  257|  2.79k|#ifdef IP_BIND_ADDRESS_NO_PORT
  258|  2.79k|  int on = 1;
  259|  2.79k|#endif
  260|       |
  261|       |  /*************************************************************
  262|       |   * Select device to bind socket to
  263|       |   *************************************************************/
  264|  2.79k|  if(!dev && !port)
  265|       |    /* no local kind of binding was requested */
  266|  2.79k|    return CURLE_OK;
  267|       |
  268|      0|  memset(&sa, 0, sizeof(struct Curl_sockaddr_storage));
  269|       |
  270|      0|  if(dev && (strlen(dev)<255) ) {
  271|      0|    char myhost[256] = "";
  272|      0|    int done = 0; /* -1 for error, 1 for address found */
  273|      0|    bool is_interface = FALSE;
  274|      0|    bool is_host = FALSE;
  275|      0|    static const char *if_prefix = "if!";
  276|      0|    static const char *host_prefix = "host!";
  277|       |
  278|      0|    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
  279|      0|      dev += strlen(if_prefix);
  280|      0|      is_interface = TRUE;
  281|      0|    }
  282|      0|    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
  283|      0|      dev += strlen(host_prefix);
  284|      0|      is_host = TRUE;
  285|      0|    }
  286|       |
  287|       |    /* interface */
  288|      0|    if(!is_host) {
  289|      0|#ifdef SO_BINDTODEVICE
  290|       |      /* I am not sure any other OSs than Linux that provide this feature,
  291|       |       * and at the least I cannot test. --Ben
  292|       |       *
  293|       |       * This feature allows one to tightly bind the local socket to a
  294|       |       * particular interface.  This will force even requests to other
  295|       |       * local interfaces to go out the external interface.
  296|       |       *
  297|       |       *
  298|       |       * Only bind to the interface when specified as interface, not just
  299|       |       * as a hostname or ip address.
  300|       |       *
  301|       |       * interface might be a VRF, eg: vrf-blue, which means it cannot be
  302|       |       * converted to an IP address and would fail Curl_if2ip. Simply try
  303|       |       * to use it straight away.
  304|       |       */
  305|      0|      if(setsockopt(sockfd, SOL_SOCKET, SO_BINDTODEVICE,
  306|      0|                    dev, (curl_socklen_t)strlen(dev) + 1) == 0) {
  307|       |        /* This is typically "errno 1, error: Operation not permitted" if
  308|       |         * you're not running as root or another suitable privileged
  309|       |         * user.
  310|       |         * If it succeeds it means the parameter was a valid interface and
  311|       |         * not an IP address. Return immediately.
  312|       |         */
  313|      0|        return CURLE_OK;
  314|      0|      }
  315|      0|#endif
  316|       |
  317|      0|      switch(Curl_if2ip(af, scope, conn->scope_id, dev,
  318|      0|                        myhost, sizeof(myhost))) {
  319|      0|        case IF2IP_NOT_FOUND:
  320|      0|          if(is_interface) {
  321|       |            /* Do not fall back to treating it as a host name */
  322|      0|            failf(data, "Couldn't bind to interface '%s'", dev);
  323|      0|            return CURLE_INTERFACE_FAILED;
  324|      0|          }
  325|      0|          break;
  326|      0|        case IF2IP_AF_NOT_SUPPORTED:
  327|       |          /* Signal the caller to try another address family if available */
  328|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  329|      0|        case IF2IP_FOUND:
  330|      0|          is_interface = TRUE;
  331|       |          /*
  332|       |           * We now have the numerical IP address in the 'myhost' buffer
  333|       |           */
  334|      0|          infof(data, "Local Interface %s is ip %s using address family %i",
  335|      0|                dev, myhost, af);
  336|      0|          done = 1;
  337|      0|          break;
  338|      0|      }
  339|      0|    }
  340|      0|    if(!is_interface) {
  341|       |      /*
  342|       |       * This was not an interface, resolve the name as a host name
  343|       |       * or IP number
  344|       |       *
  345|       |       * Temporarily force name resolution to use only the address type
  346|       |       * of the connection. The resolve functions should really be changed
  347|       |       * to take a type parameter instead.
  348|       |       */
  349|      0|      unsigned char ipver = conn->ip_version;
  350|      0|      int rc;
  351|       |
  352|      0|      if(af == AF_INET)
  353|      0|        conn->ip_version = CURL_IPRESOLVE_V4;
  354|      0|#ifdef ENABLE_IPV6
  355|      0|      else if(af == AF_INET6)
  356|      0|        conn->ip_version = CURL_IPRESOLVE_V6;
  357|      0|#endif
  358|       |
  359|      0|      rc = Curl_resolv(data, dev, 0, FALSE, &h);
  360|      0|      if(rc == CURLRESOLV_PENDING)
  361|      0|        (void)Curl_resolver_wait_resolv(data, &h);
  362|      0|      conn->ip_version = ipver;
  363|       |
  364|      0|      if(h) {
  365|       |        /* convert the resolved address, sizeof myhost >= INET_ADDRSTRLEN */
  366|      0|        Curl_printable_address(h->addr, myhost, sizeof(myhost));
  367|      0|        infof(data, "Name '%s' family %i resolved to '%s' family %i",
  368|      0|              dev, af, myhost, h->addr->ai_family);
  369|      0|        Curl_resolv_unlock(data, h);
  370|      0|        if(af != h->addr->ai_family) {
  371|       |          /* bad IP version combo, signal the caller to try another address
  372|       |             family if available */
  373|      0|          return CURLE_UNSUPPORTED_PROTOCOL;
  374|      0|        }
  375|      0|        done = 1;
  376|      0|      }
  377|      0|      else {
  378|       |        /*
  379|       |         * provided dev was no interface (or interfaces are not supported
  380|       |         * e.g. solaris) no ip address and no domain we fail here
  381|       |         */
  382|      0|        done = -1;
  383|      0|      }
  384|      0|    }
  385|       |
  386|      0|    if(done > 0) {
  387|      0|#ifdef ENABLE_IPV6
  388|       |      /* IPv6 address */
  389|      0|      if(af == AF_INET6) {
  390|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  391|      0|        char *scope_ptr = strchr(myhost, '%');
  392|      0|        if(scope_ptr)
  393|      0|          *(scope_ptr++) = 0;
  394|      0|#endif
  395|      0|        if(Curl_inet_pton(AF_INET6, myhost, &si6->sin6_addr) > 0) {
  396|      0|          si6->sin6_family = AF_INET6;
  397|      0|          si6->sin6_port = htons(port);
  398|      0|#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
  399|      0|          if(scope_ptr)
  400|       |            /* The "myhost" string either comes from Curl_if2ip or from
  401|       |               Curl_printable_address. The latter returns only numeric scope
  402|       |               IDs and the former returns none at all.  So the scope ID, if
  403|       |               present, is known to be numeric */
  404|      0|            si6->sin6_scope_id = atoi(scope_ptr);
  405|      0|#endif
  406|      0|        }
  407|      0|        sizeof_sa = sizeof(struct sockaddr_in6);
  408|      0|      }
  409|      0|      else
  410|      0|#endif
  411|       |      /* IPv4 address */
  412|      0|      if((af == AF_INET) &&
  413|      0|         (Curl_inet_pton(AF_INET, myhost, &si4->sin_addr) > 0)) {
  414|      0|        si4->sin_family = AF_INET;
  415|      0|        si4->sin_port = htons(port);
  416|      0|        sizeof_sa = sizeof(struct sockaddr_in);
  417|      0|      }
  418|      0|    }
  419|       |
  420|      0|    if(done < 1) {
  421|       |      /* errorbuf is set false so failf will overwrite any message already in
  422|       |         the error buffer, so the user receives this error message instead of a
  423|       |         generic resolve error. */
  424|      0|      data->state.errorbuf = FALSE;
  425|      0|      failf(data, "Couldn't bind to '%s'", dev);
  426|      0|      return CURLE_INTERFACE_FAILED;
  427|      0|    }
  428|      0|  }
  429|      0|  else {
  430|       |    /* no device was given, prepare sa to match af's needs */
  431|      0|#ifdef ENABLE_IPV6
  432|      0|    if(af == AF_INET6) {
  433|      0|      si6->sin6_family = AF_INET6;
  434|      0|      si6->sin6_port = htons(port);
  435|      0|      sizeof_sa = sizeof(struct sockaddr_in6);
  436|      0|    }
  437|      0|    else
  438|      0|#endif
  439|      0|    if(af == AF_INET) {
  440|      0|      si4->sin_family = AF_INET;
  441|      0|      si4->sin_port = htons(port);
  442|      0|      sizeof_sa = sizeof(struct sockaddr_in);
  443|      0|    }
  444|      0|  }
  445|      0|#ifdef IP_BIND_ADDRESS_NO_PORT
  446|      0|  (void)setsockopt(sockfd, SOL_IP, IP_BIND_ADDRESS_NO_PORT, &on, sizeof(on));
  447|      0|#endif
  448|      0|  for(;;) {
  449|      0|    if(bind(sockfd, sock, sizeof_sa) >= 0) {
  450|       |      /* we succeeded to bind */
  451|      0|      struct Curl_sockaddr_storage add;
  452|      0|      curl_socklen_t size = sizeof(add);
  453|      0|      memset(&add, 0, sizeof(struct Curl_sockaddr_storage));
  454|      0|      if(getsockname(sockfd, (struct sockaddr *) &add, &size) < 0) {
  455|      0|        char buffer[STRERROR_LEN];
  456|      0|        data->state.os_errno = error = SOCKERRNO;
  457|      0|        failf(data, "getsockname() failed with errno %d: %s",
  458|      0|              error, Curl_strerror(error, buffer, sizeof(buffer)));
  459|      0|        return CURLE_INTERFACE_FAILED;
  460|      0|      }
  461|      0|      infof(data, "Local port: %hu", port);
  462|      0|      conn->bits.bound = TRUE;
  463|      0|      return CURLE_OK;
  464|      0|    }
  465|       |
  466|      0|    if(--portnum > 0) {
  467|      0|      infof(data, "Bind to local port %hu failed, trying next", port);
  468|      0|      port++; /* try next port */
  469|       |      /* We re-use/clobber the port variable here below */
  470|      0|      if(sock->sa_family == AF_INET)
  471|      0|        si4->sin_port = ntohs(port);
  472|      0|#ifdef ENABLE_IPV6
  473|      0|      else
  474|      0|        si6->sin6_port = ntohs(port);
  475|      0|#endif
  476|      0|    }
  477|      0|    else
  478|      0|      break;
  479|      0|  }
  480|      0|  {
  481|      0|    char buffer[STRERROR_LEN];
  482|      0|    data->state.os_errno = error = SOCKERRNO;
  483|      0|    failf(data, "bind failed with errno %d: %s",
  484|      0|          error, Curl_strerror(error, buffer, sizeof(buffer)));
  485|      0|  }
  486|       |
  487|      0|  return CURLE_INTERFACE_FAILED;
  488|      0|}

Curl_all_content_encodings:
  853|     72|{
  854|     72|  size_t len = 0;
  855|     72|  const struct content_encoding * const *cep;
  856|     72|  const struct content_encoding *ce;
  857|     72|  char *ace;
  858|       |
  859|    288|  for(cep = encodings; *cep; cep++) {
  860|    216|    ce = *cep;
  861|    216|    if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT))
  862|    144|      len += strlen(ce->name) + 2;
  863|    216|  }
  864|       |
  865|     72|  if(!len)
  866|      0|    return strdup(CONTENT_ENCODING_DEFAULT);
  867|       |
  868|     72|  ace = malloc(len);
  869|     72|  if(ace) {
  870|     72|    char *p = ace;
  871|    288|    for(cep = encodings; *cep; cep++) {
  872|    216|      ce = *cep;
  873|    216|      if(!strcasecompare(ce->name, CONTENT_ENCODING_DEFAULT)) {
  874|    144|        strcpy(p, ce->name);
  875|    144|        p += strlen(p);
  876|    144|        *p++ = ',';
  877|    144|        *p++ = ' ';
  878|    144|      }
  879|    216|    }
  880|     72|    p[-2] = '\0';
  881|     72|  }
  882|       |
  883|     72|  return ace;
  884|     72|}
Curl_unencode_write:
  994|     83|{
  995|     83|  if(!nbytes)
  996|      0|    return CURLE_OK;
  997|     83|  return writer->handler->unencode_write(data, writer, buf, nbytes);
  998|     83|}
Curl_unencode_cleanup:
 1002|  1.24k|{
 1003|  1.24k|  struct SingleRequest *k = &data->req;
 1004|  1.24k|  struct contenc_writer *writer = k->writer_stack;
 1005|       |
 1006|  1.94k|  while(writer) {
 1007|    697|    k->writer_stack = writer->downstream;
 1008|    697|    writer->handler->close_writer(data, writer);
 1009|    697|    free(writer);
 1010|    697|    writer = k->writer_stack;
 1011|    697|  }
 1012|  1.24k|}
Curl_build_unencoding_stack:
 1033|    641|{
 1034|    641|  struct SingleRequest *k = &data->req;
 1035|       |
 1036|    660|  do {
 1037|    660|    const char *name;
 1038|    660|    size_t namelen;
 1039|       |
 1040|       |    /* Parse a single encoding name. */
 1041|  1.41k|    while(ISSPACE(*enclist) || *enclist == ',')
 1042|    759|      enclist++;
 1043|       |
 1044|    660|    name = enclist;
 1045|       |
 1046|  12.2k|    for(namelen = 0; *enclist && *enclist != ','; enclist++)
 1047|  11.6k|      if(!ISSPACE(*enclist))
 1048|  10.4k|        namelen = enclist - name + 1;
 1049|       |
 1050|       |    /* Special case: chunked encoding is handled at the reader level. */
 1051|    660|    if(maybechunked && namelen == 7 && strncasecompare(name, "chunked", 7)) {
 1052|      0|      k->chunk = TRUE;             /* chunks coming our way. */
 1053|      0|      Curl_httpchunk_init(data);   /* init our chunky engine. */
 1054|      0|    }
 1055|    660|    else if(namelen) {
 1056|    594|      const struct content_encoding *encoding = find_encoding(name, namelen);
 1057|    594|      struct contenc_writer *writer;
 1058|       |
 1059|    594|      if(!k->writer_stack) {
 1060|    103|        k->writer_stack = new_unencoding_writer(data, &client_encoding, NULL);
 1061|       |
 1062|    103|        if(!k->writer_stack)
 1063|      0|          return CURLE_OUT_OF_MEMORY;
 1064|    103|      }
 1065|       |
 1066|    594|      if(!encoding)
 1067|    387|        encoding = &error_encoding;  /* Defer error at stack use. */
 1068|       |
 1069|       |      /* Stack the unencoding stage. */
 1070|    594|      writer = new_unencoding_writer(data, encoding, k->writer_stack);
 1071|    594|      if(!writer)
 1072|      0|        return CURLE_OUT_OF_MEMORY;
 1073|    594|      k->writer_stack = writer;
 1074|    594|    }
 1075|    660|  } while(*enclist);
 1076|       |
 1077|    641|  return CURLE_OK;
 1078|    641|}
content_encoding.c:identity_init_writer:
  805|    147|{
  806|    147|  (void) data;
  807|    147|  return writer->downstream? CURLE_OK: CURLE_WRITE_ERROR;
  808|    147|}
content_encoding.c:identity_unencode_write:
  813|      6|{
  814|      6|  return Curl_unencode_write(data, writer->downstream, buf, nbytes);
  815|      6|}
content_encoding.c:identity_close_writer:
  819|    147|{
  820|    147|  (void) data;
  821|    147|  (void) writer;
  822|    147|}
content_encoding.c:deflate_init_writer:
  265|     10|{
  266|     10|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  267|     10|  z_stream *z = &zp->z;     /* zlib state structure */
  268|       |
  269|     10|  if(!writer->downstream)
  270|      0|    return CURLE_WRITE_ERROR;
  271|       |
  272|       |  /* Initialize zlib */
  273|     10|  z->zalloc = (alloc_func) zalloc_cb;
  274|     10|  z->zfree = (free_func) zfree_cb;
  275|       |
  276|     10|  if(inflateInit(z) != Z_OK)
  277|      0|    return process_zlib_error(data, z);
  278|     10|  zp->zlib_init = ZLIB_INIT;
  279|     10|  return CURLE_OK;
  280|     10|}
content_encoding.c:zalloc_cb:
   93|     80|{
   94|     80|  (void) opaque;
   95|       |  /* not a typo, keep it calloc() */
   96|     80|  return (voidpf) calloc(items, size);
   97|     80|}
content_encoding.c:zfree_cb:
  101|     80|{
  102|     80|  (void) opaque;
  103|     80|  free(ptr);
  104|     80|}
content_encoding.c:process_zlib_error:
  108|     34|{
  109|     34|  if(z->msg)
  110|     34|    failf(data, "Error while processing content unencoding: %s",
  111|     34|          z->msg);
  112|      0|  else
  113|      0|    failf(data, "Error while processing content unencoding: "
  114|      0|          "Unknown failure within decompression software.");
  115|       |
  116|     34|  return CURLE_BAD_CONTENT_ENCODING;
  117|     34|}
content_encoding.c:process_trailer:
  137|      1|{
  138|      1|  z_stream *z = &zp->z;
  139|      1|  CURLcode result = CURLE_OK;
  140|      1|  uInt len = z->avail_in < zp->trailerlen? z->avail_in: zp->trailerlen;
  141|       |
  142|       |  /* Consume expected trailer bytes. Terminate stream if exhausted.
  143|       |     Issue an error if unexpected bytes follow. */
  144|       |
  145|      1|  zp->trailerlen -= len;
  146|      1|  z->avail_in -= len;
  147|      1|  z->next_in += len;
  148|      1|  if(z->avail_in)
  149|      0|    result = CURLE_WRITE_ERROR;
  150|      1|  if(result || !zp->trailerlen)
  151|      1|    result = exit_zlib(data, z, &zp->zlib_init, result);
  152|      0|  else {
  153|       |    /* Only occurs for gzip with zlib < 1.2.0.4 or raw deflate. */
  154|      0|    zp->zlib_init = ZLIB_EXTERNAL_TRAILER;
  155|      0|  }
  156|      1|  return result;
  157|      1|}
content_encoding.c:exit_zlib:
  122|     95|{
  123|     95|  if(*zlib_init == ZLIB_GZIP_HEADER)
  124|      0|    Curl_safefree(z->next_in);
  125|       |
  126|     95|  if(*zlib_init != ZLIB_UNINIT) {
  127|     60|    if(inflateEnd(z) != Z_OK && result == CURLE_OK)
  128|      0|      result = process_zlib_error(data, z);
  129|     60|    *zlib_init = ZLIB_UNINIT;
  130|     60|  }
  131|       |
  132|     95|  return result;
  133|     95|}
content_encoding.c:inflate_stream:
  162|     48|{
  163|     48|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  164|     48|  z_stream *z = &zp->z;         /* zlib state structure */
  165|     48|  uInt nread = z->avail_in;
  166|     48|  Bytef *orig_in = z->next_in;
  167|     48|  bool done = FALSE;
  168|     48|  CURLcode result = CURLE_OK;   /* Curl_client_write status */
  169|     48|  char *decomp;                 /* Put the decompressed data here. */
  170|       |
  171|       |  /* Check state. */
  172|     48|  if(zp->zlib_init != ZLIB_INIT &&
  173|     48|     zp->zlib_init != ZLIB_INFLATING &&
  174|     48|     zp->zlib_init != ZLIB_INIT_GZIP &&
  175|     48|     zp->zlib_init != ZLIB_GZIP_INFLATING)
  176|      0|    return exit_zlib(data, z, &zp->zlib_init, CURLE_WRITE_ERROR);
  177|       |
  178|       |  /* Dynamically allocate a buffer for decompression because it's uncommonly
  179|       |     large to hold on the stack */
  180|     48|  decomp = malloc(DSIZ);
  181|     48|  if(!decomp)
  182|      0|    return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  183|       |
  184|       |  /* because the buffer size is fixed, iteratively decompress and transfer to
  185|       |     the client via downstream_write function. */
  186|    164|  while(!done) {
  187|    116|    int status;                   /* zlib status */
  188|    116|    done = TRUE;
  189|       |
  190|       |    /* (re)set buffer for decompressed output for every iteration */
  191|    116|    z->next_out = (Bytef *) decomp;
  192|    116|    z->avail_out = DSIZ;
  193|       |
  194|    116|#ifdef Z_BLOCK
  195|       |    /* Z_BLOCK is only available in zlib ver. >= 1.2.0.5 */
  196|    116|    status = inflate(z, Z_BLOCK);
  197|       |#else
  198|       |    /* fallback for zlib ver. < 1.2.0.5 */
  199|       |    status = inflate(z, Z_SYNC_FLUSH);
  200|       |#endif
  201|       |
  202|       |    /* Flush output data if some. */
  203|    116|    if(z->avail_out != DSIZ) {
  204|     34|      if(status == Z_OK || status == Z_STREAM_END) {
  205|     20|        zp->zlib_init = started;      /* Data started. */
  206|     20|        result = Curl_unencode_write(data, writer->downstream, decomp,
  207|     20|                                     DSIZ - z->avail_out);
  208|     20|        if(result) {
  209|      0|          exit_zlib(data, z, &zp->zlib_init, result);
  210|      0|          break;
  211|      0|        }
  212|     20|      }
  213|     34|    }
  214|       |
  215|       |    /* Dispatch by inflate() status. */
  216|    116|    switch(status) {
  217|     68|    case Z_OK:
  218|       |      /* Always loop: there may be unflushed latched data in zlib state. */
  219|     68|      done = FALSE;
  220|     68|      break;
  221|     13|    case Z_BUF_ERROR:
  222|       |      /* No more data to flush: just exit loop. */
  223|     13|      break;
  224|      1|    case Z_STREAM_END:
  225|      1|      result = process_trailer(data, zp);
  226|      1|      break;
  227|     34|    case Z_DATA_ERROR:
  228|       |      /* some servers seem to not generate zlib headers, so this is an attempt
  229|       |         to fix and continue anyway */
  230|     34|      if(zp->zlib_init == ZLIB_INIT) {
  231|       |        /* Do not use inflateReset2(): only available since zlib 1.2.3.4. */
  232|      0|        (void) inflateEnd(z);     /* don't care about the return code */
  233|      0|        if(inflateInit2(z, -MAX_WBITS) == Z_OK) {
  234|      0|          z->next_in = orig_in;
  235|      0|          z->avail_in = nread;
  236|      0|          zp->zlib_init = ZLIB_INFLATING;
  237|      0|          zp->trailerlen = 4; /* Tolerate up to 4 unknown trailer bytes. */
  238|      0|          done = FALSE;
  239|      0|          break;
  240|      0|        }
  241|      0|        zp->zlib_init = ZLIB_UNINIT;    /* inflateEnd() already called. */
  242|      0|      }
  243|     34|      result = exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  244|     34|      break;
  245|      0|    default:
  246|      0|      result = exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  247|      0|      break;
  248|    116|    }
  249|    116|  }
  250|     48|  free(decomp);
  251|       |
  252|       |  /* We're about to leave this call so the `nread' data bytes won't be seen
  253|       |     again. If we are in a state that would wrongly allow restart in raw mode
  254|       |     at the next call, assume output has already started. */
  255|     48|  if(nread && zp->zlib_init == ZLIB_INIT)
  256|      0|    zp->zlib_init = started;      /* Cannot restart anymore. */
  257|       |
  258|     48|  return result;
  259|     48|}
content_encoding.c:deflate_close_writer:
  302|     10|{
  303|     10|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  304|     10|  z_stream *z = &zp->z;     /* zlib state structure */
  305|       |
  306|     10|  exit_zlib(data, z, &zp->zlib_init, CURLE_OK);
  307|     10|}
content_encoding.c:gzip_init_writer:
  322|     50|{
  323|     50|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  324|     50|  z_stream *z = &zp->z;     /* zlib state structure */
  325|       |
  326|     50|  if(!writer->downstream)
  327|      0|    return CURLE_WRITE_ERROR;
  328|       |
  329|       |  /* Initialize zlib */
  330|     50|  z->zalloc = (alloc_func) zalloc_cb;
  331|     50|  z->zfree = (free_func) zfree_cb;
  332|       |
  333|     50|  if(strcmp(zlibVersion(), "1.2.0.4") >= 0) {
  334|       |    /* zlib ver. >= 1.2.0.4 supports transparent gzip decompressing */
  335|     50|    if(inflateInit2(z, MAX_WBITS + 32) != Z_OK) {
  336|      0|      return process_zlib_error(data, z);
  337|      0|    }
  338|     50|    zp->zlib_init = ZLIB_INIT_GZIP; /* Transparent gzip decompress state */
  339|     50|  }
  340|      0|  else {
  341|       |    /* we must parse the gzip header and trailer ourselves */
  342|      0|    if(inflateInit2(z, -MAX_WBITS) != Z_OK) {
  343|      0|      return process_zlib_error(data, z);
  344|      0|    }
  345|      0|    zp->trailerlen = 8; /* A CRC-32 and a 32-bit input size (RFC 1952, 2.2) */
  346|      0|    zp->zlib_init = ZLIB_INIT; /* Initial call state */
  347|      0|  }
  348|       |
  349|     50|  return CURLE_OK;
  350|     50|}
content_encoding.c:gzip_unencode_write:
  439|     48|{
  440|     48|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  441|     48|  z_stream *z = &zp->z;     /* zlib state structure */
  442|       |
  443|     48|  if(zp->zlib_init == ZLIB_INIT_GZIP) {
  444|       |    /* Let zlib handle the gzip decompression entirely */
  445|     48|    z->next_in = (Bytef *) buf;
  446|     48|    z->avail_in = (uInt) nbytes;
  447|       |    /* Now uncompress the data */
  448|     48|    return inflate_stream(data, writer, ZLIB_INIT_GZIP);
  449|     48|  }
  450|       |
  451|       |#ifndef OLD_ZLIB_SUPPORT
  452|       |  /* Support for old zlib versions is compiled away and we are running with
  453|       |     an old version, so return an error. */
  454|       |  return exit_zlib(data, z, &zp->zlib_init, CURLE_WRITE_ERROR);
  455|       |
  456|       |#else
  457|       |  /* This next mess is to get around the potential case where there isn't
  458|       |   * enough data passed in to skip over the gzip header.  If that happens, we
  459|       |   * malloc a block and copy what we have then wait for the next call.  If
  460|       |   * there still isn't enough (this is definitely a worst-case scenario), we
  461|       |   * make the block bigger, copy the next part in and keep waiting.
  462|       |   *
  463|       |   * This is only required with zlib versions < 1.2.0.4 as newer versions
  464|       |   * can handle the gzip header themselves.
  465|       |   */
  466|       |
  467|      0|  switch(zp->zlib_init) {
  468|       |  /* Skip over gzip header? */
  469|      0|  case ZLIB_INIT:
  470|      0|  {
  471|       |    /* Initial call state */
  472|      0|    ssize_t hlen;
  473|       |
  474|      0|    switch(check_gzip_header((unsigned char *) buf, nbytes, &hlen)) {
  475|      0|    case GZIP_OK:
  476|      0|      z->next_in = (Bytef *) buf + hlen;
  477|      0|      z->avail_in = (uInt) (nbytes - hlen);
  478|      0|      zp->zlib_init = ZLIB_GZIP_INFLATING; /* Inflating stream state */
  479|      0|      break;
  480|       |
  481|      0|    case GZIP_UNDERFLOW:
  482|       |      /* We need more data so we can find the end of the gzip header.  It's
  483|       |       * possible that the memory block we malloc here will never be freed if
  484|       |       * the transfer abruptly aborts after this point.  Since it's unlikely
  485|       |       * that circumstances will be right for this code path to be followed in
  486|       |       * the first place, and it's even more unlikely for a transfer to fail
  487|       |       * immediately afterwards, it should seldom be a problem.
  488|       |       */
  489|      0|      z->avail_in = (uInt) nbytes;
  490|      0|      z->next_in = malloc(z->avail_in);
  491|      0|      if(!z->next_in) {
  492|      0|        return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  493|      0|      }
  494|      0|      memcpy(z->next_in, buf, z->avail_in);
  495|      0|      zp->zlib_init = ZLIB_GZIP_HEADER;  /* Need more gzip header data state */
  496|       |      /* We don't have any data to inflate yet */
  497|      0|      return CURLE_OK;
  498|       |
  499|      0|    case GZIP_BAD:
  500|      0|    default:
  501|      0|      return exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  502|      0|    }
  503|       |
  504|      0|  }
  505|      0|  break;
  506|       |
  507|      0|  case ZLIB_GZIP_HEADER:
  508|      0|  {
  509|       |    /* Need more gzip header data state */
  510|      0|    ssize_t hlen;
  511|      0|    z->avail_in += (uInt) nbytes;
  512|      0|    z->next_in = Curl_saferealloc(z->next_in, z->avail_in);
  513|      0|    if(!z->next_in) {
  514|      0|      return exit_zlib(data, z, &zp->zlib_init, CURLE_OUT_OF_MEMORY);
  515|      0|    }
  516|       |    /* Append the new block of data to the previous one */
  517|      0|    memcpy(z->next_in + z->avail_in - nbytes, buf, nbytes);
  518|       |
  519|      0|    switch(check_gzip_header(z->next_in, z->avail_in, &hlen)) {
  520|      0|    case GZIP_OK:
  521|       |      /* This is the zlib stream data */
  522|      0|      free(z->next_in);
  523|       |      /* Don't point into the malloced block since we just freed it */
  524|      0|      z->next_in = (Bytef *) buf + hlen + nbytes - z->avail_in;
  525|      0|      z->avail_in = (uInt) (z->avail_in - hlen);
  526|      0|      zp->zlib_init = ZLIB_GZIP_INFLATING;   /* Inflating stream state */
  527|      0|      break;
  528|       |
  529|      0|    case GZIP_UNDERFLOW:
  530|       |      /* We still don't have any data to inflate! */
  531|      0|      return CURLE_OK;
  532|       |
  533|      0|    case GZIP_BAD:
  534|      0|    default:
  535|      0|      return exit_zlib(data, z, &zp->zlib_init, process_zlib_error(data, z));
  536|      0|    }
  537|       |
  538|      0|  }
  539|      0|  break;
  540|       |
  541|      0|  case ZLIB_EXTERNAL_TRAILER:
  542|      0|    z->next_in = (Bytef *) buf;
  543|      0|    z->avail_in = (uInt) nbytes;
  544|      0|    return process_trailer(data, zp);
  545|       |
  546|      0|  case ZLIB_GZIP_INFLATING:
  547|      0|  default:
  548|       |    /* Inflating stream state */
  549|      0|    z->next_in = (Bytef *) buf;
  550|      0|    z->avail_in = (uInt) nbytes;
  551|      0|    break;
  552|      0|  }
  553|       |
  554|      0|  if(z->avail_in == 0) {
  555|       |    /* We don't have any data to inflate; wait until next time */
  556|      0|    return CURLE_OK;
  557|      0|  }
  558|       |
  559|       |  /* We've parsed the header, now uncompress the data */
  560|      0|  return inflate_stream(data, writer, ZLIB_GZIP_INFLATING);
  561|      0|#endif
  562|      0|}
content_encoding.c:gzip_close_writer:
  566|     50|{
  567|     50|  struct zlib_params *zp = (struct zlib_params *) &writer->params;
  568|     50|  z_stream *z = &zp->z;     /* zlib state structure */
  569|       |
  570|     50|  exit_zlib(data, z, &zp->zlib_init, CURLE_OK);
  571|     50|}
content_encoding.c:find_encoding:
 1017|    594|{
 1018|    594|  const struct content_encoding * const *cep;
 1019|       |
 1020|  1.86k|  for(cep = encodings; *cep; cep++) {
 1021|  1.47k|    const struct content_encoding *ce = *cep;
 1022|  1.47k|    if((strncasecompare(name, ce->name, len) && !ce->name[len]) ||
 1023|  1.47k|       (ce->alias && strncasecompare(name, ce->alias, len) && !ce->alias[len]))
 1024|    207|      return ce;
 1025|  1.47k|  }
 1026|    387|  return NULL;
 1027|    594|}
content_encoding.c:new_unencoding_writer:
  973|    697|{
  974|    697|  size_t sz = offsetof(struct contenc_writer, params) + handler->paramsize;
  975|    697|  struct contenc_writer *writer = (struct contenc_writer *)calloc(1, sz);
  976|       |
  977|    697|  if(writer) {
  978|    697|    writer->handler = handler;
  979|    697|    writer->downstream = downstream;
  980|    697|    if(handler->init_writer(data, writer)) {
  981|      0|      free(writer);
  982|      0|      writer = NULL;
  983|      0|    }
  984|    697|  }
  985|       |
  986|    697|  return writer;
  987|    697|}
content_encoding.c:client_init_writer:
  890|    103|{
  891|    103|  (void) data;
  892|    103|  return writer->downstream? CURLE_WRITE_ERROR: CURLE_OK;
  893|    103|}
content_encoding.c:client_unencode_write:
  898|     20|{
  899|     20|  struct SingleRequest *k = &data->req;
  900|       |
  901|     20|  (void) writer;
  902|       |
  903|     20|  if(!nbytes || k->ignorebody)
  904|      0|    return CURLE_OK;
  905|       |
  906|     20|  return Curl_client_write(data, CLIENTWRITE_BODY, (char *) buf, nbytes);
  907|     20|}
content_encoding.c:client_close_writer:
  911|    103|{
  912|    103|  (void) data;
  913|    103|  (void) writer;
  914|    103|}
content_encoding.c:error_init_writer:
  929|    387|{
  930|    387|  (void) data;
  931|    387|  return writer->downstream? CURLE_OK: CURLE_WRITE_ERROR;
  932|    387|}
content_encoding.c:error_unencode_write:
  937|      9|{
  938|      9|  char *all = Curl_all_content_encodings();
  939|       |
  940|      9|  (void) writer;
  941|      9|  (void) buf;
  942|      9|  (void) nbytes;
  943|       |
  944|      9|  if(!all)
  945|      0|    return CURLE_OUT_OF_MEMORY;
  946|      9|  failf(data, "Unrecognized content encoding type. "
  947|      9|        "libcurl understands %s content encodings.", all);
  948|      9|  free(all);
  949|      9|  return CURLE_BAD_CONTENT_ENCODING;
  950|      9|}
content_encoding.c:error_close_writer:
  954|    387|{
  955|    387|  (void) data;
  956|    387|  (void) writer;
  957|    387|}

Curl_cookie_add:
  459|  7.82k|{
  460|  7.82k|  struct Cookie *clist;
  461|  7.82k|  struct Cookie *co;
  462|  7.82k|  struct Cookie *lastc = NULL;
  463|  7.82k|  time_t now = time(NULL);
  464|  7.82k|  bool replace_old = FALSE;
  465|  7.82k|  bool badcookie = FALSE; /* cookies are good by default. mmmmm yummy */
  466|  7.82k|  size_t myhash;
  467|       |
  468|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
  469|       |  (void)data;
  470|       |#endif
  471|       |
  472|       |  /* First, alloc and init a new struct for it */
  473|  7.82k|  co = calloc(1, sizeof(struct Cookie));
  474|  7.82k|  if(!co)
  475|      0|    return NULL; /* bail out if we're this low on memory */
  476|       |
  477|  7.82k|  if(httpheader) {
  478|       |    /* This line was read off a HTTP-header */
  479|  7.82k|    char name[MAX_NAME];
  480|  7.82k|    char what[MAX_NAME];
  481|  7.82k|    const char *ptr;
  482|  7.82k|    const char *semiptr;
  483|       |
  484|  7.82k|    size_t linelength = strlen(lineptr);
  485|  7.82k|    if(linelength > MAX_COOKIE_LINE) {
  486|       |      /* discard overly long lines at once */
  487|      1|      free(co);
  488|      1|      return NULL;
  489|      1|    }
  490|       |
  491|  7.82k|    semiptr = strchr(lineptr, ';'); /* first, find a semicolon */
  492|       |
  493|  15.9k|    while(*lineptr && ISBLANK(*lineptr))
  494|  8.11k|      lineptr++;
  495|       |
  496|  7.82k|    ptr = lineptr;
  497|  17.0k|    do {
  498|       |      /* we have a <what>=<this> pair or a stand-alone word here */
  499|  17.0k|      name[0] = what[0] = 0; /* init the buffers */
  500|  17.0k|      if(1 <= sscanf(ptr, "%" MAX_NAME_TXT "[^;\r\n=] =%"
  501|  17.0k|                     MAX_NAME_TXT "[^;\r\n]",
  502|  17.0k|                     name, what)) {
  503|       |        /*
  504|       |         * Use strstore() below to properly deal with received cookie
  505|       |         * headers that have the same string property set more than once,
  506|       |         * and then we use the last one.
  507|       |         */
  508|  15.8k|        const char *whatptr;
  509|  15.8k|        bool done = FALSE;
  510|  15.8k|        bool sep;
  511|  15.8k|        size_t len = strlen(what);
  512|  15.8k|        size_t nlen = strlen(name);
  513|  15.8k|        const char *endofn = &ptr[ nlen ];
  514|       |
  515|       |        /*
  516|       |         * Check for too long individual name or contents, or too long
  517|       |         * combination of name + contents. Chrome and Firefox support 4095 or
  518|       |         * 4096 bytes combo
  519|       |         */
  520|  15.8k|        if(nlen >= (MAX_NAME-1) || len >= (MAX_NAME-1) ||
  521|  15.8k|           ((nlen + len) > MAX_NAME)) {
  522|      2|          freecookie(co);
  523|      2|          infof(data, "oversized cookie dropped, name/val %zu + %zu bytes",
  524|      2|                nlen, len);
  525|      2|          return NULL;
  526|      2|        }
  527|       |
  528|       |        /* name ends with a '=' ? */
  529|  15.8k|        sep = (*endofn == '=')?TRUE:FALSE;
  530|       |
  531|  15.8k|        if(nlen) {
  532|  15.8k|          endofn--; /* move to the last character */
  533|  15.8k|          if(ISBLANK(*endofn)) {
  534|       |            /* skip trailing spaces in name */
  535|    618|            while(*endofn && ISBLANK(*endofn) && nlen) {
  536|    436|              endofn--;
  537|    436|              nlen--;
  538|    436|            }
  539|    182|            name[nlen] = 0; /* new end of name */
  540|    182|          }
  541|  15.8k|        }
  542|       |
  543|       |        /* Strip off trailing whitespace from the 'what' */
  544|  16.1k|        while(len && ISBLANK(what[len-1])) {
  545|    280|          what[len-1] = 0;
  546|    280|          len--;
  547|    280|        }
  548|       |
  549|       |        /* Skip leading whitespace from the 'what' */
  550|  15.8k|        whatptr = what;
  551|  16.1k|        while(*whatptr && ISBLANK(*whatptr))
  552|    273|          whatptr++;
  553|       |
  554|       |        /*
  555|       |         * Check if we have a reserved prefix set before anything else, as we
  556|       |         * otherwise have to test for the prefix in both the cookie name and
  557|       |         * "the rest". Prefixes must start with '__' and end with a '-', so
  558|       |         * only test for names where that can possibly be true.
  559|       |         */
  560|  15.8k|        if(nlen > 3 && name[0] == '_' && name[1] == '_') {
  561|      0|          if(!strncmp("__Secure-", name, 9))
  562|      0|            co->prefix |= COOKIE_PREFIX__SECURE;
  563|      0|          else if(!strncmp("__Host-", name, 7))
  564|      0|            co->prefix |= COOKIE_PREFIX__HOST;
  565|      0|        }
  566|       |
  567|  15.8k|        if(!co->name) {
  568|       |          /* The very first name/value pair is the actual cookie name */
  569|  7.80k|          if(!sep) {
  570|       |            /* Bad name/value pair. */
  571|  1.30k|            badcookie = TRUE;
  572|  1.30k|            break;
  573|  1.30k|          }
  574|  6.49k|          co->name = strdup(name);
  575|  6.49k|          co->value = strdup(whatptr);
  576|  6.49k|          done = TRUE;
  577|  6.49k|          if(!co->name || !co->value) {
  578|      0|            badcookie = TRUE;
  579|      0|            break;
  580|      0|          }
  581|  6.49k|        }
  582|  8.07k|        else if(!len) {
  583|       |          /*
  584|       |           * this was a "<name>=" with no content, and we must allow
  585|       |           * 'secure' and 'httponly' specified this weirdly
  586|       |           */
  587|    925|          done = TRUE;
  588|       |          /*
  589|       |           * secure cookies are only allowed to be set when the connection is
  590|       |           * using a secure protocol, or when the cookie is being set by
  591|       |           * reading from file
  592|       |           */
  593|    925|          if(strcasecompare("secure", name)) {
  594|      0|            if(secure || !c->running) {
  595|      0|              co->secure = TRUE;
  596|      0|            }
  597|      0|            else {
  598|      0|              badcookie = TRUE;
  599|      0|              break;
  600|      0|            }
  601|      0|          }
  602|    925|          else if(strcasecompare("httponly", name))
  603|      0|            co->httponly = TRUE;
  604|    925|          else if(sep)
  605|       |            /* there was a '=' so we're not done parsing this field */
  606|    150|            done = FALSE;
  607|    925|        }
  608|  14.5k|        if(done)
  609|  7.26k|          ;
  610|  7.29k|        else if(strcasecompare("path", name)) {
  611|  3.91k|          strstore(&co->path, whatptr);
  612|  3.91k|          if(!co->path) {
  613|      0|            badcookie = TRUE; /* out of memory bad */
  614|      0|            break;
  615|      0|          }
  616|  3.91k|          free(co->spath); /* if this is set again */
  617|  3.91k|          co->spath = sanitize_cookie_path(co->path);
  618|  3.91k|          if(!co->spath) {
  619|      0|            badcookie = TRUE; /* out of memory bad */
  620|      0|            break;
  621|      0|          }
  622|  3.91k|        }
  623|  3.38k|        else if(strcasecompare("domain", name)) {
  624|      0|          bool is_ip;
  625|       |
  626|       |          /*
  627|       |           * Now, we make sure that our host is within the given domain, or
  628|       |           * the given domain is not valid and thus cannot be set.
  629|       |           */
  630|       |
  631|      0|          if('.' == whatptr[0])
  632|      0|            whatptr++; /* ignore preceding dot */
  633|       |
  634|      0|#ifndef USE_LIBPSL
  635|       |          /*
  636|       |           * Without PSL we don't know when the incoming cookie is set on a
  637|       |           * TLD or otherwise "protected" suffix. To reduce risk, we require a
  638|       |           * dot OR the exact host name being "localhost".
  639|       |           */
  640|      0|          if(bad_domain(whatptr))
  641|      0|            domain = ":";
  642|      0|#endif
  643|       |
  644|      0|          is_ip = Curl_host_is_ipnum(domain ? domain : whatptr);
  645|       |
  646|      0|          if(!domain
  647|      0|             || (is_ip && !strcmp(whatptr, domain))
  648|      0|             || (!is_ip && tailmatch(whatptr, domain))) {
  649|      0|            strstore(&co->domain, whatptr);
  650|      0|            if(!co->domain) {
  651|      0|              badcookie = TRUE;
  652|      0|              break;
  653|      0|            }
  654|      0|            if(!is_ip)
  655|      0|              co->tailmatch = TRUE; /* we always do that if the domain name was
  656|       |                                       given */
  657|      0|          }
  658|      0|          else {
  659|       |            /*
  660|       |             * We did not get a tailmatch and then the attempted set domain is
  661|       |             * not a domain to which the current host belongs. Mark as bad.
  662|       |             */
  663|      0|            badcookie = TRUE;
  664|      0|            infof(data, "skipped cookie with bad tailmatch domain: %s",
  665|      0|                  whatptr);
  666|      0|          }
  667|      0|        }
  668|  3.38k|        else if(strcasecompare("version", name)) {
  669|      0|          strstore(&co->version, whatptr);
  670|      0|          if(!co->version) {
  671|      0|            badcookie = TRUE;
  672|      0|            break;
  673|      0|          }
  674|      0|        }
  675|  3.38k|        else if(strcasecompare("max-age", name)) {
  676|       |          /*
  677|       |           * Defined in RFC2109:
  678|       |           *
  679|       |           * Optional.  The Max-Age attribute defines the lifetime of the
  680|       |           * cookie, in seconds.  The delta-seconds value is a decimal non-
  681|       |           * negative integer.  After delta-seconds seconds elapse, the
  682|       |           * client should discard the cookie.  A value of zero means the
  683|       |           * cookie should be discarded immediately.
  684|       |           */
  685|      0|          strstore(&co->maxage, whatptr);
  686|      0|          if(!co->maxage) {
  687|      0|            badcookie = TRUE;
  688|      0|            break;
  689|      0|          }
  690|      0|        }
  691|  3.38k|        else if(strcasecompare("expires", name)) {
  692|  2.97k|          strstore(&co->expirestr, whatptr);
  693|  2.97k|          if(!co->expirestr) {
  694|      0|            badcookie = TRUE;
  695|      0|            break;
  696|      0|          }
  697|  2.97k|        }
  698|       |
  699|       |        /*
  700|       |         * Else, this is the second (or more) name we don't know about!
  701|       |         */
  702|  14.5k|      }
  703|  1.16k|      else {
  704|       |        /* this is an "illegal" <what>=<this> pair */
  705|  1.16k|      }
  706|       |
  707|  15.7k|      if(!semiptr || !*semiptr) {
  708|       |        /* we already know there are no more cookies */
  709|  6.44k|        semiptr = NULL;
  710|  6.44k|        continue;
  711|  6.44k|      }
  712|       |
  713|  9.28k|      ptr = semiptr + 1;
  714|  16.8k|      while(*ptr && ISBLANK(*ptr))
  715|  7.52k|        ptr++;
  716|  9.28k|      semiptr = strchr(ptr, ';'); /* now, find the next semicolon */
  717|       |
  718|  9.28k|      if(!semiptr && *ptr)
  719|       |        /*
  720|       |         * There are no more semicolons, but there's a final name=value pair
  721|       |         * coming up
  722|       |         */
  723|  5.73k|        semiptr = strchr(ptr, '\0');
  724|  15.7k|    } while(semiptr);
  725|       |
  726|  7.82k|    if(co->maxage) {
  727|      0|      CURLofft offt;
  728|      0|      offt = curlx_strtoofft((*co->maxage == '\"')?
  729|      0|                             &co->maxage[1]:&co->maxage[0], NULL, 10,
  730|      0|                             &co->expires);
  731|      0|      if(offt == CURL_OFFT_FLOW)
  732|       |        /* overflow, used max value */
  733|      0|        co->expires = CURL_OFF_T_MAX;
  734|      0|      else if(!offt) {
  735|      0|        if(!co->expires)
  736|       |          /* already expired */
  737|      0|          co->expires = 1;
  738|      0|        else if(CURL_OFF_T_MAX - now < co->expires)
  739|       |          /* would overflow */
  740|      0|          co->expires = CURL_OFF_T_MAX;
  741|      0|        else
  742|      0|          co->expires += now;
  743|      0|      }
  744|      0|    }
  745|  7.82k|    else if(co->expirestr) {
  746|       |      /*
  747|       |       * Note that if the date couldn't get parsed for whatever reason, the
  748|       |       * cookie will be treated as a session cookie
  749|       |       */
  750|  2.92k|      co->expires = Curl_getdate_capped(co->expirestr);
  751|       |
  752|       |      /*
  753|       |       * Session cookies have expires set to 0 so if we get that back from the
  754|       |       * date parser let's add a second to make it a non-session cookie
  755|       |       */
  756|  2.92k|      if(co->expires == 0)
  757|      0|        co->expires = 1;
  758|  2.92k|      else if(co->expires < 0)
  759|  2.04k|        co->expires = 0;
  760|  2.92k|    }
  761|       |
  762|  7.82k|    if(!badcookie && !co->domain) {
  763|  6.51k|      if(domain) {
  764|       |        /* no domain was given in the header line, set the default */
  765|  6.51k|        co->domain = strdup(domain);
  766|  6.51k|        if(!co->domain)
  767|      0|          badcookie = TRUE;
  768|  6.51k|      }
  769|  6.51k|    }
  770|       |
  771|  7.82k|    if(!badcookie && !co->path && path) {
  772|       |      /*
  773|       |       * No path was given in the header line, set the default.  Note that the
  774|       |       * passed-in path to this function MAY have a '?' and following part that
  775|       |       * MUST NOT be stored as part of the path.
  776|       |       */
  777|  2.65k|      char *queryp = strchr(path, '?');
  778|       |
  779|       |      /*
  780|       |       * queryp is where the interesting part of the path ends, so now we
  781|       |       * want to the find the last
  782|       |       */
  783|  2.65k|      char *endslash;
  784|  2.65k|      if(!queryp)
  785|  2.65k|        endslash = strrchr(path, '/');
  786|      0|      else
  787|      0|        endslash = memrchr(path, '/', (queryp - path));
  788|  2.65k|      if(endslash) {
  789|  2.65k|        size_t pathlen = (endslash-path + 1); /* include end slash */
  790|  2.65k|        co->path = malloc(pathlen + 1); /* one extra for the zero byte */
  791|  2.65k|        if(co->path) {
  792|  2.65k|          memcpy(co->path, path, pathlen);
  793|  2.65k|          co->path[pathlen] = 0; /* null-terminate */
  794|  2.65k|          co->spath = sanitize_cookie_path(co->path);
  795|  2.65k|          if(!co->spath)
  796|      0|            badcookie = TRUE; /* out of memory bad */
  797|  2.65k|        }
  798|      0|        else
  799|      0|          badcookie = TRUE;
  800|  2.65k|      }
  801|  2.65k|    }
  802|       |
  803|       |    /*
  804|       |     * If we didn't get a cookie name, or a bad one, the this is an illegal
  805|       |     * line so bail out.
  806|       |     */
  807|  7.82k|    if(badcookie || !co->name) {
  808|  1.33k|      freecookie(co);
  809|  1.33k|      return NULL;
  810|  1.33k|    }
  811|       |
  812|  7.82k|  }
  813|      0|  else {
  814|       |    /*
  815|       |     * This line is NOT a HTTP header style line, we do offer support for
  816|       |     * reading the odd netscape cookies-file format here
  817|       |     */
  818|      0|    char *ptr;
  819|      0|    char *firstptr;
  820|      0|    char *tok_buf = NULL;
  821|      0|    int fields;
  822|       |
  823|       |    /*
  824|       |     * IE introduced HTTP-only cookies to prevent XSS attacks. Cookies marked
  825|       |     * with httpOnly after the domain name are not accessible from javascripts,
  826|       |     * but since curl does not operate at javascript level, we include them
  827|       |     * anyway. In Firefox's cookie files, these lines are preceded with
  828|       |     * #HttpOnly_ and then everything is as usual, so we skip 10 characters of
  829|       |     * the line..
  830|       |     */
  831|      0|    if(strncmp(lineptr, "#HttpOnly_", 10) == 0) {
  832|      0|      lineptr += 10;
  833|      0|      co->httponly = TRUE;
  834|      0|    }
  835|       |
  836|      0|    if(lineptr[0]=='#') {
  837|       |      /* don't even try the comments */
  838|      0|      free(co);
  839|      0|      return NULL;
  840|      0|    }
  841|       |    /* strip off the possible end-of-line characters */
  842|      0|    ptr = strchr(lineptr, '\r');
  843|      0|    if(ptr)
  844|      0|      *ptr = 0; /* clear it */
  845|      0|    ptr = strchr(lineptr, '\n');
  846|      0|    if(ptr)
  847|      0|      *ptr = 0; /* clear it */
  848|       |
  849|      0|    firstptr = strtok_r(lineptr, "\t", &tok_buf); /* tokenize it on the TAB */
  850|       |
  851|       |    /*
  852|       |     * Now loop through the fields and init the struct we already have
  853|       |     * allocated
  854|       |     */
  855|      0|    for(ptr = firstptr, fields = 0; ptr && !badcookie;
  856|      0|        ptr = strtok_r(NULL, "\t", &tok_buf), fields++) {
  857|      0|      switch(fields) {
  858|      0|      case 0:
  859|      0|        if(ptr[0]=='.') /* skip preceding dots */
  860|      0|          ptr++;
  861|      0|        co->domain = strdup(ptr);
  862|      0|        if(!co->domain)
  863|      0|          badcookie = TRUE;
  864|      0|        break;
  865|      0|      case 1:
  866|       |        /*
  867|       |         * flag: A TRUE/FALSE value indicating if all machines within a given
  868|       |         * domain can access the variable. Set TRUE when the cookie says
  869|       |         * .domain.com and to false when the domain is complete www.domain.com
  870|       |         */
  871|      0|        co->tailmatch = strcasecompare(ptr, "TRUE")?TRUE:FALSE;
  872|      0|        break;
  873|      0|      case 2:
  874|       |        /* The file format allows the path field to remain not filled in */
  875|      0|        if(strcmp("TRUE", ptr) && strcmp("FALSE", ptr)) {
  876|       |          /* only if the path doesn't look like a boolean option! */
  877|      0|          co->path = strdup(ptr);
  878|      0|          if(!co->path)
  879|      0|            badcookie = TRUE;
  880|      0|          else {
  881|      0|            co->spath = sanitize_cookie_path(co->path);
  882|      0|            if(!co->spath) {
  883|      0|              badcookie = TRUE; /* out of memory bad */
  884|      0|            }
  885|      0|          }
  886|      0|          break;
  887|      0|        }
  888|       |        /* this doesn't look like a path, make one up! */
  889|      0|        co->path = strdup("/");
  890|      0|        if(!co->path)
  891|      0|          badcookie = TRUE;
  892|      0|        co->spath = strdup("/");
  893|      0|        if(!co->spath)
  894|      0|          badcookie = TRUE;
  895|      0|        fields++; /* add a field and fall down to secure */
  896|       |        /* FALLTHROUGH */
  897|      0|      case 3:
  898|      0|        co->secure = FALSE;
  899|      0|        if(strcasecompare(ptr, "TRUE")) {
  900|      0|          if(secure || c->running)
  901|      0|            co->secure = TRUE;
  902|      0|          else
  903|      0|            badcookie = TRUE;
  904|      0|        }
  905|      0|        break;
  906|      0|      case 4:
  907|      0|        if(curlx_strtoofft(ptr, NULL, 10, &co->expires))
  908|      0|          badcookie = TRUE;
  909|      0|        break;
  910|      0|      case 5:
  911|      0|        co->name = strdup(ptr);
  912|      0|        if(!co->name)
  913|      0|          badcookie = TRUE;
  914|      0|        else {
  915|       |          /* For Netscape file format cookies we check prefix on the name */
  916|      0|          if(strncasecompare("__Secure-", co->name, 9))
  917|      0|            co->prefix |= COOKIE_PREFIX__SECURE;
  918|      0|          else if(strncasecompare("__Host-", co->name, 7))
  919|      0|            co->prefix |= COOKIE_PREFIX__HOST;
  920|      0|        }
  921|      0|        break;
  922|      0|      case 6:
  923|      0|        co->value = strdup(ptr);
  924|      0|        if(!co->value)
  925|      0|          badcookie = TRUE;
  926|      0|        break;
  927|      0|      }
  928|      0|    }
  929|      0|    if(6 == fields) {
  930|       |      /* we got a cookie with blank contents, fix it */
  931|      0|      co->value = strdup("");
  932|      0|      if(!co->value)
  933|      0|        badcookie = TRUE;
  934|      0|      else
  935|      0|        fields++;
  936|      0|    }
  937|       |
  938|      0|    if(!badcookie && (7 != fields))
  939|       |      /* we did not find the sufficient number of fields */
  940|      0|      badcookie = TRUE;
  941|       |
  942|      0|    if(badcookie) {
  943|      0|      freecookie(co);
  944|      0|      return NULL;
  945|      0|    }
  946|       |
  947|      0|  }
  948|       |
  949|  6.49k|  if(co->prefix & COOKIE_PREFIX__SECURE) {
  950|       |    /* The __Secure- prefix only requires that the cookie be set secure */
  951|      0|    if(!co->secure) {
  952|      0|      freecookie(co);
  953|      0|      return NULL;
  954|      0|    }
  955|      0|  }
  956|  6.49k|  if(co->prefix & COOKIE_PREFIX__HOST) {
  957|       |    /*
  958|       |     * The __Host- prefix requires the cookie to be secure, have a "/" path
  959|       |     * and not have a domain set.
  960|       |     */
  961|      0|    if(co->secure && co->path && strcmp(co->path, "/") == 0 && !co->tailmatch)
  962|      0|      ;
  963|      0|    else {
  964|      0|      freecookie(co);
  965|      0|      return NULL;
  966|      0|    }
  967|      0|  }
  968|       |
  969|  6.49k|  if(!c->running &&    /* read from a file */
  970|  6.49k|     c->newsession &&  /* clean session cookies */
  971|  6.49k|     !co->expires) {   /* this is a session cookie since it doesn't expire! */
  972|      0|    freecookie(co);
  973|      0|    return NULL;
  974|      0|  }
  975|       |
  976|  6.49k|  co->livecookie = c->running;
  977|  6.49k|  co->creationtime = ++c->lastct;
  978|       |
  979|       |  /*
  980|       |   * Now we have parsed the incoming line, we must now check if this supersedes
  981|       |   * an already existing cookie, which it may if the previous have the same
  982|       |   * domain and path as this.
  983|       |   */
  984|       |
  985|       |  /* at first, remove expired cookies */
  986|  6.49k|  if(!noexpire)
  987|  6.49k|    remove_expired(c);
  988|       |
  989|       |#ifdef USE_LIBPSL
  990|       |  /*
  991|       |   * Check if the domain is a Public Suffix and if yes, ignore the cookie. We
  992|       |   * must also check that the data handle isn't NULL since the psl code will
  993|       |   * dereference it.
  994|       |   */
  995|       |  if(data && (domain && co->domain && !Curl_host_is_ipnum(co->domain))) {
  996|       |    const psl_ctx_t *psl = Curl_psl_use(data);
  997|       |    int acceptable;
  998|       |
  999|       |    if(psl) {
 1000|       |      acceptable = psl_is_cookie_domain_acceptable(psl, domain, co->domain);
 1001|       |      Curl_psl_release(data);
 1002|       |    }
 1003|       |    else
 1004|       |      acceptable = !bad_domain(domain);
 1005|       |
 1006|       |    if(!acceptable) {
 1007|       |      infof(data, "cookie '%s' dropped, domain '%s' must not "
 1008|       |                  "set cookies for '%s'", co->name, domain, co->domain);
 1009|       |      freecookie(co);
 1010|       |      return NULL;
 1011|       |    }
 1012|       |  }
 1013|       |#endif
 1014|       |
 1015|  6.49k|  myhash = cookiehash(co->domain);
 1016|  6.49k|  clist = c->cookies[myhash];
 1017|  6.49k|  replace_old = FALSE;
 1018|  24.8k|  while(clist) {
 1019|  22.9k|    if(strcasecompare(clist->name, co->name)) {
 1020|       |      /* the names are identical */
 1021|       |
 1022|  6.74k|      if(clist->domain && co->domain) {
 1023|  6.74k|        if(strcasecompare(clist->domain, co->domain) &&
 1024|  6.74k|          (clist->tailmatch == co->tailmatch))
 1025|       |          /* The domains are identical */
 1026|  6.74k|          replace_old = TRUE;
 1027|  6.74k|      }
 1028|      0|      else if(!clist->domain && !co->domain)
 1029|      0|        replace_old = TRUE;
 1030|       |
 1031|  6.74k|      if(replace_old) {
 1032|       |        /* the domains were identical */
 1033|       |
 1034|  6.74k|        if(clist->spath && co->spath) {
 1035|  6.74k|          if(clist->secure && !co->secure && !secure) {
 1036|      0|            size_t cllen;
 1037|      0|            const char *sep;
 1038|       |
 1039|       |            /*
 1040|       |             * A non-secure cookie may not overlay an existing secure cookie.
 1041|       |             * For an existing cookie "a" with path "/login", refuse a new
 1042|       |             * cookie "a" with for example path "/login/en", while the path
 1043|       |             * "/loginhelper" is ok.
 1044|       |             */
 1045|       |
 1046|      0|            sep = strchr(clist->spath + 1, '/');
 1047|       |
 1048|      0|            if(sep)
 1049|      0|              cllen = sep - clist->spath;
 1050|      0|            else
 1051|      0|              cllen = strlen(clist->spath);
 1052|       |
 1053|      0|            if(strncasecompare(clist->spath, co->spath, cllen)) {
 1054|      0|              freecookie(co);
 1055|      0|              return NULL;
 1056|      0|            }
 1057|      0|          }
 1058|  6.74k|          else if(strcasecompare(clist->spath, co->spath))
 1059|  4.62k|            replace_old = TRUE;
 1060|  2.12k|          else
 1061|  2.12k|            replace_old = FALSE;
 1062|  6.74k|        }
 1063|      0|        else if(!clist->spath && !co->spath)
 1064|      0|          replace_old = TRUE;
 1065|      0|        else
 1066|      0|          replace_old = FALSE;
 1067|       |
 1068|  6.74k|      }
 1069|       |
 1070|  6.74k|      if(replace_old && !co->livecookie && clist->livecookie) {
 1071|       |        /*
 1072|       |         * Both cookies matched fine, except that the already present cookie is
 1073|       |         * "live", which means it was set from a header, while the new one was
 1074|       |         * read from a file and thus isn't "live". "live" cookies are preferred
 1075|       |         * so the new cookie is freed.
 1076|       |         */
 1077|      0|        freecookie(co);
 1078|      0|        return NULL;
 1079|      0|      }
 1080|       |
 1081|  6.74k|      if(replace_old) {
 1082|  4.62k|        co->next = clist->next; /* get the next-pointer first */
 1083|       |
 1084|       |        /* when replacing, creationtime is kept from old */
 1085|  4.62k|        co->creationtime = clist->creationtime;
 1086|       |
 1087|       |        /* then free all the old pointers */
 1088|  4.62k|        free(clist->name);
 1089|  4.62k|        free(clist->value);
 1090|  4.62k|        free(clist->domain);
 1091|  4.62k|        free(clist->path);
 1092|  4.62k|        free(clist->spath);
 1093|  4.62k|        free(clist->expirestr);
 1094|  4.62k|        free(clist->version);
 1095|  4.62k|        free(clist->maxage);
 1096|       |
 1097|  4.62k|        *clist = *co;  /* then store all the new data */
 1098|       |
 1099|  4.62k|        free(co);   /* free the newly allocated memory */
 1100|  4.62k|        co = clist; /* point to the previous struct instead */
 1101|       |
 1102|       |        /*
 1103|       |         * We have replaced a cookie, now skip the rest of the list but make
 1104|       |         * sure the 'lastc' pointer is properly set
 1105|       |         */
 1106|  19.6k|        do {
 1107|  19.6k|          lastc = clist;
 1108|  19.6k|          clist = clist->next;
 1109|  19.6k|        } while(clist);
 1110|  4.62k|        break;
 1111|  4.62k|      }
 1112|  6.74k|    }
 1113|  18.3k|    lastc = clist;
 1114|  18.3k|    clist = clist->next;
 1115|  18.3k|  }
 1116|       |
 1117|  6.49k|  if(c->running)
 1118|       |    /* Only show this when NOT reading the cookies from a file */
 1119|  6.49k|    infof(data, "%s cookie %s=\"%s\" for domain %s, path %s, "
 1120|  6.49k|          "expire %" CURL_FORMAT_CURL_OFF_T,
 1121|  6.49k|          replace_old?"Replaced":"Added", co->name, co->value,
 1122|  6.49k|          co->domain, co->path, co->expires);
 1123|       |
 1124|  6.49k|  if(!replace_old) {
 1125|       |    /* then make the last item point on this new one */
 1126|  1.86k|    if(lastc)
 1127|  1.54k|      lastc->next = co;
 1128|    324|    else
 1129|    324|      c->cookies[myhash] = co;
 1130|  1.86k|    c->numcookies++; /* one more cookie in the jar */
 1131|  1.86k|  }
 1132|       |
 1133|       |  /*
 1134|       |   * Now that we've added a new cookie to the jar, update the expiration
 1135|       |   * tracker in case it is the next one to expire.
 1136|       |   */
 1137|  6.49k|  if(co->expires && (co->expires < c->next_expiration))
 1138|    337|    c->next_expiration = co->expires;
 1139|       |
 1140|  6.49k|  return co;
 1141|  6.49k|}
Curl_cookie_init:
 1161|  2.97k|{
 1162|  2.97k|  struct CookieInfo *c;
 1163|  2.97k|  FILE *fp = NULL;
 1164|  2.97k|  bool fromfile = TRUE;
 1165|  2.97k|  char *line = NULL;
 1166|       |
 1167|  2.97k|  if(NULL == inc) {
 1168|       |    /* we didn't get a struct, create one */
 1169|  2.97k|    c = calloc(1, sizeof(struct CookieInfo));
 1170|  2.97k|    if(!c)
 1171|      0|      return NULL; /* failed to get memory */
 1172|  2.97k|    c->filename = strdup(file?file:"none"); /* copy the name just in case */
 1173|  2.97k|    if(!c->filename)
 1174|      0|      goto fail; /* failed to get memory */
 1175|       |    /*
 1176|       |     * Initialize the next_expiration time to signal that we don't have enough
 1177|       |     * information yet.
 1178|       |     */
 1179|  2.97k|    c->next_expiration = CURL_OFF_T_MAX;
 1180|  2.97k|  }
 1181|      0|  else {
 1182|       |    /* we got an already existing one, use that */
 1183|      0|    c = inc;
 1184|      0|  }
 1185|  2.97k|  c->running = FALSE; /* this is not running, this is init */
 1186|       |
 1187|  2.97k|  if(file && !strcmp(file, "-")) {
 1188|      0|    fp = stdin;
 1189|      0|    fromfile = FALSE;
 1190|      0|  }
 1191|  2.97k|  else if(file && !*file) {
 1192|       |    /* points to a "" string */
 1193|      0|    fp = NULL;
 1194|      0|  }
 1195|  2.97k|  else
 1196|  2.97k|    fp = file?fopen(file, FOPEN_READTEXT):NULL;
 1197|       |
 1198|  2.97k|  c->newsession = newsession; /* new session? */
 1199|       |
 1200|  2.97k|  if(fp) {
 1201|      0|    char *lineptr;
 1202|      0|    bool headerline;
 1203|       |
 1204|      0|    line = malloc(MAX_COOKIE_LINE);
 1205|      0|    if(!line)
 1206|      0|      goto fail;
 1207|      0|    while(Curl_get_line(line, MAX_COOKIE_LINE, fp)) {
 1208|      0|      if(checkprefix("Set-Cookie:", line)) {
 1209|       |        /* This is a cookie line, get it! */
 1210|      0|        lineptr = &line[11];
 1211|      0|        headerline = TRUE;
 1212|      0|      }
 1213|      0|      else {
 1214|      0|        lineptr = line;
 1215|      0|        headerline = FALSE;
 1216|      0|      }
 1217|      0|      while(*lineptr && ISBLANK(*lineptr))
 1218|      0|        lineptr++;
 1219|       |
 1220|      0|      Curl_cookie_add(data, c, headerline, TRUE, lineptr, NULL, NULL, TRUE);
 1221|      0|    }
 1222|      0|    free(line); /* free the line buffer */
 1223|       |
 1224|       |    /*
 1225|       |     * Remove expired cookies from the hash. We must make sure to run this
 1226|       |     * after reading the file, and not on every cookie.
 1227|       |     */
 1228|      0|    remove_expired(c);
 1229|       |
 1230|      0|    if(fromfile)
 1231|      0|      fclose(fp);
 1232|      0|  }
 1233|       |
 1234|  2.97k|  c->running = TRUE;          /* now, we're running */
 1235|  2.97k|  if(data)
 1236|  2.97k|    data->state.cookie_engine = TRUE;
 1237|       |
 1238|  2.97k|  return c;
 1239|       |
 1240|      0|fail:
 1241|      0|  free(line);
 1242|       |  /*
 1243|       |   * Only clean up if we allocated it here, as the original could still be in
 1244|       |   * use by a share handle.
 1245|       |   */
 1246|      0|  if(!inc)
 1247|      0|    Curl_cookie_cleanup(c);
 1248|      0|  if(fromfile && fp)
 1249|      0|    fclose(fp);
 1250|      0|  return NULL; /* out of memory */
 1251|  2.97k|}
Curl_cookie_getlist:
 1352|  1.11k|{
 1353|  1.11k|  struct Cookie *newco;
 1354|  1.11k|  struct Cookie *co;
 1355|  1.11k|  struct Cookie *mainco = NULL;
 1356|  1.11k|  size_t matches = 0;
 1357|  1.11k|  bool is_ip;
 1358|  1.11k|  const size_t myhash = cookiehash(host);
 1359|       |
 1360|  1.11k|  if(!c || !c->cookies[myhash])
 1361|  1.09k|    return NULL; /* no cookie struct or no cookies in the struct */
 1362|       |
 1363|       |  /* at first, remove expired cookies */
 1364|     26|  remove_expired(c);
 1365|       |
 1366|       |  /* check if host is an IP(v4|v6) address */
 1367|     26|  is_ip = Curl_host_is_ipnum(host);
 1368|       |
 1369|     26|  co = c->cookies[myhash];
 1370|       |
 1371|     82|  while(co) {
 1372|       |    /* if the cookie requires we're secure we must only continue if we are! */
 1373|     56|    if(co->secure?secure:TRUE) {
 1374|       |
 1375|       |      /* now check if the domain is correct */
 1376|     56|      if(!co->domain ||
 1377|     56|         (co->tailmatch && !is_ip && tailmatch(co->domain, host)) ||
 1378|     56|         ((!co->tailmatch || is_ip) && strcasecompare(host, co->domain)) ) {
 1379|       |        /*
 1380|       |         * the right part of the host matches the domain stuff in the
 1381|       |         * cookie data
 1382|       |         */
 1383|       |
 1384|       |        /*
 1385|       |         * now check the left part of the path with the cookies path
 1386|       |         * requirement
 1387|       |         */
 1388|     56|        if(!co->spath || pathmatch(co->spath, path) ) {
 1389|       |
 1390|       |          /*
 1391|       |           * and now, we know this is a match and we should create an
 1392|       |           * entry for the return-linked-list
 1393|       |           */
 1394|       |
 1395|     37|          newco = dup_cookie(co);
 1396|     37|          if(newco) {
 1397|       |            /* then modify our next */
 1398|     37|            newco->next = mainco;
 1399|       |
 1400|       |            /* point the main to us */
 1401|     37|            mainco = newco;
 1402|       |
 1403|     37|            matches++;
 1404|     37|          }
 1405|      0|          else
 1406|      0|            goto fail;
 1407|     37|        }
 1408|     56|      }
 1409|     56|    }
 1410|     56|    co = co->next;
 1411|     56|  }
 1412|       |
 1413|     26|  if(matches) {
 1414|       |    /*
 1415|       |     * Now we need to make sure that if there is a name appearing more than
 1416|       |     * once, the longest specified path version comes first. To make this
 1417|       |     * the swiftest way, we just sort them all based on path length.
 1418|       |     */
 1419|     21|    struct Cookie **array;
 1420|     21|    size_t i;
 1421|       |
 1422|       |    /* alloc an array and store all cookie pointers */
 1423|     21|    array = malloc(sizeof(struct Cookie *) * matches);
 1424|     21|    if(!array)
 1425|      0|      goto fail;
 1426|       |
 1427|     21|    co = mainco;
 1428|       |
 1429|     58|    for(i = 0; co; co = co->next)
 1430|     37|      array[i++] = co;
 1431|       |
 1432|       |    /* now sort the cookie pointers in path length order */
 1433|     21|    qsort(array, matches, sizeof(struct Cookie *), cookie_sort);
 1434|       |
 1435|       |    /* remake the linked list order according to the new order */
 1436|       |
 1437|     21|    mainco = array[0]; /* start here */
 1438|     37|    for(i = 0; i<matches-1; i++)
 1439|     16|      array[i]->next = array[i + 1];
 1440|     21|    array[matches-1]->next = NULL; /* terminate the list */
 1441|       |
 1442|     21|    free(array); /* remove the temporary data again */
 1443|     21|  }
 1444|       |
 1445|     26|  return mainco; /* return the new list */
 1446|       |
 1447|      0|fail:
 1448|       |  /* failure, clear up the allocated chain and return NULL */
 1449|      0|  Curl_cookie_freelist(mainco);
 1450|      0|  return NULL;
 1451|     26|}
Curl_cookie_freelist:
 1476|   760k|{
 1477|   760k|  struct Cookie *next;
 1478|   762k|  while(co) {
 1479|  1.78k|    next = co->next;
 1480|  1.78k|    freecookie(co);
 1481|  1.78k|    co = next;
 1482|  1.78k|  }
 1483|   760k|}
Curl_cookie_cleanup:
 1532|  6.05k|{
 1533|  6.05k|  if(c) {
 1534|  2.97k|    unsigned int i;
 1535|  2.97k|    free(c->filename);
 1536|   763k|    for(i = 0; i < COOKIE_HASH_SIZE; i++)
 1537|   760k|      Curl_cookie_freelist(c->cookies[i]);
 1538|  2.97k|    free(c); /* free the base struct as well */
 1539|  2.97k|  }
 1540|  6.05k|}
Curl_flush_cookies:
 1730|  6.05k|{
 1731|  6.05k|  CURLcode res;
 1732|       |
 1733|  6.05k|  if(data->set.str[STRING_COOKIEJAR]) {
 1734|  2.97k|    if(data->state.cookielist) {
 1735|       |      /* If there is a list of cookie files to read, do it first so that
 1736|       |         we have all the told files read before we write the new jar.
 1737|       |         Curl_cookie_loadfiles() LOCKS and UNLOCKS the share itself! */
 1738|      0|      Curl_cookie_loadfiles(data);
 1739|      0|    }
 1740|       |
 1741|  2.97k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1742|       |
 1743|       |    /* if we have a destination file for all the cookies to get dumped to */
 1744|  2.97k|    res = cookie_output(data, data->cookies, data->set.str[STRING_COOKIEJAR]);
 1745|  2.97k|    if(res)
 1746|      0|      infof(data, "WARNING: failed to save cookies in %s: %s",
 1747|      0|            data->set.str[STRING_COOKIEJAR], curl_easy_strerror(res));
 1748|  2.97k|  }
 1749|  3.08k|  else {
 1750|  3.08k|    if(cleanup && data->state.cookielist) {
 1751|       |      /* since nothing is written, we can just free the list of cookie file
 1752|       |         names */
 1753|      0|      curl_slist_free_all(data->state.cookielist); /* clean up list */
 1754|      0|      data->state.cookielist = NULL;
 1755|      0|    }
 1756|  3.08k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 1757|  3.08k|  }
 1758|       |
 1759|  6.05k|  if(cleanup && (!data->share || (data->cookies != data->share->cookies))) {
 1760|  6.05k|    Curl_cookie_cleanup(data->cookies);
 1761|  6.05k|    data->cookies = NULL;
 1762|  6.05k|  }
 1763|  6.05k|  Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 1764|  6.05k|}
cookie.c:freecookie:
  110|  3.23k|{
  111|  3.23k|  free(co->expirestr);
  112|  3.23k|  free(co->domain);
  113|  3.23k|  free(co->path);
  114|  3.23k|  free(co->spath);
  115|  3.23k|  free(co->name);
  116|  3.23k|  free(co->value);
  117|  3.23k|  free(co->maxage);
  118|  3.23k|  free(co->version);
  119|  3.23k|  free(co);
  120|  3.23k|}
cookie.c:strstore:
  364|  7.11k|{
  365|  7.11k|  free(*str);
  366|  7.11k|  *str = strdup(newstr);
  367|  7.11k|}
cookie.c:sanitize_cookie_path:
  291|  6.56k|{
  292|  6.56k|  size_t len;
  293|  6.56k|  char *new_path = strdup(cookie_path);
  294|  6.56k|  if(!new_path)
  295|      0|    return NULL;
  296|       |
  297|       |  /* some stupid site sends path attribute with '"'. */
  298|  6.56k|  len = strlen(new_path);
  299|  6.56k|  if(new_path[0] == '\"') {
  300|     53|    memmove((void *)new_path, (const void *)(new_path + 1), len);
  301|     53|    len--;
  302|     53|  }
  303|  6.56k|  if(len && (new_path[len - 1] == '\"')) {
  304|     34|    new_path[len - 1] = 0x0;
  305|     34|    len--;
  306|     34|  }
  307|       |
  308|       |  /* RFC6265 5.2.4 The Path Attribute */
  309|  6.56k|  if(new_path[0] != '/') {
  310|       |    /* Let cookie-path be the default-path. */
  311|    223|    strstore(&new_path, "/");
  312|    223|    return new_path;
  313|    223|  }
  314|       |
  315|       |  /* convert /hoge/ to /hoge */
  316|  6.33k|  if(len && new_path[len - 1] == '/') {
  317|  6.11k|    new_path[len - 1] = 0x0;
  318|  6.11k|  }
  319|       |
  320|  6.33k|  return new_path;
  321|  6.56k|}
cookie.c:remove_expired:
  379|  9.49k|{
  380|  9.49k|  struct Cookie *co, *nx;
  381|  9.49k|  curl_off_t now = (curl_off_t)time(NULL);
  382|  9.49k|  unsigned int i;
  383|       |
  384|       |  /*
  385|       |   * If the earliest expiration timestamp in the jar is in the future we can
  386|       |   * skip scanning the whole jar and instead exit early as there won't be any
  387|       |   * cookies to evict.  If we need to evict however, reset the next_expiration
  388|       |   * counter in order to track the next one. In case the recorded first
  389|       |   * expiration is the max offset, then perform the safe fallback of checking
  390|       |   * all cookies.
  391|       |   */
  392|  9.49k|  if(now < cookies->next_expiration &&
  393|  9.49k|      cookies->next_expiration != CURL_OFF_T_MAX)
  394|  3.71k|    return;
  395|  5.77k|  else
  396|  5.77k|    cookies->next_expiration = CURL_OFF_T_MAX;
  397|       |
  398|  1.48M|  for(i = 0; i < COOKIE_HASH_SIZE; i++) {
  399|  1.47M|    struct Cookie *pv = NULL;
  400|  1.47M|    co = cookies->cookies[i];
  401|  1.49M|    while(co) {
  402|  14.6k|      nx = co->next;
  403|  14.6k|      if(co->expires && co->expires < now) {
  404|    124|        if(!pv) {
  405|     38|          cookies->cookies[i] = co->next;
  406|     38|        }
  407|     86|        else {
  408|     86|          pv->next = co->next;
  409|     86|        }
  410|    124|        cookies->numcookies--;
  411|    124|        freecookie(co);
  412|    124|      }
  413|  14.5k|      else {
  414|       |        /*
  415|       |         * If this cookie has an expiration timestamp earlier than what we've
  416|       |         * seen so far then record it for the next round of expirations.
  417|       |         */
  418|  14.5k|        if(co->expires && co->expires < cookies->next_expiration)
  419|     53|          cookies->next_expiration = co->expires;
  420|  14.5k|        pv = co;
  421|  14.5k|      }
  422|  14.6k|      co = nx;
  423|  14.6k|    }
  424|  1.47M|  }
  425|  5.77k|}
cookie.c:cookiehash:
  276|  7.61k|{
  277|  7.61k|  const char *top;
  278|  7.61k|  size_t len;
  279|       |
  280|  7.61k|  if(!domain || Curl_host_is_ipnum(domain))
  281|  6.67k|    return 0;
  282|       |
  283|    937|  top = get_top_domain(domain, &len);
  284|    937|  return cookie_hash_domain(top, len);
  285|  7.61k|}
cookie.c:get_top_domain:
  227|    937|{
  228|    937|  size_t len = 0;
  229|    937|  const char *first = NULL, *last;
  230|       |
  231|    937|  if(domain) {
  232|    937|    len = strlen(domain);
  233|    937|    last = memrchr(domain, '.', len);
  234|    937|    if(last) {
  235|    338|      first = memrchr(domain, '.', (last - domain));
  236|    338|      if(first)
  237|    248|        len -= (++first - domain);
  238|    338|    }
  239|    937|  }
  240|       |
  241|    937|  if(outlen)
  242|    937|    *outlen = len;
  243|       |
  244|    937|  return first? first: domain;
  245|    937|}
cookie.c:cookie_hash_domain:
  256|    937|{
  257|    937|  const char *end = domain + len;
  258|    937|  size_t h = 5381;
  259|       |
  260|  5.51k|  while(domain < end) {
  261|  4.57k|    h += h << 5;
  262|  4.57k|    h ^= Curl_raw_toupper(*domain++);
  263|  4.57k|  }
  264|       |
  265|    937|  return (h % COOKIE_HASH_SIZE);
  266|    937|}
cookie.c:pathmatch:
  153|     56|{
  154|     56|  size_t cookie_path_len;
  155|     56|  size_t uri_path_len;
  156|     56|  char *uri_path = NULL;
  157|     56|  char *pos;
  158|     56|  bool ret = FALSE;
  159|       |
  160|       |  /* cookie_path must not have last '/' separator. ex: /sample */
  161|     56|  cookie_path_len = strlen(cookie_path);
  162|     56|  if(1 == cookie_path_len) {
  163|       |    /* cookie_path must be '/' */
  164|     10|    return TRUE;
  165|     10|  }
  166|       |
  167|     46|  uri_path = strdup(request_uri);
  168|     46|  if(!uri_path)
  169|      0|    return FALSE;
  170|     46|  pos = strchr(uri_path, '?');
  171|     46|  if(pos)
  172|      0|    *pos = 0x0;
  173|       |
  174|       |  /* #-fragments are already cut off! */
  175|     46|  if(0 == strlen(uri_path) || uri_path[0] != '/') {
  176|      0|    strstore(&uri_path, "/");
  177|      0|    if(!uri_path)
  178|      0|      return FALSE;
  179|      0|  }
  180|       |
  181|       |  /*
  182|       |   * here, RFC6265 5.1.4 says
  183|       |   *  4. Output the characters of the uri-path from the first character up
  184|       |   *     to, but not including, the right-most %x2F ("/").
  185|       |   *  but URL path /hoge?fuga=xxx means /hoge/index.cgi?fuga=xxx in some site
  186|       |   *  without redirect.
  187|       |   *  Ignore this algorithm because /hoge is uri path for this case
  188|       |   *  (uri path is not /).
  189|       |   */
  190|       |
  191|     46|  uri_path_len = strlen(uri_path);
  192|       |
  193|     46|  if(uri_path_len < cookie_path_len) {
  194|      3|    ret = FALSE;
  195|      3|    goto pathmatched;
  196|      3|  }
  197|       |
  198|       |  /* not using checkprefix() because matching should be case-sensitive */
  199|     43|  if(strncmp(cookie_path, uri_path, cookie_path_len)) {
  200|     16|    ret = FALSE;
  201|     16|    goto pathmatched;
  202|     16|  }
  203|       |
  204|       |  /* The cookie-path and the uri-path are identical. */
  205|     27|  if(cookie_path_len == uri_path_len) {
  206|      1|    ret = TRUE;
  207|      1|    goto pathmatched;
  208|      1|  }
  209|       |
  210|       |  /* here, cookie_path_len < uri_path_len */
  211|     26|  if(uri_path[cookie_path_len] == '/') {
  212|     26|    ret = TRUE;
  213|     26|    goto pathmatched;
  214|     26|  }
  215|       |
  216|      0|  ret = FALSE;
  217|       |
  218|     46|pathmatched:
  219|     46|  free(uri_path);
  220|     46|  return ret;
  221|      0|}
cookie.c:dup_cookie:
 1315|     37|{
 1316|     37|  struct Cookie *d = calloc(sizeof(struct Cookie), 1);
 1317|     37|  if(d) {
 1318|     37|    CLONE(expirestr);
 1319|     37|    CLONE(domain);
 1320|     37|    CLONE(path);
 1321|     37|    CLONE(spath);
 1322|     37|    CLONE(name);
 1323|     37|    CLONE(value);
 1324|     37|    CLONE(maxage);
 1325|     37|    CLONE(version);
 1326|     37|    d->expires = src->expires;
 1327|     37|    d->tailmatch = src->tailmatch;
 1328|     37|    d->secure = src->secure;
 1329|     37|    d->livecookie = src->livecookie;
 1330|     37|    d->httponly = src->httponly;
 1331|     37|    d->creationtime = src->creationtime;
 1332|     37|  }
 1333|     37|  return d;
 1334|       |
 1335|      0|  fail:
 1336|      0|  freecookie(d);
 1337|      0|  return NULL;
 1338|     37|}
cookie.c:cookie_sort:
 1262|     18|{
 1263|     18|  struct Cookie *c1 = *(struct Cookie **)p1;
 1264|     18|  struct Cookie *c2 = *(struct Cookie **)p2;
 1265|     18|  size_t l1, l2;
 1266|       |
 1267|       |  /* 1 - compare cookie path lengths */
 1268|     18|  l1 = c1->path ? strlen(c1->path) : 0;
 1269|     18|  l2 = c2->path ? strlen(c2->path) : 0;
 1270|       |
 1271|     18|  if(l1 != l2)
 1272|      6|    return (l2 > l1) ? 1 : -1 ; /* avoid size_t <=> int conversions */
 1273|       |
 1274|       |  /* 2 - compare cookie domain lengths */
 1275|     12|  l1 = c1->domain ? strlen(c1->domain) : 0;
 1276|     12|  l2 = c2->domain ? strlen(c2->domain) : 0;
 1277|       |
 1278|     12|  if(l1 != l2)
 1279|      0|    return (l2 > l1) ? 1 : -1 ;  /* avoid size_t <=> int conversions */
 1280|       |
 1281|       |  /* 3 - compare cookie name lengths */
 1282|     12|  l1 = c1->name ? strlen(c1->name) : 0;
 1283|     12|  l2 = c2->name ? strlen(c2->name) : 0;
 1284|       |
 1285|     12|  if(l1 != l2)
 1286|      6|    return (l2 > l1) ? 1 : -1;
 1287|       |
 1288|       |  /* 4 - compare cookie creation time */
 1289|      6|  return (c2->creationtime > c1->creationtime) ? 1 : -1;
 1290|     12|}
cookie.c:get_netscape_format:
 1550|  1.74k|{
 1551|  1.74k|  return aprintf(
 1552|  1.74k|    "%s"     /* httponly preamble */
 1553|  1.74k|    "%s%s\t" /* domain */
 1554|  1.74k|    "%s\t"   /* tailmatch */
 1555|  1.74k|    "%s\t"   /* path */
 1556|  1.74k|    "%s\t"   /* secure */
 1557|  1.74k|    "%" CURL_FORMAT_CURL_OFF_T "\t"   /* expires */
 1558|  1.74k|    "%s\t"   /* name */
 1559|  1.74k|    "%s",    /* value */
 1560|  1.74k|    co->httponly?"#HttpOnly_":"",
 1561|       |    /*
 1562|       |     * Make sure all domains are prefixed with a dot if they allow
 1563|       |     * tailmatching. This is Mozilla-style.
 1564|       |     */
 1565|  1.74k|    (co->tailmatch && co->domain && co->domain[0] != '.')? ".":"",
 1566|  1.74k|    co->domain?co->domain:"unknown",
 1567|  1.74k|    co->tailmatch?"TRUE":"FALSE",
 1568|  1.74k|    co->path?co->path:"/",
 1569|  1.74k|    co->secure?"TRUE":"FALSE",
 1570|  1.74k|    co->expires,
 1571|  1.74k|    co->name,
 1572|  1.74k|    co->value?co->value:"");
 1573|  1.74k|}
cookie.c:cookie_output:
 1585|  2.97k|{
 1586|  2.97k|  struct Cookie *co;
 1587|  2.97k|  FILE *out = NULL;
 1588|  2.97k|  bool use_stdout = FALSE;
 1589|  2.97k|  char *tempstore = NULL;
 1590|  2.97k|  CURLcode error = CURLE_OK;
 1591|       |
 1592|  2.97k|  if(!c)
 1593|       |    /* no cookie engine alive */
 1594|      0|    return CURLE_OK;
 1595|       |
 1596|       |  /* at first, remove expired cookies */
 1597|  2.97k|  remove_expired(c);
 1598|       |
 1599|  2.97k|  if(!strcmp("-", filename)) {
 1600|       |    /* use stdout */
 1601|      0|    out = stdout;
 1602|      0|    use_stdout = TRUE;
 1603|      0|  }
 1604|  2.97k|  else {
 1605|  2.97k|    unsigned char randsuffix[9];
 1606|       |
 1607|  2.97k|    if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
 1608|      0|      return 2;
 1609|       |
 1610|  2.97k|    tempstore = aprintf("%s.%s.tmp", filename, randsuffix);
 1611|  2.97k|    if(!tempstore)
 1612|      0|      return CURLE_OUT_OF_MEMORY;
 1613|       |
 1614|  2.97k|    out = fopen(tempstore, FOPEN_WRITETEXT);
 1615|  2.97k|    if(!out) {
 1616|      0|      error = CURLE_WRITE_ERROR;
 1617|      0|      goto error;
 1618|      0|    }
 1619|  2.97k|  }
 1620|       |
 1621|  2.97k|  fputs("# Netscape HTTP Cookie File\n"
 1622|  2.97k|        "# https://curl.se/docs/http-cookies.html\n"
 1623|  2.97k|        "# This file was generated by libcurl! Edit at your own risk.\n\n",
 1624|  2.97k|        out);
 1625|       |
 1626|  2.97k|  if(c->numcookies) {
 1627|    301|    unsigned int i;
 1628|    301|    size_t nvalid = 0;
 1629|    301|    struct Cookie **array;
 1630|       |
 1631|    301|    array = calloc(1, sizeof(struct Cookie *) * c->numcookies);
 1632|    301|    if(!array) {
 1633|      0|      error = CURLE_OUT_OF_MEMORY;
 1634|      0|      goto error;
 1635|      0|    }
 1636|       |
 1637|       |    /* only sort the cookies with a domain property */
 1638|  77.3k|    for(i = 0; i < COOKIE_HASH_SIZE; i++) {
 1639|  78.8k|      for(co = c->cookies[i]; co; co = co->next) {
 1640|  1.74k|        if(!co->domain)
 1641|      0|          continue;
 1642|  1.74k|        array[nvalid++] = co;
 1643|  1.74k|      }
 1644|  77.0k|    }
 1645|       |
 1646|    301|    qsort(array, nvalid, sizeof(struct Cookie *), cookie_sort_ct);
 1647|       |
 1648|  2.04k|    for(i = 0; i < nvalid; i++) {
 1649|  1.74k|      char *format_ptr = get_netscape_format(array[i]);
 1650|  1.74k|      if(!format_ptr) {
 1651|      0|        free(array);
 1652|      0|        error = CURLE_OUT_OF_MEMORY;
 1653|      0|        goto error;
 1654|      0|      }
 1655|  1.74k|      fprintf(out, "%s\n", format_ptr);
 1656|  1.74k|      free(format_ptr);
 1657|  1.74k|    }
 1658|       |
 1659|    301|    free(array);
 1660|    301|  }
 1661|       |
 1662|  2.97k|  if(!use_stdout) {
 1663|  2.97k|    fclose(out);
 1664|  2.97k|    out = NULL;
 1665|  2.97k|    if(Curl_rename(tempstore, filename)) {
 1666|      0|      unlink(tempstore);
 1667|      0|      error = CURLE_WRITE_ERROR;
 1668|      0|      goto error;
 1669|      0|    }
 1670|  2.97k|  }
 1671|       |
 1672|       |  /*
 1673|       |   * If we reach here we have successfully written a cookie file so theree is
 1674|       |   * no need to inspect the error, any error case should have jumped into the
 1675|       |   * error block below.
 1676|       |   */
 1677|  2.97k|  free(tempstore);
 1678|  2.97k|  return CURLE_OK;
 1679|       |
 1680|      0|error:
 1681|      0|  if(out && !use_stdout)
 1682|      0|    fclose(out);
 1683|      0|  free(tempstore);
 1684|      0|  return error;
 1685|  2.97k|}
cookie.c:cookie_sort_ct:
 1298|  2.78k|{
 1299|  2.78k|  struct Cookie *c1 = *(struct Cookie **)p1;
 1300|  2.78k|  struct Cookie *c2 = *(struct Cookie **)p2;
 1301|       |
 1302|  2.78k|  return (c2->creationtime > c1->creationtime) ? 1 : -1;
 1303|  2.78k|}

Curl_freeaddrinfo:
   82|  2.70k|{
   83|  2.70k|  struct Curl_addrinfo *vqualifier canext;
   84|  2.70k|  struct Curl_addrinfo *ca;
   85|       |
   86|  5.40k|  for(ca = cahead; ca; ca = canext) {
   87|  2.70k|    canext = ca->ai_next;
   88|  2.70k|    free(ca);
   89|  2.70k|  }
   90|  2.70k|}
Curl_getaddrinfo_ex:
  113|     11|{
  114|     11|  const struct addrinfo *ai;
  115|     11|  struct addrinfo *aihead;
  116|     11|  struct Curl_addrinfo *cafirst = NULL;
  117|     11|  struct Curl_addrinfo *calast = NULL;
  118|     11|  struct Curl_addrinfo *ca;
  119|     11|  size_t ss_size;
  120|     11|  int error;
  121|       |
  122|     11|  *result = NULL; /* assume failure */
  123|       |
  124|     11|  error = getaddrinfo(nodename, servname, hints, &aihead);
  125|     11|  if(error)
  126|     11|    return error;
  127|       |
  128|       |  /* traverse the addrinfo list */
  129|       |
  130|      0|  for(ai = aihead; ai != NULL; ai = ai->ai_next) {
  131|      0|    size_t namelen = ai->ai_canonname ? strlen(ai->ai_canonname) + 1 : 0;
  132|       |    /* ignore elements with unsupported address family, */
  133|       |    /* settle family-specific sockaddr structure size.  */
  134|      0|    if(ai->ai_family == AF_INET)
  135|      0|      ss_size = sizeof(struct sockaddr_in);
  136|      0|#ifdef ENABLE_IPV6
  137|      0|    else if(ai->ai_family == AF_INET6)
  138|      0|      ss_size = sizeof(struct sockaddr_in6);
  139|      0|#endif
  140|      0|    else
  141|      0|      continue;
  142|       |
  143|       |    /* ignore elements without required address info */
  144|      0|    if(!ai->ai_addr || !(ai->ai_addrlen > 0))
  145|      0|      continue;
  146|       |
  147|       |    /* ignore elements with bogus address size */
  148|      0|    if((size_t)ai->ai_addrlen < ss_size)
  149|      0|      continue;
  150|       |
  151|      0|    ca = malloc(sizeof(struct Curl_addrinfo) + ss_size + namelen);
  152|      0|    if(!ca) {
  153|      0|      error = EAI_MEMORY;
  154|      0|      break;
  155|      0|    }
  156|       |
  157|       |    /* copy each structure member individually, member ordering, */
  158|       |    /* size, or padding might be different for each platform.    */
  159|       |
  160|      0|    ca->ai_flags     = ai->ai_flags;
  161|      0|    ca->ai_family    = ai->ai_family;
  162|      0|    ca->ai_socktype  = ai->ai_socktype;
  163|      0|    ca->ai_protocol  = ai->ai_protocol;
  164|      0|    ca->ai_addrlen   = (curl_socklen_t)ss_size;
  165|      0|    ca->ai_addr      = NULL;
  166|      0|    ca->ai_canonname = NULL;
  167|      0|    ca->ai_next      = NULL;
  168|       |
  169|      0|    ca->ai_addr = (void *)((char *)ca + sizeof(struct Curl_addrinfo));
  170|      0|    memcpy(ca->ai_addr, ai->ai_addr, ss_size);
  171|       |
  172|      0|    if(namelen) {
  173|      0|      ca->ai_canonname = (void *)((char *)ca->ai_addr + ss_size);
  174|      0|      memcpy(ca->ai_canonname, ai->ai_canonname, namelen);
  175|      0|    }
  176|       |
  177|       |    /* if the return list is empty, this becomes the first element */
  178|      0|    if(!cafirst)
  179|      0|      cafirst = ca;
  180|       |
  181|       |    /* add this element last in the return list */
  182|      0|    if(calast)
  183|      0|      calast->ai_next = ca;
  184|      0|    calast = ca;
  185|       |
  186|      0|  }
  187|       |
  188|       |  /* destroy the addrinfo list */
  189|      0|  if(aihead)
  190|      0|    freeaddrinfo(aihead);
  191|       |
  192|       |  /* if we failed, also destroy the Curl_addrinfo list */
  193|      0|  if(error) {
  194|      0|    Curl_freeaddrinfo(cafirst);
  195|      0|    cafirst = NULL;
  196|      0|  }
  197|      0|  else if(!cafirst) {
  198|      0|#ifdef EAI_NONAME
  199|       |    /* rfc3493 conformant */
  200|      0|    error = EAI_NONAME;
  201|       |#else
  202|       |    /* rfc3493 obsoleted */
  203|       |    error = EAI_NODATA;
  204|       |#endif
  205|       |#ifdef USE_WINSOCK
  206|       |    SET_SOCKERRNO(error);
  207|       |#endif
  208|      0|  }
  209|       |
  210|      0|  *result = cafirst;
  211|       |
  212|       |  /* This is not a CURLcode */
  213|      0|  return error;
  214|     11|}
Curl_he2ai:
  260|  2.70k|{
  261|  2.70k|  struct Curl_addrinfo *ai;
  262|  2.70k|  struct Curl_addrinfo *prevai = NULL;
  263|  2.70k|  struct Curl_addrinfo *firstai = NULL;
  264|  2.70k|  struct sockaddr_in *addr;
  265|  2.70k|#ifdef ENABLE_IPV6
  266|  2.70k|  struct sockaddr_in6 *addr6;
  267|  2.70k|#endif
  268|  2.70k|  CURLcode result = CURLE_OK;
  269|  2.70k|  int i;
  270|  2.70k|  char *curr;
  271|       |
  272|  2.70k|  if(!he)
  273|       |    /* no input == no output! */
  274|      0|    return NULL;
  275|       |
  276|  2.70k|  DEBUGASSERT((he->h_name != NULL) && (he->h_addr_list != NULL));
  277|       |
  278|  5.40k|  for(i = 0; (curr = he->h_addr_list[i]) != NULL; i++) {
  279|  2.70k|    size_t ss_size;
  280|  2.70k|    size_t namelen = strlen(he->h_name) + 1; /* include zero termination */
  281|  2.70k|#ifdef ENABLE_IPV6
  282|  2.70k|    if(he->h_addrtype == AF_INET6)
  283|      0|      ss_size = sizeof(struct sockaddr_in6);
  284|  2.70k|    else
  285|  2.70k|#endif
  286|  2.70k|      ss_size = sizeof(struct sockaddr_in);
  287|       |
  288|       |    /* allocate memory to hold the struct, the address and the name */
  289|  2.70k|    ai = calloc(1, sizeof(struct Curl_addrinfo) + ss_size + namelen);
  290|  2.70k|    if(!ai) {
  291|      0|      result = CURLE_OUT_OF_MEMORY;
  292|      0|      break;
  293|      0|    }
  294|       |    /* put the address after the struct */
  295|  2.70k|    ai->ai_addr = (void *)((char *)ai + sizeof(struct Curl_addrinfo));
  296|       |    /* then put the name after the address */
  297|  2.70k|    ai->ai_canonname = (char *)ai->ai_addr + ss_size;
  298|  2.70k|    memcpy(ai->ai_canonname, he->h_name, namelen);
  299|       |
  300|  2.70k|    if(!firstai)
  301|       |      /* store the pointer we want to return from this function */
  302|  2.70k|      firstai = ai;
  303|       |
  304|  2.70k|    if(prevai)
  305|       |      /* make the previous entry point to this */
  306|      0|      prevai->ai_next = ai;
  307|       |
  308|  2.70k|    ai->ai_family = he->h_addrtype;
  309|       |
  310|       |    /* we return all names as STREAM, so when using this address for TFTP
  311|       |       the type must be ignored and conn->socktype be used instead! */
  312|  2.70k|    ai->ai_socktype = SOCK_STREAM;
  313|       |
  314|  2.70k|    ai->ai_addrlen = (curl_socklen_t)ss_size;
  315|       |
  316|       |    /* leave the rest of the struct filled with zero */
  317|       |
  318|  2.70k|    switch(ai->ai_family) {
  319|  2.70k|    case AF_INET:
  320|  2.70k|      addr = (void *)ai->ai_addr; /* storage area for this info */
  321|       |
  322|  2.70k|      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
  323|  2.70k|      addr->sin_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  324|  2.70k|      addr->sin_port = htons((unsigned short)port);
  325|  2.70k|      break;
  326|       |
  327|      0|#ifdef ENABLE_IPV6
  328|      0|    case AF_INET6:
  329|      0|      addr6 = (void *)ai->ai_addr; /* storage area for this info */
  330|       |
  331|      0|      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
  332|      0|      addr6->sin6_family = (CURL_SA_FAMILY_T)(he->h_addrtype);
  333|      0|      addr6->sin6_port = htons((unsigned short)port);
  334|      0|      break;
  335|  2.70k|#endif
  336|  2.70k|    }
  337|       |
  338|  2.70k|    prevai = ai;
  339|  2.70k|  }
  340|       |
  341|  2.70k|  if(result) {
  342|      0|    Curl_freeaddrinfo(firstai);
  343|      0|    firstai = NULL;
  344|      0|  }
  345|       |
  346|  2.70k|  return firstai;
  347|  2.70k|}
Curl_ip2addr:
  373|  2.70k|{
  374|  2.70k|  struct Curl_addrinfo *ai;
  375|       |
  376|       |#if defined(__VMS) && \
  377|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  378|       |#pragma pointer_size save
  379|       |#pragma pointer_size short
  380|       |#pragma message disable PTRMISMATCH
  381|       |#endif
  382|       |
  383|  2.70k|  struct hostent  *h;
  384|  2.70k|  struct namebuff *buf;
  385|  2.70k|  char  *addrentry;
  386|  2.70k|  char  *hoststr;
  387|  2.70k|  size_t addrsize;
  388|       |
  389|  2.70k|  DEBUGASSERT(inaddr && hostname);
  390|       |
  391|  2.70k|  buf = malloc(sizeof(struct namebuff));
  392|  2.70k|  if(!buf)
  393|      0|    return NULL;
  394|       |
  395|  2.70k|  hoststr = strdup(hostname);
  396|  2.70k|  if(!hoststr) {
  397|      0|    free(buf);
  398|      0|    return NULL;
  399|      0|  }
  400|       |
  401|  2.70k|  switch(af) {
  402|  2.70k|  case AF_INET:
  403|  2.70k|    addrsize = sizeof(struct in_addr);
  404|  2.70k|    addrentry = (void *)&buf->addrentry.ina4;
  405|  2.70k|    memcpy(addrentry, inaddr, sizeof(struct in_addr));
  406|  2.70k|    break;
  407|      0|#ifdef ENABLE_IPV6
  408|      0|  case AF_INET6:
  409|      0|    addrsize = sizeof(struct in6_addr);
  410|      0|    addrentry = (void *)&buf->addrentry.ina6;
  411|      0|    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
  412|      0|    break;
  413|      0|#endif
  414|      0|  default:
  415|      0|    free(hoststr);
  416|      0|    free(buf);
  417|      0|    return NULL;
  418|  2.70k|  }
  419|       |
  420|  2.70k|  h = &buf->hostentry;
  421|  2.70k|  h->h_name = hoststr;
  422|  2.70k|  h->h_aliases = NULL;
  423|  2.70k|  h->h_addrtype = (short)af;
  424|  2.70k|  h->h_length = (short)addrsize;
  425|  2.70k|  h->h_addr_list = &buf->h_addr_list[0];
  426|  2.70k|  h->h_addr_list[0] = addrentry;
  427|  2.70k|  h->h_addr_list[1] = NULL; /* terminate list of entries */
  428|       |
  429|       |#if defined(__VMS) && \
  430|       |    defined(__INITIAL_POINTER_SIZE) && (__INITIAL_POINTER_SIZE == 64)
  431|       |#pragma pointer_size restore
  432|       |#pragma message enable PTRMISMATCH
  433|       |#endif
  434|       |
  435|  2.70k|  ai = Curl_he2ai(h, port);
  436|       |
  437|  2.70k|  free(hoststr);
  438|  2.70k|  free(buf);
  439|       |
  440|  2.70k|  return ai;
  441|  2.70k|}
curl_dbg_getaddrinfo:
  550|     11|{
  551|       |#ifdef USE_LWIPSOCK
  552|       |  int res = lwip_getaddrinfo(hostname, service, hints, result);
  553|       |#else
  554|     11|  int res = (getaddrinfo)(hostname, service, hints, result);
  555|     11|#endif
  556|     11|  if(0 == res)
  557|       |    /* success */
  558|      0|    curl_dbg_log("ADDR %s:%d getaddrinfo() = %p\n",
  559|      0|                 source, line, (void *)*result);
  560|     11|  else
  561|     11|    curl_dbg_log("ADDR %s:%d getaddrinfo() failed\n",
  562|     11|                 source, line);
  563|     11|  return res;
  564|     11|}

Curl_isspace:
   64|  38.7k|{
   65|  38.7k|  if((c < 0) || (c >= 0x80))
   66|    921|    return FALSE;
   67|  37.7k|  return (ascii[c] & _S);
   68|  38.7k|}
Curl_isdigit:
   71|   524k|{
   72|   524k|  if((c < 0) || (c >= 0x80))
   73|    426|    return FALSE;
   74|   524k|  return (ascii[c] & _N);
   75|   524k|}
Curl_isalnum:
   78|  54.6k|{
   79|  54.6k|  if((c < 0) || (c >= 0x80))
   80|  1.31k|    return FALSE;
   81|  53.3k|  return (ascii[c] & (_N|_U|_L));
   82|  54.6k|}
Curl_isxdigit:
   85|  2.67k|{
   86|  2.67k|  if((c < 0) || (c >= 0x80))
   87|     28|    return FALSE;
   88|  2.64k|  return (ascii[c] & (_N|_X));
   89|  2.67k|}
Curl_isgraph:
   92|  5.97k|{
   93|  5.97k|  if((c < 0) || (c >= 0x80) || (c == ' '))
   94|    769|    return FALSE;
   95|  5.20k|  return (ascii[c] & (_N|_X|_U|_L|_P|_S));
   96|  5.97k|}
Curl_isalpha:
  106|  14.3k|{
  107|  14.3k|  if((c < 0) || (c >= 0x80))
  108|      0|    return FALSE;
  109|  14.3k|  return (ascii[c] & (_U|_L));
  110|  14.3k|}
Curl_isupper:
  113|    542|{
  114|    542|  if((c < 0) || (c >= 0x80))
  115|      3|    return FALSE;
  116|    539|  return (ascii[c] & (_U));
  117|    542|}
Curl_iscntrl:
  127|  5.99k|{
  128|  5.99k|  if((c < 0) || (c >= 0x80))
  129|    769|    return FALSE;
  130|  5.22k|  return (ascii[c] & (_C));
  131|  5.99k|}

Curl_gethostname:
   52|     19|{
   53|       |#ifndef HAVE_GETHOSTNAME
   54|       |
   55|       |  /* Allow compilation and return failure when unavailable */
   56|       |  (void) name;
   57|       |  (void) namelen;
   58|       |  return -1;
   59|       |
   60|       |#else
   61|     19|  int err;
   62|     19|  char *dot;
   63|       |
   64|     19|#ifdef DEBUGBUILD
   65|       |
   66|       |  /* Override host name when environment variable CURL_GETHOSTNAME is set */
   67|     19|  const char *force_hostname = getenv("CURL_GETHOSTNAME");
   68|     19|  if(force_hostname) {
   69|      0|    strncpy(name, force_hostname, namelen);
   70|      0|    err = 0;
   71|      0|  }
   72|     19|  else {
   73|     19|    name[0] = '\0';
   74|     19|    err = gethostname(name, namelen);
   75|     19|  }
   76|       |
   77|       |#else /* DEBUGBUILD */
   78|       |
   79|       |  /* The call to system's gethostname() might get intercepted by the
   80|       |     libhostname library when libcurl is built as a non-debug shared
   81|       |     library when running the test suite. */
   82|       |  name[0] = '\0';
   83|       |  err = gethostname(name, namelen);
   84|       |
   85|       |#endif
   86|       |
   87|     19|  name[namelen - 1] = '\0';
   88|       |
   89|     19|  if(err)
   90|      0|    return err;
   91|       |
   92|       |  /* Truncate domain, leave only machine name */
   93|     19|  dot = strchr(name, '.');
   94|     19|  if(dot)
   95|      0|    *dot = '\0';
   96|       |
   97|     19|  return 0;
   98|     19|#endif
   99|       |
  100|     19|}

Curl_memrchr:
   46|  1.27k|{
   47|  1.27k|  if(n > 0) {
   48|  1.19k|    const unsigned char *p = s;
   49|  1.19k|    const unsigned char *q = s;
   50|       |
   51|  1.19k|    p += n - 1;
   52|       |
   53|  5.43k|    while(p >= q) {
   54|  4.82k|      if(*p == (unsigned char)c)
   55|    586|        return (void *)p;
   56|  4.23k|      p--;
   57|  4.23k|    }
   58|  1.19k|  }
   59|    689|  return NULL;
   60|  1.27k|}

Curl_http_auth_cleanup_ntlm_wb:
  493|  2.92k|{
  494|  2.92k|  ntlm_wb_cleanup(&conn->ntlm);
  495|  2.92k|  ntlm_wb_cleanup(&conn->proxyntlm);
  496|  2.92k|}
curl_ntlm_wb.c:ntlm_wb_cleanup:
   80|  5.84k|{
   81|  5.84k|  if(ntlm->ntlm_auth_hlpr_socket != CURL_SOCKET_BAD) {
   82|      0|    sclose(ntlm->ntlm_auth_hlpr_socket);
   83|      0|    ntlm->ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
   84|      0|  }
   85|       |
   86|  5.84k|  if(ntlm->ntlm_auth_hlpr_pid) {
   87|      0|    int i;
   88|      0|    for(i = 0; i < 4; i++) {
   89|      0|      pid_t ret = waitpid(ntlm->ntlm_auth_hlpr_pid, NULL, WNOHANG);
   90|      0|      if(ret == ntlm->ntlm_auth_hlpr_pid || errno == ECHILD)
   91|      0|        break;
   92|      0|      switch(i) {
   93|      0|      case 0:
   94|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGTERM);
   95|      0|        break;
   96|      0|      case 1:
   97|       |        /* Give the process another moment to shut down cleanly before
   98|       |           bringing down the axe */
   99|      0|        Curl_wait_ms(1);
  100|      0|        break;
  101|      0|      case 2:
  102|      0|        kill(ntlm->ntlm_auth_hlpr_pid, SIGKILL);
  103|      0|        break;
  104|      0|      case 3:
  105|      0|        break;
  106|      0|      }
  107|      0|    }
  108|      0|    ntlm->ntlm_auth_hlpr_pid = 0;
  109|      0|  }
  110|       |
  111|  5.84k|  Curl_safefree(ntlm->challenge);
  112|  5.84k|  Curl_safefree(ntlm->response);
  113|  5.84k|}

Curl_range:
   37|     33|{
   38|     33|  curl_off_t from, to;
   39|     33|  char *ptr;
   40|     33|  char *ptr2;
   41|       |
   42|     33|  if(data->state.use_range && data->state.range) {
   43|     30|    CURLofft from_t;
   44|     30|    CURLofft to_t;
   45|     30|    from_t = curlx_strtoofft(data->state.range, &ptr, 0, &from);
   46|     30|    if(from_t == CURL_OFFT_FLOW)
   47|      1|      return CURLE_RANGE_ERROR;
   48|    313|    while(*ptr && (ISSPACE(*ptr) || (*ptr == '-')))
   49|    284|      ptr++;
   50|     29|    to_t = curlx_strtoofft(ptr, &ptr2, 0, &to);
   51|     29|    if(to_t == CURL_OFFT_FLOW)
   52|      1|      return CURLE_RANGE_ERROR;
   53|     28|    if((to_t == CURL_OFFT_INVAL) && !from_t) {
   54|       |      /* X - */
   55|      7|      data->state.resume_from = from;
   56|      7|      DEBUGF(infof(data, "RANGE %" CURL_FORMAT_CURL_OFF_T " to end of file",
   57|      7|                   from));
   58|      7|    }
   59|     21|    else if((from_t == CURL_OFFT_INVAL) && !to_t) {
   60|       |      /* -Y */
   61|      4|      data->req.maxdownload = to;
   62|      4|      data->state.resume_from = -to;
   63|      4|      DEBUGF(infof(data, "RANGE the last %" CURL_FORMAT_CURL_OFF_T " bytes",
   64|      4|                   to));
   65|      4|    }
   66|     17|    else {
   67|       |      /* X-Y */
   68|     17|      curl_off_t totalsize;
   69|       |
   70|       |      /* Ensure the range is sensible - to should follow from. */
   71|     17|      if(from > to)
   72|      2|        return CURLE_RANGE_ERROR;
   73|       |
   74|     15|      totalsize = to - from;
   75|     15|      if(totalsize == CURL_OFF_T_MAX)
   76|      1|        return CURLE_RANGE_ERROR;
   77|       |
   78|     14|      data->req.maxdownload = totalsize + 1; /* include last byte */
   79|     14|      data->state.resume_from = from;
   80|     14|      DEBUGF(infof(data, "RANGE from %" CURL_FORMAT_CURL_OFF_T
   81|     14|                   " getting %" CURL_FORMAT_CURL_OFF_T " bytes",
   82|     14|                   from, data->req.maxdownload));
   83|     14|    }
   84|     25|    DEBUGF(infof(data, "range-download from %" CURL_FORMAT_CURL_OFF_T
   85|     25|                 " to %" CURL_FORMAT_CURL_OFF_T ", totally %"
   86|     25|                 CURL_FORMAT_CURL_OFF_T " bytes",
   87|     25|                 from, to, data->req.maxdownload));
   88|     25|  }
   89|      3|  else
   90|      3|    data->req.maxdownload = -1;
   91|     28|  return CURLE_OK;
   92|     33|}

Curl_sasl_cleanup:
   89|  1.32k|{
   90|  1.32k|  (void)conn;
   91|  1.32k|  (void)authused;
   92|       |
   93|       |#if defined(USE_KERBEROS5)
   94|       |  /* Cleanup the gssapi structure */
   95|       |  if(authused == SASL_MECH_GSSAPI) {
   96|       |    Curl_auth_cleanup_gssapi(&conn->krb5);
   97|       |  }
   98|       |#endif
   99|       |
  100|       |#if defined(USE_GSASL)
  101|       |  /* Cleanup the GSASL structure */
  102|       |  if(authused & (SASL_MECH_SCRAM_SHA_1 | SASL_MECH_SCRAM_SHA_256)) {
  103|       |    Curl_auth_gsasl_cleanup(&conn->gsasl);
  104|       |  }
  105|       |#endif
  106|       |
  107|  1.32k|#if defined(USE_NTLM)
  108|       |  /* Cleanup the NTLM structure */
  109|  1.32k|  if(authused == SASL_MECH_NTLM) {
  110|      0|    Curl_auth_cleanup_ntlm(&conn->ntlm);
  111|      0|  }
  112|  1.32k|#endif
  113|  1.32k|}
Curl_sasl_decode_mech:
  130|  4.50k|{
  131|  4.50k|  unsigned int i;
  132|  4.50k|  char c;
  133|       |
  134|  48.6k|  for(i = 0; mechtable[i].name; i++) {
  135|  44.8k|    if(maxlen >= mechtable[i].len &&
  136|  44.8k|       !memcmp(ptr, mechtable[i].name, mechtable[i].len)) {
  137|    948|      if(len)
  138|    948|        *len = mechtable[i].len;
  139|       |
  140|    948|      if(maxlen == mechtable[i].len)
  141|    406|        return mechtable[i].bit;
  142|       |
  143|    542|      c = ptr[mechtable[i].len];
  144|    542|      if(!ISUPPER(c) && !ISDIGIT(c) && c != '-' && c != '_')
  145|    330|        return mechtable[i].bit;
  146|    542|    }
  147|  44.8k|  }
  148|       |
  149|  3.76k|  return 0;
  150|  4.50k|}
Curl_sasl_parse_url_auth_option:
  159|     33|{
  160|     33|  CURLcode result = CURLE_OK;
  161|     33|  size_t mechlen;
  162|       |
  163|     33|  if(!len)
  164|      6|    return CURLE_URL_MALFORMAT;
  165|       |
  166|     27|  if(sasl->resetprefs) {
  167|     17|    sasl->resetprefs = FALSE;
  168|     17|    sasl->prefmech = SASL_AUTH_NONE;
  169|     17|  }
  170|       |
  171|     27|  if(!strncmp(value, "*", len))
  172|     17|    sasl->prefmech = SASL_AUTH_DEFAULT;
  173|     10|  else {
  174|     10|    unsigned short mechbit = Curl_sasl_decode_mech(value, len, &mechlen);
  175|     10|    if(mechbit && mechlen == len)
  176|      0|      sasl->prefmech |= mechbit;
  177|     10|    else
  178|     10|      result = CURLE_URL_MALFORMAT;
  179|     10|  }
  180|       |
  181|     27|  return result;
  182|     33|}
Curl_sasl_init:
  191|  1.32k|{
  192|  1.32k|  unsigned long auth = data->set.httpauth;
  193|       |
  194|  1.32k|  sasl->params = params;           /* Set protocol dependent parameters */
  195|  1.32k|  sasl->state = SASL_STOP;         /* Not yet running */
  196|  1.32k|  sasl->curmech = NULL;            /* No mechanism yet. */
  197|  1.32k|  sasl->authmechs = SASL_AUTH_NONE; /* No known authentication mechanism yet */
  198|  1.32k|  sasl->prefmech = params->defmechs; /* Default preferred mechanisms */
  199|  1.32k|  sasl->authused = SASL_AUTH_NONE; /* The authentication mechanism used */
  200|  1.32k|  sasl->resetprefs = TRUE;         /* Reset prefmech upon AUTH parsing. */
  201|  1.32k|  sasl->mutual_auth = FALSE;       /* No mutual authentication (GSSAPI only) */
  202|  1.32k|  sasl->force_ir = FALSE;          /* Respect external option */
  203|       |
  204|  1.32k|  if(auth != CURLAUTH_BASIC) {
  205|      1|    sasl->resetprefs = FALSE;
  206|      1|    sasl->prefmech = SASL_AUTH_NONE;
  207|      1|    if(auth & CURLAUTH_BASIC)
  208|      0|      sasl->prefmech |= SASL_MECH_PLAIN | SASL_MECH_LOGIN;
  209|      1|    if(auth & CURLAUTH_DIGEST)
  210|      1|      sasl->prefmech |= SASL_MECH_DIGEST_MD5;
  211|      1|    if(auth & CURLAUTH_NTLM)
  212|      0|      sasl->prefmech |= SASL_MECH_NTLM;
  213|      1|    if(auth & CURLAUTH_BEARER)
  214|      0|      sasl->prefmech |= SASL_MECH_OAUTHBEARER | SASL_MECH_XOAUTH2;
  215|      1|    if(auth & CURLAUTH_GSSAPI)
  216|      0|      sasl->prefmech |= SASL_MECH_GSSAPI;
  217|      1|  }
  218|  1.32k|}
Curl_sasl_can_authenticate:
  316|    886|{
  317|       |  /* Have credentials been provided? */
  318|    886|  if(conn->bits.user_passwd)
  319|    129|    return TRUE;
  320|       |
  321|       |  /* EXTERNAL can authenticate without a user name and/or password */
  322|    757|  if(sasl->authmechs & sasl->prefmech & SASL_MECH_EXTERNAL)
  323|      0|    return TRUE;
  324|       |
  325|    757|  return FALSE;
  326|    757|}
Curl_sasl_start:
  335|    148|{
  336|    148|  CURLcode result = CURLE_OK;
  337|    148|  struct connectdata *conn = data->conn;
  338|    148|  unsigned short enabledmechs;
  339|    148|  const char *mech = NULL;
  340|    148|  struct bufref resp;
  341|    148|  saslstate state1 = SASL_STOP;
  342|    148|  saslstate state2 = SASL_FINAL;
  343|    148|  const char * const hostname = SSL_HOST_NAME();
  344|    148|  const long int port = SSL_HOST_PORT();
  345|    148|#if defined(USE_KERBEROS5) || defined(USE_NTLM)
  346|    148|  const char *service = data->set.str[STRING_SERVICE_NAME] ?
  347|      0|    data->set.str[STRING_SERVICE_NAME] :
  348|    148|    sasl->params->service;
  349|    148|#endif
  350|    148|  const char *oauth_bearer = data->set.str[STRING_BEARER];
  351|    148|  struct bufref nullmsg;
  352|       |
  353|    148|  Curl_bufref_init(&nullmsg);
  354|    148|  Curl_bufref_init(&resp);
  355|    148|  sasl->force_ir = force_ir;    /* Latch for future use */
  356|    148|  sasl->authused = 0;           /* No mechanism used yet */
  357|    148|  enabledmechs = sasl->authmechs & sasl->prefmech;
  358|    148|  *progress = SASL_IDLE;
  359|       |
  360|       |  /* Calculate the supported authentication mechanism, by decreasing order of
  361|       |     security, as well as the initial response where appropriate */
  362|    148|  if((enabledmechs & SASL_MECH_EXTERNAL) && !conn->passwd[0]) {
  363|      0|    mech = SASL_MECH_STRING_EXTERNAL;
  364|      0|    state1 = SASL_EXTERNAL;
  365|      0|    sasl->authused = SASL_MECH_EXTERNAL;
  366|       |
  367|      0|    if(force_ir || data->set.sasl_ir)
  368|      0|      result = Curl_auth_create_external_message(conn->user, &resp);
  369|      0|  }
  370|    148|  else if(conn->bits.user_passwd) {
  371|       |#if defined(USE_KERBEROS5)
  372|       |    if((enabledmechs & SASL_MECH_GSSAPI) && Curl_auth_is_gssapi_supported() &&
  373|       |       Curl_auth_user_contains_domain(conn->user)) {
  374|       |      sasl->mutual_auth = FALSE;
  375|       |      mech = SASL_MECH_STRING_GSSAPI;
  376|       |      state1 = SASL_GSSAPI;
  377|       |      state2 = SASL_GSSAPI_TOKEN;
  378|       |      sasl->authused = SASL_MECH_GSSAPI;
  379|       |
  380|       |      if(force_ir || data->set.sasl_ir)
  381|       |        result = Curl_auth_create_gssapi_user_message(data, conn->user,
  382|       |                                                      conn->passwd,
  383|       |                                                      service,
  384|       |                                                      conn->host.name,
  385|       |                                                      sasl->mutual_auth,
  386|       |                                                      NULL, &conn->krb5,
  387|       |                                                      &resp);
  388|       |    }
  389|       |    else
  390|       |#endif
  391|       |#ifdef USE_GSASL
  392|       |    if((enabledmechs & SASL_MECH_SCRAM_SHA_256) &&
  393|       |       Curl_auth_gsasl_is_supported(data, SASL_MECH_STRING_SCRAM_SHA_256,
  394|       |                                    &conn->gsasl)) {
  395|       |      mech = SASL_MECH_STRING_SCRAM_SHA_256;
  396|       |      sasl->authused = SASL_MECH_SCRAM_SHA_256;
  397|       |      state1 = SASL_GSASL;
  398|       |      state2 = SASL_GSASL;
  399|       |
  400|       |      result = Curl_auth_gsasl_start(data, conn->user,
  401|       |                                     conn->passwd, &conn->gsasl);
  402|       |      if(result == CURLE_OK && (force_ir || data->set.sasl_ir))
  403|       |        result = Curl_auth_gsasl_token(data, &nullmsg, &conn->gsasl, &resp);
  404|       |    }
  405|       |    else if((enabledmechs & SASL_MECH_SCRAM_SHA_1) &&
  406|       |            Curl_auth_gsasl_is_supported(data, SASL_MECH_STRING_SCRAM_SHA_1,
  407|       |                                         &conn->gsasl)) {
  408|       |      mech = SASL_MECH_STRING_SCRAM_SHA_1;
  409|       |      sasl->authused = SASL_MECH_SCRAM_SHA_1;
  410|       |      state1 = SASL_GSASL;
  411|       |      state2 = SASL_GSASL;
  412|       |
  413|       |      result = Curl_auth_gsasl_start(data, conn->user,
  414|       |                                     conn->passwd, &conn->gsasl);
  415|       |      if(result == CURLE_OK && (force_ir || data->set.sasl_ir))
  416|       |        result = Curl_auth_gsasl_token(data, &nullmsg, &conn->gsasl, &resp);
  417|       |    }
  418|       |    else
  419|       |#endif
  420|    148|#ifndef CURL_DISABLE_CRYPTO_AUTH
  421|    148|    if((enabledmechs & SASL_MECH_DIGEST_MD5) &&
  422|    148|       Curl_auth_is_digest_supported()) {
  423|     12|      mech = SASL_MECH_STRING_DIGEST_MD5;
  424|     12|      state1 = SASL_DIGESTMD5;
  425|     12|      sasl->authused = SASL_MECH_DIGEST_MD5;
  426|     12|    }
  427|    136|    else if(enabledmechs & SASL_MECH_CRAM_MD5) {
  428|     77|      mech = SASL_MECH_STRING_CRAM_MD5;
  429|     77|      state1 = SASL_CRAMMD5;
  430|     77|      sasl->authused = SASL_MECH_CRAM_MD5;
  431|     77|    }
  432|     59|    else
  433|     59|#endif
  434|     59|#ifdef USE_NTLM
  435|     59|    if((enabledmechs & SASL_MECH_NTLM) && Curl_auth_is_ntlm_supported()) {
  436|      0|      mech = SASL_MECH_STRING_NTLM;
  437|      0|      state1 = SASL_NTLM;
  438|      0|      state2 = SASL_NTLM_TYPE2MSG;
  439|      0|      sasl->authused = SASL_MECH_NTLM;
  440|       |
  441|      0|      if(force_ir || data->set.sasl_ir)
  442|      0|        result = Curl_auth_create_ntlm_type1_message(data,
  443|      0|                                                     conn->user, conn->passwd,
  444|      0|                                                     service,
  445|      0|                                                     hostname,
  446|      0|                                                     &conn->ntlm, &resp);
  447|      0|      }
  448|     59|    else
  449|     59|#endif
  450|     59|    if((enabledmechs & SASL_MECH_OAUTHBEARER) && oauth_bearer) {
  451|      0|      mech = SASL_MECH_STRING_OAUTHBEARER;
  452|      0|      state1 = SASL_OAUTH2;
  453|      0|      state2 = SASL_OAUTH2_RESP;
  454|      0|      sasl->authused = SASL_MECH_OAUTHBEARER;
  455|       |
  456|      0|      if(force_ir || data->set.sasl_ir)
  457|      0|        result = Curl_auth_create_oauth_bearer_message(conn->user,
  458|      0|                                                       hostname,
  459|      0|                                                       port,
  460|      0|                                                       oauth_bearer,
  461|      0|                                                       &resp);
  462|      0|    }
  463|     59|    else if((enabledmechs & SASL_MECH_XOAUTH2) && oauth_bearer) {
  464|      0|      mech = SASL_MECH_STRING_XOAUTH2;
  465|      0|      state1 = SASL_OAUTH2;
  466|      0|      sasl->authused = SASL_MECH_XOAUTH2;
  467|       |
  468|      0|      if(force_ir || data->set.sasl_ir)
  469|      0|        result = Curl_auth_create_xoauth_bearer_message(conn->user,
  470|      0|                                                        oauth_bearer,
  471|      0|                                                        &resp);
  472|      0|    }
  473|     59|    else if(enabledmechs & SASL_MECH_PLAIN) {
  474|      3|      mech = SASL_MECH_STRING_PLAIN;
  475|      3|      state1 = SASL_PLAIN;
  476|      3|      sasl->authused = SASL_MECH_PLAIN;
  477|       |
  478|      3|      if(force_ir || data->set.sasl_ir)
  479|      0|        result = Curl_auth_create_plain_message(conn->sasl_authzid,
  480|      0|                                                conn->user, conn->passwd,
  481|      0|                                                &resp);
  482|      3|    }
  483|     56|    else if(enabledmechs & SASL_MECH_LOGIN) {
  484|     11|      mech = SASL_MECH_STRING_LOGIN;
  485|     11|      state1 = SASL_LOGIN;
  486|     11|      state2 = SASL_LOGIN_PASSWD;
  487|     11|      sasl->authused = SASL_MECH_LOGIN;
  488|       |
  489|     11|      if(force_ir || data->set.sasl_ir)
  490|      0|        result = Curl_auth_create_login_message(conn->user, &resp);
  491|     11|    }
  492|    148|  }
  493|       |
  494|    148|  if(!result && mech) {
  495|    103|    sasl->curmech = mech;
  496|    103|    if(Curl_bufref_ptr(&resp))
  497|      0|      result = build_message(sasl, data, &resp);
  498|       |
  499|    103|    if(sasl->params->maxirlen &&
  500|    103|       strlen(mech) + Curl_bufref_len(&resp) > sasl->params->maxirlen)
  501|      0|      Curl_bufref_free(&resp);
  502|       |
  503|    103|    if(!result)
  504|    103|      result = sasl->params->sendauth(data, mech, &resp);
  505|       |
  506|    103|    if(!result) {
  507|    103|      *progress = SASL_INPROGRESS;
  508|    103|      state(sasl, data, Curl_bufref_ptr(&resp) ? state2 : state1);
  509|    103|    }
  510|    103|  }
  511|       |
  512|    148|  Curl_bufref_free(&resp);
  513|    148|  return result;
  514|    148|}
Curl_sasl_continue:
  523|    150|{
  524|    150|  CURLcode result = CURLE_OK;
  525|    150|  struct connectdata *conn = data->conn;
  526|    150|  saslstate newstate = SASL_FINAL;
  527|    150|  struct bufref resp;
  528|    150|  const char * const hostname = SSL_HOST_NAME();
  529|    150|  const long int port = SSL_HOST_PORT();
  530|    150|#if !defined(CURL_DISABLE_CRYPTO_AUTH) || defined(USE_KERBEROS5) ||     \
  531|    150|  defined(USE_NTLM)
  532|    150|  const char *service = data->set.str[STRING_SERVICE_NAME] ?
  533|      0|    data->set.str[STRING_SERVICE_NAME] :
  534|    150|    sasl->params->service;
  535|    150|#endif
  536|    150|  const char *oauth_bearer = data->set.str[STRING_BEARER];
  537|    150|  struct bufref serverdata;
  538|       |
  539|    150|  Curl_bufref_init(&serverdata);
  540|    150|  Curl_bufref_init(&resp);
  541|    150|  *progress = SASL_INPROGRESS;
  542|       |
  543|    150|  if(sasl->state == SASL_FINAL) {
  544|     12|    if(code != sasl->params->finalcode)
  545|     11|      result = CURLE_LOGIN_DENIED;
  546|     12|    *progress = SASL_DONE;
  547|     12|    state(sasl, data, SASL_STOP);
  548|     12|    return result;
  549|     12|  }
  550|       |
  551|    138|  if(sasl->state != SASL_CANCEL && sasl->state != SASL_OAUTH2_RESP &&
  552|    138|     code != sasl->params->contcode) {
  553|      2|    *progress = SASL_DONE;
  554|      2|    state(sasl, data, SASL_STOP);
  555|      2|    return CURLE_LOGIN_DENIED;
  556|      2|  }
  557|       |
  558|    136|  switch(sasl->state) {
  559|      0|  case SASL_STOP:
  560|      0|    *progress = SASL_DONE;
  561|      0|    return result;
  562|      2|  case SASL_PLAIN:
  563|      2|    result = Curl_auth_create_plain_message(conn->sasl_authzid,
  564|      2|                                            conn->user, conn->passwd, &resp);
  565|      2|    break;
  566|      9|  case SASL_LOGIN:
  567|      9|    result = Curl_auth_create_login_message(conn->user, &resp);
  568|      9|    newstate = SASL_LOGIN_PASSWD;
  569|      9|    break;
  570|      7|  case SASL_LOGIN_PASSWD:
  571|      7|    result = Curl_auth_create_login_message(conn->passwd, &resp);
  572|      7|    break;
  573|      0|  case SASL_EXTERNAL:
  574|      0|    result = Curl_auth_create_external_message(conn->user, &resp);
  575|      0|    break;
  576|      0|#ifndef CURL_DISABLE_CRYPTO_AUTH
  577|       |#ifdef USE_GSASL
  578|       |  case SASL_GSASL:
  579|       |    result = get_server_message(sasl, data, &serverdata);
  580|       |    if(!result)
  581|       |      result = Curl_auth_gsasl_token(data, &serverdata, &conn->gsasl, &resp);
  582|       |    if(!result && Curl_bufref_len(&resp) > 0)
  583|       |      newstate = SASL_GSASL;
  584|       |    break;
  585|       |#endif
  586|     76|  case SASL_CRAMMD5:
  587|     76|    result = get_server_message(sasl, data, &serverdata);
  588|     76|    if(!result)
  589|     33|      result = Curl_auth_create_cram_md5_message(&serverdata, conn->user,
  590|     33|                                                 conn->passwd, &resp);
  591|     76|    break;
  592|     12|  case SASL_DIGESTMD5:
  593|     12|    result = get_server_message(sasl, data, &serverdata);
  594|     12|    if(!result)
  595|      5|      result = Curl_auth_create_digest_md5_message(data, &serverdata,
  596|      5|                                                   conn->user, conn->passwd,
  597|      5|                                                   service, &resp);
  598|     12|    if(!result && (sasl->params->flags & SASL_FLAG_BASE64))
  599|      0|      newstate = SASL_DIGESTMD5_RESP;
  600|     12|    break;
  601|      0|  case SASL_DIGESTMD5_RESP:
  602|       |    /* Keep response NULL to output an empty line. */
  603|      0|    break;
  604|      0|#endif
  605|       |
  606|      0|#ifdef USE_NTLM
  607|      0|  case SASL_NTLM:
  608|       |    /* Create the type-1 message */
  609|      0|    result = Curl_auth_create_ntlm_type1_message(data,
  610|      0|                                                 conn->user, conn->passwd,
  611|      0|                                                 service, hostname,
  612|      0|                                                 &conn->ntlm, &resp);
  613|      0|    newstate = SASL_NTLM_TYPE2MSG;
  614|      0|    break;
  615|      0|  case SASL_NTLM_TYPE2MSG:
  616|       |    /* Decode the type-2 message */
  617|      0|    result = get_server_message(sasl, data, &serverdata);
  618|      0|    if(!result)
  619|      0|      result = Curl_auth_decode_ntlm_type2_message(data, &serverdata,
  620|      0|                                                   &conn->ntlm);
  621|      0|    if(!result)
  622|      0|      result = Curl_auth_create_ntlm_type3_message(data, conn->user,
  623|      0|                                                   conn->passwd, &conn->ntlm,
  624|      0|                                                   &resp);
  625|      0|    break;
  626|      0|#endif
  627|       |
  628|       |#if defined(USE_KERBEROS5)
  629|       |  case SASL_GSSAPI:
  630|       |    result = Curl_auth_create_gssapi_user_message(data, conn->user,
  631|       |                                                  conn->passwd,
  632|       |                                                  service,
  633|       |                                                  conn->host.name,
  634|       |                                                  sasl->mutual_auth, NULL,
  635|       |                                                  &conn->krb5,
  636|       |                                                  &resp);
  637|       |    newstate = SASL_GSSAPI_TOKEN;
  638|       |    break;
  639|       |  case SASL_GSSAPI_TOKEN:
  640|       |    result = get_server_message(sasl, data, &serverdata);
  641|       |    if(!result) {
  642|       |      if(sasl->mutual_auth) {
  643|       |        /* Decode the user token challenge and create the optional response
  644|       |           message */
  645|       |        result = Curl_auth_create_gssapi_user_message(data, NULL, NULL,
  646|       |                                                      NULL, NULL,
  647|       |                                                      sasl->mutual_auth,
  648|       |                                                      &serverdata,
  649|       |                                                      &conn->krb5,
  650|       |                                                      &resp);
  651|       |        newstate = SASL_GSSAPI_NO_DATA;
  652|       |      }
  653|       |      else
  654|       |        /* Decode the security challenge and create the response message */
  655|       |        result = Curl_auth_create_gssapi_security_message(data,
  656|       |                                                          conn->sasl_authzid,
  657|       |                                                          &serverdata,
  658|       |                                                          &conn->krb5,
  659|       |                                                          &resp);
  660|       |    }
  661|       |    break;
  662|       |  case SASL_GSSAPI_NO_DATA:
  663|       |    /* Decode the security challenge and create the response message */
  664|       |    result = get_server_message(sasl, data, &serverdata);
  665|       |    if(!result)
  666|       |      result = Curl_auth_create_gssapi_security_message(data,
  667|       |                                                        conn->sasl_authzid,
  668|       |                                                        &serverdata,
  669|       |                                                        &conn->krb5,
  670|       |                                                        &resp);
  671|       |    break;
  672|       |#endif
  673|       |
  674|      0|  case SASL_OAUTH2:
  675|       |    /* Create the authorisation message */
  676|      0|    if(sasl->authused == SASL_MECH_OAUTHBEARER) {
  677|      0|      result = Curl_auth_create_oauth_bearer_message(conn->user,
  678|      0|                                                     hostname,
  679|      0|                                                     port,
  680|      0|                                                     oauth_bearer,
  681|      0|                                                     &resp);
  682|       |
  683|       |      /* Failures maybe sent by the server as continuations for OAUTHBEARER */
  684|      0|      newstate = SASL_OAUTH2_RESP;
  685|      0|    }
  686|      0|    else
  687|      0|      result = Curl_auth_create_xoauth_bearer_message(conn->user,
  688|      0|                                                      oauth_bearer,
  689|      0|                                                      &resp);
  690|      0|    break;
  691|       |
  692|      0|  case SASL_OAUTH2_RESP:
  693|       |    /* The continuation is optional so check the response code */
  694|      0|    if(code == sasl->params->finalcode) {
  695|       |      /* Final response was received so we are done */
  696|      0|      *progress = SASL_DONE;
  697|      0|      state(sasl, data, SASL_STOP);
  698|      0|      return result;
  699|      0|    }
  700|      0|    else if(code == sasl->params->contcode) {
  701|       |      /* Acknowledge the continuation by sending a 0x01 response. */
  702|      0|      Curl_bufref_set(&resp, "\x01", 1, NULL);
  703|      0|      break;
  704|      0|    }
  705|      0|    else {
  706|      0|      *progress = SASL_DONE;
  707|      0|      state(sasl, data, SASL_STOP);
  708|      0|      return CURLE_LOGIN_DENIED;
  709|      0|    }
  710|       |
  711|     30|  case SASL_CANCEL:
  712|       |    /* Remove the offending mechanism from the supported list */
  713|     30|    sasl->authmechs ^= sasl->authused;
  714|       |
  715|       |    /* Start an alternative SASL authentication */
  716|     30|    return Curl_sasl_start(sasl, data, sasl->force_ir, progress);
  717|      0|  default:
  718|      0|    failf(data, "Unsupported SASL authentication mechanism");
  719|      0|    result = CURLE_UNSUPPORTED_PROTOCOL;  /* Should not happen */
  720|      0|    break;
  721|    136|  }
  722|       |
  723|    106|  Curl_bufref_free(&serverdata);
  724|       |
  725|    106|  switch(result) {
  726|     55|  case CURLE_BAD_CONTENT_ENCODING:
  727|       |    /* Cancel dialog */
  728|     55|    result = sasl->params->cancelauth(data, sasl->curmech);
  729|     55|    newstate = SASL_CANCEL;
  730|     55|    break;
  731|     51|  case CURLE_OK:
  732|     51|    result = build_message(sasl, data, &resp);
  733|     51|    if(!result)
  734|     51|      result = sasl->params->contauth(data, sasl->curmech, &resp);
  735|     51|    break;
  736|      0|  default:
  737|      0|    newstate = SASL_STOP;    /* Stop on error */
  738|      0|    *progress = SASL_DONE;
  739|      0|    break;
  740|    106|  }
  741|       |
  742|    106|  Curl_bufref_free(&resp);
  743|       |
  744|    106|  state(sasl, data, newstate);
  745|       |
  746|    106|  return result;
  747|    106|}
curl_sasl.c:build_message:
  288|     51|{
  289|     51|  CURLcode result = CURLE_OK;
  290|       |
  291|     51|  if(sasl->params->flags & SASL_FLAG_BASE64) {
  292|     51|    if(!Curl_bufref_ptr(msg))                   /* Empty message. */
  293|      0|      Curl_bufref_set(msg, "", 0, NULL);
  294|     51|    else if(!Curl_bufref_len(msg))              /* Explicit empty response. */
  295|      4|      Curl_bufref_set(msg, "=", 1, NULL);
  296|     47|    else {
  297|     47|      char *base64;
  298|     47|      size_t base64len;
  299|       |
  300|     47|      result = Curl_base64_encode(data, (const char *) Curl_bufref_ptr(msg),
  301|     47|                                  Curl_bufref_len(msg), &base64, &base64len);
  302|     47|      if(!result)
  303|     47|        Curl_bufref_set(msg, base64, base64len, curl_free);
  304|     47|    }
  305|     51|  }
  306|       |
  307|     51|  return result;
  308|     51|}
curl_sasl.c:state:
  227|    223|{
  228|    223|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  229|       |  /* for debug purposes */
  230|    223|  static const char * const names[]={
  231|    223|    "STOP",
  232|    223|    "PLAIN",
  233|    223|    "LOGIN",
  234|    223|    "LOGIN_PASSWD",
  235|    223|    "EXTERNAL",
  236|    223|    "CRAMMD5",
  237|    223|    "DIGESTMD5",
  238|    223|    "DIGESTMD5_RESP",
  239|    223|    "NTLM",
  240|    223|    "NTLM_TYPE2MSG",
  241|    223|    "GSSAPI",
  242|    223|    "GSSAPI_TOKEN",
  243|    223|    "GSSAPI_NO_DATA",
  244|    223|    "OAUTH2",
  245|    223|    "OAUTH2_RESP",
  246|    223|    "GSASL",
  247|    223|    "CANCEL",
  248|    223|    "FINAL",
  249|       |    /* LAST */
  250|    223|  };
  251|       |
  252|    223|  if(sasl->state != newstate)
  253|    223|    infof(data, "SASL %p state change from %s to %s",
  254|    223|          (void *)sasl, names[sasl->state], names[newstate]);
  255|       |#else
  256|       |  (void) data;
  257|       |#endif
  258|       |
  259|    223|  sasl->state = newstate;
  260|    223|}
curl_sasl.c:get_server_message:
  265|     88|{
  266|     88|  CURLcode result = CURLE_OK;
  267|       |
  268|     88|  result = sasl->params->getmessage(data, out);
  269|     88|  if(!result && (sasl->params->flags & SASL_FLAG_BASE64)) {
  270|     88|    unsigned char *msg;
  271|     88|    size_t msglen;
  272|     88|    const char *serverdata = (const char *) Curl_bufref_ptr(out);
  273|       |
  274|     88|    if(!*serverdata || *serverdata == '=')
  275|     17|      Curl_bufref_set(out, NULL, 0, NULL);
  276|     71|    else {
  277|     71|      result = Curl_base64_decode(serverdata, &msg, &msglen);
  278|     71|      if(!result)
  279|     21|        Curl_bufref_set(out, msg, msglen, curl_free);
  280|     71|    }
  281|     88|  }
  282|     88|  return result;
  283|     88|}

Curl_thread_create:
   63|     11|{
   64|     11|  curl_thread_t t = malloc(sizeof(pthread_t));
   65|     11|  struct Curl_actual_call *ac = malloc(sizeof(struct Curl_actual_call));
   66|     11|  if(!(ac && t))
   67|      0|    goto err;
   68|       |
   69|     11|  ac->func = func;
   70|     11|  ac->arg = arg;
   71|       |
   72|     11|  if(pthread_create(t, NULL, curl_thread_create_thunk, ac) != 0)
   73|      0|    goto err;
   74|       |
   75|     11|  return t;
   76|       |
   77|      0|err:
   78|      0|  free(t);
   79|      0|  free(ac);
   80|      0|  return curl_thread_t_null;
   81|     11|}
Curl_thread_join:
   92|     11|{
   93|     11|  int ret = (pthread_join(**hnd, NULL) == 0);
   94|       |
   95|     11|  free(*hnd);
   96|     11|  *hnd = curl_thread_t_null;
   97|       |
   98|     11|  return ret;
   99|     11|}
curl_threads.c:curl_thread_create_thunk:
   50|     11|{
   51|     11|  struct Curl_actual_call *ac = arg;
   52|     11|  unsigned int (*func)(void *) = ac->func;
   53|     11|  void *real_arg = ac->arg;
   54|       |
   55|     11|  free(ac);
   56|       |
   57|     11|  (*func)(real_arg);
   58|       |
   59|     11|  return 0;
   60|     11|}

dict.c:dict_do:
  177|     51|{
  178|     51|  char *word;
  179|     51|  char *eword;
  180|     51|  char *ppath;
  181|     51|  char *database = NULL;
  182|     51|  char *strategy = NULL;
  183|     51|  char *nthdef = NULL; /* This is not part of the protocol, but required
  184|       |                          by RFC 2229 */
  185|     51|  CURLcode result = CURLE_OK;
  186|     51|  struct connectdata *conn = data->conn;
  187|     51|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  188|       |
  189|     51|  char *path = data->state.up.path;
  190|       |
  191|     51|  *done = TRUE; /* unconditionally */
  192|       |
  193|     51|  if(conn->bits.user_passwd) {
  194|       |    /* AUTH is missing */
  195|      1|  }
  196|       |
  197|     51|  if(strncasecompare(path, DICT_MATCH, sizeof(DICT_MATCH)-1) ||
  198|     51|     strncasecompare(path, DICT_MATCH2, sizeof(DICT_MATCH2)-1) ||
  199|     51|     strncasecompare(path, DICT_MATCH3, sizeof(DICT_MATCH3)-1)) {
  200|       |
  201|      7|    word = strchr(path, ':');
  202|      7|    if(word) {
  203|      7|      word++;
  204|      7|      database = strchr(word, ':');
  205|      7|      if(database) {
  206|      4|        *database++ = (char)0;
  207|      4|        strategy = strchr(database, ':');
  208|      4|        if(strategy) {
  209|      3|          *strategy++ = (char)0;
  210|      3|          nthdef = strchr(strategy, ':');
  211|      3|          if(nthdef) {
  212|      1|            *nthdef = (char)0;
  213|      1|          }
  214|      3|        }
  215|      4|      }
  216|      7|    }
  217|       |
  218|      7|    if(!word || (*word == (char)0)) {
  219|      2|      infof(data, "lookup word is missing");
  220|      2|      word = (char *)"default";
  221|      2|    }
  222|      7|    if(!database || (*database == (char)0)) {
  223|      5|      database = (char *)"!";
  224|      5|    }
  225|      7|    if(!strategy || (*strategy == (char)0)) {
  226|      6|      strategy = (char *)".";
  227|      6|    }
  228|       |
  229|      7|    eword = unescape_word(data, word);
  230|      7|    if(!eword)
  231|      0|      return CURLE_OUT_OF_MEMORY;
  232|       |
  233|      7|    result = sendf(sockfd, data,
  234|      7|                   "CLIENT " LIBCURL_NAME " " LIBCURL_VERSION "\r\n"
  235|      7|                   "MATCH "
  236|      7|                   "%s "    /* database */
  237|      7|                   "%s "    /* strategy */
  238|      7|                   "%s\r\n" /* word */
  239|      7|                   "QUIT\r\n",
  240|      7|                   database,
  241|      7|                   strategy,
  242|      7|                   eword);
  243|       |
  244|      7|    free(eword);
  245|       |
  246|      7|    if(result) {
  247|      0|      failf(data, "Failed sending DICT request");
  248|      0|      return result;
  249|      0|    }
  250|      7|    Curl_setup_transfer(data, FIRSTSOCKET, -1, FALSE, -1); /* no upload */
  251|      7|  }
  252|     44|  else if(strncasecompare(path, DICT_DEFINE, sizeof(DICT_DEFINE)-1) ||
  253|     44|          strncasecompare(path, DICT_DEFINE2, sizeof(DICT_DEFINE2)-1) ||
  254|     44|          strncasecompare(path, DICT_DEFINE3, sizeof(DICT_DEFINE3)-1)) {
  255|       |
  256|     25|    word = strchr(path, ':');
  257|     25|    if(word) {
  258|     25|      word++;
  259|     25|      database = strchr(word, ':');
  260|     25|      if(database) {
  261|      4|        *database++ = (char)0;
  262|      4|        nthdef = strchr(database, ':');
  263|      4|        if(nthdef) {
  264|      1|          *nthdef = (char)0;
  265|      1|        }
  266|      4|      }
  267|     25|    }
  268|       |
  269|     25|    if(!word || (*word == (char)0)) {
  270|      2|      infof(data, "lookup word is missing");
  271|      2|      word = (char *)"default";
  272|      2|    }
  273|     25|    if(!database || (*database == (char)0)) {
  274|     24|      database = (char *)"!";
  275|     24|    }
  276|       |
  277|     25|    eword = unescape_word(data, word);
  278|     25|    if(!eword)
  279|      0|      return CURLE_OUT_OF_MEMORY;
  280|       |
  281|     25|    result = sendf(sockfd, data,
  282|     25|                   "CLIENT " LIBCURL_NAME " " LIBCURL_VERSION "\r\n"
  283|     25|                   "DEFINE "
  284|     25|                   "%s "     /* database */
  285|     25|                   "%s\r\n"  /* word */
  286|     25|                   "QUIT\r\n",
  287|     25|                   database,
  288|     25|                   eword);
  289|       |
  290|     25|    free(eword);
  291|       |
  292|     25|    if(result) {
  293|      0|      failf(data, "Failed sending DICT request");
  294|      0|      return result;
  295|      0|    }
  296|     25|    Curl_setup_transfer(data, FIRSTSOCKET, -1, FALSE, -1);
  297|     25|  }
  298|     19|  else {
  299|       |
  300|     19|    ppath = strchr(path, '/');
  301|     19|    if(ppath) {
  302|     19|      int i;
  303|       |
  304|     19|      ppath++;
  305|    669|      for(i = 0; ppath[i]; i++) {
  306|    650|        if(ppath[i] == ':')
  307|     22|          ppath[i] = ' ';
  308|    650|      }
  309|     19|      result = sendf(sockfd, data,
  310|     19|                     "CLIENT " LIBCURL_NAME " " LIBCURL_VERSION "\r\n"
  311|     19|                     "%s\r\n"
  312|     19|                     "QUIT\r\n", ppath);
  313|     19|      if(result) {
  314|      0|        failf(data, "Failed sending DICT request");
  315|      0|        return result;
  316|      0|      }
  317|       |
  318|     19|      Curl_setup_transfer(data, FIRSTSOCKET, -1, FALSE, -1);
  319|     19|    }
  320|     19|  }
  321|       |
  322|     51|  return CURLE_OK;
  323|     51|}
dict.c:unescape_word:
  100|     32|{
  101|     32|  char *newp = NULL;
  102|     32|  char *dictp;
  103|     32|  size_t len;
  104|       |
  105|     32|  CURLcode result = Curl_urldecode(data, inputbuff, 0, &newp, &len,
  106|     32|                                   REJECT_NADA);
  107|     32|  if(!newp || result)
  108|      0|    return NULL;
  109|       |
  110|     32|  dictp = malloc(len*2 + 1); /* add one for terminating zero */
  111|     32|  if(dictp) {
  112|     32|    char *ptr;
  113|     32|    char ch;
  114|     32|    int olen = 0;
  115|       |    /* According to RFC2229 section 2.2, these letters need to be escaped with
  116|       |       \[letter] */
  117|     32|    for(ptr = newp;
  118|    747|        (ch = *ptr) != 0;
  119|    715|        ptr++) {
  120|    715|      if((ch <= 32) || (ch == 127) ||
  121|    715|          (ch == '\'') || (ch == '\"') || (ch == '\\')) {
  122|    197|        dictp[olen++] = '\\';
  123|    197|      }
  124|    715|      dictp[olen++] = ch;
  125|    715|    }
  126|     32|    dictp[olen] = 0;
  127|     32|  }
  128|     32|  free(newp);
  129|     32|  return dictp;
  130|     32|}
dict.c:sendf:
  135|     51|{
  136|     51|  ssize_t bytes_written;
  137|     51|  size_t write_len;
  138|     51|  CURLcode result = CURLE_OK;
  139|     51|  char *s;
  140|     51|  char *sptr;
  141|     51|  va_list ap;
  142|     51|  va_start(ap, fmt);
  143|     51|  s = vaprintf(fmt, ap); /* returns an allocated string */
  144|     51|  va_end(ap);
  145|     51|  if(!s)
  146|      0|    return CURLE_OUT_OF_MEMORY; /* failure */
  147|       |
  148|     51|  bytes_written = 0;
  149|     51|  write_len = strlen(s);
  150|     51|  sptr = s;
  151|       |
  152|     51|  for(;;) {
  153|       |    /* Write the buffer to the socket */
  154|     51|    result = Curl_write(data, sockfd, sptr, write_len, &bytes_written);
  155|       |
  156|     51|    if(result)
  157|      0|      break;
  158|       |
  159|     51|    Curl_debug(data, CURLINFO_DATA_OUT, sptr, (size_t)bytes_written);
  160|       |
  161|     51|    if((size_t)bytes_written != write_len) {
  162|       |      /* if not all was written at once, we must advance the pointer, decrease
  163|       |         the size left and try again! */
  164|      0|      write_len -= bytes_written;
  165|      0|      sptr += bytes_written;
  166|      0|    }
  167|     51|    else
  168|     51|      break;
  169|     51|  }
  170|       |
  171|     51|  free(s); /* free the output string */
  172|       |
  173|     51|  return result;
  174|     51|}

Curl_dedotdotify:
   54|  2.43k|{
   55|  2.43k|  size_t inlen = strlen(input);
   56|  2.43k|  char *clone;
   57|  2.43k|  size_t clen = inlen; /* the length of the cloned input */
   58|  2.43k|  char *out = malloc(inlen + 1);
   59|  2.43k|  char *outptr;
   60|  2.43k|  char *orgclone;
   61|  2.43k|  char *queryp;
   62|  2.43k|  if(!out)
   63|      0|    return NULL; /* out of memory */
   64|       |
   65|  2.43k|  *out = 0; /* null-terminates, for inputs like "./" */
   66|       |
   67|       |  /* get a cloned copy of the input */
   68|  2.43k|  clone = strdup(input);
   69|  2.43k|  if(!clone) {
   70|      0|    free(out);
   71|      0|    return NULL;
   72|      0|  }
   73|  2.43k|  orgclone = clone;
   74|  2.43k|  outptr = out;
   75|       |
   76|  2.43k|  if(!*clone) {
   77|       |    /* zero length string, return that */
   78|      0|    free(out);
   79|      0|    return clone;
   80|      0|  }
   81|       |
   82|       |  /*
   83|       |   * To handle query-parts properly, we must find it and remove it during the
   84|       |   * dotdot-operation and then append it again at the end to the output
   85|       |   * string.
   86|       |   */
   87|  2.43k|  queryp = strchr(clone, '?');
   88|  2.43k|  if(queryp)
   89|      0|    *queryp = 0;
   90|       |
   91|  4.97k|  do {
   92|       |
   93|       |    /*  A.  If the input buffer begins with a prefix of "../" or "./", then
   94|       |        remove that prefix from the input buffer; otherwise, */
   95|       |
   96|  4.97k|    if(!strncmp("./", clone, 2)) {
   97|      0|      clone += 2;
   98|      0|      clen -= 2;
   99|      0|    }
  100|  4.97k|    else if(!strncmp("../", clone, 3)) {
  101|      0|      clone += 3;
  102|      0|      clen -= 3;
  103|      0|    }
  104|       |
  105|       |    /*  B.  if the input buffer begins with a prefix of "/./" or "/.", where
  106|       |        "."  is a complete path segment, then replace that prefix with "/" in
  107|       |        the input buffer; otherwise, */
  108|  4.97k|    else if(!strncmp("/./", clone, 3)) {
  109|     88|      clone += 2;
  110|     88|      clen -= 2;
  111|     88|    }
  112|  4.88k|    else if(!strcmp("/.", clone)) {
  113|     20|      clone[1]='/';
  114|     20|      clone++;
  115|     20|      clen -= 1;
  116|     20|    }
  117|       |
  118|       |    /*  C.  if the input buffer begins with a prefix of "/../" or "/..", where
  119|       |        ".." is a complete path segment, then replace that prefix with "/" in
  120|       |        the input buffer and remove the last segment and its preceding "/" (if
  121|       |        any) from the output buffer; otherwise, */
  122|       |
  123|  4.86k|    else if(!strncmp("/../", clone, 4)) {
  124|     91|      clone += 3;
  125|     91|      clen -= 3;
  126|       |      /* remove the last segment from the output buffer */
  127|    537|      while(outptr > out) {
  128|    518|        outptr--;
  129|    518|        if(*outptr == '/')
  130|     72|          break;
  131|    518|      }
  132|     91|      *outptr = 0; /* null-terminate where it stops */
  133|     91|    }
  134|  4.77k|    else if(!strcmp("/..", clone)) {
  135|     18|      clone[2]='/';
  136|     18|      clone += 2;
  137|     18|      clen -= 2;
  138|       |      /* remove the last segment from the output buffer */
  139|    259|      while(outptr > out) {
  140|    255|        outptr--;
  141|    255|        if(*outptr == '/')
  142|     14|          break;
  143|    255|      }
  144|     18|      *outptr = 0; /* null-terminate where it stops */
  145|     18|    }
  146|       |
  147|       |    /*  D.  if the input buffer consists only of "." or "..", then remove
  148|       |        that from the input buffer; otherwise, */
  149|       |
  150|  4.75k|    else if(!strcmp(".", clone) || !strcmp("..", clone)) {
  151|      0|      *clone = 0;
  152|      0|      *out = 0;
  153|      0|    }
  154|       |
  155|  4.75k|    else {
  156|       |      /*  E.  move the first path segment in the input buffer to the end of
  157|       |          the output buffer, including the initial "/" character (if any) and
  158|       |          any subsequent characters up to, but not including, the next "/"
  159|       |          character or the end of the input buffer. */
  160|       |
  161|  55.6k|      do {
  162|  55.6k|        *outptr++ = *clone++;
  163|  55.6k|        clen--;
  164|  55.6k|      } while(*clone && (*clone != '/'));
  165|  4.75k|      *outptr = 0;
  166|  4.75k|    }
  167|       |
  168|  4.97k|  } while(*clone);
  169|       |
  170|  2.43k|  if(queryp) {
  171|      0|    size_t qlen;
  172|       |    /* There was a query part, append that to the output. The 'clone' string
  173|       |       may now have been altered so we copy from the original input string
  174|       |       from the correct index. */
  175|      0|    size_t oindex = queryp - orgclone;
  176|      0|    qlen = strlen(&input[oindex]);
  177|      0|    memcpy(outptr, &input[oindex], qlen + 1); /* include the end zero byte */
  178|      0|  }
  179|       |
  180|  2.43k|  free(orgclone);
  181|  2.43k|  return out;
  182|  2.43k|}

Curl_dyn_init:
   39|  22.2k|{
   40|  22.2k|  DEBUGASSERT(s);
   41|  22.2k|  DEBUGASSERT(toobig);
   42|  22.2k|  s->bufr = NULL;
   43|  22.2k|  s->leng = 0;
   44|  22.2k|  s->allc = 0;
   45|  22.2k|  s->toobig = toobig;
   46|  22.2k|#ifdef DEBUGBUILD
   47|  22.2k|  s->init = DYNINIT;
   48|  22.2k|#endif
   49|  22.2k|}
Curl_dyn_free:
   56|  16.2k|{
   57|  16.2k|  DEBUGASSERT(s);
   58|  16.2k|  Curl_safefree(s->bufr);
   59|  16.2k|  s->leng = s->allc = 0;
   60|  16.2k|}
Curl_dyn_reset:
  120|  26.9k|{
  121|  26.9k|  DEBUGASSERT(s);
  122|  26.9k|  DEBUGASSERT(s->init == DYNINIT);
  123|  26.9k|  DEBUGASSERT(!s->leng || s->bufr);
  124|  26.9k|  if(s->leng)
  125|  23.2k|    s->bufr[0] = 0;
  126|  26.9k|  s->leng = 0;
  127|  26.9k|}
Curl_dyn_addn:
  160|   826k|{
  161|   826k|  DEBUGASSERT(s);
  162|   826k|  DEBUGASSERT(s->init == DYNINIT);
  163|   826k|  DEBUGASSERT(!s->leng || s->bufr);
  164|   826k|  return dyn_nappend(s, mem, len);
  165|   826k|}
Curl_dyn_add:
  171|  2.63k|{
  172|  2.63k|  size_t n = strlen(str);
  173|  2.63k|  DEBUGASSERT(s);
  174|  2.63k|  DEBUGASSERT(s->init == DYNINIT);
  175|  2.63k|  DEBUGASSERT(!s->leng || s->bufr);
  176|  2.63k|  return dyn_nappend(s, (unsigned char *)str, n);
  177|  2.63k|}
Curl_dyn_vaddf:
  183|  10.2k|{
  184|  10.2k|#ifdef BUILDING_LIBCURL
  185|  10.2k|  int rc;
  186|  10.2k|  DEBUGASSERT(s);
  187|  10.2k|  DEBUGASSERT(s->init == DYNINIT);
  188|  10.2k|  DEBUGASSERT(!s->leng || s->bufr);
  189|  10.2k|  rc = Curl_dyn_vprintf(s, fmt, ap);
  190|       |
  191|  10.2k|  if(!rc)
  192|  10.2k|    return CURLE_OK;
  193|       |#else
  194|       |  char *str;
  195|       |  str = vaprintf(fmt, ap); /* this allocs a new string to append */
  196|       |
  197|       |  if(str) {
  198|       |    CURLcode result = dyn_nappend(s, (unsigned char *)str, strlen(str));
  199|       |    free(str);
  200|       |    return result;
  201|       |  }
  202|       |  /* If we failed, we cleanup the whole buffer and return error */
  203|       |  Curl_dyn_free(s);
  204|       |#endif
  205|      0|  return CURLE_OUT_OF_MEMORY;
  206|  10.2k|}
Curl_dyn_addf:
  212|  6.27k|{
  213|  6.27k|  CURLcode result;
  214|  6.27k|  va_list ap;
  215|  6.27k|  DEBUGASSERT(s);
  216|  6.27k|  DEBUGASSERT(s->init == DYNINIT);
  217|  6.27k|  DEBUGASSERT(!s->leng || s->bufr);
  218|  6.27k|  va_start(ap, fmt);
  219|  6.27k|  result = Curl_dyn_vaddf(s, fmt, ap);
  220|  6.27k|  va_end(ap);
  221|  6.27k|  return result;
  222|  6.27k|}
Curl_dyn_ptr:
  228|  40.8k|{
  229|  40.8k|  DEBUGASSERT(s);
  230|  40.8k|  DEBUGASSERT(s->init == DYNINIT);
  231|  40.8k|  DEBUGASSERT(!s->leng || s->bufr);
  232|  40.8k|  return s->bufr;
  233|  40.8k|}
Curl_dyn_len:
  250|  94.2k|{
  251|  94.2k|  DEBUGASSERT(s);
  252|  94.2k|  DEBUGASSERT(s->init == DYNINIT);
  253|  94.2k|  DEBUGASSERT(!s->leng || s->bufr);
  254|  94.2k|  return s->leng;
  255|  94.2k|}
dynbuf.c:dyn_nappend:
   67|   828k|{
   68|   828k|  size_t indx = s->leng;
   69|   828k|  size_t a = s->allc;
   70|   828k|  size_t fit = len + indx + 1; /* new string + old string + zero byte */
   71|       |
   72|       |  /* try to detect if there's rubbish in the struct */
   73|   828k|  DEBUGASSERT(s->init == DYNINIT);
   74|   828k|  DEBUGASSERT(s->toobig);
   75|   828k|  DEBUGASSERT(indx < s->toobig);
   76|   828k|  DEBUGASSERT(!s->leng || s->bufr);
   77|       |
   78|   828k|  if(fit > s->toobig) {
   79|      0|    Curl_dyn_free(s);
   80|      0|    return CURLE_OUT_OF_MEMORY;
   81|      0|  }
   82|   828k|  else if(!a) {
   83|  17.0k|    DEBUGASSERT(!indx);
   84|       |    /* first invoke */
   85|  17.0k|    if(fit < MIN_FIRST_ALLOC)
   86|  16.8k|      a = MIN_FIRST_ALLOC;
   87|    220|    else
   88|    220|      a = fit;
   89|  17.0k|  }
   90|   811k|  else {
   91|   822k|    while(a < fit)
   92|  10.6k|      a *= 2;
   93|   811k|  }
   94|       |
   95|   828k|  if(a != s->allc) {
   96|       |    /* this logic is not using Curl_saferealloc() to make the tool not have to
   97|       |       include that as well when it uses this code */
   98|  27.2k|    void *p = realloc(s->bufr, a);
   99|  27.2k|    if(!p) {
  100|      0|      Curl_safefree(s->bufr);
  101|      0|      s->leng = s->allc = 0;
  102|      0|      return CURLE_OUT_OF_MEMORY;
  103|      0|    }
  104|  27.2k|    s->bufr = p;
  105|  27.2k|    s->allc = a;
  106|  27.2k|  }
  107|       |
  108|   828k|  if(len)
  109|   825k|    memcpy(&s->bufr[indx], mem, len);
  110|   828k|  s->leng = indx + len;
  111|   828k|  s->bufr[s->leng] = 0;
  112|   828k|  return CURLE_OK;
  113|   828k|}

curl_global_init:
  216|      1|{
  217|      1|  return global_init(flags, TRUE);
  218|      1|}
curl_easy_init:
  290|  6.05k|{
  291|  6.05k|  CURLcode result;
  292|  6.05k|  struct Curl_easy *data;
  293|       |
  294|       |  /* Make sure we inited the global SSL stuff */
  295|  6.05k|  if(!initialized) {
  296|      1|    result = curl_global_init(CURL_GLOBAL_DEFAULT);
  297|      1|    if(result) {
  298|       |      /* something in the global init failed, return nothing */
  299|      0|      DEBUGF(fprintf(stderr, "Error: curl_global_init failed\n"));
  300|      0|      return NULL;
  301|      0|    }
  302|      1|  }
  303|       |
  304|       |  /* We use curl_open() with undefined URL so far */
  305|  6.05k|  result = Curl_open(&data);
  306|  6.05k|  if(result) {
  307|      0|    DEBUGF(fprintf(stderr, "Error: Curl_open failed\n"));
  308|      0|    return NULL;
  309|      0|  }
  310|       |
  311|  6.05k|  return data;
  312|  6.05k|}
curl_easy_cleanup:
  735|  3.08k|{
  736|  3.08k|  SIGPIPE_VARIABLE(pipe_st);
  737|       |
  738|  3.08k|  if(!data)
  739|      0|    return;
  740|       |
  741|  3.08k|  sigpipe_ignore(data, &pipe_st);
  742|  3.08k|  Curl_close(&data);
  743|  3.08k|  sigpipe_restore(&pipe_st);
  744|  3.08k|}
easy.c:global_init:
  136|      1|{
  137|      1|  if(initialized++)
  138|      0|    return CURLE_OK;
  139|       |
  140|      1|  if(memoryfuncs) {
  141|       |    /* Setup the default memory functions here (again) */
  142|      1|    Curl_cmalloc = (curl_malloc_callback)malloc;
  143|      1|    Curl_cfree = (curl_free_callback)free;
  144|      1|    Curl_crealloc = (curl_realloc_callback)realloc;
  145|      1|    Curl_cstrdup = (curl_strdup_callback)system_strdup;
  146|      1|    Curl_ccalloc = (curl_calloc_callback)calloc;
  147|       |#if defined(WIN32) && defined(UNICODE)
  148|       |    Curl_cwcsdup = (curl_wcsdup_callback)_wcsdup;
  149|       |#endif
  150|      1|  }
  151|       |
  152|      1|  if(!Curl_ssl_init()) {
  153|      0|    DEBUGF(fprintf(stderr, "Error: Curl_ssl_init failed\n"));
  154|      0|    goto fail;
  155|      0|  }
  156|       |
  157|       |#ifdef WIN32
  158|       |  if(Curl_win32_init(flags)) {
  159|       |    DEBUGF(fprintf(stderr, "Error: win32_init failed\n"));
  160|       |    goto fail;
  161|       |  }
  162|       |#endif
  163|       |
  164|       |#ifdef __AMIGA__
  165|       |  if(!Curl_amiga_init()) {
  166|       |    DEBUGF(fprintf(stderr, "Error: Curl_amiga_init failed\n"));
  167|       |    goto fail;
  168|       |  }
  169|       |#endif
  170|       |
  171|       |#ifdef NETWARE
  172|       |  if(netware_init()) {
  173|       |    DEBUGF(fprintf(stderr, "Warning: LONG namespace not available\n"));
  174|       |  }
  175|       |#endif
  176|       |
  177|      1|  if(Curl_resolver_global_init()) {
  178|      0|    DEBUGF(fprintf(stderr, "Error: resolver_global_init failed\n"));
  179|      0|    goto fail;
  180|      0|  }
  181|       |
  182|       |#if defined(USE_SSH)
  183|       |  if(Curl_ssh_init()) {
  184|       |    goto fail;
  185|       |  }
  186|       |#endif
  187|       |
  188|       |#ifdef USE_WOLFSSH
  189|       |  if(WS_SUCCESS != wolfSSH_Init()) {
  190|       |    DEBUGF(fprintf(stderr, "Error: wolfSSH_Init failed\n"));
  191|       |    return CURLE_FAILED_INIT;
  192|       |  }
  193|       |#endif
  194|       |
  195|      1|  init_flags = flags;
  196|       |
  197|      1|#ifdef DEBUGBUILD
  198|      1|  if(getenv("CURL_GLOBAL_INIT"))
  199|       |    /* alloc data that will leak if *cleanup() is not called! */
  200|      0|    leakpointer = malloc(1);
  201|      1|#endif
  202|       |
  203|      1|  return CURLE_OK;
  204|       |
  205|      0|  fail:
  206|      0|  initialized--; /* undo the increase */
  207|      0|  return CURLE_FAILED_INIT;
  208|      1|}

Curl_isunreserved:
   45|  29.0k|{
   46|  29.0k|  switch(in) {
   47|  2.98k|    case '0': case '1': case '2': case '3': case '4':
   48|  4.19k|    case '5': case '6': case '7': case '8': case '9':
   49|  8.25k|    case 'a': case 'b': case 'c': case 'd': case 'e':
   50|  9.44k|    case 'f': case 'g': case 'h': case 'i': case 'j':
   51|  12.0k|    case 'k': case 'l': case 'm': case 'n': case 'o':
   52|  14.8k|    case 'p': case 'q': case 'r': case 's': case 't':
   53|  16.3k|    case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
   54|  16.9k|    case 'A': case 'B': case 'C': case 'D': case 'E':
   55|  17.4k|    case 'F': case 'G': case 'H': case 'I': case 'J':
   56|  17.7k|    case 'K': case 'L': case 'M': case 'N': case 'O':
   57|  18.5k|    case 'P': case 'Q': case 'R': case 'S': case 'T':
   58|  19.0k|    case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
   59|  20.2k|    case '-': case '.': case '_': case '~':
   60|  20.2k|      return TRUE;
   61|  8.81k|    default:
   62|  8.81k|      break;
   63|  29.0k|  }
   64|  8.81k|  return FALSE;
   65|  29.0k|}
curl_easy_escape:
   81|     53|{
   82|     53|  size_t length;
   83|     53|  CURLcode result;
   84|     53|  struct dynbuf d;
   85|       |
   86|     53|  if(inlength < 0)
   87|      0|    return NULL;
   88|       |
   89|     53|  Curl_dyn_init(&d, CURL_MAX_INPUT_LENGTH * 3);
   90|       |
   91|     53|  length = (inlength?(size_t)inlength:strlen(string));
   92|     53|  if(!length)
   93|      0|    return strdup("");
   94|       |
   95|    599|  while(length--) {
   96|    546|    unsigned char in = *string; /* we need to treat the characters unsigned */
   97|       |
   98|    546|    if(Curl_isunreserved(in)) {
   99|       |      /* append this */
  100|    359|      if(Curl_dyn_addn(&d, &in, 1))
  101|      0|        return NULL;
  102|    359|    }
  103|    187|    else {
  104|       |      /* encode it */
  105|    187|      char encoded[4];
  106|    187|      result = Curl_convert_to_network(data, (char *)&in, 1);
  107|    187|      if(result) {
  108|       |        /* Curl_convert_to_network calls failf if unsuccessful */
  109|      0|        Curl_dyn_free(&d);
  110|      0|        return NULL;
  111|      0|      }
  112|       |
  113|    187|      msnprintf(encoded, sizeof(encoded), "%%%02X", in);
  114|    187|      if(Curl_dyn_add(&d, encoded))
  115|      0|        return NULL;
  116|    187|    }
  117|    546|    string++;
  118|    546|  }
  119|       |
  120|     53|  return Curl_dyn_ptr(&d);
  121|     53|}
Curl_urldecode:
  146|  1.94k|{
  147|  1.94k|  size_t alloc;
  148|  1.94k|  char *ns;
  149|  1.94k|  size_t strindex = 0;
  150|  1.94k|  unsigned long hex;
  151|  1.94k|  CURLcode result = CURLE_OK;
  152|       |
  153|  1.94k|  DEBUGASSERT(string);
  154|  1.94k|  DEBUGASSERT(ctrl >= REJECT_NADA); /* crash on TRUE/FALSE */
  155|       |
  156|  1.94k|  alloc = (length?length:strlen(string)) + 1;
  157|  1.94k|  ns = malloc(alloc);
  158|       |
  159|  1.94k|  if(!ns)
  160|      0|    return CURLE_OUT_OF_MEMORY;
  161|       |
  162|  50.2k|  while(--alloc > 0) {
  163|  48.2k|    unsigned char in = *string;
  164|  48.2k|    if(('%' == in) && (alloc > 2) &&
  165|  48.2k|       ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
  166|       |      /* this is two hexadecimal digits following a '%' */
  167|    425|      char hexstr[3];
  168|    425|      char *ptr;
  169|    425|      hexstr[0] = string[1];
  170|    425|      hexstr[1] = string[2];
  171|    425|      hexstr[2] = 0;
  172|       |
  173|    425|      hex = strtoul(hexstr, &ptr, 16);
  174|       |
  175|    425|      in = curlx_ultouc(hex); /* this long is never bigger than 255 anyway */
  176|       |
  177|    425|      if(data) {
  178|     18|        result = Curl_convert_from_network(data, (char *)&in, 1);
  179|     18|        if(result) {
  180|       |          /* Curl_convert_from_network calls failf if unsuccessful */
  181|      0|          free(ns);
  182|      0|          return result;
  183|      0|        }
  184|     18|      }
  185|       |
  186|    425|      string += 2;
  187|    425|      alloc -= 2;
  188|    425|    }
  189|       |
  190|  48.2k|    if(((ctrl == REJECT_CTRL) && (in < 0x20)) ||
  191|  48.2k|       ((ctrl == REJECT_ZERO) && (in == 0))) {
  192|      9|      free(ns);
  193|      9|      return CURLE_URL_MALFORMAT;
  194|      9|    }
  195|       |
  196|  48.2k|    ns[strindex++] = in;
  197|  48.2k|    string++;
  198|  48.2k|  }
  199|  1.93k|  ns[strindex] = 0; /* terminate it */
  200|       |
  201|  1.93k|  if(olen)
  202|       |    /* store output size */
  203|    484|    *olen = strindex;
  204|       |
  205|       |  /* store output string */
  206|  1.93k|  *ostring = ns;
  207|       |
  208|  1.93k|  return CURLE_OK;
  209|  1.94k|}
curl_free:
  244|    103|{
  245|    103|  free(p);
  246|    103|}

file.c:file_setup_connection:
  124|     48|{
  125|     48|  (void)conn;
  126|       |  /* allocate the FILE specific struct */
  127|     48|  data->req.p.file = calloc(1, sizeof(struct FILEPROTO));
  128|     48|  if(!data->req.p.file)
  129|      0|    return CURLE_OUT_OF_MEMORY;
  130|       |
  131|     48|  return CURLE_OK;
  132|     48|}
file.c:file_connect:
  140|     48|{
  141|     48|  char *real_path;
  142|     48|  struct FILEPROTO *file = data->req.p.file;
  143|     48|  int fd;
  144|       |#ifdef DOS_FILESYSTEM
  145|       |  size_t i;
  146|       |  char *actual_path;
  147|       |#endif
  148|     48|  size_t real_path_len;
  149|       |
  150|     48|  CURLcode result = Curl_urldecode(data, data->state.up.path, 0, &real_path,
  151|     48|                                   &real_path_len, REJECT_ZERO);
  152|     48|  if(result)
  153|      1|    return result;
  154|       |
  155|       |#ifdef DOS_FILESYSTEM
  156|       |  /* If the first character is a slash, and there's
  157|       |     something that looks like a drive at the beginning of
  158|       |     the path, skip the slash.  If we remove the initial
  159|       |     slash in all cases, paths without drive letters end up
  160|       |     relative to the current directory which isn't how
  161|       |     browsers work.
  162|       |
  163|       |     Some browsers accept | instead of : as the drive letter
  164|       |     separator, so we do too.
  165|       |
  166|       |     On other platforms, we need the slash to indicate an
  167|       |     absolute pathname.  On Windows, absolute paths start
  168|       |     with a drive letter.
  169|       |  */
  170|       |  actual_path = real_path;
  171|       |  if((actual_path[0] == '/') &&
  172|       |      actual_path[1] &&
  173|       |     (actual_path[2] == ':' || actual_path[2] == '|')) {
  174|       |    actual_path[2] = ':';
  175|       |    actual_path++;
  176|       |    real_path_len--;
  177|       |  }
  178|       |
  179|       |  /* change path separators from '/' to '\\' for DOS, Windows and OS/2 */
  180|       |  for(i = 0; i < real_path_len; ++i)
  181|       |    if(actual_path[i] == '/')
  182|       |      actual_path[i] = '\\';
  183|       |    else if(!actual_path[i]) { /* binary zero */
  184|       |      Curl_safefree(real_path);
  185|       |      return CURLE_URL_MALFORMAT;
  186|       |    }
  187|       |
  188|       |  fd = open_readonly(actual_path, O_RDONLY|O_BINARY);
  189|       |  file->path = actual_path;
  190|       |#else
  191|     47|  if(memchr(real_path, 0, real_path_len)) {
  192|       |    /* binary zeroes indicate foul play */
  193|      0|    Curl_safefree(real_path);
  194|      0|    return CURLE_URL_MALFORMAT;
  195|      0|  }
  196|       |
  197|     47|  fd = open_readonly(real_path, O_RDONLY);
  198|     47|  file->path = real_path;
  199|     47|#endif
  200|     47|  file->freepath = real_path; /* free this when done */
  201|       |
  202|     47|  file->fd = fd;
  203|     47|  if(!data->set.upload && (fd == -1)) {
  204|      5|    failf(data, "Couldn't open file %s", data->state.up.path);
  205|      5|    file_done(data, CURLE_FILE_COULDNT_READ_FILE, FALSE);
  206|      5|    return CURLE_FILE_COULDNT_READ_FILE;
  207|      5|  }
  208|     42|  *done = TRUE;
  209|       |
  210|     42|  return CURLE_OK;
  211|     47|}
file.c:file_done:
  215|     95|{
  216|     95|  struct FILEPROTO *file = data->req.p.file;
  217|     95|  (void)status; /* not used */
  218|     95|  (void)premature; /* not used */
  219|       |
  220|     95|  if(file) {
  221|     95|    Curl_safefree(file->freepath);
  222|     95|    file->path = NULL;
  223|     95|    if(file->fd != -1)
  224|     37|      close(file->fd);
  225|     95|    file->fd = -1;
  226|     95|  }
  227|       |
  228|     95|  return CURLE_OK;
  229|     95|}
file.c:file_disconnect:
  234|     48|{
  235|     48|  (void)dead_connection; /* not used */
  236|     48|  (void)conn;
  237|     48|  return file_done(data, 0, 0);
  238|     48|}
file.c:file_do:
  363|     42|{
  364|       |  /* This implementation ignores the host name in conformance with
  365|       |     RFC 1738. Only local files (reachable via the standard file system)
  366|       |     are supported. This means that files on remotely mounted directories
  367|       |     (via NFS, Samba, NT sharing) can be accessed through a file:// URL
  368|       |  */
  369|     42|  CURLcode result = CURLE_OK;
  370|     42|  struct_stat statbuf; /* struct_stat instead of struct stat just to allow the
  371|       |                          Windows version to have a different struct without
  372|       |                          having to redefine the simple word 'stat' */
  373|     42|  curl_off_t expected_size = -1;
  374|     42|  bool size_known;
  375|     42|  bool fstated = FALSE;
  376|     42|  char *buf = data->state.buffer;
  377|     42|  curl_off_t bytecount = 0;
  378|     42|  int fd;
  379|     42|  struct FILEPROTO *file;
  380|       |
  381|     42|  *done = TRUE; /* unconditionally */
  382|       |
  383|     42|  Curl_pgrsStartNow(data);
  384|       |
  385|     42|  if(data->set.upload)
  386|      7|    return file_upload(data);
  387|       |
  388|     35|  file = data->req.p.file;
  389|       |
  390|       |  /* get the fd from the connection phase */
  391|     35|  fd = file->fd;
  392|       |
  393|       |  /* VMS: This only works reliable for STREAMLF files */
  394|     35|  if(-1 != fstat(fd, &statbuf)) {
  395|     35|    if(!S_ISDIR(statbuf.st_mode))
  396|      6|      expected_size = statbuf.st_size;
  397|       |    /* and store the modification time */
  398|     35|    data->info.filetime = statbuf.st_mtime;
  399|     35|    fstated = TRUE;
  400|     35|  }
  401|       |
  402|     35|  if(fstated && !data->state.range && data->set.timecondition) {
  403|      0|    if(!Curl_meets_timecondition(data, data->info.filetime)) {
  404|      0|      *done = TRUE;
  405|      0|      return CURLE_OK;
  406|      0|    }
  407|      0|  }
  408|       |
  409|     35|  if(fstated) {
  410|     35|    time_t filetime;
  411|     35|    struct tm buffer;
  412|     35|    const struct tm *tm = &buffer;
  413|     35|    char header[80];
  414|     35|    int headerlen;
  415|     35|    char accept_ranges[24]= { "Accept-ranges: bytes\r\n" };
  416|     35|    if(expected_size >= 0) {
  417|      6|      headerlen = msnprintf(header, sizeof(header),
  418|      6|                "Content-Length: %" CURL_FORMAT_CURL_OFF_T "\r\n",
  419|      6|                expected_size);
  420|      6|      result = Curl_client_write(data, CLIENTWRITE_HEADER, header, headerlen);
  421|      6|      if(result)
  422|      0|        return result;
  423|       |
  424|      6|      result = Curl_client_write(data, CLIENTWRITE_HEADER,
  425|      6|                                 accept_ranges, strlen(accept_ranges));
  426|      6|      if(result != CURLE_OK)
  427|      0|        return result;
  428|      6|    }
  429|       |
  430|     35|    filetime = (time_t)statbuf.st_mtime;
  431|     35|    result = Curl_gmtime(filetime, &buffer);
  432|     35|    if(result)
  433|      0|      return result;
  434|       |
  435|       |    /* format: "Tue, 15 Nov 1994 12:45:26 GMT" */
  436|     35|    headerlen = msnprintf(header, sizeof(header),
  437|     35|              "Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n%s",
  438|     35|              Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
  439|     35|              tm->tm_mday,
  440|     35|              Curl_month[tm->tm_mon],
  441|     35|              tm->tm_year + 1900,
  442|     35|              tm->tm_hour,
  443|     35|              tm->tm_min,
  444|     35|              tm->tm_sec,
  445|     35|              data->set.opt_no_body ? "": "\r\n");
  446|     35|    result = Curl_client_write(data, CLIENTWRITE_HEADER, header, headerlen);
  447|     35|    if(result)
  448|      0|      return result;
  449|       |    /* set the file size to make it available post transfer */
  450|     35|    Curl_pgrsSetDownloadSize(data, expected_size);
  451|     35|    if(data->set.opt_no_body)
  452|      2|      return result;
  453|     35|  }
  454|       |
  455|       |  /* Check whether file range has been specified */
  456|     33|  result = Curl_range(data);
  457|     33|  if(result)
  458|      5|    return result;
  459|       |
  460|       |  /* Adjust the start offset in case we want to get the N last bytes
  461|       |   * of the stream if the filesize could be determined */
  462|     28|  if(data->state.resume_from < 0) {
  463|      4|    if(!fstated) {
  464|      0|      failf(data, "Can't get the size of file.");
  465|      0|      return CURLE_READ_ERROR;
  466|      0|    }
  467|      4|    data->state.resume_from += (curl_off_t)statbuf.st_size;
  468|      4|  }
  469|       |
  470|     28|  if(data->state.resume_from > 0) {
  471|       |    /* We check explicitly if we have a start offset, because
  472|       |     * expected_size may be -1 if we don't know how large the file is,
  473|       |     * in which case we should not adjust it. */
  474|      8|    if(data->state.resume_from <= expected_size)
  475|      0|      expected_size -= data->state.resume_from;
  476|      8|    else {
  477|      8|      failf(data, "failed to resume file:// transfer");
  478|      8|      return CURLE_BAD_DOWNLOAD_RESUME;
  479|      8|    }
  480|      8|  }
  481|       |
  482|       |  /* A high water mark has been specified so we obey... */
  483|     20|  if(data->req.maxdownload > 0)
  484|     15|    expected_size = data->req.maxdownload;
  485|       |
  486|     20|  if(!fstated || (expected_size <= 0))
  487|      5|    size_known = FALSE;
  488|     15|  else
  489|     15|    size_known = TRUE;
  490|       |
  491|       |  /* The following is a shortcut implementation of file reading
  492|       |     this is both more efficient than the former call to download() and
  493|       |     it avoids problems with select() and recv() on file descriptors
  494|       |     in Winsock */
  495|     20|  if(size_known)
  496|     15|    Curl_pgrsSetDownloadSize(data, expected_size);
  497|       |
  498|     20|  if(data->state.resume_from) {
  499|      2|    if(data->state.resume_from !=
  500|      2|       lseek(fd, data->state.resume_from, SEEK_SET))
  501|      2|      return CURLE_BAD_DOWNLOAD_RESUME;
  502|      2|  }
  503|       |
  504|     18|  Curl_pgrsTime(data, TIMER_STARTTRANSFER);
  505|       |
  506|     21|  while(!result) {
  507|     21|    ssize_t nread;
  508|       |    /* Don't fill a whole buffer if we want less than all data */
  509|     21|    size_t bytestoread;
  510|       |
  511|     21|    if(size_known) {
  512|     15|      bytestoread = (expected_size < data->set.buffer_size) ?
  513|     10|        curlx_sotouz(expected_size) : (size_t)data->set.buffer_size;
  514|     15|    }
  515|      6|    else
  516|      6|      bytestoread = data->set.buffer_size-1;
  517|       |
  518|     21|    nread = read(fd, buf, bytestoread);
  519|       |
  520|     21|    if(nread > 0)
  521|      3|      buf[nread] = 0;
  522|       |
  523|     21|    if(nread <= 0 || (size_known && (expected_size == 0)))
  524|     18|      break;
  525|       |
  526|      3|    bytecount += nread;
  527|      3|    if(size_known)
  528|      2|      expected_size -= nread;
  529|       |
  530|      3|    result = Curl_client_write(data, CLIENTWRITE_BODY, buf, nread);
  531|      3|    if(result)
  532|      0|      return result;
  533|       |
  534|      3|    Curl_pgrsSetDownloadCounter(data, bytecount);
  535|       |
  536|      3|    if(Curl_pgrsUpdate(data))
  537|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  538|      3|    else
  539|      3|      result = Curl_speedcheck(data, Curl_now());
  540|      3|  }
  541|     18|  if(Curl_pgrsUpdate(data))
  542|      0|    result = CURLE_ABORTED_BY_CALLBACK;
  543|       |
  544|     18|  return result;
  545|     18|}
file.c:file_upload:
  247|      7|{
  248|      7|  struct FILEPROTO *file = data->req.p.file;
  249|      7|  const char *dir = strchr(file->path, DIRSEP);
  250|      7|  int fd;
  251|      7|  int mode;
  252|      7|  CURLcode result = CURLE_OK;
  253|      7|  char *buf = data->state.buffer;
  254|      7|  curl_off_t bytecount = 0;
  255|      7|  struct_stat file_stat;
  256|      7|  const char *buf2;
  257|       |
  258|       |  /*
  259|       |   * Since FILE: doesn't do the full init, we need to provide some extra
  260|       |   * assignments here.
  261|       |   */
  262|      7|  data->req.upload_fromhere = buf;
  263|       |
  264|      7|  if(!dir)
  265|      0|    return CURLE_FILE_COULDNT_READ_FILE; /* fix: better error code */
  266|       |
  267|      7|  if(!dir[1])
  268|      1|    return CURLE_FILE_COULDNT_READ_FILE; /* fix: better error code */
  269|       |
  270|       |#ifdef O_BINARY
  271|       |#define MODE_DEFAULT O_WRONLY|O_CREAT|O_BINARY
  272|       |#else
  273|      6|#define MODE_DEFAULT O_WRONLY|O_CREAT
  274|      6|#endif
  275|       |
  276|      6|  if(data->state.resume_from)
  277|      0|    mode = MODE_DEFAULT|O_APPEND;
  278|      6|  else
  279|      6|    mode = MODE_DEFAULT|O_TRUNC;
  280|       |
  281|      6|  fd = open(file->path, mode, data->set.new_file_perms);
  282|      6|  if(fd < 0) {
  283|      3|    failf(data, "Can't open %s for writing", file->path);
  284|      3|    return CURLE_WRITE_ERROR;
  285|      3|  }
  286|       |
  287|      3|  if(-1 != data->state.infilesize)
  288|       |    /* known size of data to "upload" */
  289|      2|    Curl_pgrsSetUploadSize(data, data->state.infilesize);
  290|       |
  291|       |  /* treat the negative resume offset value as the case of "-" */
  292|      3|  if(data->state.resume_from < 0) {
  293|      0|    if(fstat(fd, &file_stat)) {
  294|      0|      close(fd);
  295|      0|      failf(data, "Can't get the size of %s", file->path);
  296|      0|      return CURLE_WRITE_ERROR;
  297|      0|    }
  298|      0|    data->state.resume_from = (curl_off_t)file_stat.st_size;
  299|      0|  }
  300|       |
  301|      4|  while(!result) {
  302|      4|    size_t nread;
  303|      4|    size_t nwrite;
  304|      4|    size_t readcount;
  305|      4|    result = Curl_fillreadbuffer(data, data->set.buffer_size, &readcount);
  306|      4|    if(result)
  307|      2|      break;
  308|       |
  309|      2|    if(!readcount)
  310|      1|      break;
  311|       |
  312|      1|    nread = readcount;
  313|       |
  314|       |    /*skip bytes before resume point*/
  315|      1|    if(data->state.resume_from) {
  316|      0|      if((curl_off_t)nread <= data->state.resume_from) {
  317|      0|        data->state.resume_from -= nread;
  318|      0|        nread = 0;
  319|      0|        buf2 = buf;
  320|      0|      }
  321|      0|      else {
  322|      0|        buf2 = buf + data->state.resume_from;
  323|      0|        nread -= (size_t)data->state.resume_from;
  324|      0|        data->state.resume_from = 0;
  325|      0|      }
  326|      0|    }
  327|      1|    else
  328|      1|      buf2 = buf;
  329|       |
  330|       |    /* write the data to the target */
  331|      1|    nwrite = write(fd, buf2, nread);
  332|      1|    if(nwrite != nread) {
  333|      0|      result = CURLE_SEND_ERROR;
  334|      0|      break;
  335|      0|    }
  336|       |
  337|      1|    bytecount += nread;
  338|       |
  339|      1|    Curl_pgrsSetUploadCounter(data, bytecount);
  340|       |
  341|      1|    if(Curl_pgrsUpdate(data))
  342|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  343|      1|    else
  344|      1|      result = Curl_speedcheck(data, Curl_now());
  345|      1|  }
  346|      3|  if(!result && Curl_pgrsUpdate(data))
  347|      0|    result = CURLE_ABORTED_BY_CALLBACK;
  348|       |
  349|      3|  close(fd);
  350|       |
  351|      3|  return result;
  352|      3|}

Curl_fileinfo_cleanup:
   37|      4|{
   38|      4|  if(!finfo)
   39|      4|    return;
   40|       |
   41|      0|  Curl_safefree(finfo->info.b_data);
   42|      0|  free(finfo);
   43|      0|}

ftp.c:ftp_readresp:
  554|  1.30k|{
  555|  1.30k|  int code;
  556|  1.30k|  CURLcode result = Curl_pp_readresp(data, sockfd, pp, &code, size);
  557|       |
  558|       |#ifdef HAVE_GSSAPI
  559|       |  {
  560|       |    struct connectdata *conn = data->conn;
  561|       |    char * const buf = data->state.buffer;
  562|       |
  563|       |    /* handle the security-oriented responses 6xx ***/
  564|       |    switch(code) {
  565|       |    case 631:
  566|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_SAFE);
  567|       |      break;
  568|       |    case 632:
  569|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_PRIVATE);
  570|       |      break;
  571|       |    case 633:
  572|       |      code = Curl_sec_read_msg(data, conn, buf, PROT_CONFIDENTIAL);
  573|       |      break;
  574|       |    default:
  575|       |      /* normal ftp stuff we pass through! */
  576|       |      break;
  577|       |    }
  578|       |  }
  579|       |#endif
  580|       |
  581|       |  /* store the latest code for later retrieval */
  582|  1.30k|  data->info.httpcode = code;
  583|       |
  584|  1.30k|  if(ftpcode)
  585|  1.30k|    *ftpcode = code;
  586|       |
  587|  1.30k|  if(421 == code) {
  588|       |    /* 421 means "Service not available, closing control connection." and FTP
  589|       |     * servers use it to signal that idle session timeout has been exceeded.
  590|       |     * If we ignored the response, it could end up hanging in some cases.
  591|       |     *
  592|       |     * This response code can come at any point so having it treated
  593|       |     * generically is a good idea.
  594|       |     */
  595|      3|    infof(data, "We got a 421 - timeout!");
  596|      3|    state(data, FTP_STOP);
  597|      3|    return CURLE_OPERATION_TIMEDOUT;
  598|      3|  }
  599|       |
  600|  1.30k|  return result;
  601|  1.30k|}
ftp.c:_state:
  761|    707|{
  762|    707|  struct connectdata *conn = data->conn;
  763|    707|  struct ftp_conn *ftpc = &conn->proto.ftpc;
  764|       |
  765|    707|#if defined(DEBUGBUILD)
  766|       |
  767|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
  768|       |  (void) lineno;
  769|       |#else
  770|    707|  if(ftpc->state != newstate)
  771|    674|    infof(data, "FTP %p (line %d) state change from %s to %s",
  772|    674|          (void *)ftpc, lineno, ftp_state_names[ftpc->state],
  773|    674|          ftp_state_names[newstate]);
  774|    707|#endif
  775|    707|#endif
  776|       |
  777|    707|  ftpc->state = newstate;
  778|    707|}
ftp.c:ftp_getsock:
  807|    961|{
  808|    961|  return Curl_pp_getsock(data, &conn->proto.ftpc.pp, socks);
  809|    961|}
ftp.c:ftp_multi_statemach:
 3108|  1.21k|{
 3109|  1.21k|  struct connectdata *conn = data->conn;
 3110|  1.21k|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3111|  1.21k|  CURLcode result = Curl_pp_statemach(data, &ftpc->pp, FALSE, FALSE);
 3112|       |
 3113|       |  /* Check for the state outside of the Curl_socket_check() return code checks
 3114|       |     since at times we are in fact already in this state when this function
 3115|       |     gets called. */
 3116|  1.21k|  *done = (ftpc->state == FTP_STOP) ? TRUE : FALSE;
 3117|       |
 3118|  1.21k|  return result;
 3119|  1.21k|}
ftp.c:ftp_connect:
 3147|    167|{
 3148|    167|  CURLcode result;
 3149|    167|  struct connectdata *conn = data->conn;
 3150|    167|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3151|    167|  struct pingpong *pp = &ftpc->pp;
 3152|       |
 3153|    167|  *done = FALSE; /* default to not done yet */
 3154|       |
 3155|       |  /* We always support persistent connections on ftp */
 3156|    167|  connkeep(conn, "FTP default");
 3157|       |
 3158|    167|  PINGPONG_SETUP(pp, ftp_statemachine, ftp_endofresp);
 3159|       |
 3160|    167|  if(conn->handler->flags & PROTOPT_SSL) {
 3161|       |    /* BLOCKING */
 3162|      0|    result = Curl_ssl_connect(data, conn, FIRSTSOCKET);
 3163|      0|    if(result)
 3164|      0|      return result;
 3165|      0|    conn->bits.ftp_use_control_ssl = TRUE;
 3166|      0|  }
 3167|       |
 3168|    167|  Curl_pp_setup(pp); /* once per transfer */
 3169|    167|  Curl_pp_init(data, pp); /* init the generic pingpong data */
 3170|       |
 3171|       |  /* When we connect, we start in the state where we await the 220
 3172|       |     response */
 3173|    167|  state(data, FTP_WAIT220);
 3174|       |
 3175|    167|  result = ftp_multi_statemach(data, done);
 3176|       |
 3177|    167|  return result;
 3178|    167|}
ftp.c:ftp_statemachine:
 2664|  1.30k|{
 2665|  1.30k|  CURLcode result;
 2666|  1.30k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
 2667|  1.30k|  int ftpcode;
 2668|  1.30k|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2669|  1.30k|  struct pingpong *pp = &ftpc->pp;
 2670|  1.30k|  static const char ftpauth[][4]  = { "SSL", "TLS" };
 2671|  1.30k|  size_t nread = 0;
 2672|       |
 2673|  1.30k|  if(pp->sendleft)
 2674|      0|    return Curl_pp_flushsend(data, pp);
 2675|       |
 2676|  1.30k|  result = ftp_readresp(data, sock, pp, &ftpcode, &nread);
 2677|  1.30k|  if(result)
 2678|     94|    return result;
 2679|       |
 2680|  1.21k|  if(ftpcode) {
 2681|       |    /* we have now received a full FTP server response */
 2682|    478|    switch(ftpc->state) {
 2683|    132|    case FTP_WAIT220:
 2684|    132|      if(ftpcode == 230) {
 2685|       |        /* 230 User logged in - already! Take as 220 if TLS required. */
 2686|     78|        if(data->set.use_ssl <= CURLUSESSL_TRY ||
 2687|     78|           conn->bits.ftp_use_control_ssl)
 2688|     78|          return ftp_state_user_resp(data, ftpcode, ftpc->state);
 2689|     78|      }
 2690|     54|      else if(ftpcode != 220) {
 2691|      2|        failf(data, "Got a %03d ftp-server response when 220 was expected",
 2692|      2|              ftpcode);
 2693|      2|        return CURLE_WEIRD_SERVER_REPLY;
 2694|      2|      }
 2695|       |
 2696|       |      /* We have received a 220 response fine, now we proceed. */
 2697|       |#ifdef HAVE_GSSAPI
 2698|       |      if(data->set.krb) {
 2699|       |        /* If not anonymous login, try a secure login. Note that this
 2700|       |           procedure is still BLOCKING. */
 2701|       |
 2702|       |        Curl_sec_request_prot(conn, "private");
 2703|       |        /* We set private first as default, in case the line below fails to
 2704|       |           set a valid level */
 2705|       |        Curl_sec_request_prot(conn, data->set.str[STRING_KRB_LEVEL]);
 2706|       |
 2707|       |        if(Curl_sec_login(data, conn))
 2708|       |          infof(data, "Logging in with password in cleartext!");
 2709|       |        else
 2710|       |          infof(data, "Authentication successful");
 2711|       |      }
 2712|       |#endif
 2713|       |
 2714|     52|      if(data->set.use_ssl && !conn->bits.ftp_use_control_ssl) {
 2715|       |        /* We don't have a SSL/TLS control connection yet, but FTPS is
 2716|       |           requested. Try a FTPS connection now */
 2717|       |
 2718|      0|        ftpc->count3 = 0;
 2719|      0|        switch(data->set.ftpsslauth) {
 2720|      0|        case CURLFTPAUTH_DEFAULT:
 2721|      0|        case CURLFTPAUTH_SSL:
 2722|      0|          ftpc->count2 = 1; /* add one to get next */
 2723|      0|          ftpc->count1 = 0;
 2724|      0|          break;
 2725|      0|        case CURLFTPAUTH_TLS:
 2726|      0|          ftpc->count2 = -1; /* subtract one to get next */
 2727|      0|          ftpc->count1 = 1;
 2728|      0|          break;
 2729|      0|        default:
 2730|      0|          failf(data, "unsupported parameter to CURLOPT_FTPSSLAUTH: %d",
 2731|      0|                (int)data->set.ftpsslauth);
 2732|      0|          return CURLE_UNKNOWN_OPTION; /* we don't know what to do */
 2733|      0|        }
 2734|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "AUTH %s",
 2735|      0|                               ftpauth[ftpc->count1]);
 2736|      0|        if(!result)
 2737|      0|          state(data, FTP_AUTH);
 2738|      0|      }
 2739|     52|      else
 2740|     52|        result = ftp_state_user(data, conn);
 2741|     52|      break;
 2742|       |
 2743|     52|    case FTP_AUTH:
 2744|       |      /* we have gotten the response to a previous AUTH command */
 2745|       |
 2746|      0|      if(pp->cache_size)
 2747|      0|        return CURLE_WEIRD_SERVER_REPLY; /* Forbid pipelining in response. */
 2748|       |
 2749|       |      /* RFC2228 (page 5) says:
 2750|       |       *
 2751|       |       * If the server is willing to accept the named security mechanism,
 2752|       |       * and does not require any security data, it must respond with
 2753|       |       * reply code 234/334.
 2754|       |       */
 2755|       |
 2756|      0|      if((ftpcode == 234) || (ftpcode == 334)) {
 2757|       |        /* Curl_ssl_connect is BLOCKING */
 2758|      0|        result = Curl_ssl_connect(data, conn, FIRSTSOCKET);
 2759|      0|        if(!result) {
 2760|      0|          conn->bits.ftp_use_data_ssl = FALSE; /* clear-text data */
 2761|      0|          conn->bits.ftp_use_control_ssl = TRUE; /* SSL on control */
 2762|      0|          result = ftp_state_user(data, conn);
 2763|      0|        }
 2764|      0|      }
 2765|      0|      else if(ftpc->count3 < 1) {
 2766|      0|        ftpc->count3++;
 2767|      0|        ftpc->count1 += ftpc->count2; /* get next attempt */
 2768|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "AUTH %s",
 2769|      0|                               ftpauth[ftpc->count1]);
 2770|       |        /* remain in this same state */
 2771|      0|      }
 2772|      0|      else {
 2773|      0|        if(data->set.use_ssl > CURLUSESSL_TRY)
 2774|       |          /* we failed and CURLUSESSL_CONTROL or CURLUSESSL_ALL is set */
 2775|      0|          result = CURLE_USE_SSL_FAILED;
 2776|      0|        else
 2777|       |          /* ignore the failure and continue */
 2778|      0|          result = ftp_state_user(data, conn);
 2779|      0|      }
 2780|      0|      break;
 2781|       |
 2782|     50|    case FTP_USER:
 2783|     52|    case FTP_PASS:
 2784|     52|      result = ftp_state_user_resp(data, ftpcode, ftpc->state);
 2785|     52|      break;
 2786|       |
 2787|      0|    case FTP_ACCT:
 2788|      0|      result = ftp_state_acct_resp(data, ftpcode);
 2789|      0|      break;
 2790|       |
 2791|      0|    case FTP_PBSZ:
 2792|      0|      result =
 2793|      0|        Curl_pp_sendf(data, &ftpc->pp, "PROT %c",
 2794|      0|                      data->set.use_ssl == CURLUSESSL_CONTROL ? 'C' : 'P');
 2795|      0|      if(!result)
 2796|      0|        state(data, FTP_PROT);
 2797|      0|      break;
 2798|       |
 2799|      0|    case FTP_PROT:
 2800|      0|      if(ftpcode/100 == 2)
 2801|       |        /* We have enabled SSL for the data connection! */
 2802|      0|        conn->bits.ftp_use_data_ssl =
 2803|      0|          (data->set.use_ssl != CURLUSESSL_CONTROL) ? TRUE : FALSE;
 2804|       |      /* FTP servers typically responds with 500 if they decide to reject
 2805|       |         our 'P' request */
 2806|      0|      else if(data->set.use_ssl > CURLUSESSL_CONTROL)
 2807|       |        /* we failed and bails out */
 2808|      0|        return CURLE_USE_SSL_FAILED;
 2809|       |
 2810|      0|      if(data->set.ftp_ccc) {
 2811|       |        /* CCC - Clear Command Channel
 2812|       |         */
 2813|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "%s", "CCC");
 2814|      0|        if(!result)
 2815|      0|          state(data, FTP_CCC);
 2816|      0|      }
 2817|      0|      else
 2818|      0|        result = ftp_state_pwd(data, conn);
 2819|      0|      break;
 2820|       |
 2821|      0|    case FTP_CCC:
 2822|      0|      if(ftpcode < 500) {
 2823|       |        /* First shut down the SSL layer (note: this call will block) */
 2824|      0|        result = Curl_ssl_shutdown(data, conn, FIRSTSOCKET);
 2825|       |
 2826|      0|        if(result)
 2827|      0|          failf(data, "Failed to clear the command channel (CCC)");
 2828|      0|      }
 2829|      0|      if(!result)
 2830|       |        /* Then continue as normal */
 2831|      0|        result = ftp_state_pwd(data, conn);
 2832|      0|      break;
 2833|       |
 2834|    118|    case FTP_PWD:
 2835|    118|      if(ftpcode == 257) {
 2836|     39|        char *ptr = &data->state.buffer[4];  /* start on the first letter */
 2837|     39|        const size_t buf_size = data->set.buffer_size;
 2838|     39|        char *dir;
 2839|     39|        bool entry_extracted = FALSE;
 2840|       |
 2841|     39|        dir = malloc(nread + 1);
 2842|     39|        if(!dir)
 2843|      0|          return CURLE_OUT_OF_MEMORY;
 2844|       |
 2845|       |        /* Reply format is like
 2846|       |           257<space>[rubbish]"<directory-name>"<space><commentary> and the
 2847|       |           RFC959 says
 2848|       |
 2849|       |           The directory name can contain any character; embedded
 2850|       |           double-quotes should be escaped by double-quotes (the
 2851|       |           "quote-doubling" convention).
 2852|       |        */
 2853|       |
 2854|       |        /* scan for the first double-quote for non-standard responses */
 2855|    486|        while(ptr < &data->state.buffer[buf_size]
 2856|    486|              && *ptr != '\n' && *ptr != '\0' && *ptr != '"')
 2857|    447|          ptr++;
 2858|       |
 2859|     39|        if('\"' == *ptr) {
 2860|       |          /* it started good */
 2861|     30|          char *store;
 2862|     30|          ptr++;
 2863|    273|          for(store = dir; *ptr;) {
 2864|    264|            if('\"' == *ptr) {
 2865|    121|              if('\"' == ptr[1]) {
 2866|       |                /* "quote-doubling" */
 2867|    100|                *store = ptr[1];
 2868|    100|                ptr++;
 2869|    100|              }
 2870|     21|              else {
 2871|       |                /* end of path */
 2872|     21|                entry_extracted = TRUE;
 2873|     21|                break; /* get out of this loop */
 2874|     21|              }
 2875|    121|            }
 2876|    143|            else
 2877|    143|              *store = *ptr;
 2878|    243|            store++;
 2879|    243|            ptr++;
 2880|    243|          }
 2881|     30|          *store = '\0'; /* null-terminate */
 2882|     30|        }
 2883|     39|        if(entry_extracted) {
 2884|       |          /* If the path name does not look like an absolute path (i.e.: it
 2885|       |             does not start with a '/'), we probably need some server-dependent
 2886|       |             adjustments. For example, this is the case when connecting to
 2887|       |             an OS400 FTP server: this server supports two name syntaxes,
 2888|       |             the default one being incompatible with standard paths. In
 2889|       |             addition, this server switches automatically to the regular path
 2890|       |             syntax when one is encountered in a command: this results in
 2891|       |             having an entrypath in the wrong syntax when later used in CWD.
 2892|       |               The method used here is to check the server OS: we do it only
 2893|       |             if the path name looks strange to minimize overhead on other
 2894|       |             systems. */
 2895|       |
 2896|     21|          if(!ftpc->server_os && dir[0] != '/') {
 2897|     21|            result = Curl_pp_sendf(data, &ftpc->pp, "%s", "SYST");
 2898|     21|            if(result) {
 2899|      0|              free(dir);
 2900|      0|              return result;
 2901|      0|            }
 2902|     21|            Curl_safefree(ftpc->entrypath);
 2903|     21|            ftpc->entrypath = dir; /* remember this */
 2904|     21|            infof(data, "Entry path is '%s'", ftpc->entrypath);
 2905|       |            /* also save it where getinfo can access it: */
 2906|     21|            data->state.most_recent_ftp_entrypath = ftpc->entrypath;
 2907|     21|            state(data, FTP_SYST);
 2908|     21|            break;
 2909|     21|          }
 2910|       |
 2911|      0|          Curl_safefree(ftpc->entrypath);
 2912|      0|          ftpc->entrypath = dir; /* remember this */
 2913|      0|          infof(data, "Entry path is '%s'", ftpc->entrypath);
 2914|       |          /* also save it where getinfo can access it: */
 2915|      0|          data->state.most_recent_ftp_entrypath = ftpc->entrypath;
 2916|      0|        }
 2917|     18|        else {
 2918|       |          /* couldn't get the path */
 2919|     18|          free(dir);
 2920|     18|          infof(data, "Failed to figure out path");
 2921|     18|        }
 2922|     39|      }
 2923|     97|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2924|     97|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2925|     97|      break;
 2926|       |
 2927|     16|    case FTP_SYST:
 2928|     16|      if(ftpcode == 215) {
 2929|     10|        char *ptr = &data->state.buffer[4];  /* start on the first letter */
 2930|     10|        char *os;
 2931|     10|        char *store;
 2932|       |
 2933|     10|        os = malloc(nread + 1);
 2934|     10|        if(!os)
 2935|      0|          return CURLE_OUT_OF_MEMORY;
 2936|       |
 2937|       |        /* Reply format is like
 2938|       |           215<space><OS-name><space><commentary>
 2939|       |        */
 2940|    100|        while(*ptr == ' ')
 2941|     90|          ptr++;
 2942|    284|        for(store = os; *ptr && *ptr != ' ';)
 2943|    274|          *store++ = *ptr++;
 2944|     10|        *store = '\0'; /* null-terminate */
 2945|       |
 2946|       |        /* Check for special servers here. */
 2947|       |
 2948|     10|        if(strcasecompare(os, "OS/400")) {
 2949|       |          /* Force OS400 name format 1. */
 2950|      0|          result = Curl_pp_sendf(data, &ftpc->pp, "%s", "SITE NAMEFMT 1");
 2951|      0|          if(result) {
 2952|      0|            free(os);
 2953|      0|            return result;
 2954|      0|          }
 2955|       |          /* remember target server OS */
 2956|      0|          Curl_safefree(ftpc->server_os);
 2957|      0|          ftpc->server_os = os;
 2958|      0|          state(data, FTP_NAMEFMT);
 2959|      0|          break;
 2960|      0|        }
 2961|       |        /* Nothing special for the target server. */
 2962|       |        /* remember target server OS */
 2963|     10|        Curl_safefree(ftpc->server_os);
 2964|     10|        ftpc->server_os = os;
 2965|     10|      }
 2966|      6|      else {
 2967|       |        /* Cannot identify server OS. Continue anyway and cross fingers. */
 2968|      6|      }
 2969|       |
 2970|     16|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2971|     16|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2972|     16|      break;
 2973|       |
 2974|      0|    case FTP_NAMEFMT:
 2975|      0|      if(ftpcode == 250) {
 2976|       |        /* Name format change successful: reload initial path. */
 2977|      0|        ftp_state_pwd(data, conn);
 2978|      0|        break;
 2979|      0|      }
 2980|       |
 2981|      0|      state(data, FTP_STOP); /* we are done with the CONNECT phase! */
 2982|      0|      DEBUGF(infof(data, "protocol connect phase DONE"));
 2983|      0|      break;
 2984|       |
 2985|      0|    case FTP_QUOTE:
 2986|      0|    case FTP_POSTQUOTE:
 2987|      0|    case FTP_RETR_PREQUOTE:
 2988|      0|    case FTP_STOR_PREQUOTE:
 2989|      0|      if((ftpcode >= 400) && !ftpc->count2) {
 2990|       |        /* failure response code, and not allowed to fail */
 2991|      0|        failf(data, "QUOT command failed with %03d", ftpcode);
 2992|      0|        result = CURLE_QUOTE_ERROR;
 2993|      0|      }
 2994|      0|      else
 2995|      0|        result = ftp_state_quote(data, FALSE, ftpc->state);
 2996|      0|      break;
 2997|       |
 2998|     66|    case FTP_CWD:
 2999|     66|      if(ftpcode/100 != 2) {
 3000|       |        /* failure to CWD there */
 3001|     18|        if(data->set.ftp_create_missing_dirs &&
 3002|     18|           ftpc->cwdcount && !ftpc->count2) {
 3003|       |          /* try making it */
 3004|      0|          ftpc->count2++; /* counter to prevent CWD-MKD loops */
 3005|      0|          result = Curl_pp_sendf(data, &ftpc->pp, "MKD %s",
 3006|      0|                                 ftpc->dirs[ftpc->cwdcount - 1]);
 3007|      0|          if(!result)
 3008|      0|            state(data, FTP_MKD);
 3009|      0|        }
 3010|     18|        else {
 3011|       |          /* return failure */
 3012|     18|          failf(data, "Server denied you to change to the given directory");
 3013|     18|          ftpc->cwdfail = TRUE; /* don't remember this path as we failed
 3014|       |                                   to enter it */
 3015|     18|          result = CURLE_REMOTE_ACCESS_DENIED;
 3016|     18|        }
 3017|     18|      }
 3018|     48|      else {
 3019|       |        /* success */
 3020|     48|        ftpc->count2 = 0;
 3021|     48|        if(++ftpc->cwdcount <= ftpc->dirdepth)
 3022|       |          /* send next CWD */
 3023|     30|          result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
 3024|     30|                                 ftpc->dirs[ftpc->cwdcount - 1]);
 3025|     18|        else
 3026|     18|          result = ftp_state_mdtm(data);
 3027|     48|      }
 3028|     66|      break;
 3029|       |
 3030|      0|    case FTP_MKD:
 3031|      0|      if((ftpcode/100 != 2) && !ftpc->count3--) {
 3032|       |        /* failure to MKD the dir */
 3033|      0|        failf(data, "Failed to MKD dir: %03d", ftpcode);
 3034|      0|        result = CURLE_REMOTE_ACCESS_DENIED;
 3035|      0|      }
 3036|      0|      else {
 3037|      0|        state(data, FTP_CWD);
 3038|       |        /* send CWD */
 3039|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
 3040|      0|                               ftpc->dirs[ftpc->cwdcount - 1]);
 3041|      0|      }
 3042|      0|      break;
 3043|       |
 3044|      0|    case FTP_MDTM:
 3045|      0|      result = ftp_state_mdtm_resp(data, ftpcode);
 3046|      0|      break;
 3047|       |
 3048|      4|    case FTP_TYPE:
 3049|      4|    case FTP_LIST_TYPE:
 3050|      4|    case FTP_RETR_TYPE:
 3051|      4|    case FTP_STOR_TYPE:
 3052|      4|      result = ftp_state_type_resp(data, ftpcode, ftpc->state);
 3053|      4|      break;
 3054|       |
 3055|      2|    case FTP_SIZE:
 3056|      2|    case FTP_RETR_SIZE:
 3057|      2|    case FTP_STOR_SIZE:
 3058|      2|      result = ftp_state_size_resp(data, ftpcode, ftpc->state);
 3059|      2|      break;
 3060|       |
 3061|      1|    case FTP_REST:
 3062|      1|    case FTP_RETR_REST:
 3063|      1|      result = ftp_state_rest_resp(data, conn, ftpcode, ftpc->state);
 3064|      1|      break;
 3065|       |
 3066|      0|    case FTP_PRET:
 3067|      0|      if(ftpcode != 200) {
 3068|       |        /* there only is this one standard OK return code. */
 3069|      0|        failf(data, "PRET command not accepted: %03d", ftpcode);
 3070|      0|        return CURLE_FTP_PRET_FAILED;
 3071|      0|      }
 3072|      0|      result = ftp_state_use_pasv(data, conn);
 3073|      0|      break;
 3074|       |
 3075|     71|    case FTP_PASV:
 3076|     71|      result = ftp_state_pasv_resp(data, ftpcode);
 3077|     71|      break;
 3078|       |
 3079|      0|    case FTP_PORT:
 3080|      0|      result = ftp_state_port_resp(data, ftpcode);
 3081|      0|      break;
 3082|       |
 3083|      0|    case FTP_LIST:
 3084|      0|    case FTP_RETR:
 3085|      0|      result = ftp_state_get_resp(data, ftpcode, ftpc->state);
 3086|      0|      break;
 3087|       |
 3088|      0|    case FTP_STOR:
 3089|      0|      result = ftp_state_stor_resp(data, ftpcode, ftpc->state);
 3090|      0|      break;
 3091|       |
 3092|     15|    case FTP_QUIT:
 3093|       |      /* fallthrough, just stop! */
 3094|     16|    default:
 3095|       |      /* internal error */
 3096|     16|      state(data, FTP_STOP);
 3097|     16|      break;
 3098|    478|    }
 3099|    478|  } /* if(ftpcode) */
 3100|       |
 3101|  1.13k|  return result;
 3102|  1.21k|}
ftp.c:ftp_state_user_resp:
 2589|    130|{
 2590|    130|  CURLcode result = CURLE_OK;
 2591|    130|  struct connectdata *conn = data->conn;
 2592|    130|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2593|    130|  (void)instate; /* no use for this yet */
 2594|       |
 2595|       |  /* some need password anyway, and others just return 2xx ignored */
 2596|    130|  if((ftpcode == 331) && (ftpc->state == FTP_USER)) {
 2597|       |    /* 331 Password required for ...
 2598|       |       (the server requires to send the user's password too) */
 2599|      2|    result = Curl_pp_sendf(data, &ftpc->pp, "PASS %s",
 2600|      2|                           conn->passwd?conn->passwd:"");
 2601|      2|    if(!result)
 2602|      2|      state(data, FTP_PASS);
 2603|      2|  }
 2604|    128|  else if(ftpcode/100 == 2) {
 2605|       |    /* 230 User ... logged in.
 2606|       |       (the user logged in with or without password) */
 2607|    125|    result = ftp_state_loggedin(data);
 2608|    125|  }
 2609|      3|  else if(ftpcode == 332) {
 2610|      1|    if(data->set.str[STRING_FTP_ACCOUNT]) {
 2611|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "ACCT %s",
 2612|      0|                             data->set.str[STRING_FTP_ACCOUNT]);
 2613|      0|      if(!result)
 2614|      0|        state(data, FTP_ACCT);
 2615|      0|    }
 2616|      1|    else {
 2617|      1|      failf(data, "ACCT requested but none available");
 2618|      1|      result = CURLE_LOGIN_DENIED;
 2619|      1|    }
 2620|      1|  }
 2621|      2|  else {
 2622|       |    /* All other response codes, like:
 2623|       |
 2624|       |    530 User ... access denied
 2625|       |    (the server denies to log the specified user) */
 2626|       |
 2627|      2|    if(data->set.str[STRING_FTP_ALTERNATIVE_TO_USER] &&
 2628|      2|        !data->state.ftp_trying_alternative) {
 2629|       |      /* Ok, USER failed.  Let's try the supplied command. */
 2630|      0|      result =
 2631|      0|        Curl_pp_sendf(data, &ftpc->pp, "%s",
 2632|      0|                      data->set.str[STRING_FTP_ALTERNATIVE_TO_USER]);
 2633|      0|      if(!result) {
 2634|      0|        data->state.ftp_trying_alternative = TRUE;
 2635|      0|        state(data, FTP_USER);
 2636|      0|      }
 2637|      0|    }
 2638|      2|    else {
 2639|      2|      failf(data, "Access denied: %03d", ftpcode);
 2640|      2|      result = CURLE_LOGIN_DENIED;
 2641|      2|    }
 2642|      2|  }
 2643|    130|  return result;
 2644|    130|}
ftp.c:ftp_state_loggedin:
 2556|    125|{
 2557|    125|  CURLcode result = CURLE_OK;
 2558|    125|  struct connectdata *conn = data->conn;
 2559|       |
 2560|    125|  if(conn->bits.ftp_use_control_ssl) {
 2561|       |    /* PBSZ = PROTECTION BUFFER SIZE.
 2562|       |
 2563|       |    The 'draft-murray-auth-ftp-ssl' (draft 12, page 7) says:
 2564|       |
 2565|       |    Specifically, the PROT command MUST be preceded by a PBSZ
 2566|       |    command and a PBSZ command MUST be preceded by a successful
 2567|       |    security data exchange (the TLS negotiation in this case)
 2568|       |
 2569|       |    ... (and on page 8):
 2570|       |
 2571|       |    Thus the PBSZ command must still be issued, but must have a
 2572|       |    parameter of '0' to indicate that no buffering is taking place
 2573|       |    and the data connection should not be encapsulated.
 2574|       |    */
 2575|      0|    result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "PBSZ %d", 0);
 2576|      0|    if(!result)
 2577|      0|      state(data, FTP_PBSZ);
 2578|      0|  }
 2579|    125|  else {
 2580|    125|    result = ftp_state_pwd(data, conn);
 2581|    125|  }
 2582|    125|  return result;
 2583|    125|}
ftp.c:ftp_state_user:
  782|     52|{
  783|     52|  CURLcode result = Curl_pp_sendf(data,
  784|     52|                                  &conn->proto.ftpc.pp, "USER %s",
  785|     52|                                  conn->user?conn->user:"");
  786|     52|  if(!result) {
  787|     52|    state(data, FTP_USER);
  788|     52|    data->state.ftp_trying_alternative = FALSE;
  789|     52|  }
  790|     52|  return result;
  791|     52|}
ftp.c:ftp_state_pwd:
  795|    125|{
  796|    125|  CURLcode result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "PWD");
  797|    125|  if(!result)
  798|    125|    state(data, FTP_PWD);
  799|       |
  800|    125|  return result;
  801|    125|}
ftp.c:ftp_state_quote:
 1678|    115|{
 1679|    115|  CURLcode result = CURLE_OK;
 1680|    115|  struct FTP *ftp = data->req.p.ftp;
 1681|    115|  struct connectdata *conn = data->conn;
 1682|    115|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1683|    115|  bool quote = FALSE;
 1684|    115|  struct curl_slist *item;
 1685|       |
 1686|    115|  switch(instate) {
 1687|    110|  case FTP_QUOTE:
 1688|    110|  default:
 1689|    110|    item = data->set.quote;
 1690|    110|    break;
 1691|      5|  case FTP_RETR_PREQUOTE:
 1692|      5|  case FTP_STOR_PREQUOTE:
 1693|      5|    item = data->set.prequote;
 1694|      5|    break;
 1695|      0|  case FTP_POSTQUOTE:
 1696|      0|    item = data->set.postquote;
 1697|      0|    break;
 1698|    115|  }
 1699|       |
 1700|       |  /*
 1701|       |   * This state uses:
 1702|       |   * 'count1' to iterate over the commands to send
 1703|       |   * 'count2' to store whether to allow commands to fail
 1704|       |   */
 1705|       |
 1706|    115|  if(init)
 1707|    115|    ftpc->count1 = 0;
 1708|      0|  else
 1709|      0|    ftpc->count1++;
 1710|       |
 1711|    115|  if(item) {
 1712|      0|    int i = 0;
 1713|       |
 1714|       |    /* Skip count1 items in the linked list */
 1715|      0|    while((i< ftpc->count1) && item) {
 1716|      0|      item = item->next;
 1717|      0|      i++;
 1718|      0|    }
 1719|      0|    if(item) {
 1720|      0|      char *cmd = item->data;
 1721|      0|      if(cmd[0] == '*') {
 1722|      0|        cmd++;
 1723|      0|        ftpc->count2 = 1; /* the sent command is allowed to fail */
 1724|      0|      }
 1725|      0|      else
 1726|      0|        ftpc->count2 = 0; /* failure means cancel operation */
 1727|       |
 1728|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "%s", cmd);
 1729|      0|      if(result)
 1730|      0|        return result;
 1731|      0|      state(data, instate);
 1732|      0|      quote = TRUE;
 1733|      0|    }
 1734|      0|  }
 1735|       |
 1736|    115|  if(!quote) {
 1737|       |    /* No more quote to send, continue to ... */
 1738|    115|    switch(instate) {
 1739|    110|    case FTP_QUOTE:
 1740|    110|    default:
 1741|    110|      result = ftp_state_cwd(data, conn);
 1742|    110|      break;
 1743|      5|    case FTP_RETR_PREQUOTE:
 1744|      5|      if(ftp->transfer != PPTRANSFER_BODY)
 1745|      5|        state(data, FTP_STOP);
 1746|      0|      else {
 1747|      0|        if(ftpc->known_filesize != -1) {
 1748|      0|          Curl_pgrsSetDownloadSize(data, ftpc->known_filesize);
 1749|      0|          result = ftp_state_retr(data, ftpc->known_filesize);
 1750|      0|        }
 1751|      0|        else {
 1752|      0|          if(data->set.ignorecl || data->state.prefer_ascii) {
 1753|       |            /* 'ignorecl' is used to support download of growing files.  It
 1754|       |               prevents the state machine from requesting the file size from
 1755|       |               the server.  With an unknown file size the download continues
 1756|       |               until the server terminates it, otherwise the client stops if
 1757|       |               the received byte count exceeds the reported file size.  Set
 1758|       |               option CURLOPT_IGNORE_CONTENT_LENGTH to 1 to enable this
 1759|       |               behavior.
 1760|       |
 1761|       |               In addition: asking for the size for 'TYPE A' transfers is not
 1762|       |               constructive since servers don't report the converted size. So
 1763|       |               skip it.
 1764|       |            */
 1765|      0|            result = Curl_pp_sendf(data, &ftpc->pp, "RETR %s", ftpc->file);
 1766|      0|            if(!result)
 1767|      0|              state(data, FTP_RETR);
 1768|      0|          }
 1769|      0|          else {
 1770|      0|            result = Curl_pp_sendf(data, &ftpc->pp, "SIZE %s", ftpc->file);
 1771|      0|            if(!result)
 1772|      0|              state(data, FTP_RETR_SIZE);
 1773|      0|          }
 1774|      0|        }
 1775|      0|      }
 1776|      5|      break;
 1777|      0|    case FTP_STOR_PREQUOTE:
 1778|      0|      result = ftp_state_ul_setup(data, FALSE);
 1779|      0|      break;
 1780|      0|    case FTP_POSTQUOTE:
 1781|      0|      break;
 1782|    115|    }
 1783|    115|  }
 1784|       |
 1785|    115|  return result;
 1786|    115|}
ftp.c:ftp_state_cwd:
  865|    110|{
  866|    110|  CURLcode result = CURLE_OK;
  867|    110|  struct ftp_conn *ftpc = &conn->proto.ftpc;
  868|       |
  869|    110|  if(ftpc->cwddone)
  870|       |    /* already done and fine */
  871|     52|    result = ftp_state_mdtm(data);
  872|     58|  else {
  873|       |    /* FTPFILE_NOCWD with full path: expect ftpc->cwddone! */
  874|     58|    DEBUGASSERT((data->set.ftp_filemethod != FTPFILE_NOCWD) ||
  875|     58|                !(ftpc->dirdepth && ftpc->dirs[0][0] == '/'));
  876|       |
  877|     58|    ftpc->count2 = 0; /* count2 counts failed CWDs */
  878|       |
  879|       |    /* count3 is set to allow a MKD to fail once. In the case when first CWD
  880|       |       fails and then MKD fails (due to another session raced it to create the
  881|       |       dir) this then allows for a second try to CWD to it */
  882|     58|    ftpc->count3 = (data->set.ftp_create_missing_dirs == 2)?1:0;
  883|       |
  884|     58|    if(conn->bits.reuse && ftpc->entrypath &&
  885|       |       /* no need to go to entrypath when we have an absolute path */
  886|     58|       !(ftpc->dirdepth && ftpc->dirs[0][0] == '/')) {
  887|       |      /* This is a re-used connection. Since we change directory to where the
  888|       |         transfer is taking place, we must first get back to the original dir
  889|       |         where we ended up after login: */
  890|      0|      ftpc->cwdcount = 0; /* we count this as the first path, then we add one
  891|       |                             for all upcoming ones in the ftp->dirs[] array */
  892|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s", ftpc->entrypath);
  893|      0|      if(!result)
  894|      0|        state(data, FTP_CWD);
  895|      0|    }
  896|     58|    else {
  897|     58|      if(ftpc->dirdepth) {
  898|     58|        ftpc->cwdcount = 1;
  899|       |        /* issue the first CWD, the rest is sent when the CWD responses are
  900|       |           received... */
  901|     58|        result = Curl_pp_sendf(data, &ftpc->pp, "CWD %s",
  902|     58|                               ftpc->dirs[ftpc->cwdcount -1]);
  903|     58|        if(!result)
  904|     58|          state(data, FTP_CWD);
  905|     58|      }
  906|      0|      else {
  907|       |        /* No CWD necessary */
  908|      0|        result = ftp_state_mdtm(data);
  909|      0|      }
  910|     58|    }
  911|     58|  }
  912|    110|  return result;
  913|    110|}
ftp.c:ftp_state_mdtm:
 1553|     70|{
 1554|     70|  CURLcode result = CURLE_OK;
 1555|     70|  struct connectdata *conn = data->conn;
 1556|     70|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1557|       |
 1558|       |  /* Requested time of file or time-depended transfer? */
 1559|     70|  if((data->set.get_filetime || data->set.timecondition) && ftpc->file) {
 1560|       |
 1561|       |    /* we have requested to get the modified-time of the file, this is a white
 1562|       |       spot as the MDTM is not mentioned in RFC959 */
 1563|      0|    result = Curl_pp_sendf(data, &ftpc->pp, "MDTM %s", ftpc->file);
 1564|       |
 1565|      0|    if(!result)
 1566|      0|      state(data, FTP_MDTM);
 1567|      0|  }
 1568|     70|  else
 1569|     70|    result = ftp_state_type(data);
 1570|       |
 1571|     70|  return result;
 1572|     70|}
ftp.c:ftp_state_type:
 1520|     70|{
 1521|     70|  CURLcode result = CURLE_OK;
 1522|     70|  struct FTP *ftp = data->req.p.ftp;
 1523|     70|  struct connectdata *conn = data->conn;
 1524|     70|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1525|       |
 1526|       |  /* If we have selected NOBODY and HEADER, it means that we only want file
 1527|       |     information. Which in FTP can't be much more than the file size and
 1528|       |     date. */
 1529|     70|  if(data->set.opt_no_body && ftpc->file &&
 1530|     70|     ftp_need_type(conn, data->state.prefer_ascii)) {
 1531|       |    /* The SIZE command is _not_ RFC 959 specified, and therefore many servers
 1532|       |       may not support it! It is however the only way we have to get a file's
 1533|       |       size! */
 1534|       |
 1535|      4|    ftp->transfer = PPTRANSFER_INFO;
 1536|       |    /* this means no actual transfer will be made */
 1537|       |
 1538|       |    /* Some servers return different sizes for different modes, and thus we
 1539|       |       must set the proper type before we check the size */
 1540|      4|    result = ftp_nb_type(data, conn, data->state.prefer_ascii, FTP_TYPE);
 1541|      4|    if(result)
 1542|      0|      return result;
 1543|      4|  }
 1544|     66|  else
 1545|     66|    result = ftp_state_size(data, conn);
 1546|       |
 1547|     70|  return result;
 1548|     70|}
ftp.c:ftp_need_type:
 3485|      4|{
 3486|      4|  return conn->proto.ftpc.transfertype != (ascii_wanted?'A':'I');
 3487|      4|}
ftp.c:ftp_nb_type:
 3500|      4|{
 3501|      4|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3502|      4|  CURLcode result;
 3503|      4|  char want = (char)(ascii?'A':'I');
 3504|       |
 3505|      4|  if(ftpc->transfertype == want) {
 3506|      0|    state(data, newstate);
 3507|      0|    return ftp_state_type_resp(data, 200, newstate);
 3508|      0|  }
 3509|       |
 3510|      4|  result = Curl_pp_sendf(data, &ftpc->pp, "TYPE %c", want);
 3511|      4|  if(!result) {
 3512|      4|    state(data, newstate);
 3513|       |
 3514|       |    /* keep track of our current transfer type */
 3515|      4|    ftpc->transfertype = want;
 3516|      4|  }
 3517|      4|  return result;
 3518|      4|}
ftp.c:ftp_state_size:
 1423|     69|{
 1424|     69|  CURLcode result = CURLE_OK;
 1425|     69|  struct FTP *ftp = data->req.p.ftp;
 1426|     69|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1427|       |
 1428|     69|  if((ftp->transfer == PPTRANSFER_INFO) && ftpc->file) {
 1429|       |    /* if a "head"-like request is being made (on a file) */
 1430|       |
 1431|       |    /* we know ftpc->file is a valid pointer to a file name */
 1432|      3|    result = Curl_pp_sendf(data, &ftpc->pp, "SIZE %s", ftpc->file);
 1433|      3|    if(!result)
 1434|      3|      state(data, FTP_SIZE);
 1435|      3|  }
 1436|     66|  else
 1437|     66|    result = ftp_state_rest(data, conn);
 1438|       |
 1439|     69|  return result;
 1440|     69|}
ftp.c:ftp_state_rest:
 1401|     68|{
 1402|     68|  CURLcode result = CURLE_OK;
 1403|     68|  struct FTP *ftp = data->req.p.ftp;
 1404|     68|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1405|       |
 1406|     68|  if((ftp->transfer != PPTRANSFER_BODY) && ftpc->file) {
 1407|       |    /* if a "head"-like request is being made (on a file) */
 1408|       |
 1409|       |    /* Determine if server can respond to REST command and therefore
 1410|       |       whether it supports range */
 1411|      2|    result = Curl_pp_sendf(data, &ftpc->pp, "REST %d", 0);
 1412|      2|    if(!result)
 1413|      2|      state(data, FTP_REST);
 1414|      2|  }
 1415|     66|  else
 1416|     66|    result = ftp_state_prepare_transfer(data);
 1417|       |
 1418|     68|  return result;
 1419|     68|}
ftp.c:ftp_state_prepare_transfer:
 1357|     67|{
 1358|     67|  CURLcode result = CURLE_OK;
 1359|     67|  struct FTP *ftp = data->req.p.ftp;
 1360|     67|  struct connectdata *conn = data->conn;
 1361|       |
 1362|     67|  if(ftp->transfer != PPTRANSFER_BODY) {
 1363|       |    /* doesn't transfer any data */
 1364|       |
 1365|       |    /* still possibly do PRE QUOTE jobs */
 1366|      5|    state(data, FTP_RETR_PREQUOTE);
 1367|      5|    result = ftp_state_quote(data, TRUE, FTP_RETR_PREQUOTE);
 1368|      5|  }
 1369|     62|  else if(data->set.ftp_use_port) {
 1370|       |    /* We have chosen to use the PORT (or similar) command */
 1371|      0|    result = ftp_state_use_port(data, EPRT);
 1372|      0|  }
 1373|     62|  else {
 1374|       |    /* We have chosen (this is default) to use the PASV (or similar) command */
 1375|     62|    if(data->set.ftp_use_pret) {
 1376|       |      /* The user has requested that we send a PRET command
 1377|       |         to prepare the server for the upcoming PASV */
 1378|      0|      struct ftp_conn *ftpc = &conn->proto.ftpc;
 1379|      0|      if(!conn->proto.ftpc.file)
 1380|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET %s",
 1381|      0|                               data->set.str[STRING_CUSTOMREQUEST]?
 1382|      0|                               data->set.str[STRING_CUSTOMREQUEST]:
 1383|      0|                               (data->state.list_only?"NLST":"LIST"));
 1384|      0|      else if(data->set.upload)
 1385|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET STOR %s",
 1386|      0|                               conn->proto.ftpc.file);
 1387|      0|      else
 1388|      0|        result = Curl_pp_sendf(data, &ftpc->pp, "PRET RETR %s",
 1389|      0|                               conn->proto.ftpc.file);
 1390|      0|      if(!result)
 1391|      0|        state(data, FTP_PRET);
 1392|      0|    }
 1393|     62|    else
 1394|     62|      result = ftp_state_use_pasv(data, conn);
 1395|     62|  }
 1396|     67|  return result;
 1397|     67|}
ftp.c:ftp_state_type_resp:
 2177|      4|{
 2178|      4|  CURLcode result = CURLE_OK;
 2179|      4|  struct connectdata *conn = data->conn;
 2180|       |
 2181|      4|  if(ftpcode/100 != 2) {
 2182|       |    /* "sasserftpd" and "(u)r(x)bot ftpd" both responds with 226 after a
 2183|       |       successful 'TYPE I'. While that is not as RFC959 says, it is still a
 2184|       |       positive response code and we allow that. */
 2185|      1|    failf(data, "Couldn't set desired mode");
 2186|      1|    return CURLE_FTP_COULDNT_SET_TYPE;
 2187|      1|  }
 2188|      3|  if(ftpcode != 200)
 2189|      2|    infof(data, "Got a %03d response code instead of the assumed 200",
 2190|      2|          ftpcode);
 2191|       |
 2192|      3|  if(instate == FTP_TYPE)
 2193|      3|    result = ftp_state_size(data, conn);
 2194|      0|  else if(instate == FTP_LIST_TYPE)
 2195|      0|    result = ftp_state_list(data);
 2196|      0|  else if(instate == FTP_RETR_TYPE)
 2197|      0|    result = ftp_state_retr_prequote(data);
 2198|      0|  else if(instate == FTP_STOR_TYPE)
 2199|      0|    result = ftp_state_stor_prequote(data);
 2200|       |
 2201|      3|  return result;
 2202|      4|}
ftp.c:ftp_state_size_resp:
 2290|      2|{
 2291|      2|  CURLcode result = CURLE_OK;
 2292|      2|  curl_off_t filesize = -1;
 2293|      2|  char *buf = data->state.buffer;
 2294|       |
 2295|       |  /* get the size from the ascii string: */
 2296|      2|  if(ftpcode == 213) {
 2297|       |    /* To allow servers to prepend "rubbish" in the response string, we scan
 2298|       |       for all the digits at the end of the response and parse only those as a
 2299|       |       number. */
 2300|      1|    char *start = &buf[4];
 2301|      1|    char *fdigit = strchr(start, '\r');
 2302|      1|    if(fdigit) {
 2303|      0|      do
 2304|      0|        fdigit--;
 2305|      0|      while(ISDIGIT(*fdigit) && (fdigit > start));
 2306|      0|      if(!ISDIGIT(*fdigit))
 2307|      0|        fdigit++;
 2308|      0|    }
 2309|      1|    else
 2310|      1|      fdigit = start;
 2311|       |    /* ignores parsing errors, which will make the size remain unknown */
 2312|      1|    (void)curlx_strtoofft(fdigit, NULL, 0, &filesize);
 2313|       |
 2314|      1|  }
 2315|      1|  else if(ftpcode == 550) { /* "No such file or directory" */
 2316|       |    /* allow a SIZE failure for (resumed) uploads, when probing what command
 2317|       |       to use */
 2318|      0|    if(instate != FTP_STOR_SIZE) {
 2319|      0|      failf(data, "The file does not exist");
 2320|      0|      return CURLE_REMOTE_FILE_NOT_FOUND;
 2321|      0|    }
 2322|      0|  }
 2323|       |
 2324|      2|  if(instate == FTP_SIZE) {
 2325|      2|#ifdef CURL_FTP_HTTPSTYLE_HEAD
 2326|      2|    if(-1 != filesize) {
 2327|      1|      char clbuf[128];
 2328|      1|      int clbuflen = msnprintf(clbuf, sizeof(clbuf),
 2329|      1|                "Content-Length: %" CURL_FORMAT_CURL_OFF_T "\r\n", filesize);
 2330|      1|      result = Curl_client_write(data, CLIENTWRITE_BOTH, clbuf, clbuflen);
 2331|      1|      if(result)
 2332|      0|        return result;
 2333|      1|    }
 2334|      2|#endif
 2335|      2|    Curl_pgrsSetDownloadSize(data, filesize);
 2336|      2|    result = ftp_state_rest(data, data->conn);
 2337|      2|  }
 2338|      0|  else if(instate == FTP_RETR_SIZE) {
 2339|      0|    Curl_pgrsSetDownloadSize(data, filesize);
 2340|      0|    result = ftp_state_retr(data, filesize);
 2341|      0|  }
 2342|      0|  else if(instate == FTP_STOR_SIZE) {
 2343|      0|    data->state.resume_from = filesize;
 2344|      0|    result = ftp_state_ul_setup(data, TRUE);
 2345|      0|  }
 2346|       |
 2347|      2|  return result;
 2348|      2|}
ftp.c:ftp_state_rest_resp:
 2354|      1|{
 2355|      1|  CURLcode result = CURLE_OK;
 2356|      1|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 2357|       |
 2358|      1|  switch(instate) {
 2359|      1|  case FTP_REST:
 2360|      1|  default:
 2361|      1|#ifdef CURL_FTP_HTTPSTYLE_HEAD
 2362|      1|    if(ftpcode == 350) {
 2363|      0|      char buffer[24]= { "Accept-ranges: bytes\r\n" };
 2364|      0|      result = Curl_client_write(data, CLIENTWRITE_BOTH, buffer,
 2365|      0|                                 strlen(buffer));
 2366|      0|      if(result)
 2367|      0|        return result;
 2368|      0|    }
 2369|      1|#endif
 2370|      1|    result = ftp_state_prepare_transfer(data);
 2371|      1|    break;
 2372|       |
 2373|      0|  case FTP_RETR_REST:
 2374|      0|    if(ftpcode != 350) {
 2375|      0|      failf(data, "Couldn't use REST");
 2376|      0|      result = CURLE_FTP_COULDNT_USE_REST;
 2377|      0|    }
 2378|      0|    else {
 2379|      0|      result = Curl_pp_sendf(data, &ftpc->pp, "RETR %s", ftpc->file);
 2380|      0|      if(!result)
 2381|      0|        state(data, FTP_RETR);
 2382|      0|    }
 2383|      0|    break;
 2384|      1|  }
 2385|       |
 2386|      1|  return result;
 2387|      1|}
ftp.c:ftp_state_use_pasv:
 1311|     62|{
 1312|     62|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1313|     62|  CURLcode result = CURLE_OK;
 1314|       |  /*
 1315|       |    Here's the executive summary on what to do:
 1316|       |
 1317|       |    PASV is RFC959, expect:
 1318|       |    227 Entering Passive Mode (a1,a2,a3,a4,p1,p2)
 1319|       |
 1320|       |    LPSV is RFC1639, expect:
 1321|       |    228 Entering Long Passive Mode (4,4,a1,a2,a3,a4,2,p1,p2)
 1322|       |
 1323|       |    EPSV is RFC2428, expect:
 1324|       |    229 Entering Extended Passive Mode (|||port|)
 1325|       |
 1326|       |  */
 1327|       |
 1328|     62|  static const char mode[][5] = { "EPSV", "PASV" };
 1329|     62|  int modeoff;
 1330|       |
 1331|     62|#ifdef PF_INET6
 1332|     62|  if(!conn->bits.ftp_use_epsv && conn->bits.ipv6)
 1333|       |    /* EPSV is disabled but we are connected to a IPv6 host, so we ignore the
 1334|       |       request and enable EPSV again! */
 1335|      0|    conn->bits.ftp_use_epsv = TRUE;
 1336|     62|#endif
 1337|       |
 1338|     62|  modeoff = conn->bits.ftp_use_epsv?0:1;
 1339|       |
 1340|     62|  result = Curl_pp_sendf(data, &ftpc->pp, "%s", mode[modeoff]);
 1341|     62|  if(!result) {
 1342|     62|    ftpc->count1 = modeoff;
 1343|     62|    state(data, FTP_PASV);
 1344|     62|    infof(data, "Connect data stream passively");
 1345|     62|  }
 1346|     62|  return result;
 1347|     62|}
ftp.c:ftp_state_pasv_resp:
 1835|     71|{
 1836|     71|  struct connectdata *conn = data->conn;
 1837|     71|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 1838|     71|  CURLcode result;
 1839|     71|  struct Curl_dns_entry *addr = NULL;
 1840|     71|  enum resolve_t rc;
 1841|     71|  unsigned short connectport; /* the local port connect() should use! */
 1842|     71|  char *str = &data->state.buffer[4];  /* start on the first letter */
 1843|       |
 1844|       |  /* if we come here again, make sure the former name is cleared */
 1845|     71|  Curl_safefree(ftpc->newhost);
 1846|       |
 1847|     71|  if((ftpc->count1 == 0) &&
 1848|     71|     (ftpcode == 229)) {
 1849|       |    /* positive EPSV response */
 1850|     12|    char *ptr = strchr(str, '(');
 1851|     12|    if(ptr) {
 1852|      9|      unsigned int num;
 1853|      9|      char separator[4];
 1854|      9|      ptr++;
 1855|      9|      if(5 == sscanf(ptr, "%c%c%c%u%c",
 1856|      9|                     &separator[0],
 1857|      9|                     &separator[1],
 1858|      9|                     &separator[2],
 1859|      9|                     &num,
 1860|      9|                     &separator[3])) {
 1861|      8|        const char sep1 = separator[0];
 1862|      8|        int i;
 1863|       |
 1864|       |        /* The four separators should be identical, or else this is an oddly
 1865|       |           formatted reply and we bail out immediately. */
 1866|     30|        for(i = 1; i<4; i++) {
 1867|     23|          if(separator[i] != sep1) {
 1868|      1|            ptr = NULL; /* set to NULL to signal error */
 1869|      1|            break;
 1870|      1|          }
 1871|     23|        }
 1872|      8|        if(num > 0xffff) {
 1873|      1|          failf(data, "Illegal port number in EPSV reply");
 1874|      1|          return CURLE_FTP_WEIRD_PASV_REPLY;
 1875|      1|        }
 1876|      7|        if(ptr) {
 1877|      6|          ftpc->newport = (unsigned short)(num & 0xffff);
 1878|      6|          ftpc->newhost = strdup(control_address(conn));
 1879|      6|          if(!ftpc->newhost)
 1880|      0|            return CURLE_OUT_OF_MEMORY;
 1881|      6|        }
 1882|      7|      }
 1883|      1|      else
 1884|      1|        ptr = NULL;
 1885|      9|    }
 1886|     11|    if(!ptr) {
 1887|      5|      failf(data, "Weirdly formatted EPSV reply");
 1888|      5|      return CURLE_FTP_WEIRD_PASV_REPLY;
 1889|      5|    }
 1890|     11|  }
 1891|     59|  else if((ftpc->count1 == 1) &&
 1892|     59|          (ftpcode == 227)) {
 1893|       |    /* positive PASV response */
 1894|     18|    unsigned int ip[4] = {0, 0, 0, 0};
 1895|     18|    unsigned int port[2] = {0, 0};
 1896|       |
 1897|       |    /*
 1898|       |     * Scan for a sequence of six comma-separated numbers and use them as
 1899|       |     * IP+port indicators.
 1900|       |     *
 1901|       |     * Found reply-strings include:
 1902|       |     * "227 Entering Passive Mode (127,0,0,1,4,51)"
 1903|       |     * "227 Data transfer will passively listen to 127,0,0,1,4,51"
 1904|       |     * "227 Entering passive mode. 127,0,0,1,4,51"
 1905|       |     */
 1906|    481|    while(*str) {
 1907|    474|      if(6 == sscanf(str, "%u,%u,%u,%u,%u,%u",
 1908|    474|                     &ip[0], &ip[1], &ip[2], &ip[3],
 1909|    474|                     &port[0], &port[1]))
 1910|     11|        break;
 1911|    463|      str++;
 1912|    463|    }
 1913|       |
 1914|     18|    if(!*str || (ip[0] > 255) || (ip[1] > 255)  || (ip[2] > 255)  ||
 1915|     18|       (ip[3] > 255) || (port[0] > 255)  || (port[1] > 255) ) {
 1916|     13|      failf(data, "Couldn't interpret the 227-response");
 1917|     13|      return CURLE_FTP_WEIRD_227_FORMAT;
 1918|     13|    }
 1919|       |
 1920|       |    /* we got OK from server */
 1921|      5|    if(data->set.ftp_skip_ip) {
 1922|       |      /* told to ignore the remotely given IP but instead use the host we used
 1923|       |         for the control connection */
 1924|      5|      infof(data, "Skip %u.%u.%u.%u for data connection, re-use %s instead",
 1925|      5|            ip[0], ip[1], ip[2], ip[3],
 1926|      5|            conn->host.name);
 1927|      5|      ftpc->newhost = strdup(control_address(conn));
 1928|      5|    }
 1929|      0|    else
 1930|      0|      ftpc->newhost = aprintf("%u.%u.%u.%u", ip[0], ip[1], ip[2], ip[3]);
 1931|       |
 1932|      5|    if(!ftpc->newhost)
 1933|      0|      return CURLE_OUT_OF_MEMORY;
 1934|       |
 1935|      5|    ftpc->newport = (unsigned short)(((port[0]<<8) + port[1]) & 0xffff);
 1936|      5|  }
 1937|     41|  else if(ftpc->count1 == 0) {
 1938|       |    /* EPSV failed, move on to PASV */
 1939|     32|    return ftp_epsv_disable(data, conn);
 1940|     32|  }
 1941|      9|  else {
 1942|      9|    failf(data, "Bad PASV/EPSV response: %03d", ftpcode);
 1943|      9|    return CURLE_FTP_WEIRD_PASV_REPLY;
 1944|      9|  }
 1945|       |
 1946|     11|#ifndef CURL_DISABLE_PROXY
 1947|     11|  if(conn->bits.proxy) {
 1948|       |    /*
 1949|       |     * This connection uses a proxy and we need to connect to the proxy again
 1950|       |     * here. We don't want to rely on a former host lookup that might've
 1951|       |     * expired now, instead we remake the lookup here and now!
 1952|       |     */
 1953|      0|    const char * const host_name = conn->bits.socksproxy ?
 1954|      0|      conn->socks_proxy.host.name : conn->http_proxy.host.name;
 1955|      0|    rc = Curl_resolv(data, host_name, (int)conn->port, FALSE, &addr);
 1956|      0|    if(rc == CURLRESOLV_PENDING)
 1957|       |      /* BLOCKING, ignores the return code but 'addr' will be NULL in
 1958|       |         case of failure */
 1959|      0|      (void)Curl_resolver_wait_resolv(data, &addr);
 1960|       |
 1961|      0|    connectport =
 1962|      0|      (unsigned short)conn->port; /* we connect to the proxy's port */
 1963|       |
 1964|      0|    if(!addr) {
 1965|      0|      failf(data, "Can't resolve proxy host %s:%hu", host_name, connectport);
 1966|      0|      return CURLE_COULDNT_RESOLVE_PROXY;
 1967|      0|    }
 1968|      0|  }
 1969|     11|  else
 1970|     11|#endif
 1971|     11|  {
 1972|       |    /* normal, direct, ftp connection */
 1973|     11|    DEBUGASSERT(ftpc->newhost);
 1974|       |
 1975|       |    /* postponed address resolution in case of tcp fastopen */
 1976|     11|    if(conn->bits.tcp_fastopen && !conn->bits.reuse && !ftpc->newhost[0]) {
 1977|      0|      Curl_conninfo_remote(data, conn, conn->sock[FIRSTSOCKET]);
 1978|      0|      Curl_safefree(ftpc->newhost);
 1979|      0|      ftpc->newhost = strdup(control_address(conn));
 1980|      0|      if(!ftpc->newhost)
 1981|      0|        return CURLE_OUT_OF_MEMORY;
 1982|      0|    }
 1983|       |
 1984|     11|    rc = Curl_resolv(data, ftpc->newhost, ftpc->newport, FALSE, &addr);
 1985|     11|    if(rc == CURLRESOLV_PENDING)
 1986|       |      /* BLOCKING */
 1987|     11|      (void)Curl_resolver_wait_resolv(data, &addr);
 1988|       |
 1989|     11|    connectport = ftpc->newport; /* we connect to the remote port */
 1990|       |
 1991|     11|    if(!addr) {
 1992|     11|      failf(data, "Can't resolve new host %s:%hu", ftpc->newhost, connectport);
 1993|     11|      return CURLE_FTP_CANT_GET_HOST;
 1994|     11|    }
 1995|     11|  }
 1996|       |
 1997|      0|  conn->bits.tcpconnect[SECONDARYSOCKET] = FALSE;
 1998|      0|  result = Curl_connecthost(data, conn, addr);
 1999|       |
 2000|      0|  if(result) {
 2001|      0|    Curl_resolv_unlock(data, addr); /* we're done using this address */
 2002|      0|    if(ftpc->count1 == 0 && ftpcode == 229)
 2003|      0|      return ftp_epsv_disable(data, conn);
 2004|       |
 2005|      0|    return result;
 2006|      0|  }
 2007|       |
 2008|       |
 2009|       |  /*
 2010|       |   * When this is used from the multi interface, this might've returned with
 2011|       |   * the 'connected' set to FALSE and thus we are now awaiting a non-blocking
 2012|       |   * connect to connect.
 2013|       |   */
 2014|       |
 2015|      0|  if(data->set.verbose)
 2016|       |    /* this just dumps information about this second connection */
 2017|      0|    ftp_pasv_verbose(data, addr->addr, ftpc->newhost, connectport);
 2018|       |
 2019|      0|  Curl_resolv_unlock(data, addr); /* we're done using this address */
 2020|       |
 2021|      0|  Curl_safefree(conn->secondaryhostname);
 2022|      0|  conn->secondary_port = ftpc->newport;
 2023|      0|  conn->secondaryhostname = strdup(ftpc->newhost);
 2024|      0|  if(!conn->secondaryhostname)
 2025|      0|    return CURLE_OUT_OF_MEMORY;
 2026|       |
 2027|      0|  conn->bits.do_more = TRUE;
 2028|      0|  state(data, FTP_STOP); /* this phase is completed */
 2029|       |
 2030|      0|  return result;
 2031|      0|}
ftp.c:control_address:
 1821|     11|{
 1822|       |  /* Returns the control connection IP address.
 1823|       |     If a proxy tunnel is used, returns the original host name instead, because
 1824|       |     the effective control connection address is the proxy address,
 1825|       |     not the ftp host. */
 1826|     11|#ifndef CURL_DISABLE_PROXY
 1827|     11|  if(conn->bits.tunnel_proxy || conn->bits.socksproxy)
 1828|      0|    return conn->host.name;
 1829|     11|#endif
 1830|     11|  return conn->primary_ip;
 1831|     11|}
ftp.c:ftp_epsv_disable:
 1792|     32|{
 1793|     32|  CURLcode result = CURLE_OK;
 1794|       |
 1795|     32|  if(conn->bits.ipv6
 1796|     32|#ifndef CURL_DISABLE_PROXY
 1797|     32|     && !(conn->bits.tunnel_proxy || conn->bits.socksproxy)
 1798|     32|#endif
 1799|     32|    ) {
 1800|       |    /* We can't disable EPSV when doing IPv6, so this is instead a fail */
 1801|      0|    failf(data, "Failed EPSV attempt, exiting");
 1802|      0|    return CURLE_WEIRD_SERVER_REPLY;
 1803|      0|  }
 1804|       |
 1805|     32|  infof(data, "Failed EPSV attempt. Disabling EPSV");
 1806|       |  /* disable it for next transfer */
 1807|     32|  conn->bits.ftp_use_epsv = FALSE;
 1808|     32|  data->state.errorbuf = FALSE; /* allow error message to get
 1809|       |                                         rewritten */
 1810|     32|  result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "PASV");
 1811|     32|  if(!result) {
 1812|     32|    conn->proto.ftpc.count1++;
 1813|       |    /* remain in/go to the FTP_PASV state */
 1814|     32|    state(data, FTP_PASV);
 1815|     32|  }
 1816|     32|  return result;
 1817|     32|}
ftp.c:ftp_dophase_done:
 4259|      5|{
 4260|      5|  struct connectdata *conn = data->conn;
 4261|      5|  struct FTP *ftp = data->req.p.ftp;
 4262|      5|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4263|       |
 4264|      5|  if(connected) {
 4265|      0|    int completed;
 4266|      0|    CURLcode result = ftp_do_more(data, &completed);
 4267|       |
 4268|      0|    if(result) {
 4269|      0|      close_secondarysocket(data, conn);
 4270|      0|      return result;
 4271|      0|    }
 4272|      0|  }
 4273|       |
 4274|      5|  if(ftp->transfer != PPTRANSFER_BODY)
 4275|       |    /* no data to transfer */
 4276|      5|    Curl_setup_transfer(data, -1, -1, FALSE, -1);
 4277|      0|  else if(!connected)
 4278|       |    /* since we didn't connect now, we want do_more to get called */
 4279|      0|    conn->bits.do_more = TRUE;
 4280|       |
 4281|      5|  ftpc->ctl_valid = TRUE; /* seems good */
 4282|       |
 4283|      5|  return CURLE_OK;
 4284|      5|}
ftp.c:ftp_endofresp:
  537|  3.49k|{
  538|  3.49k|  (void)data;
  539|  3.49k|  (void)conn;
  540|       |
  541|  3.49k|  if((len > 3) && LASTLINE(line)) {
  542|  1.19k|    *code = curlx_sltosi(strtol(line, NULL, 10));
  543|  1.19k|    return TRUE;
  544|  1.19k|  }
  545|       |
  546|  2.30k|  return FALSE;
  547|  3.49k|}
ftp.c:ftp_done:
 3191|    167|{
 3192|    167|  struct connectdata *conn = data->conn;
 3193|    167|  struct FTP *ftp = data->req.p.ftp;
 3194|    167|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3195|    167|  struct pingpong *pp = &ftpc->pp;
 3196|    167|  ssize_t nread;
 3197|    167|  int ftpcode;
 3198|    167|  CURLcode result = CURLE_OK;
 3199|    167|  char *rawPath = NULL;
 3200|    167|  size_t pathLen = 0;
 3201|       |
 3202|    167|  if(!ftp)
 3203|      0|    return CURLE_OK;
 3204|       |
 3205|    167|  switch(status) {
 3206|      0|  case CURLE_BAD_DOWNLOAD_RESUME:
 3207|     15|  case CURLE_FTP_WEIRD_PASV_REPLY:
 3208|     15|  case CURLE_FTP_PORT_FAILED:
 3209|     15|  case CURLE_FTP_ACCEPT_FAILED:
 3210|     15|  case CURLE_FTP_ACCEPT_TIMEOUT:
 3211|     16|  case CURLE_FTP_COULDNT_SET_TYPE:
 3212|     16|  case CURLE_FTP_COULDNT_RETR_FILE:
 3213|     16|  case CURLE_PARTIAL_FILE:
 3214|     16|  case CURLE_UPLOAD_FAILED:
 3215|     34|  case CURLE_REMOTE_ACCESS_DENIED:
 3216|     34|  case CURLE_FILESIZE_EXCEEDED:
 3217|     35|  case CURLE_REMOTE_FILE_NOT_FOUND:
 3218|     35|  case CURLE_WRITE_ERROR:
 3219|       |    /* the connection stays alive fine even though this happened */
 3220|       |    /* fall-through */
 3221|     61|  case CURLE_OK: /* doesn't affect the control connection's status */
 3222|     61|    if(!premature)
 3223|     40|      break;
 3224|       |
 3225|       |    /* until we cope better with prematurely ended requests, let them
 3226|       |     * fallback as if in complete failure */
 3227|       |    /* FALLTHROUGH */
 3228|    127|  default:       /* by default, an error means the control connection is
 3229|       |                    wedged and should not be used anymore */
 3230|    127|    ftpc->ctl_valid = FALSE;
 3231|    127|    ftpc->cwdfail = TRUE; /* set this TRUE to prevent us to remember the
 3232|       |                             current path, as this connection is going */
 3233|    127|    connclose(conn, "FTP ended with bad error code");
 3234|    127|    result = status;      /* use the already set error code */
 3235|    127|    break;
 3236|    167|  }
 3237|       |
 3238|    167|  if(data->state.wildcardmatch) {
 3239|     11|    if(data->set.chunk_end && ftpc->file) {
 3240|      0|      Curl_set_in_callback(data, true);
 3241|      0|      data->set.chunk_end(data->wildcard.customptr);
 3242|      0|      Curl_set_in_callback(data, false);
 3243|      0|    }
 3244|     11|    ftpc->known_filesize = -1;
 3245|     11|  }
 3246|       |
 3247|    167|  if(!result)
 3248|       |    /* get the url-decoded "raw" path */
 3249|     61|    result = Curl_urldecode(data, ftp->path, 0, &rawPath, &pathLen,
 3250|     61|                            REJECT_CTRL);
 3251|    167|  if(result) {
 3252|       |    /* We can limp along anyway (and should try to since we may already be in
 3253|       |     * the error path) */
 3254|    106|    ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3255|    106|    connclose(conn, "FTP: out of memory!"); /* mark for connection closure */
 3256|    106|    free(ftpc->prevpath);
 3257|    106|    ftpc->prevpath = NULL; /* no path remembering */
 3258|    106|  }
 3259|     61|  else { /* remember working directory for connection reuse */
 3260|     61|    if((data->set.ftp_filemethod == FTPFILE_NOCWD) && (rawPath[0] == '/'))
 3261|      0|      free(rawPath); /* full path => no CWDs happened => keep ftpc->prevpath */
 3262|     61|    else {
 3263|     61|      free(ftpc->prevpath);
 3264|       |
 3265|     61|      if(!ftpc->cwdfail) {
 3266|     22|        if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 3267|      0|          pathLen = 0; /* relative path => working directory is FTP home */
 3268|     22|        else
 3269|     22|          pathLen -= ftpc->file?strlen(ftpc->file):0; /* file is url-decoded */
 3270|       |
 3271|     22|        rawPath[pathLen] = '\0';
 3272|     22|        ftpc->prevpath = rawPath;
 3273|     22|      }
 3274|     39|      else {
 3275|     39|        free(rawPath);
 3276|     39|        ftpc->prevpath = NULL; /* no path */
 3277|     39|      }
 3278|     61|    }
 3279|       |
 3280|     61|    if(ftpc->prevpath)
 3281|     22|      infof(data, "Remembering we are in dir \"%s\"", ftpc->prevpath);
 3282|     61|  }
 3283|       |
 3284|       |  /* free the dir tree and file parts */
 3285|    167|  freedirs(ftpc);
 3286|       |
 3287|       |  /* shut down the socket to inform the server we're done */
 3288|       |
 3289|       |#ifdef _WIN32_WCE
 3290|       |  shutdown(conn->sock[SECONDARYSOCKET], 2);  /* SD_BOTH */
 3291|       |#endif
 3292|       |
 3293|    167|  if(conn->sock[SECONDARYSOCKET] != CURL_SOCKET_BAD) {
 3294|      0|    if(!result && ftpc->dont_check && data->req.maxdownload > 0) {
 3295|       |      /* partial download completed */
 3296|      0|      result = Curl_pp_sendf(data, pp, "%s", "ABOR");
 3297|      0|      if(result) {
 3298|      0|        failf(data, "Failure sending ABOR command: %s",
 3299|      0|              curl_easy_strerror(result));
 3300|      0|        ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3301|      0|        connclose(conn, "ABOR command failed"); /* connection closure */
 3302|      0|      }
 3303|      0|    }
 3304|       |
 3305|      0|    if(conn->ssl[SECONDARYSOCKET].use) {
 3306|       |      /* The secondary socket is using SSL so we must close down that part
 3307|       |         first before we close the socket for real */
 3308|      0|      Curl_ssl_close(data, conn, SECONDARYSOCKET);
 3309|       |
 3310|       |      /* Note that we keep "use" set to TRUE since that (next) connection is
 3311|       |         still requested to use SSL */
 3312|      0|    }
 3313|      0|    close_secondarysocket(data, conn);
 3314|      0|  }
 3315|       |
 3316|    167|  if(!result && (ftp->transfer == PPTRANSFER_BODY) && ftpc->ctl_valid &&
 3317|    167|     pp->pending_resp && !premature) {
 3318|       |    /*
 3319|       |     * Let's see what the server says about the transfer we just performed,
 3320|       |     * but lower the timeout as sometimes this connection has died while the
 3321|       |     * data has been transferred. This happens when doing through NATs etc that
 3322|       |     * abandon old silent connections.
 3323|       |     */
 3324|      0|    timediff_t old_time = pp->response_time;
 3325|       |
 3326|      0|    pp->response_time = 60*1000; /* give it only a minute for now */
 3327|      0|    pp->response = Curl_now(); /* timeout relative now */
 3328|       |
 3329|      0|    result = Curl_GetFTPResponse(data, &nread, &ftpcode);
 3330|       |
 3331|      0|    pp->response_time = old_time; /* set this back to previous value */
 3332|       |
 3333|      0|    if(!nread && (CURLE_OPERATION_TIMEDOUT == result)) {
 3334|      0|      failf(data, "control connection looks dead");
 3335|      0|      ftpc->ctl_valid = FALSE; /* mark control connection as bad */
 3336|      0|      connclose(conn, "Timeout or similar in FTP DONE operation"); /* close */
 3337|      0|    }
 3338|       |
 3339|      0|    if(result) {
 3340|      0|      Curl_safefree(ftp->pathalloc);
 3341|      0|      return result;
 3342|      0|    }
 3343|       |
 3344|      0|    if(ftpc->dont_check && data->req.maxdownload > 0) {
 3345|       |      /* we have just sent ABOR and there is no reliable way to check if it was
 3346|       |       * successful or not; we have to close the connection now */
 3347|      0|      infof(data, "partial download completed, closing connection");
 3348|      0|      connclose(conn, "Partial download with no ability to check");
 3349|      0|      return result;
 3350|      0|    }
 3351|       |
 3352|      0|    if(!ftpc->dont_check) {
 3353|       |      /* 226 Transfer complete, 250 Requested file action okay, completed. */
 3354|      0|      switch(ftpcode) {
 3355|      0|      case 226:
 3356|      0|      case 250:
 3357|      0|        break;
 3358|      0|      case 552:
 3359|      0|        failf(data, "Exceeded storage allocation");
 3360|      0|        result = CURLE_REMOTE_DISK_FULL;
 3361|      0|        break;
 3362|      0|      default:
 3363|      0|        failf(data, "server did not report OK, got %d", ftpcode);
 3364|      0|        result = CURLE_PARTIAL_FILE;
 3365|      0|        break;
 3366|      0|      }
 3367|      0|    }
 3368|      0|  }
 3369|       |
 3370|    167|  if(result || premature)
 3371|       |    /* the response code from the transfer showed an error already so no
 3372|       |       use checking further */
 3373|    127|    ;
 3374|     40|  else if(data->set.upload) {
 3375|      3|    if((-1 != data->state.infilesize) &&
 3376|      3|       (data->state.infilesize != data->req.writebytecount) &&
 3377|      3|       !data->set.crlf &&
 3378|      3|       (ftp->transfer == PPTRANSFER_BODY)) {
 3379|      1|      failf(data, "Uploaded unaligned file size (%" CURL_FORMAT_CURL_OFF_T
 3380|      1|            " out of %" CURL_FORMAT_CURL_OFF_T " bytes)",
 3381|      1|            data->req.bytecount, data->state.infilesize);
 3382|      1|      result = CURLE_PARTIAL_FILE;
 3383|      1|    }
 3384|      3|  }
 3385|     37|  else {
 3386|     37|    if((-1 != data->req.size) &&
 3387|     37|       (data->req.size != data->req.bytecount) &&
 3388|     37|#ifdef CURL_DO_LINEEND_CONV
 3389|       |       /* Most FTP servers don't adjust their file SIZE response for CRLFs, so
 3390|       |        * we'll check to see if the discrepancy can be explained by the number
 3391|       |        * of CRLFs we've changed to LFs.
 3392|       |        */
 3393|     37|       ((data->req.size + data->state.crlf_conversions) !=
 3394|      0|        data->req.bytecount) &&
 3395|     37|#endif /* CURL_DO_LINEEND_CONV */
 3396|     37|       (data->req.maxdownload != data->req.bytecount)) {
 3397|      0|      failf(data, "Received only partial file: %" CURL_FORMAT_CURL_OFF_T
 3398|      0|            " bytes", data->req.bytecount);
 3399|      0|      result = CURLE_PARTIAL_FILE;
 3400|      0|    }
 3401|     37|    else if(!ftpc->dont_check &&
 3402|     37|            !data->req.bytecount &&
 3403|     37|            (data->req.size>0)) {
 3404|      0|      failf(data, "No data was received!");
 3405|      0|      result = CURLE_FTP_COULDNT_RETR_FILE;
 3406|      0|    }
 3407|     37|  }
 3408|       |
 3409|       |  /* clear these for next connection */
 3410|    167|  ftp->transfer = PPTRANSFER_BODY;
 3411|    167|  ftpc->dont_check = FALSE;
 3412|       |
 3413|       |  /* Send any post-transfer QUOTE strings? */
 3414|    167|  if(!status && !result && !premature && data->set.postquote)
 3415|      0|    result = ftp_sendquote(data, conn, data->set.postquote);
 3416|    167|  Curl_safefree(ftp->pathalloc);
 3417|    167|  return result;
 3418|    167|}
ftp.c:freedirs:
  244|    349|{
  245|    349|  if(ftpc->dirs) {
  246|     59|    int i;
  247|    180|    for(i = 0; i < ftpc->dirdepth; i++) {
  248|    121|      free(ftpc->dirs[i]);
  249|    121|      ftpc->dirs[i] = NULL;
  250|    121|    }
  251|     59|    free(ftpc->dirs);
  252|     59|    ftpc->dirs = NULL;
  253|     59|    ftpc->dirdepth = 0;
  254|     59|  }
  255|    349|  Curl_safefree(ftpc->file);
  256|       |
  257|       |  /* no longer of any use */
  258|    349|  Curl_safefree(ftpc->newhost);
  259|    349|}
ftp.c:ftp_do:
 4000|    113|{
 4001|    113|  CURLcode result = CURLE_OK;
 4002|    113|  struct connectdata *conn = data->conn;
 4003|    113|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4004|       |
 4005|    113|  *done = FALSE; /* default to false */
 4006|    113|  ftpc->wait_data_conn = FALSE; /* default to no such wait */
 4007|       |
 4008|    113|  if(data->state.wildcardmatch) {
 4009|      7|    result = wc_statemach(data);
 4010|      7|    if(data->wildcard.state == CURLWC_SKIP ||
 4011|      7|      data->wildcard.state == CURLWC_DONE) {
 4012|       |      /* do not call ftp_regular_transfer */
 4013|      0|      return CURLE_OK;
 4014|      0|    }
 4015|      7|    if(result) /* error, loop or skipping the file */
 4016|      1|      return result;
 4017|      7|  }
 4018|    106|  else { /* no wildcard FSM needed */
 4019|    106|    result = ftp_parse_url_path(data);
 4020|    106|    if(result)
 4021|      2|      return result;
 4022|    106|  }
 4023|       |
 4024|    110|  result = ftp_regular_transfer(data, done);
 4025|       |
 4026|    110|  return result;
 4027|    113|}
ftp.c:wc_statemach:
 3863|      7|{
 3864|      7|  struct WildcardData * const wildcard = &(data->wildcard);
 3865|      7|  struct connectdata *conn = data->conn;
 3866|      7|  CURLcode result = CURLE_OK;
 3867|       |
 3868|      7|  for(;;) {
 3869|      7|    switch(wildcard->state) {
 3870|      6|    case CURLWC_INIT:
 3871|      6|      result = init_wc_data(data);
 3872|      6|      if(wildcard->state == CURLWC_CLEAN)
 3873|       |        /* only listing! */
 3874|      2|        return result;
 3875|      4|      wildcard->state = result ? CURLWC_ERROR : CURLWC_MATCHING;
 3876|      4|      return result;
 3877|       |
 3878|      1|    case CURLWC_MATCHING: {
 3879|       |      /* In this state is LIST response successfully parsed, so lets restore
 3880|       |         previous WRITEFUNCTION callback and WRITEDATA pointer */
 3881|      1|      struct ftp_wc *ftpwc = wildcard->protdata;
 3882|      1|      data->set.fwrite_func = ftpwc->backup.write_function;
 3883|      1|      data->set.out = ftpwc->backup.file_descriptor;
 3884|      1|      ftpwc->backup.write_function = ZERO_NULL;
 3885|      1|      ftpwc->backup.file_descriptor = NULL;
 3886|      1|      wildcard->state = CURLWC_DOWNLOADING;
 3887|       |
 3888|      1|      if(Curl_ftp_parselist_geterror(ftpwc->parser)) {
 3889|       |        /* error found in LIST parsing */
 3890|      0|        wildcard->state = CURLWC_CLEAN;
 3891|      0|        continue;
 3892|      0|      }
 3893|      1|      if(wildcard->filelist.size == 0) {
 3894|       |        /* no corresponding file */
 3895|      1|        wildcard->state = CURLWC_CLEAN;
 3896|      1|        return CURLE_REMOTE_FILE_NOT_FOUND;
 3897|      1|      }
 3898|      0|      continue;
 3899|      1|    }
 3900|       |
 3901|      0|    case CURLWC_DOWNLOADING: {
 3902|       |      /* filelist has at least one file, lets get first one */
 3903|      0|      struct ftp_conn *ftpc = &conn->proto.ftpc;
 3904|      0|      struct curl_fileinfo *finfo = wildcard->filelist.head->ptr;
 3905|      0|      struct FTP *ftp = data->req.p.ftp;
 3906|       |
 3907|      0|      char *tmp_path = aprintf("%s%s", wildcard->path, finfo->filename);
 3908|      0|      if(!tmp_path)
 3909|      0|        return CURLE_OUT_OF_MEMORY;
 3910|       |
 3911|       |      /* switch default ftp->path and tmp_path */
 3912|      0|      free(ftp->pathalloc);
 3913|      0|      ftp->pathalloc = ftp->path = tmp_path;
 3914|       |
 3915|      0|      infof(data, "Wildcard - START of \"%s\"", finfo->filename);
 3916|      0|      if(data->set.chunk_bgn) {
 3917|      0|        long userresponse;
 3918|      0|        Curl_set_in_callback(data, true);
 3919|      0|        userresponse = data->set.chunk_bgn(
 3920|      0|          finfo, wildcard->customptr, (int)wildcard->filelist.size);
 3921|      0|        Curl_set_in_callback(data, false);
 3922|      0|        switch(userresponse) {
 3923|      0|        case CURL_CHUNK_BGN_FUNC_SKIP:
 3924|      0|          infof(data, "Wildcard - \"%s\" skipped by user",
 3925|      0|                finfo->filename);
 3926|      0|          wildcard->state = CURLWC_SKIP;
 3927|      0|          continue;
 3928|      0|        case CURL_CHUNK_BGN_FUNC_FAIL:
 3929|      0|          return CURLE_CHUNK_FAILED;
 3930|      0|        }
 3931|      0|      }
 3932|       |
 3933|      0|      if(finfo->filetype != CURLFILETYPE_FILE) {
 3934|      0|        wildcard->state = CURLWC_SKIP;
 3935|      0|        continue;
 3936|      0|      }
 3937|       |
 3938|      0|      if(finfo->flags & CURLFINFOFLAG_KNOWN_SIZE)
 3939|      0|        ftpc->known_filesize = finfo->size;
 3940|       |
 3941|      0|      result = ftp_parse_url_path(data);
 3942|      0|      if(result)
 3943|      0|        return result;
 3944|       |
 3945|       |      /* we don't need the Curl_fileinfo of first file anymore */
 3946|      0|      Curl_llist_remove(&wildcard->filelist, wildcard->filelist.head, NULL);
 3947|       |
 3948|      0|      if(wildcard->filelist.size == 0) { /* remains only one file to down. */
 3949|      0|        wildcard->state = CURLWC_CLEAN;
 3950|       |        /* after that will be ftp_do called once again and no transfer
 3951|       |           will be done because of CURLWC_CLEAN state */
 3952|      0|        return CURLE_OK;
 3953|      0|      }
 3954|      0|      return result;
 3955|      0|    }
 3956|       |
 3957|      0|    case CURLWC_SKIP: {
 3958|      0|      if(data->set.chunk_end) {
 3959|      0|        Curl_set_in_callback(data, true);
 3960|      0|        data->set.chunk_end(data->wildcard.customptr);
 3961|      0|        Curl_set_in_callback(data, false);
 3962|      0|      }
 3963|      0|      Curl_llist_remove(&wildcard->filelist, wildcard->filelist.head, NULL);
 3964|      0|      wildcard->state = (wildcard->filelist.size == 0) ?
 3965|      0|        CURLWC_CLEAN : CURLWC_DOWNLOADING;
 3966|      0|      continue;
 3967|      0|    }
 3968|       |
 3969|      0|    case CURLWC_CLEAN: {
 3970|      0|      struct ftp_wc *ftpwc = wildcard->protdata;
 3971|      0|      result = CURLE_OK;
 3972|      0|      if(ftpwc)
 3973|      0|        result = Curl_ftp_parselist_geterror(ftpwc->parser);
 3974|       |
 3975|      0|      wildcard->state = result ? CURLWC_ERROR : CURLWC_DONE;
 3976|      0|      return result;
 3977|      0|    }
 3978|       |
 3979|      0|    case CURLWC_DONE:
 3980|      0|    case CURLWC_ERROR:
 3981|      0|    case CURLWC_CLEAR:
 3982|      0|      if(wildcard->dtor)
 3983|      0|        wildcard->dtor(wildcard->protdata);
 3984|      0|      return result;
 3985|      7|    }
 3986|      7|  }
 3987|       |  /* UNREACHABLE */
 3988|      7|}
ftp.c:init_wc_data:
 3768|      6|{
 3769|      6|  char *last_slash;
 3770|      6|  struct FTP *ftp = data->req.p.ftp;
 3771|      6|  char *path = ftp->path;
 3772|      6|  struct WildcardData *wildcard = &(data->wildcard);
 3773|      6|  CURLcode result = CURLE_OK;
 3774|      6|  struct ftp_wc *ftpwc = NULL;
 3775|       |
 3776|      6|  last_slash = strrchr(ftp->path, '/');
 3777|      6|  if(last_slash) {
 3778|      4|    last_slash++;
 3779|      4|    if(last_slash[0] == '\0') {
 3780|      1|      wildcard->state = CURLWC_CLEAN;
 3781|      1|      result = ftp_parse_url_path(data);
 3782|      1|      return result;
 3783|      1|    }
 3784|      3|    wildcard->pattern = strdup(last_slash);
 3785|      3|    if(!wildcard->pattern)
 3786|      0|      return CURLE_OUT_OF_MEMORY;
 3787|      3|    last_slash[0] = '\0'; /* cut file from path */
 3788|      3|  }
 3789|      2|  else { /* there is only 'wildcard pattern' or nothing */
 3790|      2|    if(path[0]) {
 3791|      1|      wildcard->pattern = strdup(path);
 3792|      1|      if(!wildcard->pattern)
 3793|      0|        return CURLE_OUT_OF_MEMORY;
 3794|      1|      path[0] = '\0';
 3795|      1|    }
 3796|      1|    else { /* only list */
 3797|      1|      wildcard->state = CURLWC_CLEAN;
 3798|      1|      result = ftp_parse_url_path(data);
 3799|      1|      return result;
 3800|      1|    }
 3801|      2|  }
 3802|       |
 3803|       |  /* program continues only if URL is not ending with slash, allocate needed
 3804|       |     resources for wildcard transfer */
 3805|       |
 3806|       |  /* allocate ftp protocol specific wildcard data */
 3807|      4|  ftpwc = calloc(1, sizeof(struct ftp_wc));
 3808|      4|  if(!ftpwc) {
 3809|      0|    result = CURLE_OUT_OF_MEMORY;
 3810|      0|    goto fail;
 3811|      0|  }
 3812|       |
 3813|       |  /* INITIALIZE parselist structure */
 3814|      4|  ftpwc->parser = Curl_ftp_parselist_data_alloc();
 3815|      4|  if(!ftpwc->parser) {
 3816|      0|    result = CURLE_OUT_OF_MEMORY;
 3817|      0|    goto fail;
 3818|      0|  }
 3819|       |
 3820|      4|  wildcard->protdata = ftpwc; /* put it to the WildcardData tmp pointer */
 3821|      4|  wildcard->dtor = wc_data_dtor;
 3822|       |
 3823|       |  /* wildcard does not support NOCWD option (assert it?) */
 3824|      4|  if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 3825|      0|    data->set.ftp_filemethod = FTPFILE_MULTICWD;
 3826|       |
 3827|       |  /* try to parse ftp url */
 3828|      4|  result = ftp_parse_url_path(data);
 3829|      4|  if(result) {
 3830|      0|    goto fail;
 3831|      0|  }
 3832|       |
 3833|      4|  wildcard->path = strdup(ftp->path);
 3834|      4|  if(!wildcard->path) {
 3835|      0|    result = CURLE_OUT_OF_MEMORY;
 3836|      0|    goto fail;
 3837|      0|  }
 3838|       |
 3839|       |  /* backup old write_function */
 3840|      4|  ftpwc->backup.write_function = data->set.fwrite_func;
 3841|       |  /* parsing write function */
 3842|      4|  data->set.fwrite_func = Curl_ftp_parselist;
 3843|       |  /* backup old file descriptor */
 3844|      4|  ftpwc->backup.file_descriptor = data->set.out;
 3845|       |  /* let the writefunc callback know the transfer */
 3846|      4|  data->set.out = data;
 3847|       |
 3848|      4|  infof(data, "Wildcard - Parsing started");
 3849|      4|  return CURLE_OK;
 3850|       |
 3851|      0|  fail:
 3852|      0|  if(ftpwc) {
 3853|      0|    Curl_ftp_parselist_data_free(&ftpwc->parser);
 3854|      0|    free(ftpwc);
 3855|      0|  }
 3856|      0|  Curl_safefree(wildcard->pattern);
 3857|      0|  wildcard->dtor = ZERO_NULL;
 3858|      0|  wildcard->protdata = NULL;
 3859|      0|  return result;
 3860|      4|}
ftp.c:wc_data_dtor:
 3760|      4|{
 3761|      4|  struct ftp_wc *ftpwc = ptr;
 3762|      4|  if(ftpwc && ftpwc->parser)
 3763|      4|    Curl_ftp_parselist_data_free(&ftpwc->parser);
 3764|      4|  free(ftpwc);
 3765|      4|}
ftp.c:ftp_parse_url_path:
 4113|    112|{
 4114|       |  /* the ftp struct is already inited in ftp_connect() */
 4115|    112|  struct FTP *ftp = data->req.p.ftp;
 4116|    112|  struct connectdata *conn = data->conn;
 4117|    112|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4118|    112|  const char *slashPos = NULL;
 4119|    112|  const char *fileName = NULL;
 4120|    112|  CURLcode result = CURLE_OK;
 4121|    112|  char *rawPath = NULL; /* url-decoded "raw" path */
 4122|    112|  size_t pathLen = 0;
 4123|       |
 4124|    112|  ftpc->ctl_valid = FALSE;
 4125|    112|  ftpc->cwdfail = FALSE;
 4126|       |
 4127|       |  /* url-decode ftp path before further evaluation */
 4128|    112|  result = Curl_urldecode(data, ftp->path, 0, &rawPath, &pathLen, REJECT_CTRL);
 4129|    112|  if(result)
 4130|      1|    return result;
 4131|       |
 4132|    111|  switch(data->set.ftp_filemethod) {
 4133|      0|    case FTPFILE_NOCWD: /* fastest, but less standard-compliant */
 4134|       |
 4135|      0|      if((pathLen > 0) && (rawPath[pathLen - 1] != '/'))
 4136|      0|          fileName = rawPath;  /* this is a full file path */
 4137|       |      /*
 4138|       |        else: ftpc->file is not used anywhere other than for operations on
 4139|       |              a file. In other words, never for directory operations.
 4140|       |              So we can safely leave filename as NULL here and use it as a
 4141|       |              argument in dir/file decisions.
 4142|       |      */
 4143|      0|      break;
 4144|       |
 4145|      0|    case FTPFILE_SINGLECWD:
 4146|      0|      slashPos = strrchr(rawPath, '/');
 4147|      0|      if(slashPos) {
 4148|       |        /* get path before last slash, except for / */
 4149|      0|        size_t dirlen = slashPos - rawPath;
 4150|      0|        if(dirlen == 0)
 4151|      0|            dirlen++;
 4152|       |
 4153|      0|        ftpc->dirs = calloc(1, sizeof(ftpc->dirs[0]));
 4154|      0|        if(!ftpc->dirs) {
 4155|      0|          free(rawPath);
 4156|      0|          return CURLE_OUT_OF_MEMORY;
 4157|      0|        }
 4158|       |
 4159|      0|        ftpc->dirs[0] = calloc(1, dirlen + 1);
 4160|      0|        if(!ftpc->dirs[0]) {
 4161|      0|          free(rawPath);
 4162|      0|          return CURLE_OUT_OF_MEMORY;
 4163|      0|        }
 4164|       |
 4165|      0|        strncpy(ftpc->dirs[0], rawPath, dirlen);
 4166|      0|        ftpc->dirdepth = 1; /* we consider it to be a single dir */
 4167|      0|        fileName = slashPos + 1; /* rest is file name */
 4168|      0|      }
 4169|      0|      else
 4170|      0|        fileName = rawPath; /* file name only (or empty) */
 4171|      0|      break;
 4172|       |
 4173|      0|    default: /* allow pretty much anything */
 4174|    111|    case FTPFILE_MULTICWD: {
 4175|       |      /* current position: begin of next path component */
 4176|    111|      const char *curPos = rawPath;
 4177|       |
 4178|    111|      int dirAlloc = 0; /* number of entries allocated for the 'dirs' array */
 4179|    111|      const char *str = rawPath;
 4180|  1.28k|      for(; *str != 0; ++str)
 4181|  1.17k|        if (*str == '/')
 4182|    148|          ++dirAlloc;
 4183|       |
 4184|    111|      if(dirAlloc > 0) {
 4185|     59|        ftpc->dirs = calloc(dirAlloc, sizeof(ftpc->dirs[0]));
 4186|     59|        if(!ftpc->dirs) {
 4187|      0|          free(rawPath);
 4188|      0|          return CURLE_OUT_OF_MEMORY;
 4189|      0|        }
 4190|       |
 4191|       |        /* parse the URL path into separate path components */
 4192|    207|        while((slashPos = strchr(curPos, '/')) != NULL) {
 4193|    148|          size_t compLen = slashPos - curPos;
 4194|       |
 4195|       |          /* path starts with a slash: add that as a directory */
 4196|    148|          if((compLen == 0) && (ftpc->dirdepth == 0))
 4197|      2|            ++compLen;
 4198|       |
 4199|       |          /* we skip empty path components, like "x//y" since the FTP command
 4200|       |             CWD requires a parameter and a non-existent parameter a) doesn't
 4201|       |             work on many servers and b) has no effect on the others. */
 4202|    148|          if(compLen > 0) {
 4203|    121|            char *comp = calloc(1, compLen + 1);
 4204|    121|            if(!comp) {
 4205|      0|              free(rawPath);
 4206|      0|              return CURLE_OUT_OF_MEMORY;
 4207|      0|            }
 4208|    121|            strncpy(comp, curPos, compLen);
 4209|    121|            ftpc->dirs[ftpc->dirdepth++] = comp;
 4210|    121|          }
 4211|    148|          curPos = slashPos + 1;
 4212|    148|        }
 4213|     59|      }
 4214|    111|      DEBUGASSERT(ftpc->dirdepth <= dirAlloc);
 4215|    111|      fileName = curPos; /* the rest is the file name (or empty) */
 4216|    111|    }
 4217|      0|    break;
 4218|    111|  } /* switch */
 4219|       |
 4220|    111|  if(fileName && *fileName)
 4221|     57|    ftpc->file = strdup(fileName);
 4222|     54|  else
 4223|     54|    ftpc->file = NULL; /* instead of point to a zero byte,
 4224|       |                            we make it a NULL pointer */
 4225|       |
 4226|    111|  if(data->set.upload && !ftpc->file && (ftp->transfer == PPTRANSFER_BODY)) {
 4227|       |    /* We need a file name when uploading. Return error! */
 4228|      1|    failf(data, "Uploading to a URL without a file name!");
 4229|      1|    free(rawPath);
 4230|      1|    return CURLE_URL_MALFORMAT;
 4231|      1|  }
 4232|       |
 4233|    110|  ftpc->cwddone = FALSE; /* default to not done */
 4234|       |
 4235|    110|  if((data->set.ftp_filemethod == FTPFILE_NOCWD) && (rawPath[0] == '/'))
 4236|      0|    ftpc->cwddone = TRUE; /* skip CWD for absolute paths */
 4237|    110|  else { /* newly created FTP connections are already in entry path */
 4238|    110|    const char *oldPath = conn->bits.reuse ? ftpc->prevpath : "";
 4239|    110|    if(oldPath) {
 4240|    110|      size_t n = pathLen;
 4241|    110|      if(data->set.ftp_filemethod == FTPFILE_NOCWD)
 4242|      0|        n = 0; /* CWD to entry for relative paths */
 4243|    110|      else
 4244|    110|        n -= ftpc->file?strlen(ftpc->file):0;
 4245|       |
 4246|    110|      if((strlen(oldPath) == n) && !strncmp(rawPath, oldPath, n)) {
 4247|     52|        infof(data, "Request has same path as previous transfer");
 4248|     52|        ftpc->cwddone = TRUE;
 4249|     52|      }
 4250|    110|    }
 4251|    110|  }
 4252|       |
 4253|    110|  free(rawPath);
 4254|    110|  return CURLE_OK;
 4255|    111|}
ftp.c:ftp_regular_transfer:
 4317|    110|{
 4318|    110|  CURLcode result = CURLE_OK;
 4319|    110|  bool connected = FALSE;
 4320|    110|  struct connectdata *conn = data->conn;
 4321|    110|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4322|    110|  data->req.size = -1; /* make sure this is unknown at this point */
 4323|       |
 4324|    110|  Curl_pgrsSetUploadCounter(data, 0);
 4325|    110|  Curl_pgrsSetDownloadCounter(data, 0);
 4326|    110|  Curl_pgrsSetUploadSize(data, -1);
 4327|    110|  Curl_pgrsSetDownloadSize(data, -1);
 4328|       |
 4329|    110|  ftpc->ctl_valid = TRUE; /* starts good */
 4330|       |
 4331|    110|  result = ftp_perform(data,
 4332|    110|                       &connected, /* have we connected after PASV/PORT */
 4333|    110|                       dophase_done); /* all commands in the DO-phase done? */
 4334|       |
 4335|    110|  if(!result) {
 4336|       |
 4337|     95|    if(!*dophase_done)
 4338|       |      /* the DO phase has not completed yet */
 4339|     93|      return CURLE_OK;
 4340|       |
 4341|      2|    result = ftp_dophase_done(data, connected);
 4342|       |
 4343|      2|    if(result)
 4344|      0|      return result;
 4345|      2|  }
 4346|     15|  else
 4347|     15|    freedirs(ftpc);
 4348|       |
 4349|     17|  return result;
 4350|    110|}
ftp.c:ftp_perform:
 3726|    110|{
 3727|       |  /* this is FTP and no proxy */
 3728|    110|  CURLcode result = CURLE_OK;
 3729|    110|  struct connectdata *conn = data->conn;
 3730|       |
 3731|    110|  DEBUGF(infof(data, "DO phase starts"));
 3732|       |
 3733|    110|  if(data->set.opt_no_body) {
 3734|       |    /* requested no body means no transfer... */
 3735|      8|    struct FTP *ftp = data->req.p.ftp;
 3736|      8|    ftp->transfer = PPTRANSFER_INFO;
 3737|      8|  }
 3738|       |
 3739|    110|  *dophase_done = FALSE; /* not done yet */
 3740|       |
 3741|       |  /* start the first command in the DO phase */
 3742|    110|  result = ftp_state_quote(data, TRUE, FTP_QUOTE);
 3743|    110|  if(result)
 3744|      0|    return result;
 3745|       |
 3746|       |  /* run the state-machine */
 3747|    110|  result = ftp_multi_statemach(data, dophase_done);
 3748|       |
 3749|    110|  *connected = conn->bits.tcpconnect[SECONDARYSOCKET];
 3750|       |
 3751|    110|  infof(data, "ftp_perform ends with SECONDARY: %d", *connected);
 3752|       |
 3753|    110|  if(*dophase_done)
 3754|      3|    DEBUGF(infof(data, "DO phase is complete1"));
 3755|       |
 3756|    110|  return result;
 3757|    110|}
ftp.c:ftp_disconnect:
 4072|    167|{
 4073|    167|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 4074|    167|  struct pingpong *pp = &ftpc->pp;
 4075|       |
 4076|       |  /* We cannot send quit unconditionally. If this connection is stale or
 4077|       |     bad in any way, sending quit and waiting around here will make the
 4078|       |     disconnect wait in vain and cause more problems than we need to.
 4079|       |
 4080|       |     ftp_quit() will check the state of ftp->ctl_valid. If it's ok it
 4081|       |     will try to send the QUIT command, otherwise it will just return.
 4082|       |  */
 4083|    167|  if(dead_connection)
 4084|     68|    ftpc->ctl_valid = FALSE;
 4085|       |
 4086|       |  /* The FTP session may or may not have been allocated/setup at this point! */
 4087|    167|  (void)ftp_quit(data, conn); /* ignore errors on the QUIT */
 4088|       |
 4089|    167|  if(ftpc->entrypath) {
 4090|     21|    if(data->state.most_recent_ftp_entrypath == ftpc->entrypath) {
 4091|     17|      data->state.most_recent_ftp_entrypath = NULL;
 4092|     17|    }
 4093|     21|    Curl_safefree(ftpc->entrypath);
 4094|     21|  }
 4095|       |
 4096|    167|  freedirs(ftpc);
 4097|    167|  Curl_safefree(ftpc->prevpath);
 4098|    167|  Curl_safefree(ftpc->server_os);
 4099|    167|  Curl_pp_disconnect(pp);
 4100|    167|  Curl_sec_end(conn);
 4101|    167|  return CURLE_OK;
 4102|    167|}
ftp.c:ftp_quit:
 4040|    167|{
 4041|    167|  CURLcode result = CURLE_OK;
 4042|       |
 4043|    167|  if(conn->proto.ftpc.ctl_valid) {
 4044|     37|    result = Curl_pp_sendf(data, &conn->proto.ftpc.pp, "%s", "QUIT");
 4045|     37|    if(result) {
 4046|      0|      failf(data, "Failure sending QUIT command: %s",
 4047|      0|            curl_easy_strerror(result));
 4048|      0|      conn->proto.ftpc.ctl_valid = FALSE; /* mark control connection as bad */
 4049|      0|      connclose(conn, "QUIT command failed"); /* mark for connection closure */
 4050|      0|      state(data, FTP_STOP);
 4051|      0|      return result;
 4052|      0|    }
 4053|       |
 4054|     37|    state(data, FTP_QUIT);
 4055|       |
 4056|     37|    result = ftp_block_statemach(data, conn);
 4057|     37|  }
 4058|       |
 4059|    167|  return result;
 4060|    167|}
ftp.c:ftp_block_statemach:
 3123|     37|{
 3124|     37|  struct ftp_conn *ftpc = &conn->proto.ftpc;
 3125|     37|  struct pingpong *pp = &ftpc->pp;
 3126|     37|  CURLcode result = CURLE_OK;
 3127|       |
 3128|    167|  while(ftpc->state != FTP_STOP) {
 3129|    152|    result = Curl_pp_statemach(data, pp, TRUE, TRUE /* disconnecting */);
 3130|    152|    if(result)
 3131|     22|      break;
 3132|    152|  }
 3133|       |
 3134|     37|  return result;
 3135|     37|}
ftp.c:ftp_doing:
 4289|    452|{
 4290|    452|  CURLcode result = ftp_multi_statemach(data, dophase_done);
 4291|       |
 4292|    452|  if(result)
 4293|     78|    DEBUGF(infof(data, "DO phase failed"));
 4294|    374|  else if(*dophase_done) {
 4295|      3|    result = ftp_dophase_done(data, FALSE /* not connected */);
 4296|       |
 4297|      3|    DEBUGF(infof(data, "DO phase is complete2"));
 4298|      3|  }
 4299|    452|  return result;
 4300|    452|}
ftp.c:ftp_setup_connection:
 4354|    167|{
 4355|    167|  char *type;
 4356|    167|  struct FTP *ftp;
 4357|       |
 4358|    167|  data->req.p.ftp = ftp = calloc(sizeof(struct FTP), 1);
 4359|    167|  if(NULL == ftp)
 4360|      0|    return CURLE_OUT_OF_MEMORY;
 4361|       |
 4362|    167|  ftp->path = &data->state.up.path[1]; /* don't include the initial slash */
 4363|       |
 4364|       |  /* FTP URLs support an extension like ";type=<typecode>" that
 4365|       |   * we'll try to get now! */
 4366|    167|  type = strstr(ftp->path, ";type=");
 4367|       |
 4368|    167|  if(!type)
 4369|    153|    type = strstr(conn->host.rawalloc, ";type=");
 4370|       |
 4371|    167|  if(type) {
 4372|     17|    char command;
 4373|     17|    *type = 0;                     /* it was in the middle of the hostname */
 4374|     17|    command = Curl_raw_toupper(type[6]);
 4375|       |
 4376|     17|    switch(command) {
 4377|      2|    case 'A': /* ASCII mode */
 4378|      2|      data->state.prefer_ascii = TRUE;
 4379|      2|      break;
 4380|       |
 4381|      1|    case 'D': /* directory mode */
 4382|      1|      data->state.list_only = TRUE;
 4383|      1|      break;
 4384|       |
 4385|      0|    case 'I': /* binary mode */
 4386|     14|    default:
 4387|       |      /* switch off ASCII */
 4388|     14|      data->state.prefer_ascii = FALSE;
 4389|     14|      break;
 4390|     17|    }
 4391|     17|  }
 4392|       |
 4393|       |  /* get some initial data into the ftp struct */
 4394|    167|  ftp->transfer = PPTRANSFER_BODY;
 4395|    167|  ftp->downloadsize = 0;
 4396|    167|  conn->proto.ftpc.known_filesize = -1; /* unknown size for now */
 4397|       |
 4398|    167|  return CURLE_OK;
 4399|    167|}

Curl_ftp_parselist_data_alloc:
  183|      4|{
  184|      4|  return calloc(1, sizeof(struct ftp_parselist_data));
  185|      4|}
Curl_ftp_parselist_data_free:
  189|      4|{
  190|      4|  struct ftp_parselist_data *parser = *parserp;
  191|      4|  if(parser)
  192|      4|    Curl_fileinfo_cleanup(parser->file_data);
  193|      4|  free(parser);
  194|      4|  *parserp = NULL;
  195|      4|}
Curl_ftp_parselist_geterror:
  199|      1|{
  200|      1|  return pl_data->error;
  201|      1|}

curl_getenv:
   75|  16.0k|{
   76|  16.0k|  return GetEnv(v);
   77|  16.0k|}
getenv.c:GetEnv:
   31|  16.0k|{
   32|       |#if defined(_WIN32_WCE) || defined(CURL_WINDOWS_APP)
   33|       |  (void)variable;
   34|       |  return NULL;
   35|       |#elif defined(WIN32)
   36|       |  /* This uses Windows API instead of C runtime getenv() to get the environment
   37|       |     variable since some changes aren't always visible to the latter. #4774 */
   38|       |  char *buf = NULL;
   39|       |  char *tmp;
   40|       |  DWORD bufsize;
   41|       |  DWORD rc = 1;
   42|       |  const DWORD max = 32768; /* max env var size from MSCRT source */
   43|       |
   44|       |  for(;;) {
   45|       |    tmp = realloc(buf, rc);
   46|       |    if(!tmp) {
   47|       |      free(buf);
   48|       |      return NULL;
   49|       |    }
   50|       |
   51|       |    buf = tmp;
   52|       |    bufsize = rc;
   53|       |
   54|       |    /* It's possible for rc to be 0 if the variable was found but empty.
   55|       |       Since getenv doesn't make that distinction we ignore it as well. */
   56|       |    rc = GetEnvironmentVariableA(variable, buf, bufsize);
   57|       |    if(!rc || rc == bufsize || rc > max) {
   58|       |      free(buf);
   59|       |      return NULL;
   60|       |    }
   61|       |
   62|       |    /* if rc < bufsize then rc is bytes written not including null */
   63|       |    if(rc < bufsize)
   64|       |      return buf;
   65|       |
   66|       |    /* else rc is bytes needed, try again */
   67|       |  }
   68|       |#else
   69|  16.0k|  char *env = getenv(variable);
   70|  16.0k|  return (env && env[0])?strdup(env):NULL;
   71|  16.0k|#endif
   72|  16.0k|}

Curl_initinfo:
   46|  8.87k|{
   47|  8.87k|  struct Progress *pro = &data->progress;
   48|  8.87k|  struct PureInfo *info = &data->info;
   49|       |
   50|  8.87k|  pro->t_nslookup = 0;
   51|  8.87k|  pro->t_connect = 0;
   52|  8.87k|  pro->t_appconnect = 0;
   53|  8.87k|  pro->t_pretransfer = 0;
   54|  8.87k|  pro->t_starttransfer = 0;
   55|  8.87k|  pro->timespent = 0;
   56|  8.87k|  pro->t_redirect = 0;
   57|  8.87k|  pro->is_t_startransfer_set = false;
   58|       |
   59|  8.87k|  info->httpcode = 0;
   60|  8.87k|  info->httpproxycode = 0;
   61|  8.87k|  info->httpversion = 0;
   62|  8.87k|  info->filetime = -1; /* -1 is an illegal time and thus means unknown */
   63|  8.87k|  info->timecond = FALSE;
   64|       |
   65|  8.87k|  info->header_size = 0;
   66|  8.87k|  info->request_size = 0;
   67|  8.87k|  info->proxyauthavail = 0;
   68|  8.87k|  info->httpauthavail = 0;
   69|  8.87k|  info->numconnects = 0;
   70|       |
   71|  8.87k|  free(info->contenttype);
   72|  8.87k|  info->contenttype = NULL;
   73|       |
   74|  8.87k|  free(info->wouldredirect);
   75|  8.87k|  info->wouldredirect = NULL;
   76|       |
   77|  8.87k|  info->conn_primary_ip[0] = '\0';
   78|  8.87k|  info->conn_local_ip[0] = '\0';
   79|  8.87k|  info->conn_primary_port = 0;
   80|  8.87k|  info->conn_local_port = 0;
   81|  8.87k|  info->retry_after = 0;
   82|       |
   83|  8.87k|  info->conn_scheme = 0;
   84|  8.87k|  info->conn_protocol = 0;
   85|       |
   86|  8.87k|#ifdef USE_SSL
   87|  8.87k|  Curl_ssl_free_certinfo(data);
   88|  8.87k|#endif
   89|  8.87k|  return CURLE_OK;
   90|  8.87k|}

gopher.c:gopher_do:
  127|      3|{
  128|      3|  CURLcode result = CURLE_OK;
  129|      3|  struct connectdata *conn = data->conn;
  130|      3|  curl_socket_t sockfd = conn->sock[FIRSTSOCKET];
  131|      3|  char *gopherpath;
  132|      3|  char *path = data->state.up.path;
  133|      3|  char *query = data->state.up.query;
  134|      3|  char *sel = NULL;
  135|      3|  char *sel_org = NULL;
  136|      3|  timediff_t timeout_ms;
  137|      3|  ssize_t amount, k;
  138|      3|  size_t len;
  139|      3|  int what;
  140|       |
  141|      3|  *done = TRUE; /* unconditionally */
  142|       |
  143|       |  /* path is guaranteed non-NULL */
  144|      3|  DEBUGASSERT(path);
  145|       |
  146|      3|  if(query)
  147|      1|    gopherpath = aprintf("%s?%s", path, query);
  148|      2|  else
  149|      2|    gopherpath = strdup(path);
  150|       |
  151|      3|  if(!gopherpath)
  152|      0|    return CURLE_OUT_OF_MEMORY;
  153|       |
  154|       |  /* Create selector. Degenerate cases: / and /1 => convert to "" */
  155|      3|  if(strlen(gopherpath) <= 2) {
  156|      2|    sel = (char *)"";
  157|      2|    len = strlen(sel);
  158|      2|    free(gopherpath);
  159|      2|  }
  160|      1|  else {
  161|      1|    char *newp;
  162|       |
  163|       |    /* Otherwise, drop / and the first character (i.e., item type) ... */
  164|      1|    newp = gopherpath;
  165|      1|    newp += 2;
  166|       |
  167|       |    /* ... and finally unescape */
  168|      1|    result = Curl_urldecode(data, newp, 0, &sel, &len, REJECT_ZERO);
  169|      1|    free(gopherpath);
  170|      1|    if(result)
  171|      0|      return result;
  172|      1|    sel_org = sel;
  173|      1|  }
  174|       |
  175|      3|  k = curlx_uztosz(len);
  176|       |
  177|      3|  for(;;) {
  178|       |    /* Break out of the loop if the selector is empty because OpenSSL and/or
  179|       |       LibreSSL fail with errno 0 if this is the case. */
  180|      3|    if(strlen(sel) < 1)
  181|      2|      break;
  182|       |
  183|      1|    result = Curl_write(data, sockfd, sel, k, &amount);
  184|      1|    if(!result) { /* Which may not have written it all! */
  185|      1|      result = Curl_client_write(data, CLIENTWRITE_HEADER, sel, amount);
  186|      1|      if(result)
  187|      0|        break;
  188|       |
  189|      1|      k -= amount;
  190|      1|      sel += amount;
  191|      1|      if(k < 1)
  192|      1|        break; /* but it did write it all */
  193|      1|    }
  194|      0|    else
  195|      0|      break;
  196|       |
  197|      0|    timeout_ms = Curl_timeleft(data, NULL, FALSE);
  198|      0|    if(timeout_ms < 0) {
  199|      0|      result = CURLE_OPERATION_TIMEDOUT;
  200|      0|      break;
  201|      0|    }
  202|      0|    if(!timeout_ms)
  203|      0|      timeout_ms = TIMEDIFF_T_MAX;
  204|       |
  205|       |    /* Don't busyloop. The entire loop thing is a work-around as it causes a
  206|       |       BLOCKING behavior which is a NO-NO. This function should rather be
  207|       |       split up in a do and a doing piece where the pieces that aren't
  208|       |       possible to send now will be sent in the doing function repeatedly
  209|       |       until the entire request is sent.
  210|       |    */
  211|      0|    what = SOCKET_WRITABLE(sockfd, timeout_ms);
  212|      0|    if(what < 0) {
  213|      0|      result = CURLE_SEND_ERROR;
  214|      0|      break;
  215|      0|    }
  216|      0|    else if(!what) {
  217|      0|      result = CURLE_OPERATION_TIMEDOUT;
  218|      0|      break;
  219|      0|    }
  220|      0|  }
  221|       |
  222|      3|  free(sel_org);
  223|       |
  224|      3|  if(!result)
  225|      3|    result = Curl_write(data, sockfd, "\r\n", 2, &amount);
  226|      3|  if(result) {
  227|      0|    failf(data, "Failed sending Gopher request");
  228|      0|    return result;
  229|      0|  }
  230|      3|  result = Curl_client_write(data, CLIENTWRITE_HEADER, (char *)"\r\n", 2);
  231|      3|  if(result)
  232|      0|    return result;
  233|       |
  234|      3|  Curl_setup_transfer(data, FIRSTSOCKET, -1, FALSE, -1);
  235|      3|  return CURLE_OK;
  236|      3|}

Curl_hash_init:
   62|  8.91k|{
   63|  8.91k|  if(!slots || !hfunc || !comparator ||!dtor) {
   64|      0|    return 1; /* failure */
   65|      0|  }
   66|       |
   67|  8.91k|  h->hash_func = hfunc;
   68|  8.91k|  h->comp_func = comparator;
   69|  8.91k|  h->dtor = dtor;
   70|  8.91k|  h->size = 0;
   71|  8.91k|  h->slots = slots;
   72|       |
   73|  8.91k|  h->table = malloc(slots * sizeof(struct Curl_llist));
   74|  8.91k|  if(h->table) {
   75|  8.91k|    int i;
   76|  3.02M|    for(i = 0; i < slots; ++i)
   77|  3.01M|      Curl_llist_init(&h->table[i], (Curl_llist_dtor) hash_element_dtor);
   78|  8.91k|    return 0; /* fine */
   79|  8.91k|  }
   80|      0|  h->slots = 0;
   81|      0|  return 1; /* failure */
   82|  8.91k|}
Curl_hash_add:
  110|  5.54k|{
  111|  5.54k|  struct Curl_hash_element  *he;
  112|  5.54k|  struct Curl_llist_element *le;
  113|  5.54k|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  114|       |
  115|  5.54k|  for(le = l->head; le; le = le->next) {
  116|      1|    he = (struct Curl_hash_element *) le->ptr;
  117|      1|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  118|      0|      Curl_llist_remove(l, le, (void *)h);
  119|      0|      --h->size;
  120|      0|      break;
  121|      0|    }
  122|      1|  }
  123|       |
  124|  5.54k|  he = mk_hash_element(key, key_len, p);
  125|  5.54k|  if(he) {
  126|  5.54k|    Curl_llist_insert_next(l, l->tail, he, &he->list);
  127|  5.54k|    ++h->size;
  128|  5.54k|    return p; /* return the new entry */
  129|  5.54k|  }
  130|       |
  131|      0|  return NULL; /* failure */
  132|  5.54k|}
Curl_hash_delete:
  140|  2.83k|{
  141|  2.83k|  struct Curl_llist_element *le;
  142|  2.83k|  struct Curl_llist *l = FETCH_LIST(h, key, key_len);
  143|       |
  144|  2.83k|  for(le = l->head; le; le = le->next) {
  145|  2.83k|    struct Curl_hash_element *he = le->ptr;
  146|  2.83k|    if(h->comp_func(he->key, he->key_len, key, key_len)) {
  147|  2.83k|      Curl_llist_remove(l, le, (void *) h);
  148|  2.83k|      --h->size;
  149|  2.83k|      return 0;
  150|  2.83k|    }
  151|  2.83k|  }
  152|      0|  return 1;
  153|  2.83k|}
Curl_hash_pick:
  161|  13.6k|{
  162|  13.6k|  struct Curl_llist_element *le;
  163|  13.6k|  struct Curl_llist *l;
  164|       |
  165|  13.6k|  if(h) {
  166|  13.6k|    l = FETCH_LIST(h, key, key_len);
  167|  13.6k|    for(le = l->head; le; le = le->next) {
  168|    199|      struct Curl_hash_element *he = le->ptr;
  169|    199|      if(h->comp_func(he->key, he->key_len, key, key_len)) {
  170|    192|        return he->ptr;
  171|    192|      }
  172|    199|    }
  173|  13.6k|  }
  174|       |
  175|  13.4k|  return NULL;
  176|  13.6k|}
Curl_hash_destroy:
  206|  8.91k|{
  207|  8.91k|  int i;
  208|       |
  209|  3.02M|  for(i = 0; i < h->slots; ++i) {
  210|  3.01M|    Curl_llist_destroy(&h->table[i], (void *) h);
  211|  3.01M|  }
  212|       |
  213|  8.91k|  Curl_safefree(h->table);
  214|  8.91k|  h->size = 0;
  215|  8.91k|  h->slots = 0;
  216|  8.91k|}
Curl_hash_clean:
  224|  2.97k|{
  225|  2.97k|  Curl_hash_clean_with_criterium(h, NULL, NULL);
  226|  2.97k|}
Curl_hash_clean_with_criterium:
  232|  5.81k|{
  233|  5.81k|  struct Curl_llist_element *le;
  234|  5.81k|  struct Curl_llist_element *lnext;
  235|  5.81k|  struct Curl_llist *list;
  236|  5.81k|  int i;
  237|       |
  238|  5.81k|  if(!h)
  239|  2.97k|    return;
  240|       |
  241|  22.7k|  for(i = 0; i < h->slots; ++i) {
  242|  19.8k|    list = &h->table[i];
  243|  19.8k|    le = list->head; /* get first list entry */
  244|  22.6k|    while(le) {
  245|  2.80k|      struct Curl_hash_element *he = le->ptr;
  246|  2.80k|      lnext = le->next;
  247|       |      /* ask the callback function if we shall remove this entry or not */
  248|  2.80k|      if(!comp || comp(user, he->ptr)) {
  249|      0|        Curl_llist_remove(list, le, (void *) h);
  250|      0|        --h->size; /* one less entry in the hash now */
  251|      0|      }
  252|  2.80k|      le = lnext;
  253|  2.80k|    }
  254|  19.8k|  }
  255|  2.84k|}
Curl_hash_str:
  258|  19.6k|{
  259|  19.6k|  const char *key_str = (const char *) key;
  260|  19.6k|  const char *end = key_str + key_length;
  261|  19.6k|  size_t h = 5381;
  262|       |
  263|   307k|  while(key_str < end) {
  264|   288k|    h += h << 5;
  265|   288k|    h ^= *key_str++;
  266|   288k|  }
  267|       |
  268|  19.6k|  return (h % slots_num);
  269|  19.6k|}
Curl_str_key_compare:
  273|  3.03k|{
  274|  3.03k|  if((key1_len == key2_len) && !memcmp(k1, k2, key1_len))
  275|  3.03k|    return 1;
  276|       |
  277|      8|  return 0;
  278|  3.03k|}
Curl_hash_start_iterate:
  282|  9.51k|{
  283|  9.51k|  iter->hash = hash;
  284|  9.51k|  iter->slot_index = 0;
  285|  9.51k|  iter->current_element = NULL;
  286|  9.51k|}
Curl_hash_next_element:
  290|  9.99k|{
  291|  9.99k|  struct Curl_hash *h = iter->hash;
  292|       |
  293|       |  /* Get the next element in the current list, if any */
  294|  9.99k|  if(iter->current_element)
  295|    481|    iter->current_element = iter->current_element->next;
  296|       |
  297|       |  /* If we have reached the end of the list, find the next one */
  298|  9.99k|  if(!iter->current_element) {
  299|  9.99k|    int i;
  300|   819k|    for(i = iter->slot_index; i < h->slots; i++) {
  301|   813k|      if(h->table[i].head) {
  302|  3.79k|        iter->current_element = h->table[i].head;
  303|  3.79k|        iter->slot_index = i + 1;
  304|  3.79k|        break;
  305|  3.79k|      }
  306|   813k|    }
  307|  9.99k|  }
  308|       |
  309|  9.99k|  if(iter->current_element) {
  310|  3.79k|    struct Curl_hash_element *he = iter->current_element->ptr;
  311|  3.79k|    return he;
  312|  3.79k|  }
  313|  6.19k|  iter->current_element = NULL;
  314|  6.19k|  return NULL;
  315|  9.99k|}
hash.c:hash_element_dtor:
   36|  5.54k|{
   37|  5.54k|  struct Curl_hash *h = (struct Curl_hash *) user;
   38|  5.54k|  struct Curl_hash_element *e = (struct Curl_hash_element *) element;
   39|       |
   40|  5.54k|  if(e->ptr) {
   41|  5.54k|    h->dtor(e->ptr);
   42|  5.54k|    e->ptr = NULL;
   43|  5.54k|  }
   44|       |
   45|  5.54k|  e->key_len = 0;
   46|       |
   47|  5.54k|  free(e);
   48|  5.54k|}
hash.c:mk_hash_element:
   86|  5.54k|{
   87|       |  /* allocate the struct plus memory after it to store the key */
   88|  5.54k|  struct Curl_hash_element *he = malloc(sizeof(struct Curl_hash_element) +
   89|  5.54k|                                        key_len);
   90|  5.54k|  if(he) {
   91|       |    /* copy the key */
   92|  5.54k|    memcpy(he->key, key, key_len);
   93|  5.54k|    he->key_len = key_len;
   94|  5.54k|    he->ptr = (void *) p;
   95|  5.54k|  }
   96|  5.54k|  return he;
   97|  5.54k|}

Curl_HMAC_init:
   55|     33|{
   56|     33|  size_t i;
   57|     33|  struct HMAC_context *ctxt;
   58|     33|  unsigned char *hkey;
   59|     33|  unsigned char b;
   60|       |
   61|       |  /* Create HMAC context. */
   62|     33|  i = sizeof(*ctxt) + 2 * hashparams->hmac_ctxtsize +
   63|     33|    hashparams->hmac_resultlen;
   64|     33|  ctxt = malloc(i);
   65|       |
   66|     33|  if(!ctxt)
   67|      0|    return ctxt;
   68|       |
   69|     33|  ctxt->hmac_hash = hashparams;
   70|     33|  ctxt->hmac_hashctxt1 = (void *) (ctxt + 1);
   71|     33|  ctxt->hmac_hashctxt2 = (void *) ((char *) ctxt->hmac_hashctxt1 +
   72|     33|      hashparams->hmac_ctxtsize);
   73|       |
   74|       |  /* If the key is too long, replace it by its hash digest. */
   75|     33|  if(keylen > hashparams->hmac_maxkeylen) {
   76|      3|    (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt1);
   77|      3|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, key, keylen);
   78|      3|    hkey = (unsigned char *) ctxt->hmac_hashctxt2 + hashparams->hmac_ctxtsize;
   79|      3|    (*hashparams->hmac_hfinal)(hkey, ctxt->hmac_hashctxt1);
   80|      3|    key = hkey;
   81|      3|    keylen = hashparams->hmac_resultlen;
   82|      3|  }
   83|       |
   84|       |  /* Prime the two hash contexts with the modified key. */
   85|     33|  (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt1);
   86|     33|  (*hashparams->hmac_hinit)(ctxt->hmac_hashctxt2);
   87|       |
   88|    681|  for(i = 0; i < keylen; i++) {
   89|    648|    b = (unsigned char)(*key ^ hmac_ipad);
   90|    648|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, &b, 1);
   91|    648|    b = (unsigned char)(*key++ ^ hmac_opad);
   92|    648|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2, &b, 1);
   93|    648|  }
   94|       |
   95|  1.49k|  for(; i < hashparams->hmac_maxkeylen; i++) {
   96|  1.46k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt1, &hmac_ipad, 1);
   97|  1.46k|    (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2, &hmac_opad, 1);
   98|  1.46k|  }
   99|       |
  100|       |  /* Done, return pointer to HMAC context. */
  101|     33|  return ctxt;
  102|     33|}
Curl_HMAC_update:
  107|     18|{
  108|       |  /* Update first hash calculation. */
  109|     18|  (*ctxt->hmac_hash->hmac_hupdate)(ctxt->hmac_hashctxt1, data, len);
  110|     18|  return 0;
  111|     18|}
Curl_HMAC_final:
  115|     33|{
  116|     33|  const struct HMAC_params *hashparams = ctxt->hmac_hash;
  117|       |
  118|       |  /* Do not get result if called with a null parameter: only release
  119|       |     storage. */
  120|       |
  121|     33|  if(!result)
  122|      0|    result = (unsigned char *) ctxt->hmac_hashctxt2 +
  123|      0|     ctxt->hmac_hash->hmac_ctxtsize;
  124|       |
  125|     33|  (*hashparams->hmac_hfinal)(result, ctxt->hmac_hashctxt1);
  126|     33|  (*hashparams->hmac_hupdate)(ctxt->hmac_hashctxt2,
  127|     33|   result, hashparams->hmac_resultlen);
  128|     33|  (*hashparams->hmac_hfinal)(result, ctxt->hmac_hashctxt2);
  129|     33|  free((char *) ctxt);
  130|     33|  return 0;
  131|     33|}

Curl_addrinfo_callback:
   71|     11|{
   72|     11|  struct Curl_dns_entry *dns = NULL;
   73|     11|  CURLcode result = CURLE_OK;
   74|       |
   75|     11|  data->state.async.status = status;
   76|       |
   77|     11|  if(CURL_ASYNC_SUCCESS == status) {
   78|      0|    if(ai) {
   79|      0|      if(data->share)
   80|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
   81|       |
   82|      0|      dns = Curl_cache_addr(data, ai,
   83|      0|                            data->state.async.hostname,
   84|      0|                            data->state.async.port);
   85|      0|      if(data->share)
   86|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
   87|       |
   88|      0|      if(!dns) {
   89|       |        /* failed to store, cleanup and return error */
   90|      0|        Curl_freeaddrinfo(ai);
   91|      0|        result = CURLE_OUT_OF_MEMORY;
   92|      0|      }
   93|      0|    }
   94|      0|    else {
   95|      0|      result = CURLE_OUT_OF_MEMORY;
   96|      0|    }
   97|      0|  }
   98|       |
   99|     11|  data->state.async.dns = dns;
  100|       |
  101|       | /* Set async.done TRUE last in this function since it may be used multi-
  102|       |    threaded and once this is TRUE the other thread may read fields from the
  103|       |    async struct */
  104|     11|  data->state.async.done = TRUE;
  105|       |
  106|       |  /* IPv4: The input hostent struct will be freed by ares when we return from
  107|       |     this function */
  108|     11|  return result;
  109|     11|}
Curl_getaddrinfo:
  121|     11|{
  122|     11|  return Curl_resolver_getaddrinfo(data, hostname, port, waitp);
  123|     11|}

Curl_num_addresses:
  128|  2.80k|{
  129|  2.80k|  int i = 0;
  130|  5.61k|  while(addr) {
  131|  2.80k|    addr = addr->ai_next;
  132|  2.80k|    i++;
  133|  2.80k|  }
  134|  2.80k|  return i;
  135|  2.80k|}
Curl_hostcache_prune:
  230|  2.84k|{
  231|  2.84k|  time_t now;
  232|       |
  233|  2.84k|  if((data->set.dns_cache_timeout == -1) || !data->dns.hostcache)
  234|       |    /* cache forever means never prune, and NULL hostcache means
  235|       |       we can't do it */
  236|      0|    return;
  237|       |
  238|  2.84k|  if(data->share)
  239|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  240|       |
  241|  2.84k|  time(&now);
  242|       |
  243|       |  /* Remove outdated and unused entries from the hostcache */
  244|  2.84k|  hostcache_prune(data->dns.hostcache,
  245|  2.84k|                  data->set.dns_cache_timeout,
  246|  2.84k|                  now);
  247|       |
  248|  2.84k|  if(data->share)
  249|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  250|  2.84k|}
Curl_cache_addr:
  419|  2.70k|{
  420|  2.70k|  char entry_id[MAX_HOSTCACHE_LEN];
  421|  2.70k|  size_t entry_len;
  422|  2.70k|  struct Curl_dns_entry *dns;
  423|  2.70k|  struct Curl_dns_entry *dns2;
  424|       |
  425|  2.70k|#ifndef CURL_DISABLE_SHUFFLE_DNS
  426|       |  /* shuffle addresses if requested */
  427|  2.70k|  if(data->set.dns_shuffle_addresses) {
  428|      0|    CURLcode result = Curl_shuffle_addr(data, &addr);
  429|      0|    if(result)
  430|      0|      return NULL;
  431|      0|  }
  432|  2.70k|#endif
  433|       |
  434|       |  /* Create a new cache entry */
  435|  2.70k|  dns = calloc(1, sizeof(struct Curl_dns_entry));
  436|  2.70k|  if(!dns) {
  437|      0|    return NULL;
  438|      0|  }
  439|       |
  440|       |  /* Create an entry id, based upon the hostname and port */
  441|  2.70k|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  442|  2.70k|  entry_len = strlen(entry_id);
  443|       |
  444|  2.70k|  dns->inuse = 1;   /* the cache has the first reference */
  445|  2.70k|  dns->addr = addr; /* this is the address(es) */
  446|  2.70k|  time(&dns->timestamp);
  447|  2.70k|  if(dns->timestamp == 0)
  448|      0|    dns->timestamp = 1;   /* zero indicates permanent CURLOPT_RESOLVE entry */
  449|       |
  450|       |  /* Store the resolved data in our DNS cache. */
  451|  2.70k|  dns2 = Curl_hash_add(data->dns.hostcache, entry_id, entry_len + 1,
  452|  2.70k|                       (void *)dns);
  453|  2.70k|  if(!dns2) {
  454|      0|    free(dns);
  455|      0|    return NULL;
  456|      0|  }
  457|       |
  458|  2.70k|  dns = dns2;
  459|  2.70k|  dns->inuse++;         /* mark entry as in-use */
  460|  2.70k|  return dns;
  461|  2.70k|}
Curl_ipv6works:
  540|  2.98k|{
  541|  2.98k|  if(data) {
  542|       |    /* the nature of most system is that IPv6 status doesn't come and go
  543|       |       during a program's lifetime so we only probe the first time and then we
  544|       |       have the info kept for fast re-use */
  545|     11|    DEBUGASSERT(data);
  546|     11|    DEBUGASSERT(data->multi);
  547|     11|    return data->multi->ipv6_works;
  548|     11|  }
  549|  2.97k|  else {
  550|  2.97k|    int ipv6_works = -1;
  551|       |    /* probe to see if we have a working IPv6 stack */
  552|  2.97k|    curl_socket_t s = socket(PF_INET6, SOCK_DGRAM, 0);
  553|  2.97k|    if(s == CURL_SOCKET_BAD)
  554|       |      /* an IPv6 address was requested but we can't get/use one */
  555|      0|      ipv6_works = 0;
  556|  2.97k|    else {
  557|  2.97k|      ipv6_works = 1;
  558|  2.97k|      sclose(s);
  559|  2.97k|    }
  560|  2.97k|    return (ipv6_works>0)?TRUE:FALSE;
  561|  2.97k|  }
  562|  2.98k|}
Curl_host_is_ipnum:
  570|  7.63k|{
  571|  7.63k|  struct in_addr in;
  572|  7.63k|#ifdef ENABLE_IPV6
  573|  7.63k|  struct in6_addr in6;
  574|  7.63k|#endif
  575|  7.63k|  if(Curl_inet_pton(AF_INET, hostname, &in) > 0
  576|  7.63k|#ifdef ENABLE_IPV6
  577|  7.63k|     || Curl_inet_pton(AF_INET6, hostname, &in6) > 0
  578|  7.63k|#endif
  579|  7.63k|    )
  580|  6.68k|    return TRUE;
  581|    955|  return FALSE;
  582|  7.63k|}
Curl_resolv:
  606|  2.81k|{
  607|  2.81k|  struct Curl_dns_entry *dns = NULL;
  608|  2.81k|  CURLcode result;
  609|  2.81k|  enum resolve_t rc = CURLRESOLV_ERROR; /* default to failure */
  610|  2.81k|  struct connectdata *conn = data->conn;
  611|  2.81k|  *entry = NULL;
  612|  2.81k|  conn->bits.doh = FALSE; /* default is not */
  613|       |
  614|  2.81k|  if(data->share)
  615|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  616|       |
  617|  2.81k|  dns = fetch_addr(data, hostname, port);
  618|       |
  619|  2.81k|  if(dns) {
  620|    105|    infof(data, "Hostname %s was found in DNS cache", hostname);
  621|    105|    dns->inuse++; /* we use it! */
  622|    105|    rc = CURLRESOLV_RESOLVED;
  623|    105|  }
  624|       |
  625|  2.81k|  if(data->share)
  626|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  627|       |
  628|  2.81k|  if(!dns) {
  629|       |    /* The entry was not in the cache. Resolve it to IP address */
  630|       |
  631|  2.71k|    struct Curl_addrinfo *addr = NULL;
  632|  2.71k|    int respwait = 0;
  633|  2.71k|    struct in_addr in;
  634|  2.71k|#ifndef USE_RESOLVE_ON_IPS
  635|  2.71k|    const
  636|  2.71k|#endif
  637|  2.71k|      bool ipnum = FALSE;
  638|       |
  639|       |    /* notify the resolver start callback */
  640|  2.71k|    if(data->set.resolver_start) {
  641|      0|      int st;
  642|      0|      Curl_set_in_callback(data, true);
  643|      0|      st = data->set.resolver_start(
  644|      0|#ifdef USE_CURL_ASYNC
  645|      0|        data->state.async.resolver,
  646|       |#else
  647|       |        NULL,
  648|       |#endif
  649|      0|        NULL,
  650|      0|        data->set.resolver_start_client);
  651|      0|      Curl_set_in_callback(data, false);
  652|      0|      if(st)
  653|      0|        return CURLRESOLV_ERROR;
  654|      0|    }
  655|       |
  656|       |#if defined(ENABLE_IPV6) && defined(CURL_OSX_CALL_COPYPROXIES)
  657|       |    {
  658|       |      /*
  659|       |       * The automagic conversion from IPv4 literals to IPv6 literals only
  660|       |       * works if the SCDynamicStoreCopyProxies system function gets called
  661|       |       * first. As Curl currently doesn't support system-wide HTTP proxies, we
  662|       |       * therefore don't use any value this function might return.
  663|       |       *
  664|       |       * This function is only available on a macOS and is not needed for
  665|       |       * IPv4-only builds, hence the conditions above.
  666|       |       */
  667|       |      CFDictionaryRef dict = SCDynamicStoreCopyProxies(NULL);
  668|       |      if(dict)
  669|       |        CFRelease(dict);
  670|       |    }
  671|       |#endif
  672|       |
  673|  2.71k|#ifndef USE_RESOLVE_ON_IPS
  674|       |    /* First check if this is an IPv4 address string */
  675|  2.71k|    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  676|       |      /* This is a dotted IP address 123.123.123.123-style */
  677|  2.70k|      addr = Curl_ip2addr(AF_INET, &in, hostname, port);
  678|  2.71k|#ifdef ENABLE_IPV6
  679|  2.71k|    if(!addr) {
  680|     11|      struct in6_addr in6;
  681|       |      /* check if this is an IPv6 address string */
  682|     11|      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  683|       |        /* This is an IPv6 address literal */
  684|      0|        addr = Curl_ip2addr(AF_INET6, &in6, hostname, port);
  685|     11|    }
  686|  2.71k|#endif /* ENABLE_IPV6 */
  687|       |
  688|       |#else /* if USE_RESOLVE_ON_IPS */
  689|       |    /* First check if this is an IPv4 address string */
  690|       |    if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
  691|       |      /* This is a dotted IP address 123.123.123.123-style */
  692|       |      ipnum = TRUE;
  693|       |#ifdef ENABLE_IPV6
  694|       |    else {
  695|       |      struct in6_addr in6;
  696|       |      /* check if this is an IPv6 address string */
  697|       |      if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
  698|       |        /* This is an IPv6 address literal */
  699|       |        ipnum = TRUE;
  700|       |    }
  701|       |#endif /* ENABLE_IPV6 */
  702|       |
  703|       |#endif /* !USE_RESOLVE_ON_IPS */
  704|       |
  705|  2.71k|    if(!addr) {
  706|     11|      if(conn->ip_version == CURL_IPRESOLVE_V6 && !Curl_ipv6works(data))
  707|      0|        return CURLRESOLV_ERROR;
  708|       |
  709|     11|      if(strcasecompare(hostname, "localhost"))
  710|      0|        addr = get_localhost(port);
  711|     11|      else if(allowDOH && data->set.doh && !ipnum)
  712|      0|        addr = Curl_doh(data, hostname, port, &respwait);
  713|     11|      else {
  714|       |        /* Check what IP specifics the app has requested and if we can provide
  715|       |         * it. If not, bail out. */
  716|     11|        if(!Curl_ipvalid(data, conn))
  717|      0|          return CURLRESOLV_ERROR;
  718|       |        /* If Curl_getaddrinfo() returns NULL, 'respwait' might be set to a
  719|       |           non-zero value indicating that we need to wait for the response to
  720|       |           the resolve call */
  721|     11|        addr = Curl_getaddrinfo(data, hostname, port, &respwait);
  722|     11|      }
  723|     11|    }
  724|  2.71k|    if(!addr) {
  725|     11|      if(respwait) {
  726|       |        /* the response to our resolve call will come asynchronously at
  727|       |           a later time, good or bad */
  728|       |        /* First, check that we haven't received the info by now */
  729|     11|        result = Curl_resolv_check(data, &dns);
  730|     11|        if(result) /* error detected */
  731|      0|          return CURLRESOLV_ERROR;
  732|     11|        if(dns)
  733|      0|          rc = CURLRESOLV_RESOLVED; /* pointer provided */
  734|     11|        else
  735|     11|          rc = CURLRESOLV_PENDING; /* no info yet */
  736|     11|      }
  737|     11|    }
  738|  2.70k|    else {
  739|  2.70k|      if(data->share)
  740|      0|        Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  741|       |
  742|       |      /* we got a response, store it in the cache */
  743|  2.70k|      dns = Curl_cache_addr(data, addr, hostname, port);
  744|       |
  745|  2.70k|      if(data->share)
  746|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  747|       |
  748|  2.70k|      if(!dns)
  749|       |        /* returned failure, bail out nicely */
  750|      0|        Curl_freeaddrinfo(addr);
  751|  2.70k|      else
  752|  2.70k|        rc = CURLRESOLV_RESOLVED;
  753|  2.70k|    }
  754|  2.71k|  }
  755|       |
  756|  2.81k|  *entry = dns;
  757|       |
  758|  2.81k|  return rc;
  759|  2.81k|}
Curl_resolv_timeout:
  803|  2.80k|{
  804|       |#ifdef USE_ALARM_TIMEOUT
  805|       |#ifdef HAVE_SIGACTION
  806|       |  struct sigaction keep_sigact;   /* store the old struct here */
  807|       |  volatile bool keep_copysig = FALSE; /* whether old sigact has been saved */
  808|       |  struct sigaction sigact;
  809|       |#else
  810|       |#ifdef HAVE_SIGNAL
  811|       |  void (*keep_sigact)(int);       /* store the old handler here */
  812|       |#endif /* HAVE_SIGNAL */
  813|       |#endif /* HAVE_SIGACTION */
  814|       |  volatile long timeout;
  815|       |  volatile unsigned int prev_alarm = 0;
  816|       |#endif /* USE_ALARM_TIMEOUT */
  817|  2.80k|  enum resolve_t rc;
  818|       |
  819|  2.80k|  *entry = NULL;
  820|       |
  821|  2.80k|  if(timeoutms < 0)
  822|       |    /* got an already expired timeout */
  823|      0|    return CURLRESOLV_TIMEDOUT;
  824|       |
  825|       |#ifdef USE_ALARM_TIMEOUT
  826|       |  if(data->set.no_signal)
  827|       |    /* Ignore the timeout when signals are disabled */
  828|       |    timeout = 0;
  829|       |  else
  830|       |    timeout = (timeoutms > LONG_MAX) ? LONG_MAX : (long)timeoutms;
  831|       |
  832|       |  if(!timeout)
  833|       |    /* USE_ALARM_TIMEOUT defined, but no timeout actually requested */
  834|       |    return Curl_resolv(data, hostname, port, TRUE, entry);
  835|       |
  836|       |  if(timeout < 1000) {
  837|       |    /* The alarm() function only provides integer second resolution, so if
  838|       |       we want to wait less than one second we must bail out already now. */
  839|       |    failf(data,
  840|       |        "remaining timeout of %ld too small to resolve via SIGALRM method",
  841|       |        timeout);
  842|       |    return CURLRESOLV_TIMEDOUT;
  843|       |  }
  844|       |  /* This allows us to time-out from the name resolver, as the timeout
  845|       |     will generate a signal and we will siglongjmp() from that here.
  846|       |     This technique has problems (see alarmfunc).
  847|       |     This should be the last thing we do before calling Curl_resolv(),
  848|       |     as otherwise we'd have to worry about variables that get modified
  849|       |     before we invoke Curl_resolv() (and thus use "volatile"). */
  850|       |  if(sigsetjmp(curl_jmpenv, 1)) {
  851|       |    /* this is coming from a siglongjmp() after an alarm signal */
  852|       |    failf(data, "name lookup timed out");
  853|       |    rc = CURLRESOLV_ERROR;
  854|       |    goto clean_up;
  855|       |  }
  856|       |  else {
  857|       |    /*************************************************************
  858|       |     * Set signal handler to catch SIGALRM
  859|       |     * Store the old value to be able to set it back later!
  860|       |     *************************************************************/
  861|       |#ifdef HAVE_SIGACTION
  862|       |    sigaction(SIGALRM, NULL, &sigact);
  863|       |    keep_sigact = sigact;
  864|       |    keep_copysig = TRUE; /* yes, we have a copy */
  865|       |    sigact.sa_handler = alarmfunc;
  866|       |#ifdef SA_RESTART
  867|       |    /* HPUX doesn't have SA_RESTART but defaults to that behavior! */
  868|       |    sigact.sa_flags &= ~SA_RESTART;
  869|       |#endif
  870|       |    /* now set the new struct */
  871|       |    sigaction(SIGALRM, &sigact, NULL);
  872|       |#else /* HAVE_SIGACTION */
  873|       |    /* no sigaction(), revert to the much lamer signal() */
  874|       |#ifdef HAVE_SIGNAL
  875|       |    keep_sigact = signal(SIGALRM, alarmfunc);
  876|       |#endif
  877|       |#endif /* HAVE_SIGACTION */
  878|       |
  879|       |    /* alarm() makes a signal get sent when the timeout fires off, and that
  880|       |       will abort system calls */
  881|       |    prev_alarm = alarm(curlx_sltoui(timeout/1000L));
  882|       |  }
  883|       |
  884|       |#else
  885|       |#ifndef CURLRES_ASYNCH
  886|       |  if(timeoutms)
  887|       |    infof(data, "timeout on name lookup is not supported");
  888|       |#else
  889|  2.80k|  (void)timeoutms; /* timeoutms not used with an async resolver */
  890|  2.80k|#endif
  891|  2.80k|#endif /* USE_ALARM_TIMEOUT */
  892|       |
  893|       |  /* Perform the actual name resolution. This might be interrupted by an
  894|       |   * alarm if it takes too long.
  895|       |   */
  896|  2.80k|  rc = Curl_resolv(data, hostname, port, TRUE, entry);
  897|       |
  898|       |#ifdef USE_ALARM_TIMEOUT
  899|       |clean_up:
  900|       |
  901|       |  if(!prev_alarm)
  902|       |    /* deactivate a possibly active alarm before uninstalling the handler */
  903|       |    alarm(0);
  904|       |
  905|       |#ifdef HAVE_SIGACTION
  906|       |  if(keep_copysig) {
  907|       |    /* we got a struct as it looked before, now put that one back nice
  908|       |       and clean */
  909|       |    sigaction(SIGALRM, &keep_sigact, NULL); /* put it back */
  910|       |  }
  911|       |#else
  912|       |#ifdef HAVE_SIGNAL
  913|       |  /* restore the previous SIGALRM handler */
  914|       |  signal(SIGALRM, keep_sigact);
  915|       |#endif
  916|       |#endif /* HAVE_SIGACTION */
  917|       |
  918|       |  /* switch back the alarm() to either zero or to what it was before minus
  919|       |     the time we spent until now! */
  920|       |  if(prev_alarm) {
  921|       |    /* there was an alarm() set before us, now put it back */
  922|       |    timediff_t elapsed_secs = Curl_timediff(Curl_now(),
  923|       |                                            data->conn->created) / 1000;
  924|       |
  925|       |    /* the alarm period is counted in even number of seconds */
  926|       |    unsigned long alarm_set = (unsigned long)(prev_alarm - elapsed_secs);
  927|       |
  928|       |    if(!alarm_set ||
  929|       |       ((alarm_set >= 0x80000000) && (prev_alarm < 0x80000000)) ) {
  930|       |      /* if the alarm time-left reached zero or turned "negative" (counted
  931|       |         with unsigned values), we should fire off a SIGALRM here, but we
  932|       |         won't, and zero would be to switch it off so we never set it to
  933|       |         less than 1! */
  934|       |      alarm(1);
  935|       |      rc = CURLRESOLV_TIMEDOUT;
  936|       |      failf(data, "Previous alarm fired off!");
  937|       |    }
  938|       |    else
  939|       |      alarm((unsigned int)alarm_set);
  940|       |  }
  941|       |#endif /* USE_ALARM_TIMEOUT */
  942|       |
  943|  2.80k|  return rc;
  944|  2.80k|}
Curl_resolv_unlock:
  954|  2.80k|{
  955|  2.80k|  if(data && data->share)
  956|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
  957|       |
  958|  2.80k|  freednsentry(dns);
  959|       |
  960|  2.80k|  if(data && data->share)
  961|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
  962|  2.80k|}
Curl_mk_dnscache:
  983|  2.97k|{
  984|  2.97k|  return Curl_hash_init(hash, 7, Curl_hash_str, Curl_str_key_compare,
  985|  2.97k|                        freednsentry);
  986|  2.97k|}
Curl_hostcache_clean:
  997|  2.97k|{
  998|  2.97k|  if(data && data->share)
  999|      0|    Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 1000|       |
 1001|  2.97k|  Curl_hash_clean(hash);
 1002|       |
 1003|  2.97k|  if(data && data->share)
 1004|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 1005|  2.97k|}
Curl_resolv_check:
 1209|     11|{
 1210|       |#if defined(CURL_DISABLE_DOH) && !defined(CURLRES_ASYNCH)
 1211|       |  (void)dns;
 1212|       |#endif
 1213|       |
 1214|     11|  if(data->conn->bits.doh)
 1215|      0|    return Curl_doh_is_resolved(data, dns);
 1216|     11|  return Curl_resolver_is_resolved(data, dns);
 1217|     11|}
Curl_resolver_error:
 1269|     11|{
 1270|     11|  const char *host_or_proxy;
 1271|     11|  CURLcode result;
 1272|       |
 1273|     11|#ifndef CURL_DISABLE_PROXY
 1274|     11|  struct connectdata *conn = data->conn;
 1275|     11|  if(conn->bits.httpproxy) {
 1276|      0|    host_or_proxy = "proxy";
 1277|      0|    result = CURLE_COULDNT_RESOLVE_PROXY;
 1278|      0|  }
 1279|     11|  else
 1280|     11|#endif
 1281|     11|  {
 1282|     11|    host_or_proxy = "host";
 1283|     11|    result = CURLE_COULDNT_RESOLVE_HOST;
 1284|     11|  }
 1285|       |
 1286|     11|  failf(data, "Could not resolve %s: %s", host_or_proxy,
 1287|     11|        data->state.async.hostname);
 1288|       |
 1289|     11|  return result;
 1290|     11|}
hostip.c:hostcache_prune:
  214|  2.84k|{
  215|  2.84k|  struct hostcache_prune_data user;
  216|       |
  217|  2.84k|  user.cache_timeout = cache_timeout;
  218|  2.84k|  user.now = now;
  219|       |
  220|  2.84k|  Curl_hash_clean_with_criterium(hostcache,
  221|  2.84k|                                 (void *) &user,
  222|  2.84k|                                 hostcache_timestamp_remove);
  223|  2.84k|}
hostip.c:hostcache_timestamp_remove:
  200|  2.90k|{
  201|  2.90k|  struct hostcache_prune_data *data =
  202|  2.90k|    (struct hostcache_prune_data *) datap;
  203|  2.90k|  struct Curl_dns_entry *c = (struct Curl_dns_entry *) hc;
  204|       |
  205|  2.90k|  return (0 != c->timestamp)
  206|  2.90k|    && (data->now - c->timestamp >= data->cache_timeout);
  207|  2.90k|}
hostip.c:fetch_addr:
  263|  2.81k|{
  264|  2.81k|  struct Curl_dns_entry *dns = NULL;
  265|  2.81k|  size_t entry_len;
  266|  2.81k|  char entry_id[MAX_HOSTCACHE_LEN];
  267|       |
  268|       |  /* Create an entry id, based upon the hostname and port */
  269|  2.81k|  create_hostcache_id(hostname, port, entry_id, sizeof(entry_id));
  270|  2.81k|  entry_len = strlen(entry_id);
  271|       |
  272|       |  /* See if its already in our dns cache */
  273|  2.81k|  dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  274|       |
  275|       |  /* No entry found in cache, check if we might have a wildcard entry */
  276|  2.81k|  if(!dns && data->state.wildcard_resolve) {
  277|      0|    create_hostcache_id("*", port, entry_id, sizeof(entry_id));
  278|      0|    entry_len = strlen(entry_id);
  279|       |
  280|       |    /* See if it's already in our dns cache */
  281|      0|    dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
  282|      0|  }
  283|       |
  284|  2.81k|  if(dns && (data->set.dns_cache_timeout != -1)) {
  285|       |    /* See whether the returned entry is stale. Done before we release lock */
  286|    105|    struct hostcache_prune_data user;
  287|       |
  288|    105|    time(&user.now);
  289|    105|    user.cache_timeout = data->set.dns_cache_timeout;
  290|       |
  291|    105|    if(hostcache_timestamp_remove(&user, dns)) {
  292|      0|      infof(data, "Hostname in DNS cache was stale, zapped");
  293|      0|      dns = NULL; /* the memory deallocation is being handled by the hash */
  294|      0|      Curl_hash_delete(data->dns.hostcache, entry_id, entry_len + 1);
  295|      0|    }
  296|    105|  }
  297|       |
  298|  2.81k|  return dns;
  299|  2.81k|}
hostip.c:create_hostcache_id:
  176|  5.52k|{
  177|  5.52k|  size_t len = strlen(name);
  178|  5.52k|  if(len > (buflen - 7))
  179|      0|    len = buflen - 7;
  180|       |  /* store and lower case the name */
  181|  66.1k|  while(len--)
  182|  60.5k|    *ptr++ = (char)TOLOWER(*name++);
  183|  5.52k|  msnprintf(ptr, 7, ":%u", port);
  184|  5.52k|}
hostip.c:freednsentry:
  968|  5.50k|{
  969|  5.50k|  struct Curl_dns_entry *dns = (struct Curl_dns_entry *) freethis;
  970|  5.50k|  DEBUGASSERT(dns && (dns->inuse>0));
  971|       |
  972|  5.50k|  dns->inuse--;
  973|  5.50k|  if(dns->inuse == 0) {
  974|  2.70k|    Curl_freeaddrinfo(dns->addr);
  975|  2.70k|    free(dns);
  976|  2.70k|  }
  977|  5.50k|}

Curl_ipvalid:
   66|     11|{
   67|     11|  if(conn->ip_version == CURL_IPRESOLVE_V6)
   68|      0|    return Curl_ipv6works(data);
   69|       |
   70|     11|  return TRUE;
   71|     11|}

Curl_hsts_cleanup:
   90|  6.05k|{
   91|  6.05k|  struct hsts *h = *hp;
   92|  6.05k|  if(h) {
   93|      0|    struct Curl_llist_element *e;
   94|      0|    struct Curl_llist_element *n;
   95|      0|    for(e = h->list.head; e; e = n) {
   96|      0|      struct stsentry *sts = e->ptr;
   97|      0|      n = e->next;
   98|      0|      hsts_free(sts);
   99|      0|    }
  100|      0|    free(h->filename);
  101|      0|    free(h);
  102|      0|    *hp = NULL;
  103|      0|  }
  104|  6.05k|}
Curl_hsts_save:
  332|  6.05k|{
  333|  6.05k|  struct Curl_llist_element *e;
  334|  6.05k|  struct Curl_llist_element *n;
  335|  6.05k|  CURLcode result = CURLE_OK;
  336|  6.05k|  FILE *out;
  337|  6.05k|  char *tempstore;
  338|  6.05k|  unsigned char randsuffix[9];
  339|       |
  340|  6.05k|  if(!h)
  341|       |    /* no cache activated */
  342|  6.05k|    return CURLE_OK;
  343|       |
  344|       |  /* if no new name is given, use the one we stored from the load */
  345|      0|  if(!file && h->filename)
  346|      0|    file = h->filename;
  347|       |
  348|      0|  if((h->flags & CURLHSTS_READONLYFILE) || !file || !file[0])
  349|       |    /* marked as read-only, no file or zero length file name */
  350|      0|    goto skipsave;
  351|       |
  352|      0|  if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
  353|      0|    return CURLE_FAILED_INIT;
  354|       |
  355|      0|  tempstore = aprintf("%s.%s.tmp", file, randsuffix);
  356|      0|  if(!tempstore)
  357|      0|    return CURLE_OUT_OF_MEMORY;
  358|       |
  359|      0|  out = fopen(tempstore, FOPEN_WRITETEXT);
  360|      0|  if(!out)
  361|      0|    result = CURLE_WRITE_ERROR;
  362|      0|  else {
  363|      0|    fputs("# Your HSTS cache. https://curl.se/docs/hsts.html\n"
  364|      0|          "# This file was generated by libcurl! Edit at your own risk.\n",
  365|      0|          out);
  366|      0|    for(e = h->list.head; e; e = n) {
  367|      0|      struct stsentry *sts = e->ptr;
  368|      0|      n = e->next;
  369|      0|      result = hsts_out(sts, out);
  370|      0|      if(result)
  371|      0|        break;
  372|      0|    }
  373|      0|    fclose(out);
  374|      0|    if(!result && Curl_rename(tempstore, file))
  375|      0|      result = CURLE_WRITE_ERROR;
  376|       |
  377|      0|    if(result)
  378|      0|      unlink(tempstore);
  379|      0|  }
  380|      0|  free(tempstore);
  381|      0|  skipsave:
  382|      0|  if(data->set.hsts_write) {
  383|       |    /* if there's a write callback */
  384|      0|    struct curl_index i; /* count */
  385|      0|    i.total = h->list.size;
  386|      0|    i.index = 0;
  387|      0|    for(e = h->list.head; e; e = n) {
  388|      0|      struct stsentry *sts = e->ptr;
  389|      0|      bool stop;
  390|      0|      n = e->next;
  391|      0|      result = hsts_push(data, &i, sts, &stop);
  392|      0|      if(result || stop)
  393|      0|        break;
  394|      0|      i.index++;
  395|      0|    }
  396|      0|  }
  397|      0|  return result;
  398|      0|}
Curl_hsts_loadcb:
  538|  2.81k|{
  539|  2.81k|  if(h)
  540|      0|    return hsts_pull(data, h);
  541|  2.81k|  return CURLE_OK;
  542|  2.81k|}

Curl_copy_header_value:
  246|  2.15k|{
  247|  2.15k|  const char *start;
  248|  2.15k|  const char *end;
  249|  2.15k|  char *value;
  250|  2.15k|  size_t len;
  251|       |
  252|       |  /* Find the end of the header name */
  253|  28.0k|  while(*header && (*header != ':'))
  254|  25.8k|    ++header;
  255|       |
  256|  2.15k|  if(*header)
  257|       |    /* Skip over colon */
  258|  2.15k|    ++header;
  259|       |
  260|       |  /* Find the first non-space letter */
  261|  2.15k|  start = header;
  262|  4.22k|  while(*start && ISSPACE(*start))
  263|  2.07k|    start++;
  264|       |
  265|       |  /* data is in the host encoding so
  266|       |     use '\r' and '\n' instead of 0x0d and 0x0a */
  267|  2.15k|  end = strchr(start, '\r');
  268|  2.15k|  if(!end)
  269|    285|    end = strchr(start, '\n');
  270|  2.15k|  if(!end)
  271|    181|    end = strchr(start, '\0');
  272|  2.15k|  if(!end)
  273|      0|    return NULL;
  274|       |
  275|       |  /* skip all trailing space letters */
  276|  4.16k|  while((end > start) && ISSPACE(*end))
  277|  2.01k|    end--;
  278|       |
  279|       |  /* get length of the type */
  280|  2.15k|  len = end - start + 1;
  281|       |
  282|  2.15k|  value = malloc(len + 1);
  283|  2.15k|  if(!value)
  284|      0|    return NULL;
  285|       |
  286|  2.15k|  memcpy(value, start, len);
  287|  2.15k|  value[len] = 0; /* null-terminate */
  288|       |
  289|  2.15k|  return value;
  290|  2.15k|}
Curl_http_auth_act:
  574|    451|{
  575|    451|  struct connectdata *conn = data->conn;
  576|    451|  bool pickhost = FALSE;
  577|    451|  bool pickproxy = FALSE;
  578|    451|  CURLcode result = CURLE_OK;
  579|    451|  unsigned long authmask = ~0ul;
  580|       |
  581|    451|  if(!data->set.str[STRING_BEARER])
  582|    451|    authmask &= (unsigned long)~CURLAUTH_BEARER;
  583|       |
  584|    451|  if(100 <= data->req.httpcode && 199 >= data->req.httpcode)
  585|       |    /* this is a transient response code, ignore */
  586|     47|    return CURLE_OK;
  587|       |
  588|    404|  if(data->state.authproblem)
  589|     18|    return data->set.http_fail_on_error?CURLE_HTTP_RETURNED_ERROR:CURLE_OK;
  590|       |
  591|    386|  if((conn->bits.user_passwd || data->set.str[STRING_BEARER]) &&
  592|    386|     ((data->req.httpcode == 401) ||
  593|     69|      (conn->bits.authneg && data->req.httpcode < 300))) {
  594|     63|    pickhost = pickoneauth(&data->state.authhost, authmask);
  595|     63|    if(!pickhost)
  596|      8|      data->state.authproblem = TRUE;
  597|     63|    if(data->state.authhost.picked == CURLAUTH_NTLM &&
  598|     63|       conn->httpversion > 11) {
  599|      0|      infof(data, "Forcing HTTP/1.1 for NTLM");
  600|      0|      connclose(conn, "Force HTTP/1.1 connection");
  601|      0|      data->state.httpwant = CURL_HTTP_VERSION_1_1;
  602|      0|    }
  603|     63|  }
  604|    386|#ifndef CURL_DISABLE_PROXY
  605|    386|  if(conn->bits.proxy_user_passwd &&
  606|    386|     ((data->req.httpcode == 407) ||
  607|      0|      (conn->bits.authneg && data->req.httpcode < 300))) {
  608|      0|    pickproxy = pickoneauth(&data->state.authproxy,
  609|      0|                            authmask & ~CURLAUTH_BEARER);
  610|      0|    if(!pickproxy)
  611|      0|      data->state.authproblem = TRUE;
  612|      0|  }
  613|    386|#endif
  614|       |
  615|    386|  if(pickhost || pickproxy) {
  616|     55|    if((data->state.httpreq != HTTPREQ_GET) &&
  617|     55|       (data->state.httpreq != HTTPREQ_HEAD) &&
  618|     55|       !conn->bits.rewindaftersend) {
  619|     20|      result = http_perhapsrewind(data, conn);
  620|     20|      if(result)
  621|      4|        return result;
  622|     20|    }
  623|       |    /* In case this is GSS auth, the newurl field is already allocated so
  624|       |       we must make sure to free it before allocating a new one. As figured
  625|       |       out in bug #2284386 */
  626|     51|    Curl_safefree(data->req.newurl);
  627|     51|    data->req.newurl = strdup(data->state.url); /* clone URL */
  628|     51|    if(!data->req.newurl)
  629|      0|      return CURLE_OUT_OF_MEMORY;
  630|     51|  }
  631|    331|  else if((data->req.httpcode < 300) &&
  632|    331|          (!data->state.authhost.done) &&
  633|    331|          conn->bits.authneg) {
  634|       |    /* no (known) authentication available,
  635|       |       authentication is not "done" yet and
  636|       |       no authentication seems to be required and
  637|       |       we didn't try HEAD or GET */
  638|      4|    if((data->state.httpreq != HTTPREQ_GET) &&
  639|      4|       (data->state.httpreq != HTTPREQ_HEAD)) {
  640|      4|      data->req.newurl = strdup(data->state.url); /* clone URL */
  641|      4|      if(!data->req.newurl)
  642|      0|        return CURLE_OUT_OF_MEMORY;
  643|      4|      data->state.authhost.done = TRUE;
  644|      4|    }
  645|      4|  }
  646|    382|  if(http_should_fail(data)) {
  647|      0|    failf(data, "The requested URL returned error: %d",
  648|      0|          data->req.httpcode);
  649|      0|    result = CURLE_HTTP_RETURNED_ERROR;
  650|      0|  }
  651|       |
  652|    382|  return result;
  653|    386|}
Curl_http_output_auth:
  800|  1.24k|{
  801|  1.24k|  CURLcode result = CURLE_OK;
  802|  1.24k|  struct auth *authhost;
  803|  1.24k|  struct auth *authproxy;
  804|       |
  805|  1.24k|  DEBUGASSERT(data);
  806|       |
  807|  1.24k|  authhost = &data->state.authhost;
  808|  1.24k|  authproxy = &data->state.authproxy;
  809|       |
  810|  1.24k|  if(
  811|  1.24k|#ifndef CURL_DISABLE_PROXY
  812|  1.24k|    (conn->bits.httpproxy && conn->bits.proxy_user_passwd) ||
  813|  1.24k|#endif
  814|  1.24k|     conn->bits.user_passwd || data->set.str[STRING_BEARER])
  815|    289|    /* continue please */;
  816|    957|  else {
  817|    957|    authhost->done = TRUE;
  818|    957|    authproxy->done = TRUE;
  819|    957|    return CURLE_OK; /* no authentication with no user or password */
  820|    957|  }
  821|       |
  822|    289|  if(authhost->want && !authhost->picked)
  823|       |    /* The app has selected one or more methods, but none has been picked
  824|       |       so far by a server round-trip. Then we set the picked one to the
  825|       |       want one, and if this is one single bit it'll be used instantly. */
  826|    232|    authhost->picked = authhost->want;
  827|       |
  828|    289|  if(authproxy->want && !authproxy->picked)
  829|       |    /* The app has selected one or more methods, but none has been picked so
  830|       |       far by a proxy round-trip. Then we set the picked one to the want one,
  831|       |       and if this is one single bit it'll be used instantly. */
  832|    233|    authproxy->picked = authproxy->want;
  833|       |
  834|    289|#ifndef CURL_DISABLE_PROXY
  835|       |  /* Send proxy authentication header if needed */
  836|    289|  if(conn->bits.httpproxy &&
  837|    289|     (conn->bits.tunnel_proxy == (bit)proxytunnel)) {
  838|      0|    result = output_auth_headers(data, conn, authproxy, request, path, TRUE);
  839|      0|    if(result)
  840|      0|      return result;
  841|      0|  }
  842|    289|  else
  843|       |#else
  844|       |  (void)proxytunnel;
  845|       |#endif /* CURL_DISABLE_PROXY */
  846|       |    /* we have no proxy so let's pretend we're done authenticating
  847|       |       with it */
  848|    289|    authproxy->done = TRUE;
  849|       |
  850|       |  /* To prevent the user+password to get sent to other than the original
  851|       |     host due to a location-follow, we do some weirdo checks here */
  852|    289|  if(!data->state.this_is_a_follow ||
  853|    289|#ifndef CURL_DISABLE_NETRC
  854|    289|     conn->bits.netrc ||
  855|    289|#endif
  856|    289|     !data->state.first_host ||
  857|    289|     data->set.allow_auth_to_other_hosts ||
  858|    289|     strcasecompare(data->state.first_host, conn->host.name)) {
  859|    289|    result = output_auth_headers(data, conn, authhost, request, path, FALSE);
  860|    289|  }
  861|      0|  else
  862|      0|    authhost->done = TRUE;
  863|       |
  864|    289|  if(((authhost->multipass && !authhost->done) ||
  865|    289|      (authproxy->multipass && !authproxy->done)) &&
  866|    289|     (httpreq != HTTPREQ_GET) &&
  867|    289|     (httpreq != HTTPREQ_HEAD)) {
  868|       |    /* Auth is required and we are not authenticated yet. Make a PUT or POST
  869|       |       with content-length zero as a "probe". */
  870|     29|    conn->bits.authneg = TRUE;
  871|     29|  }
  872|    260|  else
  873|    260|    conn->bits.authneg = FALSE;
  874|       |
  875|    289|  return result;
  876|    289|}
Curl_http_input_auth:
  911|    171|{
  912|       |  /*
  913|       |   * This resource requires authentication
  914|       |   */
  915|    171|  struct connectdata *conn = data->conn;
  916|       |#ifdef USE_SPNEGO
  917|       |  curlnegotiate *negstate = proxy ? &conn->proxy_negotiate_state :
  918|       |                                    &conn->http_negotiate_state;
  919|       |#endif
  920|    171|  unsigned long *availp;
  921|    171|  struct auth *authp;
  922|       |
  923|    171|  (void) conn; /* In case conditionals make it unused. */
  924|       |
  925|    171|  if(proxy) {
  926|      0|    availp = &data->info.proxyauthavail;
  927|      0|    authp = &data->state.authproxy;
  928|      0|  }
  929|    171|  else {
  930|    171|    availp = &data->info.httpauthavail;
  931|    171|    authp = &data->state.authhost;
  932|    171|  }
  933|       |
  934|       |  /*
  935|       |   * Here we check if we want the specific single authentication (using ==) and
  936|       |   * if we do, we initiate usage of it.
  937|       |   *
  938|       |   * If the provided authentication is wanted as one out of several accepted
  939|       |   * types (using &), we OR this authentication type to the authavail
  940|       |   * variable.
  941|       |   *
  942|       |   * Note:
  943|       |   *
  944|       |   * ->picked is first set to the 'want' value (one or more bits) before the
  945|       |   * request is sent, and then it is again set _after_ all response 401/407
  946|       |   * headers have been received but then only to a single preferred method
  947|       |   * (bit).
  948|       |   */
  949|       |
  950|    819|  while(*auth) {
  951|       |#ifdef USE_SPNEGO
  952|       |    if(checkprefix("Negotiate", auth) && is_valid_auth_separator(auth[9])) {
  953|       |      if((authp->avail & CURLAUTH_NEGOTIATE) ||
  954|       |         Curl_auth_is_spnego_supported()) {
  955|       |        *availp |= CURLAUTH_NEGOTIATE;
  956|       |        authp->avail |= CURLAUTH_NEGOTIATE;
  957|       |
  958|       |        if(authp->picked == CURLAUTH_NEGOTIATE) {
  959|       |          CURLcode result = Curl_input_negotiate(data, conn, proxy, auth);
  960|       |          if(!result) {
  961|       |            DEBUGASSERT(!data->req.newurl);
  962|       |            data->req.newurl = strdup(data->state.url);
  963|       |            if(!data->req.newurl)
  964|       |              return CURLE_OUT_OF_MEMORY;
  965|       |            data->state.authproblem = FALSE;
  966|       |            /* we received a GSS auth token and we dealt with it fine */
  967|       |            *negstate = GSS_AUTHRECV;
  968|       |          }
  969|       |          else
  970|       |            data->state.authproblem = TRUE;
  971|       |        }
  972|       |      }
  973|       |    }
  974|       |    else
  975|       |#endif
  976|    648|#ifdef USE_NTLM
  977|       |      /* NTLM support requires the SSL crypto libs */
  978|    648|      if(checkprefix("NTLM", auth) && is_valid_auth_separator(auth[4])) {
  979|      0|        if((authp->avail & CURLAUTH_NTLM) ||
  980|      0|           (authp->avail & CURLAUTH_NTLM_WB) ||
  981|      0|           Curl_auth_is_ntlm_supported()) {
  982|      0|          *availp |= CURLAUTH_NTLM;
  983|      0|          authp->avail |= CURLAUTH_NTLM;
  984|       |
  985|      0|          if(authp->picked == CURLAUTH_NTLM ||
  986|      0|             authp->picked == CURLAUTH_NTLM_WB) {
  987|       |            /* NTLM authentication is picked and activated */
  988|      0|            CURLcode result = Curl_input_ntlm(data, proxy, auth);
  989|      0|            if(!result) {
  990|      0|              data->state.authproblem = FALSE;
  991|      0|#ifdef NTLM_WB_ENABLED
  992|      0|              if(authp->picked == CURLAUTH_NTLM_WB) {
  993|      0|                *availp &= ~CURLAUTH_NTLM;
  994|      0|                authp->avail &= ~CURLAUTH_NTLM;
  995|      0|                *availp |= CURLAUTH_NTLM_WB;
  996|      0|                authp->avail |= CURLAUTH_NTLM_WB;
  997|       |
  998|      0|                result = Curl_input_ntlm_wb(data, conn, proxy, auth);
  999|      0|                if(result) {
 1000|      0|                  infof(data, "Authentication problem. Ignoring this.");
 1001|      0|                  data->state.authproblem = TRUE;
 1002|      0|                }
 1003|      0|              }
 1004|      0|#endif
 1005|      0|            }
 1006|      0|            else {
 1007|      0|              infof(data, "Authentication problem. Ignoring this.");
 1008|      0|              data->state.authproblem = TRUE;
 1009|      0|            }
 1010|      0|          }
 1011|      0|        }
 1012|      0|      }
 1013|    648|      else
 1014|    648|#endif
 1015|    648|#ifndef CURL_DISABLE_CRYPTO_AUTH
 1016|    648|        if(checkprefix("Digest", auth) && is_valid_auth_separator(auth[6])) {
 1017|    160|          if((authp->avail & CURLAUTH_DIGEST) != 0)
 1018|     27|            infof(data, "Ignoring duplicate digest auth header.");
 1019|    133|          else if(Curl_auth_is_digest_supported()) {
 1020|    133|            CURLcode result;
 1021|       |
 1022|    133|            *availp |= CURLAUTH_DIGEST;
 1023|    133|            authp->avail |= CURLAUTH_DIGEST;
 1024|       |
 1025|       |            /* We call this function on input Digest headers even if Digest
 1026|       |             * authentication isn't activated yet, as we need to store the
 1027|       |             * incoming data from this header in case we are going to use
 1028|       |             * Digest */
 1029|    133|            result = Curl_input_digest(data, proxy, auth);
 1030|    133|            if(result) {
 1031|     43|              infof(data, "Authentication problem. Ignoring this.");
 1032|     43|              data->state.authproblem = TRUE;
 1033|     43|            }
 1034|    133|          }
 1035|    160|        }
 1036|    488|        else
 1037|    488|#endif
 1038|    488|          if(checkprefix("Basic", auth) &&
 1039|    488|             is_valid_auth_separator(auth[5])) {
 1040|      0|            *availp |= CURLAUTH_BASIC;
 1041|      0|            authp->avail |= CURLAUTH_BASIC;
 1042|      0|            if(authp->picked == CURLAUTH_BASIC) {
 1043|       |              /* We asked for Basic authentication but got a 40X back
 1044|       |                 anyway, which basically means our name+password isn't
 1045|       |                 valid. */
 1046|      0|              authp->avail = CURLAUTH_NONE;
 1047|      0|              infof(data, "Authentication problem. Ignoring this.");
 1048|      0|              data->state.authproblem = TRUE;
 1049|      0|            }
 1050|      0|          }
 1051|    488|          else
 1052|    488|            if(checkprefix("Bearer", auth) &&
 1053|    488|               is_valid_auth_separator(auth[6])) {
 1054|      0|              *availp |= CURLAUTH_BEARER;
 1055|      0|              authp->avail |= CURLAUTH_BEARER;
 1056|      0|              if(authp->picked == CURLAUTH_BEARER) {
 1057|       |                /* We asked for Bearer authentication but got a 40X back
 1058|       |                  anyway, which basically means our token isn't valid. */
 1059|      0|                authp->avail = CURLAUTH_NONE;
 1060|      0|                infof(data, "Authentication problem. Ignoring this.");
 1061|      0|                data->state.authproblem = TRUE;
 1062|      0|              }
 1063|      0|            }
 1064|       |
 1065|       |    /* there may be multiple methods on one line, so keep reading */
 1066|  14.5k|    while(*auth && *auth != ',') /* read up to the next comma */
 1067|  13.8k|      auth++;
 1068|    648|    if(*auth == ',') /* if we're on a comma, skip it */
 1069|    489|      auth++;
 1070|  1.51k|    while(*auth && ISSPACE(*auth))
 1071|    863|      auth++;
 1072|    648|  }
 1073|       |
 1074|    171|  return CURLE_OK;
 1075|    171|}
Curl_buffer_send:
 1229|  1.24k|{
 1230|  1.24k|  ssize_t amount;
 1231|  1.24k|  CURLcode result;
 1232|  1.24k|  char *ptr;
 1233|  1.24k|  size_t size;
 1234|  1.24k|  struct connectdata *conn = data->conn;
 1235|  1.24k|  struct HTTP *http = data->req.p.http;
 1236|  1.24k|  size_t sendsize;
 1237|  1.24k|  curl_socket_t sockfd;
 1238|  1.24k|  size_t headersize;
 1239|       |
 1240|  1.24k|  DEBUGASSERT(socketindex <= SECONDARYSOCKET);
 1241|       |
 1242|  1.24k|  sockfd = conn->sock[socketindex];
 1243|       |
 1244|       |  /* The looping below is required since we use non-blocking sockets, but due
 1245|       |     to the circumstances we will just loop and try again and again etc */
 1246|       |
 1247|  1.24k|  ptr = Curl_dyn_ptr(in);
 1248|  1.24k|  size = Curl_dyn_len(in);
 1249|       |
 1250|  1.24k|  headersize = size - (size_t)included_body_bytes; /* the initial part that
 1251|       |                                                      isn't body is header */
 1252|       |
 1253|  1.24k|  DEBUGASSERT(size > (size_t)included_body_bytes);
 1254|       |
 1255|  1.24k|  result = Curl_convert_to_network(data, ptr, headersize);
 1256|       |  /* Curl_convert_to_network calls failf if unsuccessful */
 1257|  1.24k|  if(result) {
 1258|       |    /* conversion failed, free memory and return to the caller */
 1259|      0|    Curl_dyn_free(in);
 1260|      0|    return result;
 1261|      0|  }
 1262|       |
 1263|  1.24k|  if((conn->handler->flags & PROTOPT_SSL
 1264|  1.24k|#ifndef CURL_DISABLE_PROXY
 1265|  1.24k|      || conn->http_proxy.proxytype == CURLPROXY_HTTPS
 1266|  1.24k|#endif
 1267|  1.24k|       )
 1268|  1.24k|     && conn->httpversion != 20) {
 1269|       |    /* Make sure this doesn't send more body bytes than what the max send
 1270|       |       speed says. The request bytes do not count to the max speed.
 1271|       |    */
 1272|      0|    if(data->set.max_send_speed &&
 1273|      0|       (included_body_bytes > data->set.max_send_speed)) {
 1274|      0|      curl_off_t overflow = included_body_bytes - data->set.max_send_speed;
 1275|      0|      DEBUGASSERT((size_t)overflow < size);
 1276|      0|      sendsize = size - (size_t)overflow;
 1277|      0|    }
 1278|      0|    else
 1279|      0|      sendsize = size;
 1280|       |
 1281|       |    /* OpenSSL is very picky and we must send the SAME buffer pointer to the
 1282|       |       library when we attempt to re-send this buffer. Sending the same data
 1283|       |       is not enough, we must use the exact same address. For this reason, we
 1284|       |       must copy the data to the uploadbuffer first, since that is the buffer
 1285|       |       we will be using if this send is retried later.
 1286|       |    */
 1287|      0|    result = Curl_get_upload_buffer(data);
 1288|      0|    if(result) {
 1289|       |      /* malloc failed, free memory and return to the caller */
 1290|      0|      Curl_dyn_free(in);
 1291|      0|      return result;
 1292|      0|    }
 1293|       |    /* We never send more than upload_buffer_size bytes in one single chunk
 1294|       |       when we speak HTTPS, as if only a fraction of it is sent now, this data
 1295|       |       needs to fit into the normal read-callback buffer later on and that
 1296|       |       buffer is using this size.
 1297|       |    */
 1298|      0|    if(sendsize > (size_t)data->set.upload_buffer_size)
 1299|      0|      sendsize = (size_t)data->set.upload_buffer_size;
 1300|       |
 1301|      0|    memcpy(data->state.ulbuf, ptr, sendsize);
 1302|      0|    ptr = data->state.ulbuf;
 1303|      0|  }
 1304|  1.24k|  else {
 1305|  1.24k|#ifdef CURLDEBUG
 1306|       |    /* Allow debug builds to override this logic to force short initial
 1307|       |       sends
 1308|       |     */
 1309|  1.24k|    char *p = getenv("CURL_SMALLREQSEND");
 1310|  1.24k|    if(p) {
 1311|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
 1312|      0|      if(altsize)
 1313|      0|        sendsize = CURLMIN(size, altsize);
 1314|      0|      else
 1315|      0|        sendsize = size;
 1316|      0|    }
 1317|  1.24k|    else
 1318|  1.24k|#endif
 1319|  1.24k|    {
 1320|       |      /* Make sure this doesn't send more body bytes than what the max send
 1321|       |         speed says. The request bytes do not count to the max speed.
 1322|       |      */
 1323|  1.24k|      if(data->set.max_send_speed &&
 1324|  1.24k|         (included_body_bytes > data->set.max_send_speed)) {
 1325|      0|        curl_off_t overflow = included_body_bytes - data->set.max_send_speed;
 1326|      0|        DEBUGASSERT((size_t)overflow < size);
 1327|      0|        sendsize = size - (size_t)overflow;
 1328|      0|      }
 1329|  1.24k|      else
 1330|  1.24k|        sendsize = size;
 1331|  1.24k|    }
 1332|  1.24k|  }
 1333|       |
 1334|  1.24k|  result = Curl_write(data, sockfd, ptr, sendsize, &amount);
 1335|       |
 1336|  1.24k|  if(!result) {
 1337|       |    /*
 1338|       |     * Note that we may not send the entire chunk at once, and we have a set
 1339|       |     * number of data bytes at the end of the big buffer (out of which we may
 1340|       |     * only send away a part).
 1341|       |     */
 1342|       |    /* how much of the header that was sent */
 1343|  1.24k|    size_t headlen = (size_t)amount>headersize ? headersize : (size_t)amount;
 1344|  1.24k|    size_t bodylen = amount - headlen;
 1345|       |
 1346|       |    /* this data _may_ contain binary stuff */
 1347|  1.24k|    Curl_debug(data, CURLINFO_HEADER_OUT, ptr, headlen);
 1348|  1.24k|    if(bodylen)
 1349|       |      /* there was body data sent beyond the initial header part, pass that on
 1350|       |         to the debug callback too */
 1351|     17|      Curl_debug(data, CURLINFO_DATA_OUT, ptr + headlen, bodylen);
 1352|       |
 1353|       |    /* 'amount' can never be a very large value here so typecasting it so a
 1354|       |       signed 31 bit value should not cause problems even if ssize_t is
 1355|       |       64bit */
 1356|  1.24k|    *bytes_written += (long)amount;
 1357|       |
 1358|  1.24k|    if(http) {
 1359|       |      /* if we sent a piece of the body here, up the byte counter for it
 1360|       |         accordingly */
 1361|  1.24k|      data->req.writebytecount += bodylen;
 1362|  1.24k|      Curl_pgrsSetUploadCounter(data, data->req.writebytecount);
 1363|       |
 1364|  1.24k|      if((size_t)amount != size) {
 1365|       |        /* The whole request could not be sent in one system call. We must
 1366|       |           queue it up and send it later when we get the chance. We must not
 1367|       |           loop here and wait until it might work again. */
 1368|       |
 1369|      0|        size -= amount;
 1370|       |
 1371|      0|        ptr = Curl_dyn_ptr(in) + amount;
 1372|       |
 1373|       |        /* backup the currently set pointers */
 1374|      0|        http->backup.fread_func = data->state.fread_func;
 1375|      0|        http->backup.fread_in = data->state.in;
 1376|      0|        http->backup.postdata = http->postdata;
 1377|      0|        http->backup.postsize = http->postsize;
 1378|       |
 1379|       |        /* set the new pointers for the request-sending */
 1380|      0|        data->state.fread_func = (curl_read_callback)readmoredata;
 1381|      0|        data->state.in = (void *)data;
 1382|      0|        http->postdata = ptr;
 1383|      0|        http->postsize = (curl_off_t)size;
 1384|       |
 1385|       |        /* this much data is remaining header: */
 1386|      0|        data->req.pendingheader = headersize - headlen;
 1387|       |
 1388|      0|        http->send_buffer = *in; /* copy the whole struct */
 1389|      0|        http->sending = HTTPSEND_REQUEST;
 1390|       |
 1391|      0|        return CURLE_OK;
 1392|      0|      }
 1393|  1.24k|      http->sending = HTTPSEND_BODY;
 1394|       |      /* the full buffer was sent, clean up and return */
 1395|  1.24k|    }
 1396|      0|    else {
 1397|      0|      if((size_t)amount != size)
 1398|       |        /* We have no continue-send mechanism now, fail. This can only happen
 1399|       |           when this function is used from the CONNECT sending function. We
 1400|       |           currently (stupidly) assume that the whole request is always sent
 1401|       |           away in the first single chunk.
 1402|       |
 1403|       |           This needs FIXing.
 1404|       |        */
 1405|      0|        return CURLE_SEND_ERROR;
 1406|      0|    }
 1407|  1.24k|  }
 1408|  1.24k|  Curl_dyn_free(in);
 1409|       |
 1410|       |  /* no remaining header data */
 1411|  1.24k|  data->req.pendingheader = 0;
 1412|  1.24k|  return result;
 1413|  1.24k|}
Curl_compareheader:
 1432|  17.1k|{
 1433|       |  /* RFC2616, section 4.2 says: "Each header field consists of a name followed
 1434|       |   * by a colon (":") and the field value. Field names are case-insensitive.
 1435|       |   * The field value MAY be preceded by any amount of LWS, though a single SP
 1436|       |   * is preferred." */
 1437|       |
 1438|  17.1k|  size_t hlen = strlen(header);
 1439|  17.1k|  size_t clen;
 1440|  17.1k|  size_t len;
 1441|  17.1k|  const char *start;
 1442|  17.1k|  const char *end;
 1443|       |
 1444|  17.1k|  if(!strncasecompare(headerline, header, hlen))
 1445|  16.6k|    return FALSE; /* doesn't start with header */
 1446|       |
 1447|       |  /* pass the header */
 1448|    511|  start = &headerline[hlen];
 1449|       |
 1450|       |  /* pass all whitespace */
 1451|  1.07k|  while(*start && ISSPACE(*start))
 1452|    559|    start++;
 1453|       |
 1454|       |  /* find the end of the header line */
 1455|    511|  end = strchr(start, '\r'); /* lines end with CRLF */
 1456|    511|  if(!end) {
 1457|       |    /* in case there's a non-standard compliant line here */
 1458|    378|    end = strchr(start, '\n');
 1459|       |
 1460|    378|    if(!end)
 1461|       |      /* hm, there's no line ending here, use the zero byte! */
 1462|     45|      end = strchr(start, '\0');
 1463|    378|  }
 1464|       |
 1465|    511|  len = end-start; /* length of the content part of the input line */
 1466|    511|  clen = strlen(content); /* length of the word to find */
 1467|       |
 1468|       |  /* find the content string in the rest of the line */
 1469|  3.15k|  for(; len >= clen; len--, start++) {
 1470|  2.77k|    if(strncasecompare(start, content, clen))
 1471|    127|      return TRUE; /* match! */
 1472|  2.77k|  }
 1473|       |
 1474|    384|  return FALSE; /* no match */
 1475|    511|}
Curl_http_connect:
 1482|  1.24k|{
 1483|  1.24k|  CURLcode result;
 1484|  1.24k|  struct connectdata *conn = data->conn;
 1485|       |
 1486|       |  /* We default to persistent connections. We set this already in this connect
 1487|       |     function to make the re-use checks properly be able to check this bit. */
 1488|  1.24k|  connkeep(conn, "HTTP default");
 1489|       |
 1490|  1.24k|#ifndef CURL_DISABLE_PROXY
 1491|       |  /* the CONNECT procedure might not have been completed */
 1492|  1.24k|  result = Curl_proxy_connect(data, FIRSTSOCKET);
 1493|  1.24k|  if(result)
 1494|      0|    return result;
 1495|       |
 1496|  1.24k|  if(conn->bits.proxy_connect_closed)
 1497|       |    /* this is not an error, just part of the connection negotiation */
 1498|      0|    return CURLE_OK;
 1499|       |
 1500|  1.24k|  if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1501|      0|    return CURLE_OK; /* wait for HTTPS proxy SSL initialization to complete */
 1502|       |
 1503|  1.24k|  if(Curl_connect_ongoing(conn))
 1504|       |    /* nothing else to do except wait right now - we're not done here. */
 1505|      0|    return CURLE_OK;
 1506|       |
 1507|  1.24k|  if(data->set.haproxyprotocol) {
 1508|       |    /* add HAProxy PROXY protocol header */
 1509|      0|    result = add_haproxy_protocol_header(data);
 1510|      0|    if(result)
 1511|      0|      return result;
 1512|      0|  }
 1513|  1.24k|#endif
 1514|       |
 1515|  1.24k|  if(conn->given->protocol & CURLPROTO_HTTPS) {
 1516|       |    /* perform SSL initialization */
 1517|      0|    result = https_connecting(data, done);
 1518|      0|    if(result)
 1519|      0|      return result;
 1520|      0|  }
 1521|  1.24k|  else
 1522|  1.24k|    *done = TRUE;
 1523|       |
 1524|  1.24k|  return CURLE_OK;
 1525|  1.24k|}
Curl_http_done:
 1616|  1.24k|{
 1617|  1.24k|  struct connectdata *conn = data->conn;
 1618|  1.24k|  struct HTTP *http = data->req.p.http;
 1619|       |
 1620|       |  /* Clear multipass flag. If authentication isn't done yet, then it will get
 1621|       |   * a chance to be set back to true when we output the next auth header */
 1622|  1.24k|  data->state.authhost.multipass = FALSE;
 1623|  1.24k|  data->state.authproxy.multipass = FALSE;
 1624|       |
 1625|  1.24k|  Curl_unencode_cleanup(data);
 1626|       |
 1627|       |  /* set the proper values (possibly modified on POST) */
 1628|  1.24k|  conn->seek_func = data->set.seek_func; /* restore */
 1629|  1.24k|  conn->seek_client = data->set.seek_client; /* restore */
 1630|       |
 1631|  1.24k|  if(!http)
 1632|      0|    return CURLE_OK;
 1633|       |
 1634|  1.24k|  Curl_dyn_free(&http->send_buffer);
 1635|  1.24k|  Curl_http2_done(data, premature);
 1636|  1.24k|  Curl_quic_done(data, premature);
 1637|  1.24k|  Curl_mime_cleanpart(&http->form);
 1638|  1.24k|  Curl_dyn_reset(&data->state.headerb);
 1639|  1.24k|  Curl_hyper_done(data);
 1640|       |
 1641|  1.24k|  if(status)
 1642|    328|    return status;
 1643|       |
 1644|    918|  if(!premature && /* this check is pointless when DONE is called before the
 1645|       |                      entire operation is complete */
 1646|    918|     !conn->bits.retry &&
 1647|    918|     !data->set.connect_only &&
 1648|    918|     (data->req.bytecount +
 1649|    916|      data->req.headerbytecount -
 1650|    916|      data->req.deductheadercount) <= 0) {
 1651|       |    /* If this connection isn't simply closed to be retried, AND nothing was
 1652|       |       read from the HTTP server (that counts), this can't be right so we
 1653|       |       return an error here */
 1654|    335|    failf(data, "Empty reply from server");
 1655|       |    /* Mark it as closed to avoid the "left intact" message */
 1656|    335|    streamclose(conn, "Empty reply from server");
 1657|    335|    return CURLE_GOT_NOTHING;
 1658|    335|  }
 1659|       |
 1660|    583|  return CURLE_OK;
 1661|    918|}
Curl_use_http_1_1plus:
 1674|  1.13k|{
 1675|  1.13k|  if((data->state.httpversion == 10) || (conn->httpversion == 10))
 1676|      5|    return FALSE;
 1677|  1.13k|  if((data->state.httpwant == CURL_HTTP_VERSION_1_0) &&
 1678|  1.13k|     (conn->httpversion <= 10))
 1679|      0|    return FALSE;
 1680|  1.13k|  return ((data->state.httpwant == CURL_HTTP_VERSION_NONE) ||
 1681|  1.13k|          (data->state.httpwant >= CURL_HTTP_VERSION_1_1));
 1682|  1.13k|}
Curl_add_custom_headers:
 1793|  1.24k|{
 1794|  1.24k|  struct connectdata *conn = data->conn;
 1795|  1.24k|  char *ptr;
 1796|  1.24k|  struct curl_slist *h[2];
 1797|  1.24k|  struct curl_slist *headers;
 1798|  1.24k|  int numlists = 1; /* by default */
 1799|  1.24k|  int i;
 1800|       |
 1801|  1.24k|#ifndef CURL_DISABLE_PROXY
 1802|  1.24k|  enum proxy_use proxy;
 1803|       |
 1804|  1.24k|  if(is_connect)
 1805|      0|    proxy = HEADER_CONNECT;
 1806|  1.24k|  else
 1807|  1.24k|    proxy = conn->bits.httpproxy && !conn->bits.tunnel_proxy?
 1808|  1.24k|      HEADER_PROXY:HEADER_SERVER;
 1809|       |
 1810|  1.24k|  switch(proxy) {
 1811|  1.24k|  case HEADER_SERVER:
 1812|  1.24k|    h[0] = data->set.headers;
 1813|  1.24k|    break;
 1814|      0|  case HEADER_PROXY:
 1815|      0|    h[0] = data->set.headers;
 1816|      0|    if(data->set.sep_headers) {
 1817|      0|      h[1] = data->set.proxyheaders;
 1818|      0|      numlists++;
 1819|      0|    }
 1820|      0|    break;
 1821|      0|  case HEADER_CONNECT:
 1822|      0|    if(data->set.sep_headers)
 1823|      0|      h[0] = data->set.proxyheaders;
 1824|      0|    else
 1825|      0|      h[0] = data->set.headers;
 1826|      0|    break;
 1827|  1.24k|  }
 1828|       |#else
 1829|       |  (void)is_connect;
 1830|       |  h[0] = data->set.headers;
 1831|       |#endif
 1832|       |
 1833|       |  /* loop through one or two lists */
 1834|  2.49k|  for(i = 0; i < numlists; i++) {
 1835|  1.24k|    headers = h[i];
 1836|       |
 1837|  5.01k|    while(headers) {
 1838|  3.77k|      char *semicolonp = NULL;
 1839|  3.77k|      ptr = strchr(headers->data, ':');
 1840|  3.77k|      if(!ptr) {
 1841|  1.45k|        char *optr;
 1842|       |        /* no colon, semicolon? */
 1843|  1.45k|        ptr = strchr(headers->data, ';');
 1844|  1.45k|        if(ptr) {
 1845|    684|          optr = ptr;
 1846|    684|          ptr++; /* pass the semicolon */
 1847|  1.23k|          while(*ptr && ISSPACE(*ptr))
 1848|    555|            ptr++;
 1849|       |
 1850|    684|          if(*ptr) {
 1851|       |            /* this may be used for something else in the future */
 1852|    280|            optr = NULL;
 1853|    280|          }
 1854|    404|          else {
 1855|    404|            if(*(--ptr) == ';') {
 1856|       |              /* copy the source */
 1857|    135|              semicolonp = strdup(headers->data);
 1858|    135|              if(!semicolonp) {
 1859|      0|#ifndef USE_HYPER
 1860|      0|                Curl_dyn_free(req);
 1861|      0|#endif
 1862|      0|                return CURLE_OUT_OF_MEMORY;
 1863|      0|              }
 1864|       |              /* put a colon where the semicolon is */
 1865|    135|              semicolonp[ptr - headers->data] = ':';
 1866|       |              /* point at the colon */
 1867|    135|              optr = &semicolonp [ptr - headers->data];
 1868|    135|            }
 1869|    404|          }
 1870|    684|          ptr = optr;
 1871|    684|        }
 1872|  1.45k|      }
 1873|  3.77k|      if(ptr) {
 1874|       |        /* we require a colon for this to be a true header */
 1875|       |
 1876|  2.72k|        ptr++; /* pass the colon */
 1877|  5.49k|        while(*ptr && ISSPACE(*ptr))
 1878|  2.76k|          ptr++;
 1879|       |
 1880|  2.72k|        if(*ptr || semicolonp) {
 1881|       |          /* only send this if the contents was non-blank or done special */
 1882|  1.78k|          CURLcode result = CURLE_OK;
 1883|  1.78k|          char *compare = semicolonp ? semicolonp : headers->data;
 1884|       |
 1885|  1.78k|          if(data->state.aptr.host &&
 1886|       |             /* a Host: header was sent already, don't pass on any custom Host:
 1887|       |                header as that will produce *two* in the same request! */
 1888|  1.78k|             checkprefix("Host:", compare))
 1889|     72|            ;
 1890|  1.71k|          else if(data->state.httpreq == HTTPREQ_POST_FORM &&
 1891|       |                  /* this header (extended by formdata.c) is sent later */
 1892|  1.71k|                  checkprefix("Content-Type:", compare))
 1893|      0|            ;
 1894|  1.71k|          else if(data->state.httpreq == HTTPREQ_POST_MIME &&
 1895|       |                  /* this header is sent later */
 1896|  1.71k|                  checkprefix("Content-Type:", compare))
 1897|    230|            ;
 1898|  1.48k|          else if(conn->bits.authneg &&
 1899|       |                  /* while doing auth neg, don't allow the custom length since
 1900|       |                     we will force length zero then */
 1901|  1.48k|                  checkprefix("Content-Length:", compare))
 1902|     10|            ;
 1903|  1.47k|          else if(data->state.aptr.te &&
 1904|       |                  /* when asking for Transfer-Encoding, don't pass on a custom
 1905|       |                     Connection: */
 1906|  1.47k|                  checkprefix("Connection:", compare))
 1907|      0|            ;
 1908|  1.47k|          else if((conn->httpversion >= 20) &&
 1909|  1.47k|                  checkprefix("Transfer-Encoding:", compare))
 1910|       |            /* HTTP/2 doesn't support chunked requests */
 1911|      0|            ;
 1912|  1.47k|          else if((checkprefix("Authorization:", compare) ||
 1913|  1.47k|                   checkprefix("Cookie:", compare)) &&
 1914|       |                  /* be careful of sending this potentially sensitive header to
 1915|       |                     other hosts */
 1916|  1.47k|                  (data->state.this_is_a_follow &&
 1917|      0|                   data->state.first_host &&
 1918|      0|                   !data->set.allow_auth_to_other_hosts &&
 1919|      0|                   !strcasecompare(data->state.first_host, conn->host.name)))
 1920|      0|            ;
 1921|  1.47k|          else {
 1922|       |#ifdef USE_HYPER
 1923|       |            result = Curl_hyper_header(data, req, compare);
 1924|       |#else
 1925|  1.47k|            result = Curl_dyn_addf(req, "%s\r\n", compare);
 1926|  1.47k|#endif
 1927|  1.47k|          }
 1928|  1.78k|          if(semicolonp)
 1929|    135|            free(semicolonp);
 1930|  1.78k|          if(result)
 1931|      0|            return result;
 1932|  1.78k|        }
 1933|  2.72k|      }
 1934|  3.77k|      headers = headers->next;
 1935|  3.77k|    }
 1936|  1.24k|  }
 1937|       |
 1938|  1.24k|  return CURLE_OK;
 1939|  1.24k|}
Curl_add_timecondition:
 1949|  1.11k|{
 1950|  1.11k|  const struct tm *tm;
 1951|  1.11k|  struct tm keeptime;
 1952|  1.11k|  CURLcode result;
 1953|  1.11k|  char datestr[80];
 1954|  1.11k|  const char *condp;
 1955|       |
 1956|  1.11k|  if(data->set.timecondition == CURL_TIMECOND_NONE)
 1957|       |    /* no condition was asked for */
 1958|  1.11k|    return CURLE_OK;
 1959|       |
 1960|      0|  result = Curl_gmtime(data->set.timevalue, &keeptime);
 1961|      0|  if(result) {
 1962|      0|    failf(data, "Invalid TIMEVALUE");
 1963|      0|    return result;
 1964|      0|  }
 1965|      0|  tm = &keeptime;
 1966|       |
 1967|      0|  switch(data->set.timecondition) {
 1968|      0|  default:
 1969|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1970|       |
 1971|      0|  case CURL_TIMECOND_IFMODSINCE:
 1972|      0|    condp = "If-Modified-Since";
 1973|      0|    break;
 1974|      0|  case CURL_TIMECOND_IFUNMODSINCE:
 1975|      0|    condp = "If-Unmodified-Since";
 1976|      0|    break;
 1977|      0|  case CURL_TIMECOND_LASTMOD:
 1978|      0|    condp = "Last-Modified";
 1979|      0|    break;
 1980|      0|  }
 1981|       |
 1982|      0|  if(Curl_checkheaders(data, condp)) {
 1983|       |    /* A custom header was specified; it will be sent instead. */
 1984|      0|    return CURLE_OK;
 1985|      0|  }
 1986|       |
 1987|       |  /* The If-Modified-Since header family should have their times set in
 1988|       |   * GMT as RFC2616 defines: "All HTTP date/time stamps MUST be
 1989|       |   * represented in Greenwich Mean Time (GMT), without exception. For the
 1990|       |   * purposes of HTTP, GMT is exactly equal to UTC (Coordinated Universal
 1991|       |   * Time)." (see page 20 of RFC2616).
 1992|       |   */
 1993|       |
 1994|       |  /* format: "Tue, 15 Nov 1994 12:45:26 GMT" */
 1995|      0|  msnprintf(datestr, sizeof(datestr),
 1996|      0|            "%s: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n",
 1997|      0|            condp,
 1998|      0|            Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
 1999|      0|            tm->tm_mday,
 2000|      0|            Curl_month[tm->tm_mon],
 2001|      0|            tm->tm_year + 1900,
 2002|      0|            tm->tm_hour,
 2003|      0|            tm->tm_min,
 2004|      0|            tm->tm_sec);
 2005|       |
 2006|      0|#ifndef USE_HYPER
 2007|      0|  result = Curl_dyn_add(req, datestr);
 2008|       |#else
 2009|       |  result = Curl_hyper_header(data, req, datestr);
 2010|       |#endif
 2011|       |
 2012|      0|  return result;
 2013|      0|}
Curl_http_method:
 2027|  1.11k|{
 2028|  1.11k|  Curl_HttpReq httpreq = data->state.httpreq;
 2029|  1.11k|  const char *request;
 2030|  1.11k|  if((conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_FTP)) &&
 2031|  1.11k|     data->set.upload)
 2032|     19|    httpreq = HTTPREQ_PUT;
 2033|       |
 2034|       |  /* Now set the 'request' pointer to the proper request string */
 2035|  1.11k|  if(data->set.str[STRING_CUSTOMREQUEST])
 2036|      7|    request = data->set.str[STRING_CUSTOMREQUEST];
 2037|  1.11k|  else {
 2038|  1.11k|    if(data->set.opt_no_body)
 2039|      8|      request = "HEAD";
 2040|  1.10k|    else {
 2041|  1.10k|      DEBUGASSERT((httpreq >= HTTPREQ_GET) && (httpreq <= HTTPREQ_HEAD));
 2042|  1.10k|      switch(httpreq) {
 2043|     20|      case HTTPREQ_POST:
 2044|     20|      case HTTPREQ_POST_FORM:
 2045|    171|      case HTTPREQ_POST_MIME:
 2046|    171|        request = "POST";
 2047|    171|        break;
 2048|     19|      case HTTPREQ_PUT:
 2049|     19|        request = "PUT";
 2050|     19|        break;
 2051|      0|      default: /* this should never happen */
 2052|    914|      case HTTPREQ_GET:
 2053|    914|        request = "GET";
 2054|    914|        break;
 2055|      0|      case HTTPREQ_HEAD:
 2056|      0|        request = "HEAD";
 2057|      0|        break;
 2058|  1.10k|      }
 2059|  1.10k|    }
 2060|  1.11k|  }
 2061|  1.11k|  *method = request;
 2062|  1.11k|  *reqp = httpreq;
 2063|  1.11k|}
Curl_http_useragent:
 2066|  1.11k|{
 2067|       |  /* The User-Agent string might have been allocated in url.c already, because
 2068|       |     it might have been used in the proxy connect, but if we have got a header
 2069|       |     with the user-agent string specified, we erase the previously made string
 2070|       |     here. */
 2071|  1.11k|  if(Curl_checkheaders(data, "User-Agent")) {
 2072|      0|    free(data->state.aptr.uagent);
 2073|      0|    data->state.aptr.uagent = NULL;
 2074|      0|  }
 2075|  1.11k|  return CURLE_OK;
 2076|  1.11k|}
Curl_http_host:
 2080|  1.11k|{
 2081|  1.11k|  const char *ptr;
 2082|  1.11k|  if(!data->state.this_is_a_follow) {
 2083|       |    /* Free to avoid leaking memory on multiple requests*/
 2084|  1.02k|    free(data->state.first_host);
 2085|       |
 2086|  1.02k|    data->state.first_host = strdup(conn->host.name);
 2087|  1.02k|    if(!data->state.first_host)
 2088|      0|      return CURLE_OUT_OF_MEMORY;
 2089|       |
 2090|  1.02k|    data->state.first_remote_port = conn->remote_port;
 2091|  1.02k|  }
 2092|  1.11k|  Curl_safefree(data->state.aptr.host);
 2093|       |
 2094|  1.11k|  ptr = Curl_checkheaders(data, "Host");
 2095|  1.11k|  if(ptr && (!data->state.this_is_a_follow ||
 2096|     17|             strcasecompare(data->state.first_host, conn->host.name))) {
 2097|     17|#if !defined(CURL_DISABLE_COOKIES)
 2098|       |    /* If we have a given custom Host: header, we extract the host name in
 2099|       |       order to possibly use it for cookie reasons later on. We only allow the
 2100|       |       custom Host: header if this is NOT a redirect, as setting Host: in the
 2101|       |       redirected request is being out on thin ice. Except if the host name
 2102|       |       is the same as the first one! */
 2103|     17|    char *cookiehost = Curl_copy_header_value(ptr);
 2104|     17|    if(!cookiehost)
 2105|      0|      return CURLE_OUT_OF_MEMORY;
 2106|     17|    if(!*cookiehost)
 2107|       |      /* ignore empty data */
 2108|      5|      free(cookiehost);
 2109|     12|    else {
 2110|       |      /* If the host begins with '[', we start searching for the port after
 2111|       |         the bracket has been closed */
 2112|     12|      if(*cookiehost == '[') {
 2113|      4|        char *closingbracket;
 2114|       |        /* since the 'cookiehost' is an allocated memory area that will be
 2115|       |           freed later we cannot simply increment the pointer */
 2116|      4|        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
 2117|      4|        closingbracket = strchr(cookiehost, ']');
 2118|      4|        if(closingbracket)
 2119|      1|          *closingbracket = 0;
 2120|      4|      }
 2121|      8|      else {
 2122|      8|        int startsearch = 0;
 2123|      8|        char *colon = strchr(cookiehost + startsearch, ':');
 2124|      8|        if(colon)
 2125|      1|          *colon = 0; /* The host must not include an embedded port number */
 2126|      8|      }
 2127|     12|      Curl_safefree(data->state.aptr.cookiehost);
 2128|     12|      data->state.aptr.cookiehost = cookiehost;
 2129|     12|    }
 2130|     17|#endif
 2131|       |
 2132|     17|    if(strcmp("Host:", ptr)) {
 2133|     12|      data->state.aptr.host = aprintf("Host:%s\r\n", &ptr[5]);
 2134|     12|      if(!data->state.aptr.host)
 2135|      0|        return CURLE_OUT_OF_MEMORY;
 2136|     12|    }
 2137|      5|    else
 2138|       |      /* when clearing the header */
 2139|      5|      data->state.aptr.host = NULL;
 2140|     17|  }
 2141|  1.10k|  else {
 2142|       |    /* When building Host: headers, we must put the host name within
 2143|       |       [brackets] if the host name is a plain IPv6-address. RFC2732-style. */
 2144|  1.10k|    const char *host = conn->host.name;
 2145|       |
 2146|  1.10k|    if(((conn->given->protocol&CURLPROTO_HTTPS) &&
 2147|  1.10k|        (conn->remote_port == PORT_HTTPS)) ||
 2148|  1.10k|       ((conn->given->protocol&CURLPROTO_HTTP) &&
 2149|  1.10k|        (conn->remote_port == PORT_HTTP)) )
 2150|       |      /* if(HTTPS on port 443) OR (HTTP on port 80) then don't include
 2151|       |         the port number in the host string */
 2152|    476|      data->state.aptr.host = aprintf("Host: %s%s%s\r\n",
 2153|    476|                                    conn->bits.ipv6_ip?"[":"",
 2154|    476|                                    host,
 2155|    476|                                    conn->bits.ipv6_ip?"]":"");
 2156|    626|    else
 2157|    626|      data->state.aptr.host = aprintf("Host: %s%s%s:%d\r\n",
 2158|    626|                                    conn->bits.ipv6_ip?"[":"",
 2159|    626|                                    host,
 2160|    626|                                    conn->bits.ipv6_ip?"]":"",
 2161|    626|                                    conn->remote_port);
 2162|       |
 2163|  1.10k|    if(!data->state.aptr.host)
 2164|       |      /* without Host: we can't make a nice request */
 2165|      0|      return CURLE_OUT_OF_MEMORY;
 2166|  1.10k|  }
 2167|  1.11k|  return CURLE_OK;
 2168|  1.11k|}
Curl_http_target:
 2176|  1.11k|{
 2177|  1.11k|  CURLcode result = CURLE_OK;
 2178|  1.11k|  const char *path = data->state.up.path;
 2179|  1.11k|  const char *query = data->state.up.query;
 2180|       |
 2181|  1.11k|  if(data->set.str[STRING_TARGET]) {
 2182|      0|    path = data->set.str[STRING_TARGET];
 2183|      0|    query = NULL;
 2184|      0|  }
 2185|       |
 2186|  1.11k|#ifndef CURL_DISABLE_PROXY
 2187|  1.11k|  if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
 2188|       |    /* Using a proxy but does not tunnel through it */
 2189|       |
 2190|       |    /* The path sent to the proxy is in fact the entire URL. But if the remote
 2191|       |       host is a IDN-name, we must make sure that the request we produce only
 2192|       |       uses the encoded host name! */
 2193|       |
 2194|       |    /* and no fragment part */
 2195|      0|    CURLUcode uc;
 2196|      0|    char *url;
 2197|      0|    CURLU *h = curl_url_dup(data->state.uh);
 2198|      0|    if(!h)
 2199|      0|      return CURLE_OUT_OF_MEMORY;
 2200|       |
 2201|      0|    if(conn->host.dispname != conn->host.name) {
 2202|      0|      uc = curl_url_set(h, CURLUPART_HOST, conn->host.name, 0);
 2203|      0|      if(uc) {
 2204|      0|        curl_url_cleanup(h);
 2205|      0|        return CURLE_OUT_OF_MEMORY;
 2206|      0|      }
 2207|      0|    }
 2208|      0|    uc = curl_url_set(h, CURLUPART_FRAGMENT, NULL, 0);
 2209|      0|    if(uc) {
 2210|      0|      curl_url_cleanup(h);
 2211|      0|      return CURLE_OUT_OF_MEMORY;
 2212|      0|    }
 2213|       |
 2214|      0|    if(strcasecompare("http", data->state.up.scheme)) {
 2215|       |      /* when getting HTTP, we don't want the userinfo the URL */
 2216|      0|      uc = curl_url_set(h, CURLUPART_USER, NULL, 0);
 2217|      0|      if(uc) {
 2218|      0|        curl_url_cleanup(h);
 2219|      0|        return CURLE_OUT_OF_MEMORY;
 2220|      0|      }
 2221|      0|      uc = curl_url_set(h, CURLUPART_PASSWORD, NULL, 0);
 2222|      0|      if(uc) {
 2223|      0|        curl_url_cleanup(h);
 2224|      0|        return CURLE_OUT_OF_MEMORY;
 2225|      0|      }
 2226|      0|    }
 2227|       |    /* Extract the URL to use in the request. Store in STRING_TEMP_URL for
 2228|       |       clean-up reasons if the function returns before the free() further
 2229|       |       down. */
 2230|      0|    uc = curl_url_get(h, CURLUPART_URL, &url, CURLU_NO_DEFAULT_PORT);
 2231|      0|    if(uc) {
 2232|      0|      curl_url_cleanup(h);
 2233|      0|      return CURLE_OUT_OF_MEMORY;
 2234|      0|    }
 2235|       |
 2236|      0|    curl_url_cleanup(h);
 2237|       |
 2238|       |    /* target or url */
 2239|      0|    result = Curl_dyn_add(r, data->set.str[STRING_TARGET]?
 2240|      0|      data->set.str[STRING_TARGET]:url);
 2241|      0|    free(url);
 2242|      0|    if(result)
 2243|      0|      return (result);
 2244|       |
 2245|      0|    if(strcasecompare("ftp", data->state.up.scheme)) {
 2246|      0|      if(data->set.proxy_transfer_mode) {
 2247|       |        /* when doing ftp, append ;type=<a|i> if not present */
 2248|      0|        char *type = strstr(path, ";type=");
 2249|      0|        if(type && type[6] && type[7] == 0) {
 2250|      0|          switch(Curl_raw_toupper(type[6])) {
 2251|      0|          case 'A':
 2252|      0|          case 'D':
 2253|      0|          case 'I':
 2254|      0|            break;
 2255|      0|          default:
 2256|      0|            type = NULL;
 2257|      0|          }
 2258|      0|        }
 2259|      0|        if(!type) {
 2260|      0|          result = Curl_dyn_addf(r, ";type=%c",
 2261|      0|                                 data->state.prefer_ascii ? 'a' : 'i');
 2262|      0|          if(result)
 2263|      0|            return result;
 2264|      0|        }
 2265|      0|      }
 2266|      0|    }
 2267|      0|  }
 2268|       |
 2269|  1.11k|  else
 2270|       |#else
 2271|       |    (void)conn; /* not used in disabled-proxy builds */
 2272|       |#endif
 2273|  1.11k|  {
 2274|  1.11k|    result = Curl_dyn_add(r, path);
 2275|  1.11k|    if(result)
 2276|      0|      return result;
 2277|  1.11k|    if(query)
 2278|     63|      result = Curl_dyn_addf(r, "?%s", query);
 2279|  1.11k|  }
 2280|       |
 2281|  1.11k|  return result;
 2282|  1.11k|}
Curl_http_body:
 2286|  1.11k|{
 2287|  1.11k|  CURLcode result = CURLE_OK;
 2288|  1.11k|  const char *ptr;
 2289|  1.11k|  struct HTTP *http = data->req.p.http;
 2290|  1.11k|  http->postsize = 0;
 2291|       |
 2292|  1.11k|  switch(httpreq) {
 2293|    152|  case HTTPREQ_POST_MIME:
 2294|    152|    http->sendit = &data->set.mimepost;
 2295|    152|    break;
 2296|      0|  case HTTPREQ_POST_FORM:
 2297|       |    /* Convert the form structure into a mime structure. */
 2298|      0|    Curl_mime_cleanpart(&http->form);
 2299|      0|    result = Curl_getformdata(data, &http->form, data->set.httppost,
 2300|      0|                              data->state.fread_func);
 2301|      0|    if(result)
 2302|      0|      return result;
 2303|      0|    http->sendit = &http->form;
 2304|      0|    break;
 2305|    967|  default:
 2306|    967|    http->sendit = NULL;
 2307|  1.11k|  }
 2308|       |
 2309|  1.11k|#ifndef CURL_DISABLE_MIME
 2310|  1.11k|  if(http->sendit) {
 2311|    152|    const char *cthdr = Curl_checkheaders(data, "Content-Type");
 2312|       |
 2313|       |    /* Read and seek body only. */
 2314|    152|    http->sendit->flags |= MIME_BODY_ONLY;
 2315|       |
 2316|       |    /* Prepare the mime structure headers & set content type. */
 2317|       |
 2318|    152|    if(cthdr)
 2319|     38|      for(cthdr += 13; *cthdr == ' '; cthdr++)
 2320|     19|        ;
 2321|    133|    else if(http->sendit->kind == MIMEKIND_MULTIPART)
 2322|    133|      cthdr = "multipart/form-data";
 2323|       |
 2324|    152|    curl_mime_headers(http->sendit, data->set.headers, 0);
 2325|    152|    result = Curl_mime_prepare_headers(http->sendit, cthdr,
 2326|    152|                                       NULL, MIMESTRATEGY_FORM);
 2327|    152|    curl_mime_headers(http->sendit, NULL, 0);
 2328|    152|    if(!result)
 2329|    152|      result = Curl_mime_rewind(http->sendit);
 2330|    152|    if(result)
 2331|      0|      return result;
 2332|    152|    http->postsize = Curl_mime_size(http->sendit);
 2333|    152|  }
 2334|  1.11k|#endif
 2335|       |
 2336|  1.11k|  ptr = Curl_checkheaders(data, "Transfer-Encoding");
 2337|  1.11k|  if(ptr) {
 2338|       |    /* Some kind of TE is requested, check if 'chunked' is chosen */
 2339|      9|    data->req.upload_chunky =
 2340|      9|      Curl_compareheader(ptr, "Transfer-Encoding:", "chunked");
 2341|      9|  }
 2342|  1.11k|  else {
 2343|  1.11k|    if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
 2344|  1.11k|       (((httpreq == HTTPREQ_POST_MIME || httpreq == HTTPREQ_POST_FORM) &&
 2345|  1.11k|         http->postsize < 0) ||
 2346|  1.11k|        ((data->set.upload || httpreq == HTTPREQ_POST) &&
 2347|  1.11k|         data->state.infilesize == -1))) {
 2348|      5|      if(conn->bits.authneg)
 2349|       |        /* don't enable chunked during auth neg */
 2350|      2|        ;
 2351|      3|      else if(Curl_use_http_1_1plus(data, conn)) {
 2352|      3|        if(conn->httpversion < 20)
 2353|       |          /* HTTP, upload, unknown file size and not HTTP 1.0 */
 2354|      3|          data->req.upload_chunky = TRUE;
 2355|      3|      }
 2356|      0|      else {
 2357|      0|        failf(data, "Chunky upload is not supported by HTTP 1.0");
 2358|      0|        return CURLE_UPLOAD_FAILED;
 2359|      0|      }
 2360|      5|    }
 2361|  1.10k|    else {
 2362|       |      /* else, no chunky upload */
 2363|  1.10k|      data->req.upload_chunky = FALSE;
 2364|  1.10k|    }
 2365|       |
 2366|  1.11k|    if(data->req.upload_chunky)
 2367|      3|      *tep = "Transfer-Encoding: chunked\r\n";
 2368|  1.11k|  }
 2369|  1.11k|  return result;
 2370|  1.11k|}
Curl_http_bodysend:
 2374|  1.11k|{
 2375|  1.11k|#ifndef USE_HYPER
 2376|       |  /* Hyper always handles the body separately */
 2377|  1.11k|  curl_off_t included_body = 0;
 2378|  1.11k|#endif
 2379|  1.11k|  CURLcode result = CURLE_OK;
 2380|  1.11k|  struct HTTP *http = data->req.p.http;
 2381|  1.11k|  const char *ptr;
 2382|       |
 2383|       |  /* If 'authdone' is FALSE, we must not set the write socket index to the
 2384|       |     Curl_transfer() call below, as we're not ready to actually upload any
 2385|       |     data yet. */
 2386|       |
 2387|  1.11k|  switch(httpreq) {
 2388|       |
 2389|     19|  case HTTPREQ_PUT: /* Let's PUT the data to the server! */
 2390|       |
 2391|     19|    if(conn->bits.authneg)
 2392|      3|      http->postsize = 0;
 2393|     16|    else
 2394|     16|      http->postsize = data->state.infilesize;
 2395|       |
 2396|     19|    if((http->postsize != -1) && !data->req.upload_chunky &&
 2397|     19|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2398|       |      /* only add Content-Length if not uploading chunked */
 2399|     12|      result = Curl_dyn_addf(r, "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2400|     12|                             "\r\n", http->postsize);
 2401|     12|      if(result)
 2402|      0|        return result;
 2403|     12|    }
 2404|       |
 2405|     19|    if(http->postsize) {
 2406|     13|      result = expect100(data, conn, r);
 2407|     13|      if(result)
 2408|      0|        return result;
 2409|     13|    }
 2410|       |
 2411|       |    /* end of headers */
 2412|     19|    result = Curl_dyn_add(r, "\r\n");
 2413|     19|    if(result)
 2414|      0|      return result;
 2415|       |
 2416|       |    /* set the upload size to the progress meter */
 2417|     19|    Curl_pgrsSetUploadSize(data, http->postsize);
 2418|       |
 2419|       |    /* this sends the buffer and frees all the buffer resources */
 2420|     19|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2421|     19|                              FIRSTSOCKET);
 2422|     19|    if(result)
 2423|      0|      failf(data, "Failed sending PUT request");
 2424|     19|    else
 2425|       |      /* prepare for transfer */
 2426|     19|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2427|     19|                          http->postsize?FIRSTSOCKET:-1);
 2428|     19|    if(result)
 2429|      0|      return result;
 2430|     19|    break;
 2431|       |
 2432|     19|  case HTTPREQ_POST_FORM:
 2433|    152|  case HTTPREQ_POST_MIME:
 2434|       |    /* This is form posting using mime data. */
 2435|    152|    if(conn->bits.authneg) {
 2436|       |      /* nothing to post! */
 2437|     24|      result = Curl_dyn_add(r, "Content-Length: 0\r\n\r\n");
 2438|     24|      if(result)
 2439|      0|        return result;
 2440|       |
 2441|     24|      result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2442|     24|                                FIRSTSOCKET);
 2443|     24|      if(result)
 2444|      0|        failf(data, "Failed sending POST request");
 2445|     24|      else
 2446|       |        /* setup variables for the upcoming transfer */
 2447|     24|        Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, -1);
 2448|     24|      break;
 2449|     24|    }
 2450|       |
 2451|    128|    data->state.infilesize = http->postsize;
 2452|       |
 2453|       |    /* We only set Content-Length and allow a custom Content-Length if
 2454|       |       we don't upload data chunked, as RFC2616 forbids us to set both
 2455|       |       kinds of headers (Transfer-Encoding: chunked and Content-Length) */
 2456|    128|    if(http->postsize != -1 && !data->req.upload_chunky &&
 2457|    128|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2458|       |      /* we allow replacing this header if not during auth negotiation,
 2459|       |         although it isn't very wise to actually set your own */
 2460|    125|      result = Curl_dyn_addf(r,
 2461|    125|                             "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2462|    125|                             "\r\n", http->postsize);
 2463|    125|      if(result)
 2464|      0|        return result;
 2465|    125|    }
 2466|       |
 2467|    128|#ifndef CURL_DISABLE_MIME
 2468|       |    /* Output mime-generated headers. */
 2469|    128|    {
 2470|    128|      struct curl_slist *hdr;
 2471|       |
 2472|    256|      for(hdr = http->sendit->curlheaders; hdr; hdr = hdr->next) {
 2473|    128|        result = Curl_dyn_addf(r, "%s\r\n", hdr->data);
 2474|    128|        if(result)
 2475|      0|          return result;
 2476|    128|      }
 2477|    128|    }
 2478|    128|#endif
 2479|       |
 2480|       |    /* For really small posts we don't use Expect: headers at all, and for
 2481|       |       the somewhat bigger ones we allow the app to disable it. Just make
 2482|       |       sure that the expect100header is always set to the preferred value
 2483|       |       here. */
 2484|    128|    ptr = Curl_checkheaders(data, "Expect");
 2485|    128|    if(ptr) {
 2486|      0|      data->state.expect100header =
 2487|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 2488|      0|    }
 2489|    128|    else if(http->postsize > EXPECT_100_THRESHOLD || http->postsize < 0) {
 2490|      0|      result = expect100(data, conn, r);
 2491|      0|      if(result)
 2492|      0|        return result;
 2493|      0|    }
 2494|    128|    else
 2495|    128|      data->state.expect100header = FALSE;
 2496|       |
 2497|       |    /* make the request end in a true CRLF */
 2498|    128|    result = Curl_dyn_add(r, "\r\n");
 2499|    128|    if(result)
 2500|      0|      return result;
 2501|       |
 2502|       |    /* set the upload size to the progress meter */
 2503|    128|    Curl_pgrsSetUploadSize(data, http->postsize);
 2504|       |
 2505|       |    /* Read from mime structure. */
 2506|    128|    data->state.fread_func = (curl_read_callback) Curl_mime_read;
 2507|    128|    data->state.in = (void *) http->sendit;
 2508|    128|    http->sending = HTTPSEND_BODY;
 2509|       |
 2510|       |    /* this sends the buffer and frees all the buffer resources */
 2511|    128|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2512|    128|                              FIRSTSOCKET);
 2513|    128|    if(result)
 2514|      0|      failf(data, "Failed sending POST request");
 2515|    128|    else
 2516|       |      /* prepare for transfer */
 2517|    128|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2518|    128|                          http->postsize?FIRSTSOCKET:-1);
 2519|    128|    if(result)
 2520|      0|      return result;
 2521|       |
 2522|    128|    break;
 2523|       |
 2524|    128|  case HTTPREQ_POST:
 2525|       |    /* this is the simple POST, using x-www-form-urlencoded style */
 2526|       |
 2527|     20|    if(conn->bits.authneg)
 2528|      2|      http->postsize = 0;
 2529|     18|    else
 2530|       |      /* the size of the post body */
 2531|     18|      http->postsize = data->state.infilesize;
 2532|       |
 2533|       |    /* We only set Content-Length and allow a custom Content-Length if
 2534|       |       we don't upload data chunked, as RFC2616 forbids us to set both
 2535|       |       kinds of headers (Transfer-Encoding: chunked and Content-Length) */
 2536|     20|    if((http->postsize != -1) && !data->req.upload_chunky &&
 2537|     20|       (conn->bits.authneg || !Curl_checkheaders(data, "Content-Length"))) {
 2538|       |      /* we allow replacing this header if not during auth negotiation,
 2539|       |         although it isn't very wise to actually set your own */
 2540|     15|      result = Curl_dyn_addf(r, "Content-Length: %" CURL_FORMAT_CURL_OFF_T
 2541|     15|                             "\r\n", http->postsize);
 2542|     15|      if(result)
 2543|      0|        return result;
 2544|     15|    }
 2545|       |
 2546|     20|    if(!Curl_checkheaders(data, "Content-Type")) {
 2547|     18|      result = Curl_dyn_add(r, "Content-Type: application/"
 2548|     18|                            "x-www-form-urlencoded\r\n");
 2549|     18|      if(result)
 2550|      0|        return result;
 2551|     18|    }
 2552|       |
 2553|       |    /* For really small posts we don't use Expect: headers at all, and for
 2554|       |       the somewhat bigger ones we allow the app to disable it. Just make
 2555|       |       sure that the expect100header is always set to the preferred value
 2556|       |       here. */
 2557|     20|    ptr = Curl_checkheaders(data, "Expect");
 2558|     20|    if(ptr) {
 2559|      0|      data->state.expect100header =
 2560|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 2561|      0|    }
 2562|     20|    else if(http->postsize > EXPECT_100_THRESHOLD || http->postsize < 0) {
 2563|      0|      result = expect100(data, conn, r);
 2564|      0|      if(result)
 2565|      0|        return result;
 2566|      0|    }
 2567|     20|    else
 2568|     20|      data->state.expect100header = FALSE;
 2569|       |
 2570|     20|#ifndef USE_HYPER
 2571|       |    /* With Hyper the body is always passed on separately */
 2572|     20|    if(data->set.postfields) {
 2573|       |
 2574|       |      /* In HTTP2, we send request body in DATA frame regardless of
 2575|       |         its size. */
 2576|     20|      if(conn->httpversion != 20 &&
 2577|     20|         !data->state.expect100header &&
 2578|     20|         (http->postsize < MAX_INITIAL_POST_SIZE)) {
 2579|       |        /* if we don't use expect: 100  AND
 2580|       |           postsize is less than MAX_INITIAL_POST_SIZE
 2581|       |
 2582|       |           then append the post data to the HTTP request header. This limit
 2583|       |           is no magic limit but only set to prevent really huge POSTs to
 2584|       |           get the data duplicated with malloc() and family. */
 2585|       |
 2586|       |        /* end of headers! */
 2587|     20|        result = Curl_dyn_add(r, "\r\n");
 2588|     20|        if(result)
 2589|      0|          return result;
 2590|       |
 2591|     20|        if(!data->req.upload_chunky) {
 2592|       |          /* We're not sending it 'chunked', append it to the request
 2593|       |             already now to reduce the number if send() calls */
 2594|     18|          result = Curl_dyn_addn(r, data->set.postfields,
 2595|     18|                                 (size_t)http->postsize);
 2596|     18|          included_body = http->postsize;
 2597|     18|        }
 2598|      2|        else {
 2599|      2|          if(http->postsize) {
 2600|      1|            char chunk[16];
 2601|       |            /* Append the POST data chunky-style */
 2602|      1|            msnprintf(chunk, sizeof(chunk), "%x\r\n", (int)http->postsize);
 2603|      1|            result = Curl_dyn_add(r, chunk);
 2604|      1|            if(!result) {
 2605|      1|              included_body = http->postsize + strlen(chunk);
 2606|      1|              result = Curl_dyn_addn(r, data->set.postfields,
 2607|      1|                                     (size_t)http->postsize);
 2608|      1|              if(!result)
 2609|      1|                result = Curl_dyn_add(r, "\r\n");
 2610|      1|              included_body += 2;
 2611|      1|            }
 2612|      1|          }
 2613|      2|          if(!result) {
 2614|      2|            result = Curl_dyn_add(r, "\x30\x0d\x0a\x0d\x0a");
 2615|       |            /* 0  CR  LF  CR  LF */
 2616|      2|            included_body += 5;
 2617|      2|          }
 2618|      2|        }
 2619|     20|        if(result)
 2620|      0|          return result;
 2621|       |        /* Make sure the progress information is accurate */
 2622|     20|        Curl_pgrsSetUploadSize(data, http->postsize);
 2623|     20|      }
 2624|      0|      else {
 2625|       |        /* A huge POST coming up, do data separate from the request */
 2626|      0|        http->postdata = data->set.postfields;
 2627|       |
 2628|      0|        http->sending = HTTPSEND_BODY;
 2629|       |
 2630|      0|        data->state.fread_func = (curl_read_callback)readmoredata;
 2631|      0|        data->state.in = (void *)data;
 2632|       |
 2633|       |        /* set the upload size to the progress meter */
 2634|      0|        Curl_pgrsSetUploadSize(data, http->postsize);
 2635|       |
 2636|       |        /* end of headers! */
 2637|      0|        result = Curl_dyn_add(r, "\r\n");
 2638|      0|        if(result)
 2639|      0|          return result;
 2640|      0|      }
 2641|     20|    }
 2642|      0|    else
 2643|      0|#endif
 2644|      0|    {
 2645|       |       /* end of headers! */
 2646|      0|      result = Curl_dyn_add(r, "\r\n");
 2647|      0|      if(result)
 2648|      0|        return result;
 2649|       |
 2650|      0|      if(data->req.upload_chunky && conn->bits.authneg) {
 2651|       |        /* Chunky upload is selected and we're negotiating auth still, send
 2652|       |           end-of-data only */
 2653|      0|        result = Curl_dyn_add(r, (char *)"\x30\x0d\x0a\x0d\x0a");
 2654|       |        /* 0  CR  LF  CR  LF */
 2655|      0|        if(result)
 2656|      0|          return result;
 2657|      0|      }
 2658|       |
 2659|      0|      else if(data->state.infilesize) {
 2660|       |        /* set the upload size to the progress meter */
 2661|      0|        Curl_pgrsSetUploadSize(data, http->postsize?http->postsize:-1);
 2662|       |
 2663|       |        /* set the pointer to mark that we will send the post body using the
 2664|       |           read callback, but only if we're not in authenticate negotiation */
 2665|      0|        if(!conn->bits.authneg)
 2666|      0|          http->postdata = (char *)&http->postdata;
 2667|      0|      }
 2668|      0|    }
 2669|       |    /* issue the request */
 2670|     20|    result = Curl_buffer_send(r, data, &data->info.request_size, included_body,
 2671|     20|                              FIRSTSOCKET);
 2672|       |
 2673|     20|    if(result)
 2674|      0|      failf(data, "Failed sending HTTP POST request");
 2675|     20|    else
 2676|     20|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE,
 2677|     20|                          http->postdata?FIRSTSOCKET:-1);
 2678|     20|    break;
 2679|       |
 2680|    928|  default:
 2681|    928|    result = Curl_dyn_add(r, "\r\n");
 2682|    928|    if(result)
 2683|      0|      return result;
 2684|       |
 2685|       |    /* issue the request */
 2686|    928|    result = Curl_buffer_send(r, data, &data->info.request_size, 0,
 2687|    928|                              FIRSTSOCKET);
 2688|       |
 2689|    928|    if(result)
 2690|      0|      failf(data, "Failed sending HTTP request");
 2691|    928|    else
 2692|       |      /* HTTP GET/HEAD download: */
 2693|    928|      Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, -1);
 2694|  1.11k|  }
 2695|       |
 2696|  1.11k|  return result;
 2697|  1.11k|}
Curl_http_cookies:
 2703|  1.11k|{
 2704|  1.11k|  CURLcode result = CURLE_OK;
 2705|  1.11k|  char *addcookies = NULL;
 2706|  1.11k|  if(data->set.str[STRING_COOKIE] && !Curl_checkheaders(data, "Cookie"))
 2707|      4|    addcookies = data->set.str[STRING_COOKIE];
 2708|       |
 2709|  1.11k|  if(data->cookies || addcookies) {
 2710|  1.11k|    struct Cookie *co = NULL; /* no cookies from start */
 2711|  1.11k|    int count = 0;
 2712|       |
 2713|  1.11k|    if(data->cookies && data->state.cookie_engine) {
 2714|  1.11k|      const char *host = data->state.aptr.cookiehost ?
 2715|  1.10k|        data->state.aptr.cookiehost : conn->host.name;
 2716|  1.11k|      const bool secure_context =
 2717|  1.11k|        conn->handler->protocol&CURLPROTO_HTTPS ||
 2718|  1.11k|        strcasecompare("localhost", host) ||
 2719|  1.11k|        !strcmp(host, "127.0.0.1") ||
 2720|  1.11k|        !strcmp(host, "[::1]") ? TRUE : FALSE;
 2721|  1.11k|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 2722|  1.11k|      co = Curl_cookie_getlist(data->cookies, host, data->state.up.path,
 2723|  1.11k|                               secure_context);
 2724|  1.11k|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 2725|  1.11k|    }
 2726|  1.11k|    if(co) {
 2727|     21|      struct Cookie *store = co;
 2728|       |      /* now loop through all cookies that matched */
 2729|     58|      while(co) {
 2730|     37|        if(co->value) {
 2731|     37|          if(0 == count) {
 2732|     21|            result = Curl_dyn_add(r, "Cookie: ");
 2733|     21|            if(result)
 2734|      0|              break;
 2735|     21|          }
 2736|     37|          result = Curl_dyn_addf(r, "%s%s=%s", count?"; ":"",
 2737|     37|                                 co->name, co->value);
 2738|     37|          if(result)
 2739|      0|            break;
 2740|     37|          count++;
 2741|     37|        }
 2742|     37|        co = co->next; /* next cookie please */
 2743|     37|      }
 2744|     21|      Curl_cookie_freelist(store);
 2745|     21|    }
 2746|  1.11k|    if(addcookies && !result) {
 2747|      4|      if(!count)
 2748|      4|        result = Curl_dyn_add(r, "Cookie: ");
 2749|      4|      if(!result) {
 2750|      4|        result = Curl_dyn_addf(r, "%s%s", count?"; ":"", addcookies);
 2751|      4|        count++;
 2752|      4|      }
 2753|      4|    }
 2754|  1.11k|    if(count && !result)
 2755|     25|      result = Curl_dyn_add(r, "\r\n");
 2756|       |
 2757|  1.11k|    if(result)
 2758|      0|      return result;
 2759|  1.11k|  }
 2760|  1.11k|  return result;
 2761|  1.11k|}
Curl_http_range:
 2766|  1.11k|{
 2767|  1.11k|  if(data->state.use_range) {
 2768|       |    /*
 2769|       |     * A range is selected. We use different headers whether we're downloading
 2770|       |     * or uploading and we always let customized headers override our internal
 2771|       |     * ones if any such are specified.
 2772|       |     */
 2773|     13|    if(((httpreq == HTTPREQ_GET) || (httpreq == HTTPREQ_HEAD)) &&
 2774|     13|       !Curl_checkheaders(data, "Range")) {
 2775|       |      /* if a line like this was already allocated, free the previous one */
 2776|      4|      free(data->state.aptr.rangeline);
 2777|      4|      data->state.aptr.rangeline = aprintf("Range: bytes=%s\r\n",
 2778|      4|                                           data->state.range);
 2779|      4|    }
 2780|      9|    else if((httpreq == HTTPREQ_POST || httpreq == HTTPREQ_PUT) &&
 2781|      9|            !Curl_checkheaders(data, "Content-Range")) {
 2782|       |
 2783|       |      /* if a line like this was already allocated, free the previous one */
 2784|      3|      free(data->state.aptr.rangeline);
 2785|       |
 2786|      3|      if(data->set.set_resume_from < 0) {
 2787|       |        /* Upload resume was asked for, but we don't know the size of the
 2788|       |           remote part so we tell the server (and act accordingly) that we
 2789|       |           upload the whole file (again) */
 2790|      0|        data->state.aptr.rangeline =
 2791|      0|          aprintf("Content-Range: bytes 0-%" CURL_FORMAT_CURL_OFF_T
 2792|      0|                  "/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2793|      0|                  data->state.infilesize - 1, data->state.infilesize);
 2794|       |
 2795|      0|      }
 2796|      3|      else if(data->state.resume_from) {
 2797|       |        /* This is because "resume" was selected */
 2798|      0|        curl_off_t total_expected_size =
 2799|      0|          data->state.resume_from + data->state.infilesize;
 2800|      0|        data->state.aptr.rangeline =
 2801|      0|          aprintf("Content-Range: bytes %s%" CURL_FORMAT_CURL_OFF_T
 2802|      0|                  "/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2803|      0|                  data->state.range, total_expected_size-1,
 2804|      0|                  total_expected_size);
 2805|      0|      }
 2806|      3|      else {
 2807|       |        /* Range was selected and then we just pass the incoming range and
 2808|       |           append total size */
 2809|      3|        data->state.aptr.rangeline =
 2810|      3|          aprintf("Content-Range: bytes %s/%" CURL_FORMAT_CURL_OFF_T "\r\n",
 2811|      3|                  data->state.range, data->state.infilesize);
 2812|      3|      }
 2813|      3|      if(!data->state.aptr.rangeline)
 2814|      0|        return CURLE_OUT_OF_MEMORY;
 2815|      3|    }
 2816|     13|  }
 2817|  1.11k|  return CURLE_OK;
 2818|  1.11k|}
Curl_http_resume:
 2823|  1.11k|{
 2824|  1.11k|  if((HTTPREQ_POST == httpreq || HTTPREQ_PUT == httpreq) &&
 2825|  1.11k|     data->state.resume_from) {
 2826|       |    /**********************************************************************
 2827|       |     * Resuming upload in HTTP means that we PUT or POST and that we have
 2828|       |     * got a resume_from value set. The resume value has already created
 2829|       |     * a Range: header that will be passed along. We need to "fast forward"
 2830|       |     * the file the given number of bytes and decrease the assume upload
 2831|       |     * file size before we continue this venture in the dark lands of HTTP.
 2832|       |     * Resuming mime/form posting at an offset > 0 has no sense and is ignored.
 2833|       |     *********************************************************************/
 2834|       |
 2835|      0|    if(data->state.resume_from < 0) {
 2836|       |      /*
 2837|       |       * This is meant to get the size of the present remote-file by itself.
 2838|       |       * We don't support this now. Bail out!
 2839|       |       */
 2840|      0|      data->state.resume_from = 0;
 2841|      0|    }
 2842|       |
 2843|      0|    if(data->state.resume_from && !data->state.this_is_a_follow) {
 2844|       |      /* do we still game? */
 2845|       |
 2846|       |      /* Now, let's read off the proper amount of bytes from the
 2847|       |         input. */
 2848|      0|      int seekerr = CURL_SEEKFUNC_CANTSEEK;
 2849|      0|      if(conn->seek_func) {
 2850|      0|        Curl_set_in_callback(data, true);
 2851|      0|        seekerr = conn->seek_func(conn->seek_client, data->state.resume_from,
 2852|      0|                                  SEEK_SET);
 2853|      0|        Curl_set_in_callback(data, false);
 2854|      0|      }
 2855|       |
 2856|      0|      if(seekerr != CURL_SEEKFUNC_OK) {
 2857|      0|        curl_off_t passed = 0;
 2858|       |
 2859|      0|        if(seekerr != CURL_SEEKFUNC_CANTSEEK) {
 2860|      0|          failf(data, "Could not seek stream");
 2861|      0|          return CURLE_READ_ERROR;
 2862|      0|        }
 2863|       |        /* when seekerr == CURL_SEEKFUNC_CANTSEEK (can't seek to offset) */
 2864|      0|        do {
 2865|      0|          size_t readthisamountnow =
 2866|      0|            (data->state.resume_from - passed > data->set.buffer_size) ?
 2867|      0|            (size_t)data->set.buffer_size :
 2868|      0|            curlx_sotouz(data->state.resume_from - passed);
 2869|       |
 2870|      0|          size_t actuallyread =
 2871|      0|            data->state.fread_func(data->state.buffer, 1, readthisamountnow,
 2872|      0|                                   data->state.in);
 2873|       |
 2874|      0|          passed += actuallyread;
 2875|      0|          if((actuallyread == 0) || (actuallyread > readthisamountnow)) {
 2876|       |            /* this checks for greater-than only to make sure that the
 2877|       |               CURL_READFUNC_ABORT return code still aborts */
 2878|      0|            failf(data, "Could only read %" CURL_FORMAT_CURL_OFF_T
 2879|      0|                  " bytes from the input", passed);
 2880|      0|            return CURLE_READ_ERROR;
 2881|      0|          }
 2882|      0|        } while(passed < data->state.resume_from);
 2883|      0|      }
 2884|       |
 2885|       |      /* now, decrease the size of the read */
 2886|      0|      if(data->state.infilesize>0) {
 2887|      0|        data->state.infilesize -= data->state.resume_from;
 2888|       |
 2889|      0|        if(data->state.infilesize <= 0) {
 2890|      0|          failf(data, "File already completely uploaded");
 2891|      0|          return CURLE_PARTIAL_FILE;
 2892|      0|        }
 2893|      0|      }
 2894|       |      /* we've passed, proceed as normal */
 2895|      0|    }
 2896|      0|  }
 2897|  1.11k|  return CURLE_OK;
 2898|  1.11k|}
Curl_http_firstwrite:
 2903|    310|{
 2904|    310|  struct SingleRequest *k = &data->req;
 2905|       |
 2906|    310|  if(data->req.newurl) {
 2907|     58|    if(conn->bits.close) {
 2908|       |      /* Abort after the headers if "follow Location" is set
 2909|       |         and we're set to close anyway. */
 2910|     29|      k->keepon &= ~KEEP_RECV;
 2911|     29|      *done = TRUE;
 2912|     29|      return CURLE_OK;
 2913|     29|    }
 2914|       |    /* We have a new url to load, but since we want to be able to re-use this
 2915|       |       connection properly, we read the full response in "ignore more" */
 2916|     29|    k->ignorebody = TRUE;
 2917|     29|    infof(data, "Ignoring the response-body");
 2918|     29|  }
 2919|    281|  if(data->state.resume_from && !k->content_range &&
 2920|    281|     (data->state.httpreq == HTTPREQ_GET) &&
 2921|    281|     !k->ignorebody) {
 2922|       |
 2923|      0|    if(k->size == data->state.resume_from) {
 2924|       |      /* The resume point is at the end of file, consider this fine even if it
 2925|       |         doesn't allow resume from here. */
 2926|      0|      infof(data, "The entire document is already downloaded");
 2927|      0|      connclose(conn, "already downloaded");
 2928|       |      /* Abort download */
 2929|      0|      k->keepon &= ~KEEP_RECV;
 2930|      0|      *done = TRUE;
 2931|      0|      return CURLE_OK;
 2932|      0|    }
 2933|       |
 2934|       |    /* we wanted to resume a download, although the server doesn't seem to
 2935|       |     * support this and we did this with a GET (if it wasn't a GET we did a
 2936|       |     * POST or PUT resume) */
 2937|      0|    failf(data, "HTTP server doesn't seem to support "
 2938|      0|          "byte ranges. Cannot resume.");
 2939|      0|    return CURLE_RANGE_ERROR;
 2940|      0|  }
 2941|       |
 2942|    281|  if(data->set.timecondition && !data->state.range) {
 2943|       |    /* A time condition has been set AND no ranges have been requested. This
 2944|       |       seems to be what chapter 13.3.4 of RFC 2616 defines to be the correct
 2945|       |       action for a HTTP/1.1 client */
 2946|       |
 2947|      0|    if(!Curl_meets_timecondition(data, k->timeofdoc)) {
 2948|      0|      *done = TRUE;
 2949|       |      /* We're simulating a http 304 from server so we return
 2950|       |         what should have been returned from the server */
 2951|      0|      data->info.httpcode = 304;
 2952|      0|      infof(data, "Simulate a HTTP 304 response!");
 2953|       |      /* we abort the transfer before it is completed == we ruin the
 2954|       |         re-use ability. Close the connection */
 2955|      0|      connclose(conn, "Simulated 304 handling");
 2956|      0|      return CURLE_OK;
 2957|      0|    }
 2958|      0|  } /* we have a time condition */
 2959|       |
 2960|    281|  return CURLE_OK;
 2961|    281|}
Curl_transferencode:
 2965|  1.11k|{
 2966|  1.11k|  if(!Curl_checkheaders(data, "TE") &&
 2967|  1.11k|     data->set.http_transfer_encoding) {
 2968|       |    /* When we are to insert a TE: header in the request, we must also insert
 2969|       |       TE in a Connection: header, so we need to merge the custom provided
 2970|       |       Connection: header and prevent the original to get sent. Note that if
 2971|       |       the user has inserted his/her own TE: header we don't do this magic
 2972|       |       but then assume that the user will handle it all! */
 2973|      0|    char *cptr = Curl_checkheaders(data, "Connection");
 2974|      0|#define TE_HEADER "TE: gzip\r\n"
 2975|       |
 2976|      0|    Curl_safefree(data->state.aptr.te);
 2977|       |
 2978|      0|    if(cptr) {
 2979|      0|      cptr = Curl_copy_header_value(cptr);
 2980|      0|      if(!cptr)
 2981|      0|        return CURLE_OUT_OF_MEMORY;
 2982|      0|    }
 2983|       |
 2984|       |    /* Create the (updated) Connection: header */
 2985|      0|    data->state.aptr.te = aprintf("Connection: %s%sTE\r\n" TE_HEADER,
 2986|      0|                                cptr ? cptr : "", (cptr && *cptr) ? ", ":"");
 2987|       |
 2988|      0|    free(cptr);
 2989|      0|    if(!data->state.aptr.te)
 2990|      0|      return CURLE_OUT_OF_MEMORY;
 2991|      0|  }
 2992|  1.11k|  return CURLE_OK;
 2993|  1.11k|}
Curl_http:
 3003|  1.11k|{
 3004|  1.11k|  struct connectdata *conn = data->conn;
 3005|  1.11k|  CURLcode result = CURLE_OK;
 3006|  1.11k|  struct HTTP *http;
 3007|  1.11k|  Curl_HttpReq httpreq;
 3008|  1.11k|  const char *te = ""; /* transfer-encoding */
 3009|  1.11k|  const char *request;
 3010|  1.11k|  const char *httpstring;
 3011|  1.11k|  struct dynbuf req;
 3012|  1.11k|  char *altused = NULL;
 3013|  1.11k|  const char *p_accept;      /* Accept: string */
 3014|       |
 3015|       |  /* Always consider the DO phase done after this function call, even if there
 3016|       |     may be parts of the request that are not yet sent, since we can deal with
 3017|       |     the rest of the request in the PERFORM phase. */
 3018|  1.11k|  *done = TRUE;
 3019|       |
 3020|  1.11k|  if(conn->transport != TRNSPRT_QUIC) {
 3021|  1.11k|    if(conn->httpversion < 20) { /* unless the connection is re-used and
 3022|       |                                    already http2 */
 3023|  1.11k|      switch(conn->negnpn) {
 3024|      0|      case CURL_HTTP_VERSION_2:
 3025|      0|        conn->httpversion = 20; /* we know we're on HTTP/2 now */
 3026|       |
 3027|      0|        result = Curl_http2_switched(data, NULL, 0);
 3028|      0|        if(result)
 3029|      0|          return result;
 3030|      0|        break;
 3031|      0|      case CURL_HTTP_VERSION_1_1:
 3032|       |        /* continue with HTTP/1.1 when explicitly requested */
 3033|      0|        break;
 3034|  1.11k|      default:
 3035|       |        /* Check if user wants to use HTTP/2 with clear TCP*/
 3036|  1.11k|#ifdef USE_NGHTTP2
 3037|  1.11k|        if(data->state.httpwant == CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE) {
 3038|      0|#ifndef CURL_DISABLE_PROXY
 3039|      0|          if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {
 3040|       |            /* We don't support HTTP/2 proxies yet. Also it's debatable
 3041|       |               whether or not this setting should apply to HTTP/2 proxies. */
 3042|      0|            infof(data, "Ignoring HTTP/2 prior knowledge due to proxy");
 3043|      0|            break;
 3044|      0|          }
 3045|      0|#endif
 3046|      0|          DEBUGF(infof(data, "HTTP/2 over clean TCP"));
 3047|      0|          conn->httpversion = 20;
 3048|       |
 3049|      0|          result = Curl_http2_switched(data, NULL, 0);
 3050|      0|          if(result)
 3051|      0|            return result;
 3052|      0|        }
 3053|  1.11k|#endif
 3054|  1.11k|        break;
 3055|  1.11k|      }
 3056|  1.11k|    }
 3057|      0|    else {
 3058|       |      /* prepare for a http2 request */
 3059|      0|      result = Curl_http2_setup(data, conn);
 3060|      0|      if(result)
 3061|      0|        return result;
 3062|      0|    }
 3063|  1.11k|  }
 3064|  1.11k|  http = data->req.p.http;
 3065|  1.11k|  DEBUGASSERT(http);
 3066|       |
 3067|  1.11k|  result = Curl_http_host(data, conn);
 3068|  1.11k|  if(result)
 3069|      0|    return result;
 3070|       |
 3071|  1.11k|  result = Curl_http_useragent(data);
 3072|  1.11k|  if(result)
 3073|      0|    return result;
 3074|       |
 3075|  1.11k|  Curl_http_method(data, conn, &request, &httpreq);
 3076|       |
 3077|       |  /* setup the authentication headers */
 3078|  1.11k|  {
 3079|  1.11k|    char *pq = NULL;
 3080|  1.11k|    if(data->state.up.query) {
 3081|     63|      pq = aprintf("%s?%s", data->state.up.path, data->state.up.query);
 3082|     63|      if(!pq)
 3083|      0|        return CURLE_OUT_OF_MEMORY;
 3084|     63|    }
 3085|  1.11k|    result = Curl_http_output_auth(data, conn, request, httpreq,
 3086|  1.11k|                                   (pq ? pq : data->state.up.path), FALSE);
 3087|  1.11k|    free(pq);
 3088|  1.11k|    if(result)
 3089|      0|      return result;
 3090|  1.11k|  }
 3091|       |
 3092|  1.11k|  Curl_safefree(data->state.aptr.ref);
 3093|  1.11k|  if(data->state.referer && !Curl_checkheaders(data, "Referer")) {
 3094|      0|    data->state.aptr.ref = aprintf("Referer: %s\r\n", data->state.referer);
 3095|      0|    if(!data->state.aptr.ref)
 3096|      0|      return CURLE_OUT_OF_MEMORY;
 3097|      0|  }
 3098|       |
 3099|  1.11k|  if(!Curl_checkheaders(data, "Accept-Encoding") &&
 3100|  1.11k|     data->set.str[STRING_ENCODING]) {
 3101|     62|    Curl_safefree(data->state.aptr.accept_encoding);
 3102|     62|    data->state.aptr.accept_encoding =
 3103|     62|      aprintf("Accept-Encoding: %s\r\n", data->set.str[STRING_ENCODING]);
 3104|     62|    if(!data->state.aptr.accept_encoding)
 3105|      0|      return CURLE_OUT_OF_MEMORY;
 3106|     62|  }
 3107|  1.05k|  else
 3108|  1.05k|    Curl_safefree(data->state.aptr.accept_encoding);
 3109|       |
 3110|  1.11k|#ifdef HAVE_LIBZ
 3111|       |  /* we only consider transfer-encoding magic if libz support is built-in */
 3112|  1.11k|  result = Curl_transferencode(data);
 3113|  1.11k|  if(result)
 3114|      0|    return result;
 3115|  1.11k|#endif
 3116|       |
 3117|  1.11k|  result = Curl_http_body(data, conn, httpreq, &te);
 3118|  1.11k|  if(result)
 3119|      0|    return result;
 3120|       |
 3121|  1.11k|  p_accept = Curl_checkheaders(data, "Accept")?NULL:"Accept: */*\r\n";
 3122|       |
 3123|  1.11k|  result = Curl_http_resume(data, conn, httpreq);
 3124|  1.11k|  if(result)
 3125|      0|    return result;
 3126|       |
 3127|  1.11k|  result = Curl_http_range(data, httpreq);
 3128|  1.11k|  if(result)
 3129|      0|    return result;
 3130|       |
 3131|  1.11k|  httpstring = get_http_string(data, conn);
 3132|       |
 3133|       |  /* initialize a dynamic send-buffer */
 3134|  1.11k|  Curl_dyn_init(&req, DYN_HTTP_REQUEST);
 3135|       |
 3136|       |  /* make sure the header buffer is reset - if there are leftovers from a
 3137|       |     previous transfer */
 3138|  1.11k|  Curl_dyn_reset(&data->state.headerb);
 3139|       |
 3140|       |  /* add the main request stuff */
 3141|       |  /* GET/HEAD/POST/PUT */
 3142|  1.11k|  result = Curl_dyn_addf(&req, "%s ", request);
 3143|  1.11k|  if(!result)
 3144|  1.11k|    result = Curl_http_target(data, conn, &req);
 3145|  1.11k|  if(result) {
 3146|      0|    Curl_dyn_free(&req);
 3147|      0|    return result;
 3148|      0|  }
 3149|       |
 3150|  1.11k|#ifndef CURL_DISABLE_ALTSVC
 3151|  1.11k|  if(conn->bits.altused && !Curl_checkheaders(data, "Alt-Used")) {
 3152|      0|    altused = aprintf("Alt-Used: %s:%d\r\n",
 3153|      0|                      conn->conn_to_host.name, conn->conn_to_port);
 3154|      0|    if(!altused) {
 3155|      0|      Curl_dyn_free(&req);
 3156|      0|      return CURLE_OUT_OF_MEMORY;
 3157|      0|    }
 3158|      0|  }
 3159|  1.11k|#endif
 3160|  1.11k|  result =
 3161|  1.11k|    Curl_dyn_addf(&req,
 3162|  1.11k|                  " HTTP/%s\r\n" /* HTTP version */
 3163|  1.11k|                  "%s" /* host */
 3164|  1.11k|                  "%s" /* proxyuserpwd */
 3165|  1.11k|                  "%s" /* userpwd */
 3166|  1.11k|                  "%s" /* range */
 3167|  1.11k|                  "%s" /* user agent */
 3168|  1.11k|                  "%s" /* accept */
 3169|  1.11k|                  "%s" /* TE: */
 3170|  1.11k|                  "%s" /* accept-encoding */
 3171|  1.11k|                  "%s" /* referer */
 3172|  1.11k|                  "%s" /* Proxy-Connection */
 3173|  1.11k|                  "%s" /* transfer-encoding */
 3174|  1.11k|                  "%s",/* Alt-Used */
 3175|       |
 3176|  1.11k|                  httpstring,
 3177|  1.11k|                  (data->state.aptr.host?data->state.aptr.host:""),
 3178|  1.11k|                  data->state.aptr.proxyuserpwd?
 3179|  1.11k|                  data->state.aptr.proxyuserpwd:"",
 3180|  1.11k|                  data->state.aptr.userpwd?data->state.aptr.userpwd:"",
 3181|  1.11k|                  (data->state.use_range && data->state.aptr.rangeline)?
 3182|  1.11k|                  data->state.aptr.rangeline:"",
 3183|  1.11k|                  (data->set.str[STRING_USERAGENT] &&
 3184|  1.11k|                   *data->set.str[STRING_USERAGENT] &&
 3185|  1.11k|                   data->state.aptr.uagent)?
 3186|  1.11k|                  data->state.aptr.uagent:"",
 3187|  1.11k|                  p_accept?p_accept:"",
 3188|  1.11k|                  data->state.aptr.te?data->state.aptr.te:"",
 3189|  1.11k|                  (data->set.str[STRING_ENCODING] &&
 3190|  1.11k|                   *data->set.str[STRING_ENCODING] &&
 3191|  1.11k|                   data->state.aptr.accept_encoding)?
 3192|  1.05k|                  data->state.aptr.accept_encoding:"",
 3193|  1.11k|                  (data->state.referer && data->state.aptr.ref)?
 3194|  1.11k|                  data->state.aptr.ref:"" /* Referer: <data> */,
 3195|  1.11k|#ifndef CURL_DISABLE_PROXY
 3196|  1.11k|                  (conn->bits.httpproxy &&
 3197|  1.11k|                   !conn->bits.tunnel_proxy &&
 3198|  1.11k|                   !Curl_checkheaders(data, "Proxy-Connection") &&
 3199|  1.11k|                   !Curl_checkProxyheaders(data, conn, "Proxy-Connection"))?
 3200|  1.11k|                  "Proxy-Connection: Keep-Alive\r\n":"",
 3201|       |#else
 3202|       |                  "",
 3203|       |#endif
 3204|  1.11k|                  te,
 3205|  1.11k|                  altused ? altused : ""
 3206|  1.11k|      );
 3207|       |
 3208|       |  /* clear userpwd and proxyuserpwd to avoid re-using old credentials
 3209|       |   * from re-used connections */
 3210|  1.11k|  Curl_safefree(data->state.aptr.userpwd);
 3211|  1.11k|  Curl_safefree(data->state.aptr.proxyuserpwd);
 3212|  1.11k|  free(altused);
 3213|       |
 3214|  1.11k|  if(result) {
 3215|      0|    Curl_dyn_free(&req);
 3216|      0|    return result;
 3217|      0|  }
 3218|       |
 3219|  1.11k|  if(!(conn->handler->flags&PROTOPT_SSL) &&
 3220|  1.11k|     conn->httpversion != 20 &&
 3221|  1.11k|     (data->state.httpwant == CURL_HTTP_VERSION_2)) {
 3222|       |    /* append HTTP2 upgrade magic stuff to the HTTP request if it isn't done
 3223|       |       over SSL */
 3224|      0|    result = Curl_http2_request_upgrade(&req, data);
 3225|      0|    if(result) {
 3226|      0|      Curl_dyn_free(&req);
 3227|      0|      return result;
 3228|      0|    }
 3229|      0|  }
 3230|       |
 3231|  1.11k|  result = Curl_http_cookies(data, conn, &req);
 3232|  1.11k|  if(!result)
 3233|  1.11k|    result = Curl_add_timecondition(data, &req);
 3234|  1.11k|  if(!result)
 3235|  1.11k|    result = Curl_add_custom_headers(data, FALSE, &req);
 3236|       |
 3237|  1.11k|  if(!result) {
 3238|  1.11k|    http->postdata = NULL;  /* nothing to post at this point */
 3239|  1.11k|    if((httpreq == HTTPREQ_GET) ||
 3240|  1.11k|       (httpreq == HTTPREQ_HEAD))
 3241|    928|      Curl_pgrsSetUploadSize(data, 0); /* nothing */
 3242|       |
 3243|       |    /* bodysend takes ownership of the 'req' memory on success */
 3244|  1.11k|    result = Curl_http_bodysend(data, conn, &req, httpreq);
 3245|  1.11k|  }
 3246|  1.11k|  if(result) {
 3247|      0|    Curl_dyn_free(&req);
 3248|      0|    return result;
 3249|      0|  }
 3250|       |
 3251|  1.11k|  if((http->postsize > -1) &&
 3252|  1.11k|     (http->postsize <= data->req.writebytecount) &&
 3253|  1.11k|     (http->sending != HTTPSEND_REQUEST))
 3254|    954|    data->req.upload_done = TRUE;
 3255|       |
 3256|  1.11k|  if(data->req.writebytecount) {
 3257|       |    /* if a request-body has been sent off, we make sure this progress is noted
 3258|       |       properly */
 3259|     17|    Curl_pgrsSetUploadCounter(data, data->req.writebytecount);
 3260|     17|    if(Curl_pgrsUpdate(data))
 3261|      0|      result = CURLE_ABORTED_BY_CALLBACK;
 3262|       |
 3263|     17|    if(!http->postsize) {
 3264|       |      /* already sent the entire request body, mark the "upload" as
 3265|       |         complete */
 3266|      1|      infof(data, "upload completely sent off: %" CURL_FORMAT_CURL_OFF_T
 3267|      1|            " out of %" CURL_FORMAT_CURL_OFF_T " bytes",
 3268|      1|            data->req.writebytecount, http->postsize);
 3269|      1|      data->req.upload_done = TRUE;
 3270|      1|      data->req.keepon &= ~KEEP_SEND; /* we're done writing */
 3271|      1|      data->req.exp100 = EXP100_SEND_DATA; /* already sent */
 3272|      1|      Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 3273|      1|    }
 3274|     17|  }
 3275|       |
 3276|  1.11k|  if((conn->httpversion == 20) && data->req.upload_chunky)
 3277|       |    /* upload_chunky was set above to set up the request in a chunky fashion,
 3278|       |       but is disabled here again to avoid that the chunked encoded version is
 3279|       |       actually used when sending the request body over h2 */
 3280|      0|    data->req.upload_chunky = FALSE;
 3281|  1.11k|  return result;
 3282|  1.11k|}
Curl_http_header:
 3395|  18.6k|{
 3396|  18.6k|  CURLcode result;
 3397|  18.6k|  struct SingleRequest *k = &data->req;
 3398|       |  /* Check for Content-Length: header lines to get size */
 3399|  18.6k|  if(!k->http_bodyless &&
 3400|  18.6k|     !data->set.ignorecl && checkprefix("Content-Length:", headp)) {
 3401|    388|    curl_off_t contentlength;
 3402|    388|    CURLofft offt = curlx_strtoofft(headp + strlen("Content-Length:"),
 3403|    388|                                    NULL, 10, &contentlength);
 3404|       |
 3405|    388|    if(offt == CURL_OFFT_OK) {
 3406|    378|      k->size = contentlength;
 3407|    378|      k->maxdownload = k->size;
 3408|    378|    }
 3409|     10|    else if(offt == CURL_OFFT_FLOW) {
 3410|       |      /* out of range */
 3411|      0|      if(data->set.max_filesize) {
 3412|      0|        failf(data, "Maximum file size exceeded");
 3413|      0|        return CURLE_FILESIZE_EXCEEDED;
 3414|      0|      }
 3415|      0|      streamclose(conn, "overflow content-length");
 3416|      0|      infof(data, "Overflow Content-Length: value!");
 3417|      0|    }
 3418|     10|    else {
 3419|       |      /* negative or just rubbish - bad HTTP */
 3420|     10|      failf(data, "Invalid Content-Length: value");
 3421|     10|      return CURLE_WEIRD_SERVER_REPLY;
 3422|     10|    }
 3423|    388|  }
 3424|       |  /* check for Content-Type: header lines to get the MIME-type */
 3425|  18.2k|  else if(checkprefix("Content-Type:", headp)) {
 3426|  1.84k|    char *contenttype = Curl_copy_header_value(headp);
 3427|  1.84k|    if(!contenttype)
 3428|      0|      return CURLE_OUT_OF_MEMORY;
 3429|  1.84k|    if(!*contenttype)
 3430|       |      /* ignore empty data */
 3431|     64|      free(contenttype);
 3432|  1.77k|    else {
 3433|  1.77k|      Curl_safefree(data->info.contenttype);
 3434|  1.77k|      data->info.contenttype = contenttype;
 3435|  1.77k|    }
 3436|  1.84k|  }
 3437|  16.4k|#ifndef CURL_DISABLE_PROXY
 3438|  16.4k|  else if((conn->httpversion == 10) &&
 3439|  16.4k|          conn->bits.httpproxy &&
 3440|  16.4k|          Curl_compareheader(headp, "Proxy-Connection:", "keep-alive")) {
 3441|       |    /*
 3442|       |     * When a HTTP/1.0 reply comes when using a proxy, the
 3443|       |     * 'Proxy-Connection: keep-alive' line tells us the
 3444|       |     * connection will be kept alive for our pleasure.
 3445|       |     * Default action for 1.0 is to close.
 3446|       |     */
 3447|      0|    connkeep(conn, "Proxy-Connection keep-alive"); /* don't close */
 3448|      0|    infof(data, "HTTP/1.0 proxy connection set to keep alive!");
 3449|      0|  }
 3450|  16.4k|  else if((conn->httpversion == 11) &&
 3451|  16.4k|          conn->bits.httpproxy &&
 3452|  16.4k|          Curl_compareheader(headp, "Proxy-Connection:", "close")) {
 3453|       |    /*
 3454|       |     * We get a HTTP/1.1 response from a proxy and it says it'll
 3455|       |     * close down after this transfer.
 3456|       |     */
 3457|      0|    connclose(conn, "Proxy-Connection: asked to close after done");
 3458|      0|    infof(data, "HTTP/1.1 proxy connection set close!");
 3459|      0|  }
 3460|  16.4k|#endif
 3461|  16.4k|  else if((conn->httpversion == 10) &&
 3462|  16.4k|          Curl_compareheader(headp, "Connection:", "keep-alive")) {
 3463|       |    /*
 3464|       |     * A HTTP/1.0 reply with the 'Connection: keep-alive' line
 3465|       |     * tells us the connection will be kept alive for our
 3466|       |     * pleasure.  Default action for 1.0 is to close.
 3467|       |     *
 3468|       |     * [RFC2068, section 19.7.1] */
 3469|      0|    connkeep(conn, "Connection keep-alive");
 3470|      0|    infof(data, "HTTP/1.0 connection set to keep alive!");
 3471|      0|  }
 3472|  16.4k|  else if(Curl_compareheader(headp, "Connection:", "close")) {
 3473|       |    /*
 3474|       |     * [RFC 2616, section 8.1.2.1]
 3475|       |     * "Connection: close" is HTTP/1.1 language and means that
 3476|       |     * the connection will close when this request has been
 3477|       |     * served.
 3478|       |     */
 3479|    123|    streamclose(conn, "Connection: close used");
 3480|    123|  }
 3481|  16.2k|  else if(!k->http_bodyless && checkprefix("Transfer-Encoding:", headp)) {
 3482|       |    /* One or more encodings. We check for chunked and/or a compression
 3483|       |       algorithm. */
 3484|       |    /*
 3485|       |     * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
 3486|       |     * means that the server will send a series of "chunks". Each
 3487|       |     * chunk starts with line with info (including size of the
 3488|       |     * coming block) (terminated with CRLF), then a block of data
 3489|       |     * with the previously mentioned size. There can be any amount
 3490|       |     * of chunks, and a chunk-data set to zero signals the
 3491|       |     * end-of-chunks. */
 3492|       |
 3493|    548|    result = Curl_build_unencoding_stack(data,
 3494|    548|                                         headp + strlen("Transfer-Encoding:"),
 3495|    548|                                         TRUE);
 3496|    548|    if(result)
 3497|      0|      return result;
 3498|    548|    if(!k->chunk) {
 3499|       |      /* if this isn't chunked, only close can signal the end of this transfer
 3500|       |         as Content-Length is said not to be trusted for transfer-encoding! */
 3501|    548|      connclose(conn, "HTTP/1.1 transfer-encoding without chunks");
 3502|    548|      k->ignore_cl = TRUE;
 3503|    548|    }
 3504|    548|  }
 3505|  15.7k|  else if(!k->http_bodyless && checkprefix("Content-Encoding:", headp) &&
 3506|  15.7k|          data->set.str[STRING_ENCODING]) {
 3507|       |    /*
 3508|       |     * Process Content-Encoding. Look for the values: identity,
 3509|       |     * gzip, deflate, compress, x-gzip and x-compress. x-gzip and
 3510|       |     * x-compress are the same as gzip and compress. (Sec 3.5 RFC
 3511|       |     * 2616). zlib cannot handle compress.  However, errors are
 3512|       |     * handled further down when the response body is processed
 3513|       |     */
 3514|     93|    result = Curl_build_unencoding_stack(data,
 3515|     93|                                         headp + strlen("Content-Encoding:"),
 3516|     93|                                         FALSE);
 3517|     93|    if(result)
 3518|      0|      return result;
 3519|     93|  }
 3520|  15.6k|  else if(checkprefix("Retry-After:", headp)) {
 3521|       |    /* Retry-After = HTTP-date / delay-seconds */
 3522|      0|    curl_off_t retry_after = 0; /* zero for unknown or "now" */
 3523|      0|    time_t date = Curl_getdate_capped(headp + strlen("Retry-After:"));
 3524|      0|    if(-1 == date) {
 3525|       |      /* not a date, try it as a decimal number */
 3526|      0|      (void)curlx_strtoofft(headp + strlen("Retry-After:"),
 3527|      0|                            NULL, 10, &retry_after);
 3528|      0|    }
 3529|      0|    else
 3530|       |      /* convert date to number of seconds into the future */
 3531|      0|      retry_after = date - time(NULL);
 3532|      0|    data->info.retry_after = retry_after; /* store it */
 3533|      0|  }
 3534|  15.6k|  else if(!k->http_bodyless && checkprefix("Content-Range:", headp)) {
 3535|       |    /* Content-Range: bytes [num]-
 3536|       |       Content-Range: bytes: [num]-
 3537|       |       Content-Range: [num]-
 3538|       |       Content-Range: [asterisk]/[total]
 3539|       |
 3540|       |       The second format was added since Sun's webserver
 3541|       |       JavaWebServer/1.1.1 obviously sends the header this way!
 3542|       |       The third added since some servers use that!
 3543|       |       The forth means the requested range was unsatisfied.
 3544|       |    */
 3545|       |
 3546|    190|    char *ptr = headp + strlen("Content-Range:");
 3547|       |
 3548|       |    /* Move forward until first digit or asterisk */
 3549|  1.58k|    while(*ptr && !ISDIGIT(*ptr) && *ptr != '*')
 3550|  1.39k|      ptr++;
 3551|       |
 3552|       |    /* if it truly stopped on a digit */
 3553|    190|    if(ISDIGIT(*ptr)) {
 3554|    158|      if(!curlx_strtoofft(ptr, NULL, 10, &k->offset)) {
 3555|    121|        if(data->state.resume_from == k->offset)
 3556|       |          /* we asked for a resume and we got it */
 3557|     83|          k->content_range = TRUE;
 3558|    121|      }
 3559|    158|    }
 3560|     32|    else
 3561|     32|      data->state.resume_from = 0; /* get everything */
 3562|    190|  }
 3563|  15.4k|#if !defined(CURL_DISABLE_COOKIES)
 3564|  15.4k|  else if(data->cookies && data->state.cookie_engine &&
 3565|  15.4k|          checkprefix("Set-Cookie:", headp)) {
 3566|       |    /* If there is a custom-set Host: name, use it here, or else use real peer
 3567|       |       host name. */
 3568|  7.82k|    const char *host = data->state.aptr.cookiehost?
 3569|  7.82k|      data->state.aptr.cookiehost:conn->host.name;
 3570|  7.82k|    const bool secure_context =
 3571|  7.82k|      conn->handler->protocol&CURLPROTO_HTTPS ||
 3572|  7.82k|      strcasecompare("localhost", host) ||
 3573|  7.82k|      !strcmp(host, "127.0.0.1") ||
 3574|  7.82k|      !strcmp(host, "[::1]") ? TRUE : FALSE;
 3575|       |
 3576|  7.82k|    Curl_share_lock(data, CURL_LOCK_DATA_COOKIE,
 3577|  7.82k|                    CURL_LOCK_ACCESS_SINGLE);
 3578|  7.82k|    Curl_cookie_add(data, data->cookies, TRUE, FALSE,
 3579|  7.82k|                    headp + strlen("Set-Cookie:"), host,
 3580|  7.82k|                    data->state.up.path, secure_context);
 3581|  7.82k|    Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
 3582|  7.82k|  }
 3583|  7.62k|#endif
 3584|  7.62k|  else if(!k->http_bodyless && checkprefix("Last-Modified:", headp) &&
 3585|  7.62k|          (data->set.timecondition || data->set.get_filetime) ) {
 3586|      0|    k->timeofdoc = Curl_getdate_capped(headp + strlen("Last-Modified:"));
 3587|      0|    if(data->set.get_filetime)
 3588|      0|      data->info.filetime = k->timeofdoc;
 3589|      0|  }
 3590|  7.62k|  else if((checkprefix("WWW-Authenticate:", headp) &&
 3591|  7.62k|           (401 == k->httpcode)) ||
 3592|  7.62k|          (checkprefix("Proxy-authenticate:", headp) &&
 3593|  7.45k|           (407 == k->httpcode))) {
 3594|       |
 3595|    171|    bool proxy = (k->httpcode == 407) ? TRUE : FALSE;
 3596|    171|    char *auth = Curl_copy_header_value(headp);
 3597|    171|    if(!auth)
 3598|      0|      return CURLE_OUT_OF_MEMORY;
 3599|       |
 3600|    171|    result = Curl_http_input_auth(data, proxy, auth);
 3601|       |
 3602|    171|    free(auth);
 3603|       |
 3604|    171|    if(result)
 3605|      0|      return result;
 3606|    171|  }
 3607|       |#ifdef USE_SPNEGO
 3608|       |  else if(checkprefix("Persistent-Auth:", headp)) {
 3609|       |    struct negotiatedata *negdata = &conn->negotiate;
 3610|       |    struct auth *authp = &data->state.authhost;
 3611|       |    if(authp->picked == CURLAUTH_NEGOTIATE) {
 3612|       |      char *persistentauth = Curl_copy_header_value(headp);
 3613|       |      if(!persistentauth)
 3614|       |        return CURLE_OUT_OF_MEMORY;
 3615|       |      negdata->noauthpersist = checkprefix("false", persistentauth)?
 3616|       |        TRUE:FALSE;
 3617|       |      negdata->havenoauthpersist = TRUE;
 3618|       |      infof(data, "Negotiate: noauthpersist -> %d, header part: %s",
 3619|       |            negdata->noauthpersist, persistentauth);
 3620|       |      free(persistentauth);
 3621|       |    }
 3622|       |  }
 3623|       |#endif
 3624|  7.45k|  else if((k->httpcode >= 300 && k->httpcode < 400) &&
 3625|  7.45k|          checkprefix("Location:", headp) &&
 3626|  7.45k|          !data->req.location) {
 3627|       |    /* this is the URL that the server advises us to use instead */
 3628|    122|    char *location = Curl_copy_header_value(headp);
 3629|    122|    if(!location)
 3630|      0|      return CURLE_OUT_OF_MEMORY;
 3631|    122|    if(!*location)
 3632|       |      /* ignore empty data */
 3633|     10|      free(location);
 3634|    112|    else {
 3635|    112|      data->req.location = location;
 3636|       |
 3637|    112|      if(data->set.http_follow_location) {
 3638|     62|        DEBUGASSERT(!data->req.newurl);
 3639|     62|        data->req.newurl = strdup(data->req.location); /* clone */
 3640|     62|        if(!data->req.newurl)
 3641|      0|          return CURLE_OUT_OF_MEMORY;
 3642|       |
 3643|       |        /* some cases of POST and PUT etc needs to rewind the data
 3644|       |           stream at this point */
 3645|     62|        result = http_perhapsrewind(data, conn);
 3646|     62|        if(result)
 3647|      0|          return result;
 3648|     62|      }
 3649|    112|    }
 3650|    122|  }
 3651|       |
 3652|  7.33k|#ifndef CURL_DISABLE_HSTS
 3653|       |  /* If enabled, the header is incoming and this is over HTTPS */
 3654|  7.33k|  else if(data->hsts && checkprefix("Strict-Transport-Security:", headp) &&
 3655|  7.33k|          (conn->handler->flags & PROTOPT_SSL)) {
 3656|      0|    CURLcode check =
 3657|      0|      Curl_hsts_parse(data->hsts, data->state.up.hostname,
 3658|      0|                      headp + strlen("Strict-Transport-Security:"));
 3659|      0|    if(check)
 3660|      0|      infof(data, "Illegal STS header skipped");
 3661|      0|#ifdef DEBUGBUILD
 3662|      0|    else
 3663|      0|      infof(data, "Parsed STS header fine (%zu entries)",
 3664|      0|            data->hsts->list.size);
 3665|      0|#endif
 3666|      0|  }
 3667|  7.33k|#endif
 3668|  7.33k|#ifndef CURL_DISABLE_ALTSVC
 3669|       |  /* If enabled, the header is incoming and this is over HTTPS */
 3670|  7.33k|  else if(data->asi && checkprefix("Alt-Svc:", headp) &&
 3671|  7.33k|          ((conn->handler->flags & PROTOPT_SSL) ||
 3672|      0|#ifdef CURLDEBUG
 3673|       |           /* allow debug builds to circumvent the HTTPS restriction */
 3674|      0|           getenv("CURL_ALTSVC_HTTP")
 3675|       |#else
 3676|       |           0
 3677|       |#endif
 3678|      0|            )) {
 3679|       |    /* the ALPN of the current request */
 3680|      0|    enum alpnid id = (conn->httpversion == 20) ? ALPN_h2 : ALPN_h1;
 3681|      0|    result = Curl_altsvc_parse(data, data->asi,
 3682|      0|                               headp + strlen("Alt-Svc:"),
 3683|      0|                               id, conn->host.name,
 3684|      0|                               curlx_uitous(conn->remote_port));
 3685|      0|    if(result)
 3686|      0|      return result;
 3687|      0|  }
 3688|  7.33k|#endif
 3689|  7.33k|  else if(conn->handler->protocol & CURLPROTO_RTSP) {
 3690|    447|    result = Curl_rtsp_parseheader(data, headp);
 3691|    447|    if(result)
 3692|      1|      return result;
 3693|    447|  }
 3694|  18.6k|  return CURLE_OK;
 3695|  18.6k|}
Curl_http_statusline:
 3704|    816|{
 3705|    816|  struct SingleRequest *k = &data->req;
 3706|    816|  data->info.httpcode = k->httpcode;
 3707|       |
 3708|    816|  data->info.httpversion = conn->httpversion;
 3709|    816|  if(!data->state.httpversion ||
 3710|    816|     data->state.httpversion > conn->httpversion)
 3711|       |    /* store the lowest server version we encounter */
 3712|    783|    data->state.httpversion = conn->httpversion;
 3713|       |
 3714|       |  /*
 3715|       |   * This code executes as part of processing the header.  As a
 3716|       |   * result, it's not totally clear how to interpret the
 3717|       |   * response code yet as that depends on what other headers may
 3718|       |   * be present.  401 and 407 may be errors, but may be OK
 3719|       |   * depending on how authentication is working.  Other codes
 3720|       |   * are definitely errors, so give up here.
 3721|       |   */
 3722|    816|  if(data->state.resume_from && data->state.httpreq == HTTPREQ_GET &&
 3723|    816|     k->httpcode == 416) {
 3724|       |    /* "Requested Range Not Satisfiable", just proceed and
 3725|       |       pretend this is no error */
 3726|      0|    k->ignorebody = TRUE; /* Avoid appending error msg to good data. */
 3727|      0|  }
 3728|       |
 3729|    816|  if(conn->httpversion == 10) {
 3730|       |    /* Default action for HTTP/1.0 must be to close, unless
 3731|       |       we get one of those fancy headers that tell us the
 3732|       |       server keeps it open for us! */
 3733|     64|    infof(data, "HTTP 1.0, assume close after body");
 3734|     64|    connclose(conn, "HTTP/1.0 close after body");
 3735|     64|  }
 3736|    752|  else if(conn->httpversion == 20 ||
 3737|    752|          (k->upgr101 == UPGR101_REQUESTED && k->httpcode == 101)) {
 3738|     48|    DEBUGF(infof(data, "HTTP/2 found, allow multiplexing"));
 3739|       |    /* HTTP/2 cannot avoid multiplexing since it is a core functionality
 3740|       |       of the protocol */
 3741|     48|    conn->bundle->multiuse = BUNDLE_MULTIPLEX;
 3742|     48|  }
 3743|    704|  else if(conn->httpversion >= 11 &&
 3744|    704|          !conn->bits.close) {
 3745|       |    /* If HTTP version is >= 1.1 and connection is persistent */
 3746|    704|    DEBUGF(infof(data,
 3747|    704|                 "HTTP 1.1 or later with persistent connection"));
 3748|    704|  }
 3749|       |
 3750|    816|  k->http_bodyless = k->httpcode >= 100 && k->httpcode < 200;
 3751|    816|  switch(k->httpcode) {
 3752|     29|  case 304:
 3753|       |    /* (quote from RFC2616, section 10.3.5): The 304 response
 3754|       |     * MUST NOT contain a message-body, and thus is always
 3755|       |     * terminated by the first empty line after the header
 3756|       |     * fields.  */
 3757|     29|    if(data->set.timecondition)
 3758|      0|      data->info.timecond = TRUE;
 3759|       |    /* FALLTHROUGH */
 3760|     43|  case 204:
 3761|       |    /* (quote from RFC2616, section 10.2.5): The server has
 3762|       |     * fulfilled the request but does not need to return an
 3763|       |     * entity-body ... The 204 response MUST NOT include a
 3764|       |     * message-body, and thus is always terminated by the first
 3765|       |     * empty line after the header fields. */
 3766|     43|    k->size = 0;
 3767|     43|    k->maxdownload = 0;
 3768|     43|    k->http_bodyless = TRUE;
 3769|     43|    break;
 3770|    773|  default:
 3771|    773|    break;
 3772|    816|  }
 3773|    816|  return CURLE_OK;
 3774|    816|}
Curl_http_size:
 3782|    405|{
 3783|    405|  struct SingleRequest *k = &data->req;
 3784|    405|  if(data->req.ignore_cl || k->chunk) {
 3785|     12|    k->size = k->maxdownload = -1;
 3786|     12|  }
 3787|    393|  else if(k->size != -1) {
 3788|    220|    if(data->set.max_filesize &&
 3789|    220|       k->size > data->set.max_filesize) {
 3790|      0|      failf(data, "Maximum file size exceeded");
 3791|      0|      return CURLE_FILESIZE_EXCEEDED;
 3792|      0|    }
 3793|    220|    Curl_pgrsSetDownloadSize(data, k->size);
 3794|    220|    k->maxdownload = k->size;
 3795|    220|  }
 3796|    405|  return CURLE_OK;
 3797|    405|}
Curl_http_readwrite_headers:
 3806|  3.63k|{
 3807|  3.63k|  CURLcode result;
 3808|  3.63k|  struct SingleRequest *k = &data->req;
 3809|  3.63k|  ssize_t onread = *nread;
 3810|  3.63k|  char *ostr = k->str;
 3811|  3.63k|  char *headp;
 3812|  3.63k|  char *str_start;
 3813|  3.63k|  char *end_ptr;
 3814|       |
 3815|       |  /* header line within buffer loop */
 3816|  22.1k|  do {
 3817|  22.1k|    size_t rest_length;
 3818|  22.1k|    size_t full_length;
 3819|  22.1k|    int writetype;
 3820|       |
 3821|       |    /* str_start is start of line within buf */
 3822|  22.1k|    str_start = k->str;
 3823|       |
 3824|       |    /* data is in network encoding so use 0x0a instead of '\n' */
 3825|  22.1k|    end_ptr = memchr(str_start, 0x0a, *nread);
 3826|       |
 3827|  22.1k|    if(!end_ptr) {
 3828|       |      /* Not a complete header line within buffer, append the data to
 3829|       |         the end of the headerbuff. */
 3830|  2.94k|      result = Curl_dyn_addn(&data->state.headerb, str_start, *nread);
 3831|  2.94k|      if(result)
 3832|      0|        return result;
 3833|       |
 3834|  2.94k|      if(!k->headerline) {
 3835|       |        /* check if this looks like a protocol header */
 3836|    564|        statusline st =
 3837|    564|          checkprotoprefix(data, conn,
 3838|    564|                           Curl_dyn_ptr(&data->state.headerb),
 3839|    564|                           Curl_dyn_len(&data->state.headerb));
 3840|       |
 3841|    564|        if(st == STATUS_BAD) {
 3842|       |          /* this is not the beginning of a protocol first header line */
 3843|     22|          k->header = FALSE;
 3844|     22|          k->badheader = HEADER_ALLBAD;
 3845|     22|          streamclose(conn, "bad HTTP: No end-of-message indicator");
 3846|     22|          if(!data->set.http09_allowed) {
 3847|     22|            failf(data, "Received HTTP/0.9 when not allowed");
 3848|     22|            return CURLE_UNSUPPORTED_PROTOCOL;
 3849|     22|          }
 3850|      0|          break;
 3851|     22|        }
 3852|    564|      }
 3853|       |
 3854|  2.92k|      break; /* read more and try again */
 3855|  2.94k|    }
 3856|       |
 3857|       |    /* decrease the size of the remaining (supposed) header line */
 3858|  19.1k|    rest_length = (end_ptr - k->str) + 1;
 3859|  19.1k|    *nread -= (ssize_t)rest_length;
 3860|       |
 3861|  19.1k|    k->str = end_ptr + 1; /* move past new line */
 3862|       |
 3863|  19.1k|    full_length = k->str - str_start;
 3864|       |
 3865|  19.1k|    result = Curl_dyn_addn(&data->state.headerb, str_start, full_length);
 3866|  19.1k|    if(result)
 3867|      0|      return result;
 3868|       |
 3869|       |    /****
 3870|       |     * We now have a FULL header line in 'headerb'.
 3871|       |     *****/
 3872|       |
 3873|  19.1k|    if(!k->headerline) {
 3874|       |      /* the first read header */
 3875|    896|      statusline st = checkprotoprefix(data, conn,
 3876|    896|                                       Curl_dyn_ptr(&data->state.headerb),
 3877|    896|                                       Curl_dyn_len(&data->state.headerb));
 3878|    896|      if(st == STATUS_BAD) {
 3879|     30|        streamclose(conn, "bad HTTP: No end-of-message indicator");
 3880|       |        /* this is not the beginning of a protocol first header line */
 3881|     30|        if(!data->set.http09_allowed) {
 3882|     30|          failf(data, "Received HTTP/0.9 when not allowed");
 3883|     30|          return CURLE_UNSUPPORTED_PROTOCOL;
 3884|     30|        }
 3885|      0|        k->header = FALSE;
 3886|      0|        if(*nread)
 3887|       |          /* since there's more, this is a partial bad header */
 3888|      0|          k->badheader = HEADER_PARTHEADER;
 3889|      0|        else {
 3890|       |          /* this was all we read so it's all a bad header */
 3891|      0|          k->badheader = HEADER_ALLBAD;
 3892|      0|          *nread = onread;
 3893|      0|          k->str = ostr;
 3894|      0|          return CURLE_OK;
 3895|      0|        }
 3896|      0|        break;
 3897|      0|      }
 3898|    896|    }
 3899|       |
 3900|       |    /* headers are in network encoding so use 0x0a and 0x0d instead of '\n'
 3901|       |       and '\r' */
 3902|  19.1k|    headp = Curl_dyn_ptr(&data->state.headerb);
 3903|  19.1k|    if((0x0a == *headp) || (0x0d == *headp)) {
 3904|    451|      size_t headerlen;
 3905|       |      /* Zero-length header line means end of headers! */
 3906|       |
 3907|       |#ifdef CURL_DOES_CONVERSIONS
 3908|       |      if(0x0d == *headp) {
 3909|       |        *headp = '\r'; /* replace with CR in host encoding */
 3910|       |        headp++;       /* pass the CR byte */
 3911|       |      }
 3912|       |      if(0x0a == *headp) {
 3913|       |        *headp = '\n'; /* replace with LF in host encoding */
 3914|       |        headp++;       /* pass the LF byte */
 3915|       |      }
 3916|       |#else
 3917|    451|      if('\r' == *headp)
 3918|    372|        headp++; /* pass the \r byte */
 3919|    451|      if('\n' == *headp)
 3920|    393|        headp++; /* pass the \n byte */
 3921|    451|#endif /* CURL_DOES_CONVERSIONS */
 3922|       |
 3923|    451|      if(100 <= k->httpcode && 199 >= k->httpcode) {
 3924|       |        /* "A user agent MAY ignore unexpected 1xx status responses." */
 3925|     47|        switch(k->httpcode) {
 3926|     39|        case 100:
 3927|       |          /*
 3928|       |           * We have made a HTTP PUT or POST and this is 1.1-lingo
 3929|       |           * that tells us that the server is OK with this and ready
 3930|       |           * to receive the data.
 3931|       |           * However, we'll get more headers now so we must get
 3932|       |           * back into the header-parsing state!
 3933|       |           */
 3934|     39|          k->header = TRUE;
 3935|     39|          k->headerline = 0; /* restart the header line counter */
 3936|       |
 3937|       |          /* if we did wait for this do enable write now! */
 3938|     39|          if(k->exp100 > EXP100_SEND_DATA) {
 3939|      3|            k->exp100 = EXP100_SEND_DATA;
 3940|      3|            k->keepon |= KEEP_SEND;
 3941|      3|            Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 3942|      3|          }
 3943|     39|          break;
 3944|      1|        case 101:
 3945|       |          /* Switching Protocols */
 3946|      1|          if(k->upgr101 == UPGR101_REQUESTED) {
 3947|       |            /* Switching to HTTP/2 */
 3948|      0|            infof(data, "Received 101");
 3949|      0|            k->upgr101 = UPGR101_RECEIVED;
 3950|       |
 3951|       |            /* we'll get more headers (HTTP/2 response) */
 3952|      0|            k->header = TRUE;
 3953|      0|            k->headerline = 0; /* restart the header line counter */
 3954|       |
 3955|       |            /* switch to http2 now. The bytes after response headers
 3956|       |               are also processed here, otherwise they are lost. */
 3957|      0|            result = Curl_http2_switched(data, k->str, *nread);
 3958|      0|            if(result)
 3959|      0|              return result;
 3960|      0|            *nread = 0;
 3961|      0|          }
 3962|      1|          else {
 3963|       |            /* Switching to another protocol (e.g. WebSocket) */
 3964|      1|            k->header = FALSE; /* no more header to parse! */
 3965|      1|          }
 3966|      1|          break;
 3967|      7|        default:
 3968|       |          /* the status code 1xx indicates a provisional response, so
 3969|       |             we'll get another set of headers */
 3970|      7|          k->header = TRUE;
 3971|      7|          k->headerline = 0; /* restart the header line counter */
 3972|      7|          break;
 3973|     47|        }
 3974|     47|      }
 3975|    404|      else {
 3976|    404|        k->header = FALSE; /* no more header to parse! */
 3977|       |
 3978|    404|        if((k->size == -1) && !k->chunk && !conn->bits.close &&
 3979|    404|           (conn->httpversion == 11) &&
 3980|    404|           !(conn->handler->protocol & CURLPROTO_RTSP) &&
 3981|    404|           data->state.httpreq != HTTPREQ_HEAD) {
 3982|       |          /* On HTTP 1.1, when connection is not to get closed, but no
 3983|       |             Content-Length nor Transfer-Encoding chunked have been
 3984|       |             received, according to RFC2616 section 4.4 point 5, we
 3985|       |             assume that the server will close the connection to
 3986|       |             signal the end of the document. */
 3987|    151|          infof(data, "no chunk, no close, no size. Assume close to "
 3988|    151|                "signal end");
 3989|    151|          streamclose(conn, "HTTP: No end-of-message indicator");
 3990|    151|        }
 3991|    404|      }
 3992|       |
 3993|    451|      if(!k->header) {
 3994|    405|        result = Curl_http_size(data);
 3995|    405|        if(result)
 3996|      0|          return result;
 3997|    405|      }
 3998|       |
 3999|       |      /* At this point we have some idea about the fate of the connection.
 4000|       |         If we are closing the connection it may result auth failure. */
 4001|    451|#if defined(USE_NTLM)
 4002|    451|      if(conn->bits.close &&
 4003|    451|         (((data->req.httpcode == 401) &&
 4004|    199|           (conn->http_ntlm_state == NTLMSTATE_TYPE2)) ||
 4005|    199|          ((data->req.httpcode == 407) &&
 4006|    199|           (conn->proxy_ntlm_state == NTLMSTATE_TYPE2)))) {
 4007|      0|        infof(data, "Connection closure while negotiating auth (HTTP 1.0?)");
 4008|      0|        data->state.authproblem = TRUE;
 4009|      0|      }
 4010|    451|#endif
 4011|       |#if defined(USE_SPNEGO)
 4012|       |      if(conn->bits.close &&
 4013|       |        (((data->req.httpcode == 401) &&
 4014|       |          (conn->http_negotiate_state == GSS_AUTHRECV)) ||
 4015|       |         ((data->req.httpcode == 407) &&
 4016|       |          (conn->proxy_negotiate_state == GSS_AUTHRECV)))) {
 4017|       |        infof(data, "Connection closure while negotiating auth (HTTP 1.0?)");
 4018|       |        data->state.authproblem = TRUE;
 4019|       |      }
 4020|       |      if((conn->http_negotiate_state == GSS_AUTHDONE) &&
 4021|       |         (data->req.httpcode != 401)) {
 4022|       |        conn->http_negotiate_state = GSS_AUTHSUCC;
 4023|       |      }
 4024|       |      if((conn->proxy_negotiate_state == GSS_AUTHDONE) &&
 4025|       |         (data->req.httpcode != 407)) {
 4026|       |        conn->proxy_negotiate_state = GSS_AUTHSUCC;
 4027|       |      }
 4028|       |#endif
 4029|       |
 4030|       |      /* now, only output this if the header AND body are requested:
 4031|       |       */
 4032|    451|      writetype = CLIENTWRITE_HEADER;
 4033|    451|      if(data->set.include_header)
 4034|      4|        writetype |= CLIENTWRITE_BODY;
 4035|       |
 4036|    451|      headerlen = Curl_dyn_len(&data->state.headerb);
 4037|    451|      result = Curl_client_write(data, writetype,
 4038|    451|                                 Curl_dyn_ptr(&data->state.headerb),
 4039|    451|                                 headerlen);
 4040|    451|      if(result)
 4041|      0|        return result;
 4042|       |
 4043|    451|      data->info.header_size += (long)headerlen;
 4044|    451|      data->req.headerbytecount += (long)headerlen;
 4045|       |
 4046|       |      /*
 4047|       |       * When all the headers have been parsed, see if we should give
 4048|       |       * up and return an error.
 4049|       |       */
 4050|    451|      if(http_should_fail(data)) {
 4051|      0|        failf(data, "The requested URL returned error: %d",
 4052|      0|              k->httpcode);
 4053|      0|        return CURLE_HTTP_RETURNED_ERROR;
 4054|      0|      }
 4055|       |
 4056|    451|      data->req.deductheadercount =
 4057|    451|        (100 <= k->httpcode && 199 >= k->httpcode)?data->req.headerbytecount:0;
 4058|       |
 4059|       |      /* Curl_http_auth_act() checks what authentication methods
 4060|       |       * that are available and decides which one (if any) to
 4061|       |       * use. It will set 'newurl' if an auth method was picked. */
 4062|    451|      result = Curl_http_auth_act(data);
 4063|       |
 4064|    451|      if(result)
 4065|      4|        return result;
 4066|       |
 4067|    447|      if(k->httpcode >= 300) {
 4068|    159|        if((!conn->bits.authneg) && !conn->bits.close &&
 4069|    159|           !conn->bits.rewindaftersend) {
 4070|       |          /*
 4071|       |           * General treatment of errors when about to send data. Including :
 4072|       |           * "417 Expectation Failed", while waiting for 100-continue.
 4073|       |           *
 4074|       |           * The check for close above is done simply because of something
 4075|       |           * else has already deemed the connection to get closed then
 4076|       |           * something else should've considered the big picture and we
 4077|       |           * avoid this check.
 4078|       |           *
 4079|       |           * rewindaftersend indicates that something has told libcurl to
 4080|       |           * continue sending even if it gets discarded
 4081|       |           */
 4082|       |
 4083|     75|          switch(data->state.httpreq) {
 4084|      1|          case HTTPREQ_PUT:
 4085|      2|          case HTTPREQ_POST:
 4086|      2|          case HTTPREQ_POST_FORM:
 4087|      9|          case HTTPREQ_POST_MIME:
 4088|       |            /* We got an error response. If this happened before the whole
 4089|       |             * request body has been sent we stop sending and mark the
 4090|       |             * connection for closure after we've read the entire response.
 4091|       |             */
 4092|      9|            Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 4093|      9|            if(!k->upload_done) {
 4094|      2|              if((k->httpcode == 417) && data->state.expect100header) {
 4095|       |                /* 417 Expectation Failed - try again without the Expect
 4096|       |                   header */
 4097|      0|                infof(data, "Got 417 while waiting for a 100");
 4098|      0|                data->state.disableexpect = TRUE;
 4099|      0|                DEBUGASSERT(!data->req.newurl);
 4100|      0|                data->req.newurl = strdup(data->state.url);
 4101|      0|                Curl_done_sending(data, k);
 4102|      0|              }
 4103|      2|              else if(data->set.http_keep_sending_on_error) {
 4104|      0|                infof(data, "HTTP error before end of send, keep sending");
 4105|      0|                if(k->exp100 > EXP100_SEND_DATA) {
 4106|      0|                  k->exp100 = EXP100_SEND_DATA;
 4107|      0|                  k->keepon |= KEEP_SEND;
 4108|      0|                }
 4109|      0|              }
 4110|      2|              else {
 4111|      2|                infof(data, "HTTP error before end of send, stop sending");
 4112|      2|                streamclose(conn, "Stop sending data before everything sent");
 4113|      2|                result = Curl_done_sending(data, k);
 4114|      2|                if(result)
 4115|      0|                  return result;
 4116|      2|                k->upload_done = TRUE;
 4117|      2|                if(data->state.expect100header)
 4118|      1|                  k->exp100 = EXP100_FAILED;
 4119|      2|              }
 4120|      2|            }
 4121|      9|            break;
 4122|       |
 4123|     66|          default: /* default label present to avoid compiler warnings */
 4124|     66|            break;
 4125|     75|          }
 4126|     75|        }
 4127|       |
 4128|    159|        if(conn->bits.rewindaftersend) {
 4129|       |          /* We rewind after a complete send, so thus we continue
 4130|       |             sending now */
 4131|      0|          infof(data, "Keep sending data to get tossed away!");
 4132|      0|          k->keepon |= KEEP_SEND;
 4133|      0|        }
 4134|    159|      }
 4135|       |
 4136|    447|      if(!k->header) {
 4137|       |        /*
 4138|       |         * really end-of-headers.
 4139|       |         *
 4140|       |         * If we requested a "no body", this is a good time to get
 4141|       |         * out and return home.
 4142|       |         */
 4143|    401|        if(data->set.opt_no_body)
 4144|      7|          *stop_reading = TRUE;
 4145|    394|#ifndef CURL_DISABLE_RTSP
 4146|    394|        else if((conn->handler->protocol & CURLPROTO_RTSP) &&
 4147|    394|                (data->set.rtspreq == RTSPREQ_DESCRIBE) &&
 4148|    394|                (k->size <= -1))
 4149|       |          /* Respect section 4.4 of rfc2326: If the Content-Length header is
 4150|       |             absent, a length 0 must be assumed.  It will prevent libcurl from
 4151|       |             hanging on DESCRIBE request that got refused for whatever
 4152|       |             reason */
 4153|      0|          *stop_reading = TRUE;
 4154|    401|#endif
 4155|       |
 4156|       |        /* If max download size is *zero* (nothing) we already have
 4157|       |           nothing and can safely return ok now!  But for HTTP/2, we'd
 4158|       |           like to call http2_handle_stream_close to properly close a
 4159|       |           stream.  In order to do this, we keep reading until we
 4160|       |           close the stream. */
 4161|    401|        if(0 == k->maxdownload
 4162|    401|#if defined(USE_NGHTTP2)
 4163|    401|           && !((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
 4164|     47|                conn->httpversion == 20)
 4165|    401|#endif
 4166|    401|           )
 4167|     46|          *stop_reading = TRUE;
 4168|       |
 4169|    401|        if(*stop_reading) {
 4170|       |          /* we make sure that this socket isn't read more now */
 4171|     52|          k->keepon &= ~KEEP_RECV;
 4172|     52|        }
 4173|       |
 4174|    401|        Curl_debug(data, CURLINFO_HEADER_IN, str_start, headerlen);
 4175|    401|        break; /* exit header line loop */
 4176|    401|      }
 4177|       |
 4178|       |      /* We continue reading headers, reset the line-based header */
 4179|     46|      Curl_dyn_reset(&data->state.headerb);
 4180|     46|      continue;
 4181|    447|    }
 4182|       |
 4183|       |    /*
 4184|       |     * Checks for special headers coming up.
 4185|       |     */
 4186|       |
 4187|  18.6k|    if(!k->headerline++) {
 4188|       |      /* This is the first header, it MUST be the error code line
 4189|       |         or else we consider this to be the body right away! */
 4190|    866|      int httpversion_major;
 4191|    866|      int rtspversion_major;
 4192|    866|      int nc = 0;
 4193|       |#ifdef CURL_DOES_CONVERSIONS
 4194|       |#define HEADER1 scratch
 4195|       |#define SCRATCHSIZE 21
 4196|       |      CURLcode res;
 4197|       |      char scratch[SCRATCHSIZE + 1]; /* "HTTP/major.minor 123" */
 4198|       |      /* We can't really convert this yet because we don't know if it's the
 4199|       |         1st header line or the body.  So we do a partial conversion into a
 4200|       |         scratch area, leaving the data at 'headp' as-is.
 4201|       |      */
 4202|       |      strncpy(&scratch[0], headp, SCRATCHSIZE);
 4203|       |      scratch[SCRATCHSIZE] = 0; /* null terminate */
 4204|       |      res = Curl_convert_from_network(data,
 4205|       |                                      &scratch[0],
 4206|       |                                      SCRATCHSIZE);
 4207|       |      if(res)
 4208|       |        /* Curl_convert_from_network calls failf if unsuccessful */
 4209|       |        return res;
 4210|       |#else
 4211|    866|#define HEADER1 headp /* no conversion needed, just use headp */
 4212|    866|#endif /* CURL_DOES_CONVERSIONS */
 4213|       |
 4214|    866|      if(conn->handler->protocol & PROTO_FAMILY_HTTP) {
 4215|       |        /*
 4216|       |         * https://tools.ietf.org/html/rfc7230#section-3.1.2
 4217|       |         *
 4218|       |         * The response code is always a three-digit number in HTTP as the spec
 4219|       |         * says. We allow any three-digit number here, but we cannot make
 4220|       |         * guarantees on future behaviors since it isn't within the protocol.
 4221|       |         */
 4222|    784|        char separator;
 4223|    784|        char twoorthree[2];
 4224|    784|        int httpversion = 0;
 4225|    784|        char digit4 = 0;
 4226|    784|        nc = sscanf(HEADER1,
 4227|    784|                    " HTTP/%1d.%1d%c%3d%c",
 4228|    784|                    &httpversion_major,
 4229|    784|                    &httpversion,
 4230|    784|                    &separator,
 4231|    784|                    &k->httpcode,
 4232|    784|                    &digit4);
 4233|       |
 4234|    784|        if(nc == 1 && httpversion_major >= 2 &&
 4235|    784|           2 == sscanf(HEADER1, " HTTP/%1[23] %d", twoorthree, &k->httpcode)) {
 4236|     33|          conn->httpversion = 0;
 4237|     33|          nc = 4;
 4238|     33|          separator = ' ';
 4239|     33|        }
 4240|       |
 4241|       |        /* There can only be a 4th response code digit stored in 'digit4' if
 4242|       |           all the other fields were parsed and stored first, so nc is 5 when
 4243|       |           digit4 a digit.
 4244|       |
 4245|       |           The sscanf() line above will also allow zero-prefixed and negative
 4246|       |           numbers, so we check for that too here.
 4247|       |        */
 4248|    751|        else if(ISDIGIT(digit4) || (k->httpcode < 100)) {
 4249|     25|          failf(data, "Unsupported response code in HTTP response");
 4250|     25|          return CURLE_UNSUPPORTED_PROTOCOL;
 4251|     25|        }
 4252|       |
 4253|    759|        if((nc >= 4) && (' ' == separator)) {
 4254|    757|          httpversion += 10 * httpversion_major;
 4255|    757|          switch(httpversion) {
 4256|     63|          case 10:
 4257|    700|          case 11:
 4258|    700|#if defined(USE_NGHTTP2) || defined(USE_HYPER)
 4259|    748|          case 20:
 4260|    748|#endif
 4261|       |#if defined(ENABLE_QUIC)
 4262|       |          case 30:
 4263|       |#endif
 4264|    748|            conn->httpversion = (unsigned char)httpversion;
 4265|    748|            break;
 4266|      9|          default:
 4267|      9|            failf(data, "Unsupported HTTP version (%u.%d) in response",
 4268|      9|                  httpversion/10, httpversion%10);
 4269|      9|            return CURLE_UNSUPPORTED_PROTOCOL;
 4270|    757|          }
 4271|       |
 4272|    748|          if(k->upgr101 == UPGR101_RECEIVED) {
 4273|       |            /* supposedly upgraded to http2 now */
 4274|      0|            if(conn->httpversion != 20)
 4275|      0|              infof(data, "Lying server, not serving HTTP/2");
 4276|      0|          }
 4277|    748|          if(conn->httpversion < 20) {
 4278|    700|            conn->bundle->multiuse = BUNDLE_NO_MULTIUSE;
 4279|    700|            infof(data, "Mark bundle as not supporting multiuse");
 4280|    700|          }
 4281|    748|        }
 4282|      2|        else if(!nc) {
 4283|       |          /* this is the real world, not a Nirvana
 4284|       |             NCSA 1.5.x returns this crap when asked for HTTP/1.1
 4285|       |          */
 4286|      1|          nc = sscanf(HEADER1, " HTTP %3d", &k->httpcode);
 4287|      1|          conn->httpversion = 10;
 4288|       |
 4289|       |          /* If user has set option HTTP200ALIASES,
 4290|       |             compare header line against list of aliases
 4291|       |          */
 4292|      1|          if(!nc) {
 4293|      1|            statusline check =
 4294|      1|              checkhttpprefix(data,
 4295|      1|                              Curl_dyn_ptr(&data->state.headerb),
 4296|      1|                              Curl_dyn_len(&data->state.headerb));
 4297|      1|            if(check == STATUS_DONE) {
 4298|      1|              nc = 1;
 4299|      1|              k->httpcode = 200;
 4300|      1|              conn->httpversion = 10;
 4301|      1|            }
 4302|      1|          }
 4303|      1|        }
 4304|      1|        else {
 4305|      1|          failf(data, "Unsupported HTTP version in response");
 4306|      1|          return CURLE_UNSUPPORTED_PROTOCOL;
 4307|      1|        }
 4308|    759|      }
 4309|     82|      else if(conn->handler->protocol & CURLPROTO_RTSP) {
 4310|     82|        char separator;
 4311|     82|        int rtspversion;
 4312|     82|        nc = sscanf(HEADER1,
 4313|     82|                    " RTSP/%1d.%1d%c%3d",
 4314|     82|                    &rtspversion_major,
 4315|     82|                    &rtspversion,
 4316|     82|                    &separator,
 4317|     82|                    &k->httpcode);
 4318|     82|        if((nc == 4) && (' ' == separator)) {
 4319|     67|          conn->httpversion = 11; /* For us, RTSP acts like HTTP 1.1 */
 4320|     67|        }
 4321|     15|        else {
 4322|     15|          nc = 0;
 4323|     15|        }
 4324|     82|      }
 4325|       |
 4326|    831|      if(nc) {
 4327|    816|        result = Curl_http_statusline(data, conn);
 4328|    816|        if(result)
 4329|      0|          return result;
 4330|    816|      }
 4331|     15|      else {
 4332|     15|        k->header = FALSE;   /* this is not a header line */
 4333|     15|        break;
 4334|     15|      }
 4335|    831|    }
 4336|       |
 4337|  18.6k|    result = Curl_convert_from_network(data, headp, strlen(headp));
 4338|       |    /* Curl_convert_from_network calls failf if unsuccessful */
 4339|  18.6k|    if(result)
 4340|      0|      return result;
 4341|       |
 4342|  18.6k|    result = Curl_http_header(data, conn, headp);
 4343|  18.6k|    if(result)
 4344|     11|      return result;
 4345|       |
 4346|       |    /*
 4347|       |     * End of header-checks. Write them to the client.
 4348|       |     */
 4349|       |
 4350|  18.6k|    writetype = CLIENTWRITE_HEADER;
 4351|  18.6k|    if(data->set.include_header)
 4352|     15|      writetype |= CLIENTWRITE_BODY;
 4353|       |
 4354|  18.6k|    Curl_debug(data, CURLINFO_HEADER_IN, headp,
 4355|  18.6k|               Curl_dyn_len(&data->state.headerb));
 4356|       |
 4357|  18.6k|    result = Curl_client_write(data, writetype, headp,
 4358|  18.6k|                               Curl_dyn_len(&data->state.headerb));
 4359|  18.6k|    if(result)
 4360|      0|      return result;
 4361|       |
 4362|  18.6k|    data->info.header_size += Curl_dyn_len(&data->state.headerb);
 4363|  18.6k|    data->req.headerbytecount += Curl_dyn_len(&data->state.headerb);
 4364|       |
 4365|  18.6k|    Curl_dyn_reset(&data->state.headerb);
 4366|  18.6k|  }
 4367|  18.6k|  while(*k->str); /* header line within buffer */
 4368|       |
 4369|       |  /* We might have reached the end of the header part here, but
 4370|       |     there might be a non-header part left in the end of the read
 4371|       |     buffer. */
 4372|       |
 4373|  3.53k|  return CURLE_OK;
 4374|  3.63k|}
http.c:http_setup_conn:
  175|  1.12k|{
  176|       |  /* allocate the HTTP-specific struct for the Curl_easy, only to survive
  177|       |     during this request */
  178|  1.12k|  struct HTTP *http;
  179|  1.12k|  DEBUGASSERT(data->req.p.http == NULL);
  180|       |
  181|  1.12k|  http = calloc(1, sizeof(struct HTTP));
  182|  1.12k|  if(!http)
  183|      0|    return CURLE_OUT_OF_MEMORY;
  184|       |
  185|  1.12k|  Curl_mime_initpart(&http->form, data);
  186|  1.12k|  data->req.p.http = http;
  187|       |
  188|  1.12k|  if(data->state.httpwant == CURL_HTTP_VERSION_3) {
  189|      0|    if(conn->handler->flags & PROTOPT_SSL)
  190|       |      /* Only go HTTP/3 directly on HTTPS URLs. It needs a UDP socket and does
  191|       |         the QUIC dance. */
  192|      0|      conn->transport = TRNSPRT_QUIC;
  193|      0|    else {
  194|      0|      failf(data, "HTTP/3 requested for non-HTTPS URL");
  195|      0|      return CURLE_URL_MALFORMAT;
  196|      0|    }
  197|      0|  }
  198|  1.12k|  else {
  199|  1.12k|    if(!CONN_INUSE(conn))
  200|       |      /* if not already multi-using, setup connection details */
  201|  1.12k|      Curl_http2_setup_conn(conn);
  202|  1.12k|    Curl_http2_setup_req(data);
  203|  1.12k|  }
  204|  1.12k|  return CURLE_OK;
  205|  1.12k|}
http.c:pickoneauth:
  387|     63|{
  388|     63|  bool picked;
  389|       |  /* only deal with authentication we want */
  390|     63|  unsigned long avail = pick->avail & pick->want & mask;
  391|     63|  picked = TRUE;
  392|       |
  393|       |  /* The order of these checks is highly relevant, as this will be the order
  394|       |     of preference in case of the existence of multiple accepted types. */
  395|     63|  if(avail & CURLAUTH_NEGOTIATE)
  396|      0|    pick->picked = CURLAUTH_NEGOTIATE;
  397|     63|  else if(avail & CURLAUTH_BEARER)
  398|      0|    pick->picked = CURLAUTH_BEARER;
  399|     63|  else if(avail & CURLAUTH_DIGEST)
  400|     55|    pick->picked = CURLAUTH_DIGEST;
  401|      8|  else if(avail & CURLAUTH_NTLM)
  402|      0|    pick->picked = CURLAUTH_NTLM;
  403|      8|  else if(avail & CURLAUTH_NTLM_WB)
  404|      0|    pick->picked = CURLAUTH_NTLM_WB;
  405|      8|  else if(avail & CURLAUTH_BASIC)
  406|      0|    pick->picked = CURLAUTH_BASIC;
  407|      8|  else if(avail & CURLAUTH_AWS_SIGV4)
  408|      0|    pick->picked = CURLAUTH_AWS_SIGV4;
  409|      8|  else {
  410|      8|    pick->picked = CURLAUTH_PICKNONE; /* we select to use nothing */
  411|      8|    picked = FALSE;
  412|      8|  }
  413|     63|  pick->avail = CURLAUTH_NONE; /* clear it here */
  414|       |
  415|     63|  return picked;
  416|     63|}
http.c:http_perhapsrewind:
  443|     82|{
  444|     82|  struct HTTP *http = data->req.p.http;
  445|     82|  curl_off_t bytessent;
  446|     82|  curl_off_t expectsend = -1; /* default is unknown */
  447|       |
  448|     82|  if(!http)
  449|       |    /* If this is still NULL, we have not reach very far and we can safely
  450|       |       skip this rewinding stuff */
  451|      0|    return CURLE_OK;
  452|       |
  453|     82|  switch(data->state.httpreq) {
  454|     57|  case HTTPREQ_GET:
  455|     60|  case HTTPREQ_HEAD:
  456|     60|    return CURLE_OK;
  457|     22|  default:
  458|     22|    break;
  459|     82|  }
  460|       |
  461|     22|  bytessent = data->req.writebytecount;
  462|       |
  463|     22|  if(conn->bits.authneg) {
  464|       |    /* This is a state where we are known to be negotiating and we don't send
  465|       |       any data then. */
  466|      3|    expectsend = 0;
  467|      3|  }
  468|     19|  else if(!conn->bits.protoconnstart) {
  469|       |    /* HTTP CONNECT in progress: there is no body */
  470|      0|    expectsend = 0;
  471|      0|  }
  472|     19|  else {
  473|       |    /* figure out how much data we are expected to send */
  474|     19|    switch(data->state.httpreq) {
  475|      4|    case HTTPREQ_POST:
  476|      6|    case HTTPREQ_PUT:
  477|      6|      if(data->state.infilesize != -1)
  478|      6|        expectsend = data->state.infilesize;
  479|      6|      break;
  480|      0|    case HTTPREQ_POST_FORM:
  481|     13|    case HTTPREQ_POST_MIME:
  482|     13|      expectsend = http->postsize;
  483|     13|      break;
  484|      0|    default:
  485|      0|      break;
  486|     19|    }
  487|     19|  }
  488|       |
  489|     22|  conn->bits.rewindaftersend = FALSE; /* default */
  490|       |
  491|     22|  if((expectsend == -1) || (expectsend > bytessent)) {
  492|      5|#if defined(USE_NTLM)
  493|       |    /* There is still data left to send */
  494|      5|    if((data->state.authproxy.picked == CURLAUTH_NTLM) ||
  495|      5|       (data->state.authhost.picked == CURLAUTH_NTLM) ||
  496|      5|       (data->state.authproxy.picked == CURLAUTH_NTLM_WB) ||
  497|      5|       (data->state.authhost.picked == CURLAUTH_NTLM_WB)) {
  498|      0|      if(((expectsend - bytessent) < 2000) ||
  499|      0|         (conn->http_ntlm_state != NTLMSTATE_NONE) ||
  500|      0|         (conn->proxy_ntlm_state != NTLMSTATE_NONE)) {
  501|       |        /* The NTLM-negotiation has started *OR* there is just a little (<2K)
  502|       |           data left to send, keep on sending. */
  503|       |
  504|       |        /* rewind data when completely done sending! */
  505|      0|        if(!conn->bits.authneg && (conn->writesockfd != CURL_SOCKET_BAD)) {
  506|      0|          conn->bits.rewindaftersend = TRUE;
  507|      0|          infof(data, "Rewind stream after send");
  508|      0|        }
  509|       |
  510|      0|        return CURLE_OK;
  511|      0|      }
  512|       |
  513|      0|      if(conn->bits.close)
  514|       |        /* this is already marked to get closed */
  515|      0|        return CURLE_OK;
  516|       |
  517|      0|      infof(data, "NTLM send, close instead of sending %"
  518|      0|            CURL_FORMAT_CURL_OFF_T " bytes",
  519|      0|            (curl_off_t)(expectsend - bytessent));
  520|      0|    }
  521|      5|#endif
  522|       |#if defined(USE_SPNEGO)
  523|       |    /* There is still data left to send */
  524|       |    if((data->state.authproxy.picked == CURLAUTH_NEGOTIATE) ||
  525|       |       (data->state.authhost.picked == CURLAUTH_NEGOTIATE)) {
  526|       |      if(((expectsend - bytessent) < 2000) ||
  527|       |         (conn->http_negotiate_state != GSS_AUTHNONE) ||
  528|       |         (conn->proxy_negotiate_state != GSS_AUTHNONE)) {
  529|       |        /* The NEGOTIATE-negotiation has started *OR*
  530|       |        there is just a little (<2K) data left to send, keep on sending. */
  531|       |
  532|       |        /* rewind data when completely done sending! */
  533|       |        if(!conn->bits.authneg && (conn->writesockfd != CURL_SOCKET_BAD)) {
  534|       |          conn->bits.rewindaftersend = TRUE;
  535|       |          infof(data, "Rewind stream after send");
  536|       |        }
  537|       |
  538|       |        return CURLE_OK;
  539|       |      }
  540|       |
  541|       |      if(conn->bits.close)
  542|       |        /* this is already marked to get closed */
  543|       |        return CURLE_OK;
  544|       |
  545|       |      infof(data, "NEGOTIATE send, close instead of sending %"
  546|       |        CURL_FORMAT_CURL_OFF_T " bytes",
  547|       |        (curl_off_t)(expectsend - bytessent));
  548|       |    }
  549|       |#endif
  550|       |
  551|       |    /* This is not NEGOTIATE/NTLM or many bytes left to send: close */
  552|      5|    streamclose(conn, "Mid-auth HTTP and much data left to send");
  553|      5|    data->req.size = 0; /* don't download any more than 0 bytes */
  554|       |
  555|       |    /* There still is data left to send, but this connection is marked for
  556|       |       closure so we can safely do the rewind right now */
  557|      5|  }
  558|       |
  559|     22|  if(bytessent)
  560|       |    /* we rewind now at once since if we already sent something */
  561|     14|    return Curl_readrewind(data);
  562|       |
  563|      8|  return CURLE_OK;
  564|     22|}
http.c:output_auth_headers:
  667|    289|{
  668|    289|  const char *auth = NULL;
  669|    289|  CURLcode result = CURLE_OK;
  670|       |
  671|       |#ifdef CURL_DISABLE_CRYPTO_AUTH
  672|       |  (void)request;
  673|       |  (void)path;
  674|       |#endif
  675|    289|#ifndef CURL_DISABLE_CRYPTO_AUTH
  676|    289|  if(authstatus->picked == CURLAUTH_AWS_SIGV4) {
  677|      0|    auth = "AWS_SIGV4";
  678|      0|    result = Curl_output_aws_sigv4(data, proxy);
  679|      0|    if(result)
  680|      0|      return result;
  681|      0|  }
  682|    289|  else
  683|    289|#endif
  684|       |#ifdef USE_SPNEGO
  685|       |  if(authstatus->picked == CURLAUTH_NEGOTIATE) {
  686|       |    auth = "Negotiate";
  687|       |    result = Curl_output_negotiate(data, conn, proxy);
  688|       |    if(result)
  689|       |      return result;
  690|       |  }
  691|       |  else
  692|       |#endif
  693|    289|#ifdef USE_NTLM
  694|    289|  if(authstatus->picked == CURLAUTH_NTLM) {
  695|      0|    auth = "NTLM";
  696|      0|    result = Curl_output_ntlm(data, proxy);
  697|      0|    if(result)
  698|      0|      return result;
  699|      0|  }
  700|    289|  else
  701|    289|#endif
  702|    289|#if defined(USE_NTLM) && defined(NTLM_WB_ENABLED)
  703|    289|  if(authstatus->picked == CURLAUTH_NTLM_WB) {
  704|      0|    auth = "NTLM_WB";
  705|      0|    result = Curl_output_ntlm_wb(data, conn, proxy);
  706|      0|    if(result)
  707|      0|      return result;
  708|      0|  }
  709|    289|  else
  710|    289|#endif
  711|    289|#ifndef CURL_DISABLE_CRYPTO_AUTH
  712|    289|  if(authstatus->picked == CURLAUTH_DIGEST) {
  713|     97|    auth = "Digest";
  714|     97|    result = Curl_output_digest(data,
  715|     97|                                proxy,
  716|     97|                                (const unsigned char *)request,
  717|     97|                                (const unsigned char *)path);
  718|     97|    if(result)
  719|      0|      return result;
  720|     97|  }
  721|    192|  else
  722|    192|#endif
  723|    192|  if(authstatus->picked == CURLAUTH_BASIC) {
  724|       |    /* Basic */
  725|    142|    if(
  726|    142|#ifndef CURL_DISABLE_PROXY
  727|    142|      (proxy && conn->bits.proxy_user_passwd &&
  728|    142|       !Curl_checkProxyheaders(data, conn, "Proxy-authorization")) ||
  729|    142|#endif
  730|    142|      (!proxy && conn->bits.user_passwd &&
  731|    142|       !Curl_checkheaders(data, "Authorization"))) {
  732|    142|      auth = "Basic";
  733|    142|      result = http_output_basic(data, proxy);
  734|    142|      if(result)
  735|      0|        return result;
  736|    142|    }
  737|       |
  738|       |    /* NOTE: this function should set 'done' TRUE, as the other auth
  739|       |       functions work that way */
  740|    142|    authstatus->done = TRUE;
  741|    142|  }
  742|    289|  if(authstatus->picked == CURLAUTH_BEARER) {
  743|       |    /* Bearer */
  744|      0|    if((!proxy && data->set.str[STRING_BEARER] &&
  745|      0|        !Curl_checkheaders(data, "Authorization"))) {
  746|      0|      auth = "Bearer";
  747|      0|      result = http_output_bearer(data);
  748|      0|      if(result)
  749|      0|        return result;
  750|      0|    }
  751|       |
  752|       |    /* NOTE: this function should set 'done' TRUE, as the other auth
  753|       |       functions work that way */
  754|      0|    authstatus->done = TRUE;
  755|      0|  }
  756|       |
  757|    289|  if(auth) {
  758|    239|#ifndef CURL_DISABLE_PROXY
  759|    239|    infof(data, "%s auth using %s with user '%s'",
  760|    239|          proxy ? "Proxy" : "Server", auth,
  761|    239|          proxy ? (data->state.aptr.proxyuser ?
  762|      0|                   data->state.aptr.proxyuser : "") :
  763|    239|          (data->state.aptr.user ?
  764|    238|           data->state.aptr.user : ""));
  765|       |#else
  766|       |    infof(data, "Server auth using %s with user '%s'",
  767|       |          auth, data->state.aptr.user ?
  768|       |          data->state.aptr.user : "");
  769|       |#endif
  770|    239|    authstatus->multipass = (!authstatus->done) ? TRUE : FALSE;
  771|    239|  }
  772|     50|  else
  773|     50|    authstatus->multipass = FALSE;
  774|       |
  775|    289|  return CURLE_OK;
  776|    289|}
http.c:http_output_basic:
  300|    142|{
  301|    142|  size_t size = 0;
  302|    142|  char *authorization = NULL;
  303|    142|  char **userp;
  304|    142|  const char *user;
  305|    142|  const char *pwd;
  306|    142|  CURLcode result;
  307|    142|  char *out;
  308|       |
  309|       |  /* credentials are unique per transfer for HTTP, do not use the ones for the
  310|       |     connection */
  311|    142|  if(proxy) {
  312|      0|#ifndef CURL_DISABLE_PROXY
  313|      0|    userp = &data->state.aptr.proxyuserpwd;
  314|      0|    user = data->state.aptr.proxyuser;
  315|      0|    pwd = data->state.aptr.proxypasswd;
  316|       |#else
  317|       |    return CURLE_NOT_BUILT_IN;
  318|       |#endif
  319|      0|  }
  320|    142|  else {
  321|    142|    userp = &data->state.aptr.userpwd;
  322|    142|    user = data->state.aptr.user;
  323|    142|    pwd = data->state.aptr.passwd;
  324|    142|  }
  325|       |
  326|    142|  out = aprintf("%s:%s", user ? user : "", pwd ? pwd : "");
  327|    142|  if(!out)
  328|      0|    return CURLE_OUT_OF_MEMORY;
  329|       |
  330|    142|  result = Curl_base64_encode(data, out, strlen(out), &authorization, &size);
  331|    142|  if(result)
  332|      0|    goto fail;
  333|       |
  334|    142|  if(!authorization) {
  335|      0|    result = CURLE_REMOTE_ACCESS_DENIED;
  336|      0|    goto fail;
  337|      0|  }
  338|       |
  339|    142|  free(*userp);
  340|    142|  *userp = aprintf("%sAuthorization: Basic %s\r\n",
  341|    142|                   proxy ? "Proxy-" : "",
  342|    142|                   authorization);
  343|    142|  free(authorization);
  344|    142|  if(!*userp) {
  345|      0|    result = CURLE_OUT_OF_MEMORY;
  346|      0|    goto fail;
  347|      0|  }
  348|       |
  349|    142|  fail:
  350|    142|  free(out);
  351|    142|  return result;
  352|    142|}
http.c:is_valid_auth_separator:
  905|    161|{
  906|    161|  return ch == '\0' || ch == ',' || ISSPACE(ch);
  907|    161|}
http.c:http_should_fail:
 1088|    833|{
 1089|    833|  int httpcode;
 1090|    833|  DEBUGASSERT(data);
 1091|    833|  DEBUGASSERT(data->conn);
 1092|       |
 1093|    833|  httpcode = data->req.httpcode;
 1094|       |
 1095|       |  /*
 1096|       |  ** If we haven't been asked to fail on error,
 1097|       |  ** don't fail.
 1098|       |  */
 1099|    833|  if(!data->set.http_fail_on_error)
 1100|    833|    return FALSE;
 1101|       |
 1102|       |  /*
 1103|       |  ** Any code < 400 is never terminal.
 1104|       |  */
 1105|      0|  if(httpcode < 400)
 1106|      0|    return FALSE;
 1107|       |
 1108|       |  /*
 1109|       |  ** A 416 response to a resume request is presumably because the file is
 1110|       |  ** already completely downloaded and thus not actually a fail.
 1111|       |  */
 1112|      0|  if(data->state.resume_from && data->state.httpreq == HTTPREQ_GET &&
 1113|      0|     httpcode == 416)
 1114|      0|    return FALSE;
 1115|       |
 1116|       |  /*
 1117|       |  ** Any code >= 400 that's not 401 or 407 is always
 1118|       |  ** a terminal error
 1119|       |  */
 1120|      0|  if((httpcode != 401) && (httpcode != 407))
 1121|      0|    return TRUE;
 1122|       |
 1123|       |  /*
 1124|       |  ** All we have left to deal with is 401 and 407
 1125|       |  */
 1126|      0|  DEBUGASSERT((httpcode == 401) || (httpcode == 407));
 1127|       |
 1128|       |  /*
 1129|       |  ** Examine the current authentication state to see if this
 1130|       |  ** is an error.  The idea is for this function to get
 1131|       |  ** called after processing all the headers in a response
 1132|       |  ** message.  So, if we've been to asked to authenticate a
 1133|       |  ** particular stage, and we've done it, we're OK.  But, if
 1134|       |  ** we're already completely authenticated, it's not OK to
 1135|       |  ** get another 401 or 407.
 1136|       |  **
 1137|       |  ** It is possible for authentication to go stale such that
 1138|       |  ** the client needs to reauthenticate.  Once that info is
 1139|       |  ** available, use it here.
 1140|       |  */
 1141|       |
 1142|       |  /*
 1143|       |  ** Either we're not authenticating, or we're supposed to
 1144|       |  ** be authenticating something else.  This is an error.
 1145|       |  */
 1146|      0|  if((httpcode == 401) && !data->conn->bits.user_passwd)
 1147|      0|    return TRUE;
 1148|      0|#ifndef CURL_DISABLE_PROXY
 1149|      0|  if((httpcode == 407) && !data->conn->bits.proxy_user_passwd)
 1150|      0|    return TRUE;
 1151|      0|#endif
 1152|       |
 1153|      0|  return data->state.authproblem;
 1154|      0|}
http.c:expect100:
 1710|     13|{
 1711|     13|  CURLcode result = CURLE_OK;
 1712|     13|  data->state.expect100header = FALSE; /* default to false unless it is set
 1713|       |                                          to TRUE below */
 1714|     13|  if(!data->state.disableexpect && Curl_use_http_1_1plus(data, conn) &&
 1715|     13|     (conn->httpversion < 20)) {
 1716|       |    /* if not doing HTTP 1.0 or version 2, or disabled explicitly, we add an
 1717|       |       Expect: 100-continue to the headers which actually speeds up post
 1718|       |       operations (as there is one packet coming back from the web server) */
 1719|     13|    const char *ptr = Curl_checkheaders(data, "Expect");
 1720|     13|    if(ptr) {
 1721|      0|      data->state.expect100header =
 1722|      0|        Curl_compareheader(ptr, "Expect:", "100-continue");
 1723|      0|    }
 1724|     13|    else {
 1725|     13|      result = Curl_dyn_add(req, "Expect: 100-continue\r\n");
 1726|     13|      if(!result)
 1727|     13|        data->state.expect100header = TRUE;
 1728|     13|    }
 1729|     13|  }
 1730|       |
 1731|     13|  return result;
 1732|     13|}
http.c:get_http_string:
 1687|  1.11k|{
 1688|       |#ifdef ENABLE_QUIC
 1689|       |  if((data->state.httpwant == CURL_HTTP_VERSION_3) ||
 1690|       |     (conn->httpversion == 30))
 1691|       |    return "3";
 1692|       |#endif
 1693|       |
 1694|  1.11k|#ifdef USE_NGHTTP2
 1695|  1.11k|  if(conn->proto.httpc.h2)
 1696|      0|    return "2";
 1697|  1.11k|#endif
 1698|       |
 1699|  1.11k|  if(Curl_use_http_1_1plus(data, conn))
 1700|  1.11k|    return "1.1";
 1701|       |
 1702|      5|  return "1.0";
 1703|  1.11k|}
http.c:checkprotoprefix:
 3379|  1.46k|{
 3380|  1.46k|#ifndef CURL_DISABLE_RTSP
 3381|  1.46k|  if(conn->handler->protocol & CURLPROTO_RTSP)
 3382|     98|    return checkrtspprefix(data, s, len);
 3383|       |#else
 3384|       |  (void)conn;
 3385|       |#endif /* CURL_DISABLE_RTSP */
 3386|       |
 3387|  1.36k|  return checkhttpprefix(data, s, len);
 3388|  1.46k|}
http.c:checkrtspprefix:
 3348|     98|{
 3349|     98|  statusline result = STATUS_BAD;
 3350|     98|  statusline onmatch = len >= 5? STATUS_DONE : STATUS_UNKNOWN;
 3351|       |
 3352|       |#ifdef CURL_DOES_CONVERSIONS
 3353|       |  /* convert from the network encoding using a scratch area */
 3354|       |  char *scratch = strdup(s);
 3355|       |  if(NULL == scratch) {
 3356|       |    failf(data, "Failed to allocate memory for conversion!");
 3357|       |    return FALSE; /* can't return CURLE_OUT_OF_MEMORY so return FALSE */
 3358|       |  }
 3359|       |  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s) + 1)) {
 3360|       |    /* Curl_convert_from_network calls failf if unsuccessful */
 3361|       |    result = FALSE; /* can't return CURLE_foobar so return FALSE */
 3362|       |  }
 3363|       |  else if(checkprefixmax("RTSP/", scratch, len))
 3364|       |    result = onmatch;
 3365|       |  free(scratch);
 3366|       |#else
 3367|     98|  (void)data; /* unused */
 3368|     98|  if(checkprefixmax("RTSP/", s, len))
 3369|     88|    result = onmatch;
 3370|     98|#endif /* CURL_DOES_CONVERSIONS */
 3371|       |
 3372|     98|  return result;
 3373|     98|}
http.c:checkprefixmax:
 3295|  1.46k|{
 3296|  1.46k|  size_t ch = CURLMIN(strlen(prefix), len);
 3297|  1.46k|  return curl_strnequal(prefix, buffer, ch);
 3298|  1.46k|}
http.c:checkhttpprefix:
 3308|  1.36k|{
 3309|  1.36k|  struct curl_slist *head = data->set.http200aliases;
 3310|  1.36k|  statusline rc = STATUS_BAD;
 3311|  1.36k|  statusline onmatch = len >= 5? STATUS_DONE : STATUS_UNKNOWN;
 3312|       |#ifdef CURL_DOES_CONVERSIONS
 3313|       |  /* convert from the network encoding using a scratch area */
 3314|       |  char *scratch = strdup(s);
 3315|       |  if(NULL == scratch) {
 3316|       |    failf(data, "Failed to allocate memory for conversion!");
 3317|       |    return FALSE; /* can't return CURLE_OUT_OF_MEMORY so return FALSE */
 3318|       |  }
 3319|       |  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s) + 1)) {
 3320|       |    /* Curl_convert_from_network calls failf if unsuccessful */
 3321|       |    free(scratch);
 3322|       |    return FALSE; /* can't return CURLE_foobar so return FALSE */
 3323|       |  }
 3324|       |  s = scratch;
 3325|       |#endif /* CURL_DOES_CONVERSIONS */
 3326|       |
 3327|  1.36k|  while(head) {
 3328|      0|    if(checkprefixmax(head->data, s, len)) {
 3329|      0|      rc = onmatch;
 3330|      0|      break;
 3331|      0|    }
 3332|      0|    head = head->next;
 3333|      0|  }
 3334|       |
 3335|  1.36k|  if((rc != STATUS_DONE) && (checkprefixmax("HTTP/", s, len)))
 3336|  1.32k|    rc = onmatch;
 3337|       |
 3338|       |#ifdef CURL_DOES_CONVERSIONS
 3339|       |  free(scratch);
 3340|       |#endif /* CURL_DOES_CONVERSIONS */
 3341|  1.36k|  return rc;
 3342|  1.36k|}

Curl_http2_init_state:
   83|  2.81k|{
   84|  2.81k|  state->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   85|  2.81k|}
Curl_http2_init_userset:
   92|  6.05k|{
   93|  6.05k|  set->stream_weight = NGHTTP2_DEFAULT_WEIGHT;
   94|  6.05k|}
Curl_http2_setup_req:
  287|  1.12k|{
  288|  1.12k|  struct HTTP *http = data->req.p.http;
  289|  1.12k|  http->bodystarted = FALSE;
  290|  1.12k|  http->status_code = -1;
  291|  1.12k|  http->pausedata = NULL;
  292|  1.12k|  http->pauselen = 0;
  293|  1.12k|  http->closed = FALSE;
  294|  1.12k|  http->close_handled = FALSE;
  295|  1.12k|  http->mem = NULL;
  296|  1.12k|  http->len = 0;
  297|  1.12k|  http->memlen = 0;
  298|  1.12k|  http->error = NGHTTP2_NO_ERROR;
  299|  1.12k|}
Curl_http2_setup_conn:
  303|  1.12k|{
  304|  1.12k|  conn->proto.httpc.settings.max_concurrent_streams =
  305|  1.12k|    DEFAULT_MAX_CONCURRENT_STREAMS;
  306|  1.12k|}
Curl_http2_done:
 1206|  1.24k|{
 1207|  1.24k|  struct HTTP *http = data->req.p.http;
 1208|  1.24k|  struct http_conn *httpc = &data->conn->proto.httpc;
 1209|       |
 1210|       |  /* there might be allocated resources done before this got the 'h2' pointer
 1211|       |     setup */
 1212|  1.24k|  Curl_dyn_free(&http->header_recvbuf);
 1213|  1.24k|  Curl_dyn_free(&http->trailer_recvbuf);
 1214|  1.24k|  if(http->push_headers) {
 1215|       |    /* if they weren't used and then freed before */
 1216|      0|    for(; http->push_headers_used > 0; --http->push_headers_used) {
 1217|      0|      free(http->push_headers[http->push_headers_used - 1]);
 1218|      0|    }
 1219|      0|    free(http->push_headers);
 1220|      0|    http->push_headers = NULL;
 1221|      0|  }
 1222|       |
 1223|  1.24k|  if(!(data->conn->handler->protocol&PROTO_FAMILY_HTTP) ||
 1224|  1.24k|     !httpc->h2) /* not HTTP/2 ? */
 1225|  1.24k|    return;
 1226|       |
 1227|      0|  if(premature) {
 1228|       |    /* RST_STREAM */
 1229|      0|    set_transfer(httpc, data); /* set the transfer */
 1230|      0|    if(!nghttp2_submit_rst_stream(httpc->h2, NGHTTP2_FLAG_NONE,
 1231|      0|                                  http->stream_id, NGHTTP2_STREAM_CLOSED))
 1232|      0|      (void)nghttp2_session_send(httpc->h2);
 1233|       |
 1234|      0|    if(http->stream_id == httpc->pause_stream_id) {
 1235|      0|      infof(data, "stopped the pause stream!");
 1236|      0|      httpc->pause_stream_id = 0;
 1237|      0|    }
 1238|      0|  }
 1239|       |
 1240|      0|  if(data->state.drain)
 1241|      0|    drained_transfer(data, httpc);
 1242|       |
 1243|       |  /* -1 means unassigned and 0 means cleared */
 1244|      0|  if(http->stream_id > 0) {
 1245|      0|    int rv = nghttp2_session_set_stream_user_data(httpc->h2,
 1246|      0|                                                  http->stream_id, 0);
 1247|      0|    if(rv) {
 1248|      0|      infof(data, "http/2: failed to clear user_data for stream %d!",
 1249|      0|            http->stream_id);
 1250|      0|      DEBUGASSERT(0);
 1251|      0|    }
 1252|      0|    set_transfer(httpc, NULL);
 1253|      0|    http->stream_id = 0;
 1254|      0|  }
 1255|      0|}
Curl_http2_done_sending:
 1442|    163|{
 1443|    163|  CURLcode result = CURLE_OK;
 1444|       |
 1445|    163|  if((conn->handler == &Curl_handler_http2_ssl) ||
 1446|    163|     (conn->handler == &Curl_handler_http2)) {
 1447|       |    /* make sure this is only attempted for HTTP/2 transfers */
 1448|      0|    struct HTTP *stream = data->req.p.http;
 1449|      0|    struct http_conn *httpc = &conn->proto.httpc;
 1450|      0|    nghttp2_session *h2 = httpc->h2;
 1451|       |
 1452|      0|    if(stream->upload_left) {
 1453|       |      /* If the stream still thinks there's data left to upload. */
 1454|       |
 1455|      0|      stream->upload_left = 0; /* DONE! */
 1456|       |
 1457|       |      /* resume sending here to trigger the callback to get called again so
 1458|       |         that it can signal EOF to nghttp2 */
 1459|      0|      (void)nghttp2_session_resume_data(h2, stream->stream_id);
 1460|      0|      (void)h2_process_pending_input(data, httpc, &result);
 1461|      0|    }
 1462|       |
 1463|       |    /* If nghttp2 still has pending frames unsent */
 1464|      0|    if(nghttp2_session_want_write(h2)) {
 1465|      0|      struct SingleRequest *k = &data->req;
 1466|      0|      int rv;
 1467|       |
 1468|      0|      H2BUGF(infof(data, "HTTP/2 still wants to send data (easy %p)", data));
 1469|       |
 1470|       |      /* and attempt to send the pending frames */
 1471|      0|      rv = h2_session_send(data, h2);
 1472|      0|      if(rv)
 1473|      0|        result = CURLE_SEND_ERROR;
 1474|       |
 1475|      0|      if(nghttp2_session_want_write(h2)) {
 1476|       |         /* re-set KEEP_SEND to make sure we are called again */
 1477|      0|         k->keepon |= KEEP_SEND;
 1478|      0|      }
 1479|      0|    }
 1480|      0|  }
 1481|    163|  return result;
 1482|    163|}
Curl_http2_cleanup_dependencies:
 2482|  6.05k|{
 2483|  6.05k|  while(data->set.stream_dependents) {
 2484|      0|    struct Curl_easy *tmp = data->set.stream_dependents->data;
 2485|      0|    Curl_http2_remove_child(data, tmp);
 2486|      0|    if(data->set.stream_depends_on)
 2487|      0|      Curl_http2_add_child(data->set.stream_depends_on, tmp, FALSE);
 2488|      0|  }
 2489|       |
 2490|  6.05k|  if(data->set.stream_depends_on)
 2491|      0|    Curl_http2_remove_child(data->set.stream_depends_on, data);
 2492|  6.05k|}

Curl_input_digest:
   48|    133|{
   49|       |  /* Point to the correct struct with this */
   50|    133|  struct digestdata *digest;
   51|       |
   52|    133|  if(proxy) {
   53|      0|    digest = &data->state.proxydigest;
   54|      0|  }
   55|    133|  else {
   56|    133|    digest = &data->state.digest;
   57|    133|  }
   58|       |
   59|    133|  if(!checkprefix("Digest", header) || !ISSPACE(header[6]))
   60|      2|    return CURLE_BAD_CONTENT_ENCODING;
   61|       |
   62|    131|  header += strlen("Digest");
   63|    377|  while(*header && ISSPACE(*header))
   64|    246|    header++;
   65|       |
   66|    131|  return Curl_auth_decode_digest_http_message(header, digest);
   67|    133|}
Curl_output_digest:
   73|     97|{
   74|     97|  CURLcode result;
   75|     97|  unsigned char *path = NULL;
   76|     97|  char *tmp = NULL;
   77|     97|  char *response;
   78|     97|  size_t len;
   79|     97|  bool have_chlg;
   80|       |
   81|       |  /* Point to the address of the pointer that holds the string to send to the
   82|       |     server, which is for a plain host or for a HTTP proxy */
   83|     97|  char **allocuserpwd;
   84|       |
   85|       |  /* Point to the name and password for this */
   86|     97|  const char *userp;
   87|     97|  const char *passwdp;
   88|       |
   89|       |  /* Point to the correct struct with this */
   90|     97|  struct digestdata *digest;
   91|     97|  struct auth *authp;
   92|       |
   93|     97|  if(proxy) {
   94|       |#ifdef CURL_DISABLE_PROXY
   95|       |    return CURLE_NOT_BUILT_IN;
   96|       |#else
   97|      0|    digest = &data->state.proxydigest;
   98|      0|    allocuserpwd = &data->state.aptr.proxyuserpwd;
   99|      0|    userp = data->state.aptr.proxyuser;
  100|      0|    passwdp = data->state.aptr.proxypasswd;
  101|      0|    authp = &data->state.authproxy;
  102|      0|#endif
  103|      0|  }
  104|     97|  else {
  105|     97|    digest = &data->state.digest;
  106|     97|    allocuserpwd = &data->state.aptr.userpwd;
  107|     97|    userp = data->state.aptr.user;
  108|     97|    passwdp = data->state.aptr.passwd;
  109|     97|    authp = &data->state.authhost;
  110|     97|  }
  111|       |
  112|     97|  Curl_safefree(*allocuserpwd);
  113|       |
  114|       |  /* not set means empty */
  115|     97|  if(!userp)
  116|      0|    userp = "";
  117|       |
  118|     97|  if(!passwdp)
  119|     78|    passwdp = "";
  120|       |
  121|       |#if defined(USE_WINDOWS_SSPI)
  122|       |  have_chlg = digest->input_token ? TRUE : FALSE;
  123|       |#else
  124|     97|  have_chlg = digest->nonce ? TRUE : FALSE;
  125|     97|#endif
  126|       |
  127|     97|  if(!have_chlg) {
  128|     46|    authp->done = FALSE;
  129|     46|    return CURLE_OK;
  130|     46|  }
  131|       |
  132|       |  /* So IE browsers < v7 cut off the URI part at the query part when they
  133|       |     evaluate the MD5 and some (IIS?) servers work with them so we may need to
  134|       |     do the Digest IE-style. Note that the different ways cause different MD5
  135|       |     sums to get sent.
  136|       |
  137|       |     Apache servers can be set to do the Digest IE-style automatically using
  138|       |     the BrowserMatch feature:
  139|       |     https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie
  140|       |
  141|       |     Further details on Digest implementation differences:
  142|       |     http://www.fngtps.com/2006/09/http-authentication
  143|       |  */
  144|       |
  145|     51|  if(authp->iestyle) {
  146|     14|    tmp = strchr((char *)uripath, '?');
  147|     14|    if(tmp) {
  148|      1|      size_t urilen = tmp - (char *)uripath;
  149|       |      /* typecast is fine here since the value is always less than 32 bits */
  150|      1|      path = (unsigned char *) aprintf("%.*s", (int)urilen, uripath);
  151|      1|    }
  152|     14|  }
  153|     51|  if(!tmp)
  154|     50|    path = (unsigned char *) strdup((char *) uripath);
  155|       |
  156|     51|  if(!path)
  157|      0|    return CURLE_OUT_OF_MEMORY;
  158|       |
  159|     51|  result = Curl_auth_create_digest_http_message(data, userp, passwdp, request,
  160|     51|                                                path, digest, &response, &len);
  161|     51|  free(path);
  162|     51|  if(result)
  163|      0|    return result;
  164|       |
  165|     51|  *allocuserpwd = aprintf("%sAuthorization: Digest %s\r\n",
  166|     51|                          proxy ? "Proxy-" : "",
  167|     51|                          response);
  168|     51|  free(response);
  169|     51|  if(!*allocuserpwd)
  170|      0|    return CURLE_OUT_OF_MEMORY;
  171|       |
  172|     51|  authp->done = TRUE;
  173|       |
  174|     51|  return CURLE_OK;
  175|     51|}
Curl_http_auth_cleanup_digest:
  178|  6.05k|{
  179|  6.05k|  Curl_auth_digest_cleanup(&data->state.digest);
  180|  6.05k|  Curl_auth_digest_cleanup(&data->state.proxydigest);
  181|  6.05k|}

Curl_http_auth_cleanup_ntlm:
  266|  2.92k|{
  267|  2.92k|  Curl_auth_cleanup_ntlm(&conn->ntlm);
  268|  2.92k|  Curl_auth_cleanup_ntlm(&conn->proxyntlm);
  269|       |
  270|  2.92k|#if defined(NTLM_WB_ENABLED)
  271|  2.92k|  Curl_http_auth_cleanup_ntlm_wb(conn);
  272|  2.92k|#endif
  273|  2.92k|}

Curl_proxy_connect:
   80|  4.04k|{
   81|  4.04k|  struct connectdata *conn = data->conn;
   82|  4.04k|  if(conn->http_proxy.proxytype == CURLPROXY_HTTPS) {
   83|      0|    const CURLcode result = https_proxy_connect(data, sockindex);
   84|      0|    if(result)
   85|      0|      return result;
   86|      0|    if(!conn->bits.proxy_ssl_connected[sockindex])
   87|      0|      return result; /* wait for HTTPS proxy SSL initialization to complete */
   88|      0|  }
   89|       |
   90|  4.04k|  if(conn->bits.tunnel_proxy && conn->bits.httpproxy) {
   91|      0|#ifndef CURL_DISABLE_PROXY
   92|       |    /* for [protocol] tunneled through HTTP proxy */
   93|      0|    const char *hostname;
   94|      0|    int remote_port;
   95|      0|    CURLcode result;
   96|       |
   97|       |    /* We want "seamless" operations through HTTP proxy tunnel */
   98|       |
   99|       |    /* for the secondary socket (FTP), use the "connect to host"
  100|       |     * but ignore the "connect to port" (use the secondary port)
  101|       |     */
  102|       |
  103|      0|    if(conn->bits.conn_to_host)
  104|      0|      hostname = conn->conn_to_host.name;
  105|      0|    else if(sockindex == SECONDARYSOCKET)
  106|      0|      hostname = conn->secondaryhostname;
  107|      0|    else
  108|      0|      hostname = conn->host.name;
  109|       |
  110|      0|    if(sockindex == SECONDARYSOCKET)
  111|      0|      remote_port = conn->secondary_port;
  112|      0|    else if(conn->bits.conn_to_port)
  113|      0|      remote_port = conn->conn_to_port;
  114|      0|    else
  115|      0|      remote_port = conn->remote_port;
  116|       |
  117|      0|    result = Curl_proxyCONNECT(data, sockindex, hostname, remote_port);
  118|      0|    if(CURLE_OK != result)
  119|      0|      return result;
  120|      0|    Curl_safefree(data->state.aptr.proxyuserpwd);
  121|       |#else
  122|       |    return CURLE_NOT_BUILT_IN;
  123|       |#endif
  124|      0|  }
  125|       |  /* no HTTP tunnel proxy, just return */
  126|  4.04k|  return CURLE_OK;
  127|  4.04k|}
Curl_connect_ongoing:
  136|  6.84k|{
  137|  6.84k|  return conn->connect_state &&
  138|  6.84k|    (conn->connect_state->tunnel_state <= TUNNEL_COMPLETE);
  139|  6.84k|}
Curl_connect_free:
 1021|  2.32k|{
 1022|  2.32k|  struct connectdata *conn = data->conn;
 1023|  2.32k|  struct http_connect_state *s = conn->connect_state;
 1024|  2.32k|  if(s) {
 1025|      0|    free(s);
 1026|      0|    conn->connect_state = NULL;
 1027|      0|  }
 1028|  2.32k|}

Curl_ipv6_scope:
   65|  2.79k|{
   66|       |#ifndef ENABLE_IPV6
   67|       |  (void) sa;
   68|       |#else
   69|  2.79k|  if(sa->sa_family == AF_INET6) {
   70|      0|    const struct sockaddr_in6 * sa6 = (const struct sockaddr_in6 *)(void *) sa;
   71|      0|    const unsigned char *b = sa6->sin6_addr.s6_addr;
   72|      0|    unsigned short w = (unsigned short) ((b[0] << 8) | b[1]);
   73|       |
   74|      0|    if((b[0] & 0xFE) == 0xFC) /* Handle ULAs */
   75|      0|      return IPV6_SCOPE_UNIQUELOCAL;
   76|      0|    switch(w & 0xFFC0) {
   77|      0|    case 0xFE80:
   78|      0|      return IPV6_SCOPE_LINKLOCAL;
   79|      0|    case 0xFEC0:
   80|      0|      return IPV6_SCOPE_SITELOCAL;
   81|      0|    case 0x0000:
   82|      0|      w = b[1] | b[2] | b[3] | b[4] | b[5] | b[6] | b[7] | b[8] | b[9] |
   83|      0|          b[10] | b[11] | b[12] | b[13] | b[14];
   84|      0|      if(w || b[15] != 0x01)
   85|      0|        break;
   86|      0|      return IPV6_SCOPE_NODELOCAL;
   87|      0|    default:
   88|      0|      break;
   89|      0|    }
   90|      0|  }
   91|  2.79k|#endif
   92|       |
   93|  2.79k|  return IPV6_SCOPE_GLOBAL;
   94|  2.79k|}

imap.c:imap_multi_statemach:
 1379|  1.33k|{
 1380|  1.33k|  CURLcode result = CURLE_OK;
 1381|  1.33k|  struct connectdata *conn = data->conn;
 1382|  1.33k|  struct imap_conn *imapc = &conn->proto.imapc;
 1383|       |
 1384|  1.33k|  if((conn->handler->flags & PROTOPT_SSL) && !imapc->ssldone) {
 1385|      0|    result = Curl_ssl_connect_nonblocking(data, conn, FALSE,
 1386|      0|                                          FIRSTSOCKET, &imapc->ssldone);
 1387|      0|    if(result || !imapc->ssldone)
 1388|      0|      return result;
 1389|      0|  }
 1390|       |
 1391|  1.33k|  result = Curl_pp_statemach(data, &imapc->pp, FALSE, FALSE);
 1392|  1.33k|  *done = (imapc->state == IMAP_STOP) ? TRUE : FALSE;
 1393|       |
 1394|  1.33k|  return result;
 1395|  1.33k|}
imap.c:imap_getsock:
 1428|     85|{
 1429|     85|  return Curl_pp_getsock(data, &conn->proto.imapc.pp, socks);
 1430|     85|}
imap.c:imap_connect:
 1443|    744|{
 1444|    744|  CURLcode result = CURLE_OK;
 1445|    744|  struct connectdata *conn = data->conn;
 1446|    744|  struct imap_conn *imapc = &conn->proto.imapc;
 1447|    744|  struct pingpong *pp = &imapc->pp;
 1448|       |
 1449|    744|  *done = FALSE; /* default to not done yet */
 1450|       |
 1451|       |  /* We always support persistent connections in IMAP */
 1452|    744|  connkeep(conn, "IMAP default");
 1453|       |
 1454|    744|  PINGPONG_SETUP(pp, imap_statemachine, imap_endofresp);
 1455|       |
 1456|       |  /* Set the default preferred authentication type and mechanism */
 1457|    744|  imapc->preftype = IMAP_TYPE_ANY;
 1458|    744|  Curl_sasl_init(&imapc->sasl, data, &saslimap);
 1459|       |
 1460|    744|  Curl_dyn_init(&imapc->dyn, DYN_IMAP_CMD);
 1461|       |  /* Initialise the pingpong layer */
 1462|    744|  Curl_pp_setup(pp);
 1463|    744|  Curl_pp_init(data, pp);
 1464|       |
 1465|       |  /* Parse the URL options */
 1466|    744|  result = imap_parse_url_options(conn);
 1467|    744|  if(result)
 1468|     26|    return result;
 1469|       |
 1470|       |  /* Start off waiting for the server greeting response */
 1471|    718|  state(data, IMAP_SERVERGREET);
 1472|       |
 1473|       |  /* Start off with an response id of '*' */
 1474|    718|  strcpy(imapc->resptag, "*");
 1475|       |
 1476|    718|  result = imap_multi_statemach(data, done);
 1477|       |
 1478|    718|  return result;
 1479|    744|}
imap.c:imap_statemachine:
 1288|  1.99k|{
 1289|  1.99k|  CURLcode result = CURLE_OK;
 1290|  1.99k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
 1291|  1.99k|  int imapcode;
 1292|  1.99k|  struct imap_conn *imapc = &conn->proto.imapc;
 1293|  1.99k|  struct pingpong *pp = &imapc->pp;
 1294|  1.99k|  size_t nread = 0;
 1295|  1.99k|  (void)data;
 1296|       |
 1297|       |  /* Busy upgrading the connection; right now all I/O is SSL/TLS, not IMAP */
 1298|  1.99k|  if(imapc->state == IMAP_UPGRADETLS)
 1299|      0|    return imap_perform_upgrade_tls(data, conn);
 1300|       |
 1301|       |  /* Flush any data that needs to be sent */
 1302|  1.99k|  if(pp->sendleft)
 1303|      0|    return Curl_pp_flushsend(data, pp);
 1304|       |
 1305|  3.86k|  do {
 1306|       |    /* Read the response from the server */
 1307|  3.86k|    result = Curl_pp_readresp(data, sock, pp, &imapcode, &nread);
 1308|  3.86k|    if(result)
 1309|    882|      return result;
 1310|       |
 1311|       |    /* Was there an error parsing the response line? */
 1312|  2.98k|    if(imapcode == -1)
 1313|    297|      return CURLE_WEIRD_SERVER_REPLY;
 1314|       |
 1315|  2.69k|    if(!imapcode)
 1316|     28|      break;
 1317|       |
 1318|       |    /* We have now received a full IMAP server response */
 1319|  2.66k|    switch(imapc->state) {
 1320|    696|    case IMAP_SERVERGREET:
 1321|    696|      result = imap_state_servergreet_resp(data, imapcode, imapc->state);
 1322|    696|      break;
 1323|       |
 1324|    665|    case IMAP_CAPABILITY:
 1325|    665|      result = imap_state_capability_resp(data, imapcode, imapc->state);
 1326|    665|      break;
 1327|       |
 1328|      0|    case IMAP_STARTTLS:
 1329|      0|      result = imap_state_starttls_resp(data, imapcode, imapc->state);
 1330|      0|      break;
 1331|       |
 1332|      0|    case IMAP_AUTHENTICATE:
 1333|      0|      result = imap_state_auth_resp(data, conn, imapcode, imapc->state);
 1334|      0|      break;
 1335|       |
 1336|      5|    case IMAP_LOGIN:
 1337|      5|      result = imap_state_login_resp(data, imapcode, imapc->state);
 1338|      5|      break;
 1339|       |
 1340|    650|    case IMAP_LIST:
 1341|    653|    case IMAP_SEARCH:
 1342|    653|      result = imap_state_listsearch_resp(data, imapcode, imapc->state);
 1343|    653|      break;
 1344|       |
 1345|    585|    case IMAP_SELECT:
 1346|    585|      result = imap_state_select_resp(data, imapcode, imapc->state);
 1347|    585|      break;
 1348|       |
 1349|     12|    case IMAP_FETCH:
 1350|     12|      result = imap_state_fetch_resp(data, conn, imapcode, imapc->state);
 1351|     12|      break;
 1352|       |
 1353|      4|    case IMAP_FETCH_FINAL:
 1354|      4|      result = imap_state_fetch_final_resp(data, imapcode, imapc->state);
 1355|      4|      break;
 1356|       |
 1357|     31|    case IMAP_APPEND:
 1358|     31|      result = imap_state_append_resp(data, imapcode, imapc->state);
 1359|     31|      break;
 1360|       |
 1361|      2|    case IMAP_APPEND_FINAL:
 1362|      2|      result = imap_state_append_final_resp(data, imapcode, imapc->state);
 1363|      2|      break;
 1364|       |
 1365|      9|    case IMAP_LOGOUT:
 1366|       |      /* fallthrough, just stop! */
 1367|      9|    default:
 1368|       |      /* internal error */
 1369|      9|      state(data, IMAP_STOP);
 1370|      9|      break;
 1371|  2.66k|    }
 1372|  2.66k|  } while(!result && imapc->state != IMAP_STOP && Curl_pp_moredata(pp));
 1373|       |
 1374|    814|  return result;
 1375|  1.99k|}
imap.c:imap_perform_capability:
  435|    689|{
  436|    689|  CURLcode result = CURLE_OK;
  437|    689|  struct imap_conn *imapc = &conn->proto.imapc;
  438|    689|  imapc->sasl.authmechs = SASL_AUTH_NONE; /* No known auth. mechanisms yet */
  439|    689|  imapc->sasl.authused = SASL_AUTH_NONE;  /* Clear the auth. mechanism used */
  440|    689|  imapc->tls_supported = FALSE;           /* Clear the TLS capability */
  441|       |
  442|       |  /* Send the CAPABILITY command */
  443|    689|  result = imap_sendf(data, "CAPABILITY");
  444|       |
  445|    689|  if(!result)
  446|    689|    state(data, IMAP_CAPABILITY);
  447|       |
  448|    689|  return result;
  449|    689|}
imap.c:imap_sendf:
 1765|  1.92k|{
 1766|  1.92k|  CURLcode result = CURLE_OK;
 1767|  1.92k|  struct imap_conn *imapc = &data->conn->proto.imapc;
 1768|       |
 1769|  1.92k|  DEBUGASSERT(fmt);
 1770|       |
 1771|       |  /* Calculate the tag based on the connection ID and command ID */
 1772|  1.92k|  msnprintf(imapc->resptag, sizeof(imapc->resptag), "%c%03d",
 1773|  1.92k|            'A' + curlx_sltosi(data->conn->connection_id % 26),
 1774|  1.92k|            (++imapc->cmdid)%1000);
 1775|       |
 1776|       |  /* start with a blank buffer */
 1777|  1.92k|  Curl_dyn_reset(&imapc->dyn);
 1778|       |
 1779|       |  /* append tag + space + fmt */
 1780|  1.92k|  result = Curl_dyn_addf(&imapc->dyn, "%s %s", imapc->resptag, fmt);
 1781|  1.92k|  if(!result) {
 1782|  1.92k|    va_list ap;
 1783|  1.92k|    va_start(ap, fmt);
 1784|  1.92k|    result = Curl_pp_vsendf(data, &imapc->pp, Curl_dyn_ptr(&imapc->dyn), ap);
 1785|  1.92k|    va_end(ap);
 1786|  1.92k|  }
 1787|  1.92k|  return result;
 1788|  1.92k|}
imap.c:imap_state_servergreet_resp:
  869|    696|{
  870|    696|  struct connectdata *conn = data->conn;
  871|    696|  (void)instate; /* no use for this yet */
  872|       |
  873|    696|  if(imapcode == IMAP_RESP_PREAUTH) {
  874|       |    /* PREAUTH */
  875|      6|    struct imap_conn *imapc = &conn->proto.imapc;
  876|      6|    imapc->preauth = TRUE;
  877|      6|    infof(data, "PREAUTH connection, already authenticated!");
  878|      6|  }
  879|    690|  else if(imapcode != IMAP_RESP_OK) {
  880|      7|    failf(data, "Got unexpected imap-server response");
  881|      7|    return CURLE_WEIRD_SERVER_REPLY;
  882|      7|  }
  883|       |
  884|    689|  return imap_perform_capability(data, conn);
  885|    696|}
imap.c:imap_state_capability_resp:
  891|    665|{
  892|    665|  CURLcode result = CURLE_OK;
  893|    665|  struct connectdata *conn = data->conn;
  894|    665|  struct imap_conn *imapc = &conn->proto.imapc;
  895|    665|  const char *line = data->state.buffer;
  896|       |
  897|    665|  (void)instate; /* no use for this yet */
  898|       |
  899|       |  /* Do we have a untagged response? */
  900|    665|  if(imapcode == '*') {
  901|      0|    line += 2;
  902|       |
  903|       |    /* Loop through the data line */
  904|      0|    for(;;) {
  905|      0|      size_t wordlen;
  906|      0|      while(*line &&
  907|      0|            (*line == ' ' || *line == '\t' ||
  908|      0|              *line == '\r' || *line == '\n')) {
  909|       |
  910|      0|        line++;
  911|      0|      }
  912|       |
  913|      0|      if(!*line)
  914|      0|        break;
  915|       |
  916|       |      /* Extract the word */
  917|      0|      for(wordlen = 0; line[wordlen] && line[wordlen] != ' ' &&
  918|      0|            line[wordlen] != '\t' && line[wordlen] != '\r' &&
  919|      0|            line[wordlen] != '\n';)
  920|      0|        wordlen++;
  921|       |
  922|       |      /* Does the server support the STARTTLS capability? */
  923|      0|      if(wordlen == 8 && !memcmp(line, "STARTTLS", 8))
  924|      0|        imapc->tls_supported = TRUE;
  925|       |
  926|       |      /* Has the server explicitly disabled clear text authentication? */
  927|      0|      else if(wordlen == 13 && !memcmp(line, "LOGINDISABLED", 13))
  928|      0|        imapc->login_disabled = TRUE;
  929|       |
  930|       |      /* Does the server support the SASL-IR capability? */
  931|      0|      else if(wordlen == 7 && !memcmp(line, "SASL-IR", 7))
  932|      0|        imapc->ir_supported = TRUE;
  933|       |
  934|       |      /* Do we have a SASL based authentication mechanism? */
  935|      0|      else if(wordlen > 5 && !memcmp(line, "AUTH=", 5)) {
  936|      0|        size_t llen;
  937|      0|        unsigned short mechbit;
  938|       |
  939|      0|        line += 5;
  940|      0|        wordlen -= 5;
  941|       |
  942|       |        /* Test the word for a matching authentication mechanism */
  943|      0|        mechbit = Curl_sasl_decode_mech(line, wordlen, &llen);
  944|      0|        if(mechbit && llen == wordlen)
  945|      0|          imapc->sasl.authmechs |= mechbit;
  946|      0|      }
  947|       |
  948|      0|      line += wordlen;
  949|      0|    }
  950|      0|  }
  951|    665|  else if(data->set.use_ssl && !conn->ssl[FIRSTSOCKET].use) {
  952|       |    /* PREAUTH is not compatible with STARTTLS. */
  953|      0|    if(imapcode == IMAP_RESP_OK && imapc->tls_supported && !imapc->preauth) {
  954|       |      /* Switch to TLS connection now */
  955|      0|      result = imap_perform_starttls(data);
  956|      0|    }
  957|      0|    else if(data->set.use_ssl <= CURLUSESSL_TRY)
  958|      0|      result = imap_perform_authentication(data, conn);
  959|      0|    else {
  960|      0|      failf(data, "STARTTLS not available.");
  961|      0|      result = CURLE_USE_SSL_FAILED;
  962|      0|    }
  963|      0|  }
  964|    665|  else
  965|    665|    result = imap_perform_authentication(data, conn);
  966|       |
  967|    665|  return result;
  968|    665|}
imap.c:imap_perform_authentication:
  603|    665|{
  604|    665|  CURLcode result = CURLE_OK;
  605|    665|  struct imap_conn *imapc = &conn->proto.imapc;
  606|    665|  saslprogress progress;
  607|       |
  608|       |  /* Check if already authenticated OR if there is enough data to authenticate
  609|       |     with and end the connect phase if we don't */
  610|    665|  if(imapc->preauth ||
  611|    665|     !Curl_sasl_can_authenticate(&imapc->sasl, conn)) {
  612|    643|    state(data, IMAP_STOP);
  613|    643|    return result;
  614|    643|  }
  615|       |
  616|       |  /* Calculate the SASL login details */
  617|     22|  result = Curl_sasl_start(&imapc->sasl, data, imapc->ir_supported, &progress);
  618|       |
  619|     22|  if(!result) {
  620|     22|    if(progress == SASL_INPROGRESS)
  621|      0|      state(data, IMAP_AUTHENTICATE);
  622|     22|    else if(!imapc->login_disabled && (imapc->preftype & IMAP_TYPE_CLEARTEXT))
  623|       |      /* Perform clear text authentication */
  624|     22|      result = imap_perform_login(data, conn);
  625|      0|    else {
  626|       |      /* Other mechanisms not supported */
  627|      0|      infof(data, "No known authentication mechanisms supported!");
  628|      0|      result = CURLE_LOGIN_DENIED;
  629|      0|    }
  630|     22|  }
  631|       |
  632|     22|  return result;
  633|    665|}
imap.c:imap_perform_login:
  503|     22|{
  504|     22|  CURLcode result = CURLE_OK;
  505|     22|  char *user;
  506|     22|  char *passwd;
  507|       |
  508|       |  /* Check we have a username and password to authenticate with and end the
  509|       |     connect phase if we don't */
  510|     22|  if(!conn->bits.user_passwd) {
  511|      0|    state(data, IMAP_STOP);
  512|       |
  513|      0|    return result;
  514|      0|  }
  515|       |
  516|       |  /* Make sure the username and password are in the correct atom format */
  517|     22|  user = imap_atom(conn->user, false);
  518|     22|  passwd = imap_atom(conn->passwd, false);
  519|       |
  520|       |  /* Send the LOGIN command */
  521|     22|  result = imap_sendf(data, "LOGIN %s %s", user ? user : "",
  522|     22|                      passwd ? passwd : "");
  523|       |
  524|     22|  free(user);
  525|     22|  free(passwd);
  526|       |
  527|     22|  if(!result)
  528|     22|    state(data, IMAP_LOGIN);
  529|       |
  530|     22|  return result;
  531|     22|}
imap.c:imap_atom:
 1801|    489|{
 1802|       |  /* !checksrc! disable PARENBRACE 1 */
 1803|    489|  const char atom_specials[] = "(){ %*]";
 1804|    489|  const char *p1;
 1805|    489|  char *p2;
 1806|    489|  size_t backsp_count = 0;
 1807|    489|  size_t quote_count = 0;
 1808|    489|  bool others_exists = FALSE;
 1809|    489|  size_t newlen = 0;
 1810|    489|  char *newstr = NULL;
 1811|       |
 1812|    489|  if(!str)
 1813|      0|    return NULL;
 1814|       |
 1815|       |  /* Look for "atom-specials", counting the backslash and quote characters as
 1816|       |     these will need escaping */
 1817|    489|  p1 = str;
 1818|  27.8k|  while(*p1) {
 1819|  27.3k|    if(*p1 == '\\')
 1820|    124|      backsp_count++;
 1821|  27.2k|    else if(*p1 == '"')
 1822|    160|      quote_count++;
 1823|  27.1k|    else if(!escape_only) {
 1824|  6.89k|      const char *p3 = atom_specials;
 1825|       |
 1826|  28.7k|      while(*p3 && !others_exists) {
 1827|  21.8k|        if(*p1 == *p3)
 1828|     81|          others_exists = TRUE;
 1829|       |
 1830|  21.8k|        p3++;
 1831|  21.8k|      }
 1832|  6.89k|    }
 1833|       |
 1834|  27.3k|    p1++;
 1835|  27.3k|  }
 1836|       |
 1837|       |  /* Does the input contain any "atom-special" characters? */
 1838|    489|  if(!backsp_count && !quote_count && !others_exists)
 1839|    398|    return strdup(str);
 1840|       |
 1841|       |  /* Calculate the new string length */
 1842|     91|  newlen = strlen(str) + backsp_count + quote_count + (escape_only ? 0 : 2);
 1843|       |
 1844|       |  /* Allocate the new string */
 1845|     91|  newstr = (char *) malloc((newlen + 1) * sizeof(char));
 1846|     91|  if(!newstr)
 1847|      0|    return NULL;
 1848|       |
 1849|       |  /* Surround the string in quotes if necessary */
 1850|     91|  p2 = newstr;
 1851|     91|  if(!escape_only) {
 1852|     90|    newstr[0] = '"';
 1853|     90|    newstr[newlen - 1] = '"';
 1854|     90|    p2++;
 1855|     90|  }
 1856|       |
 1857|       |  /* Copy the string, escaping backslash and quote characters along the way */
 1858|     91|  p1 = str;
 1859|  4.86k|  while(*p1) {
 1860|  4.77k|    if(*p1 == '\\' || *p1 == '"') {
 1861|    284|      *p2 = '\\';
 1862|    284|      p2++;
 1863|    284|    }
 1864|       |
 1865|  4.77k|   *p2 = *p1;
 1866|       |
 1867|  4.77k|    p1++;
 1868|  4.77k|    p2++;
 1869|  4.77k|  }
 1870|       |
 1871|       |  /* Terminate the string */
 1872|     91|  newstr[newlen] = '\0';
 1873|       |
 1874|     91|  return newstr;
 1875|     91|}
imap.c:imap_state_login_resp:
 1036|      5|{
 1037|      5|  CURLcode result = CURLE_OK;
 1038|      5|  (void)instate; /* no use for this yet */
 1039|       |
 1040|      5|  if(imapcode != IMAP_RESP_OK) {
 1041|      1|    failf(data, "Access denied. %c", imapcode);
 1042|      1|    result = CURLE_LOGIN_DENIED;
 1043|      1|  }
 1044|      4|  else
 1045|       |    /* End of connect phase */
 1046|      4|    state(data, IMAP_STOP);
 1047|       |
 1048|      5|  return result;
 1049|      5|}
imap.c:imap_state_listsearch_resp:
 1055|    653|{
 1056|    653|  CURLcode result = CURLE_OK;
 1057|    653|  char *line = data->state.buffer;
 1058|    653|  size_t len = strlen(line);
 1059|       |
 1060|    653|  (void)instate; /* No use for this yet */
 1061|       |
 1062|    653|  if(imapcode == '*') {
 1063|       |    /* Temporarily add the LF character back and send as body to the client */
 1064|    626|    line[len] = '\n';
 1065|    626|    result = Curl_client_write(data, CLIENTWRITE_BODY, line, len + 1);
 1066|    626|    line[len] = '\0';
 1067|    626|  }
 1068|     27|  else if(imapcode != IMAP_RESP_OK)
 1069|      9|    result = CURLE_QUOTE_ERROR;
 1070|     18|  else
 1071|       |    /* End of DO phase */
 1072|     18|    state(data, IMAP_STOP);
 1073|       |
 1074|    653|  return result;
 1075|    653|}
imap.c:imap_state_select_resp:
 1080|    585|{
 1081|    585|  CURLcode result = CURLE_OK;
 1082|    585|  struct connectdata *conn = data->conn;
 1083|    585|  struct IMAP *imap = data->req.p.imap;
 1084|    585|  struct imap_conn *imapc = &conn->proto.imapc;
 1085|    585|  const char *line = data->state.buffer;
 1086|       |
 1087|    585|  (void)instate; /* no use for this yet */
 1088|       |
 1089|    585|  if(imapcode == '*') {
 1090|       |    /* See if this is an UIDVALIDITY response */
 1091|    548|    char tmp[20];
 1092|    548|    if(sscanf(line + 2, "OK [UIDVALIDITY %19[0123456789]]", tmp) == 1) {
 1093|      0|      Curl_safefree(imapc->mailbox_uidvalidity);
 1094|      0|      imapc->mailbox_uidvalidity = strdup(tmp);
 1095|      0|    }
 1096|    548|  }
 1097|     37|  else if(imapcode == IMAP_RESP_OK) {
 1098|       |    /* Check if the UIDVALIDITY has been specified and matches */
 1099|     34|    if(imap->uidvalidity && imapc->mailbox_uidvalidity &&
 1100|     34|       !strcasecompare(imap->uidvalidity, imapc->mailbox_uidvalidity)) {
 1101|      0|      failf(data, "Mailbox UIDVALIDITY has changed");
 1102|      0|      result = CURLE_REMOTE_FILE_NOT_FOUND;
 1103|      0|    }
 1104|     34|    else {
 1105|       |      /* Note the currently opened mailbox on this connection */
 1106|     34|      imapc->mailbox = strdup(imap->mailbox);
 1107|       |
 1108|     34|      if(imap->custom)
 1109|      1|        result = imap_perform_list(data);
 1110|     33|      else if(imap->query)
 1111|     12|        result = imap_perform_search(data);
 1112|     21|      else
 1113|     21|        result = imap_perform_fetch(data);
 1114|     34|    }
 1115|     34|  }
 1116|      3|  else {
 1117|      3|    failf(data, "Select failed");
 1118|      3|    result = CURLE_LOGIN_DENIED;
 1119|      3|  }
 1120|       |
 1121|    585|  return result;
 1122|    585|}
imap.c:imap_perform_list:
  642|    351|{
  643|    351|  CURLcode result = CURLE_OK;
  644|    351|  struct IMAP *imap = data->req.p.imap;
  645|       |
  646|    351|  if(imap->custom)
  647|       |    /* Send the custom request */
  648|     83|    result = imap_sendf(data, "%s%s", imap->custom,
  649|     83|                        imap->custom_params ? imap->custom_params : "");
  650|    268|  else {
  651|       |    /* Make sure the mailbox is in the correct atom format if necessary */
  652|    268|    char *mailbox = imap->mailbox ? imap_atom(imap->mailbox, true)
  653|    268|                                  : strdup("");
  654|    268|    if(!mailbox)
  655|      0|      return CURLE_OUT_OF_MEMORY;
  656|       |
  657|       |    /* Send the LIST command */
  658|    268|    result = imap_sendf(data, "LIST \"%s\" *", mailbox);
  659|       |
  660|    268|    free(mailbox);
  661|    268|  }
  662|       |
  663|    351|  if(!result)
  664|    351|    state(data, IMAP_LIST);
  665|       |
  666|    351|  return result;
  667|    351|}
imap.c:imap_perform_search:
  829|     12|{
  830|     12|  CURLcode result = CURLE_OK;
  831|     12|  struct IMAP *imap = data->req.p.imap;
  832|       |
  833|       |  /* Check we have a query string */
  834|     12|  if(!imap->query) {
  835|      0|    failf(data, "Cannot SEARCH without a query string.");
  836|      0|    return CURLE_URL_MALFORMAT;
  837|      0|  }
  838|       |
  839|       |  /* Send the SEARCH command */
  840|     12|  result = imap_sendf(data, "SEARCH %s", imap->query);
  841|       |
  842|     12|  if(!result)
  843|     12|    state(data, IMAP_SEARCH);
  844|       |
  845|     12|  return result;
  846|     12|}
imap.c:imap_perform_fetch:
  716|     21|{
  717|     21|  CURLcode result = CURLE_OK;
  718|     21|  struct IMAP *imap = data->req.p.imap;
  719|       |  /* Check we have a UID */
  720|     21|  if(imap->uid) {
  721|       |
  722|       |    /* Send the FETCH command */
  723|     21|    if(imap->partial)
  724|      0|      result = imap_sendf(data, "UID FETCH %s BODY[%s]<%s>",
  725|      0|                          imap->uid, imap->section ? imap->section : "",
  726|      0|                          imap->partial);
  727|     21|    else
  728|     21|      result = imap_sendf(data, "UID FETCH %s BODY[%s]",
  729|     21|                          imap->uid, imap->section ? imap->section : "");
  730|     21|  }
  731|      0|  else if(imap->mindex) {
  732|       |    /* Send the FETCH command */
  733|      0|    if(imap->partial)
  734|      0|      result = imap_sendf(data, "FETCH %s BODY[%s]<%s>",
  735|      0|                          imap->mindex, imap->section ? imap->section : "",
  736|      0|                          imap->partial);
  737|      0|    else
  738|      0|      result = imap_sendf(data, "FETCH %s BODY[%s]",
  739|      0|                          imap->mindex, imap->section ? imap->section : "");
  740|      0|  }
  741|      0|  else {
  742|      0|    failf(data, "Cannot FETCH without a UID.");
  743|      0|    return CURLE_URL_MALFORMAT;
  744|      0|  }
  745|     21|  if(!result)
  746|     21|    state(data, IMAP_FETCH);
  747|       |
  748|     21|  return result;
  749|     21|}
imap.c:imap_state_fetch_resp:
 1128|     12|{
 1129|     12|  CURLcode result = CURLE_OK;
 1130|     12|  struct imap_conn *imapc = &conn->proto.imapc;
 1131|     12|  struct pingpong *pp = &imapc->pp;
 1132|     12|  const char *ptr = data->state.buffer;
 1133|     12|  bool parsed = FALSE;
 1134|     12|  curl_off_t size = 0;
 1135|       |
 1136|     12|  (void)instate; /* no use for this yet */
 1137|       |
 1138|     12|  if(imapcode != '*') {
 1139|      2|    Curl_pgrsSetDownloadSize(data, -1);
 1140|      2|    state(data, IMAP_STOP);
 1141|      2|    return CURLE_REMOTE_FILE_NOT_FOUND;
 1142|      2|  }
 1143|       |
 1144|       |  /* Something like this is received "* 1 FETCH (BODY[TEXT] {2021}\r" so parse
 1145|       |     the continuation data contained within the curly brackets */
 1146|    235|  while(*ptr && (*ptr != '{'))
 1147|    225|    ptr++;
 1148|       |
 1149|     10|  if(*ptr == '{') {
 1150|      8|    char *endptr;
 1151|      8|    if(!curlx_strtoofft(ptr + 1, &endptr, 10, &size)) {
 1152|      7|      if(endptr - ptr > 1 && endptr[0] == '}' &&
 1153|      7|         endptr[1] == '\r' && endptr[2] == '\0')
 1154|      4|        parsed = TRUE;
 1155|      7|    }
 1156|      8|  }
 1157|       |
 1158|     10|  if(parsed) {
 1159|      4|    infof(data, "Found %" CURL_FORMAT_CURL_OFF_T " bytes to download",
 1160|      4|          size);
 1161|      4|    Curl_pgrsSetDownloadSize(data, size);
 1162|       |
 1163|      4|    if(pp->cache) {
 1164|       |      /* At this point there is a bunch of data in the header "cache" that is
 1165|       |         actually body content, send it as body and then skip it. Do note
 1166|       |         that there may even be additional "headers" after the body. */
 1167|      4|      size_t chunk = pp->cache_size;
 1168|       |
 1169|      4|      if(chunk > (size_t)size)
 1170|       |        /* The conversion from curl_off_t to size_t is always fine here */
 1171|      2|        chunk = (size_t)size;
 1172|       |
 1173|      4|      if(!chunk) {
 1174|       |        /* no size, we're done with the data */
 1175|      1|        state(data, IMAP_STOP);
 1176|      1|        return CURLE_OK;
 1177|      1|      }
 1178|      3|      result = Curl_client_write(data, CLIENTWRITE_BODY, pp->cache, chunk);
 1179|      3|      if(result)
 1180|      0|        return result;
 1181|       |
 1182|      3|      data->req.bytecount += chunk;
 1183|       |
 1184|      3|      infof(data, "Written %zu bytes, %" CURL_FORMAT_CURL_OFF_TU
 1185|      3|            " bytes are left for transfer", chunk, size - chunk);
 1186|       |
 1187|       |      /* Have we used the entire cache or just part of it?*/
 1188|      3|      if(pp->cache_size > chunk) {
 1189|       |        /* Only part of it so shrink the cache to fit the trailing data */
 1190|      1|        memmove(pp->cache, pp->cache + chunk, pp->cache_size - chunk);
 1191|      1|        pp->cache_size -= chunk;
 1192|      1|      }
 1193|      2|      else {
 1194|       |        /* Free the cache */
 1195|      2|        Curl_safefree(pp->cache);
 1196|       |
 1197|       |        /* Reset the cache size */
 1198|      2|        pp->cache_size = 0;
 1199|      2|      }
 1200|      3|    }
 1201|       |
 1202|      3|    if(data->req.bytecount == size)
 1203|       |      /* The entire data is already transferred! */
 1204|      2|      Curl_setup_transfer(data, -1, -1, FALSE, -1);
 1205|      1|    else {
 1206|       |      /* IMAP download */
 1207|      1|      data->req.maxdownload = size;
 1208|       |      /* force a recv/send check of this connection, as the data might've been
 1209|       |       read off the socket already */
 1210|      1|      data->conn->cselect_bits = CURL_CSELECT_IN;
 1211|      1|      Curl_setup_transfer(data, FIRSTSOCKET, size, FALSE, -1);
 1212|      1|    }
 1213|      3|  }
 1214|      6|  else {
 1215|       |    /* We don't know how to parse this line */
 1216|      6|    failf(data, "Failed to parse FETCH response.");
 1217|      6|    result = CURLE_WEIRD_SERVER_REPLY;
 1218|      6|  }
 1219|       |
 1220|       |  /* End of DO phase */
 1221|      9|  state(data, IMAP_STOP);
 1222|       |
 1223|      9|  return result;
 1224|     10|}
imap.c:imap_state_fetch_final_resp:
 1230|      4|{
 1231|      4|  CURLcode result = CURLE_OK;
 1232|       |
 1233|      4|  (void)instate; /* No use for this yet */
 1234|       |
 1235|      4|  if(imapcode != IMAP_RESP_OK)
 1236|      2|    result = CURLE_WEIRD_SERVER_REPLY;
 1237|      2|  else
 1238|       |    /* End of DONE phase */
 1239|      2|    state(data, IMAP_STOP);
 1240|       |
 1241|      4|  return result;
 1242|      4|}
imap.c:imap_state_append_resp:
 1247|     31|{
 1248|     31|  CURLcode result = CURLE_OK;
 1249|     31|  (void)instate; /* No use for this yet */
 1250|       |
 1251|     31|  if(imapcode != '+') {
 1252|      1|    result = CURLE_UPLOAD_FAILED;
 1253|      1|  }
 1254|     30|  else {
 1255|       |    /* Set the progress upload size */
 1256|     30|    Curl_pgrsSetUploadSize(data, data->state.infilesize);
 1257|       |
 1258|       |    /* IMAP upload */
 1259|     30|    Curl_setup_transfer(data, -1, -1, FALSE, FIRSTSOCKET);
 1260|       |
 1261|       |    /* End of DO phase */
 1262|     30|    state(data, IMAP_STOP);
 1263|     30|  }
 1264|       |
 1265|     31|  return result;
 1266|     31|}
imap.c:imap_state_append_final_resp:
 1272|      2|{
 1273|      2|  CURLcode result = CURLE_OK;
 1274|       |
 1275|      2|  (void)instate; /* No use for this yet */
 1276|       |
 1277|      2|  if(imapcode != IMAP_RESP_OK)
 1278|      1|    result = CURLE_UPLOAD_FAILED;
 1279|      1|  else
 1280|       |    /* End of DONE phase */
 1281|      1|    state(data, IMAP_STOP);
 1282|       |
 1283|      2|  return result;
 1284|      2|}
imap.c:imap_endofresp:
  259|  18.8k|{
  260|  18.8k|  struct IMAP *imap = data->req.p.imap;
  261|  18.8k|  struct imap_conn *imapc = &conn->proto.imapc;
  262|  18.8k|  const char *id = imapc->resptag;
  263|  18.8k|  size_t id_len = strlen(id);
  264|       |
  265|       |  /* Do we have a tagged command response? */
  266|  18.8k|  if(len >= id_len + 1 && !memcmp(id, line, id_len) && line[id_len] == ' ') {
  267|  1.44k|    line += id_len + 1;
  268|  1.44k|    len -= id_len + 1;
  269|       |
  270|  1.44k|    if(len >= 2 && !memcmp(line, "OK", 2))
  271|    758|      *resp = IMAP_RESP_OK;
  272|    690|    else if(len >= 7 && !memcmp(line, "PREAUTH", 7))
  273|     11|      *resp = IMAP_RESP_PREAUTH;
  274|    679|    else
  275|    679|      *resp = IMAP_RESP_NOT_OK;
  276|       |
  277|  1.44k|    return TRUE;
  278|  1.44k|  }
  279|       |
  280|       |  /* Do we have an untagged command response? */
  281|  17.4k|  if(len >= 2 && !memcmp("* ", line, 2)) {
  282|  5.66k|    switch(imapc->state) {
  283|       |      /* States which are interested in untagged responses */
  284|  1.87k|      case IMAP_CAPABILITY:
  285|  1.87k|        if(!imap_matchresp(line, len, "CAPABILITY"))
  286|  1.87k|          return FALSE;
  287|      0|        break;
  288|       |
  289|  2.38k|      case IMAP_LIST:
  290|  2.38k|        if((!imap->custom && !imap_matchresp(line, len, "LIST")) ||
  291|  2.38k|          (imap->custom && !imap_matchresp(line, len, imap->custom) &&
  292|  1.77k|           (!strcasecompare(imap->custom, "STORE") ||
  293|  1.67k|            !imap_matchresp(line, len, "FETCH")) &&
  294|  1.77k|           !strcasecompare(imap->custom, "SELECT") &&
  295|  1.77k|           !strcasecompare(imap->custom, "EXAMINE") &&
  296|  1.77k|           !strcasecompare(imap->custom, "SEARCH") &&
  297|  1.77k|           !strcasecompare(imap->custom, "EXPUNGE") &&
  298|  1.77k|           !strcasecompare(imap->custom, "LSUB") &&
  299|  1.77k|           !strcasecompare(imap->custom, "UID") &&
  300|  1.77k|           !strcasecompare(imap->custom, "GETQUOTAROOT") &&
  301|  1.77k|           !strcasecompare(imap->custom, "NOOP")))
  302|  1.75k|          return FALSE;
  303|    626|        break;
  304|       |
  305|    626|      case IMAP_SELECT:
  306|       |        /* SELECT is special in that its untagged responses do not have a
  307|       |           common prefix so accept anything! */
  308|    548|        break;
  309|       |
  310|     77|      case IMAP_FETCH:
  311|     77|        if(!imap_matchresp(line, len, "FETCH"))
  312|     67|          return FALSE;
  313|     10|        break;
  314|       |
  315|    266|      case IMAP_SEARCH:
  316|    266|        if(!imap_matchresp(line, len, "SEARCH"))
  317|    266|          return FALSE;
  318|      0|        break;
  319|       |
  320|       |      /* Ignore other untagged responses */
  321|    515|      default:
  322|    515|        return FALSE;
  323|  5.66k|    }
  324|       |
  325|  1.18k|    *resp = '*';
  326|  1.18k|    return TRUE;
  327|  5.66k|  }
  328|       |
  329|       |  /* Do we have a continuation response? This should be a + symbol followed by
  330|       |     a space and optionally some text as per RFC-3501 for the AUTHENTICATE and
  331|       |     APPEND commands and as outlined in Section 4. Examples of RFC-4959 but
  332|       |     some e-mail servers ignore this and only send a single + instead. */
  333|  11.7k|  if(imap && !imap->custom && ((len == 3 && line[0] == '+') ||
  334|  8.81k|     (len >= 2 && !memcmp("+ ", line, 2)))) {
  335|    327|    switch(imapc->state) {
  336|       |      /* States which are interested in continuation responses */
  337|      0|      case IMAP_AUTHENTICATE:
  338|     30|      case IMAP_APPEND:
  339|     30|        *resp = '+';
  340|     30|        break;
  341|       |
  342|    297|      default:
  343|    297|        failf(data, "Unexpected continuation response");
  344|    297|        *resp = -1;
  345|    297|        break;
  346|    327|    }
  347|       |
  348|    327|    return TRUE;
  349|    327|  }
  350|       |
  351|  11.4k|  return FALSE; /* Nothing for us */
  352|  11.7k|}
imap.c:imap_matchresp:
  220|  4.68k|{
  221|  4.68k|  const char *end = line + len;
  222|  4.68k|  size_t cmd_len = strlen(cmd);
  223|       |
  224|       |  /* Skip the untagged response marker */
  225|  4.68k|  line += 2;
  226|       |
  227|       |  /* Do we have a number after the marker? */
  228|  4.68k|  if(line < end && ISDIGIT(*line)) {
  229|       |    /* Skip the number */
  230|  1.84k|    do
  231|  4.28k|      line++;
  232|  4.28k|    while(line < end && ISDIGIT(*line));
  233|       |
  234|       |    /* Do we have the space character? */
  235|  1.84k|    if(line == end || *line != ' ')
  236|  1.72k|      return FALSE;
  237|       |
  238|    118|    line++;
  239|    118|  }
  240|       |
  241|       |  /* Does the command name match and is it followed by a space character or at
  242|       |     the end of line? */
  243|  2.95k|  if(line + cmd_len <= end && strncasecompare(line, cmd, cmd_len) &&
  244|  2.95k|     (line[cmd_len] == ' ' || line + cmd_len + 2 == end))
  245|    112|    return TRUE;
  246|       |
  247|  2.84k|  return FALSE;
  248|  2.95k|}
imap.c:imap_parse_url_options:
 1922|    744|{
 1923|    744|  CURLcode result = CURLE_OK;
 1924|    744|  struct imap_conn *imapc = &conn->proto.imapc;
 1925|    744|  const char *ptr = conn->options;
 1926|       |
 1927|    780|  while(!result && ptr && *ptr) {
 1928|     36|    const char *key = ptr;
 1929|     36|    const char *value;
 1930|       |
 1931|    768|    while(*ptr && *ptr != '=')
 1932|    732|        ptr++;
 1933|       |
 1934|     36|    value = ptr + 1;
 1935|       |
 1936|    323|    while(*ptr && *ptr != ';')
 1937|    287|      ptr++;
 1938|       |
 1939|     36|    if(strncasecompare(key, "AUTH=", 5))
 1940|     15|      result = Curl_sasl_parse_url_auth_option(&imapc->sasl,
 1941|     15|                                               value, ptr - value);
 1942|     21|    else
 1943|     21|      result = CURLE_URL_MALFORMAT;
 1944|       |
 1945|     36|    if(*ptr == ';')
 1946|     18|      ptr++;
 1947|     36|  }
 1948|       |
 1949|    744|  switch(imapc->sasl.prefmech) {
 1950|      2|  case SASL_AUTH_NONE:
 1951|      2|    imapc->preftype = IMAP_TYPE_NONE;
 1952|      2|    break;
 1953|    741|  case SASL_AUTH_DEFAULT:
 1954|    741|    imapc->preftype = IMAP_TYPE_ANY;
 1955|    741|    break;
 1956|      1|  default:
 1957|      1|    imapc->preftype = IMAP_TYPE_SASL;
 1958|      1|    break;
 1959|    744|  }
 1960|       |
 1961|    744|  return result;
 1962|    744|}
imap.c:state:
  395|  3.40k|{
  396|  3.40k|  struct imap_conn *imapc = &data->conn->proto.imapc;
  397|  3.40k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  398|       |  /* for debug purposes */
  399|  3.40k|  static const char * const names[]={
  400|  3.40k|    "STOP",
  401|  3.40k|    "SERVERGREET",
  402|  3.40k|    "CAPABILITY",
  403|  3.40k|    "STARTTLS",
  404|  3.40k|    "UPGRADETLS",
  405|  3.40k|    "AUTHENTICATE",
  406|  3.40k|    "LOGIN",
  407|  3.40k|    "LIST",
  408|  3.40k|    "SELECT",
  409|  3.40k|    "FETCH",
  410|  3.40k|    "FETCH_FINAL",
  411|  3.40k|    "APPEND",
  412|  3.40k|    "APPEND_FINAL",
  413|  3.40k|    "SEARCH",
  414|  3.40k|    "LOGOUT",
  415|       |    /* LAST */
  416|  3.40k|  };
  417|       |
  418|  3.40k|  if(imapc->state != newstate)
  419|  3.40k|    infof(data, "IMAP %p state change from %s to %s",
  420|  3.40k|          (void *)imapc, names[imapc->state], names[newstate]);
  421|  3.40k|#endif
  422|       |
  423|  3.40k|  imapc->state = newstate;
  424|  3.40k|}
imap.c:imap_done:
 1492|    744|{
 1493|    744|  CURLcode result = CURLE_OK;
 1494|    744|  struct connectdata *conn = data->conn;
 1495|    744|  struct IMAP *imap = data->req.p.imap;
 1496|       |
 1497|    744|  (void)premature;
 1498|       |
 1499|    744|  if(!imap)
 1500|      0|    return CURLE_OK;
 1501|       |
 1502|    744|  if(status) {
 1503|    687|    connclose(conn, "IMAP done with bad status"); /* marked for closure */
 1504|    687|    result = status;         /* use the already set error code */
 1505|    687|  }
 1506|     57|  else if(!data->set.connect_only && !imap->custom &&
 1507|     57|          (imap->uid || imap->mindex || data->set.upload ||
 1508|     55|          data->set.mimepost.kind != MIMEKIND_NONE)) {
 1509|       |    /* Handle responses after FETCH or APPEND transfer has finished */
 1510|       |
 1511|     37|    if(!data->set.upload && data->set.mimepost.kind == MIMEKIND_NONE)
 1512|      7|      state(data, IMAP_FETCH_FINAL);
 1513|     30|    else {
 1514|       |      /* End the APPEND command first by sending an empty line */
 1515|     30|      result = Curl_pp_sendf(data, &conn->proto.imapc.pp, "%s", "");
 1516|     30|      if(!result)
 1517|     30|        state(data, IMAP_APPEND_FINAL);
 1518|     30|    }
 1519|       |
 1520|       |    /* Run the state-machine */
 1521|     37|    if(!result)
 1522|     37|      result = imap_block_statemach(data, conn, FALSE);
 1523|     37|  }
 1524|       |
 1525|       |  /* Cleanup our per-request based variables */
 1526|    744|  Curl_safefree(imap->mailbox);
 1527|    744|  Curl_safefree(imap->uidvalidity);
 1528|    744|  Curl_safefree(imap->uid);
 1529|    744|  Curl_safefree(imap->mindex);
 1530|    744|  Curl_safefree(imap->section);
 1531|    744|  Curl_safefree(imap->partial);
 1532|    744|  Curl_safefree(imap->query);
 1533|    744|  Curl_safefree(imap->custom);
 1534|    744|  Curl_safefree(imap->custom_params);
 1535|       |
 1536|       |  /* Clear the transfer mode for the next request */
 1537|    744|  imap->transfer = PPTRANSFER_BODY;
 1538|       |
 1539|    744|  return result;
 1540|    744|}
imap.c:imap_block_statemach:
 1400|    680|{
 1401|    680|  CURLcode result = CURLE_OK;
 1402|    680|  struct imap_conn *imapc = &conn->proto.imapc;
 1403|       |
 1404|  1.37k|  while(imapc->state != IMAP_STOP && !result)
 1405|    695|    result = Curl_pp_statemach(data, &imapc->pp, TRUE, disconnecting);
 1406|       |
 1407|    680|  return result;
 1408|    680|}
imap.c:imap_do:
 1621|    647|{
 1622|    647|  CURLcode result = CURLE_OK;
 1623|    647|  *done = FALSE; /* default to false */
 1624|       |
 1625|       |  /* Parse the URL path */
 1626|    647|  result = imap_parse_url_path(data);
 1627|    647|  if(result)
 1628|    102|    return result;
 1629|       |
 1630|       |  /* Parse the custom request */
 1631|    545|  result = imap_parse_custom_request(data);
 1632|    545|  if(result)
 1633|      1|    return result;
 1634|       |
 1635|    544|  result = imap_regular_transfer(data, done);
 1636|       |
 1637|    544|  return result;
 1638|    545|}
imap.c:imap_parse_url_path:
 1972|    647|{
 1973|       |  /* The imap struct is already initialised in imap_connect() */
 1974|    647|  CURLcode result = CURLE_OK;
 1975|    647|  struct IMAP *imap = data->req.p.imap;
 1976|    647|  const char *begin = &data->state.up.path[1]; /* skip leading slash */
 1977|    647|  const char *ptr = begin;
 1978|       |
 1979|       |  /* See how much of the URL is a valid path and decode it */
 1980|  32.1k|  while(imap_is_bchar(*ptr))
 1981|  31.5k|    ptr++;
 1982|       |
 1983|    647|  if(ptr != begin) {
 1984|       |    /* Remove the trailing slash if present */
 1985|    540|    const char *end = ptr;
 1986|    540|    if(end > begin && end[-1] == '/')
 1987|     38|      end--;
 1988|       |
 1989|    540|    result = Curl_urldecode(data, begin, end - begin, &imap->mailbox, NULL,
 1990|    540|                            REJECT_CTRL);
 1991|    540|    if(result)
 1992|      2|      return result;
 1993|    540|  }
 1994|    107|  else
 1995|    107|    imap->mailbox = NULL;
 1996|       |
 1997|       |  /* There can be any number of parameters in the form ";NAME=VALUE" */
 1998|    682|  while(*ptr == ';') {
 1999|     70|    char *name;
 2000|     70|    char *value;
 2001|     70|    size_t valuelen;
 2002|       |
 2003|       |    /* Find the length of the name parameter */
 2004|     70|    begin = ++ptr;
 2005|    545|    while(*ptr && *ptr != '=')
 2006|    475|      ptr++;
 2007|       |
 2008|     70|    if(!*ptr)
 2009|      8|      return CURLE_URL_MALFORMAT;
 2010|       |
 2011|       |    /* Decode the name parameter */
 2012|     62|    result = Curl_urldecode(data, begin, ptr - begin, &name, NULL,
 2013|     62|                            REJECT_CTRL);
 2014|     62|    if(result)
 2015|      0|      return result;
 2016|       |
 2017|       |    /* Find the length of the value parameter */
 2018|     62|    begin = ++ptr;
 2019|  1.07k|    while(imap_is_bchar(*ptr))
 2020|  1.01k|      ptr++;
 2021|       |
 2022|       |    /* Decode the value parameter */
 2023|     62|    result = Curl_urldecode(data, begin, ptr - begin, &value, &valuelen,
 2024|     62|                            REJECT_CTRL);
 2025|     62|    if(result) {
 2026|      0|      free(name);
 2027|      0|      return result;
 2028|      0|    }
 2029|       |
 2030|     62|    DEBUGF(infof(data, "IMAP URL parameter '%s' = '%s'", name, value));
 2031|       |
 2032|       |    /* Process the known hierarchical parameters (UIDVALIDITY, UID, SECTION and
 2033|       |       PARTIAL) stripping of the trailing slash character if it is present.
 2034|       |
 2035|       |       Note: Unknown parameters trigger a URL_MALFORMAT error. */
 2036|     62|    if(strcasecompare(name, "UIDVALIDITY") && !imap->uidvalidity) {
 2037|      0|      if(valuelen > 0 && value[valuelen - 1] == '/')
 2038|      0|        value[valuelen - 1] = '\0';
 2039|       |
 2040|      0|      imap->uidvalidity = value;
 2041|      0|      value = NULL;
 2042|      0|    }
 2043|     62|    else if(strcasecompare(name, "UID") && !imap->uid) {
 2044|     37|      if(valuelen > 0 && value[valuelen - 1] == '/')
 2045|      4|        value[valuelen - 1] = '\0';
 2046|       |
 2047|     37|      imap->uid = value;
 2048|     37|      value = NULL;
 2049|     37|    }
 2050|     25|    else if(strcasecompare(name, "MAILINDEX") && !imap->mindex) {
 2051|      0|      if(valuelen > 0 && value[valuelen - 1] == '/')
 2052|      0|        value[valuelen - 1] = '\0';
 2053|       |
 2054|      0|      imap->mindex = value;
 2055|      0|      value = NULL;
 2056|      0|    }
 2057|     25|    else if(strcasecompare(name, "SECTION") && !imap->section) {
 2058|      0|      if(valuelen > 0 && value[valuelen - 1] == '/')
 2059|      0|        value[valuelen - 1] = '\0';
 2060|       |
 2061|      0|      imap->section = value;
 2062|      0|      value = NULL;
 2063|      0|    }
 2064|     25|    else if(strcasecompare(name, "PARTIAL") && !imap->partial) {
 2065|      0|      if(valuelen > 0 && value[valuelen - 1] == '/')
 2066|      0|        value[valuelen - 1] = '\0';
 2067|       |
 2068|      0|      imap->partial = value;
 2069|      0|      value = NULL;
 2070|      0|    }
 2071|     25|    else {
 2072|     25|      free(name);
 2073|     25|      free(value);
 2074|       |
 2075|     25|      return CURLE_URL_MALFORMAT;
 2076|     25|    }
 2077|       |
 2078|     37|    free(name);
 2079|     37|    free(value);
 2080|     37|  }
 2081|       |
 2082|       |  /* Does the URL contain a query parameter? Only valid when we have a mailbox
 2083|       |     and no UID as per RFC-5092 */
 2084|    612|  if(imap->mailbox && !imap->uid && !imap->mindex) {
 2085|       |    /* Get the query parameter, URL decoded */
 2086|    479|    (void)curl_url_get(data->state.uh, CURLUPART_QUERY, &imap->query,
 2087|    479|                       CURLU_URLDECODE);
 2088|    479|  }
 2089|       |
 2090|       |  /* Any extra stuff at the end of the URL is an error */
 2091|    612|  if(*ptr)
 2092|     67|    return CURLE_URL_MALFORMAT;
 2093|       |
 2094|    545|  return CURLE_OK;
 2095|    612|}
imap.c:imap_is_bchar:
 1885|  33.2k|{
 1886|  33.2k|  switch(ch) {
 1887|       |    /* bchar */
 1888|  1.58k|    case ':': case '@': case '/':
 1889|       |    /* bchar -> achar */
 1890|  2.19k|    case '&': case '=':
 1891|       |    /* bchar -> achar -> uchar -> unreserved */
 1892|  5.58k|    case '0': case '1': case '2': case '3': case '4': case '5': case '6':
 1893|  6.79k|    case '7': case '8': case '9':
 1894|  8.71k|    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
 1895|  10.2k|    case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
 1896|  12.2k|    case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
 1897|  13.3k|    case 'V': case 'W': case 'X': case 'Y': case 'Z':
 1898|  17.9k|    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
 1899|  20.7k|    case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
 1900|  26.8k|    case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
 1901|  28.1k|    case 'v': case 'w': case 'x': case 'y': case 'z':
 1902|  30.3k|    case '-': case '.': case '_': case '~':
 1903|       |    /* bchar -> achar -> uchar -> sub-delims-sh */
 1904|  32.1k|    case '!': case '$': case '\'': case '(': case ')': case '*':
 1905|  32.2k|    case '+': case ',':
 1906|       |    /* bchar -> achar -> uchar -> pct-encoded */
 1907|  32.5k|    case '%': /* HEXDIG chars are already included above */
 1908|  32.5k|      return true;
 1909|       |
 1910|    709|    default:
 1911|    709|      return false;
 1912|  33.2k|  }
 1913|  33.2k|}
imap.c:imap_parse_custom_request:
 2104|    545|{
 2105|    545|  CURLcode result = CURLE_OK;
 2106|    545|  struct IMAP *imap = data->req.p.imap;
 2107|    545|  const char *custom = data->set.str[STRING_CUSTOMREQUEST];
 2108|       |
 2109|    545|  if(custom) {
 2110|       |    /* URL decode the custom request */
 2111|    160|    result = Curl_urldecode(data, custom, 0, &imap->custom, NULL, REJECT_CTRL);
 2112|       |
 2113|       |    /* Extract the parameters if specified */
 2114|    160|    if(!result) {
 2115|    159|      const char *params = imap->custom;
 2116|       |
 2117|    700|      while(*params && *params != ' ')
 2118|    541|        params++;
 2119|       |
 2120|    159|      if(*params) {
 2121|      5|        imap->custom_params = strdup(params);
 2122|      5|        imap->custom[params - imap->custom] = '\0';
 2123|       |
 2124|      5|        if(!imap->custom_params)
 2125|      0|          result = CURLE_OUT_OF_MEMORY;
 2126|      5|      }
 2127|    159|    }
 2128|    160|  }
 2129|       |
 2130|    545|  return result;
 2131|    545|}
imap.c:imap_regular_transfer:
 1719|    544|{
 1720|    544|  CURLcode result = CURLE_OK;
 1721|    544|  bool connected = FALSE;
 1722|       |
 1723|       |  /* Make sure size is unknown at this point */
 1724|    544|  data->req.size = -1;
 1725|       |
 1726|       |  /* Set the progress data */
 1727|    544|  Curl_pgrsSetUploadCounter(data, 0);
 1728|    544|  Curl_pgrsSetDownloadCounter(data, 0);
 1729|    544|  Curl_pgrsSetUploadSize(data, -1);
 1730|    544|  Curl_pgrsSetDownloadSize(data, -1);
 1731|       |
 1732|       |  /* Carry out the perform */
 1733|    544|  result = imap_perform(data, &connected, dophase_done);
 1734|       |
 1735|       |  /* Perform post DO phase operations if necessary */
 1736|    544|  if(!result && *dophase_done)
 1737|     47|    result = imap_dophase_done(data, connected);
 1738|       |
 1739|    544|  return result;
 1740|    544|}
imap.c:imap_perform:
 1551|    544|{
 1552|       |  /* This is IMAP and no proxy */
 1553|    544|  CURLcode result = CURLE_OK;
 1554|    544|  struct connectdata *conn = data->conn;
 1555|    544|  struct IMAP *imap = data->req.p.imap;
 1556|    544|  struct imap_conn *imapc = &conn->proto.imapc;
 1557|    544|  bool selected = FALSE;
 1558|       |
 1559|    544|  DEBUGF(infof(data, "DO phase starts"));
 1560|       |
 1561|    544|  if(data->set.opt_no_body) {
 1562|       |    /* Requested no body means no transfer */
 1563|      1|    imap->transfer = PPTRANSFER_INFO;
 1564|      1|  }
 1565|       |
 1566|    544|  *dophase_done = FALSE; /* not done yet */
 1567|       |
 1568|       |  /* Determine if the requested mailbox (with the same UIDVALIDITY if set)
 1569|       |     has already been selected on this connection */
 1570|    544|  if(imap->mailbox && imapc->mailbox &&
 1571|    544|     strcasecompare(imap->mailbox, imapc->mailbox) &&
 1572|    544|     (!imap->uidvalidity || !imapc->mailbox_uidvalidity ||
 1573|      0|      strcasecompare(imap->uidvalidity, imapc->mailbox_uidvalidity)))
 1574|      0|    selected = TRUE;
 1575|       |
 1576|       |  /* Start the first command in the DO phase */
 1577|    544|  if(data->set.upload || data->set.mimepost.kind != MIMEKIND_NONE)
 1578|       |    /* APPEND can be executed directly */
 1579|     42|    result = imap_perform_append(data);
 1580|    502|  else if(imap->custom && (selected || !imap->mailbox))
 1581|       |    /* Custom command using the same mailbox or no mailbox */
 1582|     82|    result = imap_perform_list(data);
 1583|    420|  else if(!imap->custom && selected && (imap->uid || imap->mindex))
 1584|       |    /* FETCH from the same mailbox */
 1585|      0|    result = imap_perform_fetch(data);
 1586|    420|  else if(!imap->custom && selected && imap->query)
 1587|       |    /* SEARCH the current mailbox */
 1588|      0|    result = imap_perform_search(data);
 1589|    420|  else if(imap->mailbox && !selected &&
 1590|    420|         (imap->custom || imap->uid || imap->mindex || imap->query))
 1591|       |    /* SELECT the mailbox */
 1592|    152|    result = imap_perform_select(data);
 1593|    268|  else
 1594|       |    /* LIST */
 1595|    268|    result = imap_perform_list(data);
 1596|       |
 1597|    544|  if(result)
 1598|      3|    return result;
 1599|       |
 1600|       |  /* Run the state-machine */
 1601|    541|  result = imap_multi_statemach(data, dophase_done);
 1602|       |
 1603|    541|  *connected = conn->bits.tcpconnect[FIRSTSOCKET];
 1604|       |
 1605|    541|  if(*dophase_done)
 1606|     48|    DEBUGF(infof(data, "DO phase is complete"));
 1607|       |
 1608|    541|  return result;
 1609|    544|}
imap.c:imap_perform_append:
  758|     42|{
  759|     42|  CURLcode result = CURLE_OK;
  760|     42|  struct IMAP *imap = data->req.p.imap;
  761|     42|  char *mailbox;
  762|       |
  763|       |  /* Check we have a mailbox */
  764|     42|  if(!imap->mailbox) {
  765|      3|    failf(data, "Cannot APPEND without a mailbox.");
  766|      3|    return CURLE_URL_MALFORMAT;
  767|      3|  }
  768|       |
  769|       |  /* Prepare the mime data if some. */
  770|     39|  if(data->set.mimepost.kind != MIMEKIND_NONE) {
  771|       |    /* Use the whole structure as data. */
  772|     30|    data->set.mimepost.flags &= ~MIME_BODY_ONLY;
  773|       |
  774|       |    /* Add external headers and mime version. */
  775|     30|    curl_mime_headers(&data->set.mimepost, data->set.headers, 0);
  776|     30|    result = Curl_mime_prepare_headers(&data->set.mimepost, NULL,
  777|     30|                                       NULL, MIMESTRATEGY_MAIL);
  778|       |
  779|     30|    if(!result)
  780|     30|      if(!Curl_checkheaders(data, "Mime-Version"))
  781|     30|        result = Curl_mime_add_header(&data->set.mimepost.curlheaders,
  782|     30|                                      "Mime-Version: 1.0");
  783|       |
  784|       |    /* Make sure we will read the entire mime structure. */
  785|     30|    if(!result)
  786|     30|      result = Curl_mime_rewind(&data->set.mimepost);
  787|       |
  788|     30|    if(result)
  789|      0|      return result;
  790|       |
  791|     30|    data->state.infilesize = Curl_mime_size(&data->set.mimepost);
  792|       |
  793|       |    /* Read from mime structure. */
  794|     30|    data->state.fread_func = (curl_read_callback) Curl_mime_read;
  795|     30|    data->state.in = (void *) &data->set.mimepost;
  796|     30|  }
  797|       |
  798|       |  /* Check we know the size of the upload */
  799|     39|  if(data->state.infilesize < 0) {
  800|      0|    failf(data, "Cannot APPEND with unknown input file size");
  801|      0|    return CURLE_UPLOAD_FAILED;
  802|      0|  }
  803|       |
  804|       |  /* Make sure the mailbox is in the correct atom format */
  805|     39|  mailbox = imap_atom(imap->mailbox, false);
  806|     39|  if(!mailbox)
  807|      0|    return CURLE_OUT_OF_MEMORY;
  808|       |
  809|       |  /* Send the APPEND command */
  810|     39|  result = imap_sendf(data,
  811|     39|                      "APPEND %s (\\Seen) {%" CURL_FORMAT_CURL_OFF_T "}",
  812|     39|                      mailbox, data->state.infilesize);
  813|       |
  814|     39|  free(mailbox);
  815|       |
  816|     39|  if(!result)
  817|     39|    state(data, IMAP_APPEND);
  818|       |
  819|     39|  return result;
  820|     39|}
imap.c:imap_perform_select:
  676|    152|{
  677|    152|  CURLcode result = CURLE_OK;
  678|    152|  struct connectdata *conn = data->conn;
  679|    152|  struct IMAP *imap = data->req.p.imap;
  680|    152|  struct imap_conn *imapc = &conn->proto.imapc;
  681|    152|  char *mailbox;
  682|       |
  683|       |  /* Invalidate old information as we are switching mailboxes */
  684|    152|  Curl_safefree(imapc->mailbox);
  685|    152|  Curl_safefree(imapc->mailbox_uidvalidity);
  686|       |
  687|       |  /* Check we have a mailbox */
  688|    152|  if(!imap->mailbox) {
  689|      0|    failf(data, "Cannot SELECT without a mailbox.");
  690|      0|    return CURLE_URL_MALFORMAT;
  691|      0|  }
  692|       |
  693|       |  /* Make sure the mailbox is in the correct atom format */
  694|    152|  mailbox = imap_atom(imap->mailbox, false);
  695|    152|  if(!mailbox)
  696|      0|    return CURLE_OUT_OF_MEMORY;
  697|       |
  698|       |  /* Send the SELECT command */
  699|    152|  result = imap_sendf(data, "SELECT %s", mailbox);
  700|       |
  701|    152|  free(mailbox);
  702|       |
  703|    152|  if(!result)
  704|    152|    state(data, IMAP_SELECT);
  705|       |
  706|    152|  return result;
  707|    152|}
imap.c:imap_dophase_done:
 1680|     52|{
 1681|     52|  struct IMAP *imap = data->req.p.imap;
 1682|       |
 1683|     52|  (void)connected;
 1684|       |
 1685|     52|  if(imap->transfer != PPTRANSFER_BODY)
 1686|       |    /* no data to transfer */
 1687|      1|    Curl_setup_transfer(data, -1, -1, FALSE, -1);
 1688|       |
 1689|     52|  return CURLE_OK;
 1690|     52|}
imap.c:imap_disconnect:
 1649|    744|{
 1650|    744|  struct imap_conn *imapc = &conn->proto.imapc;
 1651|    744|  (void)data;
 1652|       |
 1653|       |  /* We cannot send quit unconditionally. If this connection is stale or
 1654|       |     bad in any way, sending quit and waiting around here will make the
 1655|       |     disconnect wait in vain and cause more problems than we need to. */
 1656|       |
 1657|       |  /* The IMAP session may or may not have been allocated/setup at this
 1658|       |     point! */
 1659|    744|  if(!dead_connection && conn->bits.protoconnstart) {
 1660|    643|    if(!imap_perform_logout(data))
 1661|    643|      (void)imap_block_statemach(data, conn, TRUE); /* ignore errors */
 1662|    643|  }
 1663|       |
 1664|       |  /* Disconnect from the server */
 1665|    744|  Curl_pp_disconnect(&imapc->pp);
 1666|    744|  Curl_dyn_free(&imapc->dyn);
 1667|       |
 1668|       |  /* Cleanup the SASL module */
 1669|    744|  Curl_sasl_cleanup(conn, imapc->sasl.authused);
 1670|       |
 1671|       |  /* Cleanup our connection based variables */
 1672|    744|  Curl_safefree(imapc->mailbox);
 1673|    744|  Curl_safefree(imapc->mailbox_uidvalidity);
 1674|       |
 1675|    744|  return CURLE_OK;
 1676|    744|}
imap.c:imap_perform_logout:
  855|    643|{
  856|       |  /* Send the LOGOUT command */
  857|    643|  CURLcode result = imap_sendf(data, "LOGOUT");
  858|       |
  859|    643|  if(!result)
  860|    643|    state(data, IMAP_LOGOUT);
  861|       |
  862|    643|  return result;
  863|    643|}
imap.c:imap_doing:
 1694|     44|{
 1695|     44|  CURLcode result = imap_multi_statemach(data, dophase_done);
 1696|       |
 1697|     44|  if(result)
 1698|     21|    DEBUGF(infof(data, "DO phase failed"));
 1699|     23|  else if(*dophase_done) {
 1700|      5|    result = imap_dophase_done(data, FALSE /* not connected */);
 1701|       |
 1702|      5|    DEBUGF(infof(data, "DO phase is complete"));
 1703|      5|  }
 1704|       |
 1705|     44|  return result;
 1706|     44|}
imap.c:imap_setup_connection:
 1744|    744|{
 1745|       |  /* Initialise the IMAP layer */
 1746|    744|  CURLcode result = imap_init(data);
 1747|    744|  if(result)
 1748|      0|    return result;
 1749|       |
 1750|       |  /* Clear the TLS upgraded flag */
 1751|    744|  conn->bits.tls_upgraded = FALSE;
 1752|       |
 1753|    744|  return CURLE_OK;
 1754|    744|}
imap.c:imap_init:
 1413|    744|{
 1414|    744|  CURLcode result = CURLE_OK;
 1415|    744|  struct IMAP *imap;
 1416|       |
 1417|    744|  imap = data->req.p.imap = calloc(sizeof(struct IMAP), 1);
 1418|    744|  if(!imap)
 1419|      0|    result = CURLE_OUT_OF_MEMORY;
 1420|       |
 1421|    744|  return result;
 1422|    744|}

Curl_llist_init:
   38|  3.03M|{
   39|  3.03M|  l->size = 0;
   40|  3.03M|  l->dtor = dtor;
   41|  3.03M|  l->head = NULL;
   42|  3.03M|  l->tail = NULL;
   43|  3.03M|}
Curl_llist_insert_next:
   60|  25.8k|{
   61|  25.8k|  ne->ptr = (void *) p;
   62|  25.8k|  if(list->size == 0) {
   63|  20.0k|    list->head = ne;
   64|  20.0k|    list->head->prev = NULL;
   65|  20.0k|    list->head->next = NULL;
   66|  20.0k|    list->tail = ne;
   67|  20.0k|  }
   68|  5.75k|  else {
   69|       |    /* if 'e' is NULL here, we insert the new element first in the list */
   70|  5.75k|    ne->next = e?e->next:list->head;
   71|  5.75k|    ne->prev = e;
   72|  5.75k|    if(!e) {
   73|     11|      list->head->prev = ne;
   74|     11|      list->head = ne;
   75|     11|    }
   76|  5.74k|    else if(e->next) {
   77|      4|      e->next->prev = ne;
   78|      4|    }
   79|  5.74k|    else {
   80|  5.74k|      list->tail = ne;
   81|  5.74k|    }
   82|  5.75k|    if(e)
   83|  5.74k|      e->next = ne;
   84|  5.75k|  }
   85|       |
   86|  25.8k|  ++list->size;
   87|  25.8k|}
Curl_llist_remove:
   95|  25.8k|{
   96|  25.8k|  void *ptr;
   97|  25.8k|  if(!e || list->size == 0)
   98|      0|    return;
   99|       |
  100|  25.8k|  if(e == list->head) {
  101|  21.1k|    list->head = e->next;
  102|       |
  103|  21.1k|    if(!list->head)
  104|  20.0k|      list->tail = NULL;
  105|  1.05k|    else
  106|  1.05k|      e->next->prev = NULL;
  107|  21.1k|  }
  108|  4.70k|  else {
  109|  4.70k|    if(e->prev)
  110|  4.70k|      e->prev->next = e->next;
  111|       |
  112|  4.70k|    if(!e->next)
  113|  4.60k|      list->tail = e->prev;
  114|    105|    else
  115|    105|      e->next->prev = e->prev;
  116|  4.70k|  }
  117|       |
  118|  25.8k|  ptr = e->ptr;
  119|       |
  120|  25.8k|  e->ptr  = NULL;
  121|  25.8k|  e->prev = NULL;
  122|  25.8k|  e->next = NULL;
  123|       |
  124|  25.8k|  --list->size;
  125|       |
  126|       |  /* call the dtor() last for when it actually frees the 'e' memory itself */
  127|  25.8k|  if(list->dtor)
  128|  8.38k|    list->dtor(user, ptr);
  129|  25.8k|}
Curl_llist_destroy:
  133|  3.04M|{
  134|  3.04M|  if(list) {
  135|  3.04M|    while(list->size > 0)
  136|  2.70k|      Curl_llist_remove(list, list->tail, user);
  137|  3.04M|  }
  138|  3.04M|}
Curl_llist_count:
  142|  8.71k|{
  143|  8.71k|  return list->size;
  144|  8.71k|}

Curl_md5it:
  561|    153|{
  562|    153|  MD5_CTX ctx;
  563|       |
  564|    153|  MD5_Init(&ctx);
  565|    153|  MD5_Update(&ctx, input, curlx_uztoui(len));
  566|    153|  MD5_Final(outbuffer, &ctx);
  567|    153|}
Curl_MD5_init:
  570|      5|{
  571|      5|  struct MD5_context *ctxt;
  572|       |
  573|       |  /* Create MD5 context */
  574|      5|  ctxt = malloc(sizeof(*ctxt));
  575|       |
  576|      5|  if(!ctxt)
  577|      0|    return ctxt;
  578|       |
  579|      5|  ctxt->md5_hashctx = malloc(md5params->md5_ctxtsize);
  580|       |
  581|      5|  if(!ctxt->md5_hashctx) {
  582|      0|    free(ctxt);
  583|      0|    return NULL;
  584|      0|  }
  585|       |
  586|      5|  ctxt->md5_hash = md5params;
  587|       |
  588|      5|  (*md5params->md5_init_func)(ctxt->md5_hashctx);
  589|       |
  590|      5|  return ctxt;
  591|      5|}
Curl_MD5_update:
  596|     10|{
  597|     10|  (*context->md5_hash->md5_update_func)(context->md5_hashctx, data, len);
  598|       |
  599|     10|  return CURLE_OK;
  600|     10|}
Curl_MD5_final:
  603|      5|{
  604|      5|  (*context->md5_hash->md5_final_func)(result, context->md5_hashctx);
  605|       |
  606|      5|  free(context->md5_hashctx);
  607|      5|  free(context);
  608|       |
  609|      5|  return CURLE_OK;
  610|      5|}

curl_dbg_malloc:
  131|  4.93M|{
  132|  4.93M|  struct memdebug *mem;
  133|  4.93M|  size_t size;
  134|       |
  135|  4.93M|  DEBUGASSERT(wantedsize != 0);
  136|       |
  137|  4.93M|  if(countcheck("malloc", line, source))
  138|      0|    return NULL;
  139|       |
  140|       |  /* alloc at least 64 bytes */
  141|  4.93M|  size = sizeof(struct memdebug) + wantedsize;
  142|       |
  143|  4.93M|  mem = (Curl_cmalloc)(size);
  144|  4.93M|  if(mem) {
  145|  4.93M|    mem->size = wantedsize;
  146|  4.93M|  }
  147|       |
  148|  4.93M|  if(source)
  149|  4.81M|    curl_dbg_log("MEM %s:%d malloc(%zu) = %p\n",
  150|  4.81M|                 source, line, wantedsize,
  151|  4.81M|                 mem ? (void *)mem->mem : (void *)0);
  152|       |
  153|  4.93M|  return (mem ? mem->mem : NULL);
  154|  4.93M|}
curl_dbg_calloc:
  158|  50.0k|{
  159|  50.0k|  struct memdebug *mem;
  160|  50.0k|  size_t size, user_size;
  161|       |
  162|  50.0k|  DEBUGASSERT(wanted_elements != 0);
  163|  50.0k|  DEBUGASSERT(wanted_size != 0);
  164|       |
  165|  50.0k|  if(countcheck("calloc", line, source))
  166|      0|    return NULL;
  167|       |
  168|       |  /* alloc at least 64 bytes */
  169|  50.0k|  user_size = wanted_size * wanted_elements;
  170|  50.0k|  size = sizeof(struct memdebug) + user_size;
  171|       |
  172|  50.0k|  mem = (Curl_ccalloc)(1, size);
  173|  50.0k|  if(mem)
  174|  50.0k|    mem->size = user_size;
  175|       |
  176|  50.0k|  if(source)
  177|  50.0k|    curl_dbg_log("MEM %s:%d calloc(%zu,%zu) = %p\n",
  178|  50.0k|                 source, line, wanted_elements, wanted_size,
  179|  50.0k|                 mem ? (void *)mem->mem : (void *)0);
  180|       |
  181|  50.0k|  return (mem ? mem->mem : NULL);
  182|  50.0k|}
curl_dbg_strdup:
  185|   119k|{
  186|   119k|  char *mem;
  187|   119k|  size_t len;
  188|       |
  189|   119k|  DEBUGASSERT(str != NULL);
  190|       |
  191|   119k|  if(countcheck("strdup", line, source))
  192|      0|    return NULL;
  193|       |
  194|   119k|  len = strlen(str) + 1;
  195|       |
  196|   119k|  mem = curl_dbg_malloc(len, 0, NULL); /* NULL prevents logging */
  197|   119k|  if(mem)
  198|   119k|    memcpy(mem, str, len);
  199|       |
  200|   119k|  if(source)
  201|   119k|    curl_dbg_log("MEM %s:%d strdup(%p) (%zu) = %p\n",
  202|   119k|                 source, line, (const void *)str, len, (const void *)mem);
  203|       |
  204|   119k|  return mem;
  205|   119k|}
curl_dbg_realloc:
  237|  4.76M|{
  238|  4.76M|  struct memdebug *mem = NULL;
  239|       |
  240|  4.76M|  size_t size = sizeof(struct memdebug) + wantedsize;
  241|       |
  242|  4.76M|  DEBUGASSERT(wantedsize != 0);
  243|       |
  244|  4.76M|  if(countcheck("realloc", line, source))
  245|      0|    return NULL;
  246|       |
  247|       |#ifdef __INTEL_COMPILER
  248|       |#  pragma warning(push)
  249|       |#  pragma warning(disable:1684)
  250|       |   /* 1684: conversion from pointer to same-sized integral type */
  251|       |#endif
  252|       |
  253|  4.76M|  if(ptr)
  254|  4.74M|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  255|       |
  256|       |#ifdef __INTEL_COMPILER
  257|       |#  pragma warning(pop)
  258|       |#endif
  259|       |
  260|  4.76M|  mem = (Curl_crealloc)(mem, size);
  261|  4.76M|  if(source)
  262|  4.76M|    curl_dbg_log("MEM %s:%d realloc(%p, %zu) = %p\n",
  263|  4.76M|                source, line, (void *)ptr, wantedsize,
  264|  4.76M|                mem ? (void *)mem->mem : (void *)0);
  265|       |
  266|  4.76M|  if(mem) {
  267|  4.76M|    mem->size = wantedsize;
  268|  4.76M|    return mem->mem;
  269|  4.76M|  }
  270|       |
  271|      0|  return NULL;
  272|  4.76M|}
curl_dbg_free:
  275|  6.24M|{
  276|  6.24M|  if(ptr) {
  277|  5.00M|    struct memdebug *mem;
  278|       |
  279|       |#ifdef __INTEL_COMPILER
  280|       |#  pragma warning(push)
  281|       |#  pragma warning(disable:1684)
  282|       |   /* 1684: conversion from pointer to same-sized integral type */
  283|       |#endif
  284|       |
  285|  5.00M|    mem = (void *)((char *)ptr - offsetof(struct memdebug, mem));
  286|       |
  287|       |#ifdef __INTEL_COMPILER
  288|       |#  pragma warning(pop)
  289|       |#endif
  290|       |
  291|       |    /* free for real */
  292|  5.00M|    (Curl_cfree)(mem);
  293|  5.00M|  }
  294|       |
  295|  6.24M|  if(source && ptr)
  296|  5.00M|    curl_dbg_log("MEM %s:%d free(%p)\n", source, line, (void *)ptr);
  297|  6.24M|}
curl_dbg_socket:
  301|  2.97k|{
  302|  2.97k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  303|  2.97k|    "FD %s:%d socket() = %d\n" :
  304|  2.97k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  305|      0|    "FD %s:%d socket() = %ld\n" :
  306|      0|    "FD %s:%d socket() = %zd\n";
  307|       |
  308|  2.97k|  curl_socket_t sockfd;
  309|       |
  310|  2.97k|  if(countcheck("socket", line, source))
  311|      0|    return CURL_SOCKET_BAD;
  312|       |
  313|  2.97k|  sockfd = socket(domain, type, protocol);
  314|       |
  315|  2.97k|  if(source && (sockfd != CURL_SOCKET_BAD))
  316|  2.97k|    curl_dbg_log(fmt, source, line, sockfd);
  317|       |
  318|  2.97k|  return sockfd;
  319|  2.97k|}
curl_dbg_send:
  325|  5.46k|{
  326|  5.46k|  SEND_TYPE_RETV rc;
  327|  5.46k|  if(countcheck("send", line, source))
  328|      0|    return -1;
  329|  5.46k|  rc = send(sockfd, buf, len, flags);
  330|  5.46k|  if(source)
  331|  5.46k|    curl_dbg_log("SEND %s:%d send(%lu) = %ld\n",
  332|  5.46k|                source, line, (unsigned long)len, (long)rc);
  333|  5.46k|  return rc;
  334|  5.46k|}
curl_dbg_recv:
  339|  4.74M|{
  340|  4.74M|  RECV_TYPE_RETV rc;
  341|  4.74M|  if(countcheck("recv", line, source))
  342|      0|    return -1;
  343|  4.74M|  rc = recv(sockfd, buf, len, flags);
  344|  4.74M|  if(source)
  345|  4.74M|    curl_dbg_log("RECV %s:%d recv(%lu) = %ld\n",
  346|  4.74M|                source, line, (unsigned long)len, (long)rc);
  347|  4.74M|  return rc;
  348|  4.74M|}
curl_dbg_socketpair:
  354|  2.98k|{
  355|  2.98k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  356|  2.98k|    "FD %s:%d socketpair() = %d %d\n" :
  357|  2.98k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  358|      0|    "FD %s:%d socketpair() = %ld %ld\n" :
  359|      0|    "FD %s:%d socketpair() = %zd %zd\n";
  360|       |
  361|  2.98k|  int res = socketpair(domain, type, protocol, socket_vector);
  362|       |
  363|  2.98k|  if(source && (0 == res))
  364|  2.98k|    curl_dbg_log(fmt, source, line, socket_vector[0], socket_vector[1]);
  365|       |
  366|  2.98k|  return res;
  367|  2.98k|}
curl_dbg_mark_sclose:
  392|  11.7k|{
  393|  11.7k|  const char *fmt = (sizeof(curl_socket_t) == sizeof(int)) ?
  394|  11.7k|    "FD %s:%d sclose(%d)\n":
  395|  11.7k|    (sizeof(curl_socket_t) == sizeof(long)) ?
  396|      0|    "FD %s:%d sclose(%ld)\n":
  397|      0|    "FD %s:%d sclose(%zd)\n";
  398|       |
  399|  11.7k|  if(source)
  400|  11.7k|    curl_dbg_log(fmt, source, line, sockfd);
  401|  11.7k|}
curl_dbg_sclose:
  405|  11.7k|{
  406|  11.7k|  int res = sclose(sockfd);
  407|  11.7k|  curl_dbg_mark_sclose(sockfd, line, source);
  408|  11.7k|  return res;
  409|  11.7k|}
curl_dbg_fopen:
  413|  2.97k|{
  414|  2.97k|  FILE *res = fopen(file, mode);
  415|       |
  416|  2.97k|  if(source)
  417|  2.97k|    curl_dbg_log("FILE %s:%d fopen(\"%s\",\"%s\") = %p\n",
  418|  2.97k|                source, line, file, mode, (void *)res);
  419|       |
  420|  2.97k|  return res;
  421|  2.97k|}
curl_dbg_fclose:
  434|  2.97k|{
  435|  2.97k|  int res;
  436|       |
  437|  2.97k|  DEBUGASSERT(file != NULL);
  438|       |
  439|  2.97k|  if(source)
  440|  2.97k|    curl_dbg_log("FILE %s:%d fclose(%p)\n",
  441|  2.97k|                 source, line, (void *)file);
  442|       |
  443|  2.97k|  res = fclose(file);
  444|       |
  445|  2.97k|  return res;
  446|  2.97k|}
curl_dbg_log:
  452|  19.5M|{
  453|  19.5M|  char *buf;
  454|  19.5M|  int nchars;
  455|  19.5M|  va_list ap;
  456|       |
  457|  19.5M|  if(!curl_dbg_logfile)
  458|  19.5M|    return;
  459|       |
  460|      0|  buf = (Curl_cmalloc)(LOGLINE_BUFSIZE);
  461|      0|  if(!buf)
  462|      0|    return;
  463|       |
  464|      0|  va_start(ap, format);
  465|      0|  nchars = mvsnprintf(buf, LOGLINE_BUFSIZE, format, ap);
  466|      0|  va_end(ap);
  467|       |
  468|      0|  if(nchars > LOGLINE_BUFSIZE - 1)
  469|      0|    nchars = LOGLINE_BUFSIZE - 1;
  470|       |
  471|      0|  if(nchars > 0)
  472|      0|    fwrite(buf, 1, (size_t)nchars, curl_dbg_logfile);
  473|       |
  474|      0|  (Curl_cfree)(buf);
  475|      0|}
memdebug.c:countcheck:
  106|  14.6M|{
  107|       |  /* if source is NULL, then the call is made internally and this check
  108|       |     should not be made */
  109|  14.6M|  if(memlimit && source) {
  110|      0|    if(!memsize) {
  111|       |      /* log to file */
  112|      0|      curl_dbg_log("LIMIT %s:%d %s reached memlimit\n",
  113|      0|                   source, line, func);
  114|       |      /* log to stderr also */
  115|      0|      fprintf(stderr, "LIMIT %s:%d %s reached memlimit\n",
  116|      0|              source, line, func);
  117|      0|      fflush(curl_dbg_logfile); /* because it might crash now */
  118|      0|      errno = ENOMEM;
  119|      0|      return TRUE; /* RETURN ERROR! */
  120|      0|    }
  121|      0|    else
  122|      0|      memsize--; /* countdown */
  123|       |
  124|       |
  125|      0|  }
  126|       |
  127|  14.6M|  return FALSE; /* allow this */
  128|  14.6M|}

Curl_mime_cleanpart:
 1200|  24.5k|{
 1201|  24.5k|  cleanup_part_content(part);
 1202|  24.5k|  curl_slist_free_all(part->curlheaders);
 1203|  24.5k|  if(part->flags & MIME_USERHEADERS_OWNER)
 1204|      0|    curl_slist_free_all(part->userheaders);
 1205|  24.5k|  Curl_safefree(part->mimetype);
 1206|  24.5k|  Curl_safefree(part->name);
 1207|  24.5k|  Curl_safefree(part->filename);
 1208|  24.5k|  Curl_mime_initpart(part, part->easy);
 1209|  24.5k|}
curl_mime_free:
 1213|    280|{
 1214|    280|  curl_mimepart *part;
 1215|       |
 1216|    280|  if(mime) {
 1217|    280|    mime_subparts_unbind(mime);  /* Be sure it's not referenced anymore. */
 1218|  17.5k|    while(mime->firstpart) {
 1219|  17.2k|      part = mime->firstpart;
 1220|  17.2k|      mime->firstpart = part->nextpart;
 1221|  17.2k|      Curl_mime_cleanpart(part);
 1222|  17.2k|      free(part);
 1223|  17.2k|    }
 1224|    280|    free(mime);
 1225|    280|  }
 1226|    280|}
curl_mime_init:
 1309|    280|{
 1310|    280|  curl_mime *mime;
 1311|       |
 1312|    280|  mime = (curl_mime *) malloc(sizeof(*mime));
 1313|       |
 1314|    280|  if(mime) {
 1315|    280|    mime->easy = easy;
 1316|    280|    mime->parent = NULL;
 1317|    280|    mime->firstpart = NULL;
 1318|    280|    mime->lastpart = NULL;
 1319|       |
 1320|    280|    memset(mime->boundary, '-', 24);
 1321|    280|    if(Curl_rand_hex(easy, (unsigned char *) &mime->boundary[24],
 1322|    280|                     MIME_RAND_BOUNDARY_CHARS + 1)) {
 1323|       |      /* failed to get random separator, bail out */
 1324|      0|      free(mime);
 1325|      0|      return NULL;
 1326|      0|    }
 1327|    280|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1328|    280|  }
 1329|       |
 1330|    280|  return mime;
 1331|    280|}
Curl_mime_initpart:
 1335|  48.9k|{
 1336|  48.9k|  memset((char *) part, 0, sizeof(*part));
 1337|  48.9k|  part->easy = easy;
 1338|  48.9k|  part->lastreadstatus = 1; /* Successful read status. */
 1339|  48.9k|  mimesetstate(&part->state, MIMESTATE_BEGIN, NULL);
 1340|  48.9k|}
curl_mime_addpart:
 1344|  17.2k|{
 1345|  17.2k|  curl_mimepart *part;
 1346|       |
 1347|  17.2k|  if(!mime)
 1348|      0|    return NULL;
 1349|       |
 1350|  17.2k|  part = (curl_mimepart *) malloc(sizeof(*part));
 1351|       |
 1352|  17.2k|  if(part) {
 1353|  17.2k|    Curl_mime_initpart(part, mime->easy);
 1354|  17.2k|    part->parent = mime;
 1355|       |
 1356|  17.2k|    if(mime->lastpart)
 1357|  16.9k|      mime->lastpart->nextpart = part;
 1358|    280|    else
 1359|    280|      mime->firstpart = part;
 1360|       |
 1361|  17.2k|    mime->lastpart = part;
 1362|  17.2k|  }
 1363|       |
 1364|  17.2k|  return part;
 1365|  17.2k|}
curl_mime_name:
 1369|    385|{
 1370|    385|  if(!part)
 1371|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1372|       |
 1373|    385|  Curl_safefree(part->name);
 1374|    385|  part->name = NULL;
 1375|       |
 1376|    385|  if(name) {
 1377|    385|    part->name = strdup(name);
 1378|    385|    if(!part->name)
 1379|      0|      return CURLE_OUT_OF_MEMORY;
 1380|    385|  }
 1381|       |
 1382|    385|  return CURLE_OK;
 1383|    385|}
curl_mime_data:
 1406|    481|{
 1407|    481|  if(!part)
 1408|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|       |
 1410|    481|  cleanup_part_content(part);
 1411|       |
 1412|    481|  if(data) {
 1413|    481|    if(datasize == CURL_ZERO_TERMINATED)
 1414|      0|      datasize = strlen(data);
 1415|       |
 1416|    481|    part->data = malloc(datasize + 1);
 1417|    481|    if(!part->data)
 1418|      0|      return CURLE_OUT_OF_MEMORY;
 1419|       |
 1420|    481|    part->datasize = datasize;
 1421|       |
 1422|    481|    if(datasize)
 1423|    274|      memcpy(part->data, data, datasize);
 1424|    481|    part->data[datasize] = '\0';    /* Set a null terminator as sentinel. */
 1425|       |
 1426|    481|    part->readfunc = mime_mem_read;
 1427|    481|    part->seekfunc = mime_mem_seek;
 1428|    481|    part->freefunc = mime_mem_free;
 1429|    481|    part->flags |= MIME_FAST_READ;
 1430|    481|    part->kind = MIMEKIND_DATA;
 1431|    481|  }
 1432|       |
 1433|    481|  return CURLE_OK;
 1434|    481|}
curl_mime_headers:
 1529|    363|{
 1530|    363|  if(!part)
 1531|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1532|       |
 1533|    363|  if(part->flags & MIME_USERHEADERS_OWNER) {
 1534|      0|    if(part->userheaders != headers)  /* Allow setting twice the same list. */
 1535|      0|      curl_slist_free_all(part->userheaders);
 1536|      0|    part->flags &= ~MIME_USERHEADERS_OWNER;
 1537|      0|  }
 1538|    363|  part->userheaders = headers;
 1539|    363|  if(headers && take_ownership)
 1540|      0|    part->flags |= MIME_USERHEADERS_OWNER;
 1541|    363|  return CURLE_OK;
 1542|    363|}
Curl_mime_set_subparts:
 1570|    244|{
 1571|    244|  curl_mime *root;
 1572|       |
 1573|    244|  if(!part)
 1574|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 1575|       |
 1576|       |  /* Accept setting twice the same subparts. */
 1577|    244|  if(part->kind == MIMEKIND_MULTIPART && part->arg == subparts)
 1578|      0|    return CURLE_OK;
 1579|       |
 1580|    244|  cleanup_part_content(part);
 1581|       |
 1582|    244|  if(subparts) {
 1583|       |    /* Must belong to the same data handle. */
 1584|    244|    if(part->easy && subparts->easy && part->easy != subparts->easy)
 1585|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1586|       |
 1587|       |    /* Should not have been attached already. */
 1588|    244|    if(subparts->parent)
 1589|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1590|       |
 1591|       |    /* Should not be the part's root. */
 1592|    244|    root = part->parent;
 1593|    244|    if(root) {
 1594|      0|      while(root->parent && root->parent->parent)
 1595|      0|        root = root->parent->parent;
 1596|      0|      if(subparts == root) {
 1597|      0|        if(part->easy)
 1598|      0|          failf(part->easy, "Can't add itself as a subpart!");
 1599|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
 1600|      0|      }
 1601|      0|    }
 1602|       |
 1603|    244|    subparts->parent = part;
 1604|       |    /* Subparts are processed internally: no read callback. */
 1605|    244|    part->seekfunc = mime_subparts_seek;
 1606|    244|    part->freefunc = take_ownership? mime_subparts_free: mime_subparts_unbind;
 1607|    244|    part->arg = subparts;
 1608|    244|    part->datasize = -1;
 1609|    244|    part->kind = MIMEKIND_MULTIPART;
 1610|    244|  }
 1611|       |
 1612|    244|  return CURLE_OK;
 1613|    244|}
Curl_mime_read:
 1624|    162|{
 1625|    162|  curl_mimepart *part = (curl_mimepart *) instream;
 1626|    162|  size_t ret;
 1627|    162|  bool hasread;
 1628|       |
 1629|    162|  (void) size;   /* Always 1. */
 1630|       |
 1631|    162|  do {
 1632|    162|    hasread = FALSE;
 1633|    162|    ret = readback_part(part, buffer, nitems, &hasread);
 1634|       |    /*
 1635|       |     * If this is not possible to get some data without calling more than
 1636|       |     * one read callback (probably because a content encoder is not able to
 1637|       |     * deliver a new bunch for the few data accumulated so far), force another
 1638|       |     * read until we get enough data or a special exit code.
 1639|       |     */
 1640|    162|  } while(ret == STOP_FILLING);
 1641|       |
 1642|    162|  return ret;
 1643|    162|}
Curl_mime_rewind:
 1647|    221|{
 1648|    221|  return mime_part_rewind(part) == CURL_SEEKFUNC_OK?
 1649|    217|         CURLE_OK: CURLE_SEND_FAIL_REWIND;
 1650|    221|}
Curl_mime_size:
 1693|  14.8k|{
 1694|  14.8k|  curl_off_t size;
 1695|       |
 1696|  14.8k|  if(part->kind == MIMEKIND_MULTIPART)
 1697|    211|    part->datasize = multipart_size(part->arg);
 1698|       |
 1699|  14.8k|  size = part->datasize;
 1700|       |
 1701|  14.8k|  if(part->encoder)
 1702|      0|    size = part->encoder->sizefunc(part);
 1703|       |
 1704|  14.8k|  if(size >= 0 && !(part->flags & MIME_BODY_ONLY)) {
 1705|       |    /* Compute total part size. */
 1706|  14.7k|    size += slist_size(part->curlheaders, 2, NULL);
 1707|  14.7k|    size += slist_size(part->userheaders, 2, "Content-Type");
 1708|  14.7k|    size += 2;    /* CRLF after headers. */
 1709|  14.7k|  }
 1710|  14.8k|  return size;
 1711|  14.8k|}
Curl_mime_add_header:
 1716|  2.85k|{
 1717|  2.85k|  struct curl_slist *hdr = NULL;
 1718|  2.85k|  char *s = NULL;
 1719|  2.85k|  va_list ap;
 1720|       |
 1721|  2.85k|  va_start(ap, fmt);
 1722|  2.85k|  s = curl_mvaprintf(fmt, ap);
 1723|  2.85k|  va_end(ap);
 1724|       |
 1725|  2.85k|  if(s) {
 1726|  2.85k|    hdr = Curl_slist_append_nodup(*slp, s);
 1727|  2.85k|    if(hdr)
 1728|  2.85k|      *slp = hdr;
 1729|      0|    else
 1730|      0|      free(s);
 1731|  2.85k|  }
 1732|       |
 1733|  2.85k|  return hdr? CURLE_OK: CURLE_OUT_OF_MEMORY;
 1734|  2.85k|}
Curl_mime_contenttype:
 1746|  14.6k|{
 1747|       |  /*
 1748|       |   * If no content type was specified, we scan through a few well-known
 1749|       |   * extensions and pick the first we match!
 1750|       |   */
 1751|  14.6k|  struct ContentType {
 1752|  14.6k|    const char *extension;
 1753|  14.6k|    const char *type;
 1754|  14.6k|  };
 1755|  14.6k|  static const struct ContentType ctts[] = {
 1756|  14.6k|    {".gif",  "image/gif"},
 1757|  14.6k|    {".jpg",  "image/jpeg"},
 1758|  14.6k|    {".jpeg", "image/jpeg"},
 1759|  14.6k|    {".png",  "image/png"},
 1760|  14.6k|    {".svg",  "image/svg+xml"},
 1761|  14.6k|    {".txt",  "text/plain"},
 1762|  14.6k|    {".htm",  "text/html"},
 1763|  14.6k|    {".html", "text/html"},
 1764|  14.6k|    {".pdf",  "application/pdf"},
 1765|  14.6k|    {".xml",  "application/xml"}
 1766|  14.6k|  };
 1767|       |
 1768|  14.6k|  if(filename) {
 1769|      0|    size_t len1 = strlen(filename);
 1770|      0|    const char *nameend = filename + len1;
 1771|      0|    unsigned int i;
 1772|       |
 1773|      0|    for(i = 0; i < sizeof(ctts) / sizeof(ctts[0]); i++) {
 1774|      0|      size_t len2 = strlen(ctts[i].extension);
 1775|       |
 1776|      0|      if(len1 >= len2 && strcasecompare(nameend - len2, ctts[i].extension))
 1777|      0|          return ctts[i].type;
 1778|      0|    }
 1779|      0|  }
 1780|  14.6k|  return NULL;
 1781|  14.6k|}
Curl_mime_prepare_headers:
 1804|  14.8k|{
 1805|  14.8k|  curl_mime *mime = NULL;
 1806|  14.8k|  const char *boundary = NULL;
 1807|  14.8k|  char *customct;
 1808|  14.8k|  const char *cte = NULL;
 1809|  14.8k|  CURLcode ret = CURLE_OK;
 1810|       |
 1811|       |  /* Get rid of previously prepared headers. */
 1812|  14.8k|  curl_slist_free_all(part->curlheaders);
 1813|  14.8k|  part->curlheaders = NULL;
 1814|       |
 1815|       |  /* Be sure we won't access old headers later. */
 1816|  14.8k|  if(part->state.state == MIMESTATE_CURLHEADERS)
 1817|      0|    mimesetstate(&part->state, MIMESTATE_CURLHEADERS, NULL);
 1818|       |
 1819|       |  /* Check if content type is specified. */
 1820|  14.8k|  customct = part->mimetype;
 1821|  14.8k|  if(!customct)
 1822|  14.8k|    customct = search_header(part->userheaders, "Content-Type");
 1823|  14.8k|  if(customct)
 1824|     27|    contenttype = customct;
 1825|       |
 1826|       |  /* If content type is not specified, try to determine it. */
 1827|  14.8k|  if(!contenttype) {
 1828|  14.7k|    switch(part->kind) {
 1829|     51|    case MIMEKIND_MULTIPART:
 1830|     51|      contenttype = MULTIPART_CONTENTTYPE_DEFAULT;
 1831|     51|      break;
 1832|      0|    case MIMEKIND_FILE:
 1833|      0|      contenttype = Curl_mime_contenttype(part->filename);
 1834|      0|      if(!contenttype)
 1835|      0|        contenttype = Curl_mime_contenttype(part->data);
 1836|      0|      if(!contenttype && part->filename)
 1837|      0|        contenttype = FILE_CONTENTTYPE_DEFAULT;
 1838|      0|      break;
 1839|  14.6k|    default:
 1840|  14.6k|      contenttype = Curl_mime_contenttype(part->filename);
 1841|  14.6k|      break;
 1842|  14.7k|    }
 1843|  14.7k|  }
 1844|       |
 1845|  14.8k|  if(part->kind == MIMEKIND_MULTIPART) {
 1846|    211|    mime = (curl_mime *) part->arg;
 1847|    211|    if(mime)
 1848|    211|      boundary = mime->boundary;
 1849|    211|  }
 1850|  14.6k|  else if(contenttype && !customct &&
 1851|  14.6k|          content_type_match(contenttype, "text/plain"))
 1852|      0|    if(strategy == MIMESTRATEGY_MAIL || !part->filename)
 1853|      0|      contenttype = NULL;
 1854|       |
 1855|       |  /* Issue content-disposition header only if not already set by caller. */
 1856|  14.8k|  if(!search_header(part->userheaders, "Content-Disposition")) {
 1857|  14.8k|    if(!disposition)
 1858|  12.3k|      if(part->filename || part->name ||
 1859|  12.3k|        (contenttype && !strncasecompare(contenttype, "multipart/", 10)))
 1860|     47|          disposition = DISPOSITION_DEFAULT;
 1861|  14.8k|    if(disposition && curl_strequal(disposition, "attachment") &&
 1862|  14.8k|     !part->name && !part->filename)
 1863|     27|      disposition = NULL;
 1864|  14.8k|    if(disposition) {
 1865|  2.58k|      char *name = NULL;
 1866|  2.58k|      char *filename = NULL;
 1867|       |
 1868|  2.58k|      if(part->name) {
 1869|    377|        name = escape_string(part->name);
 1870|    377|        if(!name)
 1871|      0|          ret = CURLE_OUT_OF_MEMORY;
 1872|    377|      }
 1873|  2.58k|      if(!ret && part->filename) {
 1874|      0|        filename = escape_string(part->filename);
 1875|      0|        if(!filename)
 1876|      0|          ret = CURLE_OUT_OF_MEMORY;
 1877|      0|      }
 1878|  2.58k|      if(!ret)
 1879|  2.58k|        ret = Curl_mime_add_header(&part->curlheaders,
 1880|  2.58k|                                   "Content-Disposition: %s%s%s%s%s%s%s",
 1881|  2.58k|                                   disposition,
 1882|  2.58k|                                   name? "; name=\"": "",
 1883|  2.58k|                                   name? name: "",
 1884|  2.58k|                                   name? "\"": "",
 1885|  2.58k|                                   filename? "; filename=\"": "",
 1886|  2.58k|                                   filename? filename: "",
 1887|  2.58k|                                   filename? "\"": "");
 1888|  2.58k|      Curl_safefree(name);
 1889|  2.58k|      Curl_safefree(filename);
 1890|  2.58k|      if(ret)
 1891|      0|        return ret;
 1892|  2.58k|      }
 1893|  14.8k|    }
 1894|       |
 1895|       |  /* Issue Content-Type header. */
 1896|  14.8k|  if(contenttype) {
 1897|    211|    ret = add_content_type(&part->curlheaders, contenttype, boundary);
 1898|    211|    if(ret)
 1899|      0|      return ret;
 1900|    211|  }
 1901|       |
 1902|       |  /* Content-Transfer-Encoding header. */
 1903|  14.8k|  if(!search_header(part->userheaders, "Content-Transfer-Encoding")) {
 1904|  14.8k|    if(part->encoder)
 1905|      0|      cte = part->encoder->name;
 1906|  14.8k|    else if(contenttype && strategy == MIMESTRATEGY_MAIL &&
 1907|  14.8k|     part->kind != MIMEKIND_MULTIPART)
 1908|      0|      cte = "8bit";
 1909|  14.8k|    if(cte) {
 1910|      0|      ret = Curl_mime_add_header(&part->curlheaders,
 1911|      0|                                 "Content-Transfer-Encoding: %s", cte);
 1912|      0|      if(ret)
 1913|      0|        return ret;
 1914|      0|    }
 1915|  14.8k|  }
 1916|       |
 1917|       |  /* If we were reading curl-generated headers, restart with new ones (this
 1918|       |     should not occur). */
 1919|  14.8k|  if(part->state.state == MIMESTATE_CURLHEADERS)
 1920|      0|    mimesetstate(&part->state, MIMESTATE_CURLHEADERS, part->curlheaders);
 1921|       |
 1922|       |  /* Process subparts. */
 1923|  14.8k|  if(part->kind == MIMEKIND_MULTIPART && mime) {
 1924|    211|    curl_mimepart *subpart;
 1925|       |
 1926|    211|    disposition = NULL;
 1927|    211|    if(content_type_match(contenttype, "multipart/form-data"))
 1928|    133|      disposition = "form-data";
 1929|  14.8k|    for(subpart = mime->firstpart; subpart; subpart = subpart->nextpart) {
 1930|  14.6k|      ret = Curl_mime_prepare_headers(subpart, NULL, disposition, strategy);
 1931|  14.6k|      if(ret)
 1932|      0|        return ret;
 1933|  14.6k|    }
 1934|    211|  }
 1935|  14.8k|  return ret;
 1936|  14.8k|}
mime.c:cleanup_part_content:
 1157|  25.5k|{
 1158|  25.5k|  if(part->freefunc)
 1159|    481|    part->freefunc(part->arg);
 1160|       |
 1161|  25.5k|  part->readfunc = NULL;
 1162|  25.5k|  part->seekfunc = NULL;
 1163|  25.5k|  part->freefunc = NULL;
 1164|  25.5k|  part->arg = (void *) part;          /* Defaults to part itself. */
 1165|  25.5k|  part->data = NULL;
 1166|  25.5k|  part->fp = NULL;
 1167|  25.5k|  part->datasize = (curl_off_t) 0;    /* No size yet. */
 1168|  25.5k|  cleanup_encoder_state(&part->encstate);
 1169|  25.5k|  part->kind = MIMEKIND_NONE;
 1170|  25.5k|  part->flags &= ~MIME_FAST_READ;
 1171|  25.5k|  part->lastreadstatus = 1; /* Successful read status. */
 1172|  25.5k|  part->state.state = MIMESTATE_BEGIN;
 1173|  25.5k|}
mime.c:cleanup_encoder_state:
  347|  38.4k|{
  348|  38.4k|  p->pos = 0;
  349|  38.4k|  p->bufbeg = 0;
  350|  38.4k|  p->bufend = 0;
  351|  38.4k|}
mime.c:mime_subparts_unbind:
 1188|    280|{
 1189|    280|  curl_mime *mime = (curl_mime *) ptr;
 1190|       |
 1191|    280|  if(mime && mime->parent) {
 1192|    244|    mime->parent->freefunc = NULL;  /* Be sure we won't be called again. */
 1193|    244|    cleanup_part_content(mime->parent);  /* Avoid dangling pointer in part. */
 1194|    244|    mime->parent = NULL;
 1195|    244|  }
 1196|    280|}
mime.c:mimesetstate:
  274|   166k|{
  275|   166k|  state->state = tok;
  276|   166k|  state->ptr = ptr;
  277|   166k|  state->offset = 0;
  278|   166k|}
mime.c:mime_mem_read:
  644|    272|{
  645|    272|  curl_mimepart *part = (curl_mimepart *) instream;
  646|    272|  size_t sz = curlx_sotouz(part->datasize - part->state.offset);
  647|    272|  (void) size;   /* Always 1.*/
  648|       |
  649|    272|  if(!nitems)
  650|      0|    return STOP_FILLING;
  651|       |
  652|    272|  if(sz > nitems)
  653|      0|    sz = nitems;
  654|       |
  655|    272|  if(sz)
  656|    272|    memcpy(buffer, part->data + curlx_sotouz(part->state.offset), sz);
  657|       |
  658|    272|  return sz;
  659|    272|}
mime.c:mime_mem_seek:
  662|     14|{
  663|     14|  curl_mimepart *part = (curl_mimepart *) instream;
  664|       |
  665|     14|  switch(whence) {
  666|      0|  case SEEK_CUR:
  667|      0|    offset += part->state.offset;
  668|      0|    break;
  669|      0|  case SEEK_END:
  670|      0|    offset += part->datasize;
  671|      0|    break;
  672|     14|  }
  673|       |
  674|     14|  if(offset < 0 || offset > part->datasize)
  675|      0|    return CURL_SEEKFUNC_FAIL;
  676|       |
  677|     14|  part->state.offset = offset;
  678|     14|  return CURL_SEEKFUNC_OK;
  679|     14|}
mime.c:mime_mem_free:
  682|    481|{
  683|    481|  Curl_safefree(((curl_mimepart *) ptr)->data);
  684|    481|}
mime.c:mime_subparts_seek:
 1132|     10|{
 1133|     10|  curl_mime *mime = (curl_mime *) instream;
 1134|     10|  curl_mimepart *part;
 1135|     10|  int result = CURL_SEEKFUNC_OK;
 1136|       |
 1137|     10|  if(whence != SEEK_SET || offset)
 1138|      0|    return CURL_SEEKFUNC_CANTSEEK;    /* Only support full rewind. */
 1139|       |
 1140|     10|  if(mime->state.state == MIMESTATE_BEGIN)
 1141|      0|   return CURL_SEEKFUNC_OK;           /* Already rewound. */
 1142|       |
 1143|     29|  for(part = mime->firstpart; part; part = part->nextpart) {
 1144|     19|    int res = mime_part_rewind(part);
 1145|     19|    if(res != CURL_SEEKFUNC_OK)
 1146|      5|      result = res;
 1147|     19|  }
 1148|       |
 1149|     10|  if(result == CURL_SEEKFUNC_OK)
 1150|      6|    mimesetstate(&mime->state, MIMESTATE_BEGIN, NULL);
 1151|       |
 1152|     10|  return result;
 1153|     10|}
mime.c:readback_part:
  902|  25.2k|{
  903|  25.2k|  size_t cursize = 0;
  904|       |#ifdef CURL_DOES_CONVERSIONS
  905|       |  char *convbuf = buffer;
  906|       |#endif
  907|       |
  908|       |  /* Readback from part. */
  909|       |
  910|   108k|  while(bufsize) {
  911|   108k|    size_t sz = 0;
  912|   108k|    struct curl_slist *hdr = (struct curl_slist *) part->state.ptr;
  913|   108k|    switch(part->state.state) {
  914|  12.5k|    case MIMESTATE_BEGIN:
  915|  12.5k|      mimesetstate(&part->state,
  916|  12.5k|                   (part->flags & MIME_BODY_ONLY)?
  917|  12.5k|                     MIMESTATE_BODY: MIMESTATE_CURLHEADERS,
  918|  12.5k|                   part->curlheaders);
  919|  12.5k|      break;
  920|  17.4k|    case MIMESTATE_USERHEADERS:
  921|  17.4k|      if(!hdr) {
  922|  12.5k|        mimesetstate(&part->state, MIMESTATE_EOH, NULL);
  923|  12.5k|        break;
  924|  12.5k|      }
  925|  4.91k|      if(match_header(hdr, "Content-Type", 12)) {
  926|     32|        mimesetstate(&part->state, MIMESTATE_USERHEADERS, hdr->next);
  927|     32|        break;
  928|     32|      }
  929|       |      /* FALLTHROUGH */
  930|  19.7k|    case MIMESTATE_CURLHEADERS:
  931|  19.7k|      if(!hdr)
  932|  12.5k|        mimesetstate(&part->state, MIMESTATE_USERHEADERS, part->userheaders);
  933|  7.12k|      else {
  934|  7.12k|        sz = readback_bytes(&part->state, buffer, bufsize,
  935|  7.12k|                            hdr->data, strlen(hdr->data), "\r\n");
  936|  7.12k|        if(!sz)
  937|  2.99k|          mimesetstate(&part->state, part->state.state, hdr->next);
  938|  7.12k|      }
  939|  19.7k|      break;
  940|  25.1k|    case MIMESTATE_EOH:
  941|  25.1k|      sz = readback_bytes(&part->state, buffer, bufsize, "\r\n", 2, "");
  942|  25.1k|      if(!sz)
  943|  12.5k|        mimesetstate(&part->state, MIMESTATE_BODY, NULL);
  944|  25.1k|      break;
  945|  12.6k|    case MIMESTATE_BODY:
  946|       |#ifdef CURL_DOES_CONVERSIONS
  947|       |      if(part->easy && convbuf < buffer) {
  948|       |        CURLcode result = Curl_convert_to_network(part->easy, convbuf,
  949|       |                                                  buffer - convbuf);
  950|       |        if(result)
  951|       |          return READ_ERROR;
  952|       |        convbuf = buffer;
  953|       |      }
  954|       |#endif
  955|  12.6k|      cleanup_encoder_state(&part->encstate);
  956|  12.6k|      mimesetstate(&part->state, MIMESTATE_CONTENT, NULL);
  957|  12.6k|      break;
  958|  13.1k|    case MIMESTATE_CONTENT:
  959|  13.1k|      if(part->encoder)
  960|      0|        sz = read_encoded_part_content(part, buffer, bufsize, hasread);
  961|  13.1k|      else
  962|  13.1k|        sz = read_part_content(part, buffer, bufsize, hasread);
  963|  13.1k|      switch(sz) {
  964|  12.6k|      case 0:
  965|  12.6k|        mimesetstate(&part->state, MIMESTATE_END, NULL);
  966|       |        /* Try sparing open file descriptors. */
  967|  12.6k|        if(part->kind == MIMEKIND_FILE && part->fp) {
  968|      0|          fclose(part->fp);
  969|      0|          part->fp = NULL;
  970|      0|        }
  971|       |        /* FALLTHROUGH */
  972|  12.6k|      case CURL_READFUNC_ABORT:
  973|  12.6k|      case CURL_READFUNC_PAUSE:
  974|  12.6k|      case READ_ERROR:
  975|  12.6k|      case STOP_FILLING:
  976|  12.6k|        return cursize? cursize: sz;
  977|  13.1k|      }
  978|    425|      break;
  979|  12.5k|    case MIMESTATE_END:
  980|  12.5k|      return cursize;
  981|      0|    default:
  982|      0|      break;    /* Other values not in part state. */
  983|   108k|    }
  984|       |
  985|       |    /* Bump buffer and counters according to read size. */
  986|  83.1k|    cursize += sz;
  987|  83.1k|    buffer += sz;
  988|  83.1k|    bufsize -= sz;
  989|  83.1k|  }
  990|       |
  991|       |#ifdef CURL_DOES_CONVERSIONS
  992|       |      if(part->easy && convbuf < buffer &&
  993|       |         part->state.state < MIMESTATE_BODY) {
  994|       |        CURLcode result = Curl_convert_to_network(part->easy, convbuf,
  995|       |                                                  buffer - convbuf);
  996|       |        if(result)
  997|       |          return READ_ERROR;
  998|       |      }
  999|       |#endif
 1000|       |
 1001|      4|  return cursize;
 1002|  25.2k|}
mime.c:match_header:
  309|  16.8k|{
  310|  16.8k|  char *value = NULL;
  311|       |
  312|  16.8k|  if(strncasecompare(hdr->data, lbl, len) && hdr->data[len] == ':')
  313|    110|    for(value = hdr->data + len + 1; *value == ' '; value++)
  314|     19|      ;
  315|  16.8k|  return value;
  316|  16.8k|}
mime.c:readback_bytes:
  748|  95.6k|{
  749|  95.6k|  size_t sz;
  750|  95.6k|  size_t offset = curlx_sotouz(state->offset);
  751|       |
  752|  95.6k|  if(numbytes > offset) {
  753|  39.0k|    sz = numbytes - offset;
  754|  39.0k|    bytes += offset;
  755|  39.0k|  }
  756|  56.5k|  else {
  757|  56.5k|    size_t tsz = strlen(trail);
  758|       |
  759|  56.5k|    sz = offset - numbytes;
  760|  56.5k|    if(sz >= tsz)
  761|  40.9k|      return 0;
  762|  15.6k|    bytes = trail + sz;
  763|  15.6k|    sz = tsz - sz;
  764|  15.6k|  }
  765|       |
  766|  54.7k|  if(sz > bufsize)
  767|      2|    sz = bufsize;
  768|       |
  769|  54.7k|  memcpy(buffer, bytes, sz);
  770|  54.7k|  state->offset += sz;
  771|  54.7k|  return sz;
  772|  95.6k|}
mime.c:read_part_content:
  777|  13.1k|{
  778|  13.1k|  size_t sz = 0;
  779|       |
  780|  13.1k|  switch(part->lastreadstatus) {
  781|      0|  case 0:
  782|      0|  case CURL_READFUNC_ABORT:
  783|      0|  case CURL_READFUNC_PAUSE:
  784|      0|  case READ_ERROR:
  785|      0|    return part->lastreadstatus;
  786|  13.1k|  default:
  787|  13.1k|    break;
  788|  13.1k|  }
  789|       |
  790|       |  /* If we can determine we are at end of part data, spare a read. */
  791|  13.1k|  if(part->datasize != (curl_off_t) -1 &&
  792|  13.1k|     part->state.offset >= part->datasize) {
  793|       |    /* sz is already zero. */
  794|  12.6k|  }
  795|    425|  else {
  796|    425|    switch(part->kind) {
  797|    153|    case MIMEKIND_MULTIPART:
  798|       |      /*
  799|       |       * Cannot be processed as other kinds since read function requires
  800|       |       * an additional parameter and is highly recursive.
  801|       |       */
  802|    153|       sz = mime_subparts_read(buffer, 1, bufsize, part->arg, hasread);
  803|    153|       break;
  804|      0|    case MIMEKIND_FILE:
  805|      0|      if(part->fp && feof(part->fp))
  806|      0|        break;  /* At EOF. */
  807|       |      /* FALLTHROUGH */
  808|    272|    default:
  809|    272|      if(part->readfunc) {
  810|    272|        if(!(part->flags & MIME_FAST_READ)) {
  811|      0|          if(*hasread)
  812|      0|            return STOP_FILLING;
  813|      0|          *hasread = TRUE;
  814|      0|        }
  815|    272|        sz = part->readfunc(buffer, 1, bufsize, part->arg);
  816|    272|      }
  817|    272|      break;
  818|    425|    }
  819|    425|  }
  820|       |
  821|  13.1k|  switch(sz) {
  822|      0|  case STOP_FILLING:
  823|      0|    break;
  824|  12.6k|  case 0:
  825|  12.6k|  case CURL_READFUNC_ABORT:
  826|  12.6k|  case CURL_READFUNC_PAUSE:
  827|  12.6k|  case READ_ERROR:
  828|  12.6k|    part->lastreadstatus = sz;
  829|  12.6k|    break;
  830|    425|  default:
  831|    425|    part->state.offset += sz;
  832|    425|    part->lastreadstatus = sz;
  833|    425|    break;
  834|  13.1k|  }
  835|       |
  836|  13.1k|  return sz;
  837|  13.1k|}
mime.c:mime_subparts_read:
 1007|    153|{
 1008|    153|  curl_mime *mime = (curl_mime *) instream;
 1009|    153|  size_t cursize = 0;
 1010|       |#ifdef CURL_DOES_CONVERSIONS
 1011|       |  char *convbuf = buffer;
 1012|       |#endif
 1013|       |
 1014|    153|  (void) size;   /* Always 1. */
 1015|       |
 1016|  88.8k|  while(nitems) {
 1017|  88.8k|    size_t sz = 0;
 1018|  88.8k|    curl_mimepart *part = mime->state.ptr;
 1019|  88.8k|    switch(mime->state.state) {
 1020|    151|    case MIMESTATE_BEGIN:
 1021|    151|    case MIMESTATE_BODY:
 1022|       |#ifdef CURL_DOES_CONVERSIONS
 1023|       |      convbuf = buffer;
 1024|       |#endif
 1025|    151|      mimesetstate(&mime->state, MIMESTATE_BOUNDARY1, mime->firstpart);
 1026|       |      /* The first boundary always follows the header termination empty line,
 1027|       |         so is always preceded by a CRLF. We can then spare 2 characters
 1028|       |         by skipping the leading CRLF in boundary. */
 1029|    151|      mime->state.offset += 2;
 1030|    151|      break;
 1031|  25.3k|    case MIMESTATE_BOUNDARY1:
 1032|  25.3k|      sz = readback_bytes(&mime->state, buffer, nitems, "\r\n--", 4, "");
 1033|  25.3k|      if(!sz)
 1034|  12.6k|        mimesetstate(&mime->state, MIMESTATE_BOUNDARY2, part);
 1035|  25.3k|      break;
 1036|  38.0k|    case MIMESTATE_BOUNDARY2:
 1037|  38.0k|      sz = readback_bytes(&mime->state, buffer, nitems, mime->boundary,
 1038|  38.0k|                          strlen(mime->boundary), part? "\r\n": "--\r\n");
 1039|  38.0k|      if(!sz) {
 1040|       |#ifdef CURL_DOES_CONVERSIONS
 1041|       |        if(mime->easy && convbuf < buffer) {
 1042|       |          CURLcode result = Curl_convert_to_network(mime->easy, convbuf,
 1043|       |                                                    buffer - convbuf);
 1044|       |          if(result)
 1045|       |            return READ_ERROR;
 1046|       |          convbuf = buffer;
 1047|       |        }
 1048|       |#endif
 1049|  12.6k|        mimesetstate(&mime->state, MIMESTATE_CONTENT, part);
 1050|  12.6k|      }
 1051|  38.0k|      break;
 1052|  25.2k|    case MIMESTATE_CONTENT:
 1053|  25.2k|      if(!part) {
 1054|    150|        mimesetstate(&mime->state, MIMESTATE_END, NULL);
 1055|    150|        break;
 1056|    150|      }
 1057|  25.0k|      sz = readback_part(part, buffer, nitems, hasread);
 1058|  25.0k|      switch(sz) {
 1059|      0|      case CURL_READFUNC_ABORT:
 1060|      0|      case CURL_READFUNC_PAUSE:
 1061|      0|      case READ_ERROR:
 1062|      0|      case STOP_FILLING:
 1063|      0|        return cursize? cursize: sz;
 1064|  12.5k|      case 0:
 1065|       |#ifdef CURL_DOES_CONVERSIONS
 1066|       |        convbuf = buffer;
 1067|       |#endif
 1068|  12.5k|        mimesetstate(&mime->state, MIMESTATE_BOUNDARY1, part->nextpart);
 1069|  12.5k|        break;
 1070|  25.0k|      }
 1071|  25.0k|      break;
 1072|  25.0k|    case MIMESTATE_END:
 1073|    150|      return cursize;
 1074|      0|    default:
 1075|      0|      break;    /* other values not used in mime state. */
 1076|  88.8k|    }
 1077|       |
 1078|       |    /* Bump buffer and counters according to read size. */
 1079|  88.7k|    cursize += sz;
 1080|  88.7k|    buffer += sz;
 1081|  88.7k|    nitems -= sz;
 1082|  88.7k|  }
 1083|       |
 1084|       |#ifdef CURL_DOES_CONVERSIONS
 1085|       |      if(mime->easy && convbuf < buffer &&
 1086|       |         mime->state.state <= MIMESTATE_CONTENT) {
 1087|       |        CURLcode result = Curl_convert_to_network(mime->easy, convbuf,
 1088|       |                                                  buffer - convbuf);
 1089|       |        if(result)
 1090|       |          return READ_ERROR;
 1091|       |      }
 1092|       |#endif
 1093|       |
 1094|      3|  return cursize;
 1095|    153|}
mime.c:mime_part_rewind:
 1098|    240|{
 1099|    240|  int res = CURL_SEEKFUNC_OK;
 1100|    240|  enum mimestate targetstate = MIMESTATE_BEGIN;
 1101|       |
 1102|    240|  if(part->flags & MIME_BODY_ONLY)
 1103|    162|    targetstate = MIMESTATE_BODY;
 1104|    240|  cleanup_encoder_state(&part->encstate);
 1105|    240|  if(part->state.state > targetstate) {
 1106|     29|    res = CURL_SEEKFUNC_CANTSEEK;
 1107|     29|    if(part->seekfunc) {
 1108|     24|      res = part->seekfunc(part->arg, (curl_off_t) 0, SEEK_SET);
 1109|     24|      switch(res) {
 1110|     20|      case CURL_SEEKFUNC_OK:
 1111|     20|      case CURL_SEEKFUNC_FAIL:
 1112|     24|      case CURL_SEEKFUNC_CANTSEEK:
 1113|     24|        break;
 1114|      0|      case -1:    /* For fseek() error. */
 1115|      0|        res = CURL_SEEKFUNC_CANTSEEK;
 1116|      0|        break;
 1117|      0|      default:
 1118|      0|        res = CURL_SEEKFUNC_FAIL;
 1119|      0|        break;
 1120|     24|      }
 1121|     24|    }
 1122|     29|  }
 1123|       |
 1124|    240|  if(res == CURL_SEEKFUNC_OK)
 1125|    231|    mimesetstate(&part->state, targetstate, NULL);
 1126|       |
 1127|    240|  part->lastreadstatus = 1; /* Successful read status. */
 1128|    240|  return res;
 1129|    240|}
mime.c:multipart_size:
 1667|    211|{
 1668|    211|  curl_off_t size;
 1669|    211|  size_t boundarysize;
 1670|    211|  curl_mimepart *part;
 1671|       |
 1672|    211|  if(!mime)
 1673|      0|    return 0;           /* Not present -> empty. */
 1674|       |
 1675|    211|  boundarysize = 4 + strlen(mime->boundary) + 2;
 1676|    211|  size = boundarysize;  /* Final boundary - CRLF after headers. */
 1677|       |
 1678|  14.8k|  for(part = mime->firstpart; part; part = part->nextpart) {
 1679|  14.6k|    curl_off_t sz = Curl_mime_size(part);
 1680|       |
 1681|  14.6k|    if(sz < 0)
 1682|      0|      size = sz;
 1683|       |
 1684|  14.6k|    if(size >= 0)
 1685|  14.6k|      size += boundarysize + sz;
 1686|  14.6k|  }
 1687|       |
 1688|    211|  return size;
 1689|    211|}
mime.c:slist_size:
 1655|  29.4k|{
 1656|  29.4k|  size_t size = 0;
 1657|  29.4k|  size_t skiplen = skip? strlen(skip): 0;
 1658|       |
 1659|  34.4k|  for(; s; s = s->next)
 1660|  5.00k|    if(!skip || !match_header(s, skip, skiplen))
 1661|  4.96k|      size += strlen(s->data) + overhead;
 1662|  29.4k|  return size;
 1663|  29.4k|}
mime.c:search_header:
  320|  44.6k|{
  321|  44.6k|  size_t len = strlen(hdr);
  322|  44.6k|  char *value = NULL;
  323|       |
  324|  54.2k|  for(; !value && hdrlist; hdrlist = hdrlist->next)
  325|  9.63k|    value = match_header(hdrlist, hdr, len);
  326|       |
  327|  44.6k|  return value;
  328|  44.6k|}
mime.c:content_type_match:
 1784|    211|{
 1785|    211|  size_t len = strlen(target);
 1786|       |
 1787|    211|  if(contenttype && strncasecompare(contenttype, target, len))
 1788|    133|    switch(contenttype[len]) {
 1789|    133|    case '\0':
 1790|    133|    case '\t':
 1791|    133|    case '\r':
 1792|    133|    case '\n':
 1793|    133|    case ' ':
 1794|    133|    case ';':
 1795|    133|      return TRUE;
 1796|    133|    }
 1797|     78|  return FALSE;
 1798|    211|}
mime.c:escape_string:
  283|    377|{
  284|    377|  size_t bytecount = 0;
  285|    377|  size_t i;
  286|    377|  char *dst;
  287|       |
  288|  1.73k|  for(i = 0; src[i]; i++)
  289|  1.35k|    if(src[i] == '"' || src[i] == '\\')
  290|    160|      bytecount++;
  291|       |
  292|    377|  bytecount += i;
  293|    377|  dst = malloc(bytecount + 1);
  294|    377|  if(!dst)
  295|      0|    return NULL;
  296|       |
  297|  1.73k|  for(i = 0; *src; src++) {
  298|  1.35k|    if(*src == '"' || *src == '\\')
  299|    160|      dst[i++] = '\\';
  300|  1.35k|    dst[i++] = *src;
  301|  1.35k|  }
  302|       |
  303|    377|  dst[i] = '\0';
  304|    377|  return dst;
  305|    377|}
mime.c:add_content_type:
 1739|    211|{
 1740|    211|  return Curl_mime_add_header(slp, "Content-Type: %s%s%s", type,
 1741|    211|                              boundary? "; boundary=": "",
 1742|    211|                              boundary? boundary: "");
 1743|    211|}

curl_mvsnprintf:
 1009|  42.7k|{
 1010|  42.7k|  int retcode;
 1011|  42.7k|  struct nsprintf info;
 1012|       |
 1013|  42.7k|  info.buffer = buffer;
 1014|  42.7k|  info.length = 0;
 1015|  42.7k|  info.max = maxlength;
 1016|       |
 1017|  42.7k|  retcode = dprintf_formatf(&info, addbyter, format, ap_save);
 1018|  42.7k|  if((retcode != -1) && info.max) {
 1019|       |    /* we terminate this with a zero byte */
 1020|  42.7k|    if(info.max == info.length) {
 1021|       |      /* we're at maximum, scrap the last letter */
 1022|      0|      info.buffer[-1] = 0;
 1023|      0|      retcode--; /* don't count the nul byte */
 1024|      0|    }
 1025|  42.7k|    else
 1026|  42.7k|      info.buffer[0] = 0;
 1027|  42.7k|  }
 1028|  42.7k|  return retcode;
 1029|  42.7k|}
curl_msnprintf:
 1032|  42.7k|{
 1033|  42.7k|  int retcode;
 1034|  42.7k|  va_list ap_save; /* argument pointer */
 1035|  42.7k|  va_start(ap_save, format);
 1036|  42.7k|  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
 1037|  42.7k|  va_end(ap_save);
 1038|  42.7k|  return retcode;
 1039|  42.7k|}
Curl_dyn_vprintf:
 1059|  10.2k|{
 1060|  10.2k|  int retcode;
 1061|  10.2k|  struct asprintf info;
 1062|  10.2k|  info.b = dyn;
 1063|  10.2k|  info.fail = 0;
 1064|       |
 1065|  10.2k|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1066|  10.2k|  if((-1 == retcode) || info.fail) {
 1067|      0|    Curl_dyn_free(info.b);
 1068|      0|    return 1;
 1069|      0|  }
 1070|  10.2k|  return 0;
 1071|  10.2k|}
curl_mvaprintf:
 1074|  12.6k|{
 1075|  12.6k|  int retcode;
 1076|  12.6k|  struct asprintf info;
 1077|  12.6k|  struct dynbuf dyn;
 1078|  12.6k|  info.b = &dyn;
 1079|  12.6k|  Curl_dyn_init(info.b, DYN_APRINTF);
 1080|  12.6k|  info.fail = 0;
 1081|       |
 1082|  12.6k|  retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);
 1083|  12.6k|  if((-1 == retcode) || info.fail) {
 1084|      0|    Curl_dyn_free(info.b);
 1085|      0|    return NULL;
 1086|      0|  }
 1087|  12.6k|  if(Curl_dyn_len(info.b))
 1088|  12.6k|    return Curl_dyn_ptr(info.b);
 1089|      0|  return strdup("");
 1090|  12.6k|}
curl_maprintf:
 1093|  9.71k|{
 1094|  9.71k|  va_list ap_save;
 1095|  9.71k|  char *s;
 1096|  9.71k|  va_start(ap_save, format);
 1097|  9.71k|  s = curl_mvaprintf(format, ap_save);
 1098|  9.71k|  va_end(ap_save);
 1099|  9.71k|  return s;
 1100|  9.71k|}
curl_mfprintf:
 1134|  1.74k|{
 1135|  1.74k|  int retcode;
 1136|  1.74k|  va_list ap_save; /* argument pointer */
 1137|  1.74k|  va_start(ap_save, format);
 1138|  1.74k|  retcode = dprintf_formatf(whereto, fputc, format, ap_save);
 1139|  1.74k|  va_end(ap_save);
 1140|  1.74k|  return retcode;
 1141|  1.74k|}
mprintf.c:dprintf_formatf:
  570|  67.3k|{
  571|       |  /* Base-36 digits for numbers.  */
  572|  67.3k|  const char *digits = lower_digits;
  573|       |
  574|       |  /* Pointer into the format string.  */
  575|  67.3k|  char *f;
  576|       |
  577|       |  /* Number of characters written.  */
  578|  67.3k|  int done = 0;
  579|       |
  580|  67.3k|  long param; /* current parameter to read */
  581|  67.3k|  long param_num = 0; /* parameter counter */
  582|       |
  583|  67.3k|  struct va_stack vto[MAX_PARAMETERS];
  584|  67.3k|  char *endpos[MAX_PARAMETERS];
  585|  67.3k|  char **end;
  586|  67.3k|  char work[BUFFSIZE];
  587|  67.3k|  struct va_stack *p;
  588|       |
  589|       |  /* 'workend' points to the final buffer byte position, but with an extra
  590|       |     byte as margin to avoid the (false?) warning Coverity gives us
  591|       |     otherwise */
  592|  67.3k|  char *workend = &work[sizeof(work) - 2];
  593|       |
  594|       |  /* Do the actual %-code parsing */
  595|  67.3k|  if(dprintf_Pass1(format, vto, endpos, ap_save))
  596|      0|    return -1;
  597|       |
  598|  67.3k|  end = &endpos[0]; /* the initial end-position from the list dprintf_Pass1()
  599|       |                       created for us */
  600|       |
  601|  67.3k|  f = (char *)format;
  602|   337k|  while(*f != '\0') {
  603|       |    /* Format spec modifiers.  */
  604|   270k|    int is_alt;
  605|       |
  606|       |    /* Width of a field.  */
  607|   270k|    long width;
  608|       |
  609|       |    /* Precision of a field.  */
  610|   270k|    long prec;
  611|       |
  612|       |    /* Decimal integer is negative.  */
  613|   270k|    int is_neg;
  614|       |
  615|       |    /* Base of a number to be written.  */
  616|   270k|    unsigned long base;
  617|       |
  618|       |    /* Integral values to be written.  */
  619|   270k|    mp_uintmax_t num;
  620|       |
  621|       |    /* Used to convert negative in positive.  */
  622|   270k|    mp_intmax_t signed_num;
  623|       |
  624|   270k|    char *w;
  625|       |
  626|   270k|    if(*f != '%') {
  627|       |      /* This isn't a format spec, so write everything out until the next one
  628|       |         OR end of string is reached.  */
  629|   198k|      do {
  630|   198k|        OUTCHAR(*f);
  631|   198k|      } while(*++f && ('%' != *f));
  632|  54.0k|      continue;
  633|  54.0k|    }
  634|       |
  635|   216k|    ++f;
  636|       |
  637|       |    /* Check for "%%".  Note that although the ANSI standard lists
  638|       |       '%' as a conversion specifier, it says "The complete format
  639|       |       specification shall be `%%'," so we can avoid all the width
  640|       |       and precision processing.  */
  641|   216k|    if(*f == '%') {
  642|  9.21k|      ++f;
  643|  9.21k|      OUTCHAR('%');
  644|  9.21k|      continue;
  645|  9.21k|    }
  646|       |
  647|       |    /* If this is a positional parameter, the position must follow immediately
  648|       |       after the %, thus create a %<num>$ sequence */
  649|   206k|    param = dprintf_DollarString(f, &f);
  650|       |
  651|   206k|    if(!param)
  652|   206k|      param = param_num;
  653|      0|    else
  654|      0|      --param;
  655|       |
  656|   206k|    param_num++; /* increase this always to allow "%2$s %1$s %s" and then the
  657|       |                    third %s will pick the 3rd argument */
  658|       |
  659|   206k|    p = &vto[param];
  660|       |
  661|       |    /* pick up the specified width */
  662|   206k|    if(p->flags & FLAGS_WIDTHPARAM) {
  663|      0|      width = (long)vto[p->width].data.num.as_signed;
  664|      0|      param_num++; /* since the width is extracted from a parameter, we
  665|       |                      must skip that to get to the next one properly */
  666|      0|      if(width < 0) {
  667|       |        /* "A negative field width is taken as a '-' flag followed by a
  668|       |           positive field width." */
  669|      0|        width = -width;
  670|      0|        p->flags |= FLAGS_LEFT;
  671|      0|        p->flags &= ~FLAGS_PAD_NIL;
  672|      0|      }
  673|      0|    }
  674|   206k|    else
  675|   206k|      width = p->width;
  676|       |
  677|       |    /* pick up the specified precision */
  678|   206k|    if(p->flags & FLAGS_PRECPARAM) {
  679|      1|      prec = (long)vto[p->precision].data.num.as_signed;
  680|      1|      param_num++; /* since the precision is extracted from a parameter, we
  681|       |                      must skip that to get to the next one properly */
  682|      1|      if(prec < 0)
  683|       |        /* "A negative precision is taken as if the precision were
  684|       |           omitted." */
  685|      0|        prec = -1;
  686|      1|    }
  687|   206k|    else if(p->flags & FLAGS_PREC)
  688|      0|      prec = p->precision;
  689|   206k|    else
  690|   206k|      prec = -1;
  691|       |
  692|   206k|    is_alt = (p->flags & FLAGS_ALT) ? 1 : 0;
  693|       |
  694|   206k|    switch(p->type) {
  695|  74.0k|    case FORMAT_INT:
  696|  74.0k|      num = p->data.num.as_unsigned;
  697|  74.0k|      if(p->flags & FLAGS_CHAR) {
  698|       |        /* Character.  */
  699|  27.8k|        if(!(p->flags & FLAGS_LEFT))
  700|  27.8k|          while(--width > 0)
  701|      0|            OUTCHAR(' ');
  702|  27.8k|        OUTCHAR((char) num);
  703|  27.8k|        if(p->flags & FLAGS_LEFT)
  704|      0|          while(--width > 0)
  705|      0|            OUTCHAR(' ');
  706|  27.8k|        break;
  707|  27.8k|      }
  708|  46.1k|      if(p->flags & FLAGS_OCTAL) {
  709|       |        /* Octal unsigned integer.  */
  710|      0|        base = 8;
  711|      0|        goto unsigned_number;
  712|      0|      }
  713|  46.1k|      else if(p->flags & FLAGS_HEX) {
  714|       |        /* Hexadecimal unsigned integer.  */
  715|       |
  716|  12.2k|        digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  717|  12.2k|        base = 16;
  718|  12.2k|        goto unsigned_number;
  719|  12.2k|      }
  720|  33.9k|      else if(p->flags & FLAGS_UNSIGNED) {
  721|       |        /* Decimal unsigned integer.  */
  722|  16.0k|        base = 10;
  723|  16.0k|        goto unsigned_number;
  724|  16.0k|      }
  725|       |
  726|       |      /* Decimal integer.  */
  727|  17.8k|      base = 10;
  728|       |
  729|  17.8k|      is_neg = (p->data.num.as_signed < (mp_intmax_t)0) ? 1 : 0;
  730|  17.8k|      if(is_neg) {
  731|       |        /* signed_num might fail to hold absolute negative minimum by 1 */
  732|      1|        signed_num = p->data.num.as_signed + (mp_intmax_t)1;
  733|      1|        signed_num = -signed_num;
  734|      1|        num = (mp_uintmax_t)signed_num;
  735|      1|        num += (mp_uintmax_t)1;
  736|      1|      }
  737|       |
  738|  17.8k|      goto number;
  739|       |
  740|  28.2k|      unsigned_number:
  741|       |      /* Unsigned number of base BASE.  */
  742|  28.2k|      is_neg = 0;
  743|       |
  744|  46.1k|      number:
  745|       |      /* Number of base BASE.  */
  746|       |
  747|       |      /* Supply a default precision if none was given.  */
  748|  46.1k|      if(prec == -1)
  749|  46.1k|        prec = 1;
  750|       |
  751|       |      /* Put the number in WORK.  */
  752|  46.1k|      w = workend;
  753|   145k|      while(num > 0) {
  754|  99.2k|        *w-- = digits[num % base];
  755|  99.2k|        num /= base;
  756|  99.2k|      }
  757|  46.1k|      width -= (long)(workend - w);
  758|  46.1k|      prec -= (long)(workend - w);
  759|       |
  760|  46.1k|      if(is_alt && base == 8 && prec <= 0) {
  761|      0|        *w-- = '0';
  762|      0|        --width;
  763|      0|      }
  764|       |
  765|  46.1k|      if(prec > 0) {
  766|  7.43k|        width -= prec;
  767|  14.8k|        while(prec-- > 0 && w >= work)
  768|  7.43k|          *w-- = '0';
  769|  7.43k|      }
  770|       |
  771|  46.1k|      if(is_alt && base == 16)
  772|      0|        width -= 2;
  773|       |
  774|  46.1k|      if(is_neg || (p->flags & FLAGS_SHOWSIGN) || (p->flags & FLAGS_SPACE))
  775|      1|        --width;
  776|       |
  777|  46.1k|      if(!(p->flags & FLAGS_LEFT) && !(p->flags & FLAGS_PAD_NIL))
  778|  31.8k|        while(width-- > 0)
  779|      0|          OUTCHAR(' ');
  780|       |
  781|  46.1k|      if(is_neg)
  782|      1|        OUTCHAR('-');
  783|  46.1k|      else if(p->flags & FLAGS_SHOWSIGN)
  784|      0|        OUTCHAR('+');
  785|  46.1k|      else if(p->flags & FLAGS_SPACE)
  786|      0|        OUTCHAR(' ');
  787|       |
  788|  46.1k|      if(is_alt && base == 16) {
  789|      0|        OUTCHAR('0');
  790|      0|        if(p->flags & FLAGS_UPPER)
  791|      0|          OUTCHAR('X');
  792|      0|        else
  793|      0|          OUTCHAR('x');
  794|      0|      }
  795|       |
  796|  46.1k|      if(!(p->flags & FLAGS_LEFT) && (p->flags & FLAGS_PAD_NIL))
  797|  19.4k|        while(width-- > 0)
  798|  5.09k|          OUTCHAR('0');
  799|       |
  800|       |      /* Write the number.  */
  801|   152k|      while(++w <= workend) {
  802|   106k|        OUTCHAR(*w);
  803|   106k|      }
  804|       |
  805|  46.1k|      if(p->flags & FLAGS_LEFT)
  806|      0|        while(width-- > 0)
  807|      0|          OUTCHAR(' ');
  808|  46.1k|      break;
  809|       |
  810|   132k|    case FORMAT_STRING:
  811|       |            /* String.  */
  812|   132k|      {
  813|   132k|        static const char null[] = "(nil)";
  814|   132k|        const char *str;
  815|   132k|        size_t len;
  816|       |
  817|   132k|        str = (char *) p->data.str;
  818|   132k|        if(!str) {
  819|       |          /* Write null[] if there's space.  */
  820|     32|          if(prec == -1 || prec >= (long) sizeof(null) - 1) {
  821|     32|            str = null;
  822|     32|            len = sizeof(null) - 1;
  823|       |            /* Disable quotes around (nil) */
  824|     32|            p->flags &= (~FLAGS_ALT);
  825|     32|          }
  826|      0|          else {
  827|      0|            str = "";
  828|      0|            len = 0;
  829|      0|          }
  830|     32|        }
  831|   132k|        else if(prec != -1)
  832|      1|          len = (size_t)prec;
  833|   132k|        else
  834|   132k|          len = strlen(str);
  835|       |
  836|   132k|        width -= (len > LONG_MAX) ? LONG_MAX : (long)len;
  837|       |
  838|   132k|        if(p->flags & FLAGS_ALT)
  839|      0|          OUTCHAR('"');
  840|       |
  841|   132k|        if(!(p->flags&FLAGS_LEFT))
  842|   132k|          while(width-- > 0)
  843|      0|            OUTCHAR(' ');
  844|       |
  845|  1.06M|        for(; len && *str; len--)
  846|   933k|          OUTCHAR(*str++);
  847|   132k|        if(p->flags&FLAGS_LEFT)
  848|      0|          while(width-- > 0)
  849|      0|            OUTCHAR(' ');
  850|       |
  851|   132k|        if(p->flags & FLAGS_ALT)
  852|      0|          OUTCHAR('"');
  853|   132k|      }
  854|   132k|      break;
  855|       |
  856|   132k|    case FORMAT_PTR:
  857|       |      /* Generic pointer.  */
  858|      0|      {
  859|      0|        void *ptr;
  860|      0|        ptr = (void *) p->data.ptr;
  861|      0|        if(ptr != NULL) {
  862|       |          /* If the pointer is not NULL, write it as a %#x spec.  */
  863|      0|          base = 16;
  864|      0|          digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;
  865|      0|          is_alt = 1;
  866|      0|          num = (size_t) ptr;
  867|      0|          is_neg = 0;
  868|      0|          goto number;
  869|      0|        }
  870|      0|        else {
  871|       |          /* Write "(nil)" for a nil pointer.  */
  872|      0|          static const char strnil[] = "(nil)";
  873|      0|          const char *point;
  874|       |
  875|      0|          width -= (long)(sizeof(strnil) - 1);
  876|      0|          if(p->flags & FLAGS_LEFT)
  877|      0|            while(width-- > 0)
  878|      0|              OUTCHAR(' ');
  879|      0|          for(point = strnil; *point != '\0'; ++point)
  880|      0|            OUTCHAR(*point);
  881|      0|          if(!(p->flags & FLAGS_LEFT))
  882|      0|            while(width-- > 0)
  883|      0|              OUTCHAR(' ');
  884|      0|        }
  885|      0|      }
  886|      0|      break;
  887|       |
  888|      0|    case FORMAT_DOUBLE:
  889|      0|      {
  890|      0|        char formatbuf[32]="%";
  891|      0|        char *fptr = &formatbuf[1];
  892|      0|        size_t left = sizeof(formatbuf)-strlen(formatbuf);
  893|      0|        int len;
  894|       |
  895|      0|        width = -1;
  896|      0|        if(p->flags & FLAGS_WIDTH)
  897|      0|          width = p->width;
  898|      0|        else if(p->flags & FLAGS_WIDTHPARAM)
  899|      0|          width = (long)vto[p->width].data.num.as_signed;
  900|       |
  901|      0|        prec = -1;
  902|      0|        if(p->flags & FLAGS_PREC)
  903|      0|          prec = p->precision;
  904|      0|        else if(p->flags & FLAGS_PRECPARAM)
  905|      0|          prec = (long)vto[p->precision].data.num.as_signed;
  906|       |
  907|      0|        if(p->flags & FLAGS_LEFT)
  908|      0|          *fptr++ = '-';
  909|      0|        if(p->flags & FLAGS_SHOWSIGN)
  910|      0|          *fptr++ = '+';
  911|      0|        if(p->flags & FLAGS_SPACE)
  912|      0|          *fptr++ = ' ';
  913|      0|        if(p->flags & FLAGS_ALT)
  914|      0|          *fptr++ = '#';
  915|       |
  916|      0|        *fptr = 0;
  917|       |
  918|      0|        if(width >= 0) {
  919|      0|          if(width >= (long)sizeof(work))
  920|      0|            width = sizeof(work)-1;
  921|       |          /* RECURSIVE USAGE */
  922|      0|          len = curl_msnprintf(fptr, left, "%ld", width);
  923|      0|          fptr += len;
  924|      0|          left -= len;
  925|      0|        }
  926|      0|        if(prec >= 0) {
  927|       |          /* for each digit in the integer part, we can have one less
  928|       |             precision */
  929|      0|          size_t maxprec = sizeof(work) - 2;
  930|      0|          double val = p->data.dnum;
  931|      0|          if(width > 0 && prec <= width)
  932|      0|            maxprec -= width;
  933|      0|          while(val >= 10.0) {
  934|      0|            val /= 10;
  935|      0|            maxprec--;
  936|      0|          }
  937|       |
  938|      0|          if(prec > (long)maxprec)
  939|      0|            prec = (long)maxprec-1;
  940|      0|          if(prec < 0)
  941|      0|            prec = 0;
  942|       |          /* RECURSIVE USAGE */
  943|      0|          len = curl_msnprintf(fptr, left, ".%ld", prec);
  944|      0|          fptr += len;
  945|      0|        }
  946|      0|        if(p->flags & FLAGS_LONG)
  947|      0|          *fptr++ = 'l';
  948|       |
  949|      0|        if(p->flags & FLAGS_FLOATE)
  950|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'E':'e');
  951|      0|        else if(p->flags & FLAGS_FLOATG)
  952|      0|          *fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'G' : 'g');
  953|      0|        else
  954|      0|          *fptr++ = 'f';
  955|       |
  956|      0|        *fptr = 0; /* and a final zero termination */
  957|       |
  958|       |        /* NOTE NOTE NOTE!! Not all sprintf implementations return number of
  959|       |           output characters */
  960|      0|        (sprintf)(work, formatbuf, p->data.dnum);
  961|      0|        DEBUGASSERT(strlen(work) <= sizeof(work));
  962|      0|        for(fptr = work; *fptr; fptr++)
  963|      0|          OUTCHAR(*fptr);
  964|      0|      }
  965|      0|      break;
  966|       |
  967|      0|    case FORMAT_INTPTR:
  968|       |      /* Answer the count of characters written.  */
  969|      0|#ifdef HAVE_LONG_LONG_TYPE
  970|      0|      if(p->flags & FLAGS_LONGLONG)
  971|      0|        *(LONG_LONG_TYPE *) p->data.ptr = (LONG_LONG_TYPE)done;
  972|      0|      else
  973|      0|#endif
  974|      0|        if(p->flags & FLAGS_LONG)
  975|      0|          *(long *) p->data.ptr = (long)done;
  976|      0|      else if(!(p->flags & FLAGS_SHORT))
  977|      0|        *(int *) p->data.ptr = (int)done;
  978|      0|      else
  979|      0|        *(short *) p->data.ptr = (short)done;
  980|      0|      break;
  981|       |
  982|      0|    default:
  983|      0|      break;
  984|   206k|    }
  985|   206k|    f = *end++; /* goto end of %-code */
  986|       |
  987|   206k|  }
  988|  67.3k|  return done;
  989|  67.3k|}
mprintf.c:dprintf_Pass1:
  230|  67.3k|{
  231|  67.3k|  char *fmt = (char *)format;
  232|  67.3k|  int param_num = 0;
  233|  67.3k|  long this_param;
  234|  67.3k|  long width;
  235|  67.3k|  long precision;
  236|  67.3k|  int flags;
  237|  67.3k|  long max_param = 0;
  238|  67.3k|  long i;
  239|       |
  240|   688k|  while(*fmt) {
  241|   621k|    if(*fmt++ == '%') {
  242|   216k|      if(*fmt == '%') {
  243|  9.21k|        fmt++;
  244|  9.21k|        continue; /* while */
  245|  9.21k|      }
  246|       |
  247|   206k|      flags = FLAGS_NEW;
  248|       |
  249|       |      /* Handle the positional case (N$) */
  250|       |
  251|   206k|      param_num++;
  252|       |
  253|   206k|      this_param = dprintf_DollarString(fmt, &fmt);
  254|   206k|      if(0 == this_param)
  255|       |        /* we got no positional, get the next counter */
  256|   206k|        this_param = param_num;
  257|       |
  258|   206k|      if(this_param > max_param)
  259|   206k|        max_param = this_param;
  260|       |
  261|       |      /*
  262|       |       * The parameter with number 'i' should be used. Next, we need
  263|       |       * to get SIZE and TYPE of the parameter. Add the information
  264|       |       * to our array.
  265|       |       */
  266|       |
  267|   206k|      width = 0;
  268|   206k|      precision = 0;
  269|       |
  270|       |      /* Handle the flags */
  271|       |
  272|   236k|      while(dprintf_IsQualifierNoDollar(fmt)) {
  273|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  274|       |        if(!strncmp(fmt, "I32", 3)) {
  275|       |          flags |= FLAGS_LONG;
  276|       |          fmt += 3;
  277|       |        }
  278|       |        else if(!strncmp(fmt, "I64", 3)) {
  279|       |          flags |= FLAGS_LONGLONG;
  280|       |          fmt += 3;
  281|       |        }
  282|       |        else
  283|       |#endif
  284|       |
  285|  29.5k|        switch(*fmt++) {
  286|      0|        case ' ':
  287|      0|          flags |= FLAGS_SPACE;
  288|      0|          break;
  289|      0|        case '+':
  290|      0|          flags |= FLAGS_SHOWSIGN;
  291|      0|          break;
  292|      0|        case '-':
  293|      0|          flags |= FLAGS_LEFT;
  294|      0|          flags &= ~FLAGS_PAD_NIL;
  295|      0|          break;
  296|      0|        case '#':
  297|      0|          flags |= FLAGS_ALT;
  298|      0|          break;
  299|      1|        case '.':
  300|      1|          if('*' == *fmt) {
  301|       |            /* The precision is picked from a specified parameter */
  302|       |
  303|      1|            flags |= FLAGS_PRECPARAM;
  304|      1|            fmt++;
  305|      1|            param_num++;
  306|       |
  307|      1|            i = dprintf_DollarString(fmt, &fmt);
  308|      1|            if(i)
  309|      0|              precision = i;
  310|      1|            else
  311|      1|              precision = param_num;
  312|       |
  313|      1|            if(precision > max_param)
  314|      1|              max_param = precision;
  315|      1|          }
  316|      0|          else {
  317|      0|            flags |= FLAGS_PREC;
  318|      0|            precision = strtol(fmt, &fmt, 10);
  319|      0|          }
  320|      1|          break;
  321|      0|        case 'h':
  322|      0|          flags |= FLAGS_SHORT;
  323|      0|          break;
  324|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  325|       |        case 'I':
  326|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  327|       |          flags |= FLAGS_LONGLONG;
  328|       |#else
  329|       |          flags |= FLAGS_LONG;
  330|       |#endif
  331|       |          break;
  332|       |#endif
  333|  15.1k|        case 'l':
  334|  15.1k|          if(flags & FLAGS_LONG)
  335|      0|            flags |= FLAGS_LONGLONG;
  336|  15.1k|          else
  337|  15.1k|            flags |= FLAGS_LONG;
  338|  15.1k|          break;
  339|      0|        case 'L':
  340|      0|          flags |= FLAGS_LONGDOUBLE;
  341|      0|          break;
  342|      0|        case 'q':
  343|      0|          flags |= FLAGS_LONGLONG;
  344|      0|          break;
  345|      2|        case 'z':
  346|       |          /* the code below generates a warning if -Wunreachable-code is
  347|       |             used */
  348|       |#if (SIZEOF_SIZE_T > SIZEOF_LONG)
  349|       |          flags |= FLAGS_LONGLONG;
  350|       |#else
  351|      2|          flags |= FLAGS_LONG;
  352|      2|#endif
  353|      2|          break;
  354|      0|        case 'O':
  355|       |#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
  356|       |          flags |= FLAGS_LONGLONG;
  357|       |#else
  358|      0|          flags |= FLAGS_LONG;
  359|      0|#endif
  360|      0|          break;
  361|  14.3k|        case '0':
  362|  14.3k|          if(!(flags & FLAGS_LEFT))
  363|  14.3k|            flags |= FLAGS_PAD_NIL;
  364|       |          /* FALLTHROUGH */
  365|  14.3k|        case '1': case '2': case '3': case '4':
  366|  14.3k|        case '5': case '6': case '7': case '8': case '9':
  367|  14.3k|          flags |= FLAGS_WIDTH;
  368|  14.3k|          width = strtol(fmt-1, &fmt, 10);
  369|  14.3k|          break;
  370|      0|        case '*':  /* Special case */
  371|      0|          flags |= FLAGS_WIDTHPARAM;
  372|      0|          param_num++;
  373|       |
  374|      0|          i = dprintf_DollarString(fmt, &fmt);
  375|      0|          if(i)
  376|      0|            width = i;
  377|      0|          else
  378|      0|            width = param_num;
  379|      0|          if(width > max_param)
  380|      0|            max_param = width;
  381|      0|          break;
  382|      0|        case '\0':
  383|      0|          fmt--;
  384|      0|        default:
  385|      0|          break;
  386|  29.5k|        }
  387|  29.5k|      } /* switch */
  388|       |
  389|       |      /* Handle the specifier */
  390|       |
  391|   206k|      i = this_param - 1;
  392|       |
  393|   206k|      if((i < 0) || (i >= MAX_PARAMETERS))
  394|       |        /* out of allowed range */
  395|      0|        return 1;
  396|       |
  397|   206k|      switch (*fmt) {
  398|      0|      case 'S':
  399|      0|        flags |= FLAGS_ALT;
  400|       |        /* FALLTHROUGH */
  401|   132k|      case 's':
  402|   132k|        vto[i].type = FORMAT_STRING;
  403|   132k|        break;
  404|      0|      case 'n':
  405|      0|        vto[i].type = FORMAT_INTPTR;
  406|      0|        break;
  407|      0|      case 'p':
  408|      0|        vto[i].type = FORMAT_PTR;
  409|      0|        break;
  410|  17.8k|      case 'd': case 'i':
  411|  17.8k|        vto[i].type = FORMAT_INT;
  412|  17.8k|        break;
  413|  16.0k|      case 'u':
  414|  16.0k|        vto[i].type = FORMAT_INT;
  415|  16.0k|        flags |= FLAGS_UNSIGNED;
  416|  16.0k|        break;
  417|      0|      case 'o':
  418|      0|        vto[i].type = FORMAT_INT;
  419|      0|        flags |= FLAGS_OCTAL;
  420|      0|        break;
  421|  12.0k|      case 'x':
  422|  12.0k|        vto[i].type = FORMAT_INT;
  423|  12.0k|        flags |= FLAGS_HEX|FLAGS_UNSIGNED;
  424|  12.0k|        break;
  425|    187|      case 'X':
  426|    187|        vto[i].type = FORMAT_INT;
  427|    187|        flags |= FLAGS_HEX|FLAGS_UPPER|FLAGS_UNSIGNED;
  428|    187|        break;
  429|  27.8k|      case 'c':
  430|  27.8k|        vto[i].type = FORMAT_INT;
  431|  27.8k|        flags |= FLAGS_CHAR;
  432|  27.8k|        break;
  433|      0|      case 'f':
  434|      0|        vto[i].type = FORMAT_DOUBLE;
  435|      0|        break;
  436|      0|      case 'e':
  437|      0|        vto[i].type = FORMAT_DOUBLE;
  438|      0|        flags |= FLAGS_FLOATE;
  439|      0|        break;
  440|      0|      case 'E':
  441|      0|        vto[i].type = FORMAT_DOUBLE;
  442|      0|        flags |= FLAGS_FLOATE|FLAGS_UPPER;
  443|      0|        break;
  444|      0|      case 'g':
  445|      0|        vto[i].type = FORMAT_DOUBLE;
  446|      0|        flags |= FLAGS_FLOATG;
  447|      0|        break;
  448|      0|      case 'G':
  449|      0|        vto[i].type = FORMAT_DOUBLE;
  450|      0|        flags |= FLAGS_FLOATG|FLAGS_UPPER;
  451|      0|        break;
  452|      0|      default:
  453|      0|        vto[i].type = FORMAT_UNKNOWN;
  454|      0|        break;
  455|   206k|      } /* switch */
  456|       |
  457|   206k|      vto[i].flags = flags;
  458|   206k|      vto[i].width = width;
  459|   206k|      vto[i].precision = precision;
  460|       |
  461|   206k|      if(flags & FLAGS_WIDTHPARAM) {
  462|       |        /* we have the width specified from a parameter, so we make that
  463|       |           parameter's info setup properly */
  464|      0|        long k = width - 1;
  465|      0|        if((k < 0) || (k >= MAX_PARAMETERS))
  466|       |          /* out of allowed range */
  467|      0|          return 1;
  468|      0|        vto[i].width = k;
  469|      0|        vto[k].type = FORMAT_WIDTH;
  470|      0|        vto[k].flags = FLAGS_NEW;
  471|       |        /* can't use width or precision of width! */
  472|      0|        vto[k].width = 0;
  473|      0|        vto[k].precision = 0;
  474|      0|      }
  475|   206k|      if(flags & FLAGS_PRECPARAM) {
  476|       |        /* we have the precision specified from a parameter, so we make that
  477|       |           parameter's info setup properly */
  478|      1|        long k = precision - 1;
  479|      1|        if((k < 0) || (k >= MAX_PARAMETERS))
  480|       |          /* out of allowed range */
  481|      0|          return 1;
  482|      1|        vto[i].precision = k;
  483|      1|        vto[k].type = FORMAT_WIDTH;
  484|      1|        vto[k].flags = FLAGS_NEW;
  485|       |        /* can't use width or precision of width! */
  486|      1|        vto[k].width = 0;
  487|      1|        vto[k].precision = 0;
  488|      1|      }
  489|   206k|      *endpos++ = fmt + ((*fmt == '\0') ? 0 : 1); /* end of this sequence */
  490|   206k|    }
  491|   621k|  }
  492|       |
  493|       |  /* Read the arg list parameters into our data list */
  494|   274k|  for(i = 0; i<max_param; i++) {
  495|       |    /* Width/precision arguments must be read before the main argument
  496|       |       they are attached to */
  497|   206k|    if(vto[i].flags & FLAGS_WIDTHPARAM) {
  498|      0|      vto[vto[i].width].data.num.as_signed =
  499|      0|        (mp_intmax_t)va_arg(arglist, int);
  500|      0|    }
  501|   206k|    if(vto[i].flags & FLAGS_PRECPARAM) {
  502|      1|      vto[vto[i].precision].data.num.as_signed =
  503|      1|        (mp_intmax_t)va_arg(arglist, int);
  504|      1|    }
  505|       |
  506|   206k|    switch(vto[i].type) {
  507|   132k|    case FORMAT_STRING:
  508|   132k|      vto[i].data.str = va_arg(arglist, char *);
  509|   132k|      break;
  510|       |
  511|      0|    case FORMAT_INTPTR:
  512|      0|    case FORMAT_UNKNOWN:
  513|      0|    case FORMAT_PTR:
  514|      0|      vto[i].data.ptr = va_arg(arglist, void *);
  515|      0|      break;
  516|       |
  517|  74.0k|    case FORMAT_INT:
  518|  74.0k|#ifdef HAVE_LONG_LONG_TYPE
  519|  74.0k|      if((vto[i].flags & FLAGS_LONGLONG) && (vto[i].flags & FLAGS_UNSIGNED))
  520|      0|        vto[i].data.num.as_unsigned =
  521|      0|          (mp_uintmax_t)va_arg(arglist, mp_uintmax_t);
  522|  74.0k|      else if(vto[i].flags & FLAGS_LONGLONG)
  523|      0|        vto[i].data.num.as_signed =
  524|      0|          (mp_intmax_t)va_arg(arglist, mp_intmax_t);
  525|  74.0k|      else
  526|  74.0k|#endif
  527|  74.0k|      {
  528|  74.0k|        if((vto[i].flags & FLAGS_LONG) && (vto[i].flags & FLAGS_UNSIGNED))
  529|      2|          vto[i].data.num.as_unsigned =
  530|      2|            (mp_uintmax_t)va_arg(arglist, unsigned long);
  531|  74.0k|        else if(vto[i].flags & FLAGS_LONG)
  532|  15.1k|          vto[i].data.num.as_signed =
  533|  15.1k|            (mp_intmax_t)va_arg(arglist, long);
  534|  58.9k|        else if(vto[i].flags & FLAGS_UNSIGNED)
  535|  28.2k|          vto[i].data.num.as_unsigned =
  536|  28.2k|            (mp_uintmax_t)va_arg(arglist, unsigned int);
  537|  30.6k|        else
  538|  30.6k|          vto[i].data.num.as_signed =
  539|  30.6k|            (mp_intmax_t)va_arg(arglist, int);
  540|  74.0k|      }
  541|  74.0k|      break;
  542|       |
  543|      0|    case FORMAT_DOUBLE:
  544|      0|      vto[i].data.dnum = va_arg(arglist, double);
  545|      0|      break;
  546|       |
  547|      1|    case FORMAT_WIDTH:
  548|       |      /* Argument has been read. Silently convert it into an integer
  549|       |       * for later use
  550|       |       */
  551|      1|      vto[i].type = FORMAT_INT;
  552|      1|      break;
  553|       |
  554|      0|    default:
  555|      0|      break;
  556|   206k|    }
  557|   206k|  }
  558|       |
  559|  67.3k|  return 0;
  560|       |
  561|  67.3k|}
mprintf.c:dprintf_IsQualifierNoDollar:
  195|   236k|{
  196|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  197|       |  if(!strncmp(fmt, "I32", 3) || !strncmp(fmt, "I64", 3)) {
  198|       |    return TRUE;
  199|       |  }
  200|       |#endif
  201|       |
  202|   236k|  switch(*fmt) {
  203|      1|  case '-': case '+': case ' ': case '#': case '.':
  204|  14.3k|  case '0': case '1': case '2': case '3': case '4':
  205|  14.3k|  case '5': case '6': case '7': case '8': case '9':
  206|  29.5k|  case 'h': case 'l': case 'L': case 'z': case 'q':
  207|  29.5k|  case '*': case 'O':
  208|       |#if defined(MP_HAVE_INT_EXTENSIONS)
  209|       |  case 'I':
  210|       |#endif
  211|  29.5k|    return TRUE;
  212|       |
  213|   206k|  default:
  214|   206k|    return FALSE;
  215|   236k|  }
  216|   236k|}
mprintf.c:dprintf_DollarString:
  178|   413k|{
  179|   413k|  int number = 0;
  180|   471k|  while(ISDIGIT(*input)) {
  181|  57.4k|    if(number < MAX_PARAMETERS) {
  182|  57.4k|      number *= 10;
  183|  57.4k|      number += *input - '0';
  184|  57.4k|    }
  185|  57.4k|    input++;
  186|  57.4k|  }
  187|   413k|  if(number <= MAX_PARAMETERS && ('$' == *input)) {
  188|      0|    *end = ++input;
  189|      0|    return number;
  190|      0|  }
  191|   413k|  return 0;
  192|   413k|}
mprintf.c:addbyter:
  993|   302k|{
  994|   302k|  struct nsprintf *infop = (struct nsprintf *)data;
  995|   302k|  unsigned char outc = (unsigned char)output;
  996|       |
  997|   302k|  if(infop->length < infop->max) {
  998|       |    /* only do this if we haven't reached max length yet */
  999|   302k|    infop->buffer[0] = outc; /* store */
 1000|   302k|    infop->buffer++; /* increase pointer */
 1001|   302k|    infop->length++; /* we are now one byte larger */
 1002|   302k|    return outc;     /* fputc() returns like this on success */
 1003|   302k|  }
 1004|      0|  return -1;
 1005|   302k|}
mprintf.c:alloc_addbyter:
 1043|   799k|{
 1044|   799k|  struct asprintf *infop = (struct asprintf *)data;
 1045|   799k|  unsigned char outc = (unsigned char)output;
 1046|       |
 1047|   799k|  if(Curl_dyn_addn(infop->b, &outc, 1)) {
 1048|      0|    infop->fail = 1;
 1049|      0|    return -1; /* fail */
 1050|      0|  }
 1051|   799k|  return outc; /* fputc() returns like this on success */
 1052|   799k|}

Curl_multi_handle:
  357|  2.97k|{
  358|  2.97k|  struct Curl_multi *multi = calloc(1, sizeof(struct Curl_multi));
  359|       |
  360|  2.97k|  if(!multi)
  361|      0|    return NULL;
  362|       |
  363|  2.97k|  multi->magic = CURL_MULTI_HANDLE;
  364|       |
  365|  2.97k|  if(Curl_mk_dnscache(&multi->hostcache))
  366|      0|    goto error;
  367|       |
  368|  2.97k|  if(sh_init(&multi->sockhash, hashsize))
  369|      0|    goto error;
  370|       |
  371|  2.97k|  if(Curl_conncache_init(&multi->conn_cache, chashsize))
  372|      0|    goto error;
  373|       |
  374|  2.97k|  Curl_llist_init(&multi->msglist, NULL);
  375|  2.97k|  Curl_llist_init(&multi->pending, NULL);
  376|       |
  377|  2.97k|  multi->multiplexing = TRUE;
  378|       |
  379|       |  /* -1 means it not set by user, use the default value */
  380|  2.97k|  multi->maxconnects = -1;
  381|  2.97k|  multi->max_concurrent_streams = 100;
  382|  2.97k|  multi->ipv6_works = Curl_ipv6works(NULL);
  383|       |
  384|       |#ifdef USE_WINSOCK
  385|       |  multi->wsa_event = WSACreateEvent();
  386|       |  if(multi->wsa_event == WSA_INVALID_EVENT)
  387|       |    goto error;
  388|       |#else
  389|  2.97k|#ifdef ENABLE_WAKEUP
  390|  2.97k|  if(Curl_socketpair(AF_UNIX, SOCK_STREAM, 0, multi->wakeup_pair) < 0) {
  391|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  392|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  393|      0|  }
  394|  2.97k|  else if(curlx_nonblock(multi->wakeup_pair[0], TRUE) < 0 ||
  395|  2.97k|          curlx_nonblock(multi->wakeup_pair[1], TRUE) < 0) {
  396|      0|    sclose(multi->wakeup_pair[0]);
  397|      0|    sclose(multi->wakeup_pair[1]);
  398|      0|    multi->wakeup_pair[0] = CURL_SOCKET_BAD;
  399|      0|    multi->wakeup_pair[1] = CURL_SOCKET_BAD;
  400|      0|  }
  401|  2.97k|#endif
  402|  2.97k|#endif
  403|       |
  404|  2.97k|  return multi;
  405|       |
  406|      0|  error:
  407|       |
  408|      0|  Curl_hash_destroy(&multi->sockhash);
  409|      0|  Curl_hash_destroy(&multi->hostcache);
  410|      0|  Curl_conncache_destroy(&multi->conn_cache);
  411|      0|  Curl_llist_destroy(&multi->msglist, NULL);
  412|      0|  Curl_llist_destroy(&multi->pending, NULL);
  413|       |
  414|      0|  free(multi);
  415|      0|  return NULL;
  416|  2.97k|}
curl_multi_init:
  419|  2.97k|{
  420|  2.97k|  return Curl_multi_handle(CURL_SOCKET_HASH_TABLE_SIZE,
  421|  2.97k|                           CURL_CONNECTION_HASH_SIZE);
  422|  2.97k|}
curl_multi_add_handle:
  426|  2.97k|{
  427|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  428|  2.97k|  if(!GOOD_MULTI_HANDLE(multi))
  429|      0|    return CURLM_BAD_HANDLE;
  430|       |
  431|       |  /* Verify that we got a somewhat good easy handle too */
  432|  2.97k|  if(!GOOD_EASY_HANDLE(data))
  433|      0|    return CURLM_BAD_EASY_HANDLE;
  434|       |
  435|       |  /* Prevent users from adding same easy handle more than once and prevent
  436|       |     adding to more than one multi stack */
  437|  2.97k|  if(data->multi)
  438|      0|    return CURLM_ADDED_ALREADY;
  439|       |
  440|  2.97k|  if(multi->in_callback)
  441|      0|    return CURLM_RECURSIVE_API_CALL;
  442|       |
  443|       |  /* Initialize timeout list for this handle */
  444|  2.97k|  Curl_llist_init(&data->state.timeoutlist, NULL);
  445|       |
  446|       |  /*
  447|       |   * No failure allowed in this function beyond this point. And no
  448|       |   * modification of easy nor multi handle allowed before this except for
  449|       |   * potential multi's connection cache growing which won't be undone in this
  450|       |   * function no matter what.
  451|       |   */
  452|  2.97k|  if(data->set.errorbuffer)
  453|      0|    data->set.errorbuffer[0] = 0;
  454|       |
  455|       |  /* set the easy handle */
  456|  2.97k|  multistate(data, MSTATE_INIT);
  457|       |
  458|       |  /* for multi interface connections, we share DNS cache automatically if the
  459|       |     easy handle's one is currently not set. */
  460|  2.97k|  if(!data->dns.hostcache ||
  461|  2.97k|     (data->dns.hostcachetype == HCACHE_NONE)) {
  462|  2.97k|    data->dns.hostcache = &multi->hostcache;
  463|  2.97k|    data->dns.hostcachetype = HCACHE_MULTI;
  464|  2.97k|  }
  465|       |
  466|       |  /* Point to the shared or multi handle connection cache */
  467|  2.97k|  if(data->share && (data->share->specifier & (1<< CURL_LOCK_DATA_CONNECT)))
  468|      0|    data->state.conn_cache = &data->share->conn_cache;
  469|  2.97k|  else
  470|  2.97k|    data->state.conn_cache = &multi->conn_cache;
  471|  2.97k|  data->state.lastconnect_id = -1;
  472|       |
  473|       |#ifdef USE_LIBPSL
  474|       |  /* Do the same for PSL. */
  475|       |  if(data->share && (data->share->specifier & (1 << CURL_LOCK_DATA_PSL)))
  476|       |    data->psl = &data->share->psl;
  477|       |  else
  478|       |    data->psl = &multi->psl;
  479|       |#endif
  480|       |
  481|       |  /* We add the new entry last in the list. */
  482|  2.97k|  data->next = NULL; /* end of the line */
  483|  2.97k|  if(multi->easyp) {
  484|      0|    struct Curl_easy *last = multi->easylp;
  485|      0|    last->next = data;
  486|      0|    data->prev = last;
  487|      0|    multi->easylp = data; /* the new last node */
  488|      0|  }
  489|  2.97k|  else {
  490|       |    /* first node, make prev NULL! */
  491|  2.97k|    data->prev = NULL;
  492|  2.97k|    multi->easylp = multi->easyp = data; /* both first and last */
  493|  2.97k|  }
  494|       |
  495|       |  /* make the Curl_easy refer back to this multi handle */
  496|  2.97k|  data->multi = multi;
  497|       |
  498|       |  /* Set the timeout for this handle to expire really soon so that it will
  499|       |     be taken care of even when this handle is added in the midst of operation
  500|       |     when only the curl_multi_socket() API is used. During that flow, only
  501|       |     sockets that time-out or have actions will be dealt with. Since this
  502|       |     handle has no action yet, we make sure it times out to get things to
  503|       |     happen. */
  504|  2.97k|  Curl_expire(data, 0, EXPIRE_RUN_NOW);
  505|       |
  506|       |  /* increase the node-counter */
  507|  2.97k|  multi->num_easy++;
  508|       |
  509|       |  /* increase the alive-counter */
  510|  2.97k|  multi->num_alive++;
  511|       |
  512|       |  /* A somewhat crude work-around for a little glitch in Curl_update_timer()
  513|       |     that happens if the lastcall time is set to the same time when the handle
  514|       |     is removed as when the next handle is added, as then the check in
  515|       |     Curl_update_timer() that prevents calling the application multiple times
  516|       |     with the same timer info will not trigger and then the new handle's
  517|       |     timeout will not be notified to the app.
  518|       |
  519|       |     The work-around is thus simply to clear the 'lastcall' variable to force
  520|       |     Curl_update_timer() to always trigger a callback to the app when a new
  521|       |     easy handle is added */
  522|  2.97k|  memset(&multi->timer_lastcall, 0, sizeof(multi->timer_lastcall));
  523|       |
  524|  2.97k|  CONNCACHE_LOCK(data);
  525|       |  /* The closure handle only ever has default timeouts set. To improve the
  526|       |     state somewhat we clone the timeouts from each added handle so that the
  527|       |     closure handle always has the same timeouts as the most recently added
  528|       |     easy handle. */
  529|  2.97k|  data->state.conn_cache->closure_handle->set.timeout = data->set.timeout;
  530|  2.97k|  data->state.conn_cache->closure_handle->set.server_response_timeout =
  531|  2.97k|    data->set.server_response_timeout;
  532|  2.97k|  data->state.conn_cache->closure_handle->set.no_signal =
  533|  2.97k|    data->set.no_signal;
  534|  2.97k|  CONNCACHE_UNLOCK(data);
  535|       |
  536|  2.97k|  Curl_update_timer(multi);
  537|  2.97k|  return CURLM_OK;
  538|  2.97k|}
curl_multi_remove_handle:
  718|  2.97k|{
  719|  2.97k|  struct Curl_easy *easy = data;
  720|  2.97k|  bool premature;
  721|  2.97k|  struct Curl_llist_element *e;
  722|       |
  723|       |  /* First, make some basic checks that the CURLM handle is a good handle */
  724|  2.97k|  if(!GOOD_MULTI_HANDLE(multi))
  725|      0|    return CURLM_BAD_HANDLE;
  726|       |
  727|       |  /* Verify that we got a somewhat good easy handle too */
  728|  2.97k|  if(!GOOD_EASY_HANDLE(data))
  729|      0|    return CURLM_BAD_EASY_HANDLE;
  730|       |
  731|       |  /* Prevent users from trying to remove same easy handle more than once */
  732|  2.97k|  if(!data->multi)
  733|      0|    return CURLM_OK; /* it is already removed so let's say it is fine! */
  734|       |
  735|       |  /* Prevent users from trying to remove an easy handle from the wrong multi */
  736|  2.97k|  if(data->multi != multi)
  737|      0|    return CURLM_BAD_EASY_HANDLE;
  738|       |
  739|  2.97k|  if(multi->in_callback)
  740|      0|    return CURLM_RECURSIVE_API_CALL;
  741|       |
  742|  2.97k|  premature = (data->mstate < MSTATE_COMPLETED) ? TRUE : FALSE;
  743|       |
  744|       |  /* If the 'state' is not INIT or COMPLETED, we might need to do something
  745|       |     nice to put the easy_handle in a good known state when this returns. */
  746|  2.97k|  if(premature) {
  747|       |    /* this handle is "alive" so we need to count down the total number of
  748|       |       alive connections when this is removed */
  749|     38|    multi->num_alive--;
  750|     38|  }
  751|       |
  752|  2.97k|  if(data->conn &&
  753|  2.97k|     data->mstate > MSTATE_DO &&
  754|  2.97k|     data->mstate < MSTATE_COMPLETED) {
  755|       |    /* Set connection owner so that the DONE function closes it.  We can
  756|       |       safely do this here since connection is killed. */
  757|     23|    streamclose(data->conn, "Removed with partial response");
  758|     23|  }
  759|       |
  760|  2.97k|  if(data->conn) {
  761|       |    /* multi_done() clears the association between the easy handle and the
  762|       |       connection.
  763|       |
  764|       |       Note that this ignores the return code simply because there's
  765|       |       nothing really useful to do with it anyway! */
  766|     38|    (void)multi_done(data, data->result, premature);
  767|     38|  }
  768|       |
  769|       |  /* The timer must be shut down before data->multi is set to NULL, else the
  770|       |     timenode will remain in the splay tree after curl_easy_cleanup is
  771|       |     called. Do it after multi_done() in case that sets another time! */
  772|  2.97k|  Curl_expire_clear(data);
  773|       |
  774|  2.97k|  if(data->connect_queue.ptr)
  775|       |    /* the handle was in the pending list waiting for an available connection,
  776|       |       so go ahead and remove it */
  777|      0|    Curl_llist_remove(&multi->pending, &data->connect_queue, NULL);
  778|       |
  779|  2.97k|  if(data->dns.hostcachetype == HCACHE_MULTI) {
  780|       |    /* stop using the multi handle's DNS cache, *after* the possible
  781|       |       multi_done() call above */
  782|  2.97k|    data->dns.hostcache = NULL;
  783|  2.97k|    data->dns.hostcachetype = HCACHE_NONE;
  784|  2.97k|  }
  785|       |
  786|  2.97k|  Curl_wildcard_dtor(&data->wildcard);
  787|       |
  788|       |  /* destroy the timeout list that is held in the easy handle, do this *after*
  789|       |     multi_done() as that may actually call Curl_expire that uses this */
  790|  2.97k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  791|       |
  792|       |  /* change state without using multistate(), only to make singlesocket() do
  793|       |     what we want */
  794|  2.97k|  data->mstate = MSTATE_COMPLETED;
  795|  2.97k|  singlesocket(multi, easy); /* to let the application know what sockets that
  796|       |                                vanish with this handle */
  797|       |
  798|       |  /* Remove the association between the connection and the handle */
  799|  2.97k|  Curl_detach_connnection(data);
  800|       |
  801|  2.97k|  if(data->state.lastconnect_id != -1) {
  802|       |    /* Mark any connect-only connection for closure */
  803|    527|    Curl_conncache_foreach(data, data->state.conn_cache,
  804|    527|                           NULL, close_connect_only);
  805|    527|  }
  806|       |
  807|       |#ifdef USE_LIBPSL
  808|       |  /* Remove the PSL association. */
  809|       |  if(data->psl == &multi->psl)
  810|       |    data->psl = NULL;
  811|       |#endif
  812|       |
  813|       |  /* as this was using a shared connection cache we clear the pointer to that
  814|       |     since we're not part of that multi handle anymore */
  815|  2.97k|  data->state.conn_cache = NULL;
  816|       |
  817|  2.97k|  data->multi = NULL; /* clear the association to this multi handle */
  818|       |
  819|       |  /* make sure there's no pending message in the queue sent from this easy
  820|       |     handle */
  821|       |
  822|  2.97k|  for(e = multi->msglist.head; e; e = e->next) {
  823|  2.93k|    struct Curl_message *msg = e->ptr;
  824|       |
  825|  2.93k|    if(msg->extmsg.easy_handle == easy) {
  826|  2.93k|      Curl_llist_remove(&multi->msglist, e, NULL);
  827|       |      /* there can only be one from this specific handle */
  828|  2.93k|      break;
  829|  2.93k|    }
  830|  2.93k|  }
  831|       |
  832|       |  /* Remove from the pending list if it is there. Otherwise this will
  833|       |     remain on the pending list forever due to the state change. */
  834|  2.97k|  for(e = multi->pending.head; e; e = e->next) {
  835|      0|    struct Curl_easy *curr_data = e->ptr;
  836|       |
  837|      0|    if(curr_data == data) {
  838|      0|      Curl_llist_remove(&multi->pending, e, NULL);
  839|      0|      break;
  840|      0|    }
  841|      0|  }
  842|       |
  843|       |  /* make the previous node point to our next */
  844|  2.97k|  if(data->prev)
  845|      0|    data->prev->next = data->next;
  846|  2.97k|  else
  847|  2.97k|    multi->easyp = data->next; /* point to first node */
  848|       |
  849|       |  /* make our next point to our previous node */
  850|  2.97k|  if(data->next)
  851|      0|    data->next->prev = data->prev;
  852|  2.97k|  else
  853|  2.97k|    multi->easylp = data->prev; /* point to last node */
  854|       |
  855|       |  /* NOTE NOTE NOTE
  856|       |     We do not touch the easy handle here! */
  857|  2.97k|  multi->num_easy--; /* one less to care about now */
  858|       |
  859|  2.97k|  process_pending_handles(multi);
  860|       |
  861|  2.97k|  Curl_update_timer(multi);
  862|  2.97k|  return CURLM_OK;
  863|  2.97k|}
Curl_multiplex_wanted:
  867|  1.13k|{
  868|  1.13k|  return (multi && (multi->multiplexing));
  869|  1.13k|}
Curl_detach_connnection:
  878|  17.8k|{
  879|  17.8k|  struct connectdata *conn = data->conn;
  880|  17.8k|  if(conn) {
  881|  5.77k|    Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);
  882|  5.77k|    Curl_ssl_detach_conn(data, conn);
  883|  5.77k|  }
  884|  17.8k|  data->conn = NULL;
  885|  17.8k|}
Curl_attach_connnection:
  894|  5.77k|{
  895|  5.77k|  DEBUGASSERT(!data->conn);
  896|  5.77k|  DEBUGASSERT(conn);
  897|  5.77k|  data->conn = conn;
  898|  5.77k|  Curl_llist_insert_next(&conn->easyq, conn->easyq.tail, data,
  899|  5.77k|                         &data->conn_queue);
  900|  5.77k|  if(conn->handler->attach)
  901|      0|    conn->handler->attach(data, conn);
  902|  5.77k|  Curl_ssl_associate_conn(data, conn);
  903|  5.77k|}
curl_multi_fdset:
 1027|  4.73M|{
 1028|       |  /* Scan through all the easy handles to get the file descriptors set.
 1029|       |     Some easy handles may not have connected to the remote host yet,
 1030|       |     and then we must make sure that is done. */
 1031|  4.73M|  struct Curl_easy *data;
 1032|  4.73M|  int this_max_fd = -1;
 1033|  4.73M|  curl_socket_t sockbunch[MAX_SOCKSPEREASYHANDLE];
 1034|  4.73M|  int i;
 1035|  4.73M|  (void)exc_fd_set; /* not used */
 1036|       |
 1037|  4.73M|  if(!GOOD_MULTI_HANDLE(multi))
 1038|      0|    return CURLM_BAD_HANDLE;
 1039|       |
 1040|  4.73M|  if(multi->in_callback)
 1041|      0|    return CURLM_RECURSIVE_API_CALL;
 1042|       |
 1043|  4.73M|  data = multi->easyp;
 1044|  9.47M|  while(data) {
 1045|  4.73M|    int bitmap;
 1046|       |#ifdef __clang_analyzer_
 1047|       |    /* to prevent "The left operand of '>=' is a garbage value" warnings */
 1048|       |    memset(sockbunch, 0, sizeof(sockbunch));
 1049|       |#endif
 1050|  4.73M|    bitmap = multi_getsock(data, sockbunch);
 1051|       |
 1052|  9.47M|    for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++) {
 1053|  9.47M|      curl_socket_t s = CURL_SOCKET_BAD;
 1054|       |
 1055|  9.47M|      if((bitmap & GETSOCK_READSOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1056|  4.73M|        if(!FDSET_SOCK(sockbunch[i]))
 1057|       |          /* pretend it doesn't exist */
 1058|      0|          continue;
 1059|  4.73M|        FD_SET(sockbunch[i], read_fd_set);
 1060|  4.73M|        s = sockbunch[i];
 1061|  4.73M|      }
 1062|  9.47M|      if((bitmap & GETSOCK_WRITESOCK(i)) && VALID_SOCK(sockbunch[i])) {
 1063|     18|        if(!FDSET_SOCK(sockbunch[i]))
 1064|       |          /* pretend it doesn't exist */
 1065|      0|          continue;
 1066|     18|        FD_SET(sockbunch[i], write_fd_set);
 1067|     18|        s = sockbunch[i];
 1068|     18|      }
 1069|  9.47M|      if(s == CURL_SOCKET_BAD)
 1070|       |        /* this socket is unused, break out of loop */
 1071|  4.73M|        break;
 1072|  4.73M|      if((int)s > this_max_fd)
 1073|  4.73M|        this_max_fd = (int)s;
 1074|  4.73M|    }
 1075|       |
 1076|  4.73M|    data = data->next; /* check next handle */
 1077|  4.73M|  }
 1078|       |
 1079|  4.73M|  *max_fd = this_max_fd;
 1080|       |
 1081|  4.73M|  return CURLM_OK;
 1082|  4.73M|}
Curl_preconnect:
 1716|  5.77k|{
 1717|  5.77k|  if(!data->state.buffer) {
 1718|  2.92k|    data->state.buffer = malloc(data->set.buffer_size + 1);
 1719|  2.92k|    if(!data->state.buffer)
 1720|      0|      return CURLE_OUT_OF_MEMORY;
 1721|  2.92k|  }
 1722|  5.77k|  return CURLE_OK;
 1723|  5.77k|}
curl_multi_perform:
 2572|  4.74M|{
 2573|  4.74M|  struct Curl_easy *data;
 2574|  4.74M|  CURLMcode returncode = CURLM_OK;
 2575|  4.74M|  struct Curl_tree *t;
 2576|  4.74M|  struct curltime now = Curl_now();
 2577|       |
 2578|  4.74M|  if(!GOOD_MULTI_HANDLE(multi))
 2579|      0|    return CURLM_BAD_HANDLE;
 2580|       |
 2581|  4.74M|  if(multi->in_callback)
 2582|      0|    return CURLM_RECURSIVE_API_CALL;
 2583|       |
 2584|  4.74M|  data = multi->easyp;
 2585|  9.48M|  while(data) {
 2586|  4.74M|    CURLMcode result;
 2587|  4.74M|    SIGPIPE_VARIABLE(pipe_st);
 2588|       |
 2589|  4.74M|    sigpipe_ignore(data, &pipe_st);
 2590|  4.74M|    result = multi_runsingle(multi, &now, data);
 2591|  4.74M|    sigpipe_restore(&pipe_st);
 2592|       |
 2593|  4.74M|    if(result)
 2594|      0|      returncode = result;
 2595|       |
 2596|  4.74M|    data = data->next; /* operate on next handle */
 2597|  4.74M|  }
 2598|       |
 2599|       |  /*
 2600|       |   * Simply remove all expired timers from the splay since handles are dealt
 2601|       |   * with unconditionally by this function and curl_multi_timeout() requires
 2602|       |   * that already passed/handled expire times are removed from the splay.
 2603|       |   *
 2604|       |   * It is important that the 'now' value is set at the entry of this function
 2605|       |   * and not for the current time as it may have ticked a little while since
 2606|       |   * then and then we risk this loop to remove timers that actually have not
 2607|       |   * been handled!
 2608|       |   */
 2609|  4.74M|  do {
 2610|  4.74M|    multi->timetree = Curl_splaygetbest(now, multi->timetree, &t);
 2611|  4.74M|    if(t)
 2612|       |      /* the removed may have another timeout in queue */
 2613|    948|      (void)add_next_timeout(now, multi, t->payload);
 2614|       |
 2615|  4.74M|  } while(t);
 2616|       |
 2617|  4.74M|  *running_handles = multi->num_alive;
 2618|       |
 2619|  4.74M|  if(CURLM_OK >= returncode)
 2620|  4.74M|    Curl_update_timer(multi);
 2621|       |
 2622|  4.74M|  return returncode;
 2623|  4.74M|}
curl_multi_cleanup:
 2626|  2.97k|{
 2627|  2.97k|  struct Curl_easy *data;
 2628|  2.97k|  struct Curl_easy *nextdata;
 2629|       |
 2630|  2.97k|  if(GOOD_MULTI_HANDLE(multi)) {
 2631|  2.97k|    if(multi->in_callback)
 2632|      0|      return CURLM_RECURSIVE_API_CALL;
 2633|       |
 2634|  2.97k|    multi->magic = 0; /* not good anymore */
 2635|       |
 2636|       |    /* First remove all remaining easy handles */
 2637|  2.97k|    data = multi->easyp;
 2638|  2.97k|    while(data) {
 2639|      0|      nextdata = data->next;
 2640|      0|      if(!data->state.done && data->conn)
 2641|       |        /* if DONE was never called for this handle */
 2642|      0|        (void)multi_done(data, CURLE_OK, TRUE);
 2643|      0|      if(data->dns.hostcachetype == HCACHE_MULTI) {
 2644|       |        /* clear out the usage of the shared DNS cache */
 2645|      0|        Curl_hostcache_clean(data, data->dns.hostcache);
 2646|      0|        data->dns.hostcache = NULL;
 2647|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2648|      0|      }
 2649|       |
 2650|       |      /* Clear the pointer to the connection cache */
 2651|      0|      data->state.conn_cache = NULL;
 2652|      0|      data->multi = NULL; /* clear the association */
 2653|       |
 2654|       |#ifdef USE_LIBPSL
 2655|       |      if(data->psl == &multi->psl)
 2656|       |        data->psl = NULL;
 2657|       |#endif
 2658|       |
 2659|      0|      data = nextdata;
 2660|      0|    }
 2661|       |
 2662|       |    /* Close all the connections in the connection cache */
 2663|  2.97k|    Curl_conncache_close_all_connections(&multi->conn_cache);
 2664|       |
 2665|  2.97k|    Curl_hash_destroy(&multi->sockhash);
 2666|  2.97k|    Curl_conncache_destroy(&multi->conn_cache);
 2667|  2.97k|    Curl_llist_destroy(&multi->msglist, NULL);
 2668|  2.97k|    Curl_llist_destroy(&multi->pending, NULL);
 2669|       |
 2670|  2.97k|    Curl_hash_destroy(&multi->hostcache);
 2671|  2.97k|    Curl_psl_destroy(&multi->psl);
 2672|       |
 2673|       |#ifdef USE_WINSOCK
 2674|       |    WSACloseEvent(multi->wsa_event);
 2675|       |#else
 2676|  2.97k|#ifdef ENABLE_WAKEUP
 2677|  2.97k|    sclose(multi->wakeup_pair[0]);
 2678|  2.97k|    sclose(multi->wakeup_pair[1]);
 2679|  2.97k|#endif
 2680|  2.97k|#endif
 2681|  2.97k|    free(multi);
 2682|       |
 2683|  2.97k|    return CURLM_OK;
 2684|  2.97k|  }
 2685|      0|  return CURLM_BAD_HANDLE;
 2686|  2.97k|}
Curl_multi_closed:
 2899|  2.80k|{
 2900|  2.80k|  if(data) {
 2901|       |    /* if there's still an easy handle associated with this connection */
 2902|  2.79k|    struct Curl_multi *multi = data->multi;
 2903|  2.79k|    if(multi) {
 2904|       |      /* this is set if this connection is part of a handle that is added to
 2905|       |         a multi handle, and only then this is necessary */
 2906|  2.31k|      struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);
 2907|       |
 2908|  2.31k|      if(entry) {
 2909|      0|        if(multi->socket_cb)
 2910|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2911|      0|                           multi->socket_userp,
 2912|      0|                           entry->socketp);
 2913|       |
 2914|       |        /* now remove it from the socket hash */
 2915|      0|        sh_delentry(entry, &multi->sockhash, s);
 2916|      0|      }
 2917|  2.31k|    }
 2918|  2.79k|  }
 2919|  2.80k|}
Curl_update_timer:
 3259|  4.74M|{
 3260|  4.74M|  long timeout_ms;
 3261|       |
 3262|  4.74M|  if(!multi->timer_cb)
 3263|  4.74M|    return;
 3264|      0|  if(multi_timeout(multi, &timeout_ms)) {
 3265|      0|    return;
 3266|      0|  }
 3267|      0|  if(timeout_ms < 0) {
 3268|      0|    static const struct curltime none = {0, 0};
 3269|      0|    if(Curl_splaycomparekeys(none, multi->timer_lastcall)) {
 3270|      0|      multi->timer_lastcall = none;
 3271|       |      /* there's no timeout now but there was one previously, tell the app to
 3272|       |         disable it */
 3273|      0|      multi->timer_cb(multi, -1, multi->timer_userp);
 3274|      0|      return;
 3275|      0|    }
 3276|      0|    return;
 3277|      0|  }
 3278|       |
 3279|       |  /* When multi_timeout() is done, multi->timetree points to the node with the
 3280|       |   * timeout we got the (relative) time-out time for. We can thus easily check
 3281|       |   * if this is the same (fixed) time as we got in a previous call and then
 3282|       |   * avoid calling the callback again. */
 3283|      0|  if(Curl_splaycomparekeys(multi->timetree->key, multi->timer_lastcall) == 0)
 3284|      0|    return;
 3285|       |
 3286|      0|  multi->timer_lastcall = multi->timetree->key;
 3287|       |
 3288|      0|  multi->timer_cb(multi, timeout_ms, multi->timer_userp);
 3289|      0|}
Curl_expire:
 3366|  8.71k|{
 3367|  8.71k|  struct Curl_multi *multi = data->multi;
 3368|  8.71k|  struct curltime *nowp = &data->state.expiretime;
 3369|  8.71k|  struct curltime set;
 3370|       |
 3371|       |  /* this is only interesting while there is still an associated multi struct
 3372|       |     remaining! */
 3373|  8.71k|  if(!multi)
 3374|      0|    return;
 3375|       |
 3376|  8.71k|  DEBUGASSERT(id < EXPIRE_LAST);
 3377|       |
 3378|  8.71k|  set = Curl_now();
 3379|  8.71k|  set.tv_sec += (time_t)(milli/1000); /* might be a 64 to 32 bit conversion */
 3380|  8.71k|  set.tv_usec += (unsigned int)(milli%1000)*1000;
 3381|       |
 3382|  8.71k|  if(set.tv_usec >= 1000000) {
 3383|  1.37k|    set.tv_sec++;
 3384|  1.37k|    set.tv_usec -= 1000000;
 3385|  1.37k|  }
 3386|       |
 3387|       |  /* Remove any timer with the same id just in case. */
 3388|  8.71k|  multi_deltimeout(data, id);
 3389|       |
 3390|       |  /* Add it to the timer list.  It must stay in the list until it has expired
 3391|       |     in case we need to recompute the minimum timer later. */
 3392|  8.71k|  multi_addtimeout(data, &set, id);
 3393|       |
 3394|  8.71k|  if(nowp->tv_sec || nowp->tv_usec) {
 3395|       |    /* This means that the struct is added as a node in the splay tree.
 3396|       |       Compare if the new time is earlier, and only remove-old/add-new if it
 3397|       |       is. */
 3398|  5.74k|    timediff_t diff = Curl_timediff(set, *nowp);
 3399|  5.74k|    int rc;
 3400|       |
 3401|  5.74k|    if(diff > 0) {
 3402|       |      /* The current splay tree entry is sooner than this new expiry time.
 3403|       |         We don't need to update our splay tree entry. */
 3404|  5.63k|      return;
 3405|  5.63k|    }
 3406|       |
 3407|       |    /* Since this is an updated time, we must remove the previous entry from
 3408|       |       the splay tree first and then re-add the new value */
 3409|    115|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3410|    115|                          &multi->timetree);
 3411|    115|    if(rc)
 3412|      0|      infof(data, "Internal error removing splay node = %d", rc);
 3413|    115|  }
 3414|       |
 3415|       |  /* Indicate that we are in the splay tree and insert the new timer expiry
 3416|       |     value since it is our local minimum. */
 3417|  3.08k|  *nowp = set;
 3418|  3.08k|  data->state.timenode.payload = data;
 3419|  3.08k|  multi->timetree = Curl_splayinsert(*nowp, multi->timetree,
 3420|  3.08k|                                     &data->state.timenode);
 3421|  3.08k|}
Curl_expire_done:
 3430|     13|{
 3431|       |  /* remove the timer, if there */
 3432|     13|  multi_deltimeout(data, id);
 3433|     13|}
Curl_expire_clear:
 3441|  11.9k|{
 3442|  11.9k|  struct Curl_multi *multi = data->multi;
 3443|  11.9k|  struct curltime *nowp = &data->state.expiretime;
 3444|       |
 3445|       |  /* this is only interesting while there is still an associated multi struct
 3446|       |     remaining! */
 3447|  11.9k|  if(!multi)
 3448|  6.05k|    return;
 3449|       |
 3450|  5.90k|  if(nowp->tv_sec || nowp->tv_usec) {
 3451|       |    /* Since this is an cleared time, we must remove the previous entry from
 3452|       |       the splay tree */
 3453|  2.97k|    struct Curl_llist *list = &data->state.timeoutlist;
 3454|  2.97k|    int rc;
 3455|       |
 3456|  2.97k|    rc = Curl_splayremove(multi->timetree, &data->state.timenode,
 3457|  2.97k|                          &multi->timetree);
 3458|  2.97k|    if(rc)
 3459|      0|      infof(data, "Internal error clearing splay node = %d", rc);
 3460|       |
 3461|       |    /* flush the timeout list too */
 3462|  10.5k|    while(list->size > 0) {
 3463|  7.55k|      Curl_llist_remove(list, list->tail, NULL);
 3464|  7.55k|    }
 3465|       |
 3466|  2.97k|#ifdef DEBUGBUILD
 3467|  2.97k|    infof(data, "Expire cleared (transfer %p)", data);
 3468|  2.97k|#endif
 3469|  2.97k|    nowp->tv_sec = 0;
 3470|  2.97k|    nowp->tv_usec = 0;
 3471|  2.97k|  }
 3472|  5.90k|}
Curl_multi_max_host_connections:
 3496|  2.92k|{
 3497|  2.92k|  return multi ? multi->max_host_connections : 0;
 3498|  2.92k|}
Curl_multi_max_total_connections:
 3501|  2.92k|{
 3502|  2.92k|  return multi ? multi->max_total_connections : 0;
 3503|  2.92k|}
Curl_set_in_callback:
 3545|  27.0k|{
 3546|       |  /* might get called when there is no data pointer! */
 3547|  27.0k|  if(data) {
 3548|  27.0k|    if(data->multi_easy)
 3549|      0|      data->multi_easy->in_callback = value;
 3550|  27.0k|    else if(data->multi)
 3551|  27.0k|      data->multi->in_callback = value;
 3552|  27.0k|  }
 3553|  27.0k|}
multi.c:sh_init:
  336|  2.97k|{
  337|  2.97k|  return Curl_hash_init(hash, hashsize, hash_fd, fd_key_compare,
  338|  2.97k|                        sh_freeentry);
  339|  2.97k|}
multi.c:hash_fd:
  310|  2.31k|{
  311|  2.31k|  curl_socket_t fd = *((curl_socket_t *) key);
  312|  2.31k|  (void) key_length;
  313|       |
  314|  2.31k|  return (fd % slots_num);
  315|  2.31k|}
multi.c:mstate:
  131|  24.1k|{
  132|  24.1k|  CURLMstate oldstate = data->mstate;
  133|  24.1k|  static const init_multistate_func finit[MSTATE_LAST] = {
  134|  24.1k|    NULL,              /* INIT */
  135|  24.1k|    NULL,              /* PENDING */
  136|  24.1k|    Curl_init_CONNECT, /* CONNECT */
  137|  24.1k|    NULL,              /* RESOLVING */
  138|  24.1k|    NULL,              /* CONNECTING */
  139|  24.1k|    NULL,              /* TUNNELING */
  140|  24.1k|    NULL,              /* PROTOCONNECT */
  141|  24.1k|    NULL,              /* PROTOCONNECTING */
  142|  24.1k|    Curl_connect_free, /* DO */
  143|  24.1k|    NULL,              /* DOING */
  144|  24.1k|    NULL,              /* DOING_MORE */
  145|  24.1k|    before_perform,    /* DID */
  146|  24.1k|    NULL,              /* PERFORMING */
  147|  24.1k|    NULL,              /* RATELIMITING */
  148|  24.1k|    NULL,              /* DONE */
  149|  24.1k|    init_completed,    /* COMPLETED */
  150|       |    NULL               /* MSGSENT */
  151|  24.1k|  };
  152|       |
  153|       |#if defined(DEBUGBUILD) && defined(CURL_DISABLE_VERBOSE_STRINGS)
  154|       |  (void) lineno;
  155|       |#endif
  156|       |
  157|  24.1k|  if(oldstate == state)
  158|       |    /* don't bother when the new state is the same as the old state */
  159|  2.97k|    return;
  160|       |
  161|  21.2k|  data->mstate = state;
  162|       |
  163|  21.2k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  164|  21.2k|  if(data->mstate >= MSTATE_PENDING &&
  165|  21.2k|     data->mstate < MSTATE_COMPLETED) {
  166|  15.3k|    long connection_id = -5000;
  167|       |
  168|  15.3k|    if(data->conn)
  169|  12.4k|      connection_id = data->conn->connection_id;
  170|       |
  171|  15.3k|    infof(data,
  172|  15.3k|          "STATE: %s => %s handle %p; line %d (connection #%ld)",
  173|  15.3k|          statename[oldstate], statename[data->mstate],
  174|  15.3k|          (void *)data, lineno, connection_id);
  175|  15.3k|  }
  176|  21.2k|#endif
  177|       |
  178|  21.2k|  if(state == MSTATE_COMPLETED) {
  179|       |    /* changing to COMPLETED means there's one less easy handle 'alive' */
  180|  2.93k|    DEBUGASSERT(data->multi->num_alive > 0);
  181|  2.93k|    data->multi->num_alive--;
  182|  2.93k|  }
  183|       |
  184|       |  /* if this state has an init-function, run it */
  185|  21.2k|  if(finit[state])
  186|  9.68k|    finit[state](data);
  187|  21.2k|}
multi.c:before_perform:
  110|  1.50k|{
  111|  1.50k|  data->req.chunk = FALSE;
  112|  1.50k|  Curl_pgrsTime(data, TIMER_PRETRANSFER);
  113|  1.50k|}
multi.c:init_completed:
  116|  2.93k|{
  117|       |  /* this is a completed transfer */
  118|       |
  119|       |  /* Important: reset the conn pointer so that we don't point to memory
  120|       |     that could be freed anytime */
  121|  2.93k|  Curl_detach_connnection(data);
  122|  2.93k|  Curl_expire_clear(data); /* stop all timers */
  123|  2.93k|}
multi.c:multi_done:
  560|  2.84k|{
  561|  2.84k|  CURLcode result;
  562|  2.84k|  struct connectdata *conn = data->conn;
  563|  2.84k|  unsigned int i;
  564|       |
  565|  2.84k|  DEBUGF(infof(data, "multi_done"));
  566|       |
  567|  2.84k|  if(data->state.done)
  568|       |    /* Stop if multi_done() has already been called */
  569|      0|    return CURLE_OK;
  570|       |
  571|       |  /* Stop the resolver and free its own resources (but not dns_entry yet). */
  572|  2.84k|  Curl_resolver_kill(data);
  573|       |
  574|       |  /* Cleanup possible redirect junk */
  575|  2.84k|  Curl_safefree(data->req.newurl);
  576|  2.84k|  Curl_safefree(data->req.location);
  577|       |
  578|  2.84k|  switch(status) {
  579|      3|  case CURLE_ABORTED_BY_CALLBACK:
  580|      3|  case CURLE_READ_ERROR:
  581|      6|  case CURLE_WRITE_ERROR:
  582|       |    /* When we're aborted due to a callback return code it basically have to
  583|       |       be counted as premature as there is trouble ahead if we don't. We have
  584|       |       many callbacks and protocols work differently, we could potentially do
  585|       |       this more fine-grained in the future. */
  586|      6|    premature = TRUE;
  587|  2.84k|  default:
  588|  2.84k|    break;
  589|  2.84k|  }
  590|       |
  591|       |  /* this calls the protocol-specific function pointer previously set */
  592|  2.84k|  if(conn->handler->done)
  593|  2.78k|    result = conn->handler->done(data, status, premature);
  594|     54|  else
  595|     54|    result = status;
  596|       |
  597|  2.84k|  if(CURLE_ABORTED_BY_CALLBACK != result) {
  598|       |    /* avoid this if we already aborted by callback to avoid this calling
  599|       |       another callback */
  600|  2.83k|    CURLcode rc = Curl_pgrsDone(data);
  601|  2.83k|    if(!result && rc)
  602|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  603|  2.83k|  }
  604|       |
  605|  2.84k|  process_pending_handles(data->multi); /* connection / multiplex */
  606|       |
  607|  2.84k|  CONNCACHE_LOCK(data);
  608|  2.84k|  Curl_detach_connnection(data);
  609|  2.84k|  if(CONN_INUSE(conn)) {
  610|       |    /* Stop if still used. */
  611|      0|    CONNCACHE_UNLOCK(data);
  612|      0|    DEBUGF(infof(data, "Connection still in use %zu, "
  613|      0|                 "no more multi_done now!",
  614|      0|                 conn->easyq.size));
  615|      0|    return CURLE_OK;
  616|      0|  }
  617|       |
  618|  2.84k|  data->state.done = TRUE; /* called just now! */
  619|       |
  620|  2.84k|  if(conn->dns_entry) {
  621|  2.79k|    Curl_resolv_unlock(data, conn->dns_entry); /* done with this */
  622|  2.79k|    conn->dns_entry = NULL;
  623|  2.79k|  }
  624|  2.84k|  Curl_hostcache_prune(data);
  625|  2.84k|  Curl_safefree(data->state.ulbuf);
  626|       |
  627|       |  /* if the transfer was completed in a paused state there can be buffered
  628|       |     data left to free */
  629|  2.84k|  for(i = 0; i < data->state.tempcount; i++) {
  630|      0|    Curl_dyn_free(&data->state.tempwrite[i].b);
  631|      0|  }
  632|  2.84k|  data->state.tempcount = 0;
  633|       |
  634|       |  /* if data->set.reuse_forbid is TRUE, it means the libcurl client has
  635|       |     forced us to close this connection. This is ignored for requests taking
  636|       |     place in a NTLM/NEGOTIATE authentication handshake
  637|       |
  638|       |     if conn->bits.close is TRUE, it means that the connection should be
  639|       |     closed in spite of all our efforts to be nice, due to protocol
  640|       |     restrictions in our or the server's end
  641|       |
  642|       |     if premature is TRUE, it means this connection was said to be DONE before
  643|       |     the entire request operation is complete and thus we can't know in what
  644|       |     state it is for re-using, so we're forced to close it. In a perfect world
  645|       |     we can add code that keep track of if we really must close it here or not,
  646|       |     but currently we have no such detail knowledge.
  647|       |  */
  648|       |
  649|  2.84k|  if((data->set.reuse_forbid
  650|  2.84k|#if defined(USE_NTLM)
  651|  2.84k|      && !(conn->http_ntlm_state == NTLMSTATE_TYPE2 ||
  652|      0|           conn->proxy_ntlm_state == NTLMSTATE_TYPE2)
  653|  2.84k|#endif
  654|       |#if defined(USE_SPNEGO)
  655|       |      && !(conn->http_negotiate_state == GSS_AUTHRECV ||
  656|       |           conn->proxy_negotiate_state == GSS_AUTHRECV)
  657|       |#endif
  658|  2.84k|     ) || conn->bits.close
  659|  2.84k|       || (premature && !(conn->handler->flags & PROTOPT_STREAM))) {
  660|  2.30k|    CURLcode res2;
  661|  2.30k|    connclose(conn, "disconnecting");
  662|  2.30k|    Curl_conncache_remove_conn(data, conn, FALSE);
  663|  2.30k|    CONNCACHE_UNLOCK(data);
  664|  2.30k|    res2 = Curl_disconnect(data, conn, premature);
  665|       |
  666|       |    /* If we had an error already, make sure we return that one. But
  667|       |       if we got a new error, return that. */
  668|  2.30k|    if(!result && res2)
  669|      0|      result = res2;
  670|  2.30k|  }
  671|    533|  else {
  672|    533|    char buffer[256];
  673|    533|    const char *host =
  674|    533|#ifndef CURL_DISABLE_PROXY
  675|    533|      conn->bits.socksproxy ?
  676|      0|      conn->socks_proxy.host.dispname :
  677|    533|      conn->bits.httpproxy ? conn->http_proxy.host.dispname :
  678|    533|#endif
  679|    533|      conn->bits.conn_to_host ? conn->conn_to_host.dispname :
  680|    533|      conn->host.dispname;
  681|       |    /* create string before returning the connection */
  682|    533|    msnprintf(buffer, sizeof(buffer),
  683|    533|              "Connection #%ld to host %s left intact",
  684|    533|              conn->connection_id, host);
  685|       |    /* the connection is no longer in use by this transfer */
  686|    533|    CONNCACHE_UNLOCK(data);
  687|    533|    if(Curl_conncache_return_conn(data, conn)) {
  688|       |      /* remember the most recently used connection */
  689|    533|      data->state.lastconnect_id = conn->connection_id;
  690|    533|      infof(data, "%s", buffer);
  691|    533|    }
  692|      0|    else
  693|      0|      data->state.lastconnect_id = -1;
  694|    533|  }
  695|       |
  696|  2.84k|  Curl_safefree(data->state.buffer);
  697|  2.84k|  Curl_free_request_state(data);
  698|  2.84k|  return result;
  699|  2.84k|}
multi.c:close_connect_only:
  703|    479|{
  704|    479|  (void)param;
  705|    479|  if(data->state.lastconnect_id != conn->connection_id)
  706|      0|    return 0;
  707|       |
  708|    479|  if(!conn->bits.connect_only)
  709|    479|    return 1;
  710|       |
  711|      0|  connclose(conn, "Removing connect-only easy handle");
  712|       |
  713|      0|  return 1;
  714|    479|}
multi.c:multi_getsock:
  984|  4.74M|{
  985|  4.74M|  struct connectdata *conn = data->conn;
  986|       |  /* The no connection case can happen when this is called from
  987|       |     curl_multi_remove_handle() => singlesocket() => multi_getsock().
  988|       |  */
  989|  4.74M|  if(!conn)
  990|  2.97k|    return 0;
  991|       |
  992|  4.73M|  switch(data->mstate) {
  993|      0|  default:
  994|      0|    return 0;
  995|       |
  996|      0|  case MSTATE_RESOLVING:
  997|      0|    return Curl_resolv_getsock(data, socks);
  998|       |
  999|  1.50k|  case MSTATE_PROTOCONNECTING:
 1000|  1.50k|  case MSTATE_PROTOCONNECT:
 1001|  1.50k|    return protocol_getsock(data, conn, socks);
 1002|       |
 1003|      0|  case MSTATE_DO:
 1004|    924|  case MSTATE_DOING:
 1005|    924|    return doing_getsock(data, conn, socks);
 1006|       |
 1007|      0|  case MSTATE_TUNNELING:
 1008|      0|    return waitproxyconnect_getsock(conn, socks);
 1009|       |
 1010|      0|  case MSTATE_CONNECTING:
 1011|      0|    return waitconnect_getsock(conn, socks);
 1012|       |
 1013|      0|  case MSTATE_DOING_MORE:
 1014|      0|    return domore_getsock(data, conn, socks);
 1015|       |
 1016|      0|  case MSTATE_DID: /* since is set after DO is completed, we switch to
 1017|       |                        waiting for the same as the PERFORMING state */
 1018|  4.73M|  case MSTATE_PERFORMING:
 1019|  4.73M|    return Curl_single_getsock(data, conn, socks);
 1020|  4.73M|  }
 1021|       |
 1022|  4.73M|}
multi.c:protocol_getsock:
  970|  1.50k|{
  971|  1.50k|  if(conn->handler->proto_getsock)
  972|  1.50k|    return conn->handler->proto_getsock(data, conn, socks);
  973|       |  /* Backup getsock logic. Since there is a live socket in use, we must wait
  974|       |     for it or it will be removed from watching when the multi_socket API is
  975|       |     used. */
  976|      0|  socks[0] = conn->sock[FIRSTSOCKET];
  977|      0|  return GETSOCK_READSOCK(0) | GETSOCK_WRITESOCK(0);
  978|  1.50k|}
multi.c:doing_getsock:
  961|    924|{
  962|    924|  if(conn && conn->handler->doing_getsock)
  963|    924|    return conn->handler->doing_getsock(data, conn, socks);
  964|      0|  return GETSOCK_BLANK;
  965|    924|}
multi.c:multi_runsingle:
 1729|  4.74M|{
 1730|  4.74M|  struct Curl_message *msg = NULL;
 1731|  4.74M|  bool connected;
 1732|  4.74M|  bool async;
 1733|  4.74M|  bool protocol_connected = FALSE;
 1734|  4.74M|  bool dophase_done = FALSE;
 1735|  4.74M|  bool done = FALSE;
 1736|  4.74M|  CURLMcode rc;
 1737|  4.74M|  CURLcode result = CURLE_OK;
 1738|  4.74M|  timediff_t recv_timeout_ms;
 1739|  4.74M|  timediff_t send_timeout_ms;
 1740|  4.74M|  int control;
 1741|       |
 1742|  4.74M|  if(!GOOD_EASY_HANDLE(data))
 1743|      0|    return CURLM_BAD_EASY_HANDLE;
 1744|       |
 1745|  4.75M|  do {
 1746|       |    /* A "stream" here is a logical stream if the protocol can handle that
 1747|       |       (HTTP/2), or the full connection for older protocols */
 1748|  4.75M|    bool stream_error = FALSE;
 1749|  4.75M|    rc = CURLM_OK;
 1750|       |
 1751|  4.75M|    if(multi_ischanged(multi, TRUE)) {
 1752|      0|      DEBUGF(infof(data, "multi changed, check CONNECT_PEND queue!"));
 1753|      0|      process_pending_handles(multi); /* multiplexed */
 1754|      0|    }
 1755|       |
 1756|  4.75M|    if(data->mstate > MSTATE_CONNECT &&
 1757|  4.75M|       data->mstate < MSTATE_COMPLETED) {
 1758|       |      /* Make sure we set the connection's current owner */
 1759|  4.74M|      DEBUGASSERT(data->conn);
 1760|  4.74M|      if(!data->conn)
 1761|      0|        return CURLM_INTERNAL_ERROR;
 1762|  4.74M|    }
 1763|       |
 1764|  4.75M|    if(data->conn &&
 1765|  4.75M|       (data->mstate >= MSTATE_CONNECT) &&
 1766|  4.75M|       (data->mstate < MSTATE_COMPLETED)) {
 1767|       |      /* Check for overall operation timeout here but defer handling the
 1768|       |       * connection timeout to later, to allow for a connection to be set up
 1769|       |       * in the window since we last checked timeout. This prevents us
 1770|       |       * tearing down a completed connection in the case where we were slow
 1771|       |       * to check the timeout (e.g. process descheduled during this loop).
 1772|       |       * We set connect_timeout=FALSE to do this. */
 1773|       |
 1774|       |      /* we need to wait for the connect state as only then is the start time
 1775|       |         stored, but we must not check already completed handles */
 1776|  4.74M|      if(multi_handle_timeout(data, nowp, &stream_error, &result, FALSE)) {
 1777|       |        /* Skip the statemachine and go directly to error handling section. */
 1778|     44|        goto statemachine_end;
 1779|     44|      }
 1780|  4.74M|    }
 1781|       |
 1782|  4.75M|    switch(data->mstate) {
 1783|  2.97k|    case MSTATE_INIT:
 1784|       |      /* init this transfer. */
 1785|  2.97k|      result = Curl_pretransfer(data);
 1786|       |
 1787|  2.97k|      if(!result) {
 1788|       |        /* after init, go CONNECT */
 1789|  2.81k|        multistate(data, MSTATE_CONNECT);
 1790|  2.81k|        *nowp = Curl_pgrsTime(data, TIMER_STARTOP);
 1791|  2.81k|        rc = CURLM_CALL_MULTI_PERFORM;
 1792|  2.81k|      }
 1793|  2.97k|      break;
 1794|       |
 1795|      0|    case MSTATE_PENDING:
 1796|       |      /* We will stay here until there is a connection available. Then
 1797|       |         we try again in the MSTATE_CONNECT state. */
 1798|      0|      break;
 1799|       |
 1800|  2.92k|    case MSTATE_CONNECT:
 1801|       |      /* Connect. We want to get a connection identifier filled in. */
 1802|       |      /* init this transfer. */
 1803|  2.92k|      result = Curl_preconnect(data);
 1804|  2.92k|      if(result)
 1805|      0|        break;
 1806|       |
 1807|  2.92k|      *nowp = Curl_pgrsTime(data, TIMER_STARTSINGLE);
 1808|  2.92k|      if(data->set.timeout)
 1809|  2.92k|        Curl_expire(data, data->set.timeout, EXPIRE_TIMEOUT);
 1810|       |
 1811|  2.92k|      if(data->set.connecttimeout)
 1812|      0|        Curl_expire(data, data->set.connecttimeout, EXPIRE_CONNECTTIMEOUT);
 1813|       |
 1814|  2.92k|      result = Curl_connect(data, &async, &protocol_connected);
 1815|  2.92k|      if(CURLE_NO_CONNECTION_AVAILABLE == result) {
 1816|       |        /* There was no connection available. We will go to the pending
 1817|       |           state and wait for an available connection. */
 1818|      0|        multistate(data, MSTATE_PENDING);
 1819|       |
 1820|       |        /* add this handle to the list of connect-pending handles */
 1821|      0|        Curl_llist_insert_next(&multi->pending, multi->pending.tail, data,
 1822|      0|                               &data->connect_queue);
 1823|      0|        result = CURLE_OK;
 1824|      0|        break;
 1825|      0|      }
 1826|  2.92k|      else if(data->state.previouslypending) {
 1827|       |        /* this transfer comes from the pending queue so try move another */
 1828|      0|        infof(data, "Transfer was pending, now try another");
 1829|      0|        process_pending_handles(data->multi);
 1830|      0|      }
 1831|       |
 1832|  2.92k|      if(!result) {
 1833|  2.84k|        if(async)
 1834|       |          /* We're now waiting for an asynchronous name lookup */
 1835|      0|          multistate(data, MSTATE_RESOLVING);
 1836|  2.84k|        else {
 1837|       |          /* after the connect has been sent off, go WAITCONNECT unless the
 1838|       |             protocol connect is already done and we can go directly to
 1839|       |             WAITDO or DO! */
 1840|  2.84k|          rc = CURLM_CALL_MULTI_PERFORM;
 1841|       |
 1842|  2.84k|          if(protocol_connected)
 1843|     42|            multistate(data, MSTATE_DO);
 1844|  2.79k|          else {
 1845|  2.79k|#ifndef CURL_DISABLE_HTTP
 1846|  2.79k|            if(Curl_connect_ongoing(data->conn))
 1847|      0|              multistate(data, MSTATE_TUNNELING);
 1848|  2.79k|            else
 1849|  2.79k|#endif
 1850|  2.79k|              multistate(data, MSTATE_CONNECTING);
 1851|  2.79k|          }
 1852|  2.84k|        }
 1853|  2.84k|      }
 1854|  2.92k|      break;
 1855|       |
 1856|      0|    case MSTATE_RESOLVING:
 1857|       |      /* awaiting an asynch name resolve to complete */
 1858|      0|    {
 1859|      0|      struct Curl_dns_entry *dns = NULL;
 1860|      0|      struct connectdata *conn = data->conn;
 1861|      0|      const char *hostname;
 1862|       |
 1863|      0|      DEBUGASSERT(conn);
 1864|      0|#ifndef CURL_DISABLE_PROXY
 1865|      0|      if(conn->bits.httpproxy)
 1866|      0|        hostname = conn->http_proxy.host.name;
 1867|      0|      else
 1868|      0|#endif
 1869|      0|        if(conn->bits.conn_to_host)
 1870|      0|        hostname = conn->conn_to_host.name;
 1871|      0|      else
 1872|      0|        hostname = conn->host.name;
 1873|       |
 1874|       |      /* check if we have the name resolved by now */
 1875|      0|      dns = Curl_fetch_addr(data, hostname, (int)conn->port);
 1876|       |
 1877|      0|      if(dns) {
 1878|      0|#ifdef CURLRES_ASYNCH
 1879|      0|        data->state.async.dns = dns;
 1880|      0|        data->state.async.done = TRUE;
 1881|      0|#endif
 1882|      0|        result = CURLE_OK;
 1883|      0|        infof(data, "Hostname '%s' was found in DNS cache", hostname);
 1884|      0|      }
 1885|       |
 1886|      0|      if(!dns)
 1887|      0|        result = Curl_resolv_check(data, &dns);
 1888|       |
 1889|       |      /* Update sockets here, because the socket(s) may have been
 1890|       |         closed and the application thus needs to be told, even if it
 1891|       |         is likely that the same socket(s) will again be used further
 1892|       |         down.  If the name has not yet been resolved, it is likely
 1893|       |         that new sockets have been opened in an attempt to contact
 1894|       |         another resolver. */
 1895|      0|      singlesocket(multi, data);
 1896|       |
 1897|      0|      if(dns) {
 1898|       |        /* Perform the next step in the connection phase, and then move on
 1899|       |           to the WAITCONNECT state */
 1900|      0|        result = Curl_once_resolved(data, &protocol_connected);
 1901|       |
 1902|      0|        if(result)
 1903|       |          /* if Curl_once_resolved() returns failure, the connection struct
 1904|       |             is already freed and gone */
 1905|      0|          data->conn = NULL; /* no more connection */
 1906|      0|        else {
 1907|       |          /* call again please so that we get the next socket setup */
 1908|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 1909|      0|          if(protocol_connected)
 1910|      0|            multistate(data, MSTATE_DO);
 1911|      0|          else {
 1912|      0|#ifndef CURL_DISABLE_HTTP
 1913|      0|            if(Curl_connect_ongoing(data->conn))
 1914|      0|              multistate(data, MSTATE_TUNNELING);
 1915|      0|            else
 1916|      0|#endif
 1917|      0|              multistate(data, MSTATE_CONNECTING);
 1918|      0|          }
 1919|      0|        }
 1920|      0|      }
 1921|       |
 1922|      0|      if(result) {
 1923|       |        /* failure detected */
 1924|      0|        stream_error = TRUE;
 1925|      0|        break;
 1926|      0|      }
 1927|      0|    }
 1928|      0|    break;
 1929|       |
 1930|      0|#ifndef CURL_DISABLE_HTTP
 1931|      0|    case MSTATE_TUNNELING:
 1932|       |      /* this is HTTP-specific, but sending CONNECT to a proxy is HTTP... */
 1933|      0|      DEBUGASSERT(data->conn);
 1934|      0|      result = Curl_http_connect(data, &protocol_connected);
 1935|      0|#ifndef CURL_DISABLE_PROXY
 1936|      0|      if(data->conn->bits.proxy_connect_closed) {
 1937|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 1938|       |        /* connect back to proxy again */
 1939|      0|        result = CURLE_OK;
 1940|      0|        multi_done(data, CURLE_OK, FALSE);
 1941|      0|        multistate(data, MSTATE_CONNECT);
 1942|      0|      }
 1943|      0|      else
 1944|      0|#endif
 1945|      0|        if(!result) {
 1946|      0|          if(
 1947|      0|#ifndef CURL_DISABLE_PROXY
 1948|      0|            (data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||
 1949|      0|             data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&
 1950|      0|#endif
 1951|      0|            Curl_connect_complete(data->conn)) {
 1952|      0|            rc = CURLM_CALL_MULTI_PERFORM;
 1953|       |            /* initiate protocol connect phase */
 1954|      0|            multistate(data, MSTATE_PROTOCONNECT);
 1955|      0|          }
 1956|      0|        }
 1957|      0|      else
 1958|      0|        stream_error = TRUE;
 1959|      0|      break;
 1960|      0|#endif
 1961|       |
 1962|  2.79k|    case MSTATE_CONNECTING:
 1963|       |      /* awaiting a completion of an asynch TCP connect */
 1964|  2.79k|      DEBUGASSERT(data->conn);
 1965|  2.79k|      result = Curl_is_connected(data, data->conn, FIRSTSOCKET, &connected);
 1966|  2.79k|      if(connected && !result) {
 1967|  2.79k|#ifndef CURL_DISABLE_HTTP
 1968|  2.79k|        if(
 1969|  2.79k|#ifndef CURL_DISABLE_PROXY
 1970|  2.79k|          (data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&
 1971|  2.79k|           !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||
 1972|  2.79k|#endif
 1973|  2.79k|          Curl_connect_ongoing(data->conn)) {
 1974|      0|          multistate(data, MSTATE_TUNNELING);
 1975|      0|          break;
 1976|      0|        }
 1977|  2.79k|#endif
 1978|  2.79k|        rc = CURLM_CALL_MULTI_PERFORM;
 1979|  2.79k|#ifndef CURL_DISABLE_PROXY
 1980|  2.79k|        multistate(data,
 1981|  2.79k|                   data->conn->bits.tunnel_proxy?
 1982|  2.79k|                   MSTATE_TUNNELING : MSTATE_PROTOCONNECT);
 1983|       |#else
 1984|       |        multistate(data, MSTATE_PROTOCONNECT);
 1985|       |#endif
 1986|  2.79k|      }
 1987|      0|      else if(result) {
 1988|       |        /* failure detected */
 1989|      0|        Curl_posttransfer(data);
 1990|      0|        multi_done(data, result, TRUE);
 1991|      0|        stream_error = TRUE;
 1992|      0|        break;
 1993|      0|      }
 1994|  2.79k|      break;
 1995|       |
 1996|  2.79k|    case MSTATE_PROTOCONNECT:
 1997|  2.79k|      result = protocol_connect(data, &protocol_connected);
 1998|  2.79k|      if(!result && !protocol_connected)
 1999|       |        /* switch to waiting state */
 2000|    298|        multistate(data, MSTATE_PROTOCONNECTING);
 2001|  2.50k|      else if(!result) {
 2002|       |        /* protocol connect has completed, go WAITDO or DO */
 2003|  2.09k|        multistate(data, MSTATE_DO);
 2004|  2.09k|        rc = CURLM_CALL_MULTI_PERFORM;
 2005|  2.09k|      }
 2006|    403|      else {
 2007|       |        /* failure detected */
 2008|    403|        Curl_posttransfer(data);
 2009|    403|        multi_done(data, result, TRUE);
 2010|    403|        stream_error = TRUE;
 2011|    403|      }
 2012|  2.79k|      break;
 2013|       |
 2014|  1.48k|    case MSTATE_PROTOCONNECTING:
 2015|       |      /* protocol-specific connect phase */
 2016|  1.48k|      result = protocol_connecting(data, &protocol_connected);
 2017|  1.48k|      if(!result && protocol_connected) {
 2018|       |        /* after the connect has completed, go WAITDO or DO */
 2019|    189|        multistate(data, MSTATE_DO);
 2020|    189|        rc = CURLM_CALL_MULTI_PERFORM;
 2021|    189|      }
 2022|  1.29k|      else if(result) {
 2023|       |        /* failure detected */
 2024|     94|        Curl_posttransfer(data);
 2025|     94|        multi_done(data, result, TRUE);
 2026|     94|        stream_error = TRUE;
 2027|     94|      }
 2028|  1.48k|      break;
 2029|       |
 2030|  2.32k|    case MSTATE_DO:
 2031|  2.32k|      if(data->set.fprereq) {
 2032|      0|        int prereq_rc;
 2033|       |
 2034|       |        /* call the prerequest callback function */
 2035|      0|        Curl_set_in_callback(data, true);
 2036|      0|        prereq_rc = data->set.fprereq(data->set.prereq_userp,
 2037|      0|                                      data->info.conn_primary_ip,
 2038|      0|                                      data->info.conn_local_ip,
 2039|      0|                                      data->info.conn_primary_port,
 2040|      0|                                      data->info.conn_local_port);
 2041|      0|        Curl_set_in_callback(data, false);
 2042|      0|        if(prereq_rc != CURL_PREREQFUNC_OK) {
 2043|      0|          failf(data, "operation aborted by pre-request callback");
 2044|       |          /* failure in pre-request callback - don't do any other processing */
 2045|      0|          result = CURLE_ABORTED_BY_CALLBACK;
 2046|      0|          Curl_posttransfer(data);
 2047|      0|          multi_done(data, result, FALSE);
 2048|      0|          stream_error = TRUE;
 2049|      0|          break;
 2050|      0|        }
 2051|      0|      }
 2052|       |
 2053|  2.32k|      if(data->set.connect_only) {
 2054|       |        /* keep connection open for application to use the socket */
 2055|      0|        connkeep(data->conn, "CONNECT_ONLY");
 2056|      0|        multistate(data, MSTATE_DONE);
 2057|      0|        result = CURLE_OK;
 2058|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2059|      0|      }
 2060|  2.32k|      else {
 2061|       |        /* Perform the protocol's DO action */
 2062|  2.32k|        result = multi_do(data, &dophase_done);
 2063|       |
 2064|       |        /* When multi_do() returns failure, data->conn might be NULL! */
 2065|       |
 2066|  2.32k|        if(!result) {
 2067|  1.63k|          if(!dophase_done) {
 2068|    180|#ifndef CURL_DISABLE_FTP
 2069|       |            /* some steps needed for wildcard matching */
 2070|    180|            if(data->state.wildcardmatch) {
 2071|      5|              struct WildcardData *wc = &data->wildcard;
 2072|      5|              if(wc->state == CURLWC_DONE || wc->state == CURLWC_SKIP) {
 2073|       |                /* skip some states if it is important */
 2074|      0|                multi_done(data, CURLE_OK, FALSE);
 2075|       |
 2076|       |                /* if there's no connection left, skip the DONE state */
 2077|      0|                multistate(data, data->conn ?
 2078|      0|                           MSTATE_DONE : MSTATE_COMPLETED);
 2079|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2080|      0|                break;
 2081|      0|              }
 2082|      5|            }
 2083|    180|#endif
 2084|       |            /* DO was not completed in one function call, we must continue
 2085|       |               DOING... */
 2086|    180|            multistate(data, MSTATE_DOING);
 2087|    180|            rc = CURLM_OK;
 2088|    180|          }
 2089|       |
 2090|       |          /* after DO, go DO_DONE... or DO_MORE */
 2091|  1.45k|          else if(data->conn->bits.do_more) {
 2092|       |            /* we're supposed to do more, but we need to sit down, relax
 2093|       |               and wait a little while first */
 2094|      0|            multistate(data, MSTATE_DOING_MORE);
 2095|      0|            rc = CURLM_OK;
 2096|      0|          }
 2097|  1.45k|          else {
 2098|       |            /* we're done with the DO, now DID */
 2099|  1.45k|            multistate(data, MSTATE_DID);
 2100|  1.45k|            rc = CURLM_CALL_MULTI_PERFORM;
 2101|  1.45k|          }
 2102|  1.63k|        }
 2103|    694|        else if((CURLE_SEND_ERROR == result) &&
 2104|    694|                data->conn->bits.reuse) {
 2105|       |          /*
 2106|       |           * In this situation, a connection that we were trying to use
 2107|       |           * may have unexpectedly died.  If possible, send the connection
 2108|       |           * back to the CONNECT phase so we can try again.
 2109|       |           */
 2110|      0|          char *newurl = NULL;
 2111|      0|          followtype follow = FOLLOW_NONE;
 2112|      0|          CURLcode drc;
 2113|       |
 2114|      0|          drc = Curl_retry_request(data, &newurl);
 2115|      0|          if(drc) {
 2116|       |            /* a failure here pretty much implies an out of memory */
 2117|      0|            result = drc;
 2118|      0|            stream_error = TRUE;
 2119|      0|          }
 2120|       |
 2121|      0|          Curl_posttransfer(data);
 2122|      0|          drc = multi_done(data, result, FALSE);
 2123|       |
 2124|       |          /* When set to retry the connection, we must to go back to
 2125|       |           * the CONNECT state */
 2126|      0|          if(newurl) {
 2127|      0|            if(!drc || (drc == CURLE_SEND_ERROR)) {
 2128|      0|              follow = FOLLOW_RETRY;
 2129|      0|              drc = Curl_follow(data, newurl, follow);
 2130|      0|              if(!drc) {
 2131|      0|                multistate(data, MSTATE_CONNECT);
 2132|      0|                rc = CURLM_CALL_MULTI_PERFORM;
 2133|      0|                result = CURLE_OK;
 2134|      0|              }
 2135|      0|              else {
 2136|       |                /* Follow failed */
 2137|      0|                result = drc;
 2138|      0|              }
 2139|      0|            }
 2140|      0|            else {
 2141|       |              /* done didn't return OK or SEND_ERROR */
 2142|      0|              result = drc;
 2143|      0|            }
 2144|      0|          }
 2145|      0|          else {
 2146|       |            /* Have error handler disconnect conn if we can't retry */
 2147|      0|            stream_error = TRUE;
 2148|      0|          }
 2149|      0|          free(newurl);
 2150|      0|        }
 2151|    694|        else {
 2152|       |          /* failure detected */
 2153|    694|          Curl_posttransfer(data);
 2154|    694|          if(data->conn)
 2155|    694|            multi_done(data, result, FALSE);
 2156|    694|          stream_error = TRUE;
 2157|    694|        }
 2158|  2.32k|      }
 2159|  2.32k|      break;
 2160|       |
 2161|  2.32k|    case MSTATE_DOING:
 2162|       |      /* we continue DOING until the DO phase is complete */
 2163|    903|      DEBUGASSERT(data->conn);
 2164|    903|      result = protocol_doing(data, &dophase_done);
 2165|    903|      if(!result) {
 2166|    790|        if(dophase_done) {
 2167|       |          /* after DO, go DO_DONE or DO_MORE */
 2168|     46|          multistate(data, data->conn->bits.do_more?
 2169|     46|                     MSTATE_DOING_MORE : MSTATE_DID);
 2170|     46|          rc = CURLM_CALL_MULTI_PERFORM;
 2171|     46|        } /* dophase_done */
 2172|    790|      }
 2173|    113|      else {
 2174|       |        /* failure detected */
 2175|    113|        Curl_posttransfer(data);
 2176|    113|        multi_done(data, result, FALSE);
 2177|    113|        stream_error = TRUE;
 2178|    113|      }
 2179|    903|      break;
 2180|       |
 2181|      0|    case MSTATE_DOING_MORE:
 2182|       |      /*
 2183|       |       * When we are connected, DOING MORE and then go DID
 2184|       |       */
 2185|      0|      DEBUGASSERT(data->conn);
 2186|      0|      result = multi_do_more(data, &control);
 2187|       |
 2188|      0|      if(!result) {
 2189|      0|        if(control) {
 2190|       |          /* if positive, advance to DO_DONE
 2191|       |             if negative, go back to DOING */
 2192|      0|          multistate(data, control == 1?
 2193|      0|                     MSTATE_DID : MSTATE_DOING);
 2194|      0|          rc = CURLM_CALL_MULTI_PERFORM;
 2195|      0|        }
 2196|      0|        else
 2197|       |          /* stay in DO_MORE */
 2198|      0|          rc = CURLM_OK;
 2199|      0|      }
 2200|      0|      else {
 2201|       |        /* failure detected */
 2202|      0|        Curl_posttransfer(data);
 2203|      0|        multi_done(data, result, FALSE);
 2204|      0|        stream_error = TRUE;
 2205|      0|      }
 2206|      0|      break;
 2207|       |
 2208|  1.50k|    case MSTATE_DID:
 2209|  1.50k|      DEBUGASSERT(data->conn);
 2210|  1.50k|      if(data->conn->bits.multiplex)
 2211|       |        /* Check if we can move pending requests to send pipe */
 2212|      0|        process_pending_handles(multi); /*  multiplexed */
 2213|       |
 2214|       |      /* Only perform the transfer if there's a good socket to work with.
 2215|       |         Having both BAD is a signal to skip immediately to DONE */
 2216|  1.50k|      if((data->conn->sockfd != CURL_SOCKET_BAD) ||
 2217|  1.50k|         (data->conn->writesockfd != CURL_SOCKET_BAD))
 2218|  1.46k|        multistate(data, MSTATE_PERFORMING);
 2219|     32|      else {
 2220|     32|#ifndef CURL_DISABLE_FTP
 2221|     32|        if(data->state.wildcardmatch &&
 2222|     32|           ((data->conn->handler->flags & PROTOPT_WILDCARD) == 0)) {
 2223|      0|          data->wildcard.state = CURLWC_DONE;
 2224|      0|        }
 2225|     32|#endif
 2226|     32|        multistate(data, MSTATE_DONE);
 2227|     32|      }
 2228|  1.50k|      rc = CURLM_CALL_MULTI_PERFORM;
 2229|  1.50k|      break;
 2230|       |
 2231|      0|    case MSTATE_RATELIMITING: /* limit-rate exceeded in either direction */
 2232|      0|      DEBUGASSERT(data->conn);
 2233|       |      /* if both rates are within spec, resume transfer */
 2234|      0|      if(Curl_pgrsUpdate(data))
 2235|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2236|      0|      else
 2237|      0|        result = Curl_speedcheck(data, *nowp);
 2238|       |
 2239|      0|      if(result) {
 2240|      0|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2241|      0|           result != CURLE_HTTP2_STREAM)
 2242|      0|          streamclose(data->conn, "Transfer returned error");
 2243|       |
 2244|      0|        Curl_posttransfer(data);
 2245|      0|        multi_done(data, result, TRUE);
 2246|      0|      }
 2247|      0|      else {
 2248|      0|        send_timeout_ms = 0;
 2249|      0|        if(data->set.max_send_speed)
 2250|      0|          send_timeout_ms =
 2251|      0|            Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2252|      0|                                   data->progress.ul_limit_size,
 2253|      0|                                   data->set.max_send_speed,
 2254|      0|                                   data->progress.ul_limit_start,
 2255|      0|                                   *nowp);
 2256|       |
 2257|      0|        recv_timeout_ms = 0;
 2258|      0|        if(data->set.max_recv_speed)
 2259|      0|          recv_timeout_ms =
 2260|      0|            Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2261|      0|                                   data->progress.dl_limit_size,
 2262|      0|                                   data->set.max_recv_speed,
 2263|      0|                                   data->progress.dl_limit_start,
 2264|      0|                                   *nowp);
 2265|       |
 2266|      0|        if(!send_timeout_ms && !recv_timeout_ms) {
 2267|      0|          multistate(data, MSTATE_PERFORMING);
 2268|      0|          Curl_ratelimit(data, *nowp);
 2269|      0|        }
 2270|      0|        else if(send_timeout_ms >= recv_timeout_ms)
 2271|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2272|      0|        else
 2273|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2274|      0|      }
 2275|      0|      break;
 2276|       |
 2277|  4.73M|    case MSTATE_PERFORMING:
 2278|  4.73M|    {
 2279|  4.73M|      char *newurl = NULL;
 2280|  4.73M|      bool retry = FALSE;
 2281|  4.73M|      bool comeback = FALSE;
 2282|  4.73M|      DEBUGASSERT(data->state.buffer);
 2283|       |      /* check if over send speed */
 2284|  4.73M|      send_timeout_ms = 0;
 2285|  4.73M|      if(data->set.max_send_speed)
 2286|      0|        send_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.uploaded,
 2287|      0|                                                 data->progress.ul_limit_size,
 2288|      0|                                                 data->set.max_send_speed,
 2289|      0|                                                 data->progress.ul_limit_start,
 2290|      0|                                                 *nowp);
 2291|       |
 2292|       |      /* check if over recv speed */
 2293|  4.73M|      recv_timeout_ms = 0;
 2294|  4.73M|      if(data->set.max_recv_speed)
 2295|      0|        recv_timeout_ms = Curl_pgrsLimitWaitTime(data->progress.downloaded,
 2296|      0|                                                 data->progress.dl_limit_size,
 2297|      0|                                                 data->set.max_recv_speed,
 2298|      0|                                                 data->progress.dl_limit_start,
 2299|      0|                                                 *nowp);
 2300|       |
 2301|  4.73M|      if(send_timeout_ms || recv_timeout_ms) {
 2302|      0|        Curl_ratelimit(data, *nowp);
 2303|      0|        multistate(data, MSTATE_RATELIMITING);
 2304|      0|        if(send_timeout_ms >= recv_timeout_ms)
 2305|      0|          Curl_expire(data, send_timeout_ms, EXPIRE_TOOFAST);
 2306|      0|        else
 2307|      0|          Curl_expire(data, recv_timeout_ms, EXPIRE_TOOFAST);
 2308|      0|        break;
 2309|      0|      }
 2310|       |
 2311|       |      /* read/write data if it is ready to do so */
 2312|  4.73M|      result = Curl_readwrite(data->conn, data, &done, &comeback);
 2313|       |
 2314|  4.73M|      if(done || (result == CURLE_RECV_ERROR)) {
 2315|       |        /* If CURLE_RECV_ERROR happens early enough, we assume it was a race
 2316|       |         * condition and the server closed the re-used connection exactly when
 2317|       |         * we wanted to use it, so figure out if that is indeed the case.
 2318|       |         */
 2319|  1.13k|        CURLcode ret = Curl_retry_request(data, &newurl);
 2320|  1.13k|        if(!ret)
 2321|  1.13k|          retry = (newurl)?TRUE:FALSE;
 2322|      0|        else if(!result)
 2323|      0|          result = ret;
 2324|       |
 2325|  1.13k|        if(retry) {
 2326|       |          /* if we are to retry, set the result to OK and consider the
 2327|       |             request as done */
 2328|      0|          result = CURLE_OK;
 2329|      0|          done = TRUE;
 2330|      0|        }
 2331|  1.13k|      }
 2332|  4.73M|      else if((CURLE_HTTP2_STREAM == result) &&
 2333|  4.73M|              Curl_h2_http_1_1_error(data)) {
 2334|      0|        CURLcode ret = Curl_retry_request(data, &newurl);
 2335|       |
 2336|      0|        if(!ret) {
 2337|      0|          infof(data, "Downgrades to HTTP/1.1!");
 2338|      0|          streamclose(data->conn, "Disconnect HTTP/2 for HTTP/1");
 2339|      0|          data->state.httpwant = CURL_HTTP_VERSION_1_1;
 2340|       |          /* clear the error message bit too as we ignore the one we got */
 2341|      0|          data->state.errorbuf = FALSE;
 2342|      0|          if(!newurl)
 2343|       |            /* typically for HTTP_1_1_REQUIRED error on first flight */
 2344|      0|            newurl = strdup(data->state.url);
 2345|       |          /* if we are to retry, set the result to OK and consider the request
 2346|       |             as done */
 2347|      0|          retry = TRUE;
 2348|      0|          result = CURLE_OK;
 2349|      0|          done = TRUE;
 2350|      0|        }
 2351|      0|        else
 2352|      0|          result = ret;
 2353|      0|      }
 2354|       |
 2355|  4.73M|      if(result) {
 2356|       |        /*
 2357|       |         * The transfer phase returned error, we mark the connection to get
 2358|       |         * closed to prevent being re-used. This is because we can't possibly
 2359|       |         * know if the connection is in a good shape or not now.  Unless it is
 2360|       |         * a protocol which uses two "channels" like FTP, as then the error
 2361|       |         * happened in the data connection.
 2362|       |         */
 2363|       |
 2364|    286|        if(!(data->conn->handler->flags & PROTOPT_DUAL) &&
 2365|    286|           result != CURLE_HTTP2_STREAM)
 2366|    286|          streamclose(data->conn, "Transfer returned error");
 2367|       |
 2368|    286|        Curl_posttransfer(data);
 2369|    286|        multi_done(data, result, TRUE);
 2370|    286|      }
 2371|  4.73M|      else if(done) {
 2372|       |
 2373|       |        /* call this even if the readwrite function returned error */
 2374|  1.13k|        Curl_posttransfer(data);
 2375|       |
 2376|       |        /* When we follow redirects or is set to retry the connection, we must
 2377|       |           to go back to the CONNECT state */
 2378|  1.13k|        if(data->req.newurl || retry) {
 2379|    114|          followtype follow = FOLLOW_NONE;
 2380|    114|          if(!retry) {
 2381|       |            /* if the URL is a follow-location and not just a retried request
 2382|       |               then figure out the URL here */
 2383|    114|            free(newurl);
 2384|    114|            newurl = data->req.newurl;
 2385|    114|            data->req.newurl = NULL;
 2386|    114|            follow = FOLLOW_REDIR;
 2387|    114|          }
 2388|      0|          else
 2389|      0|            follow = FOLLOW_RETRY;
 2390|    114|          (void)multi_done(data, CURLE_OK, FALSE);
 2391|       |          /* multi_done() might return CURLE_GOT_NOTHING */
 2392|    114|          result = Curl_follow(data, newurl, follow);
 2393|    114|          if(!result) {
 2394|    106|            multistate(data, MSTATE_CONNECT);
 2395|    106|            rc = CURLM_CALL_MULTI_PERFORM;
 2396|    106|          }
 2397|    114|          free(newurl);
 2398|    114|        }
 2399|  1.02k|        else {
 2400|       |          /* after the transfer is done, go DONE */
 2401|       |
 2402|       |          /* but first check to see if we got a location info even though we're
 2403|       |             not following redirects */
 2404|  1.02k|          if(data->req.location) {
 2405|     48|            free(newurl);
 2406|     48|            newurl = data->req.location;
 2407|     48|            data->req.location = NULL;
 2408|     48|            result = Curl_follow(data, newurl, FOLLOW_FAKE);
 2409|     48|            free(newurl);
 2410|     48|            if(result) {
 2411|      0|              stream_error = TRUE;
 2412|      0|              result = multi_done(data, result, TRUE);
 2413|      0|            }
 2414|     48|          }
 2415|       |
 2416|  1.02k|          if(!result) {
 2417|  1.02k|            multistate(data, MSTATE_DONE);
 2418|  1.02k|            rc = CURLM_CALL_MULTI_PERFORM;
 2419|  1.02k|          }
 2420|  1.02k|        }
 2421|  1.13k|      }
 2422|  4.73M|      else if(comeback) {
 2423|       |        /* This avoids CURLM_CALL_MULTI_PERFORM so that a very fast transfer
 2424|       |           won't get stuck on this transfer at the expense of other concurrent
 2425|       |           transfers */
 2426|      0|        Curl_expire(data, 0, EXPIRE_RUN_NOW);
 2427|      0|        rc = CURLM_OK;
 2428|      0|      }
 2429|  4.73M|      break;
 2430|  4.73M|    }
 2431|       |
 2432|  1.05k|    case MSTATE_DONE:
 2433|       |      /* this state is highly transient, so run another loop after this */
 2434|  1.05k|      rc = CURLM_CALL_MULTI_PERFORM;
 2435|       |
 2436|  1.05k|      if(data->conn) {
 2437|  1.05k|        CURLcode res;
 2438|       |
 2439|  1.05k|        if(data->conn->bits.multiplex)
 2440|       |          /* Check if we can move pending requests to connection */
 2441|      0|          process_pending_handles(multi); /* multiplexing */
 2442|       |
 2443|       |        /* post-transfer command */
 2444|  1.05k|        res = multi_done(data, result, FALSE);
 2445|       |
 2446|       |        /* allow a previously set error code take precedence */
 2447|  1.05k|        if(!result)
 2448|  1.05k|          result = res;
 2449|  1.05k|      }
 2450|       |
 2451|  1.05k|#ifndef CURL_DISABLE_FTP
 2452|  1.05k|      if(data->state.wildcardmatch) {
 2453|      3|        if(data->wildcard.state != CURLWC_DONE) {
 2454|       |          /* if a wildcard is set and we are not ending -> lets start again
 2455|       |             with MSTATE_INIT */
 2456|      3|          multistate(data, MSTATE_INIT);
 2457|      3|          break;
 2458|      3|        }
 2459|      3|      }
 2460|  1.05k|#endif
 2461|       |      /* after we have DONE what we're supposed to do, go COMPLETED, and
 2462|       |         it doesn't matter what the multi_done() returned! */
 2463|  1.05k|      multistate(data, MSTATE_COMPLETED);
 2464|  1.05k|      break;
 2465|       |
 2466|      0|    case MSTATE_COMPLETED:
 2467|      0|      break;
 2468|       |
 2469|      0|    case MSTATE_MSGSENT:
 2470|      0|      data->result = result;
 2471|      0|      return CURLM_OK; /* do nothing */
 2472|       |
 2473|      0|    default:
 2474|      0|      return CURLM_INTERNAL_ERROR;
 2475|  4.75M|    }
 2476|       |
 2477|  4.75M|    if(data->conn &&
 2478|  4.75M|       data->mstate >= MSTATE_CONNECT &&
 2479|  4.75M|       data->mstate < MSTATE_DO &&
 2480|  4.75M|       rc != CURLM_CALL_MULTI_PERFORM &&
 2481|  4.75M|       !multi_ischanged(multi, false)) {
 2482|       |      /* We now handle stream timeouts if and only if this will be the last
 2483|       |       * loop iteration. We only check this on the last iteration to ensure
 2484|       |       * that if we know we have additional work to do immediately
 2485|       |       * (i.e. CURLM_CALL_MULTI_PERFORM == TRUE) then we should do that before
 2486|       |       * declaring the connection timed out as we may almost have a completed
 2487|       |       * connection. */
 2488|  1.50k|      multi_handle_timeout(data, nowp, &stream_error, &result, TRUE);
 2489|  1.50k|    }
 2490|       |
 2491|  4.75M|    statemachine_end:
 2492|       |
 2493|  4.75M|    if(data->mstate < MSTATE_COMPLETED) {
 2494|  4.75M|      if(result) {
 2495|       |        /*
 2496|       |         * If an error was returned, and we aren't in completed state now,
 2497|       |         * then we go to completed and consider this transfer aborted.
 2498|       |         */
 2499|       |
 2500|       |        /* NOTE: no attempt to disconnect connections must be made
 2501|       |           in the case blocks above - cleanup happens only here */
 2502|       |
 2503|       |        /* Check if we can move pending requests to send pipe */
 2504|  1.88k|        process_pending_handles(multi); /* connection */
 2505|       |
 2506|  1.88k|        if(data->conn) {
 2507|      0|          if(stream_error) {
 2508|       |            /* Don't attempt to send data over a connection that timed out */
 2509|      0|            bool dead_connection = result == CURLE_OPERATION_TIMEDOUT;
 2510|      0|            struct connectdata *conn = data->conn;
 2511|       |
 2512|       |            /* This is where we make sure that the conn pointer is reset.
 2513|       |               We don't have to do this in every case block above where a
 2514|       |               failure is detected */
 2515|      0|            Curl_detach_connnection(data);
 2516|       |
 2517|       |            /* remove connection from cache */
 2518|      0|            Curl_conncache_remove_conn(data, conn, TRUE);
 2519|       |
 2520|       |            /* disconnect properly */
 2521|      0|            Curl_disconnect(data, conn, dead_connection);
 2522|      0|          }
 2523|      0|        }
 2524|  1.88k|        else if(data->mstate == MSTATE_CONNECT) {
 2525|       |          /* Curl_connect() failed */
 2526|     84|          (void)Curl_posttransfer(data);
 2527|     84|        }
 2528|       |
 2529|  1.88k|        multistate(data, MSTATE_COMPLETED);
 2530|  1.88k|        rc = CURLM_CALL_MULTI_PERFORM;
 2531|  1.88k|      }
 2532|       |      /* if there's still a connection to use, call the progress function */
 2533|  4.75M|      else if(data->conn && Curl_pgrsUpdate(data)) {
 2534|       |        /* aborted due to progress callback return code must close the
 2535|       |           connection */
 2536|      0|        result = CURLE_ABORTED_BY_CALLBACK;
 2537|      0|        streamclose(data->conn, "Aborted by callback");
 2538|       |
 2539|       |        /* if not yet in DONE state, go there, otherwise COMPLETED */
 2540|      0|        multistate(data, (data->mstate < MSTATE_DONE)?
 2541|      0|                   MSTATE_DONE: MSTATE_COMPLETED);
 2542|      0|        rc = CURLM_CALL_MULTI_PERFORM;
 2543|      0|      }
 2544|  4.75M|    }
 2545|       |
 2546|  4.75M|    if(MSTATE_COMPLETED == data->mstate) {
 2547|  2.93k|      if(data->set.fmultidone) {
 2548|       |        /* signal via callback instead */
 2549|      0|        data->set.fmultidone(data, result);
 2550|      0|      }
 2551|  2.93k|      else {
 2552|       |        /* now fill in the Curl_message with this info */
 2553|  2.93k|        msg = &data->msg;
 2554|       |
 2555|  2.93k|        msg->extmsg.msg = CURLMSG_DONE;
 2556|  2.93k|        msg->extmsg.easy_handle = data;
 2557|  2.93k|        msg->extmsg.data.result = result;
 2558|       |
 2559|  2.93k|        rc = multi_addmsg(multi, msg);
 2560|  2.93k|        DEBUGASSERT(!data->conn);
 2561|  2.93k|      }
 2562|  2.93k|      multistate(data, MSTATE_MSGSENT);
 2563|  2.93k|    }
 2564|  4.75M|  } while((rc == CURLM_CALL_MULTI_PERFORM) || multi_ischanged(multi, FALSE));
 2565|       |
 2566|  4.74M|  data->result = result;
 2567|  4.74M|  return rc;
 2568|  4.74M|}
multi.c:multi_ischanged:
 1486|  9.49M|{
 1487|  9.49M|  bool retval = multi->recheckstate;
 1488|  9.49M|  if(clear)
 1489|  4.75M|    multi->recheckstate = FALSE;
 1490|  9.49M|  return retval;
 1491|  9.49M|}
multi.c:multi_handle_timeout:
 1563|  4.75M|{
 1564|  4.75M|  timediff_t timeout_ms;
 1565|  4.75M|  timeout_ms = Curl_timeleft(data, now, connect_timeout);
 1566|       |
 1567|  4.75M|  if(timeout_ms < 0) {
 1568|       |    /* Handle timed out */
 1569|     44|    if(data->mstate == MSTATE_RESOLVING)
 1570|      0|      failf(data, "Resolving timed out after %" CURL_FORMAT_TIMEDIFF_T
 1571|      0|            " milliseconds",
 1572|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1573|     44|    else if(data->mstate == MSTATE_CONNECTING)
 1574|      0|      failf(data, "Connection timed out after %" CURL_FORMAT_TIMEDIFF_T
 1575|      0|            " milliseconds",
 1576|      0|            Curl_timediff(*now, data->progress.t_startsingle));
 1577|     44|    else {
 1578|     44|      struct SingleRequest *k = &data->req;
 1579|     44|      if(k->size != -1) {
 1580|     15|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1581|     15|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1582|     15|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1583|     15|              Curl_timediff(*now, data->progress.t_startsingle),
 1584|     15|              k->bytecount, k->size);
 1585|     15|      }
 1586|     29|      else {
 1587|     29|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1588|     29|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T
 1589|     29|              " bytes received",
 1590|     29|              Curl_timediff(*now, data->progress.t_startsingle),
 1591|     29|              k->bytecount);
 1592|     29|      }
 1593|     44|    }
 1594|       |
 1595|       |    /* Force connection closed if the connection has indeed been used */
 1596|     44|    if(data->mstate > MSTATE_DO) {
 1597|     44|      streamclose(data->conn, "Disconnected with pending data");
 1598|     44|      *stream_error = TRUE;
 1599|     44|    }
 1600|     44|    *result = CURLE_OPERATION_TIMEDOUT;
 1601|     44|    (void)multi_done(data, *result, TRUE);
 1602|     44|  }
 1603|       |
 1604|  4.75M|  return (timeout_ms < 0);
 1605|  4.75M|}
multi.c:protocol_connect:
 1655|  2.79k|{
 1656|  2.79k|  CURLcode result = CURLE_OK;
 1657|  2.79k|  struct connectdata *conn = data->conn;
 1658|  2.79k|  DEBUGASSERT(conn);
 1659|  2.79k|  DEBUGASSERT(protocol_done);
 1660|       |
 1661|  2.79k|  *protocol_done = FALSE;
 1662|       |
 1663|  2.79k|  if(conn->bits.tcpconnect[FIRSTSOCKET] && conn->bits.protoconnstart) {
 1664|       |    /* We already are connected, get back. This may happen when the connect
 1665|       |       worked fine in the first call, like when we connect to a local server
 1666|       |       or proxy. Note that we don't know if the protocol is actually done.
 1667|       |
 1668|       |       Unless this protocol doesn't have any protocol-connect callback, as
 1669|       |       then we know we're done. */
 1670|      0|    if(!conn->handler->connecting)
 1671|      0|      *protocol_done = TRUE;
 1672|       |
 1673|      0|    return CURLE_OK;
 1674|      0|  }
 1675|       |
 1676|  2.79k|  if(!conn->bits.protoconnstart) {
 1677|  2.79k|#ifndef CURL_DISABLE_PROXY
 1678|  2.79k|    result = Curl_proxy_connect(data, FIRSTSOCKET);
 1679|  2.79k|    if(result)
 1680|      0|      return result;
 1681|       |
 1682|  2.79k|    if(CONNECT_FIRSTSOCKET_PROXY_SSL())
 1683|       |      /* wait for HTTPS proxy SSL initialization to complete */
 1684|      0|      return CURLE_OK;
 1685|       |
 1686|  2.79k|    if(conn->bits.tunnel_proxy && conn->bits.httpproxy &&
 1687|  2.79k|       Curl_connect_ongoing(conn))
 1688|       |      /* when using an HTTP tunnel proxy, await complete tunnel establishment
 1689|       |         before proceeding further. Return CURLE_OK so we'll be called again */
 1690|      0|      return CURLE_OK;
 1691|  2.79k|#endif
 1692|  2.79k|    if(conn->handler->connect_it) {
 1693|       |      /* is there a protocol-specific connect() procedure? */
 1694|       |
 1695|       |      /* Call the protocol-specific connect function */
 1696|  2.74k|      result = conn->handler->connect_it(data, protocol_done);
 1697|  2.74k|    }
 1698|     54|    else
 1699|     54|      *protocol_done = TRUE;
 1700|       |
 1701|       |    /* it has started, possibly even completed but that knowledge isn't stored
 1702|       |       in this bit! */
 1703|  2.79k|    if(!result)
 1704|  2.39k|      conn->bits.protoconnstart = TRUE;
 1705|  2.79k|  }
 1706|       |
 1707|  2.79k|  return result; /* pass back status */
 1708|  2.79k|}
multi.c:protocol_connecting:
 1614|  1.48k|{
 1615|  1.48k|  CURLcode result = CURLE_OK;
 1616|  1.48k|  struct connectdata *conn = data->conn;
 1617|       |
 1618|  1.48k|  if(conn && conn->handler->connecting) {
 1619|  1.48k|    *done = FALSE;
 1620|  1.48k|    result = conn->handler->connecting(data, done);
 1621|  1.48k|  }
 1622|      0|  else
 1623|      0|    *done = TRUE;
 1624|       |
 1625|  1.48k|  return result;
 1626|  1.48k|}
multi.c:multi_do:
 1519|  2.32k|{
 1520|  2.32k|  CURLcode result = CURLE_OK;
 1521|  2.32k|  struct connectdata *conn = data->conn;
 1522|       |
 1523|  2.32k|  DEBUGASSERT(conn);
 1524|  2.32k|  DEBUGASSERT(conn->handler);
 1525|       |
 1526|  2.32k|  if(conn->handler->do_it)
 1527|       |    /* generic protocol-specific function pointer set in curl_connect() */
 1528|  2.32k|    result = conn->handler->do_it(data, done);
 1529|       |
 1530|  2.32k|  return result;
 1531|  2.32k|}
multi.c:protocol_doing:
 1634|    903|{
 1635|    903|  CURLcode result = CURLE_OK;
 1636|    903|  struct connectdata *conn = data->conn;
 1637|       |
 1638|    903|  if(conn && conn->handler->doing) {
 1639|    903|    *done = FALSE;
 1640|    903|    result = conn->handler->doing(data, done);
 1641|    903|  }
 1642|      0|  else
 1643|      0|    *done = TRUE;
 1644|       |
 1645|    903|  return result;
 1646|    903|}
multi.c:multi_addmsg:
  349|  2.93k|{
  350|  2.93k|  Curl_llist_insert_next(&multi->msglist, multi->msglist.tail, msg,
  351|  2.93k|                         &msg->list);
  352|  2.93k|  return CURLM_OK;
  353|  2.93k|}
multi.c:singlesocket:
 2732|  2.97k|{
 2733|  2.97k|  curl_socket_t socks[MAX_SOCKSPEREASYHANDLE];
 2734|  2.97k|  int i;
 2735|  2.97k|  struct Curl_sh_entry *entry;
 2736|  2.97k|  curl_socket_t s;
 2737|  2.97k|  int num;
 2738|  2.97k|  unsigned int curraction;
 2739|  2.97k|  unsigned char actions[MAX_SOCKSPEREASYHANDLE];
 2740|       |
 2741|  17.8k|  for(i = 0; i< MAX_SOCKSPEREASYHANDLE; i++)
 2742|  14.8k|    socks[i] = CURL_SOCKET_BAD;
 2743|       |
 2744|       |  /* Fill in the 'current' struct with the state as it is now: what sockets to
 2745|       |     supervise and for what actions */
 2746|  2.97k|  curraction = multi_getsock(data, socks);
 2747|       |
 2748|       |  /* We have 0 .. N sockets already and we get to know about the 0 .. M
 2749|       |     sockets we should have from now on. Detect the differences, remove no
 2750|       |     longer supervised ones and add new ones */
 2751|       |
 2752|       |  /* walk over the sockets we got right now */
 2753|  2.97k|  for(i = 0; (i< MAX_SOCKSPEREASYHANDLE) &&
 2754|  2.97k|        (curraction & (GETSOCK_READSOCK(i) | GETSOCK_WRITESOCK(i)));
 2755|  2.97k|      i++) {
 2756|      0|    unsigned char action = CURL_POLL_NONE;
 2757|      0|    unsigned char prevaction = 0;
 2758|      0|    int comboaction;
 2759|      0|    bool sincebefore = FALSE;
 2760|       |
 2761|      0|    s = socks[i];
 2762|       |
 2763|       |    /* get it from the hash */
 2764|      0|    entry = sh_getentry(&multi->sockhash, s);
 2765|       |
 2766|      0|    if(curraction & GETSOCK_READSOCK(i))
 2767|      0|      action |= CURL_POLL_IN;
 2768|      0|    if(curraction & GETSOCK_WRITESOCK(i))
 2769|      0|      action |= CURL_POLL_OUT;
 2770|       |
 2771|      0|    actions[i] = action;
 2772|      0|    if(entry) {
 2773|       |      /* check if new for this transfer */
 2774|      0|      int j;
 2775|      0|      for(j = 0; j< data->numsocks; j++) {
 2776|      0|        if(s == data->sockets[j]) {
 2777|      0|          prevaction = data->actions[j];
 2778|      0|          sincebefore = TRUE;
 2779|      0|          break;
 2780|      0|        }
 2781|      0|      }
 2782|      0|    }
 2783|      0|    else {
 2784|       |      /* this is a socket we didn't have before, add it to the hash! */
 2785|      0|      entry = sh_addentry(&multi->sockhash, s);
 2786|      0|      if(!entry)
 2787|       |        /* fatal */
 2788|      0|        return CURLM_OUT_OF_MEMORY;
 2789|      0|    }
 2790|      0|    if(sincebefore && (prevaction != action)) {
 2791|       |      /* Socket was used already, but different action now */
 2792|      0|      if(prevaction & CURL_POLL_IN)
 2793|      0|        entry->readers--;
 2794|      0|      if(prevaction & CURL_POLL_OUT)
 2795|      0|        entry->writers--;
 2796|      0|      if(action & CURL_POLL_IN)
 2797|      0|        entry->readers++;
 2798|      0|      if(action & CURL_POLL_OUT)
 2799|      0|        entry->writers++;
 2800|      0|    }
 2801|      0|    else if(!sincebefore) {
 2802|       |      /* a new user */
 2803|      0|      entry->users++;
 2804|      0|      if(action & CURL_POLL_IN)
 2805|      0|        entry->readers++;
 2806|      0|      if(action & CURL_POLL_OUT)
 2807|      0|        entry->writers++;
 2808|       |
 2809|       |      /* add 'data' to the transfer hash on this socket! */
 2810|      0|      if(!Curl_hash_add(&entry->transfers, (char *)&data, /* hash key */
 2811|      0|                        sizeof(struct Curl_easy *), data))
 2812|      0|        return CURLM_OUT_OF_MEMORY;
 2813|      0|    }
 2814|       |
 2815|      0|    comboaction = (entry->writers? CURL_POLL_OUT : 0) |
 2816|      0|                   (entry->readers ? CURL_POLL_IN : 0);
 2817|       |
 2818|       |    /* socket existed before and has the same action set as before */
 2819|      0|    if(sincebefore && ((int)entry->action == comboaction))
 2820|       |      /* same, continue */
 2821|      0|      continue;
 2822|       |
 2823|      0|    if(multi->socket_cb)
 2824|      0|      multi->socket_cb(data, s, comboaction, multi->socket_userp,
 2825|      0|                       entry->socketp);
 2826|       |
 2827|      0|    entry->action = comboaction; /* store the current action state */
 2828|      0|  }
 2829|       |
 2830|  2.97k|  num = i; /* number of sockets */
 2831|       |
 2832|       |  /* when we've walked over all the sockets we should have right now, we must
 2833|       |     make sure to detect sockets that are removed */
 2834|  2.97k|  for(i = 0; i< data->numsocks; i++) {
 2835|      0|    int j;
 2836|      0|    bool stillused = FALSE;
 2837|      0|    s = data->sockets[i];
 2838|      0|    for(j = 0; j < num; j++) {
 2839|      0|      if(s == socks[j]) {
 2840|       |        /* this is still supervised */
 2841|      0|        stillused = TRUE;
 2842|      0|        break;
 2843|      0|      }
 2844|      0|    }
 2845|      0|    if(stillused)
 2846|      0|      continue;
 2847|       |
 2848|      0|    entry = sh_getentry(&multi->sockhash, s);
 2849|       |    /* if this is NULL here, the socket has been closed and notified so
 2850|       |       already by Curl_multi_closed() */
 2851|      0|    if(entry) {
 2852|      0|      unsigned char oldactions = data->actions[i];
 2853|       |      /* this socket has been removed. Decrease user count */
 2854|      0|      entry->users--;
 2855|      0|      if(oldactions & CURL_POLL_OUT)
 2856|      0|        entry->writers--;
 2857|      0|      if(oldactions & CURL_POLL_IN)
 2858|      0|        entry->readers--;
 2859|      0|      if(!entry->users) {
 2860|      0|        if(multi->socket_cb)
 2861|      0|          multi->socket_cb(data, s, CURL_POLL_REMOVE,
 2862|      0|                           multi->socket_userp,
 2863|      0|                           entry->socketp);
 2864|      0|        sh_delentry(entry, &multi->sockhash, s);
 2865|      0|      }
 2866|      0|      else {
 2867|       |        /* still users, but remove this handle as a user of this socket */
 2868|      0|        if(Curl_hash_delete(&entry->transfers, (char *)&data,
 2869|      0|                            sizeof(struct Curl_easy *))) {
 2870|      0|          DEBUGASSERT(NULL);
 2871|      0|        }
 2872|      0|      }
 2873|      0|    }
 2874|      0|  } /* for loop over numsocks */
 2875|       |
 2876|  2.97k|  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
 2877|  2.97k|  memcpy(data->actions, actions, num*sizeof(char));
 2878|  2.97k|  data->numsocks = num;
 2879|  2.97k|  return CURLM_OK;
 2880|  2.97k|}
multi.c:sh_getentry:
  216|  2.31k|{
  217|  2.31k|  if(s != CURL_SOCKET_BAD) {
  218|       |    /* only look for proper sockets */
  219|  2.31k|    return Curl_hash_pick(sh, (char *)&s, sizeof(curl_socket_t));
  220|  2.31k|  }
  221|      0|  return NULL;
  222|  2.31k|}
multi.c:add_next_timeout:
 2936|    948|{
 2937|    948|  struct curltime *tv = &d->state.expiretime;
 2938|    948|  struct Curl_llist *list = &d->state.timeoutlist;
 2939|    948|  struct Curl_llist_element *e;
 2940|    948|  struct time_node *node = NULL;
 2941|       |
 2942|       |  /* move over the timeout list for this specific handle and remove all
 2943|       |     timeouts that are now passed tense and store the next pending
 2944|       |     timeout in *tv */
 2945|  1.89k|  for(e = list->head; e;) {
 2946|  1.89k|    struct Curl_llist_element *n = e->next;
 2947|  1.89k|    timediff_t diff;
 2948|  1.89k|    node = (struct time_node *)e->ptr;
 2949|  1.89k|    diff = Curl_timediff(node->time, now);
 2950|  1.89k|    if(diff <= 0)
 2951|       |      /* remove outdated entry */
 2952|    948|      Curl_llist_remove(list, e, NULL);
 2953|    948|    else
 2954|       |      /* the list is sorted so get out on the first mismatch */
 2955|    948|      break;
 2956|    948|    e = n;
 2957|    948|  }
 2958|    948|  e = list->head;
 2959|    948|  if(!e) {
 2960|       |    /* clear the expire times within the handles that we remove from the
 2961|       |       splay tree */
 2962|      0|    tv->tv_sec = 0;
 2963|      0|    tv->tv_usec = 0;
 2964|      0|  }
 2965|    948|  else {
 2966|       |    /* copy the first entry to 'tv' */
 2967|    948|    memcpy(tv, &node->time, sizeof(*tv));
 2968|       |
 2969|       |    /* Insert this node again into the splay.  Keep the timer in the list in
 2970|       |       case we need to recompute future timers. */
 2971|    948|    multi->timetree = Curl_splayinsert(*tv, multi->timetree,
 2972|    948|                                       &d->state.timenode);
 2973|    948|  }
 2974|    948|  return CURLM_OK;
 2975|    948|}
multi.c:multi_deltimeout:
 3298|  8.73k|{
 3299|  8.73k|  struct Curl_llist_element *e;
 3300|  8.73k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3301|       |  /* find and remove the specific node from the list */
 3302|  17.1k|  for(e = timeoutlist->head; e; e = e->next) {
 3303|  8.62k|    struct time_node *n = (struct time_node *)e->ptr;
 3304|  8.62k|    if(n->eid == eid) {
 3305|    215|      Curl_llist_remove(timeoutlist, e, NULL);
 3306|    215|      return;
 3307|    215|    }
 3308|  8.62k|  }
 3309|  8.73k|}
multi.c:multi_addtimeout:
 3322|  8.71k|{
 3323|  8.71k|  struct Curl_llist_element *e;
 3324|  8.71k|  struct time_node *node;
 3325|  8.71k|  struct Curl_llist_element *prev = NULL;
 3326|  8.71k|  size_t n;
 3327|  8.71k|  struct Curl_llist *timeoutlist = &data->state.timeoutlist;
 3328|       |
 3329|  8.71k|  node = &data->state.expires[eid];
 3330|       |
 3331|       |  /* copy the timestamp and id */
 3332|  8.71k|  memcpy(&node->time, stamp, sizeof(*stamp));
 3333|  8.71k|  node->eid = eid; /* also marks it as in use */
 3334|       |
 3335|  8.71k|  n = Curl_llist_count(timeoutlist);
 3336|  8.71k|  if(n) {
 3337|       |    /* find the correct spot in the list */
 3338|  14.3k|    for(e = timeoutlist->head; e; e = e->next) {
 3339|  8.57k|      struct time_node *check = (struct time_node *)e->ptr;
 3340|  8.57k|      timediff_t diff = Curl_timediff(check->time, node->time);
 3341|  8.57k|      if(diff > 0)
 3342|     15|        break;
 3343|  8.56k|      prev = e;
 3344|  8.56k|    }
 3345|       |
 3346|  5.74k|  }
 3347|       |  /* else
 3348|       |     this is the first timeout on the list */
 3349|       |
 3350|  8.71k|  Curl_llist_insert_next(timeoutlist, prev, node, &node->list);
 3351|  8.71k|  return CURLM_OK;
 3352|  8.71k|}
multi.c:process_pending_handles:
 3524|  7.69k|{
 3525|  7.69k|  struct Curl_llist_element *e = multi->pending.head;
 3526|  7.69k|  if(e) {
 3527|      0|    struct Curl_easy *data = e->ptr;
 3528|       |
 3529|      0|    DEBUGASSERT(data->mstate == MSTATE_PENDING);
 3530|       |
 3531|      0|    multistate(data, MSTATE_CONNECT);
 3532|       |
 3533|       |    /* Remove this node from the list */
 3534|      0|    Curl_llist_remove(&multi->pending, e, NULL);
 3535|       |
 3536|       |    /* Make sure that the handle will be processed soonish. */
 3537|      0|    Curl_expire(data, 0, EXPIRE_RUN_NOW);
 3538|       |
 3539|       |    /* mark this as having been in the pending queue */
 3540|      0|    data->state.previouslypending = TRUE;
 3541|      0|  }
 3542|  7.69k|}

curlx_nonblock:
   49|  8.74k|{
   50|  8.74k|#if defined(HAVE_FCNTL_O_NONBLOCK)
   51|       |  /* most recent unix versions */
   52|  8.74k|  int flags;
   53|  8.74k|  flags = sfcntl(sockfd, F_GETFL, 0);
   54|  8.74k|  if(nonblock)
   55|  8.74k|    return sfcntl(sockfd, F_SETFL, flags | O_NONBLOCK);
   56|      0|  return sfcntl(sockfd, F_SETFL, flags & (~O_NONBLOCK));
   57|       |
   58|       |#elif defined(HAVE_IOCTL_FIONBIO)
   59|       |
   60|       |  /* older unix versions */
   61|       |  int flags = nonblock ? 1 : 0;
   62|       |  return ioctl(sockfd, FIONBIO, &flags);
   63|       |
   64|       |#elif defined(HAVE_IOCTLSOCKET_FIONBIO)
   65|       |
   66|       |  /* Windows */
   67|       |  unsigned long flags = nonblock ? 1UL : 0UL;
   68|       |  return ioctlsocket(sockfd, FIONBIO, &flags);
   69|       |
   70|       |#elif defined(HAVE_IOCTLSOCKET_CAMEL_FIONBIO)
   71|       |
   72|       |  /* Amiga */
   73|       |  long flags = nonblock ? 1L : 0L;
   74|       |  return IoctlSocket(sockfd, FIONBIO, (char *)&flags);
   75|       |
   76|       |#elif defined(HAVE_SETSOCKOPT_SO_NONBLOCK)
   77|       |
   78|       |  /* BeOS */
   79|       |  long b = nonblock ? 1L : 0L;
   80|       |  return setsockopt(sockfd, SOL_SOCKET, SO_NONBLOCK, &b, sizeof(b));
   81|       |
   82|       |#else
   83|       |#  error "no non-blocking method was found/used/set"
   84|       |#endif
   85|  8.74k|}

Curl_getdate_capped:
  560|  2.92k|{
  561|  2.92k|  time_t parsed = -1;
  562|  2.92k|  int rc = parsedate(p, &parsed);
  563|       |
  564|  2.92k|  switch(rc) {
  565|    901|  case PARSEDATE_OK:
  566|    901|    if(parsed == -1)
  567|       |      /* avoid returning -1 for a working scenario */
  568|      0|      parsed++;
  569|    901|    return parsed;
  570|      0|  case PARSEDATE_LATER:
  571|       |    /* this returns the maximum time value */
  572|      0|    return parsed;
  573|  2.02k|  default:
  574|  2.02k|    return -1; /* everything else is fail */
  575|  2.92k|  }
  576|       |  /* UNREACHABLE */
  577|  2.92k|}
Curl_gmtime:
  586|     35|{
  587|     35|  const struct tm *tm;
  588|     35|#ifdef HAVE_GMTIME_R
  589|       |  /* thread-safe version */
  590|     35|  tm = (struct tm *)gmtime_r(&intime, store);
  591|       |#else
  592|       |  /* !checksrc! disable BANNEDFUNC 1 */
  593|       |  tm = gmtime(&intime);
  594|       |  if(tm)
  595|       |    *store = *tm; /* copy the pointed struct to the local copy */
  596|       |#endif
  597|       |
  598|     35|  if(!tm)
  599|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  600|     35|  return CURLE_OK;
  601|     35|}
parsedate.c:parsedate:
  307|  2.92k|{
  308|  2.92k|  time_t t = 0;
  309|  2.92k|  int wdaynum = -1;  /* day of the week number, 0-6 (mon-sun) */
  310|  2.92k|  int monnum = -1;   /* month of the year number, 0-11 */
  311|  2.92k|  int mdaynum = -1; /* day of month, 1 - 31 */
  312|  2.92k|  int hournum = -1;
  313|  2.92k|  int minnum = -1;
  314|  2.92k|  int secnum = -1;
  315|  2.92k|  int yearnum = -1;
  316|  2.92k|  int tzoff = -1;
  317|  2.92k|  enum assume dignext = DATE_MDAY;
  318|  2.92k|  const char *indate = date; /* save the original pointer */
  319|  2.92k|  int part = 0; /* max 6 parts */
  320|       |
  321|  15.7k|  while(*date && (part < 6)) {
  322|  14.3k|    bool found = FALSE;
  323|       |
  324|  14.3k|    skip(&date);
  325|       |
  326|  14.3k|    if(ISALPHA(*date)) {
  327|       |      /* a name coming up */
  328|  7.12k|      char buf[32]="";
  329|  7.12k|      size_t len;
  330|  7.12k|      if(sscanf(date, "%31[ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  331|  7.12k|                          "abcdefghijklmnopqrstuvwxyz]", buf))
  332|  7.12k|        len = strlen(buf);
  333|      0|      else
  334|      0|        len = 0;
  335|       |
  336|  7.12k|      if(wdaynum == -1) {
  337|  3.13k|        wdaynum = checkday(buf, len);
  338|  3.13k|        if(wdaynum != -1)
  339|  2.41k|          found = TRUE;
  340|  3.13k|      }
  341|  7.12k|      if(!found && (monnum == -1)) {
  342|  3.04k|        monnum = checkmonth(buf);
  343|  3.04k|        if(monnum != -1)
  344|  2.19k|          found = TRUE;
  345|  3.04k|      }
  346|       |
  347|  7.12k|      if(!found && (tzoff == -1)) {
  348|       |        /* this just must be a time zone string */
  349|  2.11k|        tzoff = checktz(buf);
  350|  2.11k|        if(tzoff != -1)
  351|  1.43k|          found = TRUE;
  352|  2.11k|      }
  353|       |
  354|  7.12k|      if(!found)
  355|  1.08k|        return PARSEDATE_FAIL; /* bad string */
  356|       |
  357|  6.04k|      date += len;
  358|  6.04k|    }
  359|  7.26k|    else if(ISDIGIT(*date)) {
  360|       |      /* a digit */
  361|  6.97k|      int val;
  362|  6.97k|      char *end;
  363|  6.97k|      int len = 0;
  364|  6.97k|      if((secnum == -1) &&
  365|  6.97k|         (3 == sscanf(date, "%02d:%02d:%02d%n",
  366|  6.83k|                      &hournum, &minnum, &secnum, &len))) {
  367|       |        /* time stamp! */
  368|  1.13k|        date += len;
  369|  1.13k|      }
  370|  5.84k|      else if((secnum == -1) &&
  371|  5.84k|              (2 == sscanf(date, "%02d:%02d%n", &hournum, &minnum, &len))) {
  372|       |        /* time stamp without seconds */
  373|    425|        date += len;
  374|    425|        secnum = 0;
  375|    425|      }
  376|  5.41k|      else {
  377|  5.41k|        long lval;
  378|  5.41k|        int error;
  379|  5.41k|        int old_errno;
  380|       |
  381|  5.41k|        old_errno = errno;
  382|  5.41k|        errno = 0;
  383|  5.41k|        lval = strtol(date, &end, 10);
  384|  5.41k|        error = errno;
  385|  5.41k|        if(errno != old_errno)
  386|  4.78k|          errno = old_errno;
  387|       |
  388|  5.41k|        if(error)
  389|     39|          return PARSEDATE_FAIL;
  390|       |
  391|  5.37k|#if LONG_MAX != INT_MAX
  392|  5.37k|        if((lval > (long)INT_MAX) || (lval < (long)INT_MIN))
  393|      7|          return PARSEDATE_FAIL;
  394|  5.37k|#endif
  395|       |
  396|  5.37k|        val = curlx_sltosi(lval);
  397|       |
  398|  5.37k|        if((tzoff == -1) &&
  399|  5.37k|           ((end - date) == 4) &&
  400|  5.37k|           (val <= 1400) &&
  401|  5.37k|           (indate< date) &&
  402|  5.37k|           ((date[-1] == '+' || date[-1] == '-'))) {
  403|       |          /* four digits and a value less than or equal to 1400 (to take into
  404|       |             account all sorts of funny time zone diffs) and it is preceded
  405|       |             with a plus or minus. This is a time zone indication.  1400 is
  406|       |             picked since +1300 is frequently used and +1400 is mentioned as
  407|       |             an edge number in the document "ISO C 200X Proposal: Timezone
  408|       |             Functions" at http://david.tribble.com/text/c0xtimezone.html If
  409|       |             anyone has a more authoritative source for the exact maximum time
  410|       |             zone offsets, please speak up! */
  411|    210|          found = TRUE;
  412|    210|          tzoff = (val/100 * 60 + val%100)*60;
  413|       |
  414|       |          /* the + and - prefix indicates the local time compared to GMT,
  415|       |             this we need their reversed math to get what we want */
  416|    210|          tzoff = date[-1]=='+'?-tzoff:tzoff;
  417|    210|        }
  418|       |
  419|  5.37k|        if(((end - date) == 8) &&
  420|  5.37k|           (yearnum == -1) &&
  421|  5.37k|           (monnum == -1) &&
  422|  5.37k|           (mdaynum == -1)) {
  423|       |          /* 8 digits, no year, month or day yet. This is YYYYMMDD */
  424|    138|          found = TRUE;
  425|    138|          yearnum = val/10000;
  426|    138|          monnum = (val%10000)/100-1; /* month is 0 - 11 */
  427|    138|          mdaynum = val%100;
  428|    138|        }
  429|       |
  430|  5.37k|        if(!found && (dignext == DATE_MDAY) && (mdaynum == -1)) {
  431|  2.64k|          if((val > 0) && (val<32)) {
  432|  2.41k|            mdaynum = val;
  433|  2.41k|            found = TRUE;
  434|  2.41k|          }
  435|  2.64k|          dignext = DATE_YEAR;
  436|  2.64k|        }
  437|       |
  438|  5.37k|        if(!found && (dignext == DATE_YEAR) && (yearnum == -1)) {
  439|  2.14k|          yearnum = val;
  440|  2.14k|          found = TRUE;
  441|  2.14k|          if(yearnum < 100) {
  442|    384|            if(yearnum > 70)
  443|      1|              yearnum += 1900;
  444|    383|            else
  445|    383|              yearnum += 2000;
  446|    384|          }
  447|  2.14k|          if(mdaynum == -1)
  448|    183|            dignext = DATE_MDAY;
  449|  2.14k|        }
  450|       |
  451|  5.37k|        if(!found)
  452|    468|          return PARSEDATE_FAIL;
  453|       |
  454|  4.90k|        date = end;
  455|  4.90k|      }
  456|  6.97k|    }
  457|       |
  458|  12.8k|    part++;
  459|  12.8k|  }
  460|       |
  461|  1.33k|  if(-1 == secnum)
  462|    283|    secnum = minnum = hournum = 0; /* no time, make it zero */
  463|       |
  464|  1.33k|  if((-1 == mdaynum) ||
  465|  1.33k|     (-1 == monnum) ||
  466|  1.33k|     (-1 == yearnum))
  467|       |    /* lacks vital info, fail */
  468|    180|    return PARSEDATE_FAIL;
  469|       |
  470|       |#ifdef HAVE_TIME_T_UNSIGNED
  471|       |  if(yearnum < 1970) {
  472|       |    /* only positive numbers cannot return earlier */
  473|       |    *output = TIME_T_MIN;
  474|       |    return PARSEDATE_SOONER;
  475|       |  }
  476|       |#endif
  477|       |
  478|       |#if (SIZEOF_TIME_T < 5)
  479|       |
  480|       |#ifdef HAVE_TIME_T_UNSIGNED
  481|       |  /* an unsigned 32 bit time_t can only hold dates to 2106 */
  482|       |  if(yearnum > 2105) {
  483|       |    *output = TIME_T_MAX;
  484|       |    return PARSEDATE_LATER;
  485|       |  }
  486|       |#else
  487|       |  /* a signed 32 bit time_t can only hold dates to the beginning of 2038 */
  488|       |  if(yearnum > 2037) {
  489|       |    *output = TIME_T_MAX;
  490|       |    return PARSEDATE_LATER;
  491|       |  }
  492|       |  if(yearnum < 1903) {
  493|       |    *output = TIME_T_MIN;
  494|       |    return PARSEDATE_SOONER;
  495|       |  }
  496|       |#endif
  497|       |
  498|       |#else
  499|       |  /* The Gregorian calendar was introduced 1582 */
  500|  1.15k|  if(yearnum < 1583)
  501|     62|    return PARSEDATE_FAIL;
  502|  1.09k|#endif
  503|       |
  504|  1.09k|  if((mdaynum > 31) || (monnum > 11) ||
  505|  1.09k|     (hournum > 23) || (minnum > 59) || (secnum > 60))
  506|    190|    return PARSEDATE_FAIL; /* clearly an illegal date */
  507|       |
  508|       |  /* time2epoch() returns a time_t. time_t is often 32 bits, sometimes even on
  509|       |     architectures that feature 64 bit 'long' but ultimately time_t is the
  510|       |     correct data type to use.
  511|       |  */
  512|    901|  t = time2epoch(secnum, minnum, hournum, mdaynum, monnum, yearnum);
  513|       |
  514|       |  /* Add the time zone diff between local time zone and GMT. */
  515|    901|  if(tzoff == -1)
  516|    193|    tzoff = 0;
  517|       |
  518|    901|  if((tzoff > 0) && (t > TIME_T_MAX - tzoff)) {
  519|      0|    *output = TIME_T_MAX;
  520|      0|    return PARSEDATE_LATER; /* time_t overflow */
  521|      0|  }
  522|       |
  523|    901|  t += tzoff;
  524|       |
  525|    901|  *output = t;
  526|       |
  527|    901|  return PARSEDATE_OK;
  528|    901|}
parsedate.c:skip:
  266|  14.3k|{
  267|       |  /* skip everything that aren't letters or digits */
  268|  29.3k|  while(**date && !ISALNUM(**date))
  269|  14.9k|    (*date)++;
  270|  14.3k|}
parsedate.c:checkday:
  210|  3.13k|{
  211|  3.13k|  int i;
  212|  3.13k|  const char * const *what;
  213|  3.13k|  bool found = FALSE;
  214|  3.13k|  if(len > 3)
  215|    109|    what = &weekday[0];
  216|  3.02k|  else
  217|  3.02k|    what = &Curl_wkday[0];
  218|  17.8k|  for(i = 0; i<7; i++) {
  219|  17.1k|    if(strcasecompare(check, what[0])) {
  220|  2.41k|      found = TRUE;
  221|  2.41k|      break;
  222|  2.41k|    }
  223|  14.6k|    what++;
  224|  14.6k|  }
  225|  3.13k|  return found?i:-1;
  226|  3.13k|}
parsedate.c:checkmonth:
  229|  3.04k|{
  230|  3.04k|  int i;
  231|  3.04k|  const char * const *what;
  232|  3.04k|  bool found = FALSE;
  233|       |
  234|  3.04k|  what = &Curl_month[0];
  235|  15.5k|  for(i = 0; i<12; i++) {
  236|  14.7k|    if(strcasecompare(check, what[0])) {
  237|  2.19k|      found = TRUE;
  238|  2.19k|      break;
  239|  2.19k|    }
  240|  12.5k|    what++;
  241|  12.5k|  }
  242|  3.04k|  return found?i:-1; /* return the offset or -1, no real offset is -1 */
  243|  3.04k|}
parsedate.c:checktz:
  249|  2.11k|{
  250|  2.11k|  unsigned int i;
  251|  2.11k|  const struct tzinfo *what;
  252|  2.11k|  bool found = FALSE;
  253|       |
  254|  2.11k|  what = tz;
  255|  84.0k|  for(i = 0; i< sizeof(tz)/sizeof(tz[0]); i++) {
  256|  83.3k|    if(strcasecompare(check, what->name)) {
  257|  1.43k|      found = TRUE;
  258|  1.43k|      break;
  259|  1.43k|    }
  260|  81.9k|    what++;
  261|  81.9k|  }
  262|  2.11k|  return found?what->offset*60:-1;
  263|  2.11k|}
parsedate.c:time2epoch:
  284|    901|{
  285|    901|  static const int month_days_cumulative [12] =
  286|    901|    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
  287|    901|  int leap_days = year - (mon <= 1);
  288|    901|  leap_days = ((leap_days / 4) - (leap_days / 100) + (leap_days / 400)
  289|    901|               - (1969 / 4) + (1969 / 100) - (1969 / 400));
  290|    901|  return ((((time_t) (year - 1970) * 365
  291|    901|            + leap_days + month_days_cumulative[mon] + mday - 1) * 24
  292|    901|           + hour) * 60 + min) * 60 + sec;
  293|    901|}

Curl_pp_state_timeout:
   49|  5.85k|{
   50|  5.85k|  struct connectdata *conn = data->conn;
   51|  5.85k|  timediff_t timeout_ms; /* in milliseconds */
   52|  5.85k|  timediff_t response_time = (data->set.server_response_timeout)?
   53|  5.85k|    data->set.server_response_timeout: pp->response_time;
   54|       |
   55|       |  /* if CURLOPT_SERVER_RESPONSE_TIMEOUT is set, use that to determine
   56|       |     remaining time, or use pp->response because SERVER_RESPONSE_TIMEOUT is
   57|       |     supposed to govern the response for any given server response, not for
   58|       |     the time from connect to the given server response. */
   59|       |
   60|       |  /* Without a requested timeout, we only wait 'response_time' seconds for the
   61|       |     full response to arrive before we bail out */
   62|  5.85k|  timeout_ms = response_time -
   63|  5.85k|    Curl_timediff(Curl_now(), pp->response); /* spent time */
   64|       |
   65|  5.85k|  if(data->set.timeout && !disconnecting) {
   66|       |    /* if timeout is requested, find out how much remaining time we have */
   67|  4.80k|    timediff_t timeout2_ms = data->set.timeout - /* timeout time */
   68|  4.80k|      Curl_timediff(Curl_now(), conn->now); /* spent time */
   69|       |
   70|       |    /* pick the lowest number */
   71|  4.80k|    timeout_ms = CURLMIN(timeout_ms, timeout2_ms);
   72|  4.80k|  }
   73|       |
   74|  5.85k|  return timeout_ms;
   75|  5.85k|}
Curl_pp_statemach:
   83|  5.85k|{
   84|  5.85k|  struct connectdata *conn = data->conn;
   85|  5.85k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
   86|  5.85k|  int rc;
   87|  5.85k|  timediff_t interval_ms;
   88|  5.85k|  timediff_t timeout_ms = Curl_pp_state_timeout(data, pp, disconnecting);
   89|  5.85k|  CURLcode result = CURLE_OK;
   90|       |
   91|  5.85k|  if(timeout_ms <= 0) {
   92|     54|    failf(data, "server response timeout");
   93|     54|    return CURLE_OPERATION_TIMEDOUT; /* already too little time */
   94|     54|  }
   95|       |
   96|  5.80k|  if(block) {
   97|  1.10k|    interval_ms = 1000;  /* use 1 second timeout intervals */
   98|  1.10k|    if(timeout_ms < interval_ms)
   99|     76|      interval_ms = timeout_ms;
  100|  1.10k|  }
  101|  4.69k|  else
  102|  4.69k|    interval_ms = 0; /* immediate */
  103|       |
  104|  5.80k|  if(Curl_ssl_data_pending(conn, FIRSTSOCKET))
  105|      0|    rc = 1;
  106|  5.80k|  else if(Curl_pp_moredata(pp))
  107|       |    /* We are receiving and there is data in the cache so just read it */
  108|  3.25k|    rc = 1;
  109|  2.54k|  else if(!pp->sendleft && Curl_ssl_data_pending(conn, FIRSTSOCKET))
  110|       |    /* We are receiving and there is data ready in the SSL library */
  111|      0|    rc = 1;
  112|  2.54k|  else
  113|  2.54k|    rc = Curl_socket_check(pp->sendleft?CURL_SOCKET_BAD:sock, /* reading */
  114|  2.54k|                           CURL_SOCKET_BAD,
  115|  2.54k|                           pp->sendleft?sock:CURL_SOCKET_BAD, /* writing */
  116|  2.54k|                           interval_ms);
  117|       |
  118|  5.80k|  if(block) {
  119|       |    /* if we didn't wait, we don't have to spend time on this now */
  120|  1.10k|    if(Curl_pgrsUpdate(data))
  121|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  122|  1.10k|    else
  123|  1.10k|      result = Curl_speedcheck(data, Curl_now());
  124|       |
  125|  1.10k|    if(result)
  126|      0|      return result;
  127|  1.10k|  }
  128|       |
  129|  5.80k|  if(rc == -1) {
  130|      1|    failf(data, "select/poll error");
  131|      1|    result = CURLE_OUT_OF_MEMORY;
  132|      1|  }
  133|  5.79k|  else if(rc)
  134|  5.61k|    result = pp->statemachine(data, data->conn);
  135|       |
  136|  5.80k|  return result;
  137|  5.80k|}
Curl_pp_init:
  141|  5.44k|{
  142|  5.44k|  DEBUGASSERT(data);
  143|  5.44k|  pp->nread_resp = 0;
  144|  5.44k|  pp->linestart_resp = data->state.buffer;
  145|  5.44k|  pp->pending_resp = TRUE;
  146|  5.44k|  pp->response = Curl_now(); /* start response time-out now! */
  147|  5.44k|}
Curl_pp_setup:
  151|  1.49k|{
  152|  1.49k|  Curl_dyn_init(&pp->sendbuf, DYN_PINGPPONG_CMD);
  153|  1.49k|}
Curl_pp_vsendf:
  169|  3.95k|{
  170|  3.95k|  ssize_t bytes_written = 0;
  171|  3.95k|  size_t write_len;
  172|  3.95k|  char *s;
  173|  3.95k|  CURLcode result;
  174|  3.95k|  struct connectdata *conn = data->conn;
  175|       |
  176|       |#ifdef HAVE_GSSAPI
  177|       |  enum protection_level data_sec;
  178|       |#endif
  179|       |
  180|  3.95k|  DEBUGASSERT(pp->sendleft == 0);
  181|  3.95k|  DEBUGASSERT(pp->sendsize == 0);
  182|  3.95k|  DEBUGASSERT(pp->sendthis == NULL);
  183|       |
  184|  3.95k|  if(!conn)
  185|       |    /* can't send without a connection! */
  186|      0|    return CURLE_SEND_ERROR;
  187|       |
  188|  3.95k|  Curl_dyn_reset(&pp->sendbuf);
  189|  3.95k|  result = Curl_dyn_vaddf(&pp->sendbuf, fmt, args);
  190|  3.95k|  if(result)
  191|      0|    return result;
  192|       |
  193|       |  /* append CRLF */
  194|  3.95k|  result = Curl_dyn_addn(&pp->sendbuf, "\r\n", 2);
  195|  3.95k|  if(result)
  196|      0|    return result;
  197|       |
  198|  3.95k|  write_len = Curl_dyn_len(&pp->sendbuf);
  199|  3.95k|  s = Curl_dyn_ptr(&pp->sendbuf);
  200|  3.95k|  Curl_pp_init(data, pp);
  201|       |
  202|  3.95k|  result = Curl_convert_to_network(data, s, write_len);
  203|       |  /* Curl_convert_to_network calls failf if unsuccessful */
  204|  3.95k|  if(result)
  205|      0|    return result;
  206|       |
  207|       |#ifdef HAVE_GSSAPI
  208|       |  conn->data_prot = PROT_CMD;
  209|       |#endif
  210|  3.95k|  result = Curl_write(data, conn->sock[FIRSTSOCKET], s, write_len,
  211|  3.95k|                      &bytes_written);
  212|  3.95k|  if(result)
  213|      0|    return result;
  214|       |#ifdef HAVE_GSSAPI
  215|       |  data_sec = conn->data_prot;
  216|       |  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  217|       |  conn->data_prot = data_sec;
  218|       |#endif
  219|       |
  220|  3.95k|  Curl_debug(data, CURLINFO_HEADER_OUT, s, (size_t)bytes_written);
  221|       |
  222|  3.95k|  if(bytes_written != (ssize_t)write_len) {
  223|       |    /* the whole chunk was not sent, keep it around and adjust sizes */
  224|      0|    pp->sendthis = s;
  225|      0|    pp->sendsize = write_len;
  226|      0|    pp->sendleft = write_len - bytes_written;
  227|      0|  }
  228|  3.95k|  else {
  229|  3.95k|    pp->sendthis = NULL;
  230|  3.95k|    pp->sendleft = pp->sendsize = 0;
  231|  3.95k|    pp->response = Curl_now();
  232|  3.95k|  }
  233|       |
  234|  3.95k|  return CURLE_OK;
  235|  3.95k|}
Curl_pp_sendf:
  250|  2.02k|{
  251|  2.02k|  CURLcode result;
  252|  2.02k|  va_list ap;
  253|  2.02k|  va_start(ap, fmt);
  254|       |
  255|  2.02k|  result = Curl_pp_vsendf(data, pp, fmt, ap);
  256|       |
  257|  2.02k|  va_end(ap);
  258|       |
  259|  2.02k|  return result;
  260|  2.02k|}
Curl_pp_readresp:
  272|  16.0k|{
  273|  16.0k|  ssize_t perline; /* count bytes per line */
  274|  16.0k|  bool keepon = TRUE;
  275|  16.0k|  ssize_t gotbytes;
  276|  16.0k|  char *ptr;
  277|  16.0k|  struct connectdata *conn = data->conn;
  278|  16.0k|  char * const buf = data->state.buffer;
  279|  16.0k|  CURLcode result = CURLE_OK;
  280|       |
  281|  16.0k|  *code = 0; /* 0 for errors or not done */
  282|  16.0k|  *size = 0;
  283|       |
  284|  16.0k|  ptr = buf + pp->nread_resp;
  285|       |
  286|       |  /* number of bytes in the current line, so far */
  287|  16.0k|  perline = (ssize_t)(ptr-pp->linestart_resp);
  288|       |
  289|  33.0k|  while((pp->nread_resp < (size_t)data->set.buffer_size) &&
  290|  33.0k|        (keepon && !result)) {
  291|       |
  292|  17.0k|    if(pp->cache) {
  293|       |      /* we had data in the "cache", copy that instead of doing an actual
  294|       |       * read
  295|       |       *
  296|       |       * pp->cache_size is cast to ssize_t here.  This should be safe, because
  297|       |       * it would have been populated with something of size int to begin
  298|       |       * with, even though its datatype may be larger than an int.
  299|       |       */
  300|  13.7k|      if((ptr + pp->cache_size) > (buf + data->set.buffer_size + 1)) {
  301|      3|        failf(data, "cached response data too big to handle");
  302|      3|        return CURLE_RECV_ERROR;
  303|      3|      }
  304|  13.7k|      memcpy(ptr, pp->cache, pp->cache_size);
  305|  13.7k|      gotbytes = (ssize_t)pp->cache_size;
  306|  13.7k|      free(pp->cache);    /* free the cache */
  307|  13.7k|      pp->cache = NULL;   /* clear the pointer */
  308|  13.7k|      pp->cache_size = 0; /* zero the size just in case */
  309|  13.7k|    }
  310|  3.36k|    else {
  311|       |#ifdef HAVE_GSSAPI
  312|       |      enum protection_level prot = conn->data_prot;
  313|       |      conn->data_prot = PROT_CLEAR;
  314|       |#endif
  315|  3.36k|      DEBUGASSERT((ptr + data->set.buffer_size - pp->nread_resp) <=
  316|  3.36k|                  (buf + data->set.buffer_size + 1));
  317|  3.36k|      result = Curl_read(data, sockfd, ptr,
  318|  3.36k|                         data->set.buffer_size - pp->nread_resp,
  319|  3.36k|                         &gotbytes);
  320|       |#ifdef HAVE_GSSAPI
  321|       |      DEBUGASSERT(prot  > PROT_NONE && prot < PROT_LAST);
  322|       |      conn->data_prot = prot;
  323|       |#endif
  324|  3.36k|      if(result == CURLE_AGAIN)
  325|     64|        return CURLE_OK; /* return */
  326|       |
  327|  3.29k|      if(!result && (gotbytes > 0))
  328|       |        /* convert from the network encoding */
  329|  1.79k|        result = Curl_convert_from_network(data, ptr, gotbytes);
  330|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  331|       |
  332|  3.29k|      if(result)
  333|       |        /* Set outer result variable to this error. */
  334|      0|        keepon = FALSE;
  335|  3.29k|    }
  336|       |
  337|  17.0k|    if(!keepon)
  338|      0|      ;
  339|  17.0k|    else if(gotbytes <= 0) {
  340|  1.50k|      keepon = FALSE;
  341|  1.50k|      result = CURLE_RECV_ERROR;
  342|  1.50k|      failf(data, "response reading failed");
  343|  1.50k|    }
  344|  15.5k|    else {
  345|       |      /* we got a whole chunk of data, which can be anything from one
  346|       |       * byte to a set of lines and possible just a piece of the last
  347|       |       * line */
  348|  15.5k|      ssize_t i;
  349|  15.5k|      ssize_t clipamount = 0;
  350|  15.5k|      bool restart = FALSE;
  351|       |
  352|  15.5k|      data->req.headerbytecount += (long)gotbytes;
  353|       |
  354|  15.5k|      pp->nread_resp += gotbytes;
  355|   751k|      for(i = 0; i < gotbytes; ptr++, i++) {
  356|   750k|        perline++;
  357|   750k|        if(*ptr == '\n') {
  358|       |          /* a newline is CRLF in pp-talk, so the CR is ignored as
  359|       |             the line isn't really terminated until the LF comes */
  360|       |
  361|       |          /* output debug output if that is requested */
  362|       |#ifdef HAVE_GSSAPI
  363|       |          if(!conn->sec_complete)
  364|       |#endif
  365|  45.4k|            Curl_debug(data, CURLINFO_HEADER_IN,
  366|  45.4k|                       pp->linestart_resp, (size_t)perline);
  367|       |
  368|       |          /*
  369|       |           * We pass all response-lines to the callback function registered
  370|       |           * for "headers". The response lines can be seen as a kind of
  371|       |           * headers.
  372|       |           */
  373|  45.4k|          result = Curl_client_write(data, CLIENTWRITE_HEADER,
  374|  45.4k|                                     pp->linestart_resp, perline);
  375|  45.4k|          if(result)
  376|      0|            return result;
  377|       |
  378|  45.4k|          if(pp->endofresp(data, conn, pp->linestart_resp, perline, code)) {
  379|       |            /* This is the end of the last line, copy the last line to the
  380|       |               start of the buffer and null-terminate, for old times sake */
  381|  14.5k|            size_t n = ptr - pp->linestart_resp;
  382|  14.5k|            memmove(buf, pp->linestart_resp, n);
  383|  14.5k|            buf[n] = 0; /* null-terminate */
  384|  14.5k|            keepon = FALSE;
  385|  14.5k|            pp->linestart_resp = ptr + 1; /* advance pointer */
  386|  14.5k|            i++; /* skip this before getting out */
  387|       |
  388|  14.5k|            *size = pp->nread_resp; /* size of the response */
  389|  14.5k|            pp->nread_resp = 0; /* restart */
  390|  14.5k|            break;
  391|  14.5k|          }
  392|  30.9k|          perline = 0; /* line starts over here */
  393|  30.9k|          pp->linestart_resp = ptr + 1;
  394|  30.9k|        }
  395|   750k|      }
  396|       |
  397|  15.5k|      if(!keepon && (i != gotbytes)) {
  398|       |        /* We found the end of the response lines, but we didn't parse the
  399|       |           full chunk of data we have read from the server. We therefore need
  400|       |           to store the rest of the data to be checked on the next invoke as
  401|       |           it may actually contain another end of response already! */
  402|  14.0k|        clipamount = gotbytes - i;
  403|  14.0k|        restart = TRUE;
  404|  14.0k|        DEBUGF(infof(data, "Curl_pp_readresp_ %d bytes of trailing "
  405|  14.0k|                     "server response left",
  406|  14.0k|                     (int)clipamount));
  407|  14.0k|      }
  408|  1.49k|      else if(keepon) {
  409|       |
  410|  1.00k|        if((perline == gotbytes) && (gotbytes > data->set.buffer_size/2)) {
  411|       |          /* We got an excessive line without newlines and we need to deal
  412|       |             with it. We keep the first bytes of the line then we throw
  413|       |             away the rest. */
  414|      0|          infof(data, "Excessive server response line length received, "
  415|      0|                "%zd bytes. Stripping", gotbytes);
  416|      0|          restart = TRUE;
  417|       |
  418|       |          /* we keep 40 bytes since all our pingpong protocols are only
  419|       |             interested in the first piece */
  420|      0|          clipamount = 40;
  421|      0|        }
  422|  1.00k|        else if(pp->nread_resp > (size_t)data->set.buffer_size/2) {
  423|       |          /* We got a large chunk of data and there's potentially still
  424|       |             trailing data to take care of, so we put any such part in the
  425|       |             "cache", clear the buffer to make space and restart. */
  426|      3|          clipamount = perline;
  427|      3|          restart = TRUE;
  428|      3|        }
  429|  1.00k|      }
  430|    492|      else if(i == gotbytes)
  431|    492|        restart = TRUE;
  432|       |
  433|  15.5k|      if(clipamount) {
  434|  14.0k|        pp->cache_size = clipamount;
  435|  14.0k|        pp->cache = malloc(pp->cache_size);
  436|  14.0k|        if(pp->cache)
  437|  14.0k|          memcpy(pp->cache, pp->linestart_resp, pp->cache_size);
  438|      0|        else
  439|      0|          return CURLE_OUT_OF_MEMORY;
  440|  14.0k|      }
  441|  15.5k|      if(restart) {
  442|       |        /* now reset a few variables to start over nicely from the start of
  443|       |           the big buffer */
  444|  14.5k|        pp->nread_resp = 0; /* start over from scratch in the buffer */
  445|  14.5k|        ptr = pp->linestart_resp = buf;
  446|  14.5k|        perline = 0;
  447|  14.5k|      }
  448|       |
  449|  15.5k|    } /* there was data */
  450|       |
  451|  17.0k|  } /* while there's buffer left and loop is requested */
  452|       |
  453|  16.0k|  pp->pending_resp = FALSE;
  454|       |
  455|  16.0k|  return result;
  456|  16.0k|}
Curl_pp_getsock:
  460|  2.42k|{
  461|  2.42k|  struct connectdata *conn = data->conn;
  462|  2.42k|  socks[0] = conn->sock[FIRSTSOCKET];
  463|       |
  464|  2.42k|  if(pp->sendleft) {
  465|       |    /* write mode */
  466|      0|    return GETSOCK_WRITESOCK(0);
  467|      0|  }
  468|       |
  469|       |  /* read mode */
  470|  2.42k|  return GETSOCK_READSOCK(0);
  471|  2.42k|}
Curl_pp_disconnect:
  498|  1.49k|{
  499|  1.49k|  Curl_dyn_free(&pp->sendbuf);
  500|  1.49k|  Curl_safefree(pp->cache);
  501|  1.49k|  return CURLE_OK;
  502|  1.49k|}
Curl_pp_moredata:
  505|  16.4k|{
  506|  16.4k|  return (!pp->sendleft && pp->cache && pp->nread_resp < pp->cache_size) ?
  507|  16.4k|    TRUE : FALSE;
  508|  16.4k|}

Curl_pop3_write:
 1456|     63|{
 1457|       |  /* This code could be made into a special function in the handler struct */
 1458|     63|  CURLcode result = CURLE_OK;
 1459|     63|  struct SingleRequest *k = &data->req;
 1460|     63|  struct connectdata *conn = data->conn;
 1461|     63|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1462|     63|  bool strip_dot = FALSE;
 1463|     63|  size_t last = 0;
 1464|     63|  size_t i;
 1465|       |
 1466|       |  /* Search through the buffer looking for the end-of-body marker which is
 1467|       |     5 bytes (0d 0a 2e 0d 0a). Note that a line starting with a dot matches
 1468|       |     the eob so the server will have prefixed it with an extra dot which we
 1469|       |     need to strip out. Additionally the marker could of course be spread out
 1470|       |     over 5 different data chunks. */
 1471|  46.5k|  for(i = 0; i < nread; i++) {
 1472|  46.5k|    size_t prev = pop3c->eob;
 1473|       |
 1474|  46.5k|    switch(str[i]) {
 1475|  3.97k|    case 0x0d:
 1476|  3.97k|      if(pop3c->eob == 0) {
 1477|  2.48k|        pop3c->eob++;
 1478|       |
 1479|  2.48k|        if(i) {
 1480|       |          /* Write out the body part that didn't match */
 1481|  2.48k|          result = Curl_client_write(data, CLIENTWRITE_BODY, &str[last],
 1482|  2.48k|                                     i - last);
 1483|       |
 1484|  2.48k|          if(result)
 1485|      0|            return result;
 1486|       |
 1487|  2.48k|          last = i;
 1488|  2.48k|        }
 1489|  2.48k|      }
 1490|  1.49k|      else if(pop3c->eob == 3)
 1491|    445|        pop3c->eob++;
 1492|  1.04k|      else
 1493|       |        /* If the character match wasn't at position 0 or 3 then restart the
 1494|       |           pattern matching */
 1495|  1.04k|        pop3c->eob = 1;
 1496|  3.97k|      break;
 1497|       |
 1498|  3.97k|    case 0x0a:
 1499|  3.64k|      if(pop3c->eob == 1 || pop3c->eob == 4)
 1500|  2.32k|        pop3c->eob++;
 1501|  1.32k|      else
 1502|       |        /* If the character match wasn't at position 1 or 4 then start the
 1503|       |           search again */
 1504|  1.32k|        pop3c->eob = 0;
 1505|  3.64k|      break;
 1506|       |
 1507|  2.33k|    case 0x2e:
 1508|  2.33k|      if(pop3c->eob == 2)
 1509|    775|        pop3c->eob++;
 1510|  1.56k|      else if(pop3c->eob == 3) {
 1511|       |        /* We have an extra dot after the CRLF which we need to strip off */
 1512|     45|        strip_dot = TRUE;
 1513|     45|        pop3c->eob = 0;
 1514|     45|      }
 1515|  1.51k|      else
 1516|       |        /* If the character match wasn't at position 2 then start the search
 1517|       |           again */
 1518|  1.51k|        pop3c->eob = 0;
 1519|  2.33k|      break;
 1520|       |
 1521|  36.5k|    default:
 1522|  36.5k|      pop3c->eob = 0;
 1523|  36.5k|      break;
 1524|  46.5k|    }
 1525|       |
 1526|       |    /* Did we have a partial match which has subsequently failed? */
 1527|  46.5k|    if(prev && prev >= pop3c->eob) {
 1528|       |      /* Strip can only be non-zero for the very first mismatch after CRLF
 1529|       |         and then both prev and strip are equal and nothing will be output
 1530|       |         below */
 1531|  3.70k|      while(prev && pop3c->strip) {
 1532|    120|        prev--;
 1533|    120|        pop3c->strip--;
 1534|    120|      }
 1535|       |
 1536|  3.58k|      if(prev) {
 1537|       |        /* If the partial match was the CRLF and dot then only write the CRLF
 1538|       |           as the server would have inserted the dot */
 1539|  3.53k|        if(strip_dot && prev - 1 > 0) {
 1540|     42|          result = Curl_client_write(data, CLIENTWRITE_BODY, (char *)POP3_EOB,
 1541|     42|                                     prev - 1);
 1542|     42|        }
 1543|  3.49k|        else if(!strip_dot) {
 1544|  3.48k|          result = Curl_client_write(data, CLIENTWRITE_BODY, (char *)POP3_EOB,
 1545|  3.48k|                                     prev);
 1546|  3.48k|        }
 1547|      3|        else {
 1548|      3|          result = CURLE_OK;
 1549|      3|        }
 1550|       |
 1551|  3.53k|        if(result)
 1552|      0|          return result;
 1553|       |
 1554|  3.53k|        last = i;
 1555|  3.53k|        strip_dot = FALSE;
 1556|  3.53k|      }
 1557|  3.58k|    }
 1558|  46.5k|  }
 1559|       |
 1560|     63|  if(pop3c->eob == POP3_EOB_LEN) {
 1561|       |    /* We have a full match so the transfer is done, however we must transfer
 1562|       |    the CRLF at the start of the EOB as this is considered to be part of the
 1563|       |    message as per RFC-1939, sect. 3 */
 1564|      1|    result = Curl_client_write(data, CLIENTWRITE_BODY, (char *)POP3_EOB, 2);
 1565|       |
 1566|      1|    k->keepon &= ~KEEP_RECV;
 1567|      1|    pop3c->eob = 0;
 1568|       |
 1569|      1|    return result;
 1570|      1|  }
 1571|       |
 1572|     62|  if(pop3c->eob)
 1573|       |    /* While EOB is matching nothing should be output */
 1574|      7|    return CURLE_OK;
 1575|       |
 1576|     55|  if(nread - last) {
 1577|     55|    result = Curl_client_write(data, CLIENTWRITE_BODY, &str[last],
 1578|     55|                               nread - last);
 1579|     55|  }
 1580|       |
 1581|     55|  return result;
 1582|     62|}
pop3.c:pop3_multi_statemach:
 1049|    409|{
 1050|    409|  CURLcode result = CURLE_OK;
 1051|    409|  struct connectdata *conn = data->conn;
 1052|    409|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1053|       |
 1054|    409|  if((conn->handler->flags & PROTOPT_SSL) && !pop3c->ssldone) {
 1055|      0|    result = Curl_ssl_connect_nonblocking(data, conn, FALSE,
 1056|      0|                                          FIRSTSOCKET, &pop3c->ssldone);
 1057|      0|    if(result || !pop3c->ssldone)
 1058|      0|      return result;
 1059|      0|  }
 1060|       |
 1061|    409|  result = Curl_pp_statemach(data, &pop3c->pp, FALSE, FALSE);
 1062|    409|  *done = (pop3c->state == POP3_STOP) ? TRUE : FALSE;
 1063|       |
 1064|    409|  return result;
 1065|    409|}
pop3.c:pop3_getsock:
 1097|     25|{
 1098|     25|  return Curl_pp_getsock(data, &conn->proto.pop3c.pp, socks);
 1099|     25|}
pop3.c:pop3_connect:
 1112|    312|{
 1113|    312|  CURLcode result = CURLE_OK;
 1114|    312|  struct connectdata *conn = data->conn;
 1115|    312|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1116|    312|  struct pingpong *pp = &pop3c->pp;
 1117|       |
 1118|    312|  *done = FALSE; /* default to not done yet */
 1119|       |
 1120|       |  /* We always support persistent connections in POP3 */
 1121|    312|  connkeep(conn, "POP3 default");
 1122|       |
 1123|    312|  PINGPONG_SETUP(pp, pop3_statemachine, pop3_endofresp);
 1124|       |
 1125|       |  /* Set the default preferred authentication type and mechanism */
 1126|    312|  pop3c->preftype = POP3_TYPE_ANY;
 1127|    312|  Curl_sasl_init(&pop3c->sasl, data, &saslpop3);
 1128|       |
 1129|       |  /* Initialise the pingpong layer */
 1130|    312|  Curl_pp_setup(pp);
 1131|    312|  Curl_pp_init(data, pp);
 1132|       |
 1133|       |  /* Parse the URL options */
 1134|    312|  result = pop3_parse_url_options(conn);
 1135|    312|  if(result)
 1136|     14|    return result;
 1137|       |
 1138|       |  /* Start off waiting for the server greeting response */
 1139|    298|  state(data, POP3_SERVERGREET);
 1140|       |
 1141|    298|  result = pop3_multi_statemach(data, done);
 1142|       |
 1143|    298|  return result;
 1144|    312|}
pop3.c:pop3_statemachine:
  971|    494|{
  972|    494|  CURLcode result = CURLE_OK;
  973|    494|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
  974|    494|  int pop3code;
  975|    494|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  976|    494|  struct pingpong *pp = &pop3c->pp;
  977|    494|  size_t nread = 0;
  978|    494|  (void)data;
  979|       |
  980|       |  /* Busy upgrading the connection; right now all I/O is SSL/TLS, not POP3 */
  981|    494|  if(pop3c->state == POP3_UPGRADETLS)
  982|      0|    return pop3_perform_upgrade_tls(data, conn);
  983|       |
  984|       |  /* Flush any data that needs to be sent */
  985|    494|  if(pp->sendleft)
  986|      0|    return Curl_pp_flushsend(data, pp);
  987|       |
  988|  6.03k| do {
  989|       |    /* Read the response from the server */
  990|  6.03k|   result = Curl_pp_readresp(data, sock, pp, &pop3code, &nread);
  991|  6.03k|   if(result)
  992|    272|     return result;
  993|       |
  994|  5.75k|    if(!pop3code)
  995|      9|      break;
  996|       |
  997|       |    /* We have now received a full POP3 server response */
  998|  5.75k|    switch(pop3c->state) {
  999|    289|    case POP3_SERVERGREET:
 1000|    289|      result = pop3_state_servergreet_resp(data, pop3code, pop3c->state);
 1001|    289|      break;
 1002|       |
 1003|  5.21k|    case POP3_CAPA:
 1004|  5.21k|      result = pop3_state_capa_resp(data, pop3code, pop3c->state);
 1005|  5.21k|      break;
 1006|       |
 1007|      0|    case POP3_STARTTLS:
 1008|      0|      result = pop3_state_starttls_resp(data, conn, pop3code, pop3c->state);
 1009|      0|      break;
 1010|       |
 1011|    150|    case POP3_AUTH:
 1012|    150|      result = pop3_state_auth_resp(data, pop3code, pop3c->state);
 1013|    150|      break;
 1014|       |
 1015|      0|#ifndef CURL_DISABLE_CRYPTO_AUTH
 1016|      1|    case POP3_APOP:
 1017|      1|      result = pop3_state_apop_resp(data, pop3code, pop3c->state);
 1018|      1|      break;
 1019|      0|#endif
 1020|       |
 1021|     10|    case POP3_USER:
 1022|     10|      result = pop3_state_user_resp(data, pop3code, pop3c->state);
 1023|     10|      break;
 1024|       |
 1025|      4|    case POP3_PASS:
 1026|      4|      result = pop3_state_pass_resp(data, pop3code, pop3c->state);
 1027|      4|      break;
 1028|       |
 1029|     75|    case POP3_COMMAND:
 1030|     75|      result = pop3_state_command_resp(data, pop3code, pop3c->state);
 1031|     75|      break;
 1032|       |
 1033|      6|    case POP3_QUIT:
 1034|      6|      state(data, POP3_STOP);
 1035|      6|      break;
 1036|       |
 1037|      0|    default:
 1038|       |      /* internal error */
 1039|      0|      state(data, POP3_STOP);
 1040|      0|      break;
 1041|  5.75k|    }
 1042|  5.75k|  } while(!result && pop3c->state != POP3_STOP && Curl_pp_moredata(pp));
 1043|       |
 1044|    222|  return result;
 1045|    494|}
pop3.c:pop3_perform_capa:
  328|    284|{
  329|    284|  CURLcode result = CURLE_OK;
  330|    284|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  331|       |
  332|    284|  pop3c->sasl.authmechs = SASL_AUTH_NONE; /* No known auth. mechanisms yet */
  333|    284|  pop3c->sasl.authused = SASL_AUTH_NONE;  /* Clear the auth. mechanism used */
  334|    284|  pop3c->tls_supported = FALSE;           /* Clear the TLS capability */
  335|       |
  336|       |  /* Send the CAPA command */
  337|    284|  result = Curl_pp_sendf(data, &pop3c->pp, "%s", "CAPA");
  338|       |
  339|    284|  if(!result)
  340|    284|    state(data, POP3_CAPA);
  341|       |
  342|    284|  return result;
  343|    284|}
pop3.c:pop3_state_servergreet_resp:
  644|    289|{
  645|    289|  CURLcode result = CURLE_OK;
  646|    289|  struct connectdata *conn = data->conn;
  647|    289|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  648|    289|  const char *line = data->state.buffer;
  649|    289|  size_t len = strlen(line);
  650|       |
  651|    289|  (void)instate; /* no use for this yet */
  652|       |
  653|    289|  if(pop3code != '+') {
  654|      5|    failf(data, "Got unexpected pop3-server response");
  655|      5|    result = CURLE_WEIRD_SERVER_REPLY;
  656|      5|  }
  657|    284|  else {
  658|       |    /* Does the server support APOP authentication? */
  659|    284|    if(len >= 4 && line[len - 2] == '>') {
  660|       |      /* Look for the APOP timestamp */
  661|     15|      size_t i;
  662|    364|      for(i = 3; i < len - 2; ++i) {
  663|    355|        if(line[i] == '<') {
  664|       |          /* Calculate the length of the timestamp */
  665|      6|          size_t timestamplen = len - 1 - i;
  666|      6|          char *at;
  667|      6|          if(!timestamplen)
  668|      0|            break;
  669|       |
  670|       |          /* Allocate some memory for the timestamp */
  671|      6|          pop3c->apoptimestamp = (char *)calloc(1, timestamplen + 1);
  672|       |
  673|      6|          if(!pop3c->apoptimestamp)
  674|      0|            break;
  675|       |
  676|       |          /* Copy the timestamp */
  677|      6|          memcpy(pop3c->apoptimestamp, line + i, timestamplen);
  678|      6|          pop3c->apoptimestamp[timestamplen] = '\0';
  679|       |
  680|       |          /* If the timestamp does not contain '@' it is not (as required by
  681|       |             RFC-1939) conformant to the RFC-822 message id syntax, and we
  682|       |             therefore do not use APOP authentication. */
  683|      6|          at = strchr(pop3c->apoptimestamp, '@');
  684|      6|          if(!at)
  685|      1|            Curl_safefree(pop3c->apoptimestamp);
  686|      5|          else
  687|       |            /* Store the APOP capability */
  688|      5|            pop3c->authtypes |= POP3_TYPE_APOP;
  689|      6|          break;
  690|      6|        }
  691|    355|      }
  692|     15|    }
  693|       |
  694|    284|    result = pop3_perform_capa(data, conn);
  695|    284|  }
  696|       |
  697|    289|  return result;
  698|    289|}
pop3.c:pop3_state_capa_resp:
  703|  5.21k|{
  704|  5.21k|  CURLcode result = CURLE_OK;
  705|  5.21k|  struct connectdata *conn = data->conn;
  706|  5.21k|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  707|  5.21k|  const char *line = data->state.buffer;
  708|  5.21k|  size_t len = strlen(line);
  709|       |
  710|  5.21k|  (void)instate; /* no use for this yet */
  711|       |
  712|       |  /* Do we have a untagged continuation response? */
  713|  5.21k|  if(pop3code == '*') {
  714|       |    /* Does the server support the STLS capability? */
  715|  5.02k|    if(len >= 4 && !memcmp(line, "STLS", 4))
  716|     70|      pop3c->tls_supported = TRUE;
  717|       |
  718|       |    /* Does the server support clear text authentication? */
  719|  4.95k|    else if(len >= 4 && !memcmp(line, "USER", 4))
  720|     37|      pop3c->authtypes |= POP3_TYPE_CLEARTEXT;
  721|       |
  722|       |    /* Does the server support SASL based authentication? */
  723|  4.92k|    else if(len >= 5 && !memcmp(line, "SASL ", 5)) {
  724|  1.26k|      pop3c->authtypes |= POP3_TYPE_SASL;
  725|       |
  726|       |      /* Advance past the SASL keyword */
  727|  1.26k|      line += 5;
  728|  1.26k|      len -= 5;
  729|       |
  730|       |      /* Loop through the data line */
  731|  3.90k|      for(;;) {
  732|  3.90k|        size_t llen;
  733|  3.90k|        size_t wordlen;
  734|  3.90k|        unsigned short mechbit;
  735|       |
  736|  7.91k|        while(len &&
  737|  7.91k|              (*line == ' ' || *line == '\t' ||
  738|  6.65k|               *line == '\r' || *line == '\n')) {
  739|       |
  740|  4.01k|          line++;
  741|  4.01k|          len--;
  742|  4.01k|        }
  743|       |
  744|  3.90k|        if(!len)
  745|  1.26k|          break;
  746|       |
  747|       |        /* Extract the word */
  748|  19.6k|        for(wordlen = 0; wordlen < len && line[wordlen] != ' ' &&
  749|  19.6k|              line[wordlen] != '\t' && line[wordlen] != '\r' &&
  750|  19.6k|              line[wordlen] != '\n';)
  751|  16.9k|          wordlen++;
  752|       |
  753|       |        /* Test the word for a matching authentication mechanism */
  754|  2.64k|        mechbit = Curl_sasl_decode_mech(line, wordlen, &llen);
  755|  2.64k|        if(mechbit && llen == wordlen)
  756|    346|          pop3c->sasl.authmechs |= mechbit;
  757|       |
  758|  2.64k|        line += wordlen;
  759|  2.64k|        len -= wordlen;
  760|  2.64k|      }
  761|  1.26k|    }
  762|  5.02k|  }
  763|    188|  else {
  764|       |    /* Clear text is supported when CAPA isn't recognised */
  765|    188|    if(pop3code != '+')
  766|    116|      pop3c->authtypes |= POP3_TYPE_CLEARTEXT;
  767|       |
  768|    188|    if(!data->set.use_ssl || conn->ssl[FIRSTSOCKET].use)
  769|    188|      result = pop3_perform_authentication(data, conn);
  770|      0|    else if(pop3code == '+' && pop3c->tls_supported)
  771|       |      /* Switch to TLS connection now */
  772|      0|      result = pop3_perform_starttls(data, conn);
  773|      0|    else if(data->set.use_ssl <= CURLUSESSL_TRY)
  774|       |      /* Fallback and carry on with authentication */
  775|      0|      result = pop3_perform_authentication(data, conn);
  776|      0|    else {
  777|      0|      failf(data, "STLS not supported.");
  778|      0|      result = CURLE_USE_SSL_FAILED;
  779|      0|    }
  780|    188|  }
  781|       |
  782|  5.21k|  return result;
  783|  5.21k|}
pop3.c:pop3_perform_authentication:
  541|    188|{
  542|    188|  CURLcode result = CURLE_OK;
  543|    188|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  544|    188|  saslprogress progress = SASL_IDLE;
  545|       |
  546|       |  /* Check we have enough data to authenticate with and end the
  547|       |     connect phase if we don't */
  548|    188|  if(!Curl_sasl_can_authenticate(&pop3c->sasl, conn)) {
  549|     85|    state(data, POP3_STOP);
  550|     85|    return result;
  551|     85|  }
  552|       |
  553|    103|  if(pop3c->authtypes & pop3c->preftype & POP3_TYPE_SASL) {
  554|       |    /* Calculate the SASL login details */
  555|     92|    result = Curl_sasl_start(&pop3c->sasl, data, FALSE, &progress);
  556|       |
  557|     92|    if(!result)
  558|     92|      if(progress == SASL_INPROGRESS)
  559|     88|        state(data, POP3_AUTH);
  560|     92|  }
  561|       |
  562|    103|  if(!result && progress == SASL_IDLE) {
  563|     15|#ifndef CURL_DISABLE_CRYPTO_AUTH
  564|     15|    if(pop3c->authtypes & pop3c->preftype & POP3_TYPE_APOP)
  565|       |      /* Perform APOP authentication */
  566|      4|      result = pop3_perform_apop(data, conn);
  567|     11|    else
  568|     11|#endif
  569|     11|    if(pop3c->authtypes & pop3c->preftype & POP3_TYPE_CLEARTEXT)
  570|       |      /* Perform clear text authentication */
  571|      9|      result = pop3_perform_user(data, conn);
  572|      2|    else {
  573|       |      /* Other mechanisms not supported */
  574|      2|      infof(data, "No known authentication mechanisms supported!");
  575|      2|      result = CURLE_LOGIN_DENIED;
  576|      2|    }
  577|     15|  }
  578|       |
  579|    103|  return result;
  580|    188|}
pop3.c:pop3_perform_apop:
  428|      5|{
  429|      5|  CURLcode result = CURLE_OK;
  430|      5|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  431|      5|  size_t i;
  432|      5|  struct MD5_context *ctxt;
  433|      5|  unsigned char digest[MD5_DIGEST_LEN];
  434|      5|  char secret[2 * MD5_DIGEST_LEN + 1];
  435|       |
  436|       |  /* Check we have a username and password to authenticate with and end the
  437|       |     connect phase if we don't */
  438|      5|  if(!conn->bits.user_passwd) {
  439|      0|    state(data, POP3_STOP);
  440|       |
  441|      0|    return result;
  442|      0|  }
  443|       |
  444|       |  /* Create the digest */
  445|      5|  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  446|      5|  if(!ctxt)
  447|      0|    return CURLE_OUT_OF_MEMORY;
  448|       |
  449|      5|  Curl_MD5_update(ctxt, (const unsigned char *) pop3c->apoptimestamp,
  450|      5|                  curlx_uztoui(strlen(pop3c->apoptimestamp)));
  451|       |
  452|      5|  Curl_MD5_update(ctxt, (const unsigned char *) conn->passwd,
  453|      5|                  curlx_uztoui(strlen(conn->passwd)));
  454|       |
  455|       |  /* Finalise the digest */
  456|      5|  Curl_MD5_final(ctxt, digest);
  457|       |
  458|       |  /* Convert the calculated 16 octet digest into a 32 byte hex string */
  459|     85|  for(i = 0; i < MD5_DIGEST_LEN; i++)
  460|     80|    msnprintf(&secret[2 * i], 3, "%02x", digest[i]);
  461|       |
  462|      5|  result = Curl_pp_sendf(data, &pop3c->pp, "APOP %s %s", conn->user, secret);
  463|       |
  464|      5|  if(!result)
  465|      5|    state(data, POP3_APOP);
  466|       |
  467|      5|  return result;
  468|      5|}
pop3.c:pop3_perform_user:
  399|     25|{
  400|     25|  CURLcode result = CURLE_OK;
  401|       |
  402|       |  /* Check we have a username and password to authenticate with and end the
  403|       |     connect phase if we don't */
  404|     25|  if(!conn->bits.user_passwd) {
  405|      0|    state(data, POP3_STOP);
  406|       |
  407|      0|    return result;
  408|      0|  }
  409|       |
  410|       |  /* Send the USER command */
  411|     25|  result = Curl_pp_sendf(data, &conn->proto.pop3c.pp, "USER %s",
  412|     25|                         conn->user ? conn->user : "");
  413|     25|  if(!result)
  414|     25|    state(data, POP3_USER);
  415|       |
  416|     25|  return result;
  417|     25|}
pop3.c:pop3_state_auth_resp:
  816|    150|{
  817|    150|  CURLcode result = CURLE_OK;
  818|    150|  struct connectdata *conn = data->conn;
  819|    150|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  820|    150|  saslprogress progress;
  821|       |
  822|    150|  (void)instate; /* no use for this yet */
  823|       |
  824|    150|  result = Curl_sasl_continue(&pop3c->sasl, data, pop3code, &progress);
  825|    150|  if(!result)
  826|    137|    switch(progress) {
  827|      1|    case SASL_DONE:
  828|      1|      state(data, POP3_STOP);  /* Authenticated */
  829|      1|      break;
  830|     18|    case SASL_IDLE:            /* No mechanism left after cancellation */
  831|     18|#ifndef CURL_DISABLE_CRYPTO_AUTH
  832|     18|      if(pop3c->authtypes & pop3c->preftype & POP3_TYPE_APOP)
  833|       |        /* Perform APOP authentication */
  834|      1|        result = pop3_perform_apop(data, conn);
  835|     17|      else
  836|     17|#endif
  837|     17|      if(pop3c->authtypes & pop3c->preftype & POP3_TYPE_CLEARTEXT)
  838|       |        /* Perform clear text authentication */
  839|     16|        result = pop3_perform_user(data, conn);
  840|      1|      else {
  841|      1|        failf(data, "Authentication cancelled");
  842|      1|        result = CURLE_LOGIN_DENIED;
  843|      1|      }
  844|     18|      break;
  845|    118|    default:
  846|    118|      break;
  847|    137|    }
  848|       |
  849|    150|  return result;
  850|    150|}
pop3.c:pop3_state_apop_resp:
  856|      1|{
  857|      1|  CURLcode result = CURLE_OK;
  858|      1|  (void)instate; /* no use for this yet */
  859|       |
  860|      1|  if(pop3code != '+') {
  861|      1|    failf(data, "Authentication failed: %d", pop3code);
  862|      1|    result = CURLE_LOGIN_DENIED;
  863|      1|  }
  864|      0|  else
  865|       |    /* End of connect phase */
  866|      0|    state(data, POP3_STOP);
  867|       |
  868|      1|  return result;
  869|      1|}
pop3.c:pop3_state_user_resp:
  875|     10|{
  876|     10|  CURLcode result = CURLE_OK;
  877|     10|  struct connectdata *conn = data->conn;
  878|     10|  (void)instate; /* no use for this yet */
  879|       |
  880|     10|  if(pop3code != '+') {
  881|      4|    failf(data, "Access denied. %c", pop3code);
  882|      4|    result = CURLE_LOGIN_DENIED;
  883|      4|  }
  884|      6|  else
  885|       |    /* Send the PASS command */
  886|      6|    result = Curl_pp_sendf(data, &conn->proto.pop3c.pp, "PASS %s",
  887|      6|                           conn->passwd ? conn->passwd : "");
  888|     10|  if(!result)
  889|      6|    state(data, POP3_PASS);
  890|       |
  891|     10|  return result;
  892|     10|}
pop3.c:pop3_state_pass_resp:
  897|      4|{
  898|      4|  CURLcode result = CURLE_OK;
  899|      4|  (void)instate; /* no use for this yet */
  900|       |
  901|      4|  if(pop3code != '+') {
  902|      1|    failf(data, "Access denied. %c", pop3code);
  903|      1|    result = CURLE_LOGIN_DENIED;
  904|      1|  }
  905|      3|  else
  906|       |    /* End of connect phase */
  907|      3|    state(data, POP3_STOP);
  908|       |
  909|      4|  return result;
  910|      4|}
pop3.c:pop3_state_command_resp:
  916|     75|{
  917|     75|  CURLcode result = CURLE_OK;
  918|     75|  struct connectdata *conn = data->conn;
  919|     75|  struct POP3 *pop3 = data->req.p.pop3;
  920|     75|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  921|     75|  struct pingpong *pp = &pop3c->pp;
  922|       |
  923|     75|  (void)instate; /* no use for this yet */
  924|       |
  925|     75|  if(pop3code != '+') {
  926|     11|    state(data, POP3_STOP);
  927|     11|    return CURLE_RECV_ERROR;
  928|     11|  }
  929|       |
  930|       |  /* This 'OK' line ends with a CR LF pair which is the two first bytes of the
  931|       |     EOB string so count this is two matching bytes. This is necessary to make
  932|       |     the code detect the EOB if the only data than comes now is %2e CR LF like
  933|       |     when there is no body to return. */
  934|     64|  pop3c->eob = 2;
  935|       |
  936|       |  /* But since this initial CR LF pair is not part of the actual body, we set
  937|       |     the strip counter here so that these bytes won't be delivered. */
  938|     64|  pop3c->strip = 2;
  939|       |
  940|     64|  if(pop3->transfer == PPTRANSFER_BODY) {
  941|       |    /* POP3 download */
  942|     63|    Curl_setup_transfer(data, FIRSTSOCKET, -1, FALSE, -1);
  943|       |
  944|     63|    if(pp->cache) {
  945|       |      /* The header "cache" contains a bunch of data that is actually body
  946|       |         content so send it as such. Note that there may even be additional
  947|       |         "headers" after the body */
  948|       |
  949|     61|      if(!data->set.opt_no_body) {
  950|     61|        result = Curl_pop3_write(data, pp->cache, pp->cache_size);
  951|     61|        if(result)
  952|      0|          return result;
  953|     61|      }
  954|       |
  955|       |      /* Free the cache */
  956|     61|      Curl_safefree(pp->cache);
  957|       |
  958|       |      /* Reset the cache size */
  959|     61|      pp->cache_size = 0;
  960|     61|    }
  961|     63|  }
  962|       |
  963|       |  /* End of DO phase */
  964|     64|  state(data, POP3_STOP);
  965|       |
  966|     64|  return result;
  967|     64|}
pop3.c:pop3_endofresp:
  210|  6.75k|{
  211|  6.75k|  struct pop3_conn *pop3c = &conn->proto.pop3c;
  212|  6.75k|  (void)data;
  213|       |
  214|       |  /* Do we have an error response? */
  215|  6.75k|  if(len >= 4 && !memcmp("-ERR", line, 4)) {
  216|    141|    *resp = '-';
  217|       |
  218|    141|    return TRUE;
  219|    141|  }
  220|       |
  221|       |  /* Are we processing CAPA command responses? */
  222|  6.60k|  if(pop3c->state == POP3_CAPA) {
  223|       |    /* Do we have the terminating line? */
  224|  5.09k|    if(len >= 1 && line[0] == '.')
  225|       |      /* Treat the response as a success */
  226|     72|      *resp = '+';
  227|  5.02k|    else
  228|       |      /* Treat the response as an untagged continuation */
  229|  5.02k|      *resp = '*';
  230|       |
  231|  5.09k|    return TRUE;
  232|  5.09k|  }
  233|       |
  234|       |  /* Do we have a success response? */
  235|  1.51k|  if(len >= 3 && !memcmp("+OK", line, 3)) {
  236|    359|    *resp = '+';
  237|       |
  238|    359|    return TRUE;
  239|    359|  }
  240|       |
  241|       |  /* Do we have a continuation response? */
  242|  1.15k|  if(len >= 1 && line[0] == '+') {
  243|    151|    *resp = '*';
  244|       |
  245|    151|    return TRUE;
  246|    151|  }
  247|       |
  248|  1.00k|  return FALSE; /* Nothing for us */
  249|  1.15k|}
pop3.c:pop3_perform_auth:
  481|    100|{
  482|    100|  CURLcode result = CURLE_OK;
  483|    100|  struct pop3_conn *pop3c = &data->conn->proto.pop3c;
  484|    100|  const char *ir = (const char *) Curl_bufref_ptr(initresp);
  485|       |
  486|    100|  if(ir) {                                  /* AUTH <mech> ...<crlf> */
  487|       |    /* Send the AUTH command with the initial response */
  488|      0|    result = Curl_pp_sendf(data, &pop3c->pp, "AUTH %s %s", mech, ir);
  489|      0|  }
  490|    100|  else {
  491|       |    /* Send the AUTH command */
  492|    100|    result = Curl_pp_sendf(data, &pop3c->pp, "AUTH %s", mech);
  493|    100|  }
  494|       |
  495|    100|  return result;
  496|    100|}
pop3.c:pop3_continue_auth:
  507|     51|{
  508|     51|  struct pop3_conn *pop3c = &data->conn->proto.pop3c;
  509|       |
  510|     51|  (void)mech;
  511|       |
  512|     51|  return Curl_pp_sendf(data, &pop3c->pp,
  513|     51|                       "%s", (const char *) Curl_bufref_ptr(resp));
  514|     51|}
pop3.c:pop3_cancel_auth:
  523|     55|{
  524|     55|  struct pop3_conn *pop3c = &data->conn->proto.pop3c;
  525|       |
  526|     55|  (void)mech;
  527|       |
  528|     55|  return Curl_pp_sendf(data, &pop3c->pp, "*");
  529|     55|}
pop3.c:pop3_get_message:
  258|     88|{
  259|     88|  char *message = data->state.buffer;
  260|     88|  size_t len = strlen(message);
  261|       |
  262|     88|  if(len > 2) {
  263|       |    /* Find the start of the message */
  264|     78|    len -= 2;
  265|    580|    for(message += 2; *message == ' ' || *message == '\t'; message++, len--)
  266|    502|      ;
  267|       |
  268|       |    /* Find the end of the message */
  269|    603|    while(len--)
  270|    597|      if(message[len] != '\r' && message[len] != '\n' && message[len] != ' ' &&
  271|    597|         message[len] != '\t')
  272|     72|        break;
  273|       |
  274|       |    /* Terminate the message */
  275|     78|    message[++len] = '\0';
  276|     78|    Curl_bufref_set(out, message, len, NULL);
  277|     78|  }
  278|     10|  else
  279|       |    /* junk input => zero length output */
  280|     10|    Curl_bufref_set(out, "", 0, NULL);
  281|       |
  282|     88|  return CURLE_OK;
  283|     88|}
pop3.c:pop3_parse_url_options:
 1363|    312|{
 1364|    312|  CURLcode result = CURLE_OK;
 1365|    312|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1366|    312|  const char *ptr = conn->options;
 1367|       |
 1368|    336|  while(!result && ptr && *ptr) {
 1369|     24|    const char *key = ptr;
 1370|     24|    const char *value;
 1371|       |
 1372|    175|    while(*ptr && *ptr != '=')
 1373|    151|        ptr++;
 1374|       |
 1375|     24|    value = ptr + 1;
 1376|       |
 1377|    136|    while(*ptr && *ptr != ';')
 1378|    112|      ptr++;
 1379|       |
 1380|     24|    if(strncasecompare(key, "AUTH=", 5)) {
 1381|     12|      result = Curl_sasl_parse_url_auth_option(&pop3c->sasl,
 1382|     12|                                               value, ptr - value);
 1383|       |
 1384|     12|      if(result && strncasecompare(value, "+APOP", ptr - value)) {
 1385|      6|        pop3c->preftype = POP3_TYPE_APOP;
 1386|      6|        pop3c->sasl.prefmech = SASL_AUTH_NONE;
 1387|      6|        result = CURLE_OK;
 1388|      6|      }
 1389|     12|    }
 1390|     12|    else
 1391|     12|      result = CURLE_URL_MALFORMAT;
 1392|       |
 1393|     24|    if(*ptr == ';')
 1394|      7|      ptr++;
 1395|     24|  }
 1396|       |
 1397|    312|  if(pop3c->preftype != POP3_TYPE_APOP)
 1398|    307|    switch(pop3c->sasl.prefmech) {
 1399|      2|    case SASL_AUTH_NONE:
 1400|      2|      pop3c->preftype = POP3_TYPE_NONE;
 1401|      2|      break;
 1402|    305|    case SASL_AUTH_DEFAULT:
 1403|    305|      pop3c->preftype = POP3_TYPE_ANY;
 1404|    305|      break;
 1405|      0|    default:
 1406|      0|      pop3c->preftype = POP3_TYPE_SASL;
 1407|      0|      break;
 1408|    307|    }
 1409|       |
 1410|    312|  return result;
 1411|    312|}
pop3.c:state:
  292|  1.05k|{
  293|  1.05k|  struct pop3_conn *pop3c = &data->conn->proto.pop3c;
  294|  1.05k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  295|       |  /* for debug purposes */
  296|  1.05k|  static const char * const names[] = {
  297|  1.05k|    "STOP",
  298|  1.05k|    "SERVERGREET",
  299|  1.05k|    "CAPA",
  300|  1.05k|    "STARTTLS",
  301|  1.05k|    "UPGRADETLS",
  302|  1.05k|    "AUTH",
  303|  1.05k|    "APOP",
  304|  1.05k|    "USER",
  305|  1.05k|    "PASS",
  306|  1.05k|    "COMMAND",
  307|  1.05k|    "QUIT",
  308|       |    /* LAST */
  309|  1.05k|  };
  310|       |
  311|  1.05k|  if(pop3c->state != newstate)
  312|  1.05k|    infof(data, "POP3 %p state change from %s to %s",
  313|  1.05k|          (void *)pop3c, names[pop3c->state], names[newstate]);
  314|  1.05k|#endif
  315|       |
  316|  1.05k|  pop3c->state = newstate;
  317|  1.05k|}
pop3.c:pop3_done:
 1157|    312|{
 1158|    312|  CURLcode result = CURLE_OK;
 1159|    312|  struct POP3 *pop3 = data->req.p.pop3;
 1160|       |
 1161|    312|  (void)premature;
 1162|       |
 1163|    312|  if(!pop3)
 1164|      0|    return CURLE_OK;
 1165|       |
 1166|    312|  if(status) {
 1167|    246|    connclose(data->conn, "POP3 done with bad status");
 1168|    246|    result = status;         /* use the already set error code */
 1169|    246|  }
 1170|       |
 1171|       |  /* Cleanup our per-request based variables */
 1172|    312|  Curl_safefree(pop3->id);
 1173|    312|  Curl_safefree(pop3->custom);
 1174|       |
 1175|       |  /* Clear the transfer mode for the next request */
 1176|    312|  pop3->transfer = PPTRANSFER_BODY;
 1177|       |
 1178|    312|  return result;
 1179|    312|}
pop3.c:pop3_do:
 1230|     89|{
 1231|     89|  CURLcode result = CURLE_OK;
 1232|     89|  *done = FALSE; /* default to false */
 1233|       |
 1234|       |  /* Parse the URL path */
 1235|     89|  result = pop3_parse_url_path(data);
 1236|     89|  if(result)
 1237|      0|    return result;
 1238|       |
 1239|       |  /* Parse the custom request */
 1240|     89|  result = pop3_parse_custom_request(data);
 1241|     89|  if(result)
 1242|      1|    return result;
 1243|       |
 1244|     88|  result = pop3_regular_transfer(data, done);
 1245|       |
 1246|     88|  return result;
 1247|     89|}
pop3.c:pop3_parse_url_path:
 1420|     89|{
 1421|       |  /* The POP3 struct is already initialised in pop3_connect() */
 1422|     89|  struct POP3 *pop3 = data->req.p.pop3;
 1423|     89|  const char *path = &data->state.up.path[1]; /* skip leading path */
 1424|       |
 1425|       |  /* URL decode the path for the message ID */
 1426|     89|  return Curl_urldecode(data, path, 0, &pop3->id, NULL, REJECT_CTRL);
 1427|     89|}
pop3.c:pop3_parse_custom_request:
 1436|     89|{
 1437|     89|  CURLcode result = CURLE_OK;
 1438|     89|  struct POP3 *pop3 = data->req.p.pop3;
 1439|     89|  const char *custom = data->set.str[STRING_CUSTOMREQUEST];
 1440|       |
 1441|       |  /* URL decode the custom request */
 1442|     89|  if(custom)
 1443|      6|    result = Curl_urldecode(data, custom, 0, &pop3->custom, NULL, REJECT_CTRL);
 1444|       |
 1445|     89|  return result;
 1446|     89|}
pop3.c:pop3_regular_transfer:
 1319|     88|{
 1320|     88|  CURLcode result = CURLE_OK;
 1321|     88|  bool connected = FALSE;
 1322|       |
 1323|       |  /* Make sure size is unknown at this point */
 1324|     88|  data->req.size = -1;
 1325|       |
 1326|       |  /* Set the progress data */
 1327|     88|  Curl_pgrsSetUploadCounter(data, 0);
 1328|     88|  Curl_pgrsSetDownloadCounter(data, 0);
 1329|     88|  Curl_pgrsSetUploadSize(data, -1);
 1330|     88|  Curl_pgrsSetDownloadSize(data, -1);
 1331|       |
 1332|       |  /* Carry out the perform */
 1333|     88|  result = pop3_perform(data, &connected, dophase_done);
 1334|       |
 1335|       |  /* Perform post DO phase operations if necessary */
 1336|     88|  if(!result && *dophase_done)
 1337|     63|    result = pop3_dophase_done(data, connected);
 1338|       |
 1339|     88|  return result;
 1340|     88|}
pop3.c:pop3_perform:
 1190|     88|{
 1191|       |  /* This is POP3 and no proxy */
 1192|     88|  CURLcode result = CURLE_OK;
 1193|     88|  struct connectdata *conn = data->conn;
 1194|     88|  struct POP3 *pop3 = data->req.p.pop3;
 1195|       |
 1196|     88|  DEBUGF(infof(data, "DO phase starts"));
 1197|       |
 1198|     88|  if(data->set.opt_no_body) {
 1199|       |    /* Requested no body means no transfer */
 1200|      2|    pop3->transfer = PPTRANSFER_INFO;
 1201|      2|  }
 1202|       |
 1203|     88|  *dophase_done = FALSE; /* not done yet */
 1204|       |
 1205|       |  /* Start the first command in the DO phase */
 1206|     88|  result = pop3_perform_command(data);
 1207|     88|  if(result)
 1208|      0|    return result;
 1209|       |
 1210|       |  /* Run the state-machine */
 1211|     88|  result = pop3_multi_statemach(data, dophase_done);
 1212|     88|  *connected = conn->bits.tcpconnect[FIRSTSOCKET];
 1213|       |
 1214|     88|  if(*dophase_done)
 1215|     74|    DEBUGF(infof(data, "DO phase is complete"));
 1216|       |
 1217|     88|  return result;
 1218|     88|}
pop3.c:pop3_perform_command:
  589|     88|{
  590|     88|  CURLcode result = CURLE_OK;
  591|     88|  struct connectdata *conn = data->conn;
  592|     88|  struct POP3 *pop3 = data->req.p.pop3;
  593|     88|  const char *command = NULL;
  594|       |
  595|       |  /* Calculate the default command */
  596|     88|  if(pop3->id[0] == '\0' || data->set.list_only) {
  597|     38|    command = "LIST";
  598|       |
  599|     38|    if(pop3->id[0] != '\0')
  600|       |      /* Message specific LIST so skip the BODY transfer */
  601|      0|      pop3->transfer = PPTRANSFER_INFO;
  602|     38|  }
  603|     50|  else
  604|     50|    command = "RETR";
  605|       |
  606|       |  /* Send the command */
  607|     88|  if(pop3->id[0] != '\0')
  608|     50|    result = Curl_pp_sendf(data, &conn->proto.pop3c.pp, "%s %s",
  609|     50|                           (pop3->custom && pop3->custom[0] != '\0' ?
  610|     49|                            pop3->custom : command), pop3->id);
  611|     38|  else
  612|     38|    result = Curl_pp_sendf(data, &conn->proto.pop3c.pp, "%s",
  613|     38|                           (pop3->custom && pop3->custom[0] != '\0' ?
  614|     37|                            pop3->custom : command));
  615|       |
  616|     88|  if(!result)
  617|     88|    state(data, POP3_COMMAND);
  618|       |
  619|     88|  return result;
  620|     88|}
pop3.c:pop3_dophase_done:
 1285|     64|{
 1286|     64|  (void)data;
 1287|     64|  (void)connected;
 1288|       |
 1289|     64|  return CURLE_OK;
 1290|     64|}
pop3.c:pop3_disconnect:
 1258|    312|{
 1259|    312|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1260|    312|  (void)data;
 1261|       |
 1262|       |  /* We cannot send quit unconditionally. If this connection is stale or
 1263|       |     bad in any way, sending quit and waiting around here will make the
 1264|       |     disconnect wait in vain and cause more problems than we need to. */
 1265|       |
 1266|    312|  if(!dead_connection && conn->bits.protoconnstart) {
 1267|     87|    if(!pop3_perform_quit(data, conn))
 1268|     87|      (void)pop3_block_statemach(data, conn, TRUE); /* ignore errors on QUIT */
 1269|     87|  }
 1270|       |
 1271|       |  /* Disconnect from the server */
 1272|    312|  Curl_pp_disconnect(&pop3c->pp);
 1273|       |
 1274|       |  /* Cleanup the SASL module */
 1275|    312|  Curl_sasl_cleanup(conn, pop3c->sasl.authused);
 1276|       |
 1277|       |  /* Cleanup our connection based variables */
 1278|    312|  Curl_safefree(pop3c->apoptimestamp);
 1279|       |
 1280|    312|  return CURLE_OK;
 1281|    312|}
pop3.c:pop3_perform_quit:
  630|     87|{
  631|       |  /* Send the QUIT command */
  632|     87|  CURLcode result = Curl_pp_sendf(data, &conn->proto.pop3c.pp, "%s", "QUIT");
  633|       |
  634|     87|  if(!result)
  635|     87|    state(data, POP3_QUIT);
  636|       |
  637|     87|  return result;
  638|     87|}
pop3.c:pop3_block_statemach:
 1070|     87|{
 1071|     87|  CURLcode result = CURLE_OK;
 1072|     87|  struct pop3_conn *pop3c = &conn->proto.pop3c;
 1073|       |
 1074|    178|  while(pop3c->state != POP3_STOP && !result)
 1075|     91|    result = Curl_pp_statemach(data, &pop3c->pp, TRUE, disconnecting);
 1076|       |
 1077|     87|  return result;
 1078|     87|}
pop3.c:pop3_doing:
 1294|      6|{
 1295|      6|  CURLcode result = pop3_multi_statemach(data, dophase_done);
 1296|       |
 1297|      6|  if(result)
 1298|      1|    DEBUGF(infof(data, "DO phase failed"));
 1299|      5|  else if(*dophase_done) {
 1300|      1|    result = pop3_dophase_done(data, FALSE /* not connected */);
 1301|       |
 1302|      1|    DEBUGF(infof(data, "DO phase is complete"));
 1303|      1|  }
 1304|       |
 1305|      6|  return result;
 1306|      6|}
pop3.c:pop3_setup_connection:
 1344|    312|{
 1345|       |  /* Initialise the POP3 layer */
 1346|    312|  CURLcode result = pop3_init(data);
 1347|    312|  if(result)
 1348|      0|    return result;
 1349|       |
 1350|       |  /* Clear the TLS upgraded flag */
 1351|    312|  conn->bits.tls_upgraded = FALSE;
 1352|       |
 1353|    312|  return CURLE_OK;
 1354|    312|}
pop3.c:pop3_init:
 1083|    312|{
 1084|    312|  CURLcode result = CURLE_OK;
 1085|    312|  struct POP3 *pop3;
 1086|       |
 1087|    312|  pop3 = data->req.p.pop3 = calloc(sizeof(struct POP3), 1);
 1088|    312|  if(!pop3)
 1089|      0|    result = CURLE_OUT_OF_MEMORY;
 1090|       |
 1091|    312|  return result;
 1092|    312|}

Curl_pgrsDone:
  141|  2.84k|{
  142|  2.84k|  int rc;
  143|  2.84k|  data->progress.lastshow = 0;
  144|  2.84k|  rc = Curl_pgrsUpdate(data); /* the final (forced) update */
  145|  2.84k|  if(rc)
  146|      0|    return rc;
  147|       |
  148|  2.84k|  if(!(data->progress.flags & PGRS_HIDE) &&
  149|  2.84k|     !data->progress.callback)
  150|       |    /* only output if we don't use a progress callback and we're not
  151|       |     * hidden */
  152|      0|    fprintf(data->set.err, "\n");
  153|       |
  154|  2.84k|  data->progress.speeder_c = 0; /* reset the progress meter display */
  155|  2.84k|  return 0;
  156|  2.84k|}
Curl_pgrsResetTransferSizes:
  160|  2.92k|{
  161|  2.92k|  Curl_pgrsSetDownloadSize(data, -1);
  162|  2.92k|  Curl_pgrsSetUploadSize(data, -1);
  163|  2.92k|}
Curl_pgrsTime:
  173|  4.75M|{
  174|  4.75M|  struct curltime now = Curl_now();
  175|  4.75M|  timediff_t *delta = NULL;
  176|       |
  177|  4.75M|  switch(timer) {
  178|      0|  default:
  179|      0|  case TIMER_NONE:
  180|       |    /* mistake filter */
  181|      0|    break;
  182|  2.81k|  case TIMER_STARTOP:
  183|       |    /* This is set at the start of a transfer */
  184|  2.81k|    data->progress.t_startop = now;
  185|  2.81k|    break;
  186|  2.92k|  case TIMER_STARTSINGLE:
  187|       |    /* This is set at the start of each single fetch */
  188|  2.92k|    data->progress.t_startsingle = now;
  189|  2.92k|    data->progress.is_t_startransfer_set = false;
  190|  2.92k|    break;
  191|      0|  case TIMER_STARTACCEPT:
  192|      0|    data->progress.t_acceptdata = now;
  193|      0|    break;
  194|  2.84k|  case TIMER_NAMELOOKUP:
  195|  2.84k|    delta = &data->progress.t_nslookup;
  196|  2.84k|    break;
  197|  2.79k|  case TIMER_CONNECT:
  198|  2.79k|    delta = &data->progress.t_connect;
  199|  2.79k|    break;
  200|      0|  case TIMER_APPCONNECT:
  201|      0|    delta = &data->progress.t_appconnect;
  202|      0|    break;
  203|  1.50k|  case TIMER_PRETRANSFER:
  204|  1.50k|    delta = &data->progress.t_pretransfer;
  205|  1.50k|    break;
  206|  4.73M|  case TIMER_STARTTRANSFER:
  207|  4.73M|    delta = &data->progress.t_starttransfer;
  208|       |    /* prevent updating t_starttransfer unless:
  209|       |     *   1) this is the first time we're setting t_starttransfer
  210|       |     *   2) a redirect has occurred since the last time t_starttransfer was set
  211|       |     * This prevents repeated invocations of the function from incorrectly
  212|       |     * changing the t_starttransfer time.
  213|       |     */
  214|  4.73M|    if(data->progress.is_t_startransfer_set) {
  215|  4.73M|      return now;
  216|  4.73M|    }
  217|  1.43k|    else {
  218|  1.43k|      data->progress.is_t_startransfer_set = true;
  219|  1.43k|      break;
  220|  1.43k|    }
  221|      0|  case TIMER_POSTRANSFER:
  222|       |    /* this is the normal end-of-transfer thing */
  223|      0|    break;
  224|    106|  case TIMER_REDIRECT:
  225|    106|    data->progress.t_redirect = Curl_timediff_us(now, data->progress.start);
  226|    106|    break;
  227|  4.75M|  }
  228|  14.4k|  if(delta) {
  229|  8.58k|    timediff_t us = Curl_timediff_us(now, data->progress.t_startsingle);
  230|  8.58k|    if(us < 1)
  231|      0|      us = 1; /* make sure at least one microsecond passed */
  232|  8.58k|    *delta += us;
  233|  8.58k|  }
  234|  14.4k|  return now;
  235|  4.75M|}
Curl_pgrsStartNow:
  238|  2.86k|{
  239|  2.86k|  data->progress.speeder_c = 0; /* reset the progress meter display */
  240|  2.86k|  data->progress.start = Curl_now();
  241|  2.86k|  data->progress.is_t_startransfer_set = false;
  242|  2.86k|  data->progress.ul_limit_start = data->progress.start;
  243|  2.86k|  data->progress.dl_limit_start = data->progress.start;
  244|  2.86k|  data->progress.ul_limit_size = 0;
  245|  2.86k|  data->progress.dl_limit_size = 0;
  246|  2.86k|  data->progress.downloaded = 0;
  247|  2.86k|  data->progress.uploaded = 0;
  248|       |  /* clear all bits except HIDE and HEADERS_OUT */
  249|  2.86k|  data->progress.flags &= PGRS_HIDE|PGRS_HEADERS_OUT;
  250|  2.86k|  Curl_ratelimit(data, data->progress.start);
  251|  2.86k|}
Curl_pgrsSetDownloadCounter:
  316|  4.17k|{
  317|  4.17k|  data->progress.downloaded = size;
  318|  4.17k|}
Curl_ratelimit:
  324|  2.86k|{
  325|       |  /* don't set a new stamp unless the time since last update is long enough */
  326|  2.86k|  if(data->set.max_recv_speed) {
  327|      0|    if(Curl_timediff(now, data->progress.dl_limit_start) >=
  328|      0|       MIN_RATE_LIMIT_PERIOD) {
  329|      0|      data->progress.dl_limit_start = now;
  330|      0|      data->progress.dl_limit_size = data->progress.downloaded;
  331|      0|    }
  332|      0|  }
  333|  2.86k|  if(data->set.max_send_speed) {
  334|      0|    if(Curl_timediff(now, data->progress.ul_limit_start) >=
  335|      0|       MIN_RATE_LIMIT_PERIOD) {
  336|      0|      data->progress.ul_limit_start = now;
  337|      0|      data->progress.ul_limit_size = data->progress.uploaded;
  338|      0|    }
  339|      0|  }
  340|  2.86k|}
Curl_pgrsSetUploadCounter:
  346|  5.16k|{
  347|  5.16k|  data->progress.uploaded = size;
  348|  5.16k|}
Curl_pgrsSetDownloadSize:
  351|  4.08k|{
  352|  4.08k|  if(size >= 0) {
  353|    247|    data->progress.size_dl = size;
  354|    247|    data->progress.flags |= PGRS_DL_SIZE_KNOWN;
  355|    247|  }
  356|  3.83k|  else {
  357|  3.83k|    data->progress.size_dl = 0;
  358|  3.83k|    data->progress.flags &= ~PGRS_DL_SIZE_KNOWN;
  359|  3.83k|  }
  360|  4.08k|}
Curl_pgrsSetUploadSize:
  363|  4.96k|{
  364|  4.96k|  if(size >= 0) {
  365|  1.15k|    data->progress.size_ul = size;
  366|  1.15k|    data->progress.flags |= PGRS_UL_SIZE_KNOWN;
  367|  1.15k|  }
  368|  3.80k|  else {
  369|  3.80k|    data->progress.size_ul = 0;
  370|  3.80k|    data->progress.flags &= ~PGRS_UL_SIZE_KNOWN;
  371|  3.80k|  }
  372|  4.96k|}
Curl_pgrsUpdate:
  577|  9.49M|{
  578|  9.49M|  struct curltime now = Curl_now(); /* what time is it */
  579|  9.49M|  bool showprogress = progress_calc(data, now);
  580|  9.49M|  if(!(data->progress.flags & PGRS_HIDE)) {
  581|      0|    if(data->set.fxferinfo) {
  582|      0|      int result;
  583|       |      /* There's a callback set, call that */
  584|      0|      Curl_set_in_callback(data, true);
  585|      0|      result = data->set.fxferinfo(data->set.progress_client,
  586|      0|                                   data->progress.size_dl,
  587|      0|                                   data->progress.downloaded,
  588|      0|                                   data->progress.size_ul,
  589|      0|                                   data->progress.uploaded);
  590|      0|      Curl_set_in_callback(data, false);
  591|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  592|      0|        if(result)
  593|      0|          failf(data, "Callback aborted");
  594|      0|        return result;
  595|      0|      }
  596|      0|    }
  597|      0|    else if(data->set.fprogress) {
  598|      0|      int result;
  599|       |      /* The older deprecated callback is set, call that */
  600|      0|      Curl_set_in_callback(data, true);
  601|      0|      result = data->set.fprogress(data->set.progress_client,
  602|      0|                                   (double)data->progress.size_dl,
  603|      0|                                   (double)data->progress.downloaded,
  604|      0|                                   (double)data->progress.size_ul,
  605|      0|                                   (double)data->progress.uploaded);
  606|      0|      Curl_set_in_callback(data, false);
  607|      0|      if(result != CURL_PROGRESSFUNC_CONTINUE) {
  608|      0|        if(result)
  609|      0|          failf(data, "Callback aborted");
  610|      0|        return result;
  611|      0|      }
  612|      0|    }
  613|       |
  614|      0|    if(showprogress)
  615|      0|      progress_meter(data);
  616|      0|  }
  617|       |
  618|  9.49M|  return 0;
  619|  9.49M|}
progress.c:progress_calc:
  390|  9.49M|{
  391|  9.49M|  bool timetoshow = FALSE;
  392|  9.49M|  struct Progress * const p = &data->progress;
  393|       |
  394|       |  /* The time spent so far (from the start) in microseconds */
  395|  9.49M|  p->timespent = Curl_timediff_us(now, p->start);
  396|  9.49M|  p->dlspeed = trspeed(p->downloaded, p->timespent);
  397|  9.49M|  p->ulspeed = trspeed(p->uploaded, p->timespent);
  398|       |
  399|       |  /* Calculations done at most once a second, unless end is reached */
  400|  9.49M|  if(p->lastshow != now.tv_sec) {
  401|  5.82k|    int countindex; /* amount of seconds stored in the speeder array */
  402|  5.82k|    int nowindex = p->speeder_c% CURR_TIME;
  403|  5.82k|    p->lastshow = now.tv_sec;
  404|  5.82k|    timetoshow = TRUE;
  405|       |
  406|       |    /* Let's do the "current speed" thing, with the dl + ul speeds
  407|       |       combined. Store the speed at entry 'nowindex'. */
  408|  5.82k|    p->speeder[ nowindex ] = p->downloaded + p->uploaded;
  409|       |
  410|       |    /* remember the exact time for this moment */
  411|  5.82k|    p->speeder_time [ nowindex ] = now;
  412|       |
  413|       |    /* advance our speeder_c counter, which is increased every time we get
  414|       |       here and we expect it to never wrap as 2^32 is a lot of seconds! */
  415|  5.82k|    p->speeder_c++;
  416|       |
  417|       |    /* figure out how many index entries of data we have stored in our speeder
  418|       |       array. With N_ENTRIES filled in, we have about N_ENTRIES-1 seconds of
  419|       |       transfer. Imagine, after one second we have filled in two entries,
  420|       |       after two seconds we've filled in three entries etc. */
  421|  5.82k|    countindex = ((p->speeder_c >= CURR_TIME)? CURR_TIME:p->speeder_c) - 1;
  422|       |
  423|       |    /* first of all, we don't do this if there's no counted seconds yet */
  424|  5.82k|    if(countindex) {
  425|  2.72k|      int checkindex;
  426|  2.72k|      timediff_t span_ms;
  427|  2.72k|      curl_off_t amount;
  428|       |
  429|       |      /* Get the index position to compare with the 'nowindex' position.
  430|       |         Get the oldest entry possible. While we have less than CURR_TIME
  431|       |         entries, the first entry will remain the oldest. */
  432|  2.72k|      checkindex = (p->speeder_c >= CURR_TIME)? p->speeder_c%CURR_TIME:0;
  433|       |
  434|       |      /* Figure out the exact time for the time span */
  435|  2.72k|      span_ms = Curl_timediff(now, p->speeder_time[checkindex]);
  436|  2.72k|      if(0 == span_ms)
  437|  2.53k|        span_ms = 1; /* at least one millisecond MUST have passed */
  438|       |
  439|       |      /* Calculate the average speed the last 'span_ms' milliseconds */
  440|  2.72k|      amount = p->speeder[nowindex]- p->speeder[checkindex];
  441|       |
  442|  2.72k|      if(amount > CURL_OFF_T_C(4294967) /* 0xffffffff/1000 */)
  443|       |        /* the 'amount' value is bigger than would fit in 32 bits if
  444|       |           multiplied with 1000, so we use the double math for this */
  445|      0|        p->current_speed = (curl_off_t)
  446|      0|          ((double)amount/((double)span_ms/1000.0));
  447|  2.72k|      else
  448|       |        /* the 'amount' value is small enough to fit within 32 bits even
  449|       |           when multiplied with 1000 */
  450|  2.72k|        p->current_speed = amount*CURL_OFF_T_C(1000)/span_ms;
  451|  2.72k|    }
  452|  3.10k|    else
  453|       |      /* the first second we use the average */
  454|  3.10k|      p->current_speed = p->ulspeed + p->dlspeed;
  455|       |
  456|  5.82k|  } /* Calculations end */
  457|  9.49M|  return timetoshow;
  458|  9.49M|}
progress.c:trspeed:
  377|  18.9M|{
  378|  18.9M|  if(us < 1)
  379|      0|    return size * 1000000;
  380|  18.9M|  else if(size < CURL_OFF_T_MAX/1000000)
  381|  18.9M|    return (size * 1000000) / us;
  382|      0|  else if(us >= 1000000)
  383|      0|    return size / (us / 1000000);
  384|      0|  else
  385|      0|    return CURL_OFF_T_MAX;
  386|  18.9M|}

Curl_rand:
  120|  3.30k|{
  121|  3.30k|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  122|       |
  123|  3.30k|  DEBUGASSERT(num > 0);
  124|       |
  125|  7.03k|  while(num) {
  126|  3.73k|    unsigned int r;
  127|  3.73k|    size_t left = num < sizeof(unsigned int) ? num : sizeof(unsigned int);
  128|       |
  129|  3.73k|    result = randit(data, &r);
  130|  3.73k|    if(result)
  131|      0|      return result;
  132|       |
  133|  18.6k|    while(left) {
  134|  14.9k|      *rnd++ = (unsigned char)(r & 0xFF);
  135|  14.9k|      r >>= 8;
  136|  14.9k|      --num;
  137|  14.9k|      --left;
  138|  14.9k|    }
  139|  3.73k|  }
  140|       |
  141|  3.30k|  return result;
  142|  3.30k|}
Curl_rand_hex:
  152|  3.30k|{
  153|  3.30k|  CURLcode result = CURLE_BAD_FUNCTION_ARGUMENT;
  154|  3.30k|  const char *hex = "0123456789abcdef";
  155|  3.30k|  unsigned char buffer[128];
  156|  3.30k|  unsigned char *bufp = buffer;
  157|  3.30k|  DEBUGASSERT(num > 1);
  158|       |
  159|       |#ifdef __clang_analyzer__
  160|       |  /* This silences a scan-build warning about accessing this buffer with
  161|       |     uninitialized memory. */
  162|       |  memset(buffer, 0, sizeof(buffer));
  163|       |#endif
  164|       |
  165|  3.30k|  if((num/2 >= sizeof(buffer)) || !(num&1))
  166|       |    /* make sure it fits in the local buffer and that it is an odd number! */
  167|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  168|       |
  169|  3.30k|  num--; /* save one for zero termination */
  170|       |
  171|  3.30k|  result = Curl_rand(data, buffer, num/2);
  172|  3.30k|  if(result)
  173|      0|    return result;
  174|       |
  175|  18.2k|  while(num) {
  176|       |    /* clang-tidy warns on this line without this comment: */
  177|       |    /* NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult) */
  178|  14.9k|    *rnd++ = hex[(*bufp & 0xF0)>>4];
  179|  14.9k|    *rnd++ = hex[*bufp & 0x0F];
  180|  14.9k|    bufp++;
  181|  14.9k|    num -= 2;
  182|  14.9k|  }
  183|  3.30k|  *rnd = 0;
  184|       |
  185|  3.30k|  return result;
  186|  3.30k|}
rand.c:randit:
   40|  3.73k|{
   41|  3.73k|  unsigned int r;
   42|  3.73k|  CURLcode result = CURLE_OK;
   43|  3.73k|  static unsigned int randseed;
   44|  3.73k|  static bool seeded = FALSE;
   45|       |
   46|  3.73k|#ifdef CURLDEBUG
   47|  3.73k|  char *force_entropy = getenv("CURL_ENTROPY");
   48|  3.73k|  if(force_entropy) {
   49|      0|    if(!seeded) {
   50|      0|      unsigned int seed = 0;
   51|      0|      size_t elen = strlen(force_entropy);
   52|      0|      size_t clen = sizeof(seed);
   53|      0|      size_t min = elen < clen ? elen : clen;
   54|      0|      memcpy((char *)&seed, force_entropy, min);
   55|      0|      randseed = ntohl(seed);
   56|      0|      seeded = TRUE;
   57|      0|    }
   58|      0|    else
   59|      0|      randseed++;
   60|      0|    *rnd = randseed;
   61|      0|    return CURLE_OK;
   62|      0|  }
   63|  3.73k|#endif
   64|       |
   65|       |  /* data may be NULL! */
   66|  3.73k|  result = Curl_ssl_random(data, (unsigned char *)rnd, sizeof(*rnd));
   67|  3.73k|  if(result != CURLE_NOT_BUILT_IN)
   68|       |    /* only if there is no random function in the TLS backend do the non crypto
   69|       |       version, otherwise return result */
   70|  3.73k|    return result;
   71|       |
   72|       |  /* ---- non-cryptographic version following ---- */
   73|       |
   74|      0|#ifdef RANDOM_FILE
   75|      0|  if(!seeded) {
   76|       |    /* if there's a random file to read a seed from, use it */
   77|      0|    int fd = open(RANDOM_FILE, O_RDONLY);
   78|      0|    if(fd > -1) {
   79|       |      /* read random data into the randseed variable */
   80|      0|      ssize_t nread = read(fd, &randseed, sizeof(randseed));
   81|      0|      if(nread == sizeof(randseed))
   82|      0|        seeded = TRUE;
   83|      0|      close(fd);
   84|      0|    }
   85|      0|  }
   86|      0|#endif
   87|       |
   88|      0|  if(!seeded) {
   89|      0|    struct curltime now = Curl_now();
   90|      0|    infof(data, "WARNING: Using weak random seed");
   91|      0|    randseed += (unsigned int)now.tv_usec + (unsigned int)now.tv_sec;
   92|      0|    randseed = randseed * 1103515245 + 12345;
   93|      0|    randseed = randseed * 1103515245 + 12345;
   94|      0|    randseed = randseed * 1103515245 + 12345;
   95|      0|    seeded = TRUE;
   96|      0|  }
   97|       |
   98|       |  /* Return an unsigned 32-bit pseudo-random number. */
   99|      0|  r = randseed = randseed * 1103515245 + 12345;
  100|      0|  *rnd = (r << 16) | ((r >> 16) & 0xFFFF);
  101|      0|  return CURLE_OK;
  102|  3.73k|}

Curl_rename:
   40|  2.97k|{
   41|       |#ifdef WIN32
   42|       |  /* rename() on Windows doesn't overwrite, so we can't use it here.
   43|       |     MoveFileEx() will overwrite and is usually atomic, however it fails
   44|       |     when there are open handles to the file. */
   45|       |  const int max_wait_ms = 1000;
   46|       |  struct curltime start = Curl_now();
   47|       |  TCHAR *tchar_oldpath = curlx_convert_UTF8_to_tchar((char *)oldpath);
   48|       |  TCHAR *tchar_newpath = curlx_convert_UTF8_to_tchar((char *)newpath);
   49|       |  for(;;) {
   50|       |    timediff_t diff;
   51|       |    if(MoveFileEx(tchar_oldpath, tchar_newpath, MOVEFILE_REPLACE_EXISTING)) {
   52|       |      curlx_unicodefree(tchar_oldpath);
   53|       |      curlx_unicodefree(tchar_newpath);
   54|       |      break;
   55|       |    }
   56|       |    diff = Curl_timediff(Curl_now(), start);
   57|       |    if(diff < 0 || diff > max_wait_ms) {
   58|       |      curlx_unicodefree(tchar_oldpath);
   59|       |      curlx_unicodefree(tchar_newpath);
   60|       |      return 1;
   61|       |    }
   62|       |    Sleep(1);
   63|       |  }
   64|       |#else
   65|  2.97k|  if(rename(oldpath, newpath))
   66|      0|    return 1;
   67|  2.97k|#endif
   68|  2.97k|  return 0;
   69|  2.97k|}

Curl_rtsp_parseheader:
  769|    447|{
  770|    447|  long CSeq = 0;
  771|       |
  772|    447|  if(checkprefix("CSeq:", header)) {
  773|       |    /* Store the received CSeq. Match is verified in rtsp_done */
  774|     71|    int nc = sscanf(&header[4], ": %ld", &CSeq);
  775|     71|    if(nc == 1) {
  776|     70|      struct RTSP *rtsp = data->req.p.rtsp;
  777|     70|      rtsp->CSeq_recv = CSeq; /* mark the request */
  778|     70|      data->state.rtsp_CSeq_recv = CSeq; /* update the handle */
  779|     70|    }
  780|      1|    else {
  781|      1|      failf(data, "Unable to read the CSeq header: [%s]", header);
  782|      1|      return CURLE_RTSP_CSEQ_ERROR;
  783|      1|    }
  784|     71|  }
  785|    376|  else if(checkprefix("Session:", header)) {
  786|      0|    char *start;
  787|      0|    char *end;
  788|      0|    size_t idlen;
  789|       |
  790|       |    /* Find the first non-space letter */
  791|      0|    start = header + 8;
  792|      0|    while(*start && ISSPACE(*start))
  793|      0|      start++;
  794|       |
  795|      0|    if(!*start) {
  796|      0|      failf(data, "Got a blank Session ID");
  797|      0|      return CURLE_RTSP_SESSION_ERROR;
  798|      0|    }
  799|       |
  800|       |    /* Find the end of Session ID
  801|       |     *
  802|       |     * Allow any non whitespace content, up to the field separator or end of
  803|       |     * line. RFC 2326 isn't 100% clear on the session ID and for example
  804|       |     * gstreamer does url-encoded session ID's not covered by the standard.
  805|       |     */
  806|      0|    end = start;
  807|      0|    while(*end && *end != ';' && !ISSPACE(*end))
  808|      0|      end++;
  809|      0|    idlen = end - start;
  810|       |
  811|      0|    if(data->set.str[STRING_RTSP_SESSION_ID]) {
  812|       |
  813|       |      /* If the Session ID is set, then compare */
  814|      0|      if(strlen(data->set.str[STRING_RTSP_SESSION_ID]) != idlen ||
  815|      0|         strncmp(start, data->set.str[STRING_RTSP_SESSION_ID], idlen) != 0) {
  816|      0|        failf(data, "Got RTSP Session ID Line [%s], but wanted ID [%s]",
  817|      0|              start, data->set.str[STRING_RTSP_SESSION_ID]);
  818|      0|        return CURLE_RTSP_SESSION_ERROR;
  819|      0|      }
  820|      0|    }
  821|      0|    else {
  822|       |      /* If the Session ID is not set, and we find it in a response, then set
  823|       |       * it.
  824|       |       */
  825|       |
  826|       |      /* Copy the id substring into a new buffer */
  827|      0|      data->set.str[STRING_RTSP_SESSION_ID] = malloc(idlen + 1);
  828|      0|      if(!data->set.str[STRING_RTSP_SESSION_ID])
  829|      0|        return CURLE_OUT_OF_MEMORY;
  830|      0|      memcpy(data->set.str[STRING_RTSP_SESSION_ID], start, idlen);
  831|      0|      (data->set.str[STRING_RTSP_SESSION_ID])[idlen] = '\0';
  832|      0|    }
  833|      0|  }
  834|    446|  return CURLE_OK;
  835|    447|}
rtsp.c:rtsp_setup_connection:
  122|    127|{
  123|    127|  struct RTSP *rtsp;
  124|    127|  (void)conn;
  125|       |
  126|    127|  data->req.p.rtsp = rtsp = calloc(1, sizeof(struct RTSP));
  127|    127|  if(!rtsp)
  128|      0|    return CURLE_OUT_OF_MEMORY;
  129|       |
  130|    127|  return CURLE_OK;
  131|    127|}
rtsp.c:rtsp_connect:
  184|    127|{
  185|    127|  CURLcode httpStatus;
  186|       |
  187|    127|  httpStatus = Curl_http_connect(data, done);
  188|       |
  189|       |  /* Initialize the CSeq if not already done */
  190|    127|  if(data->state.rtsp_next_client_CSeq == 0)
  191|    127|    data->state.rtsp_next_client_CSeq = 1;
  192|    127|  if(data->state.rtsp_next_server_CSeq == 0)
  193|    127|    data->state.rtsp_next_server_CSeq = 1;
  194|       |
  195|    127|  data->conn->proto.rtspc.rtp_channel = -1;
  196|       |
  197|    127|  return httpStatus;
  198|    127|}
rtsp.c:rtsp_disconnect:
  202|    127|{
  203|    127|  (void) dead;
  204|    127|  (void) data;
  205|    127|  Curl_safefree(conn->proto.rtspc.rtp_buf);
  206|    127|  return CURLE_OK;
  207|    127|}
rtsp.c:rtsp_done:
  212|    127|{
  213|    127|  struct RTSP *rtsp = data->req.p.rtsp;
  214|    127|  CURLcode httpStatus;
  215|       |
  216|       |  /* Bypass HTTP empty-reply checks on receive */
  217|    127|  if(data->set.rtspreq == RTSPREQ_RECEIVE)
  218|      0|    premature = TRUE;
  219|       |
  220|    127|  httpStatus = Curl_http_done(data, status, premature);
  221|       |
  222|    127|  if(rtsp) {
  223|       |    /* Check the sequence numbers */
  224|    127|    long CSeq_sent = rtsp->CSeq_sent;
  225|    127|    long CSeq_recv = rtsp->CSeq_recv;
  226|    127|    if((data->set.rtspreq != RTSPREQ_RECEIVE) && (CSeq_sent != CSeq_recv)) {
  227|    119|      failf(data,
  228|    119|            "The CSeq of this request %ld did not match the response %ld",
  229|    119|            CSeq_sent, CSeq_recv);
  230|    119|      return CURLE_RTSP_CSEQ_ERROR;
  231|    119|    }
  232|      8|    if(data->set.rtspreq == RTSPREQ_RECEIVE &&
  233|      8|            (data->conn->proto.rtspc.rtp_channel == -1)) {
  234|      0|      infof(data, "Got an RTP Receive with a CSeq of %ld", CSeq_recv);
  235|      0|    }
  236|      8|  }
  237|       |
  238|      8|  return httpStatus;
  239|    127|}
rtsp.c:rtsp_do:
  242|    127|{
  243|    127|  struct connectdata *conn = data->conn;
  244|    127|  CURLcode result = CURLE_OK;
  245|    127|  Curl_RtspReq rtspreq = data->set.rtspreq;
  246|    127|  struct RTSP *rtsp = data->req.p.rtsp;
  247|    127|  struct dynbuf req_buffer;
  248|    127|  curl_off_t postsize = 0; /* for ANNOUNCE and SET_PARAMETER */
  249|    127|  curl_off_t putsize = 0; /* for ANNOUNCE and SET_PARAMETER */
  250|       |
  251|    127|  const char *p_request = NULL;
  252|    127|  const char *p_session_id = NULL;
  253|    127|  const char *p_accept = NULL;
  254|    127|  const char *p_accept_encoding = NULL;
  255|    127|  const char *p_range = NULL;
  256|    127|  const char *p_referrer = NULL;
  257|    127|  const char *p_stream_uri = NULL;
  258|    127|  const char *p_transport = NULL;
  259|    127|  const char *p_uagent = NULL;
  260|    127|  const char *p_proxyuserpwd = NULL;
  261|    127|  const char *p_userpwd = NULL;
  262|       |
  263|    127|  *done = TRUE;
  264|       |
  265|    127|  rtsp->CSeq_sent = data->state.rtsp_next_client_CSeq;
  266|    127|  rtsp->CSeq_recv = 0;
  267|       |
  268|       |  /* Setup the 'p_request' pointer to the proper p_request string
  269|       |   * Since all RTSP requests are included here, there is no need to
  270|       |   * support custom requests like HTTP.
  271|       |   **/
  272|    127|  data->set.opt_no_body = TRUE; /* most requests don't contain a body */
  273|    127|  switch(rtspreq) {
  274|      0|  default:
  275|      0|    failf(data, "Got invalid RTSP request");
  276|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  277|    127|  case RTSPREQ_OPTIONS:
  278|    127|    p_request = "OPTIONS";
  279|    127|    break;
  280|      0|  case RTSPREQ_DESCRIBE:
  281|      0|    p_request = "DESCRIBE";
  282|      0|    data->set.opt_no_body = FALSE;
  283|      0|    break;
  284|      0|  case RTSPREQ_ANNOUNCE:
  285|      0|    p_request = "ANNOUNCE";
  286|      0|    break;
  287|      0|  case RTSPREQ_SETUP:
  288|      0|    p_request = "SETUP";
  289|      0|    break;
  290|      0|  case RTSPREQ_PLAY:
  291|      0|    p_request = "PLAY";
  292|      0|    break;
  293|      0|  case RTSPREQ_PAUSE:
  294|      0|    p_request = "PAUSE";
  295|      0|    break;
  296|      0|  case RTSPREQ_TEARDOWN:
  297|      0|    p_request = "TEARDOWN";
  298|      0|    break;
  299|      0|  case RTSPREQ_GET_PARAMETER:
  300|       |    /* GET_PARAMETER's no_body status is determined later */
  301|      0|    p_request = "GET_PARAMETER";
  302|      0|    data->set.opt_no_body = FALSE;
  303|      0|    break;
  304|      0|  case RTSPREQ_SET_PARAMETER:
  305|      0|    p_request = "SET_PARAMETER";
  306|      0|    break;
  307|      0|  case RTSPREQ_RECORD:
  308|      0|    p_request = "RECORD";
  309|      0|    break;
  310|      0|  case RTSPREQ_RECEIVE:
  311|      0|    p_request = "";
  312|       |    /* Treat interleaved RTP as body*/
  313|      0|    data->set.opt_no_body = FALSE;
  314|      0|    break;
  315|      0|  case RTSPREQ_LAST:
  316|      0|    failf(data, "Got invalid RTSP request: RTSPREQ_LAST");
  317|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  318|    127|  }
  319|       |
  320|    127|  if(rtspreq == RTSPREQ_RECEIVE) {
  321|      0|    Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, -1);
  322|       |
  323|      0|    return result;
  324|      0|  }
  325|       |
  326|    127|  p_session_id = data->set.str[STRING_RTSP_SESSION_ID];
  327|    127|  if(!p_session_id &&
  328|    127|     (rtspreq & ~(RTSPREQ_OPTIONS | RTSPREQ_DESCRIBE | RTSPREQ_SETUP))) {
  329|      0|    failf(data, "Refusing to issue an RTSP request [%s] without a session ID.",
  330|      0|          p_request);
  331|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  332|      0|  }
  333|       |
  334|       |  /* Stream URI. Default to server '*' if not specified */
  335|    127|  if(data->set.str[STRING_RTSP_STREAM_URI]) {
  336|      0|    p_stream_uri = data->set.str[STRING_RTSP_STREAM_URI];
  337|      0|  }
  338|    127|  else {
  339|    127|    p_stream_uri = "*";
  340|    127|  }
  341|       |
  342|       |  /* Transport Header for SETUP requests */
  343|    127|  p_transport = Curl_checkheaders(data, "Transport");
  344|    127|  if(rtspreq == RTSPREQ_SETUP && !p_transport) {
  345|       |    /* New Transport: setting? */
  346|      0|    if(data->set.str[STRING_RTSP_TRANSPORT]) {
  347|      0|      Curl_safefree(data->state.aptr.rtsp_transport);
  348|       |
  349|      0|      data->state.aptr.rtsp_transport =
  350|      0|        aprintf("Transport: %s\r\n",
  351|      0|                data->set.str[STRING_RTSP_TRANSPORT]);
  352|      0|      if(!data->state.aptr.rtsp_transport)
  353|      0|        return CURLE_OUT_OF_MEMORY;
  354|      0|    }
  355|      0|    else {
  356|      0|      failf(data,
  357|      0|            "Refusing to issue an RTSP SETUP without a Transport: header.");
  358|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  359|      0|    }
  360|       |
  361|      0|    p_transport = data->state.aptr.rtsp_transport;
  362|      0|  }
  363|       |
  364|       |  /* Accept Headers for DESCRIBE requests */
  365|    127|  if(rtspreq == RTSPREQ_DESCRIBE) {
  366|       |    /* Accept Header */
  367|      0|    p_accept = Curl_checkheaders(data, "Accept")?
  368|      0|      NULL:"Accept: application/sdp\r\n";
  369|       |
  370|       |    /* Accept-Encoding header */
  371|      0|    if(!Curl_checkheaders(data, "Accept-Encoding") &&
  372|      0|       data->set.str[STRING_ENCODING]) {
  373|      0|      Curl_safefree(data->state.aptr.accept_encoding);
  374|      0|      data->state.aptr.accept_encoding =
  375|      0|        aprintf("Accept-Encoding: %s\r\n", data->set.str[STRING_ENCODING]);
  376|       |
  377|      0|      if(!data->state.aptr.accept_encoding)
  378|      0|        return CURLE_OUT_OF_MEMORY;
  379|       |
  380|      0|      p_accept_encoding = data->state.aptr.accept_encoding;
  381|      0|    }
  382|      0|  }
  383|       |
  384|       |  /* The User-Agent string might have been allocated in url.c already, because
  385|       |     it might have been used in the proxy connect, but if we have got a header
  386|       |     with the user-agent string specified, we erase the previously made string
  387|       |     here. */
  388|    127|  if(Curl_checkheaders(data, "User-Agent") && data->state.aptr.uagent) {
  389|      0|    Curl_safefree(data->state.aptr.uagent);
  390|      0|    data->state.aptr.uagent = NULL;
  391|      0|  }
  392|    127|  else if(!Curl_checkheaders(data, "User-Agent") &&
  393|    127|          data->set.str[STRING_USERAGENT]) {
  394|      0|    p_uagent = data->state.aptr.uagent;
  395|      0|  }
  396|       |
  397|       |  /* setup the authentication headers */
  398|    127|  result = Curl_http_output_auth(data, conn, p_request, HTTPREQ_GET,
  399|    127|                                 p_stream_uri, FALSE);
  400|    127|  if(result)
  401|      0|    return result;
  402|       |
  403|    127|  p_proxyuserpwd = data->state.aptr.proxyuserpwd;
  404|    127|  p_userpwd = data->state.aptr.userpwd;
  405|       |
  406|       |  /* Referrer */
  407|    127|  Curl_safefree(data->state.aptr.ref);
  408|    127|  if(data->state.referer && !Curl_checkheaders(data, "Referer"))
  409|      0|    data->state.aptr.ref = aprintf("Referer: %s\r\n", data->state.referer);
  410|    127|  else
  411|    127|    data->state.aptr.ref = NULL;
  412|       |
  413|    127|  p_referrer = data->state.aptr.ref;
  414|       |
  415|       |  /*
  416|       |   * Range Header
  417|       |   * Only applies to PLAY, PAUSE, RECORD
  418|       |   *
  419|       |   * Go ahead and use the Range stuff supplied for HTTP
  420|       |   */
  421|    127|  if(data->state.use_range &&
  422|    127|     (rtspreq  & (RTSPREQ_PLAY | RTSPREQ_PAUSE | RTSPREQ_RECORD))) {
  423|       |
  424|       |    /* Check to see if there is a range set in the custom headers */
  425|      0|    if(!Curl_checkheaders(data, "Range") && data->state.range) {
  426|      0|      Curl_safefree(data->state.aptr.rangeline);
  427|      0|      data->state.aptr.rangeline = aprintf("Range: %s\r\n", data->state.range);
  428|      0|      p_range = data->state.aptr.rangeline;
  429|      0|    }
  430|      0|  }
  431|       |
  432|       |  /*
  433|       |   * Sanity check the custom headers
  434|       |   */
  435|    127|  if(Curl_checkheaders(data, "CSeq")) {
  436|      0|    failf(data, "CSeq cannot be set as a custom header.");
  437|      0|    return CURLE_RTSP_CSEQ_ERROR;
  438|      0|  }
  439|    127|  if(Curl_checkheaders(data, "Session")) {
  440|      0|    failf(data, "Session ID cannot be set as a custom header.");
  441|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
  442|      0|  }
  443|       |
  444|       |  /* Initialize a dynamic send buffer */
  445|    127|  Curl_dyn_init(&req_buffer, DYN_RTSP_REQ_HEADER);
  446|       |
  447|    127|  result =
  448|    127|    Curl_dyn_addf(&req_buffer,
  449|    127|                  "%s %s RTSP/1.0\r\n" /* Request Stream-URI RTSP/1.0 */
  450|    127|                  "CSeq: %ld\r\n", /* CSeq */
  451|    127|                  p_request, p_stream_uri, rtsp->CSeq_sent);
  452|    127|  if(result)
  453|      0|    return result;
  454|       |
  455|       |  /*
  456|       |   * Rather than do a normal alloc line, keep the session_id unformatted
  457|       |   * to make comparison easier
  458|       |   */
  459|    127|  if(p_session_id) {
  460|      0|    result = Curl_dyn_addf(&req_buffer, "Session: %s\r\n", p_session_id);
  461|      0|    if(result)
  462|      0|      return result;
  463|      0|  }
  464|       |
  465|       |  /*
  466|       |   * Shared HTTP-like options
  467|       |   */
  468|    127|  result = Curl_dyn_addf(&req_buffer,
  469|    127|                         "%s" /* transport */
  470|    127|                         "%s" /* accept */
  471|    127|                         "%s" /* accept-encoding */
  472|    127|                         "%s" /* range */
  473|    127|                         "%s" /* referrer */
  474|    127|                         "%s" /* user-agent */
  475|    127|                         "%s" /* proxyuserpwd */
  476|    127|                         "%s" /* userpwd */
  477|    127|                         ,
  478|    127|                         p_transport ? p_transport : "",
  479|    127|                         p_accept ? p_accept : "",
  480|    127|                         p_accept_encoding ? p_accept_encoding : "",
  481|    127|                         p_range ? p_range : "",
  482|    127|                         p_referrer ? p_referrer : "",
  483|    127|                         p_uagent ? p_uagent : "",
  484|    127|                         p_proxyuserpwd ? p_proxyuserpwd : "",
  485|    127|                         p_userpwd ? p_userpwd : "");
  486|       |
  487|       |  /*
  488|       |   * Free userpwd now --- cannot reuse this for Negotiate and possibly NTLM
  489|       |   * with basic and digest, it will be freed anyway by the next request
  490|       |   */
  491|    127|  Curl_safefree(data->state.aptr.userpwd);
  492|    127|  data->state.aptr.userpwd = NULL;
  493|       |
  494|    127|  if(result)
  495|      0|    return result;
  496|       |
  497|    127|  if((rtspreq == RTSPREQ_SETUP) || (rtspreq == RTSPREQ_DESCRIBE)) {
  498|      0|    result = Curl_add_timecondition(data, &req_buffer);
  499|      0|    if(result)
  500|      0|      return result;
  501|      0|  }
  502|       |
  503|    127|  result = Curl_add_custom_headers(data, FALSE, &req_buffer);
  504|    127|  if(result)
  505|      0|    return result;
  506|       |
  507|    127|  if(rtspreq == RTSPREQ_ANNOUNCE ||
  508|    127|     rtspreq == RTSPREQ_SET_PARAMETER ||
  509|    127|     rtspreq == RTSPREQ_GET_PARAMETER) {
  510|       |
  511|      0|    if(data->set.upload) {
  512|      0|      putsize = data->state.infilesize;
  513|      0|      data->state.httpreq = HTTPREQ_PUT;
  514|       |
  515|      0|    }
  516|      0|    else {
  517|      0|      postsize = (data->state.infilesize != -1)?
  518|      0|        data->state.infilesize:
  519|      0|        (data->set.postfields? (curl_off_t)strlen(data->set.postfields):0);
  520|      0|      data->state.httpreq = HTTPREQ_POST;
  521|      0|    }
  522|       |
  523|      0|    if(putsize > 0 || postsize > 0) {
  524|       |      /* As stated in the http comments, it is probably not wise to
  525|       |       * actually set a custom Content-Length in the headers */
  526|      0|      if(!Curl_checkheaders(data, "Content-Length")) {
  527|      0|        result =
  528|      0|          Curl_dyn_addf(&req_buffer,
  529|      0|                        "Content-Length: %" CURL_FORMAT_CURL_OFF_T"\r\n",
  530|      0|                        (data->set.upload ? putsize : postsize));
  531|      0|        if(result)
  532|      0|          return result;
  533|      0|      }
  534|       |
  535|      0|      if(rtspreq == RTSPREQ_SET_PARAMETER ||
  536|      0|         rtspreq == RTSPREQ_GET_PARAMETER) {
  537|      0|        if(!Curl_checkheaders(data, "Content-Type")) {
  538|      0|          result = Curl_dyn_addf(&req_buffer,
  539|      0|                                 "Content-Type: text/parameters\r\n");
  540|      0|          if(result)
  541|      0|            return result;
  542|      0|        }
  543|      0|      }
  544|       |
  545|      0|      if(rtspreq == RTSPREQ_ANNOUNCE) {
  546|      0|        if(!Curl_checkheaders(data, "Content-Type")) {
  547|      0|          result = Curl_dyn_addf(&req_buffer,
  548|      0|                                 "Content-Type: application/sdp\r\n");
  549|      0|          if(result)
  550|      0|            return result;
  551|      0|        }
  552|      0|      }
  553|       |
  554|      0|      data->state.expect100header = FALSE; /* RTSP posts are simple/small */
  555|      0|    }
  556|      0|    else if(rtspreq == RTSPREQ_GET_PARAMETER) {
  557|       |      /* Check for an empty GET_PARAMETER (heartbeat) request */
  558|      0|      data->state.httpreq = HTTPREQ_HEAD;
  559|      0|      data->set.opt_no_body = TRUE;
  560|      0|    }
  561|      0|  }
  562|       |
  563|       |  /* RTSP never allows chunked transfer */
  564|    127|  data->req.forbidchunk = TRUE;
  565|       |  /* Finish the request buffer */
  566|    127|  result = Curl_dyn_add(&req_buffer, "\r\n");
  567|    127|  if(result)
  568|      0|    return result;
  569|       |
  570|    127|  if(postsize > 0) {
  571|      0|    result = Curl_dyn_addn(&req_buffer, data->set.postfields,
  572|      0|                           (size_t)postsize);
  573|      0|    if(result)
  574|      0|      return result;
  575|      0|  }
  576|       |
  577|       |  /* issue the request */
  578|    127|  result = Curl_buffer_send(&req_buffer, data,
  579|    127|                            &data->info.request_size, 0, FIRSTSOCKET);
  580|    127|  if(result) {
  581|      0|    failf(data, "Failed sending RTSP request");
  582|      0|    return result;
  583|      0|  }
  584|       |
  585|    127|  Curl_setup_transfer(data, FIRSTSOCKET, -1, TRUE, putsize?FIRSTSOCKET:-1);
  586|       |
  587|       |  /* Increment the CSeq on success */
  588|    127|  data->state.rtsp_next_client_CSeq++;
  589|       |
  590|    127|  if(data->req.writebytecount) {
  591|       |    /* if a request-body has been sent off, we make sure this progress is
  592|       |       noted properly */
  593|      0|    Curl_pgrsSetUploadCounter(data, data->req.writebytecount);
  594|      0|    if(Curl_pgrsUpdate(data))
  595|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  596|      0|  }
  597|       |
  598|    127|  return result;
  599|    127|}
rtsp.c:rtsp_rtp_readwrite:
  605|  4.73M|                                   bool *readmore) {
  606|  4.73M|  struct SingleRequest *k = &data->req;
  607|  4.73M|  struct rtsp_conn *rtspc = &(conn->proto.rtspc);
  608|       |
  609|  4.73M|  char *rtp; /* moving pointer to rtp data */
  610|  4.73M|  ssize_t rtp_dataleft; /* how much data left to parse in this round */
  611|  4.73M|  char *scratch;
  612|  4.73M|  CURLcode result;
  613|       |
  614|  4.73M|  if(rtspc->rtp_buf) {
  615|       |    /* There was some leftover data the last time. Merge buffers */
  616|  4.73M|    char *newptr = Curl_saferealloc(rtspc->rtp_buf,
  617|  4.73M|                                    rtspc->rtp_bufsize + *nread);
  618|  4.73M|    if(!newptr) {
  619|      0|      rtspc->rtp_buf = NULL;
  620|      0|      rtspc->rtp_bufsize = 0;
  621|      0|      return CURLE_OUT_OF_MEMORY;
  622|      0|    }
  623|  4.73M|    rtspc->rtp_buf = newptr;
  624|  4.73M|    memcpy(rtspc->rtp_buf + rtspc->rtp_bufsize, k->str, *nread);
  625|  4.73M|    rtspc->rtp_bufsize += *nread;
  626|  4.73M|    rtp = rtspc->rtp_buf;
  627|  4.73M|    rtp_dataleft = rtspc->rtp_bufsize;
  628|  4.73M|  }
  629|    211|  else {
  630|       |    /* Just parse the request buffer directly */
  631|    211|    rtp = k->str;
  632|    211|    rtp_dataleft = *nread;
  633|    211|  }
  634|       |
  635|  4.73M|  while((rtp_dataleft > 0) &&
  636|  4.73M|        (rtp[0] == '$')) {
  637|  4.73M|    if(rtp_dataleft > 4) {
  638|  3.75M|      int rtp_length;
  639|       |
  640|       |      /* Parse the header */
  641|       |      /* The channel identifier immediately follows and is 1 byte */
  642|  3.75M|      rtspc->rtp_channel = RTP_PKT_CHANNEL(rtp);
  643|       |
  644|       |      /* The length is two bytes */
  645|  3.75M|      rtp_length = RTP_PKT_LENGTH(rtp);
  646|       |
  647|  3.75M|      if(rtp_dataleft < rtp_length + 4) {
  648|       |        /* Need more - incomplete payload*/
  649|  3.75M|        *readmore = TRUE;
  650|  3.75M|        break;
  651|  3.75M|      }
  652|       |      /* We have the full RTP interleaved packet
  653|       |       * Write out the header including the leading '$' */
  654|     19|      DEBUGF(infof(data, "RTP write channel %d rtp_length %d",
  655|     19|             rtspc->rtp_channel, rtp_length));
  656|     19|      result = rtp_client_write(data, &rtp[0], rtp_length + 4);
  657|     19|      if(result) {
  658|      0|        failf(data, "Got an error writing an RTP packet");
  659|      0|        *readmore = FALSE;
  660|      0|        Curl_safefree(rtspc->rtp_buf);
  661|      0|        rtspc->rtp_buf = NULL;
  662|      0|        rtspc->rtp_bufsize = 0;
  663|      0|        return result;
  664|      0|      }
  665|       |
  666|       |      /* Move forward in the buffer */
  667|     19|      rtp_dataleft -= rtp_length + 4;
  668|     19|      rtp += rtp_length + 4;
  669|       |
  670|     19|      if(data->set.rtspreq == RTSPREQ_RECEIVE) {
  671|       |        /* If we are in a passive receive, give control back
  672|       |         * to the app as often as we can.
  673|       |         */
  674|      0|        k->keepon &= ~KEEP_RECV;
  675|      0|      }
  676|     19|    }
  677|   983k|    else {
  678|       |      /* Need more - incomplete header */
  679|   983k|      *readmore = TRUE;
  680|   983k|      break;
  681|   983k|    }
  682|  4.73M|  }
  683|       |
  684|  4.73M|  if(rtp_dataleft && rtp[0] == '$') {
  685|  4.73M|    DEBUGF(infof(data, "RTP Rewinding %zd %s", rtp_dataleft,
  686|  4.73M|          *readmore ? "(READMORE)" : ""));
  687|       |
  688|       |    /* Store the incomplete RTP packet for a "rewind" */
  689|  4.73M|    scratch = malloc(rtp_dataleft);
  690|  4.73M|    if(!scratch) {
  691|      0|      Curl_safefree(rtspc->rtp_buf);
  692|      0|      rtspc->rtp_buf = NULL;
  693|      0|      rtspc->rtp_bufsize = 0;
  694|      0|      return CURLE_OUT_OF_MEMORY;
  695|      0|    }
  696|  4.73M|    memcpy(scratch, rtp, rtp_dataleft);
  697|  4.73M|    Curl_safefree(rtspc->rtp_buf);
  698|  4.73M|    rtspc->rtp_buf = scratch;
  699|  4.73M|    rtspc->rtp_bufsize = rtp_dataleft;
  700|       |
  701|       |    /* As far as the transfer is concerned, this data is consumed */
  702|  4.73M|    *nread = 0;
  703|  4.73M|    return CURLE_OK;
  704|  4.73M|  }
  705|       |  /* Fix up k->str to point just after the last RTP packet */
  706|    106|  k->str += *nread - rtp_dataleft;
  707|       |
  708|       |  /* either all of the data has been read or...
  709|       |   * rtp now points at the next byte to parse
  710|       |   */
  711|    106|  if(rtp_dataleft > 0)
  712|    106|    DEBUGASSERT(k->str[0] == rtp[0]);
  713|       |
  714|    106|  DEBUGASSERT(rtp_dataleft <= *nread); /* sanity check */
  715|       |
  716|    106|  *nread = rtp_dataleft;
  717|       |
  718|       |  /* If we get here, we have finished with the leftover/merge buffer */
  719|    106|  Curl_safefree(rtspc->rtp_buf);
  720|    106|  rtspc->rtp_buf = NULL;
  721|    106|  rtspc->rtp_bufsize = 0;
  722|       |
  723|    106|  return CURLE_OK;
  724|    106|}
rtsp.c:rtp_client_write:
  728|     19|{
  729|     19|  size_t wrote;
  730|     19|  curl_write_callback writeit;
  731|     19|  void *user_ptr;
  732|       |
  733|     19|  if(len == 0) {
  734|      0|    failf(data, "Cannot write a 0 size RTP packet.");
  735|      0|    return CURLE_WRITE_ERROR;
  736|      0|  }
  737|       |
  738|       |  /* If the user has configured CURLOPT_INTERLEAVEFUNCTION then use that
  739|       |     function and any configured CURLOPT_INTERLEAVEDATA to write out the RTP
  740|       |     data. Otherwise, use the CURLOPT_WRITEFUNCTION with the CURLOPT_WRITEDATA
  741|       |     pointer to write out the RTP data. */
  742|     19|  if(data->set.fwrite_rtp) {
  743|      0|    writeit = data->set.fwrite_rtp;
  744|      0|    user_ptr = data->set.rtp_out;
  745|      0|  }
  746|     19|  else {
  747|     19|    writeit = data->set.fwrite_func;
  748|     19|    user_ptr = data->set.out;
  749|     19|  }
  750|       |
  751|     19|  Curl_set_in_callback(data, true);
  752|     19|  wrote = writeit(ptr, 1, len, user_ptr);
  753|     19|  Curl_set_in_callback(data, false);
  754|       |
  755|     19|  if(CURL_WRITEFUNC_PAUSE == wrote) {
  756|      0|    failf(data, "Cannot pause RTP");
  757|      0|    return CURLE_WRITE_ERROR;
  758|      0|  }
  759|       |
  760|     19|  if(wrote != len) {
  761|      0|    failf(data, "Failed writing RTP data");
  762|      0|    return CURLE_WRITE_ERROR;
  763|      0|  }
  764|       |
  765|     19|  return CURLE_OK;
  766|     19|}

Curl_wait_ms:
   75|     45|{
   76|     45|  int r = 0;
   77|       |
   78|     45|  if(!timeout_ms)
   79|     45|    return 0;
   80|      0|  if(timeout_ms < 0) {
   81|      0|    SET_SOCKERRNO(EINVAL);
   82|      0|    return -1;
   83|      0|  }
   84|       |#if defined(MSDOS)
   85|       |  delay(timeout_ms);
   86|       |#elif defined(WIN32)
   87|       |  /* prevent overflow, timeout_ms is typecast to ULONG/DWORD. */
   88|       |#if TIMEDIFF_T_MAX >= ULONG_MAX
   89|       |  if(timeout_ms >= ULONG_MAX)
   90|       |    timeout_ms = ULONG_MAX-1;
   91|       |    /* don't use ULONG_MAX, because that is equal to INFINITE */
   92|       |#endif
   93|       |  Sleep((ULONG)timeout_ms);
   94|       |#else
   95|      0|#if defined(HAVE_POLL_FINE)
   96|       |  /* prevent overflow, timeout_ms is typecast to int. */
   97|      0|#if TIMEDIFF_T_MAX > INT_MAX
   98|      0|  if(timeout_ms > INT_MAX)
   99|      0|    timeout_ms = INT_MAX;
  100|      0|#endif
  101|      0|  r = poll(NULL, 0, (int)timeout_ms);
  102|       |#else
  103|       |  {
  104|       |    struct timeval pending_tv;
  105|       |    timediff_t tv_sec = timeout_ms / 1000;
  106|       |    timediff_t tv_usec = (timeout_ms % 1000) * 1000; /* max=999999 */
  107|       |#ifdef HAVE_SUSECONDS_T
  108|       |#if TIMEDIFF_T_MAX > TIME_T_MAX
  109|       |    /* tv_sec overflow check in case time_t is signed */
  110|       |    if(tv_sec > TIME_T_MAX)
  111|       |      tv_sec = TIME_T_MAX;
  112|       |#endif
  113|       |    pending_tv.tv_sec = (time_t)tv_sec;
  114|       |    pending_tv.tv_usec = (suseconds_t)tv_usec;
  115|       |#else
  116|       |#if TIMEDIFF_T_MAX > INT_MAX
  117|       |    /* tv_sec overflow check in case time_t is signed */
  118|       |    if(tv_sec > INT_MAX)
  119|       |      tv_sec = INT_MAX;
  120|       |#endif
  121|       |    pending_tv.tv_sec = (int)tv_sec;
  122|       |    pending_tv.tv_usec = (int)tv_usec;
  123|       |#endif
  124|       |    r = select(0, NULL, NULL, NULL, &pending_tv);
  125|       |  }
  126|       |#endif /* HAVE_POLL_FINE */
  127|      0|#endif /* USE_WINSOCK */
  128|      0|  if(r)
  129|      0|    r = -1;
  130|      0|  return r;
  131|      0|}
Curl_socket_check:
  250|  4.74M|{
  251|  4.74M|  struct pollfd pfd[3];
  252|  4.74M|  int num;
  253|  4.74M|  int r;
  254|       |
  255|  4.74M|  if((readfd0 == CURL_SOCKET_BAD) && (readfd1 == CURL_SOCKET_BAD) &&
  256|  4.74M|     (writefd == CURL_SOCKET_BAD)) {
  257|       |    /* no sockets, just wait */
  258|     45|    return Curl_wait_ms(timeout_ms);
  259|     45|  }
  260|       |
  261|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  262|       |     time in this function does not need to be measured. This happens
  263|       |     when function is called with a zero timeout or a negative timeout
  264|       |     value indicating a blocking call should be performed. */
  265|       |
  266|  4.74M|  num = 0;
  267|  4.74M|  if(readfd0 != CURL_SOCKET_BAD) {
  268|  4.73M|    pfd[num].fd = readfd0;
  269|  4.73M|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  270|  4.73M|    pfd[num].revents = 0;
  271|  4.73M|    num++;
  272|  4.73M|  }
  273|  4.74M|  if(readfd1 != CURL_SOCKET_BAD) {
  274|      0|    pfd[num].fd = readfd1;
  275|      0|    pfd[num].events = POLLRDNORM|POLLIN|POLLRDBAND|POLLPRI;
  276|      0|    pfd[num].revents = 0;
  277|      0|    num++;
  278|      0|  }
  279|  4.74M|  if(writefd != CURL_SOCKET_BAD) {
  280|  3.00k|    pfd[num].fd = writefd;
  281|  3.00k|    pfd[num].events = POLLWRNORM|POLLOUT|POLLPRI;
  282|  3.00k|    pfd[num].revents = 0;
  283|  3.00k|    num++;
  284|  3.00k|  }
  285|       |
  286|  4.74M|  r = Curl_poll(pfd, num, timeout_ms);
  287|  4.74M|  if(r <= 0)
  288|    302|    return r;
  289|       |
  290|  4.74M|  r = 0;
  291|  4.74M|  num = 0;
  292|  4.74M|  if(readfd0 != CURL_SOCKET_BAD) {
  293|  4.73M|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  294|  4.73M|      r |= CURL_CSELECT_IN;
  295|  4.73M|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  296|      0|      r |= CURL_CSELECT_ERR;
  297|  4.73M|    num++;
  298|  4.73M|  }
  299|  4.74M|  if(readfd1 != CURL_SOCKET_BAD) {
  300|      0|    if(pfd[num].revents & (POLLRDNORM|POLLIN|POLLERR|POLLHUP))
  301|      0|      r |= CURL_CSELECT_IN2;
  302|      0|    if(pfd[num].revents & (POLLRDBAND|POLLPRI|POLLNVAL))
  303|      0|      r |= CURL_CSELECT_ERR;
  304|      0|    num++;
  305|      0|  }
  306|  4.74M|  if(writefd != CURL_SOCKET_BAD) {
  307|  3.00k|    if(pfd[num].revents & (POLLWRNORM|POLLOUT))
  308|  3.00k|      r |= CURL_CSELECT_OUT;
  309|  3.00k|    if(pfd[num].revents & (POLLERR|POLLHUP|POLLPRI|POLLNVAL))
  310|      0|      r |= CURL_CSELECT_ERR;
  311|  3.00k|  }
  312|       |
  313|  4.74M|  return r;
  314|  4.74M|}
Curl_poll:
  330|  4.74M|{
  331|  4.74M|#ifdef HAVE_POLL_FINE
  332|  4.74M|  int pending_ms;
  333|       |#else
  334|       |  fd_set fds_read;
  335|       |  fd_set fds_write;
  336|       |  fd_set fds_err;
  337|       |  curl_socket_t maxfd;
  338|       |#endif
  339|  4.74M|  bool fds_none = TRUE;
  340|  4.74M|  unsigned int i;
  341|  4.74M|  int r;
  342|       |
  343|  4.74M|  if(ufds) {
  344|  4.74M|    for(i = 0; i < nfds; i++) {
  345|  4.74M|      if(ufds[i].fd != CURL_SOCKET_BAD) {
  346|  4.74M|        fds_none = FALSE;
  347|  4.74M|        break;
  348|  4.74M|      }
  349|  4.74M|    }
  350|  4.74M|  }
  351|  4.74M|  if(fds_none) {
  352|       |    /* no sockets, just wait */
  353|      0|    return Curl_wait_ms(timeout_ms);
  354|      0|  }
  355|       |
  356|       |  /* Avoid initial timestamp, avoid Curl_now() call, when elapsed
  357|       |     time in this function does not need to be measured. This happens
  358|       |     when function is called with a zero timeout or a negative timeout
  359|       |     value indicating a blocking call should be performed. */
  360|       |
  361|  4.74M|#ifdef HAVE_POLL_FINE
  362|       |
  363|       |  /* prevent overflow, timeout_ms is typecast to int. */
  364|  4.74M|#if TIMEDIFF_T_MAX > INT_MAX
  365|  4.74M|  if(timeout_ms > INT_MAX)
  366|      0|    timeout_ms = INT_MAX;
  367|  4.74M|#endif
  368|  4.74M|  if(timeout_ms > 0)
  369|    560|    pending_ms = (int)timeout_ms;
  370|  4.74M|  else if(timeout_ms < 0)
  371|      0|    pending_ms = -1;
  372|  4.74M|  else
  373|  4.74M|    pending_ms = 0;
  374|  4.74M|  r = poll(ufds, nfds, pending_ms);
  375|  4.74M|  if(r <= 0)
  376|    302|    return r;
  377|       |
  378|  9.48M|  for(i = 0; i < nfds; i++) {
  379|  4.74M|    if(ufds[i].fd == CURL_SOCKET_BAD)
  380|      0|      continue;
  381|  4.74M|    if(ufds[i].revents & POLLHUP)
  382|      0|      ufds[i].revents |= POLLIN;
  383|  4.74M|    if(ufds[i].revents & POLLERR)
  384|      0|      ufds[i].revents |= POLLIN|POLLOUT;
  385|  4.74M|  }
  386|       |
  387|       |#else  /* HAVE_POLL_FINE */
  388|       |
  389|       |  FD_ZERO(&fds_read);
  390|       |  FD_ZERO(&fds_write);
  391|       |  FD_ZERO(&fds_err);
  392|       |  maxfd = (curl_socket_t)-1;
  393|       |
  394|       |  for(i = 0; i < nfds; i++) {
  395|       |    ufds[i].revents = 0;
  396|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  397|       |      continue;
  398|       |    VERIFY_SOCK(ufds[i].fd);
  399|       |    if(ufds[i].events & (POLLIN|POLLOUT|POLLPRI|
  400|       |                         POLLRDNORM|POLLWRNORM|POLLRDBAND)) {
  401|       |      if(ufds[i].fd > maxfd)
  402|       |        maxfd = ufds[i].fd;
  403|       |      if(ufds[i].events & (POLLRDNORM|POLLIN))
  404|       |        FD_SET(ufds[i].fd, &fds_read);
  405|       |      if(ufds[i].events & (POLLWRNORM|POLLOUT))
  406|       |        FD_SET(ufds[i].fd, &fds_write);
  407|       |      if(ufds[i].events & (POLLRDBAND|POLLPRI))
  408|       |        FD_SET(ufds[i].fd, &fds_err);
  409|       |    }
  410|       |  }
  411|       |
  412|       |  /*
  413|       |     Note also that WinSock ignores the first argument, so we don't worry
  414|       |     about the fact that maxfd is computed incorrectly with WinSock (since
  415|       |     curl_socket_t is unsigned in such cases and thus -1 is the largest
  416|       |     value).
  417|       |  */
  418|       |  r = our_select(maxfd, &fds_read, &fds_write, &fds_err, timeout_ms);
  419|       |  if(r <= 0)
  420|       |    return r;
  421|       |
  422|       |  r = 0;
  423|       |  for(i = 0; i < nfds; i++) {
  424|       |    ufds[i].revents = 0;
  425|       |    if(ufds[i].fd == CURL_SOCKET_BAD)
  426|       |      continue;
  427|       |    if(FD_ISSET(ufds[i].fd, &fds_read)) {
  428|       |      if(ufds[i].events & POLLRDNORM)
  429|       |        ufds[i].revents |= POLLRDNORM;
  430|       |      if(ufds[i].events & POLLIN)
  431|       |        ufds[i].revents |= POLLIN;
  432|       |    }
  433|       |    if(FD_ISSET(ufds[i].fd, &fds_write)) {
  434|       |      if(ufds[i].events & POLLWRNORM)
  435|       |        ufds[i].revents |= POLLWRNORM;
  436|       |      if(ufds[i].events & POLLOUT)
  437|       |        ufds[i].revents |= POLLOUT;
  438|       |    }
  439|       |    if(FD_ISSET(ufds[i].fd, &fds_err)) {
  440|       |      if(ufds[i].events & POLLRDBAND)
  441|       |        ufds[i].revents |= POLLRDBAND;
  442|       |      if(ufds[i].events & POLLPRI)
  443|       |        ufds[i].revents |= POLLPRI;
  444|       |    }
  445|       |    if(ufds[i].revents)
  446|       |      r++;
  447|       |  }
  448|       |
  449|       |#endif  /* HAVE_POLL_FINE */
  450|       |
  451|  4.74M|  return r;
  452|  4.74M|}

Curl_infof:
  242|  4.80M|{
  243|  4.80M|  DEBUGASSERT(!strchr(fmt, '\n'));
  244|  4.80M|  if(data && data->set.verbose) {
  245|      0|    va_list ap;
  246|      0|    size_t len;
  247|      0|    char buffer[MAXINFO + 2];
  248|      0|    va_start(ap, fmt);
  249|      0|    len = mvsnprintf(buffer, MAXINFO, fmt, ap);
  250|      0|    va_end(ap);
  251|      0|    buffer[len++] = '\n';
  252|      0|    buffer[len] = '\0';
  253|      0|    Curl_debug(data, CURLINFO_TEXT, buffer, len);
  254|      0|  }
  255|  4.80M|}
Curl_failf:
  262|  2.97k|{
  263|  2.97k|  DEBUGASSERT(!strchr(fmt, '\n'));
  264|  2.97k|  if(data->set.verbose || data->set.errorbuffer) {
  265|      0|    va_list ap;
  266|      0|    size_t len;
  267|      0|    char error[CURL_ERROR_SIZE + 2];
  268|      0|    va_start(ap, fmt);
  269|      0|    len = mvsnprintf(error, CURL_ERROR_SIZE, fmt, ap);
  270|       |
  271|      0|    if(data->set.errorbuffer && !data->state.errorbuf) {
  272|      0|      strcpy(data->set.errorbuffer, error);
  273|      0|      data->state.errorbuf = TRUE; /* wrote error string */
  274|      0|    }
  275|      0|    error[len++] = '\n';
  276|      0|    error[len] = '\0';
  277|      0|    Curl_debug(data, CURLINFO_TEXT, error, len);
  278|      0|    va_end(ap);
  279|      0|  }
  280|  2.97k|}
Curl_write:
  294|  5.45k|{
  295|  5.45k|  ssize_t bytes_written;
  296|  5.45k|  CURLcode result = CURLE_OK;
  297|  5.45k|  struct connectdata *conn;
  298|  5.45k|  int num;
  299|  5.45k|  DEBUGASSERT(data);
  300|  5.45k|  DEBUGASSERT(data->conn);
  301|  5.45k|  conn = data->conn;
  302|  5.45k|  num = (sockfd == conn->sock[SECONDARYSOCKET]);
  303|       |
  304|  5.45k|#ifdef CURLDEBUG
  305|  5.45k|  {
  306|       |    /* Allow debug builds to override this logic to force short sends
  307|       |    */
  308|  5.45k|    char *p = getenv("CURL_SMALLSENDS");
  309|  5.45k|    if(p) {
  310|      0|      size_t altsize = (size_t)strtoul(p, NULL, 10);
  311|      0|      if(altsize)
  312|      0|        len = CURLMIN(len, altsize);
  313|      0|    }
  314|  5.45k|  }
  315|  5.45k|#endif
  316|  5.45k|  bytes_written = conn->send[num](data, num, mem, len, &result);
  317|       |
  318|  5.45k|  *written = bytes_written;
  319|  5.45k|  if(bytes_written >= 0)
  320|       |    /* we completely ignore the curlcode value when subzero is not returned */
  321|  5.45k|    return CURLE_OK;
  322|       |
  323|       |  /* handle CURLE_AGAIN or a send failure */
  324|      1|  switch(result) {
  325|      0|  case CURLE_AGAIN:
  326|      0|    *written = 0;
  327|      0|    return CURLE_OK;
  328|       |
  329|      0|  case CURLE_OK:
  330|       |    /* general send failure */
  331|      0|    return CURLE_SEND_ERROR;
  332|       |
  333|      1|  default:
  334|       |    /* we got a specific curlcode, forward it */
  335|      1|    return result;
  336|      1|  }
  337|      1|}
Curl_send_plain:
  341|  5.45k|{
  342|  5.45k|  struct connectdata *conn;
  343|  5.45k|  curl_socket_t sockfd;
  344|  5.45k|  ssize_t bytes_written;
  345|       |
  346|  5.45k|  DEBUGASSERT(data);
  347|  5.45k|  DEBUGASSERT(data->conn);
  348|  5.45k|  conn = data->conn;
  349|  5.45k|  sockfd = conn->sock[num];
  350|       |  /* WinSock will destroy unread received data if send() is
  351|       |     failed.
  352|       |     To avoid lossage of received data, recv() must be
  353|       |     performed before every send() if any incoming data is
  354|       |     available. */
  355|  5.45k|  if(pre_receive_plain(data, conn, num)) {
  356|      0|    *code = CURLE_OUT_OF_MEMORY;
  357|      0|    return -1;
  358|      0|  }
  359|       |
  360|       |#if defined(MSG_FASTOPEN) && !defined(TCP_FASTOPEN_CONNECT) /* Linux */
  361|       |  if(conn->bits.tcp_fastopen) {
  362|       |    bytes_written = sendto(sockfd, mem, len, MSG_FASTOPEN,
  363|       |                           conn->ip_addr->ai_addr, conn->ip_addr->ai_addrlen);
  364|       |    conn->bits.tcp_fastopen = FALSE;
  365|       |  }
  366|       |  else
  367|       |#endif
  368|  5.45k|    bytes_written = swrite(sockfd, mem, len);
  369|       |
  370|  5.45k|  *code = CURLE_OK;
  371|  5.45k|  if(-1 == bytes_written) {
  372|      1|    int err = SOCKERRNO;
  373|       |
  374|      1|    if(
  375|       |#ifdef WSAEWOULDBLOCK
  376|       |      /* This is how Windows does it */
  377|       |      (WSAEWOULDBLOCK == err)
  378|       |#else
  379|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  380|       |         due to its inability to send off data without blocking. We therefore
  381|       |         treat both error codes the same here */
  382|      1|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err) ||
  383|      1|      (EINPROGRESS == err)
  384|      1|#endif
  385|      1|      ) {
  386|       |      /* this is just a case of EWOULDBLOCK */
  387|      0|      bytes_written = 0;
  388|      0|      *code = CURLE_AGAIN;
  389|      0|    }
  390|      1|    else {
  391|      1|      char buffer[STRERROR_LEN];
  392|      1|      failf(data, "Send failure: %s",
  393|      1|            Curl_strerror(err, buffer, sizeof(buffer)));
  394|      1|      data->state.os_errno = err;
  395|      1|      *code = CURLE_SEND_ERROR;
  396|      1|    }
  397|      1|  }
  398|  5.45k|  return bytes_written;
  399|  5.45k|}
Curl_recv_plain:
  425|  4.74M|{
  426|  4.74M|  struct connectdata *conn;
  427|  4.74M|  curl_socket_t sockfd;
  428|  4.74M|  ssize_t nread;
  429|  4.74M|  DEBUGASSERT(data);
  430|  4.74M|  DEBUGASSERT(data->conn);
  431|  4.74M|  conn = data->conn;
  432|  4.74M|  sockfd = conn->sock[num];
  433|       |  /* Check and return data that already received and storied in internal
  434|       |     intermediate buffer */
  435|  4.74M|  nread = get_pre_recved(conn, num, buf, len);
  436|  4.74M|  if(nread > 0) {
  437|      0|    *code = CURLE_OK;
  438|      0|    return nread;
  439|      0|  }
  440|       |
  441|  4.74M|  nread = sread(sockfd, buf, len);
  442|       |
  443|  4.74M|  *code = CURLE_OK;
  444|  4.74M|  if(-1 == nread) {
  445|     64|    int err = SOCKERRNO;
  446|       |
  447|     64|    if(
  448|       |#ifdef WSAEWOULDBLOCK
  449|       |      /* This is how Windows does it */
  450|       |      (WSAEWOULDBLOCK == err)
  451|       |#else
  452|       |      /* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
  453|       |         due to its inability to send off data without blocking. We therefore
  454|       |         treat both error codes the same here */
  455|     64|      (EWOULDBLOCK == err) || (EAGAIN == err) || (EINTR == err)
  456|     64|#endif
  457|     64|      ) {
  458|       |      /* this is just a case of EWOULDBLOCK */
  459|     64|      *code = CURLE_AGAIN;
  460|     64|    }
  461|      0|    else {
  462|      0|      char buffer[STRERROR_LEN];
  463|      0|      failf(data, "Recv failure: %s",
  464|      0|            Curl_strerror(err, buffer, sizeof(buffer)));
  465|      0|      data->state.os_errno = err;
  466|      0|      *code = CURLE_RECV_ERROR;
  467|      0|    }
  468|     64|  }
  469|  4.74M|  return nread;
  470|  4.74M|}
Curl_client_write:
  621|  72.2k|{
  622|  72.2k|  struct connectdata *conn = data->conn;
  623|       |
  624|  72.2k|  DEBUGASSERT(!(type & ~CLIENTWRITE_BOTH));
  625|       |
  626|  72.2k|  if(!len)
  627|      0|    return CURLE_OK;
  628|       |
  629|       |  /* FTP data may need conversion. */
  630|  72.2k|  if((type & CLIENTWRITE_BODY) &&
  631|  72.2k|    (conn->handler->protocol & PROTO_FAMILY_FTP) &&
  632|  72.2k|    conn->proto.ftpc.transfertype == 'A') {
  633|       |    /* convert from the network encoding */
  634|      1|    CURLcode result = Curl_convert_from_network(data, ptr, len);
  635|       |    /* Curl_convert_from_network calls failf if unsuccessful */
  636|      1|    if(result)
  637|      0|      return result;
  638|       |
  639|      1|#ifdef CURL_DO_LINEEND_CONV
  640|       |    /* convert end-of-line markers */
  641|      1|    len = convert_lineends(data, ptr, len);
  642|      1|#endif /* CURL_DO_LINEEND_CONV */
  643|      1|    }
  644|       |
  645|  72.2k|  return chop_write(data, type, ptr, len);
  646|  72.2k|}
Curl_read:
  685|  4.74M|{
  686|  4.74M|  CURLcode result = CURLE_RECV_ERROR;
  687|  4.74M|  ssize_t nread = 0;
  688|  4.74M|  size_t bytesfromsocket = 0;
  689|  4.74M|  char *buffertofill = NULL;
  690|  4.74M|  struct connectdata *conn = data->conn;
  691|       |
  692|       |  /* Set 'num' to 0 or 1, depending on which socket that has been sent here.
  693|       |     If it is the second socket, we set num to 1. Otherwise to 0. This lets
  694|       |     us use the correct ssl handle. */
  695|  4.74M|  int num = (sockfd == conn->sock[SECONDARYSOCKET]);
  696|       |
  697|  4.74M|  *n = 0; /* reset amount to zero */
  698|       |
  699|  4.74M|  bytesfromsocket = CURLMIN(sizerequested, (size_t)data->set.buffer_size);
  700|  4.74M|  buffertofill = buf;
  701|       |
  702|  4.74M|  nread = conn->recv[num](data, num, buffertofill, bytesfromsocket, &result);
  703|  4.74M|  if(nread < 0)
  704|     64|    return result;
  705|       |
  706|  4.74M|  *n += nread;
  707|       |
  708|  4.74M|  return CURLE_OK;
  709|  4.74M|}
Curl_debug:
  714|  69.9k|{
  715|  69.9k|  int rc = 0;
  716|  69.9k|  if(data->set.verbose) {
  717|      0|    static const char s_infotype[CURLINFO_END][3] = {
  718|      0|      "* ", "< ", "> ", "{ ", "} ", "{ ", "} " };
  719|       |
  720|       |#ifdef CURL_DOES_CONVERSIONS
  721|       |    char *buf = NULL;
  722|       |    size_t conv_size = 0;
  723|       |
  724|       |    switch(type) {
  725|       |    case CURLINFO_HEADER_OUT:
  726|       |      buf = Curl_memdup(ptr, size);
  727|       |      if(!buf)
  728|       |        return 1;
  729|       |      conv_size = size;
  730|       |
  731|       |      /* Special processing is needed for this block if it
  732|       |       * contains both headers and data (separated by CRLFCRLF).
  733|       |       * We want to convert just the headers, leaving the data as-is.
  734|       |       */
  735|       |      if(size > 4) {
  736|       |        size_t i;
  737|       |        for(i = 0; i < size-4; i++) {
  738|       |          if(memcmp(&buf[i], "\x0d\x0a\x0d\x0a", 4) == 0) {
  739|       |            /* convert everything through this CRLFCRLF but no further */
  740|       |            conv_size = i + 4;
  741|       |            break;
  742|       |          }
  743|       |        }
  744|       |      }
  745|       |
  746|       |      Curl_convert_from_network(data, buf, conv_size);
  747|       |      /* Curl_convert_from_network calls failf if unsuccessful */
  748|       |      /* we might as well continue even if it fails...   */
  749|       |      ptr = buf; /* switch pointer to use my buffer instead */
  750|       |      break;
  751|       |    default:
  752|       |      /* leave everything else as-is */
  753|       |      break;
  754|       |    }
  755|       |#endif /* CURL_DOES_CONVERSIONS */
  756|       |
  757|      0|    if(data->set.fdebug) {
  758|      0|      Curl_set_in_callback(data, true);
  759|      0|      rc = (*data->set.fdebug)(data, type, ptr, size, data->set.debugdata);
  760|      0|      Curl_set_in_callback(data, false);
  761|      0|    }
  762|      0|    else {
  763|      0|      switch(type) {
  764|      0|      case CURLINFO_TEXT:
  765|      0|      case CURLINFO_HEADER_OUT:
  766|      0|      case CURLINFO_HEADER_IN:
  767|      0|        fwrite(s_infotype[type], 2, 1, data->set.err);
  768|      0|        fwrite(ptr, size, 1, data->set.err);
  769|       |#ifdef CURL_DOES_CONVERSIONS
  770|       |        if(size != conv_size) {
  771|       |          /* we had untranslated data so we need an explicit newline */
  772|       |          fwrite("\n", 1, 1, data->set.err);
  773|       |        }
  774|       |#endif
  775|      0|        break;
  776|      0|      default: /* nada */
  777|      0|        break;
  778|      0|      }
  779|      0|    }
  780|       |#ifdef CURL_DOES_CONVERSIONS
  781|       |    free(buf);
  782|       |#endif
  783|      0|  }
  784|  69.9k|  return rc;
  785|  69.9k|}
sendf.c:convert_lineends:
   64|      1|{
   65|      1|  char *inPtr, *outPtr;
   66|       |
   67|       |  /* sanity check */
   68|      1|  if(!startPtr || (size < 1)) {
   69|      0|    return size;
   70|      0|  }
   71|       |
   72|      1|  if(data->state.prev_block_had_trailing_cr) {
   73|       |    /* The previous block of incoming data
   74|       |       had a trailing CR, which was turned into a LF. */
   75|      0|    if(*startPtr == '\n') {
   76|       |      /* This block of incoming data starts with the
   77|       |         previous block's LF so get rid of it */
   78|      0|      memmove(startPtr, startPtr + 1, size-1);
   79|      0|      size--;
   80|       |      /* and it wasn't a bare CR but a CRLF conversion instead */
   81|      0|      data->state.crlf_conversions++;
   82|      0|    }
   83|      0|    data->state.prev_block_had_trailing_cr = FALSE; /* reset the flag */
   84|      0|  }
   85|       |
   86|       |  /* find 1st CR, if any */
   87|      1|  inPtr = outPtr = memchr(startPtr, '\r', size);
   88|      1|  if(inPtr) {
   89|       |    /* at least one CR, now look for CRLF */
   90|      2|    while(inPtr < (startPtr + size-1)) {
   91|       |      /* note that it's size-1, so we'll never look past the last byte */
   92|      1|      if(memcmp(inPtr, "\r\n", 2) == 0) {
   93|       |        /* CRLF found, bump past the CR and copy the NL */
   94|      1|        inPtr++;
   95|      1|        *outPtr = *inPtr;
   96|       |        /* keep track of how many CRLFs we converted */
   97|      1|        data->state.crlf_conversions++;
   98|      1|      }
   99|      0|      else {
  100|      0|        if(*inPtr == '\r') {
  101|       |          /* lone CR, move LF instead */
  102|      0|          *outPtr = '\n';
  103|      0|        }
  104|      0|        else {
  105|       |          /* not a CRLF nor a CR, just copy whatever it is */
  106|      0|          *outPtr = *inPtr;
  107|      0|        }
  108|      0|      }
  109|      1|      outPtr++;
  110|      1|      inPtr++;
  111|      1|    } /* end of while loop */
  112|       |
  113|      1|    if(inPtr < startPtr + size) {
  114|       |      /* handle last byte */
  115|      0|      if(*inPtr == '\r') {
  116|       |        /* deal with a CR at the end of the buffer */
  117|      0|        *outPtr = '\n'; /* copy a NL instead */
  118|       |        /* note that a CRLF might be split across two blocks */
  119|      0|        data->state.prev_block_had_trailing_cr = TRUE;
  120|      0|      }
  121|      0|      else {
  122|       |        /* copy last byte */
  123|      0|        *outPtr = *inPtr;
  124|      0|      }
  125|      0|      outPtr++;
  126|      0|    }
  127|      1|    if(outPtr < startPtr + size)
  128|       |      /* tidy up by null terminating the now shorter data */
  129|      1|      *outPtr = '\0';
  130|       |
  131|      1|    return (outPtr - startPtr);
  132|      1|  }
  133|      0|  return size;
  134|      1|}
sendf.c:chop_write:
  526|  72.2k|{
  527|  72.2k|  struct connectdata *conn = data->conn;
  528|  72.2k|  curl_write_callback writeheader = NULL;
  529|  72.2k|  curl_write_callback writebody = NULL;
  530|  72.2k|  char *ptr = optr;
  531|  72.2k|  size_t len = olen;
  532|       |
  533|  72.2k|  if(!len)
  534|      0|    return CURLE_OK;
  535|       |
  536|       |  /* If reading is paused, append this data to the already held data for this
  537|       |     type. */
  538|  72.2k|  if(data->req.keepon & KEEP_RECV_PAUSE)
  539|      0|    return pausewrite(data, type, ptr, len);
  540|       |
  541|       |  /* Determine the callback(s) to use. */
  542|  72.2k|  if(type & CLIENTWRITE_BODY)
  543|  7.69k|    writebody = data->set.fwrite_func;
  544|  72.2k|  if((type & CLIENTWRITE_HEADER) &&
  545|  72.2k|     (data->set.fwrite_header || data->set.writeheader)) {
  546|       |    /*
  547|       |     * Write headers to the same callback or to the especially setup
  548|       |     * header callback function (added after version 7.7.1).
  549|       |     */
  550|      0|    writeheader =
  551|      0|      data->set.fwrite_header? data->set.fwrite_header: data->set.fwrite_func;
  552|      0|  }
  553|       |
  554|       |  /* Chop data, write chunks. */
  555|   144k|  while(len) {
  556|  72.2k|    size_t chunklen = len <= CURL_MAX_WRITE_SIZE? len: CURL_MAX_WRITE_SIZE;
  557|       |
  558|  72.2k|    if(writebody) {
  559|  7.69k|      size_t wrote;
  560|  7.69k|      Curl_set_in_callback(data, true);
  561|  7.69k|      wrote = writebody(ptr, 1, chunklen, data->set.out);
  562|  7.69k|      Curl_set_in_callback(data, false);
  563|       |
  564|  7.69k|      if(CURL_WRITEFUNC_PAUSE == wrote) {
  565|      0|        if(conn->handler->flags & PROTOPT_NONETWORK) {
  566|       |          /* Protocols that work without network cannot be paused. This is
  567|       |             actually only FILE:// just now, and it can't pause since the
  568|       |             transfer isn't done using the "normal" procedure. */
  569|      0|          failf(data, "Write callback asked for PAUSE when not supported!");
  570|      0|          return CURLE_WRITE_ERROR;
  571|      0|        }
  572|      0|        return pausewrite(data, type, ptr, len);
  573|      0|      }
  574|  7.69k|      if(wrote != chunklen) {
  575|      0|        failf(data, "Failure writing output to destination");
  576|      0|        return CURLE_WRITE_ERROR;
  577|      0|      }
  578|  7.69k|    }
  579|       |
  580|  72.2k|    ptr += chunklen;
  581|  72.2k|    len -= chunklen;
  582|  72.2k|  }
  583|       |
  584|  72.2k|  if(writeheader) {
  585|      0|    size_t wrote;
  586|      0|    ptr = optr;
  587|      0|    len = olen;
  588|      0|    Curl_set_in_callback(data, true);
  589|      0|    wrote = writeheader(ptr, 1, len, data->set.writeheader);
  590|      0|    Curl_set_in_callback(data, false);
  591|       |
  592|      0|    if(CURL_WRITEFUNC_PAUSE == wrote)
  593|       |      /* here we pass in the HEADER bit only since if this was body as well
  594|       |         then it was passed already and clearly that didn't trigger the
  595|       |         pause, so this is saved for later with the HEADER bit only */
  596|      0|      return pausewrite(data, CLIENTWRITE_HEADER, ptr, len);
  597|       |
  598|      0|    if(wrote != len) {
  599|      0|      failf(data, "Failed writing header");
  600|      0|      return CURLE_WRITE_ERROR;
  601|      0|    }
  602|      0|  }
  603|       |
  604|  72.2k|  return CURLE_OK;
  605|  72.2k|}

Curl_setstropt:
   58|  30.5k|{
   59|       |  /* Release the previous storage at `charp' and replace by a dynamic storage
   60|       |     copy of `s'. Return CURLE_OK or CURLE_OUT_OF_MEMORY. */
   61|       |
   62|  30.5k|  Curl_safefree(*charp);
   63|       |
   64|  30.5k|  if(s) {
   65|  19.4k|    char *str = strdup(s);
   66|       |
   67|  19.4k|    if(str) {
   68|  19.4k|      size_t len = strlen(str);
   69|  19.4k|      if(len > CURL_MAX_INPUT_LENGTH) {
   70|      0|        free(str);
   71|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
   72|      0|      }
   73|  19.4k|    }
   74|  19.4k|    if(!str)
   75|      0|      return CURLE_OUT_OF_MEMORY;
   76|       |
   77|  19.4k|    *charp = str;
   78|  19.4k|  }
   79|       |
   80|  30.5k|  return CURLE_OK;
   81|  30.5k|}
Curl_vsetopt:
  161|  40.1k|{
  162|  40.1k|  char *argptr;
  163|  40.1k|  CURLcode result = CURLE_OK;
  164|  40.1k|  long arg;
  165|  40.1k|  unsigned long uarg;
  166|  40.1k|  curl_off_t bigsize;
  167|       |
  168|  40.1k|  switch(option) {
  169|      0|  case CURLOPT_DNS_CACHE_TIMEOUT:
  170|      0|    arg = va_arg(param, long);
  171|      0|    if(arg < -1)
  172|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  173|      0|    data->set.dns_cache_timeout = arg;
  174|      0|    break;
  175|      0|  case CURLOPT_DNS_USE_GLOBAL_CACHE:
  176|       |    /* deprecated */
  177|      0|    break;
  178|      0|  case CURLOPT_SSL_CIPHER_LIST:
  179|       |    /* set a list of cipher we want to use in the SSL connection */
  180|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST],
  181|      0|                            va_arg(param, char *));
  182|      0|    break;
  183|      0|#ifndef CURL_DISABLE_PROXY
  184|      0|  case CURLOPT_PROXY_SSL_CIPHER_LIST:
  185|       |    /* set a list of cipher we want to use in the SSL connection for proxy */
  186|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST_PROXY],
  187|      0|                            va_arg(param, char *));
  188|      0|    break;
  189|      0|#endif
  190|      0|  case CURLOPT_TLS13_CIPHERS:
  191|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  192|       |      /* set preferred list of TLS 1.3 cipher suites */
  193|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST],
  194|      0|                              va_arg(param, char *));
  195|      0|    }
  196|      0|    else
  197|      0|      return CURLE_NOT_BUILT_IN;
  198|      0|    break;
  199|      0|#ifndef CURL_DISABLE_PROXY
  200|      0|  case CURLOPT_PROXY_TLS13_CIPHERS:
  201|      0|    if(Curl_ssl_tls13_ciphersuites()) {
  202|       |      /* set preferred list of TLS 1.3 cipher suites for proxy */
  203|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST_PROXY],
  204|      0|                              va_arg(param, char *));
  205|      0|    }
  206|      0|    else
  207|      0|      return CURLE_NOT_BUILT_IN;
  208|      0|    break;
  209|      0|#endif
  210|      0|  case CURLOPT_RANDOM_FILE:
  211|       |    /*
  212|       |     * This is the path name to a file that contains random data to seed
  213|       |     * the random SSL stuff with. The file is only used for reading.
  214|       |     */
  215|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_RANDOM_FILE],
  216|      0|                            va_arg(param, char *));
  217|      0|    break;
  218|      0|  case CURLOPT_EGDSOCKET:
  219|       |    /*
  220|       |     * The Entropy Gathering Daemon socket pathname
  221|       |     */
  222|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EGDSOCKET],
  223|      0|                            va_arg(param, char *));
  224|      0|    break;
  225|      0|  case CURLOPT_MAXCONNECTS:
  226|       |    /*
  227|       |     * Set the absolute number of maximum simultaneous alive connection that
  228|       |     * libcurl is allowed to have.
  229|       |     */
  230|      0|    arg = va_arg(param, long);
  231|      0|    if(arg < 0)
  232|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  233|      0|    data->set.maxconnects = arg;
  234|      0|    break;
  235|      0|  case CURLOPT_FORBID_REUSE:
  236|       |    /*
  237|       |     * When this transfer is done, it must not be left to be reused by a
  238|       |     * subsequent transfer but shall be closed immediately.
  239|       |     */
  240|      0|    data->set.reuse_forbid = (0 != va_arg(param, long)) ? TRUE : FALSE;
  241|      0|    break;
  242|      0|  case CURLOPT_FRESH_CONNECT:
  243|       |    /*
  244|       |     * This transfer shall not use a previously cached connection but
  245|       |     * should be made with a fresh new connect!
  246|       |     */
  247|      0|    data->set.reuse_fresh = (0 != va_arg(param, long)) ? TRUE : FALSE;
  248|      0|    break;
  249|      0|  case CURLOPT_VERBOSE:
  250|       |    /*
  251|       |     * Verbose means infof() calls that give a lot of information about
  252|       |     * the connection and transfer procedures as well as internal choices.
  253|       |     */
  254|      0|    data->set.verbose = (0 != va_arg(param, long)) ? TRUE : FALSE;
  255|      0|    break;
  256|     12|  case CURLOPT_HEADER:
  257|       |    /*
  258|       |     * Set to include the header in the general data output stream.
  259|       |     */
  260|     12|    data->set.include_header = (0 != va_arg(param, long)) ? TRUE : FALSE;
  261|     12|    break;
  262|      0|  case CURLOPT_NOPROGRESS:
  263|       |    /*
  264|       |     * Shut off the internal supported progress meter
  265|       |     */
  266|      0|    data->set.hide_progress = (0 != va_arg(param, long)) ? TRUE : FALSE;
  267|      0|    if(data->set.hide_progress)
  268|      0|      data->progress.flags |= PGRS_HIDE;
  269|      0|    else
  270|      0|      data->progress.flags &= ~PGRS_HIDE;
  271|      0|    break;
  272|     28|  case CURLOPT_NOBODY:
  273|       |    /*
  274|       |     * Do not include the body part in the output data stream.
  275|       |     */
  276|     28|    data->set.opt_no_body = (0 != va_arg(param, long)) ? TRUE : FALSE;
  277|     28|#ifndef CURL_DISABLE_HTTP
  278|     28|    if(data->set.opt_no_body)
  279|       |      /* in HTTP lingo, no body means using the HEAD request... */
  280|     24|      data->set.method = HTTPREQ_HEAD;
  281|      4|    else if(data->set.method == HTTPREQ_HEAD)
  282|      0|      data->set.method = HTTPREQ_GET;
  283|     28|#endif
  284|     28|    break;
  285|      0|  case CURLOPT_FAILONERROR:
  286|       |    /*
  287|       |     * Don't output the >=400 error code HTML-page, but instead only
  288|       |     * return error.
  289|       |     */
  290|      0|    data->set.http_fail_on_error = (0 != va_arg(param, long)) ? TRUE : FALSE;
  291|      0|    break;
  292|      0|  case CURLOPT_KEEP_SENDING_ON_ERROR:
  293|      0|    data->set.http_keep_sending_on_error = (0 != va_arg(param, long)) ?
  294|      0|      TRUE : FALSE;
  295|      0|    break;
  296|     91|  case CURLOPT_UPLOAD:
  297|     91|  case CURLOPT_PUT:
  298|       |    /*
  299|       |     * We want to sent data to the remote host. If this is HTTP, that equals
  300|       |     * using the PUT request.
  301|       |     */
  302|     91|    data->set.upload = (0 != va_arg(param, long)) ? TRUE : FALSE;
  303|     91|    if(data->set.upload) {
  304|       |      /* If this is HTTP, PUT is what's needed to "upload" */
  305|     91|      data->set.method = HTTPREQ_PUT;
  306|     91|      data->set.opt_no_body = FALSE; /* this is implied */
  307|     91|    }
  308|      0|    else
  309|       |      /* In HTTP, the opposite of upload is GET (unless NOBODY is true as
  310|       |         then this can be changed to HEAD later on) */
  311|      0|      data->set.method = HTTPREQ_GET;
  312|     91|    break;
  313|      0|  case CURLOPT_REQUEST_TARGET:
  314|      0|    result = Curl_setstropt(&data->set.str[STRING_TARGET],
  315|      0|                            va_arg(param, char *));
  316|      0|    break;
  317|      0|  case CURLOPT_FILETIME:
  318|       |    /*
  319|       |     * Try to get the file time of the remote document. The time will
  320|       |     * later (possibly) become available using curl_easy_getinfo().
  321|       |     */
  322|      0|    data->set.get_filetime = (0 != va_arg(param, long)) ? TRUE : FALSE;
  323|      0|    break;
  324|  2.97k|  case CURLOPT_SERVER_RESPONSE_TIMEOUT:
  325|       |    /*
  326|       |     * Option that specifies how quickly an server response must be obtained
  327|       |     * before it is considered failure. For pingpong protocols.
  328|       |     */
  329|  2.97k|    arg = va_arg(param, long);
  330|  2.97k|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
  331|  2.97k|      data->set.server_response_timeout = arg * 1000;
  332|      0|    else
  333|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  334|  2.97k|    break;
  335|  2.97k|#ifndef CURL_DISABLE_TFTP
  336|  2.97k|  case CURLOPT_TFTP_NO_OPTIONS:
  337|       |    /*
  338|       |     * Option that prevents libcurl from sending TFTP option requests to the
  339|       |     * server.
  340|       |     */
  341|      0|    data->set.tftp_no_options = va_arg(param, long) != 0;
  342|      0|    break;
  343|      0|  case CURLOPT_TFTP_BLKSIZE:
  344|       |    /*
  345|       |     * TFTP option that specifies the block size to use for data transmission.
  346|       |     */
  347|      0|    arg = va_arg(param, long);
  348|      0|    if(arg < 0)
  349|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  350|      0|    data->set.tftp_blksize = arg;
  351|      0|    break;
  352|      0|#endif
  353|      0|#ifndef CURL_DISABLE_NETRC
  354|      0|  case CURLOPT_NETRC:
  355|       |    /*
  356|       |     * Parse the $HOME/.netrc file
  357|       |     */
  358|      0|    arg = va_arg(param, long);
  359|      0|    if((arg < CURL_NETRC_IGNORED) || (arg >= CURL_NETRC_LAST))
  360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  361|      0|    data->set.use_netrc = (enum CURL_NETRC_OPTION)arg;
  362|      0|    break;
  363|      0|  case CURLOPT_NETRC_FILE:
  364|       |    /*
  365|       |     * Use this file instead of the $HOME/.netrc file
  366|       |     */
  367|      0|    result = Curl_setstropt(&data->set.str[STRING_NETRC_FILE],
  368|      0|                            va_arg(param, char *));
  369|      0|    break;
  370|      0|#endif
  371|      0|  case CURLOPT_TRANSFERTEXT:
  372|       |    /*
  373|       |     * This option was previously named 'FTPASCII'. Renamed to work with
  374|       |     * more protocols than merely FTP.
  375|       |     *
  376|       |     * Transfer using ASCII (instead of BINARY).
  377|       |     */
  378|      0|    data->set.prefer_ascii = (0 != va_arg(param, long)) ? TRUE : FALSE;
  379|      0|    break;
  380|      0|  case CURLOPT_TIMECONDITION:
  381|       |    /*
  382|       |     * Set HTTP time condition. This must be one of the defines in the
  383|       |     * curl/curl.h header file.
  384|       |     */
  385|      0|    arg = va_arg(param, long);
  386|      0|    if((arg < CURL_TIMECOND_NONE) || (arg >= CURL_TIMECOND_LAST))
  387|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  388|      0|    data->set.timecondition = (curl_TimeCond)arg;
  389|      0|    break;
  390|      0|  case CURLOPT_TIMEVALUE:
  391|       |    /*
  392|       |     * This is the value to compare with the remote document with the
  393|       |     * method set with CURLOPT_TIMECONDITION
  394|       |     */
  395|      0|    data->set.timevalue = (time_t)va_arg(param, long);
  396|      0|    break;
  397|       |
  398|      0|  case CURLOPT_TIMEVALUE_LARGE:
  399|       |    /*
  400|       |     * This is the value to compare with the remote document with the
  401|       |     * method set with CURLOPT_TIMECONDITION
  402|       |     */
  403|      0|    data->set.timevalue = (time_t)va_arg(param, curl_off_t);
  404|      0|    break;
  405|       |
  406|      0|  case CURLOPT_SSLVERSION:
  407|      0|#ifndef CURL_DISABLE_PROXY
  408|      0|  case CURLOPT_PROXY_SSLVERSION:
  409|      0|#endif
  410|       |    /*
  411|       |     * Set explicit SSL version to try to connect with, as some SSL
  412|       |     * implementations are lame.
  413|       |     */
  414|      0|#ifdef USE_SSL
  415|      0|    {
  416|      0|      long version, version_max;
  417|      0|      struct ssl_primary_config *primary = &data->set.ssl.primary;
  418|      0|#ifndef CURL_DISABLE_PROXY
  419|      0|      if(option != CURLOPT_SSLVERSION)
  420|      0|        primary = &data->set.proxy_ssl.primary;
  421|      0|#endif
  422|       |
  423|      0|      arg = va_arg(param, long);
  424|       |
  425|      0|      version = C_SSLVERSION_VALUE(arg);
  426|      0|      version_max = C_SSLVERSION_MAX_VALUE(arg);
  427|       |
  428|      0|      if(version < CURL_SSLVERSION_DEFAULT ||
  429|      0|         version == CURL_SSLVERSION_SSLv2 ||
  430|      0|         version == CURL_SSLVERSION_SSLv3 ||
  431|      0|         version >= CURL_SSLVERSION_LAST ||
  432|      0|         version_max < CURL_SSLVERSION_MAX_NONE ||
  433|      0|         version_max >= CURL_SSLVERSION_MAX_LAST)
  434|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  435|       |
  436|      0|      primary->version = version;
  437|      0|      primary->version_max = version_max;
  438|      0|    }
  439|       |#else
  440|       |    result = CURLE_NOT_BUILT_IN;
  441|       |#endif
  442|      0|    break;
  443|       |
  444|       |    /* MQTT "borrows" some of the HTTP options */
  445|      0|#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MQTT)
  446|      0|  case CURLOPT_COPYPOSTFIELDS:
  447|       |    /*
  448|       |     * A string with POST data. Makes curl HTTP POST. Even if it is NULL.
  449|       |     * If needed, CURLOPT_POSTFIELDSIZE must have been set prior to
  450|       |     *  CURLOPT_COPYPOSTFIELDS and not altered later.
  451|       |     */
  452|      0|    argptr = va_arg(param, char *);
  453|       |
  454|      0|    if(!argptr || data->set.postfieldsize == -1)
  455|      0|      result = Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], argptr);
  456|      0|    else {
  457|       |      /*
  458|       |       *  Check that requested length does not overflow the size_t type.
  459|       |       */
  460|       |
  461|      0|      if((data->set.postfieldsize < 0) ||
  462|      0|         ((sizeof(curl_off_t) != sizeof(size_t)) &&
  463|      0|          (data->set.postfieldsize > (curl_off_t)((size_t)-1))))
  464|      0|        result = CURLE_OUT_OF_MEMORY;
  465|      0|      else {
  466|      0|        char *p;
  467|       |
  468|      0|        (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  469|       |
  470|       |        /* Allocate even when size == 0. This satisfies the need of possible
  471|       |           later address compare to detect the COPYPOSTFIELDS mode, and
  472|       |           to mark that postfields is used rather than read function or
  473|       |           form data.
  474|       |        */
  475|      0|        p = malloc((size_t)(data->set.postfieldsize?
  476|      0|                            data->set.postfieldsize:1));
  477|       |
  478|      0|        if(!p)
  479|      0|          result = CURLE_OUT_OF_MEMORY;
  480|      0|        else {
  481|      0|          if(data->set.postfieldsize)
  482|      0|            memcpy(p, argptr, (size_t)data->set.postfieldsize);
  483|       |
  484|      0|          data->set.str[STRING_COPYPOSTFIELDS] = p;
  485|      0|        }
  486|      0|      }
  487|      0|    }
  488|       |
  489|      0|    data->set.postfields = data->set.str[STRING_COPYPOSTFIELDS];
  490|      0|    data->set.method = HTTPREQ_POST;
  491|      0|    break;
  492|       |
  493|     28|  case CURLOPT_POSTFIELDS:
  494|       |    /*
  495|       |     * Like above, but use static data instead of copying it.
  496|       |     */
  497|     28|    data->set.postfields = va_arg(param, void *);
  498|       |    /* Release old copied data. */
  499|     28|    (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  500|     28|    data->set.method = HTTPREQ_POST;
  501|     28|    break;
  502|       |
  503|      0|  case CURLOPT_POSTFIELDSIZE:
  504|       |    /*
  505|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  506|       |     * figure it out. Enables binary posts.
  507|       |     */
  508|      0|    bigsize = va_arg(param, long);
  509|      0|    if(bigsize < -1)
  510|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  511|       |
  512|      0|    if(data->set.postfieldsize < bigsize &&
  513|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  514|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  515|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  516|      0|      data->set.postfields = NULL;
  517|      0|    }
  518|       |
  519|      0|    data->set.postfieldsize = bigsize;
  520|      0|    break;
  521|       |
  522|      0|  case CURLOPT_POSTFIELDSIZE_LARGE:
  523|       |    /*
  524|       |     * The size of the POSTFIELD data to prevent libcurl to do strlen() to
  525|       |     * figure it out. Enables binary posts.
  526|       |     */
  527|      0|    bigsize = va_arg(param, curl_off_t);
  528|      0|    if(bigsize < -1)
  529|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  530|       |
  531|      0|    if(data->set.postfieldsize < bigsize &&
  532|      0|       data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {
  533|       |      /* Previous CURLOPT_COPYPOSTFIELDS is no longer valid. */
  534|      0|      (void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);
  535|      0|      data->set.postfields = NULL;
  536|      0|    }
  537|       |
  538|      0|    data->set.postfieldsize = bigsize;
  539|      0|    break;
  540|      0|#endif
  541|      0|#ifndef CURL_DISABLE_HTTP
  542|      0|  case CURLOPT_AUTOREFERER:
  543|       |    /*
  544|       |     * Switch on automatic referer that gets set if curl follows locations.
  545|       |     */
  546|      0|    data->set.http_auto_referer = (0 != va_arg(param, long)) ? TRUE : FALSE;
  547|      0|    break;
  548|       |
  549|     67|  case CURLOPT_ACCEPT_ENCODING:
  550|       |    /*
  551|       |     * String to use at the value of Accept-Encoding header.
  552|       |     *
  553|       |     * If the encoding is set to "" we use an Accept-Encoding header that
  554|       |     * encompasses all the encodings we support.
  555|       |     * If the encoding is set to NULL we don't send an Accept-Encoding header
  556|       |     * and ignore an received Content-Encoding header.
  557|       |     *
  558|       |     */
  559|     67|    argptr = va_arg(param, char *);
  560|     67|    if(argptr && !*argptr) {
  561|     63|      argptr = Curl_all_content_encodings();
  562|     63|      if(!argptr)
  563|      0|        result = CURLE_OUT_OF_MEMORY;
  564|     63|      else {
  565|     63|        result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  566|     63|        free(argptr);
  567|     63|      }
  568|     63|    }
  569|      4|    else
  570|      4|      result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);
  571|     67|    break;
  572|       |
  573|      0|  case CURLOPT_TRANSFER_ENCODING:
  574|      0|    data->set.http_transfer_encoding = (0 != va_arg(param, long)) ?
  575|      0|      TRUE : FALSE;
  576|      0|    break;
  577|       |
  578|     57|  case CURLOPT_FOLLOWLOCATION:
  579|       |    /*
  580|       |     * Follow Location: header hints on a HTTP-server.
  581|       |     */
  582|     57|    data->set.http_follow_location = (0 != va_arg(param, long)) ? TRUE : FALSE;
  583|     57|    break;
  584|       |
  585|      0|  case CURLOPT_UNRESTRICTED_AUTH:
  586|       |    /*
  587|       |     * Send authentication (user+password) when following locations, even when
  588|       |     * hostname changed.
  589|       |     */
  590|      0|    data->set.allow_auth_to_other_hosts =
  591|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
  592|      0|    break;
  593|       |
  594|      0|  case CURLOPT_MAXREDIRS:
  595|       |    /*
  596|       |     * The maximum amount of hops you allow curl to follow Location:
  597|       |     * headers. This should mostly be used to detect never-ending loops.
  598|       |     */
  599|      0|    arg = va_arg(param, long);
  600|      0|    if(arg < -1)
  601|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  602|      0|    data->set.maxredirs = arg;
  603|      0|    break;
  604|       |
  605|      0|  case CURLOPT_POSTREDIR:
  606|       |    /*
  607|       |     * Set the behavior of POST when redirecting
  608|       |     * CURL_REDIR_GET_ALL - POST is changed to GET after 301 and 302
  609|       |     * CURL_REDIR_POST_301 - POST is kept as POST after 301
  610|       |     * CURL_REDIR_POST_302 - POST is kept as POST after 302
  611|       |     * CURL_REDIR_POST_303 - POST is kept as POST after 303
  612|       |     * CURL_REDIR_POST_ALL - POST is kept as POST after 301, 302 and 303
  613|       |     * other - POST is kept as POST after 301 and 302
  614|       |     */
  615|      0|    arg = va_arg(param, long);
  616|      0|    if(arg < CURL_REDIR_GET_ALL)
  617|       |      /* no return error on too high numbers since the bitmask could be
  618|       |         extended in a future */
  619|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  620|      0|    data->set.keep_post = arg & CURL_REDIR_POST_ALL;
  621|      0|    break;
  622|       |
  623|      0|  case CURLOPT_POST:
  624|       |    /* Does this option serve a purpose anymore? Yes it does, when
  625|       |       CURLOPT_POSTFIELDS isn't used and the POST data is read off the
  626|       |       callback! */
  627|      0|    if(va_arg(param, long)) {
  628|      0|      data->set.method = HTTPREQ_POST;
  629|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  630|      0|    }
  631|      0|    else
  632|      0|      data->set.method = HTTPREQ_GET;
  633|      0|    break;
  634|       |
  635|      0|  case CURLOPT_HTTPPOST:
  636|       |    /*
  637|       |     * Set to make us do HTTP POST
  638|       |     */
  639|      0|    data->set.httppost = va_arg(param, struct curl_httppost *);
  640|      0|    data->set.method = HTTPREQ_POST_FORM;
  641|      0|    data->set.opt_no_body = FALSE; /* this is implied */
  642|      0|    break;
  643|       |
  644|      0|  case CURLOPT_AWS_SIGV4:
  645|       |    /*
  646|       |     * String that is merged to some authentication
  647|       |     * parameters are used by the algorithm.
  648|       |     */
  649|      0|    result = Curl_setstropt(&data->set.str[STRING_AWS_SIGV4],
  650|      0|                            va_arg(param, char *));
  651|       |    /*
  652|       |     * Basic been set by default it need to be unset here
  653|       |     */
  654|      0|    if(data->set.str[STRING_AWS_SIGV4])
  655|      0|      data->set.httpauth = CURLAUTH_AWS_SIGV4;
  656|      0|    break;
  657|       |
  658|    244|  case CURLOPT_MIMEPOST:
  659|       |    /*
  660|       |     * Set to make us do MIME/form POST
  661|       |     */
  662|    244|    result = Curl_mime_set_subparts(&data->set.mimepost,
  663|    244|                                    va_arg(param, curl_mime *), FALSE);
  664|    244|    if(!result) {
  665|    244|      data->set.method = HTTPREQ_POST_MIME;
  666|    244|      data->set.opt_no_body = FALSE; /* this is implied */
  667|    244|    }
  668|    244|    break;
  669|       |
  670|      0|  case CURLOPT_REFERER:
  671|       |    /*
  672|       |     * String to set in the HTTP Referer: field.
  673|       |     */
  674|      0|    if(data->state.referer_alloc) {
  675|      0|      Curl_safefree(data->state.referer);
  676|      0|      data->state.referer_alloc = FALSE;
  677|      0|    }
  678|      0|    result = Curl_setstropt(&data->set.str[STRING_SET_REFERER],
  679|      0|                            va_arg(param, char *));
  680|      0|    data->state.referer = data->set.str[STRING_SET_REFERER];
  681|      0|    break;
  682|       |
  683|      0|  case CURLOPT_USERAGENT:
  684|       |    /*
  685|       |     * String to use in the HTTP User-Agent field
  686|       |     */
  687|      0|    result = Curl_setstropt(&data->set.str[STRING_USERAGENT],
  688|      0|                            va_arg(param, char *));
  689|      0|    break;
  690|       |
  691|    149|  case CURLOPT_HTTPHEADER:
  692|       |    /*
  693|       |     * Set a list with HTTP headers to use (or replace internals with)
  694|       |     */
  695|    149|    data->set.headers = va_arg(param, struct curl_slist *);
  696|    149|    break;
  697|       |
  698|      0|#ifndef CURL_DISABLE_PROXY
  699|      0|  case CURLOPT_PROXYHEADER:
  700|       |    /*
  701|       |     * Set a list with proxy headers to use (or replace internals with)
  702|       |     *
  703|       |     * Since CURLOPT_HTTPHEADER was the only way to set HTTP headers for a
  704|       |     * long time we remain doing it this way until CURLOPT_PROXYHEADER is
  705|       |     * used. As soon as this option has been used, if set to anything but
  706|       |     * NULL, custom headers for proxies are only picked from this list.
  707|       |     *
  708|       |     * Set this option to NULL to restore the previous behavior.
  709|       |     */
  710|      0|    data->set.proxyheaders = va_arg(param, struct curl_slist *);
  711|      0|    break;
  712|      0|#endif
  713|      0|  case CURLOPT_HEADEROPT:
  714|       |    /*
  715|       |     * Set header option.
  716|       |     */
  717|      0|    arg = va_arg(param, long);
  718|      0|    data->set.sep_headers = (bool)((arg & CURLHEADER_SEPARATE)? TRUE: FALSE);
  719|      0|    break;
  720|       |
  721|      0|  case CURLOPT_HTTP200ALIASES:
  722|       |    /*
  723|       |     * Set a list of aliases for HTTP 200 in response header
  724|       |     */
  725|      0|    data->set.http200aliases = va_arg(param, struct curl_slist *);
  726|      0|    break;
  727|       |
  728|      0|#if !defined(CURL_DISABLE_COOKIES)
  729|      6|  case CURLOPT_COOKIE:
  730|       |    /*
  731|       |     * Cookie string to send to the remote server in the request.
  732|       |     */
  733|      6|    result = Curl_setstropt(&data->set.str[STRING_COOKIE],
  734|      6|                            va_arg(param, char *));
  735|      6|    break;
  736|       |
  737|      0|  case CURLOPT_COOKIEFILE:
  738|       |    /*
  739|       |     * Set cookie file to read and parse. Can be used multiple times.
  740|       |     */
  741|      0|    argptr = (char *)va_arg(param, void *);
  742|      0|    if(argptr) {
  743|      0|      struct curl_slist *cl;
  744|       |      /* general protection against mistakes and abuse */
  745|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  746|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  747|       |      /* append the cookie file name to the list of file names, and deal with
  748|       |         them later */
  749|      0|      cl = curl_slist_append(data->state.cookielist, argptr);
  750|      0|      if(!cl) {
  751|      0|        curl_slist_free_all(data->state.cookielist);
  752|      0|        data->state.cookielist = NULL;
  753|      0|        return CURLE_OUT_OF_MEMORY;
  754|      0|      }
  755|      0|      data->state.cookielist = cl; /* store the list for later use */
  756|      0|    }
  757|      0|    else {
  758|       |      /* clear the list of cookie files */
  759|      0|      curl_slist_free_all(data->state.cookielist);
  760|      0|      data->state.cookielist = NULL;
  761|       |
  762|      0|      if(!data->share || !data->share->cookies) {
  763|       |        /* throw away all existing cookies if this isn't a shared cookie
  764|       |           container */
  765|      0|        Curl_cookie_clearall(data->cookies);
  766|      0|        Curl_cookie_cleanup(data->cookies);
  767|      0|      }
  768|       |      /* disable the cookie engine */
  769|      0|      data->cookies = NULL;
  770|      0|    }
  771|      0|    break;
  772|       |
  773|  2.97k|  case CURLOPT_COOKIEJAR:
  774|       |    /*
  775|       |     * Set cookie file name to dump all cookies to when we're done.
  776|       |     */
  777|  2.97k|  {
  778|  2.97k|    struct CookieInfo *newcookies;
  779|  2.97k|    result = Curl_setstropt(&data->set.str[STRING_COOKIEJAR],
  780|  2.97k|                            va_arg(param, char *));
  781|       |
  782|       |    /*
  783|       |     * Activate the cookie parser. This may or may not already
  784|       |     * have been made.
  785|       |     */
  786|  2.97k|    newcookies = Curl_cookie_init(data, NULL, data->cookies,
  787|  2.97k|                                  data->set.cookiesession);
  788|  2.97k|    if(!newcookies)
  789|      0|      result = CURLE_OUT_OF_MEMORY;
  790|  2.97k|    data->cookies = newcookies;
  791|  2.97k|  }
  792|  2.97k|  break;
  793|       |
  794|      0|  case CURLOPT_COOKIESESSION:
  795|       |    /*
  796|       |     * Set this option to TRUE to start a new "cookie session". It will
  797|       |     * prevent the forthcoming read-cookies-from-file actions to accept
  798|       |     * cookies that are marked as being session cookies, as they belong to a
  799|       |     * previous session.
  800|       |     *
  801|       |     * In the original Netscape cookie spec, "session cookies" are cookies
  802|       |     * with no expire date set. RFC2109 describes the same action if no
  803|       |     * 'Max-Age' is set and RFC2965 includes the RFC2109 description and adds
  804|       |     * a 'Discard' action that can enforce the discard even for cookies that
  805|       |     * have a Max-Age.
  806|       |     *
  807|       |     * We run mostly with the original cookie spec, as hardly anyone implements
  808|       |     * anything else.
  809|       |     */
  810|      0|    data->set.cookiesession = (0 != va_arg(param, long)) ? TRUE : FALSE;
  811|      0|    break;
  812|       |
  813|      0|  case CURLOPT_COOKIELIST:
  814|      0|    argptr = va_arg(param, char *);
  815|       |
  816|      0|    if(!argptr)
  817|      0|      break;
  818|       |
  819|      0|    if(strcasecompare(argptr, "ALL")) {
  820|       |      /* clear all cookies */
  821|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  822|      0|      Curl_cookie_clearall(data->cookies);
  823|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  824|      0|    }
  825|      0|    else if(strcasecompare(argptr, "SESS")) {
  826|       |      /* clear session cookies */
  827|      0|      Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  828|      0|      Curl_cookie_clearsess(data->cookies);
  829|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  830|      0|    }
  831|      0|    else if(strcasecompare(argptr, "FLUSH")) {
  832|       |      /* flush cookies to file, takes care of the locking */
  833|      0|      Curl_flush_cookies(data, FALSE);
  834|      0|    }
  835|      0|    else if(strcasecompare(argptr, "RELOAD")) {
  836|       |      /* reload cookies from file */
  837|      0|      Curl_cookie_loadfiles(data);
  838|      0|      break;
  839|      0|    }
  840|      0|    else {
  841|      0|      if(!data->cookies)
  842|       |        /* if cookie engine was not running, activate it */
  843|      0|        data->cookies = Curl_cookie_init(data, NULL, NULL, TRUE);
  844|       |
  845|       |      /* general protection against mistakes and abuse */
  846|      0|      if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)
  847|      0|        return CURLE_BAD_FUNCTION_ARGUMENT;
  848|      0|      argptr = strdup(argptr);
  849|      0|      if(!argptr || !data->cookies) {
  850|      0|        result = CURLE_OUT_OF_MEMORY;
  851|      0|        free(argptr);
  852|      0|      }
  853|      0|      else {
  854|      0|        Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
  855|       |
  856|      0|        if(checkprefix("Set-Cookie:", argptr))
  857|       |          /* HTTP Header format line */
  858|      0|          Curl_cookie_add(data, data->cookies, TRUE, FALSE, argptr + 11, NULL,
  859|      0|                          NULL, TRUE);
  860|       |
  861|      0|        else
  862|       |          /* Netscape format line */
  863|      0|          Curl_cookie_add(data, data->cookies, FALSE, FALSE, argptr, NULL,
  864|      0|                          NULL, TRUE);
  865|       |
  866|      0|        Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
  867|      0|        free(argptr);
  868|      0|      }
  869|      0|    }
  870|       |
  871|      0|    break;
  872|      0|#endif /* !CURL_DISABLE_COOKIES */
  873|       |
  874|      0|  case CURLOPT_HTTPGET:
  875|       |    /*
  876|       |     * Set to force us do HTTP GET
  877|       |     */
  878|      0|    if(va_arg(param, long)) {
  879|      0|      data->set.method = HTTPREQ_GET;
  880|      0|      data->set.upload = FALSE; /* switch off upload */
  881|      0|      data->set.opt_no_body = FALSE; /* this is implied */
  882|      0|    }
  883|      0|    break;
  884|       |
  885|     12|  case CURLOPT_HTTP_VERSION:
  886|       |    /*
  887|       |     * This sets a requested HTTP version to be used. The value is one of
  888|       |     * the listed enums in curl/curl.h.
  889|       |     */
  890|     12|    arg = va_arg(param, long);
  891|     12|    if(arg < CURL_HTTP_VERSION_NONE)
  892|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  893|       |#ifdef ENABLE_QUIC
  894|       |    if(arg == CURL_HTTP_VERSION_3)
  895|       |      ;
  896|       |    else
  897|       |#endif
  898|       |#if !defined(USE_NGHTTP2) && !defined(USE_HYPER)
  899|       |    if(arg >= CURL_HTTP_VERSION_2)
  900|       |      return CURLE_UNSUPPORTED_PROTOCOL;
  901|       |#else
  902|     12|    if(arg >= CURL_HTTP_VERSION_LAST)
  903|     12|      return CURLE_UNSUPPORTED_PROTOCOL;
  904|      0|    if(arg == CURL_HTTP_VERSION_NONE)
  905|      0|      arg = CURL_HTTP_VERSION_2TLS;
  906|      0|#endif
  907|      0|    data->set.httpwant = (unsigned char)arg;
  908|      0|    break;
  909|       |
  910|      0|  case CURLOPT_EXPECT_100_TIMEOUT_MS:
  911|       |    /*
  912|       |     * Time to wait for a response to a HTTP request containing an
  913|       |     * Expect: 100-continue header before sending the data anyway.
  914|       |     */
  915|      0|    arg = va_arg(param, long);
  916|      0|    if(arg < 0)
  917|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  918|      0|    data->set.expect_100_timeout = arg;
  919|      0|    break;
  920|       |
  921|      0|  case CURLOPT_HTTP09_ALLOWED:
  922|      0|    arg = va_arg(param, unsigned long);
  923|      0|    if(arg > 1L)
  924|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
  925|       |#ifdef USE_HYPER
  926|       |    /* Hyper does not support HTTP/0.9 */
  927|       |    if(arg)
  928|       |      return CURLE_BAD_FUNCTION_ARGUMENT;
  929|       |#else
  930|      0|    data->set.http09_allowed = arg ? TRUE : FALSE;
  931|      0|#endif
  932|      0|    break;
  933|      0|#endif   /* CURL_DISABLE_HTTP */
  934|       |
  935|    106|  case CURLOPT_HTTPAUTH:
  936|       |    /*
  937|       |     * Set HTTP Authentication type BITMASK.
  938|       |     */
  939|    106|  {
  940|    106|    int bitcheck;
  941|    106|    bool authbits;
  942|    106|    unsigned long auth = va_arg(param, unsigned long);
  943|       |
  944|    106|    if(auth == CURLAUTH_NONE) {
  945|      4|      data->set.httpauth = auth;
  946|      4|      break;
  947|      4|    }
  948|       |
  949|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
  950|       |       rest we need to handle it as normal DIGEST */
  951|    102|    data->state.authhost.iestyle =
  952|    102|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
  953|       |
  954|    102|    if(auth & CURLAUTH_DIGEST_IE) {
  955|     29|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
  956|     29|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
  957|     29|    }
  958|       |
  959|       |    /* switch off bits we can't support */
  960|       |#ifndef USE_NTLM
  961|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
  962|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  963|       |#elif !defined(NTLM_WB_ENABLED)
  964|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
  965|       |#endif
  966|    102|#ifndef USE_SPNEGO
  967|    102|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
  968|       |                                    GSS-API or SSPI */
  969|    102|#endif
  970|       |
  971|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
  972|    102|    bitcheck = 0;
  973|    102|    authbits = FALSE;
  974|    235|    while(bitcheck < 31) {
  975|    234|      if(auth & (1UL << bitcheck++)) {
  976|    101|        authbits = TRUE;
  977|    101|        break;
  978|    101|      }
  979|    234|    }
  980|    102|    if(!authbits)
  981|      1|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
  982|       |
  983|    101|    data->set.httpauth = auth;
  984|    101|  }
  985|      0|  break;
  986|       |
  987|    209|  case CURLOPT_CUSTOMREQUEST:
  988|       |    /*
  989|       |     * Set a custom string to use as request
  990|       |     */
  991|    209|    result = Curl_setstropt(&data->set.str[STRING_CUSTOMREQUEST],
  992|    209|                            va_arg(param, char *));
  993|       |
  994|       |    /* we don't set
  995|       |       data->set.method = HTTPREQ_CUSTOM;
  996|       |       here, we continue as if we were using the already set type
  997|       |       and this just changes the actual request keyword */
  998|    209|    break;
  999|       |
 1000|      0|#ifndef CURL_DISABLE_PROXY
 1001|      0|  case CURLOPT_HTTPPROXYTUNNEL:
 1002|       |    /*
 1003|       |     * Tunnel operations through the proxy instead of normal proxy use
 1004|       |     */
 1005|      0|    data->set.tunnel_thru_httpproxy = (0 != va_arg(param, long)) ?
 1006|      0|      TRUE : FALSE;
 1007|      0|    break;
 1008|       |
 1009|      0|  case CURLOPT_PROXYPORT:
 1010|       |    /*
 1011|       |     * Explicitly set HTTP proxy port number.
 1012|       |     */
 1013|      0|    arg = va_arg(param, long);
 1014|      0|    if((arg < 0) || (arg > 65535))
 1015|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1016|      0|    data->set.proxyport = arg;
 1017|      0|    break;
 1018|       |
 1019|      0|  case CURLOPT_PROXYAUTH:
 1020|       |    /*
 1021|       |     * Set HTTP Authentication type BITMASK.
 1022|       |     */
 1023|      0|  {
 1024|      0|    int bitcheck;
 1025|      0|    bool authbits;
 1026|      0|    unsigned long auth = va_arg(param, unsigned long);
 1027|       |
 1028|      0|    if(auth == CURLAUTH_NONE) {
 1029|      0|      data->set.proxyauth = auth;
 1030|      0|      break;
 1031|      0|    }
 1032|       |
 1033|       |    /* the DIGEST_IE bit is only used to set a special marker, for all the
 1034|       |       rest we need to handle it as normal DIGEST */
 1035|      0|    data->state.authproxy.iestyle =
 1036|      0|      (bool)((auth & CURLAUTH_DIGEST_IE) ? TRUE : FALSE);
 1037|       |
 1038|      0|    if(auth & CURLAUTH_DIGEST_IE) {
 1039|      0|      auth |= CURLAUTH_DIGEST; /* set standard digest bit */
 1040|      0|      auth &= ~CURLAUTH_DIGEST_IE; /* unset ie digest bit */
 1041|      0|    }
 1042|       |    /* switch off bits we can't support */
 1043|       |#ifndef USE_NTLM
 1044|       |    auth &= ~CURLAUTH_NTLM;    /* no NTLM support */
 1045|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1046|       |#elif !defined(NTLM_WB_ENABLED)
 1047|       |    auth &= ~CURLAUTH_NTLM_WB; /* no NTLM_WB support */
 1048|       |#endif
 1049|      0|#ifndef USE_SPNEGO
 1050|      0|    auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without
 1051|       |                                    GSS-API or SSPI */
 1052|      0|#endif
 1053|       |
 1054|       |    /* check if any auth bit lower than CURLAUTH_ONLY is still set */
 1055|      0|    bitcheck = 0;
 1056|      0|    authbits = FALSE;
 1057|      0|    while(bitcheck < 31) {
 1058|      0|      if(auth & (1UL << bitcheck++)) {
 1059|      0|        authbits = TRUE;
 1060|      0|        break;
 1061|      0|      }
 1062|      0|    }
 1063|      0|    if(!authbits)
 1064|      0|      return CURLE_NOT_BUILT_IN; /* no supported types left! */
 1065|       |
 1066|      0|    data->set.proxyauth = auth;
 1067|      0|  }
 1068|      0|  break;
 1069|       |
 1070|      0|  case CURLOPT_PROXY:
 1071|       |    /*
 1072|       |     * Set proxy server:port to use as proxy.
 1073|       |     *
 1074|       |     * If the proxy is set to "" (and CURLOPT_SOCKS_PROXY is set to "" or NULL)
 1075|       |     * we explicitly say that we don't want to use a proxy
 1076|       |     * (even though there might be environment variables saying so).
 1077|       |     *
 1078|       |     * Setting it to NULL, means no proxy but allows the environment variables
 1079|       |     * to decide for us (if CURLOPT_SOCKS_PROXY setting it to NULL).
 1080|       |     */
 1081|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY],
 1082|      0|                            va_arg(param, char *));
 1083|      0|    break;
 1084|       |
 1085|      0|  case CURLOPT_PRE_PROXY:
 1086|       |    /*
 1087|       |     * Set proxy server:port to use as SOCKS proxy.
 1088|       |     *
 1089|       |     * If the proxy is set to "" or NULL we explicitly say that we don't want
 1090|       |     * to use the socks proxy.
 1091|       |     */
 1092|      0|    result = Curl_setstropt(&data->set.str[STRING_PRE_PROXY],
 1093|      0|                            va_arg(param, char *));
 1094|      0|    break;
 1095|       |
 1096|      0|  case CURLOPT_PROXYTYPE:
 1097|       |    /*
 1098|       |     * Set proxy type. HTTP/HTTP_1_0/SOCKS4/SOCKS4a/SOCKS5/SOCKS5_HOSTNAME
 1099|       |     */
 1100|      0|    arg = va_arg(param, long);
 1101|      0|    if((arg < CURLPROXY_HTTP) || (arg > CURLPROXY_SOCKS5_HOSTNAME))
 1102|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1103|      0|    data->set.proxytype = (curl_proxytype)arg;
 1104|      0|    break;
 1105|       |
 1106|      0|  case CURLOPT_PROXY_TRANSFER_MODE:
 1107|       |    /*
 1108|       |     * set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy
 1109|       |     */
 1110|      0|    switch(va_arg(param, long)) {
 1111|      0|    case 0:
 1112|      0|      data->set.proxy_transfer_mode = FALSE;
 1113|      0|      break;
 1114|      0|    case 1:
 1115|      0|      data->set.proxy_transfer_mode = TRUE;
 1116|      0|      break;
 1117|      0|    default:
 1118|       |      /* reserve other values for future use */
 1119|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1120|      0|      break;
 1121|      0|    }
 1122|      0|    break;
 1123|      0|#endif   /* CURL_DISABLE_PROXY */
 1124|       |
 1125|      0|  case CURLOPT_SOCKS5_AUTH:
 1126|      0|    data->set.socks5auth = va_arg(param, unsigned long);
 1127|      0|    if(data->set.socks5auth & ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))
 1128|      0|      result = CURLE_NOT_BUILT_IN;
 1129|      0|    break;
 1130|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
 1131|       |  case CURLOPT_SOCKS5_GSSAPI_NEC:
 1132|       |    /*
 1133|       |     * Set flag for NEC SOCK5 support
 1134|       |     */
 1135|       |    data->set.socks5_gssapi_nec = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1136|       |    break;
 1137|       |#endif
 1138|      0|#ifndef CURL_DISABLE_PROXY
 1139|      0|  case CURLOPT_SOCKS5_GSSAPI_SERVICE:
 1140|      0|  case CURLOPT_PROXY_SERVICE_NAME:
 1141|       |    /*
 1142|       |     * Set proxy authentication service name for Kerberos 5 and SPNEGO
 1143|       |     */
 1144|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXY_SERVICE_NAME],
 1145|      0|                            va_arg(param, char *));
 1146|      0|    break;
 1147|      0|#endif
 1148|      0|  case CURLOPT_SERVICE_NAME:
 1149|       |    /*
 1150|       |     * Set authentication service name for DIGEST-MD5, Kerberos 5 and SPNEGO
 1151|       |     */
 1152|      0|    result = Curl_setstropt(&data->set.str[STRING_SERVICE_NAME],
 1153|      0|                            va_arg(param, char *));
 1154|      0|    break;
 1155|       |
 1156|      0|  case CURLOPT_HEADERDATA:
 1157|       |    /*
 1158|       |     * Custom pointer to pass the header write callback function
 1159|       |     */
 1160|      0|    data->set.writeheader = (void *)va_arg(param, void *);
 1161|      0|    break;
 1162|      0|  case CURLOPT_ERRORBUFFER:
 1163|       |    /*
 1164|       |     * Error buffer provided by the caller to get the human readable
 1165|       |     * error string in.
 1166|       |     */
 1167|      0|    data->set.errorbuffer = va_arg(param, char *);
 1168|      0|    break;
 1169|  2.97k|  case CURLOPT_WRITEDATA:
 1170|       |    /*
 1171|       |     * FILE pointer to write to. Or possibly
 1172|       |     * used as argument to the write callback.
 1173|       |     */
 1174|  2.97k|    data->set.out = va_arg(param, void *);
 1175|  2.97k|    break;
 1176|       |
 1177|      0|  case CURLOPT_DIRLISTONLY:
 1178|       |    /*
 1179|       |     * An option that changes the command to one that asks for a list only, no
 1180|       |     * file info details. Used for FTP, POP3 and SFTP.
 1181|       |     */
 1182|      0|    data->set.list_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1183|      0|    break;
 1184|       |
 1185|      0|  case CURLOPT_APPEND:
 1186|       |    /*
 1187|       |     * We want to upload and append to an existing file. Used for FTP and
 1188|       |     * SFTP.
 1189|       |     */
 1190|      0|    data->set.remote_append = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1191|      0|    break;
 1192|       |
 1193|      0|#ifndef CURL_DISABLE_FTP
 1194|      0|  case CURLOPT_FTP_FILEMETHOD:
 1195|       |    /*
 1196|       |     * How do access files over FTP.
 1197|       |     */
 1198|      0|    arg = va_arg(param, long);
 1199|      0|    if((arg < CURLFTPMETHOD_DEFAULT) || (arg >= CURLFTPMETHOD_LAST))
 1200|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1201|      0|    data->set.ftp_filemethod = (curl_ftpfile)arg;
 1202|      0|    break;
 1203|      0|  case CURLOPT_FTPPORT:
 1204|       |    /*
 1205|       |     * Use FTP PORT, this also specifies which IP address to use
 1206|       |     */
 1207|      0|    result = Curl_setstropt(&data->set.str[STRING_FTPPORT],
 1208|      0|                            va_arg(param, char *));
 1209|      0|    data->set.ftp_use_port = (data->set.str[STRING_FTPPORT]) ? TRUE : FALSE;
 1210|      0|    break;
 1211|       |
 1212|      0|  case CURLOPT_FTP_USE_EPRT:
 1213|      0|    data->set.ftp_use_eprt = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1214|      0|    break;
 1215|       |
 1216|      0|  case CURLOPT_FTP_USE_EPSV:
 1217|      0|    data->set.ftp_use_epsv = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1218|      0|    break;
 1219|       |
 1220|      0|  case CURLOPT_FTP_USE_PRET:
 1221|      0|    data->set.ftp_use_pret = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1222|      0|    break;
 1223|       |
 1224|      0|  case CURLOPT_FTP_SSL_CCC:
 1225|      0|    arg = va_arg(param, long);
 1226|      0|    if((arg < CURLFTPSSL_CCC_NONE) || (arg >= CURLFTPSSL_CCC_LAST))
 1227|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1228|      0|    data->set.ftp_ccc = (curl_ftpccc)arg;
 1229|      0|    break;
 1230|       |
 1231|      0|  case CURLOPT_FTP_SKIP_PASV_IP:
 1232|       |    /*
 1233|       |     * Enable or disable FTP_SKIP_PASV_IP, which will disable/enable the
 1234|       |     * bypass of the IP address in PASV responses.
 1235|       |     */
 1236|      0|    data->set.ftp_skip_ip = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1237|      0|    break;
 1238|       |
 1239|      0|  case CURLOPT_FTP_ACCOUNT:
 1240|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ACCOUNT],
 1241|      0|                            va_arg(param, char *));
 1242|      0|    break;
 1243|       |
 1244|      0|  case CURLOPT_FTP_ALTERNATIVE_TO_USER:
 1245|      0|    result = Curl_setstropt(&data->set.str[STRING_FTP_ALTERNATIVE_TO_USER],
 1246|      0|                            va_arg(param, char *));
 1247|      0|    break;
 1248|       |
 1249|      0|  case CURLOPT_FTPSSLAUTH:
 1250|       |    /*
 1251|       |     * Set a specific auth for FTP-SSL transfers.
 1252|       |     */
 1253|      0|    arg = va_arg(param, long);
 1254|      0|    if((arg < CURLFTPAUTH_DEFAULT) || (arg >= CURLFTPAUTH_LAST))
 1255|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1256|      0|    data->set.ftpsslauth = (curl_ftpauth)arg;
 1257|      0|    break;
 1258|      0|  case CURLOPT_KRBLEVEL:
 1259|       |    /*
 1260|       |     * A string that defines the kerberos security level.
 1261|       |     */
 1262|      0|    result = Curl_setstropt(&data->set.str[STRING_KRB_LEVEL],
 1263|      0|                            va_arg(param, char *));
 1264|      0|    data->set.krb = (data->set.str[STRING_KRB_LEVEL]) ? TRUE : FALSE;
 1265|      0|    break;
 1266|      0|#endif
 1267|      0|  case CURLOPT_FTP_CREATE_MISSING_DIRS:
 1268|       |    /*
 1269|       |     * An FTP/SFTP option that modifies an upload to create missing
 1270|       |     * directories on the server.
 1271|       |     */
 1272|      0|    arg = va_arg(param, long);
 1273|       |    /* reserve other values for future use */
 1274|      0|    if((arg < CURLFTP_CREATE_DIR_NONE) ||
 1275|      0|       (arg > CURLFTP_CREATE_DIR_RETRY))
 1276|      0|      result = CURLE_BAD_FUNCTION_ARGUMENT;
 1277|      0|    else
 1278|      0|      data->set.ftp_create_missing_dirs = (int)arg;
 1279|      0|    break;
 1280|  2.97k|  case CURLOPT_READDATA:
 1281|       |    /*
 1282|       |     * FILE pointer to read the file to be uploaded from. Or possibly
 1283|       |     * used as argument to the read callback.
 1284|       |     */
 1285|  2.97k|    data->set.in_set = va_arg(param, void *);
 1286|  2.97k|    break;
 1287|      0|  case CURLOPT_INFILESIZE:
 1288|       |    /*
 1289|       |     * If known, this should inform curl about the file size of the
 1290|       |     * to-be-uploaded file.
 1291|       |     */
 1292|      0|    arg = va_arg(param, long);
 1293|      0|    if(arg < -1)
 1294|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1295|      0|    data->set.filesize = arg;
 1296|      0|    break;
 1297|     91|  case CURLOPT_INFILESIZE_LARGE:
 1298|       |    /*
 1299|       |     * If known, this should inform curl about the file size of the
 1300|       |     * to-be-uploaded file.
 1301|       |     */
 1302|     91|    bigsize = va_arg(param, curl_off_t);
 1303|     91|    if(bigsize < -1)
 1304|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1305|     91|    data->set.filesize = bigsize;
 1306|     91|    break;
 1307|      0|  case CURLOPT_LOW_SPEED_LIMIT:
 1308|       |    /*
 1309|       |     * The low speed limit that if transfers are below this for
 1310|       |     * CURLOPT_LOW_SPEED_TIME, the transfer is aborted.
 1311|       |     */
 1312|      0|    arg = va_arg(param, long);
 1313|      0|    if(arg < 0)
 1314|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1315|      0|    data->set.low_speed_limit = arg;
 1316|      0|    break;
 1317|      0|  case CURLOPT_MAX_SEND_SPEED_LARGE:
 1318|       |    /*
 1319|       |     * When transfer uploads are faster then CURLOPT_MAX_SEND_SPEED_LARGE
 1320|       |     * bytes per second the transfer is throttled..
 1321|       |     */
 1322|      0|    bigsize = va_arg(param, curl_off_t);
 1323|      0|    if(bigsize < 0)
 1324|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1325|      0|    data->set.max_send_speed = bigsize;
 1326|      0|    break;
 1327|      0|  case CURLOPT_MAX_RECV_SPEED_LARGE:
 1328|       |    /*
 1329|       |     * When receiving data faster than CURLOPT_MAX_RECV_SPEED_LARGE bytes per
 1330|       |     * second the transfer is throttled..
 1331|       |     */
 1332|      0|    bigsize = va_arg(param, curl_off_t);
 1333|      0|    if(bigsize < 0)
 1334|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1335|      0|    data->set.max_recv_speed = bigsize;
 1336|      0|    break;
 1337|      0|  case CURLOPT_LOW_SPEED_TIME:
 1338|       |    /*
 1339|       |     * The low speed time that if transfers are below the set
 1340|       |     * CURLOPT_LOW_SPEED_LIMIT during this time, the transfer is aborted.
 1341|       |     */
 1342|      0|    arg = va_arg(param, long);
 1343|      0|    if(arg < 0)
 1344|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1345|      0|    data->set.low_speed_time = arg;
 1346|      0|    break;
 1347|      0|  case CURLOPT_CURLU:
 1348|       |    /*
 1349|       |     * pass CURLU to set URL
 1350|       |     */
 1351|      0|    data->set.uh = va_arg(param, CURLU *);
 1352|      0|    break;
 1353|  2.84k|  case CURLOPT_URL:
 1354|       |    /*
 1355|       |     * The URL to fetch.
 1356|       |     */
 1357|  2.84k|    if(data->state.url_alloc) {
 1358|       |      /* the already set URL is allocated, free it first! */
 1359|      0|      Curl_safefree(data->state.url);
 1360|      0|      data->state.url_alloc = FALSE;
 1361|      0|    }
 1362|  2.84k|    result = Curl_setstropt(&data->set.str[STRING_SET_URL],
 1363|  2.84k|                            va_arg(param, char *));
 1364|  2.84k|    data->state.url = data->set.str[STRING_SET_URL];
 1365|  2.84k|    break;
 1366|      0|  case CURLOPT_PORT:
 1367|       |    /*
 1368|       |     * The port number to use when getting the URL
 1369|       |     */
 1370|      0|    arg = va_arg(param, long);
 1371|      0|    if((arg < 0) || (arg > 65535))
 1372|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1373|      0|    data->set.use_port = arg;
 1374|      0|    break;
 1375|      0|  case CURLOPT_TIMEOUT:
 1376|       |    /*
 1377|       |     * The maximum time you allow curl to use for a single transfer
 1378|       |     * operation.
 1379|       |     */
 1380|      0|    arg = va_arg(param, long);
 1381|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1382|      0|      data->set.timeout = arg * 1000;
 1383|      0|    else
 1384|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1385|      0|    break;
 1386|       |
 1387|  2.97k|  case CURLOPT_TIMEOUT_MS:
 1388|  2.97k|    arg = va_arg(param, long);
 1389|  2.97k|    if(arg < 0)
 1390|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1391|  2.97k|    data->set.timeout = arg;
 1392|  2.97k|    break;
 1393|       |
 1394|      0|  case CURLOPT_CONNECTTIMEOUT:
 1395|       |    /*
 1396|       |     * The maximum time you allow curl to use to connect.
 1397|       |     */
 1398|      0|    arg = va_arg(param, long);
 1399|      0|    if((arg >= 0) && (arg <= (INT_MAX/1000)))
 1400|      0|      data->set.connecttimeout = arg * 1000;
 1401|      0|    else
 1402|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1403|      0|    break;
 1404|       |
 1405|      0|  case CURLOPT_CONNECTTIMEOUT_MS:
 1406|      0|    arg = va_arg(param, long);
 1407|      0|    if(arg < 0)
 1408|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1409|      0|    data->set.connecttimeout = arg;
 1410|      0|    break;
 1411|       |
 1412|      0|  case CURLOPT_ACCEPTTIMEOUT_MS:
 1413|       |    /*
 1414|       |     * The maximum time you allow curl to wait for server connect
 1415|       |     */
 1416|      0|    arg = va_arg(param, long);
 1417|      0|    if(arg < 0)
 1418|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1419|      0|    data->set.accepttimeout = arg;
 1420|      0|    break;
 1421|       |
 1422|      0|  case CURLOPT_USERPWD:
 1423|       |    /*
 1424|       |     * user:password to use in the operation
 1425|       |     */
 1426|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1427|      0|                               &data->set.str[STRING_USERNAME],
 1428|      0|                               &data->set.str[STRING_PASSWORD]);
 1429|      0|    break;
 1430|       |
 1431|    170|  case CURLOPT_USERNAME:
 1432|       |    /*
 1433|       |     * authentication user name to use in the operation
 1434|       |     */
 1435|    170|    result = Curl_setstropt(&data->set.str[STRING_USERNAME],
 1436|    170|                            va_arg(param, char *));
 1437|    170|    break;
 1438|     53|  case CURLOPT_PASSWORD:
 1439|       |    /*
 1440|       |     * authentication password to use in the operation
 1441|       |     */
 1442|     53|    result = Curl_setstropt(&data->set.str[STRING_PASSWORD],
 1443|     53|                            va_arg(param, char *));
 1444|     53|    break;
 1445|       |
 1446|      0|  case CURLOPT_LOGIN_OPTIONS:
 1447|       |    /*
 1448|       |     * authentication options to use in the operation
 1449|       |     */
 1450|      0|    result = Curl_setstropt(&data->set.str[STRING_OPTIONS],
 1451|      0|                            va_arg(param, char *));
 1452|      0|    break;
 1453|       |
 1454|      0|  case CURLOPT_XOAUTH2_BEARER:
 1455|       |    /*
 1456|       |     * OAuth 2.0 bearer token to use in the operation
 1457|       |     */
 1458|      0|    result = Curl_setstropt(&data->set.str[STRING_BEARER],
 1459|      0|                            va_arg(param, char *));
 1460|      0|    break;
 1461|       |
 1462|      0|  case CURLOPT_POSTQUOTE:
 1463|       |    /*
 1464|       |     * List of RAW FTP commands to use after a transfer
 1465|       |     */
 1466|      0|    data->set.postquote = va_arg(param, struct curl_slist *);
 1467|      0|    break;
 1468|      0|  case CURLOPT_PREQUOTE:
 1469|       |    /*
 1470|       |     * List of RAW FTP commands to use prior to RETR (Wesley Laxton)
 1471|       |     */
 1472|      0|    data->set.prequote = va_arg(param, struct curl_slist *);
 1473|      0|    break;
 1474|      0|  case CURLOPT_QUOTE:
 1475|       |    /*
 1476|       |     * List of RAW FTP commands to use before a transfer
 1477|       |     */
 1478|      0|    data->set.quote = va_arg(param, struct curl_slist *);
 1479|      0|    break;
 1480|      0|  case CURLOPT_RESOLVE:
 1481|       |    /*
 1482|       |     * List of HOST:PORT:[addresses] strings to populate the DNS cache with
 1483|       |     * Entries added this way will remain in the cache until explicitly
 1484|       |     * removed or the handle is cleaned up.
 1485|       |     *
 1486|       |     * Prefix the HOST with plus sign (+) to have the entry expire just like
 1487|       |     * automatically added entries.
 1488|       |     *
 1489|       |     * Prefix the HOST with dash (-) to _remove_ the entry from the cache.
 1490|       |     *
 1491|       |     * This API can remove any entry from the DNS cache, but only entries
 1492|       |     * that aren't actually in use right now will be pruned immediately.
 1493|       |     */
 1494|      0|    data->set.resolve = va_arg(param, struct curl_slist *);
 1495|      0|    data->state.resolve = data->set.resolve;
 1496|      0|    break;
 1497|      0|  case CURLOPT_PROGRESSFUNCTION:
 1498|       |    /*
 1499|       |     * Progress callback function
 1500|       |     */
 1501|      0|    data->set.fprogress = va_arg(param, curl_progress_callback);
 1502|      0|    if(data->set.fprogress)
 1503|      0|      data->progress.callback = TRUE; /* no longer internal */
 1504|      0|    else
 1505|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1506|      0|    break;
 1507|       |
 1508|      0|  case CURLOPT_XFERINFOFUNCTION:
 1509|       |    /*
 1510|       |     * Transfer info callback function
 1511|       |     */
 1512|      0|    data->set.fxferinfo = va_arg(param, curl_xferinfo_callback);
 1513|      0|    if(data->set.fxferinfo)
 1514|      0|      data->progress.callback = TRUE; /* no longer internal */
 1515|      0|    else
 1516|      0|      data->progress.callback = FALSE; /* NULL enforces internal */
 1517|       |
 1518|      0|    break;
 1519|       |
 1520|      0|  case CURLOPT_PROGRESSDATA:
 1521|       |    /*
 1522|       |     * Custom client data to pass to the progress callback
 1523|       |     */
 1524|      0|    data->set.progress_client = va_arg(param, void *);
 1525|      0|    break;
 1526|       |
 1527|      0|#ifndef CURL_DISABLE_PROXY
 1528|      0|  case CURLOPT_PROXYUSERPWD:
 1529|       |    /*
 1530|       |     * user:password needed to use the proxy
 1531|       |     */
 1532|      0|    result = setstropt_userpwd(va_arg(param, char *),
 1533|      0|                               &data->set.str[STRING_PROXYUSERNAME],
 1534|      0|                               &data->set.str[STRING_PROXYPASSWORD]);
 1535|      0|    break;
 1536|      0|  case CURLOPT_PROXYUSERNAME:
 1537|       |    /*
 1538|       |     * authentication user name to use in the operation
 1539|       |     */
 1540|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYUSERNAME],
 1541|      0|                            va_arg(param, char *));
 1542|      0|    break;
 1543|      0|  case CURLOPT_PROXYPASSWORD:
 1544|       |    /*
 1545|       |     * authentication password to use in the operation
 1546|       |     */
 1547|      0|    result = Curl_setstropt(&data->set.str[STRING_PROXYPASSWORD],
 1548|      0|                            va_arg(param, char *));
 1549|      0|    break;
 1550|      0|  case CURLOPT_NOPROXY:
 1551|       |    /*
 1552|       |     * proxy exception list
 1553|       |     */
 1554|      0|    result = Curl_setstropt(&data->set.str[STRING_NOPROXY],
 1555|      0|                            va_arg(param, char *));
 1556|      0|    break;
 1557|      0|#endif
 1558|       |
 1559|     54|  case CURLOPT_RANGE:
 1560|       |    /*
 1561|       |     * What range of the file you want to transfer
 1562|       |     */
 1563|     54|    result = Curl_setstropt(&data->set.str[STRING_SET_RANGE],
 1564|     54|                            va_arg(param, char *));
 1565|     54|    break;
 1566|      0|  case CURLOPT_RESUME_FROM:
 1567|       |    /*
 1568|       |     * Resume transfer at the given file position
 1569|       |     */
 1570|      0|    arg = va_arg(param, long);
 1571|      0|    if(arg < -1)
 1572|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1573|      0|    data->set.set_resume_from = arg;
 1574|      0|    break;
 1575|      0|  case CURLOPT_RESUME_FROM_LARGE:
 1576|       |    /*
 1577|       |     * Resume transfer at the given file position
 1578|       |     */
 1579|      0|    bigsize = va_arg(param, curl_off_t);
 1580|      0|    if(bigsize < -1)
 1581|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1582|      0|    data->set.set_resume_from = bigsize;
 1583|      0|    break;
 1584|      0|  case CURLOPT_DEBUGFUNCTION:
 1585|       |    /*
 1586|       |     * stderr write callback.
 1587|       |     */
 1588|      0|    data->set.fdebug = va_arg(param, curl_debug_callback);
 1589|       |    /*
 1590|       |     * if the callback provided is NULL, it'll use the default callback
 1591|       |     */
 1592|      0|    break;
 1593|      0|  case CURLOPT_DEBUGDATA:
 1594|       |    /*
 1595|       |     * Set to a void * that should receive all error writes. This
 1596|       |     * defaults to CURLOPT_STDERR for normal operations.
 1597|       |     */
 1598|      0|    data->set.debugdata = va_arg(param, void *);
 1599|      0|    break;
 1600|      0|  case CURLOPT_STDERR:
 1601|       |    /*
 1602|       |     * Set to a FILE * that should receive all error writes. This
 1603|       |     * defaults to stderr for normal operations.
 1604|       |     */
 1605|      0|    data->set.err = va_arg(param, FILE *);
 1606|      0|    if(!data->set.err)
 1607|      0|      data->set.err = stderr;
 1608|      0|    break;
 1609|      0|  case CURLOPT_HEADERFUNCTION:
 1610|       |    /*
 1611|       |     * Set header write callback
 1612|       |     */
 1613|      0|    data->set.fwrite_header = va_arg(param, curl_write_callback);
 1614|      0|    break;
 1615|  2.97k|  case CURLOPT_WRITEFUNCTION:
 1616|       |    /*
 1617|       |     * Set data write callback
 1618|       |     */
 1619|  2.97k|    data->set.fwrite_func = va_arg(param, curl_write_callback);
 1620|  2.97k|    if(!data->set.fwrite_func) {
 1621|      0|      data->set.is_fwrite_set = 0;
 1622|       |      /* When set to NULL, reset to our internal default function */
 1623|      0|      data->set.fwrite_func = (curl_write_callback)fwrite;
 1624|      0|    }
 1625|  2.97k|    else
 1626|  2.97k|      data->set.is_fwrite_set = 1;
 1627|  2.97k|    break;
 1628|  2.97k|  case CURLOPT_READFUNCTION:
 1629|       |    /*
 1630|       |     * Read data callback
 1631|       |     */
 1632|  2.97k|    data->set.fread_func_set = va_arg(param, curl_read_callback);
 1633|  2.97k|    if(!data->set.fread_func_set) {
 1634|      0|      data->set.is_fread_set = 0;
 1635|       |      /* When set to NULL, reset to our internal default function */
 1636|      0|      data->set.fread_func_set = (curl_read_callback)fread;
 1637|      0|    }
 1638|  2.97k|    else
 1639|  2.97k|      data->set.is_fread_set = 1;
 1640|  2.97k|    break;
 1641|      0|  case CURLOPT_SEEKFUNCTION:
 1642|       |    /*
 1643|       |     * Seek callback. Might be NULL.
 1644|       |     */
 1645|      0|    data->set.seek_func = va_arg(param, curl_seek_callback);
 1646|      0|    break;
 1647|      0|  case CURLOPT_SEEKDATA:
 1648|       |    /*
 1649|       |     * Seek control callback. Might be NULL.
 1650|       |     */
 1651|      0|    data->set.seek_client = va_arg(param, void *);
 1652|      0|    break;
 1653|      0|  case CURLOPT_CONV_FROM_NETWORK_FUNCTION:
 1654|       |    /*
 1655|       |     * "Convert from network encoding" callback
 1656|       |     */
 1657|      0|    data->set.convfromnetwork = va_arg(param, curl_conv_callback);
 1658|      0|    break;
 1659|      0|  case CURLOPT_CONV_TO_NETWORK_FUNCTION:
 1660|       |    /*
 1661|       |     * "Convert to network encoding" callback
 1662|       |     */
 1663|      0|    data->set.convtonetwork = va_arg(param, curl_conv_callback);
 1664|      0|    break;
 1665|      0|  case CURLOPT_CONV_FROM_UTF8_FUNCTION:
 1666|       |    /*
 1667|       |     * "Convert from UTF-8 encoding" callback
 1668|       |     */
 1669|      0|    data->set.convfromutf8 = va_arg(param, curl_conv_callback);
 1670|      0|    break;
 1671|      0|  case CURLOPT_IOCTLFUNCTION:
 1672|       |    /*
 1673|       |     * I/O control callback. Might be NULL.
 1674|       |     */
 1675|      0|    data->set.ioctl_func = va_arg(param, curl_ioctl_callback);
 1676|      0|    break;
 1677|      0|  case CURLOPT_IOCTLDATA:
 1678|       |    /*
 1679|       |     * I/O control data pointer. Might be NULL.
 1680|       |     */
 1681|      0|    data->set.ioctl_client = va_arg(param, void *);
 1682|      0|    break;
 1683|      0|  case CURLOPT_SSLCERT:
 1684|       |    /*
 1685|       |     * String that holds file name of the SSL certificate to use
 1686|       |     */
 1687|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT],
 1688|      0|                            va_arg(param, char *));
 1689|      0|    break;
 1690|      0|  case CURLOPT_SSLCERT_BLOB:
 1691|       |    /*
 1692|       |     * Blob that holds file content of the SSL certificate to use
 1693|       |     */
 1694|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT],
 1695|      0|                             va_arg(param, struct curl_blob *));
 1696|      0|    break;
 1697|      0|#ifndef CURL_DISABLE_PROXY
 1698|      0|  case CURLOPT_PROXY_SSLCERT:
 1699|       |    /*
 1700|       |     * String that holds file name of the SSL certificate to use for proxy
 1701|       |     */
 1702|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_PROXY],
 1703|      0|                            va_arg(param, char *));
 1704|      0|    break;
 1705|      0|  case CURLOPT_PROXY_SSLCERT_BLOB:
 1706|       |    /*
 1707|       |     * Blob that holds file content of the SSL certificate to use for proxy
 1708|       |     */
 1709|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_CERT_PROXY],
 1710|      0|                             va_arg(param, struct curl_blob *));
 1711|      0|    break;
 1712|      0|#endif
 1713|      0|  case CURLOPT_SSLCERTTYPE:
 1714|       |    /*
 1715|       |     * String that holds file type of the SSL certificate to use
 1716|       |     */
 1717|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE],
 1718|      0|                            va_arg(param, char *));
 1719|      0|    break;
 1720|      0|#ifndef CURL_DISABLE_PROXY
 1721|      0|  case CURLOPT_PROXY_SSLCERTTYPE:
 1722|       |    /*
 1723|       |     * String that holds file type of the SSL certificate to use for proxy
 1724|       |     */
 1725|      0|    result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE_PROXY],
 1726|      0|                            va_arg(param, char *));
 1727|      0|    break;
 1728|      0|#endif
 1729|      0|  case CURLOPT_SSLKEY:
 1730|       |    /*
 1731|       |     * String that holds file name of the SSL key to use
 1732|       |     */
 1733|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY],
 1734|      0|                            va_arg(param, char *));
 1735|      0|    break;
 1736|      0|  case CURLOPT_SSLKEY_BLOB:
 1737|       |    /*
 1738|       |     * Blob that holds file content of the SSL key to use
 1739|       |     */
 1740|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY],
 1741|      0|                             va_arg(param, struct curl_blob *));
 1742|      0|    break;
 1743|      0|#ifndef CURL_DISABLE_PROXY
 1744|      0|  case CURLOPT_PROXY_SSLKEY:
 1745|       |    /*
 1746|       |     * String that holds file name of the SSL key to use for proxy
 1747|       |     */
 1748|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PROXY],
 1749|      0|                            va_arg(param, char *));
 1750|      0|    break;
 1751|      0|  case CURLOPT_PROXY_SSLKEY_BLOB:
 1752|       |    /*
 1753|       |     * Blob that holds file content of the SSL key to use for proxy
 1754|       |     */
 1755|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_KEY_PROXY],
 1756|      0|                             va_arg(param, struct curl_blob *));
 1757|      0|    break;
 1758|      0|#endif
 1759|      0|  case CURLOPT_SSLKEYTYPE:
 1760|       |    /*
 1761|       |     * String that holds file type of the SSL key to use
 1762|       |     */
 1763|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE],
 1764|      0|                            va_arg(param, char *));
 1765|      0|    break;
 1766|      0|#ifndef CURL_DISABLE_PROXY
 1767|      0|  case CURLOPT_PROXY_SSLKEYTYPE:
 1768|       |    /*
 1769|       |     * String that holds file type of the SSL key to use for proxy
 1770|       |     */
 1771|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE_PROXY],
 1772|      0|                            va_arg(param, char *));
 1773|      0|    break;
 1774|      0|#endif
 1775|      0|  case CURLOPT_KEYPASSWD:
 1776|       |    /*
 1777|       |     * String that holds the SSL or SSH private key password.
 1778|       |     */
 1779|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD],
 1780|      0|                            va_arg(param, char *));
 1781|      0|    break;
 1782|      0|#ifndef CURL_DISABLE_PROXY
 1783|      0|  case CURLOPT_PROXY_KEYPASSWD:
 1784|       |    /*
 1785|       |     * String that holds the SSL private key password for proxy.
 1786|       |     */
 1787|      0|    result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD_PROXY],
 1788|      0|                            va_arg(param, char *));
 1789|      0|    break;
 1790|      0|#endif
 1791|      0|  case CURLOPT_SSLENGINE:
 1792|       |    /*
 1793|       |     * String that holds the SSL crypto engine.
 1794|       |     */
 1795|      0|    argptr = va_arg(param, char *);
 1796|      0|    if(argptr && argptr[0]) {
 1797|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], argptr);
 1798|      0|      if(!result) {
 1799|      0|        result = Curl_ssl_set_engine(data, argptr);
 1800|      0|      }
 1801|      0|    }
 1802|      0|    break;
 1803|       |
 1804|      0|  case CURLOPT_SSLENGINE_DEFAULT:
 1805|       |    /*
 1806|       |     * flag to set engine as default.
 1807|       |     */
 1808|      0|    Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], NULL);
 1809|      0|    result = Curl_ssl_set_engine_default(data);
 1810|      0|    break;
 1811|      0|  case CURLOPT_CRLF:
 1812|       |    /*
 1813|       |     * Kludgy option to enable CRLF conversions. Subject for removal.
 1814|       |     */
 1815|      0|    data->set.crlf = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1816|      0|    break;
 1817|      0|#ifndef CURL_DISABLE_PROXY
 1818|      0|  case CURLOPT_HAPROXYPROTOCOL:
 1819|       |    /*
 1820|       |     * Set to send the HAProxy Proxy Protocol header
 1821|       |     */
 1822|      0|    data->set.haproxyprotocol = (0 != va_arg(param, long)) ? TRUE : FALSE;
 1823|      0|    break;
 1824|      0|#endif
 1825|      0|  case CURLOPT_INTERFACE:
 1826|       |    /*
 1827|       |     * Set what interface or address/hostname to bind the socket to when
 1828|       |     * performing an operation and thus what from-IP your connection will use.
 1829|       |     */
 1830|      0|    result = Curl_setstropt(&data->set.str[STRING_DEVICE],
 1831|      0|                            va_arg(param, char *));
 1832|      0|    break;
 1833|      0|  case CURLOPT_LOCALPORT:
 1834|       |    /*
 1835|       |     * Set what local port to bind the socket to when performing an operation.
 1836|       |     */
 1837|      0|    arg = va_arg(param, long);
 1838|      0|    if((arg < 0) || (arg > 65535))
 1839|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1840|      0|    data->set.localport = curlx_sltous(arg);
 1841|      0|    break;
 1842|      0|  case CURLOPT_LOCALPORTRANGE:
 1843|       |    /*
 1844|       |     * Set number of local ports to try, starting with CURLOPT_LOCALPORT.
 1845|       |     */
 1846|      0|    arg = va_arg(param, long);
 1847|      0|    if((arg < 0) || (arg > 65535))
 1848|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1849|      0|    data->set.localportrange = curlx_sltosi(arg);
 1850|      0|    break;
 1851|      0|  case CURLOPT_GSSAPI_DELEGATION:
 1852|       |    /*
 1853|       |     * GSS-API credential delegation bitmask
 1854|       |     */
 1855|      0|    arg = va_arg(param, long);
 1856|      0|    if(arg < CURLGSSAPI_DELEGATION_NONE)
 1857|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 1858|      0|    data->set.gssapi_delegation = arg;
 1859|      0|    break;
 1860|      0|  case CURLOPT_SSL_VERIFYPEER:
 1861|       |    /*
 1862|       |     * Enable peer SSL verifying.
 1863|       |     */
 1864|      0|    data->set.ssl.primary.verifypeer = (0 != va_arg(param, long)) ?
 1865|      0|      TRUE : FALSE;
 1866|       |
 1867|       |    /* Update the current connection ssl_config. */
 1868|      0|    if(data->conn) {
 1869|      0|      data->conn->ssl_config.verifypeer =
 1870|      0|        data->set.ssl.primary.verifypeer;
 1871|      0|    }
 1872|      0|    break;
 1873|      0|  case CURLOPT_DOH_SSL_VERIFYPEER:
 1874|       |    /*
 1875|       |     * Enable peer SSL verifying for DoH.
 1876|       |     */
 1877|      0|    data->set.doh_verifypeer = (0 != va_arg(param, long)) ?
 1878|      0|      TRUE : FALSE;
 1879|      0|    break;
 1880|      0|#ifndef CURL_DISABLE_PROXY
 1881|      0|  case CURLOPT_PROXY_SSL_VERIFYPEER:
 1882|       |    /*
 1883|       |     * Enable peer SSL verifying for proxy.
 1884|       |     */
 1885|      0|    data->set.proxy_ssl.primary.verifypeer =
 1886|      0|      (0 != va_arg(param, long))?TRUE:FALSE;
 1887|       |
 1888|       |    /* Update the current connection proxy_ssl_config. */
 1889|      0|    if(data->conn) {
 1890|      0|      data->conn->proxy_ssl_config.verifypeer =
 1891|      0|        data->set.proxy_ssl.primary.verifypeer;
 1892|      0|    }
 1893|      0|    break;
 1894|      0|#endif
 1895|      0|  case CURLOPT_SSL_VERIFYHOST:
 1896|       |    /*
 1897|       |     * Enable verification of the host name in the peer certificate
 1898|       |     */
 1899|      0|    arg = va_arg(param, long);
 1900|       |
 1901|       |    /* Obviously people are not reading documentation and too many thought
 1902|       |       this argument took a boolean when it wasn't and misused it.
 1903|       |       Treat 1 and 2 the same */
 1904|      0|    data->set.ssl.primary.verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1905|       |
 1906|       |    /* Update the current connection ssl_config. */
 1907|      0|    if(data->conn) {
 1908|      0|      data->conn->ssl_config.verifyhost =
 1909|      0|        data->set.ssl.primary.verifyhost;
 1910|      0|    }
 1911|      0|    break;
 1912|      0|  case CURLOPT_DOH_SSL_VERIFYHOST:
 1913|       |    /*
 1914|       |     * Enable verification of the host name in the peer certificate for DoH
 1915|       |     */
 1916|      0|    arg = va_arg(param, long);
 1917|       |
 1918|       |    /* Treat both 1 and 2 as TRUE */
 1919|      0|    data->set.doh_verifyhost = (bool)((arg & 3) ? TRUE : FALSE);
 1920|      0|    break;
 1921|      0|#ifndef CURL_DISABLE_PROXY
 1922|      0|  case CURLOPT_PROXY_SSL_VERIFYHOST:
 1923|       |    /*
 1924|       |     * Enable verification of the host name in the peer certificate for proxy
 1925|       |     */
 1926|      0|    arg = va_arg(param, long);
 1927|       |
 1928|       |    /* Treat both 1 and 2 as TRUE */
 1929|      0|    data->set.proxy_ssl.primary.verifyhost = (bool)((arg & 3)?TRUE:FALSE);
 1930|       |
 1931|       |    /* Update the current connection proxy_ssl_config. */
 1932|      0|    if(data->conn) {
 1933|      0|      data->conn->proxy_ssl_config.verifyhost =
 1934|      0|        data->set.proxy_ssl.primary.verifyhost;
 1935|      0|    }
 1936|      0|    break;
 1937|      0|#endif
 1938|      0|  case CURLOPT_SSL_VERIFYSTATUS:
 1939|       |    /*
 1940|       |     * Enable certificate status verifying.
 1941|       |     */
 1942|      0|    if(!Curl_ssl_cert_status_request()) {
 1943|      0|      result = CURLE_NOT_BUILT_IN;
 1944|      0|      break;
 1945|      0|    }
 1946|       |
 1947|      0|    data->set.ssl.primary.verifystatus = (0 != va_arg(param, long)) ?
 1948|      0|      TRUE : FALSE;
 1949|       |
 1950|       |    /* Update the current connection ssl_config. */
 1951|      0|    if(data->conn) {
 1952|      0|      data->conn->ssl_config.verifystatus =
 1953|      0|        data->set.ssl.primary.verifystatus;
 1954|      0|    }
 1955|      0|    break;
 1956|      0|  case CURLOPT_DOH_SSL_VERIFYSTATUS:
 1957|       |    /*
 1958|       |     * Enable certificate status verifying for DoH.
 1959|       |     */
 1960|      0|    if(!Curl_ssl_cert_status_request()) {
 1961|      0|      result = CURLE_NOT_BUILT_IN;
 1962|      0|      break;
 1963|      0|    }
 1964|       |
 1965|      0|    data->set.doh_verifystatus = (0 != va_arg(param, long)) ?
 1966|      0|      TRUE : FALSE;
 1967|      0|    break;
 1968|      0|  case CURLOPT_SSL_CTX_FUNCTION:
 1969|       |    /*
 1970|       |     * Set a SSL_CTX callback
 1971|       |     */
 1972|      0|#ifdef USE_SSL
 1973|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1974|      0|      data->set.ssl.fsslctx = va_arg(param, curl_ssl_ctx_callback);
 1975|      0|    else
 1976|      0|#endif
 1977|      0|      result = CURLE_NOT_BUILT_IN;
 1978|      0|    break;
 1979|      0|  case CURLOPT_SSL_CTX_DATA:
 1980|       |    /*
 1981|       |     * Set a SSL_CTX callback parameter pointer
 1982|       |     */
 1983|      0|#ifdef USE_SSL
 1984|      0|    if(Curl_ssl->supports & SSLSUPP_SSL_CTX)
 1985|      0|      data->set.ssl.fsslctxp = va_arg(param, void *);
 1986|      0|    else
 1987|      0|#endif
 1988|      0|      result = CURLE_NOT_BUILT_IN;
 1989|      0|    break;
 1990|      0|  case CURLOPT_SSL_FALSESTART:
 1991|       |    /*
 1992|       |     * Enable TLS false start.
 1993|       |     */
 1994|      0|    if(!Curl_ssl_false_start()) {
 1995|      0|      result = CURLE_NOT_BUILT_IN;
 1996|      0|      break;
 1997|      0|    }
 1998|       |
 1999|      0|    data->set.ssl.falsestart = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2000|      0|    break;
 2001|      0|  case CURLOPT_CERTINFO:
 2002|      0|#ifdef USE_SSL
 2003|      0|    if(Curl_ssl->supports & SSLSUPP_CERTINFO)
 2004|      0|      data->set.ssl.certinfo = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2005|      0|    else
 2006|      0|#endif
 2007|      0|      result = CURLE_NOT_BUILT_IN;
 2008|      0|        break;
 2009|      0|  case CURLOPT_PINNEDPUBLICKEY:
 2010|       |    /*
 2011|       |     * Set pinned public key for SSL connection.
 2012|       |     * Specify file name of the public key in DER format.
 2013|       |     */
 2014|      0|#ifdef USE_SSL
 2015|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2016|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY],
 2017|      0|                              va_arg(param, char *));
 2018|      0|    else
 2019|      0|#endif
 2020|      0|      result = CURLE_NOT_BUILT_IN;
 2021|      0|    break;
 2022|      0|#ifndef CURL_DISABLE_PROXY
 2023|      0|  case CURLOPT_PROXY_PINNEDPUBLICKEY:
 2024|       |    /*
 2025|       |     * Set pinned public key for SSL connection.
 2026|       |     * Specify file name of the public key in DER format.
 2027|       |     */
 2028|      0|#ifdef USE_SSL
 2029|      0|    if(Curl_ssl->supports & SSLSUPP_PINNEDPUBKEY)
 2030|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY],
 2031|      0|                              va_arg(param, char *));
 2032|      0|    else
 2033|      0|#endif
 2034|      0|      result = CURLE_NOT_BUILT_IN;
 2035|      0|    break;
 2036|      0|#endif
 2037|      0|  case CURLOPT_CAINFO:
 2038|       |    /*
 2039|       |     * Set CA info for SSL connection. Specify file name of the CA certificate
 2040|       |     */
 2041|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE],
 2042|      0|                            va_arg(param, char *));
 2043|      0|    break;
 2044|      0|  case CURLOPT_CAINFO_BLOB:
 2045|       |    /*
 2046|       |     * Blob that holds CA info for SSL connection.
 2047|       |     * Specify entire PEM of the CA certificate
 2048|       |     */
 2049|      0|#ifdef USE_SSL
 2050|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2051|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO],
 2052|      0|                               va_arg(param, struct curl_blob *));
 2053|      0|    else
 2054|      0|#endif
 2055|      0|      return CURLE_NOT_BUILT_IN;
 2056|       |
 2057|      0|    break;
 2058|      0|#ifndef CURL_DISABLE_PROXY
 2059|      0|  case CURLOPT_PROXY_CAINFO:
 2060|       |    /*
 2061|       |     * Set CA info SSL connection for proxy. Specify file name of the
 2062|       |     * CA certificate
 2063|       |     */
 2064|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE_PROXY],
 2065|      0|                            va_arg(param, char *));
 2066|      0|    break;
 2067|      0|  case CURLOPT_PROXY_CAINFO_BLOB:
 2068|       |    /*
 2069|       |     * Blob that holds CA info for SSL connection proxy.
 2070|       |     * Specify entire PEM of the CA certificate
 2071|       |     */
 2072|      0|#ifdef USE_SSL
 2073|      0|    if(Curl_ssl->supports & SSLSUPP_CAINFO_BLOB)
 2074|      0|      result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO_PROXY],
 2075|      0|                               va_arg(param, struct curl_blob *));
 2076|      0|    else
 2077|      0|#endif
 2078|      0|      return CURLE_NOT_BUILT_IN;
 2079|      0|    break;
 2080|      0|#endif
 2081|      0|  case CURLOPT_CAPATH:
 2082|       |    /*
 2083|       |     * Set CA path info for SSL connection. Specify directory name of the CA
 2084|       |     * certificates which have been prepared using openssl c_rehash utility.
 2085|       |     */
 2086|      0|#ifdef USE_SSL
 2087|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2088|       |      /* This does not work on windows. */
 2089|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH],
 2090|      0|                              va_arg(param, char *));
 2091|      0|    else
 2092|      0|#endif
 2093|      0|      result = CURLE_NOT_BUILT_IN;
 2094|      0|    break;
 2095|      0|#ifndef CURL_DISABLE_PROXY
 2096|      0|  case CURLOPT_PROXY_CAPATH:
 2097|       |    /*
 2098|       |     * Set CA path info for SSL connection proxy. Specify directory name of the
 2099|       |     * CA certificates which have been prepared using openssl c_rehash utility.
 2100|       |     */
 2101|      0|#ifdef USE_SSL
 2102|      0|    if(Curl_ssl->supports & SSLSUPP_CA_PATH)
 2103|       |      /* This does not work on windows. */
 2104|      0|      result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH_PROXY],
 2105|      0|                              va_arg(param, char *));
 2106|      0|    else
 2107|      0|#endif
 2108|      0|      result = CURLE_NOT_BUILT_IN;
 2109|      0|    break;
 2110|      0|#endif
 2111|      0|  case CURLOPT_CRLFILE:
 2112|       |    /*
 2113|       |     * Set CRL file info for SSL connection. Specify file name of the CRL
 2114|       |     * to check certificates revocation
 2115|       |     */
 2116|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE],
 2117|      0|                            va_arg(param, char *));
 2118|      0|    break;
 2119|      0|#ifndef CURL_DISABLE_PROXY
 2120|      0|  case CURLOPT_PROXY_CRLFILE:
 2121|       |    /*
 2122|       |     * Set CRL file info for SSL connection for proxy. Specify file name of the
 2123|       |     * CRL to check certificates revocation
 2124|       |     */
 2125|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE_PROXY],
 2126|      0|                            va_arg(param, char *));
 2127|      0|    break;
 2128|      0|#endif
 2129|      0|  case CURLOPT_ISSUERCERT:
 2130|       |    /*
 2131|       |     * Set Issuer certificate file
 2132|       |     * to check certificates issuer
 2133|       |     */
 2134|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT],
 2135|      0|                            va_arg(param, char *));
 2136|      0|    break;
 2137|      0|  case CURLOPT_ISSUERCERT_BLOB:
 2138|       |    /*
 2139|       |     * Blob that holds Issuer certificate to check certificates issuer
 2140|       |     */
 2141|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT],
 2142|      0|                             va_arg(param, struct curl_blob *));
 2143|      0|    break;
 2144|      0|#ifndef CURL_DISABLE_PROXY
 2145|      0|  case CURLOPT_PROXY_ISSUERCERT:
 2146|       |    /*
 2147|       |     * Set Issuer certificate file
 2148|       |     * to check certificates issuer
 2149|       |     */
 2150|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT_PROXY],
 2151|      0|                            va_arg(param, char *));
 2152|      0|    break;
 2153|      0|  case CURLOPT_PROXY_ISSUERCERT_BLOB:
 2154|       |    /*
 2155|       |     * Blob that holds Issuer certificate to check certificates issuer
 2156|       |     */
 2157|      0|    result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY],
 2158|      0|                             va_arg(param, struct curl_blob *));
 2159|      0|    break;
 2160|      0|#endif
 2161|      0|#ifndef CURL_DISABLE_TELNET
 2162|      0|  case CURLOPT_TELNETOPTIONS:
 2163|       |    /*
 2164|       |     * Set a linked list of telnet options
 2165|       |     */
 2166|      0|    data->set.telnet_options = va_arg(param, struct curl_slist *);
 2167|      0|    break;
 2168|      0|#endif
 2169|      0|  case CURLOPT_BUFFERSIZE:
 2170|       |    /*
 2171|       |     * The application kindly asks for a differently sized receive buffer.
 2172|       |     * If it seems reasonable, we'll use it.
 2173|       |     */
 2174|      0|    if(data->state.buffer)
 2175|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2176|       |
 2177|      0|    arg = va_arg(param, long);
 2178|       |
 2179|      0|    if(arg > READBUFFER_MAX)
 2180|      0|      arg = READBUFFER_MAX;
 2181|      0|    else if(arg < 1)
 2182|      0|      arg = READBUFFER_SIZE;
 2183|      0|    else if(arg < READBUFFER_MIN)
 2184|      0|      arg = READBUFFER_MIN;
 2185|       |
 2186|      0|    data->set.buffer_size = arg;
 2187|      0|    break;
 2188|       |
 2189|      0|  case CURLOPT_UPLOAD_BUFFERSIZE:
 2190|       |    /*
 2191|       |     * The application kindly asks for a differently sized upload buffer.
 2192|       |     * Cap it to sensible.
 2193|       |     */
 2194|      0|    arg = va_arg(param, long);
 2195|       |
 2196|      0|    if(arg > UPLOADBUFFER_MAX)
 2197|      0|      arg = UPLOADBUFFER_MAX;
 2198|      0|    else if(arg < UPLOADBUFFER_MIN)
 2199|      0|      arg = UPLOADBUFFER_MIN;
 2200|       |
 2201|      0|    data->set.upload_buffer_size = (unsigned int)arg;
 2202|      0|    Curl_safefree(data->state.ulbuf); /* force a realloc next opportunity */
 2203|      0|    break;
 2204|       |
 2205|      0|  case CURLOPT_NOSIGNAL:
 2206|       |    /*
 2207|       |     * The application asks not to set any signal() or alarm() handlers,
 2208|       |     * even when using a timeout.
 2209|       |     */
 2210|      0|    data->set.no_signal = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2211|      0|    break;
 2212|       |
 2213|      0|  case CURLOPT_SHARE:
 2214|      0|  {
 2215|      0|    struct Curl_share *set;
 2216|      0|    set = va_arg(param, struct Curl_share *);
 2217|       |
 2218|       |    /* disconnect from old share, if any */
 2219|      0|    if(data->share) {
 2220|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2221|       |
 2222|      0|      if(data->dns.hostcachetype == HCACHE_SHARED) {
 2223|      0|        data->dns.hostcache = NULL;
 2224|      0|        data->dns.hostcachetype = HCACHE_NONE;
 2225|      0|      }
 2226|       |
 2227|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2228|      0|      if(data->share->cookies == data->cookies)
 2229|      0|        data->cookies = NULL;
 2230|      0|#endif
 2231|       |
 2232|      0|      if(data->share->sslsession == data->state.session)
 2233|      0|        data->state.session = NULL;
 2234|       |
 2235|       |#ifdef USE_LIBPSL
 2236|       |      if(data->psl == &data->share->psl)
 2237|       |        data->psl = data->multi? &data->multi->psl: NULL;
 2238|       |#endif
 2239|       |
 2240|      0|      data->share->dirty--;
 2241|       |
 2242|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2243|      0|      data->share = NULL;
 2244|      0|    }
 2245|       |
 2246|      0|    if(GOOD_SHARE_HANDLE(set))
 2247|       |      /* use new share if it set */
 2248|      0|      data->share = set;
 2249|      0|    if(data->share) {
 2250|       |
 2251|      0|      Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
 2252|       |
 2253|      0|      data->share->dirty++;
 2254|       |
 2255|      0|      if(data->share->specifier & (1<< CURL_LOCK_DATA_DNS)) {
 2256|       |        /* use shared host cache */
 2257|      0|        data->dns.hostcache = &data->share->hostcache;
 2258|      0|        data->dns.hostcachetype = HCACHE_SHARED;
 2259|      0|      }
 2260|      0|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)
 2261|      0|      if(data->share->cookies) {
 2262|       |        /* use shared cookie list, first free own one if any */
 2263|      0|        Curl_cookie_cleanup(data->cookies);
 2264|       |        /* enable cookies since we now use a share that uses cookies! */
 2265|      0|        data->cookies = data->share->cookies;
 2266|      0|      }
 2267|      0|#endif   /* CURL_DISABLE_HTTP */
 2268|      0|      if(data->share->sslsession) {
 2269|      0|        data->set.general_ssl.max_ssl_sessions = data->share->max_ssl_sessions;
 2270|      0|        data->state.session = data->share->sslsession;
 2271|      0|      }
 2272|       |#ifdef USE_LIBPSL
 2273|       |      if(data->share->specifier & (1 << CURL_LOCK_DATA_PSL))
 2274|       |        data->psl = &data->share->psl;
 2275|       |#endif
 2276|       |
 2277|      0|      Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
 2278|      0|    }
 2279|       |    /* check for host cache not needed,
 2280|       |     * it will be done by curl_easy_perform */
 2281|      0|  }
 2282|      0|  break;
 2283|       |
 2284|      0|  case CURLOPT_PRIVATE:
 2285|       |    /*
 2286|       |     * Set private data pointer.
 2287|       |     */
 2288|      0|    data->set.private_data = va_arg(param, void *);
 2289|      0|    break;
 2290|       |
 2291|      0|  case CURLOPT_MAXFILESIZE:
 2292|       |    /*
 2293|       |     * Set the maximum size of a file to download.
 2294|       |     */
 2295|      0|    arg = va_arg(param, long);
 2296|      0|    if(arg < 0)
 2297|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2298|      0|    data->set.max_filesize = arg;
 2299|      0|    break;
 2300|       |
 2301|      0|#ifdef USE_SSL
 2302|      0|  case CURLOPT_USE_SSL:
 2303|       |    /*
 2304|       |     * Make transfers attempt to use SSL/TLS.
 2305|       |     */
 2306|      0|    arg = va_arg(param, long);
 2307|      0|    if((arg < CURLUSESSL_NONE) || (arg >= CURLUSESSL_LAST))
 2308|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2309|      0|    data->set.use_ssl = (curl_usessl)arg;
 2310|      0|    break;
 2311|       |
 2312|      0|  case CURLOPT_SSL_OPTIONS:
 2313|      0|    arg = va_arg(param, long);
 2314|      0|    data->set.ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2315|      0|    data->set.ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2316|      0|    data->set.ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2317|      0|    data->set.ssl.revoke_best_effort = !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2318|      0|    data->set.ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2319|      0|    data->set.ssl.auto_client_cert = !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2320|       |    /* If a setting is added here it should also be added in dohprobe()
 2321|       |       which sets its own CURLOPT_SSL_OPTIONS based on these settings. */
 2322|      0|    break;
 2323|       |
 2324|      0|#ifndef CURL_DISABLE_PROXY
 2325|      0|  case CURLOPT_PROXY_SSL_OPTIONS:
 2326|      0|    arg = va_arg(param, long);
 2327|      0|    data->set.proxy_ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);
 2328|      0|    data->set.proxy_ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);
 2329|      0|    data->set.proxy_ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);
 2330|      0|    data->set.proxy_ssl.revoke_best_effort =
 2331|      0|      !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);
 2332|      0|    data->set.proxy_ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);
 2333|      0|    data->set.proxy_ssl.auto_client_cert =
 2334|      0|      !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);
 2335|      0|    break;
 2336|      0|#endif
 2337|       |
 2338|      0|  case CURLOPT_SSL_EC_CURVES:
 2339|       |    /*
 2340|       |     * Set accepted curves in SSL connection setup.
 2341|       |     * Specify colon-delimited list of curve algorithm names.
 2342|       |     */
 2343|      0|    result = Curl_setstropt(&data->set.str[STRING_SSL_EC_CURVES],
 2344|      0|                            va_arg(param, char *));
 2345|      0|    break;
 2346|      0|#endif
 2347|      0|  case CURLOPT_IPRESOLVE:
 2348|      0|    arg = va_arg(param, long);
 2349|      0|    if((arg < CURL_IPRESOLVE_WHATEVER) || (arg > CURL_IPRESOLVE_V6))
 2350|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2351|      0|    data->set.ipver = (unsigned char) arg;
 2352|      0|    break;
 2353|       |
 2354|      0|  case CURLOPT_MAXFILESIZE_LARGE:
 2355|       |    /*
 2356|       |     * Set the maximum size of a file to download.
 2357|       |     */
 2358|      0|    bigsize = va_arg(param, curl_off_t);
 2359|      0|    if(bigsize < 0)
 2360|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2361|      0|    data->set.max_filesize = bigsize;
 2362|      0|    break;
 2363|       |
 2364|      0|  case CURLOPT_TCP_NODELAY:
 2365|       |    /*
 2366|       |     * Enable or disable TCP_NODELAY, which will disable/enable the Nagle
 2367|       |     * algorithm
 2368|       |     */
 2369|      0|    data->set.tcp_nodelay = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2370|      0|    break;
 2371|       |
 2372|      0|  case CURLOPT_IGNORE_CONTENT_LENGTH:
 2373|      0|    data->set.ignorecl = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2374|      0|    break;
 2375|       |
 2376|      0|  case CURLOPT_CONNECT_ONLY:
 2377|       |    /*
 2378|       |     * No data transfer, set up connection and let application use the socket
 2379|       |     */
 2380|      0|    data->set.connect_only = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2381|      0|    break;
 2382|       |
 2383|  2.97k|  case CURLOPT_SOCKOPTFUNCTION:
 2384|       |    /*
 2385|       |     * socket callback function: called after socket() but before connect()
 2386|       |     */
 2387|  2.97k|    data->set.fsockopt = va_arg(param, curl_sockopt_callback);
 2388|  2.97k|    break;
 2389|       |
 2390|      0|  case CURLOPT_SOCKOPTDATA:
 2391|       |    /*
 2392|       |     * socket callback data pointer. Might be NULL.
 2393|       |     */
 2394|      0|    data->set.sockopt_client = va_arg(param, void *);
 2395|      0|    break;
 2396|       |
 2397|  2.97k|  case CURLOPT_OPENSOCKETFUNCTION:
 2398|       |    /*
 2399|       |     * open/create socket callback function: called instead of socket(),
 2400|       |     * before connect()
 2401|       |     */
 2402|  2.97k|    data->set.fopensocket = va_arg(param, curl_opensocket_callback);
 2403|  2.97k|    break;
 2404|       |
 2405|  2.97k|  case CURLOPT_OPENSOCKETDATA:
 2406|       |    /*
 2407|       |     * socket callback data pointer. Might be NULL.
 2408|       |     */
 2409|  2.97k|    data->set.opensocket_client = va_arg(param, void *);
 2410|  2.97k|    break;
 2411|       |
 2412|      0|  case CURLOPT_CLOSESOCKETFUNCTION:
 2413|       |    /*
 2414|       |     * close socket callback function: called instead of close()
 2415|       |     * when shutting down a connection
 2416|       |     */
 2417|      0|    data->set.fclosesocket = va_arg(param, curl_closesocket_callback);
 2418|      0|    break;
 2419|       |
 2420|      0|  case CURLOPT_RESOLVER_START_FUNCTION:
 2421|       |    /*
 2422|       |     * resolver start callback function: called before a new resolver request
 2423|       |     * is started
 2424|       |     */
 2425|      0|    data->set.resolver_start = va_arg(param, curl_resolver_start_callback);
 2426|      0|    break;
 2427|       |
 2428|      0|  case CURLOPT_RESOLVER_START_DATA:
 2429|       |    /*
 2430|       |     * resolver start callback data pointer. Might be NULL.
 2431|       |     */
 2432|      0|    data->set.resolver_start_client = va_arg(param, void *);
 2433|      0|    break;
 2434|       |
 2435|      0|  case CURLOPT_CLOSESOCKETDATA:
 2436|       |    /*
 2437|       |     * socket callback data pointer. Might be NULL.
 2438|       |     */
 2439|      0|    data->set.closesocket_client = va_arg(param, void *);
 2440|      0|    break;
 2441|       |
 2442|      0|  case CURLOPT_SSL_SESSIONID_CACHE:
 2443|      0|    data->set.ssl.primary.sessionid = (0 != va_arg(param, long)) ?
 2444|      0|      TRUE : FALSE;
 2445|      0|#ifndef CURL_DISABLE_PROXY
 2446|      0|    data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;
 2447|      0|#endif
 2448|      0|    break;
 2449|       |
 2450|       |#ifdef USE_SSH
 2451|       |    /* we only include SSH options if explicitly built to support SSH */
 2452|       |  case CURLOPT_SSH_AUTH_TYPES:
 2453|       |    data->set.ssh_auth_types = va_arg(param, long);
 2454|       |    break;
 2455|       |
 2456|       |  case CURLOPT_SSH_PUBLIC_KEYFILE:
 2457|       |    /*
 2458|       |     * Use this file instead of the $HOME/.ssh/id_dsa.pub file
 2459|       |     */
 2460|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PUBLIC_KEY],
 2461|       |                            va_arg(param, char *));
 2462|       |    break;
 2463|       |
 2464|       |  case CURLOPT_SSH_PRIVATE_KEYFILE:
 2465|       |    /*
 2466|       |     * Use this file instead of the $HOME/.ssh/id_dsa file
 2467|       |     */
 2468|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_PRIVATE_KEY],
 2469|       |                            va_arg(param, char *));
 2470|       |    break;
 2471|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
 2472|       |    /*
 2473|       |     * Option to allow for the MD5 of the host public key to be checked
 2474|       |     * for validation purposes.
 2475|       |     */
 2476|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5],
 2477|       |                            va_arg(param, char *));
 2478|       |    break;
 2479|       |
 2480|       |  case CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256:
 2481|       |    /*
 2482|       |     * Option to allow for the SHA256 of the host public key to be checked
 2483|       |     * for validation purposes.
 2484|       |     */
 2485|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_SHA256],
 2486|       |                            va_arg(param, char *));
 2487|       |    break;
 2488|       |
 2489|       |  case CURLOPT_SSH_KNOWNHOSTS:
 2490|       |    /*
 2491|       |     * Store the file name to read known hosts from.
 2492|       |     */
 2493|       |    result = Curl_setstropt(&data->set.str[STRING_SSH_KNOWNHOSTS],
 2494|       |                            va_arg(param, char *));
 2495|       |    break;
 2496|       |
 2497|       |  case CURLOPT_SSH_KEYFUNCTION:
 2498|       |    /* setting to NULL is fine since the ssh.c functions themselves will
 2499|       |       then revert to use the internal default */
 2500|       |    data->set.ssh_keyfunc = va_arg(param, curl_sshkeycallback);
 2501|       |    break;
 2502|       |
 2503|       |  case CURLOPT_SSH_KEYDATA:
 2504|       |    /*
 2505|       |     * Custom client data to pass to the SSH keyfunc callback
 2506|       |     */
 2507|       |    data->set.ssh_keyfunc_userp = va_arg(param, void *);
 2508|       |    break;
 2509|       |
 2510|       |  case CURLOPT_SSH_COMPRESSION:
 2511|       |    data->set.ssh_compression = (0 != va_arg(param, long))?TRUE:FALSE;
 2512|       |    break;
 2513|       |#endif /* USE_SSH */
 2514|       |
 2515|      0|  case CURLOPT_HTTP_TRANSFER_DECODING:
 2516|       |    /*
 2517|       |     * disable libcurl transfer encoding is used
 2518|       |     */
 2519|      0|#ifndef USE_HYPER
 2520|      0|    data->set.http_te_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2521|      0|    break;
 2522|       |#else
 2523|       |    return CURLE_NOT_BUILT_IN; /* hyper doesn't support */
 2524|       |#endif
 2525|       |
 2526|      0|  case CURLOPT_HTTP_CONTENT_DECODING:
 2527|       |    /*
 2528|       |     * raw data passed to the application when content encoding is used
 2529|       |     */
 2530|      0|    data->set.http_ce_skip = (0 == va_arg(param, long)) ? TRUE : FALSE;
 2531|      0|    break;
 2532|       |
 2533|      0|#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)
 2534|      0|  case CURLOPT_NEW_FILE_PERMS:
 2535|       |    /*
 2536|       |     * Uses these permissions instead of 0644
 2537|       |     */
 2538|      0|    arg = va_arg(param, long);
 2539|      0|    if((arg < 0) || (arg > 0777))
 2540|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2541|      0|    data->set.new_file_perms = arg;
 2542|      0|    break;
 2543|       |
 2544|      0|  case CURLOPT_NEW_DIRECTORY_PERMS:
 2545|       |    /*
 2546|       |     * Uses these permissions instead of 0755
 2547|       |     */
 2548|      0|    arg = va_arg(param, long);
 2549|      0|    if((arg < 0) || (arg > 0777))
 2550|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2551|      0|    data->set.new_directory_perms = arg;
 2552|      0|    break;
 2553|      0|#endif
 2554|       |
 2555|      0|  case CURLOPT_ADDRESS_SCOPE:
 2556|       |    /*
 2557|       |     * Use this scope id when using IPv6
 2558|       |     * We always get longs when passed plain numericals so we should check
 2559|       |     * that the value fits into an unsigned 32 bit integer.
 2560|       |     */
 2561|      0|    uarg = va_arg(param, unsigned long);
 2562|      0|#if SIZEOF_LONG > 4
 2563|      0|    if(uarg > UINT_MAX)
 2564|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2565|      0|#endif
 2566|      0|    data->set.scope_id = (unsigned int)uarg;
 2567|      0|    break;
 2568|       |
 2569|  2.97k|  case CURLOPT_PROTOCOLS:
 2570|       |    /* set the bitmask for the protocols that are allowed to be used for the
 2571|       |       transfer, which thus helps the app which takes URLs from users or other
 2572|       |       external inputs and want to restrict what protocol(s) to deal
 2573|       |       with. Defaults to CURLPROTO_ALL. */
 2574|  2.97k|    data->set.allowed_protocols = va_arg(param, long);
 2575|  2.97k|    break;
 2576|       |
 2577|      0|  case CURLOPT_REDIR_PROTOCOLS:
 2578|       |    /* set the bitmask for the protocols that libcurl is allowed to follow to,
 2579|       |       as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
 2580|       |       to be set in both bitmasks to be allowed to get redirected to. */
 2581|      0|    data->set.redir_protocols = va_arg(param, long);
 2582|      0|    break;
 2583|       |
 2584|      0|  case CURLOPT_DEFAULT_PROTOCOL:
 2585|       |    /* Set the protocol to use when the URL doesn't include any protocol */
 2586|      0|    result = Curl_setstropt(&data->set.str[STRING_DEFAULT_PROTOCOL],
 2587|      0|                            va_arg(param, char *));
 2588|      0|    break;
 2589|      0|#ifndef CURL_DISABLE_SMTP
 2590|     44|  case CURLOPT_MAIL_FROM:
 2591|       |    /* Set the SMTP mail originator */
 2592|     44|    result = Curl_setstropt(&data->set.str[STRING_MAIL_FROM],
 2593|     44|                            va_arg(param, char *));
 2594|     44|    break;
 2595|       |
 2596|      3|  case CURLOPT_MAIL_AUTH:
 2597|       |    /* Set the SMTP auth originator */
 2598|      3|    result = Curl_setstropt(&data->set.str[STRING_MAIL_AUTH],
 2599|      3|                            va_arg(param, char *));
 2600|      3|    break;
 2601|       |
 2602|    107|  case CURLOPT_MAIL_RCPT:
 2603|       |    /* Set the list of mail recipients */
 2604|    107|    data->set.mail_rcpt = va_arg(param, struct curl_slist *);
 2605|    107|    break;
 2606|      0|  case CURLOPT_MAIL_RCPT_ALLLOWFAILS:
 2607|       |    /* allow RCPT TO command to fail for some recipients */
 2608|      0|    data->set.mail_rcpt_allowfails = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2609|      0|    break;
 2610|      0|#endif
 2611|       |
 2612|      0|  case CURLOPT_SASL_AUTHZID:
 2613|       |    /* Authorisation identity (identity to act as) */
 2614|      0|    result = Curl_setstropt(&data->set.str[STRING_SASL_AUTHZID],
 2615|      0|                            va_arg(param, char *));
 2616|      0|    break;
 2617|       |
 2618|      0|  case CURLOPT_SASL_IR:
 2619|       |    /* Enable/disable SASL initial response */
 2620|      0|    data->set.sasl_ir = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2621|      0|    break;
 2622|      0|#ifndef CURL_DISABLE_RTSP
 2623|      1|  case CURLOPT_RTSP_REQUEST:
 2624|      1|  {
 2625|       |    /*
 2626|       |     * Set the RTSP request method (OPTIONS, SETUP, PLAY, etc...)
 2627|       |     * Would this be better if the RTSPREQ_* were just moved into here?
 2628|       |     */
 2629|      1|    long in_rtspreq = va_arg(param, long);
 2630|      1|    Curl_RtspReq rtspreq = RTSPREQ_NONE;
 2631|      1|    switch(in_rtspreq) {
 2632|      0|    case CURL_RTSPREQ_OPTIONS:
 2633|      0|      rtspreq = RTSPREQ_OPTIONS;
 2634|      0|      break;
 2635|       |
 2636|      0|    case CURL_RTSPREQ_DESCRIBE:
 2637|      0|      rtspreq = RTSPREQ_DESCRIBE;
 2638|      0|      break;
 2639|       |
 2640|      0|    case CURL_RTSPREQ_ANNOUNCE:
 2641|      0|      rtspreq = RTSPREQ_ANNOUNCE;
 2642|      0|      break;
 2643|       |
 2644|      0|    case CURL_RTSPREQ_SETUP:
 2645|      0|      rtspreq = RTSPREQ_SETUP;
 2646|      0|      break;
 2647|       |
 2648|      0|    case CURL_RTSPREQ_PLAY:
 2649|      0|      rtspreq = RTSPREQ_PLAY;
 2650|      0|      break;
 2651|       |
 2652|      0|    case CURL_RTSPREQ_PAUSE:
 2653|      0|      rtspreq = RTSPREQ_PAUSE;
 2654|      0|      break;
 2655|       |
 2656|      0|    case CURL_RTSPREQ_TEARDOWN:
 2657|      0|      rtspreq = RTSPREQ_TEARDOWN;
 2658|      0|      break;
 2659|       |
 2660|      0|    case CURL_RTSPREQ_GET_PARAMETER:
 2661|      0|      rtspreq = RTSPREQ_GET_PARAMETER;
 2662|      0|      break;
 2663|       |
 2664|      0|    case CURL_RTSPREQ_SET_PARAMETER:
 2665|      0|      rtspreq = RTSPREQ_SET_PARAMETER;
 2666|      0|      break;
 2667|       |
 2668|      0|    case CURL_RTSPREQ_RECORD:
 2669|      0|      rtspreq = RTSPREQ_RECORD;
 2670|      0|      break;
 2671|       |
 2672|      0|    case CURL_RTSPREQ_RECEIVE:
 2673|      0|      rtspreq = RTSPREQ_RECEIVE;
 2674|      0|      break;
 2675|      1|    default:
 2676|      1|      rtspreq = RTSPREQ_NONE;
 2677|      1|    }
 2678|       |
 2679|      1|    data->set.rtspreq = rtspreq;
 2680|      1|    break;
 2681|      1|  }
 2682|       |
 2683|       |
 2684|      6|  case CURLOPT_RTSP_SESSION_ID:
 2685|       |    /*
 2686|       |     * Set the RTSP Session ID manually. Useful if the application is
 2687|       |     * resuming a previously established RTSP session
 2688|       |     */
 2689|      6|    result = Curl_setstropt(&data->set.str[STRING_RTSP_SESSION_ID],
 2690|      6|                            va_arg(param, char *));
 2691|      6|    break;
 2692|       |
 2693|      6|  case CURLOPT_RTSP_STREAM_URI:
 2694|       |    /*
 2695|       |     * Set the Stream URI for the RTSP request. Unless the request is
 2696|       |     * for generic server options, the application will need to set this.
 2697|       |     */
 2698|      6|    result = Curl_setstropt(&data->set.str[STRING_RTSP_STREAM_URI],
 2699|      6|                            va_arg(param, char *));
 2700|      6|    break;
 2701|       |
 2702|      1|  case CURLOPT_RTSP_TRANSPORT:
 2703|       |    /*
 2704|       |     * The content of the Transport: header for the RTSP request
 2705|       |     */
 2706|      1|    result = Curl_setstropt(&data->set.str[STRING_RTSP_TRANSPORT],
 2707|      1|                            va_arg(param, char *));
 2708|      1|    break;
 2709|       |
 2710|      0|  case CURLOPT_RTSP_CLIENT_CSEQ:
 2711|       |    /*
 2712|       |     * Set the CSEQ number to issue for the next RTSP request. Useful if the
 2713|       |     * application is resuming a previously broken connection. The CSEQ
 2714|       |     * will increment from this new number henceforth.
 2715|       |     */
 2716|      0|    data->state.rtsp_next_client_CSeq = va_arg(param, long);
 2717|      0|    break;
 2718|       |
 2719|      0|  case CURLOPT_RTSP_SERVER_CSEQ:
 2720|       |    /* Same as the above, but for server-initiated requests */
 2721|      0|    data->state.rtsp_next_server_CSeq = va_arg(param, long);
 2722|      0|    break;
 2723|       |
 2724|      0|  case CURLOPT_INTERLEAVEDATA:
 2725|      0|    data->set.rtp_out = va_arg(param, void *);
 2726|      0|    break;
 2727|      0|  case CURLOPT_INTERLEAVEFUNCTION:
 2728|       |    /* Set the user defined RTP write function */
 2729|      0|    data->set.fwrite_rtp = va_arg(param, curl_write_callback);
 2730|      0|    break;
 2731|      0|#endif
 2732|      0|#ifndef CURL_DISABLE_FTP
 2733|     54|  case CURLOPT_WILDCARDMATCH:
 2734|     54|    data->set.wildcard_enabled = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2735|     54|    break;
 2736|      0|  case CURLOPT_CHUNK_BGN_FUNCTION:
 2737|      0|    data->set.chunk_bgn = va_arg(param, curl_chunk_bgn_callback);
 2738|      0|    break;
 2739|      0|  case CURLOPT_CHUNK_END_FUNCTION:
 2740|      0|    data->set.chunk_end = va_arg(param, curl_chunk_end_callback);
 2741|      0|    break;
 2742|      0|  case CURLOPT_FNMATCH_FUNCTION:
 2743|      0|    data->set.fnmatch = va_arg(param, curl_fnmatch_callback);
 2744|      0|    break;
 2745|      0|  case CURLOPT_CHUNK_DATA:
 2746|      0|    data->wildcard.customptr = va_arg(param, void *);
 2747|      0|    break;
 2748|      0|  case CURLOPT_FNMATCH_DATA:
 2749|      0|    data->set.fnmatch_data = va_arg(param, void *);
 2750|      0|    break;
 2751|      0|#endif
 2752|      0|#ifdef USE_TLS_SRP
 2753|      0|  case CURLOPT_TLSAUTH_USERNAME:
 2754|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME],
 2755|      0|                            va_arg(param, char *));
 2756|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2757|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2758|      0|    break;
 2759|      0|  case CURLOPT_PROXY_TLSAUTH_USERNAME:
 2760|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],
 2761|      0|                            va_arg(param, char *));
 2762|      0|#ifndef CURL_DISABLE_PROXY
 2763|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2764|      0|       !data->set.proxy_ssl.authtype)
 2765|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2766|      0|#endif
 2767|      0|    break;
 2768|      0|  case CURLOPT_TLSAUTH_PASSWORD:
 2769|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD],
 2770|      0|                            va_arg(param, char *));
 2771|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME] && !data->set.ssl.authtype)
 2772|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2773|      0|    break;
 2774|      0|  case CURLOPT_PROXY_TLSAUTH_PASSWORD:
 2775|      0|    result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],
 2776|      0|                            va_arg(param, char *));
 2777|      0|#ifndef CURL_DISABLE_PROXY
 2778|      0|    if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&
 2779|      0|       !data->set.proxy_ssl.authtype)
 2780|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP; /* default to SRP */
 2781|      0|#endif
 2782|      0|    break;
 2783|      0|  case CURLOPT_TLSAUTH_TYPE:
 2784|      0|    argptr = va_arg(param, char *);
 2785|      0|    if(!argptr ||
 2786|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2787|      0|      data->set.ssl.authtype = CURL_TLSAUTH_SRP;
 2788|      0|    else
 2789|      0|      data->set.ssl.authtype = CURL_TLSAUTH_NONE;
 2790|      0|    break;
 2791|      0|#ifndef CURL_DISABLE_PROXY
 2792|      0|  case CURLOPT_PROXY_TLSAUTH_TYPE:
 2793|      0|    argptr = va_arg(param, char *);
 2794|      0|    if(!argptr ||
 2795|      0|       strncasecompare(argptr, "SRP", strlen("SRP")))
 2796|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_SRP;
 2797|      0|    else
 2798|      0|      data->set.proxy_ssl.authtype = CURL_TLSAUTH_NONE;
 2799|      0|    break;
 2800|      0|#endif
 2801|      0|#endif
 2802|       |#ifdef USE_ARES
 2803|       |  case CURLOPT_DNS_SERVERS:
 2804|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],
 2805|       |                            va_arg(param, char *));
 2806|       |    if(result)
 2807|       |      return result;
 2808|       |    result = Curl_set_dns_servers(data, data->set.str[STRING_DNS_SERVERS]);
 2809|       |    break;
 2810|       |  case CURLOPT_DNS_INTERFACE:
 2811|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_INTERFACE],
 2812|       |                            va_arg(param, char *));
 2813|       |    if(result)
 2814|       |      return result;
 2815|       |    result = Curl_set_dns_interface(data, data->set.str[STRING_DNS_INTERFACE]);
 2816|       |    break;
 2817|       |  case CURLOPT_DNS_LOCAL_IP4:
 2818|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP4],
 2819|       |                            va_arg(param, char *));
 2820|       |    if(result)
 2821|       |      return result;
 2822|       |    result = Curl_set_dns_local_ip4(data, data->set.str[STRING_DNS_LOCAL_IP4]);
 2823|       |    break;
 2824|       |  case CURLOPT_DNS_LOCAL_IP6:
 2825|       |    result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP6],
 2826|       |                            va_arg(param, char *));
 2827|       |    if(result)
 2828|       |      return result;
 2829|       |    result = Curl_set_dns_local_ip6(data, data->set.str[STRING_DNS_LOCAL_IP6]);
 2830|       |    break;
 2831|       |#endif
 2832|      0|  case CURLOPT_TCP_KEEPALIVE:
 2833|      0|    data->set.tcp_keepalive = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2834|      0|    break;
 2835|      0|  case CURLOPT_TCP_KEEPIDLE:
 2836|      0|    arg = va_arg(param, long);
 2837|      0|    if(arg < 0)
 2838|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2839|      0|    data->set.tcp_keepidle = arg;
 2840|      0|    break;
 2841|      0|  case CURLOPT_TCP_KEEPINTVL:
 2842|      0|    arg = va_arg(param, long);
 2843|      0|    if(arg < 0)
 2844|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2845|      0|    data->set.tcp_keepintvl = arg;
 2846|      0|    break;
 2847|      0|  case CURLOPT_TCP_FASTOPEN:
 2848|      0|#if defined(CONNECT_DATA_IDEMPOTENT) || defined(MSG_FASTOPEN) || \
 2849|      0|   defined(TCP_FASTOPEN_CONNECT)
 2850|      0|    data->set.tcp_fastopen = (0 != va_arg(param, long))?TRUE:FALSE;
 2851|       |#else
 2852|       |    result = CURLE_NOT_BUILT_IN;
 2853|       |#endif
 2854|      0|    break;
 2855|      0|  case CURLOPT_SSL_ENABLE_NPN:
 2856|      0|    data->set.ssl_enable_npn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2857|      0|    break;
 2858|      0|  case CURLOPT_SSL_ENABLE_ALPN:
 2859|      0|    data->set.ssl_enable_alpn = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2860|      0|    break;
 2861|      0|#ifdef USE_UNIX_SOCKETS
 2862|      0|  case CURLOPT_UNIX_SOCKET_PATH:
 2863|      0|    data->set.abstract_unix_socket = FALSE;
 2864|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2865|      0|                            va_arg(param, char *));
 2866|      0|    break;
 2867|      0|  case CURLOPT_ABSTRACT_UNIX_SOCKET:
 2868|      0|    data->set.abstract_unix_socket = TRUE;
 2869|      0|    result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],
 2870|      0|                            va_arg(param, char *));
 2871|      0|    break;
 2872|      0|#endif
 2873|       |
 2874|      0|  case CURLOPT_PATH_AS_IS:
 2875|      0|    data->set.path_as_is = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2876|      0|    break;
 2877|      0|  case CURLOPT_PIPEWAIT:
 2878|      0|    data->set.pipewait = (0 != va_arg(param, long)) ? TRUE : FALSE;
 2879|      0|    break;
 2880|      0|  case CURLOPT_STREAM_WEIGHT:
 2881|       |#ifndef USE_NGHTTP2
 2882|       |    return CURLE_NOT_BUILT_IN;
 2883|       |#else
 2884|      0|    arg = va_arg(param, long);
 2885|      0|    if((arg >= 1) && (arg <= 256))
 2886|      0|      data->set.stream_weight = (int)arg;
 2887|      0|    break;
 2888|      0|#endif
 2889|      0|  case CURLOPT_STREAM_DEPENDS:
 2890|      0|  case CURLOPT_STREAM_DEPENDS_E:
 2891|      0|  {
 2892|       |#ifndef USE_NGHTTP2
 2893|       |    return CURLE_NOT_BUILT_IN;
 2894|       |#else
 2895|      0|    struct Curl_easy *dep = va_arg(param, struct Curl_easy *);
 2896|      0|    if(!dep || GOOD_EASY_HANDLE(dep)) {
 2897|      0|      if(data->set.stream_depends_on) {
 2898|      0|        Curl_http2_remove_child(data->set.stream_depends_on, data);
 2899|      0|      }
 2900|      0|      Curl_http2_add_child(dep, data, (option == CURLOPT_STREAM_DEPENDS_E));
 2901|      0|    }
 2902|      0|    break;
 2903|      0|#endif
 2904|      0|  }
 2905|  2.97k|  case CURLOPT_CONNECT_TO:
 2906|  2.97k|    data->set.connect_to = va_arg(param, struct curl_slist *);
 2907|  2.97k|    break;
 2908|      0|  case CURLOPT_SUPPRESS_CONNECT_HEADERS:
 2909|      0|    data->set.suppress_connect_headers = (0 != va_arg(param, long))?TRUE:FALSE;
 2910|      0|    break;
 2911|      0|  case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
 2912|      0|    arg = va_arg(param, long);
 2913|      0|    if(arg < 0)
 2914|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2915|      0|    data->set.happy_eyeballs_timeout = arg;
 2916|      0|    break;
 2917|      0|#ifndef CURL_DISABLE_SHUFFLE_DNS
 2918|      0|  case CURLOPT_DNS_SHUFFLE_ADDRESSES:
 2919|      0|    data->set.dns_shuffle_addresses = (0 != va_arg(param, long)) ? TRUE:FALSE;
 2920|      0|    break;
 2921|      0|#endif
 2922|      0|  case CURLOPT_DISALLOW_USERNAME_IN_URL:
 2923|      0|    data->set.disallow_username_in_url =
 2924|      0|      (0 != va_arg(param, long)) ? TRUE : FALSE;
 2925|      0|    break;
 2926|      0|#ifndef CURL_DISABLE_DOH
 2927|      5|  case CURLOPT_DOH_URL:
 2928|      5|    result = Curl_setstropt(&data->set.str[STRING_DOH],
 2929|      5|                            va_arg(param, char *));
 2930|      5|    data->set.doh = data->set.str[STRING_DOH]?TRUE:FALSE;
 2931|      5|    break;
 2932|      0|#endif
 2933|      0|  case CURLOPT_UPKEEP_INTERVAL_MS:
 2934|      0|    arg = va_arg(param, long);
 2935|      0|    if(arg < 0)
 2936|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2937|      0|    data->set.upkeep_interval_ms = arg;
 2938|      0|    break;
 2939|      0|  case CURLOPT_MAXAGE_CONN:
 2940|      0|    arg = va_arg(param, long);
 2941|      0|    if(arg < 0)
 2942|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2943|      0|    data->set.maxage_conn = arg;
 2944|      0|    break;
 2945|      0|  case CURLOPT_MAXLIFETIME_CONN:
 2946|      0|    arg = va_arg(param, long);
 2947|      0|    if(arg < 0)
 2948|      0|      return CURLE_BAD_FUNCTION_ARGUMENT;
 2949|      0|    data->set.maxlifetime_conn = arg;
 2950|      0|    break;
 2951|      0|  case CURLOPT_TRAILERFUNCTION:
 2952|      0|#ifndef CURL_DISABLE_HTTP
 2953|      0|    data->set.trailer_callback = va_arg(param, curl_trailer_callback);
 2954|      0|#endif
 2955|      0|    break;
 2956|      0|  case CURLOPT_TRAILERDATA:
 2957|      0|#ifndef CURL_DISABLE_HTTP
 2958|      0|    data->set.trailer_data = va_arg(param, void *);
 2959|      0|#endif
 2960|      0|    break;
 2961|      0|#ifndef CURL_DISABLE_HSTS
 2962|      0|  case CURLOPT_HSTSREADFUNCTION:
 2963|      0|    data->set.hsts_read = va_arg(param, curl_hstsread_callback);
 2964|      0|    break;
 2965|      0|  case CURLOPT_HSTSREADDATA:
 2966|      0|    data->set.hsts_read_userp = va_arg(param, void *);
 2967|      0|    break;
 2968|      0|  case CURLOPT_HSTSWRITEFUNCTION:
 2969|      0|    data->set.hsts_write = va_arg(param, curl_hstswrite_callback);
 2970|      0|    break;
 2971|      0|  case CURLOPT_HSTSWRITEDATA:
 2972|      0|    data->set.hsts_write_userp = va_arg(param, void *);
 2973|      0|    break;
 2974|      0|  case CURLOPT_HSTS:
 2975|      0|    if(!data->hsts) {
 2976|      0|      data->hsts = Curl_hsts_init();
 2977|      0|      if(!data->hsts)
 2978|      0|        return CURLE_OUT_OF_MEMORY;
 2979|      0|    }
 2980|      0|    argptr = va_arg(param, char *);
 2981|      0|    result = Curl_setstropt(&data->set.str[STRING_HSTS], argptr);
 2982|      0|    if(result)
 2983|      0|      return result;
 2984|      0|    if(argptr)
 2985|      0|      (void)Curl_hsts_loadfile(data, data->hsts, argptr);
 2986|      0|    break;
 2987|      0|  case CURLOPT_HSTS_CTRL:
 2988|      0|    arg = va_arg(param, long);
 2989|      0|    if(arg & CURLHSTS_ENABLE) {
 2990|      0|      if(!data->hsts) {
 2991|      0|        data->hsts = Curl_hsts_init();
 2992|      0|        if(!data->hsts)
 2993|      0|          return CURLE_OUT_OF_MEMORY;
 2994|      0|      }
 2995|      0|    }
 2996|      0|    else
 2997|      0|      Curl_hsts_cleanup(&data->hsts);
 2998|      0|    break;
 2999|      0|#endif
 3000|      0|#ifndef CURL_DISABLE_ALTSVC
 3001|      0|  case CURLOPT_ALTSVC:
 3002|      0|    if(!data->asi) {
 3003|      0|      data->asi = Curl_altsvc_init();
 3004|      0|      if(!data->asi)
 3005|      0|        return CURLE_OUT_OF_MEMORY;
 3006|      0|    }
 3007|      0|    argptr = va_arg(param, char *);
 3008|      0|    result = Curl_setstropt(&data->set.str[STRING_ALTSVC], argptr);
 3009|      0|    if(result)
 3010|      0|      return result;
 3011|      0|    if(argptr)
 3012|      0|      (void)Curl_altsvc_load(data->asi, argptr);
 3013|      0|    break;
 3014|      0|  case CURLOPT_ALTSVC_CTRL:
 3015|      0|    if(!data->asi) {
 3016|      0|      data->asi = Curl_altsvc_init();
 3017|      0|      if(!data->asi)
 3018|      0|        return CURLE_OUT_OF_MEMORY;
 3019|      0|    }
 3020|      0|    arg = va_arg(param, long);
 3021|      0|    result = Curl_altsvc_ctrl(data->asi, arg);
 3022|      0|    if(result)
 3023|      0|      return result;
 3024|      0|    break;
 3025|      0|#endif
 3026|      0|  case CURLOPT_PREREQFUNCTION:
 3027|      0|    data->set.fprereq = va_arg(param, curl_prereq_callback);
 3028|      0|    break;
 3029|      0|  case CURLOPT_PREREQDATA:
 3030|      0|    data->set.prereq_userp = va_arg(param, void *);
 3031|      0|    break;
 3032|      0|  default:
 3033|       |    /* unknown tag and its companion, just ignore: */
 3034|      0|    result = CURLE_UNKNOWN_OPTION;
 3035|      0|    break;
 3036|  40.1k|  }
 3037|       |
 3038|  40.1k|  return result;
 3039|  40.1k|}
curl_easy_setopt:
 3051|  40.1k|{
 3052|  40.1k|  va_list arg;
 3053|  40.1k|  CURLcode result;
 3054|       |
 3055|  40.1k|  if(!data)
 3056|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 3057|       |
 3058|  40.1k|  va_start(arg, tag);
 3059|       |
 3060|  40.1k|  result = Curl_vsetopt(data, tag, arg);
 3061|       |
 3062|  40.1k|  va_end(arg);
 3063|  40.1k|  return result;
 3064|  40.1k|}

Curl_share_lock:
  235|  15.0k|{
  236|  15.0k|  struct Curl_share *share = data->share;
  237|       |
  238|  15.0k|  if(!share)
  239|  15.0k|    return CURLSHE_INVALID;
  240|       |
  241|      0|  if(share->specifier & (1<<type)) {
  242|      0|    if(share->lockfunc) /* only call this if set! */
  243|      0|      share->lockfunc(data, type, accesstype, share->clientdata);
  244|      0|  }
  245|       |  /* else if we don't share this, pretend successful lock */
  246|       |
  247|      0|  return CURLSHE_OK;
  248|  15.0k|}
Curl_share_unlock:
  252|  15.0k|{
  253|  15.0k|  struct Curl_share *share = data->share;
  254|       |
  255|  15.0k|  if(!share)
  256|  15.0k|    return CURLSHE_INVALID;
  257|       |
  258|      0|  if(share->specifier & (1<<type)) {
  259|      0|    if(share->unlockfunc) /* only call this if set! */
  260|      0|      share->unlockfunc (data, type, share->clientdata);
  261|      0|  }
  262|       |
  263|      0|  return CURLSHE_OK;
  264|  15.0k|}

Curl_slist_append_nodup:
   60|  13.4k|{
   61|  13.4k|  struct curl_slist     *last;
   62|  13.4k|  struct curl_slist     *new_item;
   63|       |
   64|  13.4k|  DEBUGASSERT(data);
   65|       |
   66|  13.4k|  new_item = malloc(sizeof(struct curl_slist));
   67|  13.4k|  if(!new_item)
   68|      0|    return NULL;
   69|       |
   70|  13.4k|  new_item->next = NULL;
   71|  13.4k|  new_item->data = data;
   72|       |
   73|       |  /* if this is the first item, then new_item *is* the list */
   74|  13.4k|  if(!list)
   75|  6.05k|    return new_item;
   76|       |
   77|  7.36k|  last = slist_get_last(list);
   78|  7.36k|  last->next = new_item;
   79|  7.36k|  return list;
   80|  13.4k|}
curl_slist_append:
   91|  10.5k|{
   92|  10.5k|  char *dupdata = strdup(data);
   93|       |
   94|  10.5k|  if(!dupdata)
   95|      0|    return NULL;
   96|       |
   97|  10.5k|  list = Curl_slist_append_nodup(list, dupdata);
   98|  10.5k|  if(!list)
   99|      0|    free(dupdata);
  100|       |
  101|  10.5k|  return list;
  102|  10.5k|}
curl_slist_free_all:
  130|  42.6k|{
  131|  42.6k|  struct curl_slist     *next;
  132|  42.6k|  struct curl_slist     *item;
  133|       |
  134|  42.6k|  if(!list)
  135|  36.6k|    return;
  136|       |
  137|  6.05k|  item = list;
  138|  13.4k|  do {
  139|  13.4k|    next = item->next;
  140|  13.4k|    Curl_safefree(item->data);
  141|  13.4k|    free(item);
  142|  13.4k|    item = next;
  143|  13.4k|  } while(next);
  144|  6.05k|}
slist.c:slist_get_last:
   35|  7.36k|{
   36|  7.36k|  struct curl_slist     *item;
   37|       |
   38|       |  /* if caller passed us a NULL, return now */
   39|  7.36k|  if(!list)
   40|      0|    return NULL;
   41|       |
   42|       |  /* loop through to find the last item */
   43|  7.36k|  item = list;
   44|   737k|  while(item->next) {
   45|   730k|    item = item->next;
   46|   730k|  }
   47|  7.36k|  return item;
   48|  7.36k|}

Curl_smtp_escape_eob:
 1823|     32|{
 1824|       |  /* When sending a SMTP payload we must detect CRLF. sequences making sure
 1825|       |     they are sent as CRLF.. instead, as a . on the beginning of a line will
 1826|       |     be deleted by the server when not part of an EOB terminator and a
 1827|       |     genuine CRLF.CRLF which isn't escaped will wrongly be detected as end of
 1828|       |     data by the server
 1829|       |  */
 1830|     32|  ssize_t i;
 1831|     32|  ssize_t si;
 1832|     32|  struct SMTP *smtp = data->req.p.smtp;
 1833|     32|  char *scratch = data->state.scratch;
 1834|     32|  char *newscratch = NULL;
 1835|     32|  char *oldscratch = NULL;
 1836|     32|  size_t eob_sent;
 1837|       |
 1838|       |  /* Do we need to allocate a scratch buffer? */
 1839|     32|  if(!scratch || data->set.crlf) {
 1840|     31|    oldscratch = scratch;
 1841|       |
 1842|     31|    scratch = newscratch = malloc(2 * data->set.upload_buffer_size);
 1843|     31|    if(!newscratch) {
 1844|      0|      failf(data, "Failed to alloc scratch buffer!");
 1845|       |
 1846|      0|      return CURLE_OUT_OF_MEMORY;
 1847|      0|    }
 1848|     31|  }
 1849|     32|  DEBUGASSERT((size_t)data->set.upload_buffer_size >= (size_t)nread);
 1850|       |
 1851|       |  /* Have we already sent part of the EOB? */
 1852|     32|  eob_sent = smtp->eob;
 1853|       |
 1854|       |  /* This loop can be improved by some kind of Boyer-Moore style of
 1855|       |     approach but that is saved for later... */
 1856|   534k|  for(i = 0, si = 0; i < nread; i++) {
 1857|   534k|    if(SMTP_EOB[smtp->eob] == data->req.upload_fromhere[i]) {
 1858|  44.5k|      smtp->eob++;
 1859|       |
 1860|       |      /* Is the EOB potentially the terminating CRLF? */
 1861|  44.5k|      if(2 == smtp->eob || SMTP_EOB_LEN == smtp->eob)
 1862|  33.2k|        smtp->trailing_crlf = TRUE;
 1863|  11.2k|      else
 1864|  11.2k|        smtp->trailing_crlf = FALSE;
 1865|  44.5k|    }
 1866|   490k|    else if(smtp->eob) {
 1867|       |      /* A previous substring matched so output that first */
 1868|  33.3k|      memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
 1869|  33.3k|      si += smtp->eob - eob_sent;
 1870|       |
 1871|       |      /* Then compare the first byte */
 1872|  33.3k|      if(SMTP_EOB[0] == data->req.upload_fromhere[i])
 1873|  22.1k|        smtp->eob = 1;
 1874|  11.2k|      else
 1875|  11.2k|        smtp->eob = 0;
 1876|       |
 1877|  33.3k|      eob_sent = 0;
 1878|       |
 1879|       |      /* Reset the trailing CRLF flag as there was more data */
 1880|  33.3k|      smtp->trailing_crlf = FALSE;
 1881|  33.3k|    }
 1882|       |
 1883|       |    /* Do we have a match for CRLF. as per RFC-5321, sect. 4.5.2 */
 1884|   534k|    if(SMTP_EOB_FIND_LEN == smtp->eob) {
 1885|       |      /* Copy the replacement data to the target buffer */
 1886|     31|      memcpy(&scratch[si], &SMTP_EOB_REPL[eob_sent],
 1887|     31|             SMTP_EOB_REPL_LEN - eob_sent);
 1888|     31|      si += SMTP_EOB_REPL_LEN - eob_sent;
 1889|     31|      smtp->eob = 0;
 1890|     31|      eob_sent = 0;
 1891|     31|    }
 1892|   534k|    else if(!smtp->eob)
 1893|   468k|      scratch[si++] = data->req.upload_fromhere[i];
 1894|   534k|  }
 1895|       |
 1896|     32|  if(smtp->eob - eob_sent) {
 1897|       |    /* A substring matched before processing ended so output that now */
 1898|     22|    memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
 1899|     22|    si += smtp->eob - eob_sent;
 1900|     22|  }
 1901|       |
 1902|       |  /* Only use the new buffer if we replaced something */
 1903|     32|  if(si != nread) {
 1904|       |    /* Upload from the new (replaced) buffer instead */
 1905|     13|    data->req.upload_fromhere = scratch;
 1906|       |
 1907|       |    /* Save the buffer so it can be freed later */
 1908|     13|    data->state.scratch = scratch;
 1909|       |
 1910|       |    /* Free the old scratch buffer */
 1911|     13|    free(oldscratch);
 1912|       |
 1913|       |    /* Set the new amount too */
 1914|     13|    data->req.upload_present = si;
 1915|     13|  }
 1916|     19|  else
 1917|     19|    free(newscratch);
 1918|       |
 1919|     32|  return CURLE_OK;
 1920|     32|}
smtp.c:smtp_multi_statemach:
 1280|  1.73k|{
 1281|  1.73k|  CURLcode result = CURLE_OK;
 1282|  1.73k|  struct connectdata *conn = data->conn;
 1283|  1.73k|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1284|       |
 1285|  1.73k|  if((conn->handler->flags & PROTOPT_SSL) && !smtpc->ssldone) {
 1286|      0|    result = Curl_ssl_connect_nonblocking(data, conn, FALSE,
 1287|      0|                                          FIRSTSOCKET, &smtpc->ssldone);
 1288|      0|    if(result || !smtpc->ssldone)
 1289|      0|      return result;
 1290|      0|  }
 1291|       |
 1292|  1.73k|  result = Curl_pp_statemach(data, &smtpc->pp, FALSE, FALSE);
 1293|  1.73k|  *done = (smtpc->state == SMTP_STOP) ? TRUE : FALSE;
 1294|       |
 1295|  1.73k|  return result;
 1296|  1.73k|}
smtp.c:smtp_getsock:
 1328|  1.35k|{
 1329|  1.35k|  return Curl_pp_getsock(data, &conn->proto.smtpc.pp, socks);
 1330|  1.35k|}
smtp.c:smtp_connect:
 1343|    271|{
 1344|    271|  CURLcode result = CURLE_OK;
 1345|    271|  struct connectdata *conn = data->conn;
 1346|    271|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1347|    271|  struct pingpong *pp = &smtpc->pp;
 1348|       |
 1349|    271|  *done = FALSE; /* default to not done yet */
 1350|       |
 1351|       |  /* We always support persistent connections in SMTP */
 1352|    271|  connkeep(conn, "SMTP default");
 1353|       |
 1354|    271|  PINGPONG_SETUP(pp, smtp_statemachine, smtp_endofresp);
 1355|       |
 1356|       |  /* Initialize the SASL storage */
 1357|    271|  Curl_sasl_init(&smtpc->sasl, data, &saslsmtp);
 1358|       |
 1359|       |  /* Initialise the pingpong layer */
 1360|    271|  Curl_pp_setup(pp);
 1361|    271|  Curl_pp_init(data, pp);
 1362|       |
 1363|       |  /* Parse the URL options */
 1364|    271|  result = smtp_parse_url_options(conn);
 1365|    271|  if(result)
 1366|     18|    return result;
 1367|       |
 1368|       |  /* Parse the URL path */
 1369|    253|  result = smtp_parse_url_path(data);
 1370|    253|  if(result)
 1371|      0|    return result;
 1372|       |
 1373|       |  /* Start off waiting for the server greeting response */
 1374|    253|  state(data, SMTP_SERVERGREET);
 1375|       |
 1376|    253|  result = smtp_multi_statemach(data, done);
 1377|       |
 1378|    253|  return result;
 1379|    253|}
smtp.c:smtp_statemachine:
 1195|  1.82k|{
 1196|  1.82k|  CURLcode result = CURLE_OK;
 1197|  1.82k|  curl_socket_t sock = conn->sock[FIRSTSOCKET];
 1198|  1.82k|  int smtpcode;
 1199|  1.82k|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1200|  1.82k|  struct pingpong *pp = &smtpc->pp;
 1201|  1.82k|  size_t nread = 0;
 1202|       |
 1203|       |  /* Busy upgrading the connection; right now all I/O is SSL/TLS, not SMTP */
 1204|  1.82k|  if(smtpc->state == SMTP_UPGRADETLS)
 1205|      0|    return smtp_perform_upgrade_tls(data);
 1206|       |
 1207|       |  /* Flush any data that needs to be sent */
 1208|  1.82k|  if(pp->sendleft)
 1209|      0|    return Curl_pp_flushsend(data, pp);
 1210|       |
 1211|  4.87k|  do {
 1212|       |    /* Read the response from the server */
 1213|  4.87k|    result = Curl_pp_readresp(data, sock, pp, &smtpcode, &nread);
 1214|  4.87k|    if(result)
 1215|    263|      return result;
 1216|       |
 1217|       |    /* Store the latest response for later retrieval if necessary */
 1218|  4.61k|    if(smtpc->state != SMTP_QUIT && smtpcode != 1)
 1219|  2.02k|      data->info.httpcode = smtpcode;
 1220|       |
 1221|  4.61k|    if(!smtpcode)
 1222|  1.19k|      break;
 1223|       |
 1224|       |    /* We have now received a full SMTP server response */
 1225|  3.41k|    switch(smtpc->state) {
 1226|    221|    case SMTP_SERVERGREET:
 1227|    221|      result = smtp_state_servergreet_resp(data, smtpcode, smtpc->state);
 1228|    221|      break;
 1229|       |
 1230|  2.13k|    case SMTP_EHLO:
 1231|  2.13k|      result = smtp_state_ehlo_resp(data, conn, smtpcode, smtpc->state);
 1232|  2.13k|      break;
 1233|       |
 1234|     14|    case SMTP_HELO:
 1235|     14|      result = smtp_state_helo_resp(data, smtpcode, smtpc->state);
 1236|     14|      break;
 1237|       |
 1238|      0|    case SMTP_STARTTLS:
 1239|      0|      result = smtp_state_starttls_resp(data, smtpcode, smtpc->state);
 1240|      0|      break;
 1241|       |
 1242|      0|    case SMTP_AUTH:
 1243|      0|      result = smtp_state_auth_resp(data, smtpcode, smtpc->state);
 1244|      0|      break;
 1245|       |
 1246|    769|    case SMTP_COMMAND:
 1247|    769|      result = smtp_state_command_resp(data, smtpcode, smtpc->state);
 1248|    769|      break;
 1249|       |
 1250|     46|    case SMTP_MAIL:
 1251|     46|      result = smtp_state_mail_resp(data, smtpcode, smtpc->state);
 1252|     46|      break;
 1253|       |
 1254|    172|    case SMTP_RCPT:
 1255|    172|      result = smtp_state_rcpt_resp(data, conn, smtpcode, smtpc->state);
 1256|    172|      break;
 1257|       |
 1258|     32|    case SMTP_DATA:
 1259|     32|      result = smtp_state_data_resp(data, smtpcode, smtpc->state);
 1260|     32|      break;
 1261|       |
 1262|     13|    case SMTP_POSTDATA:
 1263|     13|      result = smtp_state_postdata_resp(data, smtpcode, smtpc->state);
 1264|     13|      break;
 1265|       |
 1266|     11|    case SMTP_QUIT:
 1267|       |      /* fallthrough, just stop! */
 1268|     11|    default:
 1269|       |      /* internal error */
 1270|     11|      state(data, SMTP_STOP);
 1271|     11|      break;
 1272|  3.41k|    }
 1273|  3.41k|  } while(!result && smtpc->state != SMTP_STOP && Curl_pp_moredata(pp));
 1274|       |
 1275|  1.56k|  return result;
 1276|  1.82k|}
smtp.c:smtp_perform_ehlo:
  327|    219|{
  328|    219|  CURLcode result = CURLE_OK;
  329|    219|  struct connectdata *conn = data->conn;
  330|    219|  struct smtp_conn *smtpc = &conn->proto.smtpc;
  331|       |
  332|    219|  smtpc->sasl.authmechs = SASL_AUTH_NONE; /* No known auth. mechanism yet */
  333|    219|  smtpc->sasl.authused = SASL_AUTH_NONE;  /* Clear the authentication mechanism
  334|       |                                             used for esmtp connections */
  335|    219|  smtpc->tls_supported = FALSE;           /* Clear the TLS capability */
  336|    219|  smtpc->auth_supported = FALSE;          /* Clear the AUTH capability */
  337|       |
  338|       |  /* Send the EHLO command */
  339|    219|  result = Curl_pp_sendf(data, &smtpc->pp, "EHLO %s", smtpc->domain);
  340|       |
  341|    219|  if(!result)
  342|    219|    state(data, SMTP_EHLO);
  343|       |
  344|    219|  return result;
  345|    219|}
smtp.c:smtp_state_servergreet_resp:
  836|    221|{
  837|    221|  CURLcode result = CURLE_OK;
  838|    221|  (void)instate; /* no use for this yet */
  839|       |
  840|    221|  if(smtpcode/100 != 2) {
  841|      2|    failf(data, "Got unexpected smtp-server response: %d", smtpcode);
  842|      2|    result = CURLE_WEIRD_SERVER_REPLY;
  843|      2|  }
  844|    219|  else
  845|    219|    result = smtp_perform_ehlo(data);
  846|       |
  847|    221|  return result;
  848|    221|}
smtp.c:smtp_state_ehlo_resp:
  880|  2.13k|{
  881|  2.13k|  CURLcode result = CURLE_OK;
  882|  2.13k|  struct smtp_conn *smtpc = &conn->proto.smtpc;
  883|  2.13k|  const char *line = data->state.buffer;
  884|  2.13k|  size_t len = strlen(line);
  885|       |
  886|  2.13k|  (void)instate; /* no use for this yet */
  887|       |
  888|  2.13k|  if(smtpcode/100 != 2 && smtpcode != 1) {
  889|     19|    if(data->set.use_ssl <= CURLUSESSL_TRY || conn->ssl[FIRSTSOCKET].use)
  890|     19|      result = smtp_perform_helo(data, conn);
  891|      0|    else {
  892|      0|      failf(data, "Remote access denied: %d", smtpcode);
  893|      0|      result = CURLE_REMOTE_ACCESS_DENIED;
  894|      0|    }
  895|     19|  }
  896|  2.11k|  else if(len >= 4) {
  897|  2.10k|    line += 4;
  898|  2.10k|    len -= 4;
  899|       |
  900|       |    /* Does the server support the STARTTLS capability? */
  901|  2.10k|    if(len >= 8 && !memcmp(line, "STARTTLS", 8))
  902|     40|      smtpc->tls_supported = TRUE;
  903|       |
  904|       |    /* Does the server support the SIZE capability? */
  905|  2.06k|    else if(len >= 4 && !memcmp(line, "SIZE", 4))
  906|     37|      smtpc->size_supported = TRUE;
  907|       |
  908|       |    /* Does the server support the UTF-8 capability? */
  909|  2.03k|    else if(len >= 8 && !memcmp(line, "SMTPUTF8", 8))
  910|      0|      smtpc->utf8_supported = TRUE;
  911|       |
  912|       |    /* Does the server support authentication? */
  913|  2.03k|    else if(len >= 5 && !memcmp(line, "AUTH ", 5)) {
  914|    803|      smtpc->auth_supported = TRUE;
  915|       |
  916|       |      /* Advance past the AUTH keyword */
  917|    803|      line += 5;
  918|    803|      len -= 5;
  919|       |
  920|       |      /* Loop through the data line */
  921|  2.65k|      for(;;) {
  922|  2.65k|        size_t llen;
  923|  2.65k|        size_t wordlen;
  924|  2.65k|        unsigned short mechbit;
  925|       |
  926|  12.0k|        while(len &&
  927|  12.0k|              (*line == ' ' || *line == '\t' ||
  928|  11.2k|               *line == '\r' || *line == '\n')) {
  929|       |
  930|  9.42k|          line++;
  931|  9.42k|          len--;
  932|  9.42k|        }
  933|       |
  934|  2.65k|        if(!len)
  935|    803|          break;
  936|       |
  937|       |        /* Extract the word */
  938|  11.6k|        for(wordlen = 0; wordlen < len && line[wordlen] != ' ' &&
  939|  11.6k|              line[wordlen] != '\t' && line[wordlen] != '\r' &&
  940|  11.6k|              line[wordlen] != '\n';)
  941|  9.76k|          wordlen++;
  942|       |
  943|       |        /* Test the word for a matching authentication mechanism */
  944|  1.85k|        mechbit = Curl_sasl_decode_mech(line, wordlen, &llen);
  945|  1.85k|        if(mechbit && llen == wordlen)
  946|     60|          smtpc->sasl.authmechs |= mechbit;
  947|       |
  948|  1.85k|        line += wordlen;
  949|  1.85k|        len -= wordlen;
  950|  1.85k|      }
  951|    803|    }
  952|       |
  953|  2.10k|    if(smtpcode != 1) {
  954|    129|      if(data->set.use_ssl && !conn->ssl[FIRSTSOCKET].use) {
  955|       |        /* We don't have a SSL/TLS connection yet, but SSL is requested */
  956|      0|        if(smtpc->tls_supported)
  957|       |          /* Switch to TLS connection now */
  958|      0|          result = smtp_perform_starttls(data, conn);
  959|      0|        else if(data->set.use_ssl == CURLUSESSL_TRY)
  960|       |          /* Fallback and carry on with authentication */
  961|      0|          result = smtp_perform_authentication(data);
  962|      0|        else {
  963|      0|          failf(data, "STARTTLS not supported.");
  964|      0|          result = CURLE_USE_SSL_FAILED;
  965|      0|        }
  966|      0|      }
  967|    129|      else
  968|    129|        result = smtp_perform_authentication(data);
  969|    129|    }
  970|  2.10k|  }
  971|      9|  else {
  972|      9|    failf(data, "Unexpectedly short EHLO response");
  973|      9|    result = CURLE_WEIRD_SERVER_REPLY;
  974|      9|  }
  975|       |
  976|  2.13k|  return result;
  977|  2.13k|}
smtp.c:smtp_perform_helo:
  355|     19|{
  356|     19|  CURLcode result = CURLE_OK;
  357|     19|  struct smtp_conn *smtpc = &conn->proto.smtpc;
  358|       |
  359|     19|  smtpc->sasl.authused = SASL_AUTH_NONE; /* No authentication mechanism used
  360|       |                                            in smtp connections */
  361|       |
  362|       |  /* Send the HELO command */
  363|     19|  result = Curl_pp_sendf(data, &smtpc->pp, "HELO %s", smtpc->domain);
  364|       |
  365|     19|  if(!result)
  366|     19|    state(data, SMTP_HELO);
  367|       |
  368|     19|  return result;
  369|     19|}
smtp.c:smtp_perform_authentication:
  486|    129|{
  487|    129|  CURLcode result = CURLE_OK;
  488|    129|  struct connectdata *conn = data->conn;
  489|    129|  struct smtp_conn *smtpc = &conn->proto.smtpc;
  490|    129|  saslprogress progress;
  491|       |
  492|       |  /* Check we have enough data to authenticate with, and the
  493|       |     server supports authentication, and end the connect phase if not */
  494|    129|  if(!smtpc->auth_supported ||
  495|    129|     !Curl_sasl_can_authenticate(&smtpc->sasl, conn)) {
  496|    125|    state(data, SMTP_STOP);
  497|    125|    return result;
  498|    125|  }
  499|       |
  500|       |  /* Calculate the SASL login details */
  501|      4|  result = Curl_sasl_start(&smtpc->sasl, data, FALSE, &progress);
  502|       |
  503|      4|  if(!result) {
  504|      4|    if(progress == SASL_INPROGRESS)
  505|      3|      state(data, SMTP_AUTH);
  506|      1|    else {
  507|       |      /* Other mechanisms not supported */
  508|      1|      infof(data, "No known authentication mechanisms supported!");
  509|      1|      result = CURLE_LOGIN_DENIED;
  510|      1|    }
  511|      4|  }
  512|       |
  513|      4|  return result;
  514|    129|}
smtp.c:smtp_state_helo_resp:
  982|     14|{
  983|     14|  CURLcode result = CURLE_OK;
  984|     14|  (void)instate; /* no use for this yet */
  985|       |
  986|     14|  if(smtpcode/100 != 2) {
  987|      2|    failf(data, "Remote access denied: %d", smtpcode);
  988|      2|    result = CURLE_REMOTE_ACCESS_DENIED;
  989|      2|  }
  990|     12|  else
  991|       |    /* End of connect phase */
  992|     12|    state(data, SMTP_STOP);
  993|       |
  994|     14|  return result;
  995|     14|}
smtp.c:smtp_state_command_resp:
 1029|    769|{
 1030|    769|  CURLcode result = CURLE_OK;
 1031|    769|  struct SMTP *smtp = data->req.p.smtp;
 1032|    769|  char *line = data->state.buffer;
 1033|    769|  size_t len = strlen(line);
 1034|       |
 1035|    769|  (void)instate; /* no use for this yet */
 1036|       |
 1037|    769|  if((smtp->rcpt && smtpcode/100 != 2 && smtpcode != 553 && smtpcode != 1) ||
 1038|    769|     (!smtp->rcpt && smtpcode/100 != 2 && smtpcode != 1)) {
 1039|      8|    failf(data, "Command failed: %d", smtpcode);
 1040|      8|    result = CURLE_RECV_ERROR;
 1041|      8|  }
 1042|    761|  else {
 1043|       |    /* Temporarily add the LF character back and send as body to the client */
 1044|    761|    if(!data->set.opt_no_body) {
 1045|    759|      line[len] = '\n';
 1046|    759|      result = Curl_client_write(data, CLIENTWRITE_BODY, line, len + 1);
 1047|    759|      line[len] = '\0';
 1048|    759|    }
 1049|       |
 1050|    761|    if(smtpcode != 1) {
 1051|    173|      if(smtp->rcpt) {
 1052|    162|        smtp->rcpt = smtp->rcpt->next;
 1053|       |
 1054|    162|        if(smtp->rcpt) {
 1055|       |          /* Send the next command */
 1056|    146|          result = smtp_perform_command(data);
 1057|    146|        }
 1058|     16|        else
 1059|       |          /* End of DO phase */
 1060|     16|          state(data, SMTP_STOP);
 1061|    162|      }
 1062|     11|      else
 1063|       |        /* End of DO phase */
 1064|     11|        state(data, SMTP_STOP);
 1065|    173|    }
 1066|    761|  }
 1067|       |
 1068|    769|  return result;
 1069|    769|}
smtp.c:smtp_perform_command:
  523|    231|{
  524|    231|  CURLcode result = CURLE_OK;
  525|    231|  struct connectdata *conn = data->conn;
  526|    231|  struct SMTP *smtp = data->req.p.smtp;
  527|       |
  528|    231|  if(smtp->rcpt) {
  529|       |    /* We notify the server we are sending UTF-8 data if a) it supports the
  530|       |       SMTPUTF8 extension and b) The mailbox contains UTF-8 characters, in
  531|       |       either the local address or host name parts. This is regardless of
  532|       |       whether the host name is encoded using IDN ACE */
  533|    176|    bool utf8 = FALSE;
  534|       |
  535|    176|    if((!smtp->custom) || (!smtp->custom[0])) {
  536|    176|      char *address = NULL;
  537|    176|      struct hostname host = { NULL, NULL, NULL, NULL };
  538|       |
  539|       |      /* Parse the mailbox to verify into the local address and host name
  540|       |         parts, converting the host name to an IDN A-label if necessary */
  541|    176|      result = smtp_parse_address(data, smtp->rcpt->data,
  542|    176|                                  &address, &host);
  543|    176|      if(result)
  544|      0|        return result;
  545|       |
  546|       |      /* Establish whether we should report SMTPUTF8 to the server for this
  547|       |         mailbox as per RFC-6531 sect. 3.1 point 6 */
  548|    176|      utf8 = (conn->proto.smtpc.utf8_supported) &&
  549|    176|             ((host.encalloc) || (!Curl_is_ASCII_name(address)) ||
  550|      0|              (!Curl_is_ASCII_name(host.name)));
  551|       |
  552|       |      /* Send the VRFY command (Note: The host name part may be absent when the
  553|       |         host is a local system) */
  554|    176|      result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "VRFY %s%s%s%s",
  555|    176|                             address,
  556|    176|                             host.name ? "@" : "",
  557|    176|                             host.name ? host.name : "",
  558|    176|                             utf8 ? " SMTPUTF8" : "");
  559|       |
  560|    176|      Curl_free_idnconverted_hostname(&host);
  561|    176|      free(address);
  562|    176|    }
  563|      0|    else {
  564|       |      /* Establish whether we should report that we support SMTPUTF8 for EXPN
  565|       |         commands to the server as per RFC-6531 sect. 3.1 point 6 */
  566|      0|      utf8 = (conn->proto.smtpc.utf8_supported) &&
  567|      0|             (!strcmp(smtp->custom, "EXPN"));
  568|       |
  569|       |      /* Send the custom recipient based command such as the EXPN command */
  570|      0|      result = Curl_pp_sendf(data, &conn->proto.smtpc.pp,
  571|      0|                             "%s %s%s", smtp->custom,
  572|      0|                             smtp->rcpt->data,
  573|      0|                             utf8 ? " SMTPUTF8" : "");
  574|      0|    }
  575|    176|  }
  576|     55|  else
  577|       |    /* Send the non-recipient based command such as HELP */
  578|     55|    result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "%s",
  579|     55|                           smtp->custom && smtp->custom[0] != '\0' ?
  580|     54|                           smtp->custom : "HELP");
  581|       |
  582|    231|  if(!result)
  583|    231|    state(data, SMTP_COMMAND);
  584|       |
  585|    231|  return result;
  586|    231|}
smtp.c:smtp_parse_address:
 1786|    393|{
 1787|    393|  CURLcode result = CURLE_OK;
 1788|    393|  size_t length;
 1789|       |
 1790|       |  /* Duplicate the fully qualified email address so we can manipulate it,
 1791|       |     ensuring it doesn't contain the delimiters if specified */
 1792|    393|  char *dup = strdup(fqma[0] == '<' ? fqma + 1  : fqma);
 1793|    393|  if(!dup)
 1794|      0|    return CURLE_OUT_OF_MEMORY;
 1795|       |
 1796|    393|  length = strlen(dup);
 1797|    393|  if(length) {
 1798|     83|    if(dup[length - 1] == '>')
 1799|      0|      dup[length - 1] = '\0';
 1800|     83|  }
 1801|       |
 1802|       |  /* Extract the host name from the address (if we can) */
 1803|    393|  host->name = strpbrk(dup, "@");
 1804|    393|  if(host->name) {
 1805|     75|    *host->name = '\0';
 1806|     75|    host->name = host->name + 1;
 1807|       |
 1808|       |    /* Attempt to convert the host name to IDN ACE */
 1809|     75|    (void) Curl_idnconvert_hostname(data, host);
 1810|       |
 1811|       |    /* If Curl_idnconvert_hostname() fails then we shall attempt to continue
 1812|       |       and send the host name using UTF-8 rather than as 7-bit ACE (which is
 1813|       |       our preference) */
 1814|     75|  }
 1815|       |
 1816|       |  /* Extract the local address from the mailbox */
 1817|    393|  *address = dup;
 1818|       |
 1819|    393|  return result;
 1820|    393|}
smtp.c:smtp_state_mail_resp:
 1074|     46|{
 1075|     46|  CURLcode result = CURLE_OK;
 1076|     46|  (void)instate; /* no use for this yet */
 1077|       |
 1078|     46|  if(smtpcode/100 != 2) {
 1079|      3|    failf(data, "MAIL failed: %d", smtpcode);
 1080|      3|    result = CURLE_SEND_ERROR;
 1081|      3|  }
 1082|     43|  else
 1083|       |    /* Start the RCPT TO command */
 1084|     43|    result = smtp_perform_rcpt_to(data);
 1085|       |
 1086|     46|  return result;
 1087|     46|}
smtp.c:smtp_perform_rcpt_to:
  781|    177|{
  782|    177|  CURLcode result = CURLE_OK;
  783|    177|  struct connectdata *conn = data->conn;
  784|    177|  struct SMTP *smtp = data->req.p.smtp;
  785|    177|  char *address = NULL;
  786|    177|  struct hostname host = { NULL, NULL, NULL, NULL };
  787|       |
  788|       |  /* Parse the recipient mailbox into the local address and host name parts,
  789|       |     converting the host name to an IDN A-label if necessary */
  790|    177|  result = smtp_parse_address(data, smtp->rcpt->data,
  791|    177|                              &address, &host);
  792|    177|  if(result)
  793|      0|    return result;
  794|       |
  795|       |  /* Send the RCPT TO command */
  796|    177|  if(host.name)
  797|     36|    result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "RCPT TO:<%s@%s>",
  798|     36|                           address, host.name);
  799|    141|  else
  800|       |    /* An invalid mailbox was provided but we'll simply let the server worry
  801|       |       about that and reply with a 501 error */
  802|    141|    result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "RCPT TO:<%s>",
  803|    141|                           address);
  804|       |
  805|    177|  Curl_free_idnconverted_hostname(&host);
  806|    177|  free(address);
  807|       |
  808|    177|  if(!result)
  809|    177|    state(data, SMTP_RCPT);
  810|       |
  811|    177|  return result;
  812|    177|}
smtp.c:smtp_state_rcpt_resp:
 1093|    172|{
 1094|    172|  CURLcode result = CURLE_OK;
 1095|    172|  struct SMTP *smtp = data->req.p.smtp;
 1096|    172|  bool is_smtp_err = FALSE;
 1097|    172|  bool is_smtp_blocking_err = FALSE;
 1098|       |
 1099|    172|  (void)instate; /* no use for this yet */
 1100|       |
 1101|    172|  is_smtp_err = (smtpcode/100 != 2) ? TRUE : FALSE;
 1102|       |
 1103|       |  /* If there's multiple RCPT TO to be issued, it's possible to ignore errors
 1104|       |     and proceed with only the valid addresses. */
 1105|    172|  is_smtp_blocking_err =
 1106|    172|    (is_smtp_err && !data->set.mail_rcpt_allowfails) ? TRUE : FALSE;
 1107|       |
 1108|    172|  if(is_smtp_err) {
 1109|       |    /* Remembering the last failure which we can report if all "RCPT TO" have
 1110|       |       failed and we cannot proceed. */
 1111|      3|    smtp->rcpt_last_error = smtpcode;
 1112|       |
 1113|      3|    if(is_smtp_blocking_err) {
 1114|      3|      failf(data, "RCPT failed: %d", smtpcode);
 1115|      3|      result = CURLE_SEND_ERROR;
 1116|      3|    }
 1117|      3|  }
 1118|    169|  else {
 1119|       |    /* Some RCPT TO commands have succeeded. */
 1120|    169|    smtp->rcpt_had_ok = TRUE;
 1121|    169|  }
 1122|       |
 1123|    172|  if(!is_smtp_blocking_err) {
 1124|    169|    smtp->rcpt = smtp->rcpt->next;
 1125|       |
 1126|    169|    if(smtp->rcpt)
 1127|       |      /* Send the next RCPT TO command */
 1128|    134|      result = smtp_perform_rcpt_to(data);
 1129|     35|    else {
 1130|       |      /* We weren't able to issue a successful RCPT TO command while going
 1131|       |         over recipients (potentially multiple). Sending back last error. */
 1132|     35|      if(!smtp->rcpt_had_ok) {
 1133|      0|        failf(data, "RCPT failed: %d (last error)", smtp->rcpt_last_error);
 1134|      0|        result = CURLE_SEND_ERROR;
 1135|      0|      }
 1136|     35|      else {
 1137|       |        /* Send the DATA command */
 1138|     35|        result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "%s", "DATA");
 1139|       |
 1140|     35|        if(!result)
 1141|     35|          state(data, SMTP_DATA);
 1142|     35|      }
 1143|     35|    }
 1144|    169|  }
 1145|       |
 1146|    172|  return result;
 1147|    172|}
smtp.c:smtp_state_data_resp:
 1152|     32|{
 1153|     32|  CURLcode result = CURLE_OK;
 1154|     32|  (void)instate; /* no use for this yet */
 1155|       |
 1156|     32|  if(smtpcode != 354) {
 1157|      1|    failf(data, "DATA failed: %d", smtpcode);
 1158|      1|    result = CURLE_SEND_ERROR;
 1159|      1|  }
 1160|     31|  else {
 1161|       |    /* Set the progress upload size */
 1162|     31|    Curl_pgrsSetUploadSize(data, data->state.infilesize);
 1163|       |
 1164|       |    /* SMTP upload */
 1165|     31|    Curl_setup_transfer(data, -1, -1, FALSE, FIRSTSOCKET);
 1166|       |
 1167|       |    /* End of DO phase */
 1168|     31|    state(data, SMTP_STOP);
 1169|     31|  }
 1170|       |
 1171|     32|  return result;
 1172|     32|}
smtp.c:smtp_state_postdata_resp:
 1179|     13|{
 1180|     13|  CURLcode result = CURLE_OK;
 1181|       |
 1182|     13|  (void)instate; /* no use for this yet */
 1183|       |
 1184|     13|  if(smtpcode != 250)
 1185|      1|    result = CURLE_RECV_ERROR;
 1186|       |
 1187|       |  /* End of DONE phase */
 1188|     13|  state(data, SMTP_STOP);
 1189|       |
 1190|     13|  return result;
 1191|     13|}
smtp.c:smtp_endofresp:
  214|  16.3k|{
  215|  16.3k|  struct smtp_conn *smtpc = &conn->proto.smtpc;
  216|  16.3k|  bool result = FALSE;
  217|  16.3k|  (void)data;
  218|       |
  219|       |  /* Nothing for us */
  220|  16.3k|  if(len < 4 || !ISDIGIT(line[0]) || !ISDIGIT(line[1]) || !ISDIGIT(line[2]))
  221|  10.2k|    return FALSE;
  222|       |
  223|       |  /* Do we have a command response? This should be the response code followed
  224|       |     by a space and optionally some text as per RFC-5321 and as outlined in
  225|       |     Section 4. Examples of RFC-4954 but some e-mail servers ignore this and
  226|       |     only send the response code instead as per Section 4.2. */
  227|  6.03k|  if(line[3] == ' ' || len == 5) {
  228|  2.03k|    char tmpline[6];
  229|       |
  230|  2.03k|    result = TRUE;
  231|  2.03k|    memset(tmpline, '\0', sizeof(tmpline));
  232|  2.03k|    memcpy(tmpline, line, (len == 5 ? 5 : 3));
  233|  2.03k|    *resp = curlx_sltosi(strtol(tmpline, NULL, 10));
  234|       |
  235|       |    /* Make sure real server never sends internal value */
  236|  2.03k|    if(*resp == 1)
  237|     66|      *resp = 0;
  238|  2.03k|  }
  239|       |  /* Do we have a multiline (continuation) response? */
  240|  3.99k|  else if(line[3] == '-' &&
  241|  3.99k|          (smtpc->state == SMTP_EHLO || smtpc->state == SMTP_COMMAND)) {
  242|  2.56k|    result = TRUE;
  243|  2.56k|    *resp = 1;  /* Internal response code */
  244|  2.56k|  }
  245|       |
  246|  6.03k|  return result;
  247|  16.3k|}
smtp.c:smtp_perform_auth:
  428|      3|{
  429|      3|  CURLcode result = CURLE_OK;
  430|      3|  struct smtp_conn *smtpc = &data->conn->proto.smtpc;
  431|      3|  const char *ir = (const char *) Curl_bufref_ptr(initresp);
  432|       |
  433|      3|  if(ir) {                                  /* AUTH <mech> ...<crlf> */
  434|       |    /* Send the AUTH command with the initial response */
  435|      0|    result = Curl_pp_sendf(data, &smtpc->pp, "AUTH %s %s", mech, ir);
  436|      0|  }
  437|      3|  else {
  438|       |    /* Send the AUTH command */
  439|      3|    result = Curl_pp_sendf(data, &smtpc->pp, "AUTH %s", mech);
  440|      3|  }
  441|       |
  442|      3|  return result;
  443|      3|}
smtp.c:smtp_parse_url_options:
 1674|    271|{
 1675|    271|  CURLcode result = CURLE_OK;
 1676|    271|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1677|    271|  const char *ptr = conn->options;
 1678|       |
 1679|    292|  while(!result && ptr && *ptr) {
 1680|     21|    const char *key = ptr;
 1681|     21|    const char *value;
 1682|       |
 1683|    477|    while(*ptr && *ptr != '=')
 1684|    456|      ptr++;
 1685|       |
 1686|     21|    value = ptr + 1;
 1687|       |
 1688|    653|    while(*ptr && *ptr != ';')
 1689|    632|      ptr++;
 1690|       |
 1691|     21|    if(strncasecompare(key, "AUTH=", 5))
 1692|      6|      result = Curl_sasl_parse_url_auth_option(&smtpc->sasl,
 1693|      6|                                               value, ptr - value);
 1694|     15|    else
 1695|     15|      result = CURLE_URL_MALFORMAT;
 1696|       |
 1697|     21|    if(*ptr == ';')
 1698|      5|      ptr++;
 1699|     21|  }
 1700|       |
 1701|    271|  return result;
 1702|    271|}
smtp.c:smtp_parse_url_path:
 1711|    253|{
 1712|       |  /* The SMTP struct is already initialised in smtp_connect() */
 1713|    253|  struct connectdata *conn = data->conn;
 1714|    253|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1715|    253|  const char *path = &data->state.up.path[1]; /* skip leading path */
 1716|    253|  char localhost[HOSTNAME_MAX + 1];
 1717|       |
 1718|       |  /* Calculate the path if necessary */
 1719|    253|  if(!*path) {
 1720|     19|    if(!Curl_gethostname(localhost, sizeof(localhost)))
 1721|     19|      path = localhost;
 1722|      0|    else
 1723|      0|      path = "localhost";
 1724|     19|  }
 1725|       |
 1726|       |  /* URL decode the path and use it as the domain in our EHLO */
 1727|    253|  return Curl_urldecode(data, path, 0, &smtpc->domain, NULL,
 1728|    253|                        REJECT_CTRL);
 1729|    253|}
smtp.c:state:
  290|  1.37k|{
  291|  1.37k|  struct smtp_conn *smtpc = &data->conn->proto.smtpc;
  292|  1.37k|#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)
  293|       |  /* for debug purposes */
  294|  1.37k|  static const char * const names[] = {
  295|  1.37k|    "STOP",
  296|  1.37k|    "SERVERGREET",
  297|  1.37k|    "EHLO",
  298|  1.37k|    "HELO",
  299|  1.37k|    "STARTTLS",
  300|  1.37k|    "UPGRADETLS",
  301|  1.37k|    "AUTH",
  302|  1.37k|    "COMMAND",
  303|  1.37k|    "MAIL",
  304|  1.37k|    "RCPT",
  305|  1.37k|    "DATA",
  306|  1.37k|    "POSTDATA",
  307|  1.37k|    "QUIT",
  308|       |    /* LAST */
  309|  1.37k|  };
  310|       |
  311|  1.37k|  if(smtpc->state != newstate)
  312|  1.09k|    infof(data, "SMTP %p state change from %s to %s",
  313|  1.09k|          (void *)smtpc, names[smtpc->state], names[newstate]);
  314|  1.37k|#endif
  315|       |
  316|  1.37k|  smtpc->state = newstate;
  317|  1.37k|}
smtp.c:smtp_done:
 1392|    271|{
 1393|    271|  CURLcode result = CURLE_OK;
 1394|    271|  struct connectdata *conn = data->conn;
 1395|    271|  struct SMTP *smtp = data->req.p.smtp;
 1396|    271|  struct pingpong *pp = &conn->proto.smtpc.pp;
 1397|    271|  char *eob;
 1398|    271|  ssize_t len;
 1399|    271|  ssize_t bytes_written;
 1400|       |
 1401|    271|  (void)premature;
 1402|       |
 1403|    271|  if(!smtp)
 1404|      0|    return CURLE_OK;
 1405|       |
 1406|       |  /* Cleanup our per-request based variables */
 1407|    271|  Curl_safefree(smtp->custom);
 1408|       |
 1409|    271|  if(status) {
 1410|    207|    connclose(conn, "SMTP done with bad status"); /* marked for closure */
 1411|    207|    result = status;         /* use the already set error code */
 1412|    207|  }
 1413|     64|  else if(!data->set.connect_only && data->set.mail_rcpt &&
 1414|     64|          (data->set.upload || data->set.mimepost.kind)) {
 1415|       |    /* Calculate the EOB taking into account any terminating CRLF from the
 1416|       |       previous line of the email or the CRLF of the DATA command when there
 1417|       |       is "no mail data". RFC-5321, sect. 4.1.1.4.
 1418|       |
 1419|       |       Note: As some SSL backends, such as OpenSSL, will cause Curl_write() to
 1420|       |       fail when using a different pointer following a previous write, that
 1421|       |       returned CURLE_AGAIN, we duplicate the EOB now rather than when the
 1422|       |       bytes written doesn't equal len. */
 1423|     37|    if(smtp->trailing_crlf || !data->state.infilesize) {
 1424|     28|      eob = strdup(&SMTP_EOB[2]);
 1425|     28|      len = SMTP_EOB_LEN - 2;
 1426|     28|    }
 1427|      9|    else {
 1428|      9|      eob = strdup(SMTP_EOB);
 1429|      9|      len = SMTP_EOB_LEN;
 1430|      9|    }
 1431|       |
 1432|     37|    if(!eob)
 1433|      0|      return CURLE_OUT_OF_MEMORY;
 1434|       |
 1435|       |    /* Send the end of block data */
 1436|     37|    result = Curl_write(data, conn->writesockfd, eob, len, &bytes_written);
 1437|     37|    if(result) {
 1438|      1|      free(eob);
 1439|      1|      return result;
 1440|      1|    }
 1441|       |
 1442|     36|    if(bytes_written != len) {
 1443|       |      /* The whole chunk was not sent so keep it around and adjust the
 1444|       |         pingpong structure accordingly */
 1445|      0|      pp->sendthis = eob;
 1446|      0|      pp->sendsize = len;
 1447|      0|      pp->sendleft = len - bytes_written;
 1448|      0|    }
 1449|     36|    else {
 1450|       |      /* Successfully sent so adjust the response timeout relative to now */
 1451|     36|      pp->response = Curl_now();
 1452|       |
 1453|     36|      free(eob);
 1454|     36|    }
 1455|       |
 1456|     36|    state(data, SMTP_POSTDATA);
 1457|       |
 1458|       |    /* Run the state-machine */
 1459|     36|    result = smtp_block_statemach(data, conn, FALSE);
 1460|     36|  }
 1461|       |
 1462|       |  /* Clear the transfer mode for the next request */
 1463|    270|  smtp->transfer = PPTRANSFER_BODY;
 1464|       |
 1465|    270|  return result;
 1466|    271|}
smtp.c:smtp_block_statemach:
 1301|    168|{
 1302|    168|  CURLcode result = CURLE_OK;
 1303|    168|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1304|       |
 1305|    385|  while(smtpc->state != SMTP_STOP && !result)
 1306|    217|    result = Curl_pp_statemach(data, &smtpc->pp, TRUE, disconnecting);
 1307|       |
 1308|    168|  return result;
 1309|    168|}
smtp.c:smtp_do:
 1538|    137|{
 1539|    137|  CURLcode result = CURLE_OK;
 1540|    137|  *done = FALSE; /* default to false */
 1541|       |
 1542|       |  /* Parse the custom request */
 1543|    137|  result = smtp_parse_custom_request(data);
 1544|    137|  if(result)
 1545|      1|    return result;
 1546|       |
 1547|    136|  result = smtp_regular_transfer(data, done);
 1548|       |
 1549|    136|  return result;
 1550|    137|}
smtp.c:smtp_parse_custom_request:
 1738|    137|{
 1739|    137|  CURLcode result = CURLE_OK;
 1740|    137|  struct SMTP *smtp = data->req.p.smtp;
 1741|    137|  const char *custom = data->set.str[STRING_CUSTOMREQUEST];
 1742|       |
 1743|       |  /* URL decode the custom request */
 1744|    137|  if(custom)
 1745|     14|    result = Curl_urldecode(data, custom, 0, &smtp->custom, NULL, REJECT_CTRL);
 1746|       |
 1747|    137|  return result;
 1748|    137|}
smtp.c:smtp_regular_transfer:
 1628|    136|{
 1629|    136|  CURLcode result = CURLE_OK;
 1630|    136|  bool connected = FALSE;
 1631|       |
 1632|       |  /* Make sure size is unknown at this point */
 1633|    136|  data->req.size = -1;
 1634|       |
 1635|       |  /* Set the progress data */
 1636|    136|  Curl_pgrsSetUploadCounter(data, 0);
 1637|    136|  Curl_pgrsSetDownloadCounter(data, 0);
 1638|    136|  Curl_pgrsSetUploadSize(data, -1);
 1639|    136|  Curl_pgrsSetDownloadSize(data, -1);
 1640|       |
 1641|       |  /* Carry out the perform */
 1642|    136|  result = smtp_perform(data, &connected, dophase_done);
 1643|       |
 1644|       |  /* Perform post DO phase operations if necessary */
 1645|    136|  if(!result && *dophase_done)
 1646|     21|    result = smtp_dophase_done(data, connected);
 1647|       |
 1648|    136|  return result;
 1649|    136|}
smtp.c:smtp_perform:
 1477|    136|{
 1478|       |  /* This is SMTP and no proxy */
 1479|    136|  CURLcode result = CURLE_OK;
 1480|    136|  struct connectdata *conn = data->conn;
 1481|    136|  struct SMTP *smtp = data->req.p.smtp;
 1482|       |
 1483|    136|  DEBUGF(infof(data, "DO phase starts"));
 1484|       |
 1485|    136|  if(data->set.opt_no_body) {
 1486|       |    /* Requested no body means no transfer */
 1487|      4|    smtp->transfer = PPTRANSFER_INFO;
 1488|      4|  }
 1489|       |
 1490|    136|  *dophase_done = FALSE; /* not done yet */
 1491|       |
 1492|       |  /* Store the first recipient (or NULL if not specified) */
 1493|    136|  smtp->rcpt = data->set.mail_rcpt;
 1494|       |
 1495|       |  /* Track of whether we've successfully sent at least one RCPT TO command */
 1496|    136|  smtp->rcpt_had_ok = FALSE;
 1497|       |
 1498|       |  /* Track of the last error we've received by sending RCPT TO command */
 1499|    136|  smtp->rcpt_last_error = 0;
 1500|       |
 1501|       |  /* Initial data character is the first character in line: it is implicitly
 1502|       |     preceded by a virtual CRLF. */
 1503|    136|  smtp->trailing_crlf = TRUE;
 1504|    136|  smtp->eob = 2;
 1505|       |
 1506|       |  /* Start the first command in the DO phase */
 1507|    136|  if((data->set.upload || data->set.mimepost.kind) && data->set.mail_rcpt)
 1508|       |    /* MAIL transfer */
 1509|     51|    result = smtp_perform_mail(data);
 1510|     85|  else
 1511|       |    /* SMTP based command (VRFY, EXPN, NOOP, RSET or HELP) */
 1512|     85|    result = smtp_perform_command(data);
 1513|       |
 1514|    136|  if(result)
 1515|      0|    return result;
 1516|       |
 1517|       |  /* Run the state-machine */
 1518|    136|  result = smtp_multi_statemach(data, dophase_done);
 1519|       |
 1520|    136|  *connected = conn->bits.tcpconnect[FIRSTSOCKET];
 1521|       |
 1522|    136|  if(*dophase_done)
 1523|     21|    DEBUGF(infof(data, "DO phase is complete"));
 1524|       |
 1525|    136|  return result;
 1526|    136|}
smtp.c:smtp_perform_mail:
  595|     51|{
  596|     51|  char *from = NULL;
  597|     51|  char *auth = NULL;
  598|     51|  char *size = NULL;
  599|     51|  CURLcode result = CURLE_OK;
  600|     51|  struct connectdata *conn = data->conn;
  601|       |
  602|       |  /* We notify the server we are sending UTF-8 data if a) it supports the
  603|       |     SMTPUTF8 extension and b) The mailbox contains UTF-8 characters, in
  604|       |     either the local address or host name parts. This is regardless of
  605|       |     whether the host name is encoded using IDN ACE */
  606|     51|  bool utf8 = FALSE;
  607|       |
  608|       |  /* Calculate the FROM parameter */
  609|     51|  if(data->set.str[STRING_MAIL_FROM]) {
  610|     40|    char *address = NULL;
  611|     40|    struct hostname host = { NULL, NULL, NULL, NULL };
  612|       |
  613|       |    /* Parse the FROM mailbox into the local address and host name parts,
  614|       |       converting the host name to an IDN A-label if necessary */
  615|     40|    result = smtp_parse_address(data, data->set.str[STRING_MAIL_FROM],
  616|     40|                                &address, &host);
  617|     40|    if(result)
  618|      0|      return result;
  619|       |
  620|       |    /* Establish whether we should report SMTPUTF8 to the server for this
  621|       |       mailbox as per RFC-6531 sect. 3.1 point 4 and sect. 3.4 */
  622|     40|    utf8 = (conn->proto.smtpc.utf8_supported) &&
  623|     40|           ((host.encalloc) || (!Curl_is_ASCII_name(address)) ||
  624|      0|            (!Curl_is_ASCII_name(host.name)));
  625|       |
  626|     40|    if(host.name) {
  627|     38|      from = aprintf("<%s@%s>", address, host.name);
  628|       |
  629|     38|      Curl_free_idnconverted_hostname(&host);
  630|     38|    }
  631|      2|    else
  632|       |      /* An invalid mailbox was provided but we'll simply let the server worry
  633|       |         about that and reply with a 501 error */
  634|      2|      from = aprintf("<%s>", address);
  635|       |
  636|     40|    free(address);
  637|     40|  }
  638|     11|  else
  639|       |    /* Null reverse-path, RFC-5321, sect. 3.6.3 */
  640|     11|    from = strdup("<>");
  641|       |
  642|     51|  if(!from)
  643|      0|    return CURLE_OUT_OF_MEMORY;
  644|       |
  645|       |  /* Calculate the optional AUTH parameter */
  646|     51|  if(data->set.str[STRING_MAIL_AUTH] && conn->proto.smtpc.sasl.authused) {
  647|      0|    if(data->set.str[STRING_MAIL_AUTH][0] != '\0') {
  648|      0|      char *address = NULL;
  649|      0|      struct hostname host = { NULL, NULL, NULL, NULL };
  650|       |
  651|       |      /* Parse the AUTH mailbox into the local address and host name parts,
  652|       |         converting the host name to an IDN A-label if necessary */
  653|      0|      result = smtp_parse_address(data, data->set.str[STRING_MAIL_AUTH],
  654|      0|                                  &address, &host);
  655|      0|      if(result) {
  656|      0|        free(from);
  657|      0|        return result;
  658|      0|      }
  659|       |
  660|       |      /* Establish whether we should report SMTPUTF8 to the server for this
  661|       |         mailbox as per RFC-6531 sect. 3.1 point 4 and sect. 3.4 */
  662|      0|      if((!utf8) && (conn->proto.smtpc.utf8_supported) &&
  663|      0|         ((host.encalloc) || (!Curl_is_ASCII_name(address)) ||
  664|      0|          (!Curl_is_ASCII_name(host.name))))
  665|      0|        utf8 = TRUE;
  666|       |
  667|      0|      if(host.name) {
  668|      0|        auth = aprintf("<%s@%s>", address, host.name);
  669|       |
  670|      0|        Curl_free_idnconverted_hostname(&host);
  671|      0|      }
  672|      0|      else
  673|       |        /* An invalid mailbox was provided but we'll simply let the server
  674|       |           worry about it */
  675|      0|        auth = aprintf("<%s>", address);
  676|       |
  677|      0|      free(address);
  678|      0|    }
  679|      0|    else
  680|       |      /* Empty AUTH, RFC-2554, sect. 5 */
  681|      0|      auth = strdup("<>");
  682|       |
  683|      0|    if(!auth) {
  684|      0|      free(from);
  685|       |
  686|      0|      return CURLE_OUT_OF_MEMORY;
  687|      0|    }
  688|      0|  }
  689|       |
  690|       |  /* Prepare the mime data if some. */
  691|     51|  if(data->set.mimepost.kind != MIMEKIND_NONE) {
  692|       |    /* Use the whole structure as data. */
  693|     29|    data->set.mimepost.flags &= ~MIME_BODY_ONLY;
  694|       |
  695|       |    /* Add external headers and mime version. */
  696|     29|    curl_mime_headers(&data->set.mimepost, data->set.headers, 0);
  697|     29|    result = Curl_mime_prepare_headers(&data->set.mimepost, NULL,
  698|     29|                                       NULL, MIMESTRATEGY_MAIL);
  699|       |
  700|     29|    if(!result)
  701|     29|      if(!Curl_checkheaders(data, "Mime-Version"))
  702|     29|        result = Curl_mime_add_header(&data->set.mimepost.curlheaders,
  703|     29|                                      "Mime-Version: 1.0");
  704|       |
  705|       |    /* Make sure we will read the entire mime structure. */
  706|     29|    if(!result)
  707|     29|      result = Curl_mime_rewind(&data->set.mimepost);
  708|       |
  709|     29|    if(result) {
  710|      0|      free(from);
  711|      0|      free(auth);
  712|       |
  713|      0|      return result;
  714|      0|    }
  715|       |
  716|     29|    data->state.infilesize = Curl_mime_size(&data->set.mimepost);
  717|       |
  718|       |    /* Read from mime structure. */
  719|     29|    data->state.fread_func = (curl_read_callback) Curl_mime_read;
  720|     29|    data->state.in = (void *) &data->set.mimepost;
  721|     29|  }
  722|       |
  723|       |  /* Calculate the optional SIZE parameter */
  724|     51|  if(conn->proto.smtpc.size_supported && data->state.infilesize > 0) {
  725|     16|    size = aprintf("%" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);
  726|       |
  727|     16|    if(!size) {
  728|      0|      free(from);
  729|      0|      free(auth);
  730|       |
  731|      0|      return CURLE_OUT_OF_MEMORY;
  732|      0|    }
  733|     16|  }
  734|       |
  735|       |  /* If the mailboxes in the FROM and AUTH parameters don't include a UTF-8
  736|       |     based address then quickly scan through the recipient list and check if
  737|       |     any there do, as we need to correctly identify our support for SMTPUTF8
  738|       |     in the envelope, as per RFC-6531 sect. 3.4 */
  739|     51|  if(conn->proto.smtpc.utf8_supported && !utf8) {
  740|      0|    struct SMTP *smtp = data->req.p.smtp;
  741|      0|    struct curl_slist *rcpt = smtp->rcpt;
  742|       |
  743|      0|    while(rcpt && !utf8) {
  744|       |      /* Does the host name contain non-ASCII characters? */
  745|      0|      if(!Curl_is_ASCII_name(rcpt->data))
  746|      0|        utf8 = TRUE;
  747|       |
  748|      0|      rcpt = rcpt->next;
  749|      0|    }
  750|      0|  }
  751|       |
  752|       |  /* Send the MAIL command */
  753|     51|  result = Curl_pp_sendf(data, &conn->proto.smtpc.pp,
  754|     51|                         "MAIL FROM:%s%s%s%s%s%s",
  755|     51|                         from,                 /* Mandatory                 */
  756|     51|                         auth ? " AUTH=" : "", /* Optional on AUTH support  */
  757|     51|                         auth ? auth : "",     /*                           */
  758|     51|                         size ? " SIZE=" : "", /* Optional on SIZE support  */
  759|     51|                         size ? size : "",     /*                           */
  760|     51|                         utf8 ? " SMTPUTF8"    /* Internationalised mailbox */
  761|     51|                               : "");          /* included in our envelope  */
  762|       |
  763|     51|  free(from);
  764|     51|  free(auth);
  765|     51|  free(size);
  766|       |
  767|     51|  if(!result)
  768|     51|    state(data, SMTP_MAIL);
  769|       |
  770|     51|  return result;
  771|     51|}
smtp.c:smtp_dophase_done:
 1589|     58|{
 1590|     58|  struct SMTP *smtp = data->req.p.smtp;
 1591|       |
 1592|     58|  (void)connected;
 1593|       |
 1594|     58|  if(smtp->transfer != PPTRANSFER_BODY)
 1595|       |    /* no data to transfer */
 1596|      3|    Curl_setup_transfer(data, -1, -1, FALSE, -1);
 1597|       |
 1598|     58|  return CURLE_OK;
 1599|     58|}
smtp.c:smtp_disconnect:
 1562|    271|{
 1563|    271|  struct smtp_conn *smtpc = &conn->proto.smtpc;
 1564|    271|  (void)data;
 1565|       |
 1566|       |  /* We cannot send quit unconditionally. If this connection is stale or
 1567|       |     bad in any way, sending quit and waiting around here will make the
 1568|       |     disconnect wait in vain and cause more problems than we need to. */
 1569|       |
 1570|    271|  if(!dead_connection && conn->bits.protoconnstart) {
 1571|    132|    if(!smtp_perform_quit(data, conn))
 1572|    132|      (void)smtp_block_statemach(data, conn, TRUE); /* ignore errors on QUIT */
 1573|    132|  }
 1574|       |
 1575|       |  /* Disconnect from the server */
 1576|    271|  Curl_pp_disconnect(&smtpc->pp);
 1577|       |
 1578|       |  /* Cleanup the SASL module */
 1579|    271|  Curl_sasl_cleanup(conn, smtpc->sasl.authused);
 1580|       |
 1581|       |  /* Cleanup our connection based variables */
 1582|    271|  Curl_safefree(smtpc->domain);
 1583|       |
 1584|    271|  return CURLE_OK;
 1585|    271|}
smtp.c:smtp_perform_quit:
  822|    132|{
  823|       |  /* Send the QUIT command */
  824|    132|  CURLcode result = Curl_pp_sendf(data, &conn->proto.smtpc.pp, "%s", "QUIT");
  825|       |
  826|    132|  if(!result)
  827|    132|    state(data, SMTP_QUIT);
  828|       |
  829|    132|  return result;
  830|    132|}
smtp.c:smtp_doing:
 1603|    401|{
 1604|    401|  CURLcode result = smtp_multi_statemach(data, dophase_done);
 1605|       |
 1606|    401|  if(result)
 1607|     13|    DEBUGF(infof(data, "DO phase failed"));
 1608|    388|  else if(*dophase_done) {
 1609|     37|    result = smtp_dophase_done(data, FALSE /* not connected */);
 1610|       |
 1611|     37|    DEBUGF(infof(data, "DO phase is complete"));
 1612|     37|  }
 1613|       |
 1614|    401|  return result;
 1615|    401|}
smtp.c:smtp_setup_connection:
 1653|    271|{
 1654|    271|  CURLcode result;
 1655|       |
 1656|       |  /* Clear the TLS upgraded flag */
 1657|    271|  conn->bits.tls_upgraded = FALSE;
 1658|       |
 1659|       |  /* Initialise the SMTP layer */
 1660|    271|  result = smtp_init(data);
 1661|    271|  if(result)
 1662|      0|    return result;
 1663|       |
 1664|    271|  return CURLE_OK;
 1665|    271|}
smtp.c:smtp_init:
 1314|    271|{
 1315|    271|  CURLcode result = CURLE_OK;
 1316|    271|  struct SMTP *smtp;
 1317|       |
 1318|    271|  smtp = data->req.p.smtp = calloc(sizeof(struct SMTP), 1);
 1319|    271|  if(!smtp)
 1320|      0|    result = CURLE_OUT_OF_MEMORY;
 1321|       |
 1322|    271|  return result;
 1323|    271|}

Curl_speedinit:
   32|  2.85k|{
   33|  2.85k|  memset(&data->state.keeps_speed, 0, sizeof(struct curltime));
   34|  2.85k|}
Curl_speedcheck:
   41|  4.73M|{
   42|  4.73M|  if(data->req.keepon & KEEP_RECV_PAUSE)
   43|       |    /* A paused transfer is not qualified for speed checks */
   44|      0|    return CURLE_OK;
   45|       |
   46|  4.73M|  if((data->progress.current_speed >= 0) && data->set.low_speed_time) {
   47|      0|    if(data->progress.current_speed < data->set.low_speed_limit) {
   48|      0|      if(!data->state.keeps_speed.tv_sec)
   49|       |        /* under the limit at this very moment */
   50|      0|        data->state.keeps_speed = now;
   51|      0|      else {
   52|       |        /* how long has it been under the limit */
   53|      0|        timediff_t howlong = Curl_timediff(now, data->state.keeps_speed);
   54|       |
   55|      0|        if(howlong >= data->set.low_speed_time * 1000) {
   56|       |          /* too long */
   57|      0|          failf(data,
   58|      0|                "Operation too slow. "
   59|      0|                "Less than %ld bytes/sec transferred the last %ld seconds",
   60|      0|                data->set.low_speed_limit,
   61|      0|                data->set.low_speed_time);
   62|      0|          return CURLE_OPERATION_TIMEDOUT;
   63|      0|        }
   64|      0|      }
   65|      0|    }
   66|      0|    else
   67|       |      /* faster right now */
   68|      0|      data->state.keeps_speed.tv_sec = 0;
   69|      0|  }
   70|       |
   71|  4.73M|  if(data->set.low_speed_limit)
   72|       |    /* if low speed limit is enabled, set the expire timer to make this
   73|       |       connection's speed get checked again in a second */
   74|      0|    Curl_expire(data, 1000, EXPIRE_SPEEDCHECK);
   75|       |
   76|  4.73M|  return CURLE_OK;
   77|  4.73M|}

Curl_splay:
   42|  4.74M|{
   43|  4.74M|  struct Curl_tree N, *l, *r, *y;
   44|       |
   45|  4.74M|  if(!t)
   46|      0|    return t;
   47|  4.74M|  N.smaller = N.larger = NULL;
   48|  4.74M|  l = r = &N;
   49|       |
   50|  4.74M|  for(;;) {
   51|  4.74M|    long comp = compare(i, t->key);
   52|  4.74M|    if(comp < 0) {
   53|  4.73M|      if(!t->smaller)
   54|  4.73M|        break;
   55|      0|      if(compare(i, t->smaller->key) < 0) {
   56|      0|        y = t->smaller;                           /* rotate smaller */
   57|      0|        t->smaller = y->larger;
   58|      0|        y->larger = t;
   59|      0|        t = y;
   60|      0|        if(!t->smaller)
   61|      0|          break;
   62|      0|      }
   63|      0|      r->smaller = t;                               /* link smaller */
   64|      0|      r = t;
   65|      0|      t = t->smaller;
   66|      0|    }
   67|  3.08k|    else if(comp > 0) {
   68|      0|      if(!t->larger)
   69|      0|        break;
   70|      0|      if(compare(i, t->larger->key) > 0) {
   71|      0|        y = t->larger;                          /* rotate larger */
   72|      0|        t->larger = y->smaller;
   73|      0|        y->smaller = t;
   74|      0|        t = y;
   75|      0|        if(!t->larger)
   76|      0|          break;
   77|      0|      }
   78|      0|      l->larger = t;                              /* link larger */
   79|      0|      l = t;
   80|      0|      t = t->larger;
   81|      0|    }
   82|  3.08k|    else
   83|  3.08k|      break;
   84|  4.74M|  }
   85|       |
   86|  4.74M|  l->larger = t->smaller;                                /* assemble */
   87|  4.74M|  r->smaller = t->larger;
   88|  4.74M|  t->smaller = N.larger;
   89|  4.74M|  t->larger = N.smaller;
   90|       |
   91|  4.74M|  return t;
   92|  4.74M|}
Curl_splayinsert:
  102|  4.03k|{
  103|  4.03k|  static const struct curltime KEY_NOTUSED = {
  104|  4.03k|    (time_t)-1, (unsigned int)-1
  105|  4.03k|  }; /* will *NEVER* appear */
  106|       |
  107|  4.03k|  if(!node)
  108|      0|    return t;
  109|       |
  110|  4.03k|  if(t != NULL) {
  111|      0|    t = Curl_splay(i, t);
  112|      0|    if(compare(i, t->key) == 0) {
  113|       |      /* There already exists a node in the tree with the very same key. Build
  114|       |         a doubly-linked circular list of nodes. We add the new 'node' struct
  115|       |         to the end of this list. */
  116|       |
  117|      0|      node->key = KEY_NOTUSED; /* we set the key in the sub node to NOTUSED
  118|       |                                  to quickly identify this node as a subnode */
  119|      0|      node->samen = t;
  120|      0|      node->samep = t->samep;
  121|      0|      t->samep->samen = node;
  122|      0|      t->samep = node;
  123|       |
  124|      0|      return t; /* the root node always stays the same */
  125|      0|    }
  126|      0|  }
  127|       |
  128|  4.03k|  if(!t) {
  129|  4.03k|    node->smaller = node->larger = NULL;
  130|  4.03k|  }
  131|      0|  else if(compare(i, t->key) < 0) {
  132|      0|    node->smaller = t->smaller;
  133|      0|    node->larger = t;
  134|      0|    t->smaller = NULL;
  135|       |
  136|      0|  }
  137|      0|  else {
  138|      0|    node->larger = t->larger;
  139|      0|    node->smaller = t;
  140|      0|    t->larger = NULL;
  141|      0|  }
  142|  4.03k|  node->key = i;
  143|       |
  144|       |  /* no identical nodes (yet), we are the only one in the list of nodes */
  145|  4.03k|  node->samen = node;
  146|  4.03k|  node->samep = node;
  147|  4.03k|  return node;
  148|  4.03k|}
Curl_splaygetbest:
  156|  4.74M|{
  157|  4.74M|  static const struct curltime tv_zero = {0, 0};
  158|  4.74M|  struct Curl_tree *x;
  159|       |
  160|  4.74M|  if(!t) {
  161|  2.93k|    *removed = NULL; /* none removed since there was no root */
  162|  2.93k|    return NULL;
  163|  2.93k|  }
  164|       |
  165|       |  /* find smallest */
  166|  4.73M|  t = Curl_splay(tv_zero, t);
  167|  4.73M|  if(compare(i, t->key) < 0) {
  168|       |    /* even the smallest is too big */
  169|  4.73M|    *removed = NULL;
  170|  4.73M|    return t;
  171|  4.73M|  }
  172|       |
  173|       |  /* FIRST! Check if there is a list with identical keys */
  174|    948|  x = t->samen;
  175|    948|  if(x != t) {
  176|       |    /* there is, pick one from the list */
  177|       |
  178|       |    /* 'x' is the new root node */
  179|       |
  180|      0|    x->key = t->key;
  181|      0|    x->larger = t->larger;
  182|      0|    x->smaller = t->smaller;
  183|      0|    x->samep = t->samep;
  184|      0|    t->samep->samen = x;
  185|       |
  186|      0|    *removed = t;
  187|      0|    return x; /* new root */
  188|      0|  }
  189|       |
  190|       |  /* we splayed the tree to the smallest element, there is no smaller */
  191|    948|  x = t->larger;
  192|    948|  *removed = t;
  193|       |
  194|    948|  return x;
  195|    948|}
Curl_splayremove:
  212|  3.08k|{
  213|  3.08k|  static const struct curltime KEY_NOTUSED = {
  214|  3.08k|    (time_t)-1, (unsigned int)-1
  215|  3.08k|  }; /* will *NEVER* appear */
  216|  3.08k|  struct Curl_tree *x;
  217|       |
  218|  3.08k|  if(!t || !removenode)
  219|      0|    return 1;
  220|       |
  221|  3.08k|  if(compare(KEY_NOTUSED, removenode->key) == 0) {
  222|       |    /* Key set to NOTUSED means it is a subnode within a 'same' linked list
  223|       |       and thus we can unlink it easily. */
  224|      0|    if(removenode->samen == removenode)
  225|       |      /* A non-subnode should never be set to KEY_NOTUSED */
  226|      0|      return 3;
  227|       |
  228|      0|    removenode->samep->samen = removenode->samen;
  229|      0|    removenode->samen->samep = removenode->samep;
  230|       |
  231|       |    /* Ensures that double-remove gets caught. */
  232|      0|    removenode->samen = removenode;
  233|       |
  234|      0|    *newroot = t; /* return the same root */
  235|      0|    return 0;
  236|      0|  }
  237|       |
  238|  3.08k|  t = Curl_splay(removenode->key, t);
  239|       |
  240|       |  /* First make sure that we got the same root node as the one we want
  241|       |     to remove, as otherwise we might be trying to remove a node that
  242|       |     isn't actually in the tree.
  243|       |
  244|       |     We cannot just compare the keys here as a double remove in quick
  245|       |     succession of a node with key != KEY_NOTUSED && same != NULL
  246|       |     could return the same key but a different node. */
  247|  3.08k|  if(t != removenode)
  248|      0|    return 2;
  249|       |
  250|       |  /* Check if there is a list with identical sizes, as then we're trying to
  251|       |     remove the root node of a list of nodes with identical keys. */
  252|  3.08k|  x = t->samen;
  253|  3.08k|  if(x != t) {
  254|       |    /* 'x' is the new root node, we just make it use the root node's
  255|       |       smaller/larger links */
  256|       |
  257|      0|    x->key = t->key;
  258|      0|    x->larger = t->larger;
  259|      0|    x->smaller = t->smaller;
  260|      0|    x->samep = t->samep;
  261|      0|    t->samep->samen = x;
  262|      0|  }
  263|  3.08k|  else {
  264|       |    /* Remove the root node */
  265|  3.08k|    if(!t->smaller)
  266|  3.08k|      x = t->larger;
  267|      0|    else {
  268|      0|      x = Curl_splay(removenode->key, t->smaller);
  269|      0|      x->larger = t->larger;
  270|      0|    }
  271|  3.08k|  }
  272|       |
  273|  3.08k|  *newroot = x; /* store new root pointer */
  274|       |
  275|  3.08k|  return 0;
  276|  3.08k|}

Curl_raw_toupper:
   34|  2.95M|{
   35|  2.95M|#if !defined(CURL_DOES_CONVERSIONS)
   36|  2.95M|  if(in >= 'a' && in <= 'z')
   37|  1.18M|    return (char)('A' + in - 'a');
   38|       |#else
   39|       |  switch(in) {
   40|       |  case 'a':
   41|       |    return 'A';
   42|       |  case 'b':
   43|       |    return 'B';
   44|       |  case 'c':
   45|       |    return 'C';
   46|       |  case 'd':
   47|       |    return 'D';
   48|       |  case 'e':
   49|       |    return 'E';
   50|       |  case 'f':
   51|       |    return 'F';
   52|       |  case 'g':
   53|       |    return 'G';
   54|       |  case 'h':
   55|       |    return 'H';
   56|       |  case 'i':
   57|       |    return 'I';
   58|       |  case 'j':
   59|       |    return 'J';
   60|       |  case 'k':
   61|       |    return 'K';
   62|       |  case 'l':
   63|       |    return 'L';
   64|       |  case 'm':
   65|       |    return 'M';
   66|       |  case 'n':
   67|       |    return 'N';
   68|       |  case 'o':
   69|       |    return 'O';
   70|       |  case 'p':
   71|       |    return 'P';
   72|       |  case 'q':
   73|       |    return 'Q';
   74|       |  case 'r':
   75|       |    return 'R';
   76|       |  case 's':
   77|       |    return 'S';
   78|       |  case 't':
   79|       |    return 'T';
   80|       |  case 'u':
   81|       |    return 'U';
   82|       |  case 'v':
   83|       |    return 'V';
   84|       |  case 'w':
   85|       |    return 'W';
   86|       |  case 'x':
   87|       |    return 'X';
   88|       |  case 'y':
   89|       |    return 'Y';
   90|       |  case 'z':
   91|       |    return 'Z';
   92|       |  }
   93|       |#endif
   94|       |
   95|  1.76M|  return in;
   96|  2.95M|}
Curl_strcasecompare:
  181|   286k|{
  182|   613k|  while(*first && *second) {
  183|   549k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second))
  184|       |      /* get out of the loop as soon as they don't match */
  185|   221k|      break;
  186|   327k|    first++;
  187|   327k|    second++;
  188|   327k|  }
  189|       |  /* we do the comparison here (possibly again), just to make sure that if the
  190|       |     loop above is skipped because one of the strings reached zero, we must not
  191|       |     return this as a successful match */
  192|   286k|  return (Curl_raw_toupper(*first) == Curl_raw_toupper(*second));
  193|   286k|}
Curl_strncasecompare:
  209|   216k|{
  210|   463k|  while(*first && *second && max) {
  211|   429k|    if(Curl_raw_toupper(*first) != Curl_raw_toupper(*second)) {
  212|   181k|      break;
  213|   181k|    }
  214|   247k|    max--;
  215|   247k|    first++;
  216|   247k|    second++;
  217|   247k|  }
  218|   216k|  if(0 == max)
  219|  15.4k|    return 1; /* they are equal this far */
  220|       |
  221|   200k|  return Curl_raw_toupper(*first) == Curl_raw_toupper(*second);
  222|   216k|}
Curl_strntoupper:
  230|  1.72k|{
  231|  1.72k|  if(n < 1)
  232|      0|    return;
  233|       |
  234|  18.8k|  do {
  235|  18.8k|    *dest++ = Curl_raw_toupper(*src);
  236|  18.8k|  } while(*src++ && --n);
  237|  1.72k|}
Curl_strntolower:
  245|  11.3k|{
  246|  11.3k|  if(n < 1)
  247|      0|    return;
  248|       |
  249|   170k|  do {
  250|   170k|    *dest++ = raw_tolower(*src);
  251|   170k|  } while(*src++ && --n);
  252|  11.3k|}
curl_strequal:
  257|  2.61k|{
  258|  2.61k|  return Curl_strcasecompare(first, second);
  259|  2.61k|}
curl_strnequal:
  261|   147k|{
  262|   147k|  return Curl_strncasecompare(first, second, max);
  263|   147k|}
strcase.c:raw_tolower:
  102|   170k|{
  103|   170k|#if !defined(CURL_DOES_CONVERSIONS)
  104|   170k|  if(in >= 'A' && in <= 'Z')
  105|      0|    return (char)('a' + in - 'A');
  106|       |#else
  107|       |  switch(in) {
  108|       |  case 'A':
  109|       |    return 'a';
  110|       |  case 'B':
  111|       |    return 'b';
  112|       |  case 'C':
  113|       |    return 'c';
  114|       |  case 'D':
  115|       |    return 'd';
  116|       |  case 'E':
  117|       |    return 'e';
  118|       |  case 'F':
  119|       |    return 'f';
  120|       |  case 'G':
  121|       |    return 'g';
  122|       |  case 'H':
  123|       |    return 'h';
  124|       |  case 'I':
  125|       |    return 'i';
  126|       |  case 'J':
  127|       |    return 'j';
  128|       |  case 'K':
  129|       |    return 'k';
  130|       |  case 'L':
  131|       |    return 'l';
  132|       |  case 'M':
  133|       |    return 'm';
  134|       |  case 'N':
  135|       |    return 'n';
  136|       |  case 'O':
  137|       |    return 'o';
  138|       |  case 'P':
  139|       |    return 'p';
  140|       |  case 'Q':
  141|       |    return 'q';
  142|       |  case 'R':
  143|       |    return 'r';
  144|       |  case 'S':
  145|       |    return 's';
  146|       |  case 'T':
  147|       |    return 't';
  148|       |  case 'U':
  149|       |    return 'u';
  150|       |  case 'V':
  151|       |    return 'v';
  152|       |  case 'W':
  153|       |    return 'w';
  154|       |  case 'X':
  155|       |    return 'x';
  156|       |  case 'Y':
  157|       |    return 'y';
  158|       |  case 'Z':
  159|       |    return 'z';
  160|       |  }
  161|       |#endif
  162|       |
  163|   170k|  return in;
  164|   170k|}

Curl_saferealloc:
  115|  4.73M|{
  116|  4.73M|  void *datap = realloc(ptr, size);
  117|  4.73M|  if(size && !datap)
  118|       |    /* only free 'ptr' if size was non-zero */
  119|      0|    free(ptr);
  120|  4.73M|  return datap;
  121|  4.73M|}

curl_url_strerror:
  458|     53|{
  459|     53|#ifndef CURL_DISABLE_VERBOSE_STRINGS
  460|     53|  switch(error) {
  461|      0|  case CURLUE_OK:
  462|      0|    return "No error";
  463|       |
  464|      0|  case CURLUE_BAD_HANDLE:
  465|      0|    return "An invalid CURLU pointer was passed as argument";
  466|       |
  467|      0|  case CURLUE_BAD_PARTPOINTER:
  468|      0|    return "An invalid 'part' argument was passed as argument";
  469|       |
  470|     33|  case CURLUE_MALFORMED_INPUT:
  471|     33|    return "A malformed input was passed to a URL API function";
  472|       |
  473|     12|  case CURLUE_BAD_PORT_NUMBER:
  474|     12|    return "The port number was not a decimal number between 0 and 65535";
  475|       |
  476|      0|  case CURLUE_UNSUPPORTED_SCHEME:
  477|      0|    return "This libcurl build doesn't support the given URL scheme";
  478|       |
  479|      0|  case CURLUE_URLDECODE:
  480|      0|    return "URL decode error, most likely because of rubbish in the input";
  481|       |
  482|      0|  case CURLUE_OUT_OF_MEMORY:
  483|      0|    return "A memory function failed";
  484|       |
  485|      0|  case CURLUE_USER_NOT_ALLOWED:
  486|      0|    return "Credentials was passed in the URL when prohibited";
  487|       |
  488|      0|  case CURLUE_UNKNOWN_PART:
  489|      0|    return "An unknown part ID was passed to a URL API function";
  490|       |
  491|      0|  case CURLUE_NO_SCHEME:
  492|      0|    return "There is no scheme part in the URL";
  493|       |
  494|      0|  case CURLUE_NO_USER:
  495|      0|    return "There is no user part in the URL";
  496|       |
  497|      0|  case CURLUE_NO_PASSWORD:
  498|      0|    return "There is no password part in the URL";
  499|       |
  500|      0|  case CURLUE_NO_OPTIONS:
  501|      0|    return "There is no options part in the URL";
  502|       |
  503|      8|  case CURLUE_NO_HOST:
  504|      8|    return "There is no host part in the URL";
  505|       |
  506|      0|  case CURLUE_NO_PORT:
  507|      0|    return "There is no port part in the URL";
  508|       |
  509|      0|  case CURLUE_NO_QUERY:
  510|      0|    return "There is no query part in the URL";
  511|       |
  512|      0|  case CURLUE_NO_FRAGMENT:
  513|      0|    return "There is no fragment part in the URL";
  514|       |
  515|      0|  case CURLUE_LAST:
  516|      0|    break;
  517|     53|  }
  518|       |
  519|      0|  return "CURLUcode unknown";
  520|       |#else
  521|       |  if(error == CURLUE_OK)
  522|       |    return "No error";
  523|       |  else
  524|       |    return "Error";
  525|       |#endif
  526|     53|}
Curl_strerror:
  788|  2.79k|{
  789|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  790|       |  DWORD old_win_err = GetLastError();
  791|       |#endif
  792|  2.79k|  int old_errno = errno;
  793|  2.79k|  char *p;
  794|  2.79k|  size_t max;
  795|       |
  796|  2.79k|  if(!buflen)
  797|      0|    return NULL;
  798|       |
  799|  2.79k|#ifndef WIN32
  800|  2.79k|  DEBUGASSERT(err >= 0);
  801|  2.79k|#endif
  802|       |
  803|  2.79k|  max = buflen - 1;
  804|  2.79k|  *buf = '\0';
  805|       |
  806|       |#if defined(WIN32) || defined(_WIN32_WCE)
  807|       |#if defined(WIN32)
  808|       |  /* 'sys_nerr' is the maximum errno number, it is not widely portable */
  809|       |  if(err >= 0 && err < sys_nerr)
  810|       |    strncpy(buf, sys_errlist[err], max);
  811|       |  else
  812|       |#endif
  813|       |  {
  814|       |    if(
  815|       |#ifdef USE_WINSOCK
  816|       |       !get_winsock_error(err, buf, max) &&
  817|       |#endif
  818|       |       !get_winapi_error((DWORD)err, buf, max))
  819|       |      msnprintf(buf, max, "Unknown error %d (%#x)", err, err);
  820|       |  }
  821|       |#else /* not Windows coming up */
  822|       |
  823|  2.79k|#if defined(HAVE_STRERROR_R) && defined(HAVE_POSIX_STRERROR_R)
  824|       | /*
  825|       |  * The POSIX-style strerror_r() may set errno to ERANGE if insufficient
  826|       |  * storage is supplied via 'strerrbuf' and 'buflen' to hold the generated
  827|       |  * message string, or EINVAL if 'errnum' is not a valid error number.
  828|       |  */
  829|  2.79k|  if(0 != strerror_r(err, buf, max)) {
  830|      0|    if('\0' == buf[0])
  831|      0|      msnprintf(buf, max, "Unknown error %d", err);
  832|      0|  }
  833|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_GLIBC_STRERROR_R)
  834|       | /*
  835|       |  * The glibc-style strerror_r() only *might* use the buffer we pass to
  836|       |  * the function, but it always returns the error message as a pointer,
  837|       |  * so we must copy that string unconditionally (if non-NULL).
  838|       |  */
  839|       |  {
  840|       |    char buffer[256];
  841|       |    char *msg = strerror_r(err, buffer, sizeof(buffer));
  842|       |    if(msg)
  843|       |      strncpy(buf, msg, max);
  844|       |    else
  845|       |      msnprintf(buf, max, "Unknown error %d", err);
  846|       |  }
  847|       |#elif defined(HAVE_STRERROR_R) && defined(HAVE_VXWORKS_STRERROR_R)
  848|       | /*
  849|       |  * The vxworks-style strerror_r() does use the buffer we pass to the function.
  850|       |  * The buffer size should be at least NAME_MAX (256)
  851|       |  */
  852|       |  {
  853|       |    char buffer[256];
  854|       |    if(OK == strerror_r(err, buffer))
  855|       |      strncpy(buf, buffer, max);
  856|       |    else
  857|       |      msnprintf(buf, max, "Unknown error %d", err);
  858|       |  }
  859|       |#else
  860|       |  {
  861|       |    /* !checksrc! disable STRERROR 1 */
  862|       |    const char *msg = strerror(err);
  863|       |    if(msg)
  864|       |      strncpy(buf, msg, max);
  865|       |    else
  866|       |      msnprintf(buf, max, "Unknown error %d", err);
  867|       |  }
  868|       |#endif
  869|       |
  870|  2.79k|#endif /* end of not Windows */
  871|       |
  872|  2.79k|  buf[max] = '\0'; /* make sure the string is null-terminated */
  873|       |
  874|       |  /* strip trailing '\r\n' or '\n'. */
  875|  2.79k|  p = strrchr(buf, '\n');
  876|  2.79k|  if(p && (p - buf) >= 2)
  877|      0|    *p = '\0';
  878|  2.79k|  p = strrchr(buf, '\r');
  879|  2.79k|  if(p && (p - buf) >= 1)
  880|      0|    *p = '\0';
  881|       |
  882|  2.79k|  if(errno != old_errno)
  883|      0|    errno = old_errno;
  884|       |
  885|       |#ifdef PRESERVE_WINDOWS_ERROR_CODE
  886|       |  if(old_win_err != GetLastError())
  887|       |    SetLastError(old_win_err);
  888|       |#endif
  889|       |
  890|  2.79k|  return buf;
  891|  2.79k|}

curlx_strtoofft:
  217|    614|{
  218|    614|  char *end;
  219|    614|  curl_off_t number;
  220|    614|  errno = 0;
  221|    614|  *num = 0; /* clear by default */
  222|       |
  223|  1.20k|  while(*str && ISSPACE(*str))
  224|    592|    str++;
  225|    614|  if('-' == *str) {
  226|     10|    if(endp)
  227|      7|      *endp = (char *)str; /* didn't actually move */
  228|     10|    return CURL_OFFT_INVAL; /* nothing parsed */
  229|     10|  }
  230|    604|  number = strtooff(str, &end, base);
  231|    604|  if(endp)
  232|     60|    *endp = end;
  233|    604|  if(errno == ERANGE)
  234|       |    /* overflow/underflow */
  235|     39|    return CURL_OFFT_FLOW;
  236|    565|  else if(str == end)
  237|       |    /* nothing parsed */
  238|     29|    return CURL_OFFT_INVAL;
  239|       |
  240|    536|  *num = number;
  241|    536|  return CURL_OFFT_OK;
  242|    604|}

tftp.c:tftp_disconnect:
  942|      4|{
  943|      4|  struct tftp_state_data *state = conn->proto.tftpc;
  944|      4|  (void) data;
  945|      4|  (void) dead_connection;
  946|       |
  947|       |  /* done, free dynamically allocated pkt buffers */
  948|      4|  if(state) {
  949|      4|    Curl_safefree(state->rpacket.data);
  950|      4|    Curl_safefree(state->spacket.data);
  951|      4|    free(state);
  952|      4|  }
  953|       |
  954|      4|  return CURLE_OK;
  955|      4|}
tftp.c:tftp_connect:
  965|      4|{
  966|      4|  struct tftp_state_data *state;
  967|      4|  int blksize;
  968|      4|  int need_blksize;
  969|      4|  struct connectdata *conn = data->conn;
  970|       |
  971|      4|  blksize = TFTP_BLKSIZE_DEFAULT;
  972|       |
  973|      4|  state = conn->proto.tftpc = calloc(1, sizeof(struct tftp_state_data));
  974|      4|  if(!state)
  975|      0|    return CURLE_OUT_OF_MEMORY;
  976|       |
  977|       |  /* alloc pkt buffers based on specified blksize */
  978|      4|  if(data->set.tftp_blksize) {
  979|      0|    blksize = (int)data->set.tftp_blksize;
  980|      0|    if(blksize > TFTP_BLKSIZE_MAX || blksize < TFTP_BLKSIZE_MIN)
  981|      0|      return CURLE_TFTP_ILLEGAL;
  982|      0|  }
  983|       |
  984|      4|  need_blksize = blksize;
  985|       |  /* default size is the fallback when no OACK is received */
  986|      4|  if(need_blksize < TFTP_BLKSIZE_DEFAULT)
  987|      0|    need_blksize = TFTP_BLKSIZE_DEFAULT;
  988|       |
  989|      4|  if(!state->rpacket.data) {
  990|      4|    state->rpacket.data = calloc(1, need_blksize + 2 + 2);
  991|       |
  992|      4|    if(!state->rpacket.data)
  993|      0|      return CURLE_OUT_OF_MEMORY;
  994|      4|  }
  995|       |
  996|      4|  if(!state->spacket.data) {
  997|      4|    state->spacket.data = calloc(1, need_blksize + 2 + 2);
  998|       |
  999|      4|    if(!state->spacket.data)
 1000|      0|      return CURLE_OUT_OF_MEMORY;
 1001|      4|  }
 1002|       |
 1003|       |  /* we don't keep TFTP connections up basically because there's none or very
 1004|       |   * little gain for UDP */
 1005|      4|  connclose(conn, "TFTP");
 1006|       |
 1007|      4|  state->data = data;
 1008|      4|  state->sockfd = conn->sock[FIRSTSOCKET];
 1009|      4|  state->state = TFTP_STATE_START;
 1010|      4|  state->error = TFTP_ERR_NONE;
 1011|      4|  state->blksize = TFTP_BLKSIZE_DEFAULT; /* Unless updated by OACK response */
 1012|      4|  state->requested_blksize = blksize;
 1013|       |
 1014|      4|  ((struct sockaddr *)&state->local_addr)->sa_family =
 1015|      4|    (CURL_SA_FAMILY_T)(conn->ip_addr->ai_family);
 1016|       |
 1017|      4|  tftp_set_timeouts(state);
 1018|       |
 1019|      4|  if(!conn->bits.bound) {
 1020|       |    /* If not already bound, bind to any interface, random UDP port. If it is
 1021|       |     * reused or a custom local port was desired, this has already been done!
 1022|       |     *
 1023|       |     * We once used the size of the local_addr struct as the third argument
 1024|       |     * for bind() to better work with IPv6 or whatever size the struct could
 1025|       |     * have, but we learned that at least Tru64, AIX and IRIX *requires* the
 1026|       |     * size of that argument to match the exact size of a 'sockaddr_in' struct
 1027|       |     * when running IPv4-only.
 1028|       |     *
 1029|       |     * Therefore we use the size from the address we connected to, which we
 1030|       |     * assume uses the same IP version and thus hopefully this works for both
 1031|       |     * IPv4 and IPv6...
 1032|       |     */
 1033|      4|    int rc = bind(state->sockfd, (struct sockaddr *)&state->local_addr,
 1034|      4|                  conn->ip_addr->ai_addrlen);
 1035|      4|    if(rc) {
 1036|      4|      char buffer[STRERROR_LEN];
 1037|      4|      failf(data, "bind() failed; %s",
 1038|      4|            Curl_strerror(SOCKERRNO, buffer, sizeof(buffer)));
 1039|      4|      return CURLE_COULDNT_CONNECT;
 1040|      4|    }
 1041|      0|    conn->bits.bound = TRUE;
 1042|      0|  }
 1043|       |
 1044|      0|  Curl_pgrsStartNow(data);
 1045|       |
 1046|      0|  *done = TRUE;
 1047|       |
 1048|      0|  return CURLE_OK;
 1049|      4|}
tftp.c:tftp_set_timeouts:
  203|      4|{
  204|      4|  time_t maxtime, timeout;
  205|      4|  timediff_t timeout_ms;
  206|      4|  bool start = (state->state == TFTP_STATE_START) ? TRUE : FALSE;
  207|       |
  208|       |  /* Compute drop-dead time */
  209|      4|  timeout_ms = Curl_timeleft(state->data, NULL, start);
  210|       |
  211|      4|  if(timeout_ms < 0) {
  212|       |    /* time-out, bail out, go home */
  213|      0|    failf(state->data, "Connection time-out");
  214|      0|    return CURLE_OPERATION_TIMEDOUT;
  215|      0|  }
  216|       |
  217|      4|  if(timeout_ms > 0)
  218|      4|    maxtime = (time_t)(timeout_ms + 500) / 1000;
  219|      0|  else
  220|      0|    maxtime = 3600; /* use for calculating block timeouts */
  221|       |
  222|       |  /* Set per-block timeout to total */
  223|      4|  timeout = maxtime;
  224|       |
  225|       |  /* Average reposting an ACK after 5 seconds */
  226|      4|  state->retry_max = (int)timeout/5;
  227|       |
  228|       |  /* But bound the total number */
  229|      4|  if(state->retry_max<3)
  230|      4|    state->retry_max = 3;
  231|       |
  232|      4|  if(state->retry_max>50)
  233|      0|    state->retry_max = 50;
  234|       |
  235|       |  /* Compute the re-ACK interval to suit the timeout */
  236|      4|  state->retry_time = (int)(timeout/state->retry_max);
  237|      4|  if(state->retry_time<1)
  238|      4|    state->retry_time = 1;
  239|       |
  240|      4|  infof(state->data,
  241|      4|        "set timeouts for state %d; Total % " CURL_FORMAT_CURL_OFF_T
  242|      4|        ", retry %d maxtry %d",
  243|      4|        (int)state->state, timeout_ms, state->retry_time, state->retry_max);
  244|       |
  245|       |  /* init RX time */
  246|      4|  time(&state->rx_time);
  247|       |
  248|      4|  return CURLE_OK;
  249|      4|}
tftp.c:tftp_done:
 1060|      4|{
 1061|      4|  CURLcode result = CURLE_OK;
 1062|      4|  struct connectdata *conn = data->conn;
 1063|      4|  struct tftp_state_data *state = conn->proto.tftpc;
 1064|       |
 1065|      4|  (void)status; /* unused */
 1066|      4|  (void)premature; /* not used */
 1067|       |
 1068|      4|  if(Curl_pgrsDone(data))
 1069|      0|    return CURLE_ABORTED_BY_CALLBACK;
 1070|       |
 1071|       |  /* If we have encountered an error */
 1072|      4|  if(state)
 1073|      4|    result = tftp_translate_code(state->error);
 1074|       |
 1075|      4|  return result;
 1076|      4|}
tftp.c:tftp_translate_code:
  850|      4|{
  851|      4|  CURLcode result = CURLE_OK;
  852|       |
  853|      4|  if(error != TFTP_ERR_NONE) {
  854|      0|    switch(error) {
  855|      0|    case TFTP_ERR_NOTFOUND:
  856|      0|      result = CURLE_TFTP_NOTFOUND;
  857|      0|      break;
  858|      0|    case TFTP_ERR_PERM:
  859|      0|      result = CURLE_TFTP_PERM;
  860|      0|      break;
  861|      0|    case TFTP_ERR_DISKFULL:
  862|      0|      result = CURLE_REMOTE_DISK_FULL;
  863|      0|      break;
  864|      0|    case TFTP_ERR_UNDEF:
  865|      0|    case TFTP_ERR_ILLEGAL:
  866|      0|      result = CURLE_TFTP_ILLEGAL;
  867|      0|      break;
  868|      0|    case TFTP_ERR_UNKNOWNID:
  869|      0|      result = CURLE_TFTP_UNKNOWNID;
  870|      0|      break;
  871|      0|    case TFTP_ERR_EXISTS:
  872|      0|      result = CURLE_REMOTE_FILE_EXISTS;
  873|      0|      break;
  874|      0|    case TFTP_ERR_NOSUCHUSER:
  875|      0|      result = CURLE_TFTP_NOSUCHUSER;
  876|      0|      break;
  877|      0|    case TFTP_ERR_TIMEOUT:
  878|      0|      result = CURLE_OPERATION_TIMEDOUT;
  879|      0|      break;
  880|      0|    case TFTP_ERR_NORESPONSE:
  881|      0|      result = CURLE_COULDNT_CONNECT;
  882|      0|      break;
  883|      0|    default:
  884|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  885|      0|      break;
  886|      0|    }
  887|      0|  }
  888|      4|  else
  889|      4|    result = CURLE_OK;
  890|       |
  891|      4|  return result;
  892|      4|}
tftp.c:tftp_setup_connection:
 1375|      4|{
 1376|      4|  char *type;
 1377|       |
 1378|      4|  conn->transport = TRNSPRT_UDP;
 1379|       |
 1380|       |  /* TFTP URLs support an extension like ";mode=<typecode>" that
 1381|       |   * we'll try to get now! */
 1382|      4|  type = strstr(data->state.up.path, ";mode=");
 1383|       |
 1384|      4|  if(!type)
 1385|      2|    type = strstr(conn->host.rawalloc, ";mode=");
 1386|       |
 1387|      4|  if(type) {
 1388|      3|    char command;
 1389|      3|    *type = 0;                   /* it was in the middle of the hostname */
 1390|      3|    command = Curl_raw_toupper(type[6]);
 1391|       |
 1392|      3|    switch(command) {
 1393|      1|    case 'A': /* ASCII mode */
 1394|      2|    case 'N': /* NETASCII mode */
 1395|      2|      data->state.prefer_ascii = TRUE;
 1396|      2|      break;
 1397|       |
 1398|      0|    case 'O': /* octet mode */
 1399|      0|    case 'I': /* binary mode */
 1400|      1|    default:
 1401|       |      /* switch off ASCII */
 1402|      1|      data->state.prefer_ascii = FALSE;
 1403|      1|      break;
 1404|      3|    }
 1405|      3|  }
 1406|       |
 1407|      4|  return CURLE_OK;
 1408|      4|}

Curl_now:
   62|  23.7M|{
   63|       |  /*
   64|       |  ** clock_gettime() is granted to be increased monotonically when the
   65|       |  ** monotonic clock is queried. Time starting point is unspecified, it
   66|       |  ** could be the system start-up time, the Epoch, or something else,
   67|       |  ** in any case the time starting point does not change once that the
   68|       |  ** system has started up.
   69|       |  */
   70|  23.7M|#ifdef HAVE_GETTIMEOFDAY
   71|  23.7M|  struct timeval now;
   72|  23.7M|#endif
   73|  23.7M|  struct curltime cnow;
   74|  23.7M|  struct timespec tsnow;
   75|       |
   76|       |  /*
   77|       |  ** clock_gettime() may be defined by Apple's SDK as weak symbol thus
   78|       |  ** code compiles but fails during run-time if clock_gettime() is
   79|       |  ** called on unsupported OS version.
   80|       |  */
   81|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   82|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   83|       |  bool have_clock_gettime = FALSE;
   84|       |  if(__builtin_available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *))
   85|       |    have_clock_gettime = TRUE;
   86|       |#endif
   87|       |
   88|  23.7M|  if(
   89|       |#if defined(__APPLE__) && defined(HAVE_BUILTIN_AVAILABLE) && \
   90|       |        (HAVE_BUILTIN_AVAILABLE == 1)
   91|       |    have_clock_gettime &&
   92|       |#endif
   93|  23.7M|    (0 == clock_gettime(CLOCK_MONOTONIC, &tsnow))) {
   94|  23.7M|    cnow.tv_sec = tsnow.tv_sec;
   95|  23.7M|    cnow.tv_usec = (unsigned int)(tsnow.tv_nsec / 1000);
   96|  23.7M|  }
   97|       |  /*
   98|       |  ** Even when the configure process has truly detected monotonic clock
   99|       |  ** availability, it might happen that it is not actually available at
  100|       |  ** run-time. When this occurs simply fallback to other time source.
  101|       |  */
  102|      0|#ifdef HAVE_GETTIMEOFDAY
  103|      0|  else {
  104|      0|    (void)gettimeofday(&now, NULL);
  105|      0|    cnow.tv_sec = now.tv_sec;
  106|      0|    cnow.tv_usec = (unsigned int)now.tv_usec;
  107|      0|  }
  108|       |#else
  109|       |  else {
  110|       |    cnow.tv_sec = time(NULL);
  111|       |    cnow.tv_usec = 0;
  112|       |  }
  113|       |#endif
  114|  23.7M|  return cnow;
  115|  23.7M|}
Curl_timediff:
  187|  9.53M|{
  188|  9.53M|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  189|  9.53M|  if(diff >= (TIMEDIFF_T_MAX/1000))
  190|      0|    return TIMEDIFF_T_MAX;
  191|  9.53M|  else if(diff <= (TIMEDIFF_T_MIN/1000))
  192|      0|    return TIMEDIFF_T_MIN;
  193|  9.53M|  return diff * 1000 + (newer.tv_usec-older.tv_usec)/1000;
  194|  9.53M|}
Curl_timediff_us:
  201|  9.49M|{
  202|  9.49M|  timediff_t diff = (timediff_t)newer.tv_sec-older.tv_sec;
  203|  9.49M|  if(diff >= (TIMEDIFF_T_MAX/1000000))
  204|      0|    return TIMEDIFF_T_MAX;
  205|  9.49M|  else if(diff <= (TIMEDIFF_T_MIN/1000000))
  206|      0|    return TIMEDIFF_T_MIN;
  207|  9.49M|  return diff * 1000000 + newer.tv_usec-older.tv_usec;
  208|  9.49M|}

Curl_checkheaders:
   99|  8.04k|{
  100|  8.04k|  struct curl_slist *head;
  101|  8.04k|  size_t thislen = strlen(thisheader);
  102|  8.04k|  DEBUGASSERT(thislen);
  103|  8.04k|  DEBUGASSERT(thisheader[thislen-1] != ':');
  104|       |
  105|  35.5k|  for(head = data->set.headers; head; head = head->next) {
  106|  27.5k|    if(strncasecompare(head->data, thisheader, thislen) &&
  107|  27.5k|       Curl_headersep(head->data[thislen]) )
  108|     80|      return head->data;
  109|  27.5k|  }
  110|       |
  111|  7.96k|  return NULL;
  112|  8.04k|}
Curl_get_upload_buffer:
  116|    342|{
  117|    342|  if(!data->state.ulbuf) {
  118|    162|    data->state.ulbuf = malloc(data->set.upload_buffer_size);
  119|    162|    if(!data->state.ulbuf)
  120|      0|      return CURLE_OUT_OF_MEMORY;
  121|    162|  }
  122|    342|  return CURLE_OK;
  123|    342|}
Curl_fillreadbuffer:
  161|    182|{
  162|    182|  size_t buffersize = bytes;
  163|    182|  size_t nread;
  164|       |
  165|    182|  curl_read_callback readfunc = NULL;
  166|    182|  void *extra_data = NULL;
  167|       |
  168|       |#ifdef CURL_DOES_CONVERSIONS
  169|       |  bool sending_http_headers = FALSE;
  170|       |  struct connectdata *conn = data->conn;
  171|       |
  172|       |  if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  173|       |    const struct HTTP *http = data->req.p.http;
  174|       |
  175|       |    if(http->sending == HTTPSEND_REQUEST)
  176|       |      /* We're sending the HTTP request headers, not the data.
  177|       |         Remember that so we don't re-translate them into garbage. */
  178|       |      sending_http_headers = TRUE;
  179|       |  }
  180|       |#endif
  181|       |
  182|    182|#ifndef CURL_DISABLE_HTTP
  183|    182|  if(data->state.trailers_state == TRAILERS_INITIALIZED) {
  184|      0|    struct curl_slist *trailers = NULL;
  185|      0|    CURLcode result;
  186|      0|    int trailers_ret_code;
  187|       |
  188|       |    /* at this point we already verified that the callback exists
  189|       |       so we compile and store the trailers buffer, then proceed */
  190|      0|    infof(data,
  191|      0|          "Moving trailers state machine from initialized to sending.");
  192|      0|    data->state.trailers_state = TRAILERS_SENDING;
  193|      0|    Curl_dyn_init(&data->state.trailers_buf, DYN_TRAILERS);
  194|       |
  195|      0|    data->state.trailers_bytes_sent = 0;
  196|      0|    Curl_set_in_callback(data, true);
  197|      0|    trailers_ret_code = data->set.trailer_callback(&trailers,
  198|      0|                                                   data->set.trailer_data);
  199|      0|    Curl_set_in_callback(data, false);
  200|      0|    if(trailers_ret_code == CURL_TRAILERFUNC_OK) {
  201|      0|      result = Curl_http_compile_trailers(trailers, &data->state.trailers_buf,
  202|      0|                                          data);
  203|      0|    }
  204|      0|    else {
  205|      0|      failf(data, "operation aborted by trailing headers callback");
  206|      0|      *nreadp = 0;
  207|      0|      result = CURLE_ABORTED_BY_CALLBACK;
  208|      0|    }
  209|      0|    if(result) {
  210|      0|      Curl_dyn_free(&data->state.trailers_buf);
  211|      0|      curl_slist_free_all(trailers);
  212|      0|      return result;
  213|      0|    }
  214|      0|    infof(data, "Successfully compiled trailers.");
  215|      0|    curl_slist_free_all(trailers);
  216|      0|  }
  217|    182|#endif
  218|       |
  219|       |  /* if we are transmitting trailing data, we don't need to write
  220|       |     a chunk size so we skip this */
  221|    182|  if(data->req.upload_chunky &&
  222|    182|     data->state.trailers_state == TRAILERS_NONE) {
  223|       |    /* if chunked Transfer-Encoding */
  224|      2|    buffersize -= (8 + 2 + 2);   /* 32bit hex + CRLF + CRLF */
  225|      2|    data->req.upload_fromhere += (8 + 2); /* 32bit hex + CRLF */
  226|      2|  }
  227|       |
  228|    182|#ifndef CURL_DISABLE_HTTP
  229|    182|  if(data->state.trailers_state == TRAILERS_SENDING) {
  230|       |    /* if we're here then that means that we already sent the last empty chunk
  231|       |       but we didn't send a final CR LF, so we sent 0 CR LF. We then start
  232|       |       pulling trailing data until we have no more at which point we
  233|       |       simply return to the previous point in the state machine as if
  234|       |       nothing happened.
  235|       |       */
  236|      0|    readfunc = trailers_read;
  237|      0|    extra_data = (void *)data;
  238|      0|  }
  239|    182|  else
  240|    182|#endif
  241|    182|  {
  242|    182|    readfunc = data->state.fread_func;
  243|    182|    extra_data = data->state.in;
  244|    182|  }
  245|       |
  246|    182|  Curl_set_in_callback(data, true);
  247|    182|  nread = readfunc(data->req.upload_fromhere, 1,
  248|    182|                   buffersize, extra_data);
  249|    182|  Curl_set_in_callback(data, false);
  250|       |
  251|    182|  if(nread == CURL_READFUNC_ABORT) {
  252|      3|    failf(data, "operation aborted by callback");
  253|      3|    *nreadp = 0;
  254|      3|    return CURLE_ABORTED_BY_CALLBACK;
  255|      3|  }
  256|    179|  if(nread == CURL_READFUNC_PAUSE) {
  257|      0|    struct SingleRequest *k = &data->req;
  258|       |
  259|      0|    if(data->conn->handler->flags & PROTOPT_NONETWORK) {
  260|       |      /* protocols that work without network cannot be paused. This is
  261|       |         actually only FILE:// just now, and it can't pause since the transfer
  262|       |         isn't done using the "normal" procedure. */
  263|      0|      failf(data, "Read callback asked for PAUSE when not supported!");
  264|      0|      return CURLE_READ_ERROR;
  265|      0|    }
  266|       |
  267|       |    /* CURL_READFUNC_PAUSE pauses read callbacks that feed socket writes */
  268|      0|    k->keepon |= KEEP_SEND_PAUSE; /* mark socket send as paused */
  269|      0|    if(data->req.upload_chunky) {
  270|       |        /* Back out the preallocation done above */
  271|      0|      data->req.upload_fromhere -= (8 + 2);
  272|      0|    }
  273|      0|    *nreadp = 0;
  274|       |
  275|      0|    return CURLE_OK; /* nothing was read */
  276|      0|  }
  277|    179|  else if(nread > buffersize) {
  278|       |    /* the read function returned a too large value */
  279|      0|    *nreadp = 0;
  280|      0|    failf(data, "read function returned funny value");
  281|      0|    return CURLE_READ_ERROR;
  282|      0|  }
  283|       |
  284|    179|  if(!data->req.forbidchunk && data->req.upload_chunky) {
  285|       |    /* if chunked Transfer-Encoding
  286|       |     *    build chunk:
  287|       |     *
  288|       |     *        <HEX SIZE> CRLF
  289|       |     *        <DATA> CRLF
  290|       |     */
  291|       |    /* On non-ASCII platforms the <DATA> may or may not be
  292|       |       translated based on state.prefer_ascii while the protocol
  293|       |       portion must always be translated to the network encoding.
  294|       |       To further complicate matters, line end conversion might be
  295|       |       done later on, so we need to prevent CRLFs from becoming
  296|       |       CRCRLFs if that's the case.  To do this we use bare LFs
  297|       |       here, knowing they'll become CRLFs later on.
  298|       |     */
  299|       |
  300|      2|    bool added_crlf = FALSE;
  301|      2|    int hexlen = 0;
  302|      2|    const char *endofline_native;
  303|      2|    const char *endofline_network;
  304|       |
  305|      2|    if(
  306|      2|#ifdef CURL_DO_LINEEND_CONV
  307|      2|       (data->state.prefer_ascii) ||
  308|      2|#endif
  309|      2|       (data->set.crlf)) {
  310|       |      /* \n will become \r\n later on */
  311|      0|      endofline_native  = "\n";
  312|      0|      endofline_network = "\x0a";
  313|      0|    }
  314|      2|    else {
  315|      2|      endofline_native  = "\r\n";
  316|      2|      endofline_network = "\x0d\x0a";
  317|      2|    }
  318|       |
  319|       |    /* if we're not handling trailing data, proceed as usual */
  320|      2|    if(data->state.trailers_state != TRAILERS_SENDING) {
  321|      2|      char hexbuffer[11] = "";
  322|      2|      hexlen = msnprintf(hexbuffer, sizeof(hexbuffer),
  323|      2|                         "%zx%s", nread, endofline_native);
  324|       |
  325|       |      /* move buffer pointer */
  326|      2|      data->req.upload_fromhere -= hexlen;
  327|      2|      nread += hexlen;
  328|       |
  329|       |      /* copy the prefix to the buffer, leaving out the NUL */
  330|      2|      memcpy(data->req.upload_fromhere, hexbuffer, hexlen);
  331|       |
  332|       |      /* always append ASCII CRLF to the data unless
  333|       |         we have a valid trailer callback */
  334|      2|#ifndef CURL_DISABLE_HTTP
  335|      2|      if((nread-hexlen) == 0 &&
  336|      2|          data->set.trailer_callback != NULL &&
  337|      2|          data->state.trailers_state == TRAILERS_NONE) {
  338|      0|        data->state.trailers_state = TRAILERS_INITIALIZED;
  339|      0|      }
  340|      2|      else
  341|      2|#endif
  342|      2|      {
  343|      2|        memcpy(data->req.upload_fromhere + nread,
  344|      2|               endofline_network,
  345|      2|               strlen(endofline_network));
  346|      2|        added_crlf = TRUE;
  347|      2|      }
  348|      2|    }
  349|       |
  350|       |#ifdef CURL_DOES_CONVERSIONS
  351|       |    {
  352|       |      CURLcode result;
  353|       |      size_t length;
  354|       |      if(data->state.prefer_ascii)
  355|       |        /* translate the protocol and data */
  356|       |        length = nread;
  357|       |      else
  358|       |        /* just translate the protocol portion */
  359|       |        length = hexlen;
  360|       |      if(length) {
  361|       |        result = Curl_convert_to_network(data, data->req.upload_fromhere,
  362|       |                                         length);
  363|       |        /* Curl_convert_to_network calls failf if unsuccessful */
  364|       |        if(result)
  365|       |          return result;
  366|       |      }
  367|       |    }
  368|       |#endif /* CURL_DOES_CONVERSIONS */
  369|       |
  370|      2|#ifndef CURL_DISABLE_HTTP
  371|      2|    if(data->state.trailers_state == TRAILERS_SENDING &&
  372|      2|       !trailers_left(data)) {
  373|      0|      Curl_dyn_free(&data->state.trailers_buf);
  374|      0|      data->state.trailers_state = TRAILERS_DONE;
  375|      0|      data->set.trailer_data = NULL;
  376|      0|      data->set.trailer_callback = NULL;
  377|       |      /* mark the transfer as done */
  378|      0|      data->req.upload_done = TRUE;
  379|      0|      infof(data, "Signaling end of chunked upload after trailers.");
  380|      0|    }
  381|      2|    else
  382|      2|#endif
  383|      2|      if((nread - hexlen) == 0 &&
  384|      2|         data->state.trailers_state != TRAILERS_INITIALIZED) {
  385|       |        /* mark this as done once this chunk is transferred */
  386|      1|        data->req.upload_done = TRUE;
  387|      1|        infof(data,
  388|      1|              "Signaling end of chunked upload via terminating chunk.");
  389|      1|      }
  390|       |
  391|      2|    if(added_crlf)
  392|      2|      nread += strlen(endofline_network); /* for the added end of line */
  393|      2|  }
  394|       |#ifdef CURL_DOES_CONVERSIONS
  395|       |  else if((data->state.prefer_ascii) && (!sending_http_headers)) {
  396|       |    CURLcode result;
  397|       |    result = Curl_convert_to_network(data, data->req.upload_fromhere, nread);
  398|       |    /* Curl_convert_to_network calls failf if unsuccessful */
  399|       |    if(result)
  400|       |      return result;
  401|       |  }
  402|       |#endif /* CURL_DOES_CONVERSIONS */
  403|       |
  404|    179|  *nreadp = nread;
  405|       |
  406|    179|  return CURLE_OK;
  407|    179|}
Curl_readrewind:
  416|     14|{
  417|     14|  struct connectdata *conn = data->conn;
  418|     14|  curl_mimepart *mimepart = &data->set.mimepost;
  419|       |
  420|     14|  conn->bits.rewindaftersend = FALSE; /* we rewind now */
  421|       |
  422|       |  /* explicitly switch off sending data on this connection now since we are
  423|       |     about to restart a new transfer and thus we want to avoid inadvertently
  424|       |     sending more data on the existing connection until the next transfer
  425|       |     starts */
  426|     14|  data->req.keepon &= ~KEEP_SEND;
  427|       |
  428|       |  /* We have sent away data. If not using CURLOPT_POSTFIELDS or
  429|       |     CURLOPT_HTTPPOST, call app to rewind
  430|       |  */
  431|     14|  if(conn->handler->protocol & PROTO_FAMILY_HTTP) {
  432|     14|    struct HTTP *http = data->req.p.http;
  433|       |
  434|     14|    if(http->sendit)
  435|     10|      mimepart = http->sendit;
  436|     14|  }
  437|     14|  if(data->set.postfields)
  438|      4|    ; /* do nothing */
  439|     10|  else if(data->state.httpreq == HTTPREQ_POST_MIME ||
  440|     10|          data->state.httpreq == HTTPREQ_POST_FORM) {
  441|     10|    CURLcode result = Curl_mime_rewind(mimepart);
  442|     10|    if(result) {
  443|      4|      failf(data, "Cannot rewind mime/post data");
  444|      4|      return result;
  445|      4|    }
  446|     10|  }
  447|      0|  else {
  448|      0|    if(data->set.seek_func) {
  449|      0|      int err;
  450|       |
  451|      0|      Curl_set_in_callback(data, true);
  452|      0|      err = (data->set.seek_func)(data->set.seek_client, 0, SEEK_SET);
  453|      0|      Curl_set_in_callback(data, false);
  454|      0|      if(err) {
  455|      0|        failf(data, "seek callback returned error %d", (int)err);
  456|      0|        return CURLE_SEND_FAIL_REWIND;
  457|      0|      }
  458|      0|    }
  459|      0|    else if(data->set.ioctl_func) {
  460|      0|      curlioerr err;
  461|       |
  462|      0|      Curl_set_in_callback(data, true);
  463|      0|      err = (data->set.ioctl_func)(data, CURLIOCMD_RESTARTREAD,
  464|      0|                                   data->set.ioctl_client);
  465|      0|      Curl_set_in_callback(data, false);
  466|      0|      infof(data, "the ioctl callback returned %d", (int)err);
  467|       |
  468|      0|      if(err) {
  469|      0|        failf(data, "ioctl callback returned error %d", (int)err);
  470|      0|        return CURLE_SEND_FAIL_REWIND;
  471|      0|      }
  472|      0|    }
  473|      0|    else {
  474|       |      /* If no CURLOPT_READFUNCTION is used, we know that we operate on a
  475|       |         given FILE * stream and we can actually attempt to rewind that
  476|       |         ourselves with fseek() */
  477|      0|      if(data->state.fread_func == (curl_read_callback)fread) {
  478|      0|        if(-1 != fseek(data->state.in, 0, SEEK_SET))
  479|       |          /* successful rewind */
  480|      0|          return CURLE_OK;
  481|      0|      }
  482|       |
  483|       |      /* no callback set or failure above, makes us fail at once */
  484|      0|      failf(data, "necessary data rewind wasn't possible");
  485|      0|      return CURLE_SEND_FAIL_REWIND;
  486|      0|    }
  487|      0|  }
  488|     10|  return CURLE_OK;
  489|     14|}
Curl_done_sending:
  910|    163|{
  911|    163|  struct connectdata *conn = data->conn;
  912|    163|  k->keepon &= ~KEEP_SEND; /* we're done writing */
  913|       |
  914|       |  /* These functions should be moved into the handler struct! */
  915|    163|  Curl_http2_done_sending(data, conn);
  916|    163|  Curl_quic_done_sending(data);
  917|       |
  918|    163|  if(conn->bits.rewindaftersend) {
  919|      0|    CURLcode result = Curl_readrewind(data);
  920|      0|    if(result)
  921|      0|      return result;
  922|      0|  }
  923|    163|  return CURLE_OK;
  924|    163|}
Curl_readwrite:
 1176|  4.73M|{
 1177|  4.73M|  struct SingleRequest *k = &data->req;
 1178|  4.73M|  CURLcode result;
 1179|  4.73M|  int didwhat = 0;
 1180|       |
 1181|  4.73M|  curl_socket_t fd_read;
 1182|  4.73M|  curl_socket_t fd_write;
 1183|  4.73M|  int select_res = conn->cselect_bits;
 1184|       |
 1185|  4.73M|  conn->cselect_bits = 0;
 1186|       |
 1187|       |  /* only use the proper socket if the *_HOLD bit is not set simultaneously as
 1188|       |     then we are in rate limiting state in that transfer direction */
 1189|       |
 1190|  4.73M|  if((k->keepon & KEEP_RECVBITS) == KEEP_RECV)
 1191|  4.73M|    fd_read = conn->sockfd;
 1192|    121|  else
 1193|    121|    fd_read = CURL_SOCKET_BAD;
 1194|       |
 1195|  4.73M|  if((k->keepon & KEEP_SENDBITS) == KEEP_SEND)
 1196|    206|    fd_write = conn->writesockfd;
 1197|  4.73M|  else
 1198|  4.73M|    fd_write = CURL_SOCKET_BAD;
 1199|       |
 1200|  4.73M|  if(data->state.drain) {
 1201|      0|    select_res |= CURL_CSELECT_IN;
 1202|      0|    DEBUGF(infof(data, "Curl_readwrite: forcibly told to drain data"));
 1203|      0|  }
 1204|       |
 1205|  4.73M|  if(!select_res) /* Call for select()/poll() only, if read/write/error
 1206|       |                     status is not known. */
 1207|  4.73M|    select_res = Curl_socket_check(fd_read, CURL_SOCKET_BAD, fd_write, 0);
 1208|       |
 1209|  4.73M|  if(select_res == CURL_CSELECT_ERR) {
 1210|      0|    failf(data, "select/poll returned error");
 1211|      0|    return CURLE_SEND_ERROR;
 1212|      0|  }
 1213|       |
 1214|       |#ifdef USE_HYPER
 1215|       |  if(conn->datastream) {
 1216|       |    result = conn->datastream(data, conn, &didwhat, done, select_res);
 1217|       |    if(result || *done)
 1218|       |      return result;
 1219|       |  }
 1220|       |  else {
 1221|       |#endif
 1222|       |  /* We go ahead and do a read if we have a readable socket or if
 1223|       |     the stream was rewound (in which case we have data in a
 1224|       |     buffer) */
 1225|  4.73M|  if((k->keepon & KEEP_RECV) && (select_res & CURL_CSELECT_IN)) {
 1226|  4.73M|    result = readwrite_data(data, conn, k, &didwhat, done, comeback);
 1227|  4.73M|    if(result || *done)
 1228|    175|      return result;
 1229|  4.73M|  }
 1230|       |
 1231|       |  /* If we still have writing to do, we check if we have a writable socket. */
 1232|  4.73M|  if((k->keepon & KEEP_SEND) && (select_res & CURL_CSELECT_OUT)) {
 1233|       |    /* write */
 1234|       |
 1235|    178|    result = readwrite_upload(data, conn, &didwhat);
 1236|    178|    if(result)
 1237|      1|      return result;
 1238|    178|  }
 1239|       |#ifdef USE_HYPER
 1240|       |  }
 1241|       |#endif
 1242|       |
 1243|  4.73M|  k->now = Curl_now();
 1244|  4.73M|  if(!didwhat) {
 1245|       |    /* no read no write, this is a timeout? */
 1246|    152|    if(k->exp100 == EXP100_AWAITING_CONTINUE) {
 1247|       |      /* This should allow some time for the header to arrive, but only a
 1248|       |         very short time as otherwise it'll be too much wasted time too
 1249|       |         often. */
 1250|       |
 1251|       |      /* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":
 1252|       |
 1253|       |         Therefore, when a client sends this header field to an origin server
 1254|       |         (possibly via a proxy) from which it has never seen a 100 (Continue)
 1255|       |         status, the client SHOULD NOT wait for an indefinite period before
 1256|       |         sending the request body.
 1257|       |
 1258|       |      */
 1259|       |
 1260|      1|      timediff_t ms = Curl_timediff(k->now, k->start100);
 1261|      1|      if(ms >= data->set.expect_100_timeout) {
 1262|       |        /* we've waited long enough, continue anyway */
 1263|      0|        k->exp100 = EXP100_SEND_DATA;
 1264|      0|        k->keepon |= KEEP_SEND;
 1265|      0|        Curl_expire_done(data, EXPIRE_100_TIMEOUT);
 1266|      0|        infof(data, "Done waiting for 100-continue");
 1267|      0|      }
 1268|      1|    }
 1269|    152|  }
 1270|       |
 1271|  4.73M|  if(Curl_pgrsUpdate(data))
 1272|      0|    result = CURLE_ABORTED_BY_CALLBACK;
 1273|  4.73M|  else
 1274|  4.73M|    result = Curl_speedcheck(data, k->now);
 1275|  4.73M|  if(result)
 1276|      0|    return result;
 1277|       |
 1278|  4.73M|  if(k->keepon) {
 1279|  4.73M|    if(0 > Curl_timeleft(data, &k->now, FALSE)) {
 1280|     58|      if(k->size != -1) {
 1281|     18|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1282|     18|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " out of %"
 1283|     18|              CURL_FORMAT_CURL_OFF_T " bytes received",
 1284|     18|              Curl_timediff(k->now, data->progress.t_startsingle),
 1285|     18|              k->bytecount, k->size);
 1286|     18|      }
 1287|     40|      else {
 1288|     40|        failf(data, "Operation timed out after %" CURL_FORMAT_TIMEDIFF_T
 1289|     40|              " milliseconds with %" CURL_FORMAT_CURL_OFF_T " bytes received",
 1290|     40|              Curl_timediff(k->now, data->progress.t_startsingle),
 1291|     40|              k->bytecount);
 1292|     40|      }
 1293|     58|      return CURLE_OPERATION_TIMEDOUT;
 1294|     58|    }
 1295|  4.73M|  }
 1296|  1.18k|  else {
 1297|       |    /*
 1298|       |     * The transfer has been performed. Just make some general checks before
 1299|       |     * returning.
 1300|       |     */
 1301|       |
 1302|  1.18k|    if(!(data->set.opt_no_body) && (k->size != -1) &&
 1303|  1.18k|       (k->bytecount != k->size) &&
 1304|  1.18k|#ifdef CURL_DO_LINEEND_CONV
 1305|       |       /* Most FTP servers don't adjust their file SIZE response for CRLFs,
 1306|       |          so we'll check to see if the discrepancy can be explained
 1307|       |          by the number of CRLFs we've changed to LFs.
 1308|       |       */
 1309|  1.18k|       (k->bytecount != (k->size + data->state.crlf_conversions)) &&
 1310|  1.18k|#endif /* CURL_DO_LINEEND_CONV */
 1311|  1.18k|       !k->newurl) {
 1312|     81|      failf(data, "transfer closed with %" CURL_FORMAT_CURL_OFF_T
 1313|     81|            " bytes remaining to read", k->size - k->bytecount);
 1314|     81|      return CURLE_PARTIAL_FILE;
 1315|     81|    }
 1316|  1.10k|    if(!(data->set.opt_no_body) && k->chunk &&
 1317|  1.10k|       (conn->chunk.state != CHUNK_STOP)) {
 1318|       |      /*
 1319|       |       * In chunked mode, return an error if the connection is closed prior to
 1320|       |       * the empty (terminating) chunk is read.
 1321|       |       *
 1322|       |       * The condition above used to check for
 1323|       |       * conn->proto.http->chunk.datasize != 0 which is true after reading
 1324|       |       * *any* chunk, not just the empty chunk.
 1325|       |       *
 1326|       |       */
 1327|      0|      failf(data, "transfer closed with outstanding read data remaining");
 1328|      0|      return CURLE_PARTIAL_FILE;
 1329|      0|    }
 1330|  1.10k|    if(Curl_pgrsUpdate(data))
 1331|      0|      return CURLE_ABORTED_BY_CALLBACK;
 1332|  1.10k|  }
 1333|       |
 1334|       |  /* Now update the "done" boolean we return */
 1335|  4.73M|  *done = (0 == (k->keepon&(KEEP_RECV|KEEP_SEND|
 1336|  4.73M|                            KEEP_RECV_PAUSE|KEEP_SEND_PAUSE))) ? TRUE : FALSE;
 1337|       |
 1338|  4.73M|  return CURLE_OK;
 1339|  4.73M|}
Curl_single_getsock:
 1351|  4.73M|{
 1352|  4.73M|  int bitmap = GETSOCK_BLANK;
 1353|  4.73M|  unsigned sockindex = 0;
 1354|       |
 1355|  4.73M|  if(conn->handler->perform_getsock)
 1356|      0|    return conn->handler->perform_getsock(data, conn, sock);
 1357|       |
 1358|       |  /* don't include HOLD and PAUSE connections */
 1359|  4.73M|  if((data->req.keepon & KEEP_RECVBITS) == KEEP_RECV) {
 1360|       |
 1361|  4.73M|    DEBUGASSERT(conn->sockfd != CURL_SOCKET_BAD);
 1362|       |
 1363|  4.73M|    bitmap |= GETSOCK_READSOCK(sockindex);
 1364|  4.73M|    sock[sockindex] = conn->sockfd;
 1365|  4.73M|  }
 1366|       |
 1367|       |  /* don't include HOLD and PAUSE connections */
 1368|  4.73M|  if((data->req.keepon & KEEP_SENDBITS) == KEEP_SEND) {
 1369|       |
 1370|     18|    if((conn->sockfd != conn->writesockfd) ||
 1371|     18|       bitmap == GETSOCK_BLANK) {
 1372|       |      /* only if they are not the same socket and we have a readable
 1373|       |         one, we increase index */
 1374|     16|      if(bitmap != GETSOCK_BLANK)
 1375|      0|        sockindex++; /* increase index if we need two entries */
 1376|       |
 1377|     16|      DEBUGASSERT(conn->writesockfd != CURL_SOCKET_BAD);
 1378|       |
 1379|     16|      sock[sockindex] = conn->writesockfd;
 1380|     16|    }
 1381|       |
 1382|     18|    bitmap |= GETSOCK_WRITESOCK(sockindex);
 1383|     18|  }
 1384|       |
 1385|  4.73M|  return bitmap;
 1386|  4.73M|}
Curl_init_CONNECT:
 1391|  2.92k|{
 1392|  2.92k|  data->state.fread_func = data->set.fread_func_set;
 1393|  2.92k|  data->state.in = data->set.in_set;
 1394|  2.92k|}
Curl_pretransfer:
 1402|  2.97k|{
 1403|  2.97k|  CURLcode result;
 1404|       |
 1405|  2.97k|  if(!data->state.url && !data->set.uh) {
 1406|       |    /* we can't do anything without URL */
 1407|    157|    failf(data, "No URL set!");
 1408|    157|    return CURLE_URL_MALFORMAT;
 1409|    157|  }
 1410|       |
 1411|       |  /* since the URL may have been redirected in a previous use of this handle */
 1412|  2.81k|  if(data->state.url_alloc) {
 1413|       |    /* the already set URL is allocated, free it first! */
 1414|      3|    Curl_safefree(data->state.url);
 1415|      3|    data->state.url_alloc = FALSE;
 1416|      3|  }
 1417|       |
 1418|  2.81k|  if(!data->state.url && data->set.uh) {
 1419|      0|    CURLUcode uc;
 1420|      0|    free(data->set.str[STRING_SET_URL]);
 1421|      0|    uc = curl_url_get(data->set.uh,
 1422|      0|                      CURLUPART_URL, &data->set.str[STRING_SET_URL], 0);
 1423|      0|    if(uc) {
 1424|      0|      failf(data, "No URL set!");
 1425|      0|      return CURLE_URL_MALFORMAT;
 1426|      0|    }
 1427|      0|  }
 1428|       |
 1429|  2.81k|  data->state.prefer_ascii = data->set.prefer_ascii;
 1430|  2.81k|  data->state.list_only = data->set.list_only;
 1431|  2.81k|  data->state.httpreq = data->set.method;
 1432|  2.81k|  data->state.url = data->set.str[STRING_SET_URL];
 1433|       |
 1434|       |  /* Init the SSL session ID cache here. We do it here since we want to do it
 1435|       |     after the *_setopt() calls (that could specify the size of the cache) but
 1436|       |     before any transfer takes place. */
 1437|  2.81k|  result = Curl_ssl_initsessions(data, data->set.general_ssl.max_ssl_sessions);
 1438|  2.81k|  if(result)
 1439|      0|    return result;
 1440|       |
 1441|  2.81k|  data->state.wildcardmatch = data->set.wildcard_enabled;
 1442|  2.81k|  data->state.followlocation = 0; /* reset the location-follow counter */
 1443|  2.81k|  data->state.this_is_a_follow = FALSE; /* reset this */
 1444|  2.81k|  data->state.errorbuf = FALSE; /* no error has occurred */
 1445|  2.81k|  data->state.httpwant = data->set.httpwant;
 1446|  2.81k|  data->state.httpversion = 0;
 1447|  2.81k|  data->state.authproblem = FALSE;
 1448|  2.81k|  data->state.authhost.want = data->set.httpauth;
 1449|  2.81k|  data->state.authproxy.want = data->set.proxyauth;
 1450|  2.81k|  Curl_safefree(data->info.wouldredirect);
 1451|       |
 1452|  2.81k|  if(data->state.httpreq == HTTPREQ_PUT)
 1453|     55|    data->state.infilesize = data->set.filesize;
 1454|  2.76k|  else if((data->state.httpreq != HTTPREQ_GET) &&
 1455|  2.76k|          (data->state.httpreq != HTTPREQ_HEAD)) {
 1456|    237|    data->state.infilesize = data->set.postfieldsize;
 1457|    237|    if(data->set.postfields && (data->state.infilesize == -1))
 1458|     23|      data->state.infilesize = (curl_off_t)strlen(data->set.postfields);
 1459|    237|  }
 1460|  2.52k|  else
 1461|  2.52k|    data->state.infilesize = 0;
 1462|       |
 1463|       |  /* If there is a list of cookie files to read, do it now! */
 1464|  2.81k|  if(data->state.cookielist)
 1465|      0|    Curl_cookie_loadfiles(data);
 1466|       |
 1467|       |  /* If there is a list of host pairs to deal with */
 1468|  2.81k|  if(data->state.resolve)
 1469|      0|    result = Curl_loadhostpairs(data);
 1470|       |
 1471|  2.81k|  if(!result) {
 1472|       |    /* Allow data->set.use_port to set which port to use. This needs to be
 1473|       |     * disabled for example when we follow Location: headers to URLs using
 1474|       |     * different ports! */
 1475|  2.81k|    data->state.allow_port = TRUE;
 1476|       |
 1477|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1478|       |    /*************************************************************
 1479|       |     * Tell signal handler to ignore SIGPIPE
 1480|       |     *************************************************************/
 1481|       |    if(!data->set.no_signal)
 1482|       |      data->state.prev_signal = signal(SIGPIPE, SIG_IGN);
 1483|       |#endif
 1484|       |
 1485|  2.81k|    Curl_initinfo(data); /* reset session-specific information "variables" */
 1486|  2.81k|    Curl_pgrsResetTransferSizes(data);
 1487|  2.81k|    Curl_pgrsStartNow(data);
 1488|       |
 1489|       |    /* In case the handle is re-used and an authentication method was picked
 1490|       |       in the session we need to make sure we only use the one(s) we now
 1491|       |       consider to be fine */
 1492|  2.81k|    data->state.authhost.picked &= data->state.authhost.want;
 1493|  2.81k|    data->state.authproxy.picked &= data->state.authproxy.want;
 1494|       |
 1495|  2.81k|#ifndef CURL_DISABLE_FTP
 1496|  2.81k|    if(data->state.wildcardmatch) {
 1497|     54|      struct WildcardData *wc = &data->wildcard;
 1498|     54|      if(wc->state < CURLWC_INIT) {
 1499|     51|        result = Curl_wildcard_init(wc); /* init wildcard structures */
 1500|     51|        if(result)
 1501|      0|          return CURLE_OUT_OF_MEMORY;
 1502|     51|      }
 1503|     54|    }
 1504|  2.81k|#endif
 1505|  2.81k|    Curl_http2_init_state(&data->state);
 1506|  2.81k|    result = Curl_hsts_loadcb(data, data->hsts);
 1507|  2.81k|  }
 1508|       |
 1509|       |  /*
 1510|       |   * Set user-agent. Used for HTTP, but since we can attempt to tunnel
 1511|       |   * basically anything through a http proxy we can't limit this based on
 1512|       |   * protocol.
 1513|       |   */
 1514|  2.81k|  if(data->set.str[STRING_USERAGENT]) {
 1515|      0|    Curl_safefree(data->state.aptr.uagent);
 1516|      0|    data->state.aptr.uagent =
 1517|      0|      aprintf("User-Agent: %s\r\n", data->set.str[STRING_USERAGENT]);
 1518|      0|    if(!data->state.aptr.uagent)
 1519|      0|      return CURLE_OUT_OF_MEMORY;
 1520|      0|  }
 1521|       |
 1522|  2.81k|  if(!result)
 1523|  2.81k|    result = Curl_setstropt(&data->state.aptr.user,
 1524|  2.81k|                            data->set.str[STRING_USERNAME]);
 1525|  2.81k|  if(!result)
 1526|  2.81k|    result = Curl_setstropt(&data->state.aptr.passwd,
 1527|  2.81k|                            data->set.str[STRING_PASSWORD]);
 1528|  2.81k|  if(!result)
 1529|  2.81k|    result = Curl_setstropt(&data->state.aptr.proxyuser,
 1530|  2.81k|                            data->set.str[STRING_PROXYUSERNAME]);
 1531|  2.81k|  if(!result)
 1532|  2.81k|    result = Curl_setstropt(&data->state.aptr.proxypasswd,
 1533|  2.81k|                            data->set.str[STRING_PROXYPASSWORD]);
 1534|       |
 1535|  2.81k|  data->req.headerbytecount = 0;
 1536|  2.81k|  return result;
 1537|  2.81k|}
Curl_posttransfer:
 1543|  2.81k|{
 1544|       |#if defined(HAVE_SIGNAL) && defined(SIGPIPE) && !defined(HAVE_MSG_NOSIGNAL)
 1545|       |  /* restore the signal handler for SIGPIPE before we get back */
 1546|       |  if(!data->set.no_signal)
 1547|       |    signal(SIGPIPE, data->state.prev_signal);
 1548|       |#else
 1549|  2.81k|  (void)data; /* unused parameter */
 1550|  2.81k|#endif
 1551|       |
 1552|  2.81k|  return CURLE_OK;
 1553|  2.81k|}
Curl_follow:
 1564|    162|{
 1565|       |#ifdef CURL_DISABLE_HTTP
 1566|       |  (void)data;
 1567|       |  (void)newurl;
 1568|       |  (void)type;
 1569|       |  /* Location: following will not happen when HTTP is disabled */
 1570|       |  return CURLE_TOO_MANY_REDIRECTS;
 1571|       |#else
 1572|       |
 1573|       |  /* Location: redirect */
 1574|    162|  bool disallowport = FALSE;
 1575|    162|  bool reachedmax = FALSE;
 1576|    162|  CURLUcode uc;
 1577|       |
 1578|    162|  DEBUGASSERT(type != FOLLOW_NONE);
 1579|       |
 1580|    162|  if(type == FOLLOW_REDIR) {
 1581|    114|    if((data->set.maxredirs != -1) &&
 1582|    114|       (data->state.followlocation >= data->set.maxredirs)) {
 1583|      0|      reachedmax = TRUE;
 1584|      0|      type = FOLLOW_FAKE; /* switch to fake to store the would-be-redirected
 1585|       |                             to URL */
 1586|      0|    }
 1587|    114|    else {
 1588|       |      /* mark the next request as a followed location: */
 1589|    114|      data->state.this_is_a_follow = TRUE;
 1590|       |
 1591|    114|      data->state.followlocation++; /* count location-followers */
 1592|       |
 1593|    114|      if(data->set.http_auto_referer) {
 1594|      0|        CURLU *u;
 1595|      0|        char *referer = NULL;
 1596|       |
 1597|       |        /* We are asked to automatically set the previous URL as the referer
 1598|       |           when we get the next URL. We pick the ->url field, which may or may
 1599|       |           not be 100% correct */
 1600|       |
 1601|      0|        if(data->state.referer_alloc) {
 1602|      0|          Curl_safefree(data->state.referer);
 1603|      0|          data->state.referer_alloc = FALSE;
 1604|      0|        }
 1605|       |
 1606|       |        /* Make a copy of the URL without crenditals and fragment */
 1607|      0|        u = curl_url();
 1608|      0|        if(!u)
 1609|      0|          return CURLE_OUT_OF_MEMORY;
 1610|       |
 1611|      0|        uc = curl_url_set(u, CURLUPART_URL, data->state.url, 0);
 1612|      0|        if(!uc)
 1613|      0|          uc = curl_url_set(u, CURLUPART_FRAGMENT, NULL, 0);
 1614|      0|        if(!uc)
 1615|      0|          uc = curl_url_set(u, CURLUPART_USER, NULL, 0);
 1616|      0|        if(!uc)
 1617|      0|          uc = curl_url_set(u, CURLUPART_PASSWORD, NULL, 0);
 1618|      0|        if(!uc)
 1619|      0|          uc = curl_url_get(u, CURLUPART_URL, &referer, 0);
 1620|       |
 1621|      0|        curl_url_cleanup(u);
 1622|       |
 1623|      0|        if(uc || !referer)
 1624|      0|          return CURLE_OUT_OF_MEMORY;
 1625|       |
 1626|      0|        data->state.referer = referer;
 1627|      0|        data->state.referer_alloc = TRUE; /* yes, free this later */
 1628|      0|      }
 1629|    114|    }
 1630|    114|  }
 1631|       |
 1632|    162|  if((type != FOLLOW_RETRY) &&
 1633|    162|     (data->req.httpcode != 401) && (data->req.httpcode != 407) &&
 1634|    162|     Curl_is_absolute_url(newurl, NULL, MAX_SCHEME_LEN))
 1635|       |    /* If this is not redirect due to a 401 or 407 response and an absolute
 1636|       |       URL: don't allow a custom port number */
 1637|     11|    disallowport = TRUE;
 1638|       |
 1639|    162|  DEBUGASSERT(data->state.uh);
 1640|    162|  uc = curl_url_set(data->state.uh, CURLUPART_URL, newurl,
 1641|    162|                    (type == FOLLOW_FAKE) ? CURLU_NON_SUPPORT_SCHEME :
 1642|    162|                    ((type == FOLLOW_REDIR) ? CURLU_URLENCODE : 0) |
 1643|    114|                    CURLU_ALLOW_SPACE);
 1644|    162|  if(uc) {
 1645|     15|    if(type != FOLLOW_FAKE)
 1646|      8|      return Curl_uc_to_curlcode(uc);
 1647|       |
 1648|       |    /* the URL could not be parsed for some reason, but since this is FAKE
 1649|       |       mode, just duplicate the field as-is */
 1650|      7|    newurl = strdup(newurl);
 1651|      7|    if(!newurl)
 1652|      0|      return CURLE_OUT_OF_MEMORY;
 1653|      7|  }
 1654|    147|  else {
 1655|       |
 1656|    147|    uc = curl_url_get(data->state.uh, CURLUPART_URL, &newurl, 0);
 1657|    147|    if(uc)
 1658|      0|      return Curl_uc_to_curlcode(uc);
 1659|    147|  }
 1660|       |
 1661|    154|  if(type == FOLLOW_FAKE) {
 1662|       |    /* we're only figuring out the new url if we would've followed locations
 1663|       |       but now we're done so we can get out! */
 1664|     48|    data->info.wouldredirect = newurl;
 1665|       |
 1666|     48|    if(reachedmax) {
 1667|      0|      failf(data, "Maximum (%ld) redirects followed", data->set.maxredirs);
 1668|      0|      return CURLE_TOO_MANY_REDIRECTS;
 1669|      0|    }
 1670|     48|    return CURLE_OK;
 1671|     48|  }
 1672|       |
 1673|    106|  if(disallowport)
 1674|      8|    data->state.allow_port = FALSE;
 1675|       |
 1676|    106|  if(data->state.url_alloc)
 1677|    106|    Curl_safefree(data->state.url);
 1678|       |
 1679|    106|  data->state.url = newurl;
 1680|    106|  data->state.url_alloc = TRUE;
 1681|       |
 1682|    106|  infof(data, "Issue another request to this URL: '%s'", data->state.url);
 1683|       |
 1684|       |  /*
 1685|       |   * We get here when the HTTP code is 300-399 (and 401). We need to perform
 1686|       |   * differently based on exactly what return code there was.
 1687|       |   *
 1688|       |   * News from 7.10.6: we can also get here on a 401 or 407, in case we act on
 1689|       |   * a HTTP (proxy-) authentication scheme other than Basic.
 1690|       |   */
 1691|    106|  switch(data->info.httpcode) {
 1692|       |    /* 401 - Act on a WWW-Authenticate, we keep on moving and do the
 1693|       |       Authorization: XXXX header in the HTTP request code snippet */
 1694|       |    /* 407 - Act on a Proxy-Authenticate, we keep on moving and do the
 1695|       |       Proxy-Authorization: XXXX header in the HTTP request code snippet */
 1696|       |    /* 300 - Multiple Choices */
 1697|       |    /* 306 - Not used */
 1698|       |    /* 307 - Temporary Redirect */
 1699|     76|  default:  /* for all above (and the unknown ones) */
 1700|       |    /* Some codes are explicitly mentioned since I've checked RFC2616 and they
 1701|       |     * seem to be OK to POST to.
 1702|       |     */
 1703|     76|    break;
 1704|     76|  case 301: /* Moved Permanently */
 1705|       |    /* (quote from RFC7231, section 6.4.2)
 1706|       |     *
 1707|       |     * Note: For historical reasons, a user agent MAY change the request
 1708|       |     * method from POST to GET for the subsequent request.  If this
 1709|       |     * behavior is undesired, the 307 (Temporary Redirect) status code
 1710|       |     * can be used instead.
 1711|       |     *
 1712|       |     * ----
 1713|       |     *
 1714|       |     * Many webservers expect this, so these servers often answers to a POST
 1715|       |     * request with an error page. To be sure that libcurl gets the page that
 1716|       |     * most user agents would get, libcurl has to force GET.
 1717|       |     *
 1718|       |     * This behavior is forbidden by RFC1945 and the obsolete RFC2616, and
 1719|       |     * can be overridden with CURLOPT_POSTREDIR.
 1720|       |     */
 1721|     23|    if((data->state.httpreq == HTTPREQ_POST
 1722|     23|        || data->state.httpreq == HTTPREQ_POST_FORM
 1723|     23|        || data->state.httpreq == HTTPREQ_POST_MIME)
 1724|     23|       && !(data->set.keep_post & CURL_REDIR_POST_301)) {
 1725|      0|      infof(data, "Switch from POST to GET");
 1726|      0|      data->state.httpreq = HTTPREQ_GET;
 1727|      0|    }
 1728|     23|    break;
 1729|      3|  case 302: /* Found */
 1730|       |    /* (quote from RFC7231, section 6.4.3)
 1731|       |     *
 1732|       |     * Note: For historical reasons, a user agent MAY change the request
 1733|       |     * method from POST to GET for the subsequent request.  If this
 1734|       |     * behavior is undesired, the 307 (Temporary Redirect) status code
 1735|       |     * can be used instead.
 1736|       |     *
 1737|       |     * ----
 1738|       |     *
 1739|       |     * Many webservers expect this, so these servers often answers to a POST
 1740|       |     * request with an error page. To be sure that libcurl gets the page that
 1741|       |     * most user agents would get, libcurl has to force GET.
 1742|       |     *
 1743|       |     * This behavior is forbidden by RFC1945 and the obsolete RFC2616, and
 1744|       |     * can be overridden with CURLOPT_POSTREDIR.
 1745|       |     */
 1746|      3|    if((data->state.httpreq == HTTPREQ_POST
 1747|      3|        || data->state.httpreq == HTTPREQ_POST_FORM
 1748|      3|        || data->state.httpreq == HTTPREQ_POST_MIME)
 1749|      3|       && !(data->set.keep_post & CURL_REDIR_POST_302)) {
 1750|      0|      infof(data, "Switch from POST to GET");
 1751|      0|      data->state.httpreq = HTTPREQ_GET;
 1752|      0|    }
 1753|      3|    break;
 1754|       |
 1755|      4|  case 303: /* See Other */
 1756|       |    /* 'See Other' location is not the resource but a substitute for the
 1757|       |     * resource. In this case we switch the method to GET/HEAD, unless the
 1758|       |     * method is POST and the user specified to keep it as POST.
 1759|       |     * https://github.com/curl/curl/issues/5237#issuecomment-614641049
 1760|       |     */
 1761|      4|    if(data->state.httpreq != HTTPREQ_GET &&
 1762|      4|       ((data->state.httpreq != HTTPREQ_POST &&
 1763|      2|         data->state.httpreq != HTTPREQ_POST_FORM &&
 1764|      2|         data->state.httpreq != HTTPREQ_POST_MIME) ||
 1765|      2|        !(data->set.keep_post & CURL_REDIR_POST_303))) {
 1766|      2|      data->state.httpreq = HTTPREQ_GET;
 1767|      2|      data->set.upload = false;
 1768|      2|      infof(data, "Switch to %s",
 1769|      2|            data->set.opt_no_body?"HEAD":"GET");
 1770|      2|    }
 1771|      4|    break;
 1772|      0|  case 304: /* Not Modified */
 1773|       |    /* 304 means we did a conditional request and it was "Not modified".
 1774|       |     * We shouldn't get any Location: header in this response!
 1775|       |     */
 1776|      0|    break;
 1777|      0|  case 305: /* Use Proxy */
 1778|       |    /* (quote from RFC2616, section 10.3.6):
 1779|       |     * "The requested resource MUST be accessed through the proxy given
 1780|       |     * by the Location field. The Location field gives the URI of the
 1781|       |     * proxy.  The recipient is expected to repeat this single request
 1782|       |     * via the proxy. 305 responses MUST only be generated by origin
 1783|       |     * servers."
 1784|       |     */
 1785|      0|    break;
 1786|    106|  }
 1787|    106|  Curl_pgrsTime(data, TIMER_REDIRECT);
 1788|    106|  Curl_pgrsResetTransferSizes(data);
 1789|       |
 1790|    106|  return CURLE_OK;
 1791|    106|#endif /* CURL_DISABLE_HTTP */
 1792|    106|}
Curl_retry_request:
 1798|  1.13k|{
 1799|  1.13k|  struct connectdata *conn = data->conn;
 1800|  1.13k|  bool retry = FALSE;
 1801|  1.13k|  *url = NULL;
 1802|       |
 1803|       |  /* if we're talking upload, we can't do the checks below, unless the protocol
 1804|       |     is HTTP as when uploading over HTTP we will still get a response */
 1805|  1.13k|  if(data->set.upload &&
 1806|  1.13k|     !(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)))
 1807|     31|    return CURLE_OK;
 1808|       |
 1809|  1.10k|  if((data->req.bytecount + data->req.headerbytecount == 0) &&
 1810|  1.10k|      conn->bits.reuse &&
 1811|  1.10k|      (!data->set.opt_no_body
 1812|      0|        || (conn->handler->protocol & PROTO_FAMILY_HTTP)) &&
 1813|  1.10k|      (data->set.rtspreq != RTSPREQ_RECEIVE))
 1814|       |    /* We got no data, we attempted to re-use a connection. For HTTP this
 1815|       |       can be a retry so we try again regardless if we expected a body.
 1816|       |       For other protocols we only try again only if we expected a body.
 1817|       |
 1818|       |       This might happen if the connection was left alive when we were
 1819|       |       done using it before, but that was closed when we wanted to read from
 1820|       |       it again. Bad luck. Retry the same request on a fresh connect! */
 1821|      0|    retry = TRUE;
 1822|  1.10k|  else if(data->state.refused_stream &&
 1823|  1.10k|          (data->req.bytecount + data->req.headerbytecount == 0) ) {
 1824|       |    /* This was sent on a refused stream, safe to rerun. A refused stream
 1825|       |       error can typically only happen on HTTP/2 level if the stream is safe
 1826|       |       to issue again, but the nghttp2 API can deliver the message to other
 1827|       |       streams as well, which is why this adds the check the data counters
 1828|       |       too. */
 1829|      0|    infof(data, "REFUSED_STREAM, retrying a fresh connect");
 1830|      0|    data->state.refused_stream = FALSE; /* clear again */
 1831|      0|    retry = TRUE;
 1832|      0|  }
 1833|  1.10k|  if(retry) {
 1834|      0|#define CONN_MAX_RETRIES 5
 1835|      0|    if(data->state.retrycount++ >= CONN_MAX_RETRIES) {
 1836|      0|      failf(data, "Connection died, tried %d times before giving up",
 1837|      0|            CONN_MAX_RETRIES);
 1838|      0|      data->state.retrycount = 0;
 1839|      0|      return CURLE_SEND_ERROR;
 1840|      0|    }
 1841|      0|    infof(data, "Connection died, retrying a fresh connect (retry count: %d)",
 1842|      0|          data->state.retrycount);
 1843|      0|    *url = strdup(data->state.url);
 1844|      0|    if(!*url)
 1845|      0|      return CURLE_OUT_OF_MEMORY;
 1846|       |
 1847|      0|    connclose(conn, "retry"); /* close this connection */
 1848|      0|    conn->bits.retry = TRUE; /* mark this as a connection we're about
 1849|       |                                to retry. Marking it this way should
 1850|       |                                prevent i.e HTTP transfers to return
 1851|       |                                error just because nothing has been
 1852|       |                                transferred! */
 1853|       |
 1854|       |
 1855|      0|    if(conn->handler->protocol&PROTO_FAMILY_HTTP) {
 1856|      0|      if(data->req.writebytecount) {
 1857|      0|        CURLcode result = Curl_readrewind(data);
 1858|      0|        if(result) {
 1859|      0|          Curl_safefree(*url);
 1860|      0|          return result;
 1861|      0|        }
 1862|      0|      }
 1863|      0|    }
 1864|      0|  }
 1865|  1.10k|  return CURLE_OK;
 1866|  1.10k|}
Curl_setup_transfer:
 1881|  1.47k|{
 1882|  1.47k|  struct SingleRequest *k = &data->req;
 1883|  1.47k|  struct connectdata *conn = data->conn;
 1884|  1.47k|  struct HTTP *http = data->req.p.http;
 1885|  1.47k|  bool httpsending = ((conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1886|  1.47k|                      (http->sending == HTTPSEND_REQUEST));
 1887|  1.47k|  DEBUGASSERT(conn != NULL);
 1888|  1.47k|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
 1889|       |
 1890|  1.47k|  if(conn->bits.multiplex || conn->httpversion == 20 || httpsending) {
 1891|       |    /* when multiplexing, the read/write sockets need to be the same! */
 1892|      0|    conn->sockfd = sockindex == -1 ?
 1893|      0|      ((writesockindex == -1 ? CURL_SOCKET_BAD : conn->sock[writesockindex])) :
 1894|      0|      conn->sock[sockindex];
 1895|      0|    conn->writesockfd = conn->sockfd;
 1896|      0|    if(httpsending)
 1897|       |      /* special and very HTTP-specific */
 1898|      0|      writesockindex = FIRSTSOCKET;
 1899|      0|  }
 1900|  1.47k|  else {
 1901|  1.47k|    conn->sockfd = sockindex == -1 ?
 1902|  1.36k|      CURL_SOCKET_BAD : conn->sock[sockindex];
 1903|  1.47k|    conn->writesockfd = writesockindex == -1 ?
 1904|  1.27k|      CURL_SOCKET_BAD:conn->sock[writesockindex];
 1905|  1.47k|  }
 1906|  1.47k|  k->getheader = getheader;
 1907|       |
 1908|  1.47k|  k->size = size;
 1909|       |
 1910|       |  /* The code sequence below is placed in this function just because all
 1911|       |     necessary input is not always known in do_complete() as this function may
 1912|       |     be called after that */
 1913|       |
 1914|  1.47k|  if(!k->getheader) {
 1915|    232|    k->header = FALSE;
 1916|    232|    if(size > 0)
 1917|      1|      Curl_pgrsSetDownloadSize(data, size);
 1918|    232|  }
 1919|       |  /* we want header and/or body, if neither then don't do this! */
 1920|  1.47k|  if(k->getheader || !data->set.opt_no_body) {
 1921|       |
 1922|  1.46k|    if(sockindex != -1)
 1923|  1.36k|      k->keepon |= KEEP_RECV;
 1924|       |
 1925|  1.46k|    if(writesockindex != -1) {
 1926|       |      /* HTTP 1.1 magic:
 1927|       |
 1928|       |         Even if we require a 100-return code before uploading data, we might
 1929|       |         need to write data before that since the REQUEST may not have been
 1930|       |         finished sent off just yet.
 1931|       |
 1932|       |         Thus, we must check if the request has been sent before we set the
 1933|       |         state info where we wait for the 100-return code
 1934|       |      */
 1935|    201|      if((data->state.expect100header) &&
 1936|    201|         (conn->handler->protocol&PROTO_FAMILY_HTTP) &&
 1937|    201|         (http->sending == HTTPSEND_BODY)) {
 1938|       |        /* wait with write until we either got 100-continue or a timeout */
 1939|     13|        k->exp100 = EXP100_AWAITING_CONTINUE;
 1940|     13|        k->start100 = Curl_now();
 1941|       |
 1942|       |        /* Set a timeout for the multi interface. Add the inaccuracy margin so
 1943|       |           that we don't fire slightly too early and get denied to run. */
 1944|     13|        Curl_expire(data, data->set.expect_100_timeout, EXPIRE_100_TIMEOUT);
 1945|     13|      }
 1946|    188|      else {
 1947|    188|        if(data->state.expect100header)
 1948|       |          /* when we've sent off the rest of the headers, we must await a
 1949|       |             100-continue but first finish sending the request */
 1950|      0|          k->exp100 = EXP100_SENDING_REQUEST;
 1951|       |
 1952|       |        /* enable the write bit when we're not waiting for continue */
 1953|    188|        k->keepon |= KEEP_SEND;
 1954|    188|      }
 1955|    201|    } /* if(writesockindex != -1) */
 1956|  1.46k|  } /* if(k->getheader || !data->set.opt_no_body) */
 1957|       |
 1958|  1.47k|}
transfer.c:readwrite_data:
  564|  4.73M|{
  565|  4.73M|  CURLcode result = CURLE_OK;
  566|  4.73M|  ssize_t nread; /* number of bytes read */
  567|  4.73M|  size_t excess = 0; /* excess bytes read */
  568|  4.73M|  bool readmore = FALSE; /* used by RTP to signal for more data */
  569|  4.73M|  int maxloops = 100;
  570|  4.73M|  char *buf = data->state.buffer;
  571|  4.73M|  DEBUGASSERT(buf);
  572|       |
  573|  4.73M|  *done = FALSE;
  574|  4.73M|  *comeback = FALSE;
  575|       |
  576|       |  /* This is where we loop until we have read everything there is to
  577|       |     read or we get a CURLE_AGAIN */
  578|  4.73M|  do {
  579|  4.73M|    bool is_empty_data = FALSE;
  580|  4.73M|    size_t buffersize = data->set.buffer_size;
  581|  4.73M|    size_t bytestoread = buffersize;
  582|  4.73M|#ifdef USE_NGHTTP2
  583|  4.73M|    bool is_http2 = ((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  584|  4.73M|                     (conn->httpversion == 20));
  585|  4.73M|#endif
  586|       |
  587|  4.73M|    if(
  588|  4.73M|#ifdef USE_NGHTTP2
  589|       |       /* For HTTP/2, read data without caring about the content
  590|       |          length. This is safe because body in HTTP/2 is always
  591|       |          segmented thanks to its framing layer. Meanwhile, we have to
  592|       |          call Curl_read to ensure that http2_handle_stream_close is
  593|       |          called when we read all incoming bytes for a particular
  594|       |          stream. */
  595|  4.73M|       !is_http2 &&
  596|  4.73M|#endif
  597|  4.73M|       k->size != -1 && !k->header) {
  598|       |      /* make sure we don't read too much */
  599|     75|      curl_off_t totalleft = k->size - k->bytecount;
  600|     75|      if(totalleft < (curl_off_t)bytestoread)
  601|     73|        bytestoread = (size_t)totalleft;
  602|     75|    }
  603|       |
  604|  4.73M|    if(bytestoread) {
  605|       |      /* receive data from the network! */
  606|  4.73M|      result = Curl_read(data, conn->sockfd, buf, bytestoread, &nread);
  607|       |
  608|       |      /* read would've blocked */
  609|  4.73M|      if(CURLE_AGAIN == result)
  610|      0|        break; /* get out of loop */
  611|       |
  612|  4.73M|      if(result>0)
  613|      0|        return result;
  614|  4.73M|    }
  615|      1|    else {
  616|       |      /* read nothing but since we wanted nothing we consider this an OK
  617|       |         situation to proceed from */
  618|      1|      DEBUGF(infof(data, "readwrite_data: we're done!"));
  619|      1|      nread = 0;
  620|      1|    }
  621|       |
  622|  4.73M|    if(!k->bytecount) {
  623|  4.73M|      Curl_pgrsTime(data, TIMER_STARTTRANSFER);
  624|  4.73M|      if(k->exp100 > EXP100_SEND_DATA)
  625|       |        /* set time stamp to compare with when waiting for the 100 */
  626|    114|        k->start100 = Curl_now();
  627|  4.73M|    }
  628|       |
  629|  4.73M|    *didwhat |= KEEP_RECV;
  630|       |    /* indicates data of zero size, i.e. empty file */
  631|  4.73M|    is_empty_data = ((nread == 0) && (k->bodywrites == 0)) ? TRUE : FALSE;
  632|       |
  633|  4.73M|    if(0 < nread || is_empty_data) {
  634|  4.73M|      buf[nread] = 0;
  635|  4.73M|    }
  636|    173|    else {
  637|       |      /* if we receive 0 or less here, either the http2 stream is closed or the
  638|       |         server closed the connection and we bail out from this! */
  639|    173|#ifdef USE_NGHTTP2
  640|    173|      if(is_http2 && !nread)
  641|      8|        DEBUGF(infof(data, "nread == 0, stream closed, bailing"));
  642|    165|      else
  643|    165|#endif
  644|    165|        DEBUGF(infof(data, "nread <= 0, server closed connection, bailing"));
  645|    173|      k->keepon &= ~KEEP_RECV;
  646|    173|      break;
  647|    173|    }
  648|       |
  649|       |    /* Default buffer to use when we write the buffer, it may be changed
  650|       |       in the flow below before the actual storing is done. */
  651|  4.73M|    k->str = buf;
  652|       |
  653|  4.73M|    if(conn->handler->readwrite) {
  654|  4.73M|      result = conn->handler->readwrite(data, conn, &nread, &readmore);
  655|  4.73M|      if(result)
  656|      0|        return result;
  657|  4.73M|      if(readmore)
  658|  4.73M|        break;
  659|  4.73M|    }
  660|       |
  661|  3.79k|#ifndef CURL_DISABLE_HTTP
  662|       |    /* Since this is a two-state thing, we check if we are parsing
  663|       |       headers at the moment or not. */
  664|  3.79k|    if(k->header) {
  665|       |      /* we are in parse-the-header-mode */
  666|  3.63k|      bool stop_reading = FALSE;
  667|  3.63k|      result = Curl_http_readwrite_headers(data, conn, &nread, &stop_reading);
  668|  3.63k|      if(result)
  669|    102|        return result;
  670|       |
  671|  3.53k|      if(conn->handler->readwrite &&
  672|  3.53k|         (k->maxdownload <= 0 && nread > 0)) {
  673|     72|        result = conn->handler->readwrite(data, conn, &nread, &readmore);
  674|     72|        if(result)
  675|      0|          return result;
  676|     72|        if(readmore)
  677|     67|          break;
  678|     72|      }
  679|       |
  680|  3.46k|      if(stop_reading) {
  681|       |        /* We've stopped dealing with input, get out of the do-while loop */
  682|       |
  683|     49|        if(nread > 0) {
  684|     32|          infof(data,
  685|     32|                "Excess found:"
  686|     32|                " excess = %zd"
  687|     32|                " url = %s (zero-length body)",
  688|     32|                nread, data->state.up.path);
  689|     32|        }
  690|       |
  691|     49|        break;
  692|     49|      }
  693|  3.46k|    }
  694|  3.57k|#endif /* CURL_DISABLE_HTTP */
  695|       |
  696|       |
  697|       |    /* This is not an 'else if' since it may be a rest from the header
  698|       |       parsing, where the beginning of the buffer is headers and the end
  699|       |       is non-headers. */
  700|  3.57k|    if(!k->header && (nread > 0 || is_empty_data)) {
  701|       |
  702|    470|      if(data->set.opt_no_body) {
  703|       |        /* data arrives although we want none, bail out */
  704|      1|        streamclose(conn, "ignoring body");
  705|      1|        *done = TRUE;
  706|      1|        return CURLE_WEIRD_SERVER_REPLY;
  707|      1|      }
  708|       |
  709|    469|#ifndef CURL_DISABLE_HTTP
  710|    469|      if(0 == k->bodywrites && !is_empty_data) {
  711|       |        /* These checks are only made the first time we are about to
  712|       |           write a piece of the body */
  713|    313|        if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  714|       |          /* HTTP-only checks */
  715|    310|          result = Curl_http_firstwrite(data, conn, done);
  716|    310|          if(result || *done)
  717|     29|            return result;
  718|    310|        }
  719|    313|      } /* this is the first time we write a body part */
  720|    440|#endif /* CURL_DISABLE_HTTP */
  721|       |
  722|    440|      k->bodywrites++;
  723|       |
  724|       |      /* pass data to the debug function before it gets "dechunked" */
  725|    440|      if(data->set.verbose) {
  726|      0|        if(k->badheader) {
  727|      0|          Curl_debug(data, CURLINFO_DATA_IN,
  728|      0|                     Curl_dyn_ptr(&data->state.headerb),
  729|      0|                     Curl_dyn_len(&data->state.headerb));
  730|      0|          if(k->badheader == HEADER_PARTHEADER)
  731|      0|            Curl_debug(data, CURLINFO_DATA_IN,
  732|      0|                       k->str, (size_t)nread);
  733|      0|        }
  734|      0|        else
  735|      0|          Curl_debug(data, CURLINFO_DATA_IN,
  736|      0|                     k->str, (size_t)nread);
  737|      0|      }
  738|       |
  739|    440|#ifndef CURL_DISABLE_HTTP
  740|    440|      if(k->chunk) {
  741|       |        /*
  742|       |         * Here comes a chunked transfer flying and we need to decode this
  743|       |         * properly.  While the name says read, this function both reads
  744|       |         * and writes away the data. The returned 'nread' holds the number
  745|       |         * of actual data it wrote to the client.
  746|       |         */
  747|      0|        CURLcode extra;
  748|      0|        CHUNKcode res =
  749|      0|          Curl_httpchunk_read(data, k->str, nread, &nread, &extra);
  750|       |
  751|      0|        if(CHUNKE_OK < res) {
  752|      0|          if(CHUNKE_PASSTHRU_ERROR == res) {
  753|      0|            failf(data, "Failed reading the chunked-encoded stream");
  754|      0|            return extra;
  755|      0|          }
  756|      0|          failf(data, "%s in chunked-encoding", Curl_chunked_strerror(res));
  757|      0|          return CURLE_RECV_ERROR;
  758|      0|        }
  759|      0|        if(CHUNKE_STOP == res) {
  760|       |          /* we're done reading chunks! */
  761|      0|          k->keepon &= ~KEEP_RECV; /* read no more */
  762|       |
  763|       |          /* N number of bytes at the end of the str buffer that weren't
  764|       |             written to the client. */
  765|      0|          if(conn->chunk.datasize) {
  766|      0|            infof(data, "Leftovers after chunking: % "
  767|      0|                  CURL_FORMAT_CURL_OFF_T "u bytes",
  768|      0|                  conn->chunk.datasize);
  769|      0|          }
  770|      0|        }
  771|       |        /* If it returned OK, we just keep going */
  772|      0|      }
  773|    440|#endif   /* CURL_DISABLE_HTTP */
  774|       |
  775|       |      /* Account for body content stored in the header buffer */
  776|    440|      if((k->badheader == HEADER_PARTHEADER) && !k->ignorebody) {
  777|      0|        size_t headlen = Curl_dyn_len(&data->state.headerb);
  778|      0|        DEBUGF(infof(data, "Increasing bytecount by %zu", headlen));
  779|      0|        k->bytecount += headlen;
  780|      0|      }
  781|       |
  782|    440|      if((-1 != k->maxdownload) &&
  783|    440|         (k->bytecount + nread >= k->maxdownload)) {
  784|       |
  785|     96|        excess = (size_t)(k->bytecount + nread - k->maxdownload);
  786|     96|        if(excess > 0 && !k->ignorebody) {
  787|     32|          infof(data,
  788|     32|                "Excess found in a read:"
  789|     32|                " excess = %zu"
  790|     32|                ", size = %" CURL_FORMAT_CURL_OFF_T
  791|     32|                ", maxdownload = %" CURL_FORMAT_CURL_OFF_T
  792|     32|                ", bytecount = %" CURL_FORMAT_CURL_OFF_T,
  793|     32|                excess, k->size, k->maxdownload, k->bytecount);
  794|     32|          connclose(conn, "excess found in a read");
  795|     32|        }
  796|       |
  797|     96|        nread = (ssize_t) (k->maxdownload - k->bytecount);
  798|     96|        if(nread < 0) /* this should be unusual */
  799|      0|          nread = 0;
  800|       |
  801|     96|        k->keepon &= ~KEEP_RECV; /* we're done reading */
  802|     96|      }
  803|       |
  804|    440|      k->bytecount += nread;
  805|       |
  806|    440|      Curl_pgrsSetDownloadCounter(data, k->bytecount);
  807|       |
  808|    440|      if(!k->chunk && (nread || k->badheader || is_empty_data)) {
  809|       |        /* If this is chunky transfer, it was already written */
  810|       |
  811|    439|        if(k->badheader && !k->ignorebody) {
  812|       |          /* we parsed a piece of data wrongly assuming it was a header
  813|       |             and now we output it as body instead */
  814|      0|          size_t headlen = Curl_dyn_len(&data->state.headerb);
  815|       |
  816|       |          /* Don't let excess data pollute body writes */
  817|      0|          if(k->maxdownload == -1 || (curl_off_t)headlen <= k->maxdownload)
  818|      0|            result = Curl_client_write(data, CLIENTWRITE_BODY,
  819|      0|                                       Curl_dyn_ptr(&data->state.headerb),
  820|      0|                                       headlen);
  821|      0|          else
  822|      0|            result = Curl_client_write(data, CLIENTWRITE_BODY,
  823|      0|                                       Curl_dyn_ptr(&data->state.headerb),
  824|      0|                                       (size_t)k->maxdownload);
  825|       |
  826|      0|          if(result)
  827|      0|            return result;
  828|      0|        }
  829|    439|        if(k->badheader < HEADER_ALLBAD) {
  830|       |          /* This switch handles various content encodings. If there's an
  831|       |             error here, be sure to check over the almost identical code
  832|       |             in http_chunks.c.
  833|       |             Make sure that ALL_CONTENT_ENCODINGS contains all the
  834|       |             encodings handled here. */
  835|    439|          if(data->set.http_ce_skip || !k->writer_stack) {
  836|    380|            if(!k->ignorebody && nread) {
  837|    198|#ifndef CURL_DISABLE_POP3
  838|    198|              if(conn->handler->protocol & PROTO_FAMILY_POP3)
  839|      2|                result = Curl_pop3_write(data, k->str, nread);
  840|    196|              else
  841|    196|#endif /* CURL_DISABLE_POP3 */
  842|    196|                result = Curl_client_write(data, CLIENTWRITE_BODY, k->str,
  843|    196|                                           nread);
  844|    198|            }
  845|    380|          }
  846|     59|          else if(!k->ignorebody && nread)
  847|     57|            result = Curl_unencode_write(data, k->writer_stack, k->str, nread);
  848|    439|        }
  849|    439|        k->badheader = HEADER_NORMAL; /* taken care of now */
  850|       |
  851|    439|        if(result)
  852|     43|          return result;
  853|    439|      }
  854|       |
  855|    440|    } /* if(!header and data to read) */
  856|       |
  857|  3.50k|    if(conn->handler->readwrite && excess) {
  858|       |      /* Parse the excess data */
  859|      0|      k->str += nread;
  860|       |
  861|      0|      if(&k->str[excess] > &buf[data->set.buffer_size]) {
  862|       |        /* the excess amount was too excessive(!), make sure
  863|       |           it doesn't read out of buffer */
  864|      0|        excess = &buf[data->set.buffer_size] - k->str;
  865|      0|      }
  866|      0|      nread = (ssize_t)excess;
  867|       |
  868|      0|      result = conn->handler->readwrite(data, conn, &nread, &readmore);
  869|      0|      if(result)
  870|      0|        return result;
  871|       |
  872|      0|      if(readmore)
  873|      0|        k->keepon |= KEEP_RECV; /* we're not done reading */
  874|      0|      break;
  875|      0|    }
  876|       |
  877|  3.50k|    if(is_empty_data) {
  878|       |      /* if we received nothing, the server closed the connection and we
  879|       |         are done */
  880|  2.87k|      k->keepon &= ~KEEP_RECV;
  881|  2.87k|    }
  882|       |
  883|  3.50k|    if(k->keepon & KEEP_RECV_PAUSE) {
  884|       |      /* this is a paused transfer */
  885|      0|      break;
  886|      0|    }
  887|       |
  888|  3.50k|  } while(data_pending(data) && maxloops--);
  889|       |
  890|  4.73M|  if(maxloops <= 0) {
  891|       |    /* we mark it as read-again-please */
  892|     21|    conn->cselect_bits = CURL_CSELECT_IN;
  893|     21|    *comeback = TRUE;
  894|     21|  }
  895|       |
  896|  4.73M|  if(((k->keepon & (KEEP_RECV|KEEP_SEND)) == KEEP_SEND) &&
  897|  4.73M|     conn->bits.close) {
  898|       |    /* When we've read the entire thing and the close bit is set, the server
  899|       |       may now close the connection. If there's now any kind of sending going
  900|       |       on from our side, we need to stop that immediately. */
  901|      1|    infof(data, "we are done reading and this is set to close, stop send");
  902|      1|    k->keepon &= ~KEEP_SEND; /* no writing anymore either */
  903|      1|  }
  904|       |
  905|  4.73M|  return CURLE_OK;
  906|  4.73M|}
transfer.c:data_pending:
  492|  3.50k|{
  493|  3.50k|  struct connectdata *conn = data->conn;
  494|       |
  495|       |#ifdef ENABLE_QUIC
  496|       |  if(conn->transport == TRNSPRT_QUIC)
  497|       |    return Curl_quic_data_pending(data);
  498|       |#endif
  499|       |
  500|  3.50k|  if(conn->handler->protocol&PROTO_FAMILY_FTP)
  501|      0|    return Curl_ssl_data_pending(conn, SECONDARYSOCKET);
  502|       |
  503|       |  /* in the case of libssh2, we can never be really sure that we have emptied
  504|       |     its internal buffers so we MUST always try until we get EAGAIN back */
  505|  3.50k|  return conn->handler->protocol&(CURLPROTO_SCP|CURLPROTO_SFTP) ||
  506|  3.50k|#if defined(USE_NGHTTP2)
  507|       |    /* For HTTP/2, we may read up everything including response body
  508|       |       with header fields in Curl_http_readwrite_headers. If no
  509|       |       content-length is provided, curl waits for the connection
  510|       |       close, which we emulate it using conn->proto.httpc.closed =
  511|       |       TRUE. The thing is if we read everything, then http2_recv won't
  512|       |       be called and we cannot signal the HTTP/2 stream has closed. As
  513|       |       a workaround, we return nonzero here to call http2_recv. */
  514|  3.50k|    ((conn->handler->protocol&PROTO_FAMILY_HTTP) && conn->httpversion >= 20) ||
  515|  3.50k|#endif
  516|  3.50k|    Curl_ssl_data_pending(conn, FIRSTSOCKET);
  517|  3.50k|}
transfer.c:readwrite_upload:
  953|    178|{
  954|    178|  ssize_t i, si;
  955|    178|  ssize_t bytes_written;
  956|    178|  CURLcode result;
  957|    178|  ssize_t nread; /* number of bytes read */
  958|    178|  bool sending_http_headers = FALSE;
  959|    178|  struct SingleRequest *k = &data->req;
  960|       |
  961|    178|  if((k->bytecount == 0) && (k->writebytecount == 0))
  962|    151|    Curl_pgrsTime(data, TIMER_STARTTRANSFER);
  963|       |
  964|    178|  *didwhat |= KEEP_SEND;
  965|       |
  966|    178|  do {
  967|    178|    curl_off_t nbody;
  968|       |
  969|       |    /* only read more data if there's no upload data already
  970|       |       present in the upload buffer */
  971|    178|    if(0 == k->upload_present) {
  972|    178|      result = Curl_get_upload_buffer(data);
  973|    178|      if(result)
  974|      0|        return result;
  975|       |      /* init the "upload from here" pointer */
  976|    178|      k->upload_fromhere = data->state.ulbuf;
  977|       |
  978|    178|      if(!k->upload_done) {
  979|       |        /* HTTP pollution, this should be written nicer to become more
  980|       |           protocol agnostic. */
  981|    178|        size_t fillcount;
  982|    178|        struct HTTP *http = k->p.http;
  983|       |
  984|    178|        if((k->exp100 == EXP100_SENDING_REQUEST) &&
  985|    178|           (http->sending == HTTPSEND_BODY)) {
  986|       |          /* If this call is to send body data, we must take some action:
  987|       |             We have sent off the full HTTP 1.1 request, and we shall now
  988|       |             go into the Expect: 100 state and await such a header */
  989|      0|          k->exp100 = EXP100_AWAITING_CONTINUE; /* wait for the header */
  990|      0|          k->keepon &= ~KEEP_SEND;         /* disable writing */
  991|      0|          k->start100 = Curl_now();       /* timeout count starts now */
  992|      0|          *didwhat &= ~KEEP_SEND;  /* we didn't write anything actually */
  993|       |          /* set a timeout for the multi interface */
  994|      0|          Curl_expire(data, data->set.expect_100_timeout, EXPIRE_100_TIMEOUT);
  995|      0|          break;
  996|      0|        }
  997|       |
  998|    178|        if(conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_RTSP)) {
  999|    103|          if(http->sending == HTTPSEND_REQUEST)
 1000|       |            /* We're sending the HTTP request headers, not the data.
 1001|       |               Remember that so we don't change the line endings. */
 1002|      0|            sending_http_headers = TRUE;
 1003|    103|          else
 1004|    103|            sending_http_headers = FALSE;
 1005|    103|        }
 1006|       |
 1007|    178|        result = Curl_fillreadbuffer(data, data->set.upload_buffer_size,
 1008|    178|                                     &fillcount);
 1009|    178|        if(result)
 1010|      1|          return result;
 1011|       |
 1012|    177|        nread = fillcount;
 1013|    177|      }
 1014|      0|      else
 1015|      0|        nread = 0; /* we're done uploading/reading */
 1016|       |
 1017|    177|      if(!nread && (k->keepon & KEEP_SEND_PAUSE)) {
 1018|       |        /* this is a paused transfer */
 1019|      0|        break;
 1020|      0|      }
 1021|    177|      if(nread <= 0) {
 1022|     13|        result = Curl_done_sending(data, k);
 1023|     13|        if(result)
 1024|      0|          return result;
 1025|     13|        break;
 1026|     13|      }
 1027|       |
 1028|       |      /* store number of bytes available for upload */
 1029|    164|      k->upload_present = nread;
 1030|       |
 1031|       |      /* convert LF to CRLF if so asked */
 1032|    164|      if((!sending_http_headers) && (
 1033|    164|#ifdef CURL_DO_LINEEND_CONV
 1034|       |         /* always convert if we're FTPing in ASCII mode */
 1035|    164|         (data->state.prefer_ascii) ||
 1036|    164|#endif
 1037|    164|         (data->set.crlf))) {
 1038|       |        /* Do we need to allocate a scratch buffer? */
 1039|      0|        if(!data->state.scratch) {
 1040|      0|          data->state.scratch = malloc(2 * data->set.upload_buffer_size);
 1041|      0|          if(!data->state.scratch) {
 1042|      0|            failf(data, "Failed to alloc scratch buffer!");
 1043|       |
 1044|      0|            return CURLE_OUT_OF_MEMORY;
 1045|      0|          }
 1046|      0|        }
 1047|       |
 1048|       |        /*
 1049|       |         * ASCII/EBCDIC Note: This is presumably a text (not binary)
 1050|       |         * transfer so the data should already be in ASCII.
 1051|       |         * That means the hex values for ASCII CR (0x0d) & LF (0x0a)
 1052|       |         * must be used instead of the escape sequences \r & \n.
 1053|       |         */
 1054|      0|        for(i = 0, si = 0; i < nread; i++, si++) {
 1055|      0|          if(k->upload_fromhere[i] == 0x0a) {
 1056|      0|            data->state.scratch[si++] = 0x0d;
 1057|      0|            data->state.scratch[si] = 0x0a;
 1058|      0|            if(!data->set.crlf) {
 1059|       |              /* we're here only because FTP is in ASCII mode...
 1060|       |                 bump infilesize for the LF we just added */
 1061|      0|              if(data->state.infilesize != -1)
 1062|      0|                data->state.infilesize++;
 1063|      0|            }
 1064|      0|          }
 1065|      0|          else
 1066|      0|            data->state.scratch[si] = k->upload_fromhere[i];
 1067|      0|        }
 1068|       |
 1069|      0|        if(si != nread) {
 1070|       |          /* only perform the special operation if we really did replace
 1071|       |             anything */
 1072|      0|          nread = si;
 1073|       |
 1074|       |          /* upload from the new (replaced) buffer instead */
 1075|      0|          k->upload_fromhere = data->state.scratch;
 1076|       |
 1077|       |          /* set the new amount too */
 1078|      0|          k->upload_present = nread;
 1079|      0|        }
 1080|      0|      }
 1081|       |
 1082|    164|#ifndef CURL_DISABLE_SMTP
 1083|    164|      if(conn->handler->protocol & PROTO_FAMILY_SMTP) {
 1084|     32|        result = Curl_smtp_escape_eob(data, nread);
 1085|     32|        if(result)
 1086|      0|          return result;
 1087|     32|      }
 1088|    164|#endif /* CURL_DISABLE_SMTP */
 1089|    164|    } /* if 0 == k->upload_present */
 1090|      0|    else {
 1091|       |      /* We have a partial buffer left from a previous "round". Use
 1092|       |         that instead of reading more data */
 1093|      0|    }
 1094|       |
 1095|       |    /* write to socket (send away data) */
 1096|    164|    result = Curl_write(data,
 1097|    164|                        conn->writesockfd,  /* socket to send to */
 1098|    164|                        k->upload_fromhere, /* buffer pointer */
 1099|    164|                        k->upload_present,  /* buffer size */
 1100|    164|                        &bytes_written);    /* actually sent */
 1101|    164|    if(result)
 1102|      0|      return result;
 1103|       |
 1104|    164|    win_update_buffer_size(conn->writesockfd);
 1105|       |
 1106|    164|    if(k->pendingheader) {
 1107|       |      /* parts of what was sent was header */
 1108|      0|      curl_off_t n = CURLMIN(k->pendingheader, bytes_written);
 1109|       |      /* show the data before we change the pointer upload_fromhere */
 1110|      0|      Curl_debug(data, CURLINFO_HEADER_OUT, k->upload_fromhere, (size_t)n);
 1111|      0|      k->pendingheader -= n;
 1112|      0|      nbody = bytes_written - n; /* size of the written body part */
 1113|      0|    }
 1114|    164|    else
 1115|    164|      nbody = bytes_written;
 1116|       |
 1117|    164|    if(nbody) {
 1118|       |      /* show the data before we change the pointer upload_fromhere */
 1119|    164|      Curl_debug(data, CURLINFO_DATA_OUT,
 1120|    164|                 &k->upload_fromhere[bytes_written - nbody],
 1121|    164|                 (size_t)nbody);
 1122|       |
 1123|    164|      k->writebytecount += nbody;
 1124|    164|      Curl_pgrsSetUploadCounter(data, k->writebytecount);
 1125|    164|    }
 1126|       |
 1127|    164|    if((!k->upload_chunky || k->forbidchunk) &&
 1128|    164|       (k->writebytecount == data->state.infilesize)) {
 1129|       |      /* we have sent all data we were supposed to */
 1130|    147|      k->upload_done = TRUE;
 1131|    147|      infof(data, "We are completely uploaded and fine");
 1132|    147|    }
 1133|       |
 1134|    164|    if(k->upload_present != bytes_written) {
 1135|       |      /* we only wrote a part of the buffer (if anything), deal with it! */
 1136|       |
 1137|       |      /* store the amount of bytes left in the buffer to write */
 1138|      0|      k->upload_present -= bytes_written;
 1139|       |
 1140|       |      /* advance the pointer where to find the buffer when the next send
 1141|       |         is to happen */
 1142|      0|      k->upload_fromhere += bytes_written;
 1143|      0|    }
 1144|    164|    else {
 1145|       |      /* we've uploaded that buffer now */
 1146|    164|      result = Curl_get_upload_buffer(data);
 1147|    164|      if(result)
 1148|      0|        return result;
 1149|    164|      k->upload_fromhere = data->state.ulbuf;
 1150|    164|      k->upload_present = 0; /* no more bytes left */
 1151|       |
 1152|    164|      if(k->upload_done) {
 1153|    148|        result = Curl_done_sending(data, k);
 1154|    148|        if(result)
 1155|      0|          return result;
 1156|    148|      }
 1157|    164|    }
 1158|       |
 1159|       |
 1160|    164|  } while(0); /* just to break out from! */
 1161|       |
 1162|    177|  return CURLE_OK;
 1163|    178|}

Curl_freeset:
  310|  6.05k|{
  311|       |  /* Free all dynamic strings stored in the data->set substructure. */
  312|  6.05k|  enum dupstring i;
  313|  6.05k|  enum dupblob j;
  314|       |
  315|   496k|  for(i = (enum dupstring)0; i < STRING_LAST; i++) {
  316|   490k|    Curl_safefree(data->set.str[i]);
  317|   490k|  }
  318|       |
  319|  54.5k|  for(j = (enum dupblob)0; j < BLOB_LAST; j++) {
  320|  48.4k|    Curl_safefree(data->set.blobs[j]);
  321|  48.4k|  }
  322|       |
  323|  6.05k|  if(data->state.referer_alloc) {
  324|      0|    Curl_safefree(data->state.referer);
  325|      0|    data->state.referer_alloc = FALSE;
  326|      0|  }
  327|  6.05k|  data->state.referer = NULL;
  328|  6.05k|  if(data->state.url_alloc) {
  329|  2.76k|    Curl_safefree(data->state.url);
  330|  2.76k|    data->state.url_alloc = FALSE;
  331|  2.76k|  }
  332|  6.05k|  data->state.url = NULL;
  333|       |
  334|  6.05k|  Curl_mime_cleanpart(&data->set.mimepost);
  335|  6.05k|}
Curl_close:
  363|  6.05k|{
  364|  6.05k|  struct Curl_multi *m;
  365|  6.05k|  struct Curl_easy *data;
  366|       |
  367|  6.05k|  if(!datap || !*datap)
  368|      0|    return CURLE_OK;
  369|       |
  370|  6.05k|  data = *datap;
  371|  6.05k|  *datap = NULL;
  372|       |
  373|  6.05k|  Curl_expire_clear(data); /* shut off timers */
  374|       |
  375|       |  /* Detach connection if any is left. This should not be normal, but can be
  376|       |     the case for example with CONNECT_ONLY + recv/send (test 556) */
  377|  6.05k|  Curl_detach_connnection(data);
  378|  6.05k|  m = data->multi;
  379|  6.05k|  if(m)
  380|       |    /* This handle is still part of a multi handle, take care of this first
  381|       |       and detach this handle from there. */
  382|      0|    curl_multi_remove_handle(data->multi, data);
  383|       |
  384|  6.05k|  if(data->multi_easy) {
  385|       |    /* when curl_easy_perform() is used, it creates its own multi handle to
  386|       |       use and this is the one */
  387|      0|    curl_multi_cleanup(data->multi_easy);
  388|      0|    data->multi_easy = NULL;
  389|      0|  }
  390|       |
  391|       |  /* Destroy the timeout list that is held in the easy handle. It is
  392|       |     /normally/ done by curl_multi_remove_handle() but this is "just in
  393|       |     case" */
  394|  6.05k|  Curl_llist_destroy(&data->state.timeoutlist, NULL);
  395|       |
  396|  6.05k|  data->magic = 0; /* force a clear AFTER the possibly enforced removal from
  397|       |                      the multi handle, since that function uses the magic
  398|       |                      field! */
  399|       |
  400|  6.05k|  if(data->state.rangestringalloc)
  401|     48|    free(data->state.range);
  402|       |
  403|       |  /* freed here just in case DONE wasn't called */
  404|  6.05k|  Curl_free_request_state(data);
  405|       |
  406|       |  /* Close down all open SSL info and sessions */
  407|  6.05k|  Curl_ssl_close_all(data);
  408|  6.05k|  Curl_safefree(data->state.first_host);
  409|  6.05k|  Curl_safefree(data->state.scratch);
  410|  6.05k|  Curl_ssl_free_certinfo(data);
  411|       |
  412|       |  /* Cleanup possible redirect junk */
  413|  6.05k|  free(data->req.newurl);
  414|  6.05k|  data->req.newurl = NULL;
  415|       |
  416|  6.05k|  if(data->state.referer_alloc) {
  417|      0|    Curl_safefree(data->state.referer);
  418|      0|    data->state.referer_alloc = FALSE;
  419|      0|  }
  420|  6.05k|  data->state.referer = NULL;
  421|       |
  422|  6.05k|  up_free(data);
  423|  6.05k|  Curl_safefree(data->state.buffer);
  424|  6.05k|  Curl_dyn_free(&data->state.headerb);
  425|  6.05k|  Curl_safefree(data->state.ulbuf);
  426|  6.05k|  Curl_flush_cookies(data, TRUE);
  427|  6.05k|  Curl_altsvc_save(data, data->asi, data->set.str[STRING_ALTSVC]);
  428|  6.05k|  Curl_altsvc_cleanup(&data->asi);
  429|  6.05k|  Curl_hsts_save(data, data->hsts, data->set.str[STRING_HSTS]);
  430|  6.05k|  Curl_hsts_cleanup(&data->hsts);
  431|  6.05k|#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_CRYPTO_AUTH)
  432|  6.05k|  Curl_http_auth_cleanup_digest(data);
  433|  6.05k|#endif
  434|  6.05k|  Curl_safefree(data->info.contenttype);
  435|  6.05k|  Curl_safefree(data->info.wouldredirect);
  436|       |
  437|       |  /* this destroys the channel and we cannot use it anymore after this */
  438|  6.05k|  Curl_resolver_cleanup(data->state.async.resolver);
  439|       |
  440|  6.05k|  Curl_http2_cleanup_dependencies(data);
  441|  6.05k|  Curl_convert_close(data);
  442|       |
  443|       |  /* No longer a dirty share, if it exists */
  444|  6.05k|  if(data->share) {
  445|      0|    Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);
  446|      0|    data->share->dirty--;
  447|      0|    Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);
  448|      0|  }
  449|       |
  450|  6.05k|  Curl_safefree(data->state.aptr.proxyuserpwd);
  451|  6.05k|  Curl_safefree(data->state.aptr.uagent);
  452|  6.05k|  Curl_safefree(data->state.aptr.userpwd);
  453|  6.05k|  Curl_safefree(data->state.aptr.accept_encoding);
  454|  6.05k|  Curl_safefree(data->state.aptr.te);
  455|  6.05k|  Curl_safefree(data->state.aptr.rangeline);
  456|  6.05k|  Curl_safefree(data->state.aptr.ref);
  457|  6.05k|  Curl_safefree(data->state.aptr.host);
  458|  6.05k|  Curl_safefree(data->state.aptr.cookiehost);
  459|  6.05k|  Curl_safefree(data->state.aptr.rtsp_transport);
  460|  6.05k|  Curl_safefree(data->state.aptr.user);
  461|  6.05k|  Curl_safefree(data->state.aptr.passwd);
  462|  6.05k|  Curl_safefree(data->state.aptr.proxyuser);
  463|  6.05k|  Curl_safefree(data->state.aptr.proxypasswd);
  464|       |
  465|  6.05k|#ifndef CURL_DISABLE_DOH
  466|  6.05k|  if(data->req.doh) {
  467|      0|    Curl_dyn_free(&data->req.doh->probe[0].serverdoh);
  468|      0|    Curl_dyn_free(&data->req.doh->probe[1].serverdoh);
  469|      0|    curl_slist_free_all(data->req.doh->headers);
  470|      0|    Curl_safefree(data->req.doh);
  471|      0|  }
  472|  6.05k|#endif
  473|       |
  474|       |  /* destruct wildcard structures if it is needed */
  475|  6.05k|  Curl_wildcard_dtor(&data->wildcard);
  476|  6.05k|  Curl_freeset(data);
  477|  6.05k|  free(data);
  478|  6.05k|  return CURLE_OK;
  479|  6.05k|}
Curl_init_userdefined:
  486|  6.05k|{
  487|  6.05k|  struct UserDefined *set = &data->set;
  488|  6.05k|  CURLcode result = CURLE_OK;
  489|       |
  490|  6.05k|  set->out = stdout; /* default output to stdout */
  491|  6.05k|  set->in_set = stdin;  /* default input from stdin */
  492|  6.05k|  set->err  = stderr;  /* default stderr to stderr */
  493|       |
  494|       |  /* use fwrite as default function to store output */
  495|  6.05k|  set->fwrite_func = (curl_write_callback)fwrite;
  496|       |
  497|       |  /* use fread as default function to read input */
  498|  6.05k|  set->fread_func_set = (curl_read_callback)fread;
  499|  6.05k|  set->is_fread_set = 0;
  500|  6.05k|  set->is_fwrite_set = 0;
  501|       |
  502|  6.05k|  set->seek_func = ZERO_NULL;
  503|  6.05k|  set->seek_client = ZERO_NULL;
  504|       |
  505|       |  /* conversion callbacks for non-ASCII hosts */
  506|  6.05k|  set->convfromnetwork = ZERO_NULL;
  507|  6.05k|  set->convtonetwork   = ZERO_NULL;
  508|  6.05k|  set->convfromutf8    = ZERO_NULL;
  509|       |
  510|  6.05k|  set->filesize = -1;        /* we don't know the size */
  511|  6.05k|  set->postfieldsize = -1;   /* unknown size */
  512|  6.05k|  set->maxredirs = -1;       /* allow any amount by default */
  513|       |
  514|  6.05k|  set->method = HTTPREQ_GET; /* Default HTTP request */
  515|  6.05k|  set->rtspreq = RTSPREQ_OPTIONS; /* Default RTSP request */
  516|  6.05k|#ifndef CURL_DISABLE_FTP
  517|  6.05k|  set->ftp_use_epsv = TRUE;   /* FTP defaults to EPSV operations */
  518|  6.05k|  set->ftp_use_eprt = TRUE;   /* FTP defaults to EPRT operations */
  519|  6.05k|  set->ftp_use_pret = FALSE;  /* mainly useful for drftpd servers */
  520|  6.05k|  set->ftp_filemethod = FTPFILE_MULTICWD;
  521|  6.05k|  set->ftp_skip_ip = TRUE;    /* skip PASV IP by default */
  522|  6.05k|#endif
  523|  6.05k|  set->dns_cache_timeout = 60; /* Timeout every 60 seconds by default */
  524|       |
  525|       |  /* Set the default size of the SSL session ID cache */
  526|  6.05k|  set->general_ssl.max_ssl_sessions = 5;
  527|       |
  528|  6.05k|  set->proxyport = 0;
  529|  6.05k|  set->proxytype = CURLPROXY_HTTP; /* defaults to HTTP proxy */
  530|  6.05k|  set->httpauth = CURLAUTH_BASIC;  /* defaults to basic */
  531|  6.05k|  set->proxyauth = CURLAUTH_BASIC; /* defaults to basic */
  532|       |
  533|       |  /* SOCKS5 proxy auth defaults to username/password + GSS-API */
  534|  6.05k|  set->socks5auth = CURLAUTH_BASIC | CURLAUTH_GSSAPI;
  535|       |
  536|       |  /* make libcurl quiet by default: */
  537|  6.05k|  set->hide_progress = TRUE;  /* CURLOPT_NOPROGRESS changes these */
  538|       |
  539|  6.05k|  Curl_mime_initpart(&set->mimepost, data);
  540|       |
  541|       |  /*
  542|       |   * libcurl 7.10 introduced SSL verification *by default*! This needs to be
  543|       |   * switched off unless wanted.
  544|       |   */
  545|  6.05k|  set->doh_verifyhost = TRUE;
  546|  6.05k|  set->doh_verifypeer = TRUE;
  547|  6.05k|  set->ssl.primary.verifypeer = TRUE;
  548|  6.05k|  set->ssl.primary.verifyhost = TRUE;
  549|  6.05k|#ifdef USE_TLS_SRP
  550|  6.05k|  set->ssl.authtype = CURL_TLSAUTH_NONE;
  551|  6.05k|#endif
  552|  6.05k|  set->ssh_auth_types = CURLSSH_AUTH_DEFAULT; /* defaults to any auth
  553|       |                                                      type */
  554|  6.05k|  set->ssl.primary.sessionid = TRUE; /* session ID caching enabled by
  555|       |                                        default */
  556|  6.05k|#ifndef CURL_DISABLE_PROXY
  557|  6.05k|  set->proxy_ssl = set->ssl;
  558|  6.05k|#endif
  559|       |
  560|  6.05k|  set->new_file_perms = 0644;    /* Default permissions */
  561|  6.05k|  set->new_directory_perms = 0755; /* Default permissions */
  562|       |
  563|       |  /* for the *protocols fields we don't use the CURLPROTO_ALL convenience
  564|       |     define since we internally only use the lower 16 bits for the passed
  565|       |     in bitmask to not conflict with the private bits */
  566|  6.05k|  set->allowed_protocols = CURLPROTO_ALL;
  567|  6.05k|  set->redir_protocols = CURLPROTO_HTTP | CURLPROTO_HTTPS | CURLPROTO_FTP |
  568|  6.05k|                         CURLPROTO_FTPS;
  569|       |
  570|       |#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)
  571|       |  /*
  572|       |   * disallow unprotected protection negotiation NEC reference implementation
  573|       |   * seem not to follow rfc1961 section 4.3/4.4
  574|       |   */
  575|       |  set->socks5_gssapi_nec = FALSE;
  576|       |#endif
  577|       |
  578|       |  /* Set the default CA cert bundle/path detected/specified at build time.
  579|       |   *
  580|       |   * If Schannel is the selected SSL backend then these locations are
  581|       |   * ignored. We allow setting CA location for schannel only when explicitly
  582|       |   * specified by the user via CURLOPT_CAINFO / --cacert.
  583|       |   */
  584|  6.05k|  if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL) {
  585|  6.05k|#if defined(CURL_CA_BUNDLE)
  586|  6.05k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
  587|  6.05k|    if(result)
  588|      0|      return result;
  589|       |
  590|  6.05k|    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
  591|  6.05k|                            CURL_CA_BUNDLE);
  592|  6.05k|    if(result)
  593|      0|      return result;
  594|  6.05k|#endif
  595|       |#if defined(CURL_CA_PATH)
  596|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
  597|       |    if(result)
  598|       |      return result;
  599|       |
  600|       |    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
  601|       |    if(result)
  602|       |      return result;
  603|       |#endif
  604|  6.05k|  }
  605|       |
  606|  6.05k|  set->wildcard_enabled = FALSE;
  607|  6.05k|  set->chunk_bgn      = ZERO_NULL;
  608|  6.05k|  set->chunk_end      = ZERO_NULL;
  609|  6.05k|  set->tcp_keepalive = FALSE;
  610|  6.05k|  set->tcp_keepintvl = 60;
  611|  6.05k|  set->tcp_keepidle = 60;
  612|  6.05k|  set->tcp_fastopen = FALSE;
  613|  6.05k|  set->tcp_nodelay = TRUE;
  614|  6.05k|  set->ssl_enable_npn = TRUE;
  615|  6.05k|  set->ssl_enable_alpn = TRUE;
  616|  6.05k|  set->expect_100_timeout = 1000L; /* Wait for a second by default. */
  617|  6.05k|  set->sep_headers = TRUE; /* separated header lists by default */
  618|  6.05k|  set->buffer_size = READBUFFER_SIZE;
  619|  6.05k|  set->upload_buffer_size = UPLOADBUFFER_DEFAULT;
  620|  6.05k|  set->happy_eyeballs_timeout = CURL_HET_DEFAULT;
  621|  6.05k|  set->fnmatch = ZERO_NULL;
  622|  6.05k|  set->upkeep_interval_ms = CURL_UPKEEP_INTERVAL_DEFAULT;
  623|  6.05k|  set->maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */
  624|  6.05k|  set->maxage_conn = 118;
  625|  6.05k|  set->maxlifetime_conn = 0;
  626|  6.05k|  set->http09_allowed = FALSE;
  627|  6.05k|  set->httpwant =
  628|  6.05k|#ifdef USE_NGHTTP2
  629|  6.05k|    CURL_HTTP_VERSION_2TLS
  630|       |#else
  631|       |    CURL_HTTP_VERSION_1_1
  632|       |#endif
  633|  6.05k|    ;
  634|  6.05k|  Curl_http2_init_userset(set);
  635|  6.05k|  return result;
  636|  6.05k|}
Curl_open:
  647|  6.05k|{
  648|  6.05k|  CURLcode result;
  649|  6.05k|  struct Curl_easy *data;
  650|       |
  651|       |  /* Very simple start-up: alloc the struct, init it with zeroes and return */
  652|  6.05k|  data = calloc(1, sizeof(struct Curl_easy));
  653|  6.05k|  if(!data) {
  654|       |    /* this is a very serious error */
  655|      0|    DEBUGF(fprintf(stderr, "Error: calloc of Curl_easy failed\n"));
  656|      0|    return CURLE_OUT_OF_MEMORY;
  657|      0|  }
  658|       |
  659|  6.05k|  data->magic = CURLEASY_MAGIC_NUMBER;
  660|       |
  661|  6.05k|  result = Curl_resolver_init(data, &data->state.async.resolver);
  662|  6.05k|  if(result) {
  663|      0|    DEBUGF(fprintf(stderr, "Error: resolver_init failed\n"));
  664|      0|    free(data);
  665|      0|    return result;
  666|      0|  }
  667|       |
  668|  6.05k|  result = Curl_init_userdefined(data);
  669|  6.05k|  if(!result) {
  670|  6.05k|    Curl_dyn_init(&data->state.headerb, CURL_MAX_HTTP_HEADER);
  671|  6.05k|    Curl_convert_init(data);
  672|  6.05k|    Curl_initinfo(data);
  673|       |
  674|       |    /* most recent connection is not yet defined */
  675|  6.05k|    data->state.lastconnect_id = -1;
  676|       |
  677|  6.05k|    data->progress.flags |= PGRS_HIDE;
  678|  6.05k|    data->state.current_speed = -1; /* init to negative == impossible */
  679|  6.05k|  }
  680|       |
  681|  6.05k|  if(result) {
  682|      0|    Curl_resolver_cleanup(data->state.async.resolver);
  683|      0|    Curl_dyn_free(&data->state.headerb);
  684|      0|    Curl_freeset(data);
  685|      0|    free(data);
  686|      0|    data = NULL;
  687|      0|  }
  688|  6.05k|  else
  689|  6.05k|    *curl = data;
  690|       |
  691|  6.05k|  return result;
  692|  6.05k|}
Curl_disconnect:
  826|  2.92k|{
  827|       |  /* there must be a connection to close */
  828|  2.92k|  DEBUGASSERT(conn);
  829|       |
  830|       |  /* it must be removed from the connection cache */
  831|  2.92k|  DEBUGASSERT(!conn->bundle);
  832|       |
  833|       |  /* there must be an associated transfer */
  834|  2.92k|  DEBUGASSERT(data);
  835|       |
  836|       |  /* the transfer must be detached from the connection */
  837|  2.92k|  DEBUGASSERT(!data->conn);
  838|       |
  839|       |  /*
  840|       |   * If this connection isn't marked to force-close, leave it open if there
  841|       |   * are other users of it
  842|       |   */
  843|  2.92k|  if(CONN_INUSE(conn) && !dead_connection) {
  844|      0|    DEBUGF(infof(data, "Curl_disconnect when inuse: %zu", CONN_INUSE(conn)));
  845|      0|    return CURLE_OK;
  846|      0|  }
  847|       |
  848|  2.92k|  if(conn->dns_entry != NULL) {
  849|      9|    Curl_resolv_unlock(data, conn->dns_entry);
  850|      9|    conn->dns_entry = NULL;
  851|      9|  }
  852|       |
  853|       |  /* Cleanup NTLM connection-related data */
  854|  2.92k|  Curl_http_auth_cleanup_ntlm(conn);
  855|       |
  856|       |  /* Cleanup NEGOTIATE connection-related data */
  857|  2.92k|  Curl_http_auth_cleanup_negotiate(conn);
  858|       |
  859|  2.92k|  if(conn->bits.connect_only)
  860|       |    /* treat the connection as dead in CONNECT_ONLY situations */
  861|      0|    dead_connection = TRUE;
  862|       |
  863|       |  /* temporarily attach the connection to this transfer handle for the
  864|       |     disconnect and shutdown */
  865|  2.92k|  Curl_attach_connnection(data, conn);
  866|       |
  867|  2.92k|  if(conn->handler->disconnect)
  868|       |    /* This is set if protocol-specific cleanups should be made */
  869|  1.67k|    conn->handler->disconnect(data, conn, dead_connection);
  870|       |
  871|  2.92k|  conn_shutdown(data, conn);
  872|       |
  873|       |  /* detach it again */
  874|  2.92k|  Curl_detach_connnection(data);
  875|       |
  876|  2.92k|  conn_free(conn);
  877|  2.92k|  return CURLE_OK;
  878|  2.92k|}
Curl_verboseconnect:
 1538|  2.79k|{
 1539|  2.79k|  if(data->set.verbose)
 1540|      0|    infof(data, "Connected to %s (%s) port %u (#%ld)",
 1541|      0|#ifndef CURL_DISABLE_PROXY
 1542|      0|          conn->bits.socksproxy ? conn->socks_proxy.host.dispname :
 1543|      0|          conn->bits.httpproxy ? conn->http_proxy.host.dispname :
 1544|      0|#endif
 1545|      0|          conn->bits.conn_to_host ? conn->conn_to_host.dispname :
 1546|      0|          conn->host.dispname,
 1547|      0|          conn->primary_ip, conn->port, conn->connection_id);
 1548|  2.79k|}
Curl_is_ASCII_name:
 1555|  5.78k|{
 1556|       |  /* get an UNSIGNED local version of the pointer */
 1557|  5.78k|  const unsigned char *ch = (const unsigned char *)hostname;
 1558|       |
 1559|  5.78k|  if(!hostname) /* bad input, consider it ASCII! */
 1560|      0|    return TRUE;
 1561|       |
 1562|  60.6k|  while(*ch) {
 1563|  55.0k|    if(*ch++ & 0x80)
 1564|    131|      return FALSE;
 1565|  55.0k|  }
 1566|  5.65k|  return TRUE;
 1567|  5.78k|}
Curl_idnconvert_hostname:
 1588|  5.78k|{
 1589|  5.78k|#ifndef USE_LIBIDN2
 1590|  5.78k|  (void)data;
 1591|  5.78k|  (void)data;
 1592|       |#elif defined(CURL_DISABLE_VERBOSE_STRINGS)
 1593|       |  (void)data;
 1594|       |#endif
 1595|       |
 1596|       |  /* set the name we use to display the host name */
 1597|  5.78k|  host->dispname = host->name;
 1598|       |
 1599|       |  /* Check name for non-ASCII and convert hostname to ACE form if we can */
 1600|  5.78k|  if(!Curl_is_ASCII_name(host->name)) {
 1601|       |#ifdef USE_LIBIDN2
 1602|       |    if(idn2_check_version(IDN2_VERSION)) {
 1603|       |      char *ace_hostname = NULL;
 1604|       |#if IDN2_VERSION_NUMBER >= 0x00140000
 1605|       |      /* IDN2_NFC_INPUT: Normalize input string using normalization form C.
 1606|       |         IDN2_NONTRANSITIONAL: Perform Unicode TR46 non-transitional
 1607|       |         processing. */
 1608|       |      int flags = IDN2_NFC_INPUT | IDN2_NONTRANSITIONAL;
 1609|       |#else
 1610|       |      int flags = IDN2_NFC_INPUT;
 1611|       |#endif
 1612|       |      int rc = IDN2_LOOKUP(host->name, &ace_hostname, flags);
 1613|       |      if(rc != IDN2_OK)
 1614|       |        /* fallback to TR46 Transitional mode for better IDNA2003
 1615|       |           compatibility */
 1616|       |        rc = IDN2_LOOKUP(host->name, &ace_hostname,
 1617|       |                         IDN2_TRANSITIONAL);
 1618|       |      if(rc == IDN2_OK) {
 1619|       |        host->encalloc = (char *)ace_hostname;
 1620|       |        /* change the name pointer to point to the encoded hostname */
 1621|       |        host->name = host->encalloc;
 1622|       |      }
 1623|       |      else {
 1624|       |        failf(data, "Failed to convert %s to ACE; %s", host->name,
 1625|       |              idn2_strerror(rc));
 1626|       |        return CURLE_URL_MALFORMAT;
 1627|       |      }
 1628|       |    }
 1629|       |#elif defined(USE_WIN32_IDN)
 1630|       |    char *ace_hostname = NULL;
 1631|       |
 1632|       |    if(curl_win32_idn_to_ascii(host->name, &ace_hostname)) {
 1633|       |      host->encalloc = ace_hostname;
 1634|       |      /* change the name pointer to point to the encoded hostname */
 1635|       |      host->name = host->encalloc;
 1636|       |    }
 1637|       |    else {
 1638|       |      char buffer[STRERROR_LEN];
 1639|       |      failf(data, "Failed to convert %s to ACE; %s", host->name,
 1640|       |            Curl_winapi_strerror(GetLastError(), buffer, sizeof(buffer)));
 1641|       |      return CURLE_URL_MALFORMAT;
 1642|       |    }
 1643|       |#else
 1644|    131|    infof(data, "IDN support not present, can't parse Unicode domains");
 1645|    131|#endif
 1646|    131|  }
 1647|  5.78k|  return CURLE_OK;
 1648|  5.78k|}
Curl_free_idnconverted_hostname:
 1654|  12.0k|{
 1655|       |#if defined(USE_LIBIDN2)
 1656|       |  if(host->encalloc) {
 1657|       |    idn2_free(host->encalloc); /* must be freed with idn2_free() since this was
 1658|       |                                 allocated by libidn */
 1659|       |    host->encalloc = NULL;
 1660|       |  }
 1661|       |#elif defined(USE_WIN32_IDN)
 1662|       |  free(host->encalloc); /* must be freed with free() since this was
 1663|       |                           allocated by curl_win32_idn_to_ascii */
 1664|       |  host->encalloc = NULL;
 1665|       |#else
 1666|  12.0k|  (void)host;
 1667|  12.0k|#endif
 1668|  12.0k|}
Curl_builtin_scheme:
 1816|  11.7k|{
 1817|  11.7k|  const struct Curl_handler * const *pp;
 1818|  11.7k|  const struct Curl_handler *p;
 1819|       |  /* Scan protocol handler table and match against 'scheme'. The handler may
 1820|       |     be changed later when the protocol specific setup function is called. */
 1821|  72.7k|  for(pp = protocols; (p = *pp) != NULL; pp++)
 1822|  72.7k|    if(strcasecompare(p->scheme, scheme))
 1823|       |      /* Protocol found in table. Check if allowed */
 1824|  11.7k|      return p;
 1825|     40|  return NULL; /* not found */
 1826|  11.7k|}
Curl_uc_to_curlcode:
 1864|     61|{
 1865|     61|  switch(uc) {
 1866|     60|  default:
 1867|     60|    return CURLE_URL_MALFORMAT;
 1868|      1|  case CURLUE_UNSUPPORTED_SCHEME:
 1869|      1|    return CURLE_UNSUPPORTED_PROTOCOL;
 1870|      0|  case CURLUE_OUT_OF_MEMORY:
 1871|      0|    return CURLE_OUT_OF_MEMORY;
 1872|      0|  case CURLUE_USER_NOT_ALLOWED:
 1873|      0|    return CURLE_LOGIN_DENIED;
 1874|     61|  }
 1875|     61|}
Curl_free_request_state:
 2204|  11.8k|{
 2205|  11.8k|  Curl_safefree(data->req.p.http);
 2206|  11.8k|  Curl_safefree(data->req.newurl);
 2207|       |
 2208|  11.8k|#ifndef CURL_DISABLE_DOH
 2209|  11.8k|  if(data->req.doh) {
 2210|      0|    Curl_close(&data->req.doh->probe[0].easy);
 2211|      0|    Curl_close(&data->req.doh->probe[1].easy);
 2212|      0|  }
 2213|  11.8k|#endif
 2214|  11.8k|}
Curl_parse_login_details:
 2777|    326|{
 2778|    326|  CURLcode result = CURLE_OK;
 2779|    326|  char *ubuf = NULL;
 2780|    326|  char *pbuf = NULL;
 2781|    326|  char *obuf = NULL;
 2782|    326|  const char *psep = NULL;
 2783|    326|  const char *osep = NULL;
 2784|    326|  size_t ulen;
 2785|    326|  size_t plen;
 2786|    326|  size_t olen;
 2787|       |
 2788|       |  /* the input length check is because this is called directly from setopt
 2789|       |     and isn't going through the regular string length check */
 2790|    326|  size_t llen = strlen(login);
 2791|    326|  if(llen > CURL_MAX_INPUT_LENGTH)
 2792|      0|    return CURLE_BAD_FUNCTION_ARGUMENT;
 2793|       |
 2794|       |  /* Attempt to find the password separator */
 2795|    326|  if(passwdp) {
 2796|    326|    psep = strchr(login, ':');
 2797|       |
 2798|       |    /* Within the constraint of the login string */
 2799|    326|    if(psep >= login + len)
 2800|     21|      psep = NULL;
 2801|    326|  }
 2802|       |
 2803|       |  /* Attempt to find the options separator */
 2804|    326|  if(optionsp) {
 2805|    186|    osep = strchr(login, ';');
 2806|       |
 2807|       |    /* Within the constraint of the login string */
 2808|    186|    if(osep >= login + len)
 2809|      1|      osep = NULL;
 2810|    186|  }
 2811|       |
 2812|       |  /* Calculate the portion lengths */
 2813|    326|  ulen = (psep ?
 2814|    185|          (size_t)(osep && psep > osep ? osep - login : psep - login) :
 2815|    326|          (osep ? (size_t)(osep - login) : len));
 2816|    326|  plen = (psep ?
 2817|    185|          (osep && osep > psep ? (size_t)(osep - psep) :
 2818|    185|                                 (size_t)(login + len - psep)) - 1 : 0);
 2819|    326|  olen = (osep ?
 2820|     72|          (psep && psep > osep ? (size_t)(psep - osep) :
 2821|    254|                                 (size_t)(login + len - osep)) - 1 : 0);
 2822|       |
 2823|       |  /* Allocate the user portion buffer */
 2824|    326|  if(userp && ulen) {
 2825|    265|    ubuf = malloc(ulen + 1);
 2826|    265|    if(!ubuf)
 2827|      0|      result = CURLE_OUT_OF_MEMORY;
 2828|    265|  }
 2829|       |
 2830|       |  /* Allocate the password portion buffer */
 2831|    326|  if(!result && passwdp && plen) {
 2832|    146|    pbuf = malloc(plen + 1);
 2833|    146|    if(!pbuf) {
 2834|      0|      free(ubuf);
 2835|      0|      result = CURLE_OUT_OF_MEMORY;
 2836|      0|    }
 2837|    146|  }
 2838|       |
 2839|       |  /* Allocate the options portion buffer */
 2840|    326|  if(!result && optionsp && olen) {
 2841|     64|    obuf = malloc(olen + 1);
 2842|     64|    if(!obuf) {
 2843|      0|      free(pbuf);
 2844|      0|      free(ubuf);
 2845|      0|      result = CURLE_OUT_OF_MEMORY;
 2846|      0|    }
 2847|     64|  }
 2848|       |
 2849|    326|  if(!result) {
 2850|       |    /* Store the user portion if necessary */
 2851|    326|    if(ubuf) {
 2852|    265|      memcpy(ubuf, login, ulen);
 2853|    265|      ubuf[ulen] = '\0';
 2854|    265|      Curl_safefree(*userp);
 2855|    265|      *userp = ubuf;
 2856|    265|    }
 2857|       |
 2858|       |    /* Store the password portion if necessary */
 2859|    326|    if(pbuf) {
 2860|    146|      memcpy(pbuf, psep + 1, plen);
 2861|    146|      pbuf[plen] = '\0';
 2862|    146|      Curl_safefree(*passwdp);
 2863|    146|      *passwdp = pbuf;
 2864|    146|    }
 2865|       |
 2866|       |    /* Store the options portion if necessary */
 2867|    326|    if(obuf) {
 2868|     64|      memcpy(obuf, osep + 1, olen);
 2869|     64|      obuf[olen] = '\0';
 2870|     64|      Curl_safefree(*optionsp);
 2871|     64|      *optionsp = obuf;
 2872|     64|    }
 2873|    326|  }
 2874|       |
 2875|    326|  return result;
 2876|    326|}
Curl_setup_conn:
 4055|  2.84k|{
 4056|  2.84k|  CURLcode result = CURLE_OK;
 4057|  2.84k|  struct connectdata *conn = data->conn;
 4058|       |
 4059|  2.84k|  Curl_pgrsTime(data, TIMER_NAMELOOKUP);
 4060|       |
 4061|  2.84k|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 4062|       |    /* nothing to setup when not using a network */
 4063|     42|    *protocol_done = TRUE;
 4064|     42|    return result;
 4065|     42|  }
 4066|  2.80k|  *protocol_done = FALSE; /* default to not done */
 4067|       |
 4068|  2.80k|#ifndef CURL_DISABLE_PROXY
 4069|       |  /* set proxy_connect_closed to false unconditionally already here since it
 4070|       |     is used strictly to provide extra information to a parent function in the
 4071|       |     case of proxy CONNECT failures and we must make sure we don't have it
 4072|       |     lingering set from a previous invoke */
 4073|  2.80k|  conn->bits.proxy_connect_closed = FALSE;
 4074|  2.80k|#endif
 4075|       |
 4076|  2.80k|#ifdef CURL_DO_LINEEND_CONV
 4077|  2.80k|  data->state.crlf_conversions = 0; /* reset CRLF conversion counter */
 4078|  2.80k|#endif /* CURL_DO_LINEEND_CONV */
 4079|       |
 4080|       |  /* set start time here for timeout purposes in the connect procedure, it
 4081|       |     is later set again for the progress meter purpose */
 4082|  2.80k|  conn->now = Curl_now();
 4083|       |
 4084|  2.80k|  if(CURL_SOCKET_BAD == conn->sock[FIRSTSOCKET]) {
 4085|  2.80k|    conn->bits.tcpconnect[FIRSTSOCKET] = FALSE;
 4086|  2.80k|    result = Curl_connecthost(data, conn, conn->dns_entry);
 4087|  2.80k|    if(result)
 4088|      9|      return result;
 4089|  2.80k|  }
 4090|      0|  else {
 4091|      0|    Curl_pgrsTime(data, TIMER_CONNECT);    /* we're connected already */
 4092|      0|    if(conn->ssl[FIRSTSOCKET].use ||
 4093|      0|       (conn->handler->protocol & PROTO_FAMILY_SSH))
 4094|      0|      Curl_pgrsTime(data, TIMER_APPCONNECT); /* we're connected already */
 4095|      0|    conn->bits.tcpconnect[FIRSTSOCKET] = TRUE;
 4096|      0|    *protocol_done = TRUE;
 4097|      0|    Curl_updateconninfo(data, conn, conn->sock[FIRSTSOCKET]);
 4098|      0|    Curl_verboseconnect(data, conn);
 4099|      0|  }
 4100|       |
 4101|  2.79k|  conn->now = Curl_now(); /* time this *after* the connect is done, we set
 4102|       |                             this here perhaps a second time */
 4103|  2.79k|  return result;
 4104|  2.80k|}
Curl_connect:
 4109|  2.92k|{
 4110|  2.92k|  CURLcode result;
 4111|  2.92k|  struct connectdata *conn;
 4112|       |
 4113|  2.92k|  *asyncp = FALSE; /* assume synchronous resolves by default */
 4114|       |
 4115|       |  /* init the single-transfer specific data */
 4116|  2.92k|  Curl_free_request_state(data);
 4117|  2.92k|  memset(&data->req, 0, sizeof(struct SingleRequest));
 4118|  2.92k|  data->req.size = data->req.maxdownload = -1;
 4119|       |
 4120|       |  /* call the stuff that needs to be called */
 4121|  2.92k|  result = create_conn(data, &conn, asyncp);
 4122|       |
 4123|  2.92k|  if(!result) {
 4124|  2.84k|    if(CONN_INUSE(conn) > 1)
 4125|       |      /* multiplexed */
 4126|      0|      *protocol_done = TRUE;
 4127|  2.84k|    else if(!*asyncp) {
 4128|       |      /* DNS resolution is done: that's either because this is a reused
 4129|       |         connection, in which case DNS was unnecessary, or because DNS
 4130|       |         really did finish already (synch resolver/fast async resolve) */
 4131|  2.84k|      result = Curl_setup_conn(data, protocol_done);
 4132|  2.84k|    }
 4133|  2.84k|  }
 4134|       |
 4135|  2.92k|  if(result == CURLE_NO_CONNECTION_AVAILABLE) {
 4136|      0|    return result;
 4137|      0|  }
 4138|  2.92k|  else if(result && conn) {
 4139|       |    /* We're not allowed to return failure with memory left allocated in the
 4140|       |       connectdata struct, free those here */
 4141|     84|    Curl_detach_connnection(data);
 4142|     84|    Curl_conncache_remove_conn(data, conn, TRUE);
 4143|     84|    Curl_disconnect(data, conn, TRUE);
 4144|     84|  }
 4145|       |
 4146|  2.92k|  return result;
 4147|  2.92k|}
Curl_init_do:
 4160|  2.85k|{
 4161|  2.85k|  struct SingleRequest *k = &data->req;
 4162|       |
 4163|       |  /* if this is a pushed stream, we need this: */
 4164|  2.85k|  CURLcode result = Curl_preconnect(data);
 4165|  2.85k|  if(result)
 4166|      0|    return result;
 4167|       |
 4168|  2.85k|  if(conn) {
 4169|  2.85k|    conn->bits.do_more = FALSE; /* by default there's no curl_do_more() to
 4170|       |                                   use */
 4171|       |    /* if the protocol used doesn't support wildcards, switch it off */
 4172|  2.85k|    if(data->state.wildcardmatch &&
 4173|  2.85k|       !(conn->handler->flags & PROTOPT_WILDCARD))
 4174|     41|      data->state.wildcardmatch = FALSE;
 4175|  2.85k|  }
 4176|       |
 4177|  2.85k|  data->state.done = FALSE; /* *_done() is not called yet */
 4178|  2.85k|  data->state.expect100header = FALSE;
 4179|       |
 4180|  2.85k|  if(data->set.opt_no_body)
 4181|       |    /* in HTTP lingo, no body means using the HEAD request... */
 4182|     28|    data->state.httpreq = HTTPREQ_HEAD;
 4183|       |
 4184|  2.85k|  k->start = Curl_now(); /* start time */
 4185|  2.85k|  k->now = k->start;   /* current time is now */
 4186|  2.85k|  k->header = TRUE; /* assume header */
 4187|  2.85k|  k->bytecount = 0;
 4188|  2.85k|  k->ignorebody = FALSE;
 4189|       |
 4190|  2.85k|  Curl_speedinit(data);
 4191|  2.85k|  Curl_pgrsSetUploadCounter(data, 0);
 4192|  2.85k|  Curl_pgrsSetDownloadCounter(data, 0);
 4193|       |
 4194|  2.85k|  return CURLE_OK;
 4195|  2.85k|}
url.c:up_free:
  339|  8.98k|{
  340|  8.98k|  struct urlpieces *up = &data->state.up;
  341|  8.98k|  Curl_safefree(up->scheme);
  342|  8.98k|  Curl_safefree(up->hostname);
  343|  8.98k|  Curl_safefree(up->port);
  344|  8.98k|  Curl_safefree(up->user);
  345|  8.98k|  Curl_safefree(up->password);
  346|  8.98k|  Curl_safefree(up->options);
  347|  8.98k|  Curl_safefree(up->path);
  348|  8.98k|  Curl_safefree(up->query);
  349|  8.98k|  curl_url_cleanup(data->state.uh);
  350|  8.98k|  data->state.uh = NULL;
  351|  8.98k|}
url.c:conn_shutdown:
  734|  2.92k|{
  735|  2.92k|  DEBUGASSERT(conn);
  736|  2.92k|  DEBUGASSERT(data);
  737|  2.92k|  infof(data, "Closing connection %ld", conn->connection_id);
  738|       |
  739|  2.92k|#ifndef USE_HYPER
  740|  2.92k|  if(conn->connect_state && conn->connect_state->prot_save) {
  741|       |    /* If this was closed with a CONNECT in progress, cleanup this temporary
  742|       |       struct arrangement */
  743|      0|    data->req.p.http = NULL;
  744|      0|    Curl_safefree(conn->connect_state->prot_save);
  745|      0|  }
  746|  2.92k|#endif
  747|       |
  748|       |  /* possible left-overs from the async name resolvers */
  749|  2.92k|  Curl_resolver_cancel(data);
  750|       |
  751|       |  /* close the SSL stuff before we close any sockets since they will/may
  752|       |     write to the sockets */
  753|  2.92k|  Curl_ssl_close(data, conn, FIRSTSOCKET);
  754|  2.92k|  Curl_ssl_close(data, conn, SECONDARYSOCKET);
  755|       |
  756|       |  /* close possibly still open sockets */
  757|  2.92k|  if(CURL_SOCKET_BAD != conn->sock[SECONDARYSOCKET])
  758|      0|    Curl_closesocket(data, conn, conn->sock[SECONDARYSOCKET]);
  759|  2.92k|  if(CURL_SOCKET_BAD != conn->sock[FIRSTSOCKET])
  760|  2.79k|    Curl_closesocket(data, conn, conn->sock[FIRSTSOCKET]);
  761|  2.92k|  if(CURL_SOCKET_BAD != conn->tempsock[0])
  762|      0|    Curl_closesocket(data, conn, conn->tempsock[0]);
  763|  2.92k|  if(CURL_SOCKET_BAD != conn->tempsock[1])
  764|      0|    Curl_closesocket(data, conn, conn->tempsock[1]);
  765|  2.92k|}
url.c:conn_free:
  768|  2.92k|{
  769|  2.92k|  DEBUGASSERT(conn);
  770|       |
  771|  2.92k|  Curl_free_idnconverted_hostname(&conn->host);
  772|  2.92k|  Curl_free_idnconverted_hostname(&conn->conn_to_host);
  773|  2.92k|#ifndef CURL_DISABLE_PROXY
  774|  2.92k|  Curl_free_idnconverted_hostname(&conn->http_proxy.host);
  775|  2.92k|  Curl_free_idnconverted_hostname(&conn->socks_proxy.host);
  776|  2.92k|  Curl_safefree(conn->http_proxy.user);
  777|  2.92k|  Curl_safefree(conn->socks_proxy.user);
  778|  2.92k|  Curl_safefree(conn->http_proxy.passwd);
  779|  2.92k|  Curl_safefree(conn->socks_proxy.passwd);
  780|  2.92k|  Curl_safefree(conn->http_proxy.host.rawalloc); /* http proxy name buffer */
  781|  2.92k|  Curl_safefree(conn->socks_proxy.host.rawalloc); /* socks proxy name buffer */
  782|  2.92k|  Curl_free_primary_ssl_config(&conn->proxy_ssl_config);
  783|  2.92k|#endif
  784|  2.92k|  Curl_safefree(conn->user);
  785|  2.92k|  Curl_safefree(conn->passwd);
  786|  2.92k|  Curl_safefree(conn->sasl_authzid);
  787|  2.92k|  Curl_safefree(conn->options);
  788|  2.92k|  Curl_dyn_free(&conn->trailer);
  789|  2.92k|  Curl_safefree(conn->host.rawalloc); /* host name buffer */
  790|  2.92k|  Curl_safefree(conn->conn_to_host.rawalloc); /* host name buffer */
  791|  2.92k|  Curl_safefree(conn->hostname_resolve);
  792|  2.92k|  Curl_safefree(conn->secondaryhostname);
  793|  2.92k|  Curl_safefree(conn->connect_state);
  794|       |
  795|  2.92k|  conn_reset_all_postponed_data(conn);
  796|  2.92k|  Curl_llist_destroy(&conn->easyq, NULL);
  797|  2.92k|  Curl_safefree(conn->localdev);
  798|  2.92k|  Curl_free_primary_ssl_config(&conn->ssl_config);
  799|       |
  800|  2.92k|#ifdef USE_UNIX_SOCKETS
  801|  2.92k|  Curl_safefree(conn->unix_domain_socket);
  802|  2.92k|#endif
  803|       |
  804|  2.92k|#ifdef USE_SSL
  805|  2.92k|  Curl_safefree(conn->ssl_extra);
  806|  2.92k|#endif
  807|  2.92k|  free(conn); /* free all the connection oriented data */
  808|  2.92k|}
url.c:create_conn:
 3571|  2.92k|{
 3572|  2.92k|  CURLcode result = CURLE_OK;
 3573|  2.92k|  struct connectdata *conn;
 3574|  2.92k|  struct connectdata *conn_temp = NULL;
 3575|  2.92k|  bool reuse;
 3576|  2.92k|  bool connections_available = TRUE;
 3577|  2.92k|  bool force_reuse = FALSE;
 3578|  2.92k|  bool waitpipe = FALSE;
 3579|  2.92k|  size_t max_host_connections = Curl_multi_max_host_connections(data->multi);
 3580|  2.92k|  size_t max_total_connections = Curl_multi_max_total_connections(data->multi);
 3581|       |
 3582|  2.92k|  *async = FALSE;
 3583|  2.92k|  *in_connect = NULL;
 3584|       |
 3585|       |  /*************************************************************
 3586|       |   * Check input data
 3587|       |   *************************************************************/
 3588|  2.92k|  if(!data->state.url) {
 3589|      0|    result = CURLE_URL_MALFORMAT;
 3590|      0|    goto out;
 3591|      0|  }
 3592|       |
 3593|       |  /* First, split up the current URL in parts so that we can use the
 3594|       |     parts for checking against the already present connections. In order
 3595|       |     to not have to modify everything at once, we allocate a temporary
 3596|       |     connection data struct and fill in for comparison purposes. */
 3597|  2.92k|  conn = allocate_conn(data);
 3598|       |
 3599|  2.92k|  if(!conn) {
 3600|      0|    result = CURLE_OUT_OF_MEMORY;
 3601|      0|    goto out;
 3602|      0|  }
 3603|       |
 3604|       |  /* We must set the return variable as soon as possible, so that our
 3605|       |     parent can cleanup any possible allocs we may have done before
 3606|       |     any failure */
 3607|  2.92k|  *in_connect = conn;
 3608|       |
 3609|  2.92k|  result = parseurlandfillconn(data, conn);
 3610|  2.92k|  if(result)
 3611|     69|    goto out;
 3612|       |
 3613|  2.85k|  if(data->set.str[STRING_SASL_AUTHZID]) {
 3614|      0|    conn->sasl_authzid = strdup(data->set.str[STRING_SASL_AUTHZID]);
 3615|      0|    if(!conn->sasl_authzid) {
 3616|      0|      result = CURLE_OUT_OF_MEMORY;
 3617|      0|      goto out;
 3618|      0|    }
 3619|      0|  }
 3620|       |
 3621|  2.85k|#ifdef USE_UNIX_SOCKETS
 3622|  2.85k|  if(data->set.str[STRING_UNIX_SOCKET_PATH]) {
 3623|      0|    conn->unix_domain_socket = strdup(data->set.str[STRING_UNIX_SOCKET_PATH]);
 3624|      0|    if(!conn->unix_domain_socket) {
 3625|      0|      result = CURLE_OUT_OF_MEMORY;
 3626|      0|      goto out;
 3627|      0|    }
 3628|      0|    conn->bits.abstract_unix_socket = data->set.abstract_unix_socket;
 3629|      0|  }
 3630|  2.85k|#endif
 3631|       |
 3632|       |  /* After the unix socket init but before the proxy vars are used, parse and
 3633|       |     initialize the proxy vars */
 3634|  2.85k|#ifndef CURL_DISABLE_PROXY
 3635|  2.85k|  result = create_conn_helper_init_proxy(data, conn);
 3636|  2.85k|  if(result)
 3637|      0|    goto out;
 3638|       |
 3639|       |  /*************************************************************
 3640|       |   * If the protocol is using SSL and HTTP proxy is used, we set
 3641|       |   * the tunnel_proxy bit.
 3642|       |   *************************************************************/
 3643|  2.85k|  if((conn->given->flags&PROTOPT_SSL) && conn->bits.httpproxy)
 3644|      0|    conn->bits.tunnel_proxy = TRUE;
 3645|  2.85k|#endif
 3646|       |
 3647|       |  /*************************************************************
 3648|       |   * Figure out the remote port number and fix it in the URL
 3649|       |   *************************************************************/
 3650|  2.85k|  result = parse_remote_port(data, conn);
 3651|  2.85k|  if(result)
 3652|      0|    goto out;
 3653|       |
 3654|       |  /* Check for overridden login details and set them accordingly so that
 3655|       |     they are known when protocol->setup_connection is called! */
 3656|  2.85k|  result = override_login(data, conn);
 3657|  2.85k|  if(result)
 3658|      0|    goto out;
 3659|       |
 3660|  2.85k|  result = set_login(conn); /* default credentials */
 3661|  2.85k|  if(result)
 3662|      0|    goto out;
 3663|       |
 3664|       |  /*************************************************************
 3665|       |   * Process the "connect to" linked list of hostname/port mappings.
 3666|       |   * Do this after the remote port number has been fixed in the URL.
 3667|       |   *************************************************************/
 3668|  2.85k|  result = parse_connect_to_slist(data, conn, data->set.connect_to);
 3669|  2.85k|  if(result)
 3670|      0|    goto out;
 3671|       |
 3672|       |  /*************************************************************
 3673|       |   * IDN-convert the hostnames
 3674|       |   *************************************************************/
 3675|  2.85k|  result = Curl_idnconvert_hostname(data, &conn->host);
 3676|  2.85k|  if(result)
 3677|      0|    goto out;
 3678|  2.85k|  if(conn->bits.conn_to_host) {
 3679|  2.85k|    result = Curl_idnconvert_hostname(data, &conn->conn_to_host);
 3680|  2.85k|    if(result)
 3681|      0|      goto out;
 3682|  2.85k|  }
 3683|  2.85k|#ifndef CURL_DISABLE_PROXY
 3684|  2.85k|  if(conn->bits.httpproxy) {
 3685|      0|    result = Curl_idnconvert_hostname(data, &conn->http_proxy.host);
 3686|      0|    if(result)
 3687|      0|      goto out;
 3688|      0|  }
 3689|  2.85k|  if(conn->bits.socksproxy) {
 3690|      0|    result = Curl_idnconvert_hostname(data, &conn->socks_proxy.host);
 3691|      0|    if(result)
 3692|      0|      goto out;
 3693|      0|  }
 3694|  2.85k|#endif
 3695|       |
 3696|       |  /*************************************************************
 3697|       |   * Check whether the host and the "connect to host" are equal.
 3698|       |   * Do this after the hostnames have been IDN-converted.
 3699|       |   *************************************************************/
 3700|  2.85k|  if(conn->bits.conn_to_host &&
 3701|  2.85k|     strcasecompare(conn->conn_to_host.name, conn->host.name)) {
 3702|      1|    conn->bits.conn_to_host = FALSE;
 3703|      1|  }
 3704|       |
 3705|       |  /*************************************************************
 3706|       |   * Check whether the port and the "connect to port" are equal.
 3707|       |   * Do this after the remote port number has been fixed in the URL.
 3708|       |   *************************************************************/
 3709|  2.85k|  if(conn->bits.conn_to_port && conn->conn_to_port == conn->remote_port) {
 3710|      0|    conn->bits.conn_to_port = FALSE;
 3711|      0|  }
 3712|       |
 3713|  2.85k|#ifndef CURL_DISABLE_PROXY
 3714|       |  /*************************************************************
 3715|       |   * If the "connect to" feature is used with an HTTP proxy,
 3716|       |   * we set the tunnel_proxy bit.
 3717|       |   *************************************************************/
 3718|  2.85k|  if((conn->bits.conn_to_host || conn->bits.conn_to_port) &&
 3719|  2.85k|      conn->bits.httpproxy)
 3720|      0|    conn->bits.tunnel_proxy = TRUE;
 3721|  2.85k|#endif
 3722|       |
 3723|       |  /*************************************************************
 3724|       |   * Setup internals depending on protocol. Needs to be done after
 3725|       |   * we figured out what/if proxy to use.
 3726|       |   *************************************************************/
 3727|  2.85k|  result = setup_connection_internals(data, conn);
 3728|  2.85k|  if(result)
 3729|      0|    goto out;
 3730|       |
 3731|  2.85k|  conn->recv[FIRSTSOCKET] = Curl_recv_plain;
 3732|  2.85k|  conn->send[FIRSTSOCKET] = Curl_send_plain;
 3733|  2.85k|  conn->recv[SECONDARYSOCKET] = Curl_recv_plain;
 3734|  2.85k|  conn->send[SECONDARYSOCKET] = Curl_send_plain;
 3735|       |
 3736|  2.85k|  conn->bits.tcp_fastopen = data->set.tcp_fastopen;
 3737|       |
 3738|       |  /***********************************************************************
 3739|       |   * file: is a special case in that it doesn't need a network connection
 3740|       |   ***********************************************************************/
 3741|  2.85k|#ifndef CURL_DISABLE_FILE
 3742|  2.85k|  if(conn->handler->flags & PROTOPT_NONETWORK) {
 3743|     48|    bool done;
 3744|       |    /* this is supposed to be the connect function so we better at least check
 3745|       |       that the file is present here! */
 3746|     48|    DEBUGASSERT(conn->handler->connect_it);
 3747|     48|    Curl_persistconninfo(data, conn, NULL, -1);
 3748|     48|    result = conn->handler->connect_it(data, &done);
 3749|       |
 3750|       |    /* Setup a "faked" transfer that'll do nothing */
 3751|     48|    if(!result) {
 3752|     42|      conn->bits.tcpconnect[FIRSTSOCKET] = TRUE; /* we are "connected */
 3753|       |
 3754|     42|      Curl_attach_connnection(data, conn);
 3755|     42|      result = Curl_conncache_add_conn(data);
 3756|     42|      if(result)
 3757|      0|        goto out;
 3758|       |
 3759|       |      /*
 3760|       |       * Setup whatever necessary for a resumed transfer
 3761|       |       */
 3762|     42|      result = setup_range(data);
 3763|     42|      if(result) {
 3764|      0|        DEBUGASSERT(conn->handler->done);
 3765|       |        /* we ignore the return code for the protocol-specific DONE */
 3766|      0|        (void)conn->handler->done(data, result, FALSE);
 3767|      0|        goto out;
 3768|      0|      }
 3769|     42|      Curl_setup_transfer(data, -1, -1, FALSE, -1);
 3770|     42|    }
 3771|       |
 3772|       |    /* since we skip do_init() */
 3773|     48|    Curl_init_do(data, conn);
 3774|       |
 3775|     48|    goto out;
 3776|     48|  }
 3777|  2.80k|#endif
 3778|       |
 3779|       |  /* Get a cloned copy of the SSL config situation stored in the
 3780|       |     connection struct. But to get this going nicely, we must first make
 3781|       |     sure that the strings in the master copy are pointing to the correct
 3782|       |     strings in the session handle strings array!
 3783|       |
 3784|       |     Keep in mind that the pointers in the master copy are pointing to strings
 3785|       |     that will be freed as part of the Curl_easy struct, but all cloned
 3786|       |     copies will be separately allocated.
 3787|       |  */
 3788|  2.80k|  data->set.ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH];
 3789|  2.80k|  data->set.ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE];
 3790|  2.80k|  data->set.ssl.primary.issuercert = data->set.str[STRING_SSL_ISSUERCERT];
 3791|  2.80k|  data->set.ssl.primary.issuercert_blob = data->set.blobs[BLOB_SSL_ISSUERCERT];
 3792|  2.80k|  data->set.ssl.primary.random_file = data->set.str[STRING_SSL_RANDOM_FILE];
 3793|  2.80k|  data->set.ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3794|  2.80k|  data->set.ssl.primary.cipher_list =
 3795|  2.80k|    data->set.str[STRING_SSL_CIPHER_LIST];
 3796|  2.80k|  data->set.ssl.primary.cipher_list13 =
 3797|  2.80k|    data->set.str[STRING_SSL_CIPHER13_LIST];
 3798|  2.80k|  data->set.ssl.primary.pinned_key =
 3799|  2.80k|    data->set.str[STRING_SSL_PINNEDPUBLICKEY];
 3800|  2.80k|  data->set.ssl.primary.cert_blob = data->set.blobs[BLOB_CERT];
 3801|  2.80k|  data->set.ssl.primary.ca_info_blob = data->set.blobs[BLOB_CAINFO];
 3802|  2.80k|  data->set.ssl.primary.curves = data->set.str[STRING_SSL_EC_CURVES];
 3803|       |
 3804|  2.80k|#ifndef CURL_DISABLE_PROXY
 3805|  2.80k|  data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];
 3806|  2.80k|  data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];
 3807|  2.80k|  data->set.proxy_ssl.primary.random_file =
 3808|  2.80k|    data->set.str[STRING_SSL_RANDOM_FILE];
 3809|  2.80k|  data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];
 3810|  2.80k|  data->set.proxy_ssl.primary.cipher_list =
 3811|  2.80k|    data->set.str[STRING_SSL_CIPHER_LIST_PROXY];
 3812|  2.80k|  data->set.proxy_ssl.primary.cipher_list13 =
 3813|  2.80k|    data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];
 3814|  2.80k|  data->set.proxy_ssl.primary.pinned_key =
 3815|  2.80k|    data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY];
 3816|  2.80k|  data->set.proxy_ssl.primary.cert_blob = data->set.blobs[BLOB_CERT_PROXY];
 3817|  2.80k|  data->set.proxy_ssl.primary.ca_info_blob =
 3818|  2.80k|    data->set.blobs[BLOB_CAINFO_PROXY];
 3819|  2.80k|  data->set.proxy_ssl.primary.issuercert =
 3820|  2.80k|    data->set.str[STRING_SSL_ISSUERCERT_PROXY];
 3821|  2.80k|  data->set.proxy_ssl.primary.issuercert_blob =
 3822|  2.80k|    data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY];
 3823|  2.80k|  data->set.proxy_ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_PROXY];
 3824|  2.80k|  data->set.proxy_ssl.cert_type = data->set.str[STRING_CERT_TYPE_PROXY];
 3825|  2.80k|  data->set.proxy_ssl.key = data->set.str[STRING_KEY_PROXY];
 3826|  2.80k|  data->set.proxy_ssl.key_type = data->set.str[STRING_KEY_TYPE_PROXY];
 3827|  2.80k|  data->set.proxy_ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_PROXY];
 3828|  2.80k|  data->set.proxy_ssl.primary.clientcert = data->set.str[STRING_CERT_PROXY];
 3829|  2.80k|  data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];
 3830|  2.80k|#endif
 3831|  2.80k|  data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE];
 3832|  2.80k|  data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE];
 3833|  2.80k|  data->set.ssl.key = data->set.str[STRING_KEY];
 3834|  2.80k|  data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE];
 3835|  2.80k|  data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD];
 3836|  2.80k|  data->set.ssl.primary.clientcert = data->set.str[STRING_CERT];
 3837|  2.80k|#ifdef USE_TLS_SRP
 3838|  2.80k|  data->set.ssl.username = data->set.str[STRING_TLSAUTH_USERNAME];
 3839|  2.80k|  data->set.ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD];
 3840|  2.80k|#ifndef CURL_DISABLE_PROXY
 3841|  2.80k|  data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];
 3842|  2.80k|  data->set.proxy_ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_PROXY];
 3843|  2.80k|#endif
 3844|  2.80k|#endif
 3845|  2.80k|  data->set.ssl.key_blob = data->set.blobs[BLOB_KEY];
 3846|       |
 3847|  2.80k|  if(!Curl_clone_primary_ssl_config(&data->set.ssl.primary,
 3848|  2.80k|                                    &conn->ssl_config)) {
 3849|      0|    result = CURLE_OUT_OF_MEMORY;
 3850|      0|    goto out;
 3851|      0|  }
 3852|       |
 3853|  2.80k|#ifndef CURL_DISABLE_PROXY
 3854|  2.80k|  if(!Curl_clone_primary_ssl_config(&data->set.proxy_ssl.primary,
 3855|  2.80k|                                    &conn->proxy_ssl_config)) {
 3856|      0|    result = CURLE_OUT_OF_MEMORY;
 3857|      0|    goto out;
 3858|      0|  }
 3859|  2.80k|#endif
 3860|       |
 3861|  2.80k|  prune_dead_connections(data);
 3862|       |
 3863|       |  /*************************************************************
 3864|       |   * Check the current list of connections to see if we can
 3865|       |   * re-use an already existing one or if we have to create a
 3866|       |   * new one.
 3867|       |   *************************************************************/
 3868|       |
 3869|  2.80k|  DEBUGASSERT(conn->user);
 3870|  2.80k|  DEBUGASSERT(conn->passwd);
 3871|       |
 3872|       |  /* reuse_fresh is TRUE if we are told to use a new connection by force, but
 3873|       |     we only acknowledge this option if this is not a re-used connection
 3874|       |     already (which happens due to follow-location or during a HTTP
 3875|       |     authentication phase). CONNECT_ONLY transfers also refuse reuse. */
 3876|  2.80k|  if((data->set.reuse_fresh && !data->state.this_is_a_follow) ||
 3877|  2.80k|     data->set.connect_only)
 3878|      0|    reuse = FALSE;
 3879|  2.80k|  else
 3880|  2.80k|    reuse = ConnectionExists(data, conn, &conn_temp, &force_reuse, &waitpipe);
 3881|       |
 3882|  2.80k|  if(reuse) {
 3883|       |    /*
 3884|       |     * We already have a connection for this, we got the former connection in
 3885|       |     * the conn_temp variable and thus we need to cleanup the one we just
 3886|       |     * allocated before we can move along and use the previously existing one.
 3887|       |     */
 3888|      0|    reuse_conn(data, conn, conn_temp);
 3889|      0|#ifdef USE_SSL
 3890|      0|    free(conn->ssl_extra);
 3891|      0|#endif
 3892|      0|    free(conn);          /* we don't need this anymore */
 3893|      0|    conn = conn_temp;
 3894|      0|    *in_connect = conn;
 3895|       |
 3896|      0|#ifndef CURL_DISABLE_PROXY
 3897|      0|    infof(data, "Re-using existing connection! (#%ld) with %s %s",
 3898|      0|          conn->connection_id,
 3899|      0|          conn->bits.proxy?"proxy":"host",
 3900|      0|          conn->socks_proxy.host.name ? conn->socks_proxy.host.dispname :
 3901|      0|          conn->http_proxy.host.name ? conn->http_proxy.host.dispname :
 3902|      0|          conn->host.dispname);
 3903|       |#else
 3904|       |    infof(data, "Re-using existing connection! (#%ld) with host %s",
 3905|       |          conn->connection_id, conn->host.dispname);
 3906|       |#endif
 3907|      0|  }
 3908|  2.80k|  else {
 3909|       |    /* We have decided that we want a new connection. However, we may not
 3910|       |       be able to do that if we have reached the limit of how many
 3911|       |       connections we are allowed to open. */
 3912|       |
 3913|  2.80k|    if(conn->handler->flags & PROTOPT_ALPN_NPN) {
 3914|       |      /* The protocol wants it, so set the bits if enabled in the easy handle
 3915|       |         (default) */
 3916|      0|      if(data->set.ssl_enable_alpn)
 3917|      0|        conn->bits.tls_enable_alpn = TRUE;
 3918|      0|      if(data->set.ssl_enable_npn)
 3919|      0|        conn->bits.tls_enable_npn = TRUE;
 3920|      0|    }
 3921|       |
 3922|  2.80k|    if(waitpipe)
 3923|       |      /* There is a connection that *might* become usable for multiplexing
 3924|       |         "soon", and we wait for that */
 3925|      0|      connections_available = FALSE;
 3926|  2.80k|    else {
 3927|       |      /* this gets a lock on the conncache */
 3928|  2.80k|      const char *bundlehost;
 3929|  2.80k|      struct connectbundle *bundle =
 3930|  2.80k|        Curl_conncache_find_bundle(data, conn, data->state.conn_cache,
 3931|  2.80k|                                   &bundlehost);
 3932|       |
 3933|  2.80k|      if(max_host_connections > 0 && bundle &&
 3934|  2.80k|         (bundle->num_connections >= max_host_connections)) {
 3935|      0|        struct connectdata *conn_candidate;
 3936|       |
 3937|       |        /* The bundle is full. Extract the oldest connection. */
 3938|      0|        conn_candidate = Curl_conncache_extract_bundle(data, bundle);
 3939|      0|        CONNCACHE_UNLOCK(data);
 3940|       |
 3941|      0|        if(conn_candidate)
 3942|      0|          (void)Curl_disconnect(data, conn_candidate, FALSE);
 3943|      0|        else {
 3944|      0|          infof(data, "No more connections allowed to host %s: %zu",
 3945|      0|                bundlehost, max_host_connections);
 3946|      0|          connections_available = FALSE;
 3947|      0|        }
 3948|      0|      }
 3949|  2.80k|      else
 3950|  2.80k|        CONNCACHE_UNLOCK(data);
 3951|       |
 3952|  2.80k|    }
 3953|       |
 3954|  2.80k|    if(connections_available &&
 3955|  2.80k|       (max_total_connections > 0) &&
 3956|  2.80k|       (Curl_conncache_size(data) >= max_total_connections)) {
 3957|      0|      struct connectdata *conn_candidate;
 3958|       |
 3959|       |      /* The cache is full. Let's see if we can kill a connection. */
 3960|      0|      conn_candidate = Curl_conncache_extract_oldest(data);
 3961|      0|      if(conn_candidate)
 3962|      0|        (void)Curl_disconnect(data, conn_candidate, FALSE);
 3963|      0|      else {
 3964|      0|        infof(data, "No connections available in cache");
 3965|      0|        connections_available = FALSE;
 3966|      0|      }
 3967|      0|    }
 3968|       |
 3969|  2.80k|    if(!connections_available) {
 3970|      0|      infof(data, "No connections available.");
 3971|       |
 3972|      0|      conn_free(conn);
 3973|      0|      *in_connect = NULL;
 3974|       |
 3975|      0|      result = CURLE_NO_CONNECTION_AVAILABLE;
 3976|      0|      goto out;
 3977|      0|    }
 3978|  2.80k|    else {
 3979|       |      /*
 3980|       |       * This is a brand new connection, so let's store it in the connection
 3981|       |       * cache of ours!
 3982|       |       */
 3983|  2.80k|      Curl_attach_connnection(data, conn);
 3984|  2.80k|      result = Curl_conncache_add_conn(data);
 3985|  2.80k|      if(result)
 3986|      0|        goto out;
 3987|  2.80k|    }
 3988|       |
 3989|  2.80k|#if defined(USE_NTLM)
 3990|       |    /* If NTLM is requested in a part of this connection, make sure we don't
 3991|       |       assume the state is fine as this is a fresh connection and NTLM is
 3992|       |       connection based. */
 3993|  2.80k|    if((data->state.authhost.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 3994|  2.80k|       data->state.authhost.done) {
 3995|      0|      infof(data, "NTLM picked AND auth done set, clear picked!");
 3996|      0|      data->state.authhost.picked = CURLAUTH_NONE;
 3997|      0|      data->state.authhost.done = FALSE;
 3998|      0|    }
 3999|       |
 4000|  2.80k|    if((data->state.authproxy.picked & (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 4001|  2.80k|       data->state.authproxy.done) {
 4002|      0|      infof(data, "NTLM-proxy picked AND auth done set, clear picked!");
 4003|      0|      data->state.authproxy.picked = CURLAUTH_NONE;
 4004|      0|      data->state.authproxy.done = FALSE;
 4005|      0|    }
 4006|  2.80k|#endif
 4007|  2.80k|  }
 4008|       |
 4009|       |  /* Setup and init stuff before DO starts, in preparing for the transfer. */
 4010|  2.80k|  Curl_init_do(data, conn);
 4011|       |
 4012|       |  /*
 4013|       |   * Setup whatever necessary for a resumed transfer
 4014|       |   */
 4015|  2.80k|  result = setup_range(data);
 4016|  2.80k|  if(result)
 4017|      0|    goto out;
 4018|       |
 4019|       |  /* Continue connectdata initialization here. */
 4020|       |
 4021|       |  /*
 4022|       |   * Inherit the proper values from the urldata struct AFTER we have arranged
 4023|       |   * the persistent connection stuff
 4024|       |   */
 4025|  2.80k|  conn->seek_func = data->set.seek_func;
 4026|  2.80k|  conn->seek_client = data->set.seek_client;
 4027|       |
 4028|       |  /*************************************************************
 4029|       |   * Resolve the address of the server or proxy
 4030|       |   *************************************************************/
 4031|  2.80k|  result = resolve_server(data, conn, async);
 4032|       |
 4033|       |  /* Strip trailing dots. resolve_server copied the name. */
 4034|  2.80k|  strip_trailing_dot(&conn->host);
 4035|  2.80k|#ifndef CURL_DISABLE_PROXY
 4036|  2.80k|  if(conn->bits.httpproxy)
 4037|      0|    strip_trailing_dot(&conn->http_proxy.host);
 4038|  2.80k|  if(conn->bits.socksproxy)
 4039|      0|    strip_trailing_dot(&conn->socks_proxy.host);
 4040|  2.80k|#endif
 4041|  2.80k|  if(conn->bits.conn_to_host)
 4042|  2.80k|    strip_trailing_dot(&conn->conn_to_host);
 4043|       |
 4044|  2.92k|out:
 4045|  2.92k|  return result;
 4046|  2.80k|}
url.c:allocate_conn:
 1674|  2.92k|{
 1675|  2.92k|  struct connectdata *conn = calloc(1, sizeof(struct connectdata));
 1676|  2.92k|  if(!conn)
 1677|      0|    return NULL;
 1678|       |
 1679|  2.92k|#ifdef USE_SSL
 1680|       |  /* The SSL backend-specific data (ssl_backend_data) objects are allocated as
 1681|       |     a separate array to ensure suitable alignment.
 1682|       |     Note that these backend pointers can be swapped by vtls (eg ssl backend
 1683|       |     data becomes proxy backend data). */
 1684|  2.92k|  {
 1685|  2.92k|    size_t sslsize = Curl_ssl->sizeof_ssl_backend_data;
 1686|  2.92k|    char *ssl = calloc(4, sslsize);
 1687|  2.92k|    if(!ssl) {
 1688|      0|      free(conn);
 1689|      0|      return NULL;
 1690|      0|    }
 1691|  2.92k|    conn->ssl_extra = ssl;
 1692|  2.92k|    conn->ssl[0].backend = (void *)ssl;
 1693|  2.92k|    conn->ssl[1].backend = (void *)(ssl + sslsize);
 1694|  2.92k|#ifndef CURL_DISABLE_PROXY
 1695|  2.92k|    conn->proxy_ssl[0].backend = (void *)(ssl + 2 * sslsize);
 1696|  2.92k|    conn->proxy_ssl[1].backend = (void *)(ssl + 3 * sslsize);
 1697|  2.92k|#endif
 1698|  2.92k|  }
 1699|      0|#endif
 1700|       |
 1701|      0|  conn->handler = &Curl_handler_dummy;  /* Be sure we have a handler defined
 1702|       |                                           already from start to avoid NULL
 1703|       |                                           situations and checks */
 1704|       |
 1705|       |  /* and we setup a few fields in case we end up actually using this struct */
 1706|       |
 1707|  2.92k|  conn->sock[FIRSTSOCKET] = CURL_SOCKET_BAD;     /* no file descriptor */
 1708|  2.92k|  conn->sock[SECONDARYSOCKET] = CURL_SOCKET_BAD; /* no file descriptor */
 1709|  2.92k|  conn->tempsock[0] = CURL_SOCKET_BAD; /* no file descriptor */
 1710|  2.92k|  conn->tempsock[1] = CURL_SOCKET_BAD; /* no file descriptor */
 1711|  2.92k|  conn->connection_id = -1;    /* no ID */
 1712|  2.92k|  conn->port = -1; /* unknown at this point */
 1713|  2.92k|  conn->remote_port = -1; /* unknown at this point */
 1714|       |#if defined(USE_RECV_BEFORE_SEND_WORKAROUND) && defined(DEBUGBUILD)
 1715|       |  conn->postponed[0].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1716|       |  conn->postponed[1].bindsock = CURL_SOCKET_BAD; /* no file descriptor */
 1717|       |#endif /* USE_RECV_BEFORE_SEND_WORKAROUND && DEBUGBUILD */
 1718|       |
 1719|       |  /* Default protocol-independent behavior doesn't support persistent
 1720|       |     connections, so we set this to force-close. Protocols that support
 1721|       |     this need to set this to FALSE in their "curl_do" functions. */
 1722|  2.92k|  connclose(conn, "Default to force-close");
 1723|       |
 1724|       |  /* Store creation time to help future close decision making */
 1725|  2.92k|  conn->created = Curl_now();
 1726|       |
 1727|       |  /* Store current time to give a baseline to keepalive connection times. */
 1728|  2.92k|  conn->keepalive = Curl_now();
 1729|       |
 1730|  2.92k|#ifndef CURL_DISABLE_PROXY
 1731|  2.92k|  conn->http_proxy.proxytype = data->set.proxytype;
 1732|  2.92k|  conn->socks_proxy.proxytype = CURLPROXY_SOCKS4;
 1733|       |
 1734|       |  /* note that these two proxy bits are now just on what looks to be
 1735|       |     requested, they may be altered down the road */
 1736|  2.92k|  conn->bits.proxy = (data->set.str[STRING_PROXY] &&
 1737|  2.92k|                      *data->set.str[STRING_PROXY]) ? TRUE : FALSE;
 1738|  2.92k|  conn->bits.httpproxy = (conn->bits.proxy &&
 1739|  2.92k|                          (conn->http_proxy.proxytype == CURLPROXY_HTTP ||
 1740|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0 ||
 1741|      0|                           conn->http_proxy.proxytype == CURLPROXY_HTTPS)) ?
 1742|  2.92k|                           TRUE : FALSE;
 1743|  2.92k|  conn->bits.socksproxy = (conn->bits.proxy &&
 1744|  2.92k|                           !conn->bits.httpproxy) ? TRUE : FALSE;
 1745|       |
 1746|  2.92k|  if(data->set.str[STRING_PRE_PROXY] && *data->set.str[STRING_PRE_PROXY]) {
 1747|      0|    conn->bits.proxy = TRUE;
 1748|      0|    conn->bits.socksproxy = TRUE;
 1749|      0|  }
 1750|       |
 1751|  2.92k|  conn->bits.proxy_user_passwd =
 1752|  2.92k|    (data->state.aptr.proxyuser) ? TRUE : FALSE;
 1753|  2.92k|  conn->bits.tunnel_proxy = data->set.tunnel_thru_httpproxy;
 1754|  2.92k|#endif /* CURL_DISABLE_PROXY */
 1755|       |
 1756|  2.92k|  conn->bits.user_passwd = (data->state.aptr.user) ? TRUE : FALSE;
 1757|  2.92k|#ifndef CURL_DISABLE_FTP
 1758|  2.92k|  conn->bits.ftp_use_epsv = data->set.ftp_use_epsv;
 1759|  2.92k|  conn->bits.ftp_use_eprt = data->set.ftp_use_eprt;
 1760|  2.92k|#endif
 1761|  2.92k|  conn->ssl_config.verifystatus = data->set.ssl.primary.verifystatus;
 1762|  2.92k|  conn->ssl_config.verifypeer = data->set.ssl.primary.verifypeer;
 1763|  2.92k|  conn->ssl_config.verifyhost = data->set.ssl.primary.verifyhost;
 1764|  2.92k|#ifndef CURL_DISABLE_PROXY
 1765|  2.92k|  conn->proxy_ssl_config.verifystatus =
 1766|  2.92k|    data->set.proxy_ssl.primary.verifystatus;
 1767|  2.92k|  conn->proxy_ssl_config.verifypeer = data->set.proxy_ssl.primary.verifypeer;
 1768|  2.92k|  conn->proxy_ssl_config.verifyhost = data->set.proxy_ssl.primary.verifyhost;
 1769|  2.92k|#endif
 1770|  2.92k|  conn->ip_version = data->set.ipver;
 1771|  2.92k|  conn->bits.connect_only = data->set.connect_only;
 1772|  2.92k|  conn->transport = TRNSPRT_TCP; /* most of them are TCP streams */
 1773|       |
 1774|  2.92k|#if !defined(CURL_DISABLE_HTTP) && defined(USE_NTLM) && \
 1775|  2.92k|    defined(NTLM_WB_ENABLED)
 1776|  2.92k|  conn->ntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1777|  2.92k|  conn->proxyntlm.ntlm_auth_hlpr_socket = CURL_SOCKET_BAD;
 1778|  2.92k|#endif
 1779|       |
 1780|       |  /* Initialize the easy handle list */
 1781|  2.92k|  Curl_llist_init(&conn->easyq, NULL);
 1782|       |
 1783|       |#ifdef HAVE_GSSAPI
 1784|       |  conn->data_prot = PROT_CLEAR;
 1785|       |#endif
 1786|       |
 1787|       |  /* Store the local bind parameters that will be used for this connection */
 1788|  2.92k|  if(data->set.str[STRING_DEVICE]) {
 1789|      0|    conn->localdev = strdup(data->set.str[STRING_DEVICE]);
 1790|      0|    if(!conn->localdev)
 1791|      0|      goto error;
 1792|      0|  }
 1793|  2.92k|  conn->localportrange = data->set.localportrange;
 1794|  2.92k|  conn->localport = data->set.localport;
 1795|       |
 1796|       |  /* the close socket stuff needs to be copied to the connection struct as
 1797|       |     it may live on without (this specific) Curl_easy */
 1798|  2.92k|  conn->fclosesocket = data->set.fclosesocket;
 1799|  2.92k|  conn->closesocket_client = data->set.closesocket_client;
 1800|  2.92k|  conn->lastused = Curl_now(); /* used now */
 1801|       |
 1802|  2.92k|  return conn;
 1803|      0|  error:
 1804|       |
 1805|      0|  Curl_llist_destroy(&conn->easyq, NULL);
 1806|      0|  free(conn->localdev);
 1807|      0|#ifdef USE_SSL
 1808|      0|  free(conn->ssl_extra);
 1809|      0|#endif
 1810|      0|  free(conn);
 1811|      0|  return NULL;
 1812|  2.92k|}
url.c:parseurlandfillconn:
 1932|  2.92k|{
 1933|  2.92k|  CURLcode result;
 1934|  2.92k|  CURLU *uh;
 1935|  2.92k|  CURLUcode uc;
 1936|  2.92k|  char *hostname;
 1937|  2.92k|  bool use_set_uh = (data->set.uh && !data->state.this_is_a_follow);
 1938|       |
 1939|  2.92k|  up_free(data); /* cleanup previous leftovers first */
 1940|       |
 1941|       |  /* parse the URL */
 1942|  2.92k|  if(use_set_uh) {
 1943|      0|    uh = data->state.uh = curl_url_dup(data->set.uh);
 1944|      0|  }
 1945|  2.92k|  else {
 1946|  2.92k|    uh = data->state.uh = curl_url();
 1947|  2.92k|  }
 1948|       |
 1949|  2.92k|  if(!uh)
 1950|      0|    return CURLE_OUT_OF_MEMORY;
 1951|       |
 1952|  2.92k|  if(data->set.str[STRING_DEFAULT_PROTOCOL] &&
 1953|  2.92k|     !Curl_is_absolute_url(data->state.url, NULL, MAX_SCHEME_LEN)) {
 1954|      0|    char *url = aprintf("%s://%s", data->set.str[STRING_DEFAULT_PROTOCOL],
 1955|      0|                        data->state.url);
 1956|      0|    if(!url)
 1957|      0|      return CURLE_OUT_OF_MEMORY;
 1958|      0|    if(data->state.url_alloc)
 1959|      0|      free(data->state.url);
 1960|      0|    data->state.url = url;
 1961|      0|    data->state.url_alloc = TRUE;
 1962|      0|  }
 1963|       |
 1964|  2.92k|  if(!use_set_uh) {
 1965|  2.92k|    char *newurl;
 1966|  2.92k|    uc = curl_url_set(uh, CURLUPART_URL, data->state.url,
 1967|  2.92k|                    CURLU_GUESS_SCHEME |
 1968|  2.92k|                    CURLU_NON_SUPPORT_SCHEME |
 1969|  2.92k|                    (data->set.disallow_username_in_url ?
 1970|  2.92k|                     CURLU_DISALLOW_USER : 0) |
 1971|  2.92k|                    (data->set.path_as_is ? CURLU_PATH_AS_IS : 0));
 1972|  2.92k|    if(uc) {
 1973|     53|      DEBUGF(infof(data, "curl_url_set rejected %s: %s", data->state.url,
 1974|     53|                   curl_url_strerror(uc)));
 1975|     53|      return Curl_uc_to_curlcode(uc);
 1976|     53|    }
 1977|       |
 1978|       |    /* after it was parsed, get the generated normalized version */
 1979|  2.87k|    uc = curl_url_get(uh, CURLUPART_URL, &newurl, 0);
 1980|  2.87k|    if(uc)
 1981|      0|      return Curl_uc_to_curlcode(uc);
 1982|  2.87k|    if(data->state.url_alloc)
 1983|    106|      free(data->state.url);
 1984|  2.87k|    data->state.url = newurl;
 1985|  2.87k|    data->state.url_alloc = TRUE;
 1986|  2.87k|  }
 1987|       |
 1988|  2.87k|  uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 1989|  2.87k|  if(uc)
 1990|      0|    return Curl_uc_to_curlcode(uc);
 1991|       |
 1992|  2.87k|  uc = curl_url_get(uh, CURLUPART_HOST, &data->state.up.hostname, 0);
 1993|  2.87k|  if(uc) {
 1994|     48|    if(!strcasecompare("file", data->state.up.scheme))
 1995|      0|      return CURLE_OUT_OF_MEMORY;
 1996|     48|  }
 1997|       |
 1998|  2.87k|#ifndef CURL_DISABLE_HSTS
 1999|  2.87k|  if(data->hsts && strcasecompare("http", data->state.up.scheme)) {
 2000|      0|    if(Curl_hsts(data->hsts, data->state.up.hostname, TRUE)) {
 2001|      0|      char *url;
 2002|      0|      Curl_safefree(data->state.up.scheme);
 2003|      0|      uc = curl_url_set(uh, CURLUPART_SCHEME, "https", 0);
 2004|      0|      if(uc)
 2005|      0|        return Curl_uc_to_curlcode(uc);
 2006|      0|      if(data->state.url_alloc)
 2007|      0|        Curl_safefree(data->state.url);
 2008|       |      /* after update, get the updated version */
 2009|      0|      uc = curl_url_get(uh, CURLUPART_URL, &url, 0);
 2010|      0|      if(uc)
 2011|      0|        return Curl_uc_to_curlcode(uc);
 2012|      0|      uc = curl_url_get(uh, CURLUPART_SCHEME, &data->state.up.scheme, 0);
 2013|      0|      if(uc) {
 2014|      0|        free(url);
 2015|      0|        return Curl_uc_to_curlcode(uc);
 2016|      0|      }
 2017|      0|      data->state.url = url;
 2018|      0|      data->state.url_alloc = TRUE;
 2019|      0|      infof(data, "Switched from HTTP to HTTPS due to HSTS => %s",
 2020|      0|            data->state.url);
 2021|      0|    }
 2022|      0|  }
 2023|  2.87k|#endif
 2024|       |
 2025|  2.87k|  result = findprotocol(data, conn, data->state.up.scheme);
 2026|  2.87k|  if(result)
 2027|     15|    return result;
 2028|       |
 2029|       |  /*
 2030|       |   * User name and password set with their own options override the
 2031|       |   * credentials possibly set in the URL.
 2032|       |   */
 2033|  2.85k|  if(!data->state.aptr.user) {
 2034|       |    /* we don't use the URL API's URL decoder option here since it rejects
 2035|       |       control codes and we want to allow them for some schemes in the user
 2036|       |       and password fields */
 2037|  2.63k|    uc = curl_url_get(uh, CURLUPART_USER, &data->state.up.user, 0);
 2038|  2.63k|    if(!uc) {
 2039|    223|      char *decoded;
 2040|    223|      result = Curl_urldecode(NULL, data->state.up.user, 0, &decoded, NULL,
 2041|    223|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2042|    131|                              REJECT_ZERO : REJECT_CTRL);
 2043|    223|      if(result)
 2044|      1|        return result;
 2045|    222|      conn->user = decoded;
 2046|    222|      conn->bits.user_passwd = TRUE;
 2047|    222|      result = Curl_setstropt(&data->state.aptr.user, decoded);
 2048|    222|      if(result)
 2049|      0|        return result;
 2050|    222|    }
 2051|  2.40k|    else if(uc != CURLUE_NO_USER)
 2052|      0|      return Curl_uc_to_curlcode(uc);
 2053|  2.63k|  }
 2054|       |
 2055|  2.85k|  if(!data->state.aptr.passwd) {
 2056|  2.79k|    uc = curl_url_get(uh, CURLUPART_PASSWORD, &data->state.up.password, 0);
 2057|  2.79k|    if(!uc) {
 2058|    111|      char *decoded;
 2059|    111|      result = Curl_urldecode(NULL, data->state.up.password, 0, &decoded, NULL,
 2060|    111|                              conn->handler->flags&PROTOPT_USERPWDCTRL ?
 2061|     66|                              REJECT_ZERO : REJECT_CTRL);
 2062|    111|      if(result)
 2063|      0|        return result;
 2064|    111|      conn->passwd = decoded;
 2065|    111|      conn->bits.user_passwd = TRUE;
 2066|    111|      result = Curl_setstropt(&data->state.aptr.passwd, decoded);
 2067|    111|      if(result)
 2068|      0|        return result;
 2069|    111|    }
 2070|  2.68k|    else if(uc != CURLUE_NO_PASSWORD)
 2071|      0|      return Curl_uc_to_curlcode(uc);
 2072|  2.79k|  }
 2073|       |
 2074|  2.85k|  uc = curl_url_get(uh, CURLUPART_OPTIONS, &data->state.up.options,
 2075|  2.85k|                    CURLU_URLDECODE);
 2076|  2.85k|  if(!uc) {
 2077|     64|    conn->options = strdup(data->state.up.options);
 2078|     64|    if(!conn->options)
 2079|      0|      return CURLE_OUT_OF_MEMORY;
 2080|     64|  }
 2081|  2.79k|  else if(uc != CURLUE_NO_OPTIONS)
 2082|      0|    return Curl_uc_to_curlcode(uc);
 2083|       |
 2084|  2.85k|  uc = curl_url_get(uh, CURLUPART_PATH, &data->state.up.path, 0);
 2085|  2.85k|  if(uc)
 2086|      0|    return Curl_uc_to_curlcode(uc);
 2087|       |
 2088|  2.85k|  uc = curl_url_get(uh, CURLUPART_PORT, &data->state.up.port,
 2089|  2.85k|                    CURLU_DEFAULT_PORT);
 2090|  2.85k|  if(uc) {
 2091|      0|    if(!strcasecompare("file", data->state.up.scheme))
 2092|      0|      return CURLE_OUT_OF_MEMORY;
 2093|      0|  }
 2094|  2.85k|  else {
 2095|  2.85k|    unsigned long port = strtoul(data->state.up.port, NULL, 10);
 2096|  2.85k|    conn->port = conn->remote_port =
 2097|  2.85k|      (data->set.use_port && data->state.allow_port) ?
 2098|  2.85k|      (int)data->set.use_port : curlx_ultous(port);
 2099|  2.85k|  }
 2100|       |
 2101|  2.85k|  (void)curl_url_get(uh, CURLUPART_QUERY, &data->state.up.query, 0);
 2102|       |
 2103|  2.85k|  hostname = data->state.up.hostname;
 2104|  2.85k|  if(hostname && hostname[0] == '[') {
 2105|       |    /* This looks like an IPv6 address literal. See if there is an address
 2106|       |       scope. */
 2107|      0|    size_t hlen;
 2108|      0|    conn->bits.ipv6_ip = TRUE;
 2109|       |    /* cut off the brackets! */
 2110|      0|    hostname++;
 2111|      0|    hlen = strlen(hostname);
 2112|      0|    hostname[hlen - 1] = 0;
 2113|       |
 2114|      0|    zonefrom_url(uh, data, conn);
 2115|      0|  }
 2116|       |
 2117|       |  /* make sure the connect struct gets its own copy of the host name */
 2118|  2.85k|  conn->host.rawalloc = strdup(hostname ? hostname : "");
 2119|  2.85k|  if(!conn->host.rawalloc)
 2120|      0|    return CURLE_OUT_OF_MEMORY;
 2121|  2.85k|  conn->host.name = conn->host.rawalloc;
 2122|       |
 2123|  2.85k|  if(data->set.scope_id)
 2124|       |    /* Override any scope that was set above.  */
 2125|      0|    conn->scope_id = data->set.scope_id;
 2126|       |
 2127|  2.85k|  return CURLE_OK;
 2128|  2.85k|}
url.c:findprotocol:
 1832|  2.87k|{
 1833|  2.87k|  const struct Curl_handler *p = Curl_builtin_scheme(protostr);
 1834|       |
 1835|  2.87k|  if(p && /* Protocol found in table. Check if allowed */
 1836|  2.87k|     (data->set.allowed_protocols & p->protocol)) {
 1837|       |
 1838|       |    /* it is allowed for "normal" request, now do an extra check if this is
 1839|       |       the result of a redirect */
 1840|  2.85k|    if(data->state.this_is_a_follow &&
 1841|  2.85k|       !(data->set.redir_protocols & p->protocol))
 1842|       |      /* nope, get out */
 1843|      0|      ;
 1844|  2.85k|    else {
 1845|       |      /* Perform setup complement if some. */
 1846|  2.85k|      conn->handler = conn->given = p;
 1847|       |
 1848|       |      /* 'port' and 'remote_port' are set in setup_connection_internals() */
 1849|  2.85k|      return CURLE_OK;
 1850|  2.85k|    }
 1851|  2.85k|  }
 1852|       |
 1853|       |  /* The protocol was not found in the table, but we don't have to assign it
 1854|       |     to anything since it is already assigned to a dummy-struct in the
 1855|       |     create_conn() function when the connectdata struct is allocated. */
 1856|     15|  failf(data, "Protocol \"%s\" not supported or disabled in " LIBCURL_NAME,
 1857|     15|        protostr);
 1858|       |
 1859|     15|  return CURLE_UNSUPPORTED_PROTOCOL;
 1860|  2.87k|}
url.c:create_conn_helper_init_proxy:
 2575|  2.85k|{
 2576|  2.85k|  char *proxy = NULL;
 2577|  2.85k|  char *socksproxy = NULL;
 2578|  2.85k|  char *no_proxy = NULL;
 2579|  2.85k|  CURLcode result = CURLE_OK;
 2580|       |
 2581|       |  /*************************************************************
 2582|       |   * Extract the user and password from the authentication string
 2583|       |   *************************************************************/
 2584|  2.85k|  if(conn->bits.proxy_user_passwd) {
 2585|      0|    result = parse_proxy_auth(data, conn);
 2586|      0|    if(result)
 2587|      0|      goto out;
 2588|      0|  }
 2589|       |
 2590|       |  /*************************************************************
 2591|       |   * Detect what (if any) proxy to use
 2592|       |   *************************************************************/
 2593|  2.85k|  if(data->set.str[STRING_PROXY]) {
 2594|      0|    proxy = strdup(data->set.str[STRING_PROXY]);
 2595|       |    /* if global proxy is set, this is it */
 2596|      0|    if(NULL == proxy) {
 2597|      0|      failf(data, "memory shortage");
 2598|      0|      result = CURLE_OUT_OF_MEMORY;
 2599|      0|      goto out;
 2600|      0|    }
 2601|      0|  }
 2602|       |
 2603|  2.85k|  if(data->set.str[STRING_PRE_PROXY]) {
 2604|      0|    socksproxy = strdup(data->set.str[STRING_PRE_PROXY]);
 2605|       |    /* if global socks proxy is set, this is it */
 2606|      0|    if(NULL == socksproxy) {
 2607|      0|      failf(data, "memory shortage");
 2608|      0|      result = CURLE_OUT_OF_MEMORY;
 2609|      0|      goto out;
 2610|      0|    }
 2611|      0|  }
 2612|       |
 2613|  2.85k|  if(!data->set.str[STRING_NOPROXY]) {
 2614|  2.85k|    const char *p = "no_proxy";
 2615|  2.85k|    no_proxy = curl_getenv(p);
 2616|  2.85k|    if(!no_proxy) {
 2617|  2.85k|      p = "NO_PROXY";
 2618|  2.85k|      no_proxy = curl_getenv(p);
 2619|  2.85k|    }
 2620|  2.85k|    if(no_proxy) {
 2621|      0|      infof(data, "Uses proxy env variable %s == '%s'", p, no_proxy);
 2622|      0|    }
 2623|  2.85k|  }
 2624|       |
 2625|  2.85k|  if(check_noproxy(conn->host.name, data->set.str[STRING_NOPROXY] ?
 2626|  2.85k|      data->set.str[STRING_NOPROXY] : no_proxy)) {
 2627|      0|    Curl_safefree(proxy);
 2628|      0|    Curl_safefree(socksproxy);
 2629|      0|  }
 2630|  2.85k|#ifndef CURL_DISABLE_HTTP
 2631|  2.85k|  else if(!proxy && !socksproxy)
 2632|       |    /* if the host is not in the noproxy list, detect proxy. */
 2633|  2.85k|    proxy = detect_proxy(data, conn);
 2634|  2.85k|#endif /* CURL_DISABLE_HTTP */
 2635|       |
 2636|  2.85k|  Curl_safefree(no_proxy);
 2637|       |
 2638|  2.85k|#ifdef USE_UNIX_SOCKETS
 2639|       |  /* For the time being do not mix proxy and unix domain sockets. See #1274 */
 2640|  2.85k|  if(proxy && conn->unix_domain_socket) {
 2641|      0|    free(proxy);
 2642|      0|    proxy = NULL;
 2643|      0|  }
 2644|  2.85k|#endif
 2645|       |
 2646|  2.85k|  if(proxy && (!*proxy || (conn->handler->flags & PROTOPT_NONETWORK))) {
 2647|      0|    free(proxy);  /* Don't bother with an empty proxy string or if the
 2648|       |                     protocol doesn't work with network */
 2649|      0|    proxy = NULL;
 2650|      0|  }
 2651|  2.85k|  if(socksproxy && (!*socksproxy ||
 2652|      0|                    (conn->handler->flags & PROTOPT_NONETWORK))) {
 2653|      0|    free(socksproxy);  /* Don't bother with an empty socks proxy string or if
 2654|       |                          the protocol doesn't work with network */
 2655|      0|    socksproxy = NULL;
 2656|      0|  }
 2657|       |
 2658|       |  /***********************************************************************
 2659|       |   * If this is supposed to use a proxy, we need to figure out the proxy host
 2660|       |   * name, proxy type and port number, so that we can re-use an existing
 2661|       |   * connection that may exist registered to the same proxy host.
 2662|       |   ***********************************************************************/
 2663|  2.85k|  if(proxy || socksproxy) {
 2664|      0|    if(proxy) {
 2665|      0|      result = parse_proxy(data, conn, proxy, conn->http_proxy.proxytype);
 2666|      0|      Curl_safefree(proxy); /* parse_proxy copies the proxy string */
 2667|      0|      if(result)
 2668|      0|        goto out;
 2669|      0|    }
 2670|       |
 2671|      0|    if(socksproxy) {
 2672|      0|      result = parse_proxy(data, conn, socksproxy,
 2673|      0|                           conn->socks_proxy.proxytype);
 2674|       |      /* parse_proxy copies the socks proxy string */
 2675|      0|      Curl_safefree(socksproxy);
 2676|      0|      if(result)
 2677|      0|        goto out;
 2678|      0|    }
 2679|       |
 2680|      0|    if(conn->http_proxy.host.rawalloc) {
 2681|       |#ifdef CURL_DISABLE_HTTP
 2682|       |      /* asking for a HTTP proxy is a bit funny when HTTP is disabled... */
 2683|       |      result = CURLE_UNSUPPORTED_PROTOCOL;
 2684|       |      goto out;
 2685|       |#else
 2686|       |      /* force this connection's protocol to become HTTP if compatible */
 2687|      0|      if(!(conn->handler->protocol & PROTO_FAMILY_HTTP)) {
 2688|      0|        if((conn->handler->flags & PROTOPT_PROXY_AS_HTTP) &&
 2689|      0|           !conn->bits.tunnel_proxy)
 2690|      0|          conn->handler = &Curl_handler_http;
 2691|      0|        else
 2692|       |          /* if not converting to HTTP over the proxy, enforce tunneling */
 2693|      0|          conn->bits.tunnel_proxy = TRUE;
 2694|      0|      }
 2695|      0|      conn->bits.httpproxy = TRUE;
 2696|      0|#endif
 2697|      0|    }
 2698|      0|    else {
 2699|      0|      conn->bits.httpproxy = FALSE; /* not a HTTP proxy */
 2700|      0|      conn->bits.tunnel_proxy = FALSE; /* no tunneling if not HTTP */
 2701|      0|    }
 2702|       |
 2703|      0|    if(conn->socks_proxy.host.rawalloc) {
 2704|      0|      if(!conn->http_proxy.host.rawalloc) {
 2705|       |        /* once a socks proxy */
 2706|      0|        if(!conn->socks_proxy.user) {
 2707|      0|          conn->socks_proxy.user = conn->http_proxy.user;
 2708|      0|          conn->http_proxy.user = NULL;
 2709|      0|          Curl_safefree(conn->socks_proxy.passwd);
 2710|      0|          conn->socks_proxy.passwd = conn->http_proxy.passwd;
 2711|      0|          conn->http_proxy.passwd = NULL;
 2712|      0|        }
 2713|      0|      }
 2714|      0|      conn->bits.socksproxy = TRUE;
 2715|      0|    }
 2716|      0|    else
 2717|      0|      conn->bits.socksproxy = FALSE; /* not a socks proxy */
 2718|      0|  }
 2719|  2.85k|  else {
 2720|  2.85k|    conn->bits.socksproxy = FALSE;
 2721|  2.85k|    conn->bits.httpproxy = FALSE;
 2722|  2.85k|  }
 2723|  2.85k|  conn->bits.proxy = conn->bits.httpproxy || conn->bits.socksproxy;
 2724|       |
 2725|  2.85k|  if(!conn->bits.proxy) {
 2726|       |    /* we aren't using the proxy after all... */
 2727|  2.85k|    conn->bits.proxy = FALSE;
 2728|  2.85k|    conn->bits.httpproxy = FALSE;
 2729|  2.85k|    conn->bits.socksproxy = FALSE;
 2730|  2.85k|    conn->bits.proxy_user_passwd = FALSE;
 2731|  2.85k|    conn->bits.tunnel_proxy = FALSE;
 2732|       |    /* CURLPROXY_HTTPS does not have its own flag in conn->bits, yet we need
 2733|       |       to signal that CURLPROXY_HTTPS is not used for this connection */
 2734|  2.85k|    conn->http_proxy.proxytype = CURLPROXY_HTTP;
 2735|  2.85k|  }
 2736|       |
 2737|  2.85k|out:
 2738|       |
 2739|  2.85k|  free(socksproxy);
 2740|  2.85k|  free(proxy);
 2741|  2.85k|  return result;
 2742|  2.85k|}
url.c:check_noproxy:
 2223|  2.85k|{
 2224|       |  /* no_proxy=domain1.dom,host.domain2.dom
 2225|       |   *   (a comma-separated list of hosts which should
 2226|       |   *   not be proxied, or an asterisk to override
 2227|       |   *   all proxy variables)
 2228|       |   */
 2229|  2.85k|  if(no_proxy && no_proxy[0]) {
 2230|      0|    size_t tok_start;
 2231|      0|    size_t tok_end;
 2232|      0|    const char *separator = ", ";
 2233|      0|    size_t no_proxy_len;
 2234|      0|    size_t namelen;
 2235|      0|    char *endptr;
 2236|      0|    if(strcasecompare("*", no_proxy)) {
 2237|      0|      return TRUE;
 2238|      0|    }
 2239|       |
 2240|       |    /* NO_PROXY was specified and it wasn't just an asterisk */
 2241|       |
 2242|      0|    no_proxy_len = strlen(no_proxy);
 2243|      0|    if(name[0] == '[') {
 2244|       |      /* IPv6 numerical address */
 2245|      0|      endptr = strchr(name, ']');
 2246|      0|      if(!endptr)
 2247|      0|        return FALSE;
 2248|      0|      name++;
 2249|      0|      namelen = endptr - name;
 2250|      0|    }
 2251|      0|    else
 2252|      0|      namelen = strlen(name);
 2253|       |
 2254|      0|    for(tok_start = 0; tok_start < no_proxy_len; tok_start = tok_end + 1) {
 2255|      0|      while(tok_start < no_proxy_len &&
 2256|      0|            strchr(separator, no_proxy[tok_start]) != NULL) {
 2257|       |        /* Look for the beginning of the token. */
 2258|      0|        ++tok_start;
 2259|      0|      }
 2260|       |
 2261|      0|      if(tok_start == no_proxy_len)
 2262|      0|        break; /* It was all trailing separator chars, no more tokens. */
 2263|       |
 2264|      0|      for(tok_end = tok_start; tok_end < no_proxy_len &&
 2265|      0|            strchr(separator, no_proxy[tok_end]) == NULL; ++tok_end)
 2266|       |        /* Look for the end of the token. */
 2267|      0|        ;
 2268|       |
 2269|       |      /* To match previous behavior, where it was necessary to specify
 2270|       |       * ".local.com" to prevent matching "notlocal.com", we will leave
 2271|       |       * the '.' off.
 2272|       |       */
 2273|      0|      if(no_proxy[tok_start] == '.')
 2274|      0|        ++tok_start;
 2275|       |
 2276|      0|      if((tok_end - tok_start) <= namelen) {
 2277|       |        /* Match the last part of the name to the domain we are checking. */
 2278|      0|        const char *checkn = name + namelen - (tok_end - tok_start);
 2279|      0|        if(strncasecompare(no_proxy + tok_start, checkn,
 2280|      0|                           tok_end - tok_start)) {
 2281|      0|          if((tok_end - tok_start) == namelen || *(checkn - 1) == '.') {
 2282|       |            /* We either have an exact match, or the previous character is a .
 2283|       |             * so it is within the same domain, so no proxy for this host.
 2284|       |             */
 2285|      0|            return TRUE;
 2286|      0|          }
 2287|      0|        }
 2288|      0|      } /* if((tok_end - tok_start) <= namelen) */
 2289|      0|    } /* for(tok_start = 0; tok_start < no_proxy_len;
 2290|       |         tok_start = tok_end + 1) */
 2291|      0|  } /* NO_PROXY was specified and it wasn't just an asterisk */
 2292|       |
 2293|  2.85k|  return FALSE;
 2294|  2.85k|}
url.c:detect_proxy:
 2304|  2.85k|{
 2305|  2.85k|  char *proxy = NULL;
 2306|       |
 2307|       |  /* If proxy was not specified, we check for default proxy environment
 2308|       |   * variables, to enable i.e Lynx compliance:
 2309|       |   *
 2310|       |   * http_proxy=http://some.server.dom:port/
 2311|       |   * https_proxy=http://some.server.dom:port/
 2312|       |   * ftp_proxy=http://some.server.dom:port/
 2313|       |   * no_proxy=domain1.dom,host.domain2.dom
 2314|       |   *   (a comma-separated list of hosts which should
 2315|       |   *   not be proxied, or an asterisk to override
 2316|       |   *   all proxy variables)
 2317|       |   * all_proxy=http://some.server.dom:port/
 2318|       |   *   (seems to exist for the CERN www lib. Probably
 2319|       |   *   the first to check for.)
 2320|       |   *
 2321|       |   * For compatibility, the all-uppercase versions of these variables are
 2322|       |   * checked if the lowercase versions don't exist.
 2323|       |   */
 2324|  2.85k|  char proxy_env[128];
 2325|  2.85k|  const char *protop = conn->handler->scheme;
 2326|  2.85k|  char *envp = proxy_env;
 2327|  2.85k|  char *prox;
 2328|       |#ifdef CURL_DISABLE_VERBOSE_STRINGS
 2329|       |  (void)data;
 2330|       |#endif
 2331|       |
 2332|       |  /* Now, build <protocol>_proxy and check for such a one to use */
 2333|  14.1k|  while(*protop)
 2334|  11.2k|    *envp++ = (char)tolower((int)*protop++);
 2335|       |
 2336|       |  /* append _proxy */
 2337|  2.85k|  strcpy(envp, "_proxy");
 2338|       |
 2339|       |  /* read the protocol proxy: */
 2340|  2.85k|  prox = curl_getenv(proxy_env);
 2341|       |
 2342|       |  /*
 2343|       |   * We don't try the uppercase version of HTTP_PROXY because of
 2344|       |   * security reasons:
 2345|       |   *
 2346|       |   * When curl is used in a webserver application
 2347|       |   * environment (cgi or php), this environment variable can
 2348|       |   * be controlled by the web server user by setting the
 2349|       |   * http header 'Proxy:' to some value.
 2350|       |   *
 2351|       |   * This can cause 'internal' http/ftp requests to be
 2352|       |   * arbitrarily redirected by any external attacker.
 2353|       |   */
 2354|  2.85k|  if(!prox && !strcasecompare("http_proxy", proxy_env)) {
 2355|       |    /* There was no lowercase variable, try the uppercase version: */
 2356|  1.72k|    Curl_strntoupper(proxy_env, proxy_env, sizeof(proxy_env));
 2357|  1.72k|    prox = curl_getenv(proxy_env);
 2358|  1.72k|  }
 2359|       |
 2360|  2.85k|  envp = proxy_env;
 2361|  2.85k|  if(prox) {
 2362|      0|    proxy = prox; /* use this */
 2363|      0|  }
 2364|  2.85k|  else {
 2365|  2.85k|    envp = (char *)"all_proxy";
 2366|  2.85k|    proxy = curl_getenv(envp); /* default proxy to use */
 2367|  2.85k|    if(!proxy) {
 2368|  2.85k|      envp = (char *)"ALL_PROXY";
 2369|  2.85k|      proxy = curl_getenv(envp);
 2370|  2.85k|    }
 2371|  2.85k|  }
 2372|  2.85k|  if(proxy)
 2373|      0|    infof(data, "Uses proxy env variable %s == '%s'", envp, proxy);
 2374|       |
 2375|  2.85k|  return proxy;
 2376|  2.85k|}
url.c:parse_remote_port:
 2888|  2.85k|{
 2889|       |
 2890|  2.85k|  if(data->set.use_port && data->state.allow_port) {
 2891|       |    /* if set, we use this instead of the port possibly given in the URL */
 2892|      0|    char portbuf[16];
 2893|      0|    CURLUcode uc;
 2894|      0|    conn->remote_port = (unsigned short)data->set.use_port;
 2895|      0|    msnprintf(portbuf, sizeof(portbuf), "%d", conn->remote_port);
 2896|      0|    uc = curl_url_set(data->state.uh, CURLUPART_PORT, portbuf, 0);
 2897|      0|    if(uc)
 2898|      0|      return CURLE_OUT_OF_MEMORY;
 2899|      0|  }
 2900|       |
 2901|  2.85k|  return CURLE_OK;
 2902|  2.85k|}
url.c:override_login:
 2910|  2.85k|{
 2911|  2.85k|  CURLUcode uc;
 2912|  2.85k|  char **userp = &conn->user;
 2913|  2.85k|  char **passwdp = &conn->passwd;
 2914|  2.85k|  char **optionsp = &conn->options;
 2915|       |
 2916|  2.85k|#ifndef CURL_DISABLE_NETRC
 2917|  2.85k|  if(data->set.use_netrc == CURL_NETRC_REQUIRED && conn->bits.user_passwd) {
 2918|      0|    Curl_safefree(*userp);
 2919|      0|    Curl_safefree(*passwdp);
 2920|      0|    conn->bits.user_passwd = FALSE; /* disable user+password */
 2921|      0|  }
 2922|  2.85k|#endif
 2923|       |
 2924|  2.85k|  if(data->set.str[STRING_OPTIONS]) {
 2925|      0|    free(*optionsp);
 2926|      0|    *optionsp = strdup(data->set.str[STRING_OPTIONS]);
 2927|      0|    if(!*optionsp)
 2928|      0|      return CURLE_OUT_OF_MEMORY;
 2929|      0|  }
 2930|       |
 2931|  2.85k|#ifndef CURL_DISABLE_NETRC
 2932|  2.85k|  conn->bits.netrc = FALSE;
 2933|  2.85k|  if(data->set.use_netrc && !data->set.str[STRING_USERNAME]) {
 2934|      0|    bool netrc_user_changed = FALSE;
 2935|      0|    bool netrc_passwd_changed = FALSE;
 2936|      0|    int ret;
 2937|       |
 2938|      0|    ret = Curl_parsenetrc(conn->host.name,
 2939|      0|                          userp, passwdp,
 2940|      0|                          &netrc_user_changed, &netrc_passwd_changed,
 2941|      0|                          data->set.str[STRING_NETRC_FILE]);
 2942|      0|    if(ret > 0) {
 2943|      0|      infof(data, "Couldn't find host %s in the %s file; using defaults",
 2944|      0|            conn->host.name, data->set.str[STRING_NETRC_FILE]);
 2945|      0|    }
 2946|      0|    else if(ret < 0) {
 2947|      0|      return CURLE_OUT_OF_MEMORY;
 2948|      0|    }
 2949|      0|    else {
 2950|       |      /* set bits.netrc TRUE to remember that we got the name from a .netrc
 2951|       |         file, so that it is safe to use even if we followed a Location: to a
 2952|       |         different host or similar. */
 2953|      0|      conn->bits.netrc = TRUE;
 2954|      0|      conn->bits.user_passwd = TRUE; /* enable user+password */
 2955|      0|    }
 2956|      0|  }
 2957|  2.85k|#endif
 2958|       |
 2959|       |  /* for updated strings, we update them in the URL */
 2960|  2.85k|  if(*userp) {
 2961|    222|    CURLcode result = Curl_setstropt(&data->state.aptr.user, *userp);
 2962|    222|    if(result)
 2963|      0|      return result;
 2964|    222|  }
 2965|  2.85k|  if(data->state.aptr.user) {
 2966|    446|    uc = curl_url_set(data->state.uh, CURLUPART_USER, data->state.aptr.user,
 2967|    446|                      CURLU_URLENCODE);
 2968|    446|    if(uc)
 2969|      0|      return Curl_uc_to_curlcode(uc);
 2970|    446|    if(!*userp) {
 2971|    224|      *userp = strdup(data->state.aptr.user);
 2972|    224|      if(!*userp)
 2973|      0|        return CURLE_OUT_OF_MEMORY;
 2974|    224|    }
 2975|    446|  }
 2976|       |
 2977|  2.85k|  if(*passwdp) {
 2978|    111|    CURLcode result = Curl_setstropt(&data->state.aptr.passwd, *passwdp);
 2979|    111|    if(result)
 2980|      0|      return result;
 2981|    111|  }
 2982|  2.85k|  if(data->state.aptr.passwd) {
 2983|    171|    uc = curl_url_set(data->state.uh, CURLUPART_PASSWORD,
 2984|    171|                      data->state.aptr.passwd, CURLU_URLENCODE);
 2985|    171|    if(uc)
 2986|      0|      return Curl_uc_to_curlcode(uc);
 2987|    171|    if(!*passwdp) {
 2988|     60|      *passwdp = strdup(data->state.aptr.passwd);
 2989|     60|      if(!*passwdp)
 2990|      0|        return CURLE_OUT_OF_MEMORY;
 2991|     60|    }
 2992|    171|  }
 2993|       |
 2994|  2.85k|  return CURLE_OK;
 2995|  2.85k|}
url.c:set_login:
 3001|  2.85k|{
 3002|  2.85k|  CURLcode result = CURLE_OK;
 3003|  2.85k|  const char *setuser = CURL_DEFAULT_USER;
 3004|  2.85k|  const char *setpasswd = CURL_DEFAULT_PASSWORD;
 3005|       |
 3006|       |  /* If our protocol needs a password and we have none, use the defaults */
 3007|  2.85k|  if((conn->handler->flags & PROTOPT_NEEDSPWD) && !conn->bits.user_passwd)
 3008|    164|    ;
 3009|  2.69k|  else {
 3010|  2.69k|    setuser = "";
 3011|  2.69k|    setpasswd = "";
 3012|  2.69k|  }
 3013|       |  /* Store the default user */
 3014|  2.85k|  if(!conn->user) {
 3015|  2.40k|    conn->user = strdup(setuser);
 3016|  2.40k|    if(!conn->user)
 3017|      0|      return CURLE_OUT_OF_MEMORY;
 3018|  2.40k|  }
 3019|       |
 3020|       |  /* Store the default password */
 3021|  2.85k|  if(!conn->passwd) {
 3022|  2.68k|    conn->passwd = strdup(setpasswd);
 3023|  2.68k|    if(!conn->passwd)
 3024|      0|      result = CURLE_OUT_OF_MEMORY;
 3025|  2.68k|  }
 3026|       |
 3027|  2.85k|  return result;
 3028|  2.85k|}
url.c:parse_connect_to_slist:
 3211|  2.85k|{
 3212|  2.85k|  CURLcode result = CURLE_OK;
 3213|  2.85k|  char *host = NULL;
 3214|  2.85k|  int port = -1;
 3215|       |
 3216|  5.71k|  while(conn_to_host && !host && port == -1) {
 3217|  2.85k|    result = parse_connect_to_string(data, conn, conn_to_host->data,
 3218|  2.85k|                                     &host, &port);
 3219|  2.85k|    if(result)
 3220|      0|      return result;
 3221|       |
 3222|  2.85k|    if(host && *host) {
 3223|  2.85k|      conn->conn_to_host.rawalloc = host;
 3224|  2.85k|      conn->conn_to_host.name = host;
 3225|  2.85k|      conn->bits.conn_to_host = TRUE;
 3226|       |
 3227|  2.85k|      infof(data, "Connecting to hostname: %s", host);
 3228|  2.85k|    }
 3229|      0|    else {
 3230|       |      /* no "connect to host" */
 3231|      0|      conn->bits.conn_to_host = FALSE;
 3232|      0|      Curl_safefree(host);
 3233|      0|    }
 3234|       |
 3235|  2.85k|    if(port >= 0) {
 3236|      0|      conn->conn_to_port = port;
 3237|      0|      conn->bits.conn_to_port = TRUE;
 3238|      0|      infof(data, "Connecting to port: %d", port);
 3239|      0|    }
 3240|  2.85k|    else {
 3241|       |      /* no "connect to port" */
 3242|  2.85k|      conn->bits.conn_to_port = FALSE;
 3243|  2.85k|      port = -1;
 3244|  2.85k|    }
 3245|       |
 3246|  2.85k|    conn_to_host = conn_to_host->next;
 3247|  2.85k|  }
 3248|       |
 3249|  2.85k|#ifndef CURL_DISABLE_ALTSVC
 3250|  2.85k|  if(data->asi && !host && (port == -1) &&
 3251|  2.85k|     ((conn->handler->protocol == CURLPROTO_HTTPS) ||
 3252|      0|#ifdef CURLDEBUG
 3253|       |      /* allow debug builds to circumvent the HTTPS restriction */
 3254|      0|      getenv("CURL_ALTSVC_HTTP")
 3255|       |#else
 3256|       |      0
 3257|       |#endif
 3258|      0|       )) {
 3259|       |    /* no connect_to match, try alt-svc! */
 3260|      0|    enum alpnid srcalpnid;
 3261|      0|    bool hit;
 3262|      0|    struct altsvc *as;
 3263|      0|    const int allowed_versions = ( ALPN_h1
 3264|      0|#ifdef USE_NGHTTP2
 3265|      0|      | ALPN_h2
 3266|      0|#endif
 3267|       |#ifdef ENABLE_QUIC
 3268|       |      | ALPN_h3
 3269|       |#endif
 3270|      0|      ) & data->asi->flags;
 3271|       |
 3272|      0|    host = conn->host.rawalloc;
 3273|      0|#ifdef USE_NGHTTP2
 3274|       |    /* with h2 support, check that first */
 3275|      0|    srcalpnid = ALPN_h2;
 3276|      0|    hit = Curl_altsvc_lookup(data->asi,
 3277|      0|                             srcalpnid, host, conn->remote_port, /* from */
 3278|      0|                             &as /* to */,
 3279|      0|                             allowed_versions);
 3280|      0|    if(!hit)
 3281|      0|#endif
 3282|      0|    {
 3283|      0|      srcalpnid = ALPN_h1;
 3284|      0|      hit = Curl_altsvc_lookup(data->asi,
 3285|      0|                               srcalpnid, host, conn->remote_port, /* from */
 3286|      0|                               &as /* to */,
 3287|      0|                               allowed_versions);
 3288|      0|    }
 3289|      0|    if(hit) {
 3290|      0|      char *hostd = strdup((char *)as->dst.host);
 3291|      0|      if(!hostd)
 3292|      0|        return CURLE_OUT_OF_MEMORY;
 3293|      0|      conn->conn_to_host.rawalloc = hostd;
 3294|      0|      conn->conn_to_host.name = hostd;
 3295|      0|      conn->bits.conn_to_host = TRUE;
 3296|      0|      conn->conn_to_port = as->dst.port;
 3297|      0|      conn->bits.conn_to_port = TRUE;
 3298|      0|      conn->bits.altused = TRUE;
 3299|      0|      infof(data, "Alt-svc connecting from [%s]%s:%d to [%s]%s:%d",
 3300|      0|            Curl_alpnid2str(srcalpnid), host, conn->remote_port,
 3301|      0|            Curl_alpnid2str(as->dst.alpnid), hostd, as->dst.port);
 3302|      0|      if(srcalpnid != as->dst.alpnid) {
 3303|       |        /* protocol version switch */
 3304|      0|        switch(as->dst.alpnid) {
 3305|      0|        case ALPN_h1:
 3306|      0|          conn->httpversion = 11;
 3307|      0|          break;
 3308|      0|        case ALPN_h2:
 3309|      0|          conn->httpversion = 20;
 3310|      0|          break;
 3311|      0|        case ALPN_h3:
 3312|      0|          conn->transport = TRNSPRT_QUIC;
 3313|      0|          conn->httpversion = 30;
 3314|      0|          break;
 3315|      0|        default: /* shouldn't be possible */
 3316|      0|          break;
 3317|      0|        }
 3318|      0|      }
 3319|      0|    }
 3320|      0|  }
 3321|  2.85k|#endif
 3322|       |
 3323|  2.85k|  return result;
 3324|  2.85k|}
url.c:parse_connect_to_string:
 3143|  2.85k|{
 3144|  2.85k|  CURLcode result = CURLE_OK;
 3145|  2.85k|  const char *ptr = conn_to_host;
 3146|  2.85k|  int host_match = FALSE;
 3147|  2.85k|  int port_match = FALSE;
 3148|       |
 3149|  2.85k|  *host_result = NULL;
 3150|  2.85k|  *port_result = -1;
 3151|       |
 3152|  2.85k|  if(*ptr == ':') {
 3153|       |    /* an empty hostname always matches */
 3154|  2.85k|    host_match = TRUE;
 3155|  2.85k|    ptr++;
 3156|  2.85k|  }
 3157|      0|  else {
 3158|       |    /* check whether the URL's hostname matches */
 3159|      0|    size_t hostname_to_match_len;
 3160|      0|    char *hostname_to_match = aprintf("%s%s%s",
 3161|      0|                                      conn->bits.ipv6_ip ? "[" : "",
 3162|      0|                                      conn->host.name,
 3163|      0|                                      conn->bits.ipv6_ip ? "]" : "");
 3164|      0|    if(!hostname_to_match)
 3165|      0|      return CURLE_OUT_OF_MEMORY;
 3166|      0|    hostname_to_match_len = strlen(hostname_to_match);
 3167|      0|    host_match = strncasecompare(ptr, hostname_to_match,
 3168|      0|                                 hostname_to_match_len);
 3169|      0|    free(hostname_to_match);
 3170|      0|    ptr += hostname_to_match_len;
 3171|       |
 3172|      0|    host_match = host_match && *ptr == ':';
 3173|      0|    ptr++;
 3174|      0|  }
 3175|       |
 3176|  2.85k|  if(host_match) {
 3177|  2.85k|    if(*ptr == ':') {
 3178|       |      /* an empty port always matches */
 3179|  2.85k|      port_match = TRUE;
 3180|  2.85k|      ptr++;
 3181|  2.85k|    }
 3182|      0|    else {
 3183|       |      /* check whether the URL's port matches */
 3184|      0|      char *ptr_next = strchr(ptr, ':');
 3185|      0|      if(ptr_next) {
 3186|      0|        char *endp = NULL;
 3187|      0|        long port_to_match = strtol(ptr, &endp, 10);
 3188|      0|        if((endp == ptr_next) && (port_to_match == conn->remote_port)) {
 3189|      0|          port_match = TRUE;
 3190|      0|          ptr = ptr_next + 1;
 3191|      0|        }
 3192|      0|      }
 3193|      0|    }
 3194|  2.85k|  }
 3195|       |
 3196|  2.85k|  if(host_match && port_match) {
 3197|       |    /* parse the hostname and port to connect to */
 3198|  2.85k|    result = parse_connect_to_host_port(data, ptr, host_result, port_result);
 3199|  2.85k|  }
 3200|       |
 3201|  2.85k|  return result;
 3202|  2.85k|}
url.c:parse_connect_to_host_port:
 3039|  2.85k|{
 3040|  2.85k|  char *host_dup;
 3041|  2.85k|  char *hostptr;
 3042|  2.85k|  char *host_portno;
 3043|  2.85k|  char *portptr;
 3044|  2.85k|  int port = -1;
 3045|  2.85k|  CURLcode result = CURLE_OK;
 3046|       |
 3047|       |#if defined(CURL_DISABLE_VERBOSE_STRINGS)
 3048|       |  (void) data;
 3049|       |#endif
 3050|       |
 3051|  2.85k|  *hostname_result = NULL;
 3052|  2.85k|  *port_result = -1;
 3053|       |
 3054|  2.85k|  if(!host || !*host)
 3055|      0|    return CURLE_OK;
 3056|       |
 3057|  2.85k|  host_dup = strdup(host);
 3058|  2.85k|  if(!host_dup)
 3059|      0|    return CURLE_OUT_OF_MEMORY;
 3060|       |
 3061|  2.85k|  hostptr = host_dup;
 3062|       |
 3063|       |  /* start scanning for port number at this point */
 3064|  2.85k|  portptr = hostptr;
 3065|       |
 3066|       |  /* detect and extract RFC6874-style IPv6-addresses */
 3067|  2.85k|  if(*hostptr == '[') {
 3068|      0|#ifdef ENABLE_IPV6
 3069|      0|    char *ptr = ++hostptr; /* advance beyond the initial bracket */
 3070|      0|    while(*ptr && (ISXDIGIT(*ptr) || (*ptr == ':') || (*ptr == '.')))
 3071|      0|      ptr++;
 3072|      0|    if(*ptr == '%') {
 3073|       |      /* There might be a zone identifier */
 3074|      0|      if(strncmp("%25", ptr, 3))
 3075|      0|        infof(data, "Please URL encode %% as %%25, see RFC 6874.");
 3076|      0|      ptr++;
 3077|       |      /* Allow unreserved characters as defined in RFC 3986 */
 3078|      0|      while(*ptr && (ISALPHA(*ptr) || ISXDIGIT(*ptr) || (*ptr == '-') ||
 3079|      0|                     (*ptr == '.') || (*ptr == '_') || (*ptr == '~')))
 3080|      0|        ptr++;
 3081|      0|    }
 3082|      0|    if(*ptr == ']')
 3083|       |      /* yeps, it ended nicely with a bracket as well */
 3084|      0|      *ptr++ = '\0';
 3085|      0|    else
 3086|      0|      infof(data, "Invalid IPv6 address format");
 3087|      0|    portptr = ptr;
 3088|       |    /* Note that if this didn't end with a bracket, we still advanced the
 3089|       |     * hostptr first, but I can't see anything wrong with that as no host
 3090|       |     * name nor a numeric can legally start with a bracket.
 3091|       |     */
 3092|       |#else
 3093|       |    failf(data, "Use of IPv6 in *_CONNECT_TO without IPv6 support built-in!");
 3094|       |    result = CURLE_NOT_BUILT_IN;
 3095|       |    goto error;
 3096|       |#endif
 3097|      0|  }
 3098|       |
 3099|       |  /* Get port number off server.com:1080 */
 3100|  2.85k|  host_portno = strchr(portptr, ':');
 3101|  2.85k|  if(host_portno) {
 3102|  2.85k|    char *endp = NULL;
 3103|  2.85k|    *host_portno = '\0'; /* cut off number from host name */
 3104|  2.85k|    host_portno++;
 3105|  2.85k|    if(*host_portno) {
 3106|      0|      long portparse = strtol(host_portno, &endp, 10);
 3107|      0|      if((endp && *endp) || (portparse < 0) || (portparse > 65535)) {
 3108|      0|        failf(data, "No valid port number in connect to host string (%s)",
 3109|      0|              host_portno);
 3110|      0|        result = CURLE_SETOPT_OPTION_SYNTAX;
 3111|      0|        goto error;
 3112|      0|      }
 3113|      0|      else
 3114|      0|        port = (int)portparse; /* we know it will fit */
 3115|      0|    }
 3116|  2.85k|  }
 3117|       |
 3118|       |  /* now, clone the cleaned host name */
 3119|  2.85k|  if(hostptr) {
 3120|  2.85k|    *hostname_result = strdup(hostptr);
 3121|  2.85k|    if(!*hostname_result) {
 3122|      0|      result = CURLE_OUT_OF_MEMORY;
 3123|      0|      goto error;
 3124|      0|    }
 3125|  2.85k|  }
 3126|       |
 3127|  2.85k|  *port_result = port;
 3128|       |
 3129|  2.85k|  error:
 3130|  2.85k|  free(host_dup);
 3131|  2.85k|  return result;
 3132|  2.85k|}
url.c:setup_connection_internals:
 2174|  2.85k|{
 2175|  2.85k|  const struct Curl_handler *p;
 2176|  2.85k|  CURLcode result;
 2177|       |
 2178|       |  /* Perform setup complement if some. */
 2179|  2.85k|  p = conn->handler;
 2180|       |
 2181|  2.85k|  if(p->setup_connection) {
 2182|  2.80k|    result = (*p->setup_connection)(data, conn);
 2183|       |
 2184|  2.80k|    if(result)
 2185|      0|      return result;
 2186|       |
 2187|  2.80k|    p = conn->handler;              /* May have changed. */
 2188|  2.80k|  }
 2189|       |
 2190|  2.85k|  if(conn->port < 0)
 2191|       |    /* we check for -1 here since if proxy was detected already, this
 2192|       |       was very likely already set to the proxy port */
 2193|      0|    conn->port = p->defport;
 2194|       |
 2195|  2.85k|  return CURLE_OK;
 2196|  2.85k|}
url.c:setup_range:
 2136|  2.84k|{
 2137|  2.84k|  struct UrlState *s = &data->state;
 2138|  2.84k|  s->resume_from = data->set.set_resume_from;
 2139|  2.84k|  if(s->resume_from || data->set.str[STRING_SET_RANGE]) {
 2140|     49|    if(s->rangestringalloc)
 2141|      1|      free(s->range);
 2142|       |
 2143|     49|    if(s->resume_from)
 2144|      0|      s->range = aprintf("%" CURL_FORMAT_CURL_OFF_T "-", s->resume_from);
 2145|     49|    else
 2146|     49|      s->range = strdup(data->set.str[STRING_SET_RANGE]);
 2147|       |
 2148|     49|    s->rangestringalloc = (s->range) ? TRUE : FALSE;
 2149|       |
 2150|     49|    if(!s->range)
 2151|      0|      return CURLE_OUT_OF_MEMORY;
 2152|       |
 2153|       |    /* tell ourselves to fetch this range */
 2154|     49|    s->use_range = TRUE;        /* enable range download */
 2155|     49|  }
 2156|  2.80k|  else
 2157|  2.80k|    s->use_range = FALSE; /* disable range download */
 2158|       |
 2159|  2.84k|  return CURLE_OK;
 2160|  2.84k|}
url.c:prune_dead_connections:
 1077|  2.80k|{
 1078|  2.80k|  struct curltime now = Curl_now();
 1079|  2.80k|  timediff_t elapsed;
 1080|       |
 1081|  2.80k|  DEBUGASSERT(!data->conn); /* no connection */
 1082|  2.80k|  CONNCACHE_LOCK(data);
 1083|  2.80k|  elapsed =
 1084|  2.80k|    Curl_timediff(now, data->state.conn_cache->last_cleanup);
 1085|  2.80k|  CONNCACHE_UNLOCK(data);
 1086|       |
 1087|  2.80k|  if(elapsed >= 1000L) {
 1088|  2.69k|    struct prunedead prune;
 1089|  2.69k|    prune.data = data;
 1090|  2.69k|    prune.extracted = NULL;
 1091|  2.69k|    while(Curl_conncache_foreach(data, data->state.conn_cache, &prune,
 1092|  2.69k|                                 call_extract_if_dead)) {
 1093|       |      /* unlocked */
 1094|       |
 1095|       |      /* remove connection from cache */
 1096|      0|      Curl_conncache_remove_conn(data, prune.extracted, TRUE);
 1097|       |
 1098|       |      /* disconnect it */
 1099|      0|      (void)Curl_disconnect(data, prune.extracted, TRUE);
 1100|      0|    }
 1101|  2.69k|    CONNCACHE_LOCK(data);
 1102|  2.69k|    data->state.conn_cache->last_cleanup = now;
 1103|  2.69k|    CONNCACHE_UNLOCK(data);
 1104|  2.69k|  }
 1105|  2.80k|}
url.c:extract_if_dead:
 1010|     65|{
 1011|     65|  if(!CONN_INUSE(conn)) {
 1012|       |    /* The check for a dead socket makes sense only if the connection isn't in
 1013|       |       use */
 1014|     65|    bool dead;
 1015|     65|    struct curltime now = Curl_now();
 1016|     65|    if(conn_maxage(data, conn, now)) {
 1017|       |      /* avoid check if already too old */
 1018|      0|      dead = TRUE;
 1019|      0|    }
 1020|     65|    else if(conn->handler->connection_check) {
 1021|       |      /* The protocol has a special method for checking the state of the
 1022|       |         connection. Use it to check if the connection is dead. */
 1023|      0|      unsigned int state;
 1024|       |
 1025|       |      /* briefly attach the connection to this transfer for the purpose of
 1026|       |         checking it */
 1027|      0|      Curl_attach_connnection(data, conn);
 1028|       |
 1029|      0|      state = conn->handler->connection_check(data, conn, CONNCHECK_ISDEAD);
 1030|      0|      dead = (state & CONNRESULT_DEAD);
 1031|       |      /* detach the connection again */
 1032|      0|      Curl_detach_connnection(data);
 1033|       |
 1034|      0|    }
 1035|     65|    else {
 1036|       |      /* Use the general method for determining the death of a connection */
 1037|     65|      dead = SocketIsDead(conn->sock[FIRSTSOCKET]);
 1038|     65|    }
 1039|       |
 1040|     65|    if(dead) {
 1041|     54|      infof(data, "Connection %ld seems to be dead!", conn->connection_id);
 1042|     54|      Curl_conncache_remove_conn(data, conn, FALSE);
 1043|     54|      return TRUE;
 1044|     54|    }
 1045|     65|  }
 1046|     11|  return FALSE;
 1047|     65|}
url.c:conn_maxage:
  973|     65|{
  974|     65|  timediff_t idletime, lifetime;
  975|       |
  976|     65|  idletime = Curl_timediff(now, conn->lastused);
  977|     65|  idletime /= 1000; /* integer seconds is fine */
  978|       |
  979|     65|  if(idletime > data->set.maxage_conn) {
  980|      0|    infof(data, "Too old connection (%ld seconds idle), disconnect it",
  981|      0|          idletime);
  982|      0|    return TRUE;
  983|      0|  }
  984|       |
  985|     65|  lifetime = Curl_timediff(now, conn->created);
  986|     65|  lifetime /= 1000; /* integer seconds is fine */
  987|       |
  988|     65|  if(data->set.maxlifetime_conn && lifetime > data->set.maxlifetime_conn) {
  989|      0|    infof(data,
  990|      0|          "Too old connection (%ld seconds since creation), disconnect it",
  991|      0|          lifetime);
  992|      0|    return TRUE;
  993|      0|  }
  994|       |
  995|       |
  996|     65|  return FALSE;
  997|     65|}
url.c:SocketIsDead:
  886|     65|{
  887|     65|  int sval;
  888|     65|  bool ret_val = TRUE;
  889|       |
  890|     65|  sval = SOCKET_READABLE(sock, 0);
  891|     65|  if(sval == 0)
  892|       |    /* timeout */
  893|     11|    ret_val = FALSE;
  894|       |
  895|     65|  return ret_val;
  896|     65|}
url.c:ConnectionExists:
 1124|  2.80k|{
 1125|  2.80k|  struct connectdata *check;
 1126|  2.80k|  struct connectdata *chosen = 0;
 1127|  2.80k|  bool foundPendingCandidate = FALSE;
 1128|  2.80k|  bool canmultiplex = IsMultiplexingPossible(data, needle);
 1129|  2.80k|  struct connectbundle *bundle;
 1130|  2.80k|  const char *hostbundle;
 1131|       |
 1132|  2.80k|#ifdef USE_NTLM
 1133|  2.80k|  bool wantNTLMhttp = ((data->state.authhost.want &
 1134|  2.80k|                        (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1135|  2.80k|                       (needle->handler->protocol & PROTO_FAMILY_HTTP));
 1136|  2.80k|#ifndef CURL_DISABLE_PROXY
 1137|  2.80k|  bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&
 1138|  2.80k|                            ((data->state.authproxy.want &
 1139|      0|                              (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&
 1140|      0|                             (needle->handler->protocol & PROTO_FAMILY_HTTP)));
 1141|       |#else
 1142|       |  bool wantProxyNTLMhttp = FALSE;
 1143|       |#endif
 1144|  2.80k|#endif
 1145|       |
 1146|  2.80k|  *force_reuse = FALSE;
 1147|  2.80k|  *waitpipe = FALSE;
 1148|       |
 1149|       |  /* Look up the bundle with all the connections to this particular host.
 1150|       |     Locks the connection cache, beware of early returns! */
 1151|  2.80k|  bundle = Curl_conncache_find_bundle(data, needle, data->state.conn_cache,
 1152|  2.80k|                                      &hostbundle);
 1153|  2.80k|  if(bundle) {
 1154|       |    /* Max pipe length is zero (unlimited) for multiplexed connections */
 1155|     65|    struct Curl_llist_element *curr;
 1156|       |
 1157|     65|    infof(data, "Found bundle for host %s: %p [%s]",
 1158|     65|          hostbundle, (void *)bundle, (bundle->multiuse == BUNDLE_MULTIPLEX ?
 1159|     58|                                       "can multiplex" : "serially"));
 1160|       |
 1161|       |    /* We can't multiplex if we don't know anything about the server */
 1162|     65|    if(canmultiplex) {
 1163|     62|      if(bundle->multiuse == BUNDLE_UNKNOWN) {
 1164|      0|        if(data->set.pipewait) {
 1165|      0|          infof(data, "Server doesn't support multiplex yet, wait");
 1166|      0|          *waitpipe = TRUE;
 1167|      0|          CONNCACHE_UNLOCK(data);
 1168|      0|          return FALSE; /* no re-use */
 1169|      0|        }
 1170|       |
 1171|      0|        infof(data, "Server doesn't support multiplex (yet)");
 1172|      0|        canmultiplex = FALSE;
 1173|      0|      }
 1174|     62|      if((bundle->multiuse == BUNDLE_MULTIPLEX) &&
 1175|     62|         !Curl_multiplex_wanted(data->multi)) {
 1176|      0|        infof(data, "Could multiplex, but not asked to!");
 1177|      0|        canmultiplex = FALSE;
 1178|      0|      }
 1179|     62|      if(bundle->multiuse == BUNDLE_NO_MULTIUSE) {
 1180|     55|        infof(data, "Can not multiplex, even if we wanted to!");
 1181|     55|        canmultiplex = FALSE;
 1182|     55|      }
 1183|     62|    }
 1184|       |
 1185|     65|    curr = bundle->conn_list.head;
 1186|    130|    while(curr) {
 1187|     65|      bool match = FALSE;
 1188|     65|      size_t multiplexed = 0;
 1189|       |
 1190|       |      /*
 1191|       |       * Note that if we use a HTTP proxy in normal mode (no tunneling), we
 1192|       |       * check connections to that proxy and not to the actual remote server.
 1193|       |       */
 1194|     65|      check = curr->ptr;
 1195|     65|      curr = curr->next;
 1196|       |
 1197|     65|      if(check->bits.connect_only || check->bits.close)
 1198|       |        /* connect-only or to-be-closed connections will not be reused */
 1199|      0|        continue;
 1200|       |
 1201|     65|      if(extract_if_dead(check, data)) {
 1202|       |        /* disconnect it */
 1203|     54|        (void)Curl_disconnect(data, check, TRUE);
 1204|     54|        continue;
 1205|     54|      }
 1206|       |
 1207|     11|      if(data->set.ipver != CURL_IPRESOLVE_WHATEVER
 1208|     11|          && data->set.ipver != check->ip_version) {
 1209|       |        /* skip because the connection is not via the requested IP version */
 1210|      0|        continue;
 1211|      0|      }
 1212|       |
 1213|     11|      if(bundle->multiuse == BUNDLE_MULTIPLEX)
 1214|      0|        multiplexed = CONN_INUSE(check);
 1215|       |
 1216|     11|      if(!canmultiplex) {
 1217|     11|        if(multiplexed) {
 1218|       |          /* can only happen within multi handles, and means that another easy
 1219|       |             handle is using this connection */
 1220|      0|          continue;
 1221|      0|        }
 1222|       |
 1223|     11|        if(Curl_resolver_asynch()) {
 1224|       |          /* primary_ip[0] is NUL only if the resolving of the name hasn't
 1225|       |             completed yet and until then we don't re-use this connection */
 1226|     11|          if(!check->primary_ip[0]) {
 1227|     11|            infof(data,
 1228|     11|                  "Connection #%ld is still name resolving, can't reuse",
 1229|     11|                  check->connection_id);
 1230|     11|            continue;
 1231|     11|          }
 1232|     11|        }
 1233|       |
 1234|      0|        if(check->sock[FIRSTSOCKET] == CURL_SOCKET_BAD) {
 1235|      0|          foundPendingCandidate = TRUE;
 1236|       |          /* Don't pick a connection that hasn't connected yet */
 1237|      0|          infof(data, "Connection #%ld isn't open enough, can't reuse",
 1238|      0|                check->connection_id);
 1239|      0|          continue;
 1240|      0|        }
 1241|      0|      }
 1242|       |
 1243|      0|#ifdef USE_UNIX_SOCKETS
 1244|      0|      if(needle->unix_domain_socket) {
 1245|      0|        if(!check->unix_domain_socket)
 1246|      0|          continue;
 1247|      0|        if(strcmp(needle->unix_domain_socket, check->unix_domain_socket))
 1248|      0|          continue;
 1249|      0|        if(needle->bits.abstract_unix_socket !=
 1250|      0|           check->bits.abstract_unix_socket)
 1251|      0|          continue;
 1252|      0|      }
 1253|      0|      else if(check->unix_domain_socket)
 1254|      0|        continue;
 1255|      0|#endif
 1256|       |
 1257|      0|      if((needle->handler->flags&PROTOPT_SSL) !=
 1258|      0|         (check->handler->flags&PROTOPT_SSL))
 1259|       |        /* don't do mixed SSL and non-SSL connections */
 1260|      0|        if(get_protocol_family(check->handler) !=
 1261|      0|           needle->handler->protocol || !check->bits.tls_upgraded)
 1262|       |          /* except protocols that have been upgraded via TLS */
 1263|      0|          continue;
 1264|       |
 1265|      0|#ifndef CURL_DISABLE_PROXY
 1266|      0|      if(needle->bits.httpproxy != check->bits.httpproxy ||
 1267|      0|         needle->bits.socksproxy != check->bits.socksproxy)
 1268|      0|        continue;
 1269|       |
 1270|      0|      if(needle->bits.socksproxy &&
 1271|      0|        !socks_proxy_info_matches(&needle->socks_proxy,
 1272|      0|                                  &check->socks_proxy))
 1273|      0|        continue;
 1274|      0|#endif
 1275|      0|      if(needle->bits.conn_to_host != check->bits.conn_to_host)
 1276|       |        /* don't mix connections that use the "connect to host" feature and
 1277|       |         * connections that don't use this feature */
 1278|      0|        continue;
 1279|       |
 1280|      0|      if(needle->bits.conn_to_port != check->bits.conn_to_port)
 1281|       |        /* don't mix connections that use the "connect to port" feature and
 1282|       |         * connections that don't use this feature */
 1283|      0|        continue;
 1284|       |
 1285|      0|#ifndef CURL_DISABLE_PROXY
 1286|      0|      if(needle->bits.httpproxy) {
 1287|      0|        if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))
 1288|      0|          continue;
 1289|       |
 1290|      0|        if(needle->bits.tunnel_proxy != check->bits.tunnel_proxy)
 1291|      0|          continue;
 1292|       |
 1293|      0|        if(needle->http_proxy.proxytype == CURLPROXY_HTTPS) {
 1294|       |          /* use https proxy */
 1295|      0|          if(needle->handler->flags&PROTOPT_SSL) {
 1296|       |            /* use double layer ssl */
 1297|      0|            if(!Curl_ssl_config_matches(&needle->proxy_ssl_config,
 1298|      0|                                        &check->proxy_ssl_config))
 1299|      0|              continue;
 1300|      0|            if(check->proxy_ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1301|      0|              continue;
 1302|      0|          }
 1303|      0|          else {
 1304|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1305|      0|                                        &check->ssl_config))
 1306|      0|              continue;
 1307|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete)
 1308|      0|              continue;
 1309|      0|          }
 1310|      0|        }
 1311|      0|      }
 1312|      0|#endif
 1313|       |
 1314|      0|      if(!canmultiplex && CONN_INUSE(check))
 1315|       |        /* this request can't be multiplexed but the checked connection is
 1316|       |           already in use so we skip it */
 1317|      0|        continue;
 1318|       |
 1319|      0|      if(CONN_INUSE(check)) {
 1320|       |        /* Subject for multiplex use if 'checks' belongs to the same multi
 1321|       |           handle as 'data' is. */
 1322|      0|        struct Curl_llist_element *e = check->easyq.head;
 1323|      0|        struct Curl_easy *entry = e->ptr;
 1324|      0|        if(entry->multi != data->multi)
 1325|      0|          continue;
 1326|      0|      }
 1327|       |
 1328|      0|      if(needle->localdev || needle->localport) {
 1329|       |        /* If we are bound to a specific local end (IP+port), we must not
 1330|       |           re-use a random other one, although if we didn't ask for a
 1331|       |           particular one we can reuse one that was bound.
 1332|       |
 1333|       |           This comparison is a bit rough and too strict. Since the input
 1334|       |           parameters can be specified in numerous ways and still end up the
 1335|       |           same it would take a lot of processing to make it really accurate.
 1336|       |           Instead, this matching will assume that re-uses of bound connections
 1337|       |           will most likely also re-use the exact same binding parameters and
 1338|       |           missing out a few edge cases shouldn't hurt anyone very much.
 1339|       |        */
 1340|      0|        if((check->localport != needle->localport) ||
 1341|      0|           (check->localportrange != needle->localportrange) ||
 1342|      0|           (needle->localdev &&
 1343|      0|            (!check->localdev || strcmp(check->localdev, needle->localdev))))
 1344|      0|          continue;
 1345|      0|      }
 1346|       |
 1347|      0|      if(!(needle->handler->flags & PROTOPT_CREDSPERREQUEST)) {
 1348|       |        /* This protocol requires credentials per connection,
 1349|       |           so verify that we're using the same name and password as well */
 1350|      0|        if(strcmp(needle->user, check->user) ||
 1351|      0|           strcmp(needle->passwd, check->passwd)) {
 1352|       |          /* one of them was different */
 1353|      0|          continue;
 1354|      0|        }
 1355|      0|      }
 1356|       |
 1357|       |      /* If multiplexing isn't enabled on the h2 connection and h1 is
 1358|       |         explicitly requested, handle it: */
 1359|      0|      if((needle->handler->protocol & PROTO_FAMILY_HTTP) &&
 1360|      0|         (check->httpversion >= 20) &&
 1361|      0|         (data->state.httpwant < CURL_HTTP_VERSION_2_0))
 1362|      0|        continue;
 1363|       |
 1364|      0|      if((needle->handler->flags&PROTOPT_SSL)
 1365|      0|#ifndef CURL_DISABLE_PROXY
 1366|      0|         || !needle->bits.httpproxy || needle->bits.tunnel_proxy
 1367|      0|#endif
 1368|      0|        ) {
 1369|       |        /* The requested connection does not use a HTTP proxy or it uses SSL or
 1370|       |           it is a non-SSL protocol tunneled or it is a non-SSL protocol which
 1371|       |           is allowed to be upgraded via TLS */
 1372|       |
 1373|      0|        if((strcasecompare(needle->handler->scheme, check->handler->scheme) ||
 1374|      0|            (get_protocol_family(check->handler) ==
 1375|      0|             needle->handler->protocol && check->bits.tls_upgraded)) &&
 1376|      0|           (!needle->bits.conn_to_host || strcasecompare(
 1377|      0|            needle->conn_to_host.name, check->conn_to_host.name)) &&
 1378|      0|           (!needle->bits.conn_to_port ||
 1379|      0|             needle->conn_to_port == check->conn_to_port) &&
 1380|      0|           strcasecompare(needle->host.name, check->host.name) &&
 1381|      0|           needle->remote_port == check->remote_port) {
 1382|       |          /* The schemes match or the protocol family is the same and the
 1383|       |             previous connection was TLS upgraded, and the hostname and host
 1384|       |             port match */
 1385|      0|          if(needle->handler->flags & PROTOPT_SSL) {
 1386|       |            /* This is a SSL connection so verify that we're using the same
 1387|       |               SSL options as well */
 1388|      0|            if(!Curl_ssl_config_matches(&needle->ssl_config,
 1389|      0|                                        &check->ssl_config)) {
 1390|      0|              DEBUGF(infof(data,
 1391|      0|                           "Connection #%ld has different SSL parameters, "
 1392|      0|                           "can't reuse",
 1393|      0|                           check->connection_id));
 1394|      0|              continue;
 1395|      0|            }
 1396|      0|            if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete) {
 1397|      0|              foundPendingCandidate = TRUE;
 1398|      0|              DEBUGF(infof(data,
 1399|      0|                           "Connection #%ld has not started SSL connect, "
 1400|      0|                           "can't reuse",
 1401|      0|                           check->connection_id));
 1402|      0|              continue;
 1403|      0|            }
 1404|      0|          }
 1405|      0|          match = TRUE;
 1406|      0|        }
 1407|      0|      }
 1408|      0|      else {
 1409|       |        /* The requested connection is using the same HTTP proxy in normal
 1410|       |           mode (no tunneling) */
 1411|      0|        match = TRUE;
 1412|      0|      }
 1413|       |
 1414|      0|      if(match) {
 1415|      0|#if defined(USE_NTLM)
 1416|       |        /* If we are looking for an HTTP+NTLM connection, check if this is
 1417|       |           already authenticating with the right credentials. If not, keep
 1418|       |           looking so that we can reuse NTLM connections if
 1419|       |           possible. (Especially we must not reuse the same connection if
 1420|       |           partway through a handshake!) */
 1421|      0|        if(wantNTLMhttp) {
 1422|      0|          if(strcmp(needle->user, check->user) ||
 1423|      0|             strcmp(needle->passwd, check->passwd)) {
 1424|       |
 1425|       |            /* we prefer a credential match, but this is at least a connection
 1426|       |               that can be reused and "upgraded" to NTLM */
 1427|      0|            if(check->http_ntlm_state == NTLMSTATE_NONE)
 1428|      0|              chosen = check;
 1429|      0|            continue;
 1430|      0|          }
 1431|      0|        }
 1432|      0|        else if(check->http_ntlm_state != NTLMSTATE_NONE) {
 1433|       |          /* Connection is using NTLM auth but we don't want NTLM */
 1434|      0|          continue;
 1435|      0|        }
 1436|       |
 1437|      0|#ifndef CURL_DISABLE_PROXY
 1438|       |        /* Same for Proxy NTLM authentication */
 1439|      0|        if(wantProxyNTLMhttp) {
 1440|       |          /* Both check->http_proxy.user and check->http_proxy.passwd can be
 1441|       |           * NULL */
 1442|      0|          if(!check->http_proxy.user || !check->http_proxy.passwd)
 1443|      0|            continue;
 1444|       |
 1445|      0|          if(strcmp(needle->http_proxy.user, check->http_proxy.user) ||
 1446|      0|             strcmp(needle->http_proxy.passwd, check->http_proxy.passwd))
 1447|      0|            continue;
 1448|      0|        }
 1449|      0|        else if(check->proxy_ntlm_state != NTLMSTATE_NONE) {
 1450|       |          /* Proxy connection is using NTLM auth but we don't want NTLM */
 1451|      0|          continue;
 1452|      0|        }
 1453|      0|#endif
 1454|      0|        if(wantNTLMhttp || wantProxyNTLMhttp) {
 1455|       |          /* Credentials are already checked, we can use this connection */
 1456|      0|          chosen = check;
 1457|       |
 1458|      0|          if((wantNTLMhttp &&
 1459|      0|             (check->http_ntlm_state != NTLMSTATE_NONE)) ||
 1460|      0|              (wantProxyNTLMhttp &&
 1461|      0|               (check->proxy_ntlm_state != NTLMSTATE_NONE))) {
 1462|       |            /* We must use this connection, no other */
 1463|      0|            *force_reuse = TRUE;
 1464|      0|            break;
 1465|      0|          }
 1466|       |
 1467|       |          /* Continue look up for a better connection */
 1468|      0|          continue;
 1469|      0|        }
 1470|      0|#endif
 1471|      0|        if(canmultiplex) {
 1472|       |          /* We can multiplex if we want to. Let's continue looking for
 1473|       |             the optimal connection to use. */
 1474|       |
 1475|      0|          if(!multiplexed) {
 1476|       |            /* We have the optimal connection. Let's stop looking. */
 1477|      0|            chosen = check;
 1478|      0|            break;
 1479|      0|          }
 1480|       |
 1481|      0|#ifdef USE_NGHTTP2
 1482|       |          /* If multiplexed, make sure we don't go over concurrency limit */
 1483|      0|          if(check->bits.multiplex) {
 1484|       |            /* Multiplexed connections can only be HTTP/2 for now */
 1485|      0|            struct http_conn *httpc = &check->proto.httpc;
 1486|      0|            if(multiplexed >= httpc->settings.max_concurrent_streams) {
 1487|      0|              infof(data, "MAX_CONCURRENT_STREAMS reached, skip (%zu)",
 1488|      0|                    multiplexed);
 1489|      0|              continue;
 1490|      0|            }
 1491|      0|            else if(multiplexed >=
 1492|      0|                    Curl_multi_max_concurrent_streams(data->multi)) {
 1493|      0|              infof(data, "client side MAX_CONCURRENT_STREAMS reached"
 1494|      0|                    ", skip (%zu)",
 1495|      0|                    multiplexed);
 1496|      0|              continue;
 1497|      0|            }
 1498|      0|          }
 1499|      0|#endif
 1500|       |          /* When not multiplexed, we have a match here! */
 1501|      0|          chosen = check;
 1502|      0|          infof(data, "Multiplexed connection found!");
 1503|      0|          break;
 1504|      0|        }
 1505|      0|        else {
 1506|       |          /* We have found a connection. Let's stop searching. */
 1507|      0|          chosen = check;
 1508|      0|          break;
 1509|      0|        }
 1510|      0|      }
 1511|      0|    }
 1512|     65|  }
 1513|       |
 1514|  2.80k|  if(chosen) {
 1515|       |    /* mark it as used before releasing the lock */
 1516|      0|    Curl_attach_connnection(data, chosen);
 1517|      0|    CONNCACHE_UNLOCK(data);
 1518|      0|    *usethis = chosen;
 1519|      0|    return TRUE; /* yes, we found one to use! */
 1520|      0|  }
 1521|  2.80k|  CONNCACHE_UNLOCK(data);
 1522|       |
 1523|  2.80k|  if(foundPendingCandidate && data->set.pipewait) {
 1524|      0|    infof(data,
 1525|      0|          "Found pending candidate for reuse and CURLOPT_PIPEWAIT is set");
 1526|      0|    *waitpipe = TRUE;
 1527|      0|  }
 1528|       |
 1529|  2.80k|  return FALSE; /* no matching connecting exists */
 1530|  2.80k|}
url.c:IsMultiplexingPossible:
  906|  2.80k|{
  907|  2.80k|  int avail = 0;
  908|       |
  909|       |  /* If a HTTP protocol and multiplexing is enabled */
  910|  2.80k|  if((conn->handler->protocol & PROTO_FAMILY_HTTP) &&
  911|  2.80k|     (!conn->bits.protoconnstart || !conn->bits.close)) {
  912|       |
  913|  1.12k|    if(Curl_multiplex_wanted(handle->multi) &&
  914|  1.12k|       (handle->state.httpwant >= CURL_HTTP_VERSION_2))
  915|       |      /* allows HTTP/2 */
  916|  1.12k|      avail |= CURLPIPE_MULTIPLEX;
  917|  1.12k|  }
  918|  2.80k|  return avail;
  919|  2.80k|}
url.c:resolve_server:
 3332|  2.80k|{
 3333|  2.80k|  CURLcode result = CURLE_OK;
 3334|  2.80k|  timediff_t timeout_ms = Curl_timeleft(data, NULL, TRUE);
 3335|       |
 3336|  2.80k|  DEBUGASSERT(conn);
 3337|  2.80k|  DEBUGASSERT(data);
 3338|       |  /*************************************************************
 3339|       |   * Resolve the name of the server or proxy
 3340|       |   *************************************************************/
 3341|  2.80k|  if(conn->bits.reuse)
 3342|       |    /* We're reusing the connection - no need to resolve anything, and
 3343|       |       idnconvert_hostname() was called already in create_conn() for the re-use
 3344|       |       case. */
 3345|      0|    *async = FALSE;
 3346|       |
 3347|  2.80k|  else {
 3348|       |    /* this is a fresh connect */
 3349|  2.80k|    int rc;
 3350|  2.80k|    struct Curl_dns_entry *hostaddr = NULL;
 3351|       |
 3352|  2.80k|#ifdef USE_UNIX_SOCKETS
 3353|  2.80k|    if(conn->unix_domain_socket) {
 3354|       |      /* Unix domain sockets are local. The host gets ignored, just use the
 3355|       |       * specified domain socket address. Do not cache "DNS entries". There is
 3356|       |       * no DNS involved and we already have the filesystem path available */
 3357|      0|      const char *path = conn->unix_domain_socket;
 3358|       |
 3359|      0|      hostaddr = calloc(1, sizeof(struct Curl_dns_entry));
 3360|      0|      if(!hostaddr)
 3361|      0|        result = CURLE_OUT_OF_MEMORY;
 3362|      0|      else {
 3363|      0|        bool longpath = FALSE;
 3364|      0|        hostaddr->addr = Curl_unix2addr(path, &longpath,
 3365|      0|                                        conn->bits.abstract_unix_socket);
 3366|      0|        if(hostaddr->addr)
 3367|      0|          hostaddr->inuse++;
 3368|      0|        else {
 3369|       |          /* Long paths are not supported for now */
 3370|      0|          if(longpath) {
 3371|      0|            failf(data, "Unix socket path too long: '%s'", path);
 3372|      0|            result = CURLE_COULDNT_RESOLVE_HOST;
 3373|      0|          }
 3374|      0|          else
 3375|      0|            result = CURLE_OUT_OF_MEMORY;
 3376|      0|          free(hostaddr);
 3377|      0|          hostaddr = NULL;
 3378|      0|        }
 3379|      0|      }
 3380|      0|    }
 3381|  2.80k|    else
 3382|  2.80k|#endif
 3383|       |
 3384|  2.80k|    if(!conn->bits.proxy) {
 3385|  2.80k|      struct hostname *connhost;
 3386|  2.80k|      if(conn->bits.conn_to_host)
 3387|  2.80k|        connhost = &conn->conn_to_host;
 3388|      1|      else
 3389|      1|        connhost = &conn->host;
 3390|       |
 3391|       |      /* If not connecting via a proxy, extract the port from the URL, if it is
 3392|       |       * there, thus overriding any defaults that might have been set above. */
 3393|  2.80k|      if(conn->bits.conn_to_port)
 3394|      0|        conn->port = conn->conn_to_port;
 3395|  2.80k|      else
 3396|  2.80k|        conn->port = conn->remote_port;
 3397|       |
 3398|       |      /* Resolve target host right on */
 3399|  2.80k|      conn->hostname_resolve = strdup(connhost->name);
 3400|  2.80k|      if(!conn->hostname_resolve)
 3401|      0|        return CURLE_OUT_OF_MEMORY;
 3402|  2.80k|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3403|  2.80k|                               &hostaddr, timeout_ms);
 3404|  2.80k|      if(rc == CURLRESOLV_PENDING)
 3405|      0|        *async = TRUE;
 3406|       |
 3407|  2.80k|      else if(rc == CURLRESOLV_TIMEDOUT) {
 3408|      0|        failf(data, "Failed to resolve host '%s' with timeout after %ld ms",
 3409|      0|              connhost->dispname,
 3410|      0|              Curl_timediff(Curl_now(), data->progress.t_startsingle));
 3411|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3412|      0|      }
 3413|  2.80k|      else if(!hostaddr) {
 3414|      0|        failf(data, "Could not resolve host: %s", connhost->dispname);
 3415|      0|        result = CURLE_COULDNT_RESOLVE_HOST;
 3416|       |        /* don't return yet, we need to clean up the timeout first */
 3417|      0|      }
 3418|  2.80k|    }
 3419|      0|#ifndef CURL_DISABLE_PROXY
 3420|      0|    else {
 3421|       |      /* This is a proxy that hasn't been resolved yet. */
 3422|       |
 3423|      0|      struct hostname * const host = conn->bits.socksproxy ?
 3424|      0|        &conn->socks_proxy.host : &conn->http_proxy.host;
 3425|       |
 3426|       |      /* resolve proxy */
 3427|      0|      conn->hostname_resolve = strdup(host->name);
 3428|      0|      if(!conn->hostname_resolve)
 3429|      0|        return CURLE_OUT_OF_MEMORY;
 3430|      0|      rc = Curl_resolv_timeout(data, conn->hostname_resolve, (int)conn->port,
 3431|      0|                               &hostaddr, timeout_ms);
 3432|       |
 3433|      0|      if(rc == CURLRESOLV_PENDING)
 3434|      0|        *async = TRUE;
 3435|       |
 3436|      0|      else if(rc == CURLRESOLV_TIMEDOUT)
 3437|      0|        result = CURLE_OPERATION_TIMEDOUT;
 3438|       |
 3439|      0|      else if(!hostaddr) {
 3440|      0|        failf(data, "Couldn't resolve proxy '%s'", host->dispname);
 3441|      0|        result = CURLE_COULDNT_RESOLVE_PROXY;
 3442|       |        /* don't return yet, we need to clean up the timeout first */
 3443|      0|      }
 3444|      0|    }
 3445|  2.80k|#endif
 3446|  2.80k|    DEBUGASSERT(conn->dns_entry == NULL);
 3447|  2.80k|    conn->dns_entry = hostaddr;
 3448|  2.80k|  }
 3449|       |
 3450|  2.80k|  return result;
 3451|  2.80k|}
url.c:strip_trailing_dot:
 1574|  5.61k|{
 1575|  5.61k|  size_t len;
 1576|  5.61k|  if(!host || !host->name)
 1577|      0|    return;
 1578|  5.61k|  len = strlen(host->name);
 1579|  5.61k|  if(len && (host->name[len-1] == '.'))
 1580|    107|    host->name[len-1] = 0;
 1581|  5.61k|}

Curl_is_absolute_url:
  236|  6.28k|{
  237|  6.28k|  size_t i;
  238|       |#ifdef WIN32
  239|       |  if(STARTS_WITH_DRIVE_PREFIX(url))
  240|       |    return FALSE;
  241|       |#endif
  242|  31.1k|  for(i = 0; i < buflen && url[i]; ++i) {
  243|  31.1k|    char s = url[i];
  244|  31.1k|    if((s == ':') && (url[i + 1] == '/')) {
  245|  5.51k|      if(buf)
  246|  2.80k|        buf[i] = 0;
  247|  5.51k|      return TRUE;
  248|  5.51k|    }
  249|       |    /* RFC 3986 3.1 explains:
  250|       |      scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  251|       |    */
  252|  25.6k|    else if(ISALNUM(s) || (s == '+') || (s == '-') || (s == '.') ) {
  253|  24.9k|      if(buf)
  254|  12.2k|        buf[i] = (char)TOLOWER(s);
  255|  24.9k|    }
  256|    718|    else
  257|    718|      break;
  258|  31.1k|  }
  259|    772|  return FALSE;
  260|  6.28k|}
Curl_parse_port:
  500|  3.00k|{
  501|  3.00k|  char *portptr = NULL;
  502|  3.00k|  char endbracket;
  503|  3.00k|  int len;
  504|       |
  505|       |  /*
  506|       |   * Find the end of an IPv6 address, either on the ']' ending bracket or
  507|       |   * a percent-encoded zone index.
  508|       |   */
  509|  3.00k|  if(1 == sscanf(hostname, "[%*45[0123456789abcdefABCDEF:.]%c%n",
  510|  3.00k|                 &endbracket, &len)) {
  511|      7|    if(']' == endbracket)
  512|      2|      portptr = &hostname[len];
  513|      5|    else if('%' == endbracket) {
  514|      3|      int zonelen = len;
  515|      3|      if(1 == sscanf(hostname + zonelen, "%*[^]]%c%n", &endbracket, &len)) {
  516|      2|        if(']' != endbracket)
  517|      0|          return CURLUE_MALFORMED_INPUT;
  518|      2|        portptr = &hostname[--zonelen + len + 1];
  519|      2|      }
  520|      1|      else
  521|      1|        return CURLUE_MALFORMED_INPUT;
  522|      3|    }
  523|      2|    else
  524|      2|      return CURLUE_MALFORMED_INPUT;
  525|       |
  526|       |    /* this is a RFC2732-style specified IP-address */
  527|      4|    if(portptr && *portptr) {
  528|      3|      if(*portptr != ':')
  529|      2|        return CURLUE_MALFORMED_INPUT;
  530|      3|    }
  531|      1|    else
  532|      1|      portptr = NULL;
  533|      4|  }
  534|  3.00k|  else
  535|  3.00k|    portptr = strchr(hostname, ':');
  536|       |
  537|  3.00k|  if(portptr) {
  538|  1.30k|    char *rest;
  539|  1.30k|    long port;
  540|  1.30k|    char portbuf[7];
  541|       |
  542|       |    /* Browser behavior adaptation. If there's a colon with no digits after,
  543|       |       just cut off the name there which makes us ignore the colon and just
  544|       |       use the default port. Firefox, Chrome and Safari all do that.
  545|       |
  546|       |       Don't do it if the URL has no scheme, to make something that looks like
  547|       |       a scheme not work!
  548|       |    */
  549|  1.30k|    if(!portptr[1]) {
  550|     58|      *portptr = '\0';
  551|     58|      return has_scheme ? CURLUE_OK : CURLUE_BAD_PORT_NUMBER;
  552|     58|    }
  553|       |
  554|  1.24k|    if(!ISDIGIT(portptr[1]))
  555|      8|      return CURLUE_BAD_PORT_NUMBER;
  556|       |
  557|  1.23k|    port = strtol(portptr + 1, &rest, 10);  /* Port number must be decimal */
  558|       |
  559|  1.23k|    if((port <= 0) || (port > 0xffff))
  560|       |      /* Single unix standard says port numbers are 16 bits long, but we don't
  561|       |         treat port zero as OK. */
  562|      3|      return CURLUE_BAD_PORT_NUMBER;
  563|       |
  564|  1.23k|    if(rest[0])
  565|      3|      return CURLUE_BAD_PORT_NUMBER;
  566|       |
  567|  1.22k|    *portptr++ = '\0'; /* cut off the name there */
  568|  1.22k|    *rest = 0;
  569|       |    /* generate a new port number string to get rid of leading zeroes etc */
  570|  1.22k|    msnprintf(portbuf, sizeof(portbuf), "%ld", port);
  571|  1.22k|    u->portnum = port;
  572|  1.22k|    u->port = strdup(portbuf);
  573|  1.22k|    if(!u->port)
  574|      0|      return CURLUE_OUT_OF_MEMORY;
  575|  1.22k|  }
  576|       |
  577|  2.93k|  return CURLUE_OK;
  578|  3.00k|}
curl_url:
 1117|  6.01k|{
 1118|  6.01k|  return calloc(sizeof(struct Curl_URL), 1);
 1119|  6.01k|}
curl_url_cleanup:
 1122|  9.04k|{
 1123|  9.04k|  if(u) {
 1124|  2.99k|    free_urlhandle(u);
 1125|  2.99k|    free(u);
 1126|  2.99k|  }
 1127|  9.04k|}
curl_url_get:
 1161|  26.4k|{
 1162|  26.4k|  char *ptr;
 1163|  26.4k|  CURLUcode ifmissing = CURLUE_UNKNOWN_PART;
 1164|  26.4k|  char portbuf[7];
 1165|  26.4k|  bool urldecode = (flags & CURLU_URLDECODE)?1:0;
 1166|  26.4k|  bool urlencode = (flags & CURLU_URLENCODE)?1:0;
 1167|  26.4k|  bool plusdecode = FALSE;
 1168|  26.4k|  (void)flags;
 1169|  26.4k|  if(!u)
 1170|      0|    return CURLUE_BAD_HANDLE;
 1171|  26.4k|  if(!part)
 1172|      0|    return CURLUE_BAD_PARTPOINTER;
 1173|  26.4k|  *part = NULL;
 1174|       |
 1175|  26.4k|  switch(what) {
 1176|  2.87k|  case CURLUPART_SCHEME:
 1177|  2.87k|    ptr = u->scheme;
 1178|  2.87k|    ifmissing = CURLUE_NO_SCHEME;
 1179|  2.87k|    urldecode = FALSE; /* never for schemes */
 1180|  2.87k|    break;
 1181|  2.63k|  case CURLUPART_USER:
 1182|  2.63k|    ptr = u->user;
 1183|  2.63k|    ifmissing = CURLUE_NO_USER;
 1184|  2.63k|    break;
 1185|  2.79k|  case CURLUPART_PASSWORD:
 1186|  2.79k|    ptr = u->password;
 1187|  2.79k|    ifmissing = CURLUE_NO_PASSWORD;
 1188|  2.79k|    break;
 1189|  2.85k|  case CURLUPART_OPTIONS:
 1190|  2.85k|    ptr = u->options;
 1191|  2.85k|    ifmissing = CURLUE_NO_OPTIONS;
 1192|  2.85k|    break;
 1193|  2.87k|  case CURLUPART_HOST:
 1194|  2.87k|    ptr = u->host;
 1195|  2.87k|    ifmissing = CURLUE_NO_HOST;
 1196|  2.87k|    break;
 1197|      0|  case CURLUPART_ZONEID:
 1198|      0|    ptr = u->zoneid;
 1199|      0|    break;
 1200|  2.85k|  case CURLUPART_PORT:
 1201|  2.85k|    ptr = u->port;
 1202|  2.85k|    ifmissing = CURLUE_NO_PORT;
 1203|  2.85k|    urldecode = FALSE; /* never for port */
 1204|  2.85k|    if(!ptr && (flags & CURLU_DEFAULT_PORT) && u->scheme) {
 1205|       |      /* there's no stored port number, but asked to deliver
 1206|       |         a default one for the scheme */
 1207|  1.68k|      const struct Curl_handler *h =
 1208|  1.68k|        Curl_builtin_scheme(u->scheme);
 1209|  1.68k|      if(h) {
 1210|  1.68k|        msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1211|  1.68k|        ptr = portbuf;
 1212|  1.68k|      }
 1213|  1.68k|    }
 1214|  1.16k|    else if(ptr && u->scheme) {
 1215|       |      /* there is a stored port number, but ask to inhibit if
 1216|       |         it matches the default one for the scheme */
 1217|  1.16k|      const struct Curl_handler *h =
 1218|  1.16k|        Curl_builtin_scheme(u->scheme);
 1219|  1.16k|      if(h && (h->defport == u->portnum) &&
 1220|  1.16k|         (flags & CURLU_NO_DEFAULT_PORT))
 1221|      0|        ptr = NULL;
 1222|  1.16k|    }
 1223|  2.85k|    break;
 1224|  2.85k|  case CURLUPART_PATH:
 1225|  2.85k|    ptr = u->path;
 1226|  2.85k|    if(!ptr) {
 1227|    579|      ptr = u->path = strdup("/");
 1228|    579|      if(!u->path)
 1229|      0|        return CURLUE_OUT_OF_MEMORY;
 1230|    579|    }
 1231|  2.85k|    break;
 1232|  3.33k|  case CURLUPART_QUERY:
 1233|  3.33k|    ptr = u->query;
 1234|  3.33k|    ifmissing = CURLUE_NO_QUERY;
 1235|  3.33k|    plusdecode = urldecode;
 1236|  3.33k|    break;
 1237|      0|  case CURLUPART_FRAGMENT:
 1238|      0|    ptr = u->fragment;
 1239|      0|    ifmissing = CURLUE_NO_FRAGMENT;
 1240|      0|    break;
 1241|  3.40k|  case CURLUPART_URL: {
 1242|  3.40k|    char *url;
 1243|  3.40k|    char *scheme;
 1244|  3.40k|    char *options = u->options;
 1245|  3.40k|    char *port = u->port;
 1246|  3.40k|    char *allochost = NULL;
 1247|  3.40k|    if(u->scheme && strcasecompare("file", u->scheme)) {
 1248|     48|      url = aprintf("file://%s%s%s",
 1249|     48|                    u->path,
 1250|     48|                    u->fragment? "#": "",
 1251|     48|                    u->fragment? u->fragment : "");
 1252|     48|    }
 1253|  3.35k|    else if(!u->host)
 1254|    286|      return CURLUE_NO_HOST;
 1255|  3.07k|    else {
 1256|  3.07k|      const struct Curl_handler *h = NULL;
 1257|  3.07k|      if(u->scheme)
 1258|  3.07k|        scheme = u->scheme;
 1259|      0|      else if(flags & CURLU_DEFAULT_SCHEME)
 1260|      0|        scheme = (char *) DEFAULT_SCHEME;
 1261|      0|      else
 1262|      0|        return CURLUE_NO_SCHEME;
 1263|       |
 1264|  3.07k|      h = Curl_builtin_scheme(scheme);
 1265|  3.07k|      if(!port && (flags & CURLU_DEFAULT_PORT)) {
 1266|       |        /* there's no stored port number, but asked to deliver
 1267|       |           a default one for the scheme */
 1268|      0|        if(h) {
 1269|      0|          msnprintf(portbuf, sizeof(portbuf), "%u", h->defport);
 1270|      0|          port = portbuf;
 1271|      0|        }
 1272|      0|      }
 1273|  3.07k|      else if(port) {
 1274|       |        /* there is a stored port number, but asked to inhibit if it matches
 1275|       |           the default one for the scheme */
 1276|  1.25k|        if(h && (h->defport == u->portnum) &&
 1277|  1.25k|           (flags & CURLU_NO_DEFAULT_PORT))
 1278|      0|          port = NULL;
 1279|  1.25k|      }
 1280|       |
 1281|  3.07k|      if(h && !(h->flags & PROTOPT_URLOPTIONS))
 1282|  1.73k|        options = NULL;
 1283|       |
 1284|  3.07k|      if(u->host[0] == '[') {
 1285|      0|        if(u->zoneid) {
 1286|       |          /* make it '[ host %25 zoneid ]' */
 1287|      0|          size_t hostlen = strlen(u->host);
 1288|      0|          size_t alen = hostlen + 3 + strlen(u->zoneid) + 1;
 1289|      0|          allochost = malloc(alen);
 1290|      0|          if(!allochost)
 1291|      0|            return CURLUE_OUT_OF_MEMORY;
 1292|      0|          memcpy(allochost, u->host, hostlen - 1);
 1293|      0|          msnprintf(&allochost[hostlen - 1], alen - hostlen + 1,
 1294|      0|                    "%%25%s]", u->zoneid);
 1295|      0|        }
 1296|      0|      }
 1297|  3.07k|      else if(urlencode) {
 1298|     53|        allochost = curl_easy_escape(NULL, u->host, 0);
 1299|     53|        if(!allochost)
 1300|      0|          return CURLUE_OUT_OF_MEMORY;
 1301|     53|      }
 1302|  3.01k|      else {
 1303|       |        /* only encode '%' in output host name */
 1304|  3.01k|        char *host = u->host;
 1305|  3.01k|        size_t pcount = 0;
 1306|       |        /* first, count number of percents present in the name */
 1307|  28.7k|        while(*host) {
 1308|  25.7k|          if(*host == '%')
 1309|    331|            pcount++;
 1310|  25.7k|          host++;
 1311|  25.7k|        }
 1312|       |        /* if there were percents, encode the host name */
 1313|  3.01k|        if(pcount) {
 1314|     23|          size_t hostlen = strlen(u->host);
 1315|     23|          size_t alen = hostlen + 2 * pcount + 1;
 1316|     23|          char *o = allochost = malloc(alen);
 1317|     23|          if(!allochost)
 1318|      0|            return CURLUE_OUT_OF_MEMORY;
 1319|       |
 1320|     23|          host = u->host;
 1321|    978|          while(*host) {
 1322|    955|            if(*host == '%') {
 1323|    331|              memcpy(o, "%25", 3);
 1324|    331|              o += 3;
 1325|    331|              host++;
 1326|    331|              continue;
 1327|    331|            }
 1328|    624|            *o++ = *host++;
 1329|    624|          }
 1330|     23|          *o = '\0';
 1331|     23|        }
 1332|  3.01k|      }
 1333|       |
 1334|  3.07k|      url = aprintf("%s://%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
 1335|  3.07k|                    scheme,
 1336|  3.07k|                    u->user ? u->user : "",
 1337|  3.07k|                    u->password ? ":": "",
 1338|  3.07k|                    u->password ? u->password : "",
 1339|  3.07k|                    options ? ";" : "",
 1340|  3.07k|                    options ? options : "",
 1341|  3.07k|                    (u->user || u->password || options) ? "@": "",
 1342|  3.07k|                    allochost ? allochost : u->host,
 1343|  3.07k|                    port ? ":": "",
 1344|  3.07k|                    port ? port : "",
 1345|  3.07k|                    (u->path && (u->path[0] != '/')) ? "/": "",
 1346|  3.07k|                    u->path ? u->path : "/",
 1347|  3.07k|                    (u->query && u->query[0]) ? "?": "",
 1348|  3.07k|                    (u->query && u->query[0]) ? u->query : "",
 1349|  3.07k|                    u->fragment? "#": "",
 1350|  3.07k|                    u->fragment? u->fragment : "");
 1351|  3.07k|      free(allochost);
 1352|  3.07k|    }
 1353|  3.11k|    if(!url)
 1354|      0|      return CURLUE_OUT_OF_MEMORY;
 1355|  3.11k|    *part = url;
 1356|  3.11k|    return CURLUE_OK;
 1357|  3.11k|  }
 1358|      0|  default:
 1359|      0|    ptr = NULL;
 1360|      0|    break;
 1361|  26.4k|  }
 1362|  23.0k|  if(ptr) {
 1363|  11.9k|    *part = strdup(ptr);
 1364|  11.9k|    if(!*part)
 1365|      0|      return CURLUE_OUT_OF_MEMORY;
 1366|  11.9k|    if(plusdecode) {
 1367|       |      /* convert + to space */
 1368|     60|      char *plus;
 1369|    972|      for(plus = *part; *plus; ++plus) {
 1370|    912|        if(*plus == '+')
 1371|      2|          *plus = ' ';
 1372|    912|      }
 1373|     60|    }
 1374|  11.9k|    if(urldecode) {
 1375|    124|      char *decoded;
 1376|    124|      size_t dlen;
 1377|       |      /* this unconditional rejection of control bytes is documented
 1378|       |         API behavior */
 1379|    124|      CURLcode res = Curl_urldecode(NULL, *part, 0, &decoded, &dlen,
 1380|    124|                                    REJECT_CTRL);
 1381|    124|      free(*part);
 1382|    124|      if(res) {
 1383|      0|        *part = NULL;
 1384|      0|        return CURLUE_URLDECODE;
 1385|      0|      }
 1386|    124|      *part = decoded;
 1387|    124|    }
 1388|  11.9k|    return CURLUE_OK;
 1389|  11.9k|  }
 1390|  11.0k|  else
 1391|  11.0k|    return ifmissing;
 1392|  23.0k|}
curl_url_set:
 1396|  3.70k|{
 1397|  3.70k|  char **storep = NULL;
 1398|  3.70k|  long port = 0;
 1399|  3.70k|  bool urlencode = (flags & CURLU_URLENCODE)? 1 : 0;
 1400|  3.70k|  bool plusencode = FALSE;
 1401|  3.70k|  bool urlskipslash = FALSE;
 1402|  3.70k|  bool appendquery = FALSE;
 1403|  3.70k|  bool equalsencode = FALSE;
 1404|       |
 1405|  3.70k|  if(!u)
 1406|      0|    return CURLUE_BAD_HANDLE;
 1407|  3.70k|  if(!part) {
 1408|       |    /* setting a part to NULL clears it */
 1409|      0|    switch(what) {
 1410|      0|    case CURLUPART_URL:
 1411|      0|      break;
 1412|      0|    case CURLUPART_SCHEME:
 1413|      0|      storep = &u->scheme;
 1414|      0|      break;
 1415|      0|    case CURLUPART_USER:
 1416|      0|      storep = &u->user;
 1417|      0|      break;
 1418|      0|    case CURLUPART_PASSWORD:
 1419|      0|      storep = &u->password;
 1420|      0|      break;
 1421|      0|    case CURLUPART_OPTIONS:
 1422|      0|      storep = &u->options;
 1423|      0|      break;
 1424|      0|    case CURLUPART_HOST:
 1425|      0|      storep = &u->host;
 1426|      0|      break;
 1427|      0|    case CURLUPART_ZONEID:
 1428|      0|      storep = &u->zoneid;
 1429|      0|      break;
 1430|      0|    case CURLUPART_PORT:
 1431|      0|      u->portnum = 0;
 1432|      0|      storep = &u->port;
 1433|      0|      break;
 1434|      0|    case CURLUPART_PATH:
 1435|      0|      storep = &u->path;
 1436|      0|      break;
 1437|      0|    case CURLUPART_QUERY:
 1438|      0|      storep = &u->query;
 1439|      0|      break;
 1440|      0|    case CURLUPART_FRAGMENT:
 1441|      0|      storep = &u->fragment;
 1442|      0|      break;
 1443|      0|    default:
 1444|      0|      return CURLUE_UNKNOWN_PART;
 1445|      0|    }
 1446|      0|    if(storep && *storep) {
 1447|      0|      Curl_safefree(*storep);
 1448|      0|    }
 1449|      0|    return CURLUE_OK;
 1450|      0|  }
 1451|       |
 1452|  3.70k|  switch(what) {
 1453|      0|  case CURLUPART_SCHEME:
 1454|      0|    if(strlen(part) > MAX_SCHEME_LEN)
 1455|       |      /* too long */
 1456|      0|      return CURLUE_MALFORMED_INPUT;
 1457|      0|    if(!(flags & CURLU_NON_SUPPORT_SCHEME) &&
 1458|       |       /* verify that it is a fine scheme */
 1459|      0|       !Curl_builtin_scheme(part))
 1460|      0|      return CURLUE_UNSUPPORTED_SCHEME;
 1461|      0|    storep = &u->scheme;
 1462|      0|    urlencode = FALSE; /* never */
 1463|      0|    break;
 1464|    446|  case CURLUPART_USER:
 1465|    446|    storep = &u->user;
 1466|    446|    break;
 1467|    171|  case CURLUPART_PASSWORD:
 1468|    171|    storep = &u->password;
 1469|    171|    break;
 1470|      0|  case CURLUPART_OPTIONS:
 1471|      0|    storep = &u->options;
 1472|      0|    break;
 1473|      0|  case CURLUPART_HOST: {
 1474|      0|    size_t len = strcspn(part, " \r\n");
 1475|      0|    if(strlen(part) != len)
 1476|       |      /* hostname with bad content */
 1477|      0|      return CURLUE_MALFORMED_INPUT;
 1478|      0|    storep = &u->host;
 1479|      0|    Curl_safefree(u->zoneid);
 1480|      0|    break;
 1481|      0|  }
 1482|      0|  case CURLUPART_ZONEID:
 1483|      0|    storep = &u->zoneid;
 1484|      0|    break;
 1485|      0|  case CURLUPART_PORT:
 1486|      0|  {
 1487|      0|    char *endp;
 1488|      0|    urlencode = FALSE; /* never */
 1489|      0|    port = strtol(part, &endp, 10);  /* Port number must be decimal */
 1490|      0|    if((port <= 0) || (port > 0xffff))
 1491|      0|      return CURLUE_BAD_PORT_NUMBER;
 1492|      0|    if(*endp)
 1493|       |      /* weirdly provided number, not good! */
 1494|      0|      return CURLUE_MALFORMED_INPUT;
 1495|      0|    storep = &u->port;
 1496|      0|  }
 1497|      0|  break;
 1498|      0|  case CURLUPART_PATH:
 1499|      0|    urlskipslash = TRUE;
 1500|      0|    storep = &u->path;
 1501|      0|    break;
 1502|      0|  case CURLUPART_QUERY:
 1503|      0|    plusencode = urlencode;
 1504|      0|    appendquery = (flags & CURLU_APPENDQUERY)?1:0;
 1505|      0|    equalsencode = appendquery;
 1506|      0|    storep = &u->query;
 1507|      0|    break;
 1508|      0|  case CURLUPART_FRAGMENT:
 1509|      0|    storep = &u->fragment;
 1510|      0|    break;
 1511|  3.08k|  case CURLUPART_URL: {
 1512|       |    /*
 1513|       |     * Allow a new URL to replace the existing (if any) contents.
 1514|       |     *
 1515|       |     * If the existing contents is enough for a URL, allow a relative URL to
 1516|       |     * replace it.
 1517|       |     */
 1518|  3.08k|    CURLUcode result;
 1519|  3.08k|    char *oldurl;
 1520|  3.08k|    char *redired_url;
 1521|  3.08k|    CURLU *handle2;
 1522|       |
 1523|  3.08k|    if(Curl_is_absolute_url(part, NULL, MAX_SCHEME_LEN + 1)) {
 1524|  2.70k|      handle2 = curl_url();
 1525|  2.70k|      if(!handle2)
 1526|      0|        return CURLUE_OUT_OF_MEMORY;
 1527|  2.70k|      result = parseurl(part, handle2, flags);
 1528|  2.70k|      if(!result)
 1529|  2.67k|        mv_urlhandle(handle2, u);
 1530|     22|      else
 1531|     22|        curl_url_cleanup(handle2);
 1532|  2.70k|      return result;
 1533|  2.70k|    }
 1534|       |    /* extract the full "old" URL to do the redirect on */
 1535|    386|    result = curl_url_get(u, CURLUPART_URL, &oldurl, flags);
 1536|    386|    if(result) {
 1537|       |      /* couldn't get the old URL, just use the new! */
 1538|    286|      handle2 = curl_url();
 1539|    286|      if(!handle2)
 1540|      0|        return CURLUE_OUT_OF_MEMORY;
 1541|    286|      result = parseurl(part, handle2, flags);
 1542|    286|      if(!result)
 1543|    253|        mv_urlhandle(handle2, u);
 1544|     33|      else
 1545|     33|        curl_url_cleanup(handle2);
 1546|    286|      return result;
 1547|    286|    }
 1548|       |
 1549|       |    /* apply the relative part to create a new URL */
 1550|    100|    redired_url = concat_url(oldurl, part);
 1551|    100|    free(oldurl);
 1552|    100|    if(!redired_url)
 1553|      0|      return CURLUE_OUT_OF_MEMORY;
 1554|       |
 1555|       |    /* now parse the new URL */
 1556|    100|    handle2 = curl_url();
 1557|    100|    if(!handle2) {
 1558|      0|      free(redired_url);
 1559|      0|      return CURLUE_OUT_OF_MEMORY;
 1560|      0|    }
 1561|    100|    result = parseurl(redired_url, handle2, flags);
 1562|    100|    free(redired_url);
 1563|    100|    if(!result)
 1564|     87|      mv_urlhandle(handle2, u);
 1565|     13|    else
 1566|     13|      curl_url_cleanup(handle2);
 1567|    100|    return result;
 1568|    100|  }
 1569|      0|  default:
 1570|      0|    return CURLUE_UNKNOWN_PART;
 1571|  3.70k|  }
 1572|    617|  DEBUGASSERT(storep);
 1573|    617|  {
 1574|    617|    const char *newp = part;
 1575|    617|    size_t nalloc = strlen(part);
 1576|       |
 1577|    617|    if(nalloc > CURL_MAX_INPUT_LENGTH)
 1578|       |      /* excessive input length */
 1579|      0|      return CURLUE_MALFORMED_INPUT;
 1580|       |
 1581|    617|    if(urlencode) {
 1582|    617|      const unsigned char *i;
 1583|    617|      char *o;
 1584|    617|      char *enc = malloc(nalloc * 3 + 1); /* for worst case! */
 1585|    617|      if(!enc)
 1586|      0|        return CURLUE_OUT_OF_MEMORY;
 1587|  29.1k|      for(i = (const unsigned char *)part, o = enc; *i; i++) {
 1588|  28.5k|        if((*i == ' ') && plusencode) {
 1589|      0|          *o = '+';
 1590|      0|          o++;
 1591|      0|        }
 1592|  28.5k|        else if(Curl_isunreserved(*i) ||
 1593|  28.5k|                ((*i == '/') && urlskipslash) ||
 1594|  28.5k|                ((*i == '=') && equalsencode)) {
 1595|  19.8k|          if((*i == '=') && equalsencode)
 1596|       |            /* only skip the first equals sign */
 1597|      0|            equalsencode = FALSE;
 1598|  19.8k|          *o = *i;
 1599|  19.8k|          o++;
 1600|  19.8k|        }
 1601|  8.62k|        else {
 1602|  8.62k|          msnprintf(o, 4, "%%%02x", *i);
 1603|  8.62k|          o += 3;
 1604|  8.62k|        }
 1605|  28.5k|      }
 1606|    617|      *o = 0; /* null-terminate */
 1607|    617|      newp = enc;
 1608|    617|    }
 1609|      0|    else {
 1610|      0|      char *p;
 1611|      0|      newp = strdup(part);
 1612|      0|      if(!newp)
 1613|      0|        return CURLUE_OUT_OF_MEMORY;
 1614|      0|      p = (char *)newp;
 1615|      0|      while(*p) {
 1616|       |        /* make sure percent encoded are lower case */
 1617|      0|        if((*p == '%') && ISXDIGIT(p[1]) && ISXDIGIT(p[2]) &&
 1618|      0|           (ISUPPER(p[1]) || ISUPPER(p[2]))) {
 1619|      0|          p[1] = (char)TOLOWER(p[1]);
 1620|      0|          p[2] = (char)TOLOWER(p[2]);
 1621|      0|          p += 3;
 1622|      0|        }
 1623|      0|        else
 1624|      0|          p++;
 1625|      0|      }
 1626|      0|    }
 1627|       |
 1628|    617|    if(appendquery) {
 1629|       |      /* Append the string onto the old query. Add a '&' separator if none is
 1630|       |         present at the end of the exsting query already */
 1631|      0|      size_t querylen = u->query ? strlen(u->query) : 0;
 1632|      0|      bool addamperand = querylen && (u->query[querylen -1] != '&');
 1633|      0|      if(querylen) {
 1634|      0|        size_t newplen = strlen(newp);
 1635|      0|        char *p = malloc(querylen + addamperand + newplen + 1);
 1636|      0|        if(!p) {
 1637|      0|          free((char *)newp);
 1638|      0|          return CURLUE_OUT_OF_MEMORY;
 1639|      0|        }
 1640|      0|        strcpy(p, u->query); /* original query */
 1641|      0|        if(addamperand)
 1642|      0|          p[querylen] = '&'; /* ampersand */
 1643|      0|        strcpy(&p[querylen + addamperand], newp); /* new suffix */
 1644|      0|        free((char *)newp);
 1645|      0|        free(*storep);
 1646|      0|        *storep = p;
 1647|      0|        return CURLUE_OK;
 1648|      0|      }
 1649|      0|    }
 1650|       |
 1651|    617|    if(what == CURLUPART_HOST) {
 1652|      0|      if(0 == strlen(newp) && (flags & CURLU_NO_AUTHORITY)) {
 1653|       |        /* Skip hostname check, it's allowed to be empty. */
 1654|      0|      }
 1655|      0|      else {
 1656|      0|        if(hostname_check(u, (char *)newp)) {
 1657|      0|          free((char *)newp);
 1658|      0|          return CURLUE_MALFORMED_INPUT;
 1659|      0|        }
 1660|      0|      }
 1661|      0|    }
 1662|       |
 1663|    617|    free(*storep);
 1664|    617|    *storep = (char *)newp;
 1665|    617|  }
 1666|       |  /* set after the string, to make it not assigned if the allocation above
 1667|       |     fails */
 1668|    617|  if(port)
 1669|      0|    u->portnum = port;
 1670|    617|  return CURLUE_OK;
 1671|    617|}
urlapi.c:free_urlhandle:
   74|  6.07k|{
   75|  6.07k|  free(u->scheme);
   76|  6.07k|  free(u->user);
   77|  6.07k|  free(u->password);
   78|  6.07k|  free(u->options);
   79|  6.07k|  free(u->host);
   80|  6.07k|  free(u->zoneid);
   81|  6.07k|  free(u->port);
   82|  6.07k|  free(u->path);
   83|  6.07k|  free(u->query);
   84|  6.07k|  free(u->fragment);
   85|  6.07k|  free(u->scratch);
   86|  6.07k|  free(u->temppath);
   87|  6.07k|}
urlapi.c:parseurl:
 1105|  3.08k|{
 1106|  3.08k|  CURLUcode result = seturl(url, u, flags);
 1107|  3.08k|  if(result) {
 1108|     68|    free_urlhandle(u);
 1109|     68|    memset(u, 0, sizeof(struct Curl_URL));
 1110|     68|  }
 1111|  3.08k|  return result;
 1112|  3.08k|}
urlapi.c:seturl:
  782|  3.08k|{
  783|  3.08k|  char *path;
  784|  3.08k|  bool path_alloced = FALSE;
  785|  3.08k|  bool uncpath = FALSE;
  786|  3.08k|  char *hostname;
  787|  3.08k|  char *query = NULL;
  788|  3.08k|  char *fragment = NULL;
  789|  3.08k|  CURLUcode result;
  790|  3.08k|  bool url_has_scheme = FALSE;
  791|  3.08k|  char schemebuf[MAX_SCHEME_LEN + 1];
  792|  3.08k|  const char *schemep = NULL;
  793|  3.08k|  size_t schemelen = 0;
  794|  3.08k|  size_t urllen;
  795|       |
  796|  3.08k|  DEBUGASSERT(url);
  797|       |
  798|       |  /*************************************************************
  799|       |   * Parse the URL.
  800|       |   ************************************************************/
  801|       |  /* allocate scratch area */
  802|  3.08k|  urllen = strlen(url);
  803|  3.08k|  if(urllen > CURL_MAX_INPUT_LENGTH)
  804|       |    /* excessive input length */
  805|      0|    return CURLUE_MALFORMED_INPUT;
  806|       |
  807|  3.08k|  path = u->scratch = malloc(urllen * 2 + 2);
  808|  3.08k|  if(!path)
  809|      0|    return CURLUE_OUT_OF_MEMORY;
  810|       |
  811|  3.08k|  hostname = &path[urllen + 1];
  812|  3.08k|  hostname[0] = 0;
  813|       |
  814|  3.08k|  if(Curl_is_absolute_url(url, schemebuf, sizeof(schemebuf))) {
  815|  2.80k|    url_has_scheme = TRUE;
  816|  2.80k|    schemelen = strlen(schemebuf);
  817|  2.80k|  }
  818|       |
  819|       |  /* handle the file: scheme */
  820|  3.08k|  if(url_has_scheme && strcasecompare(schemebuf, "file")) {
  821|       |    /* path has been allocated large enough to hold this */
  822|     49|    strcpy(path, &url[5]);
  823|       |
  824|     49|    u->scheme = strdup("file");
  825|     49|    if(!u->scheme)
  826|      0|      return CURLUE_OUT_OF_MEMORY;
  827|       |
  828|       |    /* Extra handling URLs with an authority component (i.e. that start with
  829|       |     * "file://")
  830|       |     *
  831|       |     * We allow omitted hostname (e.g. file:/<path>) -- valid according to
  832|       |     * RFC 8089, but not the (current) WHAT-WG URL spec.
  833|       |     */
  834|     49|    if(path[0] == '/' && path[1] == '/') {
  835|       |      /* swallow the two slashes */
  836|      3|      char *ptr = &path[2];
  837|       |
  838|       |      /*
  839|       |       * According to RFC 8089, a file: URL can be reliably dereferenced if:
  840|       |       *
  841|       |       *  o it has no/blank hostname, or
  842|       |       *
  843|       |       *  o the hostname matches "localhost" (case-insensitively), or
  844|       |       *
  845|       |       *  o the hostname is a FQDN that resolves to this machine, or
  846|       |       *
  847|       |       *  o it is an UNC String transformed to an URI (Windows only, RFC 8089
  848|       |       *    Appendix E.3).
  849|       |       *
  850|       |       * For brevity, we only consider URLs with empty, "localhost", or
  851|       |       * "127.0.0.1" hostnames as local, otherwise as an UNC String.
  852|       |       *
  853|       |       * Additionally, there is an exception for URLs with a Windows drive
  854|       |       * letter in the authority (which was accidentally omitted from RFC 8089
  855|       |       * Appendix E, but believe me, it was meant to be there. --MK)
  856|       |       */
  857|      3|      if(ptr[0] != '/' && !STARTS_WITH_URL_DRIVE_PREFIX(ptr)) {
  858|       |        /* the URL includes a host name, it must match "localhost" or
  859|       |           "127.0.0.1" to be valid */
  860|      1|        if(checkprefix("localhost/", ptr) ||
  861|      1|           checkprefix("127.0.0.1/", ptr)) {
  862|      0|          ptr += 9; /* now points to the slash after the host */
  863|      0|        }
  864|      1|        else {
  865|       |#if defined(WIN32)
  866|       |          size_t len;
  867|       |
  868|       |          /* the host name, NetBIOS computer name, can not contain disallowed
  869|       |             chars, and the delimiting slash character must be appended to the
  870|       |             host name */
  871|       |          path = strpbrk(ptr, "/\\:*?\"<>|");
  872|       |          if(!path || *path != '/')
  873|       |            return CURLUE_MALFORMED_INPUT;
  874|       |
  875|       |          len = path - ptr;
  876|       |          if(len) {
  877|       |            memcpy(hostname, ptr, len);
  878|       |            hostname[len] = 0;
  879|       |            uncpath = TRUE;
  880|       |          }
  881|       |
  882|       |          ptr -= 2; /* now points to the // before the host in UNC */
  883|       |#else
  884|       |          /* Invalid file://hostname/, expected localhost or 127.0.0.1 or
  885|       |             none */
  886|      1|          return CURLUE_MALFORMED_INPUT;
  887|      1|#endif
  888|      1|        }
  889|      1|      }
  890|       |
  891|      2|      path = ptr;
  892|      2|    }
  893|       |
  894|     48|    if(!uncpath)
  895|     48|        hostname = NULL; /* no host for file: URLs by default */
  896|       |
  897|     48|#if !defined(MSDOS) && !defined(WIN32) && !defined(__CYGWIN__)
  898|       |    /* Don't allow Windows drive letters when not in Windows.
  899|       |     * This catches both "file:/c:" and "file:c:" */
  900|     48|    if(('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) ||
  901|     48|       STARTS_WITH_URL_DRIVE_PREFIX(path)) {
  902|       |      /* File drive letters are only accepted in MSDOS/Windows */
  903|      0|      return CURLUE_MALFORMED_INPUT;
  904|      0|    }
  905|       |#else
  906|       |    /* If the path starts with a slash and a drive letter, ditch the slash */
  907|       |    if('/' == path[0] && STARTS_WITH_URL_DRIVE_PREFIX(&path[1])) {
  908|       |      /* This cannot be done with strcpy, as the memory chunks overlap! */
  909|       |      memmove(path, &path[1], strlen(&path[1]) + 1);
  910|       |    }
  911|       |#endif
  912|       |
  913|     48|  }
  914|  3.03k|  else {
  915|       |    /* clear path */
  916|  3.03k|    const char *p;
  917|  3.03k|    const char *hostp;
  918|  3.03k|    size_t len;
  919|  3.03k|    path[0] = 0;
  920|       |
  921|  3.03k|    if(url_has_scheme) {
  922|  2.75k|      int i = 0;
  923|  2.75k|      p = &url[schemelen + 1];
  924|  7.89k|      while(p && (*p == '/') && (i < 4)) {
  925|  5.14k|        p++;
  926|  5.14k|        i++;
  927|  5.14k|      }
  928|  2.75k|      if((i < 1) || (i>3))
  929|       |        /* less than one or more than three slashes */
  930|      1|        return CURLUE_MALFORMED_INPUT;
  931|       |
  932|  2.75k|      schemep = schemebuf;
  933|  2.75k|      if(!Curl_builtin_scheme(schemep) &&
  934|  2.75k|         !(flags & CURLU_NON_SUPPORT_SCHEME))
  935|      1|        return CURLUE_UNSUPPORTED_SCHEME;
  936|       |
  937|  2.74k|      if(junkscan(schemep, flags))
  938|      0|        return CURLUE_MALFORMED_INPUT;
  939|  2.74k|    }
  940|    286|    else {
  941|       |      /* no scheme! */
  942|       |
  943|    286|      if(!(flags & (CURLU_DEFAULT_SCHEME|CURLU_GUESS_SCHEME)))
  944|      0|        return CURLUE_MALFORMED_INPUT;
  945|    286|      if(flags & CURLU_DEFAULT_SCHEME)
  946|      0|        schemep = DEFAULT_SCHEME;
  947|       |
  948|       |      /*
  949|       |       * The URL was badly formatted, let's try without scheme specified.
  950|       |       */
  951|    286|      p = url;
  952|    286|    }
  953|  3.03k|    hostp = p; /* host name starts here */
  954|       |
  955|  41.5k|    while(*p && !HOSTNAME_END(*p)) /* find end of host name */
  956|  38.5k|      p++;
  957|       |
  958|  3.03k|    len = p - hostp;
  959|  3.03k|    if(len) {
  960|  3.03k|      memcpy(hostname, hostp, len);
  961|  3.03k|      hostname[len] = 0;
  962|  3.03k|    }
  963|      2|    else {
  964|      2|      if(!(flags & CURLU_NO_AUTHORITY))
  965|      2|        return CURLUE_MALFORMED_INPUT;
  966|      2|    }
  967|       |
  968|  3.03k|    len = strlen(p);
  969|  3.03k|    memcpy(path, p, len);
  970|  3.03k|    path[len] = 0;
  971|       |
  972|  3.03k|    if(schemep) {
  973|  2.74k|      u->scheme = strdup(schemep);
  974|  2.74k|      if(!u->scheme)
  975|      0|        return CURLUE_OUT_OF_MEMORY;
  976|  2.74k|    }
  977|  3.03k|  }
  978|       |
  979|  3.08k|  if(junkscan(path, flags))
  980|     13|    return CURLUE_MALFORMED_INPUT;
  981|       |
  982|  3.06k|  if((flags & CURLU_URLENCODE) && path[0]) {
  983|       |    /* worst case output length is 3x the original! */
  984|    103|    char *newp = malloc(strlen(path) * 3);
  985|    103|    if(!newp)
  986|      0|      return CURLUE_OUT_OF_MEMORY;
  987|    103|    path_alloced = TRUE;
  988|    103|    strcpy_url(newp, path, TRUE); /* consider it relative */
  989|    103|    u->temppath = path = newp;
  990|    103|  }
  991|       |
  992|  3.06k|  fragment = strchr(path, '#');
  993|  3.06k|  if(fragment) {
  994|     23|    *fragment++ = 0;
  995|     23|    if(fragment[0]) {
  996|     21|      u->fragment = strdup(fragment);
  997|     21|      if(!u->fragment)
  998|      0|        return CURLUE_OUT_OF_MEMORY;
  999|     21|    }
 1000|     23|  }
 1001|       |
 1002|  3.06k|  query = strchr(path, '?');
 1003|  3.06k|  if(query) {
 1004|    149|    *query++ = 0;
 1005|       |    /* done even if the query part is a blank string */
 1006|    149|    u->query = strdup(query);
 1007|    149|    if(!u->query)
 1008|      0|      return CURLUE_OUT_OF_MEMORY;
 1009|    149|  }
 1010|       |
 1011|  3.06k|  if(!path[0])
 1012|       |    /* if there's no path left set, unset */
 1013|    629|    path = NULL;
 1014|  2.43k|  else {
 1015|  2.43k|    if(!(flags & CURLU_PATH_AS_IS)) {
 1016|       |      /* remove ../ and ./ sequences according to RFC3986 */
 1017|  2.43k|      char *newp = Curl_dedotdotify(path);
 1018|  2.43k|      if(!newp)
 1019|      0|        return CURLUE_OUT_OF_MEMORY;
 1020|       |
 1021|  2.43k|      if(strcmp(newp, path)) {
 1022|       |        /* if we got a new version */
 1023|    102|        if(path_alloced)
 1024|      1|          Curl_safefree(u->temppath);
 1025|    102|        u->temppath = path = newp;
 1026|    102|        path_alloced = TRUE;
 1027|    102|      }
 1028|  2.33k|      else
 1029|  2.33k|        free(newp);
 1030|  2.43k|    }
 1031|       |
 1032|  2.43k|    u->path = path_alloced?path:strdup(path);
 1033|  2.43k|    if(!u->path)
 1034|      0|      return CURLUE_OUT_OF_MEMORY;
 1035|  2.43k|    u->temppath = NULL; /* used now */
 1036|  2.43k|  }
 1037|       |
 1038|  3.06k|  if(hostname) {
 1039|  3.02k|    char normalized_ipv4[sizeof("255.255.255.255") + 1];
 1040|       |    /*
 1041|       |     * Parse the login details and strip them out of the host name.
 1042|       |     */
 1043|  3.02k|    if(junkscan(hostname, flags))
 1044|     12|      return CURLUE_MALFORMED_INPUT;
 1045|       |
 1046|  3.00k|    result = parse_hostname_login(u, &hostname, flags);
 1047|  3.00k|    if(result)
 1048|      0|      return result;
 1049|       |
 1050|  3.00k|    result = Curl_parse_port(u, hostname, url_has_scheme);
 1051|  3.00k|    if(result)
 1052|     20|      return result;
 1053|       |
 1054|  2.98k|    if(0 == strlen(hostname) && (flags & CURLU_NO_AUTHORITY)) {
 1055|       |      /* Skip hostname check, it's allowed to be empty. */
 1056|      0|      u->host = strdup("");
 1057|      0|    }
 1058|  2.98k|    else {
 1059|  2.98k|      if(ipv4_normalize(hostname, normalized_ipv4, sizeof(normalized_ipv4)))
 1060|  2.20k|        u->host = strdup(normalized_ipv4);
 1061|    786|      else {
 1062|    786|        result = decode_host(hostname, &u->host);
 1063|    786|        if(result)
 1064|      1|          return result;
 1065|    785|        result = hostname_check(u, u->host);
 1066|    785|        if(result)
 1067|     17|          return result;
 1068|    785|      }
 1069|  2.98k|    }
 1070|  2.97k|    if(!u->host)
 1071|      0|      return CURLUE_OUT_OF_MEMORY;
 1072|  2.97k|    if((flags & CURLU_GUESS_SCHEME) && !schemep) {
 1073|       |      /* legacy curl-style guess based on host name */
 1074|    253|      if(checkprefix("ftp.", hostname))
 1075|      3|        schemep = "ftp";
 1076|    250|      else if(checkprefix("dict.", hostname))
 1077|      4|        schemep = "dict";
 1078|    246|      else if(checkprefix("ldap.", hostname))
 1079|      2|        schemep = "ldap";
 1080|    244|      else if(checkprefix("imap.", hostname))
 1081|      1|        schemep = "imap";
 1082|    243|      else if(checkprefix("smtp.", hostname))
 1083|      1|        schemep = "smtp";
 1084|    242|      else if(checkprefix("pop3.", hostname))
 1085|      1|        schemep = "pop3";
 1086|    241|      else
 1087|    241|        schemep = "http";
 1088|       |
 1089|    253|      u->scheme = strdup(schemep);
 1090|    253|      if(!u->scheme)
 1091|      0|        return CURLUE_OUT_OF_MEMORY;
 1092|    253|    }
 1093|  2.97k|  }
 1094|       |
 1095|  3.01k|  Curl_safefree(u->scratch);
 1096|  3.01k|  Curl_safefree(u->temppath);
 1097|       |
 1098|  3.01k|  return CURLUE_OK;
 1099|  3.06k|}
urlapi.c:junkscan:
  582|  8.85k|{
  583|  8.85k|  if(part) {
  584|  8.85k|    static const char badbytes[]={
  585|  8.85k|      /* */ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  586|  8.85k|      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  587|  8.85k|      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  588|  8.85k|      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  589|  8.85k|      0x7f, 0x00 /* null-terminate */
  590|  8.85k|    };
  591|  8.85k|    size_t n = strlen(part);
  592|  8.85k|    size_t nfine = strcspn(part, badbytes);
  593|  8.85k|    if(nfine != n)
  594|       |      /* since we don't know which part is scanned, return a generic error
  595|       |         code */
  596|     18|      return TRUE;
  597|  8.83k|    if(!(flags & CURLU_ALLOW_SPACE) && strchr(part, ' '))
  598|      7|      return TRUE;
  599|  8.83k|  }
  600|  8.82k|  return FALSE;
  601|  8.85k|}
urlapi.c:strcpy_url:
  186|    203|{
  187|       |  /* we must add this with whitespace-replacing */
  188|    203|  bool left = TRUE;
  189|    203|  const unsigned char *iptr;
  190|    203|  char *optr = output;
  191|    203|  const unsigned char *host_sep = (const unsigned char *) url;
  192|       |
  193|    203|  if(!relative)
  194|      8|    host_sep = (const unsigned char *) find_host_sep(url);
  195|       |
  196|    203|  for(iptr = (unsigned char *)url;    /* read from here */
  197|  4.15k|      *iptr;         /* until zero byte */
  198|  3.95k|      iptr++) {
  199|       |
  200|  3.95k|    if(iptr < host_sep) {
  201|    103|      *optr++ = *iptr;
  202|    103|      continue;
  203|    103|    }
  204|       |
  205|  3.85k|    if(*iptr == ' ') {
  206|    124|      if(left) {
  207|     89|        *optr++='%'; /* add a '%' */
  208|     89|        *optr++='2'; /* add a '2' */
  209|     89|        *optr++='0'; /* add a '0' */
  210|     89|      }
  211|     35|      else
  212|     35|        *optr++='+'; /* add a '+' here */
  213|    124|      continue;
  214|    124|    }
  215|       |
  216|  3.72k|    if(*iptr == '?')
  217|     62|      left = FALSE;
  218|       |
  219|  3.72k|    if(urlchar_needs_escaping(*iptr)) {
  220|    407|      msnprintf(optr, 4, "%%%02x", *iptr);
  221|    407|      optr += 3;
  222|    407|    }
  223|  3.32k|    else
  224|  3.32k|      *optr++ = *iptr;
  225|  3.72k|  }
  226|    203|  *optr = 0; /* null-terminate output buffer */
  227|       |
  228|    203|}
urlapi.c:find_host_sep:
  104|     16|{
  105|     16|  const char *sep;
  106|     16|  const char *query;
  107|       |
  108|       |  /* Find the start of the hostname */
  109|     16|  sep = strstr(url, "//");
  110|     16|  if(!sep)
  111|     14|    sep = url;
  112|      2|  else
  113|      2|    sep += 2;
  114|       |
  115|     16|  query = strchr(sep, '?');
  116|     16|  sep = strchr(sep, '/');
  117|       |
  118|     16|  if(!sep)
  119|      4|    sep = url + strlen(url);
  120|       |
  121|     16|  if(!query)
  122|     16|    query = url + strlen(url);
  123|       |
  124|     16|  return sep < query ? sep : query;
  125|     16|}
urlapi.c:urlchar_needs_escaping:
  133|  5.99k|{
  134|  5.99k|  return !(ISCNTRL(c) || ISSPACE(c) || ISGRAPH(c));
  135|  5.99k|}
urlapi.c:parse_hostname_login:
  431|  3.00k|{
  432|  3.00k|  CURLUcode result = CURLUE_OK;
  433|  3.00k|  CURLcode ccode;
  434|  3.00k|  char *userp = NULL;
  435|  3.00k|  char *passwdp = NULL;
  436|  3.00k|  char *optionsp = NULL;
  437|  3.00k|  const struct Curl_handler *h = NULL;
  438|       |
  439|       |  /* At this point, we're hoping all the other special cases have
  440|       |   * been taken care of, so conn->host.name is at most
  441|       |   *    [user[:password][;options]]@]hostname
  442|       |   *
  443|       |   * We need somewhere to put the embedded details, so do that first.
  444|       |   */
  445|       |
  446|  3.00k|  char *ptr = strchr(*hostname, '@');
  447|  3.00k|  char *login = *hostname;
  448|       |
  449|  3.00k|  if(!ptr)
  450|  2.68k|    goto out;
  451|       |
  452|       |  /* We will now try to extract the
  453|       |   * possible login information in a string like:
  454|       |   * ftp://user:password@ftp.my.site:8021/README */
  455|    326|  *hostname = ++ptr;
  456|       |
  457|       |  /* if this is a known scheme, get some details */
  458|    326|  if(u->scheme)
  459|    242|    h = Curl_builtin_scheme(u->scheme);
  460|       |
  461|       |  /* We could use the login information in the URL so extract it. Only parse
  462|       |     options if the handler says we should. Note that 'h' might be NULL! */
  463|    326|  ccode = Curl_parse_login_details(login, ptr - login - 1,
  464|    326|                                   &userp, &passwdp,
  465|    326|                                   (h && (h->flags & PROTOPT_URLOPTIONS)) ?
  466|    186|                                   &optionsp:NULL);
  467|    326|  if(ccode) {
  468|      0|    result = CURLUE_MALFORMED_INPUT;
  469|      0|    goto out;
  470|      0|  }
  471|       |
  472|    326|  if(userp) {
  473|    265|    if(flags & CURLU_DISALLOW_USER) {
  474|       |      /* Option DISALLOW_USER is set and url contains username. */
  475|      0|      result = CURLUE_USER_NOT_ALLOWED;
  476|      0|      goto out;
  477|      0|    }
  478|       |
  479|    265|    u->user = userp;
  480|    265|  }
  481|       |
  482|    326|  if(passwdp)
  483|    146|    u->password = passwdp;
  484|       |
  485|    326|  if(optionsp)
  486|     64|    u->options = optionsp;
  487|       |
  488|    326|  return CURLUE_OK;
  489|  2.68k|  out:
  490|       |
  491|  2.68k|  free(userp);
  492|  2.68k|  free(passwdp);
  493|  2.68k|  free(optionsp);
  494|       |
  495|  2.68k|  return result;
  496|    326|}
urlapi.c:ipv4_normalize:
  680|  2.98k|{
  681|  2.98k|  bool done = FALSE;
  682|  2.98k|  int n = 0;
  683|  2.98k|  const char *c = hostname;
  684|  2.98k|  unsigned long parts[4] = {0, 0, 0, 0};
  685|       |
  686|  10.3k|  while(!done) {
  687|  8.12k|    char *endp;
  688|  8.12k|    unsigned long l;
  689|  8.12k|    if((*c < '0') || (*c > '9'))
  690|       |      /* most importantly this doesn't allow a leading plus or minus */
  691|    623|      return FALSE;
  692|  7.50k|    l = strtoul(c, &endp, 0);
  693|       |
  694|       |    /* overflow or nothing parsed at all */
  695|  7.50k|    if(((l == ULONG_MAX) && (errno == ERANGE)) ||  (endp == c))
  696|      1|      return FALSE;
  697|       |
  698|  7.50k|#if SIZEOF_LONG > 4
  699|       |    /* a value larger than 32 bits */
  700|  7.50k|    if(l > UINT_MAX)
  701|      2|      return FALSE;
  702|  7.50k|#endif
  703|       |
  704|  7.50k|    parts[n] = l;
  705|  7.50k|    c = endp;
  706|       |
  707|  7.50k|    switch (*c) {
  708|  5.14k|    case '.' :
  709|  5.14k|      if(n == 3)
  710|      5|        return FALSE;
  711|  5.14k|      n++;
  712|  5.14k|      c++;
  713|  5.14k|      break;
  714|       |
  715|  2.24k|    case '\0':
  716|  2.24k|      done = TRUE;
  717|  2.24k|      break;
  718|       |
  719|    116|    default:
  720|    116|      return FALSE;
  721|  7.50k|    }
  722|  7.50k|  }
  723|       |
  724|       |  /* this is deemed a valid IPv4 numerical address */
  725|       |
  726|  2.24k|  switch(n) {
  727|    560|  case 0: /* a -- 32 bits */
  728|    560|    msnprintf(outp, olen, "%u.%u.%u.%u",
  729|    560|              parts[0] >> 24, (parts[0] >> 16) & 0xff,
  730|    560|              (parts[0] >> 8) & 0xff, parts[0] & 0xff);
  731|    560|    break;
  732|    119|  case 1: /* a.b -- 8.24 bits */
  733|    119|    if((parts[0] > 0xff) || (parts[1] > 0xffffff))
  734|      1|      return FALSE;
  735|    118|    msnprintf(outp, olen, "%u.%u.%u.%u",
  736|    118|              parts[0], (parts[1] >> 16) & 0xff,
  737|    118|              (parts[1] >> 8) & 0xff, parts[1] & 0xff);
  738|    118|    break;
  739|     64|  case 2: /* a.b.c -- 8.8.16 bits */
  740|     64|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xffff))
  741|      7|      return FALSE;
  742|     57|    msnprintf(outp, olen, "%u.%u.%u.%u",
  743|     57|              parts[0], parts[1], (parts[2] >> 8) & 0xff,
  744|     57|              parts[2] & 0xff);
  745|     57|    break;
  746|  1.49k|  case 3: /* a.b.c.d -- 8.8.8.8 bits */
  747|  1.49k|    if((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff) ||
  748|  1.49k|       (parts[3] > 0xff))
  749|     31|      return FALSE;
  750|  1.46k|    msnprintf(outp, olen, "%u.%u.%u.%u",
  751|  1.46k|              parts[0], parts[1], parts[2], parts[3]);
  752|  1.46k|    break;
  753|  2.24k|  }
  754|  2.20k|  return TRUE;
  755|  2.24k|}
urlapi.c:decode_host:
  759|    786|{
  760|    786|  char *per = NULL;
  761|    786|  if(hostname[0] != '[')
  762|       |    /* only decode if not an ipv6 numerical */
  763|    778|    per = strchr(hostname, '%');
  764|    786|  if(!per) {
  765|    739|    *outp = strdup(hostname);
  766|    739|    if(!*outp)
  767|      0|      return CURLUE_OUT_OF_MEMORY;
  768|    739|  }
  769|     47|  else {
  770|       |    /* might be encoded */
  771|     47|    size_t dlen;
  772|     47|    CURLcode result = Curl_urldecode(NULL, hostname, 0,
  773|     47|                                     outp, &dlen, REJECT_CTRL);
  774|     47|    if(result)
  775|      1|      return CURLUE_MALFORMED_INPUT;
  776|     47|  }
  777|       |
  778|    785|  return CURLUE_OK;
  779|    786|}
urlapi.c:mv_urlhandle:
   93|  3.01k|{
   94|  3.01k|  free_urlhandle(to);
   95|  3.01k|  *to = *from;
   96|  3.01k|  free(from);
   97|  3.01k|}
urlapi.c:concat_url:
  269|    100|{
  270|       |  /***
  271|       |   TRY to append this new path to the old URL
  272|       |   to the right of the host part. Oh crap, this is doomed to cause
  273|       |   problems in the future...
  274|       |  */
  275|    100|  char *newest;
  276|    100|  char *protsep;
  277|    100|  char *pathsep;
  278|    100|  size_t newlen;
  279|    100|  bool host_changed = FALSE;
  280|       |
  281|    100|  const char *useurl = relurl;
  282|    100|  size_t urllen;
  283|       |
  284|       |  /* we must make our own copy of the URL to play with, as it may
  285|       |     point to read-only data */
  286|    100|  char *url_clone = strdup(base);
  287|       |
  288|    100|  if(!url_clone)
  289|      0|    return NULL; /* skip out of this NOW */
  290|       |
  291|       |  /* protsep points to the start of the host name */
  292|    100|  protsep = strstr(url_clone, "//");
  293|    100|  if(!protsep)
  294|      0|    protsep = url_clone;
  295|    100|  else
  296|    100|    protsep += 2; /* pass the slashes */
  297|       |
  298|    100|  if('/' != relurl[0]) {
  299|     87|    int level = 0;
  300|       |
  301|       |    /* First we need to find out if there's a ?-letter in the URL,
  302|       |       and cut it and the right-side of that off */
  303|     87|    pathsep = strchr(protsep, '?');
  304|     87|    if(pathsep)
  305|      9|      *pathsep = 0;
  306|       |
  307|       |    /* we have a relative path to append to the last slash if there's one
  308|       |       available, or if the new URL is just a query string (starts with a
  309|       |       '?')  we append the new one at the end of the entire currently worked
  310|       |       out URL */
  311|     87|    if(useurl[0] != '?') {
  312|     87|      pathsep = strrchr(protsep, '/');
  313|     87|      if(pathsep)
  314|     87|        *pathsep = 0;
  315|     87|    }
  316|       |
  317|       |    /* Check if there's any slash after the host name, and if so, remember
  318|       |       that position instead */
  319|     87|    pathsep = strchr(protsep, '/');
  320|     87|    if(pathsep)
  321|     28|      protsep = pathsep + 1;
  322|     59|    else
  323|     59|      protsep = NULL;
  324|       |
  325|       |    /* now deal with one "./" or any amount of "../" in the newurl
  326|       |       and act accordingly */
  327|       |
  328|     87|    if((useurl[0] == '.') && (useurl[1] == '/'))
  329|      6|      useurl += 2; /* just skip the "./" */
  330|       |
  331|     92|    while((useurl[0] == '.') &&
  332|     92|          (useurl[1] == '.') &&
  333|     92|          (useurl[2] == '/')) {
  334|      5|      level++;
  335|      5|      useurl += 3; /* pass the "../" */
  336|      5|    }
  337|       |
  338|     87|    if(protsep) {
  339|     31|      while(level--) {
  340|       |        /* cut off one more level from the right of the original URL */
  341|      4|        pathsep = strrchr(protsep, '/');
  342|      4|        if(pathsep)
  343|      3|          *pathsep = 0;
  344|      1|        else {
  345|      1|          *protsep = 0;
  346|      1|          break;
  347|      1|        }
  348|      4|      }
  349|     28|    }
  350|     87|  }
  351|     13|  else {
  352|       |    /* We got a new absolute path for this server */
  353|       |
  354|     13|    if(relurl[1] == '/') {
  355|       |      /* the new URL starts with //, just keep the protocol part from the
  356|       |         original one */
  357|      8|      *protsep = 0;
  358|      8|      useurl = &relurl[2]; /* we keep the slashes from the original, so we
  359|       |                              skip the new ones */
  360|      8|      host_changed = TRUE;
  361|      8|    }
  362|      5|    else {
  363|       |      /* cut off the original URL from the first slash, or deal with URLs
  364|       |         without slash */
  365|      5|      pathsep = strchr(protsep, '/');
  366|      5|      if(pathsep) {
  367|       |        /* When people use badly formatted URLs, such as
  368|       |           "http://www.url.com?dir=/home/daniel" we must not use the first
  369|       |           slash, if there's a ?-letter before it! */
  370|      5|        char *sep = strchr(protsep, '?');
  371|      5|        if(sep && (sep < pathsep))
  372|      0|          pathsep = sep;
  373|      5|        *pathsep = 0;
  374|      5|      }
  375|      0|      else {
  376|       |        /* There was no slash. Now, since we might be operating on a badly
  377|       |           formatted URL, such as "http://www.url.com?id=2380" which doesn't
  378|       |           use a slash separator as it is supposed to, we need to check for a
  379|       |           ?-letter as well! */
  380|      0|        pathsep = strchr(protsep, '?');
  381|      0|        if(pathsep)
  382|      0|          *pathsep = 0;
  383|      0|      }
  384|      5|    }
  385|     13|  }
  386|       |
  387|       |  /* If the new part contains a space, this is a mighty stupid redirect
  388|       |     but we still make an effort to do "right". To the left of a '?'
  389|       |     letter we replace each space with %20 while it is replaced with '+'
  390|       |     on the right side of the '?' letter.
  391|       |  */
  392|    100|  newlen = strlen_url(useurl, !host_changed);
  393|       |
  394|    100|  urllen = strlen(url_clone);
  395|       |
  396|    100|  newest = malloc(urllen + 1 + /* possible slash */
  397|    100|                  newlen + 1 /* zero byte */);
  398|       |
  399|    100|  if(!newest) {
  400|      0|    free(url_clone); /* don't leak this */
  401|      0|    return NULL;
  402|      0|  }
  403|       |
  404|       |  /* copy over the root url part */
  405|    100|  memcpy(newest, url_clone, urllen);
  406|       |
  407|       |  /* check if we need to append a slash */
  408|    100|  if(('/' == useurl[0]) || (protsep && !*protsep) || ('?' == useurl[0]))
  409|     27|    ;
  410|     73|  else
  411|     73|    newest[urllen++]='/';
  412|       |
  413|       |  /* then append the new piece on the right side */
  414|    100|  strcpy_url(&newest[urllen], useurl, !host_changed);
  415|       |
  416|    100|  free(url_clone);
  417|       |
  418|    100|  return newest;
  419|    100|}
urlapi.c:strlen_url:
  144|    100|{
  145|    100|  const unsigned char *ptr;
  146|    100|  size_t newlen = 0;
  147|    100|  bool left = TRUE; /* left side of the ? */
  148|    100|  const unsigned char *host_sep = (const unsigned char *) url;
  149|       |
  150|    100|  if(!relative)
  151|      8|    host_sep = (const unsigned char *) find_host_sep(url);
  152|       |
  153|  2.58k|  for(ptr = (unsigned char *)url; *ptr; ptr++) {
  154|       |
  155|  2.48k|    if(ptr < host_sep) {
  156|    103|      ++newlen;
  157|    103|      continue;
  158|    103|    }
  159|       |
  160|  2.38k|    if(*ptr == ' ') {
  161|    124|      if(left)
  162|     89|        newlen += 3;
  163|     35|      else
  164|     35|        newlen++;
  165|    124|      continue;
  166|    124|    }
  167|       |
  168|  2.26k|    if (*ptr == '?')
  169|     38|      left = FALSE;
  170|       |
  171|  2.26k|    if(urlchar_needs_escaping(*ptr))
  172|    362|      newlen += 2;
  173|       |
  174|  2.26k|    newlen++;
  175|  2.26k|  }
  176|       |
  177|    100|  return newlen;
  178|    100|}
urlapi.c:hostname_check:
  604|    785|{
  605|    785|  size_t len;
  606|    785|  size_t hlen = strlen(hostname);
  607|       |
  608|    785|  if(hostname[0] == '[') {
  609|      8|#ifdef ENABLE_IPV6
  610|      8|    char dest[16]; /* fits a binary IPv6 address */
  611|      8|#endif
  612|      8|    const char *l = "0123456789abcdefABCDEF:.";
  613|      8|    if(hlen < 4) /* '[::]' is the shortest possible valid string */
  614|      2|      return CURLUE_MALFORMED_INPUT;
  615|      6|    hostname++;
  616|      6|    hlen -= 2;
  617|       |
  618|      6|    if(hostname[hlen] != ']')
  619|      1|      return CURLUE_MALFORMED_INPUT;
  620|       |
  621|       |    /* only valid letters are ok */
  622|      5|    len = strspn(hostname, l);
  623|      5|    if(hlen != len) {
  624|      4|      hlen = len;
  625|      4|      if(hostname[len] == '%') {
  626|       |        /* this could now be '%[zone id]' */
  627|      2|        char zoneid[16];
  628|      2|        int i = 0;
  629|      2|        char *h = &hostname[len + 1];
  630|       |        /* pass '25' if present and is a url encoded percent sign */
  631|      2|        if(!strncmp(h, "25", 2) && h[2] && (h[2] != ']'))
  632|      0|          h += 2;
  633|      5|        while(*h && (*h != ']') && (i < 15))
  634|      3|          zoneid[i++] = *h++;
  635|      2|        if(!i || (']' != *h))
  636|      0|          return CURLUE_MALFORMED_INPUT;
  637|      2|        zoneid[i] = 0;
  638|      2|        u->zoneid = strdup(zoneid);
  639|      2|        if(!u->zoneid)
  640|      0|          return CURLUE_OUT_OF_MEMORY;
  641|      2|        hostname[len] = ']'; /* insert end bracket */
  642|      2|        hostname[len + 1] = 0; /* terminate the hostname */
  643|      2|      }
  644|      2|      else
  645|      2|        return CURLUE_MALFORMED_INPUT;
  646|       |      /* hostname is fine */
  647|      4|    }
  648|      3|#ifdef ENABLE_IPV6
  649|      3|    hostname[hlen] = 0; /* end the address there */
  650|      3|    if(1 != Curl_inet_pton(AF_INET6, hostname, dest))
  651|      3|      return CURLUE_MALFORMED_INPUT;
  652|      0|    hostname[hlen] = ']'; /* restore ending bracket */
  653|      0|#endif
  654|      0|  }
  655|    777|  else {
  656|       |    /* letters from the second string is not ok */
  657|    777|    len = strcspn(hostname, " \r\n");
  658|    777|    if(hlen != len)
  659|       |      /* hostname with bad content */
  660|      1|      return CURLUE_MALFORMED_INPUT;
  661|    777|  }
  662|    776|  if(!hostname[0])
  663|      8|    return CURLUE_NO_HOST;
  664|    768|  return CURLUE_OK;
  665|    776|}

Curl_auth_create_plain_message:
   64|      2|{
   65|      2|  char *plainauth;
   66|      2|  size_t plainlen;
   67|      2|  size_t zlen;
   68|      2|  size_t clen;
   69|      2|  size_t plen;
   70|       |
   71|      2|  zlen = (authzid == NULL ? 0 : strlen(authzid));
   72|      2|  clen = strlen(authcid);
   73|      2|  plen = strlen(passwd);
   74|       |
   75|       |  /* Compute binary message length. Check for overflows. */
   76|      2|  if((zlen > SIZE_T_MAX/4) || (clen > SIZE_T_MAX/4) ||
   77|      2|     (plen > (SIZE_T_MAX/2 - 2)))
   78|      0|    return CURLE_OUT_OF_MEMORY;
   79|      2|  plainlen = zlen + clen + plen + 2;
   80|       |
   81|      2|  plainauth = malloc(plainlen + 1);
   82|      2|  if(!plainauth)
   83|      0|    return CURLE_OUT_OF_MEMORY;
   84|       |
   85|       |  /* Calculate the reply */
   86|      2|  if(zlen)
   87|      0|    memcpy(plainauth, authzid, zlen);
   88|      2|  plainauth[zlen] = '\0';
   89|      2|  memcpy(plainauth + zlen + 1, authcid, clen);
   90|      2|  plainauth[zlen + clen + 1] = '\0';
   91|      2|  memcpy(plainauth + zlen + clen + 2, passwd, plen);
   92|      2|  plainauth[plainlen] = '\0';
   93|      2|  Curl_bufref_set(out, plainauth, plainlen, curl_free);
   94|      2|  return CURLE_OK;
   95|      2|}
Curl_auth_create_login_message:
  111|     16|{
  112|     16|  Curl_bufref_set(out, valuep, strlen(valuep), NULL);
  113|     16|  return CURLE_OK;
  114|     16|}

Curl_auth_create_cram_md5_message:
   62|     33|{
   63|     33|  struct HMAC_context *ctxt;
   64|     33|  unsigned char digest[MD5_DIGEST_LEN];
   65|     33|  char *response;
   66|       |
   67|       |  /* Compute the digest using the password as the key */
   68|     33|  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
   69|     33|                        (const unsigned char *) passwdp,
   70|     33|                        curlx_uztoui(strlen(passwdp)));
   71|     33|  if(!ctxt)
   72|      0|    return CURLE_OUT_OF_MEMORY;
   73|       |
   74|       |  /* Update the digest with the given challenge */
   75|     33|  if(Curl_bufref_len(chlg))
   76|     18|    Curl_HMAC_update(ctxt, Curl_bufref_ptr(chlg),
   77|     18|                     curlx_uztoui(Curl_bufref_len(chlg)));
   78|       |
   79|       |  /* Finalise the digest */
   80|     33|  Curl_HMAC_final(ctxt, digest);
   81|       |
   82|       |  /* Generate the response */
   83|     33|  response = aprintf(
   84|     33|    "%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
   85|     33|    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
   86|     33|    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
   87|     33|    digest[11], digest[12], digest[13], digest[14], digest[15]);
   88|     33|  if(!response)
   89|      0|    return CURLE_OUT_OF_MEMORY;
   90|       |
   91|     33|  Curl_bufref_set(out, response, strlen(response), curl_free);
   92|     33|  return CURLE_OK;
   93|     33|}

Curl_auth_digest_get_pair:
   76|    637|{
   77|    637|  int c;
   78|    637|  bool starts_with_quote = FALSE;
   79|    637|  bool escape = FALSE;
   80|       |
   81|  4.93k|  for(c = DIGEST_MAX_VALUE_LENGTH - 1; (*str && (*str != '=') && c--);)
   82|  4.29k|    *value++ = *str++;
   83|    637|  *value = 0;
   84|       |
   85|    637|  if('=' != *str++)
   86|       |    /* eek, no match */
   87|    131|    return FALSE;
   88|       |
   89|    506|  if('\"' == *str) {
   90|       |    /* This starts with a quote so it must end with one as well! */
   91|    372|    str++;
   92|    372|    starts_with_quote = TRUE;
   93|    372|  }
   94|       |
   95|  7.38k|  for(c = DIGEST_MAX_CONTENT_LENGTH - 1; *str && c--; str++) {
   96|  6.88k|    switch(*str) {
   97|    188|    case '\\':
   98|    188|      if(!escape) {
   99|       |        /* possibly the start of an escaped quote */
  100|     99|        escape = TRUE;
  101|     99|        *content++ = '\\'; /* Even though this is an escape character, we still
  102|       |                              store it as-is in the target buffer */
  103|     99|        continue;
  104|     99|      }
  105|     89|      break;
  106|       |
  107|    205|    case ',':
  108|    205|      if(!starts_with_quote) {
  109|       |        /* This signals the end of the content if we didn't get a starting
  110|       |           quote and then we do "sloppy" parsing */
  111|     97|        c = 0; /* the end */
  112|     97|        continue;
  113|     97|      }
  114|    108|      break;
  115|       |
  116|    108|    case '\r':
  117|      0|    case '\n':
  118|       |      /* end of string */
  119|      0|      c = 0;
  120|      0|      continue;
  121|       |
  122|    794|    case '\"':
  123|    794|      if(!escape && starts_with_quote) {
  124|       |        /* end of string */
  125|    326|        c = 0;
  126|    326|        continue;
  127|    326|      }
  128|    468|      break;
  129|  6.88k|    }
  130|       |
  131|  6.35k|    escape = FALSE;
  132|  6.35k|    *content++ = *str;
  133|  6.35k|  }
  134|       |
  135|    506|  *content = 0;
  136|    506|  *endptr = str;
  137|       |
  138|    506|  return TRUE;
  139|    506|}
Curl_auth_is_digest_supported:
  312|    145|{
  313|    145|  return TRUE;
  314|    145|}
Curl_auth_create_digest_md5_message:
  339|      5|{
  340|      5|  size_t i;
  341|      5|  struct MD5_context *ctxt;
  342|      5|  char *response = NULL;
  343|      5|  unsigned char digest[MD5_DIGEST_LEN];
  344|      5|  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  345|      5|  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  346|      5|  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  347|      5|  char nonce[64];
  348|      5|  char realm[128];
  349|      5|  char algorithm[64];
  350|      5|  char qop_options[64];
  351|      5|  int qop_values;
  352|      5|  char cnonce[33];
  353|      5|  char nonceCount[] = "00000001";
  354|      5|  char method[]     = "AUTHENTICATE";
  355|      5|  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  356|      5|  char *spn         = NULL;
  357|       |
  358|       |  /* Decode the challenge message */
  359|      5|  CURLcode result = auth_decode_digest_md5_message(chlg,
  360|      5|                                                   nonce, sizeof(nonce),
  361|      5|                                                   realm, sizeof(realm),
  362|      5|                                                   algorithm,
  363|      5|                                                   sizeof(algorithm),
  364|      5|                                                   qop_options,
  365|      5|                                                   sizeof(qop_options));
  366|      5|  if(result)
  367|      5|    return result;
  368|       |
  369|       |  /* We only support md5 sessions */
  370|      0|  if(strcmp(algorithm, "md5-sess") != 0)
  371|      0|    return CURLE_BAD_CONTENT_ENCODING;
  372|       |
  373|       |  /* Get the qop-values from the qop-options */
  374|      0|  result = auth_digest_get_qop_values(qop_options, &qop_values);
  375|      0|  if(result)
  376|      0|    return result;
  377|       |
  378|       |  /* We only support auth quality-of-protection */
  379|      0|  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
  380|      0|    return CURLE_BAD_CONTENT_ENCODING;
  381|       |
  382|       |  /* Generate 32 random hex chars, 32 bytes + 1 zero termination */
  383|      0|  result = Curl_rand_hex(data, (unsigned char *)cnonce, sizeof(cnonce));
  384|      0|  if(result)
  385|      0|    return result;
  386|       |
  387|       |  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  388|      0|  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  389|      0|  if(!ctxt)
  390|      0|    return CURLE_OUT_OF_MEMORY;
  391|       |
  392|      0|  Curl_MD5_update(ctxt, (const unsigned char *) userp,
  393|      0|                  curlx_uztoui(strlen(userp)));
  394|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  395|      0|  Curl_MD5_update(ctxt, (const unsigned char *) realm,
  396|      0|                  curlx_uztoui(strlen(realm)));
  397|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  398|      0|  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
  399|      0|                  curlx_uztoui(strlen(passwdp)));
  400|      0|  Curl_MD5_final(ctxt, digest);
  401|       |
  402|      0|  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  403|      0|  if(!ctxt)
  404|      0|    return CURLE_OUT_OF_MEMORY;
  405|       |
  406|      0|  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  407|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  408|      0|  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
  409|      0|                  curlx_uztoui(strlen(nonce)));
  410|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  411|      0|  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
  412|      0|                  curlx_uztoui(strlen(cnonce)));
  413|      0|  Curl_MD5_final(ctxt, digest);
  414|       |
  415|       |  /* Convert calculated 16 octet hex into 32 bytes string */
  416|      0|  for(i = 0; i < MD5_DIGEST_LEN; i++)
  417|      0|    msnprintf(&HA1_hex[2 * i], 3, "%02x", digest[i]);
  418|       |
  419|       |  /* Generate our SPN */
  420|      0|  spn = Curl_auth_build_spn(service, realm, NULL);
  421|      0|  if(!spn)
  422|      0|    return CURLE_OUT_OF_MEMORY;
  423|       |
  424|       |  /* Calculate H(A2) */
  425|      0|  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  426|      0|  if(!ctxt) {
  427|      0|    free(spn);
  428|       |
  429|      0|    return CURLE_OUT_OF_MEMORY;
  430|      0|  }
  431|       |
  432|      0|  Curl_MD5_update(ctxt, (const unsigned char *) method,
  433|      0|                  curlx_uztoui(strlen(method)));
  434|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  435|      0|  Curl_MD5_update(ctxt, (const unsigned char *) spn,
  436|      0|                  curlx_uztoui(strlen(spn)));
  437|      0|  Curl_MD5_final(ctxt, digest);
  438|       |
  439|      0|  for(i = 0; i < MD5_DIGEST_LEN; i++)
  440|      0|    msnprintf(&HA2_hex[2 * i], 3, "%02x", digest[i]);
  441|       |
  442|       |  /* Now calculate the response hash */
  443|      0|  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  444|      0|  if(!ctxt) {
  445|      0|    free(spn);
  446|       |
  447|      0|    return CURLE_OUT_OF_MEMORY;
  448|      0|  }
  449|       |
  450|      0|  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  451|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  452|      0|  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
  453|      0|                  curlx_uztoui(strlen(nonce)));
  454|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  455|       |
  456|      0|  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
  457|      0|                  curlx_uztoui(strlen(nonceCount)));
  458|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  459|      0|  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
  460|      0|                  curlx_uztoui(strlen(cnonce)));
  461|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  462|      0|  Curl_MD5_update(ctxt, (const unsigned char *) qop,
  463|      0|                  curlx_uztoui(strlen(qop)));
  464|      0|  Curl_MD5_update(ctxt, (const unsigned char *) ":", 1);
  465|       |
  466|      0|  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  467|      0|  Curl_MD5_final(ctxt, digest);
  468|       |
  469|      0|  for(i = 0; i < MD5_DIGEST_LEN; i++)
  470|      0|    msnprintf(&resp_hash_hex[2 * i], 3, "%02x", digest[i]);
  471|       |
  472|       |  /* Generate the response */
  473|      0|  response = aprintf("username=\"%s\",realm=\"%s\",nonce=\"%s\","
  474|      0|                     "cnonce=\"%s\",nc=\"%s\",digest-uri=\"%s\",response=%s,"
  475|      0|                     "qop=%s",
  476|      0|                     userp, realm, nonce,
  477|      0|                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  478|      0|  free(spn);
  479|      0|  if(!response)
  480|      0|    return CURLE_OUT_OF_MEMORY;
  481|       |
  482|       |  /* Return the response. */
  483|      0|  Curl_bufref_set(out, response, strlen(response), curl_free);
  484|      0|  return result;
  485|      0|}
Curl_auth_decode_digest_http_message:
  502|    131|{
  503|    131|  bool before = FALSE; /* got a nonce before */
  504|    131|  bool foundAuth = FALSE;
  505|    131|  bool foundAuthInt = FALSE;
  506|    131|  char *token = NULL;
  507|    131|  char *tmp = NULL;
  508|       |
  509|       |  /* If we already have received a nonce, keep that in mind */
  510|    131|  if(digest->nonce)
  511|      0|    before = TRUE;
  512|       |
  513|       |  /* Clean up any former leftovers and initialise to defaults */
  514|    131|  Curl_auth_digest_cleanup(digest);
  515|       |
  516|    637|  for(;;) {
  517|    637|    char value[DIGEST_MAX_VALUE_LENGTH];
  518|    637|    char content[DIGEST_MAX_CONTENT_LENGTH];
  519|       |
  520|       |    /* Pass all additional spaces here */
  521|    953|    while(*chlg && ISSPACE(*chlg))
  522|    316|      chlg++;
  523|       |
  524|       |    /* Extract a value=content pair */
  525|    637|    if(Curl_auth_digest_get_pair(chlg, value, content, &chlg)) {
  526|    506|      if(strcasecompare(value, "nonce")) {
  527|    136|        free(digest->nonce);
  528|    136|        digest->nonce = strdup(content);
  529|    136|        if(!digest->nonce)
  530|      0|          return CURLE_OUT_OF_MEMORY;
  531|    136|      }
  532|    370|      else if(strcasecompare(value, "stale")) {
  533|      0|        if(strcasecompare(content, "true")) {
  534|      0|          digest->stale = TRUE;
  535|      0|          digest->nc = 1; /* we make a new nonce now */
  536|      0|        }
  537|      0|      }
  538|    370|      else if(strcasecompare(value, "realm")) {
  539|     99|        free(digest->realm);
  540|     99|        digest->realm = strdup(content);
  541|     99|        if(!digest->realm)
  542|      0|          return CURLE_OUT_OF_MEMORY;
  543|     99|      }
  544|    271|      else if(strcasecompare(value, "opaque")) {
  545|      0|        free(digest->opaque);
  546|      0|        digest->opaque = strdup(content);
  547|      0|        if(!digest->opaque)
  548|      0|          return CURLE_OUT_OF_MEMORY;
  549|      0|      }
  550|    271|      else if(strcasecompare(value, "qop")) {
  551|      0|        char *tok_buf = NULL;
  552|       |        /* Tokenize the list and choose auth if possible, use a temporary
  553|       |           clone of the buffer since strtok_r() ruins it */
  554|      0|        tmp = strdup(content);
  555|      0|        if(!tmp)
  556|      0|          return CURLE_OUT_OF_MEMORY;
  557|       |
  558|      0|        token = strtok_r(tmp, ",", &tok_buf);
  559|      0|        while(token != NULL) {
  560|      0|          if(strcasecompare(token, DIGEST_QOP_VALUE_STRING_AUTH)) {
  561|      0|            foundAuth = TRUE;
  562|      0|          }
  563|      0|          else if(strcasecompare(token, DIGEST_QOP_VALUE_STRING_AUTH_INT)) {
  564|      0|            foundAuthInt = TRUE;
  565|      0|          }
  566|      0|          token = strtok_r(NULL, ",", &tok_buf);
  567|      0|        }
  568|       |
  569|      0|        free(tmp);
  570|       |
  571|       |        /* Select only auth or auth-int. Otherwise, ignore */
  572|      0|        if(foundAuth) {
  573|      0|          free(digest->qop);
  574|      0|          digest->qop = strdup(DIGEST_QOP_VALUE_STRING_AUTH);
  575|      0|          if(!digest->qop)
  576|      0|            return CURLE_OUT_OF_MEMORY;
  577|      0|        }
  578|      0|        else if(foundAuthInt) {
  579|      0|          free(digest->qop);
  580|      0|          digest->qop = strdup(DIGEST_QOP_VALUE_STRING_AUTH_INT);
  581|      0|          if(!digest->qop)
  582|      0|            return CURLE_OUT_OF_MEMORY;
  583|      0|        }
  584|      0|      }
  585|    271|      else if(strcasecompare(value, "algorithm")) {
  586|      0|        free(digest->algorithm);
  587|      0|        digest->algorithm = strdup(content);
  588|      0|        if(!digest->algorithm)
  589|      0|          return CURLE_OUT_OF_MEMORY;
  590|       |
  591|      0|        if(strcasecompare(content, "MD5-sess"))
  592|      0|          digest->algo = CURLDIGESTALGO_MD5SESS;
  593|      0|        else if(strcasecompare(content, "MD5"))
  594|      0|          digest->algo = CURLDIGESTALGO_MD5;
  595|      0|        else if(strcasecompare(content, "SHA-256"))
  596|      0|          digest->algo = CURLDIGESTALGO_SHA256;
  597|      0|        else if(strcasecompare(content, "SHA-256-SESS"))
  598|      0|          digest->algo = CURLDIGESTALGO_SHA256SESS;
  599|      0|        else if(strcasecompare(content, "SHA-512-256"))
  600|      0|          digest->algo = CURLDIGESTALGO_SHA512_256;
  601|      0|        else if(strcasecompare(content, "SHA-512-256-SESS"))
  602|      0|          digest->algo = CURLDIGESTALGO_SHA512_256SESS;
  603|      0|        else
  604|      0|          return CURLE_BAD_CONTENT_ENCODING;
  605|      0|      }
  606|    271|      else if(strcasecompare(value, "userhash")) {
  607|      0|        if(strcasecompare(content, "true")) {
  608|      0|          digest->userhash = TRUE;
  609|      0|        }
  610|      0|      }
  611|    271|      else {
  612|       |        /* Unknown specifier, ignore it! */
  613|    271|      }
  614|    506|    }
  615|    131|    else
  616|    131|      break; /* We're done here */
  617|       |
  618|       |    /* Pass all additional spaces here */
  619|    887|    while(*chlg && ISSPACE(*chlg))
  620|    381|      chlg++;
  621|       |
  622|       |    /* Allow the list to be comma-separated */
  623|    506|    if(',' == *chlg)
  624|    162|      chlg++;
  625|    506|  }
  626|       |
  627|       |  /* We had a nonce since before, and we got another one now without
  628|       |     'stale=true'. This means we provided bad credentials in the previous
  629|       |     request */
  630|    131|  if(before && !digest->stale)
  631|      0|    return CURLE_BAD_CONTENT_ENCODING;
  632|       |
  633|       |  /* We got this header without a nonce, that's a bad Digest line! */
  634|    131|  if(!digest->nonce)
  635|     41|    return CURLE_BAD_CONTENT_ENCODING;
  636|       |
  637|     90|  return CURLE_OK;
  638|    131|}
Curl_auth_create_digest_http_message:
  924|     51|{
  925|     51|  switch(digest->algo) {
  926|     51|  case CURLDIGESTALGO_MD5:
  927|     51|  case CURLDIGESTALGO_MD5SESS:
  928|     51|    return auth_create_digest_http_message(data, userp, passwdp,
  929|     51|                                           request, uripath, digest,
  930|     51|                                           outptr, outlen,
  931|     51|                                           auth_digest_md5_to_ascii,
  932|     51|                                           Curl_md5it);
  933|       |
  934|      0|  case CURLDIGESTALGO_SHA256:
  935|      0|  case CURLDIGESTALGO_SHA256SESS:
  936|      0|  case CURLDIGESTALGO_SHA512_256:
  937|      0|  case CURLDIGESTALGO_SHA512_256SESS:
  938|      0|    return auth_create_digest_http_message(data, userp, passwdp,
  939|      0|                                           request, uripath, digest,
  940|      0|                                           outptr, outlen,
  941|      0|                                           auth_digest_sha256_to_ascii,
  942|      0|                                           Curl_sha256it);
  943|       |
  944|      0|  default:
  945|      0|    return CURLE_UNSUPPORTED_PROTOCOL;
  946|     51|  }
  947|     51|}
Curl_auth_digest_cleanup:
  960|  12.2k|{
  961|  12.2k|  Curl_safefree(digest->nonce);
  962|  12.2k|  Curl_safefree(digest->cnonce);
  963|  12.2k|  Curl_safefree(digest->realm);
  964|  12.2k|  Curl_safefree(digest->opaque);
  965|  12.2k|  Curl_safefree(digest->qop);
  966|  12.2k|  Curl_safefree(digest->algorithm);
  967|       |
  968|  12.2k|  digest->nc = 0;
  969|  12.2k|  digest->algo = CURLDIGESTALGO_MD5; /* default algorithm */
  970|  12.2k|  digest->stale = FALSE; /* default means normal, not stale */
  971|  12.2k|  digest->userhash = FALSE;
  972|  12.2k|}
digest.c:auth_decode_digest_md5_message:
  274|      5|{
  275|      5|  const char *chlg = (const char *) Curl_bufref_ptr(chlgref);
  276|       |
  277|       |  /* Ensure we have a valid challenge message */
  278|      5|  if(!Curl_bufref_len(chlgref))
  279|      2|    return CURLE_BAD_CONTENT_ENCODING;
  280|       |
  281|       |  /* Retrieve nonce string from the challenge */
  282|      3|  if(!auth_digest_get_key_value(chlg, "nonce=\"", nonce, nlen, '\"'))
  283|      3|    return CURLE_BAD_CONTENT_ENCODING;
  284|       |
  285|       |  /* Retrieve realm string from the challenge */
  286|      0|  if(!auth_digest_get_key_value(chlg, "realm=\"", realm, rlen, '\"')) {
  287|       |    /* Challenge does not have a realm, set empty string [RFC2831] page 6 */
  288|      0|    strcpy(realm, "");
  289|      0|  }
  290|       |
  291|       |  /* Retrieve algorithm string from the challenge */
  292|      0|  if(!auth_digest_get_key_value(chlg, "algorithm=", alg, alen, ','))
  293|      0|    return CURLE_BAD_CONTENT_ENCODING;
  294|       |
  295|       |  /* Retrieve qop-options string from the challenge */
  296|      0|  if(!auth_digest_get_key_value(chlg, "qop=\"", qop, qlen, '\"'))
  297|      0|    return CURLE_BAD_CONTENT_ENCODING;
  298|       |
  299|      0|  return CURLE_OK;
  300|      0|}
digest.c:auth_digest_get_key_value:
  200|      3|{
  201|      3|  char *find_pos;
  202|      3|  size_t i;
  203|       |
  204|      3|  find_pos = strstr(chlg, key);
  205|      3|  if(!find_pos)
  206|      3|    return FALSE;
  207|       |
  208|      0|  find_pos += strlen(key);
  209|       |
  210|      0|  for(i = 0; *find_pos && *find_pos != end_char && i < max_val_len - 1; ++i)
  211|      0|    value[i] = *find_pos++;
  212|      0|  value[i] = '\0';
  213|       |
  214|      0|  return TRUE;
  215|      3|}
digest.c:auth_create_digest_http_message:
  671|     51|{
  672|     51|  CURLcode result;
  673|     51|  unsigned char hashbuf[32]; /* 32 bytes/256 bits */
  674|     51|  unsigned char request_digest[65];
  675|     51|  unsigned char ha1[65];    /* 64 digits and 1 zero byte */
  676|     51|  unsigned char ha2[65];    /* 64 digits and 1 zero byte */
  677|     51|  char userh[65];
  678|     51|  char *cnonce = NULL;
  679|     51|  size_t cnonce_sz = 0;
  680|     51|  char *userp_quoted;
  681|     51|  char *response = NULL;
  682|     51|  char *hashthis = NULL;
  683|     51|  char *tmp = NULL;
  684|       |
  685|     51|  if(!digest->nc)
  686|     51|    digest->nc = 1;
  687|       |
  688|     51|  if(!digest->cnonce) {
  689|     51|    char cnoncebuf[33];
  690|     51|    result = Curl_rand_hex(data, (unsigned char *)cnoncebuf,
  691|     51|                           sizeof(cnoncebuf));
  692|     51|    if(result)
  693|      0|      return result;
  694|       |
  695|     51|    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
  696|     51|                                &cnonce, &cnonce_sz);
  697|     51|    if(result)
  698|      0|      return result;
  699|       |
  700|     51|    digest->cnonce = cnonce;
  701|     51|  }
  702|       |
  703|     51|  if(digest->userhash) {
  704|      0|    hashthis = aprintf("%s:%s", userp, digest->realm);
  705|      0|    if(!hashthis)
  706|      0|      return CURLE_OUT_OF_MEMORY;
  707|       |
  708|      0|    CURL_OUTPUT_DIGEST_CONV(data, hashthis);
  709|      0|    hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  710|      0|    free(hashthis);
  711|      0|    convert_to_ascii(hashbuf, (unsigned char *)userh);
  712|      0|  }
  713|       |
  714|       |  /*
  715|       |    If the algorithm is "MD5" or unspecified (which then defaults to MD5):
  716|       |
  717|       |      A1 = unq(username-value) ":" unq(realm-value) ":" passwd
  718|       |
  719|       |    If the algorithm is "MD5-sess" then:
  720|       |
  721|       |      A1 = H(unq(username-value) ":" unq(realm-value) ":" passwd) ":"
  722|       |           unq(nonce-value) ":" unq(cnonce-value)
  723|       |  */
  724|       |
  725|     51|  hashthis = aprintf("%s:%s:%s", digest->userhash ? userh : userp,
  726|     51|                                 digest->realm, passwdp);
  727|     51|  if(!hashthis)
  728|      0|    return CURLE_OUT_OF_MEMORY;
  729|       |
  730|     51|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  731|     51|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  732|     51|  free(hashthis);
  733|     51|  convert_to_ascii(hashbuf, ha1);
  734|       |
  735|     51|  if(digest->algo == CURLDIGESTALGO_MD5SESS ||
  736|     51|     digest->algo == CURLDIGESTALGO_SHA256SESS ||
  737|     51|     digest->algo == CURLDIGESTALGO_SHA512_256SESS) {
  738|       |    /* nonce and cnonce are OUTSIDE the hash */
  739|      0|    tmp = aprintf("%s:%s:%s", ha1, digest->nonce, digest->cnonce);
  740|      0|    if(!tmp)
  741|      0|      return CURLE_OUT_OF_MEMORY;
  742|       |
  743|      0|    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* Convert on non-ASCII machines */
  744|      0|    hash(hashbuf, (unsigned char *) tmp, strlen(tmp));
  745|      0|    free(tmp);
  746|      0|    convert_to_ascii(hashbuf, ha1);
  747|      0|  }
  748|       |
  749|       |  /*
  750|       |    If the "qop" directive's value is "auth" or is unspecified, then A2 is:
  751|       |
  752|       |      A2 = Method ":" digest-uri-value
  753|       |
  754|       |    If the "qop" value is "auth-int", then A2 is:
  755|       |
  756|       |      A2 = Method ":" digest-uri-value ":" H(entity-body)
  757|       |
  758|       |    (The "Method" value is the HTTP request method as specified in section
  759|       |    5.1.1 of RFC 2616)
  760|       |  */
  761|       |
  762|     51|  hashthis = aprintf("%s:%s", request, uripath);
  763|     51|  if(!hashthis)
  764|      0|    return CURLE_OUT_OF_MEMORY;
  765|       |
  766|     51|  if(digest->qop && strcasecompare(digest->qop, "auth-int")) {
  767|       |    /* We don't support auth-int for PUT or POST */
  768|      0|    char hashed[65];
  769|      0|    char *hashthis2;
  770|       |
  771|      0|    hash(hashbuf, (const unsigned char *)"", 0);
  772|      0|    convert_to_ascii(hashbuf, (unsigned char *)hashed);
  773|       |
  774|      0|    hashthis2 = aprintf("%s:%s", hashthis, hashed);
  775|      0|    free(hashthis);
  776|      0|    hashthis = hashthis2;
  777|      0|  }
  778|       |
  779|     51|  if(!hashthis)
  780|      0|    return CURLE_OUT_OF_MEMORY;
  781|       |
  782|     51|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  783|     51|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  784|     51|  free(hashthis);
  785|     51|  convert_to_ascii(hashbuf, ha2);
  786|       |
  787|     51|  if(digest->qop) {
  788|      0|    hashthis = aprintf("%s:%s:%08x:%s:%s:%s", ha1, digest->nonce, digest->nc,
  789|      0|                       digest->cnonce, digest->qop, ha2);
  790|      0|  }
  791|     51|  else {
  792|     51|    hashthis = aprintf("%s:%s:%s", ha1, digest->nonce, ha2);
  793|     51|  }
  794|       |
  795|     51|  if(!hashthis)
  796|      0|    return CURLE_OUT_OF_MEMORY;
  797|       |
  798|     51|  CURL_OUTPUT_DIGEST_CONV(data, hashthis); /* convert on non-ASCII machines */
  799|     51|  hash(hashbuf, (unsigned char *) hashthis, strlen(hashthis));
  800|     51|  free(hashthis);
  801|     51|  convert_to_ascii(hashbuf, request_digest);
  802|       |
  803|       |  /* For test case 64 (snooped from a Mozilla 1.3a request)
  804|       |
  805|       |     Authorization: Digest username="testuser", realm="testrealm", \
  806|       |     nonce="1053604145", uri="/64", response="c55f7f30d83d774a3d2dcacf725abaca"
  807|       |
  808|       |     Digest parameters are all quoted strings.  Username which is provided by
  809|       |     the user will need double quotes and backslashes within it escaped.  For
  810|       |     the other fields, this shouldn't be an issue.  realm, nonce, and opaque
  811|       |     are copied as is from the server, escapes and all.  cnonce is generated
  812|       |     with web-safe characters.  uri is already percent encoded.  nc is 8 hex
  813|       |     characters.  algorithm and qop with standard values only contain web-safe
  814|       |     characters.
  815|       |  */
  816|     51|  userp_quoted = auth_digest_string_quoted(digest->userhash ? userh : userp);
  817|     51|  if(!userp_quoted)
  818|      0|    return CURLE_OUT_OF_MEMORY;
  819|       |
  820|     51|  if(digest->qop) {
  821|      0|    response = aprintf("username=\"%s\", "
  822|      0|                       "realm=\"%s\", "
  823|      0|                       "nonce=\"%s\", "
  824|      0|                       "uri=\"%s\", "
  825|      0|                       "cnonce=\"%s\", "
  826|      0|                       "nc=%08x, "
  827|      0|                       "qop=%s, "
  828|      0|                       "response=\"%s\"",
  829|      0|                       userp_quoted,
  830|      0|                       digest->realm,
  831|      0|                       digest->nonce,
  832|      0|                       uripath,
  833|      0|                       digest->cnonce,
  834|      0|                       digest->nc,
  835|      0|                       digest->qop,
  836|      0|                       request_digest);
  837|       |
  838|      0|    if(strcasecompare(digest->qop, "auth"))
  839|      0|      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
  840|       |                       padded which tells to the server how many times you are
  841|       |                       using the same nonce in the qop=auth mode */
  842|      0|  }
  843|     51|  else {
  844|     51|    response = aprintf("username=\"%s\", "
  845|     51|                       "realm=\"%s\", "
  846|     51|                       "nonce=\"%s\", "
  847|     51|                       "uri=\"%s\", "
  848|     51|                       "response=\"%s\"",
  849|     51|                       userp_quoted,
  850|     51|                       digest->realm,
  851|     51|                       digest->nonce,
  852|     51|                       uripath,
  853|     51|                       request_digest);
  854|     51|  }
  855|     51|  free(userp_quoted);
  856|     51|  if(!response)
  857|      0|    return CURLE_OUT_OF_MEMORY;
  858|       |
  859|       |  /* Add the optional fields */
  860|     51|  if(digest->opaque) {
  861|       |    /* Append the opaque */
  862|      0|    tmp = aprintf("%s, opaque=\"%s\"", response, digest->opaque);
  863|      0|    free(response);
  864|      0|    if(!tmp)
  865|      0|      return CURLE_OUT_OF_MEMORY;
  866|       |
  867|      0|    response = tmp;
  868|      0|  }
  869|       |
  870|     51|  if(digest->algorithm) {
  871|       |    /* Append the algorithm */
  872|      0|    tmp = aprintf("%s, algorithm=%s", response, digest->algorithm);
  873|      0|    free(response);
  874|      0|    if(!tmp)
  875|      0|      return CURLE_OUT_OF_MEMORY;
  876|       |
  877|      0|    response = tmp;
  878|      0|  }
  879|       |
  880|     51|  if(digest->userhash) {
  881|       |    /* Append the userhash */
  882|      0|    tmp = aprintf("%s, userhash=true", response);
  883|      0|    free(response);
  884|      0|    if(!tmp)
  885|      0|      return CURLE_OUT_OF_MEMORY;
  886|       |
  887|      0|    response = tmp;
  888|      0|  }
  889|       |
  890|       |  /* Return the output */
  891|     51|  *outptr = response;
  892|     51|  *outlen = strlen(response);
  893|       |
  894|     51|  return CURLE_OK;
  895|     51|}
digest.c:auth_digest_string_quoted:
  162|     51|{
  163|     51|  char *dest;
  164|     51|  const char *s = source;
  165|     51|  size_t n = 1; /* null terminator */
  166|       |
  167|       |  /* Calculate size needed */
  168|  1.97k|  while(*s) {
  169|  1.92k|    ++n;
  170|  1.92k|    if(*s == '"' || *s == '\\') {
  171|    376|      ++n;
  172|    376|    }
  173|  1.92k|    ++s;
  174|  1.92k|  }
  175|       |
  176|     51|  dest = malloc(n);
  177|     51|  if(dest) {
  178|     51|    char *d = dest;
  179|     51|    s = source;
  180|  1.97k|    while(*s) {
  181|  1.92k|      if(*s == '"' || *s == '\\') {
  182|    376|        *d++ = '\\';
  183|    376|      }
  184|  1.92k|      *d++ = *s++;
  185|  1.92k|    }
  186|     51|    *d = 0;
  187|     51|  }
  188|       |
  189|     51|  return dest;
  190|     51|}
digest.c:auth_digest_md5_to_ascii:
  145|    153|{
  146|    153|  int i;
  147|  2.60k|  for(i = 0; i < 16; i++)
  148|  2.44k|    msnprintf((char *) &dest[i * 2], 3, "%02x", source[i]);
  149|    153|}

Curl_auth_cleanup_ntlm:
  849|  5.84k|{
  850|       |  /* Free the target info */
  851|  5.84k|  Curl_safefree(ntlm->target_info);
  852|       |
  853|       |  /* Reset any variables */
  854|  5.84k|  ntlm->target_info_len = 0;
  855|  5.84k|}

Curl_tls_keylog_open:
   47|      1|{
   48|      1|  char *keylog_file_name;
   49|       |
   50|      1|  if(!keylog_file_fp) {
   51|      1|    keylog_file_name = curl_getenv("SSLKEYLOGFILE");
   52|      1|    if(keylog_file_name) {
   53|      0|      keylog_file_fp = fopen(keylog_file_name, FOPEN_APPENDTEXT);
   54|      0|      if(keylog_file_fp) {
   55|       |#ifdef WIN32
   56|       |        if(setvbuf(keylog_file_fp, NULL, _IONBF, 0))
   57|       |#else
   58|      0|        if(setvbuf(keylog_file_fp, NULL, _IOLBF, 4096))
   59|      0|#endif
   60|      0|        {
   61|      0|          fclose(keylog_file_fp);
   62|      0|          keylog_file_fp = NULL;
   63|      0|        }
   64|      0|      }
   65|      0|      Curl_safefree(keylog_file_name);
   66|      0|    }
   67|      1|  }
   68|      1|}

openssl.c:ossl_init:
 1172|      1|{
 1173|       |#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) &&  \
 1174|       |  !defined(LIBRESSL_VERSION_NUMBER)
 1175|       |  const uint64_t flags =
 1176|       |#ifdef OPENSSL_INIT_ENGINE_ALL_BUILTIN
 1177|       |    /* not present in BoringSSL */
 1178|       |    OPENSSL_INIT_ENGINE_ALL_BUILTIN |
 1179|       |#endif
 1180|       |#ifdef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1181|       |    OPENSSL_INIT_NO_LOAD_CONFIG |
 1182|       |#else
 1183|       |    OPENSSL_INIT_LOAD_CONFIG |
 1184|       |#endif
 1185|       |    0;
 1186|       |  OPENSSL_init_ssl(flags, NULL);
 1187|       |#else
 1188|      1|  OPENSSL_load_builtin_modules();
 1189|       |
 1190|      1|#ifdef USE_OPENSSL_ENGINE
 1191|      1|  ENGINE_load_builtin_engines();
 1192|      1|#endif
 1193|       |
 1194|       |/* CONF_MFLAGS_DEFAULT_SECTION was introduced some time between 0.9.8b and
 1195|       |   0.9.8e */
 1196|       |#ifndef CONF_MFLAGS_DEFAULT_SECTION
 1197|       |#define CONF_MFLAGS_DEFAULT_SECTION 0x0
 1198|       |#endif
 1199|       |
 1200|      1|#ifndef CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG
 1201|      1|  CONF_modules_load_file(NULL, NULL,
 1202|      1|                         CONF_MFLAGS_DEFAULT_SECTION|
 1203|      1|                         CONF_MFLAGS_IGNORE_MISSING_FILE);
 1204|      1|#endif
 1205|       |
 1206|       |  /* Let's get nice error messages */
 1207|      1|  SSL_load_error_strings();
 1208|       |
 1209|       |  /* Init the global ciphers and digests */
 1210|      1|  if(!SSLeay_add_ssl_algorithms())
 1211|      0|    return 0;
 1212|       |
 1213|      1|  OpenSSL_add_all_algorithms();
 1214|      1|#endif
 1215|       |
 1216|      1|  Curl_tls_keylog_open();
 1217|       |
 1218|       |  /* Initialize the extra data indexes */
 1219|      1|  if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||
 1220|      1|     ossl_get_ssl_sockindex_index() < 0 || ossl_get_proxy_index() < 0)
 1221|      0|    return 0;
 1222|       |
 1223|      1|  return 1;
 1224|      1|}
openssl.c:ossl_get_ssl_data_index:
  373|      1|{
  374|      1|  static int ssl_ex_data_data_index = -1;
  375|      1|  if(ssl_ex_data_data_index < 0) {
  376|      1|    ssl_ex_data_data_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  377|      1|  }
  378|      1|  return ssl_ex_data_data_index;
  379|      1|}
openssl.c:ossl_get_ssl_conn_index:
  385|      1|{
  386|      1|  static int ssl_ex_data_conn_index = -1;
  387|      1|  if(ssl_ex_data_conn_index < 0) {
  388|      1|    ssl_ex_data_conn_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  389|      1|  }
  390|      1|  return ssl_ex_data_conn_index;
  391|      1|}
openssl.c:ossl_get_ssl_sockindex_index:
  397|      1|{
  398|      1|  static int sockindex_index = -1;
  399|      1|  if(sockindex_index < 0) {
  400|      1|    sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  401|      1|  }
  402|      1|  return sockindex_index;
  403|      1|}
openssl.c:ossl_get_proxy_index:
  409|      1|{
  410|      1|  static int proxy_index = -1;
  411|      1|  if(proxy_index < 0) {
  412|      1|    proxy_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);
  413|      1|  }
  414|      1|  return proxy_index;
  415|      1|}
openssl.c:ossl_data_pending:
 4167|  9.71k|{
 4168|  9.71k|  const struct ssl_connect_data *connssl = &conn->ssl[connindex];
 4169|  9.71k|  if(connssl->backend->handle && SSL_pending(connssl->backend->handle))
 4170|      0|    return TRUE;
 4171|  9.71k|#ifndef CURL_DISABLE_PROXY
 4172|  9.71k|  {
 4173|  9.71k|    const struct ssl_connect_data *proxyssl = &conn->proxy_ssl[connindex];
 4174|  9.71k|    if(proxyssl->backend->handle && SSL_pending(proxyssl->backend->handle))
 4175|      0|      return TRUE;
 4176|  9.71k|  }
 4177|  9.71k|#endif
 4178|  9.71k|  return FALSE;
 4179|  9.71k|}
openssl.c:ossl_random:
 4427|  3.73k|{
 4428|  3.73k|  int rc;
 4429|  3.73k|  if(data) {
 4430|  3.73k|    if(ossl_seed(data)) /* Initiate the seed if not already done */
 4431|      0|      return CURLE_FAILED_INIT; /* couldn't seed for some reason */
 4432|  3.73k|  }
 4433|      0|  else {
 4434|      0|    if(!rand_enough())
 4435|      0|      return CURLE_FAILED_INIT;
 4436|      0|  }
 4437|       |  /* RAND_bytes() returns 1 on success, 0 otherwise.  */
 4438|  3.73k|  rc = RAND_bytes(entropy, curlx_uztosi(length));
 4439|  3.73k|  return (rc == 1 ? CURLE_OK : CURLE_FAILED_INIT);
 4440|  3.73k|}
openssl.c:ossl_seed:
  441|  3.73k|{
  442|       |  /* This might get called before it has been added to a multi handle */
  443|  3.73k|  if(data->multi && data->multi->ssl_seeded)
  444|    153|    return CURLE_OK;
  445|       |
  446|  3.58k|  if(rand_enough()) {
  447|       |    /* OpenSSL 1.1.0+ should return here */
  448|  3.58k|    if(data->multi)
  449|     51|      data->multi->ssl_seeded = TRUE;
  450|  3.58k|    return CURLE_OK;
  451|  3.58k|  }
  452|       |#ifdef HAVE_RANDOM_INIT_BY_DEFAULT
  453|       |  /* with OpenSSL 1.1.0+, a failed RAND_status is a showstopper */
  454|       |  failf(data, "Insufficient randomness");
  455|       |  return CURLE_SSL_CONNECT_ERROR;
  456|       |#else
  457|       |
  458|       |#ifndef RANDOM_FILE
  459|       |  /* if RANDOM_FILE isn't defined, we only perform this if an option tells
  460|       |     us to! */
  461|       |  if(data->set.str[STRING_SSL_RANDOM_FILE])
  462|       |#define RANDOM_FILE "" /* doesn't matter won't be used */
  463|       |#endif
  464|      0|  {
  465|       |    /* let the option override the define */
  466|      0|    RAND_load_file((data->set.str[STRING_SSL_RANDOM_FILE]?
  467|      0|                    data->set.str[STRING_SSL_RANDOM_FILE]:
  468|      0|                    RANDOM_FILE),
  469|      0|                   RAND_LOAD_LENGTH);
  470|      0|    if(rand_enough())
  471|      0|      return CURLE_OK;
  472|      0|  }
  473|       |
  474|      0|#if defined(HAVE_RAND_EGD)
  475|       |  /* only available in OpenSSL 0.9.5 and later */
  476|       |  /* EGD_SOCKET is set at configure time or not at all */
  477|      0|#ifndef EGD_SOCKET
  478|       |  /* If we don't have the define set, we only do this if the egd-option
  479|       |     is set */
  480|      0|  if(data->set.str[STRING_SSL_EGDSOCKET])
  481|      0|#define EGD_SOCKET "" /* doesn't matter won't be used */
  482|      0|#endif
  483|      0|  {
  484|       |    /* If there's an option and a define, the option overrides the
  485|       |       define */
  486|      0|    int ret = RAND_egd(data->set.str[STRING_SSL_EGDSOCKET]?
  487|      0|                       data->set.str[STRING_SSL_EGDSOCKET]:EGD_SOCKET);
  488|      0|    if(-1 != ret) {
  489|      0|      if(rand_enough())
  490|      0|        return CURLE_OK;
  491|      0|    }
  492|      0|  }
  493|      0|#endif
  494|       |
  495|       |  /* fallback to a custom seeding of the PRNG using a hash based on a current
  496|       |     time */
  497|      0|  do {
  498|      0|    unsigned char randb[64];
  499|      0|    size_t len = sizeof(randb);
  500|      0|    size_t i, i_max;
  501|      0|    for(i = 0, i_max = len / sizeof(struct curltime); i < i_max; ++i) {
  502|      0|      struct curltime tv = Curl_now();
  503|      0|      Curl_wait_ms(1);
  504|      0|      tv.tv_sec *= i + 1;
  505|      0|      tv.tv_usec *= (unsigned int)i + 2;
  506|      0|      tv.tv_sec ^= ((Curl_now().tv_sec + Curl_now().tv_usec) *
  507|      0|                    (i + 3)) << 8;
  508|      0|      tv.tv_usec ^= (unsigned int) ((Curl_now().tv_sec +
  509|      0|                                     Curl_now().tv_usec) *
  510|      0|                                    (i + 4)) << 16;
  511|      0|      memcpy(&randb[i * sizeof(struct curltime)], &tv,
  512|      0|             sizeof(struct curltime));
  513|      0|    }
  514|      0|    RAND_add(randb, (int)len, (double)len/2);
  515|      0|  } while(!rand_enough());
  516|       |
  517|      0|  {
  518|       |    /* generates a default path for the random seed file */
  519|      0|    char fname[256];
  520|      0|    fname[0] = 0; /* blank it first */
  521|      0|    RAND_file_name(fname, sizeof(fname));
  522|      0|    if(fname[0]) {
  523|       |      /* we got a file name to try */
  524|      0|      RAND_load_file(fname, RAND_LOAD_LENGTH);
  525|      0|      if(rand_enough())
  526|      0|        return CURLE_OK;
  527|      0|    }
  528|      0|  }
  529|       |
  530|      0|  infof(data, "libcurl is now using a weak random seed!");
  531|      0|  return (rand_enough() ? CURLE_OK :
  532|      0|          CURLE_SSL_CONNECT_ERROR /* confusing error code */);
  533|      0|#endif
  534|      0|}
openssl.c:rand_enough:
  436|  3.58k|{
  437|  3.58k|  return (0 != RAND_status()) ? TRUE : FALSE;
  438|  3.58k|}
openssl.c:ossl_close:
 1437|  5.84k|{
 1438|  5.84k|  ossl_closeone(data, conn, &conn->ssl[sockindex]);
 1439|  5.84k|#ifndef CURL_DISABLE_PROXY
 1440|  5.84k|  ossl_closeone(data, conn, &conn->proxy_ssl[sockindex]);
 1441|  5.84k|#endif
 1442|  5.84k|}
openssl.c:ossl_closeone:
 1410|  11.6k|{
 1411|  11.6k|  struct ssl_backend_data *backend = connssl->backend;
 1412|  11.6k|  if(backend->handle) {
 1413|      0|    char buf[32];
 1414|      0|    set_logger(conn, data);
 1415|       |
 1416|       |    /* Maybe the server has already sent a close notify alert.
 1417|       |       Read it to avoid an RST on the TCP connection. */
 1418|      0|    (void)SSL_read(backend->handle, buf, (int)sizeof(buf));
 1419|       |
 1420|      0|    (void)SSL_shutdown(backend->handle);
 1421|      0|    SSL_set_connect_state(backend->handle);
 1422|       |
 1423|      0|    SSL_free(backend->handle);
 1424|      0|    backend->handle = NULL;
 1425|      0|  }
 1426|  11.6k|  if(backend->ctx) {
 1427|      0|    SSL_CTX_free(backend->ctx);
 1428|      0|    backend->ctx = NULL;
 1429|      0|  }
 1430|  11.6k|}
openssl.c:ossl_close_all:
 1561|  6.05k|{
 1562|  6.05k|#ifdef USE_OPENSSL_ENGINE
 1563|  6.05k|  if(data->state.engine) {
 1564|      0|    ENGINE_finish(data->state.engine);
 1565|      0|    ENGINE_free(data->state.engine);
 1566|      0|    data->state.engine = NULL;
 1567|      0|  }
 1568|       |#else
 1569|       |  (void)data;
 1570|       |#endif
 1571|  6.05k|#if !defined(HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED) && \
 1572|  6.05k|  defined(HAVE_ERR_REMOVE_THREAD_STATE)
 1573|       |  /* OpenSSL 1.0.1 and 1.0.2 build an error queue that is stored per-thread
 1574|       |     so we need to clean it here in case the thread will be killed. All OpenSSL
 1575|       |     code should extract the error in association with the error so clearing
 1576|       |     this queue here should be harmless at worst. */
 1577|  6.05k|  ERR_remove_thread_state(NULL);
 1578|  6.05k|#endif
 1579|  6.05k|}
openssl.c:ossl_associate_connection:
 4485|  5.77k|{
 4486|  5.77k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4487|  5.77k|  struct ssl_backend_data *backend = connssl->backend;
 4488|       |
 4489|       |  /* If we don't have SSL context, do nothing. */
 4490|  5.77k|  if(!backend->handle)
 4491|  5.77k|    return;
 4492|       |
 4493|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4494|      0|    int data_idx = ossl_get_ssl_data_index();
 4495|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4496|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4497|      0|    int proxy_idx = ossl_get_proxy_index();
 4498|       |
 4499|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4500|      0|       proxy_idx >= 0) {
 4501|       |      /* Store the data needed for the "new session" callback.
 4502|       |       * The sockindex is stored as a pointer to an array element. */
 4503|      0|      SSL_set_ex_data(backend->handle, data_idx, data);
 4504|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, conn);
 4505|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
 4506|      0|#ifndef CURL_DISABLE_PROXY
 4507|      0|      SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:
 4508|      0|                      NULL);
 4509|       |#else
 4510|       |      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4511|       |#endif
 4512|      0|    }
 4513|      0|  }
 4514|      0|}
openssl.c:ossl_disassociate_connection:
 4526|  5.77k|{
 4527|  5.77k|  struct connectdata *conn = data->conn;
 4528|  5.77k|  struct ssl_connect_data *connssl = &conn->ssl[sockindex];
 4529|  5.77k|  struct ssl_backend_data *backend = connssl->backend;
 4530|       |
 4531|       |  /* If we don't have SSL context, do nothing. */
 4532|  5.77k|  if(!backend->handle)
 4533|  5.77k|    return;
 4534|       |
 4535|      0|  if(SSL_SET_OPTION(primary.sessionid)) {
 4536|      0|    int data_idx = ossl_get_ssl_data_index();
 4537|      0|    int connectdata_idx = ossl_get_ssl_conn_index();
 4538|      0|    int sockindex_idx = ossl_get_ssl_sockindex_index();
 4539|      0|    int proxy_idx = ossl_get_proxy_index();
 4540|       |
 4541|      0|    if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&
 4542|      0|       proxy_idx >= 0) {
 4543|       |      /* Disable references to data in "new session" callback to avoid
 4544|       |       * accessing a stale pointer. */
 4545|      0|      SSL_set_ex_data(backend->handle, data_idx, NULL);
 4546|      0|      SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
 4547|      0|      SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
 4548|      0|      SSL_set_ex_data(backend->handle, proxy_idx, NULL);
 4549|      0|    }
 4550|      0|  }
 4551|      0|}

Curl_clone_primary_ssl_config:
  168|  5.61k|{
  169|  5.61k|  dest->version = source->version;
  170|  5.61k|  dest->version_max = source->version_max;
  171|  5.61k|  dest->verifypeer = source->verifypeer;
  172|  5.61k|  dest->verifyhost = source->verifyhost;
  173|  5.61k|  dest->verifystatus = source->verifystatus;
  174|  5.61k|  dest->sessionid = source->sessionid;
  175|       |
  176|  5.61k|  CLONE_BLOB(cert_blob);
  177|  5.61k|  CLONE_BLOB(ca_info_blob);
  178|  5.61k|  CLONE_BLOB(issuercert_blob);
  179|  5.61k|  CLONE_STRING(CApath);
  180|  5.61k|  CLONE_STRING(CAfile);
  181|  5.61k|  CLONE_STRING(issuercert);
  182|  5.61k|  CLONE_STRING(clientcert);
  183|  5.61k|  CLONE_STRING(random_file);
  184|  5.61k|  CLONE_STRING(egdsocket);
  185|  5.61k|  CLONE_STRING(cipher_list);
  186|  5.61k|  CLONE_STRING(cipher_list13);
  187|  5.61k|  CLONE_STRING(pinned_key);
  188|  5.61k|  CLONE_STRING(curves);
  189|       |
  190|  5.61k|  return TRUE;
  191|  5.61k|}
Curl_free_primary_ssl_config:
  194|  5.84k|{
  195|  5.84k|  Curl_safefree(sslc->CApath);
  196|  5.84k|  Curl_safefree(sslc->CAfile);
  197|  5.84k|  Curl_safefree(sslc->issuercert);
  198|  5.84k|  Curl_safefree(sslc->clientcert);
  199|  5.84k|  Curl_safefree(sslc->random_file);
  200|  5.84k|  Curl_safefree(sslc->egdsocket);
  201|  5.84k|  Curl_safefree(sslc->cipher_list);
  202|  5.84k|  Curl_safefree(sslc->cipher_list13);
  203|  5.84k|  Curl_safefree(sslc->pinned_key);
  204|  5.84k|  Curl_safefree(sslc->cert_blob);
  205|  5.84k|  Curl_safefree(sslc->ca_info_blob);
  206|  5.84k|  Curl_safefree(sslc->issuercert_blob);
  207|  5.84k|  Curl_safefree(sslc->curves);
  208|  5.84k|}
Curl_ssl_backend:
  215|  6.05k|{
  216|  6.05k|#ifdef USE_SSL
  217|  6.05k|  multissl_setup(NULL);
  218|  6.05k|  return Curl_ssl->info.id;
  219|       |#else
  220|       |  return (int)CURLSSLBACKEND_NONE;
  221|       |#endif
  222|  6.05k|}
Curl_ssl_init:
  236|      1|{
  237|       |  /* make sure this is only done once */
  238|      1|  if(init_ssl)
  239|      0|    return 1;
  240|      1|  init_ssl = TRUE; /* never again */
  241|       |
  242|      1|  return Curl_ssl->init();
  243|      1|}
Curl_ssl_kill_session:
  474|  14.0k|{
  475|  14.0k|  if(session->sessionid) {
  476|       |    /* defensive check */
  477|       |
  478|       |    /* free the ID the SSL-layer specific way */
  479|      0|    Curl_ssl->session_free(session->sessionid);
  480|       |
  481|      0|    session->sessionid = NULL;
  482|      0|    session->age = 0; /* fresh */
  483|       |
  484|      0|    Curl_free_primary_ssl_config(&session->ssl_config);
  485|       |
  486|      0|    Curl_safefree(session->name);
  487|      0|    Curl_safefree(session->conn_to_host);
  488|      0|  }
  489|  14.0k|}
Curl_ssl_associate_conn:
  628|  5.77k|{
  629|  5.77k|  if(Curl_ssl->associate_connection) {
  630|  5.77k|    Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);
  631|  5.77k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  632|      0|      Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);
  633|  5.77k|  }
  634|  5.77k|}
Curl_ssl_detach_conn:
  638|  5.77k|{
  639|  5.77k|  if(Curl_ssl->disassociate_connection) {
  640|  5.77k|    Curl_ssl->disassociate_connection(data, FIRSTSOCKET);
  641|  5.77k|    if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)
  642|      0|      Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);
  643|  5.77k|  }
  644|  5.77k|}
Curl_ssl_close_all:
  647|  6.05k|{
  648|       |  /* kill the session ID cache if not shared */
  649|  6.05k|  if(data->state.session && !SSLSESSION_SHARED(data)) {
  650|  2.81k|    size_t i;
  651|  16.8k|    for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++)
  652|       |      /* the single-killer function handles empty table slots */
  653|  14.0k|      Curl_ssl_kill_session(&data->state.session[i]);
  654|       |
  655|       |    /* free the cache data */
  656|  2.81k|    Curl_safefree(data->state.session);
  657|  2.81k|  }
  658|       |
  659|  6.05k|  Curl_ssl->close_all(data);
  660|  6.05k|}
Curl_ssl_close:
  682|  5.84k|{
  683|  5.84k|  DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));
  684|  5.84k|  Curl_ssl->close_one(data, conn, sockindex);
  685|  5.84k|  conn->ssl[sockindex].state = ssl_connection_none;
  686|  5.84k|}
Curl_ssl_initsessions:
  728|  2.81k|{
  729|  2.81k|  struct Curl_ssl_session *session;
  730|       |
  731|  2.81k|  if(data->state.session)
  732|       |    /* this is just a precaution to prevent multiple inits */
  733|      3|    return CURLE_OK;
  734|       |
  735|  2.81k|  session = calloc(amount, sizeof(struct Curl_ssl_session));
  736|  2.81k|  if(!session)
  737|      0|    return CURLE_OUT_OF_MEMORY;
  738|       |
  739|       |  /* store the info in the SSL section */
  740|  2.81k|  data->set.general_ssl.max_ssl_sessions = amount;
  741|  2.81k|  data->state.session = session;
  742|  2.81k|  data->state.sessionage = 1; /* this is brand new */
  743|  2.81k|  return CURLE_OK;
  744|  2.81k|}
Curl_ssl_data_pending:
  772|  9.71k|{
  773|  9.71k|  return Curl_ssl->data_pending(conn, connindex);
  774|  9.71k|}
Curl_ssl_free_certinfo:
  777|  14.9k|{
  778|  14.9k|  struct curl_certinfo *ci = &data->info.certs;
  779|       |
  780|  14.9k|  if(ci->num_of_certs) {
  781|       |    /* free all individual lists used */
  782|      0|    int i;
  783|      0|    for(i = 0; i<ci->num_of_certs; i++) {
  784|      0|      curl_slist_free_all(ci->certinfo[i]);
  785|      0|      ci->certinfo[i] = NULL;
  786|      0|    }
  787|       |
  788|      0|    free(ci->certinfo); /* free the actual array too */
  789|      0|    ci->certinfo = NULL;
  790|      0|    ci->num_of_certs = 0;
  791|      0|  }
  792|  14.9k|}
Curl_ssl_random:
  870|  3.73k|{
  871|  3.73k|  return Curl_ssl->random(data, entropy, length);
  872|  3.73k|}
vtls.c:blobdup:
   96|  16.8k|{
   97|  16.8k|  DEBUGASSERT(dest);
   98|  16.8k|  DEBUGASSERT(!*dest);
   99|  16.8k|  if(src) {
  100|       |    /* only if there's data to dupe! */
  101|      0|    struct curl_blob *d;
  102|      0|    d = malloc(sizeof(struct curl_blob) + src->len);
  103|      0|    if(!d)
  104|      0|      return CURLE_OUT_OF_MEMORY;
  105|      0|    d->len = src->len;
  106|       |    /* Always duplicate because the connection may survive longer than the
  107|       |       handle that passed in the blob. */
  108|      0|    d->flags = CURL_BLOB_COPY;
  109|      0|    d->data = (void *)((char *)d + sizeof(struct curl_blob));
  110|      0|    memcpy(d->data, src->data, src->len);
  111|      0|    *dest = d;
  112|      0|  }
  113|  16.8k|  return CURLE_OK;
  114|  16.8k|}
vtls.c:multissl_setup:
 1389|  6.05k|{
 1390|  6.05k|  const char *env;
 1391|  6.05k|  char *env_tmp;
 1392|       |
 1393|  6.05k|  if(Curl_ssl != &Curl_ssl_multi)
 1394|  6.05k|    return 1;
 1395|       |
 1396|      0|  if(backend) {
 1397|      0|    Curl_ssl = backend;
 1398|      0|    return 0;
 1399|      0|  }
 1400|       |
 1401|      0|  if(!available_backends[0])
 1402|      0|    return 1;
 1403|       |
 1404|      0|  env = env_tmp = curl_getenv("CURL_SSL_BACKEND");
 1405|       |#ifdef CURL_DEFAULT_SSL_BACKEND
 1406|       |  if(!env)
 1407|       |    env = CURL_DEFAULT_SSL_BACKEND;
 1408|       |#endif
 1409|      0|  if(env) {
 1410|      0|    int i;
 1411|      0|    for(i = 0; available_backends[i]; i++) {
 1412|      0|      if(strcasecompare(env, available_backends[i]->info.name)) {
 1413|      0|        Curl_ssl = available_backends[i];
 1414|      0|        free(env_tmp);
 1415|      0|        return 0;
 1416|      0|      }
 1417|      0|    }
 1418|      0|  }
 1419|       |
 1420|       |  /* Fall back to first available backend */
 1421|      0|  Curl_ssl = available_backends[0];
 1422|      0|  free(env_tmp);
 1423|      0|  return 0;
 1424|      0|}

curlx_ultous:
   63|  2.85k|{
   64|       |#ifdef __INTEL_COMPILER
   65|       |#  pragma warning(push)
   66|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   67|       |#endif
   68|       |
   69|  2.85k|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_USHORT);
   70|  2.85k|  return (unsigned short)(ulnum & (unsigned long) CURL_MASK_USHORT);
   71|       |
   72|       |#ifdef __INTEL_COMPILER
   73|       |#  pragma warning(pop)
   74|       |#endif
   75|  2.85k|}
curlx_ultouc:
   82|    958|{
   83|       |#ifdef __INTEL_COMPILER
   84|       |#  pragma warning(push)
   85|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
   86|       |#endif
   87|       |
   88|    958|  DEBUGASSERT(ulnum <= (unsigned long) CURL_MASK_UCHAR);
   89|    958|  return (unsigned char)(ulnum & (unsigned long) CURL_MASK_UCHAR);
   90|       |
   91|       |#ifdef __INTEL_COMPILER
   92|       |#  pragma warning(pop)
   93|       |#endif
   94|    958|}
curlx_uztosi:
  123|  3.73k|{
  124|       |#ifdef __INTEL_COMPILER
  125|       |#  pragma warning(push)
  126|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  127|       |#endif
  128|       |
  129|  3.73k|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_SINT);
  130|  3.73k|  return (int)(uznum & (size_t) CURL_MASK_SINT);
  131|       |
  132|       |#ifdef __INTEL_COMPILER
  133|       |#  pragma warning(pop)
  134|       |#endif
  135|  3.73k|}
curlx_uztoui:
  163|    214|{
  164|       |#ifdef __INTEL_COMPILER
  165|       |# pragma warning(push)
  166|       |# pragma warning(disable:810) /* conversion may lose significant bits */
  167|       |#endif
  168|       |
  169|    214|#if UINT_MAX < SIZE_T_MAX
  170|    214|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_UINT);
  171|    214|#endif
  172|    214|  return (unsigned int)(uznum & (size_t) CURL_MASK_UINT);
  173|       |
  174|       |#ifdef __INTEL_COMPILER
  175|       |# pragma warning(pop)
  176|       |#endif
  177|    214|}
curlx_sltosi:
  184|  10.5k|{
  185|       |#ifdef __INTEL_COMPILER
  186|       |#  pragma warning(push)
  187|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  188|       |#endif
  189|       |
  190|  10.5k|  DEBUGASSERT(slnum >= 0);
  191|  10.5k|#if INT_MAX < LONG_MAX
  192|  10.5k|  DEBUGASSERT((unsigned long) slnum <= (unsigned long) CURL_MASK_SINT);
  193|  10.5k|#endif
  194|  10.5k|  return (int)(slnum & (long) CURL_MASK_SINT);
  195|       |
  196|       |#ifdef __INTEL_COMPILER
  197|       |#  pragma warning(pop)
  198|       |#endif
  199|  10.5k|}
curlx_uztosz:
  248|      3|{
  249|       |#ifdef __INTEL_COMPILER
  250|       |#  pragma warning(push)
  251|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  252|       |#endif
  253|       |
  254|      3|  DEBUGASSERT(uznum <= (size_t) CURL_MASK_SSIZE_T);
  255|      3|  return (ssize_t)(uznum & (size_t) CURL_MASK_SSIZE_T);
  256|       |
  257|       |#ifdef __INTEL_COMPILER
  258|       |#  pragma warning(pop)
  259|       |#endif
  260|      3|}
curlx_sotouz:
  267|  96.2k|{
  268|       |#ifdef __INTEL_COMPILER
  269|       |#  pragma warning(push)
  270|       |#  pragma warning(disable:810) /* conversion may lose significant bits */
  271|       |#endif
  272|       |
  273|  96.2k|  DEBUGASSERT(sonum >= 0);
  274|  96.2k|  return (size_t)(sonum & (curl_off_t) CURL_MASK_USIZE_T);
  275|       |
  276|       |#ifdef __INTEL_COMPILER
  277|       |#  pragma warning(pop)
  278|       |#endif
  279|  96.2k|}

Curl_wildcard_init:
   42|     51|{
   43|     51|  Curl_llist_init(&wc->filelist, fileinfo_dtor);
   44|     51|  wc->state = CURLWC_INIT;
   45|       |
   46|     51|  return CURLE_OK;
   47|     51|}
Curl_wildcard_dtor:
   50|  9.02k|{
   51|  9.02k|  if(!wc)
   52|      0|    return;
   53|       |
   54|  9.02k|  if(wc->dtor) {
   55|      4|    wc->dtor(wc->protdata);
   56|      4|    wc->dtor = ZERO_NULL;
   57|      4|    wc->protdata = NULL;
   58|      4|  }
   59|  9.02k|  DEBUGASSERT(wc->protdata == NULL);
   60|       |
   61|  9.02k|  Curl_llist_destroy(&wc->filelist, NULL);
   62|       |
   63|       |
   64|  9.02k|  free(wc->path);
   65|  9.02k|  wc->path = NULL;
   66|  9.02k|  free(wc->pattern);
   67|  9.02k|  wc->pattern = NULL;
   68|       |
   69|  9.02k|  wc->customptr = NULL;
   70|  9.02k|  wc->state = CURLWC_INIT;
   71|  9.02k|}

LLVMFuzzerTestOneInput:
   35|  3.08k|{
   36|  3.08k|  int rc = 0;
   37|  3.08k|  int tlv_rc;
   38|  3.08k|  FUZZ_DATA fuzz;
   39|  3.08k|  TLV tlv;
   40|       |
   41|       |  /* Ignore SIGPIPE errors. We'll handle the errors ourselves. */
   42|  3.08k|  signal(SIGPIPE, SIG_IGN);
   43|       |
   44|       |  /* Have to set all fields to zero before getting to the terminate function */
   45|  3.08k|  memset(&fuzz, 0, sizeof(FUZZ_DATA));
   46|       |
   47|  3.08k|  if(size < sizeof(TLV_RAW)) {
   48|       |    /* Not enough data for a single TLV - don't continue */
   49|      1|    goto EXIT_LABEL;
   50|      1|  }
   51|       |
   52|       |  /* Try to initialize the fuzz data */
   53|  3.08k|  FTRY(fuzz_initialize_fuzz_data(&fuzz, data, size));
   54|       |
   55|  3.08k|  for(tlv_rc = fuzz_get_first_tlv(&fuzz, &tlv);
   56|  38.9k|      tlv_rc == 0;
   57|  35.9k|      tlv_rc = fuzz_get_next_tlv(&fuzz, &tlv)) {
   58|       |
   59|       |    /* Have the TLV in hand. Parse the TLV. */
   60|  35.9k|    rc = fuzz_parse_tlv(&fuzz, &tlv);
   61|       |
   62|  35.9k|    if(rc != 0) {
   63|       |      /* Failed to parse the TLV. Can't continue. */
   64|     50|      goto EXIT_LABEL;
   65|     50|    }
   66|  35.9k|  }
   67|       |
   68|  3.03k|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
   69|       |    /* A TLV call failed. Can't continue. */
   70|     63|    goto EXIT_LABEL;
   71|     63|  }
   72|       |
   73|       |  /* Set up the standard easy options. */
   74|  2.97k|  FTRY(fuzz_set_easy_options(&fuzz));
   75|       |
   76|       |  /**
   77|       |   * Add in more curl options that have been accumulated over possibly
   78|       |   * multiple TLVs.
   79|       |   */
   80|  2.97k|  if(fuzz.header_list != NULL) {
   81|    149|    curl_easy_setopt(fuzz.easy, CURLOPT_HTTPHEADER, fuzz.header_list);
   82|    149|  }
   83|       |
   84|  2.97k|  if(fuzz.mail_recipients_list != NULL) {
   85|    107|    curl_easy_setopt(fuzz.easy, CURLOPT_MAIL_RCPT, fuzz.mail_recipients_list);
   86|    107|  }
   87|       |
   88|  2.97k|  if(fuzz.mime != NULL) {
   89|    244|    curl_easy_setopt(fuzz.easy, CURLOPT_MIMEPOST, fuzz.mime);
   90|    244|  }
   91|       |
   92|       |  /* Run the transfer. */
   93|  2.97k|  fuzz_handle_transfer(&fuzz);
   94|       |
   95|  3.08k|EXIT_LABEL:
   96|       |
   97|  3.08k|  fuzz_terminate_fuzz_data(&fuzz);
   98|       |
   99|       |  /* This function must always return 0. Non-zero codes are reserved. */
  100|  3.08k|  return 0;
  101|  2.97k|}
_Z6to_u32PKh:
  107|  38.9k|{
  108|  38.9k|  uint32_t u;
  109|  38.9k|  u = (b[0] << 24) + (b[1] << 16) + (b[2] << 8) + b[3];
  110|  38.9k|  return u;
  111|  38.9k|}
_Z6to_u16PKh:
  117|  38.7k|{
  118|  38.7k|  uint16_t u;
  119|  38.7k|  u = (b[0] << 8) + b[1];
  120|  38.7k|  return u;
  121|  38.7k|}
_Z25fuzz_initialize_fuzz_dataP9fuzz_dataPKhm:
  129|  3.08k|{
  130|  3.08k|  int rc = 0;
  131|  3.08k|  int ii;
  132|       |
  133|       |  /* Initialize the fuzz data. */
  134|  3.08k|  memset(fuzz, 0, sizeof(FUZZ_DATA));
  135|       |
  136|       |  /* Create an easy handle. This will have all of the settings configured on
  137|       |     it. */
  138|  3.08k|  fuzz->easy = curl_easy_init();
  139|  3.08k|  FCHECK(fuzz->easy != NULL);
  140|       |
  141|       |  /* Set up the state parser */
  142|  3.08k|  fuzz->state.data = data;
  143|  3.08k|  fuzz->state.data_len = data_len;
  144|       |
  145|       |  /* Set up the state of the server sockets. */
  146|  9.25k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  147|  6.17k|    fuzz->sockman[ii].index = ii;
  148|  6.17k|    fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  149|  6.17k|  }
  150|       |
  151|       |  /* Check for verbose mode. */
  152|  3.08k|  fuzz->verbose = (getenv("FUZZ_VERBOSE") != NULL);
  153|       |
  154|  3.08k|EXIT_LABEL:
  155|       |
  156|  3.08k|  return rc;
  157|  3.08k|}
_Z21fuzz_set_easy_optionsP9fuzz_data:
  163|  2.97k|{
  164|  2.97k|  int rc = 0;
  165|  2.97k|  unsigned long allowed_protocols;
  166|       |
  167|       |  /* Set some standard options on the CURL easy handle. We need to override the
  168|       |     socket function so that we create our own sockets to present to CURL. */
  169|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy,
  170|  2.97k|                        CURLOPT_OPENSOCKETFUNCTION,
  171|  2.97k|                        fuzz_open_socket));
  172|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_OPENSOCKETDATA, fuzz));
  173|       |
  174|       |  /* In case something tries to set a socket option, intercept this. */
  175|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy,
  176|  2.97k|                        CURLOPT_SOCKOPTFUNCTION,
  177|  2.97k|                        fuzz_sockopt_callback));
  178|       |
  179|       |  /* Set the standard read function callback. */
  180|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy,
  181|  2.97k|                        CURLOPT_READFUNCTION,
  182|  2.97k|                        fuzz_read_callback));
  183|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_READDATA, fuzz));
  184|       |
  185|       |  /* Set the standard write function callback. */
  186|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy,
  187|  2.97k|                        CURLOPT_WRITEFUNCTION,
  188|  2.97k|                        fuzz_write_callback));
  189|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_WRITEDATA, fuzz));
  190|       |
  191|       |  /* Set the cookie jar so cookies are tested. */
  192|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_COOKIEJAR, FUZZ_COOKIE_JAR_PATH));
  193|       |
  194|       |  /* Time out requests quickly. */
  195|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_TIMEOUT_MS, 200L));
  196|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_SERVER_RESPONSE_TIMEOUT, 1L));
  197|       |
  198|       |  /* Can enable verbose mode by having the environment variable FUZZ_VERBOSE. */
  199|  2.97k|  if(fuzz->verbose) {
  200|      0|    FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_VERBOSE, 1L));
  201|      0|  }
  202|       |
  203|       |  /* Force resolution of all addresses to a specific IP address. */
  204|  2.97k|  fuzz->connect_to_list = curl_slist_append(NULL, "::127.0.1.127:");
  205|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_CONNECT_TO, fuzz->connect_to_list));
  206|       |
  207|       |  /* Limit the protocols in use by this fuzzer. */
  208|  2.97k|  FTRY(fuzz_set_allowed_protocols(fuzz));
  209|       |
  210|  2.97k|EXIT_LABEL:
  211|       |
  212|  2.97k|  return rc;
  213|  2.97k|}
_Z24fuzz_terminate_fuzz_dataP9fuzz_data:
  219|  3.08k|{
  220|  3.08k|  int ii;
  221|       |
  222|  3.08k|  fuzz_free((void **)&fuzz->postfields);
  223|       |
  224|  9.25k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  225|  6.17k|    if(fuzz->sockman[ii].fd_state != FUZZ_SOCK_CLOSED) {
  226|  2.79k|      close(fuzz->sockman[ii].fd);
  227|  2.79k|      fuzz->sockman[ii].fd_state = FUZZ_SOCK_CLOSED;
  228|  2.79k|    }
  229|  6.17k|  }
  230|       |
  231|  3.08k|  if(fuzz->connect_to_list != NULL) {
  232|  2.97k|    curl_slist_free_all(fuzz->connect_to_list);
  233|  2.97k|    fuzz->connect_to_list = NULL;
  234|  2.97k|  }
  235|       |
  236|  3.08k|  if(fuzz->header_list != NULL) {
  237|    157|    curl_slist_free_all(fuzz->header_list);
  238|    157|    fuzz->header_list = NULL;
  239|    157|  }
  240|       |
  241|  3.08k|  if(fuzz->mail_recipients_list != NULL) {
  242|    125|    curl_slist_free_all(fuzz->mail_recipients_list);
  243|    125|    fuzz->mail_recipients_list = NULL;
  244|    125|  }
  245|       |
  246|  3.08k|  if(fuzz->mime != NULL) {
  247|    280|    curl_mime_free(fuzz->mime);
  248|    280|    fuzz->mime = NULL;
  249|    280|  }
  250|       |
  251|  3.08k|  if(fuzz->easy != NULL) {
  252|  3.08k|    curl_easy_cleanup(fuzz->easy);
  253|  3.08k|    fuzz->easy = NULL;
  254|  3.08k|  }
  255|  3.08k|}
_Z9fuzz_freePPv:
  261|  39.4k|{
  262|  39.4k|  if(*ptr != NULL) {
  263|  11.4k|    free(*ptr);
  264|  11.4k|    *ptr = NULL;
  265|  11.4k|  }
  266|  39.4k|}
_Z20fuzz_handle_transferP9fuzz_data:
  273|  2.97k|{
  274|  2.97k|  int rc = 0;
  275|  2.97k|  CURLM *multi_handle;
  276|  2.97k|  int still_running; /* keep number of running handles */
  277|  2.97k|  CURLMsg *msg; /* for picking up messages with the transfer status */
  278|  2.97k|  int msgs_left; /* how many messages are left */
  279|  2.97k|  int double_timeout = 0;
  280|  2.97k|  fd_set fdread;
  281|  2.97k|  fd_set fdwrite;
  282|  2.97k|  fd_set fdexcep;
  283|  2.97k|  struct timeval timeout;
  284|  2.97k|  int select_rc;
  285|  2.97k|  CURLMcode mc;
  286|  2.97k|  int maxfd = -1;
  287|  2.97k|  long curl_timeo = -1;
  288|  2.97k|  int ii;
  289|  2.97k|  FUZZ_SOCKET_MANAGER *sman[FUZZ_NUM_CONNECTIONS];
  290|       |
  291|  8.91k|  for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  292|  5.94k|    sman[ii] = &fuzz->sockman[ii];
  293|       |
  294|       |    /* Set up the starting index for responses. */
  295|  5.94k|    sman[ii]->response_index = 1;
  296|  5.94k|  }
  297|       |
  298|       |  /* init a multi stack */
  299|  2.97k|  multi_handle = curl_multi_init();
  300|       |
  301|       |  /* add the individual transfers */
  302|  2.97k|  curl_multi_add_handle(multi_handle, fuzz->easy);
  303|       |
  304|       |  /* Do an initial process. This might end the transfer immediately. */
  305|  2.97k|  curl_multi_perform(multi_handle, &still_running);
  306|  2.97k|  FV_PRINTF(fuzz,
  307|  2.97k|            "FUZZ: Initial perform; still running? %d \n",
  308|  2.97k|            still_running);
  309|       |
  310|  4.74M|  while(still_running) {
  311|       |    /* Reset the sets of file descriptors. */
  312|  4.73M|    FD_ZERO(&fdread);
  313|  4.73M|    FD_ZERO(&fdwrite);
  314|  4.73M|    FD_ZERO(&fdexcep);
  315|       |
  316|       |    /* Set a timeout of 10ms. This is lower than recommended by the multi guide
  317|       |       but we're not going to any remote servers, so everything should complete
  318|       |       very quickly. */
  319|  4.73M|    timeout.tv_sec = 0;
  320|  4.73M|    timeout.tv_usec = 10000;
  321|       |
  322|       |    /* get file descriptors from the transfers */
  323|  4.73M|    mc = curl_multi_fdset(multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);
  324|  4.73M|    if(mc != CURLM_OK) {
  325|      0|      fprintf(stderr, "curl_multi_fdset() failed, code %d.\n", mc);
  326|      0|      rc = -1;
  327|      0|      break;
  328|      0|    }
  329|       |
  330|  14.2M|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  331|       |      /* Add the socket FD into the readable set if connected. */
  332|  9.47M|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN) {
  333|    705|        FD_SET(sman[ii]->fd, &fdread);
  334|       |
  335|       |        /* Work out the maximum FD between the cURL file descriptors and the
  336|       |           server FD. */
  337|    705|        maxfd = FUZZ_MAX(sman[ii]->fd, maxfd);
  338|    705|      }
  339|  9.47M|    }
  340|       |
  341|       |    /* Work out what file descriptors need work. */
  342|  4.73M|    rc = fuzz_select(maxfd + 1, &fdread, &fdwrite, &fdexcep, &timeout);
  343|       |
  344|  4.73M|    if(rc == -1) {
  345|       |      /* Had an issue while selecting a file descriptor. Let's just exit. */
  346|      0|      FV_PRINTF(fuzz, "FUZZ: select failed, exiting \n");
  347|      0|      break;
  348|      0|    }
  349|  4.73M|    else if(rc == 0) {
  350|     87|      FV_PRINTF(fuzz,
  351|     87|                "FUZZ: Timed out; double timeout? %d \n",
  352|     87|                double_timeout);
  353|       |
  354|       |      /* Timed out. */
  355|     87|      if(double_timeout == 1) {
  356|       |        /* We don't expect multiple timeouts in a row. If there are double
  357|       |           timeouts then exit. */
  358|     38|        break;
  359|     38|      }
  360|     49|      else {
  361|       |        /* Set the timeout flag for the next time we select(). */
  362|     49|        double_timeout = 1;
  363|     49|      }
  364|     87|    }
  365|  4.73M|    else {
  366|       |      /* There's an active file descriptor. Reset the timeout flag. */
  367|  4.73M|      double_timeout = 0;
  368|  4.73M|    }
  369|       |
  370|       |    /* Check to see if a server file descriptor is readable. If it is,
  371|       |       then send the next response from the fuzzing data. */
  372|  14.2M|    for(ii = 0; ii < FUZZ_NUM_CONNECTIONS; ii++) {
  373|  9.47M|      if(sman[ii]->fd_state == FUZZ_SOCK_OPEN &&
  374|  9.47M|         FD_ISSET(sman[ii]->fd, &fdread)) {
  375|    563|        rc = fuzz_send_next_response(fuzz, sman[ii]);
  376|    563|        if(rc != 0) {
  377|       |          /* Failed to send a response. Break out here. */
  378|      0|          break;
  379|      0|        }
  380|    563|      }
  381|  9.47M|    }
  382|       |
  383|  4.73M|    curl_multi_perform(multi_handle, &still_running);
  384|  4.73M|  }
  385|       |
  386|       |  /* Remove the easy handle from the multi stack. */
  387|  2.97k|  curl_multi_remove_handle(multi_handle, fuzz->easy);
  388|       |
  389|       |  /* Clean up the multi handle - the top level function will handle the easy
  390|       |     handle. */
  391|  2.97k|  curl_multi_cleanup(multi_handle);
  392|       |
  393|  2.97k|  return(rc);
  394|  2.97k|}
_Z23fuzz_send_next_responseP9fuzz_dataP19fuzz_socket_manager:
  400|    563|{
  401|    563|  int rc = 0;
  402|    563|  ssize_t ret_in;
  403|    563|  ssize_t ret_out;
  404|    563|  char buffer[8192];
  405|    563|  const uint8_t *data;
  406|    563|  size_t data_len;
  407|       |
  408|       |  /* Need to read all data sent by the client so the file descriptor becomes
  409|       |     unreadable. Because the file descriptor is non-blocking we won't just
  410|       |     hang here. */
  411|  1.17k|  do {
  412|  1.17k|    ret_in = read(sman->fd, buffer, sizeof(buffer));
  413|  1.17k|    if(fuzz->verbose && ret_in > 0) {
  414|      0|      printf("FUZZ[%d]: Received %zu bytes \n==>\n", sman->index, ret_in);
  415|      0|      fwrite(buffer, ret_in, 1, stdout);
  416|      0|      printf("\n<==\n");
  417|      0|    }
  418|  1.17k|  } while (ret_in > 0);
  419|       |
  420|       |  /* Now send a response to the request that the client just made. */
  421|    563|  FV_PRINTF(fuzz,
  422|    563|            "FUZZ[%d]: Sending next response: %d \n",
  423|    563|            sman->index,
  424|    563|            sman->response_index);
  425|    563|  data = sman->responses[sman->response_index].data;
  426|    563|  data_len = sman->responses[sman->response_index].data_len;
  427|       |
  428|    563|  if(data != NULL) {
  429|    563|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  430|       |      /* Failed to write the data back to the client. Prevent any further
  431|       |         testing. */
  432|      0|      rc = -1;
  433|      0|    }
  434|    563|  }
  435|       |
  436|       |  /* Work out if there are any more responses. If not, then shut down the
  437|       |     server. */
  438|    563|  sman->response_index++;
  439|       |
  440|    563|  if(sman->response_index >= TLV_MAX_NUM_RESPONSES ||
  441|    563|     sman->responses[sman->response_index].data == NULL) {
  442|    218|    FV_PRINTF(fuzz,
  443|    218|              "FUZZ[%d]: Shutting down server socket: %d \n",
  444|    218|              sman->index,
  445|    218|              sman->fd);
  446|    218|    shutdown(sman->fd, SHUT_WR);
  447|    218|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  448|    218|  }
  449|       |
  450|    563|  return(rc);
  451|    563|}
_Z11fuzz_selectiP6fd_setS0_S0_P7timeval:
  460|  4.73M|                struct timeval *timeout) {
  461|  4.73M|  return select(nfds, readfds, writefds, exceptfds, timeout);
  462|  4.73M|}
_Z26fuzz_set_allowed_protocolsP9fuzz_data:
  468|  2.97k|{
  469|  2.97k|  int rc = 0;
  470|  2.97k|  unsigned long allowed_protocols = 0;
  471|       |
  472|  2.97k|#ifdef FUZZ_PROTOCOLS_ALL
  473|       |  /* Do not allow telnet currently as it accepts input from stdin. */
  474|  2.97k|  allowed_protocols |= CURLPROTO_ALL & ~CURLPROTO_TELNET;
  475|  2.97k|#endif
  476|       |#ifdef FUZZ_PROTOCOLS_DICT
  477|       |  allowed_protocols |= CURLPROTO_DICT;
  478|       |#endif
  479|       |#ifdef FUZZ_PROTOCOLS_FILE
  480|       |  allowed_protocols |= CURLPROTO_FILE;
  481|       |#endif
  482|       |#ifdef FUZZ_PROTOCOLS_FTP
  483|       |  allowed_protocols |= CURLPROTO_FTP;
  484|       |  allowed_protocols |= CURLPROTO_FTPS;
  485|       |#endif
  486|       |#ifdef FUZZ_PROTOCOLS_GOPHER
  487|       |  allowed_protocols |= CURLPROTO_GOPHER;
  488|       |#endif
  489|       |#ifdef FUZZ_PROTOCOLS_HTTP
  490|       |  allowed_protocols |= CURLPROTO_HTTP;
  491|       |#endif
  492|       |#ifdef FUZZ_PROTOCOLS_HTTPS
  493|       |  allowed_protocols |= CURLPROTO_HTTPS;
  494|       |#endif
  495|       |#ifdef FUZZ_PROTOCOLS_IMAP
  496|       |  allowed_protocols |= CURLPROTO_IMAP;
  497|       |  allowed_protocols |= CURLPROTO_IMAPS;
  498|       |#endif
  499|       |#ifdef FUZZ_PROTOCOLS_LDAP
  500|       |  allowed_protocols |= CURLPROTO_LDAP;
  501|       |  allowed_protocols |= CURLPROTO_LDAPS;
  502|       |#endif
  503|       |#ifdef FUZZ_PROTOCOLS_MQTT
  504|       |  allowed_protocols |= CURLPROTO_MQTT;
  505|       |#endif
  506|       |#ifdef FUZZ_PROTOCOLS_POP3
  507|       |  allowed_protocols |= CURLPROTO_POP3;
  508|       |  allowed_protocols |= CURLPROTO_POP3S;
  509|       |#endif
  510|       |#ifdef FUZZ_PROTOCOLS_RTMP
  511|       |  allowed_protocols |= CURLPROTO_RTMP;
  512|       |  allowed_protocols |= CURLPROTO_RTMPE;
  513|       |  allowed_protocols |= CURLPROTO_RTMPS;
  514|       |  allowed_protocols |= CURLPROTO_RTMPT;
  515|       |  allowed_protocols |= CURLPROTO_RTMPTE;
  516|       |  allowed_protocols |= CURLPROTO_RTMPTS;
  517|       |#endif
  518|       |#ifdef FUZZ_PROTOCOLS_RTSP
  519|       |  allowed_protocols |= CURLPROTO_RTSP;
  520|       |#endif
  521|       |#ifdef FUZZ_PROTOCOLS_SCP
  522|       |  allowed_protocols |= CURLPROTO_SCP;
  523|       |#endif
  524|       |#ifdef FUZZ_PROTOCOLS_SFTP
  525|       |  allowed_protocols |= CURLPROTO_SFTP;
  526|       |#endif
  527|       |#ifdef FUZZ_PROTOCOLS_SMB
  528|       |  allowed_protocols |= CURLPROTO_SMB;
  529|       |  allowed_protocols |= CURLPROTO_SMBS;
  530|       |#endif
  531|       |#ifdef FUZZ_PROTOCOLS_SMTP
  532|       |  allowed_protocols |= CURLPROTO_SMTP;
  533|       |  allowed_protocols |= CURLPROTO_SMTPS;
  534|       |#endif
  535|       |#ifdef FUZZ_PROTOCOLS_TFTP
  536|       |  allowed_protocols |= CURLPROTO_TFTP;
  537|       |#endif
  538|       |
  539|  2.97k|  FTRY(curl_easy_setopt(fuzz->easy, CURLOPT_PROTOCOLS, allowed_protocols));
  540|       |
  541|  2.97k|EXIT_LABEL:
  542|       |
  543|  2.97k|  return rc;
  544|  2.97k|}

_Z16fuzz_open_socketPv12curlsocktypeP13curl_sockaddr:
   42|  2.80k|{
   43|  2.80k|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
   44|  2.80k|  int fds[2];
   45|  2.80k|  int flags;
   46|  2.80k|  int status;
   47|  2.80k|  const uint8_t *data;
   48|  2.80k|  size_t data_len;
   49|  2.80k|  struct sockaddr_un client_addr;
   50|  2.80k|  FUZZ_SOCKET_MANAGER *sman;
   51|       |
   52|       |  /* Handle unused parameters */
   53|  2.80k|  (void)purpose;
   54|  2.80k|  (void)address;
   55|       |
   56|  2.80k|  if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED &&
   57|  2.80k|     fuzz->sockman[1].fd_state != FUZZ_SOCK_CLOSED) {
   58|       |    /* Both sockets have already been opened. */
   59|      9|    return CURL_SOCKET_BAD;
   60|      9|  }
   61|  2.79k|  else if(fuzz->sockman[0].fd_state != FUZZ_SOCK_CLOSED) {
   62|    100|    sman = &fuzz->sockman[1];
   63|    100|  }
   64|  2.69k|  else {
   65|  2.69k|    FV_PRINTF(fuzz, "FUZZ: Using socket manager 0 \n");
   66|  2.69k|    sman = &fuzz->sockman[0];
   67|  2.69k|  }
   68|  2.79k|  FV_PRINTF(fuzz, "FUZZ[%d]: Using socket manager %d \n",
   69|  2.79k|            sman->index,
   70|  2.79k|            sman->index);
   71|       |
   72|  2.79k|  if(socketpair(AF_UNIX, SOCK_STREAM, 0, fds)) {
   73|       |    /* Failed to create a pair of sockets. */
   74|      0|    return CURL_SOCKET_BAD;
   75|      0|  }
   76|       |
   77|  2.79k|  if(!FUZZ_VALID_SOCK(fds[0]) || !FUZZ_VALID_SOCK(fds[1])) {
   78|       |    /* One or more of the file descriptors is too large to fit in an fd_set,
   79|       |       so reject it here. Print out a message because this ought to be quite
   80|       |       rare. */
   81|      0|    printf("FUZZ[%d]: Not using file descriptors %d,%d as FD_SETSIZE is %d\n",
   82|      0|           sman->index,
   83|      0|           fds[0],
   84|      0|           fds[1],
   85|      0|           FD_SETSIZE);
   86|       |
   87|       |    /* Close the file descriptors so they don't leak. */
   88|      0|    close(fds[0]);
   89|      0|    close(fds[1]);
   90|       |
   91|      0|    return CURL_SOCKET_BAD;
   92|      0|  }
   93|       |
   94|       |  /* Make the server non-blocking. */
   95|  2.79k|  flags = fcntl(fds[0], F_GETFL, 0);
   96|  2.79k|  status = fcntl(fds[0], F_SETFL, flags | O_NONBLOCK);
   97|       |
   98|  2.79k|  if(status == -1) {
   99|       |    /* Close the file descriptors so they don't leak. */
  100|      0|    close(fds[0]);
  101|      0|    close(fds[1]);
  102|       |
  103|       |    /* Setting non-blocking failed. Return a negative response code. */
  104|      0|    return CURL_SOCKET_BAD;
  105|      0|  }
  106|       |
  107|       |  /* At this point, the file descriptors in hand should be good enough to
  108|       |     work with. */
  109|  2.79k|  sman->fd = fds[0];
  110|  2.79k|  sman->fd_state = FUZZ_SOCK_OPEN;
  111|       |
  112|       |  /* If the server should be sending data immediately, send it here. */
  113|  2.79k|  data = sman->responses[0].data;
  114|  2.79k|  data_len = sman->responses[0].data_len;
  115|       |
  116|  2.79k|  if(data != NULL) {
  117|  2.22k|    FV_PRINTF(fuzz, "FUZZ[%d]: Sending initial response \n", sman->index);
  118|       |
  119|  2.22k|    if(write(sman->fd, data, data_len) != (ssize_t)data_len) {
  120|       |      /* Close the file descriptors so they don't leak. */
  121|      0|      close(sman->fd);
  122|      0|      sman->fd = -1;
  123|       |
  124|      0|      close(fds[1]);
  125|       |
  126|       |      /* Failed to write all of the response data. */
  127|      0|      return CURL_SOCKET_BAD;
  128|      0|    }
  129|  2.22k|  }
  130|       |
  131|       |  /* Check to see if the socket should be shut down immediately. */
  132|  2.79k|  if(sman->responses[1].data == NULL) {
  133|  2.45k|    FV_PRINTF(fuzz,
  134|  2.45k|              "FUZZ[%d]: Shutting down server socket: %d \n",
  135|  2.45k|              sman->index,
  136|  2.45k|              sman->fd);
  137|  2.45k|    shutdown(sman->fd, SHUT_WR);
  138|  2.45k|    sman->fd_state = FUZZ_SOCK_SHUTDOWN;
  139|  2.45k|  }
  140|       |
  141|       |  /* Return the other half of the socket pair. */
  142|  2.79k|  return fds[1];
  143|  2.79k|}
_Z21fuzz_sockopt_callbackPvi12curlsocktype:
  152|  2.79k|{
  153|  2.79k|  (void)ptr;
  154|  2.79k|  (void)curlfd;
  155|  2.79k|  (void)purpose;
  156|       |
  157|  2.79k|  return CURL_SOCKOPT_ALREADY_CONNECTED;
  158|  2.79k|}
_Z18fuzz_read_callbackPcmmPv:
  167|     20|{
  168|     20|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
  169|     20|  size_t remaining_data;
  170|     20|  size_t buffer_size = size * nitems;
  171|       |
  172|       |  /* If no upload data has been specified, then return an error code. */
  173|     20|  if(fuzz->upload1_data_len == 0) {
  174|       |    /* No data to upload */
  175|      3|    return CURL_READFUNC_ABORT;
  176|      3|  }
  177|       |
  178|       |  /* Work out how much data is remaining to upload. */
  179|     17|  remaining_data = fuzz->upload1_data_len - fuzz->upload1_data_written;
  180|       |
  181|       |  /* Respect the buffer size that libcurl is giving us! */
  182|     17|  if(remaining_data > buffer_size) {
  183|      0|    remaining_data = buffer_size;
  184|      0|  }
  185|       |
  186|     17|  if(remaining_data > 0) {
  187|     11|    FV_PRINTF(fuzz,
  188|     11|              "FUZZ: Uploading %zu bytes from position %zu \n",
  189|     11|              remaining_data,
  190|     11|              fuzz->upload1_data_written);
  191|       |
  192|       |    /* Send the upload data. */
  193|     11|    memcpy(buffer,
  194|     11|           &fuzz->upload1_data[fuzz->upload1_data_written],
  195|     11|           remaining_data);
  196|       |
  197|       |    /* Increase the count of written data */
  198|     11|    fuzz->upload1_data_written += remaining_data;
  199|     11|  }
  200|       |
  201|     17|  return(remaining_data);
  202|     20|}
_Z19fuzz_write_callbackPvmmS_:
  211|  7.71k|{
  212|  7.71k|  size_t total = size * nmemb;
  213|  7.71k|  FUZZ_DATA *fuzz = (FUZZ_DATA *)ptr;
  214|  7.71k|  size_t copy_len = total;
  215|       |
  216|       |  /* Restrict copy_len to at most TEMP_WRITE_ARRAY_SIZE. */
  217|  7.71k|  if(copy_len > TEMP_WRITE_ARRAY_SIZE) {
  218|  1.30k|    copy_len = TEMP_WRITE_ARRAY_SIZE;
  219|  1.30k|  }
  220|       |
  221|       |  /* Copy bytes to the temp store just to ensure the parameters are
  222|       |     exercised. */
  223|  7.71k|  memcpy(fuzz->write_array, contents, copy_len);
  224|       |
  225|       |  /* Add on the total to the count. If it exceeds the maximum then return
  226|       |     zero to the caller so that the transfer is terminated early. */
  227|  7.71k|  fuzz->written_data += total;
  228|       |
  229|  7.71k|  if(fuzz->written_data > MAXIMUM_WRITE_LENGTH) {
  230|      0|    FV_PRINTF(fuzz,
  231|      0|              "FUZZ: Exceeded maximum write length (%lu) \n",
  232|      0|              fuzz->written_data);
  233|      0|    total = 0;
  234|      0|  }
  235|       |
  236|  7.71k|  return total;
  237|  7.71k|}

_Z18fuzz_get_first_tlvP9fuzz_dataP3tlv:
   32|  5.20k|{
   33|       |  /* Reset the cursor. */
   34|  5.20k|  fuzz->state.data_pos = 0;
   35|  5.20k|  return fuzz_get_tlv_comn(fuzz, tlv);
   36|  5.20k|}
_Z17fuzz_get_next_tlvP9fuzz_dataP3tlv:
   43|  36.7k|{
   44|       |  /* Advance the cursor by the full length of the previous TLV. */
   45|  36.7k|  fuzz->state.data_pos += sizeof(TLV_RAW) + tlv->length;
   46|       |
   47|       |  /* Work out if there's a TLV's worth of data to read */
   48|  36.7k|  if(fuzz->state.data_pos + sizeof(TLV_RAW) > fuzz->state.data_len) {
   49|       |    /* No more TLVs to parse */
   50|  3.23k|    return TLV_RC_NO_MORE_TLVS;
   51|  3.23k|  }
   52|       |
   53|  33.5k|  return fuzz_get_tlv_comn(fuzz, tlv);
   54|  36.7k|}
_Z17fuzz_get_tlv_comnP9fuzz_dataP3tlv:
   61|  38.7k|{
   62|  38.7k|  int rc = 0;
   63|  38.7k|  size_t data_offset;
   64|  38.7k|  TLV_RAW *raw;
   65|       |
   66|       |  /* Start by casting the data stream to a TLV. */
   67|  38.7k|  raw = (TLV_RAW *)&fuzz->state.data[fuzz->state.data_pos];
   68|  38.7k|  data_offset = fuzz->state.data_pos + sizeof(TLV_RAW);
   69|       |
   70|       |  /* Set the TLV values. */
   71|  38.7k|  tlv->type = to_u16(raw->raw_type);
   72|  38.7k|  tlv->length = to_u32(raw->raw_length);
   73|  38.7k|  tlv->value = &fuzz->state.data[data_offset];
   74|       |
   75|  38.7k|  FV_PRINTF(fuzz, "TLV: type %x length %u\n", tlv->type, tlv->length);
   76|       |
   77|       |  /* Use uint64s to verify lengths of TLVs so that overflow problems don't
   78|       |     matter. */
   79|  38.7k|  uint64_t check_length = data_offset;
   80|  38.7k|  check_length += tlv->length;
   81|       |
   82|  38.7k|  uint64_t remaining_len = fuzz->state.data_len;
   83|  38.7k|  FV_PRINTF(fuzz, "Check length of data: %lu \n", check_length);
   84|  38.7k|  FV_PRINTF(fuzz, "Remaining length of data: %lu \n", remaining_len);
   85|       |
   86|       |  /* Sanity check that the TLV length is ok. */
   87|  38.7k|  if(check_length > remaining_len) {
   88|  1.19k|    FV_PRINTF(fuzz, "Returning TLV_RC_SIZE_ERROR\n");
   89|  1.19k|    rc = TLV_RC_SIZE_ERROR;
   90|  1.19k|  }
   91|       |
   92|  38.7k|  return rc;
   93|  38.7k|}
_Z14fuzz_parse_tlvP9fuzz_dataP3tlv:
   99|  35.9k|{
  100|  35.9k|  int rc;
  101|  35.9k|  char *tmp = NULL;
  102|  35.9k|  uint32_t tmp_u32;
  103|       |
  104|  35.9k|  switch(tlv->type) {
  105|       |    /* The pointers in response TLVs will always be valid as long as the fuzz
  106|       |       data is in scope, which is the entirety of this file. */
  107|  2.86k|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE0, 0);
  108|    578|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE1, 1);
  109|    513|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE2, 2);
  110|    433|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE3, 3);
  111|    326|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE4, 4);
  112|    280|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE5, 5);
  113|    214|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE6, 6);
  114|    218|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE7, 7);
  115|    223|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE8, 8);
  116|    200|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE9, 9);
  117|    204|    FRESPONSETLV(&fuzz->sockman[0], TLV_TYPE_RESPONSE10, 10);
  118|       |
  119|    908|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE0, 0);
  120|    246|    FRESPONSETLV(&fuzz->sockman[1], TLV_TYPE_SECOND_RESPONSE1, 1);
  121|       |
  122|     92|    case TLV_TYPE_UPLOAD1:
  123|       |      /* The pointers in the TLV will always be valid as long as the fuzz data
  124|       |         is in scope, which is the entirety of this file. */
  125|       |
  126|     92|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_UPLOAD);
  127|       |
  128|     91|      fuzz->upload1_data = tlv->value;
  129|     91|      fuzz->upload1_data_len = tlv->length;
  130|       |
  131|     91|      FSET_OPTION(fuzz, CURLOPT_UPLOAD, 1L);
  132|     91|      FSET_OPTION(fuzz,
  133|     91|                  CURLOPT_INFILESIZE_LARGE,
  134|     91|                  (curl_off_t)fuzz->upload1_data_len);
  135|     91|      break;
  136|       |
  137|  6.57k|    case TLV_TYPE_HEADER:
  138|       |      /* Limit the number of headers that can be added to a message to prevent
  139|       |         timeouts. */
  140|  6.57k|      if(fuzz->header_list_count >= TLV_MAX_NUM_CURLOPT_HEADER) {
  141|      0|        rc = 255;
  142|      0|        goto EXIT_LABEL;
  143|      0|      }
  144|       |
  145|  6.57k|      tmp = fuzz_tlv_to_string(tlv);
  146|  6.57k|      fuzz->header_list = curl_slist_append(fuzz->header_list, tmp);
  147|  6.57k|      fuzz->header_list_count++;
  148|  6.57k|      break;
  149|       |
  150|  1.01k|    case TLV_TYPE_MAIL_RECIPIENT:
  151|  1.01k|      tmp = fuzz_tlv_to_string(tlv);
  152|  1.01k|      fuzz->mail_recipients_list =
  153|  1.01k|                            curl_slist_append(fuzz->mail_recipients_list, tmp);
  154|  1.01k|      break;
  155|       |
  156|  17.2k|    case TLV_TYPE_MIME_PART:
  157|  17.2k|      if(fuzz->mime == NULL) {
  158|    280|        fuzz->mime = curl_mime_init(fuzz->easy);
  159|    280|      }
  160|       |
  161|  17.2k|      fuzz->part = curl_mime_addpart(fuzz->mime);
  162|       |
  163|       |      /* This TLV may have sub TLVs. */
  164|  17.2k|      fuzz_add_mime_part(tlv, fuzz->part);
  165|  17.2k|      break;
  166|       |
  167|     29|    case TLV_TYPE_POSTFIELDS:
  168|     29|      FCHECK_OPTION_UNSET(fuzz, CURLOPT_POSTFIELDS);
  169|     28|      fuzz->postfields = fuzz_tlv_to_string(tlv);
  170|     28|      FSET_OPTION(fuzz, CURLOPT_POSTFIELDS, fuzz->postfields);
  171|     28|      break;
  172|       |
  173|       |    /* Define a set of u32 options. */
  174|    321|    FU32TLV(fuzz, TLV_TYPE_HTTPAUTH, CURLOPT_HTTPAUTH);
  175|     39|    FU32TLV(fuzz, TLV_TYPE_OPTHEADER, CURLOPT_HEADER);
  176|     87|    FU32TLV(fuzz, TLV_TYPE_NOBODY, CURLOPT_NOBODY);
  177|    174|    FU32TLV(fuzz, TLV_TYPE_FOLLOWLOCATION, CURLOPT_FOLLOWLOCATION);
  178|    166|    FU32TLV(fuzz, TLV_TYPE_WILDCARDMATCH, CURLOPT_WILDCARDMATCH);
  179|      5|    FU32TLV(fuzz, TLV_TYPE_RTSP_REQUEST, CURLOPT_RTSP_REQUEST);
  180|      3|    FU32TLV(fuzz, TLV_TYPE_RTSP_CLIENT_CSEQ, CURLOPT_RTSP_CLIENT_CSEQ);
  181|     37|    FU32TLV(fuzz, TLV_TYPE_HTTP_VERSION, CURLOPT_HTTP_VERSION);
  182|       |
  183|       |    /* Define a set of singleton TLVs - they can only have their value set once
  184|       |       and all follow the same pattern. */
  185|  5.69k|    FSINGLETONTLV(fuzz, TLV_TYPE_URL, CURLOPT_URL);
  186|     10|    FSINGLETONTLV(fuzz, TLV_TYPE_DOH_URL, CURLOPT_DOH_URL);
  187|    341|    FSINGLETONTLV(fuzz, TLV_TYPE_USERNAME, CURLOPT_USERNAME);
  188|    108|    FSINGLETONTLV(fuzz, TLV_TYPE_PASSWORD, CURLOPT_PASSWORD);
  189|     13|    FSINGLETONTLV(fuzz, TLV_TYPE_COOKIE, CURLOPT_COOKIE);
  190|    109|    FSINGLETONTLV(fuzz, TLV_TYPE_RANGE, CURLOPT_RANGE);
  191|    419|    FSINGLETONTLV(fuzz, TLV_TYPE_CUSTOMREQUEST, CURLOPT_CUSTOMREQUEST);
  192|     89|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_FROM, CURLOPT_MAIL_FROM);
  193|    135|    FSINGLETONTLV(fuzz, TLV_TYPE_ACCEPTENCODING, CURLOPT_ACCEPT_ENCODING);
  194|     12|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_SESSION_ID, CURLOPT_RTSP_SESSION_ID);
  195|     14|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_STREAM_URI, CURLOPT_RTSP_STREAM_URI);
  196|      2|    FSINGLETONTLV(fuzz, TLV_TYPE_RTSP_TRANSPORT, CURLOPT_RTSP_TRANSPORT);
  197|      6|    FSINGLETONTLV(fuzz, TLV_TYPE_MAIL_AUTH, CURLOPT_MAIL_AUTH);
  198|       |
  199|      6|    default:
  200|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  201|       |         corpus so we reject any unknown TLVs. */
  202|      6|      rc = 127;
  203|      6|      goto EXIT_LABEL;
  204|      0|      break;
  205|  35.9k|  }
  206|       |
  207|  35.8k|  rc = 0;
  208|       |
  209|  35.9k|EXIT_LABEL:
  210|       |
  211|  35.9k|  fuzz_free((void **)&tmp);
  212|       |
  213|  35.9k|  return rc;
  214|  35.8k|}
_Z18fuzz_tlv_to_stringP3tlv:
  220|  11.4k|{
  221|  11.4k|  char *tlvstr;
  222|       |
  223|       |  /* Allocate enough space, plus a null terminator */
  224|  11.4k|  tlvstr = (char *)malloc(tlv->length + 1);
  225|       |
  226|  11.4k|  if(tlvstr != NULL) {
  227|  11.4k|    memcpy(tlvstr, tlv->value, tlv->length);
  228|  11.4k|    tlvstr[tlv->length] = 0;
  229|  11.4k|  }
  230|       |
  231|  11.4k|  return tlvstr;
  232|  11.4k|}
_Z18fuzz_add_mime_partP3tlvP13curl_mimepart:
  238|  17.2k|{
  239|  17.2k|  FUZZ_DATA part_fuzz;
  240|  17.2k|  TLV tlv;
  241|  17.2k|  int rc = 0;
  242|  17.2k|  int tlv_rc;
  243|       |
  244|  17.2k|  memset(&part_fuzz, 0, sizeof(FUZZ_DATA));
  245|       |
  246|  17.2k|  if(src_tlv->length < sizeof(TLV_RAW)) {
  247|       |    /* Not enough data for a single TLV - don't continue */
  248|  15.1k|    goto EXIT_LABEL;
  249|  15.1k|  }
  250|       |
  251|       |  /* Set up the state parser */
  252|  2.11k|  part_fuzz.state.data = src_tlv->value;
  253|  2.11k|  part_fuzz.state.data_len = src_tlv->length;
  254|       |
  255|  2.11k|  for(tlv_rc = fuzz_get_first_tlv(&part_fuzz, &tlv);
  256|  2.98k|      tlv_rc == 0;
  257|  2.11k|      tlv_rc = fuzz_get_next_tlv(&part_fuzz, &tlv)) {
  258|       |
  259|       |    /* Have the TLV in hand. Parse the TLV. */
  260|  1.58k|    rc = fuzz_parse_mime_tlv(part, &tlv);
  261|       |
  262|  1.58k|    if(rc != 0) {
  263|       |      /* Failed to parse the TLV. Can't continue. */
  264|    717|      goto EXIT_LABEL;
  265|    717|    }
  266|  1.58k|  }
  267|       |
  268|  1.40k|  if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
  269|       |    /* A TLV call failed. Can't continue. */
  270|  1.13k|    goto EXIT_LABEL;
  271|  1.13k|  }
  272|       |
  273|  17.2k|EXIT_LABEL:
  274|       |
  275|  17.2k|  return(rc);
  276|  1.40k|}
_Z19fuzz_parse_mime_tlvP13curl_mimepartP3tlv:
  282|  1.58k|{
  283|  1.58k|  int rc;
  284|  1.58k|  char *tmp;
  285|       |
  286|  1.58k|  switch(tlv->type) {
  287|    385|    case TLV_TYPE_MIME_PART_NAME:
  288|    385|      tmp = fuzz_tlv_to_string(tlv);
  289|    385|      curl_mime_name(part, tmp);
  290|    385|      fuzz_free((void **)&tmp);
  291|    385|      break;
  292|       |
  293|    481|    case TLV_TYPE_MIME_PART_DATA:
  294|    481|      curl_mime_data(part, (const char *)tlv->value, tlv->length);
  295|    481|      break;
  296|       |
  297|    717|    default:
  298|       |      /* The fuzzer generates lots of unknown TLVs - we don't want these in the
  299|       |         corpus so we reject any unknown TLVs. */
  300|    717|      rc = 255;
  301|    717|      goto EXIT_LABEL;
  302|      0|      break;
  303|  1.58k|  }
  304|       |
  305|    866|  rc = 0;
  306|       |
  307|  1.58k|EXIT_LABEL:
  308|       |
  309|  1.58k|  return rc;
  310|    866|}

ex_data.c:ex_class_item_LHASH_HASH:
  105|     19|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|     19|                const o_type *a = arg; \
  107|     19|                return name##_hash(a); }
ex_data.c:ex_class_item_LHASH_COMP:
  114|     15|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     15|                const o_type *a = arg1;             \
  116|     15|                const o_type *b = arg2; \
  117|     15|                return name##_cmp(a,b); }

EVP_PKEY_asn1_get_count:
  133|     13|{
  134|     13|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  135|     13|    if (app_methods)
  136|      0|        num += sk_EVP_PKEY_ASN1_METHOD_num(app_methods);
  137|     13|    return num;
  138|     13|}
EVP_PKEY_asn1_get0:
  141|     12|{
  142|     12|    int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
  143|     12|    if (idx < 0)
  144|      0|        return NULL;
  145|     12|    if (idx < num)
  146|     12|        return standard_methods[idx];
  147|      0|    idx -= num;
  148|      0|    return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
  149|     12|}
EVP_PKEY_asn1_find_str:
  202|      1|{
  203|      1|    int i;
  204|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  205|      1|    if (len == -1)
  206|      1|        len = strlen(str);
  207|      1|    if (pe) {
  208|      1|#ifndef OPENSSL_NO_ENGINE
  209|      1|        ENGINE *e;
  210|      1|        ameth = ENGINE_pkey_asn1_find_str(&e, str, len);
  211|      1|        if (ameth) {
  212|       |            /*
  213|       |             * Convert structural into functional reference
  214|       |             */
  215|      0|            if (!ENGINE_init(e))
  216|      0|                ameth = NULL;
  217|      0|            ENGINE_free(e);
  218|      0|            *pe = e;
  219|      0|            return ameth;
  220|      0|        }
  221|      1|#endif
  222|      1|        *pe = NULL;
  223|      1|    }
  224|     13|    for (i = 0; i < EVP_PKEY_asn1_get_count(); i++) {
  225|     12|        ameth = EVP_PKEY_asn1_get0(i);
  226|     12|        if (ameth->pkey_flags & ASN1_PKEY_ALIAS)
  227|      5|            continue;
  228|      7|        if (((int)strlen(ameth->pem_str) == len) &&
  229|      7|            !strncasecmp(ameth->pem_str, str, len))
  230|      0|            return ameth;
  231|      7|    }
  232|      1|    return NULL;
  233|      1|}
EVP_PKEY_asn1_new:
  289|      3|{
  290|      3|    EVP_PKEY_ASN1_METHOD *ameth;
  291|      3|    ameth = OPENSSL_malloc(sizeof(EVP_PKEY_ASN1_METHOD));
  292|      3|    if (!ameth)
  293|      0|        return NULL;
  294|       |
  295|      3|    memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));
  296|       |
  297|      3|    ameth->pkey_id = id;
  298|      3|    ameth->pkey_base_id = id;
  299|      3|    ameth->pkey_flags = flags | ASN1_PKEY_DYNAMIC;
  300|       |
  301|      3|    if (info) {
  302|      3|        ameth->info = BUF_strdup(info);
  303|      3|        if (!ameth->info)
  304|      0|            goto err;
  305|      3|    } else
  306|      0|        ameth->info = NULL;
  307|       |
  308|      3|    if (pem_str) {
  309|      3|        ameth->pem_str = BUF_strdup(pem_str);
  310|      3|        if (!ameth->pem_str)
  311|      0|            goto err;
  312|      3|    } else
  313|      0|        ameth->pem_str = NULL;
  314|       |
  315|      3|    ameth->pub_decode = 0;
  316|      3|    ameth->pub_encode = 0;
  317|      3|    ameth->pub_cmp = 0;
  318|      3|    ameth->pub_print = 0;
  319|       |
  320|      3|    ameth->priv_decode = 0;
  321|      3|    ameth->priv_encode = 0;
  322|      3|    ameth->priv_print = 0;
  323|       |
  324|      3|    ameth->old_priv_encode = 0;
  325|      3|    ameth->old_priv_decode = 0;
  326|       |
  327|      3|    ameth->item_verify = 0;
  328|      3|    ameth->item_sign = 0;
  329|       |
  330|      3|    ameth->pkey_size = 0;
  331|      3|    ameth->pkey_bits = 0;
  332|       |
  333|      3|    ameth->param_decode = 0;
  334|      3|    ameth->param_encode = 0;
  335|      3|    ameth->param_missing = 0;
  336|      3|    ameth->param_copy = 0;
  337|      3|    ameth->param_cmp = 0;
  338|      3|    ameth->param_print = 0;
  339|       |
  340|      3|    ameth->pkey_free = 0;
  341|      3|    ameth->pkey_ctrl = 0;
  342|       |
  343|      3|    return ameth;
  344|       |
  345|      0| err:
  346|       |
  347|      0|    EVP_PKEY_asn1_free(ameth);
  348|      0|    return NULL;
  349|       |
  350|      3|}
EVP_PKEY_asn1_set_public:
  409|      2|{
  410|      2|    ameth->pub_decode = pub_decode;
  411|      2|    ameth->pub_encode = pub_encode;
  412|      2|    ameth->pub_cmp = pub_cmp;
  413|      2|    ameth->pub_print = pub_print;
  414|      2|    ameth->pkey_size = pkey_size;
  415|      2|    ameth->pkey_bits = pkey_bits;
  416|      2|}
EVP_PKEY_asn1_set_private:
  428|      2|{
  429|      2|    ameth->priv_decode = priv_decode;
  430|      2|    ameth->priv_encode = priv_encode;
  431|      2|    ameth->priv_print = priv_print;
  432|      2|}
EVP_PKEY_asn1_set_param:
  448|      2|{
  449|      2|    ameth->param_decode = param_decode;
  450|      2|    ameth->param_encode = param_encode;
  451|      2|    ameth->param_missing = param_missing;
  452|      2|    ameth->param_copy = param_copy;
  453|      2|    ameth->param_cmp = param_cmp;
  454|      2|    ameth->param_print = param_print;
  455|      2|}
EVP_PKEY_asn1_set_free:
  459|      3|{
  460|      3|    ameth->pkey_free = pkey_free;
  461|      3|}
EVP_PKEY_asn1_set_ctrl:
  466|      3|{
  467|      3|    ameth->pkey_ctrl = pkey_ctrl;
  468|      3|}

ERR_load_ASN1_strings:
  346|      1|{
  347|      1|#ifndef OPENSSL_NO_ERR
  348|       |
  349|      1|    if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
  350|      1|        ERR_load_strings(0, ASN1_str_functs);
  351|      1|        ERR_load_strings(0, ASN1_str_reasons);
  352|      1|    }
  353|      1|#endif
  354|      1|}

ASN1_add_oid_module:
   99|      1|{
  100|      1|    CONF_module_add("oid_section", oid_module_init, oid_module_finish);
  101|      1|}

ERR_load_BIO_strings:
  149|      1|{
  150|      1|#ifndef OPENSSL_NO_ERR
  151|       |
  152|      1|    if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
  153|      1|        ERR_load_strings(0, BIO_str_functs);
  154|      1|        ERR_load_strings(0, BIO_str_reasons);
  155|      1|    }
  156|      1|#endif
  157|      1|}

BIO_new_file:
  170|      1|{
  171|      1|    BIO  *ret;
  172|      1|    FILE *file = file_fopen(filename, mode);
  173|       |
  174|      1|    if (file == NULL) {
  175|      1|        SYSerr(SYS_F_FOPEN, get_last_sys_error());
  176|      1|        ERR_add_error_data(5, "fopen('", filename, "','", mode, "')");
  177|      1|        if (errno == ENOENT
  178|      1|# ifdef ENXIO
  179|      1|            || errno == ENXIO
  180|      1|# endif
  181|      1|            )
  182|      1|            BIOerr(BIO_F_BIO_NEW_FILE, BIO_R_NO_SUCH_FILE);
  183|      0|        else
  184|      1|            BIOerr(BIO_F_BIO_NEW_FILE, ERR_R_SYS_LIB);
  185|      1|        return (NULL);
  186|      1|    }
  187|      0|    if ((ret = BIO_new(BIO_s_file())) == NULL) {
  188|      0|        fclose(file);
  189|      0|        return (NULL);
  190|      0|    }
  191|       |
  192|      0|    BIO_clear_flags(ret, BIO_FLAGS_UPLINK); /* we did fopen -> we disengage
  193|       |                                             * UPLINK */
  194|      0|    BIO_set_fp(ret, file, BIO_CLOSE);
  195|      0|    return (ret);
  196|      0|}
bss_file.c:file_fopen:
  119|      1|{
  120|      1|    FILE *file = NULL;
  121|       |
  122|       |#  if defined(_WIN32) && defined(CP_UTF8)
  123|       |    int sz, len_0 = (int)strlen(filename) + 1;
  124|       |    DWORD flags;
  125|       |
  126|       |    /*
  127|       |     * Basically there are three cases to cover: a) filename is
  128|       |     * pure ASCII string; b) actual UTF-8 encoded string and
  129|       |     * c) locale-ized string, i.e. one containing 8-bit
  130|       |     * characters that are meaningful in current system locale.
  131|       |     * If filename is pure ASCII or real UTF-8 encoded string,
  132|       |     * MultiByteToWideChar succeeds and _wfopen works. If
  133|       |     * filename is locale-ized string, chances are that
  134|       |     * MultiByteToWideChar fails reporting
  135|       |     * ERROR_NO_UNICODE_TRANSLATION, in which case we fall
  136|       |     * back to fopen...
  137|       |     */
  138|       |    if ((sz = MultiByteToWideChar(CP_UTF8, (flags = MB_ERR_INVALID_CHARS),
  139|       |                                  filename, len_0, NULL, 0)) > 0 ||
  140|       |        (GetLastError() == ERROR_INVALID_FLAGS &&
  141|       |         (sz = MultiByteToWideChar(CP_UTF8, (flags = 0),
  142|       |                                   filename, len_0, NULL, 0)) > 0)
  143|       |        ) {
  144|       |        WCHAR wmode[8];
  145|       |        WCHAR *wfilename = _alloca(sz * sizeof(WCHAR));
  146|       |
  147|       |        if (MultiByteToWideChar(CP_UTF8, flags,
  148|       |                                filename, len_0, wfilename, sz) &&
  149|       |            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
  150|       |                                wmode, sizeof(wmode) / sizeof(wmode[0])) &&
  151|       |            (file = _wfopen(wfilename, wmode)) == NULL &&
  152|       |            (errno == ENOENT || errno == EBADF)
  153|       |            ) {
  154|       |            /*
  155|       |             * UTF-8 decode succeeded, but no file, filename
  156|       |             * could still have been locale-ized...
  157|       |             */
  158|       |            file = fopen(filename, mode);
  159|       |        }
  160|       |    } else if (GetLastError() == ERROR_NO_UNICODE_TRANSLATION) {
  161|       |        file = fopen(filename, mode);
  162|       |    }
  163|       |#  else
  164|      1|    file = fopen(filename, mode);
  165|      1|#  endif
  166|      1|    return (file);
  167|      1|}

ERR_load_BN_strings:
  146|      1|{
  147|      1|#ifndef OPENSSL_NO_ERR
  148|       |
  149|      1|    if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
  150|      1|        ERR_load_strings(0, BN_str_functs);
  151|      1|        ERR_load_strings(0, BN_str_reasons);
  152|      1|    }
  153|      1|#endif
  154|      1|}

ERR_load_BUF_strings:
   89|      1|{
   90|      1|#ifndef OPENSSL_NO_ERR
   91|       |
   92|      1|    if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
   93|      1|        ERR_load_strings(0, BUF_str_functs);
   94|      1|        ERR_load_strings(0, BUF_str_reasons);
   95|      1|    }
   96|      1|#endif
   97|      1|}

BUF_strnlen:
   65|      9|{
   66|      9|    const char *p;
   67|       |
   68|    109|    for (p = str; maxlen-- != 0 && *p != '\0'; ++p) ;
   69|       |
   70|      9|    return p - str;
   71|      9|}
BUF_strdup:
   74|      9|{
   75|      9|    if (str == NULL)
   76|      0|        return NULL;
   77|      9|    return BUF_strndup(str, strlen(str));
   78|      9|}
BUF_strndup:
   81|      9|{
   82|      9|    char *ret;
   83|       |
   84|      9|    if (str == NULL)
   85|      0|        return NULL;
   86|       |
   87|      9|    siz = BUF_strnlen(str, siz);
   88|       |
   89|      9|    if (siz >= INT_MAX)
   90|      0|        return NULL;
   91|       |
   92|      9|    ret = OPENSSL_malloc(siz + 1);
   93|      9|    if (ret == NULL) {
   94|      0|        BUFerr(BUF_F_BUF_STRNDUP, ERR_R_MALLOC_FAILURE);
   95|      0|        return NULL;
   96|      0|    }
   97|       |
   98|      9|    memcpy(ret, str, siz);
   99|      9|    ret[siz] = '\0';
  100|       |
  101|      9|    return (ret);
  102|      9|}
BUF_strlcpy:
  120|     28|{
  121|     28|    size_t l = 0;
  122|    539|    for (; size > 1 && *src; size--) {
  123|    511|        *dst++ = *src++;
  124|    511|        l++;
  125|    511|    }
  126|     28|    if (size)
  127|     28|        *dst = '\0';
  128|     28|    return l + strlen(src);
  129|     28|}
BUF_strlcat:
  132|     23|{
  133|     23|    size_t l = 0;
  134|    435|    for (; size > 0 && *dst; size--, dst++)
  135|    412|        l++;
  136|     23|    return l + BUF_strlcpy(dst, src, size);
  137|     23|}

ERR_load_CMS_strings:
  301|      1|{
  302|      1|#ifndef OPENSSL_NO_ERR
  303|       |
  304|      1|    if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
  305|      1|        ERR_load_strings(0, CMS_str_functs);
  306|      1|        ERR_load_strings(0, CMS_str_reasons);
  307|      1|    }
  308|      1|#endif
  309|      1|}

COMP_zlib:
  344|      1|{
  345|      1|    COMP_METHOD *meth = &zlib_method_nozlib;
  346|       |
  347|       |#ifdef ZLIB_SHARED
  348|       |    if (!zlib_loaded) {
  349|       |# if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)
  350|       |        zlib_dso = DSO_load(NULL, "ZLIB1", NULL, 0);
  351|       |# else
  352|       |        zlib_dso = DSO_load(NULL, "z", NULL, 0);
  353|       |# endif
  354|       |        if (zlib_dso != NULL) {
  355|       |            p_compress = (compress_ft) DSO_bind_func(zlib_dso, "compress");
  356|       |            p_inflateEnd
  357|       |                = (inflateEnd_ft) DSO_bind_func(zlib_dso, "inflateEnd");
  358|       |            p_inflate = (inflate_ft) DSO_bind_func(zlib_dso, "inflate");
  359|       |            p_inflateInit_
  360|       |                = (inflateInit__ft) DSO_bind_func(zlib_dso, "inflateInit_");
  361|       |            p_deflateEnd
  362|       |                = (deflateEnd_ft) DSO_bind_func(zlib_dso, "deflateEnd");
  363|       |            p_deflate = (deflate_ft) DSO_bind_func(zlib_dso, "deflate");
  364|       |            p_deflateInit_
  365|       |                = (deflateInit__ft) DSO_bind_func(zlib_dso, "deflateInit_");
  366|       |            p_zError = (zError__ft) DSO_bind_func(zlib_dso, "zError");
  367|       |
  368|       |            if (p_compress && p_inflateEnd && p_inflate
  369|       |                && p_inflateInit_ && p_deflateEnd
  370|       |                && p_deflate && p_deflateInit_ && p_zError)
  371|       |                zlib_loaded++;
  372|       |        }
  373|       |    }
  374|       |#endif
  375|       |#ifdef ZLIB_SHARED
  376|       |    if (zlib_loaded)
  377|       |#endif
  378|       |#if defined(ZLIB) || defined(ZLIB_SHARED)
  379|       |    {
  380|       |        /*
  381|       |         * init zlib_stateful_ex_idx here so that in a multi-process
  382|       |         * application it's enough to intialize openssl before forking (idx
  383|       |         * will be inherited in all the children)
  384|       |         */
  385|       |        if (zlib_stateful_ex_idx == -1) {
  386|       |            CRYPTO_w_lock(CRYPTO_LOCK_COMP);
  387|       |            if (zlib_stateful_ex_idx == -1)
  388|       |                zlib_stateful_ex_idx =
  389|       |                    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_COMP,
  390|       |                                            0, NULL, NULL, NULL, NULL);
  391|       |            CRYPTO_w_unlock(CRYPTO_LOCK_COMP);
  392|       |            if (zlib_stateful_ex_idx == -1)
  393|       |                goto err;
  394|       |        }
  395|       |
  396|       |        meth = &zlib_stateful_method;
  397|       |    }
  398|       | err:
  399|       |#endif
  400|       |
  401|      1|    return (meth);
  402|      1|}

ERR_load_COMP_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, COMP_str_functs);
   95|      1|        ERR_load_strings(0, COMP_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

_CONF_free_data:
  223|      1|{
  224|      1|    if (conf == NULL || conf->data == NULL)
  225|      1|        return;
  226|       |
  227|      0|    lh_CONF_VALUE_down_load(conf->data) = 0; /* evil thing to make * sure the
  228|       |                                              * 'OPENSSL_free()' works as *
  229|       |                                              * expected */
  230|      0|    lh_CONF_VALUE_doall_arg(conf->data,
  231|      0|                            LHASH_DOALL_ARG_FN(value_free_hash),
  232|      0|                            LHASH_OF(CONF_VALUE), conf->data);
  233|       |
  234|       |    /*
  235|       |     * We now have only 'section' entries in the hash table. Due to problems
  236|       |     * with
  237|       |     */
  238|       |
  239|      0|    lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
  240|      0|    lh_CONF_VALUE_free(conf->data);
  241|      0|}

NCONF_default:
  126|      1|{
  127|      1|    return &default_method;
  128|      1|}
conf_def.c:def_create:
  136|      1|{
  137|      1|    CONF *ret;
  138|       |
  139|      1|    ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
  140|      1|    if (ret)
  141|      1|        if (meth->init(ret) == 0) {
  142|      0|            OPENSSL_free(ret);
  143|      0|            ret = NULL;
  144|      0|        }
  145|      1|    return ret;
  146|      1|}
conf_def.c:def_init_default:
  149|      1|{
  150|      1|    if (conf == NULL)
  151|      0|        return 0;
  152|       |
  153|      1|    conf->meth = &default_method;
  154|      1|    conf->meth_data = CONF_type_default;
  155|      1|    conf->data = NULL;
  156|       |
  157|      1|    return 1;
  158|      1|}
conf_def.c:def_destroy:
  173|      1|{
  174|      1|    if (def_destroy_data(conf)) {
  175|      1|        OPENSSL_free(conf);
  176|      1|        return 1;
  177|      1|    }
  178|      0|    return 0;
  179|      1|}
conf_def.c:def_destroy_data:
  182|      1|{
  183|      1|    if (conf == NULL)
  184|      0|        return 0;
  185|      1|    _CONF_free_data(conf);
  186|      1|    return 1;
  187|      1|}
conf_def.c:def_load:
  190|      1|{
  191|      1|    int ret;
  192|      1|    BIO *in = NULL;
  193|       |
  194|       |#ifdef OPENSSL_SYS_VMS
  195|       |    in = BIO_new_file(name, "r");
  196|       |#else
  197|      1|    in = BIO_new_file(name, "rb");
  198|      1|#endif
  199|      1|    if (in == NULL) {
  200|      1|        if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
  201|      1|            CONFerr(CONF_F_DEF_LOAD, CONF_R_NO_SUCH_FILE);
  202|      0|        else
  203|      1|            CONFerr(CONF_F_DEF_LOAD, ERR_R_SYS_LIB);
  204|      1|        return 0;
  205|      1|    }
  206|       |
  207|      0|    ret = def_load_bio(conf, in, line);
  208|      0|    BIO_free(in);
  209|       |
  210|      0|    return ret;
  211|      1|}

ERR_load_CONF_strings:
  127|      1|{
  128|      1|#ifndef OPENSSL_NO_ERR
  129|       |
  130|      1|    if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
  131|      1|        ERR_load_strings(0, CONF_str_functs);
  132|      1|        ERR_load_strings(0, CONF_str_reasons);
  133|      1|    }
  134|      1|#endif
  135|      1|}

NCONF_new:
  229|      1|{
  230|      1|    CONF *ret;
  231|       |
  232|      1|    if (meth == NULL)
  233|      1|        meth = NCONF_default();
  234|       |
  235|      1|    ret = meth->create(meth);
  236|      1|    if (ret == NULL) {
  237|      0|        CONFerr(CONF_F_NCONF_NEW, ERR_R_MALLOC_FAILURE);
  238|      0|        return (NULL);
  239|      0|    }
  240|       |
  241|      1|    return ret;
  242|      1|}
NCONF_free:
  245|      1|{
  246|      1|    if (conf == NULL)
  247|      0|        return;
  248|      1|    conf->meth->destroy(conf);
  249|      1|}
NCONF_load:
  259|      1|{
  260|      1|    if (conf == NULL) {
  261|      0|        CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
  262|      0|        return 0;
  263|      0|    }
  264|       |
  265|      1|    return conf->meth->load(conf, file, eline);
  266|      1|}

OPENSSL_load_builtin_modules:
   74|      1|{
   75|       |    /* Add builtin modules here */
   76|      1|    ASN1_add_oid_module();
   77|      1|#ifndef OPENSSL_NO_ENGINE
   78|      1|    ENGINE_add_conf_module();
   79|      1|#endif
   80|      1|    EVP_add_alg_module();
   81|      1|}

CONF_modules_load_file:
  164|      1|{
  165|      1|    char *file = NULL;
  166|      1|    CONF *conf = NULL;
  167|      1|    int ret = 0;
  168|      1|    conf = NCONF_new(NULL);
  169|      1|    if (!conf)
  170|      0|        goto err;
  171|       |
  172|      1|    if (filename == NULL) {
  173|      1|        file = CONF_get1_default_config_file();
  174|      1|        if (!file)
  175|      0|            goto err;
  176|      1|    } else
  177|      0|        file = (char *)filename;
  178|       |
  179|      1|    if (NCONF_load(conf, file, NULL) <= 0) {
  180|      1|        if ((flags & CONF_MFLAGS_IGNORE_MISSING_FILE) &&
  181|      1|            (ERR_GET_REASON(ERR_peek_last_error()) == CONF_R_NO_SUCH_FILE)) {
  182|      1|            ERR_clear_error();
  183|      1|            ret = 1;
  184|      1|        }
  185|      1|        goto err;
  186|      1|    }
  187|       |
  188|      0|    ret = CONF_modules_load(conf, appname, flags);
  189|       |
  190|      1| err:
  191|      1|    if (filename == NULL)
  192|      1|        OPENSSL_free(file);
  193|      1|    NCONF_free(conf);
  194|       |
  195|      1|    return ret;
  196|      0|}
CONF_module_add:
  466|      3|{
  467|      3|    if (module_add(NULL, name, ifunc, ffunc))
  468|      3|        return 1;
  469|      0|    else
  470|      0|        return 0;
  471|      3|}
CONF_get1_default_config_file:
  529|      1|{
  530|      1|    char *file;
  531|      1|    int len;
  532|       |
  533|      1|    file = getenv("OPENSSL_CONF");
  534|      1|    if (file)
  535|      0|        return BUF_strdup(file);
  536|       |
  537|      1|    len = strlen(X509_get_default_cert_area());
  538|      1|#ifndef OPENSSL_SYS_VMS
  539|      1|    len++;
  540|      1|#endif
  541|      1|    len += strlen(OPENSSL_CONF);
  542|       |
  543|      1|    file = OPENSSL_malloc(len + 1);
  544|       |
  545|      1|    if (!file)
  546|      0|        return NULL;
  547|      1|    BUF_strlcpy(file, X509_get_default_cert_area(), len + 1);
  548|      1|#ifndef OPENSSL_SYS_VMS
  549|      1|    BUF_strlcat(file, "/", len + 1);
  550|      1|#endif
  551|      1|    BUF_strlcat(file, OPENSSL_CONF, len + 1);
  552|       |
  553|      1|    return file;
  554|      1|}
conf_mod.c:module_add:
  279|      3|{
  280|      3|    CONF_MODULE *tmod = NULL;
  281|      3|    if (supported_modules == NULL)
  282|      1|        supported_modules = sk_CONF_MODULE_new_null();
  283|      3|    if (supported_modules == NULL)
  284|      0|        return NULL;
  285|      3|    tmod = OPENSSL_malloc(sizeof(CONF_MODULE));
  286|      3|    if (tmod == NULL)
  287|      0|        return NULL;
  288|       |
  289|      3|    tmod->dso = dso;
  290|      3|    tmod->name = BUF_strdup(name);
  291|      3|    if (tmod->name == NULL) {
  292|      0|        OPENSSL_free(tmod);
  293|      0|        return NULL;
  294|      0|    }
  295|      3|    tmod->init = ifunc;
  296|      3|    tmod->finish = ffunc;
  297|      3|    tmod->links = 0;
  298|       |
  299|      3|    if (!sk_CONF_MODULE_push(supported_modules, tmod)) {
  300|      0|        OPENSSL_free(tmod);
  301|      0|        return NULL;
  302|      0|    }
  303|       |
  304|      3|    return tmod;
  305|      3|}

ERR_load_CRYPTO_strings:
   96|      1|{
   97|      1|#ifndef OPENSSL_NO_ERR
   98|       |
   99|      1|    if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
  100|      1|        ERR_load_strings(0, CRYPTO_str_functs);
  101|      1|        ERR_load_strings(0, CRYPTO_str_reasons);
  102|      1|    }
  103|      1|#endif
  104|      1|}

CRYPTO_THREADID_set_pointer:
  436|  28.5k|{
  437|  28.5k|    unsigned char *dest = (void *)&id->val;
  438|  28.5k|    unsigned int accum = 0;
  439|  28.5k|    unsigned char dnum = sizeof(id->val);
  440|       |
  441|  28.5k|    memset(id, 0, sizeof(*id));
  442|  28.5k|    id->ptr = ptr;
  443|  28.5k|    if (sizeof(id->val) >= sizeof(id->ptr)) {
  444|       |        /*
  445|       |         * 'ptr' can be embedded in 'val' without loss of uniqueness
  446|       |         */
  447|  28.5k|        id->val = (unsigned long)id->ptr;
  448|  28.5k|        return;
  449|  28.5k|    }
  450|       |    /*
  451|       |     * hash ptr ==> val. Each byte of 'val' gets the mod-256 total of a
  452|       |     * linear function over the bytes in 'ptr', the co-efficients of which
  453|       |     * are a sequence of low-primes (hash_coeffs is an 8-element cycle) - the
  454|       |     * starting prime for the sequence varies for each byte of 'val' (unique
  455|       |     * polynomials unless pointers are >64-bit). For added spice, the totals
  456|       |     * accumulate rather than restarting from zero, and the index of the
  457|       |     * 'val' byte is added each time (position dependence). If I was a
  458|       |     * black-belt, I'd scan big-endian pointers in reverse to give low-order
  459|       |     * bits more play, but this isn't crypto and I'd prefer nobody mistake it
  460|       |     * as such. Plus I'm lazy.
  461|       |     */
  462|      0|    while (dnum--) {
  463|      0|        const unsigned char *src = (void *)&id->ptr;
  464|      0|        unsigned char snum = sizeof(id->ptr);
  465|      0|        while (snum--)
  466|      0|            accum += *(src++) * hash_coeffs[(snum + dnum) & 7];
  467|      0|        accum += dnum;
  468|      0|        *(dest++) = accum & 255;
  469|      0|    }
  470|      0|}
CRYPTO_THREADID_current:
  492|  28.5k|{
  493|  28.5k|    if (threadid_callback) {
  494|      0|        threadid_callback(id);
  495|      0|        return;
  496|      0|    }
  497|  28.5k|#ifndef OPENSSL_NO_DEPRECATED
  498|       |    /* If the deprecated callback was set, fall back to that */
  499|  28.5k|    if (id_callback) {
  500|      0|        CRYPTO_THREADID_set_numeric(id, id_callback());
  501|      0|        return;
  502|      0|    }
  503|  28.5k|#endif
  504|       |    /* Else pick a backup */
  505|       |#ifdef OPENSSL_SYS_WIN16
  506|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentTask());
  507|       |#elif defined(OPENSSL_SYS_WIN32)
  508|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)GetCurrentThreadId());
  509|       |#elif defined(OPENSSL_SYS_BEOS)
  510|       |    CRYPTO_THREADID_set_numeric(id, (unsigned long)find_thread(NULL));
  511|       |#else
  512|       |    /* For everything else, default to using the address of 'errno' */
  513|  28.5k|    CRYPTO_THREADID_set_pointer(id, (void *)&errno);
  514|  28.5k|#endif
  515|  28.5k|}
CRYPTO_THREADID_cmp:
  518|  18.1k|{
  519|  18.1k|    return memcmp(a, b, sizeof(*a));
  520|  18.1k|}
CRYPTO_THREADID_cpy:
  523|  21.6k|{
  524|  21.6k|    memcpy(dest, src, sizeof(*src));
  525|  21.6k|}
CRYPTO_THREADID_hash:
  528|  21.0k|{
  529|  21.0k|    return id->val;
  530|  21.0k|}
CRYPTO_lock:
  565|   267k|{
  566|       |#ifdef LOCK_DEBUG
  567|       |    {
  568|       |        CRYPTO_THREADID id;
  569|       |        char *rw_text, *operation_text;
  570|       |
  571|       |        if (mode & CRYPTO_LOCK)
  572|       |            operation_text = "lock  ";
  573|       |        else if (mode & CRYPTO_UNLOCK)
  574|       |            operation_text = "unlock";
  575|       |        else
  576|       |            operation_text = "ERROR ";
  577|       |
  578|       |        if (mode & CRYPTO_READ)
  579|       |            rw_text = "r";
  580|       |        else if (mode & CRYPTO_WRITE)
  581|       |            rw_text = "w";
  582|       |        else
  583|       |            rw_text = "ERROR";
  584|       |
  585|       |        CRYPTO_THREADID_current(&id);
  586|       |        fprintf(stderr, "lock:%08lx:(%s)%s %-18s %s:%d\n",
  587|       |                CRYPTO_THREADID_hash(&id), rw_text, operation_text,
  588|       |                CRYPTO_get_lock_name(type), file, line);
  589|       |    }
  590|       |#endif
  591|   267k|    if (type < 0) {
  592|      0|        if (dynlock_lock_callback != NULL) {
  593|      0|            struct CRYPTO_dynlock_value *pointer
  594|      0|                = CRYPTO_get_dynlock_value(type);
  595|       |
  596|      0|            OPENSSL_assert(pointer != NULL);
  597|       |
  598|      0|            dynlock_lock_callback(mode, pointer, file, line);
  599|       |
  600|      0|            CRYPTO_destroy_dynlockid(type);
  601|      0|        }
  602|   267k|    } else if (locking_callback != NULL)
  603|      0|        locking_callback(mode, type, file, line);
  604|   267k|}
CRYPTO_add_lock:
  608|  21.1k|{
  609|  21.1k|    int ret = 0;
  610|       |
  611|  21.1k|    if (add_lock_callback != NULL) {
  612|       |#ifdef LOCK_DEBUG
  613|       |        int before = *pointer;
  614|       |#endif
  615|       |
  616|      0|        ret = add_lock_callback(pointer, amount, type, file, line);
  617|       |#ifdef LOCK_DEBUG
  618|       |        {
  619|       |            CRYPTO_THREADID id;
  620|       |            CRYPTO_THREADID_current(&id);
  621|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  622|       |                    CRYPTO_THREADID_hash(&id), before, amount, ret,
  623|       |                    CRYPTO_get_lock_name(type), file, line);
  624|       |        }
  625|       |#endif
  626|  21.1k|    } else {
  627|  21.1k|        CRYPTO_lock(CRYPTO_LOCK | CRYPTO_WRITE, type, file, line);
  628|       |
  629|  21.1k|        ret = *pointer + amount;
  630|       |#ifdef LOCK_DEBUG
  631|       |        {
  632|       |            CRYPTO_THREADID id;
  633|       |            CRYPTO_THREADID_current(&id);
  634|       |            fprintf(stderr, "ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
  635|       |                    CRYPTO_THREADID_hash(&id),
  636|       |                    *pointer, amount, ret,
  637|       |                    CRYPTO_get_lock_name(type), file, line);
  638|       |        }
  639|       |#endif
  640|  21.1k|        *pointer = ret;
  641|  21.1k|        CRYPTO_lock(CRYPTO_UNLOCK | CRYPTO_WRITE, type, file, line);
  642|  21.1k|    }
  643|  21.1k|    return (ret);
  644|  21.1k|}
OPENSSL_cpuid_setup:
  687|      4|{
  688|      4|    static int trigger = 0;
  689|      4|    IA32CAP OPENSSL_ia32_cpuid(unsigned int *);
  690|      4|    IA32CAP vec;
  691|      4|    char *env;
  692|       |
  693|      4|    if (trigger)
  694|      2|        return;
  695|       |
  696|      2|    trigger = 1;
  697|      2|    if ((env = getenv("OPENSSL_ia32cap"))) {
  698|      0|        int off = (env[0] == '~') ? 1 : 0;
  699|       |#  if defined(_WIN32)
  700|       |        if (!sscanf(env + off, "%I64i", &vec))
  701|       |            vec = strtoul(env + off, NULL, 0);
  702|       |#  else
  703|      0|        if (!sscanf(env + off, "%lli", (long long *)&vec))
  704|      0|            vec = strtoul(env + off, NULL, 0);
  705|      0|#  endif
  706|      0|        if (off)
  707|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~vec;
  708|      0|        else if (env[0] == ':')
  709|      0|            vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  710|       |
  711|      0|        OPENSSL_ia32cap_P[2] = 0;
  712|      0|        if ((env = strchr(env, ':'))) {
  713|      0|            unsigned int vecx;
  714|      0|            env++;
  715|      0|            off = (env[0] == '~') ? 1 : 0;
  716|      0|            vecx = strtoul(env + off, NULL, 0);
  717|      0|            if (off)
  718|      0|                OPENSSL_ia32cap_P[2] &= ~vecx;
  719|      0|            else
  720|      0|                OPENSSL_ia32cap_P[2] = vecx;
  721|      0|        }
  722|      0|    } else
  723|      2|        vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);
  724|       |
  725|       |    /*
  726|       |     * |(1<<10) sets a reserved bit to signal that variable
  727|       |     * was initialized already... This is to avoid interference
  728|       |     * with cpuid snippets in ELF .init segment.
  729|       |     */
  730|      2|    OPENSSL_ia32cap_P[0] = (unsigned int)vec | (1 << 10);
  731|      2|    OPENSSL_ia32cap_P[1] = (unsigned int)(vec >> 32);
  732|      2|}

ERR_load_DH_strings:
  118|      1|{
  119|      1|#ifndef OPENSSL_NO_ERR
  120|       |
  121|      1|    if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
  122|      1|        ERR_load_strings(0, DH_str_functs);
  123|      1|        ERR_load_strings(0, DH_str_reasons);
  124|      1|    }
  125|      1|#endif
  126|      1|}

DH_OpenSSL:
  124|      7|{
  125|      7|    return &dh_ossl;
  126|      7|}

ERR_load_DSA_strings:
  125|      1|{
  126|      1|#ifndef OPENSSL_NO_ERR
  127|       |
  128|      1|    if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
  129|      1|        ERR_load_strings(0, DSA_str_functs);
  130|      1|        ERR_load_strings(0, DSA_str_reasons);
  131|      1|    }
  132|      1|#endif
  133|      1|}

DSA_get_default_method:
   87|      1|{
   88|      1|    if (!default_DSA_method) {
   89|       |#ifdef OPENSSL_FIPS
   90|       |        if (FIPS_mode())
   91|       |            return FIPS_dsa_openssl();
   92|       |        else
   93|       |            return DSA_OpenSSL();
   94|       |#else
   95|      1|        default_DSA_method = DSA_OpenSSL();
   96|      1|#endif
   97|      1|    }
   98|      1|    return default_DSA_method;
   99|      1|}

DSA_OpenSSL:
  129|      5|{
  130|      5|    return &openssl_dsa_meth;
  131|      5|}

DSO_METHOD_dlfcn:
  135|      1|{
  136|      1|    return (&dso_meth_dlfcn);
  137|      1|}
dso_dlfcn.c:dlfcn_load:
  171|      4|{
  172|      4|    void *ptr = NULL;
  173|       |    /* See applicable comments in dso_dl.c */
  174|      4|    char *filename = DSO_convert_filename(dso, NULL);
  175|      4|    int flags = DLOPEN_FLAG;
  176|       |
  177|      4|    if (filename == NULL) {
  178|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);
  179|      0|        goto err;
  180|      0|    }
  181|      4|# ifdef RTLD_GLOBAL
  182|      4|    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)
  183|      0|        flags |= RTLD_GLOBAL;
  184|      4|# endif
  185|      4|    ptr = dlopen(filename, flags);
  186|      4|    if (ptr == NULL) {
  187|      4|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);
  188|      4|        ERR_add_error_data(4, "filename(", filename, "): ", dlerror());
  189|      4|        goto err;
  190|      4|    }
  191|      0|    if (!sk_void_push(dso->meth_data, (char *)ptr)) {
  192|      0|        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);
  193|      0|        goto err;
  194|      0|    }
  195|       |    /* Success */
  196|      0|    dso->loaded_filename = filename;
  197|      0|    return (1);
  198|      4| err:
  199|       |    /* Cleanup! */
  200|      4|    if (filename != NULL)
  201|      4|        OPENSSL_free(filename);
  202|      4|    if (ptr != NULL)
  203|      0|        dlclose(ptr);
  204|      4|    return (0);
  205|      0|}
dso_dlfcn.c:dlfcn_unload:
  208|      4|{
  209|      4|    void *ptr;
  210|      4|    if (dso == NULL) {
  211|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);
  212|      0|        return (0);
  213|      0|    }
  214|      4|    if (sk_void_num(dso->meth_data) < 1)
  215|      4|        return (1);
  216|      0|    ptr = sk_void_pop(dso->meth_data);
  217|      0|    if (ptr == NULL) {
  218|      0|        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);
  219|       |        /*
  220|       |         * Should push the value back onto the stack in case of a retry.
  221|       |         */
  222|      0|        sk_void_push(dso->meth_data, ptr);
  223|      0|        return (0);
  224|      0|    }
  225|       |    /* For now I'm not aware of any errors associated with dlclose() */
  226|      0|    dlclose(ptr);
  227|      0|    return (1);
  228|      0|}
dso_dlfcn.c:dlfcn_name_converter:
  355|      4|{
  356|      4|    char *translated;
  357|      4|    int len, rsize, transform;
  358|       |
  359|      4|    len = strlen(filename);
  360|      4|    rsize = len + 1;
  361|      4|    transform = (strstr(filename, "/") == NULL);
  362|      4|    if (transform) {
  363|       |        /* We will convert this to "%s.so" or "lib%s.so" etc */
  364|      4|        rsize += DSO_extlen;    /* The length of ".so" */
  365|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  366|      4|            rsize += 3;         /* The length of "lib" */
  367|      4|    }
  368|      4|    translated = OPENSSL_malloc(rsize);
  369|      4|    if (translated == NULL) {
  370|      0|        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);
  371|      0|        return (NULL);
  372|      0|    }
  373|      4|    if (transform) {
  374|      4|        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
  375|      4|            sprintf(translated, "lib%s" DSO_ext, filename);
  376|      0|        else
  377|      0|            sprintf(translated, "%s" DSO_ext, filename);
  378|      4|    } else
  379|      0|        sprintf(translated, "%s", filename);
  380|      4|    return (translated);
  381|      4|}

ERR_load_DSO_strings:
  150|      1|{
  151|      1|#ifndef OPENSSL_NO_ERR
  152|       |
  153|      1|    if (ERR_func_error_string(DSO_str_functs[0].error) == NULL) {
  154|      1|        ERR_load_strings(0, DSO_str_functs);
  155|      1|        ERR_load_strings(0, DSO_str_reasons);
  156|      1|    }
  157|      1|#endif
  158|      1|}

DSO_new_method:
   96|      4|{
   97|      4|    DSO *ret;
   98|       |
   99|      4|    if (default_DSO_meth == NULL)
  100|       |        /*
  101|       |         * We default to DSO_METH_openssl() which in turn defaults to
  102|       |         * stealing the "best available" method. Will fallback to
  103|       |         * DSO_METH_null() in the worst case.
  104|       |         */
  105|      1|        default_DSO_meth = DSO_METHOD_openssl();
  106|      4|    ret = (DSO *)OPENSSL_malloc(sizeof(DSO));
  107|      4|    if (ret == NULL) {
  108|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  109|      0|        return (NULL);
  110|      0|    }
  111|      4|    memset(ret, 0, sizeof(DSO));
  112|      4|    ret->meth_data = sk_void_new_null();
  113|      4|    if (ret->meth_data == NULL) {
  114|       |        /* sk_new doesn't generate any errors so we do */
  115|      0|        DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
  116|      0|        OPENSSL_free(ret);
  117|      0|        return (NULL);
  118|      0|    }
  119|      4|    if (meth == NULL)
  120|      4|        ret->meth = default_DSO_meth;
  121|      0|    else
  122|      0|        ret->meth = meth;
  123|      4|    ret->references = 1;
  124|      4|    if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {
  125|      0|        sk_void_free(ret->meth_data);
  126|      0|        OPENSSL_free(ret);
  127|      0|        ret = NULL;
  128|      0|    }
  129|      4|    return (ret);
  130|      4|}
DSO_free:
  133|      4|{
  134|      4|    int i;
  135|       |
  136|      4|    if (dso == NULL) {
  137|      0|        DSOerr(DSO_F_DSO_FREE, ERR_R_PASSED_NULL_PARAMETER);
  138|      0|        return (0);
  139|      0|    }
  140|       |
  141|      4|    i = CRYPTO_add(&dso->references, -1, CRYPTO_LOCK_DSO);
  142|       |#ifdef REF_PRINT
  143|       |    REF_PRINT("DSO", dso);
  144|       |#endif
  145|      4|    if (i > 0)
  146|      0|        return (1);
  147|       |#ifdef REF_CHECK
  148|       |    if (i < 0) {
  149|       |        fprintf(stderr, "DSO_free, bad reference count\n");
  150|       |        abort();
  151|       |    }
  152|       |#endif
  153|       |
  154|      4|    if ((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso)) {
  155|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_UNLOAD_FAILED);
  156|      0|        return (0);
  157|      0|    }
  158|       |
  159|      4|    if ((dso->meth->finish != NULL) && !dso->meth->finish(dso)) {
  160|      0|        DSOerr(DSO_F_DSO_FREE, DSO_R_FINISH_FAILED);
  161|      0|        return (0);
  162|      0|    }
  163|       |
  164|      4|    sk_void_free(dso->meth_data);
  165|      4|    if (dso->filename != NULL)
  166|      4|        OPENSSL_free(dso->filename);
  167|      4|    if (dso->loaded_filename != NULL)
  168|      0|        OPENSSL_free(dso->loaded_filename);
  169|       |
  170|      4|    OPENSSL_free(dso);
  171|      4|    return (1);
  172|      4|}
DSO_flags:
  175|      8|{
  176|      8|    return ((dso == NULL) ? 0 : dso->flags);
  177|      8|}
DSO_load:
  191|      4|{
  192|      4|    DSO *ret;
  193|      4|    int allocated = 0;
  194|       |
  195|      4|    if (dso == NULL) {
  196|      4|        ret = DSO_new_method(meth);
  197|      4|        if (ret == NULL) {
  198|      0|            DSOerr(DSO_F_DSO_LOAD, ERR_R_MALLOC_FAILURE);
  199|      0|            goto err;
  200|      0|        }
  201|      4|        allocated = 1;
  202|       |        /* Pass the provided flags to the new DSO object */
  203|      4|        if (DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0) {
  204|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_CTRL_FAILED);
  205|      0|            goto err;
  206|      0|        }
  207|      4|    } else
  208|      0|        ret = dso;
  209|       |    /* Don't load if we're currently already loaded */
  210|      4|    if (ret->filename != NULL) {
  211|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_DSO_ALREADY_LOADED);
  212|      0|        goto err;
  213|      0|    }
  214|       |    /*
  215|       |     * filename can only be NULL if we were passed a dso that already has one
  216|       |     * set.
  217|       |     */
  218|      4|    if (filename != NULL)
  219|      4|        if (!DSO_set_filename(ret, filename)) {
  220|      0|            DSOerr(DSO_F_DSO_LOAD, DSO_R_SET_FILENAME_FAILED);
  221|      0|            goto err;
  222|      0|        }
  223|      4|    filename = ret->filename;
  224|      4|    if (filename == NULL) {
  225|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_NO_FILENAME);
  226|      0|        goto err;
  227|      0|    }
  228|      4|    if (ret->meth->dso_load == NULL) {
  229|      0|        DSOerr(DSO_F_DSO_LOAD, DSO_R_UNSUPPORTED);
  230|      0|        goto err;
  231|      0|    }
  232|      4|    if (!ret->meth->dso_load(ret)) {
  233|      4|        DSOerr(DSO_F_DSO_LOAD, DSO_R_LOAD_FAILED);
  234|      4|        goto err;
  235|      4|    }
  236|       |    /* Load succeeded */
  237|      0|    return (ret);
  238|      4| err:
  239|      4|    if (allocated)
  240|      4|        DSO_free(ret);
  241|      4|    return (NULL);
  242|      4|}
DSO_ctrl:
  294|      4|{
  295|      4|    if (dso == NULL) {
  296|      0|        DSOerr(DSO_F_DSO_CTRL, ERR_R_PASSED_NULL_PARAMETER);
  297|      0|        return (-1);
  298|      0|    }
  299|       |    /*
  300|       |     * We should intercept certain generic commands and only pass control to
  301|       |     * the method-specific ctrl() function if it's something we don't handle.
  302|       |     */
  303|      4|    switch (cmd) {
  304|      0|    case DSO_CTRL_GET_FLAGS:
  305|      0|        return dso->flags;
  306|      4|    case DSO_CTRL_SET_FLAGS:
  307|      4|        dso->flags = (int)larg;
  308|      4|        return (0);
  309|      0|    case DSO_CTRL_OR_FLAGS:
  310|      0|        dso->flags |= (int)larg;
  311|      0|        return (0);
  312|      0|    default:
  313|      0|        break;
  314|      4|    }
  315|      0|    if ((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL)) {
  316|      0|        DSOerr(DSO_F_DSO_CTRL, DSO_R_UNSUPPORTED);
  317|      0|        return (-1);
  318|      0|    }
  319|      0|    return (dso->meth->dso_ctrl(dso, cmd, larg, parg));
  320|      0|}
DSO_set_filename:
  345|      4|{
  346|      4|    char *copied;
  347|       |
  348|      4|    if ((dso == NULL) || (filename == NULL)) {
  349|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  350|      0|        return (0);
  351|      0|    }
  352|      4|    if (dso->loaded_filename) {
  353|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, DSO_R_DSO_ALREADY_LOADED);
  354|      0|        return (0);
  355|      0|    }
  356|       |    /* We'll duplicate filename */
  357|      4|    copied = OPENSSL_malloc(strlen(filename) + 1);
  358|      4|    if (copied == NULL) {
  359|      0|        DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_MALLOC_FAILURE);
  360|      0|        return (0);
  361|      0|    }
  362|      4|    BUF_strlcpy(copied, filename, strlen(filename) + 1);
  363|      4|    if (dso->filename)
  364|      0|        OPENSSL_free(dso->filename);
  365|      4|    dso->filename = copied;
  366|      4|    return (1);
  367|      4|}
DSO_convert_filename:
  387|      4|{
  388|      4|    char *result = NULL;
  389|       |
  390|      4|    if (dso == NULL) {
  391|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
  392|      0|        return (NULL);
  393|      0|    }
  394|      4|    if (filename == NULL)
  395|      4|        filename = dso->filename;
  396|      4|    if (filename == NULL) {
  397|      0|        DSOerr(DSO_F_DSO_CONVERT_FILENAME, DSO_R_NO_FILENAME);
  398|      0|        return (NULL);
  399|      0|    }
  400|      4|    if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
  401|      4|        if (dso->name_converter != NULL)
  402|      0|            result = dso->name_converter(dso, filename);
  403|      4|        else if (dso->meth->dso_name_converter != NULL)
  404|      4|            result = dso->meth->dso_name_converter(dso, filename);
  405|      4|    }
  406|      4|    if (result == NULL) {
  407|      0|        result = OPENSSL_malloc(strlen(filename) + 1);
  408|      0|        if (result == NULL) {
  409|      0|            DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_MALLOC_FAILURE);
  410|      0|            return (NULL);
  411|      0|        }
  412|      0|        BUF_strlcpy(result, filename, strlen(filename) + 1);
  413|      0|    }
  414|      4|    return (result);
  415|      4|}

DSO_METHOD_openssl:
   67|      1|{
   68|       |#ifdef DEF_DSO_METHOD
   69|       |    return (DEF_DSO_METHOD());
   70|       |#elif defined(DSO_DLFCN)
   71|      1|    return (DSO_METHOD_dlfcn());
   72|       |#elif defined(DSO_DL)
   73|       |    return (DSO_METHOD_dl());
   74|       |#elif defined(DSO_WIN32)
   75|       |    return (DSO_METHOD_win32());
   76|       |#elif defined(DSO_VMS)
   77|       |    return (DSO_METHOD_vms());
   78|       |#elif defined(DSO_BEOS)
   79|       |    return (DSO_METHOD_beos());
   80|       |#else
   81|       |    return (DSO_METHOD_null());
   82|       |#endif
   83|      1|}

ERR_load_EC_strings:
  324|      1|{
  325|      1|#ifndef OPENSSL_NO_ERR
  326|       |
  327|      1|    if (ERR_func_error_string(EC_str_functs[0].error) == NULL) {
  328|      1|        ERR_load_strings(0, EC_str_functs);
  329|      1|        ERR_load_strings(0, EC_str_reasons);
  330|      1|    }
  331|      1|#endif
  332|      1|}

ERR_load_ECDH_strings:
   90|      1|{
   91|      1|#ifndef OPENSSL_NO_ERR
   92|       |
   93|      1|    if (ERR_func_error_string(ECDH_str_functs[0].error) == NULL) {
   94|      1|        ERR_load_strings(0, ECDH_str_functs);
   95|      1|        ERR_load_strings(0, ECDH_str_reasons);
   96|      1|    }
   97|      1|#endif
   98|      1|}

ERR_load_ECDSA_strings:
   99|      1|{
  100|      1|#ifndef OPENSSL_NO_ERR
  101|       |
  102|      1|    if (ERR_func_error_string(ECDSA_str_functs[0].error) == NULL) {
  103|      1|        ERR_load_strings(0, ECDSA_str_functs);
  104|      1|        ERR_load_strings(0, ECDSA_str_reasons);
  105|      1|    }
  106|      1|#endif
  107|      1|}

eng_table.c:engine_pile_LHASH_HASH:
  105|  7.58k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  7.58k|                const o_type *a = arg; \
  107|  7.58k|                return name##_hash(a); }
eng_table.c:engine_pile_LHASH_COMP:
  114|     29|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     29|                const o_type *a = arg1;             \
  116|     29|                const o_type *b = arg2; \
  117|     29|                return name##_cmp(a,b); }

ENGINE_load_builtin_engines:
   64|      1|{
   65|       |    /* Some ENGINEs need this */
   66|      1|    OPENSSL_cpuid_setup();
   67|       |#if 0
   68|       |    /*
   69|       |     * There's no longer any need for an "openssl" ENGINE unless, one day, it
   70|       |     * is the *only* way for standard builtin implementations to be be
   71|       |     * accessed (ie. it would be possible to statically link binaries with
   72|       |     * *no* builtin implementations).
   73|       |     */
   74|       |    ENGINE_load_openssl();
   75|       |#endif
   76|       |#if !defined(OPENSSL_NO_HW) && (defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV))
   77|       |    ENGINE_load_cryptodev();
   78|       |#endif
   79|      1|#ifndef OPENSSL_NO_RDRAND
   80|      1|    ENGINE_load_rdrand();
   81|      1|#endif
   82|      1|    ENGINE_load_dynamic();
   83|      1|#ifndef OPENSSL_NO_STATIC_ENGINE
   84|      1|# ifndef OPENSSL_NO_HW
   85|      1|#  ifndef OPENSSL_NO_HW_4758_CCA
   86|      1|    ENGINE_load_4758cca();
   87|      1|#  endif
   88|      1|#  ifndef OPENSSL_NO_HW_AEP
   89|      1|    ENGINE_load_aep();
   90|      1|#  endif
   91|      1|#  ifndef OPENSSL_NO_HW_ATALLA
   92|      1|    ENGINE_load_atalla();
   93|      1|#  endif
   94|      1|#  ifndef OPENSSL_NO_HW_CSWIFT
   95|      1|    ENGINE_load_cswift();
   96|      1|#  endif
   97|      1|#  ifndef OPENSSL_NO_HW_NCIPHER
   98|      1|    ENGINE_load_chil();
   99|      1|#  endif
  100|      1|#  ifndef OPENSSL_NO_HW_NURON
  101|      1|    ENGINE_load_nuron();
  102|      1|#  endif
  103|      1|#  ifndef OPENSSL_NO_HW_SUREWARE
  104|      1|    ENGINE_load_sureware();
  105|      1|#  endif
  106|      1|#  ifndef OPENSSL_NO_HW_UBSEC
  107|      1|    ENGINE_load_ubsec();
  108|      1|#  endif
  109|      1|#  ifndef OPENSSL_NO_HW_PADLOCK
  110|      1|    ENGINE_load_padlock();
  111|      1|#  endif
  112|      1|# endif
  113|      1|# ifndef OPENSSL_NO_GOST
  114|      1|    ENGINE_load_gost();
  115|      1|# endif
  116|       |# ifndef OPENSSL_NO_GMP
  117|       |    ENGINE_load_gmp();
  118|       |# endif
  119|       |# if defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_NO_CAPIENG)
  120|       |    ENGINE_load_capi();
  121|       |# endif
  122|      1|#endif
  123|      1|    ENGINE_register_all_complete();
  124|      1|}

ENGINE_add_conf_module:
  239|      1|{
  240|      1|    CONF_module_add("engines",
  241|      1|                    int_engine_module_init, int_engine_module_finish);
  242|      1|}

ENGINE_load_dynamic:
  312|      1|{
  313|      1|    ENGINE *toadd = engine_dynamic();
  314|      1|    if (!toadd)
  315|      0|        return;
  316|      1|    ENGINE_add(toadd);
  317|       |    /*
  318|       |     * If the "add" worked, it gets a structural reference. So either way, we
  319|       |     * release our just-created reference.
  320|       |     */
  321|      1|    ENGINE_free(toadd);
  322|       |    /*
  323|       |     * If the "add" didn't work, it was probably a conflict because it was
  324|       |     * already added (eg. someone calling ENGINE_load_blah then calling
  325|       |     * ENGINE_load_builtin_engines() perhaps).
  326|       |     */
  327|      1|    ERR_clear_error();
  328|      1|}
eng_dyn.c:engine_dynamic:
  294|      1|{
  295|      1|    ENGINE *ret = ENGINE_new();
  296|      1|    if (!ret)
  297|      0|        return NULL;
  298|      1|    if (!ENGINE_set_id(ret, engine_dynamic_id) ||
  299|      1|        !ENGINE_set_name(ret, engine_dynamic_name) ||
  300|      1|        !ENGINE_set_init_function(ret, dynamic_init) ||
  301|      1|        !ENGINE_set_finish_function(ret, dynamic_finish) ||
  302|      1|        !ENGINE_set_ctrl_function(ret, dynamic_ctrl) ||
  303|      1|        !ENGINE_set_flags(ret, ENGINE_FLAGS_BY_ID_COPY) ||
  304|      1|        !ENGINE_set_cmd_defns(ret, dynamic_cmd_defns)) {
  305|      0|        ENGINE_free(ret);
  306|      0|        return NULL;
  307|      0|    }
  308|      1|    return ret;
  309|      1|}

ERR_load_ENGINE_strings:
  173|      1|{
  174|      1|#ifndef OPENSSL_NO_ERR
  175|       |
  176|      1|    if (ERR_func_error_string(ENGINE_str_functs[0].error) == NULL) {
  177|      1|        ERR_load_strings(0, ENGINE_str_functs);
  178|      1|        ERR_load_strings(0, ENGINE_str_reasons);
  179|      1|    }
  180|      1|#endif
  181|      1|}

ENGINE_register_complete:
  150|     10|{
  151|     10|    ENGINE_register_ciphers(e);
  152|     10|    ENGINE_register_digests(e);
  153|     10|#ifndef OPENSSL_NO_RSA
  154|     10|    ENGINE_register_RSA(e);
  155|     10|#endif
  156|     10|#ifndef OPENSSL_NO_DSA
  157|     10|    ENGINE_register_DSA(e);
  158|     10|#endif
  159|     10|#ifndef OPENSSL_NO_DH
  160|     10|    ENGINE_register_DH(e);
  161|     10|#endif
  162|     10|#ifndef OPENSSL_NO_ECDH
  163|     10|    ENGINE_register_ECDH(e);
  164|     10|#endif
  165|     10|#ifndef OPENSSL_NO_ECDSA
  166|     10|    ENGINE_register_ECDSA(e);
  167|     10|#endif
  168|     10|    ENGINE_register_RAND(e);
  169|     10|    ENGINE_register_pkey_meths(e);
  170|     10|    return 1;
  171|     10|}
ENGINE_register_all_complete:
  174|      1|{
  175|      1|    ENGINE *e;
  176|       |
  177|     12|    for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
  178|     11|        if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
  179|     10|            ENGINE_register_complete(e);
  180|      1|    return 1;
  181|      1|}

engine_unlocked_init:
   63|      4|{
   64|      4|    int to_return = 1;
   65|       |
   66|      4|    if ((e->funct_ref == 0) && e->init)
   67|       |        /*
   68|       |         * This is the first functional reference and the engine requires
   69|       |         * initialisation so we do it now.
   70|       |         */
   71|      4|        to_return = e->init(e);
   72|      4|    if (to_return) {
   73|       |        /*
   74|       |         * OK, we return a functional reference which is also a structural
   75|       |         * reference.
   76|       |         */
   77|      0|        e->struct_ref++;
   78|      0|        e->funct_ref++;
   79|      0|        engine_ref_debug(e, 0, 1)
   80|      0|            engine_ref_debug(e, 1, 1)
   81|      0|    }
   82|      4|    return to_return;
   83|      4|}

ENGINE_new:
   66|     11|{
   67|     11|    ENGINE *ret;
   68|       |
   69|     11|    ret = (ENGINE *)OPENSSL_malloc(sizeof(ENGINE));
   70|     11|    if (ret == NULL) {
   71|      0|        ENGINEerr(ENGINE_F_ENGINE_NEW, ERR_R_MALLOC_FAILURE);
   72|      0|        return NULL;
   73|      0|    }
   74|     11|    memset(ret, 0, sizeof(ENGINE));
   75|     11|    ret->struct_ref = 1;
   76|     11|    engine_ref_debug(ret, 0, 1)
   77|     11|        CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ENGINE, ret, &ret->ex_data);
   78|     11|    return ret;
   79|     11|}
engine_free_util:
  108|     22|{
  109|     22|    int i;
  110|       |
  111|     22|    if (e == NULL) {
  112|      0|        ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL, ERR_R_PASSED_NULL_PARAMETER);
  113|      0|        return 0;
  114|      0|    }
  115|     22|    if (locked)
  116|     22|        i = CRYPTO_add(&e->struct_ref, -1, CRYPTO_LOCK_ENGINE);
  117|      0|    else
  118|      0|        i = --e->struct_ref;
  119|     22|    engine_ref_debug(e, 0, -1)
  120|     22|        if (i > 0)
  121|     22|        return 1;
  122|       |#ifdef REF_CHECK
  123|       |    if (i < 0) {
  124|       |        fprintf(stderr, "ENGINE_free, bad structural reference count\n");
  125|       |        abort();
  126|       |    }
  127|       |#endif
  128|       |    /* Free up any dynamically allocated public key methods */
  129|      0|    engine_pkey_meths_free(e);
  130|      0|    engine_pkey_asn1_meths_free(e);
  131|       |    /*
  132|       |     * Give the ENGINE a chance to do any structural cleanup corresponding to
  133|       |     * allocation it did in its constructor (eg. unload error strings)
  134|       |     */
  135|      0|    if (e->destroy)
  136|      0|        e->destroy(e);
  137|      0|    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ENGINE, e, &e->ex_data);
  138|      0|    OPENSSL_free(e);
  139|      0|    return 1;
  140|     22|}
ENGINE_free:
  143|     22|{
  144|     22|    return engine_free_util(e, 1);
  145|     22|}
engine_cleanup_add_first:
  176|      7|{
  177|      7|    ENGINE_CLEANUP_ITEM *item;
  178|      7|    if (!int_cleanup_check(1))
  179|      0|        return;
  180|      7|    item = int_cleanup_item(cb);
  181|      7|    if (item)
  182|      7|        sk_ENGINE_CLEANUP_ITEM_insert(cleanup_stack, item, 0);
  183|      7|}
engine_cleanup_add_last:
  186|      1|{
  187|      1|    ENGINE_CLEANUP_ITEM *item;
  188|      1|    if (!int_cleanup_check(1))
  189|      0|        return;
  190|      1|    item = int_cleanup_item(cb);
  191|      1|    if (item)
  192|      1|        sk_ENGINE_CLEANUP_ITEM_push(cleanup_stack, item);
  193|      1|}
ENGINE_set_id:
  242|     11|{
  243|     11|    if (id == NULL) {
  244|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_ID, ERR_R_PASSED_NULL_PARAMETER);
  245|      0|        return 0;
  246|      0|    }
  247|     11|    e->id = id;
  248|     11|    return 1;
  249|     11|}
ENGINE_set_name:
  252|     11|{
  253|     11|    if (name == NULL) {
  254|      0|        ENGINEerr(ENGINE_F_ENGINE_SET_NAME, ERR_R_PASSED_NULL_PARAMETER);
  255|      0|        return 0;
  256|      0|    }
  257|     11|    e->name = name;
  258|     11|    return 1;
  259|     11|}
ENGINE_set_destroy_function:
  262|      9|{
  263|      9|    e->destroy = destroy_f;
  264|      9|    return 1;
  265|      9|}
ENGINE_set_init_function:
  268|     11|{
  269|     11|    e->init = init_f;
  270|     11|    return 1;
  271|     11|}
ENGINE_set_finish_function:
  274|     10|{
  275|     10|    e->finish = finish_f;
  276|     10|    return 1;
  277|     10|}
ENGINE_set_ctrl_function:
  280|     10|{
  281|     10|    e->ctrl = ctrl_f;
  282|     10|    return 1;
  283|     10|}
ENGINE_set_flags:
  286|      2|{
  287|      2|    e->flags = flags;
  288|      2|    return 1;
  289|      2|}
ENGINE_set_cmd_defns:
  292|      9|{
  293|      9|    e->cmd_defns = defns;
  294|      9|    return 1;
  295|      9|}
eng_lib.c:int_cleanup_check:
  157|      8|{
  158|      8|    if (cleanup_stack)
  159|      7|        return 1;
  160|      1|    if (!create)
  161|      0|        return 0;
  162|      1|    cleanup_stack = sk_ENGINE_CLEANUP_ITEM_new_null();
  163|      1|    return (cleanup_stack ? 1 : 0);
  164|      1|}
eng_lib.c:int_cleanup_item:
  167|      8|{
  168|      8|    ENGINE_CLEANUP_ITEM *item = OPENSSL_malloc(sizeof(ENGINE_CLEANUP_ITEM));
  169|      8|    if (!item)
  170|      0|        return NULL;
  171|      8|    item->cb = cb;
  172|      8|    return item;
  173|      8|}

ENGINE_get_first:
  185|      1|{
  186|      1|    ENGINE *ret;
  187|       |
  188|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  189|      1|    ret = engine_list_head;
  190|      1|    if (ret) {
  191|      1|        ret->struct_ref++;
  192|      1|        engine_ref_debug(ret, 0, 1)
  193|      1|    }
  194|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  195|      1|    return ret;
  196|      1|}
ENGINE_get_next:
  214|     11|{
  215|     11|    ENGINE *ret = NULL;
  216|     11|    if (e == NULL) {
  217|      0|        ENGINEerr(ENGINE_F_ENGINE_GET_NEXT, ERR_R_PASSED_NULL_PARAMETER);
  218|      0|        return 0;
  219|      0|    }
  220|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  221|     11|    ret = e->next;
  222|     11|    if (ret) {
  223|       |        /* Return a valid structural refernce to the next ENGINE */
  224|     10|        ret->struct_ref++;
  225|     10|        engine_ref_debug(ret, 0, 1)
  226|     10|    }
  227|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  228|       |    /* Release the structural reference to the previous ENGINE */
  229|     11|    ENGINE_free(e);
  230|     11|    return ret;
  231|     11|}
ENGINE_add:
  255|     11|{
  256|     11|    int to_return = 1;
  257|     11|    if (e == NULL) {
  258|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ERR_R_PASSED_NULL_PARAMETER);
  259|      0|        return 0;
  260|      0|    }
  261|     11|    if ((e->id == NULL) || (e->name == NULL)) {
  262|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_ID_OR_NAME_MISSING);
  263|      0|        return 0;
  264|      0|    }
  265|     11|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  266|     11|    if (!engine_list_add(e)) {
  267|      0|        ENGINEerr(ENGINE_F_ENGINE_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  268|      0|        to_return = 0;
  269|      0|    }
  270|     11|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  271|     11|    return to_return;
  272|     11|}
eng_list.c:engine_list_add:
  103|     11|{
  104|     11|    int conflict = 0;
  105|     11|    ENGINE *iterator = NULL;
  106|       |
  107|     11|    if (e == NULL) {
  108|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ERR_R_PASSED_NULL_PARAMETER);
  109|      0|        return 0;
  110|      0|    }
  111|     11|    iterator = engine_list_head;
  112|     66|    while (iterator && !conflict) {
  113|     55|        conflict = (strcmp(iterator->id, e->id) == 0);
  114|     55|        iterator = iterator->next;
  115|     55|    }
  116|     11|    if (conflict) {
  117|      0|        ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_CONFLICTING_ENGINE_ID);
  118|      0|        return 0;
  119|      0|    }
  120|     11|    if (engine_list_head == NULL) {
  121|       |        /* We are adding to an empty list. */
  122|      1|        if (engine_list_tail) {
  123|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  124|      0|            return 0;
  125|      0|        }
  126|      1|        engine_list_head = e;
  127|      1|        e->prev = NULL;
  128|       |        /*
  129|       |         * The first time the list allocates, we should register the cleanup.
  130|       |         */
  131|      1|        engine_cleanup_add_last(engine_list_cleanup);
  132|     10|    } else {
  133|       |        /* We are adding to the tail of an existing list. */
  134|     10|        if ((engine_list_tail == NULL) || (engine_list_tail->next != NULL)) {
  135|      0|            ENGINEerr(ENGINE_F_ENGINE_LIST_ADD, ENGINE_R_INTERNAL_LIST_ERROR);
  136|      0|            return 0;
  137|      0|        }
  138|     10|        engine_list_tail->next = e;
  139|     10|        e->prev = engine_list_tail;
  140|     10|    }
  141|       |    /*
  142|       |     * Having the engine in the list assumes a structural reference.
  143|       |     */
  144|     11|    e->struct_ref++;
  145|     11|    engine_ref_debug(e, 0, 1)
  146|       |        /* However it came to be, e is the last item in the list. */
  147|     11|        engine_list_tail = e;
  148|     11|    e->next = NULL;
  149|     11|    return 1;
  150|     11|}

ENGINE_set_load_privkey_function:
   62|      3|{
   63|      3|    e->load_privkey = loadpriv_f;
   64|      3|    return 1;
   65|      3|}
ENGINE_set_load_pubkey_function:
   68|      3|{
   69|      3|    e->load_pubkey = loadpub_f;
   70|      3|    return 1;
   71|      3|}

ENGINE_load_rdrand:
  133|      1|{
  134|      1|    extern unsigned int OPENSSL_ia32cap_P[];
  135|       |
  136|      1|    if (OPENSSL_ia32cap_P[1] & (1 << (62 - 32))) {
  137|      1|        ENGINE *toadd = ENGINE_rdrand();
  138|      1|        if (!toadd)
  139|      0|            return;
  140|      1|        ENGINE_add(toadd);
  141|      1|        ENGINE_free(toadd);
  142|      1|        ERR_clear_error();
  143|      1|    }
  144|      1|}
eng_rdrand.c:ENGINE_rdrand:
  121|      1|{
  122|      1|    ENGINE *ret = ENGINE_new();
  123|      1|    if (!ret)
  124|      0|        return NULL;
  125|      1|    if (!bind_helper(ret)) {
  126|      0|        ENGINE_free(ret);
  127|      0|        return NULL;
  128|      0|    }
  129|      1|    return ret;
  130|      1|}
eng_rdrand.c:bind_helper:
  109|      1|{
  110|      1|    if (!ENGINE_set_id(e, engine_e_rdrand_id) ||
  111|      1|        !ENGINE_set_name(e, engine_e_rdrand_name) ||
  112|      1|        !ENGINE_set_flags(e, ENGINE_FLAGS_NO_REGISTER_ALL) ||
  113|      1|        !ENGINE_set_init_function(e, rdrand_init) ||
  114|      1|        !ENGINE_set_RAND(e, &rdrand_meth))
  115|      0|        return 0;
  116|       |
  117|      1|    return 1;
  118|      1|}

engine_table_register:
  135|     31|{
  136|     31|    int ret = 0, added = 0;
  137|     31|    ENGINE_PILE tmplate, *fnd;
  138|     31|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  139|     31|    if (!(*table))
  140|      7|        added = 1;
  141|     31|    if (!int_table_check(table, 1))
  142|      0|        goto end;
  143|     31|    if (added)
  144|       |        /* The cleanup callback needs to be added */
  145|      7|        engine_cleanup_add_first(cleanup);
  146|     70|    while (num_nids--) {
  147|     39|        tmplate.nid = *nids;
  148|     39|        fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  149|     39|        if (!fnd) {
  150|     11|            fnd = OPENSSL_malloc(sizeof(ENGINE_PILE));
  151|     11|            if (!fnd)
  152|      0|                goto end;
  153|     11|            fnd->uptodate = 1;
  154|     11|            fnd->nid = *nids;
  155|     11|            fnd->sk = sk_ENGINE_new_null();
  156|     11|            if (!fnd->sk) {
  157|      0|                OPENSSL_free(fnd);
  158|      0|                goto end;
  159|      0|            }
  160|     11|            fnd->funct = NULL;
  161|     11|            (void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
  162|     11|        }
  163|       |        /* A registration shouldn't add duplciate entries */
  164|     39|        (void)sk_ENGINE_delete_ptr(fnd->sk, e);
  165|       |        /*
  166|       |         * if 'setdefault', this ENGINE goes to the head of the list
  167|       |         */
  168|     39|        if (!sk_ENGINE_push(fnd->sk, e))
  169|      0|            goto end;
  170|       |        /* "touch" this ENGINE_PILE */
  171|     39|        fnd->uptodate = 0;
  172|     39|        if (setdefault) {
  173|      0|            if (!engine_unlocked_init(e)) {
  174|      0|                ENGINEerr(ENGINE_F_ENGINE_TABLE_REGISTER,
  175|      0|                          ENGINE_R_INIT_FAILED);
  176|      0|                goto end;
  177|      0|            }
  178|      0|            if (fnd->funct)
  179|      0|                engine_unlocked_finish(fnd->funct, 0);
  180|      0|            fnd->funct = e;
  181|      0|            fnd->uptodate = 1;
  182|      0|        }
  183|     39|        nids++;
  184|     39|    }
  185|     31|    ret = 1;
  186|     31| end:
  187|     31|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  188|     31|    return ret;
  189|     31|}
engine_table_select:
  246|  7.53k|{
  247|  7.53k|    ENGINE *ret = NULL;
  248|  7.53k|    ENGINE_PILE tmplate, *fnd = NULL;
  249|  7.53k|    int initres, loop = 0;
  250|       |
  251|  7.53k|    if (!(*table)) {
  252|       |#ifdef ENGINE_TABLE_DEBUG
  253|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
  254|       |                "registered!\n", f, l, nid);
  255|       |#endif
  256|      0|        return NULL;
  257|      0|    }
  258|  7.53k|    ERR_set_mark();
  259|  7.53k|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  260|       |    /*
  261|       |     * Check again inside the lock otherwise we could race against cleanup
  262|       |     * operations. But don't worry about a fprintf(stderr).
  263|       |     */
  264|  7.53k|    if (!int_table_check(table, 0))
  265|      0|        goto end;
  266|  7.53k|    tmplate.nid = nid;
  267|  7.53k|    fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
  268|  7.53k|    if (!fnd)
  269|  7.52k|        goto end;
  270|      1|    if (fnd->funct && engine_unlocked_init(fnd->funct)) {
  271|       |#ifdef ENGINE_TABLE_DEBUG
  272|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  273|       |                "ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
  274|       |#endif
  275|      0|        ret = fnd->funct;
  276|      0|        goto end;
  277|      0|    }
  278|      1|    if (fnd->uptodate) {
  279|      0|        ret = fnd->funct;
  280|      0|        goto end;
  281|      0|    }
  282|      5| trynext:
  283|      5|    ret = sk_ENGINE_value(fnd->sk, loop++);
  284|      5|    if (!ret) {
  285|       |#ifdef ENGINE_TABLE_DEBUG
  286|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
  287|       |                "registered implementations would initialise\n", f, l, nid);
  288|       |#endif
  289|      1|        goto end;
  290|      1|    }
  291|       |    /* Try to initialise the ENGINE? */
  292|      4|    if ((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
  293|      4|        initres = engine_unlocked_init(ret);
  294|      0|    else
  295|      0|        initres = 0;
  296|      4|    if (initres) {
  297|       |        /* Update 'funct' */
  298|      0|        if ((fnd->funct != ret) && engine_unlocked_init(ret)) {
  299|       |            /* If there was a previous default we release it. */
  300|      0|            if (fnd->funct)
  301|      0|                engine_unlocked_finish(fnd->funct, 0);
  302|      0|            fnd->funct = ret;
  303|       |#ifdef ENGINE_TABLE_DEBUG
  304|       |            fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, "
  305|       |                    "setting default to '%s'\n", f, l, nid, ret->id);
  306|       |#endif
  307|      0|        }
  308|       |#ifdef ENGINE_TABLE_DEBUG
  309|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
  310|       |                "newly initialised '%s'\n", f, l, nid, ret->id);
  311|       |#endif
  312|      0|        goto end;
  313|      0|    }
  314|      4|    goto trynext;
  315|  7.53k| end:
  316|       |    /*
  317|       |     * If it failed, it is unlikely to succeed again until some future
  318|       |     * registrations have taken place. In all cases, we cache.
  319|       |     */
  320|  7.53k|    if (fnd)
  321|      1|        fnd->uptodate = 1;
  322|       |#ifdef ENGINE_TABLE_DEBUG
  323|       |    if (ret)
  324|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  325|       |                "ENGINE '%s'\n", f, l, nid, ret->id);
  326|       |    else
  327|       |        fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
  328|       |                "'no matching ENGINE'\n", f, l, nid);
  329|       |#endif
  330|  7.53k|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  331|       |    /*
  332|       |     * Whatever happened, any failed init()s are not failures in this
  333|       |     * context, so clear our error state.
  334|       |     */
  335|  7.53k|    ERR_pop_to_mark();
  336|  7.53k|    return ret;
  337|      4|}
engine_table_doall:
  350|      1|{
  351|      1|    ENGINE_PILE_DOALL dall;
  352|      1|    dall.cb = cb;
  353|      1|    dall.arg = arg;
  354|      1|    if (table)
  355|      1|        lh_ENGINE_PILE_doall_arg(&table->piles,
  356|      1|                                 LHASH_DOALL_ARG_FN(int_cb),
  357|      1|                                 ENGINE_PILE_DOALL, &dall);
  358|      1|}
eng_table.c:int_table_check:
  115|  7.56k|{
  116|  7.56k|    LHASH_OF(ENGINE_PILE) *lh;
  117|       |
  118|  7.56k|    if (*t)
  119|  7.55k|        return 1;
  120|      7|    if (!create)
  121|      0|        return 0;
  122|      7|    if ((lh = lh_ENGINE_PILE_new()) == NULL)
  123|      0|        return 0;
  124|      7|    *t = (ENGINE_TABLE *)lh;
  125|      7|    return 1;
  126|      7|}
eng_table.c:engine_pile_hash:
  102|  7.58k|{
  103|  7.58k|    return c->nid;
  104|  7.58k|}
eng_table.c:engine_pile_cmp:
  107|     29|{
  108|     29|    return a->nid - b->nid;
  109|     29|}

ENGINE_set_pkey_asn1_meths:
  147|      1|{
  148|      1|    e->pkey_asn1_meths = f;
  149|      1|    return 1;
  150|      1|}
ENGINE_pkey_asn1_find_str:
  230|      1|{
  231|      1|    ENGINE_FIND_STR fstr;
  232|      1|    fstr.e = NULL;
  233|      1|    fstr.ameth = NULL;
  234|      1|    fstr.str = str;
  235|      1|    fstr.len = len;
  236|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
  237|      1|    engine_table_doall(pkey_asn1_meth_table, look_str_cb, &fstr);
  238|       |    /* If found obtain a structural reference to engine */
  239|      1|    if (fstr.e) {
  240|      0|        fstr.e->struct_ref++;
  241|      0|        engine_ref_debug(fstr.e, 0, 1)
  242|      0|    }
  243|      1|    *pe = fstr.e;
  244|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
  245|      1|    return fstr.ameth;
  246|      1|}

ENGINE_register_ciphers:
   77|     11|{
   78|     11|    if (e->ciphers) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->ciphers(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&cipher_table,
   83|      2|                                         engine_unregister_all_ciphers, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_set_ciphers:
  140|      1|{
  141|      1|    e->ciphers = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DH:
   78|     10|{
   79|     10|    if (e->dh_meth)
   80|      7|        return engine_table_register(&dh_table,
   81|      7|                                     engine_unregister_all_DH, e, &dummy_nid,
   82|      7|                                     1, 0);
   83|      3|    return 1;
   84|     10|}
ENGINE_set_DH:
  121|      7|{
  122|      7|    e->dh_meth = dh_meth;
  123|      7|    return 1;
  124|      7|}

ENGINE_register_digests:
   77|     11|{
   78|     11|    if (e->digests) {
   79|      2|        const int *nids;
   80|      2|        int num_nids = e->digests(e, NULL, &nids, 0);
   81|      2|        if (num_nids > 0)
   82|      2|            return engine_table_register(&digest_table,
   83|      2|                                         engine_unregister_all_digests, e,
   84|      2|                                         nids, num_nids, 0);
   85|      2|    }
   86|      9|    return 1;
   87|     11|}
ENGINE_get_digest_engine:
  116|  7.52k|{
  117|  7.52k|    return engine_table_select(&digest_table, nid);
  118|  7.52k|}
ENGINE_set_digests:
  140|      1|{
  141|      1|    e->digests = f;
  142|      1|    return 1;
  143|      1|}

ENGINE_register_DSA:
   78|     10|{
   79|     10|    if (e->dsa_meth)
   80|      6|        return engine_table_register(&dsa_table,
   81|      6|                                     engine_unregister_all_DSA, e, &dummy_nid,
   82|      6|                                     1, 0);
   83|      4|    return 1;
   84|     10|}
ENGINE_set_DSA:
  121|      6|{
  122|      6|    e->dsa_meth = dsa_meth;
  123|      6|    return 1;
  124|      6|}

ENGINE_register_ECDH:
   93|     10|{
   94|     10|    if (e->ecdh_meth)
   95|      0|        return engine_table_register(&ecdh_table,
   96|      0|                                     engine_unregister_all_ECDH, e,
   97|      0|                                     &dummy_nid, 1, 0);
   98|     10|    return 1;
   99|     10|}

ENGINE_register_ECDSA:
   78|     10|{
   79|     10|    if (e->ecdsa_meth)
   80|      0|        return engine_table_register(&ecdsa_table,
   81|      0|                                     engine_unregister_all_ECDSA, e,
   82|      0|                                     &dummy_nid, 1, 0);
   83|     10|    return 1;
   84|     10|}

ENGINE_register_pkey_meths:
   78|     11|{
   79|     11|    if (e->pkey_meths) {
   80|      2|        const int *nids;
   81|      2|        int num_nids = e->pkey_meths(e, NULL, &nids, 0);
   82|      2|        if (num_nids > 0)
   83|      2|            return engine_table_register(&pkey_meth_table,
   84|      2|                                         engine_unregister_all_pkey_meths, e,
   85|      2|                                         nids, num_nids, 0);
   86|      2|    }
   87|      9|    return 1;
   88|     11|}
ENGINE_set_pkey_meths:
  142|      1|{
  143|      1|    e->pkey_meths = f;
  144|      1|    return 1;
  145|      1|}

ENGINE_register_RAND:
   78|     10|{
   79|     10|    if (e->rand_meth)
   80|      4|        return engine_table_register(&rand_table,
   81|      4|                                     engine_unregister_all_RAND, e,
   82|      4|                                     &dummy_nid, 1, 0);
   83|      6|    return 1;
   84|     10|}
ENGINE_get_default_RAND:
  109|      1|{
  110|      1|    return engine_table_select(&rand_table, dummy_nid);
  111|      1|}
ENGINE_set_RAND:
  121|      5|{
  122|      5|    e->rand_meth = rand_meth;
  123|      5|    return 1;
  124|      5|}

ENGINE_register_RSA:
   78|     10|{
   79|     10|    if (e->rsa_meth)
   80|      8|        return engine_table_register(&rsa_table,
   81|      8|                                     engine_unregister_all_RSA, e, &dummy_nid,
   82|      8|                                     1, 0);
   83|      2|    return 1;
   84|     10|}
ENGINE_set_RSA:
  121|      8|{
  122|      8|    e->rsa_meth = rsa_meth;
  123|      8|    return 1;
  124|      8|}

err.c:err_string_data_LHASH_HASH:
  105|  19.0k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  19.0k|                const o_type *a = arg; \
  107|  19.0k|                return name##_hash(a); }
err.c:err_string_data_LHASH_COMP:
  114|  17.2k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  17.2k|                const o_type *a = arg1;             \
  116|  17.2k|                const o_type *b = arg2; \
  117|  17.2k|                return name##_cmp(a,b); }
err.c:err_state_LHASH_HASH:
  105|  21.0k|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|  21.0k|                const o_type *a = arg; \
  107|  21.0k|                return name##_hash(a); }
err.c:err_state_LHASH_COMP:
  114|  18.0k|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|  18.0k|                const o_type *a = arg1;             \
  116|  18.0k|                const o_type *b = arg2; \
  117|  18.0k|                return name##_cmp(a,b); }

ERR_load_ERR_strings:
  659|     81|{
  660|     81|    err_fns_check();
  661|     81|#ifndef OPENSSL_NO_ERR
  662|     81|    err_load_strings(0, ERR_str_libraries);
  663|     81|    err_load_strings(0, ERR_str_reasons);
  664|     81|    err_load_strings(ERR_LIB_SYS, ERR_str_functs);
  665|     81|    build_SYS_str_reasons();
  666|     81|    err_load_strings(ERR_LIB_SYS, SYS_str_reasons);
  667|     81|#endif
  668|     81|}
ERR_load_strings:
  681|     80|{
  682|     80|    ERR_load_ERR_strings();
  683|     80|    err_load_strings(lib, str);
  684|     80|}
ERR_put_error:
  705|     15|{
  706|     15|    ERR_STATE *es;
  707|       |
  708|       |#ifdef _OSD_POSIX
  709|       |    /*
  710|       |     * In the BS2000-OSD POSIX subsystem, the compiler generates path names
  711|       |     * in the form "*POSIX(/etc/passwd)". This dirty hack strips them to
  712|       |     * something sensible. @@@ We shouldn't modify a const string, though.
  713|       |     */
  714|       |    if (strncmp(file, "*POSIX(", sizeof("*POSIX(") - 1) == 0) {
  715|       |        char *end;
  716|       |
  717|       |        /* Skip the "*POSIX(" prefix */
  718|       |        file += sizeof("*POSIX(") - 1;
  719|       |        end = &file[strlen(file) - 1];
  720|       |        if (*end == ')')
  721|       |            *end = '\0';
  722|       |        /* Optional: use the basename of the path only. */
  723|       |        if ((end = strrchr(file, '/')) != NULL)
  724|       |            file = &end[1];
  725|       |    }
  726|       |#endif
  727|     15|    es = ERR_get_state();
  728|     15|    if (es == NULL)
  729|      0|        return;
  730|       |
  731|     15|    es->top = (es->top + 1) % ERR_NUM_ERRORS;
  732|     15|    if (es->top == es->bottom)
  733|      0|        es->bottom = (es->bottom + 1) % ERR_NUM_ERRORS;
  734|     15|    es->err_flags[es->top] = 0;
  735|     15|    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
  736|     15|    es->err_file[es->top] = file;
  737|     15|    es->err_line[es->top] = line;
  738|     15|    err_clear_data(es, es->top);
  739|     15|}
ERR_clear_error:
  742|     12|{
  743|     12|    int i;
  744|     12|    ERR_STATE *es;
  745|       |
  746|     12|    es = ERR_get_state();
  747|     12|    if (es == NULL)
  748|      0|        return;
  749|       |
  750|    204|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  751|    192|        err_clear(es, i);
  752|    192|    }
  753|     12|    es->top = es->bottom = 0;
  754|     12|}
ERR_peek_last_error:
  789|      2|{
  790|      2|    return (get_error_values(0, 1, NULL, NULL, NULL, NULL));
  791|      2|}
ERR_func_error_string:
  971|     28|{
  972|     28|    ERR_STRING_DATA d, *p;
  973|     28|    unsigned long l, f;
  974|       |
  975|     28|    err_fns_check();
  976|     28|    l = ERR_GET_LIB(e);
  977|     28|    f = ERR_GET_FUNC(e);
  978|     28|    d.error = ERR_PACK(l, f, 0);
  979|     28|    p = ERRFN(err_get_item) (&d);
  980|     28|    return ((p == NULL) ? NULL : p->string);
  981|     28|}
ERR_remove_thread_state:
 1001|  6.05k|{
 1002|  6.05k|    ERR_STATE tmp;
 1003|       |
 1004|  6.05k|    if (id)
 1005|      0|        CRYPTO_THREADID_cpy(&tmp.tid, id);
 1006|  6.05k|    else
 1007|  6.05k|        CRYPTO_THREADID_current(&tmp.tid);
 1008|  6.05k|    err_fns_check();
 1009|       |    /*
 1010|       |     * thread_del_item automatically destroys the LHASH if the number of
 1011|       |     * items reaches zero.
 1012|       |     */
 1013|  6.05k|    ERRFN(thread_del_item) (&tmp);
 1014|  6.05k|}
ERR_get_state:
 1024|  15.0k|{
 1025|  15.0k|    ERR_STATE *ret, tmp, *tmpp = NULL;
 1026|  15.0k|    int i;
 1027|  15.0k|    CRYPTO_THREADID tid;
 1028|       |
 1029|  15.0k|    err_fns_check();
 1030|  15.0k|    CRYPTO_THREADID_current(&tid);
 1031|  15.0k|    CRYPTO_THREADID_cpy(&tmp.tid, &tid);
 1032|  15.0k|    ret = ERRFN(thread_get_item) (&tmp);
 1033|       |
 1034|       |    /* ret == the error state, if NULL, make a new one */
 1035|  15.0k|    if (ret == NULL) {
 1036|  3.00k|        ret = (ERR_STATE *)OPENSSL_malloc(sizeof(ERR_STATE));
 1037|  3.00k|        if (ret == NULL)
 1038|      0|            return NULL;
 1039|  3.00k|        CRYPTO_THREADID_cpy(&ret->tid, &tid);
 1040|  3.00k|        ret->top = 0;
 1041|  3.00k|        ret->bottom = 0;
 1042|  51.0k|        for (i = 0; i < ERR_NUM_ERRORS; i++) {
 1043|  48.0k|            ret->err_data[i] = NULL;
 1044|  48.0k|            ret->err_data_flags[i] = 0;
 1045|  48.0k|        }
 1046|  3.00k|        tmpp = ERRFN(thread_set_item) (ret);
 1047|       |        /* To check if insertion failed, do a get. */
 1048|  3.00k|        if (ERRFN(thread_get_item) (ret) != ret) {
 1049|      0|            ERR_STATE_free(ret); /* could not insert it */
 1050|      0|            return NULL;
 1051|      0|        }
 1052|       |        /*
 1053|       |         * If a race occured in this function and we came second, tmpp is the
 1054|       |         * first one that we just replaced.
 1055|       |         */
 1056|  3.00k|        if (tmpp)
 1057|      0|            ERR_STATE_free(tmpp);
 1058|  3.00k|    }
 1059|  15.0k|    return ret;
 1060|  15.0k|}
ERR_get_next_error_library:
 1063|      9|{
 1064|      9|    err_fns_check();
 1065|      9|    return ERRFN(get_next_lib) ();
 1066|      9|}
ERR_set_error_data:
 1069|      5|{
 1070|      5|    ERR_STATE *es;
 1071|      5|    int i;
 1072|       |
 1073|      5|    es = ERR_get_state();
 1074|      5|    if (es == NULL)
 1075|      0|        return;
 1076|       |
 1077|      5|    i = es->top;
 1078|       |
 1079|      5|    err_clear_data(es, i);
 1080|      5|    es->err_data[i] = data;
 1081|      5|    es->err_data_flags[i] = flags;
 1082|      5|}
ERR_add_error_data:
 1085|      5|{
 1086|      5|    va_list args;
 1087|      5|    va_start(args, num);
 1088|      5|    ERR_add_error_vdata(num, args);
 1089|      5|    va_end(args);
 1090|      5|}
ERR_add_error_vdata:
 1093|      5|{
 1094|      5|    int i, n, s;
 1095|      5|    char *str, *p, *a;
 1096|       |
 1097|      5|    s = 80;
 1098|      5|    str = OPENSSL_malloc(s + 1);
 1099|      5|    if (str == NULL)
 1100|      0|        return;
 1101|      5|    str[0] = '\0';
 1102|       |
 1103|      5|    n = 0;
 1104|     26|    for (i = 0; i < num; i++) {
 1105|     21|        a = va_arg(args, char *);
 1106|       |        /* ignore NULLs, thanks to Bob Beck <beck@obtuse.com> */
 1107|     21|        if (a != NULL) {
 1108|     21|            n += strlen(a);
 1109|     21|            if (n > s) {
 1110|      4|                s = n + 20;
 1111|      4|                p = OPENSSL_realloc(str, s + 1);
 1112|      4|                if (p == NULL) {
 1113|      0|                    OPENSSL_free(str);
 1114|      0|                    return;
 1115|      0|                } else
 1116|      4|                    str = p;
 1117|      4|            }
 1118|     21|            BUF_strlcat(str, a, (size_t)s + 1);
 1119|     21|        }
 1120|     21|    }
 1121|      5|    ERR_set_error_data(str, ERR_TXT_MALLOCED | ERR_TXT_STRING);
 1122|      5|}
ERR_set_mark:
 1125|  7.53k|{
 1126|  7.53k|    ERR_STATE *es;
 1127|       |
 1128|  7.53k|    es = ERR_get_state();
 1129|  7.53k|    if (es == NULL)
 1130|      0|        return 0;
 1131|       |
 1132|  7.53k|    if (es->bottom == es->top)
 1133|  7.53k|        return 0;
 1134|      0|    es->err_flags[es->top] |= ERR_FLAG_MARK;
 1135|      0|    return 1;
 1136|  7.53k|}
ERR_pop_to_mark:
 1139|  7.53k|{
 1140|  7.53k|    ERR_STATE *es;
 1141|       |
 1142|  7.53k|    es = ERR_get_state();
 1143|  7.53k|    if (es == NULL)
 1144|      0|        return 0;
 1145|       |
 1146|  7.54k|    while (es->bottom != es->top
 1147|  7.54k|           && (es->err_flags[es->top] & ERR_FLAG_MARK) == 0) {
 1148|     12|        err_clear(es, es->top);
 1149|     12|        es->top -= 1;
 1150|     12|        if (es->top == -1)
 1151|      0|            es->top = ERR_NUM_ERRORS - 1;
 1152|     12|    }
 1153|       |
 1154|  7.53k|    if (es->bottom == es->top)
 1155|  7.53k|        return 0;
 1156|      0|    es->err_flags[es->top] &= ~ERR_FLAG_MARK;
 1157|      0|    return 1;
 1158|  7.53k|}
err.c:err_fns_check:
  292|  67.5k|{
  293|  67.5k|    if (err_fns)
  294|  67.5k|        return;
  295|       |
  296|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  297|      1|    if (!err_fns)
  298|      1|        err_fns = &err_defaults;
  299|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  300|      1|}
err.c:int_err_get:
  358|  19.0k|{
  359|  19.0k|    LHASH_OF(ERR_STRING_DATA) *ret = NULL;
  360|       |
  361|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  362|  19.0k|    if (!int_error_hash && create) {
  363|      1|        CRYPTO_push_info("int_err_get (err.c)");
  364|      1|        int_error_hash = lh_ERR_STRING_DATA_new();
  365|      1|        CRYPTO_pop_info();
  366|      1|    }
  367|  19.0k|    if (int_error_hash)
  368|  19.0k|        ret = int_error_hash;
  369|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  370|       |
  371|  19.0k|    return ret;
  372|  19.0k|}
err.c:err_string_data_hash:
  339|  19.0k|{
  340|  19.0k|    unsigned long ret, l;
  341|       |
  342|  19.0k|    l = a->error;
  343|  19.0k|    ret = l ^ ERR_GET_LIB(l) ^ ERR_GET_FUNC(l);
  344|  19.0k|    return (ret ^ ret % 19 * 13);
  345|  19.0k|}
err.c:err_string_data_cmp:
  351|  17.2k|{
  352|  17.2k|    return (int)(a->error - b->error);
  353|  17.2k|}
err.c:int_err_get_item:
  385|     28|{
  386|     28|    ERR_STRING_DATA *p;
  387|     28|    LHASH_OF(ERR_STRING_DATA) *hash;
  388|       |
  389|     28|    err_fns_check();
  390|     28|    hash = ERRFN(err_get) (0);
  391|     28|    if (!hash)
  392|      0|        return NULL;
  393|       |
  394|     28|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  395|     28|    p = lh_ERR_STRING_DATA_retrieve(hash, d);
  396|     28|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  397|       |
  398|     28|    return p;
  399|     28|}
err.c:int_err_set_item:
  402|  19.0k|{
  403|  19.0k|    ERR_STRING_DATA *p;
  404|  19.0k|    LHASH_OF(ERR_STRING_DATA) *hash;
  405|       |
  406|  19.0k|    err_fns_check();
  407|  19.0k|    hash = ERRFN(err_get) (1);
  408|  19.0k|    if (!hash)
  409|      0|        return NULL;
  410|       |
  411|  19.0k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  412|  19.0k|    p = lh_ERR_STRING_DATA_insert(hash, d);
  413|  19.0k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  414|       |
  415|  19.0k|    return p;
  416|  19.0k|}
err.c:int_thread_get:
  450|  27.1k|{
  451|  27.1k|    LHASH_OF(ERR_STATE) *ret = NULL;
  452|       |
  453|  27.1k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  454|  27.1k|    if (!int_thread_hash && create) {
  455|  3.00k|        CRYPTO_push_info("int_thread_get (err.c)");
  456|  3.00k|        int_thread_hash = lh_ERR_STATE_new();
  457|  3.00k|        CRYPTO_pop_info();
  458|  3.00k|    }
  459|  27.1k|    if (int_thread_hash) {
  460|  21.0k|        int_thread_hash_references++;
  461|  21.0k|        ret = int_thread_hash;
  462|  21.0k|    }
  463|  27.1k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  464|  27.1k|    return ret;
  465|  27.1k|}
err.c:err_state_hash:
  436|  21.0k|{
  437|  21.0k|    return CRYPTO_THREADID_hash(&a->tid) * 13;
  438|  21.0k|}
err.c:err_state_cmp:
  443|  18.0k|{
  444|  18.0k|    return CRYPTO_THREADID_cmp(&a->tid, &b->tid);
  445|  18.0k|}
err.c:int_thread_release:
  468|  21.0k|{
  469|  21.0k|    int i;
  470|       |
  471|  21.0k|    if (hash == NULL || *hash == NULL)
  472|      0|        return;
  473|       |
  474|  21.0k|    i = CRYPTO_add(&int_thread_hash_references, -1, CRYPTO_LOCK_ERR);
  475|       |
  476|       |#ifdef REF_PRINT
  477|       |    fprintf(stderr, "%4d:%s\n", int_thread_hash_references, "ERR");
  478|       |#endif
  479|  21.0k|    if (i > 0)
  480|      0|        return;
  481|       |#ifdef REF_CHECK
  482|       |    if (i < 0) {
  483|       |        fprintf(stderr, "int_thread_release, bad reference count\n");
  484|       |        abort();                /* ok */
  485|       |    }
  486|       |#endif
  487|  21.0k|    *hash = NULL;
  488|  21.0k|}
err.c:int_thread_get_item:
  491|  18.0k|{
  492|  18.0k|    ERR_STATE *p;
  493|  18.0k|    LHASH_OF(ERR_STATE) *hash;
  494|       |
  495|  18.0k|    err_fns_check();
  496|  18.0k|    hash = ERRFN(thread_get) (0);
  497|  18.0k|    if (!hash)
  498|  3.00k|        return NULL;
  499|       |
  500|  15.0k|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  501|  15.0k|    p = lh_ERR_STATE_retrieve(hash, d);
  502|  15.0k|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  503|       |
  504|  15.0k|    ERRFN(thread_release) (&hash);
  505|  15.0k|    return p;
  506|  18.0k|}
err.c:int_thread_set_item:
  509|  3.00k|{
  510|  3.00k|    ERR_STATE *p;
  511|  3.00k|    LHASH_OF(ERR_STATE) *hash;
  512|       |
  513|  3.00k|    err_fns_check();
  514|  3.00k|    hash = ERRFN(thread_get) (1);
  515|  3.00k|    if (!hash)
  516|      0|        return NULL;
  517|       |
  518|  3.00k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  519|  3.00k|    p = lh_ERR_STATE_insert(hash, d);
  520|  3.00k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  521|       |
  522|  3.00k|    ERRFN(thread_release) (&hash);
  523|  3.00k|    return p;
  524|  3.00k|}
err.c:int_thread_del_item:
  527|  6.05k|{
  528|  6.05k|    ERR_STATE *p;
  529|  6.05k|    LHASH_OF(ERR_STATE) *hash;
  530|       |
  531|  6.05k|    err_fns_check();
  532|  6.05k|    hash = ERRFN(thread_get) (0);
  533|  6.05k|    if (!hash)
  534|  3.05k|        return;
  535|       |
  536|  3.00k|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  537|  3.00k|    p = lh_ERR_STATE_delete(hash, d);
  538|       |    /* make sure we don't leak memory */
  539|  3.00k|    if (int_thread_hash_references == 1
  540|  3.00k|        && int_thread_hash && lh_ERR_STATE_num_items(int_thread_hash) == 0) {
  541|  3.00k|        lh_ERR_STATE_free(int_thread_hash);
  542|  3.00k|        int_thread_hash = NULL;
  543|  3.00k|    }
  544|  3.00k|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  545|       |
  546|  3.00k|    ERRFN(thread_release) (&hash);
  547|  3.00k|    if (p)
  548|  3.00k|        ERR_STATE_free(p);
  549|  3.00k|}
err.c:int_err_get_next_lib:
  552|      9|{
  553|      9|    int ret;
  554|       |
  555|      9|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  556|      9|    ret = int_err_library_number++;
  557|      9|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  558|       |
  559|      9|    return ret;
  560|      9|}
err.c:build_SYS_str_reasons:
  578|     81|{
  579|       |    /* OPENSSL_malloc cannot be used here, use static storage instead */
  580|     81|    static char strerror_tab[NUM_SYS_STR_REASONS][LEN_SYS_STR_REASON];
  581|     81|    int i;
  582|     81|    static int init = 1;
  583|       |
  584|     81|    CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  585|     81|    if (!init) {
  586|     80|        CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  587|     80|        return;
  588|     80|    }
  589|       |
  590|      1|    CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  591|      1|    CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  592|      1|    if (!init) {
  593|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  594|      0|        return;
  595|      0|    }
  596|       |
  597|    128|    for (i = 1; i <= NUM_SYS_STR_REASONS; i++) {
  598|    127|        ERR_STRING_DATA *str = &SYS_str_reasons[i - 1];
  599|       |
  600|    127|        str->error = (unsigned long)i;
  601|    127|        if (str->string == NULL) {
  602|    127|            char (*dest)[LEN_SYS_STR_REASON] = &(strerror_tab[i - 1]);
  603|    127|            char *src = strerror(i);
  604|    127|            if (src != NULL) {
  605|    127|                strncpy(*dest, src, sizeof *dest);
  606|    127|                (*dest)[sizeof *dest - 1] = '\0';
  607|    127|                str->string = *dest;
  608|    127|            }
  609|    127|        }
  610|    127|        if (str->string == NULL)
  611|      0|            str->string = "unknown";
  612|    127|    }
  613|       |
  614|       |    /*
  615|       |     * Now we still have SYS_str_reasons[NUM_SYS_STR_REASONS] = {0, NULL}, as
  616|       |     * required by ERR_load_strings.
  617|       |     */
  618|       |
  619|      1|    init = 0;
  620|       |
  621|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  622|      1|}
err.c:err_load_strings:
  671|    404|{
  672|  19.4k|    while (str->error) {
  673|  19.0k|        if (lib)
  674|  11.4k|            str->error |= ERR_PACK(lib, 0, 0);
  675|  19.0k|        ERRFN(err_set_item) (str);
  676|  19.0k|        str++;
  677|  19.0k|    }
  678|    404|}
err.c:get_error_values:
  807|      2|{
  808|      2|    int i = 0;
  809|      2|    ERR_STATE *es;
  810|      2|    unsigned long ret;
  811|       |
  812|      2|    es = ERR_get_state();
  813|      2|    if (es == NULL)
  814|      0|        return 0;
  815|       |
  816|      2|    if (inc && top) {
  817|      0|        if (file)
  818|      0|            *file = "";
  819|      0|        if (line)
  820|      0|            *line = 0;
  821|      0|        if (data)
  822|      0|            *data = "";
  823|      0|        if (flags)
  824|      0|            *flags = 0;
  825|       |
  826|      0|        return ERR_R_INTERNAL_ERROR;
  827|      0|    }
  828|       |
  829|      2|    if (es->bottom == es->top)
  830|      0|        return 0;
  831|      2|    if (top)
  832|      2|        i = es->top;            /* last error */
  833|      0|    else
  834|      0|        i = (es->bottom + 1) % ERR_NUM_ERRORS; /* first error */
  835|       |
  836|      2|    ret = es->err_buffer[i];
  837|      2|    if (inc) {
  838|      0|        es->bottom = i;
  839|      0|        es->err_buffer[i] = 0;
  840|      0|    }
  841|       |
  842|      2|    if ((file != NULL) && (line != NULL)) {
  843|      0|        if (es->err_file[i] == NULL) {
  844|      0|            *file = "NA";
  845|      0|            if (line != NULL)
  846|      0|                *line = 0;
  847|      0|        } else {
  848|      0|            *file = es->err_file[i];
  849|      0|            if (line != NULL)
  850|      0|                *line = es->err_line[i];
  851|      0|        }
  852|      0|    }
  853|       |
  854|      2|    if (data == NULL) {
  855|      2|        if (inc) {
  856|      0|            err_clear_data(es, i);
  857|      0|        }
  858|      2|    } else {
  859|      0|        if (es->err_data[i] == NULL) {
  860|      0|            *data = "";
  861|      0|            if (flags != NULL)
  862|      0|                *flags = 0;
  863|      0|        } else {
  864|      0|            *data = es->err_data[i];
  865|      0|            if (flags != NULL)
  866|      0|                *flags = es->err_data_flags[i];
  867|      0|        }
  868|      0|    }
  869|      2|    return ret;
  870|      2|}
err.c:ERR_STATE_free:
  646|  3.00k|{
  647|  3.00k|    int i;
  648|       |
  649|  3.00k|    if (s == NULL)
  650|      0|        return;
  651|       |
  652|  51.0k|    for (i = 0; i < ERR_NUM_ERRORS; i++) {
  653|  48.0k|        err_clear_data(s, i);
  654|  48.0k|    }
  655|  3.00k|    OPENSSL_free(s);
  656|  3.00k|}

ERR_load_crypto_strings:
  112|      1|{
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|    ERR_load_ERR_strings();     /* include error strings for SYSerr */
  115|      1|    ERR_load_BN_strings();
  116|      1|# ifndef OPENSSL_NO_RSA
  117|      1|    ERR_load_RSA_strings();
  118|      1|# endif
  119|      1|# ifndef OPENSSL_NO_DH
  120|      1|    ERR_load_DH_strings();
  121|      1|# endif
  122|      1|    ERR_load_EVP_strings();
  123|      1|    ERR_load_BUF_strings();
  124|      1|    ERR_load_OBJ_strings();
  125|      1|    ERR_load_PEM_strings();
  126|      1|# ifndef OPENSSL_NO_DSA
  127|      1|    ERR_load_DSA_strings();
  128|      1|# endif
  129|      1|    ERR_load_X509_strings();
  130|      1|    ERR_load_ASN1_strings();
  131|      1|    ERR_load_CONF_strings();
  132|      1|    ERR_load_CRYPTO_strings();
  133|      1|# ifndef OPENSSL_NO_COMP
  134|      1|    ERR_load_COMP_strings();
  135|      1|# endif
  136|      1|# ifndef OPENSSL_NO_EC
  137|      1|    ERR_load_EC_strings();
  138|      1|# endif
  139|      1|# ifndef OPENSSL_NO_ECDSA
  140|      1|    ERR_load_ECDSA_strings();
  141|      1|# endif
  142|      1|# ifndef OPENSSL_NO_ECDH
  143|      1|    ERR_load_ECDH_strings();
  144|      1|# endif
  145|       |    /* skip ERR_load_SSL_strings() because it is not in this library */
  146|      1|    ERR_load_BIO_strings();
  147|      1|    ERR_load_PKCS7_strings();
  148|      1|    ERR_load_X509V3_strings();
  149|      1|    ERR_load_PKCS12_strings();
  150|      1|    ERR_load_RAND_strings();
  151|      1|    ERR_load_DSO_strings();
  152|      1|    ERR_load_TS_strings();
  153|      1|# ifndef OPENSSL_NO_ENGINE
  154|      1|    ERR_load_ENGINE_strings();
  155|      1|# endif
  156|      1|    ERR_load_OCSP_strings();
  157|      1|    ERR_load_UI_strings();
  158|       |# ifdef OPENSSL_FIPS
  159|       |    ERR_load_FIPS_strings();
  160|       |# endif
  161|      1|# ifndef OPENSSL_NO_CMS
  162|      1|    ERR_load_CMS_strings();
  163|      1|# endif
  164|       |# ifndef OPENSSL_NO_JPAKE
  165|       |    ERR_load_JPAKE_strings();
  166|       |# endif
  167|      1|#endif
  168|      1|}

EVP_des_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_idea_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb1:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_des_ede3_cfb8:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_cfb128:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_seed_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cbc:
  148|      2|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc2_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_bf_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_cast5_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cbc:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_cfb64:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ofb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
EVP_rc5_32_12_16_ecb:
  148|      1|const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }

OPENSSL_add_all_algorithms_noconf:
   76|      1|{
   77|       |    /*
   78|       |     * For the moment OPENSSL_cpuid_setup does something
   79|       |     * only on IA-32, but we reserve the option for all
   80|       |     * platforms...
   81|       |     */
   82|      1|    OPENSSL_cpuid_setup();
   83|      1|    OpenSSL_add_all_ciphers();
   84|      1|    OpenSSL_add_all_digests();
   85|      1|}

OpenSSL_add_all_ciphers:
   66|      1|{
   67|       |
   68|      1|#ifndef OPENSSL_NO_DES
   69|      1|    EVP_add_cipher(EVP_des_cfb());
   70|      1|    EVP_add_cipher(EVP_des_cfb1());
   71|      1|    EVP_add_cipher(EVP_des_cfb8());
   72|      1|    EVP_add_cipher(EVP_des_ede_cfb());
   73|      1|    EVP_add_cipher(EVP_des_ede3_cfb());
   74|      1|    EVP_add_cipher(EVP_des_ede3_cfb1());
   75|      1|    EVP_add_cipher(EVP_des_ede3_cfb8());
   76|       |
   77|      1|    EVP_add_cipher(EVP_des_ofb());
   78|      1|    EVP_add_cipher(EVP_des_ede_ofb());
   79|      1|    EVP_add_cipher(EVP_des_ede3_ofb());
   80|       |
   81|      1|    EVP_add_cipher(EVP_desx_cbc());
   82|      1|    EVP_add_cipher_alias(SN_desx_cbc, "DESX");
   83|      1|    EVP_add_cipher_alias(SN_desx_cbc, "desx");
   84|       |
   85|      1|    EVP_add_cipher(EVP_des_cbc());
   86|      1|    EVP_add_cipher_alias(SN_des_cbc, "DES");
   87|      1|    EVP_add_cipher_alias(SN_des_cbc, "des");
   88|      1|    EVP_add_cipher(EVP_des_ede_cbc());
   89|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   90|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "DES3");
   91|      1|    EVP_add_cipher_alias(SN_des_ede3_cbc, "des3");
   92|       |
   93|      1|    EVP_add_cipher(EVP_des_ecb());
   94|      1|    EVP_add_cipher(EVP_des_ede());
   95|      1|    EVP_add_cipher(EVP_des_ede3());
   96|      1|    EVP_add_cipher(EVP_des_ede3_wrap());
   97|      1|#endif
   98|       |
   99|      1|#ifndef OPENSSL_NO_RC4
  100|      1|    EVP_add_cipher(EVP_rc4());
  101|      1|    EVP_add_cipher(EVP_rc4_40());
  102|      1|# ifndef OPENSSL_NO_MD5
  103|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
  104|      1|# endif
  105|      1|#endif
  106|       |
  107|      1|#ifndef OPENSSL_NO_IDEA
  108|      1|    EVP_add_cipher(EVP_idea_ecb());
  109|      1|    EVP_add_cipher(EVP_idea_cfb());
  110|      1|    EVP_add_cipher(EVP_idea_ofb());
  111|      1|    EVP_add_cipher(EVP_idea_cbc());
  112|      1|    EVP_add_cipher_alias(SN_idea_cbc, "IDEA");
  113|      1|    EVP_add_cipher_alias(SN_idea_cbc, "idea");
  114|      1|#endif
  115|       |
  116|      1|#ifndef OPENSSL_NO_SEED
  117|      1|    EVP_add_cipher(EVP_seed_ecb());
  118|      1|    EVP_add_cipher(EVP_seed_cfb());
  119|      1|    EVP_add_cipher(EVP_seed_ofb());
  120|      1|    EVP_add_cipher(EVP_seed_cbc());
  121|      1|    EVP_add_cipher_alias(SN_seed_cbc, "SEED");
  122|      1|    EVP_add_cipher_alias(SN_seed_cbc, "seed");
  123|      1|#endif
  124|       |
  125|      1|#ifndef OPENSSL_NO_RC2
  126|      1|    EVP_add_cipher(EVP_rc2_ecb());
  127|      1|    EVP_add_cipher(EVP_rc2_cfb());
  128|      1|    EVP_add_cipher(EVP_rc2_ofb());
  129|      1|    EVP_add_cipher(EVP_rc2_cbc());
  130|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
  131|      1|    EVP_add_cipher(EVP_rc2_64_cbc());
  132|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "RC2");
  133|      1|    EVP_add_cipher_alias(SN_rc2_cbc, "rc2");
  134|      1|#endif
  135|       |
  136|      1|#ifndef OPENSSL_NO_BF
  137|      1|    EVP_add_cipher(EVP_bf_ecb());
  138|      1|    EVP_add_cipher(EVP_bf_cfb());
  139|      1|    EVP_add_cipher(EVP_bf_ofb());
  140|      1|    EVP_add_cipher(EVP_bf_cbc());
  141|      1|    EVP_add_cipher_alias(SN_bf_cbc, "BF");
  142|      1|    EVP_add_cipher_alias(SN_bf_cbc, "bf");
  143|      1|    EVP_add_cipher_alias(SN_bf_cbc, "blowfish");
  144|      1|#endif
  145|       |
  146|      1|#ifndef OPENSSL_NO_CAST
  147|      1|    EVP_add_cipher(EVP_cast5_ecb());
  148|      1|    EVP_add_cipher(EVP_cast5_cfb());
  149|      1|    EVP_add_cipher(EVP_cast5_ofb());
  150|      1|    EVP_add_cipher(EVP_cast5_cbc());
  151|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST");
  152|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast");
  153|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "CAST-cbc");
  154|      1|    EVP_add_cipher_alias(SN_cast5_cbc, "cast-cbc");
  155|      1|#endif
  156|       |
  157|      1|#ifndef OPENSSL_NO_RC5
  158|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ecb());
  159|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cfb());
  160|      1|    EVP_add_cipher(EVP_rc5_32_12_16_ofb());
  161|      1|    EVP_add_cipher(EVP_rc5_32_12_16_cbc());
  162|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "rc5");
  163|      1|    EVP_add_cipher_alias(SN_rc5_cbc, "RC5");
  164|      1|#endif
  165|       |
  166|      1|#ifndef OPENSSL_NO_AES
  167|      1|    EVP_add_cipher(EVP_aes_128_ecb());
  168|      1|    EVP_add_cipher(EVP_aes_128_cbc());
  169|      1|    EVP_add_cipher(EVP_aes_128_cfb());
  170|      1|    EVP_add_cipher(EVP_aes_128_cfb1());
  171|      1|    EVP_add_cipher(EVP_aes_128_cfb8());
  172|      1|    EVP_add_cipher(EVP_aes_128_ofb());
  173|      1|    EVP_add_cipher(EVP_aes_128_ctr());
  174|      1|    EVP_add_cipher(EVP_aes_128_gcm());
  175|      1|    EVP_add_cipher(EVP_aes_128_xts());
  176|      1|    EVP_add_cipher(EVP_aes_128_ccm());
  177|      1|    EVP_add_cipher(EVP_aes_128_wrap());
  178|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "AES128");
  179|      1|    EVP_add_cipher_alias(SN_aes_128_cbc, "aes128");
  180|      1|    EVP_add_cipher(EVP_aes_192_ecb());
  181|      1|    EVP_add_cipher(EVP_aes_192_cbc());
  182|      1|    EVP_add_cipher(EVP_aes_192_cfb());
  183|      1|    EVP_add_cipher(EVP_aes_192_cfb1());
  184|      1|    EVP_add_cipher(EVP_aes_192_cfb8());
  185|      1|    EVP_add_cipher(EVP_aes_192_ofb());
  186|      1|    EVP_add_cipher(EVP_aes_192_ctr());
  187|      1|    EVP_add_cipher(EVP_aes_192_gcm());
  188|      1|    EVP_add_cipher(EVP_aes_192_ccm());
  189|      1|    EVP_add_cipher(EVP_aes_192_wrap());
  190|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "AES192");
  191|      1|    EVP_add_cipher_alias(SN_aes_192_cbc, "aes192");
  192|      1|    EVP_add_cipher(EVP_aes_256_ecb());
  193|      1|    EVP_add_cipher(EVP_aes_256_cbc());
  194|      1|    EVP_add_cipher(EVP_aes_256_cfb());
  195|      1|    EVP_add_cipher(EVP_aes_256_cfb1());
  196|      1|    EVP_add_cipher(EVP_aes_256_cfb8());
  197|      1|    EVP_add_cipher(EVP_aes_256_ofb());
  198|      1|    EVP_add_cipher(EVP_aes_256_ctr());
  199|      1|    EVP_add_cipher(EVP_aes_256_gcm());
  200|      1|    EVP_add_cipher(EVP_aes_256_xts());
  201|      1|    EVP_add_cipher(EVP_aes_256_ccm());
  202|      1|    EVP_add_cipher(EVP_aes_256_wrap());
  203|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "AES256");
  204|      1|    EVP_add_cipher_alias(SN_aes_256_cbc, "aes256");
  205|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
  206|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
  207|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
  208|      1|# endif
  209|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
  210|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  211|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  212|      1|# endif
  213|      1|#endif
  214|       |
  215|      1|#ifndef OPENSSL_NO_CAMELLIA
  216|      1|    EVP_add_cipher(EVP_camellia_128_ecb());
  217|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  218|      1|    EVP_add_cipher(EVP_camellia_128_cfb());
  219|      1|    EVP_add_cipher(EVP_camellia_128_cfb1());
  220|      1|    EVP_add_cipher(EVP_camellia_128_cfb8());
  221|      1|    EVP_add_cipher(EVP_camellia_128_ofb());
  222|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "CAMELLIA128");
  223|      1|    EVP_add_cipher_alias(SN_camellia_128_cbc, "camellia128");
  224|      1|    EVP_add_cipher(EVP_camellia_192_ecb());
  225|      1|    EVP_add_cipher(EVP_camellia_192_cbc());
  226|      1|    EVP_add_cipher(EVP_camellia_192_cfb());
  227|      1|    EVP_add_cipher(EVP_camellia_192_cfb1());
  228|      1|    EVP_add_cipher(EVP_camellia_192_cfb8());
  229|      1|    EVP_add_cipher(EVP_camellia_192_ofb());
  230|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "CAMELLIA192");
  231|      1|    EVP_add_cipher_alias(SN_camellia_192_cbc, "camellia192");
  232|      1|    EVP_add_cipher(EVP_camellia_256_ecb());
  233|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  234|      1|    EVP_add_cipher(EVP_camellia_256_cfb());
  235|      1|    EVP_add_cipher(EVP_camellia_256_cfb1());
  236|      1|    EVP_add_cipher(EVP_camellia_256_cfb8());
  237|      1|    EVP_add_cipher(EVP_camellia_256_ofb());
  238|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "CAMELLIA256");
  239|      1|    EVP_add_cipher_alias(SN_camellia_256_cbc, "camellia256");
  240|      1|#endif
  241|      1|}

OpenSSL_add_all_digests:
   66|      1|{
   67|      1|#ifndef OPENSSL_NO_MD4
   68|      1|    EVP_add_digest(EVP_md4());
   69|      1|#endif
   70|      1|#ifndef OPENSSL_NO_MD5
   71|      1|    EVP_add_digest(EVP_md5());
   72|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
   73|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
   74|      1|#endif
   75|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA0)
   76|      1|    EVP_add_digest(EVP_sha());
   77|      1|# ifndef OPENSSL_NO_DSA
   78|      1|    EVP_add_digest(EVP_dss());
   79|      1|# endif
   80|      1|#endif
   81|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   82|      1|    EVP_add_digest(EVP_sha1());
   83|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
   84|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
   85|      1|# ifndef OPENSSL_NO_DSA
   86|      1|    EVP_add_digest(EVP_dss1());
   87|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
   88|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
   89|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
   90|      1|# endif
   91|      1|# ifndef OPENSSL_NO_ECDSA
   92|      1|    EVP_add_digest(EVP_ecdsa());
   93|      1|# endif
   94|      1|#endif
   95|      1|#if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)
   96|      1|    EVP_add_digest(EVP_mdc2());
   97|      1|#endif
   98|      1|#ifndef OPENSSL_NO_RIPEMD
   99|      1|    EVP_add_digest(EVP_ripemd160());
  100|      1|    EVP_add_digest_alias(SN_ripemd160, "ripemd");
  101|      1|    EVP_add_digest_alias(SN_ripemd160, "rmd160");
  102|      1|#endif
  103|      1|#ifndef OPENSSL_NO_SHA256
  104|      1|    EVP_add_digest(EVP_sha224());
  105|      1|    EVP_add_digest(EVP_sha256());
  106|      1|#endif
  107|      1|#ifndef OPENSSL_NO_SHA512
  108|      1|    EVP_add_digest(EVP_sha384());
  109|      1|    EVP_add_digest(EVP_sha512());
  110|      1|#endif
  111|      1|#ifndef OPENSSL_NO_WHIRLPOOL
  112|      1|    EVP_add_digest(EVP_whirlpool());
  113|      1|#endif
  114|      1|}

EVP_MD_CTX_init:
  126|  3.79k|{
  127|  3.79k|    memset(ctx, '\0', sizeof *ctx);
  128|  3.79k|}
EVP_DigestInit_ex:
  147|  7.52k|{
  148|  7.52k|    EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  149|       |#ifdef OPENSSL_FIPS
  150|       |    /* If FIPS mode switch to approved implementation if possible */
  151|       |    if (FIPS_mode()) {
  152|       |        const EVP_MD *fipsmd;
  153|       |        if (type) {
  154|       |            fipsmd = evp_get_fips_md(type);
  155|       |            if (fipsmd)
  156|       |                type = fipsmd;
  157|       |        }
  158|       |    }
  159|       |#endif
  160|  7.52k|#ifndef OPENSSL_NO_ENGINE
  161|       |    /*
  162|       |     * Whether it's nice or not, "Inits" can be used on "Final"'d contexts so
  163|       |     * this context may already have an ENGINE! Try to avoid releasing the
  164|       |     * previous handle, re-querying for an ENGINE, and having a
  165|       |     * reinitialisation, when it may all be unecessary.
  166|       |     */
  167|  7.52k|    if (ctx->engine && ctx->digest && (!type ||
  168|      0|                                       (type
  169|      0|                                        && (type->type ==
  170|      0|                                            ctx->digest->type))))
  171|      0|        goto skip_to_init;
  172|  7.52k|    if (type) {
  173|       |        /*
  174|       |         * Ensure an ENGINE left lying around from last time is cleared (the
  175|       |         * previous check attempted to avoid this if the same ENGINE and
  176|       |         * EVP_MD could be used).
  177|       |         */
  178|  7.52k|        if (ctx->engine)
  179|      0|            ENGINE_finish(ctx->engine);
  180|  7.52k|        if (impl) {
  181|      0|            if (!ENGINE_init(impl)) {
  182|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  183|      0|                return 0;
  184|      0|            }
  185|      0|        } else
  186|       |            /* Ask if an ENGINE is reserved for this job */
  187|  7.52k|            impl = ENGINE_get_digest_engine(type->type);
  188|  7.52k|        if (impl) {
  189|       |            /* There's an ENGINE for this job ... (apparently) */
  190|      0|            const EVP_MD *d = ENGINE_get_digest(impl, type->type);
  191|      0|            if (!d) {
  192|       |                /* Same comment from evp_enc.c */
  193|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_INITIALIZATION_ERROR);
  194|      0|                ENGINE_finish(impl);
  195|      0|                return 0;
  196|      0|            }
  197|       |            /* We'll use the ENGINE's private digest definition */
  198|      0|            type = d;
  199|       |            /*
  200|       |             * Store the ENGINE functional reference so we know 'type' came
  201|       |             * from an ENGINE and we need to release it when done.
  202|       |             */
  203|      0|            ctx->engine = impl;
  204|      0|        } else
  205|  7.52k|            ctx->engine = NULL;
  206|  7.52k|    } else {
  207|      0|        if (!ctx->digest) {
  208|      0|            EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_NO_DIGEST_SET);
  209|      0|            return 0;
  210|      0|        }
  211|      0|        type = ctx->digest;
  212|      0|    }
  213|  7.52k|#endif
  214|  7.52k|    if (ctx->digest != type) {
  215|  3.79k|        if (ctx->digest && ctx->digest->ctx_size) {
  216|      0|            OPENSSL_free(ctx->md_data);
  217|      0|            ctx->md_data = NULL;
  218|      0|        }
  219|  3.79k|        ctx->digest = type;
  220|  3.79k|        if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size) {
  221|  3.79k|            ctx->update = type->update;
  222|  3.79k|            ctx->md_data = OPENSSL_malloc(type->ctx_size);
  223|  3.79k|            if (ctx->md_data == NULL) {
  224|      0|                EVPerr(EVP_F_EVP_DIGESTINIT_EX, ERR_R_MALLOC_FAILURE);
  225|      0|                return 0;
  226|      0|            }
  227|  3.79k|        }
  228|  3.79k|    }
  229|  7.52k|#ifndef OPENSSL_NO_ENGINE
  230|  7.52k| skip_to_init:
  231|  7.52k|#endif
  232|  7.52k|    if (ctx->pctx) {
  233|      0|        int r;
  234|      0|        r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
  235|      0|                              EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
  236|      0|        if (r <= 0 && (r != -2))
  237|      0|            return 0;
  238|      0|    }
  239|  7.52k|    if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
  240|      0|        return 1;
  241|       |#ifdef OPENSSL_FIPS
  242|       |    if (FIPS_mode()) {
  243|       |        if (FIPS_digestinit(ctx, type))
  244|       |            return 1;
  245|       |        OPENSSL_free(ctx->md_data);
  246|       |        ctx->md_data = NULL;
  247|       |        return 0;
  248|       |    }
  249|       |#endif
  250|  7.52k|    return ctx->digest->init(ctx);
  251|  7.52k|}
EVP_DigestUpdate:
  254|  30.1k|{
  255|       |#ifdef OPENSSL_FIPS
  256|       |    if (FIPS_mode())
  257|       |        return FIPS_digestupdate(ctx, data, count);
  258|       |#endif
  259|  30.1k|    return ctx->update(ctx, data, count);
  260|  30.1k|}
EVP_DigestFinal_ex:
  273|  7.52k|{
  274|  7.52k|    int ret;
  275|       |#ifdef OPENSSL_FIPS
  276|       |    if (FIPS_mode())
  277|       |        return FIPS_digestfinal(ctx, md, size);
  278|       |#endif
  279|       |
  280|  7.52k|    OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
  281|  7.52k|    ret = ctx->digest->final(ctx, md);
  282|  7.52k|    if (size != NULL)
  283|      0|        *size = ctx->digest->md_size;
  284|  7.52k|    if (ctx->digest->cleanup) {
  285|      0|        ctx->digest->cleanup(ctx);
  286|      0|        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
  287|      0|    }
  288|  7.52k|    OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  289|  7.52k|    return ret;
  290|  7.52k|}
EVP_MD_CTX_cleanup:
  377|  3.79k|{
  378|  3.79k|#ifndef OPENSSL_FIPS
  379|       |    /*
  380|       |     * Don't assume ctx->md_data was cleaned in EVP_Digest_Final, because
  381|       |     * sometimes only copies of the context are ever finalised.
  382|       |     */
  383|  3.79k|    if (ctx->digest && ctx->digest->cleanup
  384|  3.79k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_CLEANED))
  385|      0|        ctx->digest->cleanup(ctx);
  386|  3.79k|    if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
  387|  3.79k|        && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
  388|  3.79k|        OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
  389|  3.79k|        OPENSSL_free(ctx->md_data);
  390|  3.79k|    }
  391|  3.79k|#endif
  392|  3.79k|    if (ctx->pctx)
  393|      0|        EVP_PKEY_CTX_free(ctx->pctx);
  394|  3.79k|#ifndef OPENSSL_NO_ENGINE
  395|  3.79k|    if (ctx->engine)
  396|       |        /*
  397|       |         * The EVP_MD we used belongs to an ENGINE, release the functional
  398|       |         * reference we held for this reason.
  399|       |         */
  400|      0|        ENGINE_finish(ctx->engine);
  401|  3.79k|#endif
  402|       |#ifdef OPENSSL_FIPS
  403|       |    FIPS_md_ctx_cleanup(ctx);
  404|       |#endif
  405|  3.79k|    memset(ctx, '\0', sizeof *ctx);
  406|       |
  407|  3.79k|    return 1;
  408|  3.79k|}

EVP_aes_128_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cbc:
  459|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ecb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ofb:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb128:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb1:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_cfb8:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ctr:
  459|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  460|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_gcm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_gcm:
  481|      2|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      2|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_xts:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_192_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_256_ccm:
  481|      1|const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
  482|      1|{ return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
EVP_aes_128_wrap:
 2001|      1|{
 2002|      1|    return &aes_128_wrap;
 2003|      1|}
EVP_aes_192_wrap:
 2015|      1|{
 2016|      1|    return &aes_192_wrap;
 2017|      1|}
EVP_aes_256_wrap:
 2029|      1|{
 2030|      1|    return &aes_256_wrap;
 2031|      1|}

EVP_aes_128_cbc_hmac_sha1:
  994|      2|{
  995|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
  996|      2|            &aesni_128_cbc_hmac_sha1_cipher : NULL);
  997|      2|}
EVP_aes_256_cbc_hmac_sha1:
 1000|      2|{
 1001|      2|    return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
 1002|      2|            &aesni_256_cbc_hmac_sha1_cipher : NULL);
 1003|      2|}

EVP_aes_128_cbc_hmac_sha256:
  973|      2|{
  974|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  975|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  976|      0|            &aesni_128_cbc_hmac_sha256_cipher : NULL);
  977|      2|}
EVP_aes_256_cbc_hmac_sha256:
  980|      2|{
  981|      2|    return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
  982|      2|            aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
  983|      0|            &aesni_256_cbc_hmac_sha256_cipher : NULL);
  984|      2|}

EVP_camellia_128_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_128_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cbc:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_192_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cbc:
  240|      2|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      2|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ecb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_ofb:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb128:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb1:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }
EVP_camellia_256_cfb8:
  240|      1|const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
  241|      1|{ return &camellia_##keylen##_##mode; }

EVP_des_ede:
  378|      1|{
  379|      1|    return &des_ede_ecb;
  380|      1|}
EVP_des_ede3:
  383|      1|{
  384|      1|    return &des_ede3_ecb;
  385|      1|}
EVP_des_ede3_wrap:
  492|      1|{
  493|      1|    return &des3_wrap;
  494|      1|}

EVP_rc2_64_cbc:
  123|      1|{
  124|      1|    return (&r2_64_cbc_cipher);
  125|      1|}
EVP_rc2_40_cbc:
  128|      2|{
  129|      2|    return (&r2_40_cbc_cipher);
  130|      2|}

EVP_rc4:
  111|      2|{
  112|      2|    return (&r4_cipher);
  113|      2|}
EVP_rc4_40:
  116|      1|{
  117|      1|    return (&r4_40_cipher);
  118|      1|}

EVP_rc4_hmac_md5:
  309|      2|{
  310|      2|    return (&r4_hmac_md5_cipher);
  311|      2|}

EVP_desx_cbc:
   97|      1|{
   98|      1|    return (&d_xcbc_cipher);
   99|      1|}

EVP_add_alg_module:
  116|      1|{
  117|      1|    CONF_module_add("alg_section", alg_module_init, 0);
  118|      1|}

ERR_load_EVP_strings:
  247|      1|{
  248|      1|#ifndef OPENSSL_NO_ERR
  249|       |
  250|      1|    if (ERR_func_error_string(EVP_str_functs[0].error) == NULL) {
  251|      1|        ERR_load_strings(0, EVP_str_functs);
  252|      1|        ERR_load_strings(0, EVP_str_reasons);
  253|      1|    }
  254|      1|#endif
  255|      1|}

EVP_MD_size:
  311|      5|{
  312|      5|    if (!md) {
  313|      0|        EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
  314|      0|        return -1;
  315|      0|    }
  316|      5|    return md->md_size;
  317|      5|}
EVP_MD_CTX_clear_flags:
  369|  7.52k|{
  370|  7.52k|    ctx->flags &= ~flags;
  371|  7.52k|}
EVP_MD_CTX_test_flags:
  374|  3.79k|{
  375|  3.79k|    return (ctx->flags & flags);
  376|  3.79k|}

EVP_dss:
  101|      1|{
  102|      1|    return (&dsa_md);
  103|      1|}

EVP_dss1:
  102|      2|{
  103|      2|    return (&dss1_md);
  104|      2|}

EVP_ecdsa:
  151|      2|{
  152|      2|    return (&ecdsa_md);
  153|      2|}

EVP_md4:
  105|      1|{
  106|      1|    return (&md4_md);
  107|      1|}

EVP_md5:
  104|      2|{
  105|      2|    return (&md5_md);
  106|      2|}

EVP_mdc2:
  105|      1|{
  106|      1|    return (&mdc2_md);
  107|      1|}

EVP_ripemd160:
  104|      1|{
  105|      1|    return (&ripemd160_md);
  106|      1|}

EVP_sha:
  103|      1|{
  104|      1|    return (&sha_md);
  105|      1|}

EVP_sha1:
  102|  7.53k|{
  103|  7.53k|    return (&sha1_md);
  104|  7.53k|}
EVP_sha224:
  149|      2|{
  150|      2|    return (&sha224_md);
  151|      2|}
EVP_sha256:
  169|      2|{
  170|      2|    return (&sha256_md);
  171|      2|}
EVP_sha384:
  212|      2|{
  213|      2|    return (&sha384_md);
  214|      2|}
EVP_sha512:
  232|      2|{
  233|      2|    return (&sha512_md);
  234|      2|}
m_sha1.c:init:
   72|  7.52k|{
   73|  7.52k|    return SHA1_Init(ctx->md_data);
   74|  7.52k|}
m_sha1.c:update:
   77|  30.1k|{
   78|  30.1k|    return SHA1_Update(ctx->md_data, data, count);
   79|  30.1k|}
m_sha1.c:final:
   82|  7.52k|{
   83|  7.52k|    return SHA1_Final(md, ctx->md_data);
   84|  7.52k|}

EVP_whirlpool:
   45|      1|{
   46|      1|    return (&whirlpool_md);
   47|      1|}

EVP_add_cipher:
   66|    122|{
   67|    122|    int r;
   68|       |
   69|    122|    if (c == NULL)
   70|      4|        return 0;
   71|       |
   72|    118|    OPENSSL_init();
   73|       |
   74|    118|    r = OBJ_NAME_add(OBJ_nid2sn(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   75|    118|                     (const char *)c);
   76|    118|    if (r == 0)
   77|      0|        return (0);
   78|    118|    check_defer(c->nid);
   79|    118|    r = OBJ_NAME_add(OBJ_nid2ln(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
   80|    118|                     (const char *)c);
   81|    118|    return (r);
   82|    118|}
EVP_add_digest:
   85|     24|{
   86|     24|    int r;
   87|     24|    const char *name;
   88|     24|    OPENSSL_init();
   89|       |
   90|     24|    name = OBJ_nid2sn(md->type);
   91|     24|    r = OBJ_NAME_add(name, OBJ_NAME_TYPE_MD_METH, (const char *)md);
   92|     24|    if (r == 0)
   93|      0|        return (0);
   94|     24|    check_defer(md->type);
   95|     24|    r = OBJ_NAME_add(OBJ_nid2ln(md->type), OBJ_NAME_TYPE_MD_METH,
   96|     24|                     (const char *)md);
   97|     24|    if (r == 0)
   98|      0|        return (0);
   99|       |
  100|     24|    if (md->pkey_type && md->type != md->pkey_type) {
  101|     18|        r = OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
  102|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  103|     18|        if (r == 0)
  104|      0|            return (0);
  105|     18|        check_defer(md->pkey_type);
  106|     18|        r = OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
  107|     18|                         OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, name);
  108|     18|    }
  109|     24|    return (r);
  110|     24|}
EVP_get_cipherbyname:
  113|     13|{
  114|     13|    const EVP_CIPHER *cp;
  115|       |
  116|     13|    cp = (const EVP_CIPHER *)OBJ_NAME_get(name, OBJ_NAME_TYPE_CIPHER_METH);
  117|     13|    return (cp);
  118|     13|}
EVP_get_digestbyname:
  121|      6|{
  122|      6|    const EVP_MD *cp;
  123|       |
  124|      6|    cp = (const EVP_MD *)OBJ_NAME_get(name, OBJ_NAME_TYPE_MD_METH);
  125|      6|    return (cp);
  126|      6|}

EVP_PKEY_meth_new:
  201|      3|{
  202|      3|    EVP_PKEY_METHOD *pmeth;
  203|       |
  204|      3|    pmeth = OPENSSL_malloc(sizeof(EVP_PKEY_METHOD));
  205|      3|    if (!pmeth)
  206|      0|        return NULL;
  207|       |
  208|      3|    memset(pmeth, 0, sizeof(EVP_PKEY_METHOD));
  209|       |
  210|      3|    pmeth->pkey_id = id;
  211|      3|    pmeth->flags = flags | EVP_PKEY_FLAG_DYNAMIC;
  212|      3|    return pmeth;
  213|      3|}
EVP_PKEY_meth_set_init:
  450|      3|{
  451|      3|    pmeth->init = init;
  452|      3|}
EVP_PKEY_meth_set_copy:
  457|      3|{
  458|      3|    pmeth->copy = copy;
  459|      3|}
EVP_PKEY_meth_set_cleanup:
  463|      3|{
  464|      3|    pmeth->cleanup = cleanup;
  465|      3|}
EVP_PKEY_meth_set_paramgen:
  471|      2|{
  472|      2|    pmeth->paramgen_init = paramgen_init;
  473|      2|    pmeth->paramgen = paramgen;
  474|      2|}
EVP_PKEY_meth_set_keygen:
  480|      3|{
  481|      3|    pmeth->keygen_init = keygen_init;
  482|      3|    pmeth->keygen = keygen;
  483|      3|}
EVP_PKEY_meth_set_sign:
  491|      2|{
  492|      2|    pmeth->sign_init = sign_init;
  493|      2|    pmeth->sign = sign;
  494|      2|}
EVP_PKEY_meth_set_verify:
  503|      2|{
  504|      2|    pmeth->verify_init = verify_init;
  505|      2|    pmeth->verify = verify;
  506|      2|}
EVP_PKEY_meth_set_signctx:
  531|      1|{
  532|      1|    pmeth->signctx_init = signctx_init;
  533|      1|    pmeth->signctx = signctx;
  534|      1|}
EVP_PKEY_meth_set_encrypt:
  555|      2|{
  556|      2|    pmeth->encrypt_init = encrypt_init;
  557|      2|    pmeth->encrypt = encryptfn;
  558|      2|}
EVP_PKEY_meth_set_decrypt:
  567|      2|{
  568|      2|    pmeth->decrypt_init = decrypt_init;
  569|      2|    pmeth->decrypt = decrypt;
  570|      2|}
EVP_PKEY_meth_set_derive:
  577|      2|{
  578|      2|    pmeth->derive_init = derive_init;
  579|      2|    pmeth->derive = derive;
  580|      2|}
EVP_PKEY_meth_set_ctrl:
  588|      3|{
  589|      3|    pmeth->ctrl = ctrl;
  590|      3|    pmeth->ctrl_str = ctrl_str;
  591|      3|}

CRYPTO_get_ex_new_index:
  581|      4|{
  582|      4|    int ret = -1;
  583|       |
  584|      4|    IMPL_CHECK
  585|      4|        ret = EX_IMPL(get_new_index) (class_index,
  586|      4|                                      argl, argp, new_func, dup_func,
  587|      4|                                      free_func);
  588|      4|    return ret;
  589|      4|}
CRYPTO_new_ex_data:
  596|     11|{
  597|     11|    IMPL_CHECK return EX_IMPL(new_ex_data) (class_index, obj, ad);
  598|     11|}
ex_data.c:impl_check:
  200|      1|{
  201|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  202|      1|    if (!impl)
  203|      1|        impl = &impl_default;
  204|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  205|      1|}
ex_data.c:ex_data_check:
  276|      1|{
  277|      1|    int toret = 1;
  278|      1|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  279|      1|    if (!ex_data && (ex_data = lh_EX_CLASS_ITEM_new()) == NULL)
  280|      0|        toret = 0;
  281|      1|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  282|      1|    return toret;
  283|      1|}
ex_data.c:ex_class_item_hash:
  258|     19|{
  259|     19|    return a->class_index;
  260|     19|}
ex_data.c:ex_class_item_cmp:
  265|     15|{
  266|     15|    return a->class_index - b->class_index;
  267|     15|}
ex_data.c:int_get_new_index:
  407|      4|{
  408|      4|    EX_CLASS_ITEM *item = def_get_class(class_index);
  409|      4|    if (!item)
  410|      0|        return -1;
  411|      4|    return def_add_index(item, argl, argp, new_func, dup_func, free_func);
  412|      4|}
ex_data.c:def_get_class:
  314|     15|{
  315|     15|    EX_CLASS_ITEM d, *p, *gen;
  316|     15|    EX_DATA_CHECK(return NULL;)
  317|     15|        d.class_index = class_index;
  318|     15|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  319|     15|    p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  320|     15|    if (!p) {
  321|      2|        gen = OPENSSL_malloc(sizeof(EX_CLASS_ITEM));
  322|      2|        if (gen) {
  323|      2|            gen->class_index = class_index;
  324|      2|            gen->meth_num = 0;
  325|      2|            gen->meth = sk_CRYPTO_EX_DATA_FUNCS_new_null();
  326|      2|            if (!gen->meth)
  327|      0|                OPENSSL_free(gen);
  328|      2|            else {
  329|       |                /*
  330|       |                 * Because we're inside the ex_data lock, the return value
  331|       |                 * from the insert will be NULL
  332|       |                 */
  333|      2|                (void)lh_EX_CLASS_ITEM_insert(ex_data, gen);
  334|      2|                p = lh_EX_CLASS_ITEM_retrieve(ex_data, &d);
  335|      2|                if (p != gen) {
  336|      0|                    sk_CRYPTO_EX_DATA_FUNCS_free(gen->meth);
  337|      0|                    OPENSSL_free(gen);
  338|      0|                }
  339|      2|            }
  340|      2|        }
  341|      2|    }
  342|     15|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  343|     15|    if (!p)
  344|     15|        CRYPTOerr(CRYPTO_F_DEF_GET_CLASS, ERR_R_MALLOC_FAILURE);
  345|     15|    return p;
  346|     15|}
ex_data.c:def_add_index:
  355|      4|{
  356|      4|    int toret = -1;
  357|      4|    CRYPTO_EX_DATA_FUNCS *a =
  358|      4|        (CRYPTO_EX_DATA_FUNCS *)OPENSSL_malloc(sizeof(CRYPTO_EX_DATA_FUNCS));
  359|      4|    if (!a) {
  360|      0|        CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  361|      0|        return -1;
  362|      0|    }
  363|      4|    a->argl = argl;
  364|      4|    a->argp = argp;
  365|      4|    a->new_func = new_func;
  366|      4|    a->dup_func = dup_func;
  367|      4|    a->free_func = free_func;
  368|      4|    CRYPTO_w_lock(CRYPTO_LOCK_EX_DATA);
  369|      8|    while (sk_CRYPTO_EX_DATA_FUNCS_num(item->meth) <= item->meth_num) {
  370|      4|        if (!sk_CRYPTO_EX_DATA_FUNCS_push(item->meth, NULL)) {
  371|      0|            CRYPTOerr(CRYPTO_F_DEF_ADD_INDEX, ERR_R_MALLOC_FAILURE);
  372|      0|            OPENSSL_free(a);
  373|      0|            goto err;
  374|      0|        }
  375|      4|    }
  376|      4|    toret = item->meth_num++;
  377|      4|    (void)sk_CRYPTO_EX_DATA_FUNCS_set(item->meth, toret, a);
  378|      4| err:
  379|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_EX_DATA);
  380|      4|    return toret;
  381|      4|}
ex_data.c:int_new_ex_data:
  421|     11|{
  422|     11|    int mx, i;
  423|     11|    void *ptr;
  424|     11|    CRYPTO_EX_DATA_FUNCS **storage = NULL;
  425|     11|    EX_CLASS_ITEM *item = def_get_class(class_index);
  426|     11|    if (!item)
  427|       |        /* error is already set */
  428|      0|        return 0;
  429|     11|    ad->sk = NULL;
  430|     11|    CRYPTO_r_lock(CRYPTO_LOCK_EX_DATA);
  431|     11|    mx = sk_CRYPTO_EX_DATA_FUNCS_num(item->meth);
  432|     11|    if (mx > 0) {
  433|      0|        storage = OPENSSL_malloc(mx * sizeof(CRYPTO_EX_DATA_FUNCS *));
  434|      0|        if (!storage)
  435|      0|            goto skip;
  436|      0|        for (i = 0; i < mx; i++)
  437|      0|            storage[i] = sk_CRYPTO_EX_DATA_FUNCS_value(item->meth, i);
  438|      0|    }
  439|     11| skip:
  440|     11|    CRYPTO_r_unlock(CRYPTO_LOCK_EX_DATA);
  441|     11|    if ((mx > 0) && !storage) {
  442|      0|        CRYPTOerr(CRYPTO_F_INT_NEW_EX_DATA, ERR_R_MALLOC_FAILURE);
  443|      0|        return 0;
  444|      0|    }
  445|     11|    for (i = 0; i < mx; i++) {
  446|      0|        if (storage[i] && storage[i]->new_func) {
  447|      0|            ptr = CRYPTO_get_ex_data(ad, i);
  448|      0|            storage[i]->new_func(obj, ptr, ad, i,
  449|      0|                                 storage[i]->argl, storage[i]->argp);
  450|      0|        }
  451|      0|    }
  452|     11|    if (storage)
  453|      0|        OPENSSL_free(storage);
  454|     11|    return 1;
  455|     11|}

lh_new:
  134|  3.01k|{
  135|  3.01k|    _LHASH *ret;
  136|  3.01k|    int i;
  137|       |
  138|  3.01k|    if ((ret = OPENSSL_malloc(sizeof(_LHASH))) == NULL)
  139|      0|        goto err0;
  140|  3.01k|    if ((ret->b = OPENSSL_malloc(sizeof(LHASH_NODE *) * MIN_NODES)) == NULL)
  141|      0|        goto err1;
  142|  51.1k|    for (i = 0; i < MIN_NODES; i++)
  143|  48.1k|        ret->b[i] = NULL;
  144|  3.01k|    ret->comp = ((c == NULL) ? (LHASH_COMP_FN_TYPE)strcmp : c);
  145|  3.01k|    ret->hash = ((h == NULL) ? (LHASH_HASH_FN_TYPE)lh_strhash : h);
  146|  3.01k|    ret->num_nodes = MIN_NODES / 2;
  147|  3.01k|    ret->num_alloc_nodes = MIN_NODES;
  148|  3.01k|    ret->p = 0;
  149|  3.01k|    ret->pmax = MIN_NODES / 2;
  150|  3.01k|    ret->up_load = UP_LOAD;
  151|  3.01k|    ret->down_load = DOWN_LOAD;
  152|  3.01k|    ret->num_items = 0;
  153|       |
  154|  3.01k|    ret->num_expands = 0;
  155|  3.01k|    ret->num_expand_reallocs = 0;
  156|  3.01k|    ret->num_contracts = 0;
  157|  3.01k|    ret->num_contract_reallocs = 0;
  158|  3.01k|    ret->num_hash_calls = 0;
  159|  3.01k|    ret->num_comp_calls = 0;
  160|  3.01k|    ret->num_insert = 0;
  161|  3.01k|    ret->num_replace = 0;
  162|  3.01k|    ret->num_delete = 0;
  163|  3.01k|    ret->num_no_delete = 0;
  164|  3.01k|    ret->num_retrieve = 0;
  165|  3.01k|    ret->num_retrieve_miss = 0;
  166|  3.01k|    ret->num_hash_comps = 0;
  167|       |
  168|  3.01k|    ret->error = 0;
  169|  3.01k|    return (ret);
  170|      0| err1:
  171|      0|    OPENSSL_free(ret);
  172|      0| err0:
  173|      0|    return (NULL);
  174|      0|}
lh_free:
  177|  3.00k|{
  178|  3.00k|    unsigned int i;
  179|  3.00k|    LHASH_NODE *n, *nn;
  180|       |
  181|  3.00k|    if (lh == NULL)
  182|      0|        return;
  183|       |
  184|  27.0k|    for (i = 0; i < lh->num_nodes; i++) {
  185|  24.0k|        n = lh->b[i];
  186|  24.0k|        while (n != NULL) {
  187|      0|            nn = n->next;
  188|      0|            OPENSSL_free(n);
  189|      0|            n = nn;
  190|      0|        }
  191|  24.0k|    }
  192|  3.00k|    OPENSSL_free(lh->b);
  193|  3.00k|    OPENSSL_free(lh);
  194|  3.00k|}
lh_insert:
  197|  22.4k|{
  198|  22.4k|    unsigned long hash;
  199|  22.4k|    LHASH_NODE *nn, **rn;
  200|  22.4k|    void *ret;
  201|       |
  202|  22.4k|    lh->error = 0;
  203|  22.4k|    if (lh->up_load <= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)
  204|  22.4k|            && !expand(lh))
  205|      0|        return NULL;
  206|       |
  207|  22.4k|    rn = getrn(lh, data, &hash);
  208|       |
  209|  22.4k|    if (*rn == NULL) {
  210|  6.21k|        if ((nn = (LHASH_NODE *)OPENSSL_malloc(sizeof(LHASH_NODE))) == NULL) {
  211|      0|            lh->error++;
  212|      0|            return (NULL);
  213|      0|        }
  214|  6.21k|        nn->data = data;
  215|  6.21k|        nn->next = NULL;
  216|  6.21k|#ifndef OPENSSL_NO_HASH_COMP
  217|  6.21k|        nn->hash = hash;
  218|  6.21k|#endif
  219|  6.21k|        *rn = nn;
  220|  6.21k|        ret = NULL;
  221|  6.21k|        lh->num_insert++;
  222|  6.21k|        lh->num_items++;
  223|  16.2k|    } else {                    /* replace same key */
  224|       |
  225|  16.2k|        ret = (*rn)->data;
  226|  16.2k|        (*rn)->data = data;
  227|  16.2k|        lh->num_replace++;
  228|  16.2k|    }
  229|  22.4k|    return (ret);
  230|  22.4k|}
lh_delete:
  233|  3.00k|{
  234|  3.00k|    unsigned long hash;
  235|  3.00k|    LHASH_NODE *nn, **rn;
  236|  3.00k|    void *ret;
  237|       |
  238|  3.00k|    lh->error = 0;
  239|  3.00k|    rn = getrn(lh, data, &hash);
  240|       |
  241|  3.00k|    if (*rn == NULL) {
  242|      0|        lh->num_no_delete++;
  243|      0|        return (NULL);
  244|  3.00k|    } else {
  245|  3.00k|        nn = *rn;
  246|  3.00k|        *rn = nn->next;
  247|  3.00k|        ret = nn->data;
  248|  3.00k|        OPENSSL_free(nn);
  249|  3.00k|        lh->num_delete++;
  250|  3.00k|    }
  251|       |
  252|  3.00k|    lh->num_items--;
  253|  3.00k|    if ((lh->num_nodes > MIN_NODES) &&
  254|  3.00k|        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))
  255|      0|        contract(lh);
  256|       |
  257|  3.00k|    return (ret);
  258|  3.00k|}
lh_retrieve:
  261|  22.7k|{
  262|  22.7k|    unsigned long hash;
  263|  22.7k|    LHASH_NODE **rn;
  264|  22.7k|    void *ret;
  265|       |
  266|  22.7k|    lh->error = 0;
  267|  22.7k|    rn = getrn(lh, data, &hash);
  268|       |
  269|  22.7k|    if (*rn == NULL) {
  270|  7.57k|        lh->num_retrieve_miss++;
  271|  7.57k|        return (NULL);
  272|  15.1k|    } else {
  273|  15.1k|        ret = (*rn)->data;
  274|  15.1k|        lh->num_retrieve++;
  275|  15.1k|    }
  276|  15.1k|    return (ret);
  277|  22.7k|}
lh_strhash:
  447|    388|{
  448|    388|    unsigned long ret = 0;
  449|    388|    long n;
  450|    388|    unsigned long v;
  451|    388|    int r;
  452|       |
  453|    388|    if ((c == NULL) || (*c == '\0'))
  454|      0|        return (ret);
  455|       |/*-
  456|       |    unsigned char b[16];
  457|       |    MD5(c,strlen(c),b);
  458|       |    return(b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<24));
  459|       |*/
  460|       |
  461|    388|    n = 0x100;
  462|  4.39k|    while (*c) {
  463|  4.00k|        v = n | (*c);
  464|  4.00k|        n += 0x100;
  465|  4.00k|        r = (int)((v >> 2) ^ v) & 0x0f;
  466|  4.00k|        ret = (ret << r) | (ret >> (32 - r));
  467|  4.00k|        ret &= 0xFFFFFFFFL;
  468|  4.00k|        ret ^= v * v;
  469|  4.00k|        c++;
  470|  4.00k|    }
  471|    388|    return ((ret >> 16) ^ ret);
  472|    388|}
lh_num_items:
  475|  3.00k|{
  476|  3.00k|    return lh ? lh->num_items : 0;
  477|  3.00k|}
lhash.c:expand:
  323|  1.58k|{
  324|  1.58k|    LHASH_NODE **n, **n1, **n2, *np;
  325|  1.58k|    unsigned int p, pmax, nni, j;
  326|  1.58k|    unsigned long hash;
  327|       |
  328|  1.58k|    nni = lh->num_alloc_nodes;
  329|  1.58k|    p = lh->p;
  330|  1.58k|    pmax = lh->pmax;
  331|  1.58k|    if (p + 1 >= pmax) {
  332|     11|        j = nni * 2;
  333|     11|        n = OPENSSL_realloc(lh->b, (int)(sizeof(LHASH_NODE *) * j));
  334|     11|        if (n == NULL) {
  335|      0|            lh->error++;
  336|      0|            return 0;
  337|      0|        }
  338|     11|        lh->b = n;
  339|     11|        memset(n + nni, 0, sizeof(*n) * (j - nni));
  340|     11|        lh->pmax = nni;
  341|     11|        lh->num_alloc_nodes = j;
  342|     11|        lh->num_expand_reallocs++;
  343|     11|        lh->p = 0;
  344|  1.57k|    } else {
  345|  1.57k|        lh->p++;
  346|  1.57k|    }
  347|       |
  348|  1.58k|    lh->num_nodes++;
  349|  1.58k|    lh->num_expands++;
  350|  1.58k|    n1 = &(lh->b[p]);
  351|  1.58k|    n2 = &(lh->b[p + pmax]);
  352|  1.58k|    *n2 = NULL;
  353|       |
  354|  7.20k|    for (np = *n1; np != NULL;) {
  355|  5.61k|#ifndef OPENSSL_NO_HASH_COMP
  356|  5.61k|        hash = np->hash;
  357|       |#else
  358|       |        hash = lh->hash(np->data);
  359|       |        lh->num_hash_calls++;
  360|       |#endif
  361|  5.61k|        if ((hash % nni) != p) { /* move it */
  362|    558|            *n1 = (*n1)->next;
  363|    558|            np->next = *n2;
  364|    558|            *n2 = np;
  365|    558|        } else
  366|  5.05k|            n1 = &((*n1)->next);
  367|  5.61k|        np = *n1;
  368|  5.61k|    }
  369|       |
  370|  1.58k|    return 1;
  371|  1.58k|}
lhash.c:getrn:
  410|  48.1k|{
  411|  48.1k|    LHASH_NODE **ret, *n1;
  412|  48.1k|    unsigned long hash, nn;
  413|  48.1k|    LHASH_COMP_FN_TYPE cf;
  414|       |
  415|  48.1k|    hash = (*(lh->hash)) (data);
  416|  48.1k|    lh->num_hash_calls++;
  417|  48.1k|    *rhash = hash;
  418|       |
  419|  48.1k|    nn = hash % lh->pmax;
  420|  48.1k|    if (nn < lh->p)
  421|  11.6k|        nn = hash % lh->num_alloc_nodes;
  422|       |
  423|  48.1k|    cf = lh->comp;
  424|  48.1k|    ret = &(lh->b[(int)nn]);
  425|  73.3k|    for (n1 = *ret; n1 != NULL; n1 = n1->next) {
  426|  59.5k|#ifndef OPENSSL_NO_HASH_COMP
  427|  59.5k|        lh->num_hash_comps++;
  428|  59.5k|        if (n1->hash != hash) {
  429|  24.1k|            ret = &(n1->next);
  430|  24.1k|            continue;
  431|  24.1k|        }
  432|  35.4k|#endif
  433|  35.4k|        lh->num_comp_calls++;
  434|  35.4k|        if (cf(n1->data, data) == 0)
  435|  34.3k|            break;
  436|  1.06k|        ret = &(n1->next);
  437|  1.06k|    }
  438|  48.1k|    return (ret);
  439|  48.1k|}

MD5_Update:
  303|  4.44k|{
  304|  4.44k|    const unsigned char *data = data_;
  305|  4.44k|    unsigned char *p;
  306|  4.44k|    HASH_LONG l;
  307|  4.44k|    size_t n;
  308|       |
  309|  4.44k|    if (len == 0)
  310|      3|        return 1;
  311|       |
  312|  4.43k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  4.43k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  4.43k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  4.43k|    c->Nl = l;
  322|       |
  323|  4.43k|    n = c->num;
  324|  4.43k|    if (n != 0) {
  325|  4.16k|        p = (unsigned char *)c->data;
  326|       |
  327|  4.16k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|     67|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|     67|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|     67|            n = HASH_CBLOCK - n;
  331|     67|            data += n;
  332|     67|            len -= n;
  333|     67|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|     67|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  4.09k|        } else {
  342|  4.09k|            memcpy(p + n, data, len);
  343|  4.09k|            c->num += (unsigned int)len;
  344|  4.09k|            return 1;
  345|  4.09k|        }
  346|  4.16k|    }
  347|       |
  348|    345|    n = len / HASH_CBLOCK;
  349|    345|    if (n > 0) {
  350|     67|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|     67|        n *= HASH_CBLOCK;
  352|     67|        data += n;
  353|     67|        len -= n;
  354|     67|    }
  355|       |
  356|    345|    if (len != 0) {
  357|    278|        p = (unsigned char *)c->data;
  358|    278|        c->num = (unsigned int)len;
  359|    278|        memcpy(p, data, len);
  360|    278|    }
  361|    345|    return 1;
  362|  4.43k|}
MD5_Final:
  370|    227|{
  371|    227|    unsigned char *p = (unsigned char *)c->data;
  372|    227|    size_t n = c->num;
  373|       |
  374|    227|    p[n] = 0x80;                /* there is always room for one */
  375|    227|    n++;
  376|       |
  377|    227|    if (n > (HASH_CBLOCK - 8)) {
  378|      8|        memset(p + n, 0, HASH_CBLOCK - n);
  379|      8|        n = 0;
  380|      8|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|      8|    }
  382|    227|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|    227|    p += HASH_CBLOCK - 8;
  385|       |#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|       |    (void)HOST_l2c(c->Nh, p);
  387|       |    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|    227|    (void)HOST_l2c(c->Nl, p);
  390|    227|    (void)HOST_l2c(c->Nh, p);
  391|    227|#endif
  392|    227|    p -= HASH_CBLOCK;
  393|    227|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|    227|    c->num = 0;
  395|    227|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|    227|    HASH_MAKE_STRING(c, md);
  401|    227|#endif
  402|       |
  403|    227|    return 1;
  404|    227|}

MD5_Init:
   76|    227|{
   77|    227|    memset(c, 0, sizeof(*c));
   78|    227|    c->A = INIT_DATA_A;
   79|    227|    c->B = INIT_DATA_B;
   80|    227|    c->C = INIT_DATA_C;
   81|    227|    c->D = INIT_DATA_D;
   82|    227|    return 1;
   83|    227|}

CRYPTO_malloc:
  333|  19.5k|{
  334|  19.5k|    void *ret = NULL;
  335|       |
  336|  19.5k|    if (num <= 0)
  337|      0|        return NULL;
  338|       |
  339|  19.5k|    if (allow_customize)
  340|      1|        allow_customize = 0;
  341|  19.5k|    if (malloc_debug_func != NULL) {
  342|      0|        if (allow_customize_debug)
  343|      0|            allow_customize_debug = 0;
  344|      0|        malloc_debug_func(NULL, num, file, line, 0);
  345|      0|    }
  346|  19.5k|    ret = malloc_ex_func(num, file, line);
  347|       |#ifdef LEVITTE_DEBUG_MEM
  348|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         > 0x%p (%d)\n", ret, num);
  349|       |#endif
  350|  19.5k|    if (malloc_debug_func != NULL)
  351|      0|        malloc_debug_func(ret, num, file, line, 1);
  352|       |
  353|  19.5k|    return ret;
  354|  19.5k|}
CRYPTO_realloc:
  368|     23|{
  369|     23|    void *ret = NULL;
  370|       |
  371|     23|    if (str == NULL)
  372|      0|        return CRYPTO_malloc(num, file, line);
  373|       |
  374|     23|    if (num <= 0)
  375|      0|        return NULL;
  376|       |
  377|     23|    if (realloc_debug_func != NULL)
  378|      0|        realloc_debug_func(str, NULL, num, file, line, 0);
  379|     23|    ret = realloc_ex_func(str, num, file, line);
  380|       |#ifdef LEVITTE_DEBUG_MEM
  381|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         | 0x%p -> 0x%p (%d)\n", str,
  382|       |            ret, num);
  383|       |#endif
  384|     23|    if (realloc_debug_func != NULL)
  385|      0|        realloc_debug_func(str, ret, num, file, line, 1);
  386|       |
  387|     23|    return ret;
  388|     23|}
CRYPTO_free:
  428|  15.8k|{
  429|  15.8k|    if (free_debug_func != NULL)
  430|      0|        free_debug_func(str, 0);
  431|       |#ifdef LEVITTE_DEBUG_MEM
  432|       |    fprintf(stderr, "LEVITTE_DEBUG_MEM:         < 0x%p\n", str);
  433|       |#endif
  434|  15.8k|    free_func(str);
  435|  15.8k|    if (free_debug_func != NULL)
  436|      0|        free_debug_func(NULL, 1);
  437|  15.8k|}
mem.c:default_malloc_ex:
   78|  19.5k|{
   79|  19.5k|    return malloc_func(num);
   80|  19.5k|}
mem.c:default_realloc_ex:
   96|     23|{
   97|     23|    return realloc_func(str, num);
   98|     23|}

CRYPTO_mem_ctrl:
  209|      4|{
  210|      4|    int ret = mh_mode;
  211|       |
  212|      4|    CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  213|      4|    switch (mode) {
  214|       |        /*
  215|       |         * for applications (not to be called while multiple threads use the
  216|       |         * library):
  217|       |         */
  218|      0|    case CRYPTO_MEM_CHECK_ON:  /* aka MemCheck_start() */
  219|      0|        mh_mode = CRYPTO_MEM_CHECK_ON | CRYPTO_MEM_CHECK_ENABLE;
  220|      0|        num_disable = 0;
  221|      0|        break;
  222|      0|    case CRYPTO_MEM_CHECK_OFF: /* aka MemCheck_stop() */
  223|      0|        mh_mode = 0;
  224|      0|        num_disable = 0;        /* should be true *before* MemCheck_stop is
  225|       |                                 * used, or there'll be a lot of confusion */
  226|      0|        break;
  227|       |
  228|       |        /* switch off temporarily (for library-internal use): */
  229|      2|    case CRYPTO_MEM_CHECK_DISABLE: /* aka MemCheck_off() */
  230|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  231|      0|            CRYPTO_THREADID cur;
  232|      0|            CRYPTO_THREADID_current(&cur);
  233|       |            /* see if we don't have the MALLOC2 lock already */
  234|      0|            if (!num_disable
  235|      0|                || CRYPTO_THREADID_cmp(&disabling_threadid, &cur)) {
  236|       |                /*
  237|       |                 * Long-time lock CRYPTO_LOCK_MALLOC2 must not be claimed
  238|       |                 * while we're holding CRYPTO_LOCK_MALLOC, or we'll deadlock
  239|       |                 * if somebody else holds CRYPTO_LOCK_MALLOC2 (and cannot
  240|       |                 * release it because we block entry to this function). Give
  241|       |                 * them a chance, first, and then claim the locks in
  242|       |                 * appropriate order (long-time lock first).
  243|       |                 */
  244|      0|                CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  245|       |                /*
  246|       |                 * Note that after we have waited for CRYPTO_LOCK_MALLOC2 and
  247|       |                 * CRYPTO_LOCK_MALLOC, we'll still be in the right "case" and
  248|       |                 * "if" branch because MemCheck_start and MemCheck_stop may
  249|       |                 * never be used while there are multiple OpenSSL threads.
  250|       |                 */
  251|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC2);
  252|      0|                CRYPTO_w_lock(CRYPTO_LOCK_MALLOC);
  253|      0|                mh_mode &= ~CRYPTO_MEM_CHECK_ENABLE;
  254|      0|                CRYPTO_THREADID_cpy(&disabling_threadid, &cur);
  255|      0|            }
  256|      0|            num_disable++;
  257|      0|        }
  258|      2|        break;
  259|      2|    case CRYPTO_MEM_CHECK_ENABLE: /* aka MemCheck_on() */
  260|      2|        if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  261|      0|            if (num_disable) {  /* always true, or something is going wrong */
  262|      0|                num_disable--;
  263|      0|                if (num_disable == 0) {
  264|      0|                    mh_mode |= CRYPTO_MEM_CHECK_ENABLE;
  265|      0|                    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC2);
  266|      0|                }
  267|      0|            }
  268|      0|        }
  269|      2|        break;
  270|       |
  271|      0|    default:
  272|      0|        break;
  273|      4|    }
  274|      4|    CRYPTO_w_unlock(CRYPTO_LOCK_MALLOC);
  275|      4|    return (ret);
  276|      4|}
CRYPTO_is_mem_check_on:
  279|  6.00k|{
  280|  6.00k|    int ret = 0;
  281|       |
  282|  6.00k|    if (mh_mode & CRYPTO_MEM_CHECK_ON) {
  283|      0|        CRYPTO_THREADID cur;
  284|      0|        CRYPTO_THREADID_current(&cur);
  285|      0|        CRYPTO_r_lock(CRYPTO_LOCK_MALLOC);
  286|       |
  287|      0|        ret = (mh_mode & CRYPTO_MEM_CHECK_ENABLE)
  288|      0|            || CRYPTO_THREADID_cmp(&disabling_threadid, &cur);
  289|       |
  290|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_MALLOC);
  291|      0|    }
  292|  6.00k|    return (ret);
  293|  6.00k|}
CRYPTO_push_info_:
  390|  3.00k|{
  391|  3.00k|    APP_INFO *ami, *amim;
  392|  3.00k|    int ret = 0;
  393|       |
  394|  3.00k|    if (is_MemCheck_on()) {
  395|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  396|       |
  397|      0|        if ((ami = (APP_INFO *)OPENSSL_malloc(sizeof(APP_INFO))) == NULL) {
  398|      0|            ret = 0;
  399|      0|            goto err;
  400|      0|        }
  401|      0|        if (amih == NULL) {
  402|      0|            if ((amih = lh_APP_INFO_new()) == NULL) {
  403|      0|                OPENSSL_free(ami);
  404|      0|                ret = 0;
  405|      0|                goto err;
  406|      0|            }
  407|      0|        }
  408|       |
  409|      0|        CRYPTO_THREADID_current(&ami->threadid);
  410|      0|        ami->file = file;
  411|      0|        ami->line = line;
  412|      0|        ami->info = info;
  413|      0|        ami->references = 1;
  414|      0|        ami->next = NULL;
  415|       |
  416|      0|        if ((amim = lh_APP_INFO_insert(amih, ami)) != NULL) {
  417|       |#ifdef LEVITTE_DEBUG_MEM
  418|       |            if (CRYPTO_THREADID_cmp(&ami->threadid, &amim->threadid)) {
  419|       |                fprintf(stderr,
  420|       |                        "CRYPTO_push_info(): previous info has other thread ID (%lu) than the current thread (%lu)!!!!\n",
  421|       |                        CRYPTO_THREADID_hash(&amim->threadid),
  422|       |                        CRYPTO_THREADID_hash(&ami->threadid));
  423|       |                abort();
  424|       |            }
  425|       |#endif
  426|      0|            ami->next = amim;
  427|      0|        }
  428|      0| err:
  429|      0|        MemCheck_on();          /* release MALLOC2 lock */
  430|      0|    }
  431|       |
  432|  3.00k|    return (ret);
  433|  3.00k|}
CRYPTO_pop_info:
  436|  3.00k|{
  437|  3.00k|    int ret = 0;
  438|       |
  439|  3.00k|    if (is_MemCheck_on()) {     /* _must_ be true, or something went severely
  440|       |                                 * wrong */
  441|      0|        MemCheck_off();         /* obtain MALLOC2 lock */
  442|       |
  443|      0|        ret = (pop_info() != NULL);
  444|       |
  445|      0|        MemCheck_on();          /* release MALLOC2 lock */
  446|      0|    }
  447|  3.00k|    return (ret);
  448|  3.00k|}

OPENSSL_init:
   69|    142|{
   70|    142|    static int done = 0;
   71|    142|    if (done)
   72|    141|        return;
   73|      1|    done = 1;
   74|       |#ifdef OPENSSL_FIPS
   75|       |    FIPS_set_locking_callbacks(CRYPTO_lock, CRYPTO_add_lock);
   76|       |# ifndef OPENSSL_NO_DEPRECATED
   77|       |    FIPS_crypto_set_id_callback(CRYPTO_thread_id);
   78|       |# endif
   79|       |    FIPS_set_error_callbacks(ERR_put_error, ERR_add_error_vdata);
   80|       |    FIPS_set_malloc_callbacks(CRYPTO_malloc, CRYPTO_free);
   81|       |    RAND_init_fips();
   82|       |#endif
   83|       |#if 0
   84|       |    fprintf(stderr, "Called OPENSSL_init\n");
   85|       |#endif
   86|      1|}

o_names.c:obj_name_LHASH_HASH:
  105|    388|        unsigned long name##_LHASH_HASH(const void *arg) { \
  106|    388|                const o_type *a = arg; \
  107|    388|                return name##_hash(a); }
o_names.c:obj_name_LHASH_COMP:
  114|     97|        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
  115|     97|                const o_type *a = arg1;             \
  116|     97|                const o_type *b = arg2; \
  117|     97|                return name##_cmp(a,b); }

OBJ_NAME_init:
   57|      1|{
   58|      1|    if (names_lh != NULL)
   59|      0|        return (1);
   60|      1|    MemCheck_off();
   61|      1|    names_lh = lh_OBJ_NAME_new();
   62|      1|    MemCheck_on();
   63|      1|    return (names_lh != NULL);
   64|      1|}
OBJ_NAME_get:
  151|     19|{
  152|     19|    OBJ_NAME on, *ret;
  153|     19|    int num = 0, alias;
  154|       |
  155|     19|    if (name == NULL)
  156|      0|        return (NULL);
  157|     19|    if ((names_lh == NULL) && !OBJ_NAME_init())
  158|      0|        return (NULL);
  159|       |
  160|     19|    alias = type & OBJ_NAME_ALIAS;
  161|     19|    type &= ~OBJ_NAME_ALIAS;
  162|       |
  163|     19|    on.name = name;
  164|     19|    on.type = type;
  165|       |
  166|     19|    for (;;) {
  167|     19|        ret = lh_OBJ_NAME_retrieve(names_lh, &on);
  168|     19|        if (ret == NULL)
  169|      0|            return (NULL);
  170|     19|        if ((ret->alias) && !alias) {
  171|      0|            if (++num > 10)
  172|      0|                return (NULL);
  173|      0|            on.name = ret->data;
  174|     19|        } else {
  175|     19|            return (ret->data);
  176|     19|        }
  177|     19|    }
  178|     19|}
OBJ_NAME_add:
  181|    369|{
  182|    369|    OBJ_NAME *onp, *ret;
  183|    369|    int alias;
  184|       |
  185|    369|    if ((names_lh == NULL) && !OBJ_NAME_init())
  186|      0|        return (0);
  187|       |
  188|    369|    alias = type & OBJ_NAME_ALIAS;
  189|    369|    type &= ~OBJ_NAME_ALIAS;
  190|       |
  191|    369|    onp = (OBJ_NAME *)OPENSSL_malloc(sizeof(OBJ_NAME));
  192|    369|    if (onp == NULL) {
  193|       |        /* ERROR */
  194|      0|        return 0;
  195|      0|    }
  196|       |
  197|    369|    onp->name = name;
  198|    369|    onp->alias = alias;
  199|    369|    onp->type = type;
  200|    369|    onp->data = data;
  201|       |
  202|    369|    ret = lh_OBJ_NAME_insert(names_lh, onp);
  203|    369|    if (ret != NULL) {
  204|       |        /* free things */
  205|     78|        if ((name_funcs_stack != NULL)
  206|     78|            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {
  207|       |            /*
  208|       |             * XXX: I'm not sure I understand why the free function should
  209|       |             * get three arguments... -- Richard Levitte
  210|       |             */
  211|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  212|      0|                                ret->type)->free_func(ret->name, ret->type,
  213|      0|                                                      ret->data);
  214|      0|        }
  215|     78|        OPENSSL_free(ret);
  216|    291|    } else {
  217|    291|        if (lh_OBJ_NAME_error(names_lh)) {
  218|       |            /* ERROR */
  219|      0|            OPENSSL_free(onp);
  220|      0|            return 0;
  221|      0|        }
  222|    291|    }
  223|    369|    return 1;
  224|    369|}
o_names.c:obj_name_hash:
  134|    388|{
  135|    388|    unsigned long ret;
  136|    388|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  137|       |
  138|    388|    if ((name_funcs_stack != NULL)
  139|    388|        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  140|      0|        ret =
  141|      0|            sk_NAME_FUNCS_value(name_funcs_stack,
  142|      0|                                a->type)->hash_func(a->name);
  143|    388|    } else {
  144|    388|        ret = lh_strhash(a->name);
  145|    388|    }
  146|    388|    ret ^= a->type;
  147|    388|    return (ret);
  148|    388|}
o_names.c:obj_name_cmp:
  115|     97|{
  116|     97|    int ret;
  117|     97|    const OBJ_NAME *a = (const OBJ_NAME *)a_void;
  118|     97|    const OBJ_NAME *b = (const OBJ_NAME *)b_void;
  119|       |
  120|     97|    ret = a->type - b->type;
  121|     97|    if (ret == 0) {
  122|     97|        if ((name_funcs_stack != NULL)
  123|     97|            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {
  124|      0|            ret = sk_NAME_FUNCS_value(name_funcs_stack,
  125|      0|                                      a->type)->cmp_func(a->name, b->name);
  126|      0|        } else
  127|     97|            ret = strcmp(a->name, b->name);
  128|     97|    }
  129|     97|    return (ret);
  130|     97|}

check_defer:
  229|    160|{
  230|    160|    if (!obj_cleanup_defer && nid >= NUM_NID)
  231|      0|        obj_cleanup_defer = 1;
  232|    160|}
OBJ_nid2sn:
  341|    160|{
  342|    160|    ADDED_OBJ ad, *adp;
  343|    160|    ASN1_OBJECT ob;
  344|       |
  345|    160|    if ((n >= 0) && (n < NUM_NID)) {
  346|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  347|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  348|      0|            return (NULL);
  349|      0|        }
  350|    160|        return (nid_objs[n].sn);
  351|    160|    } else if (added == NULL)
  352|      0|        return (NULL);
  353|      0|    else {
  354|      0|        ad.type = ADDED_NID;
  355|      0|        ad.obj = &ob;
  356|      0|        ob.nid = n;
  357|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  358|      0|        if (adp != NULL)
  359|      0|            return (adp->obj->sn);
  360|      0|        else {
  361|      0|            OBJerr(OBJ_F_OBJ_NID2SN, OBJ_R_UNKNOWN_NID);
  362|      0|            return (NULL);
  363|      0|        }
  364|      0|    }
  365|    160|}
OBJ_nid2ln:
  368|    160|{
  369|    160|    ADDED_OBJ ad, *adp;
  370|    160|    ASN1_OBJECT ob;
  371|       |
  372|    160|    if ((n >= 0) && (n < NUM_NID)) {
  373|    160|        if ((n != NID_undef) && (nid_objs[n].nid == NID_undef)) {
  374|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  375|      0|            return (NULL);
  376|      0|        }
  377|    160|        return (nid_objs[n].ln);
  378|    160|    } else if (added == NULL)
  379|      0|        return (NULL);
  380|      0|    else {
  381|      0|        ad.type = ADDED_NID;
  382|      0|        ad.obj = &ob;
  383|      0|        ob.nid = n;
  384|      0|        adp = lh_ADDED_OBJ_retrieve(added, &ad);
  385|      0|        if (adp != NULL)
  386|      0|            return (adp->obj->ln);
  387|      0|        else {
  388|      0|            OBJerr(OBJ_F_OBJ_NID2LN, OBJ_R_UNKNOWN_NID);
  389|      0|            return (NULL);
  390|      0|        }
  391|      0|    }
  392|    160|}

ERR_load_OBJ_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(OBJ_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, OBJ_str_functs);
   97|      1|        ERR_load_strings(0, OBJ_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

ERR_load_OCSP_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(OCSP_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, OCSP_str_functs);
  146|      1|        ERR_load_strings(0, OCSP_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PEM_strings:
  161|      1|{
  162|      1|#ifndef OPENSSL_NO_ERR
  163|       |
  164|      1|    if (ERR_func_error_string(PEM_str_functs[0].error) == NULL) {
  165|      1|        ERR_load_strings(0, PEM_str_functs);
  166|      1|        ERR_load_strings(0, PEM_str_reasons);
  167|      1|    }
  168|      1|#endif
  169|      1|}

ERR_load_PKCS12_strings:
  141|      1|{
  142|      1|#ifndef OPENSSL_NO_ERR
  143|       |
  144|      1|    if (ERR_func_error_string(PKCS12_str_functs[0].error) == NULL) {
  145|      1|        ERR_load_strings(0, PKCS12_str_functs);
  146|      1|        ERR_load_strings(0, PKCS12_str_reasons);
  147|      1|    }
  148|      1|#endif
  149|      1|}

ERR_load_PKCS7_strings:
  199|      1|{
  200|      1|#ifndef OPENSSL_NO_ERR
  201|       |
  202|      1|    if (ERR_func_error_string(PKCS7_str_functs[0].error) == NULL) {
  203|      1|        ERR_load_strings(0, PKCS7_str_functs);
  204|      1|        ERR_load_strings(0, PKCS7_str_reasons);
  205|      1|    }
  206|      1|#endif
  207|      1|}

RAND_SSLeay:
  177|      1|{
  178|      1|    return (&rand_ssleay_meth);
  179|      1|}
ssleay_rand_bytes:
  344|  3.73k|{
  345|  3.73k|    static volatile int stirred_pool = 0;
  346|  3.73k|    int i, j, k;
  347|  3.73k|    size_t num_ceil, st_idx, st_num;
  348|  3.73k|    int ok;
  349|  3.73k|    long md_c[2];
  350|  3.73k|    unsigned char local_md[MD_DIGEST_LENGTH];
  351|  3.73k|    EVP_MD_CTX m;
  352|  3.73k|#ifndef GETPID_IS_MEANINGLESS
  353|  3.73k|    pid_t curr_pid = getpid();
  354|  3.73k|#endif
  355|  3.73k|    int do_stir_pool = 0;
  356|       |
  357|       |#ifdef PREDICT
  358|       |    if (rand_predictable) {
  359|       |        static unsigned char val = 0;
  360|       |
  361|       |        for (i = 0; i < num; i++)
  362|       |            buf[i] = val++;
  363|       |        return (1);
  364|       |    }
  365|       |#endif
  366|       |
  367|  3.73k|    if (num <= 0)
  368|      0|        return 1;
  369|       |
  370|  3.73k|    EVP_MD_CTX_init(&m);
  371|       |    /* round upwards to multiple of MD_DIGEST_LENGTH/2 */
  372|  3.73k|    num_ceil =
  373|  3.73k|        (1 + (num - 1) / (MD_DIGEST_LENGTH / 2)) * (MD_DIGEST_LENGTH / 2);
  374|       |
  375|       |    /*
  376|       |     * (Based on the rand(3) manpage:)
  377|       |     *
  378|       |     * For each group of 10 bytes (or less), we do the following:
  379|       |     *
  380|       |     * Input into the hash function the local 'md' (which is initialized from
  381|       |     * the global 'md' before any bytes are generated), the bytes that are to
  382|       |     * be overwritten by the random bytes, and bytes from the 'state'
  383|       |     * (incrementing looping index). From this digest output (which is kept
  384|       |     * in 'md'), the top (up to) 10 bytes are returned to the caller and the
  385|       |     * bottom 10 bytes are xored into the 'state'.
  386|       |     *
  387|       |     * Finally, after we have finished 'num' random bytes for the
  388|       |     * caller, 'count' (which is incremented) and the local and global 'md'
  389|       |     * are fed into the hash function and the results are kept in the
  390|       |     * global 'md'.
  391|       |     */
  392|  3.73k|    if (lock)
  393|  3.73k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  394|       |
  395|       |    /* prevent ssleay_rand_bytes() from trying to obtain the lock again */
  396|  3.73k|    CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  397|  3.73k|    CRYPTO_THREADID_current(&locking_threadid);
  398|  3.73k|    CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  399|  3.73k|    crypto_lock_rand = 1;
  400|       |
  401|  3.73k|    if (!initialized) {
  402|      0|        RAND_poll();
  403|      0|        initialized = 1;
  404|      0|    }
  405|       |
  406|  3.73k|    if (!stirred_pool)
  407|      1|        do_stir_pool = 1;
  408|       |
  409|  3.73k|    ok = (entropy >= ENTROPY_NEEDED);
  410|  3.73k|    if (!ok) {
  411|       |        /*
  412|       |         * If the PRNG state is not yet unpredictable, then seeing the PRNG
  413|       |         * output may help attackers to determine the new state; thus we have
  414|       |         * to decrease the entropy estimate. Once we've had enough initial
  415|       |         * seeding we don't bother to adjust the entropy count, though,
  416|       |         * because we're not ambitious to provide *information-theoretic*
  417|       |         * randomness. NOTE: This approach fails if the program forks before
  418|       |         * we have enough entropy. Entropy should be collected in a separate
  419|       |         * input pool and be transferred to the output pool only when the
  420|       |         * entropy limit has been reached.
  421|       |         */
  422|      0|        entropy -= num;
  423|      0|        if (entropy < 0)
  424|      0|            entropy = 0;
  425|      0|    }
  426|       |
  427|  3.73k|    if (do_stir_pool) {
  428|       |        /*
  429|       |         * In the output function only half of 'md' remains secret, so we
  430|       |         * better make sure that the required entropy gets 'evenly
  431|       |         * distributed' through 'state', our randomness pool. The input
  432|       |         * function (ssleay_rand_add) chains all of 'md', which makes it more
  433|       |         * suitable for this purpose.
  434|       |         */
  435|       |
  436|      1|        int n = STATE_SIZE;     /* so that the complete pool gets accessed */
  437|     53|        while (n > 0) {
  438|       |#if MD_DIGEST_LENGTH > 20
  439|       |# error "Please adjust DUMMY_SEED."
  440|       |#endif
  441|     52|#define DUMMY_SEED "...................." /* at least MD_DIGEST_LENGTH */
  442|       |            /*
  443|       |             * Note that the seed does not matter, it's just that
  444|       |             * ssleay_rand_add expects to have something to hash.
  445|       |             */
  446|     52|            ssleay_rand_add(DUMMY_SEED, MD_DIGEST_LENGTH, 0.0);
  447|     52|            n -= MD_DIGEST_LENGTH;
  448|     52|        }
  449|      1|        if (ok)
  450|      1|            stirred_pool = 1;
  451|      1|    }
  452|       |
  453|  3.73k|    st_idx = state_index;
  454|  3.73k|    st_num = state_num;
  455|  3.73k|    md_c[0] = md_count[0];
  456|  3.73k|    md_c[1] = md_count[1];
  457|  3.73k|    memcpy(local_md, md, sizeof md);
  458|       |
  459|  3.73k|    state_index += num_ceil;
  460|  3.73k|    if (state_index > state_num)
  461|     36|        state_index %= state_num;
  462|       |
  463|       |    /*
  464|       |     * state[st_idx], ..., state[(st_idx + num_ceil - 1) % st_num] are now
  465|       |     * ours (but other threads may use them too)
  466|       |     */
  467|       |
  468|  3.73k|    md_count[0] += 1;
  469|       |
  470|       |    /* before unlocking, we must clear 'crypto_lock_rand' */
  471|  3.73k|    crypto_lock_rand = 0;
  472|  3.73k|    if (lock)
  473|  3.73k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  474|       |
  475|  7.47k|    while (num > 0) {
  476|       |        /* num_ceil -= MD_DIGEST_LENGTH/2 */
  477|  3.73k|        j = (num >= MD_DIGEST_LENGTH / 2) ? MD_DIGEST_LENGTH / 2 : num;
  478|  3.73k|        num -= j;
  479|  3.73k|        if (!MD_Init(&m))
  480|      0|           goto err;
  481|  3.73k|#ifndef GETPID_IS_MEANINGLESS
  482|  3.73k|        if (curr_pid) {         /* just in the first iteration to save time */
  483|  3.73k|            if (!MD_Update(&m, (unsigned char *)&curr_pid, sizeof curr_pid))
  484|      0|                goto err;
  485|  3.73k|            curr_pid = 0;
  486|  3.73k|        }
  487|  3.73k|#endif
  488|  3.73k|        if (!MD_Update(&m, local_md, MD_DIGEST_LENGTH) ||
  489|  3.73k|            !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)))
  490|      0|            goto err;
  491|       |
  492|  3.73k|#ifndef PURIFY                  /* purify complains */
  493|       |        /*
  494|       |         * The following line uses the supplied buffer as a small source of
  495|       |         * entropy: since this buffer is often uninitialised it may cause
  496|       |         * programs such as purify or valgrind to complain. So for those
  497|       |         * builds it is not used: the removal of such a small source of
  498|       |         * entropy has negligible impact on security.
  499|       |         */
  500|  3.73k|        if (!MD_Update(&m, buf, j))
  501|      0|            goto err;
  502|  3.73k|#endif
  503|       |
  504|  3.73k|        k = (st_idx + MD_DIGEST_LENGTH / 2) - st_num;
  505|  3.73k|        if (k > 0) {
  506|     36|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2 - k) ||
  507|     36|                !MD_Update(&m, &(state[0]), k))
  508|      0|                goto err;
  509|  3.70k|        } else {
  510|  3.70k|            if (!MD_Update(&m, &(state[st_idx]), MD_DIGEST_LENGTH / 2))
  511|      0|                goto err;
  512|  3.70k|        }
  513|  3.73k|        if (!MD_Final(&m, local_md))
  514|      0|            goto err;
  515|       |
  516|  41.0k|        for (i = 0; i < MD_DIGEST_LENGTH / 2; i++) {
  517|       |            /* may compete with other threads */
  518|  37.3k|            state[st_idx++] ^= local_md[i];
  519|  37.3k|            if (st_idx >= st_num)
  520|     40|                st_idx = 0;
  521|  37.3k|            if (i < j)
  522|  14.9k|                *(buf++) = local_md[i + MD_DIGEST_LENGTH / 2];
  523|  37.3k|        }
  524|  3.73k|    }
  525|       |
  526|  3.73k|    if (!MD_Init(&m) ||
  527|  3.73k|        !MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  528|  3.73k|        !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  529|      0|        goto err;
  530|  3.73k|    if (lock)
  531|  3.73k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  532|  3.73k|    if (!MD_Update(&m, md, MD_DIGEST_LENGTH) ||
  533|  3.73k|        !MD_Final(&m, md)) {
  534|      0|        if (lock)
  535|      0|            CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  536|      0|        goto err;
  537|      0|    }
  538|  3.73k|    if (lock)
  539|  3.73k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  540|       |
  541|  3.73k|    EVP_MD_CTX_cleanup(&m);
  542|  3.73k|    if (ok)
  543|  3.73k|        return (1);
  544|      0|    else if (pseudo)
  545|      0|        return 0;
  546|      0|    else {
  547|      0|        RANDerr(RAND_F_SSLEAY_RAND_BYTES, RAND_R_PRNG_NOT_SEEDED);
  548|      0|        ERR_add_error_data(1, "You need to read the OpenSSL FAQ, "
  549|      0|                           "http://www.openssl.org/support/faq.html");
  550|      0|        return (0);
  551|      0|    }
  552|       |
  553|      0| err:
  554|      0|    EVP_MD_CTX_cleanup(&m);
  555|      0|    return (0);
  556|  3.73k|}
md_rand.c:ssleay_rand_add:
  194|     56|{
  195|     56|    int i, j, k, st_idx;
  196|     56|    long md_c[2];
  197|     56|    unsigned char local_md[MD_DIGEST_LENGTH];
  198|     56|    EVP_MD_CTX m;
  199|     56|    int do_not_lock;
  200|       |
  201|     56|    if (!num)
  202|      0|        return;
  203|       |
  204|       |    /*
  205|       |     * (Based on the rand(3) manpage)
  206|       |     *
  207|       |     * The input is chopped up into units of 20 bytes (or less for
  208|       |     * the last block).  Each of these blocks is run through the hash
  209|       |     * function as follows:  The data passed to the hash function
  210|       |     * is the current 'md', the same number of bytes from the 'state'
  211|       |     * (the location determined by in incremented looping index) as
  212|       |     * the current 'block', the new key data 'block', and 'count'
  213|       |     * (which is incremented after each use).
  214|       |     * The result of this is kept in 'md' and also xored into the
  215|       |     * 'state' at the same locations that were used as input into the
  216|       |     * hash function.
  217|       |     */
  218|       |
  219|       |    /* check if we already have the lock */
  220|     56|    if (crypto_lock_rand) {
  221|     56|        CRYPTO_THREADID cur;
  222|     56|        CRYPTO_THREADID_current(&cur);
  223|     56|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  224|     56|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  225|     56|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  226|     56|    } else
  227|      0|        do_not_lock = 0;
  228|       |
  229|     56|    if (!do_not_lock)
  230|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  231|     56|    st_idx = state_index;
  232|       |
  233|       |    /*
  234|       |     * use our own copies of the counters so that even if a concurrent thread
  235|       |     * seeds with exactly the same data and uses the same subarray there's
  236|       |     * _some_ difference
  237|       |     */
  238|     56|    md_c[0] = md_count[0];
  239|     56|    md_c[1] = md_count[1];
  240|       |
  241|     56|    memcpy(local_md, md, sizeof md);
  242|       |
  243|       |    /* state_index <= state_num <= STATE_SIZE */
  244|     56|    state_index += num;
  245|     56|    if (state_index >= STATE_SIZE) {
  246|      1|        state_index %= STATE_SIZE;
  247|      1|        state_num = STATE_SIZE;
  248|     55|    } else if (state_num < STATE_SIZE) {
  249|     52|        if (state_index > state_num)
  250|     52|            state_num = state_index;
  251|     52|    }
  252|       |    /* state_index <= state_num <= STATE_SIZE */
  253|       |
  254|       |    /*
  255|       |     * state[st_idx], ..., state[(st_idx + num - 1) % STATE_SIZE] are what we
  256|       |     * will use now, but other threads may use them as well
  257|       |     */
  258|       |
  259|     56|    md_count[1] += (num / MD_DIGEST_LENGTH) + (num % MD_DIGEST_LENGTH > 0);
  260|       |
  261|     56|    if (!do_not_lock)
  262|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  263|       |
  264|     56|    EVP_MD_CTX_init(&m);
  265|    113|    for (i = 0; i < num; i += MD_DIGEST_LENGTH) {
  266|     57|        j = (num - i);
  267|     57|        j = (j > MD_DIGEST_LENGTH) ? MD_DIGEST_LENGTH : j;
  268|       |
  269|     57|        if (!MD_Init(&m) ||
  270|     57|            !MD_Update(&m, local_md, MD_DIGEST_LENGTH))
  271|      0|            goto err;
  272|     57|        k = (st_idx + j) - STATE_SIZE;
  273|     57|        if (k > 0) {
  274|      1|            if (!MD_Update(&m, &(state[st_idx]), j - k) ||
  275|      1|                !MD_Update(&m, &(state[0]), k))
  276|      0|                goto err;
  277|      1|        } else
  278|     56|            if (!MD_Update(&m, &(state[st_idx]), j))
  279|      0|                goto err;
  280|       |
  281|       |        /* DO NOT REMOVE THE FOLLOWING CALL TO MD_Update()! */
  282|     57|        if (!MD_Update(&m, buf, j))
  283|      0|            goto err;
  284|       |        /*
  285|       |         * We know that line may cause programs such as purify and valgrind
  286|       |         * to complain about use of uninitialized data.  The problem is not,
  287|       |         * it's with the caller.  Removing that line will make sure you get
  288|       |         * really bad randomness and thereby other problems such as very
  289|       |         * insecure keys.
  290|       |         */
  291|       |
  292|     57|        if (!MD_Update(&m, (unsigned char *)&(md_c[0]), sizeof(md_c)) ||
  293|     57|            !MD_Final(&m, local_md))
  294|      0|            goto err;
  295|     57|        md_c[1]++;
  296|       |
  297|     57|        buf = (const char *)buf + j;
  298|       |
  299|  1.15k|        for (k = 0; k < j; k++) {
  300|       |            /*
  301|       |             * Parallel threads may interfere with this, but always each byte
  302|       |             * of the new state is the XOR of some previous value of its and
  303|       |             * local_md (itermediate values may be lost). Alway using locking
  304|       |             * could hurt performance more than necessary given that
  305|       |             * conflicts occur only when the total seeding is longer than the
  306|       |             * random state.
  307|       |             */
  308|  1.09k|            state[st_idx++] ^= local_md[k];
  309|  1.09k|            if (st_idx >= STATE_SIZE)
  310|      1|                st_idx = 0;
  311|  1.09k|        }
  312|     57|    }
  313|       |
  314|     56|    if (!do_not_lock)
  315|      0|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  316|       |    /*
  317|       |     * Don't just copy back local_md into md -- this could mean that other
  318|       |     * thread's seeding remains without effect (except for the incremented
  319|       |     * counter).  By XORing it we keep at least as much entropy as fits into
  320|       |     * md.
  321|       |     */
  322|  1.17k|    for (k = 0; k < (int)sizeof(md); k++) {
  323|  1.12k|        md[k] ^= local_md[k];
  324|  1.12k|    }
  325|     56|    if (entropy < ENTROPY_NEEDED) /* stop counting when we have enough */
  326|      1|        entropy += add;
  327|     56|    if (!do_not_lock)
  328|      0|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  329|       |
  330|       |#if !defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32)
  331|       |    assert(md_c[1] == md_count[1]);
  332|       |#endif
  333|       |
  334|     56| err:
  335|     56|    EVP_MD_CTX_cleanup(&m);
  336|     56|}
md_rand.c:ssleay_rand_nopseudo_bytes:
  559|  3.73k|{
  560|  3.73k|    return ssleay_rand_bytes(buf, num, 0, 1);
  561|  3.73k|}
md_rand.c:ssleay_rand_status:
  572|  3.58k|{
  573|  3.58k|    CRYPTO_THREADID cur;
  574|  3.58k|    int ret;
  575|  3.58k|    int do_not_lock;
  576|       |
  577|  3.58k|    CRYPTO_THREADID_current(&cur);
  578|       |    /*
  579|       |     * check if we already have the lock (could happen if a RAND_poll()
  580|       |     * implementation calls RAND_status())
  581|       |     */
  582|  3.58k|    if (crypto_lock_rand) {
  583|      0|        CRYPTO_r_lock(CRYPTO_LOCK_RAND2);
  584|      0|        do_not_lock = !CRYPTO_THREADID_cmp(&locking_threadid, &cur);
  585|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_RAND2);
  586|      0|    } else
  587|  3.58k|        do_not_lock = 0;
  588|       |
  589|  3.58k|    if (!do_not_lock) {
  590|  3.58k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND);
  591|       |
  592|       |        /*
  593|       |         * prevent ssleay_rand_bytes() from trying to obtain the lock again
  594|       |         */
  595|  3.58k|        CRYPTO_w_lock(CRYPTO_LOCK_RAND2);
  596|  3.58k|        CRYPTO_THREADID_cpy(&locking_threadid, &cur);
  597|  3.58k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND2);
  598|  3.58k|        crypto_lock_rand = 1;
  599|  3.58k|    }
  600|       |
  601|  3.58k|    if (!initialized) {
  602|      1|        RAND_poll();
  603|      1|        initialized = 1;
  604|      1|    }
  605|       |
  606|  3.58k|    ret = entropy >= ENTROPY_NEEDED;
  607|       |
  608|  3.58k|    if (!do_not_lock) {
  609|       |        /* before unlocking, we must clear 'crypto_lock_rand' */
  610|  3.58k|        crypto_lock_rand = 0;
  611|       |
  612|  3.58k|        CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
  613|  3.58k|    }
  614|       |
  615|  3.58k|    return ret;
  616|  3.58k|}

ERR_load_RAND_strings:
   92|      1|{
   93|      1|#ifndef OPENSSL_NO_ERR
   94|       |
   95|      1|    if (ERR_func_error_string(RAND_str_functs[0].error) == NULL) {
   96|      1|        ERR_load_strings(0, RAND_str_functs);
   97|      1|        ERR_load_strings(0, RAND_str_reasons);
   98|      1|    }
   99|      1|#endif
  100|      1|}

RAND_get_rand_method:
   93|  7.32k|{
   94|  7.32k|    if (!default_RAND_meth) {
   95|      1|#ifndef OPENSSL_NO_ENGINE
   96|      1|        ENGINE *e = ENGINE_get_default_RAND();
   97|      1|        if (e) {
   98|      0|            default_RAND_meth = ENGINE_get_RAND(e);
   99|      0|            if (!default_RAND_meth) {
  100|      0|                ENGINE_finish(e);
  101|      0|                e = NULL;
  102|      0|            }
  103|      0|        }
  104|      1|        if (e)
  105|      0|            funct_ref = e;
  106|      1|        else
  107|      1|#endif
  108|      1|            default_RAND_meth = RAND_SSLeay();
  109|      1|    }
  110|  7.32k|    return default_RAND_meth;
  111|  7.32k|}
RAND_add:
  149|      4|{
  150|      4|    const RAND_METHOD *meth = RAND_get_rand_method();
  151|      4|    if (meth && meth->add)
  152|      4|        meth->add(buf, num, entropy);
  153|      4|}
RAND_bytes:
  156|  3.73k|{
  157|  3.73k|    const RAND_METHOD *meth = RAND_get_rand_method();
  158|  3.73k|    if (meth && meth->bytes)
  159|  3.73k|        return meth->bytes(buf, num);
  160|      0|    return (-1);
  161|  3.73k|}
RAND_status:
  172|  3.58k|{
  173|  3.58k|    const RAND_METHOD *meth = RAND_get_rand_method();
  174|  3.58k|    if (meth && meth->status)
  175|  3.58k|        return meth->status();
  176|      0|    return 0;
  177|  3.58k|}

RAND_poll:
  244|      1|{
  245|      1|    unsigned long l;
  246|      1|    pid_t curr_pid = getpid();
  247|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  248|      1|    unsigned char tmpbuf[ENTROPY_NEEDED];
  249|      1|    int n = 0;
  250|      1|#  endif
  251|      1|#  ifdef DEVRANDOM
  252|      1|    static const char *randomfiles[] = { DEVRANDOM };
  253|      1|    struct stat randomstats[sizeof(randomfiles) / sizeof(randomfiles[0])];
  254|      1|    int fd;
  255|      1|    unsigned int i;
  256|      1|#  endif
  257|      1|#  ifdef DEVRANDOM_EGD
  258|      1|    static const char *egdsockets[] = { DEVRANDOM_EGD, NULL };
  259|      1|    const char **egdsocket = NULL;
  260|      1|#  endif
  261|       |
  262|      1|#  ifdef DEVRANDOM
  263|      1|    memset(randomstats, 0, sizeof(randomstats));
  264|       |    /*
  265|       |     * Use a random entropy pool device. Linux, FreeBSD and OpenBSD have
  266|       |     * this. Use /dev/urandom if you can as /dev/random may block if it runs
  267|       |     * out of random entries.
  268|       |     */
  269|       |
  270|      2|    for (i = 0; (i < sizeof(randomfiles) / sizeof(randomfiles[0])) &&
  271|      2|         (n < ENTROPY_NEEDED); i++) {
  272|      1|        if ((fd = open(randomfiles[i], O_RDONLY
  273|      1|#   ifdef O_NONBLOCK
  274|      1|                       | O_NONBLOCK
  275|      1|#   endif
  276|       |#   ifdef O_BINARY
  277|       |                       | O_BINARY
  278|       |#   endif
  279|      1|#   ifdef O_NOCTTY              /* If it happens to be a TTY (god forbid), do
  280|       |                                 * not make it our controlling tty */
  281|      1|                       | O_NOCTTY
  282|      1|#   endif
  283|      1|             )) >= 0) {
  284|      1|            int usec = 10 * 1000; /* spend 10ms on each file */
  285|      1|            int r;
  286|      1|            unsigned int j;
  287|      1|            struct stat *st = &randomstats[i];
  288|       |
  289|       |            /*
  290|       |             * Avoid using same input... Used to be O_NOFOLLOW above, but
  291|       |             * it's not universally appropriate...
  292|       |             */
  293|      1|            if (fstat(fd, st) != 0) {
  294|      0|                close(fd);
  295|      0|                continue;
  296|      0|            }
  297|      1|            for (j = 0; j < i; j++) {
  298|      0|                if (randomstats[j].st_ino == st->st_ino &&
  299|      0|                    randomstats[j].st_dev == st->st_dev)
  300|      0|                    break;
  301|      0|            }
  302|      1|            if (j < i) {
  303|      0|                close(fd);
  304|      0|                continue;
  305|      0|            }
  306|       |
  307|      1|            do {
  308|      1|                int try_read = 0;
  309|       |
  310|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  311|       |                /*
  312|       |                 * select() is broken in BeOS R5, so we simply try to read
  313|       |                 * something and snooze if we couldn't
  314|       |                 */
  315|       |                try_read = 1;
  316|       |
  317|       |#   elif defined(OPENSSL_SYS_LINUX)
  318|       |                /* use poll() */
  319|      1|                struct pollfd pset;
  320|       |
  321|      1|                pset.fd = fd;
  322|      1|                pset.events = POLLIN;
  323|      1|                pset.revents = 0;
  324|       |
  325|      1|                if (poll(&pset, 1, usec / 1000) < 0)
  326|      0|                    usec = 0;
  327|      1|                else
  328|      1|                    try_read = (pset.revents & POLLIN) != 0;
  329|       |
  330|       |#   else
  331|       |                /* use select() */
  332|       |                fd_set fset;
  333|       |                struct timeval t;
  334|       |
  335|       |                t.tv_sec = 0;
  336|       |                t.tv_usec = usec;
  337|       |
  338|       |                if (FD_SETSIZE > 0 && (unsigned)fd >= FD_SETSIZE) {
  339|       |                    /*
  340|       |                     * can't use select, so just try to read once anyway
  341|       |                     */
  342|       |                    try_read = 1;
  343|       |                } else {
  344|       |                    FD_ZERO(&fset);
  345|       |                    FD_SET(fd, &fset);
  346|       |
  347|       |                    if (select(fd + 1, &fset, NULL, NULL, &t) >= 0) {
  348|       |                        usec = t.tv_usec;
  349|       |                        if (FD_ISSET(fd, &fset))
  350|       |                            try_read = 1;
  351|       |                    } else
  352|       |                        usec = 0;
  353|       |                }
  354|       |#   endif
  355|       |
  356|      1|                if (try_read) {
  357|      1|                    r = read(fd, (unsigned char *)tmpbuf + n,
  358|      1|                             ENTROPY_NEEDED - n);
  359|      1|                    if (r > 0)
  360|      1|                        n += r;
  361|       |#   if defined(OPENSSL_SYS_BEOS_R5)
  362|       |                    if (r == 0)
  363|       |                        snooze(t.tv_usec);
  364|       |#   endif
  365|      1|                } else
  366|      0|                    r = -1;
  367|       |
  368|       |                /*
  369|       |                 * Some Unixen will update t in select(), some won't.  For
  370|       |                 * those who won't, or if we didn't use select() in the first
  371|       |                 * place, give up here, otherwise, we will do this once again
  372|       |                 * for the remaining time.
  373|       |                 */
  374|      1|                if (usec == 10 * 1000)
  375|      1|                    usec = 0;
  376|      1|            }
  377|      1|            while ((r > 0 ||
  378|      1|                    (errno == EINTR || errno == EAGAIN)) && usec != 0
  379|      1|                   && n < ENTROPY_NEEDED);
  380|       |
  381|      1|            close(fd);
  382|      1|        }
  383|      1|    }
  384|      1|#  endif                        /* defined(DEVRANDOM) */
  385|       |
  386|      1|#  ifdef DEVRANDOM_EGD
  387|       |    /*
  388|       |     * Use an EGD socket to read entropy from an EGD or PRNGD entropy
  389|       |     * collecting daemon.
  390|       |     */
  391|       |
  392|      1|    for (egdsocket = egdsockets; *egdsocket && n < ENTROPY_NEEDED;
  393|      1|         egdsocket++) {
  394|      0|        int r;
  395|       |
  396|      0|        r = RAND_query_egd_bytes(*egdsocket, (unsigned char *)tmpbuf + n,
  397|      0|                                 ENTROPY_NEEDED - n);
  398|      0|        if (r > 0)
  399|      0|            n += r;
  400|      0|    }
  401|      1|#  endif                        /* defined(DEVRANDOM_EGD) */
  402|       |
  403|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  404|      1|    if (n > 0) {
  405|      1|        RAND_add(tmpbuf, sizeof tmpbuf, (double)n);
  406|      1|        OPENSSL_cleanse(tmpbuf, n);
  407|      1|    }
  408|      1|#  endif
  409|       |
  410|       |    /* put in some default random data, we need more than just this */
  411|      1|    l = curr_pid;
  412|      1|    RAND_add(&l, sizeof(l), 0.0);
  413|      1|    l = getuid();
  414|      1|    RAND_add(&l, sizeof(l), 0.0);
  415|       |
  416|      1|    l = time(NULL);
  417|      1|    RAND_add(&l, sizeof(l), 0.0);
  418|       |
  419|       |#  if defined(OPENSSL_SYS_BEOS)
  420|       |    {
  421|       |        system_info sysInfo;
  422|       |        get_system_info(&sysInfo);
  423|       |        RAND_add(&sysInfo, sizeof(sysInfo), 0);
  424|       |    }
  425|       |#  endif
  426|       |
  427|      1|#  if defined(DEVRANDOM) || defined(DEVRANDOM_EGD)
  428|      1|    return 1;
  429|       |#  else
  430|       |    return 0;
  431|       |#  endif
  432|      1|}

RSA_PKCS1_SSLeay:
  151|      7|{
  152|      7|    return (&rsa_pkcs1_eay_meth);
  153|      7|}

ERR_load_RSA_strings:
  239|      1|{
  240|      1|#ifndef OPENSSL_NO_ERR
  241|       |
  242|      1|    if (ERR_func_error_string(RSA_str_functs[0].error) == NULL) {
  243|      1|        ERR_load_strings(0, RSA_str_functs);
  244|      1|        ERR_load_strings(0, RSA_str_reasons);
  245|      1|    }
  246|      1|#endif
  247|      1|}

SHA1_Update:
  303|  30.1k|{
  304|  30.1k|    const unsigned char *data = data_;
  305|  30.1k|    unsigned char *p;
  306|  30.1k|    HASH_LONG l;
  307|  30.1k|    size_t n;
  308|       |
  309|  30.1k|    if (len == 0)
  310|      4|        return 1;
  311|       |
  312|  30.1k|    l = (c->Nl + (((HASH_LONG) len) << 3)) & 0xffffffffUL;
  313|       |    /*
  314|       |     * 95-05-24 eay Fixed a bug with the overflow handling, thanks to Wei Dai
  315|       |     * <weidai@eskimo.com> for pointing it out.
  316|       |     */
  317|  30.1k|    if (l < c->Nl)              /* overflow */
  318|      0|        c->Nh++;
  319|  30.1k|    c->Nh += (HASH_LONG) (len >> 29); /* might cause compiler warning on
  320|       |                                       * 16-bit */
  321|  30.1k|    c->Nl = l;
  322|       |
  323|  30.1k|    n = c->num;
  324|  30.1k|    if (n != 0) {
  325|  22.6k|        p = (unsigned char *)c->data;
  326|       |
  327|  22.6k|        if (len >= HASH_CBLOCK || len + n >= HASH_CBLOCK) {
  328|     53|            memcpy(p + n, data, HASH_CBLOCK - n);
  329|     53|            HASH_BLOCK_DATA_ORDER(c, p, 1);
  330|     53|            n = HASH_CBLOCK - n;
  331|     53|            data += n;
  332|     53|            len -= n;
  333|     53|            c->num = 0;
  334|       |            /*
  335|       |             * We use memset rather than OPENSSL_cleanse() here deliberately.
  336|       |             * Using OPENSSL_cleanse() here could be a performance issue. It
  337|       |             * will get properly cleansed on finalisation so this isn't a
  338|       |             * security problem.
  339|       |             */
  340|     53|            memset(p, 0, HASH_CBLOCK); /* keep it zeroed */
  341|  22.5k|        } else {
  342|  22.5k|            memcpy(p + n, data, len);
  343|  22.5k|            c->num += (unsigned int)len;
  344|  22.5k|            return 1;
  345|  22.5k|        }
  346|  22.6k|    }
  347|       |
  348|  7.58k|    n = len / HASH_CBLOCK;
  349|  7.58k|    if (n > 0) {
  350|      0|        HASH_BLOCK_DATA_ORDER(c, data, n);
  351|      0|        n *= HASH_CBLOCK;
  352|      0|        data += n;
  353|      0|        len -= n;
  354|      0|    }
  355|       |
  356|  7.58k|    if (len != 0) {
  357|  7.58k|        p = (unsigned char *)c->data;
  358|  7.58k|        c->num = (unsigned int)len;
  359|  7.58k|        memcpy(p, data, len);
  360|  7.58k|    }
  361|  7.58k|    return 1;
  362|  30.1k|}
SHA1_Final:
  370|  7.52k|{
  371|  7.52k|    unsigned char *p = (unsigned char *)c->data;
  372|  7.52k|    size_t n = c->num;
  373|       |
  374|  7.52k|    p[n] = 0x80;                /* there is always room for one */
  375|  7.52k|    n++;
  376|       |
  377|  7.52k|    if (n > (HASH_CBLOCK - 8)) {
  378|  3.73k|        memset(p + n, 0, HASH_CBLOCK - n);
  379|  3.73k|        n = 0;
  380|  3.73k|        HASH_BLOCK_DATA_ORDER(c, p, 1);
  381|  3.73k|    }
  382|  7.52k|    memset(p + n, 0, HASH_CBLOCK - 8 - n);
  383|       |
  384|  7.52k|    p += HASH_CBLOCK - 8;
  385|  7.52k|#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
  386|  7.52k|    (void)HOST_l2c(c->Nh, p);
  387|  7.52k|    (void)HOST_l2c(c->Nl, p);
  388|       |#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
  389|       |    (void)HOST_l2c(c->Nl, p);
  390|       |    (void)HOST_l2c(c->Nh, p);
  391|       |#endif
  392|  7.52k|    p -= HASH_CBLOCK;
  393|  7.52k|    HASH_BLOCK_DATA_ORDER(c, p, 1);
  394|  7.52k|    c->num = 0;
  395|  7.52k|    OPENSSL_cleanse(p, HASH_CBLOCK);
  396|       |
  397|       |#ifndef HASH_MAKE_STRING
  398|       |# error "HASH_MAKE_STRING must be defined!"
  399|       |#else
  400|  7.52k|    HASH_MAKE_STRING(c, md);
  401|  7.52k|#endif
  402|       |
  403|  7.52k|    return 1;
  404|  7.52k|}

SHA1_Init:
  130|  7.52k|{
  131|  7.52k|    memset(c, 0, sizeof(*c));
  132|  7.52k|    c->h0 = INIT_DATA_h0;
  133|  7.52k|    c->h1 = INIT_DATA_h1;
  134|  7.52k|    c->h2 = INIT_DATA_h2;
  135|  7.52k|    c->h3 = INIT_DATA_h3;
  136|  7.52k|    c->h4 = INIT_DATA_h4;
  137|  7.52k|    return 1;
  138|  7.52k|}

sk_new_null:
  153|     19|{
  154|     19|    return sk_new((int (*)(const void *, const void *))0);
  155|     19|}
sk_new:
  158|     20|{
  159|     20|    _STACK *ret;
  160|     20|    int i;
  161|       |
  162|     20|    if ((ret = OPENSSL_malloc(sizeof(_STACK))) == NULL)
  163|      0|        goto err;
  164|     20|    if ((ret->data = OPENSSL_malloc(sizeof(char *) * MIN_NODES)) == NULL)
  165|      0|        goto err;
  166|    100|    for (i = 0; i < MIN_NODES; i++)
  167|     80|        ret->data[i] = NULL;
  168|     20|    ret->comp = c;
  169|     20|    ret->num_alloc = MIN_NODES;
  170|     20|    ret->num = 0;
  171|     20|    ret->sorted = 0;
  172|     20|    return (ret);
  173|      0| err:
  174|      0|    if (ret)
  175|      0|        OPENSSL_free(ret);
  176|      0|    return (NULL);
  177|     20|}
sk_insert:
  180|     54|{
  181|     54|    char **s;
  182|       |
  183|     54|    if (st == NULL)
  184|      0|        return 0;
  185|     54|    if (st->num_alloc <= st->num + 1) {
  186|      8|        s = OPENSSL_realloc((char *)st->data,
  187|      8|                            (unsigned int)sizeof(char *) * st->num_alloc * 2);
  188|      8|        if (s == NULL)
  189|      0|            return (0);
  190|      8|        st->data = s;
  191|      8|        st->num_alloc *= 2;
  192|      8|    }
  193|     54|    if ((loc >= (int)st->num) || (loc < 0))
  194|     47|        st->data[st->num] = data;
  195|      7|    else {
  196|      7|        int i;
  197|      7|        char **f, **t;
  198|       |
  199|      7|        f = st->data;
  200|      7|        t = &(st->data[1]);
  201|     42|        for (i = st->num; i >= loc; i--)
  202|     35|            t[i] = f[i];
  203|       |
  204|       |#ifdef undef                    /* no memmove on sunos :-( */
  205|       |        memmove(&(st->data[loc + 1]),
  206|       |                &(st->data[loc]), sizeof(char *) * (st->num - loc));
  207|       |#endif
  208|      7|        st->data[loc] = data;
  209|      7|    }
  210|     54|    st->num++;
  211|     54|    st->sorted = 0;
  212|     54|    return (st->num);
  213|     54|}
sk_delete_ptr:
  216|     39|{
  217|     39|    int i;
  218|       |
  219|    109|    for (i = 0; i < st->num; i++)
  220|     77|        if (st->data[i] == p)
  221|      7|            return (sk_delete(st, i));
  222|     32|    return (NULL);
  223|     39|}
sk_delete:
  226|      7|{
  227|      7|    char *ret;
  228|      7|    int i, j;
  229|       |
  230|      7|    if (!st || (loc < 0) || (loc >= st->num))
  231|      0|        return NULL;
  232|       |
  233|      7|    ret = st->data[loc];
  234|      7|    if (loc != st->num - 1) {
  235|      0|        j = st->num - 1;
  236|      0|        for (i = loc; i < j; i++)
  237|      0|            st->data[i] = st->data[i + 1];
  238|       |        /*
  239|       |         * In theory memcpy is not safe for this memcpy( &(st->data[loc]),
  240|       |         * &(st->data[loc+1]), sizeof(char *)*(st->num-loc-1));
  241|       |         */
  242|      0|    }
  243|      7|    st->num--;
  244|      7|    return (ret);
  245|      7|}
sk_push:
  282|     47|{
  283|     47|    return (sk_insert(st, data, st->num));
  284|     47|}
sk_free:
  332|      4|{
  333|      4|    if (st == NULL)
  334|      0|        return;
  335|      4|    if (st->data != NULL)
  336|      4|        OPENSSL_free(st->data);
  337|      4|    OPENSSL_free(st);
  338|      4|}
sk_num:
  341|     23|{
  342|     23|    if (st == NULL)
  343|      0|        return -1;
  344|     23|    return st->num;
  345|     23|}
sk_value:
  348|      5|{
  349|      5|    if (!st || (i < 0) || (i >= st->num))
  350|      1|        return NULL;
  351|      4|    return st->data[i];
  352|      5|}
sk_set:
  355|      4|{
  356|      4|    if (!st || (i < 0) || (i >= st->num))
  357|      0|        return NULL;
  358|      4|    return (st->data[i] = value);
  359|      4|}
sk_sort:
  362|      1|{
  363|      1|    if (st && !st->sorted && st->comp != NULL) {
  364|      1|        int (*comp_func) (const void *, const void *);
  365|       |
  366|       |        /*
  367|       |         * same comment as in sk_find ... previously st->comp was declared as
  368|       |         * a (void*,void*) callback type, but this made the population of the
  369|       |         * callback pointer illogical - our callbacks compare type** with
  370|       |         * type**, so we leave the casting until absolutely necessary (ie.
  371|       |         * "now").
  372|       |         */
  373|      1|        comp_func = (int (*)(const void *, const void *))(st->comp);
  374|      1|        qsort(st->data, st->num, sizeof(char *), comp_func);
  375|      1|        st->sorted = 1;
  376|      1|    }
  377|      1|}

ERR_load_TS_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(TS_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, TS_str_functs);
  185|      1|        ERR_load_strings(0, TS_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_UI_strings:
  103|      1|{
  104|      1|#ifndef OPENSSL_NO_ERR
  105|       |
  106|      1|    if (ERR_func_error_string(UI_str_functs[0].error) == NULL) {
  107|      1|        ERR_load_strings(0, UI_str_functs);
  108|      1|        ERR_load_strings(0, UI_str_reasons);
  109|      1|    }
  110|      1|#endif
  111|      1|}

X509_get_default_cert_area:
   70|      2|{
   71|      2|    return (X509_CERT_AREA);
   72|      2|}

ERR_load_X509_strings:
  180|      1|{
  181|      1|#ifndef OPENSSL_NO_ERR
  182|       |
  183|      1|    if (ERR_func_error_string(X509_str_functs[0].error) == NULL) {
  184|      1|        ERR_load_strings(0, X509_str_functs);
  185|      1|        ERR_load_strings(0, X509_str_reasons);
  186|      1|    }
  187|      1|#endif
  188|      1|}

ERR_load_X509V3_strings:
  241|      1|{
  242|      1|#ifndef OPENSSL_NO_ERR
  243|       |
  244|      1|    if (ERR_func_error_string(X509V3_str_functs[0].error) == NULL) {
  245|      1|        ERR_load_strings(0, X509V3_str_functs);
  246|      1|        ERR_load_strings(0, X509V3_str_reasons);
  247|      1|    }
  248|      1|#endif
  249|      1|}

ERR_load_GOST_strings:
  183|      1|{
  184|      1|    if (GOST_lib_error_code == 0)
  185|      1|        GOST_lib_error_code = ERR_get_next_error_library();
  186|       |
  187|      1|    if (GOST_error_init) {
  188|      1|        GOST_error_init = 0;
  189|      1|#ifndef OPENSSL_NO_ERR
  190|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_functs);
  191|      1|        ERR_load_strings(GOST_lib_error_code, GOST_str_reasons);
  192|      1|#endif
  193|       |
  194|       |#ifdef GOST_LIB_NAME
  195|       |        GOST_lib_name->error = ERR_PACK(GOST_lib_error_code, 0, 0);
  196|       |        ERR_load_strings(0, GOST_lib_name);
  197|       |#endif
  198|      1|    }
  199|      1|}

register_ameth_gost:
  912|      3|{
  913|      3|    *ameth = EVP_PKEY_asn1_new(nid, ASN1_PKEY_SIGPARAM_NULL, pemstr, info);
  914|      3|    if (!*ameth)
  915|      0|        return 0;
  916|      3|    switch (nid) {
  917|      1|    case NID_id_GostR3410_94:
  918|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost94);
  919|      1|        EVP_PKEY_asn1_set_private(*ameth,
  920|      1|                                  priv_decode_gost, priv_encode_gost,
  921|      1|                                  priv_print_gost94);
  922|       |
  923|      1|        EVP_PKEY_asn1_set_param(*ameth,
  924|      1|                                gost94_param_decode, gost94_param_encode,
  925|      1|                                param_missing_gost94, param_copy_gost94,
  926|      1|                                param_cmp_gost94, param_print_gost94);
  927|      1|        EVP_PKEY_asn1_set_public(*ameth,
  928|      1|                                 pub_decode_gost94, pub_encode_gost94,
  929|      1|                                 pub_cmp_gost94, pub_print_gost94,
  930|      1|                                 pkey_size_gost, pkey_bits_gost);
  931|       |
  932|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  933|      1|        break;
  934|      1|    case NID_id_GostR3410_2001:
  935|      1|        EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost01);
  936|      1|        EVP_PKEY_asn1_set_private(*ameth,
  937|      1|                                  priv_decode_gost, priv_encode_gost,
  938|      1|                                  priv_print_gost01);
  939|       |
  940|      1|        EVP_PKEY_asn1_set_param(*ameth,
  941|      1|                                gost2001_param_decode, gost2001_param_encode,
  942|      1|                                param_missing_gost01, param_copy_gost01,
  943|      1|                                param_cmp_gost01, param_print_gost01);
  944|      1|        EVP_PKEY_asn1_set_public(*ameth,
  945|      1|                                 pub_decode_gost01, pub_encode_gost01,
  946|      1|                                 pub_cmp_gost01, pub_print_gost01,
  947|      1|                                 pkey_size_gost, pkey_bits_gost);
  948|       |
  949|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);
  950|      1|        break;
  951|      1|    case NID_id_Gost28147_89_MAC:
  952|      1|        EVP_PKEY_asn1_set_free(*ameth, mackey_free_gost);
  953|      1|        EVP_PKEY_asn1_set_ctrl(*ameth, mac_ctrl_gost);
  954|      1|        break;
  955|      3|    }
  956|      3|    return 1;
  957|      3|}

ENGINE_load_gost:
  270|      1|{
  271|      1|    ENGINE *toadd;
  272|      1|    if (pmeth_GostR3410_94)
  273|      0|        return;
  274|      1|    toadd = engine_gost();
  275|      1|    if (!toadd)
  276|      0|        return;
  277|      1|    ENGINE_add(toadd);
  278|      1|    ENGINE_free(toadd);
  279|      1|    ERR_clear_error();
  280|      1|}
gost_eng.c:engine_gost:
  258|      1|{
  259|      1|    ENGINE *ret = ENGINE_new();
  260|      1|    if (!ret)
  261|      0|        return NULL;
  262|      1|    if (!bind_gost(ret, engine_gost_id)) {
  263|      0|        ENGINE_free(ret);
  264|      0|        return NULL;
  265|      0|    }
  266|      1|    return ret;
  267|      1|}
gost_eng.c:bind_gost:
   75|      1|{
   76|      1|    int ret = 0;
   77|      1|    if (id && strcmp(id, engine_gost_id))
   78|      0|        return 0;
   79|      1|    if (ameth_GostR3410_94) {
   80|      0|        printf("GOST engine already loaded\n");
   81|      0|        goto end;
   82|      0|    }
   83|       |
   84|      1|    if (!ENGINE_set_id(e, engine_gost_id)) {
   85|      0|        printf("ENGINE_set_id failed\n");
   86|      0|        goto end;
   87|      0|    }
   88|      1|    if (!ENGINE_set_name(e, engine_gost_name)) {
   89|      0|        printf("ENGINE_set_name failed\n");
   90|      0|        goto end;
   91|      0|    }
   92|      1|    if (!ENGINE_set_digests(e, gost_digests)) {
   93|      0|        printf("ENGINE_set_digests failed\n");
   94|      0|        goto end;
   95|      0|    }
   96|      1|    if (!ENGINE_set_ciphers(e, gost_ciphers)) {
   97|      0|        printf("ENGINE_set_ciphers failed\n");
   98|      0|        goto end;
   99|      0|    }
  100|      1|    if (!ENGINE_set_pkey_meths(e, gost_pkey_meths)) {
  101|      0|        printf("ENGINE_set_pkey_meths failed\n");
  102|      0|        goto end;
  103|      0|    }
  104|      1|    if (!ENGINE_set_pkey_asn1_meths(e, gost_pkey_asn1_meths)) {
  105|      0|        printf("ENGINE_set_pkey_asn1_meths failed\n");
  106|      0|        goto end;
  107|      0|    }
  108|       |    /* Control function and commands */
  109|      1|    if (!ENGINE_set_cmd_defns(e, gost_cmds)) {
  110|      0|        fprintf(stderr, "ENGINE_set_cmd_defns failed\n");
  111|      0|        goto end;
  112|      0|    }
  113|      1|    if (!ENGINE_set_ctrl_function(e, gost_control_func)) {
  114|      0|        fprintf(stderr, "ENGINE_set_ctrl_func failed\n");
  115|      0|        goto end;
  116|      0|    }
  117|      1|    if (!ENGINE_set_destroy_function(e, gost_engine_destroy)
  118|      1|        || !ENGINE_set_init_function(e, gost_engine_init)
  119|      1|        || !ENGINE_set_finish_function(e, gost_engine_finish)) {
  120|      0|        goto end;
  121|      0|    }
  122|       |
  123|      1|    if (!register_ameth_gost
  124|      1|        (NID_id_GostR3410_94, &ameth_GostR3410_94, "GOST94",
  125|      1|         "GOST R 34.10-94"))
  126|      0|        goto end;
  127|      1|    if (!register_ameth_gost
  128|      1|        (NID_id_GostR3410_2001, &ameth_GostR3410_2001, "GOST2001",
  129|      1|         "GOST R 34.10-2001"))
  130|      0|        goto end;
  131|      1|    if (!register_ameth_gost(NID_id_Gost28147_89_MAC, &ameth_Gost28147_MAC,
  132|      1|                             "GOST-MAC", "GOST 28147-89 MAC"))
  133|      0|        goto end;
  134|       |
  135|      1|    if (!register_pmeth_gost(NID_id_GostR3410_94, &pmeth_GostR3410_94, 0))
  136|      0|        goto end;
  137|      1|    if (!register_pmeth_gost(NID_id_GostR3410_2001, &pmeth_GostR3410_2001, 0))
  138|      0|        goto end;
  139|      1|    if (!register_pmeth_gost
  140|      1|        (NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))
  141|      0|        goto end;
  142|      1|    if (!ENGINE_register_ciphers(e)
  143|      1|        || !ENGINE_register_digests(e)
  144|      1|        || !ENGINE_register_pkey_meths(e)
  145|       |        /* These two actually should go in LIST_ADD command */
  146|      1|        || !EVP_add_cipher(&cipher_gost)
  147|      1|        || !EVP_add_cipher(&cipher_gost_cpacnt)
  148|      1|        || !EVP_add_digest(&digest_gost)
  149|      1|        || !EVP_add_digest(&imit_gost_cpa)
  150|      1|        ) {
  151|      0|        goto end;
  152|      0|    }
  153|       |
  154|      1|    ERR_load_GOST_strings();
  155|      1|    ret = 1;
  156|      1| end:
  157|      1|    return ret;
  158|      1|}
gost_eng.c:gost_digests:
  166|      2|{
  167|      2|    int ok = 1;
  168|      2|    if (!digest) {
  169|      2|        *nids = gost_digest_nids;
  170|      2|        return 2;
  171|      2|    }
  172|       |    /*
  173|       |     * printf("Digest no %d requested\n",nid);
  174|       |     */
  175|      0|    if (nid == NID_id_GostR3411_94) {
  176|      0|        *digest = &digest_gost;
  177|      0|    } else if (nid == NID_id_Gost28147_89_MAC) {
  178|      0|        *digest = &imit_gost_cpa;
  179|      0|    } else {
  180|      0|        ok = 0;
  181|      0|        *digest = NULL;
  182|      0|    }
  183|      0|    return ok;
  184|      2|}
gost_eng.c:gost_ciphers:
  188|      2|{
  189|      2|    int ok = 1;
  190|      2|    if (!cipher) {
  191|      2|        *nids = gost_cipher_nids;
  192|      2|        return 2;               /* two ciphers are supported */
  193|      2|    }
  194|       |
  195|      0|    if (nid == NID_id_Gost28147_89) {
  196|      0|        *cipher = &cipher_gost;
  197|      0|    } else if (nid == NID_gost89_cnt) {
  198|      0|        *cipher = &cipher_gost_cpacnt;
  199|      0|    } else {
  200|      0|        ok = 0;
  201|      0|        *cipher = NULL;
  202|      0|    }
  203|      0|    return ok;
  204|      2|}
gost_eng.c:gost_pkey_meths:
  208|      2|{
  209|      2|    if (!pmeth) {
  210|      2|        *nids = gost_pkey_meth_nids;
  211|      2|        return 3;
  212|      2|    }
  213|       |
  214|      0|    switch (nid) {
  215|      0|    case NID_id_GostR3410_94:
  216|      0|        *pmeth = pmeth_GostR3410_94;
  217|      0|        return 1;
  218|      0|    case NID_id_GostR3410_2001:
  219|      0|        *pmeth = pmeth_GostR3410_2001;
  220|      0|        return 1;
  221|      0|    case NID_id_Gost28147_89_MAC:
  222|      0|        *pmeth = pmeth_Gost28147_MAC;
  223|      0|        return 1;
  224|      0|    default:;
  225|      0|    }
  226|       |
  227|      0|    *pmeth = NULL;
  228|      0|    return 0;
  229|      0|}

register_pmeth_gost:
  567|      3|{
  568|      3|    *pmeth = EVP_PKEY_meth_new(id, flags);
  569|      3|    if (!*pmeth)
  570|      0|        return 0;
  571|       |
  572|      3|    switch (id) {
  573|      1|    case NID_id_GostR3410_94:
  574|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl94_str);
  575|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost94cp_keygen);
  576|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost94_cp_sign);
  577|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost94_cp_verify);
  578|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  579|      1|                                  pkey_gost_encrypt_init,
  580|      1|                                  pkey_GOST94cp_encrypt);
  581|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST94cp_decrypt);
  582|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  583|      1|                                 pkey_gost_derive_init, pkey_gost94_derive);
  584|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  585|      1|                                   pkey_gost94_paramgen);
  586|      1|        break;
  587|      1|    case NID_id_GostR3410_2001:
  588|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl01_str);
  589|      1|        EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost01_cp_sign);
  590|      1|        EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost01_cp_verify);
  591|       |
  592|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost01cp_keygen);
  593|       |
  594|      1|        EVP_PKEY_meth_set_encrypt(*pmeth,
  595|      1|                                  pkey_gost_encrypt_init,
  596|      1|                                  pkey_GOST01cp_encrypt);
  597|      1|        EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST01cp_decrypt);
  598|      1|        EVP_PKEY_meth_set_derive(*pmeth,
  599|      1|                                 pkey_gost_derive_init, pkey_gost2001_derive);
  600|      1|        EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,
  601|      1|                                   pkey_gost01_paramgen);
  602|      1|        break;
  603|      1|    case NID_id_Gost28147_89_MAC:
  604|      1|        EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_mac_ctrl,
  605|      1|                               pkey_gost_mac_ctrl_str);
  606|      1|        EVP_PKEY_meth_set_signctx(*pmeth, pkey_gost_mac_signctx_init,
  607|      1|                                  pkey_gost_mac_signctx);
  608|      1|        EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost_mac_keygen);
  609|      1|        EVP_PKEY_meth_set_init(*pmeth, pkey_gost_mac_init);
  610|      1|        EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_mac_cleanup);
  611|      1|        EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_mac_copy);
  612|      1|        return 1;
  613|      0|    default:                   /* Unsupported method */
  614|      0|        return 0;
  615|      3|    }
  616|      2|    EVP_PKEY_meth_set_init(*pmeth, pkey_gost_init);
  617|      2|    EVP_PKEY_meth_set_cleanup(*pmeth, pkey_gost_cleanup);
  618|       |
  619|      2|    EVP_PKEY_meth_set_copy(*pmeth, pkey_gost_copy);
  620|       |    /*
  621|       |     * FIXME derive etc...
  622|       |     */
  623|       |
  624|      2|    return 1;
  625|      3|}

ENGINE_load_4758cca:
  264|      1|{
  265|      1|    ENGINE *e_4758 = engine_4758_cca();
  266|      1|    if (!e_4758)
  267|      0|        return;
  268|      1|    ENGINE_add(e_4758);
  269|      1|    ENGINE_free(e_4758);
  270|      1|    ERR_clear_error();
  271|      1|}
e_4758cca.c:engine_4758_cca:
  252|      1|{
  253|      1|    ENGINE *ret = ENGINE_new();
  254|      1|    if (!ret)
  255|      0|        return NULL;
  256|      1|    if (!bind_helper(ret)) {
  257|      0|        ENGINE_free(ret);
  258|      0|        return NULL;
  259|      0|    }
  260|      1|    return ret;
  261|      1|}
e_4758cca.c:bind_helper:
  228|      1|{
  229|      1|    if (!ENGINE_set_id(e, engine_4758_cca_id) ||
  230|      1|        !ENGINE_set_name(e, engine_4758_cca_name) ||
  231|      1|#  ifndef OPENSSL_NO_RSA
  232|      1|        !ENGINE_set_RSA(e, &ibm_4758_cca_rsa) ||
  233|      1|#  endif
  234|      1|        !ENGINE_set_RAND(e, &ibm_4758_cca_rand) ||
  235|      1|        !ENGINE_set_destroy_function(e, ibm_4758_cca_destroy) ||
  236|      1|        !ENGINE_set_init_function(e, ibm_4758_cca_init) ||
  237|      1|        !ENGINE_set_finish_function(e, ibm_4758_cca_finish) ||
  238|      1|        !ENGINE_set_ctrl_function(e, ibm_4758_cca_ctrl) ||
  239|      1|#  ifndef OPENSSL_NO_RSA
  240|      1|        !ENGINE_set_load_privkey_function(e, ibm_4758_load_privkey) ||
  241|      1|        !ENGINE_set_load_pubkey_function(e, ibm_4758_load_pubkey) ||
  242|      1|#  endif
  243|      1|        !ENGINE_set_cmd_defns(e, cca4758_cmd_defns))
  244|      0|        return 0;
  245|       |    /* Ensure the error handling is set up */
  246|      1|    ERR_load_CCA4758_strings();
  247|      1|    return 1;
  248|      1|}
e_4758cca.c:ibm_4758_cca_init:
  282|      1|{
  283|      1|    if (dso) {
  284|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_ALREADY_LOADED);
  285|      0|        goto err;
  286|      0|    }
  287|       |
  288|      1|    dso = DSO_load(NULL, get_CCA4758_LIB_NAME(), NULL, 0);
  289|      1|    if (!dso) {
  290|      1|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  291|      1|        goto err;
  292|      1|    }
  293|      0|#  ifndef OPENSSL_NO_RSA
  294|      0|    if (!(keyRecordRead = (F_KEYRECORDREAD)
  295|      0|          DSO_bind_func(dso, n_keyRecordRead)) ||
  296|      0|        !(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  297|      0|          DSO_bind_func(dso, n_randomNumberGenerate)) ||
  298|      0|        !(digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE)
  299|      0|          DSO_bind_func(dso, n_digitalSignatureGenerate)) ||
  300|      0|        !(digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)
  301|      0|          DSO_bind_func(dso, n_digitalSignatureVerify)) ||
  302|      0|        !(publicKeyExtract = (F_PUBLICKEYEXTRACT)
  303|      0|          DSO_bind_func(dso, n_publicKeyExtract)) ||
  304|      0|        !(pkaEncrypt = (F_PKAENCRYPT)
  305|      0|          DSO_bind_func(dso, n_pkaEncrypt)) || !(pkaDecrypt = (F_PKADECRYPT)
  306|      0|                                                 DSO_bind_func(dso,
  307|      0|                                                               n_pkaDecrypt)))
  308|      0|    {
  309|      0|        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  310|      0|        goto err;
  311|      0|    }
  312|       |#  else
  313|       |    if (!(randomNumberGenerate = (F_RANDOMNUMBERGENERATE)
  314|       |          DSO_bind_func(dso, n_randomNumberGenerate))) {
  315|       |        CCA4758err(CCA4758_F_IBM_4758_CCA_INIT, CCA4758_R_DSO_FAILURE);
  316|       |        goto err;
  317|       |    }
  318|       |#  endif
  319|       |
  320|      0|#  ifndef OPENSSL_NO_RSA
  321|      0|    hndidx = RSA_get_ex_new_index(0, "IBM 4758 CCA RSA key handle",
  322|      0|                                  NULL, NULL, cca_ex_free);
  323|      0|#  endif
  324|       |
  325|      0|    return 1;
  326|      1| err:
  327|      1|    if (dso)
  328|      0|        DSO_free(dso);
  329|      1|    dso = NULL;
  330|       |
  331|      1|#  ifndef OPENSSL_NO_RSA
  332|      1|    keyRecordRead = (F_KEYRECORDREAD) 0;
  333|      1|    digitalSignatureGenerate = (F_DIGITALSIGNATUREGENERATE) 0;
  334|      1|    digitalSignatureVerify = (F_DIGITALSIGNATUREVERIFY)0;
  335|      1|    publicKeyExtract = (F_PUBLICKEYEXTRACT)0;
  336|      1|    pkaEncrypt = (F_PKAENCRYPT) 0;
  337|      1|    pkaDecrypt = (F_PKADECRYPT) 0;
  338|      1|#  endif
  339|      1|    randomNumberGenerate = (F_RANDOMNUMBERGENERATE) 0;
  340|      1|    return 0;
  341|      0|}
e_4758cca.c:get_CCA4758_LIB_NAME:
  142|      1|{
  143|      1|    if (CCA4758_LIB_NAME)
  144|      0|        return CCA4758_LIB_NAME;
  145|      1|    return CCA_LIB_NAME;
  146|      1|}

e_4758cca.c:ERR_CCA4758_error:
  149|      1|{
  150|      1|    if (CCA4758_lib_error_code == 0)
  151|      0|        CCA4758_lib_error_code = ERR_get_next_error_library();
  152|      1|    ERR_PUT_error(CCA4758_lib_error_code, function, reason, file, line);
  153|      1|}
e_4758cca.c:ERR_load_CCA4758_strings:
  115|      1|{
  116|      1|    if (CCA4758_lib_error_code == 0)
  117|      1|        CCA4758_lib_error_code = ERR_get_next_error_library();
  118|       |
  119|      1|    if (CCA4758_error_init) {
  120|      1|        CCA4758_error_init = 0;
  121|      1|#ifndef OPENSSL_NO_ERR
  122|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_functs);
  123|      1|        ERR_load_strings(CCA4758_lib_error_code, CCA4758_str_reasons);
  124|      1|#endif
  125|       |
  126|       |#ifdef CCA4758_LIB_NAME
  127|       |        CCA4758_lib_name->error = ERR_PACK(CCA4758_lib_error_code, 0, 0);
  128|       |        ERR_load_strings(0, CCA4758_lib_name);
  129|       |#endif
  130|      1|    }
  131|      1|}

ENGINE_load_aep:
  373|      1|{
  374|       |    /* Copied from eng_[openssl|dyn].c */
  375|      1|    ENGINE *toadd = engine_aep();
  376|      1|    if (!toadd)
  377|      0|        return;
  378|      1|    ENGINE_add(toadd);
  379|      1|    ENGINE_free(toadd);
  380|      1|    ERR_clear_error();
  381|      1|}
e_aep.c:engine_aep:
  361|      1|{
  362|      1|    ENGINE *ret = ENGINE_new();
  363|      1|    if (!ret)
  364|      0|        return NULL;
  365|      1|    if (!bind_aep(ret)) {
  366|      0|        ENGINE_free(ret);
  367|      0|        return NULL;
  368|      0|    }
  369|      1|    return ret;
  370|      1|}
e_aep.c:bind_aep:
  271|      1|{
  272|      1|#  ifndef OPENSSL_NO_RSA
  273|      1|    const RSA_METHOD *meth1;
  274|      1|#  endif
  275|      1|#  ifndef OPENSSL_NO_DSA
  276|      1|    const DSA_METHOD *meth2;
  277|      1|#  endif
  278|      1|#  ifndef OPENSSL_NO_DH
  279|      1|    const DH_METHOD *meth3;
  280|      1|#  endif
  281|       |
  282|      1|    if (!ENGINE_set_id(e, engine_aep_id) ||
  283|      1|        !ENGINE_set_name(e, engine_aep_name) ||
  284|      1|#  ifndef OPENSSL_NO_RSA
  285|      1|        !ENGINE_set_RSA(e, &aep_rsa) ||
  286|      1|#  endif
  287|      1|#  ifndef OPENSSL_NO_DSA
  288|      1|        !ENGINE_set_DSA(e, &aep_dsa) ||
  289|      1|#  endif
  290|      1|#  ifndef OPENSSL_NO_DH
  291|      1|        !ENGINE_set_DH(e, &aep_dh) ||
  292|      1|#  endif
  293|       |#  ifdef AEPRAND
  294|       |        !ENGINE_set_RAND(e, &aep_random) ||
  295|       |#  endif
  296|      1|        !ENGINE_set_init_function(e, aep_init) ||
  297|      1|        !ENGINE_set_destroy_function(e, aep_destroy) ||
  298|      1|        !ENGINE_set_finish_function(e, aep_finish) ||
  299|      1|        !ENGINE_set_ctrl_function(e, aep_ctrl) ||
  300|      1|        !ENGINE_set_cmd_defns(e, aep_cmd_defns))
  301|      0|        return 0;
  302|       |
  303|      1|#  ifndef OPENSSL_NO_RSA
  304|       |    /*
  305|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  306|       |     * aep-specific mod_exp and mod_exp_crt so we use those functions. NB: We
  307|       |     * don't use ENGINE_openssl() or anything "more generic" because
  308|       |     * something like the RSAref code may not hook properly, and if you own
  309|       |     * one of these cards then you have the right to do RSA operations on it
  310|       |     * anyway!
  311|       |     */
  312|      1|    meth1 = RSA_PKCS1_SSLeay();
  313|      1|    aep_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  314|      1|    aep_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  315|      1|    aep_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  316|      1|    aep_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  317|      1|#  endif
  318|       |
  319|      1|#  ifndef OPENSSL_NO_DSA
  320|       |    /*
  321|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  322|       |     */
  323|      1|    meth2 = DSA_OpenSSL();
  324|      1|    aep_dsa.dsa_do_sign = meth2->dsa_do_sign;
  325|      1|    aep_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  326|      1|    aep_dsa.dsa_do_verify = meth2->dsa_do_verify;
  327|       |
  328|      1|    aep_dsa = *DSA_get_default_method();
  329|      1|    aep_dsa.dsa_mod_exp = aep_dsa_mod_exp;
  330|      1|    aep_dsa.bn_mod_exp = aep_mod_exp_dsa;
  331|      1|#  endif
  332|       |
  333|      1|#  ifndef OPENSSL_NO_DH
  334|       |    /* Much the same for Diffie-Hellman */
  335|      1|    meth3 = DH_OpenSSL();
  336|      1|    aep_dh.generate_key = meth3->generate_key;
  337|      1|    aep_dh.compute_key = meth3->compute_key;
  338|      1|    aep_dh.bn_mod_exp = meth3->bn_mod_exp;
  339|      1|#  endif
  340|       |
  341|       |    /* Ensure the aep error handling is set up */
  342|      1|    ERR_load_AEPHK_strings();
  343|       |
  344|      1|    return 1;
  345|      1|}

e_aep.c:ERR_load_AEPHK_strings:
  121|      1|{
  122|      1|    if (AEPHK_lib_error_code == 0)
  123|      1|        AEPHK_lib_error_code = ERR_get_next_error_library();
  124|       |
  125|      1|    if (AEPHK_error_init) {
  126|      1|        AEPHK_error_init = 0;
  127|      1|#ifndef OPENSSL_NO_ERR
  128|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_functs);
  129|      1|        ERR_load_strings(AEPHK_lib_error_code, AEPHK_str_reasons);
  130|      1|#endif
  131|       |
  132|       |#ifdef AEPHK_LIB_NAME
  133|       |        AEPHK_lib_name->error = ERR_PACK(AEPHK_lib_error_code, 0, 0);
  134|       |        ERR_load_strings(0, AEPHK_lib_name);
  135|       |#endif
  136|      1|    }
  137|      1|}

ENGINE_load_atalla:
  279|      1|{
  280|       |    /* Copied from eng_[openssl|dyn].c */
  281|      1|    ENGINE *toadd = engine_atalla();
  282|      1|    if (!toadd)
  283|      0|        return;
  284|      1|    ENGINE_add(toadd);
  285|      1|    ENGINE_free(toadd);
  286|      1|    ERR_clear_error();
  287|      1|}
e_atalla.c:engine_atalla:
  267|      1|{
  268|      1|    ENGINE *ret = ENGINE_new();
  269|      1|    if (!ret)
  270|      0|        return NULL;
  271|      1|    if (!bind_helper(ret)) {
  272|      0|        ENGINE_free(ret);
  273|      0|        return NULL;
  274|      0|    }
  275|      1|    return ret;
  276|      1|}
e_atalla.c:bind_helper:
  199|      1|{
  200|      1|#  ifndef OPENSSL_NO_RSA
  201|      1|    const RSA_METHOD *meth1;
  202|      1|#  endif
  203|      1|#  ifndef OPENSSL_NO_DSA
  204|      1|    const DSA_METHOD *meth2;
  205|      1|#  endif
  206|      1|#  ifndef OPENSSL_NO_DH
  207|      1|    const DH_METHOD *meth3;
  208|      1|#  endif
  209|      1|    if (!ENGINE_set_id(e, engine_atalla_id) ||
  210|      1|        !ENGINE_set_name(e, engine_atalla_name) ||
  211|      1|#  ifndef OPENSSL_NO_RSA
  212|      1|        !ENGINE_set_RSA(e, &atalla_rsa) ||
  213|      1|#  endif
  214|      1|#  ifndef OPENSSL_NO_DSA
  215|      1|        !ENGINE_set_DSA(e, &atalla_dsa) ||
  216|      1|#  endif
  217|      1|#  ifndef OPENSSL_NO_DH
  218|      1|        !ENGINE_set_DH(e, &atalla_dh) ||
  219|      1|#  endif
  220|      1|        !ENGINE_set_destroy_function(e, atalla_destroy) ||
  221|      1|        !ENGINE_set_init_function(e, atalla_init) ||
  222|      1|        !ENGINE_set_finish_function(e, atalla_finish) ||
  223|      1|        !ENGINE_set_ctrl_function(e, atalla_ctrl) ||
  224|      1|        !ENGINE_set_cmd_defns(e, atalla_cmd_defns))
  225|      0|        return 0;
  226|       |
  227|      1|#  ifndef OPENSSL_NO_RSA
  228|       |    /*
  229|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  230|       |     * atalla-specific mod_exp and mod_exp_crt so we use those functions. NB:
  231|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  232|       |     * something like the RSAref code may not hook properly, and if you own
  233|       |     * one of these cards then you have the right to do RSA operations on it
  234|       |     * anyway!
  235|       |     */
  236|      1|    meth1 = RSA_PKCS1_SSLeay();
  237|      1|    atalla_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  238|      1|    atalla_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  239|      1|    atalla_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  240|      1|    atalla_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  241|      1|#  endif
  242|       |
  243|      1|#  ifndef OPENSSL_NO_DSA
  244|       |    /*
  245|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  246|       |     */
  247|      1|    meth2 = DSA_OpenSSL();
  248|      1|    atalla_dsa.dsa_do_sign = meth2->dsa_do_sign;
  249|      1|    atalla_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  250|      1|    atalla_dsa.dsa_do_verify = meth2->dsa_do_verify;
  251|      1|#  endif
  252|       |
  253|      1|#  ifndef OPENSSL_NO_DH
  254|       |    /* Much the same for Diffie-Hellman */
  255|      1|    meth3 = DH_OpenSSL();
  256|      1|    atalla_dh.generate_key = meth3->generate_key;
  257|      1|    atalla_dh.compute_key = meth3->compute_key;
  258|      1|#  endif
  259|       |
  260|       |    /* Ensure the atalla error handling is set up */
  261|      1|    ERR_load_ATALLA_strings();
  262|      1|    return 1;
  263|      1|}

e_atalla.c:ERR_load_ATALLA_strings:
  107|      1|{
  108|      1|    if (ATALLA_lib_error_code == 0)
  109|      1|        ATALLA_lib_error_code = ERR_get_next_error_library();
  110|       |
  111|      1|    if (ATALLA_error_init) {
  112|      1|        ATALLA_error_init = 0;
  113|      1|#ifndef OPENSSL_NO_ERR
  114|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_functs);
  115|      1|        ERR_load_strings(ATALLA_lib_error_code, ATALLA_str_reasons);
  116|      1|#endif
  117|       |
  118|      1|#ifdef ATALLA_LIB_NAME
  119|      1|        ATALLA_lib_name->error = ERR_PACK(ATALLA_lib_error_code, 0, 0);
  120|      1|        ERR_load_strings(0, ATALLA_lib_name);
  121|      1|#endif
  122|      1|    }
  123|      1|}

ENGINE_load_chil:
  419|      1|{
  420|       |    /* Copied from eng_[openssl|dyn].c */
  421|      1|    ENGINE *toadd = engine_chil();
  422|      1|    if (!toadd)
  423|      0|        return;
  424|      1|    ENGINE_add(toadd);
  425|      1|    ENGINE_free(toadd);
  426|      1|    ERR_clear_error();
  427|      1|}
e_chil.c:engine_chil:
  407|      1|{
  408|      1|    ENGINE *ret = ENGINE_new();
  409|      1|    if (!ret)
  410|      0|        return NULL;
  411|      1|    if (!bind_helper(ret)) {
  412|      0|        ENGINE_free(ret);
  413|      0|        return NULL;
  414|      0|    }
  415|      1|    return ret;
  416|      1|}
e_chil.c:bind_helper:
  352|      1|{
  353|      1|#  ifndef OPENSSL_NO_RSA
  354|      1|    const RSA_METHOD *meth1;
  355|      1|#  endif
  356|      1|#  ifndef OPENSSL_NO_DH
  357|      1|    const DH_METHOD *meth2;
  358|      1|#  endif
  359|      1|    if (!ENGINE_set_id(e, engine_hwcrhk_id) ||
  360|      1|        !ENGINE_set_name(e, engine_hwcrhk_name) ||
  361|      1|#  ifndef OPENSSL_NO_RSA
  362|      1|        !ENGINE_set_RSA(e, &hwcrhk_rsa) ||
  363|      1|#  endif
  364|      1|#  ifndef OPENSSL_NO_DH
  365|      1|        !ENGINE_set_DH(e, &hwcrhk_dh) ||
  366|      1|#  endif
  367|      1|        !ENGINE_set_RAND(e, &hwcrhk_rand) ||
  368|      1|        !ENGINE_set_destroy_function(e, hwcrhk_destroy) ||
  369|      1|        !ENGINE_set_init_function(e, hwcrhk_init) ||
  370|      1|        !ENGINE_set_finish_function(e, hwcrhk_finish) ||
  371|      1|        !ENGINE_set_ctrl_function(e, hwcrhk_ctrl) ||
  372|      1|        !ENGINE_set_load_privkey_function(e, hwcrhk_load_privkey) ||
  373|      1|        !ENGINE_set_load_pubkey_function(e, hwcrhk_load_pubkey) ||
  374|      1|        !ENGINE_set_cmd_defns(e, hwcrhk_cmd_defns))
  375|      0|        return 0;
  376|       |
  377|      1|#  ifndef OPENSSL_NO_RSA
  378|       |    /*
  379|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  380|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  381|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  382|       |     * something like the RSAref code may not hook properly, and if you own
  383|       |     * one of these cards then you have the right to do RSA operations on it
  384|       |     * anyway!
  385|       |     */
  386|      1|    meth1 = RSA_PKCS1_SSLeay();
  387|      1|    hwcrhk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  388|      1|    hwcrhk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  389|      1|    hwcrhk_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  390|      1|    hwcrhk_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  391|      1|#  endif
  392|       |
  393|      1|#  ifndef OPENSSL_NO_DH
  394|       |    /* Much the same for Diffie-Hellman */
  395|      1|    meth2 = DH_OpenSSL();
  396|      1|    hwcrhk_dh.generate_key = meth2->generate_key;
  397|      1|    hwcrhk_dh.compute_key = meth2->compute_key;
  398|      1|#  endif
  399|       |
  400|       |    /* Ensure the hwcrhk error handling is set up */
  401|      1|    ERR_load_HWCRHK_strings();
  402|      1|    return 1;
  403|      1|}
e_chil.c:hwcrhk_init:
  536|      1|{
  537|      1|    HWCryptoHook_Init_t *p1;
  538|      1|    HWCryptoHook_Finish_t *p2;
  539|      1|    HWCryptoHook_ModExp_t *p3;
  540|      1|#  ifndef OPENSSL_NO_RSA
  541|      1|    HWCryptoHook_RSA_t *p4;
  542|      1|    HWCryptoHook_RSALoadKey_t *p5;
  543|      1|    HWCryptoHook_RSAGetPublicKey_t *p6;
  544|      1|    HWCryptoHook_RSAUnloadKey_t *p7;
  545|      1|#  endif
  546|      1|    HWCryptoHook_RandomBytes_t *p8;
  547|      1|    HWCryptoHook_ModExpCRT_t *p9;
  548|       |
  549|      1|    if (hwcrhk_dso != NULL) {
  550|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_ALREADY_LOADED);
  551|      0|        goto err;
  552|      0|    }
  553|       |    /* Attempt to load libnfhwcrhk.so/nfhwcrhk.dll/whatever. */
  554|      1|    hwcrhk_dso = DSO_load(NULL, get_HWCRHK_LIBNAME(), NULL, 0);
  555|      1|    if (hwcrhk_dso == NULL) {
  556|      1|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  557|      1|        goto err;
  558|      1|    }
  559|      0|    if (!(p1 = (HWCryptoHook_Init_t *)
  560|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Init)) ||
  561|      0|        !(p2 = (HWCryptoHook_Finish_t *)
  562|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_Finish)) ||
  563|      0|        !(p3 = (HWCryptoHook_ModExp_t *)
  564|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExp)) ||
  565|      0|#  ifndef OPENSSL_NO_RSA
  566|      0|        !(p4 = (HWCryptoHook_RSA_t *)
  567|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSA)) ||
  568|      0|        !(p5 = (HWCryptoHook_RSALoadKey_t *)
  569|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSALoadKey)) ||
  570|      0|        !(p6 = (HWCryptoHook_RSAGetPublicKey_t *)
  571|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAGetPublicKey)) ||
  572|      0|        !(p7 = (HWCryptoHook_RSAUnloadKey_t *)
  573|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RSAUnloadKey)) ||
  574|      0|#  endif
  575|      0|        !(p8 = (HWCryptoHook_RandomBytes_t *)
  576|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_RandomBytes)) ||
  577|      0|        !(p9 = (HWCryptoHook_ModExpCRT_t *)
  578|      0|          DSO_bind_func(hwcrhk_dso, n_hwcrhk_ModExpCRT))) {
  579|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_DSO_FAILURE);
  580|      0|        goto err;
  581|      0|    }
  582|       |    /* Copy the pointers */
  583|      0|    p_hwcrhk_Init = p1;
  584|      0|    p_hwcrhk_Finish = p2;
  585|      0|    p_hwcrhk_ModExp = p3;
  586|      0|#  ifndef OPENSSL_NO_RSA
  587|      0|    p_hwcrhk_RSA = p4;
  588|      0|    p_hwcrhk_RSALoadKey = p5;
  589|      0|    p_hwcrhk_RSAGetPublicKey = p6;
  590|      0|    p_hwcrhk_RSAUnloadKey = p7;
  591|      0|#  endif
  592|      0|    p_hwcrhk_RandomBytes = p8;
  593|      0|    p_hwcrhk_ModExpCRT = p9;
  594|       |
  595|       |    /*
  596|       |     * Check if the application decided to support dynamic locks, and if it
  597|       |     * does, use them.
  598|       |     */
  599|      0|    if (disable_mutex_callbacks == 0) {
  600|      0|        if (CRYPTO_get_dynlock_create_callback() != NULL &&
  601|      0|            CRYPTO_get_dynlock_lock_callback() != NULL &&
  602|      0|            CRYPTO_get_dynlock_destroy_callback() != NULL) {
  603|      0|            hwcrhk_globals.mutex_init = hwcrhk_mutex_init;
  604|      0|            hwcrhk_globals.mutex_acquire = hwcrhk_mutex_lock;
  605|      0|            hwcrhk_globals.mutex_release = hwcrhk_mutex_unlock;
  606|      0|            hwcrhk_globals.mutex_destroy = hwcrhk_mutex_destroy;
  607|      0|        }
  608|      0|    }
  609|       |
  610|       |    /*
  611|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  612|       |     */
  613|      0|    if (!get_context(&hwcrhk_context, &password_context)) {
  614|      0|        HWCRHKerr(HWCRHK_F_HWCRHK_INIT, HWCRHK_R_UNIT_FAILURE);
  615|      0|        goto err;
  616|      0|    }
  617|       |    /* Everything's fine. */
  618|      0|#  ifndef OPENSSL_NO_RSA
  619|      0|    if (hndidx_rsa == -1)
  620|      0|        hndidx_rsa = RSA_get_ex_new_index(0,
  621|      0|                                          "nFast HWCryptoHook RSA key handle",
  622|      0|                                          NULL, NULL, NULL);
  623|      0|#  endif
  624|      0|    return 1;
  625|      1| err:
  626|      1|    if (hwcrhk_dso)
  627|      0|        DSO_free(hwcrhk_dso);
  628|      1|    hwcrhk_dso = NULL;
  629|      1|    p_hwcrhk_Init = NULL;
  630|      1|    p_hwcrhk_Finish = NULL;
  631|      1|    p_hwcrhk_ModExp = NULL;
  632|      1|#  ifndef OPENSSL_NO_RSA
  633|      1|    p_hwcrhk_RSA = NULL;
  634|      1|    p_hwcrhk_RSALoadKey = NULL;
  635|      1|    p_hwcrhk_RSAGetPublicKey = NULL;
  636|      1|    p_hwcrhk_RSAUnloadKey = NULL;
  637|      1|#  endif
  638|      1|    p_hwcrhk_ModExpCRT = NULL;
  639|      1|    p_hwcrhk_RandomBytes = NULL;
  640|      1|    return 0;
  641|      0|}
e_chil.c:get_HWCRHK_LIBNAME:
  471|      1|{
  472|      1|    if (HWCRHK_LIBNAME)
  473|      0|        return HWCRHK_LIBNAME;
  474|      1|    return "nfhwcrhk";
  475|      1|}

e_chil.c:ERR_HWCRHK_error:
  153|      1|{
  154|      1|    if (HWCRHK_lib_error_code == 0)
  155|      0|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  156|      1|    ERR_PUT_error(HWCRHK_lib_error_code, function, reason, file, line);
  157|      1|}
e_chil.c:ERR_load_HWCRHK_strings:
  119|      1|{
  120|      1|    if (HWCRHK_lib_error_code == 0)
  121|      1|        HWCRHK_lib_error_code = ERR_get_next_error_library();
  122|       |
  123|      1|    if (HWCRHK_error_init) {
  124|      1|        HWCRHK_error_init = 0;
  125|      1|#ifndef OPENSSL_NO_ERR
  126|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_functs);
  127|      1|        ERR_load_strings(HWCRHK_lib_error_code, HWCRHK_str_reasons);
  128|      1|#endif
  129|       |
  130|      1|#ifdef HWCRHK_LIB_NAME
  131|      1|        HWCRHK_lib_name->error = ERR_PACK(HWCRHK_lib_error_code, 0, 0);
  132|      1|        ERR_load_strings(0, HWCRHK_lib_name);
  133|      1|#endif
  134|      1|    }
  135|      1|}

ENGINE_load_cswift:
  302|      1|{
  303|       |    /* Copied from eng_[openssl|dyn].c */
  304|      1|    ENGINE *toadd = engine_cswift();
  305|      1|    if (!toadd)
  306|      0|        return;
  307|      1|    ENGINE_add(toadd);
  308|      1|    ENGINE_free(toadd);
  309|      1|    ERR_clear_error();
  310|      1|}
e_cswift.c:engine_cswift:
  290|      1|{
  291|      1|    ENGINE *ret = ENGINE_new();
  292|      1|    if (!ret)
  293|      0|        return NULL;
  294|      1|    if (!bind_helper(ret)) {
  295|      0|        ENGINE_free(ret);
  296|      0|        return NULL;
  297|      0|    }
  298|      1|    return ret;
  299|      1|}
e_cswift.c:bind_helper:
  234|      1|{
  235|      1|#  ifndef OPENSSL_NO_RSA
  236|      1|    const RSA_METHOD *meth1;
  237|      1|#  endif
  238|      1|#  ifndef OPENSSL_NO_DH
  239|      1|    const DH_METHOD *meth2;
  240|      1|#  endif
  241|      1|    if (!ENGINE_set_id(e, engine_cswift_id) ||
  242|      1|        !ENGINE_set_name(e, engine_cswift_name) ||
  243|      1|#  ifndef OPENSSL_NO_RSA
  244|      1|        !ENGINE_set_RSA(e, &cswift_rsa) ||
  245|      1|#  endif
  246|      1|#  ifndef OPENSSL_NO_DSA
  247|      1|        !ENGINE_set_DSA(e, &cswift_dsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DH
  250|      1|        !ENGINE_set_DH(e, &cswift_dh) ||
  251|      1|#  endif
  252|      1|        !ENGINE_set_RAND(e, &cswift_random) ||
  253|      1|        !ENGINE_set_destroy_function(e, cswift_destroy) ||
  254|      1|        !ENGINE_set_init_function(e, cswift_init) ||
  255|      1|        !ENGINE_set_finish_function(e, cswift_finish) ||
  256|      1|        !ENGINE_set_ctrl_function(e, cswift_ctrl) ||
  257|      1|        !ENGINE_set_cmd_defns(e, cswift_cmd_defns))
  258|      0|        return 0;
  259|       |
  260|      1|#  ifndef OPENSSL_NO_RSA
  261|       |    /*
  262|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  263|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  264|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  265|       |     * something like the RSAref code may not hook properly, and if you own
  266|       |     * one of these cards then you have the right to do RSA operations on it
  267|       |     * anyway!
  268|       |     */
  269|      1|    meth1 = RSA_PKCS1_SSLeay();
  270|      1|    cswift_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  271|      1|    cswift_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  272|      1|    cswift_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  273|      1|    cswift_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  274|      1|#  endif
  275|       |
  276|      1|#  ifndef OPENSSL_NO_DH
  277|       |    /* Much the same for Diffie-Hellman */
  278|      1|    meth2 = DH_OpenSSL();
  279|      1|    cswift_dh.generate_key = meth2->generate_key;
  280|      1|    cswift_dh.compute_key = meth2->compute_key;
  281|      1|#  endif
  282|       |
  283|       |    /* Ensure the cswift error handling is set up */
  284|      1|    ERR_load_CSWIFT_strings();
  285|      1|    return 1;
  286|      1|}
e_cswift.c:cswift_init:
  391|      1|{
  392|      1|    SW_CONTEXT_HANDLE hac;
  393|      1|    t_swAcquireAccContext *p1;
  394|      1|    t_swAttachKeyParam *p2;
  395|      1|    t_swSimpleRequest *p3;
  396|      1|    t_swReleaseAccContext *p4;
  397|       |
  398|      1|    if (cswift_dso != NULL) {
  399|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_ALREADY_LOADED);
  400|      0|        goto err;
  401|      0|    }
  402|       |    /* Attempt to load libswift.so/swift.dll/whatever. */
  403|      1|    cswift_dso = DSO_load(NULL, get_CSWIFT_LIBNAME(), NULL, 0);
  404|      1|    if (cswift_dso == NULL) {
  405|      1|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  406|      1|        goto err;
  407|      1|    }
  408|      0|    if (!(p1 = (t_swAcquireAccContext *)
  409|      0|          DSO_bind_func(cswift_dso, CSWIFT_F1)) ||
  410|      0|        !(p2 = (t_swAttachKeyParam *)
  411|      0|          DSO_bind_func(cswift_dso, CSWIFT_F2)) ||
  412|      0|        !(p3 = (t_swSimpleRequest *)
  413|      0|          DSO_bind_func(cswift_dso, CSWIFT_F3)) ||
  414|      0|        !(p4 = (t_swReleaseAccContext *)
  415|      0|          DSO_bind_func(cswift_dso, CSWIFT_F4))) {
  416|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_NOT_LOADED);
  417|      0|        goto err;
  418|      0|    }
  419|       |    /* Copy the pointers */
  420|      0|    p_CSwift_AcquireAccContext = p1;
  421|      0|    p_CSwift_AttachKeyParam = p2;
  422|      0|    p_CSwift_SimpleRequest = p3;
  423|      0|    p_CSwift_ReleaseAccContext = p4;
  424|       |    /*
  425|       |     * Try and get a context - if not, we may have a DSO but no accelerator!
  426|       |     */
  427|      0|    if (!get_context(&hac)) {
  428|      0|        CSWIFTerr(CSWIFT_F_CSWIFT_INIT, CSWIFT_R_UNIT_FAILURE);
  429|      0|        goto err;
  430|      0|    }
  431|      0|    release_context(hac);
  432|       |    /* Everything's fine. */
  433|      0|    return 1;
  434|      1| err:
  435|      1|    if (cswift_dso) {
  436|      0|        DSO_free(cswift_dso);
  437|      0|        cswift_dso = NULL;
  438|      0|    }
  439|      1|    p_CSwift_AcquireAccContext = NULL;
  440|      1|    p_CSwift_AttachKeyParam = NULL;
  441|      1|    p_CSwift_SimpleRequest = NULL;
  442|      1|    p_CSwift_ReleaseAccContext = NULL;
  443|      1|    return 0;
  444|      0|}
e_cswift.c:get_CSWIFT_LIBNAME:
  333|      1|{
  334|      1|    if (CSWIFT_LIBNAME)
  335|      0|        return CSWIFT_LIBNAME;
  336|      1|    return "swift";
  337|      1|}

e_cswift.c:ERR_CSWIFT_error:
  146|      1|{
  147|      1|    if (CSWIFT_lib_error_code == 0)
  148|      0|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  149|      1|    ERR_PUT_error(CSWIFT_lib_error_code, function, reason, file, line);
  150|      1|}
e_cswift.c:ERR_load_CSWIFT_strings:
  112|      1|{
  113|      1|    if (CSWIFT_lib_error_code == 0)
  114|      1|        CSWIFT_lib_error_code = ERR_get_next_error_library();
  115|       |
  116|      1|    if (CSWIFT_error_init) {
  117|      1|        CSWIFT_error_init = 0;
  118|      1|#ifndef OPENSSL_NO_ERR
  119|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_functs);
  120|      1|        ERR_load_strings(CSWIFT_lib_error_code, CSWIFT_str_reasons);
  121|      1|#endif
  122|       |
  123|      1|#ifdef CSWIFT_LIB_NAME
  124|      1|        CSWIFT_lib_name->error = ERR_PACK(CSWIFT_lib_error_code, 0, 0);
  125|      1|        ERR_load_strings(0, CSWIFT_lib_name);
  126|      1|#endif
  127|      1|    }
  128|      1|}

ENGINE_load_nuron:
  407|      1|{
  408|       |    /* Copied from eng_[openssl|dyn].c */
  409|      1|    ENGINE *toadd = engine_nuron();
  410|      1|    if (!toadd)
  411|      0|        return;
  412|      1|    ENGINE_add(toadd);
  413|      1|    ENGINE_free(toadd);
  414|      1|    ERR_clear_error();
  415|      1|}
e_nuron.c:engine_nuron:
  395|      1|{
  396|      1|    ENGINE *ret = ENGINE_new();
  397|      1|    if (!ret)
  398|      0|        return NULL;
  399|      1|    if (!bind_helper(ret)) {
  400|      0|        ENGINE_free(ret);
  401|      0|        return NULL;
  402|      0|    }
  403|      1|    return ret;
  404|      1|}
e_nuron.c:bind_helper:
  327|      1|{
  328|      1|#  ifndef OPENSSL_NO_RSA
  329|      1|    const RSA_METHOD *meth1;
  330|      1|#  endif
  331|      1|#  ifndef OPENSSL_NO_DSA
  332|      1|    const DSA_METHOD *meth2;
  333|      1|#  endif
  334|      1|#  ifndef OPENSSL_NO_DH
  335|      1|    const DH_METHOD *meth3;
  336|      1|#  endif
  337|      1|    if (!ENGINE_set_id(e, engine_nuron_id) ||
  338|      1|        !ENGINE_set_name(e, engine_nuron_name) ||
  339|      1|#  ifndef OPENSSL_NO_RSA
  340|      1|        !ENGINE_set_RSA(e, &nuron_rsa) ||
  341|      1|#  endif
  342|      1|#  ifndef OPENSSL_NO_DSA
  343|      1|        !ENGINE_set_DSA(e, &nuron_dsa) ||
  344|      1|#  endif
  345|      1|#  ifndef OPENSSL_NO_DH
  346|      1|        !ENGINE_set_DH(e, &nuron_dh) ||
  347|      1|#  endif
  348|      1|        !ENGINE_set_destroy_function(e, nuron_destroy) ||
  349|      1|        !ENGINE_set_init_function(e, nuron_init) ||
  350|      1|        !ENGINE_set_finish_function(e, nuron_finish) ||
  351|      1|        !ENGINE_set_ctrl_function(e, nuron_ctrl) ||
  352|      1|        !ENGINE_set_cmd_defns(e, nuron_cmd_defns))
  353|      0|        return 0;
  354|       |
  355|      1|#  ifndef OPENSSL_NO_RSA
  356|       |    /*
  357|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  358|       |     * nuron-specific mod_exp and mod_exp_crt so we use those functions. NB:
  359|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  360|       |     * something like the RSAref code may not hook properly, and if you own
  361|       |     * one of these cards then you have the right to do RSA operations on it
  362|       |     * anyway!
  363|       |     */
  364|      1|    meth1 = RSA_PKCS1_SSLeay();
  365|      1|    nuron_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  366|      1|    nuron_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  367|      1|    nuron_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  368|      1|    nuron_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  369|      1|#  endif
  370|       |
  371|      1|#  ifndef OPENSSL_NO_DSA
  372|       |    /*
  373|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  374|       |     */
  375|      1|    meth2 = DSA_OpenSSL();
  376|      1|    nuron_dsa.dsa_do_sign = meth2->dsa_do_sign;
  377|      1|    nuron_dsa.dsa_sign_setup = meth2->dsa_sign_setup;
  378|      1|    nuron_dsa.dsa_do_verify = meth2->dsa_do_verify;
  379|      1|#  endif
  380|       |
  381|      1|#  ifndef OPENSSL_NO_DH
  382|       |    /* Much the same for Diffie-Hellman */
  383|      1|    meth3 = DH_OpenSSL();
  384|      1|    nuron_dh.generate_key = meth3->generate_key;
  385|      1|    nuron_dh.compute_key = meth3->compute_key;
  386|      1|#  endif
  387|       |
  388|       |    /* Ensure the nuron error handling is set up */
  389|      1|    ERR_load_NURON_strings();
  390|      1|    return 1;
  391|      1|}

e_nuron.c:ERR_load_NURON_strings:
  104|      1|{
  105|      1|    if (NURON_lib_error_code == 0)
  106|      1|        NURON_lib_error_code = ERR_get_next_error_library();
  107|       |
  108|      1|    if (NURON_error_init) {
  109|      1|        NURON_error_init = 0;
  110|      1|#ifndef OPENSSL_NO_ERR
  111|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_functs);
  112|      1|        ERR_load_strings(NURON_lib_error_code, NURON_str_reasons);
  113|      1|#endif
  114|       |
  115|      1|#ifdef NURON_LIB_NAME
  116|      1|        NURON_lib_name->error = ERR_PACK(NURON_lib_error_code, 0, 0);
  117|      1|        ERR_load_strings(0, NURON_lib_name);
  118|      1|#endif
  119|      1|    }
  120|      1|}

ENGINE_load_padlock:
  116|      1|{
  117|       |/* On non-x86 CPUs it just returns. */
  118|       |#   ifdef COMPILE_HW_PADLOCK
  119|       |    ENGINE *toadd = ENGINE_padlock();
  120|       |    if (!toadd)
  121|       |        return;
  122|       |    ENGINE_add(toadd);
  123|       |    ENGINE_free(toadd);
  124|       |    ERR_clear_error();
  125|       |#   endif
  126|      1|}

ENGINE_load_sureware:
  330|      1|{
  331|       |    /* Copied from eng_[openssl|dyn].c */
  332|      1|    ENGINE *toadd = engine_sureware();
  333|      1|    if (!toadd)
  334|      0|        return;
  335|      1|    ENGINE_add(toadd);
  336|      1|    ENGINE_free(toadd);
  337|      1|    ERR_clear_error();
  338|      1|}
e_sureware.c:engine_sureware:
  318|      1|{
  319|      1|    ENGINE *ret = ENGINE_new();
  320|      1|    if (!ret)
  321|      0|        return NULL;
  322|      1|    if (!bind_sureware(ret)) {
  323|      0|        ENGINE_free(ret);
  324|      0|        return NULL;
  325|      0|    }
  326|      1|    return ret;
  327|      1|}
e_sureware.c:bind_sureware:
  233|      1|{
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|      1|    const RSA_METHOD *meth1;
  236|      1|#  endif
  237|      1|#  ifndef OPENSSL_NO_DSA
  238|      1|    const DSA_METHOD *meth2;
  239|      1|#  endif
  240|      1|#  ifndef OPENSSL_NO_DH
  241|      1|    const DH_METHOD *meth3;
  242|      1|#  endif
  243|       |
  244|      1|    if (!ENGINE_set_id(e, engine_sureware_id) ||
  245|      1|        !ENGINE_set_name(e, engine_sureware_name) ||
  246|      1|#  ifndef OPENSSL_NO_RSA
  247|      1|        !ENGINE_set_RSA(e, &surewarehk_rsa) ||
  248|      1|#  endif
  249|      1|#  ifndef OPENSSL_NO_DSA
  250|      1|        !ENGINE_set_DSA(e, &surewarehk_dsa) ||
  251|      1|#  endif
  252|      1|#  ifndef OPENSSL_NO_DH
  253|      1|        !ENGINE_set_DH(e, &surewarehk_dh) ||
  254|      1|#  endif
  255|      1|        !ENGINE_set_RAND(e, &surewarehk_rand) ||
  256|      1|        !ENGINE_set_destroy_function(e, surewarehk_destroy) ||
  257|      1|        !ENGINE_set_init_function(e, surewarehk_init) ||
  258|      1|        !ENGINE_set_finish_function(e, surewarehk_finish) ||
  259|      1|        !ENGINE_set_ctrl_function(e, surewarehk_ctrl) ||
  260|      1|        !ENGINE_set_load_privkey_function(e, surewarehk_load_privkey) ||
  261|      1|        !ENGINE_set_load_pubkey_function(e, surewarehk_load_pubkey))
  262|      0|        return 0;
  263|       |
  264|      1|#  ifndef OPENSSL_NO_RSA
  265|       |    /*
  266|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  267|       |     * cswift-specific mod_exp and mod_exp_crt so we use those functions. NB:
  268|       |     * We don't use ENGINE_openssl() or anything "more generic" because
  269|       |     * something like the RSAref code may not hook properly, and if you own
  270|       |     * one of these cards then you have the right to do RSA operations on it
  271|       |     * anyway!
  272|       |     */
  273|      1|    meth1 = RSA_PKCS1_SSLeay();
  274|      1|    if (meth1) {
  275|      1|        surewarehk_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  276|      1|        surewarehk_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  277|      1|    }
  278|      1|#  endif
  279|       |
  280|      1|#  ifndef OPENSSL_NO_DSA
  281|       |    /*
  282|       |     * Use the DSA_OpenSSL() method and just hook the mod_exp-ish bits.
  283|       |     */
  284|      1|    meth2 = DSA_OpenSSL();
  285|      1|    if (meth2) {
  286|      1|        surewarehk_dsa.dsa_do_verify = meth2->dsa_do_verify;
  287|      1|    }
  288|      1|#  endif
  289|       |
  290|      1|#  ifndef OPENSSL_NO_DH
  291|       |    /* Much the same for Diffie-Hellman */
  292|      1|    meth3 = DH_OpenSSL();
  293|      1|    if (meth3) {
  294|      1|        surewarehk_dh.generate_key = meth3->generate_key;
  295|      1|        surewarehk_dh.compute_key = meth3->compute_key;
  296|      1|    }
  297|      1|#  endif
  298|       |
  299|       |    /* Ensure the sureware error handling is set up */
  300|      1|    ERR_load_SUREWARE_strings();
  301|      1|    return 1;
  302|      1|}
e_sureware.c:surewarehk_init:
  456|      1|{
  457|      1|    char msg[64] = "ENGINE_init";
  458|      1|    SureWareHook_Init_t *p1 = NULL;
  459|      1|    SureWareHook_Finish_t *p2 = NULL;
  460|      1|    SureWareHook_Rand_Bytes_t *p3 = NULL;
  461|      1|    SureWareHook_Rand_Seed_t *p4 = NULL;
  462|      1|    SureWareHook_Load_Privkey_t *p5 = NULL;
  463|      1|    SureWareHook_Load_Rsa_Pubkey_t *p6 = NULL;
  464|      1|    SureWareHook_Free_t *p7 = NULL;
  465|      1|    SureWareHook_Rsa_Priv_Dec_t *p8 = NULL;
  466|      1|    SureWareHook_Rsa_Sign_t *p9 = NULL;
  467|      1|    SureWareHook_Dsa_Sign_t *p12 = NULL;
  468|      1|    SureWareHook_Info_Pubkey_t *p13 = NULL;
  469|      1|    SureWareHook_Load_Dsa_Pubkey_t *p14 = NULL;
  470|      1|    SureWareHook_Mod_Exp_t *p15 = NULL;
  471|       |
  472|      1|    if (surewarehk_dso != NULL) {
  473|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_ALREADY_LOADED);
  474|      0|        goto err;
  475|      0|    }
  476|       |    /* Attempt to load libsurewarehk.so/surewarehk.dll/whatever. */
  477|      1|    surewarehk_dso = DSO_load(NULL, surewarehk_LIBNAME, NULL, 0);
  478|      1|    if (surewarehk_dso == NULL) {
  479|      1|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  480|      1|        goto err;
  481|      1|    }
  482|      0|    if (!
  483|      0|        (p1 =
  484|      0|         (SureWareHook_Init_t *) DSO_bind_func(surewarehk_dso,
  485|      0|                                               n_surewarehk_Init))
  486|      0||| !(p2 =
  487|      0|     (SureWareHook_Finish_t *) DSO_bind_func(surewarehk_dso,
  488|      0|                                             n_surewarehk_Finish))
  489|      0||| !(p3 =
  490|      0|     (SureWareHook_Rand_Bytes_t *) DSO_bind_func(surewarehk_dso,
  491|      0|                                                 n_surewarehk_Rand_Bytes))
  492|      0||| !(p4 =
  493|      0|     (SureWareHook_Rand_Seed_t *) DSO_bind_func(surewarehk_dso,
  494|      0|                                                n_surewarehk_Rand_Seed))
  495|      0||| !(p5 =
  496|      0|     (SureWareHook_Load_Privkey_t *) DSO_bind_func(surewarehk_dso,
  497|      0|                                                   n_surewarehk_Load_Privkey))
  498|      0||| !(p6 =
  499|      0|     (SureWareHook_Load_Rsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  500|      0|                                                      n_surewarehk_Load_Rsa_Pubkey))
  501|      0||| !(p7 =
  502|      0|     (SureWareHook_Free_t *) DSO_bind_func(surewarehk_dso, n_surewarehk_Free))
  503|      0||| !(p8 =
  504|      0|     (SureWareHook_Rsa_Priv_Dec_t *) DSO_bind_func(surewarehk_dso,
  505|      0|                                                   n_surewarehk_Rsa_Priv_Dec))
  506|      0||| !(p9 =
  507|      0|     (SureWareHook_Rsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  508|      0|                                               n_surewarehk_Rsa_Sign))
  509|      0||| !(p12 =
  510|      0|     (SureWareHook_Dsa_Sign_t *) DSO_bind_func(surewarehk_dso,
  511|      0|                                               n_surewarehk_Dsa_Sign))
  512|      0||| !(p13 =
  513|      0|     (SureWareHook_Info_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  514|      0|                                                  n_surewarehk_Info_Pubkey))
  515|      0||| !(p14 =
  516|      0|     (SureWareHook_Load_Dsa_Pubkey_t *) DSO_bind_func(surewarehk_dso,
  517|      0|                                                      n_surewarehk_Load_Dsa_Pubkey))
  518|      0||| !(p15 =
  519|      0|     (SureWareHook_Mod_Exp_t *) DSO_bind_func(surewarehk_dso,
  520|      0|                                              n_surewarehk_Mod_Exp))) {
  521|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, ENGINE_R_DSO_FAILURE);
  522|      0|        goto err;
  523|      0|    }
  524|       |    /* Copy the pointers */
  525|      0|    p_surewarehk_Init = p1;
  526|      0|    p_surewarehk_Finish = p2;
  527|      0|    p_surewarehk_Rand_Bytes = p3;
  528|      0|    p_surewarehk_Rand_Seed = p4;
  529|      0|    p_surewarehk_Load_Privkey = p5;
  530|      0|    p_surewarehk_Load_Rsa_Pubkey = p6;
  531|      0|    p_surewarehk_Free = p7;
  532|      0|    p_surewarehk_Rsa_Priv_Dec = p8;
  533|      0|    p_surewarehk_Rsa_Sign = p9;
  534|      0|    p_surewarehk_Dsa_Sign = p12;
  535|      0|    p_surewarehk_Info_Pubkey = p13;
  536|      0|    p_surewarehk_Load_Dsa_Pubkey = p14;
  537|      0|    p_surewarehk_Mod_Exp = p15;
  538|       |    /* Contact the hardware and initialises it. */
  539|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  540|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  541|      0|        goto err;
  542|      0|    }
  543|      0|    if (p_surewarehk_Init(msg, threadsafe) == SUREWAREHOOK_ERROR_UNIT_FAILURE) {
  544|      0|        SUREWAREerr(SUREWARE_F_SUREWAREHK_INIT, SUREWARE_R_UNIT_FAILURE);
  545|      0|        goto err;
  546|      0|    }
  547|       |    /*
  548|       |     * try to load the default private key, if failed does not return a
  549|       |     * failure but wait for an explicit ENGINE_load_privakey
  550|       |     */
  551|      0|    surewarehk_load_privkey(e, NULL, NULL, NULL);
  552|       |
  553|       |    /* Everything's fine. */
  554|      0|#  ifndef OPENSSL_NO_RSA
  555|      0|    if (rsaHndidx == -1)
  556|      0|        rsaHndidx = RSA_get_ex_new_index(0,
  557|      0|                                         "SureWareHook RSA key handle",
  558|      0|                                         NULL, NULL, surewarehk_ex_free);
  559|      0|#  endif
  560|      0|#  ifndef OPENSSL_NO_DSA
  561|      0|    if (dsaHndidx == -1)
  562|      0|        dsaHndidx = DSA_get_ex_new_index(0,
  563|      0|                                         "SureWareHook DSA key handle",
  564|      0|                                         NULL, NULL, surewarehk_ex_free);
  565|      0|#  endif
  566|       |
  567|      0|    return 1;
  568|      1| err:
  569|      1|    if (surewarehk_dso)
  570|      0|        DSO_free(surewarehk_dso);
  571|      1|    surewarehk_dso = NULL;
  572|      1|    p_surewarehk_Init = NULL;
  573|      1|    p_surewarehk_Finish = NULL;
  574|      1|    p_surewarehk_Rand_Bytes = NULL;
  575|      1|    p_surewarehk_Rand_Seed = NULL;
  576|      1|    p_surewarehk_Load_Privkey = NULL;
  577|      1|    p_surewarehk_Load_Rsa_Pubkey = NULL;
  578|      1|    p_surewarehk_Free = NULL;
  579|      1|    p_surewarehk_Rsa_Priv_Dec = NULL;
  580|      1|    p_surewarehk_Rsa_Sign = NULL;
  581|      1|    p_surewarehk_Dsa_Sign = NULL;
  582|      1|    p_surewarehk_Info_Pubkey = NULL;
  583|      1|    p_surewarehk_Load_Dsa_Pubkey = NULL;
  584|      1|    p_surewarehk_Mod_Exp = NULL;
  585|      1|    return 0;
  586|      0|}

e_sureware.c:ERR_SUREWARE_error:
  150|      1|{
  151|      1|    if (SUREWARE_lib_error_code == 0)
  152|      0|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  153|      1|    ERR_PUT_error(SUREWARE_lib_error_code, function, reason, file, line);
  154|      1|}
e_sureware.c:ERR_load_SUREWARE_strings:
  116|      1|{
  117|      1|    if (SUREWARE_lib_error_code == 0)
  118|      1|        SUREWARE_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (SUREWARE_error_init) {
  121|      1|        SUREWARE_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_functs);
  124|      1|        ERR_load_strings(SUREWARE_lib_error_code, SUREWARE_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef SUREWARE_LIB_NAME
  128|      1|        SUREWARE_lib_name->error = ERR_PACK(SUREWARE_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, SUREWARE_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

ENGINE_load_ubsec:
  278|      1|{
  279|       |    /* Copied from eng_[openssl|dyn].c */
  280|      1|    ENGINE *toadd = engine_ubsec();
  281|      1|    if (!toadd)
  282|      0|        return;
  283|      1|    ENGINE_add(toadd);
  284|      1|    ENGINE_free(toadd);
  285|      1|    ERR_clear_error();
  286|      1|}
e_ubsec.c:engine_ubsec:
  266|      1|{
  267|      1|    ENGINE *ret = ENGINE_new();
  268|      1|    if (!ret)
  269|      0|        return NULL;
  270|      1|    if (!bind_helper(ret)) {
  271|      0|        ENGINE_free(ret);
  272|      0|        return NULL;
  273|      0|    }
  274|      1|    return ret;
  275|      1|}
e_ubsec.c:bind_helper:
  207|      1|{
  208|      1|#  ifndef OPENSSL_NO_RSA
  209|      1|    const RSA_METHOD *meth1;
  210|      1|#  endif
  211|      1|#  ifndef OPENSSL_NO_DH
  212|      1|#   ifndef HAVE_UBSEC_DH
  213|      1|    const DH_METHOD *meth3;
  214|      1|#   endif                       /* HAVE_UBSEC_DH */
  215|      1|#  endif
  216|      1|    if (!ENGINE_set_id(e, engine_ubsec_id) ||
  217|      1|        !ENGINE_set_name(e, engine_ubsec_name) ||
  218|      1|#  ifndef OPENSSL_NO_RSA
  219|      1|        !ENGINE_set_RSA(e, &ubsec_rsa) ||
  220|      1|#  endif
  221|      1|#  ifndef OPENSSL_NO_DSA
  222|      1|        !ENGINE_set_DSA(e, &ubsec_dsa) ||
  223|      1|#  endif
  224|      1|#  ifndef OPENSSL_NO_DH
  225|      1|        !ENGINE_set_DH(e, &ubsec_dh) ||
  226|      1|#  endif
  227|      1|        !ENGINE_set_destroy_function(e, ubsec_destroy) ||
  228|      1|        !ENGINE_set_init_function(e, ubsec_init) ||
  229|      1|        !ENGINE_set_finish_function(e, ubsec_finish) ||
  230|      1|        !ENGINE_set_ctrl_function(e, ubsec_ctrl) ||
  231|      1|        !ENGINE_set_cmd_defns(e, ubsec_cmd_defns))
  232|      0|        return 0;
  233|       |
  234|      1|#  ifndef OPENSSL_NO_RSA
  235|       |    /*
  236|       |     * We know that the "PKCS1_SSLeay()" functions hook properly to the
  237|       |     * Broadcom-specific mod_exp and mod_exp_crt so we use those functions.
  238|       |     * NB: We don't use ENGINE_openssl() or anything "more generic" because
  239|       |     * something like the RSAref code may not hook properly, and if you own
  240|       |     * one of these cards then you have the right to do RSA operations on it
  241|       |     * anyway!
  242|       |     */
  243|      1|    meth1 = RSA_PKCS1_SSLeay();
  244|      1|    ubsec_rsa.rsa_pub_enc = meth1->rsa_pub_enc;
  245|      1|    ubsec_rsa.rsa_pub_dec = meth1->rsa_pub_dec;
  246|      1|    ubsec_rsa.rsa_priv_enc = meth1->rsa_priv_enc;
  247|      1|    ubsec_rsa.rsa_priv_dec = meth1->rsa_priv_dec;
  248|      1|#  endif
  249|       |
  250|      1|#  ifndef OPENSSL_NO_DH
  251|      1|#   ifndef HAVE_UBSEC_DH
  252|       |    /* Much the same for Diffie-Hellman */
  253|      1|    meth3 = DH_OpenSSL();
  254|      1|    ubsec_dh.generate_key = meth3->generate_key;
  255|      1|    ubsec_dh.compute_key = meth3->compute_key;
  256|      1|#   endif                       /* HAVE_UBSEC_DH */
  257|      1|#  endif
  258|       |
  259|       |    /* Ensure the ubsec error handling is set up */
  260|      1|    ERR_load_UBSEC_strings();
  261|      1|    return 1;
  262|      1|}

e_ubsec.c:ERR_load_UBSEC_strings:
  116|      1|{
  117|      1|    if (UBSEC_lib_error_code == 0)
  118|      1|        UBSEC_lib_error_code = ERR_get_next_error_library();
  119|       |
  120|      1|    if (UBSEC_error_init) {
  121|      1|        UBSEC_error_init = 0;
  122|      1|#ifndef OPENSSL_NO_ERR
  123|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_functs);
  124|      1|        ERR_load_strings(UBSEC_lib_error_code, UBSEC_str_reasons);
  125|      1|#endif
  126|       |
  127|      1|#ifdef UBSEC_LIB_NAME
  128|      1|        UBSEC_lib_name->error = ERR_PACK(UBSEC_lib_error_code, 0, 0);
  129|      1|        ERR_load_strings(0, UBSEC_lib_name);
  130|      1|#endif
  131|      1|    }
  132|      1|}

SSL_library_init:
   65|      1|{
   66|       |
   67|      1|#ifndef OPENSSL_NO_DES
   68|      1|    EVP_add_cipher(EVP_des_cbc());
   69|      1|    EVP_add_cipher(EVP_des_ede3_cbc());
   70|      1|#endif
   71|      1|#ifndef OPENSSL_NO_IDEA
   72|      1|    EVP_add_cipher(EVP_idea_cbc());
   73|      1|#endif
   74|      1|#ifndef OPENSSL_NO_RC4
   75|      1|    EVP_add_cipher(EVP_rc4());
   76|      1|# if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
   77|      1|    EVP_add_cipher(EVP_rc4_hmac_md5());
   78|      1|# endif
   79|      1|#endif
   80|      1|#ifndef OPENSSL_NO_RC2
   81|      1|    EVP_add_cipher(EVP_rc2_cbc());
   82|       |    /*
   83|       |     * Not actually used for SSL/TLS but this makes PKCS#12 work if an
   84|       |     * application only calls SSL_library_init().
   85|       |     */
   86|      1|    EVP_add_cipher(EVP_rc2_40_cbc());
   87|      1|#endif
   88|      1|#ifndef OPENSSL_NO_AES
   89|      1|    EVP_add_cipher(EVP_aes_128_cbc());
   90|      1|    EVP_add_cipher(EVP_aes_192_cbc());
   91|      1|    EVP_add_cipher(EVP_aes_256_cbc());
   92|      1|    EVP_add_cipher(EVP_aes_128_gcm());
   93|      1|    EVP_add_cipher(EVP_aes_256_gcm());
   94|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
   95|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
   96|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
   97|      1|# endif
   98|      1|# if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA256)
   99|      1|    EVP_add_cipher(EVP_aes_128_cbc_hmac_sha256());
  100|      1|    EVP_add_cipher(EVP_aes_256_cbc_hmac_sha256());
  101|      1|# endif
  102|       |
  103|      1|#endif
  104|      1|#ifndef OPENSSL_NO_CAMELLIA
  105|      1|    EVP_add_cipher(EVP_camellia_128_cbc());
  106|      1|    EVP_add_cipher(EVP_camellia_256_cbc());
  107|      1|#endif
  108|       |
  109|      1|#ifndef OPENSSL_NO_SEED
  110|      1|    EVP_add_cipher(EVP_seed_cbc());
  111|      1|#endif
  112|       |
  113|      1|#ifndef OPENSSL_NO_MD5
  114|      1|    EVP_add_digest(EVP_md5());
  115|      1|    EVP_add_digest_alias(SN_md5, "ssl2-md5");
  116|      1|    EVP_add_digest_alias(SN_md5, "ssl3-md5");
  117|      1|#endif
  118|      1|#ifndef OPENSSL_NO_SHA
  119|      1|    EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
  120|      1|    EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
  121|      1|    EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
  122|      1|#endif
  123|      1|#ifndef OPENSSL_NO_SHA256
  124|      1|    EVP_add_digest(EVP_sha224());
  125|      1|    EVP_add_digest(EVP_sha256());
  126|      1|#endif
  127|      1|#ifndef OPENSSL_NO_SHA512
  128|      1|    EVP_add_digest(EVP_sha384());
  129|      1|    EVP_add_digest(EVP_sha512());
  130|      1|#endif
  131|      1|#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
  132|      1|    EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
  133|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
  134|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
  135|      1|    EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
  136|      1|#endif
  137|      1|#ifndef OPENSSL_NO_ECDSA
  138|      1|    EVP_add_digest(EVP_ecdsa());
  139|      1|#endif
  140|       |    /* If you want support for phased out ciphers, add the following */
  141|       |#if 0
  142|       |    EVP_add_digest(EVP_sha());
  143|       |    EVP_add_digest(EVP_dss());
  144|       |#endif
  145|      1|#ifndef OPENSSL_NO_COMP
  146|       |    /*
  147|       |     * This will initialise the built-in compression algorithms. The value
  148|       |     * returned is a STACK_OF(SSL_COMP), but that can be discarded safely
  149|       |     */
  150|      1|    (void)SSL_COMP_get_compression_methods();
  151|      1|#endif
  152|       |    /* initialize cipher/digest methods table */
  153|      1|    ssl_load_ciphers();
  154|      1|    return (1);
  155|      1|}

ssl_load_ciphers:
  406|      1|{
  407|      1|    ssl_cipher_methods[SSL_ENC_DES_IDX] = EVP_get_cipherbyname(SN_des_cbc);
  408|      1|    ssl_cipher_methods[SSL_ENC_3DES_IDX] =
  409|      1|        EVP_get_cipherbyname(SN_des_ede3_cbc);
  410|      1|    ssl_cipher_methods[SSL_ENC_RC4_IDX] = EVP_get_cipherbyname(SN_rc4);
  411|      1|    ssl_cipher_methods[SSL_ENC_RC2_IDX] = EVP_get_cipherbyname(SN_rc2_cbc);
  412|      1|#ifndef OPENSSL_NO_IDEA
  413|      1|    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = EVP_get_cipherbyname(SN_idea_cbc);
  414|       |#else
  415|       |    ssl_cipher_methods[SSL_ENC_IDEA_IDX] = NULL;
  416|       |#endif
  417|      1|    ssl_cipher_methods[SSL_ENC_AES128_IDX] =
  418|      1|        EVP_get_cipherbyname(SN_aes_128_cbc);
  419|      1|    ssl_cipher_methods[SSL_ENC_AES256_IDX] =
  420|      1|        EVP_get_cipherbyname(SN_aes_256_cbc);
  421|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA128_IDX] =
  422|      1|        EVP_get_cipherbyname(SN_camellia_128_cbc);
  423|      1|    ssl_cipher_methods[SSL_ENC_CAMELLIA256_IDX] =
  424|      1|        EVP_get_cipherbyname(SN_camellia_256_cbc);
  425|      1|    ssl_cipher_methods[SSL_ENC_GOST89_IDX] =
  426|      1|        EVP_get_cipherbyname(SN_gost89_cnt);
  427|      1|    ssl_cipher_methods[SSL_ENC_SEED_IDX] = EVP_get_cipherbyname(SN_seed_cbc);
  428|       |
  429|      1|    ssl_cipher_methods[SSL_ENC_AES128GCM_IDX] =
  430|      1|        EVP_get_cipherbyname(SN_aes_128_gcm);
  431|      1|    ssl_cipher_methods[SSL_ENC_AES256GCM_IDX] =
  432|      1|        EVP_get_cipherbyname(SN_aes_256_gcm);
  433|       |
  434|      1|    ssl_digest_methods[SSL_MD_MD5_IDX] = EVP_get_digestbyname(SN_md5);
  435|      1|    ssl_mac_secret_size[SSL_MD_MD5_IDX] =
  436|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_MD5_IDX]);
  437|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0);
  438|      1|    ssl_digest_methods[SSL_MD_SHA1_IDX] = EVP_get_digestbyname(SN_sha1);
  439|      1|    ssl_mac_secret_size[SSL_MD_SHA1_IDX] =
  440|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA1_IDX]);
  441|      1|    OPENSSL_assert(ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0);
  442|      1|    ssl_digest_methods[SSL_MD_GOST94_IDX] =
  443|      1|        EVP_get_digestbyname(SN_id_GostR3411_94);
  444|      1|    if (ssl_digest_methods[SSL_MD_GOST94_IDX]) {
  445|      1|        ssl_mac_secret_size[SSL_MD_GOST94_IDX] =
  446|      1|            EVP_MD_size(ssl_digest_methods[SSL_MD_GOST94_IDX]);
  447|      1|        OPENSSL_assert(ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0);
  448|      1|    }
  449|      1|    ssl_digest_methods[SSL_MD_GOST89MAC_IDX] =
  450|      1|        EVP_get_digestbyname(SN_id_Gost28147_89_MAC);
  451|      1|    ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX] = get_optional_pkey_id("gost-mac");
  452|      1|    if (ssl_mac_pkey_id[SSL_MD_GOST89MAC_IDX]) {
  453|      0|        ssl_mac_secret_size[SSL_MD_GOST89MAC_IDX] = 32;
  454|      0|    }
  455|       |
  456|      1|    ssl_digest_methods[SSL_MD_SHA256_IDX] = EVP_get_digestbyname(SN_sha256);
  457|      1|    ssl_mac_secret_size[SSL_MD_SHA256_IDX] =
  458|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA256_IDX]);
  459|      1|    ssl_digest_methods[SSL_MD_SHA384_IDX] = EVP_get_digestbyname(SN_sha384);
  460|      1|    ssl_mac_secret_size[SSL_MD_SHA384_IDX] =
  461|      1|        EVP_MD_size(ssl_digest_methods[SSL_MD_SHA384_IDX]);
  462|      1|}
SSL_COMP_get_compression_methods:
 1961|      1|{
 1962|      1|    load_builtin_compressions();
 1963|      1|    return (ssl_comp_methods);
 1964|      1|}
ssl_ciph.c:get_optional_pkey_id:
  388|      1|{
  389|      1|    const EVP_PKEY_ASN1_METHOD *ameth;
  390|      1|    ENGINE *tmpeng = NULL;
  391|      1|    int pkey_id = 0;
  392|      1|    ameth = EVP_PKEY_asn1_find_str(&tmpeng, pkey_name, -1);
  393|      1|    if (ameth) {
  394|      0|        if (EVP_PKEY_asn1_get0_info(&pkey_id, NULL, NULL, NULL, NULL,
  395|      0|                                    ameth) <= 0)
  396|      0|            pkey_id = 0;
  397|      0|    }
  398|      1|    if (tmpeng)
  399|      0|        ENGINE_finish(tmpeng);
  400|      1|    return pkey_id;
  401|      1|}
ssl_ciph.c:load_builtin_compressions:
  472|      1|{
  473|      1|    int got_write_lock = 0;
  474|       |
  475|      1|    CRYPTO_r_lock(CRYPTO_LOCK_SSL);
  476|      1|    if (ssl_comp_methods == NULL) {
  477|      1|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  478|      1|        CRYPTO_w_lock(CRYPTO_LOCK_SSL);
  479|      1|        got_write_lock = 1;
  480|       |
  481|      1|        if (ssl_comp_methods == NULL) {
  482|      1|            SSL_COMP *comp = NULL;
  483|       |
  484|      1|            MemCheck_off();
  485|      1|            ssl_comp_methods = sk_SSL_COMP_new(sk_comp_cmp);
  486|      1|            if (ssl_comp_methods != NULL) {
  487|      1|                comp = (SSL_COMP *)OPENSSL_malloc(sizeof(SSL_COMP));
  488|      1|                if (comp != NULL) {
  489|      1|                    comp->method = COMP_zlib();
  490|      1|                    if (comp->method && comp->method->type == NID_undef)
  491|      1|                        OPENSSL_free(comp);
  492|      0|                    else {
  493|      0|                        comp->id = SSL_COMP_ZLIB_IDX;
  494|      0|                        comp->name = comp->method->name;
  495|      0|                        sk_SSL_COMP_push(ssl_comp_methods, comp);
  496|      0|                    }
  497|      1|                }
  498|      1|                sk_SSL_COMP_sort(ssl_comp_methods);
  499|      1|            }
  500|      1|            MemCheck_on();
  501|      1|        }
  502|      1|    }
  503|       |
  504|      1|    if (got_write_lock)
  505|      1|        CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
  506|      0|    else
  507|      0|        CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  508|      1|}

ERR_load_SSL_strings:
  832|      1|{
  833|      1|#ifndef OPENSSL_NO_ERR
  834|       |
  835|      1|    if (ERR_func_error_string(SSL_str_functs[0].error) == NULL) {
  836|      1|        ERR_load_strings(0, SSL_str_functs);
  837|      1|        ERR_load_strings(0, SSL_str_reasons);
  838|      1|    }
  839|      1|#endif
  840|      1|}

SSL_load_error_strings:
   64|      1|{
   65|      1|#ifndef OPENSSL_NO_ERR
   66|      1|    ERR_load_crypto_strings();
   67|      1|    ERR_load_SSL_strings();
   68|      1|#endif
   69|      1|}

SSL_get_ex_new_index:
 3286|      4|{
 3287|      4|    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, argl, argp,
 3288|      4|                                   new_func, dup_func, free_func);
 3289|      4|}

crc32_z:
  206|    172|{
  207|    172|    if (buf == Z_NULL) return 0UL;
  208|       |
  209|       |#ifdef DYNAMIC_CRC_TABLE
  210|       |    if (crc_table_empty)
  211|       |        make_crc_table();
  212|       |#endif /* DYNAMIC_CRC_TABLE */
  213|       |
  214|     83|#ifdef BYFOUR
  215|     83|    if (sizeof(void *) == sizeof(ptrdiff_t)) {
  216|     83|        z_crc_t endian;
  217|       |
  218|     83|        endian = 1;
  219|     83|        if (*((unsigned char *)(&endian)))
  220|     83|            return crc32_little(crc, buf, len);
  221|      0|        else
  222|      0|            return crc32_big(crc, buf, len);
  223|     83|    }
  224|      0|#endif /* BYFOUR */
  225|      0|    crc = crc ^ 0xffffffffUL;
  226|      0|    while (len >= 8) {
  227|      0|        DO8;
  228|      0|        len -= 8;
  229|      0|    }
  230|      0|    if (len) do {
  231|      0|        DO1;
  232|      0|    } while (--len);
  233|      0|    return crc ^ 0xffffffffUL;
  234|     83|}
crc32:
  241|    172|{
  242|    172|    return crc32_z(crc, buf, len);
  243|    172|}
crc32.c:crc32_little:
  270|     83|{
  271|     83|    register z_crc_t c;
  272|     83|    register const z_crc_t FAR *buf4;
  273|       |
  274|     83|    c = (z_crc_t)crc;
  275|     83|    c = ~c;
  276|     83|    while (len && ((ptrdiff_t)buf & 3)) {
  277|      0|        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  278|      0|        len--;
  279|      0|    }
  280|       |
  281|     83|    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
  282|    160|    while (len >= 32) {
  283|     77|        DOLIT32;
  284|     77|        len -= 32;
  285|     77|    }
  286|    190|    while (len >= 4) {
  287|    107|        DOLIT4;
  288|    107|        len -= 4;
  289|    107|    }
  290|     83|    buf = (const unsigned char FAR *)buf4;
  291|       |
  292|    132|    if (len) do {
  293|    132|        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  294|    132|    } while (--len);
  295|     83|    c = ~c;
  296|     83|    return (unsigned long)c;
  297|     83|}

inflate_fast:
   53|     51|{
   54|     51|    struct inflate_state FAR *state;
   55|     51|    z_const unsigned char FAR *in;      /* local strm->next_in */
   56|     51|    z_const unsigned char FAR *last;    /* have enough input while in < last */
   57|     51|    unsigned char FAR *out;     /* local strm->next_out */
   58|     51|    unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
   59|     51|    unsigned char FAR *end;     /* while out < end, enough space available */
   60|       |#ifdef INFLATE_STRICT
   61|       |    unsigned dmax;              /* maximum distance from zlib header */
   62|       |#endif
   63|     51|    unsigned wsize;             /* window size or zero if not using window */
   64|     51|    unsigned whave;             /* valid bytes in the window */
   65|     51|    unsigned wnext;             /* window write index */
   66|     51|    unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
   67|     51|    unsigned long hold;         /* local strm->hold */
   68|     51|    unsigned bits;              /* local strm->bits */
   69|     51|    code const FAR *lcode;      /* local strm->lencode */
   70|     51|    code const FAR *dcode;      /* local strm->distcode */
   71|     51|    unsigned lmask;             /* mask for first level of length codes */
   72|     51|    unsigned dmask;             /* mask for first level of distance codes */
   73|     51|    code here;                  /* retrieved table entry */
   74|     51|    unsigned op;                /* code bits, operation, extra bits, or */
   75|       |                                /*  window position, window bytes to copy */
   76|     51|    unsigned len;               /* match length, unused bytes */
   77|     51|    unsigned dist;              /* match distance */
   78|     51|    unsigned char FAR *from;    /* where to copy match from */
   79|       |
   80|       |    /* copy state to local variables */
   81|     51|    state = (struct inflate_state FAR *)strm->state;
   82|     51|    in = strm->next_in;
   83|     51|    last = in + (strm->avail_in - 5);
   84|     51|    out = strm->next_out;
   85|     51|    beg = out - (start - strm->avail_out);
   86|     51|    end = out + (strm->avail_out - 257);
   87|       |#ifdef INFLATE_STRICT
   88|       |    dmax = state->dmax;
   89|       |#endif
   90|     51|    wsize = state->wsize;
   91|     51|    whave = state->whave;
   92|     51|    wnext = state->wnext;
   93|     51|    window = state->window;
   94|     51|    hold = state->hold;
   95|     51|    bits = state->bits;
   96|     51|    lcode = state->lencode;
   97|     51|    dcode = state->distcode;
   98|     51|    lmask = (1U << state->lenbits) - 1;
   99|     51|    dmask = (1U << state->distbits) - 1;
  100|       |
  101|       |    /* decode literals and length/distances until end-of-block or not enough
  102|       |       input data or output space */
  103|  1.50k|    do {
  104|  1.50k|        if (bits < 15) {
  105|    799|            hold += (unsigned long)(*in++) << bits;
  106|    799|            bits += 8;
  107|    799|            hold += (unsigned long)(*in++) << bits;
  108|    799|            bits += 8;
  109|    799|        }
  110|  1.50k|        here = lcode[hold & lmask];
  111|  1.50k|      dolen:
  112|  1.50k|        op = (unsigned)(here.bits);
  113|  1.50k|        hold >>= op;
  114|  1.50k|        bits -= op;
  115|  1.50k|        op = (unsigned)(here.op);
  116|  1.50k|        if (op == 0) {                          /* literal */
  117|  1.30k|            Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
  118|  1.30k|                    "inflate:         literal '%c'\n" :
  119|  1.30k|                    "inflate:         literal 0x%02x\n", here.val));
  120|  1.30k|            *out++ = (unsigned char)(here.val);
  121|  1.30k|        }
  122|    194|        else if (op & 16) {                     /* length base */
  123|    183|            len = (unsigned)(here.val);
  124|    183|            op &= 15;                           /* number of extra bits */
  125|    183|            if (op) {
  126|     28|                if (bits < op) {
  127|      0|                    hold += (unsigned long)(*in++) << bits;
  128|      0|                    bits += 8;
  129|      0|                }
  130|     28|                len += (unsigned)hold & ((1U << op) - 1);
  131|     28|                hold >>= op;
  132|     28|                bits -= op;
  133|     28|            }
  134|    183|            Tracevv((stderr, "inflate:         length %u\n", len));
  135|    183|            if (bits < 15) {
  136|     69|                hold += (unsigned long)(*in++) << bits;
  137|     69|                bits += 8;
  138|     69|                hold += (unsigned long)(*in++) << bits;
  139|     69|                bits += 8;
  140|     69|            }
  141|    183|            here = dcode[hold & dmask];
  142|    183|          dodist:
  143|    183|            op = (unsigned)(here.bits);
  144|    183|            hold >>= op;
  145|    183|            bits -= op;
  146|    183|            op = (unsigned)(here.op);
  147|    183|            if (op & 16) {                      /* distance base */
  148|    182|                dist = (unsigned)(here.val);
  149|    182|                op &= 15;                       /* number of extra bits */
  150|    182|                if (bits < op) {
  151|      0|                    hold += (unsigned long)(*in++) << bits;
  152|      0|                    bits += 8;
  153|      0|                    if (bits < op) {
  154|      0|                        hold += (unsigned long)(*in++) << bits;
  155|      0|                        bits += 8;
  156|      0|                    }
  157|      0|                }
  158|    182|                dist += (unsigned)hold & ((1U << op) - 1);
  159|       |#ifdef INFLATE_STRICT
  160|       |                if (dist > dmax) {
  161|       |                    strm->msg = (char *)"invalid distance too far back";
  162|       |                    state->mode = BAD;
  163|       |                    break;
  164|       |                }
  165|       |#endif
  166|    182|                hold >>= op;
  167|    182|                bits -= op;
  168|    182|                Tracevv((stderr, "inflate:         distance %u\n", dist));
  169|    182|                op = (unsigned)(out - beg);     /* max distance in output */
  170|    182|                if (dist > op) {                /* see if copy from window */
  171|     10|                    op = dist - op;             /* distance back in window */
  172|     10|                    if (op > whave) {
  173|     10|                        if (state->sane) {
  174|     10|                            strm->msg =
  175|     10|                                (char *)"invalid distance too far back";
  176|     10|                            state->mode = BAD;
  177|     10|                            break;
  178|     10|                        }
  179|       |#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  180|       |                        if (len <= op - whave) {
  181|       |                            do {
  182|       |                                *out++ = 0;
  183|       |                            } while (--len);
  184|       |                            continue;
  185|       |                        }
  186|       |                        len -= op - whave;
  187|       |                        do {
  188|       |                            *out++ = 0;
  189|       |                        } while (--op > whave);
  190|       |                        if (op == 0) {
  191|       |                            from = out - dist;
  192|       |                            do {
  193|       |                                *out++ = *from++;
  194|       |                            } while (--len);
  195|       |                            continue;
  196|       |                        }
  197|       |#endif
  198|     10|                    }
  199|      0|                    from = window;
  200|      0|                    if (wnext == 0) {           /* very common case */
  201|      0|                        from += wsize - op;
  202|      0|                        if (op < len) {         /* some from window */
  203|      0|                            len -= op;
  204|      0|                            do {
  205|      0|                                *out++ = *from++;
  206|      0|                            } while (--op);
  207|      0|                            from = out - dist;  /* rest from output */
  208|      0|                        }
  209|      0|                    }
  210|      0|                    else if (wnext < op) {      /* wrap around window */
  211|      0|                        from += wsize + wnext - op;
  212|      0|                        op -= wnext;
  213|      0|                        if (op < len) {         /* some from end of window */
  214|      0|                            len -= op;
  215|      0|                            do {
  216|      0|                                *out++ = *from++;
  217|      0|                            } while (--op);
  218|      0|                            from = window;
  219|      0|                            if (wnext < len) {  /* some from start of window */
  220|      0|                                op = wnext;
  221|      0|                                len -= op;
  222|      0|                                do {
  223|      0|                                    *out++ = *from++;
  224|      0|                                } while (--op);
  225|      0|                                from = out - dist;      /* rest from output */
  226|      0|                            }
  227|      0|                        }
  228|      0|                    }
  229|      0|                    else {                      /* contiguous in window */
  230|      0|                        from += wnext - op;
  231|      0|                        if (op < len) {         /* some from window */
  232|      0|                            len -= op;
  233|      0|                            do {
  234|      0|                                *out++ = *from++;
  235|      0|                            } while (--op);
  236|      0|                            from = out - dist;  /* rest from output */
  237|      0|                        }
  238|      0|                    }
  239|      0|                    while (len > 2) {
  240|      0|                        *out++ = *from++;
  241|      0|                        *out++ = *from++;
  242|      0|                        *out++ = *from++;
  243|      0|                        len -= 3;
  244|      0|                    }
  245|      0|                    if (len) {
  246|      0|                        *out++ = *from++;
  247|      0|                        if (len > 1)
  248|      0|                            *out++ = *from++;
  249|      0|                    }
  250|      0|                }
  251|    172|                else {
  252|    172|                    from = out - dist;          /* copy direct from output */
  253|    441|                    do {                        /* minimum length is three */
  254|    441|                        *out++ = *from++;
  255|    441|                        *out++ = *from++;
  256|    441|                        *out++ = *from++;
  257|    441|                        len -= 3;
  258|    441|                    } while (len > 2);
  259|    172|                    if (len) {
  260|     78|                        *out++ = *from++;
  261|     78|                        if (len > 1)
  262|     21|                            *out++ = *from++;
  263|     78|                    }
  264|    172|                }
  265|    182|            }
  266|      1|            else if ((op & 64) == 0) {          /* 2nd level distance code */
  267|      0|                here = dcode[here.val + (hold & ((1U << op) - 1))];
  268|      0|                goto dodist;
  269|      0|            }
  270|      1|            else {
  271|      1|                strm->msg = (char *)"invalid distance code";
  272|      1|                state->mode = BAD;
  273|      1|                break;
  274|      1|            }
  275|    183|        }
  276|     11|        else if ((op & 64) == 0) {              /* 2nd level length code */
  277|      0|            here = lcode[here.val + (hold & ((1U << op) - 1))];
  278|      0|            goto dolen;
  279|      0|        }
  280|     11|        else if (op & 32) {                     /* end-of-block */
  281|     10|            Tracevv((stderr, "inflate:         end of block\n"));
  282|     10|            state->mode = TYPE;
  283|     10|            break;
  284|     10|        }
  285|      1|        else {
  286|      1|            strm->msg = (char *)"invalid literal/length code";
  287|      1|            state->mode = BAD;
  288|      1|            break;
  289|      1|        }
  290|  1.50k|    } while (in < last && out < end);
  291|       |
  292|       |    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  293|     51|    len = bits >> 3;
  294|     51|    in -= len;
  295|     51|    bits -= len << 3;
  296|     51|    hold &= (1U << bits) - 1;
  297|       |
  298|       |    /* update state and return */
  299|     51|    strm->next_in = in;
  300|     51|    strm->next_out = out;
  301|     51|    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  302|     51|    strm->avail_out = (unsigned)(out < end ?
  303|     51|                                 257 + (end - out) : 257 - (out - end));
  304|     51|    state->hold = hold;
  305|     51|    state->bits = bits;
  306|     51|    return;
  307|     51|}

inflateResetKeep:
  121|     60|{
  122|     60|    struct inflate_state FAR *state;
  123|       |
  124|     60|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  125|     60|    state = (struct inflate_state FAR *)strm->state;
  126|     60|    strm->total_in = strm->total_out = state->total = 0;
  127|     60|    strm->msg = Z_NULL;
  128|     60|    if (state->wrap)        /* to support ill-conceived Java test suite */
  129|     60|        strm->adler = state->wrap & 1;
  130|     60|    state->mode = HEAD;
  131|     60|    state->last = 0;
  132|     60|    state->havedict = 0;
  133|     60|    state->dmax = 32768U;
  134|     60|    state->head = Z_NULL;
  135|     60|    state->hold = 0;
  136|     60|    state->bits = 0;
  137|     60|    state->lencode = state->distcode = state->next = state->codes;
  138|     60|    state->sane = 1;
  139|     60|    state->back = -1;
  140|     60|    Tracev((stderr, "inflate: reset\n"));
  141|     60|    return Z_OK;
  142|     60|}
inflateReset:
  146|     60|{
  147|     60|    struct inflate_state FAR *state;
  148|       |
  149|     60|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  150|     60|    state = (struct inflate_state FAR *)strm->state;
  151|     60|    state->wsize = 0;
  152|     60|    state->whave = 0;
  153|     60|    state->wnext = 0;
  154|     60|    return inflateResetKeep(strm);
  155|     60|}
inflateReset2:
  160|     60|{
  161|     60|    int wrap;
  162|     60|    struct inflate_state FAR *state;
  163|       |
  164|       |    /* get the state */
  165|     60|    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;
  166|     60|    state = (struct inflate_state FAR *)strm->state;
  167|       |
  168|       |    /* extract wrap request from windowBits parameter */
  169|     60|    if (windowBits < 0) {
  170|      0|        wrap = 0;
  171|      0|        windowBits = -windowBits;
  172|      0|    }
  173|     60|    else {
  174|     60|        wrap = (windowBits >> 4) + 5;
  175|     60|#ifdef GUNZIP
  176|     60|        if (windowBits < 48)
  177|     60|            windowBits &= 15;
  178|     60|#endif
  179|     60|    }
  180|       |
  181|       |    /* set number of window bits, free window if different */
  182|     60|    if (windowBits && (windowBits < 8 || windowBits > 15))
  183|      0|        return Z_STREAM_ERROR;
  184|     60|    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
  185|      0|        ZFREE(strm, state->window);
  186|      0|        state->window = Z_NULL;
  187|      0|    }
  188|       |
  189|       |    /* update state and reset the rest of it */
  190|     60|    state->wrap = wrap;
  191|     60|    state->wbits = (unsigned)windowBits;
  192|     60|    return inflateReset(strm);
  193|     60|}
inflateInit2_:
  200|     60|{
  201|     60|    int ret;
  202|     60|    struct inflate_state FAR *state;
  203|       |
  204|     60|    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  205|     60|        stream_size != (int)(sizeof(z_stream)))
  206|      0|        return Z_VERSION_ERROR;
  207|     60|    if (strm == Z_NULL) return Z_STREAM_ERROR;
  208|     60|    strm->msg = Z_NULL;                 /* in case we return an error */
  209|     60|    if (strm->zalloc == (alloc_func)0) {
  210|       |#ifdef Z_SOLO
  211|       |        return Z_STREAM_ERROR;
  212|       |#else
  213|      0|        strm->zalloc = zcalloc;
  214|      0|        strm->opaque = (voidpf)0;
  215|      0|#endif
  216|      0|    }
  217|     60|    if (strm->zfree == (free_func)0)
  218|       |#ifdef Z_SOLO
  219|       |        return Z_STREAM_ERROR;
  220|       |#else
  221|      0|        strm->zfree = zcfree;
  222|     60|#endif
  223|     60|    state = (struct inflate_state FAR *)
  224|     60|            ZALLOC(strm, 1, sizeof(struct inflate_state));
  225|     60|    if (state == Z_NULL) return Z_MEM_ERROR;
  226|     60|    Tracev((stderr, "inflate: allocated\n"));
  227|     60|    strm->state = (struct internal_state FAR *)state;
  228|     60|    state->strm = strm;
  229|     60|    state->window = Z_NULL;
  230|     60|    state->mode = HEAD;     /* to pass state test in inflateReset2() */
  231|     60|    ret = inflateReset2(strm, windowBits);
  232|     60|    if (ret != Z_OK) {
  233|      0|        ZFREE(strm, state);
  234|      0|        strm->state = Z_NULL;
  235|      0|    }
  236|     60|    return ret;
  237|     60|}
inflateInit_:
  243|     10|{
  244|     10|    return inflateInit2_(strm, DEF_WBITS, version, stream_size);
  245|     10|}
inflate:
  625|    116|{
  626|    116|    struct inflate_state FAR *state;
  627|    116|    z_const unsigned char FAR *next;    /* next input */
  628|    116|    unsigned char FAR *put;     /* next output */
  629|    116|    unsigned have, left;        /* available input and output */
  630|    116|    unsigned long hold;         /* bit buffer */
  631|    116|    unsigned bits;              /* bits in bit buffer */
  632|    116|    unsigned in, out;           /* save starting available input and output */
  633|    116|    unsigned copy;              /* number of stored or match bytes to copy */
  634|    116|    unsigned char FAR *from;    /* where to copy match bytes from */
  635|    116|    code here;                  /* current decoding table entry */
  636|    116|    code last;                  /* parent table entry */
  637|    116|    unsigned len;               /* length to copy for repeats, bits to drop */
  638|    116|    int ret;                    /* return code */
  639|    116|#ifdef GUNZIP
  640|    116|    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
  641|    116|#endif
  642|    116|    static const unsigned short order[19] = /* permutation of code lengths */
  643|    116|        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
  644|       |
  645|    116|    if (inflateStateCheck(strm) || strm->next_out == Z_NULL ||
  646|    116|        (strm->next_in == Z_NULL && strm->avail_in != 0))
  647|      0|        return Z_STREAM_ERROR;
  648|       |
  649|    116|    state = (struct inflate_state FAR *)strm->state;
  650|    116|    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  651|    116|    LOAD();
  652|    116|    in = have;
  653|    116|    out = left;
  654|    116|    ret = Z_OK;
  655|    116|    for (;;)
  656|    409|        switch (state->mode) {
  657|     49|        case HEAD:
  658|     49|            if (state->wrap == 0) {
  659|      0|                state->mode = TYPEDO;
  660|      0|                break;
  661|      0|            }
  662|     49|            NEEDBITS(16);
  663|     47|#ifdef GUNZIP
  664|     47|            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  665|     46|                if (state->wbits == 0)
  666|      0|                    state->wbits = 15;
  667|     46|                state->check = crc32(0L, Z_NULL, 0);
  668|     46|                CRC2(state->check, hold);
  669|     46|                INITBITS();
  670|     46|                state->mode = FLAGS;
  671|     46|                break;
  672|     46|            }
  673|      1|            state->flags = 0;           /* expect zlib header */
  674|      1|            if (state->head != Z_NULL)
  675|      0|                state->head->done = -1;
  676|      1|            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  677|       |#else
  678|       |            if (
  679|       |#endif
  680|      1|                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  681|      1|                strm->msg = (char *)"incorrect header check";
  682|      1|                state->mode = BAD;
  683|      1|                break;
  684|      1|            }
  685|      0|            if (BITS(4) != Z_DEFLATED) {
  686|      0|                strm->msg = (char *)"unknown compression method";
  687|      0|                state->mode = BAD;
  688|      0|                break;
  689|      0|            }
  690|      0|            DROPBITS(4);
  691|      0|            len = BITS(4) + 8;
  692|      0|            if (state->wbits == 0)
  693|      0|                state->wbits = len;
  694|      0|            if (len > 15 || len > state->wbits) {
  695|      0|                strm->msg = (char *)"invalid window size";
  696|      0|                state->mode = BAD;
  697|      0|                break;
  698|      0|            }
  699|      0|            state->dmax = 1U << len;
  700|      0|            Tracev((stderr, "inflate:   zlib header ok\n"));
  701|      0|            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  702|      0|            state->mode = hold & 0x200 ? DICTID : TYPE;
  703|      0|            INITBITS();
  704|      0|            break;
  705|      0|#ifdef GUNZIP
  706|     46|        case FLAGS:
  707|     46|            NEEDBITS(16);
  708|     46|            state->flags = (int)(hold);
  709|     46|            if ((state->flags & 0xff) != Z_DEFLATED) {
  710|      1|                strm->msg = (char *)"unknown compression method";
  711|      1|                state->mode = BAD;
  712|      1|                break;
  713|      1|            }
  714|     45|            if (state->flags & 0xe000) {
  715|      1|                strm->msg = (char *)"unknown header flags set";
  716|      1|                state->mode = BAD;
  717|      1|                break;
  718|      1|            }
  719|     44|            if (state->head != Z_NULL)
  720|      0|                state->head->text = (int)((hold >> 8) & 1);
  721|     44|            if ((state->flags & 0x0200) && (state->wrap & 4))
  722|      1|                CRC2(state->check, hold);
  723|     44|            INITBITS();
  724|     44|            state->mode = TIME;
  725|     44|        case TIME:
  726|     44|            NEEDBITS(32);
  727|     44|            if (state->head != Z_NULL)
  728|      0|                state->head->time = hold;
  729|     44|            if ((state->flags & 0x0200) && (state->wrap & 4))
  730|      1|                CRC4(state->check, hold);
  731|     44|            INITBITS();
  732|     44|            state->mode = OS;
  733|     44|        case OS:
  734|     44|            NEEDBITS(16);
  735|     44|            if (state->head != Z_NULL) {
  736|      0|                state->head->xflags = (int)(hold & 0xff);
  737|      0|                state->head->os = (int)(hold >> 8);
  738|      0|            }
  739|     44|            if ((state->flags & 0x0200) && (state->wrap & 4))
  740|      1|                CRC2(state->check, hold);
  741|     44|            INITBITS();
  742|     44|            state->mode = EXLEN;
  743|     44|        case EXLEN:
  744|     44|            if (state->flags & 0x0400) {
  745|      0|                NEEDBITS(16);
  746|      0|                state->length = (unsigned)(hold);
  747|      0|                if (state->head != Z_NULL)
  748|      0|                    state->head->extra_len = (unsigned)hold;
  749|      0|                if ((state->flags & 0x0200) && (state->wrap & 4))
  750|      0|                    CRC2(state->check, hold);
  751|      0|                INITBITS();
  752|      0|            }
  753|     44|            else if (state->head != Z_NULL)
  754|      0|                state->head->extra = Z_NULL;
  755|     44|            state->mode = EXTRA;
  756|     44|        case EXTRA:
  757|     44|            if (state->flags & 0x0400) {
  758|      0|                copy = state->length;
  759|      0|                if (copy > have) copy = have;
  760|      0|                if (copy) {
  761|      0|                    if (state->head != Z_NULL &&
  762|      0|                        state->head->extra != Z_NULL) {
  763|      0|                        len = state->head->extra_len - state->length;
  764|      0|                        zmemcpy(state->head->extra + len, next,
  765|      0|                                len + copy > state->head->extra_max ?
  766|      0|                                state->head->extra_max - len : copy);
  767|      0|                    }
  768|      0|                    if ((state->flags & 0x0200) && (state->wrap & 4))
  769|      0|                        state->check = crc32(state->check, next, copy);
  770|      0|                    have -= copy;
  771|      0|                    next += copy;
  772|      0|                    state->length -= copy;
  773|      0|                }
  774|      0|                if (state->length) goto inf_leave;
  775|      0|            }
  776|     44|            state->length = 0;
  777|     44|            state->mode = NAME;
  778|     44|        case NAME:
  779|     44|            if (state->flags & 0x0800) {
  780|      0|                if (have == 0) goto inf_leave;
  781|      0|                copy = 0;
  782|      0|                do {
  783|      0|                    len = (unsigned)(next[copy++]);
  784|      0|                    if (state->head != Z_NULL &&
  785|      0|                            state->head->name != Z_NULL &&
  786|      0|                            state->length < state->head->name_max)
  787|      0|                        state->head->name[state->length++] = (Bytef)len;
  788|      0|                } while (len && copy < have);
  789|      0|                if ((state->flags & 0x0200) && (state->wrap & 4))
  790|      0|                    state->check = crc32(state->check, next, copy);
  791|      0|                have -= copy;
  792|      0|                next += copy;
  793|      0|                if (len) goto inf_leave;
  794|      0|            }
  795|     44|            else if (state->head != Z_NULL)
  796|      0|                state->head->name = Z_NULL;
  797|     44|            state->length = 0;
  798|     44|            state->mode = COMMENT;
  799|     44|        case COMMENT:
  800|     44|            if (state->flags & 0x1000) {
  801|      0|                if (have == 0) goto inf_leave;
  802|      0|                copy = 0;
  803|      0|                do {
  804|      0|                    len = (unsigned)(next[copy++]);
  805|      0|                    if (state->head != Z_NULL &&
  806|      0|                            state->head->comment != Z_NULL &&
  807|      0|                            state->length < state->head->comm_max)
  808|      0|                        state->head->comment[state->length++] = (Bytef)len;
  809|      0|                } while (len && copy < have);
  810|      0|                if ((state->flags & 0x0200) && (state->wrap & 4))
  811|      0|                    state->check = crc32(state->check, next, copy);
  812|      0|                have -= copy;
  813|      0|                next += copy;
  814|      0|                if (len) goto inf_leave;
  815|      0|            }
  816|     44|            else if (state->head != Z_NULL)
  817|      0|                state->head->comment = Z_NULL;
  818|     44|            state->mode = HCRC;
  819|     44|        case HCRC:
  820|     44|            if (state->flags & 0x0200) {
  821|      1|                NEEDBITS(16);
  822|      1|                if ((state->wrap & 4) && hold != (state->check & 0xffff)) {
  823|      1|                    strm->msg = (char *)"header crc mismatch";
  824|      1|                    state->mode = BAD;
  825|      1|                    break;
  826|      1|                }
  827|      0|                INITBITS();
  828|      0|            }
  829|     43|            if (state->head != Z_NULL) {
  830|      0|                state->head->hcrc = (int)((state->flags >> 9) & 1);
  831|      0|                state->head->done = 1;
  832|      0|            }
  833|     43|            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  834|     43|            state->mode = TYPE;
  835|     43|            break;
  836|      0|#endif
  837|      0|        case DICTID:
  838|      0|            NEEDBITS(32);
  839|      0|            strm->adler = state->check = ZSWAP32(hold);
  840|      0|            INITBITS();
  841|      0|            state->mode = DICT;
  842|      0|        case DICT:
  843|      0|            if (state->havedict == 0) {
  844|      0|                RESTORE();
  845|      0|                return Z_NEED_DICT;
  846|      0|            }
  847|      0|            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  848|      0|            state->mode = TYPE;
  849|     57|        case TYPE:
  850|     57|            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
  851|     57|        case TYPEDO:
  852|     57|            if (state->last) {
  853|     14|                BYTEBITS();
  854|     14|                state->mode = CHECK;
  855|     14|                break;
  856|     14|            }
  857|     43|            NEEDBITS(3);
  858|     42|            state->last = BITS(1);
  859|     42|            DROPBITS(1);
  860|     42|            switch (BITS(2)) {
  861|      2|            case 0:                             /* stored block */
  862|      2|                Tracev((stderr, "inflate:     stored block%s\n",
  863|      2|                        state->last ? " (last)" : ""));
  864|      2|                state->mode = STORED;
  865|      2|                break;
  866|     35|            case 1:                             /* fixed block */
  867|     35|                fixedtables(state);
  868|     35|                Tracev((stderr, "inflate:     fixed codes block%s\n",
  869|     35|                        state->last ? " (last)" : ""));
  870|     35|                state->mode = LEN_;             /* decode codes */
  871|     35|                if (flush == Z_TREES) {
  872|      0|                    DROPBITS(2);
  873|      0|                    goto inf_leave;
  874|      0|                }
  875|     35|                break;
  876|     35|            case 2:                             /* dynamic block */
  877|      3|                Tracev((stderr, "inflate:     dynamic codes block%s\n",
  878|      3|                        state->last ? " (last)" : ""));
  879|      3|                state->mode = TABLE;
  880|      3|                break;
  881|      2|            case 3:
  882|      2|                strm->msg = (char *)"invalid block type";
  883|      2|                state->mode = BAD;
  884|     42|            }
  885|     42|            DROPBITS(2);
  886|     42|            break;
  887|      2|        case STORED:
  888|      2|            BYTEBITS();                         /* go to byte boundary */
  889|      2|            NEEDBITS(32);
  890|      2|            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  891|      2|                strm->msg = (char *)"invalid stored block lengths";
  892|      2|                state->mode = BAD;
  893|      2|                break;
  894|      2|            }
  895|      0|            state->length = (unsigned)hold & 0xffff;
  896|      0|            Tracev((stderr, "inflate:       stored length %u\n",
  897|      0|                    state->length));
  898|      0|            INITBITS();
  899|      0|            state->mode = COPY_;
  900|      0|            if (flush == Z_TREES) goto inf_leave;
  901|      0|        case COPY_:
  902|      0|            state->mode = COPY;
  903|      0|        case COPY:
  904|      0|            copy = state->length;
  905|      0|            if (copy) {
  906|      0|                if (copy > have) copy = have;
  907|      0|                if (copy > left) copy = left;
  908|      0|                if (copy == 0) goto inf_leave;
  909|      0|                zmemcpy(put, next, copy);
  910|      0|                have -= copy;
  911|      0|                next += copy;
  912|      0|                left -= copy;
  913|      0|                put += copy;
  914|      0|                state->length -= copy;
  915|      0|                break;
  916|      0|            }
  917|      0|            Tracev((stderr, "inflate:       stored end\n"));
  918|      0|            state->mode = TYPE;
  919|      0|            break;
  920|      3|        case TABLE:
  921|      3|            NEEDBITS(14);
  922|      3|            state->nlen = BITS(5) + 257;
  923|      3|            DROPBITS(5);
  924|      3|            state->ndist = BITS(5) + 1;
  925|      3|            DROPBITS(5);
  926|      3|            state->ncode = BITS(4) + 4;
  927|      3|            DROPBITS(4);
  928|      3|#ifndef PKZIP_BUG_WORKAROUND
  929|      3|            if (state->nlen > 286 || state->ndist > 30) {
  930|      0|                strm->msg = (char *)"too many length or distance symbols";
  931|      0|                state->mode = BAD;
  932|      0|                break;
  933|      0|            }
  934|      3|#endif
  935|      3|            Tracev((stderr, "inflate:       table sizes ok\n"));
  936|      3|            state->have = 0;
  937|      3|            state->mode = LENLENS;
  938|      3|        case LENLENS:
  939|     26|            while (state->have < state->ncode) {
  940|     23|                NEEDBITS(3);
  941|     23|                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  942|     23|                DROPBITS(3);
  943|     23|            }
  944|     37|            while (state->have < 19)
  945|     34|                state->lens[order[state->have++]] = 0;
  946|      3|            state->next = state->codes;
  947|      3|            state->lencode = (const code FAR *)(state->next);
  948|      3|            state->lenbits = 7;
  949|      3|            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  950|      3|                                &(state->lenbits), state->work);
  951|      3|            if (ret) {
  952|      3|                strm->msg = (char *)"invalid code lengths set";
  953|      3|                state->mode = BAD;
  954|      3|                break;
  955|      3|            }
  956|      0|            Tracev((stderr, "inflate:       code lengths ok\n"));
  957|      0|            state->have = 0;
  958|      0|            state->mode = CODELENS;
  959|      0|        case CODELENS:
  960|      0|            while (state->have < state->nlen + state->ndist) {
  961|      0|                for (;;) {
  962|      0|                    here = state->lencode[BITS(state->lenbits)];
  963|      0|                    if ((unsigned)(here.bits) <= bits) break;
  964|      0|                    PULLBYTE();
  965|      0|                }
  966|      0|                if (here.val < 16) {
  967|      0|                    DROPBITS(here.bits);
  968|      0|                    state->lens[state->have++] = here.val;
  969|      0|                }
  970|      0|                else {
  971|      0|                    if (here.val == 16) {
  972|      0|                        NEEDBITS(here.bits + 2);
  973|      0|                        DROPBITS(here.bits);
  974|      0|                        if (state->have == 0) {
  975|      0|                            strm->msg = (char *)"invalid bit length repeat";
  976|      0|                            state->mode = BAD;
  977|      0|                            break;
  978|      0|                        }
  979|      0|                        len = state->lens[state->have - 1];
  980|      0|                        copy = 3 + BITS(2);
  981|      0|                        DROPBITS(2);
  982|      0|                    }
  983|      0|                    else if (here.val == 17) {
  984|      0|                        NEEDBITS(here.bits + 3);
  985|      0|                        DROPBITS(here.bits);
  986|      0|                        len = 0;
  987|      0|                        copy = 3 + BITS(3);
  988|      0|                        DROPBITS(3);
  989|      0|                    }
  990|      0|                    else {
  991|      0|                        NEEDBITS(here.bits + 7);
  992|      0|                        DROPBITS(here.bits);
  993|      0|                        len = 0;
  994|      0|                        copy = 11 + BITS(7);
  995|      0|                        DROPBITS(7);
  996|      0|                    }
  997|      0|                    if (state->have + copy > state->nlen + state->ndist) {
  998|      0|                        strm->msg = (char *)"invalid bit length repeat";
  999|      0|                        state->mode = BAD;
 1000|      0|                        break;
 1001|      0|                    }
 1002|      0|                    while (copy--)
 1003|      0|                        state->lens[state->have++] = (unsigned short)len;
 1004|      0|                }
 1005|      0|            }
 1006|       |
 1007|       |            /* handle error breaks in while */
 1008|      0|            if (state->mode == BAD) break;
 1009|       |
 1010|       |            /* check for end-of-block code (better have one) */
 1011|      0|            if (state->lens[256] == 0) {
 1012|      0|                strm->msg = (char *)"invalid code -- missing end-of-block";
 1013|      0|                state->mode = BAD;
 1014|      0|                break;
 1015|      0|            }
 1016|       |
 1017|       |            /* build code tables -- note: do not change the lenbits or distbits
 1018|       |               values here (9 and 6) without reading the comments in inftrees.h
 1019|       |               concerning the ENOUGH constants, which depend on those values */
 1020|      0|            state->next = state->codes;
 1021|      0|            state->lencode = (const code FAR *)(state->next);
 1022|      0|            state->lenbits = 9;
 1023|      0|            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
 1024|      0|                                &(state->lenbits), state->work);
 1025|      0|            if (ret) {
 1026|      0|                strm->msg = (char *)"invalid literal/lengths set";
 1027|      0|                state->mode = BAD;
 1028|      0|                break;
 1029|      0|            }
 1030|      0|            state->distcode = (const code FAR *)(state->next);
 1031|      0|            state->distbits = 6;
 1032|      0|            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
 1033|      0|                            &(state->next), &(state->distbits), state->work);
 1034|      0|            if (ret) {
 1035|      0|                strm->msg = (char *)"invalid distances set";
 1036|      0|                state->mode = BAD;
 1037|      0|                break;
 1038|      0|            }
 1039|      0|            Tracev((stderr, "inflate:       codes ok\n"));
 1040|      0|            state->mode = LEN_;
 1041|      0|            if (flush == Z_TREES) goto inf_leave;
 1042|     35|        case LEN_:
 1043|     35|            state->mode = LEN;
 1044|    106|        case LEN:
 1045|    106|            if (have >= 6 && left >= 258) {
 1046|     51|                RESTORE();
 1047|     51|                inflate_fast(strm, out);
 1048|     51|                LOAD();
 1049|     51|                if (state->mode == TYPE)
 1050|     10|                    state->back = -1;
 1051|     51|                break;
 1052|     51|            }
 1053|     55|            state->back = 0;
 1054|    102|            for (;;) {
 1055|    102|                here = state->lencode[BITS(state->lenbits)];
 1056|    102|                if ((unsigned)(here.bits) <= bits) break;
 1057|     55|                PULLBYTE();
 1058|     55|            }
 1059|     47|            if (here.op && (here.op & 0xf0) == 0) {
 1060|      0|                last = here;
 1061|      0|                for (;;) {
 1062|      0|                    here = state->lencode[last.val +
 1063|      0|                            (BITS(last.bits + last.op) >> last.bits)];
 1064|      0|                    if ((unsigned)(last.bits + here.bits) <= bits) break;
 1065|      0|                    PULLBYTE();
 1066|      0|                }
 1067|      0|                DROPBITS(last.bits);
 1068|      0|                state->back += last.bits;
 1069|      0|            }
 1070|     47|            DROPBITS(here.bits);
 1071|     47|            state->back += here.bits;
 1072|     47|            state->length = (unsigned)here.val;
 1073|     47|            if ((int)(here.op) == 0) {
 1074|     35|                Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
 1075|     35|                        "inflate:         literal '%c'\n" :
 1076|     35|                        "inflate:         literal 0x%02x\n", here.val));
 1077|     35|                state->mode = LIT;
 1078|     35|                break;
 1079|     35|            }
 1080|     12|            if (here.op & 32) {
 1081|      4|                Tracevv((stderr, "inflate:         end of block\n"));
 1082|      4|                state->back = -1;
 1083|      4|                state->mode = TYPE;
 1084|      4|                break;
 1085|      4|            }
 1086|      8|            if (here.op & 64) {
 1087|      0|                strm->msg = (char *)"invalid literal/length code";
 1088|      0|                state->mode = BAD;
 1089|      0|                break;
 1090|      0|            }
 1091|      8|            state->extra = (unsigned)(here.op) & 15;
 1092|      8|            state->mode = LENEXT;
 1093|      8|        case LENEXT:
 1094|      8|            if (state->extra) {
 1095|      7|                NEEDBITS(state->extra);
 1096|      7|                state->length += BITS(state->extra);
 1097|      7|                DROPBITS(state->extra);
 1098|      7|                state->back += state->extra;
 1099|      7|            }
 1100|      8|            Tracevv((stderr, "inflate:         length %u\n", state->length));
 1101|      8|            state->was = state->length;
 1102|      8|            state->mode = DIST;
 1103|      9|        case DIST:
 1104|     15|            for (;;) {
 1105|     15|                here = state->distcode[BITS(state->distbits)];
 1106|     15|                if ((unsigned)(here.bits) <= bits) break;
 1107|      8|                PULLBYTE();
 1108|      8|            }
 1109|      7|            if ((here.op & 0xf0) == 0) {
 1110|      0|                last = here;
 1111|      0|                for (;;) {
 1112|      0|                    here = state->distcode[last.val +
 1113|      0|                            (BITS(last.bits + last.op) >> last.bits)];
 1114|      0|                    if ((unsigned)(last.bits + here.bits) <= bits) break;
 1115|      0|                    PULLBYTE();
 1116|      0|                }
 1117|      0|                DROPBITS(last.bits);
 1118|      0|                state->back += last.bits;
 1119|      0|            }
 1120|      7|            DROPBITS(here.bits);
 1121|      7|            state->back += here.bits;
 1122|      7|            if (here.op & 64) {
 1123|      1|                strm->msg = (char *)"invalid distance code";
 1124|      1|                state->mode = BAD;
 1125|      1|                break;
 1126|      1|            }
 1127|      6|            state->offset = (unsigned)here.val;
 1128|      6|            state->extra = (unsigned)(here.op) & 15;
 1129|      6|            state->mode = DISTEXT;
 1130|      8|        case DISTEXT:
 1131|      8|            if (state->extra) {
 1132|      7|                NEEDBITS(state->extra);
 1133|      3|                state->offset += BITS(state->extra);
 1134|      3|                DROPBITS(state->extra);
 1135|      3|                state->back += state->extra;
 1136|      3|            }
 1137|       |#ifdef INFLATE_STRICT
 1138|       |            if (state->offset > state->dmax) {
 1139|       |                strm->msg = (char *)"invalid distance too far back";
 1140|       |                state->mode = BAD;
 1141|       |                break;
 1142|       |            }
 1143|       |#endif
 1144|      4|            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
 1145|      4|            state->mode = MATCH;
 1146|      4|        case MATCH:
 1147|      4|            if (left == 0) goto inf_leave;
 1148|      4|            copy = out - left;
 1149|      4|            if (state->offset > copy) {         /* copy from window */
 1150|      1|                copy = state->offset - copy;
 1151|      1|                if (copy > state->whave) {
 1152|      1|                    if (state->sane) {
 1153|      1|                        strm->msg = (char *)"invalid distance too far back";
 1154|      1|                        state->mode = BAD;
 1155|      1|                        break;
 1156|      1|                    }
 1157|       |#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
 1158|       |                    Trace((stderr, "inflate.c too far\n"));
 1159|       |                    copy -= state->whave;
 1160|       |                    if (copy > state->length) copy = state->length;
 1161|       |                    if (copy > left) copy = left;
 1162|       |                    left -= copy;
 1163|       |                    state->length -= copy;
 1164|       |                    do {
 1165|       |                        *put++ = 0;
 1166|       |                    } while (--copy);
 1167|       |                    if (state->length == 0) state->mode = LEN;
 1168|       |                    break;
 1169|       |#endif
 1170|      1|                }
 1171|      0|                if (copy > state->wnext) {
 1172|      0|                    copy -= state->wnext;
 1173|      0|                    from = state->window + (state->wsize - copy);
 1174|      0|                }
 1175|      0|                else
 1176|      0|                    from = state->window + (state->wnext - copy);
 1177|      0|                if (copy > state->length) copy = state->length;
 1178|      0|            }
 1179|      3|            else {                              /* copy from output */
 1180|      3|                from = put - state->offset;
 1181|      3|                copy = state->length;
 1182|      3|            }
 1183|      3|            if (copy > left) copy = left;
 1184|      3|            left -= copy;
 1185|      3|            state->length -= copy;
 1186|    158|            do {
 1187|    158|                *put++ = *from++;
 1188|    158|            } while (--copy);
 1189|      3|            if (state->length == 0) state->mode = LEN;
 1190|      3|            break;
 1191|     35|        case LIT:
 1192|     35|            if (left == 0) goto inf_leave;
 1193|     35|            *put++ = (unsigned char)(state->length);
 1194|     35|            left--;
 1195|     35|            state->mode = LEN;
 1196|     35|            break;
 1197|     17|        case CHECK:
 1198|     17|            if (state->wrap) {
 1199|     17|                NEEDBITS(32);
 1200|     10|                out -= left;
 1201|     10|                strm->total_out += out;
 1202|     10|                state->total += out;
 1203|     10|                if ((state->wrap & 4) && out)
 1204|      0|                    strm->adler = state->check =
 1205|      0|                        UPDATE(state->check, put - out, out);
 1206|     10|                out = left;
 1207|     10|                if ((state->wrap & 4) && (
 1208|     10|#ifdef GUNZIP
 1209|     10|                     state->flags ? hold :
 1210|     10|#endif
 1211|     10|                     ZSWAP32(hold)) != state->check) {
 1212|      9|                    strm->msg = (char *)"incorrect data check";
 1213|      9|                    state->mode = BAD;
 1214|      9|                    break;
 1215|      9|                }
 1216|      1|                INITBITS();
 1217|      1|                Tracev((stderr, "inflate:   check matches trailer\n"));
 1218|      1|            }
 1219|      1|#ifdef GUNZIP
 1220|      1|            state->mode = LENGTH;
 1221|      1|        case LENGTH:
 1222|      1|            if (state->wrap && state->flags) {
 1223|      1|                NEEDBITS(32);
 1224|      1|                if (hold != (state->total & 0xffffffffUL)) {
 1225|      0|                    strm->msg = (char *)"incorrect length check";
 1226|      0|                    state->mode = BAD;
 1227|      0|                    break;
 1228|      0|                }
 1229|      1|                INITBITS();
 1230|      1|                Tracev((stderr, "inflate:   length matches trailer\n"));
 1231|      1|            }
 1232|      1|#endif
 1233|      1|            state->mode = DONE;
 1234|      1|        case DONE:
 1235|      1|            ret = Z_STREAM_END;
 1236|      1|            goto inf_leave;
 1237|     34|        case BAD:
 1238|     34|            ret = Z_DATA_ERROR;
 1239|     34|            goto inf_leave;
 1240|      0|        case MEM:
 1241|      0|            return Z_MEM_ERROR;
 1242|      0|        case SYNC:
 1243|      0|        default:
 1244|      0|            return Z_STREAM_ERROR;
 1245|    409|        }
 1246|       |
 1247|       |    /*
 1248|       |       Return from inflate(), updating the total counts and the check value.
 1249|       |       If there was no progress during the inflate() call, return a buffer
 1250|       |       error.  Call updatewindow() to create and/or update the window state.
 1251|       |       Note: a memory error from inflate() is non-recoverable.
 1252|       |     */
 1253|    116|  inf_leave:
 1254|    116|    RESTORE();
 1255|    116|    if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
 1256|     93|            (state->mode < CHECK || flush != Z_FINISH)))
 1257|     43|        if (updatewindow(strm, strm->next_out, out - strm->avail_out)) {
 1258|      0|            state->mode = MEM;
 1259|      0|            return Z_MEM_ERROR;
 1260|      0|        }
 1261|    116|    in -= strm->avail_in;
 1262|    116|    out -= strm->avail_out;
 1263|    116|    strm->total_in += in;
 1264|    116|    strm->total_out += out;
 1265|    116|    state->total += out;
 1266|    116|    if ((state->wrap & 4) && out)
 1267|     34|        strm->adler = state->check =
 1268|     34|            UPDATE(state->check, strm->next_out - out, out);
 1269|    116|    strm->data_type = (int)state->bits + (state->last ? 64 : 0) +
 1270|    116|                      (state->mode == TYPE ? 128 : 0) +
 1271|    116|                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
 1272|    116|    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
 1273|     13|        ret = Z_BUF_ERROR;
 1274|    116|    return ret;
 1275|    116|}
inflateEnd:
 1279|     60|{
 1280|     60|    struct inflate_state FAR *state;
 1281|     60|    if (inflateStateCheck(strm))
 1282|      0|        return Z_STREAM_ERROR;
 1283|     60|    state = (struct inflate_state FAR *)strm->state;
 1284|     60|    if (state->window != Z_NULL) ZFREE(strm, state->window);
 1285|     60|    ZFREE(strm, strm->state);
 1286|     60|    strm->state = Z_NULL;
 1287|     60|    Tracev((stderr, "inflate: end\n"));
 1288|     60|    return Z_OK;
 1289|     60|}
inflate.c:inflateStateCheck:
  107|    356|{
  108|    356|    struct inflate_state FAR *state;
  109|    356|    if (strm == Z_NULL ||
  110|    356|        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)
  111|      0|        return 1;
  112|    356|    state = (struct inflate_state FAR *)strm->state;
  113|    356|    if (state == Z_NULL || state->strm != strm ||
  114|    356|        state->mode < HEAD || state->mode > SYNC)
  115|      0|        return 1;
  116|    356|    return 0;
  117|    356|}
inflate.c:fixedtables:
  280|     35|{
  281|       |#ifdef BUILDFIXED
  282|       |    static int virgin = 1;
  283|       |    static code *lenfix, *distfix;
  284|       |    static code fixed[544];
  285|       |
  286|       |    /* build fixed huffman tables if first call (may not be thread safe) */
  287|       |    if (virgin) {
  288|       |        unsigned sym, bits;
  289|       |        static code *next;
  290|       |
  291|       |        /* literal/length table */
  292|       |        sym = 0;
  293|       |        while (sym < 144) state->lens[sym++] = 8;
  294|       |        while (sym < 256) state->lens[sym++] = 9;
  295|       |        while (sym < 280) state->lens[sym++] = 7;
  296|       |        while (sym < 288) state->lens[sym++] = 8;
  297|       |        next = fixed;
  298|       |        lenfix = next;
  299|       |        bits = 9;
  300|       |        inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
  301|       |
  302|       |        /* distance table */
  303|       |        sym = 0;
  304|       |        while (sym < 32) state->lens[sym++] = 5;
  305|       |        distfix = next;
  306|       |        bits = 5;
  307|       |        inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
  308|       |
  309|       |        /* do this just once */
  310|       |        virgin = 0;
  311|       |    }
  312|       |#else /* !BUILDFIXED */
  313|     35|#   include "inffixed.h"
  314|     35|#endif /* BUILDFIXED */
  315|     35|    state->lencode = lenfix;
  316|     35|    state->lenbits = 9;
  317|     35|    state->distcode = distfix;
  318|     35|    state->distbits = 5;
  319|     35|}
inflate.c:updatewindow:
  400|     43|{
  401|     43|    struct inflate_state FAR *state;
  402|     43|    unsigned dist;
  403|       |
  404|     43|    state = (struct inflate_state FAR *)strm->state;
  405|       |
  406|       |    /* if it hasn't been done already, allocate space for the window */
  407|     43|    if (state->window == Z_NULL) {
  408|     20|        state->window = (unsigned char FAR *)
  409|     20|                        ZALLOC(strm, 1U << state->wbits,
  410|     20|                               sizeof(unsigned char));
  411|     20|        if (state->window == Z_NULL) return 1;
  412|     20|    }
  413|       |
  414|       |    /* if window not in use yet, initialize */
  415|     43|    if (state->wsize == 0) {
  416|     20|        state->wsize = 1U << state->wbits;
  417|     20|        state->wnext = 0;
  418|     20|        state->whave = 0;
  419|     20|    }
  420|       |
  421|       |    /* copy state->wsize or less output bytes into the circular window */
  422|     43|    if (copy >= state->wsize) {
  423|      0|        zmemcpy(state->window, end - state->wsize, state->wsize);
  424|      0|        state->wnext = 0;
  425|      0|        state->whave = state->wsize;
  426|      0|    }
  427|     43|    else {
  428|     43|        dist = state->wsize - state->wnext;
  429|     43|        if (dist > copy) dist = copy;
  430|     43|        zmemcpy(state->window + state->wnext, end - copy, dist);
  431|     43|        copy -= dist;
  432|     43|        if (copy) {
  433|      0|            zmemcpy(state->window, end - copy, copy);
  434|      0|            state->wnext = copy;
  435|      0|            state->whave = state->wsize;
  436|      0|        }
  437|     43|        else {
  438|     43|            state->wnext += dist;
  439|     43|            if (state->wnext == state->wsize) state->wnext = 0;
  440|     43|            if (state->whave < state->wsize) state->whave += dist;
  441|     43|        }
  442|     43|    }
  443|     43|    return 0;
  444|     43|}

inflate_table:
   39|      3|{
   40|      3|    unsigned len;               /* a code's length in bits */
   41|      3|    unsigned sym;               /* index of code symbols */
   42|      3|    unsigned min, max;          /* minimum and maximum code lengths */
   43|      3|    unsigned root;              /* number of index bits for root table */
   44|      3|    unsigned curr;              /* number of index bits for current table */
   45|      3|    unsigned drop;              /* code bits to drop for sub-table */
   46|      3|    int left;                   /* number of prefix codes available */
   47|      3|    unsigned used;              /* code entries in table used */
   48|      3|    unsigned huff;              /* Huffman code */
   49|      3|    unsigned incr;              /* for incrementing code, index */
   50|      3|    unsigned fill;              /* index for replicating entries */
   51|      3|    unsigned low;               /* low bits for current root entry */
   52|      3|    unsigned mask;              /* mask for low root bits */
   53|      3|    code here;                  /* table entry for duplication */
   54|      3|    code FAR *next;             /* next available space in table */
   55|      3|    const unsigned short FAR *base;     /* base value table to use */
   56|      3|    const unsigned short FAR *extra;    /* extra bits table to use */
   57|      3|    unsigned match;             /* use base and extra for symbol >= match */
   58|      3|    unsigned short count[MAXBITS+1];    /* number of codes of each length */
   59|      3|    unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
   60|      3|    static const unsigned short lbase[31] = { /* Length codes 257..285 base */
   61|      3|        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
   62|      3|        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
   63|      3|    static const unsigned short lext[31] = { /* Length codes 257..285 extra */
   64|      3|        16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
   65|      3|        19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
   66|      3|    static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
   67|      3|        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
   68|      3|        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
   69|      3|        8193, 12289, 16385, 24577, 0, 0};
   70|      3|    static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
   71|      3|        16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
   72|      3|        23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
   73|      3|        28, 28, 29, 29, 64, 64};
   74|       |
   75|       |    /*
   76|       |       Process a set of code lengths to create a canonical Huffman code.  The
   77|       |       code lengths are lens[0..codes-1].  Each length corresponds to the
   78|       |       symbols 0..codes-1.  The Huffman code is generated by first sorting the
   79|       |       symbols by length from short to long, and retaining the symbol order
   80|       |       for codes with equal lengths.  Then the code starts with all zero bits
   81|       |       for the first code of the shortest length, and the codes are integer
   82|       |       increments for the same length, and zeros are appended as the length
   83|       |       increases.  For the deflate format, these bits are stored backwards
   84|       |       from their more natural integer increment ordering, and so when the
   85|       |       decoding tables are built in the large loop below, the integer codes
   86|       |       are incremented backwards.
   87|       |
   88|       |       This routine assumes, but does not check, that all of the entries in
   89|       |       lens[] are in the range 0..MAXBITS.  The caller must assure this.
   90|       |       1..MAXBITS is interpreted as that code length.  zero means that that
   91|       |       symbol does not occur in this code.
   92|       |
   93|       |       The codes are sorted by computing a count of codes for each length,
   94|       |       creating from that a table of starting indices for each length in the
   95|       |       sorted table, and then entering the symbols in order in the sorted
   96|       |       table.  The sorted table is work[], with that space being provided by
   97|       |       the caller.
   98|       |
   99|       |       The length counts are used for other purposes as well, i.e. finding
  100|       |       the minimum and maximum length codes, determining if there are any
  101|       |       codes at all, checking for a valid set of lengths, and looking ahead
  102|       |       at length counts to determine sub-table sizes when building the
  103|       |       decoding tables.
  104|       |     */
  105|       |
  106|       |    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  107|     51|    for (len = 0; len <= MAXBITS; len++)
  108|     48|        count[len] = 0;
  109|     60|    for (sym = 0; sym < codes; sym++)
  110|     57|        count[lens[sym]]++;
  111|       |
  112|       |    /* bound code lengths, force root to be within code lengths */
  113|      3|    root = *bits;
  114|     29|    for (max = MAXBITS; max >= 1; max--)
  115|     29|        if (count[max] != 0) break;
  116|      3|    if (root > max) root = max;
  117|      3|    if (max == 0) {                     /* no symbols to code at all */
  118|      0|        here.op = (unsigned char)64;    /* invalid code marker */
  119|      0|        here.bits = (unsigned char)1;
  120|      0|        here.val = (unsigned short)0;
  121|      0|        *(*table)++ = here;             /* make a table to force an error */
  122|      0|        *(*table)++ = here;
  123|      0|        *bits = 1;
  124|      0|        return 0;     /* no symbols, but wait for decoding to report error */
  125|      0|    }
  126|      5|    for (min = 1; min < max; min++)
  127|      5|        if (count[min] != 0) break;
  128|      3|    if (root < min) root = min;
  129|       |
  130|       |    /* check for an over-subscribed or incomplete set of lengths */
  131|      3|    left = 1;
  132|     33|    for (len = 1; len <= MAXBITS; len++) {
  133|     31|        left <<= 1;
  134|     31|        left -= count[len];
  135|     31|        if (left < 0) return -1;        /* over-subscribed */
  136|     31|    }
  137|      2|    if (left > 0 && (type == CODES || max != 1))
  138|      2|        return -1;                      /* incomplete set */
  139|       |
  140|       |    /* generate offsets into symbol table for each length for sorting */
  141|      0|    offs[1] = 0;
  142|      0|    for (len = 1; len < MAXBITS; len++)
  143|      0|        offs[len + 1] = offs[len] + count[len];
  144|       |
  145|       |    /* sort symbols by length, by symbol order within each length */
  146|      0|    for (sym = 0; sym < codes; sym++)
  147|      0|        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  148|       |
  149|       |    /*
  150|       |       Create and fill in decoding tables.  In this loop, the table being
  151|       |       filled is at next and has curr index bits.  The code being used is huff
  152|       |       with length len.  That code is converted to an index by dropping drop
  153|       |       bits off of the bottom.  For codes where len is less than drop + curr,
  154|       |       those top drop + curr - len bits are incremented through all values to
  155|       |       fill the table with replicated entries.
  156|       |
  157|       |       root is the number of index bits for the root table.  When len exceeds
  158|       |       root, sub-tables are created pointed to by the root entry with an index
  159|       |       of the low root bits of huff.  This is saved in low to check for when a
  160|       |       new sub-table should be started.  drop is zero when the root table is
  161|       |       being filled, and drop is root when sub-tables are being filled.
  162|       |
  163|       |       When a new sub-table is needed, it is necessary to look ahead in the
  164|       |       code lengths to determine what size sub-table is needed.  The length
  165|       |       counts are used for this, and so count[] is decremented as codes are
  166|       |       entered in the tables.
  167|       |
  168|       |       used keeps track of how many table entries have been allocated from the
  169|       |       provided *table space.  It is checked for LENS and DIST tables against
  170|       |       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
  171|       |       the initial root table size constants.  See the comments in inftrees.h
  172|       |       for more information.
  173|       |
  174|       |       sym increments through all symbols, and the loop terminates when
  175|       |       all codes of length max, i.e. all codes, have been processed.  This
  176|       |       routine permits incomplete codes, so another loop after this one fills
  177|       |       in the rest of the decoding tables with invalid code markers.
  178|       |     */
  179|       |
  180|       |    /* set up for code type */
  181|      0|    switch (type) {
  182|      0|    case CODES:
  183|      0|        base = extra = work;    /* dummy value--not used */
  184|      0|        match = 20;
  185|      0|        break;
  186|      0|    case LENS:
  187|      0|        base = lbase;
  188|      0|        extra = lext;
  189|      0|        match = 257;
  190|      0|        break;
  191|      0|    default:    /* DISTS */
  192|      0|        base = dbase;
  193|      0|        extra = dext;
  194|      0|        match = 0;
  195|      0|    }
  196|       |
  197|       |    /* initialize state for loop */
  198|      0|    huff = 0;                   /* starting code */
  199|      0|    sym = 0;                    /* starting code symbol */
  200|      0|    len = min;                  /* starting code length */
  201|      0|    next = *table;              /* current table to fill in */
  202|      0|    curr = root;                /* current table index bits */
  203|      0|    drop = 0;                   /* current bits to drop from code for index */
  204|      0|    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
  205|      0|    used = 1U << root;          /* use root table entries */
  206|      0|    mask = used - 1;            /* mask for comparing low */
  207|       |
  208|       |    /* check available table space */
  209|      0|    if ((type == LENS && used > ENOUGH_LENS) ||
  210|      0|        (type == DISTS && used > ENOUGH_DISTS))
  211|      0|        return 1;
  212|       |
  213|       |    /* process all codes and make table entries */
  214|      0|    for (;;) {
  215|       |        /* create table entry */
  216|      0|        here.bits = (unsigned char)(len - drop);
  217|      0|        if (work[sym] + 1U < match) {
  218|      0|            here.op = (unsigned char)0;
  219|      0|            here.val = work[sym];
  220|      0|        }
  221|      0|        else if (work[sym] >= match) {
  222|      0|            here.op = (unsigned char)(extra[work[sym] - match]);
  223|      0|            here.val = base[work[sym] - match];
  224|      0|        }
  225|      0|        else {
  226|      0|            here.op = (unsigned char)(32 + 64);         /* end of block */
  227|      0|            here.val = 0;
  228|      0|        }
  229|       |
  230|       |        /* replicate for those indices with low len bits equal to huff */
  231|      0|        incr = 1U << (len - drop);
  232|      0|        fill = 1U << curr;
  233|      0|        min = fill;                 /* save offset to next table */
  234|      0|        do {
  235|      0|            fill -= incr;
  236|      0|            next[(huff >> drop) + fill] = here;
  237|      0|        } while (fill != 0);
  238|       |
  239|       |        /* backwards increment the len-bit code huff */
  240|      0|        incr = 1U << (len - 1);
  241|      0|        while (huff & incr)
  242|      0|            incr >>= 1;
  243|      0|        if (incr != 0) {
  244|      0|            huff &= incr - 1;
  245|      0|            huff += incr;
  246|      0|        }
  247|      0|        else
  248|      0|            huff = 0;
  249|       |
  250|       |        /* go to next symbol, update count, len */
  251|      0|        sym++;
  252|      0|        if (--(count[len]) == 0) {
  253|      0|            if (len == max) break;
  254|      0|            len = lens[work[sym]];
  255|      0|        }
  256|       |
  257|       |        /* create new sub-table if needed */
  258|      0|        if (len > root && (huff & mask) != low) {
  259|       |            /* if first time, transition to sub-tables */
  260|      0|            if (drop == 0)
  261|      0|                drop = root;
  262|       |
  263|       |            /* increment past last table */
  264|      0|            next += min;            /* here min is 1 << curr */
  265|       |
  266|       |            /* determine length of next table */
  267|      0|            curr = len - drop;
  268|      0|            left = (int)(1 << curr);
  269|      0|            while (curr + drop < max) {
  270|      0|                left -= count[curr + drop];
  271|      0|                if (left <= 0) break;
  272|      0|                curr++;
  273|      0|                left <<= 1;
  274|      0|            }
  275|       |
  276|       |            /* check for enough space */
  277|      0|            used += 1U << curr;
  278|      0|            if ((type == LENS && used > ENOUGH_LENS) ||
  279|      0|                (type == DISTS && used > ENOUGH_DISTS))
  280|      0|                return 1;
  281|       |
  282|       |            /* point entry in root table to sub-table */
  283|      0|            low = huff & mask;
  284|      0|            (*table)[low].op = (unsigned char)curr;
  285|      0|            (*table)[low].bits = (unsigned char)root;
  286|      0|            (*table)[low].val = (unsigned short)(next - *table);
  287|      0|        }
  288|      0|    }
  289|       |
  290|       |    /* fill in remaining table entry if code is incomplete (guaranteed to have
  291|       |       at most one remaining entry, since if the code is incomplete, the
  292|       |       maximum code length that was allowed to get this far is one bit) */
  293|      0|    if (huff != 0) {
  294|      0|        here.op = (unsigned char)64;            /* invalid code marker */
  295|      0|        here.bits = (unsigned char)(len - drop);
  296|      0|        here.val = (unsigned short)0;
  297|      0|        next[huff] = here;
  298|      0|    }
  299|       |
  300|       |    /* set return parameters */
  301|      0|    *table += used;
  302|      0|    *bits = root;
  303|      0|    return 0;
  304|      0|}

zlibVersion:
   28|     50|{
   29|     50|    return ZLIB_VERSION;
   30|     50|}

